---
title: User interface having a carousel view for representing structured data
abstract: A carousel view is described. In an implementation, a method includes determining a number of items that are included in data. A carousel is then generated for output in a user interface. The carousel has a plurality of bins, each of which representing a corresponding one of the items. The carousel has a radius for display of each of the bins based on the determined number of items.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08028250&OS=08028250&RS=08028250
owner: Microsoft Corporation
number: 08028250
owner_city: Redmond
owner_country: US
publication_date: 20040831
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Overview","CONCLUSION"],"p":["The present invention generally relates to the field of user interfaces and more particularly relates to a user interface having a carousel view.","Users are continually exposed to ever increasing amounts of information. For example, a user may perform a search using a search engine to locate web sites of interest, may peruse an address book to locate a particular contact, may navigate through songs in a playlist, locate a particular file on a computer, and so on. Each of these items may be displayed utilizing a variety of techniques so that the user may locate a particular item of interest.","Once such technique utilized to display a collection of items in a user interface is referred to as a \u201clist view\u201d. In a list view, each item of the list is allocated a portion of a display area in which to be rendered. The portions corresponding to each of the items in the list are then arranged, such as placed in an order, one after another, placed in a grid, and so on. The list may be configured such that geometric location of the items in the list reflects a property of the items. For example, items in a list may be arranged in alphabetical order, date created, when modified, and so on. If there are more items in the list than fit on the display area at any one time, the user may scroll through the list to reveal the additional items that would not be displayed otherwise.","List views, however, are typically unable to show complicated relationships between the items in the list. For example, traditional list views are unable to show hierarchical data structures, such as organizational charts, directory trees, and so one. A traditional list view, for instance, may sequentially order items in the list, one after another, but cannot be utilized to show an organizational chart because of the inability of the list view to show hierarchical relationships that exist in addition to the sequential ordering of the items.","In order to show hierarchical data structures, a \u201ctree view\u201d may be utilized. A tree view displays items in a list. However, each item in the list in a tree view can also include another list of items displayed \u201cabove\u201d or \u201cbelow\u201d it in a tree. Typically, the items at one level of the tree are spaced further apart to allow room for the items at the next level of the tree. Accordingly, tree views are also limited by the number of items in the list than fit on the display area at any one time. Therefore, the user must scroll through the items in a tree view to reveal additional items that would not be displayed otherwise. Further, if there are more hierarchical levels in the tree than can be displayed at any one time, the user must also scroll through the levels to determine the relationship(s), if any, of items in one hierarchical level of the tree with items in another hierarchical level of the tree. Therefore, these traditional ways of viewing collections of items do not allow a user to readily judge a size of a result that has more items than can be viewed on the user interface at any one time.","Accordingly, there is a continuing need for improved techniques for viewing collections of items.","A carousel view is described for use in a user interface. The carousel view may provide a variety of functionality for visualizing and navigating an arbitrary graph of information in the user interface. For example, the carousel view may provide a display of a carousel having a plurality of bins. The plurality of bins may be arranged at a distance (e.g., a radius) from a common point to form the carousel. Each of the bins may be utilized to store an item included in data, such as a song from a playlist, a contact in an address book, and so on. A user may rotate (e.g., spin) the carousel to locate a particular bin that represents a desired item.","The carousel view may be configured to show a large number of items in a limited display area. For example, the carousel may include a \u201cclipping area\u201d which represents items that cannot be displayed in the user interface at that time. Even though a clipping area may be utilized, the carousel may still provide a user with the ability to compare the relative sizes of two or more collections of items. For instance, each carousel may be configured to have a radius based on the number of items in the carousel. Therefore, a user may compare carousels, one to another, to determine the relative sizes of the carousels, even if one or more of them include a clipping area. Further, a plurality of carousels may be arranged to represent hierarchical data, thereby providing the user with distinct \u201cglance-able\u201d shapes for a particular set of related items that facilitate user understanding and comparison of structures defined by the items.","The same reference numbers are utilized in instances in the discussion to reference like structures and components.","A carousel view is described which provides a variety of techniques for visualizing and navigating an arbitrary graph of information. As previously described, a carousel view may provide a display of a carousel having a plurality of bins. The plurality of bins, each representing an item in a collection of data, may be arranged at a distance (e.g., a radius) from a common point to form the carousel. The bins may be configured in a variety of ways to represent a corresponding item, such as a graphical depiction of the item (e.g., a thumbnail picture), an icon, a container having a textual description of the corresponding item, and so on. A user may rotate (e.g., spin) the carousel to locate a particular bin that represents a desired item.","A carousel may be utilized to display a wide variety of items in a manner which optimizes use of a display area in a user interface. For example, when a small number of items is received (e.g., less than eight), the carousel view may output a carousel having a bin for each of the items such that each of the bins is selectable by a user. When a larger number of items are received (e.g., more than eight), spacing between bins in the carousel may be arranged accordingly. For instance, bins in the carousel that are positioned for selection by a user (e.g., located in the \u201cfront\u201d of a display area) may be spaced further apart than bins which are not positioned for selection by the user (e.g., bins located in the \u201cback\u201d of the display area). In another instance, an even larger number of items may be received (e.g., more than twelve) such that bins corresponding to each of the items are not concurrently displayable. Therefore, the carousel may be configured to employ a \u201cclipping area\u201d. The clipping area of the carousel represents items in the carousel which are not currently displayable on the display device. The clipping area may be represented in a variety of ways, such as a \u201cblanked-out\u201d area of the carousel, a tunnel, mist, a cloud, and so on. As the carousel is rotated, bins may appear to \u201center\u201d and \u201cleave\u201d the clipping area, thereby conserving space in the display area utilized to display the carousel.","The carousel view may also be configured to describe a relative number of items in the carousel. The carousel view, for instance, may include a plurality of carousels, each of which having a radius that is calculated based on a number of items in the respective carousel. For example, the radius may be a function of the number of items in the respective carousel such that a carousel that represents a large number of items (e.g., 100 items) is larger that a carousel that represents a small number of items (e.g., less than 12 items). Thus, a user may compare the carousels, one to another, based on the relative \u201csize\u201d of the carousels without having to manually count the number of items in the carousels, even if one or both of the carousels employ a clipping area.","A hierarchical carousel view may also be provided for representing hierarchical data. For example, data may be received which includes a plurality of hierarchical levels. A carousel may be provided for each of the levels and that includes bins which represent items in the data at that level. The carousels for each of the hierarchical levels may also be arranged in accordance with the hierarchy, such as arranged in an order that corresponds to an order of the hierarchical levels. Through arrangement of the carousels, a user may be provided with glanceable shapes that aid the user's understanding of the data represented by the carousels. For example, multiple carousels may indicate multiple hierarchical levels, radii of the respective carousels may indicate a number of items in the respective carousels, and so on, such that an overall shape of the hierarchical data is provided for interpretation by the user. Further discussion of these and other features may be found in starting in relation to  after discussion of an exemplary environment in the following section which is operable to employ the user interface having a carousel view.","Exemplary Environment",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1","b":["100","100","102","102","102","102"]},"The computing device  is communicatively coupled to a display device  for providing a visual output to a user. Although the display device  is illustrated as separate from the computing device , in another implementation the computing device  includes the display device , such as a wireless phone, a television having an integrated set-top box, and so forth.","The computing device  includes a processor  and memory or computer-readable storage media . The processor  is not limited by the materials from which it is formed or the processing mechanisms employed therein. For example, the processor  may be formed from semiconductor(s) and\/or transistors (e.g., electronic integrated circuits (ICs)). In such a context, processor-executable instructions may be electronically-executable instructions. Alternatively, the mechanisms of or for processors, and thus of or for a computing device, may include, but are not limited to, quantum computing, optical computing, mechanical computing (e.g., using nanotechnology), and so forth. Additionally, although a single memory  is shown, a wide variety of types and combinations of memory may be employed, such as random access memory (RAM), hard disk memory, removable medium memory, and so forth.","Generally, any of the functions described herein can be implemented using software, firmware (e.g., fixed logic circuitry), manual processing, or a combination of these implementations. The terms \u201cmodule,\u201d \u201cfunctionality,\u201d and \u201clogic\u201d as used herein generally represent software, firmware, or a combination of software and firmware. In the case of a software implementation, the module, functionality, or logic represents program code that performs specified tasks when executed on a processor (e.g., CPU or CPUs). The program code can be stored in one or more computer readable memory devices, such as the memory  as previously described. The features of the carousel view described herein are platform-independent, meaning that the instant messaging strategies may be implemented on a variety of commercial computing platforms having a variety of processors.","The processor  is illustrated as executing a carousel view (CV) module , which is also storable in memory . The CV module , when executed, processes a plurality of items to provide an output of one or more carousels , . Carousel  includes a plurality of bins -. Likewise, carousel  includes a plurality of bins -. Each of the bins -, - is configured to represent items for display in a user interface . For example, each of the plurality of bins - of carousel  may represent a song from a playlist, a contact from a contact list, a folder, an address of a web page received from a search engine, and so on. For example, each of the plurality of bins -, - of the first carousel  may represent a document, while each of the plurality of bins , - may represent a folder. Therefore, the user may open bin  to display the contents of the bin , such as the first carousel .","Like a physical carousel, the carousels ,  of the user interface  may include a circular base or plinth. One such circular base  is illustrated for carousel . In another implementation, the circular base  is not displayed in the user interface  but rather implied when rendered for viewing by a user. The plurality of bins - is arranged around the circular base  to form the carousel . Likewise, the plurality of bins - are arranged to form carousel . Carousels ,  are illustrated as sharing bin .","A user can rotate the plurality of bins - around the circular base  by using an input device  to access one or more particular items of interest. For example, the carousel  may store contact information for a plurality of contacts. When a user desires to locate contact information for a particular contact in a contact list, the user utilizes the input device  to rotate (e.g., spin) the carousel  until a bin having the desired contact information is displayed in \u201cfront\u201d of the carousel . For instance, bin  of carousel  is illustrated as in front of the other bins - of the carousel .","The plurality of carousels ,  may also be utilized to display hierarchical items, and therefore provide a hierarchical carousel view. For example, carousel  may include bins  and -. The user can expand bin  into a new carousel (e.g., carousel ) to display hierarchical data contained in the new carousel. Bin  is illustrated as larger than adjacent bins ,  to indicate that bin  is shared by both carousels ,  and is the bin which \u201cconnects\u201d carousel  with carousel . Thus, the plurality of carousels ,  provide a carousel view suitable for displaying a plurality of items, one or more relationships between the plurality of items, and relative numbers of items displayed in the carousels, further discussion of which may be found in relation to .","The CV module  may accept data from a variety of sources for providing the carousel view in the user interface . The CV module , for instance, is illustrated in the environment  of  as being included in an operating system . The operating system  is software (which may be provided by one or more modules) that controls the allocation and usage of hardware resources of the computing device , such as memory , processor , peripheral devices (e.g., the display device ), and so on. The operating system  is foundation software on which programs, such as word processors, spreadsheets, browsers, and so on, may utilize to utilize the hardware resources. For instance, the computing device  may include a plurality of applications (), where \u201cn\u201d can be any integer from one through \u201cN\u201d, which are illustrated as stored in memory  and are executable on the processor . Each of the plurality of applications () is executable to provide a plurality of items for output in a carousel view. Therefore, the plurality of applications () may provide the plurality of items to the CV module , through the operating system , to cause the plurality of items to be rendered in the user interface  as one or more carousels. Thus, the CV module  may provide one or more application programming interfaces (APIs) which \u201chide\u201d the details of generating the carousels ,  from the applications ().","In another implementation, the CV module  is implemented as part of the applications () themselves and is separate from the operating system . For example, application () may be configured to include an address book module that provides a carousel view for contacts in the address book. In a further implementation, the CV module  is a stand-alone module.","The CV module  may also receive data from over a network . For example, the computing device  may include a network connection device  for communicatively coupling the computing device  with another computing device , such as a web server, a remote computing device, and so on. Application (), for instance, may be executable on the processor  to provide a web browser. The user may utilize the web browser to interact with a search engine which provides a plurality of items as a result of a web search. The application () may then provide the plurality of items to the CV module  for display in the user interface  as carousel . Each of the bins , - may include an address of a respective one of a plurality of web sites found as a result of the search. By expanding a bin (e.g., bin ), carousel  is displayed in the user interface , which includes a plurality of bins -, -, each of which detailing a web page in the web site represented by bin . Although the network  is illustrated as the Internet, the network  may assume a wide variety of configurations. For example, the network  may include a wide area network (WAN), a local area network (LAN), a wireless network, a public telephone network, an intranet, and so on. Further, although a single network  is shown, the network  may be configured to include multiple networks.","By employing a carousel view, the user interface  provides a variety of additional functionality that was not available using traditional viewing techniques. For example, the carousels ,  may be utilized to depict a number of items included in a collection, even if all of the items are not displayable at any one time on the user interface . For example, a situation may be encountered in which the number of items in a result cannot be rendered at any one time on the display device . When using a traditional list view or tree view in such an instance, the user is not able to determine the number of items in the list because each of the items in the list is not displayable at any one time. In both cases, the user is forced to navigate through the display of the items, such as by using a scroll bar, to get a rough determination of the number of items in the result. Thus, when confronted with a large number of items, the user may be unable to estimate the number of items in the result, even to within an order of magnitude utilizing traditional viewing techniques.","The carousel view, however, may indicate a number of items in a result by varying a radius of a carousel. For example, carousel  is illustrated as including twelve bins - and carousel  is illustrated as including five bins - (and shares bin ). Because carousel  has a greater number of bins than carousel , carousel  is rendered as having a larger radius than carousel . Therefore, a user viewing both carousels ,  may readily determine based on the radius of each respective carousel ,  which of the carousels ,  represents a larger number of items.","Varying the radius may also be utilized to indicate a number of items even if all the items are not concurrently displayable in the user interface . For example, the CV module  may display a portion of a set which is legible to a user when viewing the user interface . Any portion of the set which cannot be displayed at that time may be represented in a variety of ways.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 2","FIG. 3","FIG. 3","FIGS. 2 and 3","FIG. 7"],"b":["200","202","302","300","200","300"]},"The carousel view also provides for an ability to represent relationships between items in one or more carousels. For example, the carousel view may enable a user to see a global shape of a collection of items. A user, for instance, may wish to compare different parts of an organizational chart  shown in , in which each circular bin of the organizational chart  represents a person in a company. A first part  of the organization chart is flat in that it includes a single hierarchical level, which is illustrated in  as a single carousel . A second part  of the organizational chart , however, may include multitude hierarchical levels, illustrated as carousels , , which illustrate multiple levels of management. Thus, the carousel view may depict such organization through arrangement of multiple carousels , , , each of which reflecting the number of items in that particular hierarchical level. When a user views the carousels , ,  in the carousel view, a sense of this global structure is provided which is difficult to obtain in a list view or tree view. In a tree view, for instance, a large number of items in the levels may not be displayed, which required the user to scroll through the view to obtain the relevant information, and then perform mental calculations to determine the number of hierarchies in the tree as well as the number of items at each level in the tree. By utilizing the carousel view, however, the user can readily compare different parts of the result set and\/or see the global shape of the result set. For instance, even though the first and second parts ,  of the organization chart  of  include the same number of items (which are represented by corresponding circular bins), the carousel view utilizing the carousels , ,  illustrates the relationships of those items through arrangement of the carousels.","Additionally, the carousel view may depict non-hierarchical relationships which could not be shown utilizing traditional viewing techniques. One such instance is clusters, an example of which is shown in . A cluster includes discreet sets of items in which one set is generally unrelated to another set. For instance, a search result  for a keyword search for documents on a computing device may include different types of documents. The carousel view may be utilized to depict the items in the search result  based on type, such as a first carousel  for a cluster of word processing documents, a second carousel  for a cluster of pictures, and a third carousel  for a cluster of MP3 files. In this example, the user, when viewing the search result , is able to determine that equal numbers of word processing documents and pictures are included in the result by viewing the respective first and second carousels , . The user is also able to determine that the search result  has a relatively fewer number of MP3 files by viewing the third carousel  (and more particularly the radius of the third carousel ), when compared to the first and second carousels , .","Graphs, which may be considered as arbitrary n-way connections of nodes (i.e., items), may also be represented utilizing a carousel view, an example of which is illustrated in .  is an illustration of an exemplary implementation of a family tree  that includes hierarchical levels of descendants arranged in corresponding carousels , , . Each of the carousels , ,  illustrates relative numbers of items (e.g., families and family members) in the respective carousels - through use of the respective radii of each of the carousels - as previously described.","Additionally, a bin  in carousel  may represent a particular family that, when selected, is expanded to show members of that family in carousel . Thus, the bin provides the ability to refer to subgroups (e.g., a family) as an entity distinct from the items in the sub-group (e.g., members of the family). Further discussion of navigation between carousels may be found in the Carousel Navigation section.","Generating a Carousel","The CV module  may be executed by a computing device  to generate one or more carousels in a variety of ways. The following sections describe examples of generating a carousel to have properties which enable a user to compare the carousel with other carousels in a carousel view.","Computing a Carousel Radius",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 7","b":["700","700","700","702","716","718","718","702","716","700","700","718","700","718","700","700","700","700"],"br":[{},{}],"in-line-formulae":[{},{}],"i":"R=a\u221a{square root over (N)}+b "},"The bins - are arranged around the outside circumference of the carousel . To arrange the bins -, each bin is allocated to occupy a certain arc of the circumference. An ideal length of this arc may be calculated depending on the representation being utilized for each of the bins. For example, if a large and\/or detailed bin representation (e.g., having a large number of pixels) is utilized to represent the bins - in the carousel , an ideal length of the arc may be set such that the bins in \u201cthe front\u201d of the carousel  are displayed as desired by the graphical artist. For example, an ideal arc length \u201cL\u201d  may be defined. For a carousel  of radius \u201cR\u201d , the ideal arc length \u201cL\u201d  corresponds to an angle \u201cT\u201d  of the carousel . \u201cT\u201d may be computed in a variety of ways, an example of which is given by the following equation:",{"@attributes":{"id":"p-0056","num":"0055"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"T","mo":"=","mrow":{"mn":"360","mo":["\u2062","\u2062","\u2062"],"mrow":[{"mo":["(",")"],"mfrac":{"mi":"L","mrow":{"mn":"2","mo":["\u2062","\u2062","\u2062"],"mi":["\u03c0","R"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}},{"mrow":{"mo":["(",")"],"mrow":{"mi":"hereinafter","mo":",","mrow":{"mo":["\u201c","\u201d"],"mrow":{"mi":["ideal","angle","equation"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}}}},"mo":"."}],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}}}}},"br":{}},"Spacing Bins in a Carousel",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 8","FIG. 8"],"b":["800","802","804","806","1","806","8","800","800","802","806","1","806","8","802","806","1","806","8","806","6","806","8","800"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 9","FIG. 9"],"b":["900","802","804","902","1","902","12","900","900","900","802","902","1","902","12","902","1","902","5","900","802","902","6","902","12","900","904"]},{"@attributes":{"id":"p-0060","num":"0059"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"U","mo":"=","mrow":{"mfrac":{"mn":"180","mrow":{"mi":"N","mo":"-","mrow":{"mo":["\u230a","\u230b"],"mfrac":{"mn":"180","mi":"T"}}}},"mo":"."}}}},"br":{},"figref":["FIG. 9","FIG. 9"],"b":["904","802","902","6","902","12","900","902","1","902","5","900","900","802","904"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 10","FIG. 9"],"b":["1000","1002","1","1002","1002","1","1002","1000","900","802","804","1002","1","1002","1000","1000","1002","1","1002","1002","1","1002"]},"In this instance, an angle \u201cZ\u201d  is defined for a \u201cclipping area\u201d , which is similar to the clipping area  described in relation to . The clipping area  defines a portion of the carousel  which represents items which are not concurrently renderable with items represented by the plurality of bins of the carousel . As previously described, the clipping area may represent these items in a variety of ways, such as a blank area of , a gray area  of , a cloud, a tunnel, and so forth. As the carousel  is rotated, bins of the carousel  will be displayed as \u201centering\u201d and \u201cleaving\u201d the clipping area . Therefore, the carousel  may be utilized to display a large number of bins with many of the bins (i.e., bins corresponding to items which are not concurrently renderable in the user interface) \u201chidden\u201d in the clipping area . The carousel  is thus similar to a list view in which items in a list are scrolled off the screen. However, because the size of the carousel  reflects the total number of bins ()-(K) (i.e., items in the list), the user is provided with an indication of the number of items represented by the carousel . For instance, while a list of 1000 items may appear similar to a list of 10,000 items in that both carousels display the same number of bins at any one time, a carousel having 10,000 items may be visibly larger than a carousel having 1000 items by having a larger radius than the radius of the carousel having 1000 items. To space the bins ()-(), (-), (-), () displayed in the \u201cback\u201d of the carousel , the carousel  may include angle \u201cU\u201d  as previously described in relation to .","Carousel Navigation","There are several ways of navigating between carousels (e.g., expanding bins, open\/closing carousels, and so on) and within a carousel (e.g., spinning). Examples of each of these navigation techniques are described in greater detail in the following sections.","Navigating Between Carousels","A carousel hierarchy can be navigated by opening and closing carousels and expanding and contracting bins. As discussed earlier in relation to , a bin may be expanded to create another carousel having additional data. For example, a carousel may be generated in which each bin represents a person that has contributed to a project. One of the bins (i.e., a representation of the \u201cperson\u201d) may be expanded to show direct reports created by that person, which are arranged as a plurality of bins in another carousel. The user may then select one of the direct reports to show other reports cited in that report, and so on. Carousels can also be opened or closed. When a carousel is closed, only those bins that are expanded are shown.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 11","b":["1100","1102","1102","1104"]},"A user may select bin  to expand a folder to show items in that folder. The bin  to be expanded is moved away from the center  of the original carousel , such as from a distance of \u201cR\u201d  to a distance of \u201cR\u201d  as shown at block . The ratio of \u201cR\u201d  to \u201cR\u201d  can be computed in a variety of ways, an example of which is shown by the following equation, where \u201cd\u201d and \u201ce\u201d are constants and \u201cd\u201d is greater than or equal to one:\n\n\n\nAt block , these new items of bin  are shown in a new carousel , which is located tangentially to the original carousel . Additionally, the remaining bins of the original carousel  may be readjusted to fill in the vacated space originally taken by bin . Although expansion of the bin  to form a new carousel has been discussed, contraction of the new carousel  may also be performed in a similar manner such that the bin  of block  is returned to form the original carousel  of block .\n",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 12","FIG. 11"],"b":["1200","1118","1200","1200","1202","1204","1202","1206","1202","1208","1210","1202","1200","1210","1200"],"sub":"1"},"The bins of the inner ring  may be arranged as previously described in relation to . In an implementation, bins - in the outer ring  are subject to different arrangement rules than the bins of the inner ring . For example, each of the bins , ,  in the outer ring  may have a corresponding child carousel , ,  which is tangentially positioned adjacent to the respective bins , , .","The bins - of the outer ring  may be \u201clocked\u201d such that the corresponding child carousels , ,  do not overlap. For instance, bins - may be displayed such that the user may still spin the bins of the inner ring  without affecting the bins - of the outer ring . Thus, placement of the bins - and the corresponding carousels - may be preserved yet still enable the user to navigate through other bins in the inner ring ","The carousels - may be arranged in a variety of ways. For example, the CV module  of  may be executed to automatically arrange the bins - to prevent the carousels - from overlapping. In another example, the user may move bins on the outer ring  manually through use of the input device  of .","Opening and Closing a Carousel","To optimize the amount of information on rendered on a display device at any one time, the carousel view may support the \u201copening\u201d and \u201cclosing\u201d of carousels. For instance, when a plurality of carousels are concurrently rendered on a display device, such as when exploring an organizational chart, a situation may be encountered in which additional carousels cannot be displayed unless one or more of the currently rendered carousels are closed, an example of which is described in relation to the following figure.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 13","FIG. 12"],"b":["1300","1302","1304","1306","1306","1304","1304","1308","1304","1310","1312","1304","1314","1302","1304","1306"],"sub":"1"},"To close the inner ring  such that only the outer ring  is displayed (such as in response to an input received from a user utilizing an input device), the radius of the carousel  is reduced to \u201cR\u201d , where \u201cR\u201d  is equal to \u201cR\u201d  minus \u201cR\u201d . Thus, as shown at block , just the outer ring  is displayed at the new radius \u201cR\u201d  with the bins of the inner ring  being hidden from view.","Because the size of \u201cR\u201d  depends on the number of items in the carousel , even in the closed state of block , the size of a carousel  still represents the number of items in the carousel . In an implementation, in addition to hiding the bins of the inner ring , the carousel  may provide additional visual feedback that the carousel  is in a closed state, such as by a change of color.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 14","FIG. 13","FIG. 11","FIG. 1"],"b":["1400","110"]},"For example, a carousel hierarchy  may include a first carousel  and a second carousel  (block ). The first carousel  may be a \u201cchild\u201d of the second carousel , which is displayed in a closed state to conserve space in a user interface.","A user may then select a bin  of the first carousel  for expansion (block ). When the bin  is expanded, that bin's carousel (i.e., the first carousel ) is closed before a new carousel  is rendered (block ). The closed first and second carousels (i.e., the first and second carousels ,  of block ) are also automatically rearranged through execution of the CV module  of  to conserve space in the user interface. Although automatic closing of carousels through execution of the CV module  of  has been described, a variety of other implementations for navigating a carousel hierarchy are also contemplated, such as through manual closing and rearranging of carousels.","Navigating within a Carousel","In the previous implementations, navigation between carousels was described. Navigation may also be performed within a carousel to locate a particular bin, which may also be referred to as \u201cspinning\u201d a carousel. Spinning, for instance, may refer to a process of rotating bins in a carousel to bring a different corresponding item represented by a bin to the \u201cfront\u201d of a user interface. Spinning may be provided for a variety of reasons. For example, bins located at the \u201cback\u201d of the carousel might not be visible. A bin, for instance, may be located behind another bin in the carousel, such as bin  located behind bin  of . In another instance, a bin may be included in the \u201cclipping area\u201d  of the carousel  as shown in .","In another example illustrated in the exemplary carousel  of , bins located in the \u201cfront\u201d  of the carousel  occupy more screen space than bins located in the \u201cback\u201d  of the carousel  due to a three dimensional nature of the carousel . Therefore, to view the bins in the \u201cback\u201d  of the carousel , the user may cause the carousel  to spin such that the bins are then relocated in the \u201cfront\u201d . The carousel  supports a variety of spinning techniques, examples of which are described in the following sections.","Item Spin","By selecting a bin (for example, with a mouse click), the carousel  will rotate to place that bin in the front. Depending on which bin is selected, the item spin can cause the carousel to rotate differing amounts and\/or directions. In an implementation, selecting a bin on the right side of the carousel  will cause the carousel  to spin clockwise, while selecting a bin on the left side will cause the carousel  to spin counter-clockwise. In an implementation, because bins located in the front  of the carousel  may be evenly spaced (e.g., by angle \u201cT\u201d  of ), the user can keep their mouse positioned in one location to continuously \u201cclick-spin\u201d through all of the bins in the carousel . In another implementation, selection of the clipping area  causes bins in the clipping area  to be displayed. In a further implementation, selection of the clipping area  has no effect.","Step Spin","A user can also spin the carousel  one bin at a time, clockwise or counter-clockwise. This is known as a step spin, and in an implementation can be triggered by a mouse wheel and\/or the left\/right arrow keys. The step spin may be equivalent to performing an item spin on the bins ,  immediately adjacent to the front-most bin .","Page Spin","A page spin refers to a spin of the carousel  by however many bins that occupy ninety degrees of the front arc. For instance, as previously described in relation to , the actual number of bins involved in a page spin may depend on a total number of bins displayed by the carousel . The page spin may be implemented in a variety of ways, such as by using page-up and\/or page-down keys. The page spin may be equivalent to doing an item spin on bins located at the three o'clock or nine o'clock positions of the carousel .","Drag Spin","A front drag spin may be initiated by holding down a mouse button on a bin on the front  of the carousel . The user can spin the carousel  by dragging the mouse clockwise or counter-clockwise, which will cause the carousel  to rotate. The amount of rotation \u201c\u03b8\u201d, for instance, may correspond to the radius of the carousel  and the distance \u201cd\u201d the mouse has moved, and may be computed using the following equation:",{"@attributes":{"id":"p-0091","num":"0090"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"\u03b8","mo":"=","mrow":{"mn":"360","mo":"\u2062","mrow":{"mrow":{"mo":["(",")"],"mfrac":{"mi":"d","mrow":{"mn":"2","mo":["\u2062","\u2062","\u2062"],"mi":["\u03c0","R"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}}}},"mo":"."}}}}},"br":{},"b":["1504","1500"]},"Free Spin","The carousel  can also be made to \u201cfree spin\u201d, such as by spinning the carousel  continuously clockwise or counterclockwise. In an implementation, the free spin is initiated by holding down a mouse button in the clipping area , and then dragging the mouse to the left or right to free spin the carousel  counter-clockwise or clockwise, respectively. The further the mouse is dragged from the center of the clipping area , the faster the carousel  will free spin. The rotation rate may be made relative to the circumference of the carousel , so that a larger carousel will take a greater amount of time to make a complete rotation than a smaller carousel.","Exemplary Procedures","The following discussion describes a carousel view that may be implemented utilizing the previously described systems and devices. Aspects of each of the procedures may be implemented in hardware, firmware, or software, or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":["FIG. 16","FIG. 1","FIG. 16","FIG. 16"],"b":["1600","1602","1604","102","158","160","1602","1602","1602","1602"],"i":"n"},"A hierarchical carousel view  is then generated from the hierarchical data  (block ). For example, the CV module  of , when executed, may generate first and second carousels ,  which represent respective hierarchical levels of the hierarchical data . The first carousel  represents the manager hierarchical level, and therefore includes a bin representing each item in the hierarchical data  at that level. In this instance, bins - represent the first through the sixth managers, respectively. Likewise, bins - of the second carousel  represent the employee hierarchical level, and therefore each bin represents a corresponding item (i.e., employee) in the hierarchical data  at that level, which is this instance is illustrated as the first through the fourth employees.","To represent the relationship of hierarchical levels in the hierarchical data , a variety of techniques may be employed. As illustrated in , the second carousel  is positioned adjacent to bin , which corresponds to the sixth manager of the first carousel . In other implementations, a line may be drawn between the bin  and the second carousel , a border may be provided which surrounds both the bin  and the second carousel  (e.g., a droplet of water may be displayed which surrounds the second carousel  and the bin ), and so on. Thus, the hierarchical carousel view  may represent the hierarchical levels in the hierarchical data  and the relationships, if any, between those hierarchical levels. It should be noted that the bins in the hierarchical carousel view , and other carousel views discussed elsewhere in this document, may be configured in a variety of ways to represent corresponding items, such as a representation of a user for each of the persons described in the hierarchical data  as illustrated in .",{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 17","b":["1700","1702"]},"A carousel for output in a user interface is then generated to represent the data (block ). Generation of the carousel may include a variety of different steps. For instance, a bin may be created for each item in the data (block ). The bins may be created in a variety of ways, such as generic bins, bins that describe the corresponding items in the data (e.g., a representation of an employee for each employee in an organizational chart), and so on. A radius is computed for display of the bins based on the determined number of items (block ). As previously described in relation to , the radius may be computed utilizing a square root function and\/or a variety of other functions.","A first set of rules is applied for spacing each bin, one to another, located in a first portion of the carousel (block ). A second set of rules is applied for spacing each bin, one to another, located in a second portion of the carousel (block ). Thus, the carousel may support different spacing between bins in the carousel for display in a user interface. For example, as described in relation to , an ideal arc length \u201cL\u201d  may be computed for bins located in the \u201cfront\u201d of the carousel . An angle \u201cT\u201d , for instance, may be computed to provide that ideal arc length \u201cL\u201d . Equations utilized to provide this spacing may be referred to as the first set of rules. To space bins located at the \u201cback\u201d of the carousel  of , an angle \u201cU\u201d  is computed according to a second set of rules.","The carousel is then output for being rendered by a display device (block ). For example, the computing device  of  may output a user interface that includes the generated carousel for being rendered by the display device .",{"@attributes":{"id":"p-0102","num":"0101"},"figref":["FIG. 18","FIG. 1"],"b":["1800","1802","1804","110"]},"If the number is below the selectable threshold (decision block ), each item in the data is represented as a bin in a carousel  such that the bin is selectable by a user (block ). For example, each bin of carousel  is displayed such that it may be selected by a user utilizing an input device, such as a mouse. Therefore, if the number of items in the data is below the selectable threshold, each item is represented by a corresponding bin that may be selected by a user without rotating (e.g., spinning) the carousel.","If the number is not below (e.g., is above) the selectable threshold (decision block ), a determination is made as to whether the number is below a \u201cdisplayable\u201d threshold (decision block ). The displayable threshold defines an amount of bins that may be included in a carousel for display, including bins which are not selectable by a user. If the number is below the displayable threshold (decision block ), then a carousel  is generated having first and second collections of the items. The first collection of items is represented as bins for selection by a user, while the second collection of items are represented as bins which are not selectable by the user (block ). For example, bins ,  may represent corresponding items and are selectable by a user utilizing an input device. Bin , however, is positioned \u201cbehind\u201d the other bins of the carousel  and as such is not selectable by a user.","If the number is not below the displayable threshold (decision block ), then a carousel  is generated for first, second, and third collections of the items. As before, the first collection of items is represented as bins for selection by a user, while the second collection of items are represented as bins which are not selectable by the user (block ). In this instance, however, a third collection of items is also defined for items which are not concurrently displayable with items in the first and second collections. For example, the display threshold may define a limit of an amount of bins that are displayable in the user interface in the carousel  at any one time. Therefore, the third collection of items may be represented as a clipping area . The illustrated carousel  thus represents the first collection of items which are represented as selectable bins (e.g., bin ), the second collection of items which are represent as non-selectable bins (e.g., bins , ), and the third collection of items represented as the clipping area . In another implementation, a carousel may be provided in which each of the bins are selectable, with other items which are not concurrently displayable in the user interface as bins being represented by a clipping area, i.e. there are no bins displayed in the carousel in this implementation that are not selectable.","Although the invention has been described in language specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 18"}]},"DETDESC":[{},{}]}
