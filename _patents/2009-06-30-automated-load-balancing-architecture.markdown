---
title: Automated load balancing architecture
abstract: Systems and methods provide automated provisioning of load balancing. In one implementation, a computer-implemented method configures an access point. A request to create the access point may be received and data for the access point may be stored in a data store. The method may invoke a workflow engine. The workflow engine may assign the access point to a load balancer, configure the load balancer, assign a network address to the load balancer, and publish the network address for a plurality of clients.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08073934&OS=08073934&RS=08073934
owner: Amazon Technologies, Inc.
number: 08073934
owner_city: Reno
owner_country: US
publication_date: 20090630
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application claims the benefit of priority from U.S. Provisional Application No. 61\/136,986, entitled \u201cAutomated Load Balancing Architecture,\u201d filed Oct. 20, 2008, the disclosure of which is expressly incorporated herein by reference in its entirety.","A service-oriented architecture (SOA) provides resources for performing particular functions as independent services that are accessible in a standardized way over a network. The services are considered standardized because distributed program components can invoke the services without any knowledge of an underlying platform that supports the services. Communication and coordination of services with one another allows the services to perform activities for entities that are tenants of the SOA.","One example of a service in an SOA is a hosting service. The hosting service may provide resizable compute capacity so that web-scale computing is easier for developers to implement. A typical hosting service provides a developer with computers on which the developer can run applications. For example, a developer can upload applications, libraries, data, and associated configuration settings to a storage repository and, using an interface, the developer can request a number of virtual machines (i.e., server instances), on which the developer can load the applications. Each virtual machine may provide a particular level of central processing unit (CPU) capacity. The service may further allow the developer to increase or decrease how much CPU and storage capacity is needed to run the applications.","When one of the developer's applications exposes a service to a client computer, a host server is determined and performs the service. In a typical hosting service, each host server in a server fleet exposes its Internet protocol (IP) address to the client computer through a domain name system (DNS) record. Using the DNS record, the client selects a host server. For example, the client might implement a round robin technique to make the selection.","Having the client select a host server presents several disadvantages. First, the client might send a request to a host server that is already processing other requests and, as a result, the host server may experience processing delays or even fail due to receiving a large volume of traffic at one time. Second, to enable the client to select the host server, a developer must manage the DNS record that identifies available host servers and populate the record with correct network addresses of the host servers. Third, the developer must monitor the host servers and update the network addresses that are stored in the DNS record when a host server fails.","To mitigate some of the potential problems outlined above, the developer might use load balancers on the client side to balance requests across the host servers. Load balancers distribute work between two or more computers or other resources to optimize resource use, throughput, or response time. However, using a load balancer on the client side presents other challenges for the developer. In particular, the developer will need to configure and run the load balancer and, in the event of a failure of the load balancer, the developer will need to replace or repair the load balancer. Accordingly, even using a load balancer requires the developer to stay involved with the configuration, maintenance, and daily operations of the load balancer.","As is evident from the above, a typical hosting service presents several disadvantages that limit efficiency and requires a developer to expend time and resources to perform monitoring and maintenance activities. Accordingly, there is a need for improved systems and methods that allow developers to concentrate on their applications so that they do not need to spend time configuring, monitoring, and maintaining client computers and\/or load balancers.","The following detailed description refers to the accompanying drawings. Wherever possible, the same reference numbers are used in the drawings and the following description to refer to the same or similar parts. While several exemplary embodiments are described herein, modifications, adaptations and other implementations are possible. For example, substitutions, additions or modifications may be made to the components illustrated in the drawings, and the exemplary methods described herein may be modified by substituting, reordering, or adding steps to the disclosed methods. Accordingly, the following detailed description is not limiting of the disclosed embodiments. Instead, the proper scope is defined by the appended claims.","Disclosed embodiments provide computer-implemented systems and methods for automated load balancing of application traffic. An application server may store system data and user data, such as applications (e.g., services) for users. An automated load balancing architecture that is consistent with disclosed embodiments may provide a management service for self-service and automated provisioning and configuration of load balancers, as well as failure detection and resolution functionality. The architecture may also provide a request routing layer that uses the load balancers to distribute application traffic to server instances.","Consistent with disclosed embodiments, the management service may provide load balancer management and configuration capabilities through a service application programming interface (API). For example, consistent with disclosed embodiments, a user may create one or more access points and register and\/or deregister application instances with the access points. When the user invokes the API, one or more API servers may handle the request to create the access points. The API servers may provide frontend functionality, such as user authentication, authorization, marshalling, validation, throttling, etc. The API servers may store the requested configuration (i.e., the registered access points) to a persistent data store. Furthermore, the API server may insert an entry into an event queue. The event queue may be stored as a table in a database and the entry may include, for example, an identifier of an access point.","Consistent with disclosed embodiments, one or more workflow servers may process events in the event queue. The workflow servers may continually poll the event queue for events. When a new event is received by the event queue, one of the workflow servers may invoke a workflow engine. The workflow engine may process the event, which may involve creating an access point and\/or registering one or more endpoints for the access point.","Consistent with disclosed embodiments, when a user creates a new access point, an API server may transmit configuration data to a load balancer that handles traffic for the access point. Next, the API server may assign a network address (e.g., an Internet Protocol (IP) address) to the access point. In some embodiments, the API server may assign a public network address, which is accessible over public networks, to the access point. In other embodiments, a private network address may be used as an intermediary between an external application and a public network address of an endpoint. For example, a failure of a server may cause the private network address of an endpoint to change, but the public network address may continue to be used by external applications to reach the same endpoint at a new network address. In such an embodiment, the API server may assign a private network address, which is meaningful or accessible within a particular network (e.g. a private network), to the access point. The API server may further register the network address that is assigned to an access point with a domain name system (DNS) record that represents the access point. At each step, the workflow engine may ensure that system data in the data store is accurately updated.","Consistent with disclosed embodiments, access points may be associated with DNS names. The names, along with a configured access point port, may form a unique destination that is used to interact with the user's applications. The user may use the DNS name directly or alias it to a different domain. For example, the customer may provide a DNS name and a port to client computers. When a client wants to use the application by connecting and sending traffic, the client may resolve the DNS name using a DNS server. The DNS server may return a network address for one of the load balancers for the access point. For example, the network address may be a public network address and the client computer's request may then be addressed to the public network address. A software layer may transform the public network address into a private network address and forward the request to a specific load balancer. The load balancer may then select an application instance (i.e., an endpoint) based on, for example, a load balancing algorithm, and forward the request. The application instance may then processes the request, create a reply, and send the reply back to the client via the reverse path or any other appropriate path.","Disclosed embodiments may also detect and mitigate load balancer failures. In order to do so, a failure detection server may use a fleet of pingers that continually monitor the load balancer instances. Each pinger may monitor multiple load balancers, and each load balancer may be monitored by several pingers. The workflow servers may handle assigning access points to pingers when a pinger is added or when a new access point is created. When a pinger detects a load balancer failure, the failure event may be reported to a failure analyzer. The failure analyzer may verify the failure event by querying other pingers that are monitoring the same load balancer. If the failure analyzer determines that the information is correct, it may update the system state in the data store and queue a new event in the event queue. A workflow server may then remedy the situation by remapping the network address to another load balancer.","Consistent with a disclosed embodiment, a computer-implemented method may configure an access point. The method may include receiving a request to create the access point and store data for the access point in a data store. The method may further invoke a workflow engine. The workflow engine may assign the access point to a load balancer, configure the load balancer, assign a network address to the load balancer, and publish the network address for a plurality of clients.","Consistent with another disclosed embodiment, a computer-implemented method may route a request. The method may include receiving the request. The request may include a network address for an access point. A load balancer may select an endpoint. The method may further transmit the request to the selected endpoint.","Consistent with yet another disclosed embodiment, a system may configure an access point. The system may comprise an API server. The API server may receive a request to create the access point and store data for the access point in a data store. The system may further comprise a workflow server. The workflow server may assign the access point to a load balancer, configure the load balancer, assign a network address to the load balancer; and publish the network address for a plurality of clients.","Consistent with still yet another disclosed embodiment, a system may route a request. The system may comprise a server configured to receive, from a client, the request. The request may include a network address for an access point. The system may further comprise a load balancer configured to select an endpoint and transmit the request to the selected endpoint.","Consistent with other disclosed embodiments, a computer-readable storage medium may store program instructions for implementing any of the above-described methods.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","106","108","110","120","122","124","126","130","140","105","120","122","124","126","100"]},"Network  provides communications between the various components in system , such as clients -, terminal , DNS server , API server , workflow server , application server , failure detection server , and load balancers  and . In addition, clients -, terminal , DNS server , API server , workflow server , application server , failure detection server , and load balancers  and  may access legacy systems (not shown) via network , or may directly access legacy systems, data stores, or other network applications. Network  may be a shared, public, or private network, may encompass a wide area or local area, and may be implemented through any suitable combination of wired and\/or wireless communication networks. Furthermore, network  may comprise an intranet or the Internet.","Clients - may each comprise a general purpose computer (e.g., a personal computer, network computer, server, or mainframe computer) having one or more processors (not shown in ) that may be selectively activated or reconfigured by a computer program. Clients - may be implemented in a distributed network. For example, clients - may communicate via network  with one or more additional servers (not shown), which may enable clients - to distribute processes for parallel execution by a plurality of other servers.","Terminal  may be any type device for communicating with API server  over network . For example, terminal  may be a personal computer, handheld device (e.g., PDAs, cellular phones, etc.), or any other appropriate computing platform or device capable of exchanging data with network . Terminal  may include, for example, a processor (not shown) and a memory (not shown). Furthermore, terminal  may execute program modules that provide one or more graphical user interfaces (GUIs) for interacting with network resources, such as API server .","A user (e.g., a developer) may access API server  over network  through an Internet browser or a software application running on terminal . For example, API server  may transmit a document (e.g., a web page) that is accessible by an Internet browser executing on user terminal . The document may include options for a user to log onto one or more secure sites provided by API server . Users may log onto one or more secure sites provided by API server , for example, by supplying credentials, such as a username (e.g., email address) and a password. Because the Internet sites may use a secure communication environment, such as an HTTPS (hypertext transfer protocol secure) environment to transfer data over network , data transfer is assumed to be secure.","DNS server  may comprise a general purpose computer (e.g., a personal computer, network computer, server, or mainframe computer) having one or more processors (not shown in ) that may be selectively activated or reconfigured by a computer program. DNS server  may store DNS records in a data store (not shown). The DNS records may include network addresses (e.g., IP addresses) of servers that correspond to domain names. For example, DNS server  may receive HTTP (hypertext transfer protocol) requests from one or more of clients - for IP addresses for domain names. Furthermore, DNS server  may perform a look-up function and return IP addresses to clients -.","API server  may comprise a general purpose computer (e.g., a personal computer, network computer, server, or mainframe computer) having one or more processors (not shown in ) that may be selectively activated or reconfigured by a computer program. API server  may provide functionality for a user at terminal  to create and register one or more access points, which is discussed below in further detail.","Workflow server  may comprise a general purpose computer (e.g., a personal computer, network computer, server, or mainframe computer) having one or more processors (not shown in ) that may be selectively activated or reconfigured by a computer program. Workflow server  may handle events from API server . For example, workflow server may include a memory (not shown) storing an event queue (not shown). Furthermore, workflow server  may store instructions for executing a workflow engine (not shown) for processing events that are stored in the event queue.","Application server  may comprise a general purpose computer (e.g., a personal computer, network computer, server, or mainframe computer) having one or more processors (not shown in ) that may be selectively activated or reconfigured by a computer program. Application server  may include a data store  that stores user data and system data. User data may include applications, libraries, data, and associated configuration settings. System data may include data describing access points and endpoints. User data and system data may be separately stored in data store . Furthermore, a user may have access to and the ability to update user data, while workflow server  may have access to and the ability to update system data. In some embodiments, application server  may be omitted. For example, API server  and workflow server  may access a shared data store (not shown) available over network . Alternatively, a shared data store may reside in API server  or workflow server in lieu of providing data store  in application server .","Failure detection server  may comprise a general purpose computer (e.g., a personal computer, network computer, server, or mainframe computer) having one or more processors (not shown in ) that may be selectively activated or reconfigured by a computer program. Failure detection server  may store instructions for providing a failure analyzer. The failure analyzer may use feedback provided from pingers  to monitor the health of load balancers  and .","Load balancers  and  may comprise software, hardware, or a combination of hardware and software. Each of load balancer  and  may handle traffic to a particular \u201czone,\u201d such as a geographic zone. For example, a user may wish to have traffic for one geographic region handled by \u201czone \u201d and traffic for another geographic region handled by \u201czone .\u201d As another alternative, zones may refer to different entities or units of a entity. As a specific example where zones are geographic, load balancer  may handle traffic for a \u201czone \u201d and load balancer  may handle traffic for a \u201czone .\u201d Various rules may apply when a user's applications are being processed in multiple zones. For example, a rule may require that each zone has at least one load balancer. Another rule may require that once an application request enters a zone, the load balancers in that zone do not send the request to application instances in a different zone.","Load balancers  and  may distribute traffic by random selection, round robin distribution, or may implement one or more algorithms to distribute traffic. For example, load balancers  and  may take into account factors, such as a server's reported load, recent response times, up\/down status, number of active connections, geographic location, capabilities, or how much traffic a server has recently been assigned. Furthermore, as the available capacity of a single load balancer may be insufficient to meet the needs of high traffic applications, overall capacity may be increased by running multiple load balancers in parallel, each with its own IP address in the DNS record. All load balancers may function independently, with no knowledge of the existence of other load balancers, and no cross-communication for making coordinated load balancing decisions.","In network computing, the application layer, referred to as layer 7, provides conversion between application processes. An example of a layer 7 protocol is HTTP. The transportation protocol, referred to as layer 4, provides a group of methods and protocols that encapsulate data blocks into discrete units (e.g., packets) for transfer to network . An example of a layer 4 protocol is TCP. Load balancers  and  may provide layer 4 and\/or layer 7 load balancing.","Endpoints - and endpoints - may receive traffic that has been distributed by load balancers  and , respectively. Endpoints are instances that an application runs on and accept and process traffic from clients -. For example, load balancer  may distribute traffic to one of endpoints - and load balancer  may distribute traffic to one of endpoints -. Endpoints - and - may each comprise computers (e.g., a personal computer, network computer, server, or mainframe computer) having one or more processors that may be selectively activated or reconfigured by a computer program. In other implementations endpoints - and - may comprise separate processors. For example, endpoints - may each comprise a processor that is included in a single server. Endpoints - and - may receive traffic routed from load balancers  and , execute an application, and return a result to one of clients -. Furthermore, although  depicts endpoints - as being associated with one load balancer (i.e., load balancer ) and endpoints - as being associated with one load balancer (i.e., load balancer ), one of ordinary skill will recognize that load balancer  and\/or load balancer  may comprise one or more load balancers that distribute traffic to endpoints - and endpoints -, respectively. Furthermore, although load balancers  and  are shown and have been described as handling traffic for different zones, in some embodiments, load balancer  and load balancer  may both distribute traffic to one or more of endpoints - and -. For example, load balancer  and load balancer  may distribute traffic irrespective of zones and endpoints - and - may be available to both load balancer  and load balancer  and\/or additional load balancers (not shown).",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["200","100","200","202","206","208","210","212","214","205"]},"Clients - may be computers associated with a user and may transmit traffic (e.g., requests for services) over network  to an application. In particular, clients - may transmit traffic to access point . From the user's perspective, access point  provides load balancing and access to compute capacity. Access point  may be addressed by a name and a port. Furthermore, access point  may in turn route traffic to one of endpoints - and - of endpoint group .","Management service  provides self-service automation of access points to the user at user terminal . Using a function (e.g., CreateAccessPoint), a user may receive a unique DNS name for a new access point from management service . Management service  may set up the access point and prepare the access point for use, as discussed below in further detail. Furthermore, the user may call a function (e.g., RegisterEndPoint) to register one or more endpoints for the access point, as also discussed below in further detail.","DNS server  may store the IP address of the access point. Consistent with disclosed embodiments, the user may publish the DNS name for the access point to clients -. When one of clients - requests an application, the client may resolve the DNS name by sending a request to DNS server  in order to obtain an IP address. For example, client  may request a service. Client  may then open a connection to the IP address, which may correspond to access point . Access point  may route each HTTP request (or TCP connection) to one of endpoints - and -. One of endpoints - and - may then process the request and access point  may forward the response back to client . For example, access point  may return a result of an execution of a service. Accordingly, from the user's perspective, once a user has created access point  and registered endpoints - and - for access point , access point  may receives requests and forward the requests to one of end points - and - for processing.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 3","FIG. 1","FIG. 2"],"b":["300","108","102","106","102","106"]},"In block , API server  may receive a request to create an access point. API server  may receive the request from, for example, terminal . Furthermore, API server  may authenticate and\/or validate the request in block .","Next, in block , API server  may store data defining the access point in an access point data store, which may be included in, for example, data store . The data defining the access point may include, for example, an access point identifier (ID) and an identifier of an entity (e.g., the user at terminal ) that sent the request to create the access point.","In block , the workflow engine executed by workflow server  may queue an event containing the access point ID. For example, the workflow engine may queue the event in an event queue stored in a memory (not shown) of workflow server .","In block , API server  may return a DNS name for the access point to the user. For example, API server  may send the DNS name to terminal  and\/or DNS server  may store the DNS name in a DNS record.","Next, in block , workflow server  may process the queued event. For example, workflow server  may cause the workflow engine to be invoked for the new access point. The following workflow process may proceed and perform functions that configure the access point.","In block , the workflow engine may assign the access point to a load balancer instance for each zone. For example, if the user operates in a zone , the workflow engine may assign the access point to load balancer . If the user also operates in a zone , the workflow engine may access the access point to load balancer . That is, in an embodiment in which more than one load balancer is assigned to the access point, in block , the on or more load balancers may each be assigned to the access point. For example, traffic originating in zone  for the access point may be routed to load balancer  and traffic originating in zone  for the access point may be routed to load balancer . Furthermore, an instance ID for each load balancer may be stored in data store  in association with the access point ID for the access point.","For the purposes of the following discussion, load balancer  is assigned to the access point. However, in the event that more than one load balancer is assigned to the access point, the following blocks may apply to more than one load balancer. For example, in an embodiment in which more than one load balancer is assigned to the access point, the following blocks - may occur substantially in parallel for each load balancer.","In block , workflow server  may transmit a current configuration to load balancer . The configuration may include assigning the public port of load balancer  to open and may include assigning load balancer  is to perform HTTP and\/or TCP load balancing.","In block , workflow server  may assign an IP address to the load balancer. Furthermore, the IP address may be added to the DNS entry of the access point. In some embodiments, the IP address may be a public network address. In other embodiments, the IP address may be a private network address.","In block , the IP address for load balancer  may be published. For example, the IP address may be transmitted to DNS server  and stored as part of a DNS record for the access point. Alternatively, the IP address may be stored in a server as data or as part of a record that is accessible over network .","Next, in block , load balancer  may be registered with the failure detector of failure detection server . Accordingly, the failure detector may continuously monitor the health of all the load balancers in the system and transmit notifications to workflow server  if any of the load balancers have failed. Monitoring of the load balancers may be performed by pingers , as discussed below in further detail in connection with .",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 4","FIG. 3"],"b":["400","102","106"]},"In block , API server  may receive a request to register end points for an access point. API server  may receive the request from, for example, terminal . Furthermore, API server  may authenticate and\/or validate the request in block . In the following discussion, the access point may be associated with load balancer , as discussed above in connection with .","Next, in block , API server  may store data for any new endpoints that were not previously associated with load balancer  in an access point data store, which may be included in, for example, data store . The data defining the access point may include, for example, one or more endpoint identifiers (IDs). API server  may additional increment the version number of the access point.","In block , the workflow engine that is executed by workflow server  may be invoked to process data, such as the endpoint IDs. For example, the workflow engine may queue an event containing the endpoint IDs. The workflow engine may queue the event in an event queue stored in a memory (not shown) of workflow server . Furthermore, in block , API server  may a response to the terminal .","Next, in block , the workflow engine may configure load balancer  with the endpoints. For example, workflow server  may transmit a configuration to load balancer  that includes a list of IP addresses of endpoints - that are to be sent traffic. As discussed above, in some embodiments, more than one load balancer may be assigned to an access point. Accordingly, in these embodiments, block  may configure the additional load balancers (e.g., load balancer ) substantially in parallel.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 5","b":["500","102","106","102"]},"In block , DNS server  may receive the request from client  and resolve a DNS name included in the request. For example, the request may be for processing an order.","Next, in block , DNS server  returns an IP address to client . Client  may then route the request to the IP address. In some embodiments, the IP address may be a public network address. In some embodiments, the public network address may be transformed to a private IP address. Such a transformation is discussed in connection with block .","In block , a hosting service may receive the request and transform the public IP address into a private IP address. For example, a layer of the hosting service may transform the public IP address into a private IP address. The translation may be performed by, for example, API server , workflow server , or another server available over network . In other embodiments, the use of a private IP address may be omitted and the public IP address may directly correspond to a load balancer without the need for a transformation, as discussed in connection with block .","In block , API server  may forward the request to a load balancer corresponding to the IP address. As discussed above, the IP address may be a public network address or a private network address. For the purposes of the following example, the IP address may correspond to load balancer .","Next, in block , load balancer  may select one of endpoints - to process the request. For example, load balancer  may distribute traffic by random selection, round robin distribution, or may implement one or more algorithms to distribute traffic.","In block , load balancer  may forward the request to the selected endpoint. For the purposes of the following example, the selected endpoint may correspond to endpoint .","Next, in block , endpoint  may process the request. Endpoint  may constitute an instance that an application runs on. Accordingly, endpoint  may receive a request routed load balancer  and execute an application identified in the received request. In block , endpoint  may create a reply. In block , endpoint  may send the reply back to client  through a reverse path or other appropriate path. For example, endpoint  may send the reply directly to client . In such an embodiment, less load may be imposed on load balancer  and latency may be reduced.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 6","FIG. 3"],"b":["600","126"]},"In block , pingers  may monitor the health of load balancers  and . In decision block , when one of pingers  fails to receive a response from a load balancer, the routine proceeds to block . If one of pingers  continues to receive a response from the load balancer, the routine returns to block .","In block , one of pingers  has not received a response from one of load balancers  and . In the following example, load balancer  has failed to send a response to a ping from one of pingers . Accordingly, the pinger sends a notification to failure detection server  to notify failure detection server  of a potential load balancer failure.","In block , the failure detector of failure detection server  analyzes the notification and confirms whether other ones of pingers  have observed the failure. For example, each load balancer may be pinged by multiple pingers to determine whether other pingers agree. Failure detection server  may consider a load balancer to have failed when a threshold percentage of pingers  have reported a failure of that load balancer. If a sufficient threshold number of pingers  agree that load balancer  has failed, then the process proceeds to block . If a sufficient threshold number of pingers  do not agree, then the process may return to block .","In block , failure detection server  may update the state of load balancer  to failed by storing an appropriate status in a data store, such as data store . Furthermore, failure detection server  may queue an event for workflow server  to handle the failure.","Next, in block , workflow server  may process the queued event by unmapping the IP address from the failed load balancer  and may terminate the failed load balancer instance.","In block , workflow server  may launch a replacement load balancer. For example, the processing discussed in connection with  may be implemented to replace load balancer  with load balancer .","The foregoing description has been presented for purposes of illustration. It is not exhaustive and is not limiting to the precise forms or embodiments disclosed. Modifications and adaptations will be apparent to those skilled in the art from consideration of the specification and practice of the disclosed embodiments. For example, the described implementations include software, but systems and methods consistent with the disclosed embodiments be implemented as a combination of hardware and software or in hardware alone. Examples of hardware include computing or processing systems, including personal computers, servers, laptops, mainframes, micro-processors and the like. Additionally, although aspects of the disclosed embodiments are described as being stored in memory, one skilled in the art will appreciate that these aspects can also be stored on other types of computer-readable media, such as secondary storage devices, for example, hard disks, floppy disks, or CD-ROM, or other forms of RAM or ROM, USB media, DVD, or other optical drive media.","Computer programs based on the written description and disclosed methods are within the skill of an experienced developer. The various programs or program modules can be created using any of the techniques known to one skilled in the art or can be designed in connection with existing software. For example, program sections or program modules can be designed in or by means of .Net Framework, .Net Compact Framework (and related languages, such as Visual Basic, C, etc.), Java, C++, HTML, HTML\/AJAX combinations, XML, or HTML with included Java applets. One or more of such software sections or modules can be integrated into a computer system or existing e-mail or browser software.","Moreover, while illustrative embodiments have been described herein, the scope of any and all embodiments having equivalent elements, modifications, omissions, combinations (e.g., of aspects across various embodiments), adaptations and\/or alterations as would be appreciated by those in the art based on the present disclosure. The limitations in the claims are to be interpreted broadly based on the language employed in the claims and not limited to examples described in the present specification or during the prosecution of the application, which examples are to be construed as non-exclusive. Further, the blocks of the disclosed routines may be modified in any manner, including by reordering blocks and\/or inserting additional blocks or deleting blocks. It is intended, therefore, that the specification and examples be considered as exemplary only, with a true scope and spirit being indicated by the following claims and their full scope of equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this disclosure, illustrate various disclosed embodiments. In the drawings:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
