---
title: Network device application programming interface
abstract: An application programming interface for use in a network device includes at least one control module that is capable of controlling a forwarding plane of the network device. In particular, the network device forwards packets across a network, and includes the forward plane for processing data packets. The application programming interface includes an input module that receives function calls, at least one control module (mentioned above) that receives input control data via the function calls, and an output module that forwards output control data from the control module. The control module produces the output control data based upon the input control data. The output control data is capable of controlling execution of the forwarding plane.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06957438&OS=06957438&RS=06957438
owner: Nortel Networks Limited
number: 06957438
owner_city: 
owner_country: CA
publication_date: 20000324
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY","CROSS REFERENCES TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["This U.S. patent application claims priority from U.S. provisional patent application Ser. No. 60\/126,460, filed on Mar. 26, 1999, and entitled, \u201cJFWD: CONTROLLING THE FORWARDING PLANE OF SWITCHES AND ROUTERS THROUGH A NEW JAVA API,\u201d the disclosure of which is incorporated herein, in its entirety, by reference.","This patent application may include related subject matter to the following commonly-owned United States patent applications, each of which is incorporated in its entirety by reference:\n\n","The invention generally relates to network devices and, more particularly, the invention relates to controlling the forwarding plane in a network device.","Many networks, such as the Internet, utilize a multitude of data forwarding devices (e.g., routers and switches) to forward data messages, such as data packets, between network nodes. Among other things, such forwarding devices include both routing software and a corresponding routing hardware platform that cooperate to forward data messages to their appropriate destinations.","Undesirably, routing software within current forwarding devices generally is preconfigured for use within one specific routing hardware platform only. In particular, a forwarding device (e.g., a router) manufactured by a given vendor has routing software that is specifically coded and configured for use with no routing hardware platform other than that of the given vendor. Accordingly, such routing software from one vendor cannot be used on another vendor's forwarding device.","In accordance with one aspect of the invention, an application programming interface for use in a network device includes at least one control module that is capable of controlling a forwarding plane of the network device. In particular, the network device forwards packets across a network, and includes the forwarding plane for processing data packets. The application programming interface includes an input module that receives function calls, at least one control module (mentioned above) that receives input control data via the function calls, and an output module that forwards output control data from the control module. The control module produces the output control data based upon the input control data. The output control data is capable of controlling execution of the forwarding plane.","In some embodiments, the control module includes a plurality of objects arranged in a hierarchical tree structure. The function calls instantiate at least one of the objects for storing the output control data in a memory device. In various embodiments, the at least one control module (\u201ccontrol module\u201d) may execute one of a plurality of different functions. For example, the control module may be a region module that identifies a specified amount of memory for storing the output control data. In other embodiments, the control module may be a mapping module that specifies units of the output control data for storage in memory. In addition, the control module may be a read handler module that permits output control data to be read from memory by an application program, or a write handler module that permits the output control data to be written to memory by an application program. The write handler module may permit output control data to be modified in memory by the application program. Among other things, the network device may be a router.","In accordance with another aspect of the invention, an application programming interface for use with a network device that forwards data packets across a network includes a hierarchical tree of objects that control execution of a forwarding plane that is included in the network device. Each of the objects are responsive to function calls from an application program. In addition, each of the objects produce control data to control execution of the forwarding plane. The produced control data is based upon data in the function calls.","In accordance with yet another aspect of the invention, a network device having a forwarding plane includes a processor for executing an application program, and an application programming interface having a control module that controls the forwarding plane in response to at least one function call from the application program. In a similar manner to other aspects, the forwarding plane processes data packets for forwarding across a network.","In accordance with still other aspects of the invention, an application programming interface for use in a network device that forwards data across a network includes a control module and a management module. The network device includes a forwarding plane that is controlled by the control module and the management module. In particular, the control module receives control data from an application program for use by the forwarding plane. The forwarding plane consequently processes data packets as specified by the control data. The management module receives management data for managing the forwarding plane.","Some embodiments of the invention are implemented as a computer program product having a computer usable medium with computer readable program code thereon. The computer readable code may be read and utilized by a computer system in accordance with conventional processes.",{"@attributes":{"id":"p-0020","num":"0028"},"figref":"FIG. 1","b":["10","12"]},"Among other uses, each router  may be coupled to one or more smaller networks, such as a local area network, and\/or may be utilized solely to forward received data messages (e.g., Internet Protocol packets). Moreover, each router  preferably supports more than one data routing protocol and thus, may be coupled with smaller networks that utilize different protocols. For example, one router  coupled with the Internet may be coupled to a smaller network that utilizes Asynchronous Transfer Mode (\u201cATM\u201d). Accordingly, such router  includes data routing software to route data messages utilizing either ATM or the Internet Protocol (\u201cIP\u201d). In preferred embodiments, this router  includes software that can implement a variety of other routing protocols, such as the Point-to-Point protocol (\u201cPPP\u201d).","It should be noted that although only four are shown, the network may include many more routers . In addition, routers  are discussed herein as exemplary network devices. Those skilled in the art should appreciate that preferred embodiments may be applied to other network devices that forward data messages between other network devices. For example, principles of the invention may be applied to network switches, network bridges, and firewalls. Accordingly, discussion of specific network hardware (e.g., routers ), specific data transfer protocols (e.g., IP, ATM, VLAN, etc . . . ), and specific operating systems (e.g., WINDOWS or Disk Operating System) is for exemplary purposes only and is not intended to limit the scope of preferred embodiments of the invention.","In accord with preferred embodiments, routing application programs (a\/k\/a \u201crouting software\u201d) intended for use within a plurality of disparate routing hardware platforms are configured to produce messages that comply with a prescribed standard routing application program interface (\u201crouting API \u201d, see ). More particularly, routing software (e.g., implementing IP, ATM, or router table management, etc . . . ) may be written by any software vendor for use on any vendor's routing platform that utilizes the preferred routing API . Accordingly, a single routing application program (i.e., a set of application programs specifying a protocol, and supporting and managing a router  utilizing the specific routing protocol) may be loaded into any such vendor's routing platform without the need for it to be specifically configured to the underlying routing platform.","To that end, as suggested above, the routing software generates control data messages (also referred to below as \u201cfunction calls\u201d) that are forwarded to the router API . Each received message is formatted in accord with a preselected standard that is recognizable by the router API . Upon receipt, the router API  processes each received standard command, and generates platform specific control messages that control the underlying routing platform. For example, a routing table application program may forward a control data message to the API  with table data to update a routing table. The API  responsively extracts the table data from the control data message, and then updates the routing table accordingly. Details of this process are discussed below.",{"@attributes":{"id":"p-0025","num":"0033"},"figref":"FIG. 2","b":["12","12","14","16","14","18","20","21","24","12"]},"In preferred embodiments, the application programs  and routing API  are considered to be in the \u201ccontrol plane \u201d (a\/k\/a the \u201ccontrol engine \u201d) of the router . As known in the art, the control plane  includes upper layer software used for a variety of functions, such as route calculation, signaling, and management. In general, the control plane  controls the forwarding plane  by configuring it upon initialization, and updating it as necessary after initialization. For example, the control plane  may initialize a routing table that is accessed by the forwarding plane  for forwarding data messages. There are instances, however, when the control plane  performs functions normally performed by the forwarding plane . For example, data messages that the forwarding plane  cannot process may be sent to the control engine for forwarding.","The forwarding plane  preferably is the lower-layer forwarding path that is responsible for packet inspection, destination lookup, output delivery, and statistics gathering in the router . In some embodiments, the forwarding plane  is a combination of application specific integrated circuits (\u201cASICs\u201d) and low-level software designed for a specific platform (e.g., firmware). Examples of forwarding plane functions include layer-2\/layer-3 hardware assisted lookup functions, queuing systems, and switch fabric elements.",{"@attributes":{"id":"p-0028","num":"0036"},"figref":["FIG. 3","FIG. 2"],"b":["12","12","28","30","14","16","28","16","12","16","18","22","20","22","24","18","22","16","14","16","18","22","16","20"]},"It should be noted that the incorporated patents refer to a \u201cmapper\u201d that is utilized by the API  for communicating with the forwarding engine . In the embodiments shown herein, however, the mapper is integrated into the API  to communicate with the forwarding engine . Accordingly, the incorporated applications merely discuss an embodiment of the invention in which the mapper is schematically separated from the API . Those skilled in the art should understand, however, that principles of this disclosure and those disclosures can be utilized to practice various embodiments of the invention.","The API  may be implemented in any manner known in the art.  shows one exemplary implementation of the API . In particular,  schematically shows a tree structure that may be utilized to implement the API . In illustrative embodiments, the tree structure is a plurality of objects that are configured in accordance with conventional object oriented programming techniques. Use of an object oriented model provides a number of advantages, such as the potential to easily increase and\/or modify the overall functionality of the API . This concept commonly is referred to as \u201cextensibility.\u201d","The objects at the root of the tree are the most general objects, while those at the leaves of the tree are the most specific. It should be noted that each node is shown on the tree as being one object. This is not intended to mean that only one object can be utilized for each node. Accordingly, although shown schematically as one object, each object shown in the tree may include a plurality of objects to effectuate the underlying function. Since the tree shown in  is constructed as a tree of objects, well known object oriented programming principles therefore apply, such as inheritance, encapsulation, and polymorphism. Specifically, in this context, inheritance relates to control data units stored in memory deriving from an abstract root data unit. Furthermore, in this context, encapsulation relates to control data units that can be modified through exported interfaces only. The inner fields of objects are hidden to application programs  utilizing the tree. Finally, polymorphism relates to dynamic method resolutions that permit application programs  to manipulate stored data units as either specific data units (i.e., leaves on the tree), or as generic, abstract data units (i.e., as root objects on the tree).","As known in the art, each of the objects in the tree are based upon underlying class code. When in use, an application program  retrieves the appropriate objects at the level of abstraction that is necessary to effectuate the desired function. Details of this process are discussed below.","The root object of the tree is a network node object , which includes basic hardware information relating to the underlying router . For example, such information may include the manufacturer of the router , the router serial number, and other physical characteristics of the router . The next level of abstraction after the network node object  is divided between a control data object  that controls flow of control data between the control plane  and the forwarding plane , and a management object  that manages the router .","The management object  manages the router  in accord with conventional processes. For example, by utilizing the management object, a system administrator may monitor and\/or control various facets of the router . The management object  preferably utilizes the well known Simple Network Management Protocol (\u201cSNMP\u201d) to control management processes via a management information base (known in the art as a \u201cMIB\u201d). One such implementation of SNMP is distributed under the trade name \u201cEMANATE\u2122\u201d, which is distributed by SNMP Research International, Inc. of Knoxville, Tenn. As known in the art, EMANATE\u2122 operates in conjunction with a management agent to support remote management operations (e.g., via a remote location) through the SNMP protocol. For additional details of management process, see incorporated U.S. patent application Ser. No. 09\/326,238.","The control data object  is utilized to manipulate control data that is forwarded between the control plane  and the forwarding plane . More particularly, as known in the art, control data controls data packet processing by the forwarding plane . For example, control data may include router table update information, virtual local area network (\u201cVLAN\u201d) table data, etc . . . As noted above and known in the art, control data may be generated by control plane application programs , and forwarded to the forwarding plane  for storage in memory of some data packet processing apparatus.","Three objects directly inherit from the control data object  to permit applications to store control data in the forwarding plane . Each of these three objects and\/or their descendent objects, are coordinated to permit an application program  to write control data to, or read control data from, memory  used by the control plane (referred to as \u201cmemory \u201d or \u201ccontrol plane memory \u201d). A first of those objects, shown in  as a region object , defines the maximum amount of the control plane memory  that may be allocated for storing (or reading) a specified type of control data. Although such memory  may be physically located in any location, it should be easily accessible by the control plane . Accordingly, such memory  preferably is located in the control plane . Alternatively, such memory  may be located in a memory device that is external to the router , or even in the forwarding plane.","As an example, if an Internet Protocol application (\u201cIP application\u201d) is to update an Internet Protocol routing table, then a preselected amount of memory  is allocated by the region object  for storing such routing table data. As discussed below, a region object (on a lower level of abstraction) directed to IP will be utilized instead of the region object . By permitting a maximum amount of memory for such data, the region object  ensures that the IP application does not reserve an unnecessarily large amount of memory for its control data. As known by those in the art, reserving too much memory can cause the router  to malfunction. Accordingly, the region object  adds some degree of stability to the underlying routing platform.","A mapping object , which is a second of the objects to directly inherit from the control data object , defines the specific unit of data that is to be written to (or read from) the memory  by the application program . This unit of data is referred to herein as a \u201cmapping.\u201d Continuing with the immediately preceding example, the unit of data to be stored in the routing table by the IP application is a routing table entry. Accordingly, data is written to, or read from, the routing table in units of routing table entries. In addition, the mapping object  may have further functionality, such as the capability of providing the current amount of memory  utilized for a specified type of data (e.g., the size of a specified routing table), and various notification functions.","A handle object , which is a third of the objects to directly inherit from the control data object , permits control plane application programs  to either read from, or both read from and write to, the control plane memory . Accordingly, the handle object  is comprised of an author object  that permits the application program  to both read from and write to a specified location in the control plane memory , and a reader object  that permits the application program  to only read from the specified memory location in control plane memory . An application program  that can both write to and read from a specified memory location is referred to as an author application program, while an application program  that can only read from a specified memory location is referred to as a reader application program.","In preferred embodiments, each memory location can have no more than one author application program, and a plurality of reader programs. Permitting no more than one author application program per memory location adds stability to the system. Specifically, among other benefits, permitting no more than one application program  per memory location prevents two applications from potentially adding conflicting data to a specified memory location, and ensures that the lines of data are clean (i.e., not stale).","There are times when an application program  cannot add a mapping entry to the control plane memory . For example, the mapping may not conform to the data expected for the specified region of the control plane memory , an equivalent mapping already may exist at that location, or the maximum amount of data allocated by the region object  may have been met.","A mapping may be removed from a specified memory location by several different operations. Specifically, a mapping may be removed if the author application program performs an explicit remove operation to remove the mapping from memory. In addition, a mapping may be removed if it is set with a time limit (referred to in the art as a \u201ctimeout\u201d) that expires, or if the specified memory location is reset.","The tree includes a plurality of additional levels of abstraction that inherit from the various discussed objects.  shows two types of such levels, both of which can inherit from each other, or independently inherit from other levels (e.g., the above discussed levels). In illustrative embodiments, each level is dedicated to a plurality of protocols on respective layers of a protocol stack. One exemplary generic protocol stack is known in the art as the OSI (open systems interconnection) protocol stack, which has seven defined layers.","One of the levels of abstraction (\u201cnetwork level\u201d) preferably has objects for network layer protocols (e.g., Internet Protocol, or Address Resolution Protocol), while the other level (\u201clink level\u201d) has objects for link layer protocols (e.g., Asynchronous Transfer Mode, or Virtual Local Area Network protocols). In , each level schematically is shown as a deck of cards (identified by reference number ), where each card (identified by reference number ) in its respective deck  includes objects for one protocol.  shows an exemplary Internet Protocol card  on a network level deck , and an exemplary Virtual Local Area Network (\u201cVLAN\u201d) card  on a link level deck .","In accordance with illustrative embodiments, the Internet Protocol card  includes a plurality of objects for implementing Internet Protocol control data processing functions (e.g., storing control data, such as routing data, in a routing table in the control plane memory ). Accordingly, the Internet Protocol card  includes an object corresponding to each of the above three discussed objects that inherit from the root control data object . Specifically, the Internet Protocol (\u201cIP\u201d) card  includes an IPRout region object  for implementing an IP specific region object , an IPRout mapping object  for implementing an IP specific mapping object , an IPRout author object  for implementing an IP specific author object , and an IPRout reader  object for implementing an IP specific reader object . Additional IP objects can be added or deleted from the IP card, as necessary. Such additional IP objects can either or both inherit from other objects, or be root objects for use by other child objects.","In a similar manner, the VLAN card  includes a plurality of objects for implementing VLAN control data processing functions. Accordingly, the VLAN card  includes a VLAN region object , a VLAN mapping object , a VLAN author object , and a VLAN reader object . In addition, as shown by example in , one of the objects on one card  can inherit from an object on another card . In particular, an IPRout+VLAN mapping object  is shown, which inherits from the IPRout mapping object .","In illustrative embodiments, each object is configured to comply with the underlying routing platform. Accordingly, if the underlying routing platform is an ACCELAR\u2122 router, distributed by Nortel Networks Corporation of Montreal, Quebec, Canada, each of the objects are configured to operate in accord with the underlying ACCELAR\u2122 hardware and software requirements.","In illustrative embodiments, new objects may be added to the tree as new functionality is developed. Complying with conventional object oriented programming techniques, existing objects are reused to implement the new objects. This results in a growing tree that may have continued functional growth. Moreover, as noted below with reference to , objects in the tree  are instantiated by an application program  in the control plane to add control data to, or read control data from, control plane memory . Instantiated objects are maintained until no longer necessary, or upon expiration of a preset time interval (e.g., a timeout). As known in the art, objects are deleted by executing a destruct function of the object, thus \u201cdestructing\u201d the object.","Identified below as \u201cHEADER 1\u201d is a generic class header that may be utilized by illustrative embodiments for objects of all abstraction levels.",{"@attributes":{"id":"p-0050","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"HEADER 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Types"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FEMreturnt","Signed return code from the FEM API"]},{"entry":[{},"FEM<name>class:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Fields summary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public int foo;"]},{"entry":[{},"protected char *bar;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Constructor summary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FEM<name>(int arg1, char *arg2)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Methods summary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public FEMreturn t","method(arg1,*arg2)"]},{"entry":[{},{},"Short method description"]},{"entry":[{},{},"(arg2 is being returned)."]},{"entry":[{},". . .",". . ."]},{"entry":[{},". . .",". . ."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Illustrative embodiments, shown below, follow the generic format shown by HEADER 1. Accordingly, below are exemplary class headers for the region object , the author object , reader object , and mapping object , and related type information. Each of these objects can be abstracted to a lower level of abstraction to operate with the link layer and network layer decks  and their descendent objects.","I. Primitive Types",{"@attributes":{"id":"p-0053","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Primitive Types"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["FEMreturnt","Signed return code from the","sizeof is"]},{"entry":[{},"FEM API","platform-dependent"]},{"entry":["FEMeventt","The enum of mapping events","sizeof is"]},{"entry":[{},"(i.e., modification, deletion, reset)","platform-dependent"]},{"entry":[{},"for which a notification is served"]},{"entry":[{},"to registered Reader applications"]},{"entry":["FEMtypet","The enum of the types of mapping","sizeof is"]},{"entry":[{},{},"platform-dependent"]},{"entry":["FEMmodet","Two types of capability are","sizeof is"]},{"entry":[{},"defined: FEMReader and","platform-dependent"]},{"entry":[{},"FEMAuthor"]},{"entry":["FEMtickett","A \u201chint\u201d that is being returned by","sizeof is"]},{"entry":[{},"the FEM upon successful write","platform-dependent"]},{"entry":[{},"operations and can be reused for"]},{"entry":[{},"further write or remove operations"]},{"entry":[{},"of the same mapping for"]},{"entry":[{},"increased efficiency"]},{"entry":["ubit8t","general purpose","Unsigned 8 bits"]},{"entry":["ubit16t","general purpose","Unsigned 16 bits"]},{"entry":["ubit32t","general purpose","Unsigned 32 bits"]},{"entry":["timet","relative time in milliseconds","Unsigned 32 bits"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"II. Complex Types",{"@attributes":{"id":"p-0055","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Complex Types"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MappingList","A STL linked list of FEMMapping objects"]},{"entry":[{},{},"(or derived classes)."]},{"entry":[{},{},"It is defined as:"]},{"entry":[{},{},"typedeflist<FEMMapping*> MappingList;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"III. The FEMRegion Class","Objects instantiated from the FEMRegion Class (i.e., region objects  of ) do not export any methods or functions that can be called directly from an application program . Accordingly, all methods in this class are called either by the author or reader objects  and . The author and reader objects  and  therefore have privileged interaction with the FEMRegion class objects",{"@attributes":{"id":"p-0058","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Fields summary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["protected","current"]},{"entry":["ubit32t","How many mappings were stored in this"]},{"entry":[{},"FEMRegion when the method was invoked."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Constructor\/Destructor summary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["protected","FEMRegion (char *name, FEMtypet t)"]},{"entry":[{},"Constructs a handle to a FEMRegion specified by"]},{"entry":[{},"name and type. It is meant to be called by"]},{"entry":[{},"mapping- specific sub-classes and friends."]},{"entry":["protected","~FEMRegion(\u2009)"]},{"entry":["virtual","Destructor"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Methods summary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["protected static","lookupRegion"]},{"entry":["FEMreturnt","(char* name, FEMtypet type, "]},{"entry":[{},"FEMRegion**r)"]},{"entry":[{},"Create a FEMRegion handle for a FEMRegion"]},{"entry":[{},"with given name and type. The handle is returned as a"]},{"entry":[{},"FEMRegion**."]},{"entry":[{},"Returns:"]},{"entry":[{},"FEMNOTFOUND-The region with that name and type"]},{"entry":[{},"does not exist."]},{"entry":[{},"FEMSUCCESS-Otherwise"]},{"entry":["protected char*",{"sub":"\u2014"}]},{"entry":[{},"Returns the name of the FEMRegion."]},{"entry":["protected",{"sub":"\u2014"}]},{"entry":["FEMtypet","Returns the type of mappings stored in this FEMRegion"]},{"entry":[{},"(see Appendix A)."]},{"entry":["protected",{"sub":"\u2014"}]},{"entry":["ubit32t","Returns the number of mappings stored in this"]},{"entry":[{},"FEMRegion at the time the method was invoked."]},{"entry":["protected",{"sub":"\u2014"}]},{"entry":["ubit32t","At the time this method was invoked, these many"]},{"entry":[{},"mappings could be stored in this FEMRegion before"]},{"entry":[{},"hitting the maximum quota limit."]},{"entry":["protected",{"sub":["\u2014","\u2014","\u2014"]}]},{"entry":["FEMreturnt","Requests the FEM to increase the quota for this"]},{"entry":[{},"FEMRegion of how many entries."]},{"entry":[{},"Returns:"]},{"entry":[{},"FEMENOSPACE-Not enough resources to extend the"]},{"entry":[{},"FEMRegion"]},{"entry":[{},"FEMSUCCESS-Otherwise"]},{"entry":["protected","-requestAsynNotification(FEMCallback *cb)"]},{"entry":["FEMreturnt","The calling application will have the handleEvent(\u2009)"]},{"entry":[{},"method of the object FEMCallback"]},{"entry":[{},"(or derivated objects) called upon the specified event"]},{"entry":[{},"(see Appendix B) happening on this region."]},{"entry":[{},"The event type is contained within the FEMCallback"]},{"entry":[{},"object passed as the argument."]},{"entry":[{},"Returns:"]},{"entry":[{},"FEMNOSUPPORT-The event is not supported by the"]},{"entry":[{},"FEM implementation"]},{"entry":[{},"FEMSUCCESS-Otherwise"]},{"entry":["protected void",{"sub":["\u2014","\u2014"]}]},{"entry":[{},"Undo a former requestAsynNotification for a"]},{"entry":[{},"FEMCallback."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"IV. The FEMMapping Class","The FEMMapping class implements the mapping object  shown in .",{"@attributes":{"id":"p-0061","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Field summary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["protected","author"]},{"entry":["FEMAuthor*","The FEMAuthor who wrote this mapping, if any."]},{"entry":["protected void*","extension"]},{"entry":[{},"Platform dependent routines may use this Mapping"]},{"entry":[{},"extension to store a pointer to machine-specific"]},{"entry":[{},"compiled mapping data. It is not meant to be"]},{"entry":[{},"visible to FEMReader or FEM-Author applications"]},{"entry":[{},"(i.e., derived classes will have private methods that"]},{"entry":[{},"manipulate this)."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Constructor\/Destructor summary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["protected","FEMMapping(FEMtypet)"]},{"entry":[{},"Constructs a FEMMapping of type t"]},{"entry":["protected","~FEMMapping(\u2009)"]},{"entry":["virtual","Destructor"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Method summary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["public","getType(\u2009) const"]},{"entry":["FEMtypet","Returns the type of this mapping."]},{"entry":["public char","getVersion(\u2009) const"]},{"entry":[{},"Returns the version number of a mapping."]},{"entry":["public void","setAge(timespect time)"]},{"entry":[{},"This mapping will be aged out when relative time"]},{"entry":[{},"expires."]},{"entry":["public void","setFinalization(FEMAuthor *m)"]},{"entry":[{},"When deleted, this mapping will be automatically"]},{"entry":[{},"removed from the FEM using the FEMAuthor"]},{"entry":[{},"capability passed in as argument."]},{"entry":["public bool","isSetFinalized(\u2009)"]},{"entry":[{},"Was this FEMMapping set to be finalized by a former"]},{"entry":[{},"setFinalization(\u2009) call?"]},{"entry":["public","isEquivalent(FEMMapping *that) = 0"]},{"entry":["virtual bool","Returns true if that Mapping is equivalent to this"]},{"entry":[{},"Mapping according to some mapping-specific rules."]},{"entry":["public","prettyPrint(\u2009) const = 0"]},{"entry":["virtual bool","Pretty print the mapping."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"V. The FEMAuthor Class","The FEMAuthor class implements author object  shown in .","FEMAuthor class: public virtual FEMReader",{"@attributes":{"id":"p-0065","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Fields summary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"None exported."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Constructor\/Destructor summary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["protected","FEMAuthor(FEMRegion *r,"]},{"entry":[{},{"u":"OUT","sub":["\u2014","\u2014"]}]},{"entry":[{},"Constructs a FEMAuthor handle to a FEMRegion."]},{"entry":[{},"It is meant to be called by mapping-specific sub-classes"]},{"entry":[{},"and friends. Error conditions are signaled through the"]},{"entry":[{},"error OUT argument as follows."]},{"entry":[{},"FEMINVALIDARGUMENT-The region is not valid"]},{"entry":[{},"FEMNOPERMISSION-The caller is not entitled to"]},{"entry":[{},"have FEMAuthor privilege"]},{"entry":[{},"FEMSUCCESS-Otherwise"]},{"entry":["protected","~FEMAuthor(\u2009)"]},{"entry":["virtual","Destructor"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Methods summary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["public","getCount(\u2009) const"]},{"entry":["ubit32t","Return the number of mappings that are active within"]},{"entry":[{},"this FEMRegion."]},{"entry":["public","getRoom(\u2009) const"]},{"entry":["ubit32t","How far is this FEMRegion from the current"]},{"entry":[{},"maximum quota?"]},{"entry":[{},"Number of mappings is returned."]},{"entry":["public","sbreak(uint32t howmany)"]},{"entry":["FEMreturnt","Requests the FEM to increase the quota for this"]},{"entry":[{},"FEMRegion of these many entries. The number of"]},{"entry":[{},"requested entries may be changed or denied all together"]},{"entry":[{},"by FEM."]},{"entry":[{},"Returns:"]},{"entry":[{},"FEMENOSPACE-Not enough resources to extend the"]},{"entry":[{},"FEMRegion"]},{"entry":[{},"FEMSUCCESS-Otherwise"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"VI. The FEMReader Class","The FEMReader Class implements the reader object  shown in .",{"@attributes":{"id":"p-0068","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Fields summary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["protected","region"]},{"entry":["FEMRegion*","The pointer to the FEMRegion for this"]},{"entry":[{},"FEMReader."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Constructor\/Destructor summary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["protected","FEMReader(FEMRegion *r, FEMreturnt"]},{"entry":[{},"*error)"]},{"entry":[{},"Constructs a FEMReader handle to a FEMRegion."]},{"entry":[{},"It is meant to be called by mapping-specific sub-classes"]},{"entry":[{},"and friends. Error conditions are signaled through the"]},{"entry":[{},"error OUT argument as follows."]},{"entry":[{},"FEMINVALIDARGUMENT-The region is"]},{"entry":[{},"not valid."]},{"entry":[{},"FEMSUCCESS-Otherwise."]},{"entry":["protected","~FEMReader(\u2009)"]},{"entry":["virtual","Destructor"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Methods summary"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["public char*","getName(\u2009) const"]},{"entry":[{},"Return the name associated with a FEMRegion."]},{"entry":["public","getType(\u2009) const"]},{"entry":["FEMtypet","Return the type of mappings stored in this"]},{"entry":[{},"FEMRegion."]},{"entry":["protected","requestAsynNotification(FEMCallback *cb)"]},{"entry":["FEMreturnt","The calling application will have the handleEvent(\u2009)"]},{"entry":[{},"method of the object FEMCallback (or derivated"]},{"entry":[{},"objects) called upon the specified event happening"]},{"entry":[{},"on this region."]},{"entry":[{},"Returns:"]},{"entry":[{},"FEMNOSUPPORT-The event is not supported by the"]},{"entry":[{},"FEM implementation"]},{"entry":[{},"FEMSUCCESS-Otherwise"]},{"entry":["protected void","cancelAsynNotification(FEMCallback *cb)"]},{"entry":[{},"Undo a former requestAsynNotification for a"]},{"entry":[{},"FEMCallback."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0069","num":"0077"},"figref":"FIG. 5","b":["12","12","26","14","20","14","26","16","66","16","66","68","20"]},"The back end  receives control data from the front end . In particular, control data stored in memory  is processed as noted above, and then forwarded to the back end . Such data may be stored in local routing tables in the forwarding plane . Although one back end  is shown, in illustrative embodiments, the forwarding plane  includes a plurality of back ends  for receiving control data from a single front end . For example, each of a plurality of back ends  may perform forwarding plane functions for one of a plurality of ports on the router . In other embodiments, two front ends  may forward control data to a plurality of back ends . Generally, a plurality of front ends  can be utilized to cooperate with a plurality of back ends .","It should be noted that the application programs  shown are a non-exhaustive listing of protocol implementations that may be found in the control plane . For example, the WAN Signaling application program stores and retrieves correspondence between IP addresses and phone numbers from the API .","The tree structure shown in  preferably is entirely contained within the API block  shown in . Accordingly, each of the application programs  are platform independent and thus, forward platform independent commands to the API . Upon receipt of control data, the API  forwards the data to the front end . The front end  responsively determines which back end(s)  is\/are to receive the control data, and then forwards the received control data to the appropriate back end(s) .","In addition to being stored by the application programs , control data in the control plane  can be read by the application programs  via the API . In fact, application programs  can share control data through the API . For example, the router table manager application program  may store control data in the memory , which subsequently can be retrieved by the multicast table manager application program . Moreover, retrieved control data can be utilized for a variety of purposes. For example, if an application program  malfunctions (i.e., \u201ccrashes\u201d), stored control data in the memory  can be accessed for use upon a subsequent restart of the malfunctioning application program .",{"@attributes":{"id":"p-0074","num":"0082"},"figref":"FIG. 6","b":["14","21","600","602","16","16","21","68","66","16","68"]},"Some embodiments of the invention may be implemented in any conventional computer programming language. For example, preferred embodiments may be implemented in a procedural programming language (e.g., C) or an object oriented programming language (e.g., C++ or JAVA). Alternative embodiments of the invention may be implemented as preprogrammed hardware elements (e.g., application specific integrated circuits and digital signal processors, as discussed), or other related components.","Alternative embodiments of the invention may be implemented as a computer program product for use with a computer system. Such implementation may include a series of computer instructions fixed either on a tangible medium, such as a computer readable media (e.g., a diskette, CD-ROM, ROM, or fixed disk), or transmittable to a computer system via a modem or other interface device, such as a communications adapter connected to a network over a medium. The medium may be either a tangible medium (e.g., optical or analog communications lines) or a medium implemented with wireless techniques (e.g., microwave, infrared or other transmission techniques). The series of computer instructions preferably embodies all or part of the functionality previously described herein with respect to the system. Those skilled in the art should appreciate that such computer instructions can be written in a number of programming languages for use with many computer architectures or operating systems. Furthermore, such instructions may be stored in any memory device, such as semiconductor, magnetic, optical or other memory devices, and may be transmitted using any communications technology, such as optical, infrared, microwave, or other transmission technologies. It is expected that such a computer program product may be distributed as a removable medium with accompanying printed or electronic documentation (e.g., shrink wrapped software), preloaded with a computer system (e.g., on system ROM or fixed disk), or distributed from a server or electronic bulletin board over the network (e.g., the Internet or World Wide Web).","Although various exemplary embodiments of the invention are disclosed below, it should be apparent to those skilled in the art that various changes and modifications can be made which will achieve some of the advantages of the invention without departing from the true scope of the invention. These and other obvious modifications are intended to be covered by the claims and appendix that follows:"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":["The foregoing and advantages of the invention will be appreciated more fully from the following further description thereof with reference to the accompanying drawings wherein:",{"@attributes":{"id":"p-0014","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0023"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0024"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0017","num":"0025"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0026"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0027"},"figref":["FIG. 6","FIGS. 2"],"b":["3","5"]}]},"DETDESC":[{},{}]}
