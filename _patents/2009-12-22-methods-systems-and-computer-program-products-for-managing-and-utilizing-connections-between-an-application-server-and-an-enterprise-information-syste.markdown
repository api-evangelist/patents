---
title: Methods, systems, and computer program products for managing and utilizing connections between an application server and an enterprise information system based on a daytona architecture
abstract: Methods for managing, and utilizing connections between an application server and an enterprise information system (EIS) based on a Daytona architecture are provided. The methods may include operating a resource adapter conforming to the JCA standard, and interfacing with and being managed by the application server. The resource adapter may be configured to provide a connection to the EIS and to submit a query request to and receive query results from the EIS, including receiving the query request from a client; instructing the EIS to open a query, compile the query, execute the query, and return the results of the execution of the query; receiving the results of the execution of the query from the EIS; instructing the EIS to terminate the connection; and returning the results of the execution of the query to the client. Related systems and computer program products are also provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08621085&OS=08621085&RS=08621085
owner: AT&T Intellectual Property I, L.P.
number: 08621085
owner_city: Atlanta
owner_country: US
publication_date: 20091222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["This disclosure relates to database access and, more particularly, to methods for managing and utilizing database connections, and systems and\/or computer program products that implement such methods.","The Java Platform, Enterprise Edition (JEE) is a software development architecture created to facilitate the development and deployment of multitier enterprise applications, and to improve the portability and scalability of such applications. The JEE standard accomplishes this in part by providing a unified, component-based application model that allows the integration of a wide range of enterprise applications, including database management systems and naming and directory services. The JEE platform provides transaction management, life-cycle management, and resource pooling capabilities to components and applications; supports the Java Database Connectivity (JDBC) application programming interface (API) for database access; and provides the Java EE Connector standard discussed in more detail below.","Generally, a multitier enterprise application developed according to the JEE application model comprises three parts: containers, components, and connectors. Containers provide transaction support and resource pooling to connectors and clients, and may comprise, for instance, application servers developed in conformance with the JEE standard. Components are self-contained functional software units, each representing a portion of application logic divided by function. Connectors implement an API that enables bidirectional communication between JEE components and enterprise systems.","The Java EE Connector architecture (JCA) is a standard defined to address the challenges of providing a standard architecture for integrating JEE applications with enterprise information systems (EISs), which may be developed by different vendors or comprise legacy systems developed within an organization. The JCA standard defines a set of system-level contracts between a application server and a connector, and provides scalable, secure, and transactional mechanisms for enabling any JEE-compliant application server to communicate with any EIS for which a JCA-compliant connector has been developed. As used herein, a \u201cresource adapter\u201d is a JEE connector that implements the JCA standard for a particular EIS.","The Daytona database management system (DBMS) is an EIS developed by AT&T Labs originally for use within AT&T, and now available commercially. Like many other commercially available DBMSs, the Daytona architecture supports data access via unmanaged database connections using the JDBC API. Daytona, however, is distinct from other commercial DBMSs in a number of ways. First, the Daytona architecture relies on services provided by the underlying Unix operating system (such as locking file system, access control, scheduling, caching, and low-level networking), rather than duplicating those services within the DBMS itself. Consequently, databases implemented using Daytona are massively scalable, and are capable of storing and accessing extremely high volumes of data with a high degree of reliability. Additionally, the Daytona architecture provides a high-level fourth-generation query language known as Cymbal, which includes a subset of the Structured Query Language (SQL) data manipulation language. While Cymbal is a powerful language permitting a high degree of flexibility, its complexity requires a relatively high level of expertise to use effectively.","It should be appreciated that this Summary is provided to introduce a selection of concepts in a simplified form, the concepts being further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of this disclosure, nor is it intended to limit the scope of the disclosure.","Some embodiments can provide methods, devices, systems, and computer program products for managing and utilizing database connections. Pursuant to these embodiments, a method for managing and utilizing connections between an application server and an EIS may be provided. An application server supporting the JEE architecture in whole or in part is operated using a first programmed computer processor circuit, and an EIS comprising a database management system based on a Daytona architecture is operated using a second programmed computer processor circuit. A resource adapter conforming to the JCA standard and being interfaced with and managed by the application server is operated, and is configured to provide a connection to the EIS and to submit a query request to and receive query results from the EIS. Submitting a query request to the EIS may comprise receiving the query request from a client; instructing the EIS to open a query; instructing the EIS to compile the query; and instructing the EIS to execute the query. Receiving query results from the EIS may comprise instructing the EIS to return the results of the execution of the query; receiving the results of the execution of the query from the EIS; instructing the EIS to terminate the connection; and returning the results of the execution of the query to the client.","In some embodiments, the method further includes the resource adapter being further configured to submit a query request to and receive results from the EIS using multiple processing threads.","In further embodiments, the method additionally includes instructing the EIS to open a query, which comprises issuing a DS_OPEN command, including login credentials and a specification of the type of the query, to a PolyClient Daytona Query (PDQ) server of the EIS; and instructing the EIS to compile the query, which comprises issuing a DS_COMPILE command, including a name for the query and the query itself, to the PDQ server. The method further includes instructing the EIS to execute the query, which comprises issuing a DS_EXECUTE command, including the name for the query, to the PDQ server; and instructing the EIS to return the results of the query, which comprises issuing a DS_CAT command, including the name for the query, to the PDQ server. The method also includes instructing the EIS to terminate the connection, which comprises issuing a DS_CLOSE command to the PDQ server.","In additional embodiments, the method further includes a query request comprising a request for execution of a precompiled query in the EIS, wherein submitting a query request to the EIS comprises receiving the query request from a client; instructing the EIS to open a query; and instructing the EIS to execute the query. In other embodiments, the method additionally includes the resource adapter being further configured to maintain a list of precompiled queries available for execution by the client.","In some embodiments, the method also includes the resource adapter being further configured to catch exceptions resulting from opening, compiling, execution, receiving the results of, and\/or terminating the connection; and to dispatch an error notification in response to an exception caught by the resource adapter.","In further embodiments, the method includes the resource adapter being further configured to submit one or more query requests to the EIS within a transaction. In additional embodiments, the method further includes one or more query requests to insert data, wherein submitting a query request to the EIS comprises receiving a list of name-value pairs and a corresponding record class from the client, and converting the list of name-value pairs into a query suitable for submission to the EIS.","In other embodiments, the method additionally includes receiving a formatter object from the client, where the formatter object specifies the format in which the results of the execution of the query are to be returned to the client. The results of the execution of the query are formatted according to the format specified by the formatter object prior to returning the results of the execution of the query to the client.","In further embodiments, the connection to the EIS provided by the resource adapter comprises a secure connection, and data communicated over the secure connection is encrypted using a cryptographic algorithm.","Embodiments have been described herein primarily with respect to methods for managing and utilizing connections between an application server supporting the JEE architecture in whole or in part and an EIS comprising a database management system based on a Daytona architecture using a resource adapter conforming to the JCA standard. However, analogous computer systems and computer program products may also be provided according to other embodiments.","Other methods, systems, and\/or computer program products according to other embodiments will be or become apparent to one with skill in the art upon review of the following drawings and detailed description. It is intended that all such additional systems, methods, and\/or computer program products be included within this description and be protected by the accompanying, claims.","Methods for managing and utilizing, database connections between an application server supporting the Java Platform, Enterprise Edition (JEE) architecture in whole or in part and an EIS comprising a database management system based on a Daytona architecture, as well as related systems and computer program products, will now be described more fully hereinafter with reference to the accompanying drawings, in which illustrative embodiments are shown. However, it will be appreciated that these methods for managing and utilizing database connections between an application server supporting the JEE architecture in whole or in part and an EIS comprising a database management system based on a Daytona architecture, as well as related systems and computer program products, may be embodied in many different forms, and thus the present application should not be construed as limited to the embodiments set forth herein. Rather, these embodiments are provided so that this disclosure will be thorough and complete, and to fully convey the scope of the embodiments to those skilled in the art. Like numbers refer to like elements throughout.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the embodiment. As used herein, the singular forms \u201ca\u201d, \u201can,\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be understood that the term \u201cand\/or\u201d as used herein means any one of or any combination of the listed alternatives. It will be further understood that the terms \u201ccomprises,\u201d \u201ccomprising,\u201d \u201cincludes,\u201d and\/or \u201cincluding,\u201d when used herein, specify the presence of stated features, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, steps, operations, elements, components, and\/or groups thereof.","It will be understood that when an element is referred to as being \u201ccoupled,\u201d \u201cconnected,\u201d or \u201cresponsive\u201d to another element, it can be directly coupled, connected, or responsive to the other element, or intervening elements may also be present. In contrast, when an element is referred to as being, \u201cdirectly coupled\u201d, \u201cdirectly connected,\u201d or \u201cdirectly responsive\u201d to another element, there are no intervening elements present.","It will be understood that, although the terms \u201cfirst,\u201d \u201csecond,\u201d etc. may be used herein to describe various elements, these elements should not be limited by these terms. These terms are only used to distinguish one element from another. Thus, a first element could be termed a second element without departing from the teachings of the present embodiments.","Unless otherwise defined, all terms (including technical and scientific terms) used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this embodiment belongs. It will be further understood that terms, such as those defined in commonly used dictionaries, should be interpreted as having a meaning that is consistent with their meaning in the context of the relevant art, and will not be interpreted in an idealized or overly formal sense unless expressly so defined herein.","As will further be appreciated by one of skill in the art, the present embodiments may be methods, systems, and\/or computer program products. Accordingly, embodiments may be entirely hardware, entirely software, or a combination of software and hardware aspects. Furthermore, embodiments may take the form of a computer program product comprising a computer-readable storage medium having computer-usable program code embodied in the medium. A non-exhaustive list of specific examples of the computer-readable storage medium would include the following: a portable computer diskette, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), and a portable compact disc read-only memory (CD-ROM) or digital versatile disc (DVD). Any suitable computer-readable storage medium may be utilized including hard disks, CD-ROMs, optical storage devices, or magnetic storage devices.","Embodiments are also described using flowchart illustrations and block diagrams. It will be understood that each block (of the flowcharts and block diagrams), and combinations of blocks, can be implemented by computer program instructions. These program instructions may be provided to a processor circuit, such as a microprocessor, microcontroller, or other processor, such that the instructions which execute on the processor(s) create means for implementing the functions specified in the block or blocks. As used herein, the term \u201cprocessor circuit\u201d includes circuits comprised of a single processor or multiple processors, wherein the processor(s) may each comprise one or more processor cores. The computer program instructions may be executed by the processor circuit(s) to cause a series of operational steps to be performed by the processor circuit(s) to produce a computer implemented process such that the instructions which execute on the processor circuit(s) provide steps for implementing the functions specified in the block or blocks.","Accordingly, the blocks support combinations of means for performing the specified functions, combinations of steps for performing the specified functions, and program instruction means for performing the specified functions. It will also be understood that each block, and combinations of blocks, can be implemented by special purpose hardware-based systems which perform the specified functions or steps, or combinations of special purpose hardware and computer instructions.","It should also be noted that in some alternate implementations, the functions\/acts noted in the blocks may occur out of the order noted in the flowcharts. For example, two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order, depending upon the functionality\/acts involved.","Computer program code or \u201ccode\u201d for carrying out operations in embodiments may be written in a programming language such as Java, C++, C, JavaScript, Visual Basic. Perl, or in various other programming languages. Software embodiments do not depend on implementation with a particular programming language. The code, or portions thereof, may execute entirely on one or more servers, or it may execute partly on a server and partly on a client within a client device in a communications network. In the latter scenario, the client device may be connected to a server over a LAN or a WAN (e.g., an intranet), or the connection may be made through the internet (e.g., via an Internet Service Provider (ISP)). It is understood that the present embodiments are not TCP\/IP-specific or internet-specific. Exemplary embodiments may be implemented using various protocols over various types of computer networks.","As will be appreciated by one of skill in the art, embodiments may include an application server and\/or an EIS executing on a single computer, or executing on a high-availability cluster comprising two or more computers. As discussed herein, the term \u201capplication server\u201d may refer to a system including a software framework for facilitating the development of distributed applications through the use of modular components. The term \u201cDaytona architecture\u201d refers to AT&T's proprietary Daytona database management system, and the term \u201cDaytona database\u201d may refer to any database application or service based on or implemented via AT&T's proprietary Daytona database management system. It will be understood that the term \u201cclient,\u201d as used herein, may refer to any entity (e.g., an application, component, or object, whether local or remote) that acts as a consumer of services provided by a resource adapter or application server.","Methods, systems, and computer program products are disclosed herein that may be used to manage and utilize database connections between an application server supporting the JEE architecture in whole or in part and an EIS comprising a database management system based on a Daytona architecture. As such, these methods, systems, and computer program products may be used to integrate a Daytona-based EIS with enterprise applications provided by an application server by providing managed connections between clients and the EIS.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"b":["100","105","100","105","105","110","105","110","115","100","100","110","120","105","110","115","120"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["115","200","105","205","105","100","205","120","100","100","205","210","100","120","210","100","215","120","215","105","120","105"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIGS. 3-5","FIG. 1","FIG. 2"],"b":["120","120","120"]},"In , the logical flow of executing a query to retrieve data from Daytona-based EIS  is illustrated according to some embodiments. The flow starts at block , when client component  calls the JNDI service provided by application server , and retrieves DaytonaConnectionFactory object . At block , client component  obtains DaytonaConnection handle  from DaytonaConnectionFactory object . As described earlier with respect to , all interaction between client component  and EIS  is handled via DaytonaConnection handle  provided by the DaytonaConnectionFactory object .","Client component  makes a query request via DaytonaConnection handle  at block . The query request may include a query composed of statements written, e.g., using Structured Query Language (SQL); using Cymbal, the query language provided by Daytona-based EIS ; or in a combination of SQL and Cymbal known as Daytona SQL (DSQL). The query request may be accompanied by a custom formatter object, which may specify the particular format in which the query results, if any, are to be returned to the client. At block , DaytonaConnection object  passes the query request and the custom formatter object, if provided, to DaytonaManagedConnection object . As noted above with respect to , DaytonaManagedConnection object  maintains the actual connection to EIS , and is responsible for handling tasks associated with issuing commands for compiling, executing, retrieving, and parsing the results of queries.","At block , DaytonaManagedConnection object  initiates the process of running the query by issuing the DS_OPEN command to the PolyClient Daytona Query (PDQ) server of EIS . The PDQ server is the component of EIS  responsible for receiving, and executing query commands issued by clients. In some embodiments, DaytonaManagedConnection object  may be configured to use multiple processor threads, so that any timeouts or other abnormal conditions resulting from commands sent to the PDQ server may be handled by DaytonaManagedConnection object  without blocking the normal execution flow of DaytonaManagedConnection object . DaytonaManagedConnection object  may also send login credentials and an identification of the query type (i.e., whether the query is composed of Cymbal, SQL, or DSQL statements) along with the DS_OPEN command. At block , DaytonaManagedConnection object  issues the DS_COMPILE command, including a name by which the query may be referred and the text of the query itself, to the PDQ server. At block , DaytonaManagedConnection object  then sends the DS_EXECUTE command, including the query name, to the PDQ server, which causes the query to be executed on EIS .","Next, at block , DaytonaManagedConnection object  issues the DS_CAT command, including the query name, to the PDQ server, instructing EIS  to return the results of the query execution. After the results are received, DaytonaManagedConnection object  issues the DS_CLOSE command to the PDQ server to terminate the connection at block . DaytonaManagedConnection object  thus enforces the proper termination and cleanup of database connections to ensure the maximum utilization of available connections. At decision block , DaytonaManagedConnection object  determines whether a custom formatter object was specified for the executed query. If not, DaytonaManagedConnection object  returns the query results as received from EIS  to client component  at block . If, however, a custom formatter object was specified, DaytonaManagedConnection object  formats the query results as specified by the custom formatter object at block  before returning the formatted query results to client component  at block .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4","b":["120","400","100","205","405","100","210","205"]},"Next, at block , client component  accesses a list provided by DaytonaConnection handle  of precompiled queries available on EIS . A precompiled query may be a query that has been previously defined, compiled, and stored on EIS , and made available for execution by clients. At block , client component  selects one of the available precompiled queries, and makes a query request for execution of the precompiled query, optionally accompanied by a custom formatter object, via DaytonaConnection handle . At block , DaytonaConnection object  passes the query request and the custom formatter object, if provided, to DaytonaManagedConnection object .","At block , DaytonaManagedConnection object  issues the DS_OPEN command, including login credentials and an identification of the query type, to the PDQ server of EIS . Next, at block , DaytonaManagedConnection object  sends the DS_EXECUTE command, including the query name and any required query parameters, to the PDQ server, which causes the precompiled query to be executed on EIS . Next, at block , DaytonaManagedConnection object  issues the DS_CAT command, including, the query name, to the PDQ server, instructing, EIS  to return the results of the query execution. After the results are received, DaytonaManagedConnection object  issues the DS_CLOSE command to the PDQ server to terminate the connection at block . At decision block , DaytonaManagedConnection object  determines whether a custom formatter object was specified for the executed query. If not, DaytonaManagedConnection object  returns the query results as received from EIS  to client component  at block . If, however, a custom formatter object was provided, DaytonaManagedConnection  object formats the query results as specified by the custom formatter object at block  before returning the formatted query results to client component  at block .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 5","b":["120","500","100","205","505","100","210","205","510","100","210","120","210","215","515"]},"At block , DaytonaManagedConnection object  converts the list of name\/value pairs and the corresponding record class into valid Cymbal script for inserting data into EIS . The script generated by DaytonaManagedConnection  may also include the necessary commands to ensure that the insert request occurs within a transaction, so that if an error or other abnormal condition occurs during execution of the insert query, all modifications to the data in the EIS made by the script can be \u201crolled back\u201d or undone. At block . DaytonaManagedConnection object  issues the DS_OPEN command, including login credentials and an identification of the query type, to the PDQ server of EIS . At block , DaytonaManagedConnection object  issues the DS_COMPILE command, including a name by which the query may be referred and the script generated by DaytonaManagedConnection object , to the PDQ server. At block , DaytonaManagedConnection object  sends the DS_EXECUTE command, including the query name, to the PDQ server, which causes the query to be executed on EIS .","Next, at block , DaytonaManagedConnection object  issues the DS_CAT command, including the query name, to the PDQ server, instructing, EIS  to return the results of the query execution. If any errors or other abnormal conditions occurred during execution of the query that would require, e.g., the rollback of the transaction, such errors or abnormal conditions are captured by DaytonaManagedConnection object  at block . After the results of the query are received, DaytonaManagedConnection object  issues the DS_CLOSE command to the PDQ server to terminate the connection at block , and DaytonaManagedConnection object  returns the query results to client component  at block .","It will be understood by one of skill in the art that, in some embodiments, resource adapter  may be further configured to catch exceptions resulting from opening, compiling, executing, receiving, the result of, or terminating a connection to EIS . In response to catching an exception, resource adapter  may dispatch an error notification by, for instance, raising an error to be caught by client component , logging the error in a log file, and\/or sending an e-mail notification of the error. It will be further understood that, while  each illustrates the execution of a single query request, in some embodiments, multiple query requests to retrieve, insert, delete, or modify data in EIS  may be executed using the same open database connection prior to DaytonaManagedConnection object  issuing the DS_CLOSE command to the PDQ server to terminate the connection.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 6","b":["600","600","605","610","605","600","615","610","615","605","605","600","620","610","620","605","600","610","625","600","610","630"]},"Computer system  may also include a network interface  communicatively coupled to bus . Network interface , such as a wired or wireless network interface card (NIC), a modem, or other communications device, may provide a bi-directional data communication coupling via network link  to a local network . Network link  may provide data communication to, e.g. host computer  via local network , or to server computer  via the internet . In this way, computer system  may send and receive message and data, including program code, through network interface  and network link .","Some embodiments are related to the use of computer system  for implementing the methods, systems, and\/or computer program products described herein. According to some embodiments, the methods are performed by computer system  in response to processor circuit  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor circuit  to perform the steps described herein. In alternative embodiments, hardware circuitry may be used in place of or in combination with software instructions to implement the embodiments. Thus, the described embodiments are not limited to any specific combination of hardware circuitry and software. Moreover, it will be appreciated by one of skill in the art that embodiments may be implemented on a single computer system , or may be implemented on, e.g., a high-availability cluster of two or more computer systems, each substantially similar to computer system .","Many different embodiments have been disclosed herein, in connection with the above description and the drawings. It will be understood that it would be unduly repetitious and obfuscating to literally describe and illustrate every combination and subcombination of these embodiments. Accordingly, the present specification, including the drawings, shall be construed to constitute a complete written description of all combinations and subcombinations of the embodiments described herein, and of the manner and process of making and using them, and shall support claims to any such combination or subcombination.","In the drawings and specification, there have been disclosed various embodiments and, although specific terms are employed, they are used in a generic and descriptive sense only and not for purposes of limitation."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
