---
title: Network addressing scheme for reducing protocol overhead in an optical network
abstract: A method for operating a network and a network architecture implementing the method are described. The method, in one embodiment, begins by grouping a plurality of nodes into zones, where the network includes the plurality of nodes. At least one of the nodes in each one of the zones is one of a plurality of boundary nodes, and each of the boundary nodes in each one of the zones is coupled to a boundary node in another of the zones by one of a first number of inter-zone optical links. One of the zones includes a number of nodes, each of which is coupled to at least one other of the nodes by one of a second number of intra-zone optical links. Next, a non-boundary node is configured to transmit network information to other of the nodes. The non-boundary node is a node in the zone that is not a boundary node. Finally, a boundary node in the zone is configured to limit transmission of the network information through itself to other of the boundary nodes. The network information so limited can be restoration information (in the event of a failure), network topology information, and/or other network information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07724655&OS=07724655&RS=07724655
owner: Cisco Systems, Inc.
number: 07724655
owner_city: San Jose
owner_country: US
publication_date: 20041005
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is a continuation-in-part of patent application Ser. No. 09\/232,397, filed Jan. 15, 1999 and entitled \u201cA METHOD FOR ROUTING INFORMATION OVER A NETWORK,\u201d having A. N. Saleh, H. M. Zadikian, Z. Baghdasarian, and V. Parsi as inventors. This application is assigned to Monterey Networks, Inc., the assignee of the present invention, and is hereby incorporated by reference, in its entirety and for all purposes.","This invention also claims priority from a provisional application entitled \u201cA NETWORK ADDRESSING SCHEME FOR REDUCING PROTOCOL OVERHEAD IN AN OPTICAL NETWORK\u201d (U.S. Provisional Application No. Ser. No. 60\/137,472), filed Jun. 4, 1999, having S. N. Ali and S. E. Plote as inventors, which is hereby incorporated by reference, in its entirety and for all purposes.","This application is related to patent application Ser. No. 09\/232,395, filed Jan. 15, 1999 and entitled \u201cA CONFIGURABLE NETWORK ROUTER,\u201d having H. M. Zadikian, A. N. Saleh, J. C. Adler, Z. Baghdasarian, and V. Parsi as inventors. This related application is assigned to Monterey Networks, Inc., the assignee of the present invention, and is hereby incorporated by reference, in its entirety and for all purposes.","1. Field of the Invention","This invention relates to the field of information networks, and more particularly relates to a protocol for configuring routes over a network.","2. Description of the Related Art","Today's networks carry vast amounts of information. High bandwidth applications supported by these networks include streaming video, streaming audio, and large aggregations of voice traffic. In the future, these bandwidth demands are certain to increase. To meet such demands, an increasingly popular alternative is the use of lightwave communications carried over fiber-optic cables. The use of lightwave communications provides several benefits, including high bandwidth, ease of installation, and capacity for future growth.","Optical infrastructures are capable of transmission speeds in the gigabit range, which helps address the ever-increasing need for bandwidth mentioned above. Such infrastructures employ various topologies, including ring and mesh topologies. In order to provide fault protection, ring topologies normally reserve a large portion (e.g. 50% or more) of the network's available bandwidth for use in restoring failed circuits. However, ring topologies are capable of quickly restoring failed circuits. This capability is important in providing reliable service to customers, and is particularly important in telephony applications, where a failure can result in alarms, dropped calls, and, ultimately, customer dissatisfaction and lost revenue. In a similar vein, because of bandwidth demands, protocol overhead related to provisioning, restoration, and other functions should be kept to a minimum in order to make the maximum amount of bandwidth available for use by customers.","An alternative to the ring topology, the mesh topology reduces the amount of bandwidth needed for protection. The mesh topology is a point-to-point topology, with each node in the network connected to one or more other nodes. Because a circuit may be routed through various combinations of the network's nodes and over the various links which connect them, excess capacity through a given node or over a given link can serve to protect several circuits. However, the restoration of a circuit following a failure in a mesh topology can consume a relatively large amount of time.","In one embodiment, the present invention reduces the time and resources required to restore a failed circuit (or provision a new circuit) in an optical network by partitioning the nodes of an optical network into zones. The time and resources required are reduced, for example, by localizing the required actions to the zone in which the failure occurred. Localization is effected through the use of a node that acts as a substitute for the source or destination node, as the case may be. This substitute node is referred to herein as a proxy node. The proxy node will normally be a boundary node for the zone in which no failure occurred. If a failure occurs between zones, both boundary nodes can act as proxies for their respective non-boundary nodes, or a full restoration may instead be performed.","According to one embodiment of the present invention, a method is provided for operating a network. The method, in one embodiment, begins by grouping a plurality of nodes into zones, where the network includes the plurality of nodes. At least one of the nodes in each one of the zones is one of a plurality of boundary nodes, and each of the boundary nodes in each one of the zones is coupled to a boundary node in another of the zones by one of a first number of inter-zone optical links. One of the zones includes a number of nodes, each of which is coupled to at least one other of the nodes by one of a second number of intra-zone optical links. Next, a non-boundary node is configured to transmit network information to other of the nodes. The non-boundary node is a node in the zone that is not a boundary node. Finally, a boundary node in the zone is configured to limit transmission of the network information through itself to other of the boundary nodes. The network information so limited can be restoration information (in the event of a failure), network topology information, and\/or other network information.","According to another embodiment of the present invention, a network includes a plurality of nodes, a plurality of inter-zone optical links, and a plurality of intra-zone optical links. The nodes are grouped into zones, and each one of the zones includes at least a first number of the nodes, at least one of which is a boundary node. A boundary node in each one of the zones is coupled to a boundary node in at least one of the other zones by at least one of the inter-zone optical links One of the zones includes a second number of nodes, which including a first boundary node and a first non-boundary node. The first non-boundary node is one of the second number of the nodes that is not the first boundary node, and each one of the second number of nodes is coupled to at least one other of those nodes by at least one of the intra-zone optical links. The non-boundary node is configured to transmit network information to other of the nodes, while the first boundary node is configured to limit transmission of network information through itself to at least one other of the boundary nodes.","The foregoing is a summary and thus contains, by necessity, simplifications, generalizations and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below.","The use of the same reference symbols in different drawings indicates similar or identical items.","The following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather, any number of variations may fall within the scope of the invention which is defined in the claims following the description.","In one embodiment, a network architecture is described that provides many advantages, including a reduction in protocol overhead experienced by the network, quicker provisioning and restoration of circuits, support for highly efficient protocols, and other advantages. These and other advantages are particularly important when an embodiment of the present invention is used in an optical telecommunications network (e.g., a network employing the Synchronous Optical Network (SONET) protocol, such as that described herein), due in part to the enhancement in restoration times and reduction in protocol overhead provided thereby.","Network Architecture","To limit the size of the topology database used by some protocols, and to limit the scope of broadcast packets (e.g., those which may be used for restoration), the nodes of a network according to one embodiment of the present invention are divided into logical groups referred to herein as \u201czones.\u201d The use of zones provides several benefits, and can be implemented in several different ways, some of which can be implemented concurrently.","For example, the zone boundaries can be used to limit the flow of topological information. Each zone can be configured to run a separate copy of the topology distribution process, and nodes within each zone are only required to maintain information about their own zone. There would then be no need for a zone's topology to be known outside its boundaries, and non-boundary nodes within a zone need not be aware of the network's topology external to their respective zones. As will be apparent to one of skill in the art, however, this need not hold true for all nodes in certain embodiments of the present invention.","Another example of the use of zone boundaries is in the provisioning and restoration of circuits within the network. Zone boundaries can be used to limit the flow of information generated by certain nodes during such provisioning and restoration. For example, a node can act as a proxy node for the source or destination node, in the event of a failure in the network affecting the circuit between the two nodes. In that case, a node at the boundary of the zone in which the failure has occurred acts as a proxy for the source (or destination) node in the other zone, avoiding the need to involve that portion of the circuit lying outside of the zone experiencing a failure, which would be expected to remain unchanged.","Nodes that attach to multiple zones are referred to herein as boundary nodes. Boundary nodes are required to maintain a separate topological database, also referred to herein as a link-state or connectivity database, for each of the zones to which they attach. Boundary nodes use the connectivity database(s) for intra-zone routing. Boundary nodes are also required to maintain a separate database that describes the connectivity of the zones themselves. This database, which is referred to herein as the network database, is used for inter-zone routing and describes the topology of a special zone, referred to herein as the backbone, which is normally assigned an ID of 0. The backbone has all the characteristics of a zone. There is no need for a backbone's topology to be known outside the backbone, and its boundary nodes need not be aware of the topologies of other zones.","A network is referred to herein as flat if the network consists of a single zone (i.e., zone 0 or the backbone zone). Conversely, a network is referred to herein as hierarchical if the network includes two or more zones, not including the backbone. The resulting multi-level hierarchy (i.e., nodes in multiple zones) provides the following benefits:\n\n","As noted, the protocol routes information at two different levels: inter-zone and intra-zone. The former is only used when the source and destination nodes of a virtual path are located in different zones. Inter-zone routing supports path restoration on an end-to-end basis from the source of the virtual path to the destination by isolating failures between zones. In the latter case, the boundary nodes in each transit zone originate and terminate the path-restoration request on behalf of the virtual path's source and destination nodes. A boundary node that assumes the role of a source (or destination) node during the path restoration activity is referred to herein as a proxy source (destination) node. Such nodes are responsible for originating (terminating) the request for the restoration of a VP within their own zones. Proxy nodes are also required to communicate with boundary nodes in other zones to establish an inter-zone path for a VP.","In one embodiment, every node in a network employing the protocol is assigned a globally unique address, for example, a 16-bit ID (referred to herein as the node ID). A node ID may be divided into two parts, zone ID and node address, for example. Logically, each node ID is a pair (zone ID, node address), where the zone ID identifies a zone within the network, and the node address identifies a node within that zone. To minimize overhead, multiple node ID types may be defined, each with a different size zone ID field, for example. For example, three types of node IDs are defined in the zone architecture described herein, although a different number of zone types can be employed. The network provider selects which packet type to use based on the desired network architecture.",{"@attributes":{"id":"p-0042","num":"0048"},"figref":["FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"b":["100","110","120","130"],"sup":["13 ","10 "]},"Type 0 IDs work well for networks that contain a small number of large zones (e.g., less than about 4 zones). Type 2 IDs are well suited for networks that contain a large number of small zones (e.g., more than about 15 zones). Type 1 IDs provide a good compromise between zone size and number of available zones, which makes a type 1 node ID a good choice for networks that contain an average number of medium size zones (e.g., between about 4 and about 15 zones). When zones being described herein are used in a network, the node IDs of the nodes in a zone may be delineated as two decimal numbers separated by a period (e.g., ZoneID.NodeAddress).",{"@attributes":{"id":"p-0044","num":"0050"},"figref":["FIG. 2","FIG. 2"],"b":["200","201","204","211","217","221","226","231","236","241","247","201","204","200","213","217","222","224","234","235","241","242","200","201","204"]},"Initialization of Network Nodes","Once a network topology has been defined, the protocol described herein allows the user to configure one or more end-to-end connections that can span multiple nodes and zones, an operation is referred to herein as provisioning. Each set of physical connections that are provisioned creates an end-to-end connection between the two end nodes that supports a virtual point-to-point link (referred to herein as a virtual path or VP). The resulting VP has an associated capacity and an operational state, among other attributes. The end points of a VP can be configured to have a master\/slave relationship. The terms source and destination are also used herein in referring to the two end-nodes. In such a relationship, the node with a numerically lower node ID assumes the role of the master (or source) node, while the other assumes the role of the slave (or destination) node. The protocol defines a convention in which the source node assumes all recovery responsibilities and the destination node simply waits for a message from the source node informing the destination node of the VP's new path, although the opposite convention or another paradigm could easily be employed.","VPs are also assigned a priority level, which determines their relative priority within the network. This quality of service (QoS) parameter is used during failure recovery procedures to determine which VPs are first to be restored. Four QoS levels (0-3) are nominally defined in the protocol, with 0 being the lowest, although a larger or smaller number of QoS levels can be used. Provisioning is discussed in greater detail subsequently herein.","Network nodes can use a protocol such as that referred to herein as the Hello Protocol in order to establish and maintain neighbor relationships, and to learn and distribute link-state information throughout the network. The protocol relies on the periodic exchange of bi-directional packets (Hello packets) between neighbors. During the adjacency establishment phase of the protocol, which involves the exchange of INIT packets, nodes learn information about their neighbors, such as that listed in Table 1.",{"@attributes":{"id":"p-0048","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Information regarding neighbors stored by a node."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameter","Usage"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Node ID","Node ID of the sending node, which is preferably,"]},{"entry":[{},"from 8 bits to 32 bits."]},{"entry":["HelloInterval","How often Hello packets should be sent by the"]},{"entry":[{},"receiving node."]},{"entry":["HelloDeadInterval","The time interval, in seconds, after which the"]},{"entry":[{},"sending node will consider its neighbor dead if a"]},{"entry":[{},"valid Hello packets is not received."]},{"entry":["LinkCost","Cost of the link between the two neighbors. This"]},{"entry":[{},"may represent distance, delay or any other metric."]},{"entry":["LinkCapacity","Total link capacity."]},{"entry":["QoS3Capacity","Link capacity reserved for QoS 3 connections."]},{"entry":["QoSnCapacity","Link capacity reserved for QoS 0-2 connections."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"During normal protocol operation, each node constructs a structure known as a Link State Advertisement (LSA), which contains a list of the node's neighbors, links, the capacity of those links, the quality of service available on over links, one or more costs associated with each of the links, and other pertinent information. The node that constructs the LSA is referred to herein as the originating node. Normally, the originating node is the only node allowed to modify its contents (except for the HOP_COUNT field, which is not included in the checksum and so may be modified by other nodes). The originating node retransmits the LSA when the LSA's contents change. The LSA is sent in a special Hello packet that contains not only the originating node's own LSA in its advertisement, but also ones received from other nodes. Each node stores the most recently generated instance of an LSA in the node's link state database. The list of stored LSAs gives the node a complete topological map of the network. The topology database maintained by a given node is, therefore, nothing more than a list of the most recent LSAs generated by its peers and received in Hello packets.","In the case of a stable network, the majority of transmitted Hello packets are empty (i.e., contain no topology information) because only altered LSAs are included in the Hello messages. Packets containing no changes (no LSAs) are referred to herein as null Hello packets. The Hello protocol requires neighbors to exchange null Hello packets periodically. The HelloInterval parameter defines the duration of this period. Such packets ensure that the two neighbors are alive, and that the link that connects them is operational.","Initialization Message","An INIT message is the first protocol transaction conducted between adjacent nodes and is performed upon network startup or when a node is added to a pre-existing network. An INIT message is used by adjacent nodes to initialize and exchange adjacency parameters. The packet contains parameters that identify the neighbor (the node ID of the sending node), link bandwidth (both total and available, on a QoS3\/QoSn basis), and configured Hello protocol parameters. The structure, field definitions, and related information are illustrated subsequently in  and described in the text corresponding thereto.","In systems that provide two or more QoS levels, varying amounts of link bandwidth may be set aside for the exclusive use of services requiring a given QoS. For example, a certain amount of link bandwidth may be reserved for QoS3 connections. This guarantees that a given amount of link bandwidth will be available for use by these high-priority services. The remaining link bandwidth would then be available for use by all QoS levels (0-3). The Hello parameters include the HelloInterval and HelloDeadInterval parameters. The HelloInterval is the number of seconds between transmissions of Hello packets. A zero in this field indicates that this parameter hasn't been configured on the sending node and that the neighbor should use its own configured interval. If both nodes send a zero in this field, then a default value (e.g., 5 seconds) should be used. The HelloDeadInterval is the number of seconds the sending node will wait before declaring a silent neighbor down. A zero in this field indicates that this parameter hasn't been configured on the sending node and that the neighbor should use its own configured value. If both nodes send a zero in this field, then a default value (e.g., 30 seconds) should be used. The successful receipt and processing of an INIT packet causes a START event to be sent to the Hello State machine, as is described subsequently.","Hello Message","Once adjacency between two neighbors has been established, the nodes periodically exchange Hello packets. The interval between these transmissions is a configurable parameter that can be different for each link, and for each direction. Nodes are expected to use the HelloInterval parameters specified in their neighbor's Hello message. A neighbor is considered dead if no Hello message is received from the neighbor within the HelloDeadInterval period (also a configurable parameter that can be link-blank and direction-specific).","In one embodiment, nodes in a network continuously receive Hello messages on each of their links and save the most recent LSAs from each message. Each LSA contains, among other things, an LSID (indicating which instance of the given LSA has been received) and a HOP_COUNT. The HOP_COUNT specifies the distance, as a number of hops, between the originating node and the receiving node. The originating node always sets this field of 0 when the LSA is created. The HOP_COUNT field is incremented by one for each hop (from node to node) traversed by the LSA instance. The HOP_COUNT field is set to zero by the originating node and is incremented by one on every hop of the flooding procedure. The ID field is initialized to FIRST_LSID during node start-up and is incremented every time a new instance of the LSA is created by the originating node. The initial ID is only used once by each originating node. Preferably, an LSA carrying such an ID is always accepted as most recent. This approach allows old instances of an LSA to be quickly flushed from the network when the originating node is restarted.","During normal network operation, the originating node of an LSA transmits LS update messages when the node detects activity that results in a change in the node's LSA. The node sets the HOP_COUNT field of the LSA to 0 and the LSID field to the LSID of the previous instance plus 1. Wraparound may be avoided by using a sufficiently-large LSID (e.g., 32 bits). When another node receives the update message, the node records the LSA in the node's link state database and schedules the LSA for transmission to the node's own neighbors. The HOP_COUNT field is incremented by one and transmitted to the neighboring nodes. Likewise, when the nodes downstream of the current node receive an update message with a HOP_COUNT of H, they transmit their own update message to all of their neighbors with a HOP_COUNT of H+1, which represents the distance (in hops) to the originating node. This continues until the update message either reaches a node that has a newer instance of the LSA in its database or the hop-count field reaches MAX_HOPS.",{"@attributes":{"id":"p-0056","num":"0062"},"figref":"FIG. 3","b":["300","310","300","320","330","340","350","360","370","380","390"]},"It should be noted that those skilled in the art will recognize the boundaries between and order of operations in this and the other flow diagrams described herein are merely illustrative and alternative embodiments may merge operations, impose an alternative decomposition of functionality of operations, or re-order the operations presented therein. For example, the operations discussed herein may be decomposed into sub-operations to be executed as multiple computer processes. Moreover, alternative embodiments may combine multiple instances of particular operation or sub-operations. Furthermore, those skilled in the art will recognize that the operations described in this exemplary embodiment are for illustration only. Operations may be combined or the functionality of the operations may be distributed in additional operations in accordance with the invention.",{"@attributes":{"id":"p-0058","num":"0064"},"figref":"FIG. 4","b":["400","410","420","430","430","450","460","450"]},"The LSA of the inactive node propagates throughout the network until the hop-count reaches MAX_HOPS. Various versions of the GET_LSA request are generated by nodes along the path, each with a varying number of requested LSA entries. An entry is removed from the request when the request reaches a node that has an instance of the requested LSA that meets the criteria of list B.","All database exchanges are expected to be reliable using the above method because received LSA's must be individually acknowledged. The acknowledgment packet contains a mask that has a \u201c1\u201d in all bit positions that correspond to LSA's that were received without any errors. The low-order bit corresponds to the first LSA received in the request, while the high-order bit corresponds to the last LSA. Upon receiving the response, the sender verifies the checksum of all LSA's in its database that have a corresponding \u201c0\u201d bit in the response. The sender then retransmits all LSA's with a valid checksum and ages out all others. An incorrect checksum indicates that the contents of the given LSA has changed while being held in the node's database. This is usually the result of a memory problem. Each node is thus required to verify the checksum of all LSA's in its database periodically.","The LS checksum is provided to ensure the integrity of LSA contents. As noted, the LS checksum is used to detect data corruption of an LSA. This corruption can occur while the LSA is being transmitted, while the LSA is being held in a node's database, or at other points in the networking equipment. The checksum can be formed by any one of a number of methods known to those of skill in the art, such as by treating the LSA as a sequence of 16-bit integers, adding them together using one's complement arithmetic, and then taking the one's complement of the result. Preferably, the checksum doesn't include the LSA's HOP_COUNT field, in order to allow other nodes to modify the HOP_COUNT without having to update the checksum field. In such a scenario, only the originating node is allowed to modify the contents of an LSA except for those two fields, including its checksum. This simplifies the detection and tracking of data corruption.","Specific instances of an LSA are identified by the LSA's ID field, the LSID. The LSID makes it possible to detect old and duplicate LSAs. Similar to sequence numbers, the space created by the LSID is circular: the LSID starts at some value (FIRST_LSID), increases to some maximum value (FIRST_LSID\u22121), and then goes back to FIRST_LSID+1. Preferably, the initial value is only used once during the lifetime of the LSA, which helps flush old instances of the LSA quickly from the network when the originating node is restarted. Given a large enough LSID, wrap-around will never occur, in a practical sense. For example, using a 32 bit LSID and a MinLSInterval of 5 seconds, wrap-around takes on the order of 680 years.","LSIDs must be such that two LSIDs can be compared and the greater (or lesser) of the two identified, or a failure of the comparison indicated. Given two LSIDs x and y, x is considered to be less than y if either\n\n||<2and \n\nor\n\n||>2and \n\nis true. The comparison fails if the two LSIDs differ by more than 2.\n\nSending, Receiving, and Verifying LSAs\n",{"@attributes":{"id":"p-0064","num":"0070"},"figref":["FIG. 5","FIG. 5"]},"For each new LSA in the link state database (step ), then, the following steps are taken. If the LSA is new, several actions are performed. For each node in the neighbor list (step ), the state of the neighboring node is determined. If the state of the neighboring node is set to a value of less than ACTIVE, that node is skipped (steps  and ). If the state of the neighboring node is set to a value of at least ACTIVE and if the LSA was received from this neighbor (step ), the given neighbor is again skipped (step ). If the LSA was not received from this neighbor (step ), the LSA is added to the list of LSAs that are waiting to be sent by adding the LSA to this neighbor's LSAsToBeSent list (step ). Once all LSAs have been processed (step ), requests are sent out. This is accomplished by stepping through the list of LSAs to be sent (steps  and ). Once all the LSAs have been sent, the process is complete.",{"@attributes":{"id":"p-0066","num":"0072"},"figref":"FIG. 6","b":["600","610","620","630","435"]},"Otherwise, the node's link state database is searched to find the current LSA (step ), and if not found, the current LSA is written into the database (step ). If the current LSA is found in the link state database, the current LSA and the LSA in the database are compared to determine if they were sent from the same node (step ). If the LSAs were from the same node, the LSA is installed in the database (step ). If the LSAs were not from the same node, the current LSA is compared to the existing LSA to determine which of the two is more recent (step ). The process for determining which of the two LSAs is more recent is discussed in detail below in reference to . If the LSA stored in the database is the more recent of the two, the LSA received is simply discarded (step ). If the LSA in the database is less recent than the received LSA, the new LSA is installed in the database, overwriting the existing LSA (step ). Regardless of the outcome of this analysis, the LSA is then acknowledged by sending back an appropriate response to the node having transmitted the Hello message (step ).",{"@attributes":{"id":"p-0068","num":"0074"},"figref":"FIG. 7","b":["700","710","720","730","740"]},"The basic flooding mechanism in which each packet is sent to all active neighbors except the one from which the packet was received can result in an exponential number of copies of each packet. This is referred to herein as a broadcast storm. The severity of broadcast storms can be limited by one or more of the following optimizations:\n\n","Every node establishes adjacency with all of its neighbors. The adjacencies are used to exchange Hello packets with, and to determine the status of the neighbors. Each adjacency is represented by a neighbor data structure that contains information pertinent to the relationship with that neighbor. The following fields support such a relationship:",{"@attributes":{"id":"p-0071","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Fields in the neighbor data structure."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["State","The state of the adjacency."]},{"entry":["NodeID","Node ID of the neighbor."]},{"entry":["Inactivity Timer","A one-shot timer, the expiration of which indicates"]},{"entry":[{},"that no Hello packet has been seen from this"]},{"entry":[{},"neighbor since the last HelloDeadInterval seconds."]},{"entry":["HelloInterval","This is how often the neighbor wants us to send"]},{"entry":[{},"Hello packets."]},{"entry":["HelloDeadInterval","This is how long the neighbor wants us to wait"]},{"entry":[{},"before declaring it dead as a result of not sending"]},{"entry":[{},"Hello packets."]},{"entry":["LinkControlBlocks","A list of all links that exist between the two"]},{"entry":[{},"neighbors."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Preferably, a node maintains a list of neighbors and their respective states locally. A node can detect the states of is neighbors using a set of \u201cneighbor states,\u201d such as the following:\n\n",{"@attributes":{"id":"p-0073","num":"0090"},"figref":"FIG. 8","b":["800","800","800","800"],"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":{"@attributes":{"id":"ul0008-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":["1. Cause a transition into a new state.","2. Invoke zero or more actions.","3. Have no effect on the adjacency or its state."]}}}},"HSM  includes a Down state , an INIT-Sent state , a ONE-WAY state , an EXCHANGE state , an ACTIVE state , and an INIT-Received state . HSM  transitions between these states in response to a START transition , IACK_RECEIVED transitions  and , INIT_RECEIVED transitions , , and , and an EXCHANGE DONE transition  in the manner described in Table 3. It should be noted that the Disabled state mentioned in Table 3 is merely a fictional state representing a non-existent neighbor and, so, is not shown in  for the sake of clarity. Table 3 shows state changes, their causing events, and resulting actions.",{"@attributes":{"id":"p-0075","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"HSM transitions."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Current State","Event","New State","Action"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Disabled","all","Disabled","None"]},{"entry":[{},{},"(no change)"]},{"entry":["Down","START - Initiate the","Init-Sent","Format and send an"]},{"entry":[{},"adjacency establishment",{},"INIT request, and"]},{"entry":[{},"process.",{},"start the"]},{"entry":[{},{},{},"retransmission timer."]},{"entry":["Down","INIT_RECEIVED - The local","Init-Received","Format and send an"]},{"entry":[{},"node has received an INIT",{},"INIT reply and an"]},{"entry":[{},"request from its neighbor.",{},"INIT request; start the"]},{"entry":[{},{},{},"retransmission timer."]},{"entry":["Init-Sent","INIT_RECEIVED - the local","Init-Received","Format and send an"]},{"entry":[{},"node has received an INIT",{},"INIT reply."]},{"entry":[{},"request from the neighbor."]},{"entry":["Init-Sent","IACK_RECEIVED - The","One-Way","None"]},{"entry":[{},"local node has received a valid"]},{"entry":[{},"positive response to the INIT"]},{"entry":[{},"request."]},{"entry":["Init-Received","IACK_RECEIVED - The","Exchange","Format and send a"]},{"entry":[{},"local node has received a valid",{},"Hello request."]},{"entry":[{},"positive response to the INIT"]},{"entry":[{},"request."]},{"entry":["One-Way","INIT_RECEIVED - The local","Exchange","Format and send an"]},{"entry":[{},"node has received an INIT",{},"INIT reply."]},{"entry":[{},"request from the neighbor."]},{"entry":["Exchange","EXCHANGE_DONE - The","Active","Start the keep-alive"]},{"entry":[{},"local node has successfully",{},"and inactivity timers."]},{"entry":[{},"completed the database"]},{"entry":[{},"synchronization phase of the"]},{"entry":[{},"adjacency establishment"]},{"entry":[{},"process."]},{"entry":["All states,","HELLO_RECEIVED - The","No change","Restart Inactivity"]},{"entry":["except Down","local node has received a valid",{},"timer."]},{"entry":[{},"Hello packet from its"]},{"entry":[{},"neighbor."]},{"entry":["Init-Sent,","TIMER_EXPIRED - The","Depends on","Change state to Down"]},{"entry":["Init-Received,","retransmission timer has","the action","if MaxRetries has"]},{"entry":["Exchange","expired.","taken","been reached."]},{"entry":[{},{},{},"Otherwise, increment"]},{"entry":[{},{},{},"the retry counter and"]},{"entry":[{},{},{},"re-send the request"]},{"entry":[{},{},{},"(INIT if current state"]},{"entry":[{},{},{},"is Init-Sent or Init-"]},{"entry":[{},{},{},"Received. Hello"]},{"entry":[{},{},{},"otherwise)."]},{"entry":["Active","TIMER_EXPIRED - The","Depends on","Increment inactivity"]},{"entry":[{},"keep-alive timer has expired.","the action","counter by"]},{"entry":[{},{},"taken.","HelloInterval, and if"]},{"entry":[{},{},{},"the new value exceeds"]},{"entry":[{},{},{},"HelloDeadInterval,"]},{"entry":[{},{},{},"then generate a"]},{"entry":[{},{},{},"LINK_DOWN event."]},{"entry":[{},{},{},"This indicates that the"]},{"entry":[{},{},{},"local node has not"]},{"entry":[{},{},{},"received a valid Hello"]},{"entry":[{},{},{},"packet from the"]},{"entry":[{},{},{},"neighbor in at least"]},{"entry":[{},{},{},"HelloDeadInterval"]},{"entry":[{},{},{},"seconds. Otherwise,"]},{"entry":[{},{},{},"the neighbor is still"]},{"entry":[{},{},{},"functional, so simply"]},{"entry":[{},{},{},"restart the keep-alive"]},{"entry":[{},{},{},"timer."]},{"entry":["All states,","LINK_DOWN - All links","Down","Timeout all database"]},{"entry":["except Down","between the two nodes have",{},"entries previously"]},{"entry":[{},"failed and the neighbor is now",{},"received from this"]},{"entry":[{},"unreachable.",{},"neighbor."]},{"entry":["All states,","PROTOCOL_ERROR - An","Down","Timeout all database"]},{"entry":["except Down","unrecoverable protocol error",{},"entries previously"]},{"entry":[{},"has been detected on this",{},"received from this"]},{"entry":[{},"adjacency.",{},"neighbor."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"After the successful exchange of INIT packets, the two neighbors enter the Exchange State. Exchange is a transitional state that allows both nodes to synchronize their databases before entering the Active State. Database synchronization involves exchange of one or more Hello packets that transfer the contents of one node's database to the other. A node should not send a Hello request while its awaiting the acknowledgment of another. The exchange may be made more reliable by causing each request to be transmitted repeatedly until a valid acknowledgment is received from the adjacent node.","When a Hello packet arrives at a node, the Hello packet is processed as previously described. Specifically, the node compares each LSA contained in the packet to the copy currently maintained in its own database. If the received copy is more recent then the node's own or advertises a better hop-count, the received copy is written into the database, possibly replacing the current copy. The exchange process is normally considered completed when each node has received, and acknowledged, a null Hello request from its neighbor. The nodes then enter the Active State with fully synchronized databases which contain the most recent copies of all LSAs known to both neighbors.","A sample exchange using the Hello protocol is described in Table 4. In the following exchange, node 1 has four LSAs in its database, while node 2 has none.",{"@attributes":{"id":"p-0079","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Sample exchange."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Node 1","Node 2"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Send Hello Request","Send Hello Request"]},{"entry":["Sequence: 1","Sequence: 1"]},{"entry":["Contents: LSA1, LSA2, LSA2, LSA4","Contents: null"]},{"entry":["Send Hello Response","Send Hello Response"]},{"entry":["Sequence: 1","Sequence: 1"]},{"entry":["Contents: null","Contents: 0x000f (acknowledges"]},{"entry":[{},"all four LSAs)"]},{"entry":["Send Hello Request","Send Hello Response"]},{"entry":["Sequence: 2","Sequence: 2"]},{"entry":["Contents: null (no more entries)","Contents: null"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Another example is the exchange described in table 5. In the following exchange, node 1 has four LSAs (1 through 4) in its database, and node 2 has 7 (3 and through 10). Additionally, node 2 has a more recent copy of LSA3 in its database than node 1.",{"@attributes":{"id":"p-0081","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Sample exchange."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Node 1","Node 2"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Send Hello Request","Send Hello Request"]},{"entry":["Sequence: 1","Sequence: 1"]},{"entry":["Contents: LSA1, LSA2, LSA2,","Contents: LSA3, LSA5, LSA6, LSA7"]},{"entry":"LSA4"},{"entry":["Send Hello Response","Send Hello Response"]},{"entry":["Sequence: 1","Sequence: 1"]},{"entry":["Contents: null","Contents: 0x000f (acknowledges all"]},{"entry":[{},"four LSAs)"]},{"entry":["Send Hello Request","Send Hello Response"]},{"entry":["Sequence: 2","Sequence: 2"]},{"entry":["Contents: null (no more entries)","Contents: LSA8, LSA9, LSA10"]},{"entry":["Send Hello Response","Send Hello Response"]},{"entry":["Sequence: 2","Sequence: 2"]},{"entry":["Contents: 0x0007 (acknowledges","Contents: null"]},{"entry":"all three LSAs)"},{"entry":["Send Hello Response","Send Hello Request"]},{"entry":["Sequence: 3","Sequence: 3"]},{"entry":["Contents: null","Contents: null (no more entries)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"At the end of the exchange, both nodes will have the most recent copy of all 10 LSAs (1 through 10) in their databases.","Provisioning","For each VP to be configured (or, as also referred to herein, provisioned), a physical path must be selected and configured. VPs may be provisioned statically or dynamically. For example, a user can identify the nodes through which the VP will pass and manually configure each node to support the given VP. The selection of nodes may be based on any number of criteria, such as QoS, latency, cost, and the like. Alternatively, the VP may be provisioned dynamically using any one of a number of methods, such as a shortest path first technique or a distributed technique. A shortest path first technique might, for example, employ the shortest path first technique such as that described in patent application Ser. No. 09\/478,235, entitled \u201cA METHOD FOR PATH SELECTION IN A NETWORK,\u201d having A. N. Saleh as inventor, which is incorporated by reference herein in its entirety and for all purposes. An example of a distributed technique is the restoration method described subsequently herein.","Failure Detection, Propagation, and Restoration","Failure Detection and Propagation","In one embodiment of networks herein, failures are detected using the mechanisms provided by the underlying physical network. For example, when using a SONET network, a fiber cut on a given link results in a loss of signal (LOS) condition at the nodes connected by that link. The LOS condition propagates an Alarm Indication Signal (AIS) and Remote Defect Indication (RDI), and generates an LOS defect locally. The defect is upgraded to a failure 2.5 seconds later, which causes an alarm to be sent to the Operations System (OS) (per Bellcore's recommendations in GR-253 (GR-253() , Common Generic Criteria, Issue 2 [Bellcore, December 1995], included herein by reference, in its entirety and for all purposes)). Preferably when using SONET, the handling of the LOS condition follows Bellcore's recommendations in GR-253, which allows nodes to inter-operate, and co-exist, with other network equipment (NE) in the same network and which is included by reference herein in its entirety and for all purposes. The mesh restoration protocol is invoked as soon as the LOS defect is detected by the line card, which occurs 3 ms following the failure (a requirement under GR-253).","Under GR-253, downstream is in the direction of the failure, and upstream is opposite in direction to the failure. A defect in the direction from the source to the destination would therefore cause an AIS to be propagated upstream and an RDI to be propagated downstream. The arrival of the AIS at the node upstream from the failure causes the upstream node to send a similar alarm to its upstream neighbor and for that node to send an AIS to its own upstream neighbor. This continues from node to node until the AIS finally reaches the source node of the affected VP, or a proxy node if the source node is located in a different zone. In the latter case, the boundary node restores the VP on behalf of the source node. Under GR-253, each node is allowed a maximum of 125 microseconds to forward the AIS upstream, which quickly propagates failures toward the source (or proxy) node.","Once a node has detected a failure on one of its links, either through a local LOS defect or a received AIS indication, the node scans its VP table looking for entries that have the failed link in their path. When the node finds one, the node releases all link bandwidth used by the VP. Then, if the node is a VP's source node or a proxy node, the VP's state is changed to RESTORING and the VP placed on a list of VPs to be restored. Otherwise (if the node isn't the source node or a proxy node), the state of the VP is changed to DOWN, and a timer is started to delete the VP from the database if a corresponding restore-path request isn't received from the origin node within a certain timeout period. The VP list that was created in the previous step is ordered by quality of service (QoS), which ensures that VPs with a higher QoS setting are restored first. Each entry in the list includes the ID of the VP, its source and destination nodes, configured QoS level, and required bandwidth.",{"@attributes":{"id":"p-0087","num":"0107"},"figref":"FIG. 9","b":["900","910","920","930","940","950","960","970","980","990"]},"Failure Restoration","For each VP on the list, the node then sends an RPR to all eligible neighbors (i.e., a node adjacent to the given node) in order to restore the given VP. The network will, of course, attempt to restore all failed VPs. Neighbor eligibility is determined by the state of the neighbor, available link bandwidth, current zone topology, location of the Target node, and other parameters. One method for determining the eligibility of a particular neighbor follows:\n\n","Due to the way RPR messages are forwarded by tandem nodes and the unconditional and periodic retransmmission of such messages by origin nodes, multiple instances of the same request are not uncommon, even multiple copies of each instance, circulating the network at any given time. To minimize the amount of broadcast traffic generated by the protocol and aid tandem nodes in allocating bandwidth fairly for competing RPRs, tandem nodes preferably execute a sequence such as that described subsequently.","The term \u201csame instance,\u201d as used below, refers to messages that carry the same VP ID, origin node ID, and hop-count, and are received from the same tandem node (usually, the same input link, assuming only one link between nodes). Any two messages that meet the above criteria are guaranteed to have been sent by the same origin node, over the same link, to restore the same VP, and to have traversed the same path. The terms \u201ccopy of an instance,\u201d or more simply \u201ccopy\u201d are used herein to refer to a retransmission of a given instance. Normally, tandem nodes select the first instance they receive since in most, but not all cases, as the first RPR received normally represents the quickest path to the origin node. A method for making such a determination was described in reference to . Because such information must be stored for numerous RPRs, a standard data structure is defined under a protocol of the present invention.","The Restore-Path Request Entry (RPRE) is a data structure that maintains information about a specific instance of a RPRE packet. Tandem nodes use the structure to store information about the request, which helps them identify and reject other instances of the request, and allows them to correlate received responses with forwarded requests. Table 6 lists an example of the fields that are preferably present in an PRE.",{"@attributes":{"id":"p-0092","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"RPR Fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Field","Usage"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Origin","The node ID of the node that originated this request. This is"]},{"entry":["Node","either the source node of the VP or a proxy node."]},{"entry":["Target","Node ID of the target node of the restore path request. This"]},{"entry":["Node","is either the destination node of the VP or a proxy node."]},{"entry":["Received","The neighbor from which we received this message."]},{"entry":"From"},{"entry":["First","Sequence number of the first received copy of the"]},{"entry":["Sequence","corresponding restore-path request."]},{"entry":"Number"},{"entry":["Last","Sequence number of the last received copy of the"]},{"entry":["Sequence","corresponding restore-path request."]},{"entry":"Number"},{"entry":["Bandwidth","Requested bandwidth."]},{"entry":["QoS","Requested QoS."]},{"entry":["Timer","Used by the node to timeout the RPR."]},{"entry":["T-Bit","Set to 1 when a Terminate indicator is received from any of"]},{"entry":[{},"the neighbors."]},{"entry":["Pending","Number of the neighbors that haven't acknowledged this"]},{"entry":["Replies","message yet."]},{"entry":["Sent To","A list of all neighbors that received a copy of this message."]},{"entry":[{},"Each entry contains the following information about the"]},{"entry":[{},"neighbor:"]},{"entry":[{},"AckReceived: Indicates if a response has been received from"]},{"entry":[{},"this neighbor."]},{"entry":[{},"F-Bit: Set to 1 when Flush indicator from this neighbor."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"When an RPR packet arrives at a tandem node, a decision is made as to which neighbor should receive a copy of the request. The choice of neighbors is related to variables such as link capacity and distance. Specifically, a particular neighbor is selected to receive a copy of the packet if:\n\n",{"@attributes":{"id":"p-0094","num":"0124"},"figref":"FIG. 10"},"Processing of RPRs begins at step , in which the target node's ID is compared to the local node's ID. If the local node's ID is equal to the target node's ID, the local node is the target of the RPR and must process the RPR as such. This is illustrated in  as step  and is the subject of the flow diagram illustrated in . If the local node is not the target node, the RPR's HOP_COUNT is compared to MAX_HOP in order to determine if the HOP_COUNT has exceed or will exceed the maximum number of hops allowable (step ). If this is the case, a negative acknowledgment (NAK) with a Flush indicator is then sent back to the originating node (step ). If the HOP_COUNT is still within acceptable limits, the node then determines whether this is the first instance of the RPR having been received (step ). If this is the case, a Restore-Path Request Entry (RPRE) is created for the request (step ). This is done by creating the RPRE and setting the RPRE's fields, including starting a time-to-live (TTL) or deletion timer, in the following manner:\n\n","The ID of the input link is then added to the path in the RPRE (e.g., Path[PathIndex++]=LinkID) (step ). Next, the local node determines whether the target node is a direct neighbor (step ). If the target node is not a direct neighbor of the local node, a copy of the (modified) RPR is sent to all eligible neighbors (step ). The PendingReplies and SentTo Fields of the corresponding RPRE are also updated accordingly at this time. If the target node is a direct neighbor of the local node, the RPR is sent only to the target node (step ). In either case, the RPRE corresponding to the given RPR is then updated (step ).","If this is not the first instance of the RPR received by the local node, the local node then attempts to determine whether this might be a different instance of the RPR (step ). A request is considered to be a different instance if the RPR:\n\n","If this is simply a different instance of the RPR, and another instance of the same RPR has been processed, and accepted, by this node, a NAK Wrong Instance is sent to the originating neighbor (step ). The response follows the reverse of the path carried in the request. No broadcasting is therefore necessary in such a case. If a similar instance of the RPR has been processed and accepted by this node (step ), the local node determines whether a Terminate NAK has been received for this RPR (step ). If a Terminate NAK has been received for this RPR, the RPR is rejected by sending a Terminate response to the originating neighbor (step ). If a Terminate NAK was not received for this RPR, the new sequence number is recorded (step ) and a copy of the RPR is forwarded to all eligible neighbors that have not sent a Flush response to the local node for the same instance of this RPR (step ). This may include nodes that weren't previously considered by this node due to conflicts with other VPs, but does not include nodes from which a Flush response has already been received for the same instance of this RPR. The local node should then save the number of sent requests in the PendingReplies field of the corresponding RPRE. The term \u201celigible neighbors\u201d refers to all adjacent nodes that are connected through links that meet the link-eligibility requirements previously described. Preferably, bandwidth is allocated only once for each request so that subsequent transmissions of the request do not consume any bandwidth.","Note that the bandwidth allocated for a given RPR is released differently depending on the type of response received by the node and the setting of the Flush and Terminate indicators in its header. Table 7 shows the action taken by a tandem node upon receiving a restore path response from a neighbor.",{"@attributes":{"id":"p-0100","num":"0141"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 7"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Actions taken by a tandem node upon receiving an RPR."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"Received",{}]},{"entry":["Response","Flush","Terminate","Sequence"]},{"entry":["Type","Indicator?","Indicator?","Number","Action"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["X","X","X","Not Valid","Ignore response"]},{"entry":["Negative","No","No","1 = Last","Ignore response"]},{"entry":["Negative","X","No","=Last","Release bandwidth"]},{"entry":[{},{},{},{},"allocated for the VP on"]},{"entry":[{},{},{},{},"the link on which the"]},{"entry":[{},{},{},{},"response was received."]},{"entry":["Negative","Yes","No","Valid","Release bandwidth"]},{"entry":[{},{},{},{},"allocated for the VP on"]},{"entry":[{},{},{},{},"the link on which the"]},{"entry":[{},{},{},{},"response was received."]},{"entry":["Negative","X","Yes","Valid","Release all bandwidth"]},{"entry":[{},{},{},{},"allocated for the VP."]},{"entry":["Positive","X","X","Valid","Commit bandwidth"]},{"entry":[{},{},{},{},"allocated for the VP on"]},{"entry":[{},{},{},{},"the link the response was"]},{"entry":[{},{},{},{},"received on; release all"]},{"entry":[{},{},{},{},"other bandwidth."]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0101","num":"0142"},"figref":"FIG. 11","b":["1100","1105","1110","1105"]},"If the VP specified in the RPR terminates at this node (i.e. this node is indeed the target node), the target node determines whether an RPRE exists for the RPR received (step ). If an RPRE already exists for this RPR, the existing RPRE is updated (e.g., the RPRE's LastSequenceNumber field is updated) (step ) and the RPRE deletion timer is restarted (step ). If no RPRE exists for this RPR in the target node (i.e., if this is the first copy of the instance received), an RPRE is created (step ), pertinent information from the RPR is copied into the RPRE (step ), the bandwidth requested in the RPR is allocated on the input link by the target node (step ) and an RPRE deletion timer is started (step ). In either case, once the RPRE is either updated or created, a checksum is computed for the RPR (step ) and written into the checksum field of the RPR (step ). The RPR is then returned as a positive response to the origin node (step ). The local (target) node then starts its own matrix configuration. It will be noted that the RPRE created is not strictly necessary but makes the processing of RPRs consistent across nodes.","The Processing of Received RPR Responses",{"@attributes":{"id":"p-0103","num":"0144"},"figref":["FIGS. 12 and 13","FIG. 12"],"b":["1200","1205","1210","1205"]},"If the sending node is listed in the RPRE, the RPR sequence number is analyzed to determine its validity (step ). As with the previous steps, if the RPR contains an invalid sequence number (e.g., doesn't fall between FirstSequenceNumber and LastSequence Number, inclusive), the RPR response is ignored (step ). If the RPR sequence number is valid, the receiving node determines whether Flush or Terminate in the RPR response (step ). If neither of these is specified, the RPR response sequence number is compared to that stored in the last sequence field of the RPR (step ). If the RPR response sequence number does not match that found in the last sequence field of the RPRE, the RPR response is again ignored (step ). If the RPR response sequence number matches that found in the RPRE, or a Flush or Terminate was specified in the RPR, the input link on which the RPR response was received is compared to that listed in the RPR response path field (e.g., Response.Path[Response.PathIndex]==InputLinkID) (step ). If the input link is consistent with information in the RPR, the next hop information in the RPR is checked for consistency (e.g., Response.Path [Response.PathIndex+1]==RPRE.ReceivedFrom) (step ). If either of the proceeding two tests are failed, the RPR response is again ignored (step ).","If a Terminate was specified in the RPR response (step ), the bandwidth on all links over which the RPR was forwarded is freed (step ) and the Terminate and Flush bits from the RPR response are saved in the RPRE (step ). If a Terminate was not specified in the RPR response, bandwidth is freed only on the input link (i.e., the link from which the response was received) (step ), the Terminate and Flush bits are saved in the RPRE (step ), and the Flush bit of the RPR is cleared (step ). If a Terminate was not specified in the RPR, the Pending Replies field in the RPRE is decremented (step ). If this field remains non-zero after being decremented, the process completes. If Pending Replies is equal to zero at this point, or a Terminate was not specified in the RPR, the RPR is sent to the node specified in the RPR's Received From field (i.e. the node that sent the corresponding request) (step ). Next, the bandwidth allocated on the link to the node specified in the RPR's Received From field is released (step ), and an RPR deletion timer is started (step ).",{"@attributes":{"id":"p-0106","num":"0147"},"figref":"FIG. 13","b":["1300","1310","1320","1310","1330","1310","1340","1350","1360","1370","1380"]},"With regard to matrix configuration, the protocol pipelines such activity with the forwarding of RPRs in order to minimize the impact of matrix configuration overhead on the time required for restoration. While the response is making its way from node N to node N, node N is busy configuring its matrix. In most cases, by the time the response reaches the origin node, all nodes along the path have already configured their matrices.","The Terminate indicator prevents \u201cbad\u201d instances of an RPR from circulating around the network for extended periods of time. The indicator is propagated all the way back to the originating node and prevents the originating node, and all other nodes along the path, from sending or forwarding other copies of the corresponding RPR instance.","Terminating RPR Packets are processed as follows. The RPR continues along the path until one or more of the following four conditions are encountered:\n\n","Further optimizations of the protocol can easily be envisioned by one of skill in the art and are intended to be within the scope of this specification. For example, in one embodiment, a mechanism is defined to further reduce the amount of broadcast traffic generated for any given VP. In order to prevent an upstream neighbor from sending the same instance of an RPR every T milliseconds, a tandem node can immediately return a no-commit positive response to that neighbor, which prevents the neighbor from sending further copies of the instance. The response simply acknowledges the receipt of the request, and doesn't commit the sender to any of the requested resources. Preferably, however, the sender (of the positive response) periodically transmits the acknowledged request until a valid response is received from its downstream neighbor(s). This mechanism implements a piece-wise, or hop-by-hop, acknowledgment strategy that limits the scope of retransmitted packets to a region that gets progressively smaller as the request gets closer to its target node.","Optimizations","However, it is prudent to provide some optimizations for the efficient handling of errors. Communication protocols often handle link errors by starting a timer after every transmission and, if a valid response isn't received within the timeout period, the message is retransmitted. If a response isn't received after a certain number of retransmission, the sender generates a local error and disables the connection. The timeout period is usually a configurable parameter, but in some cases the timeout period is computed dynamically, and continuously, by the two end points. The simplest form of this uses some multiple of the average round trip time as a timeout period, while others use complex mathematical formulas to determine this value. Depending on the distance between the two nodes, the speed of link that connects them, and the latency of the equipment along the path, the timeout period can range anywhere from millisecond to seconds.","The above strategy, is not the preferred method of handling link errors because the fast restoration times required dictates that 2-way, end-to-end communication be carried out in less than 50 ms. A drawback of the above-described solution is the time wasted while waiting for an acknowledgment to come back from the receiving node. A safe timeout period for a 2000 mile span, for instance, is over 35 ms, which doesn't leave enough time for a retransmission in case of an error.","This problem is addressed in one embodiment by taking advantage of the multiple communication channels, i.e. OC-48's that exist between nodes to:\n\n","The protocol can further improve link efficiency by using small packets during the restoration procedure. Another improvement is the use of a zoned network architecture, as described previously, and the restoration procedure for which is described below.","Failure Restoration in a Zoned Network",{"@attributes":{"id":"p-0115","num":"0162"},"figref":["FIG. 14","FIG. 14"],"b":["1400","1400","1410","1","7","1420","1","6","1430","1","5","1440","1450","1460","1465","1470","1","4"]},"Addressing in such a network could use an addressing scheme, and could, for example, use an addressing scheme such as that shown in  as a type 1 address. This would likely be appropriate given the fact that there are a relatively small number of zones, with each including a relatively small number of nodes. Using such an addressing scheme, zones , , and  are assigned zone IDs 1, 2, and 3, respectively, with zone ID 0 being reserved for the inter-zone, or backbone, zone. Within these zones, each one of nodes ()-(), ()-(), and ()-() is assigned a node ID made up of the zone ID for the node's zone and a node address within the zone (1-7, 1-6, and 1-5, respectively). Node addresses for each of nodes ()-(), ()-(), and ()-() are provided as numerals within each of the circles representing the nodes in . Terminology used herein to describe these methods includes:\n\n","Restoration of failures in network  can proceed in several different ways, depending on the route taken by the virtual path in question and the location of the failure. A failure affecting a virtual path routed within a single zone can therefore proceed according to a paradigm such as that previously outlined with regard to the restoration of virtual paths. Preferably, messages related to an intra-zone failure stay within that zone unless there are no resources within the zone to restore the failure. In such a case, one or more of the boundary nodes follow a procedure such as that described subsequently. A virtual path provisioned over a physical path  that is completely within zone , for example, from node () to node () through node (), that experiences a failure between nodes () and () can be restored by configuring a physical path  between nodes (), (), and (), for example, as a result of using the previously-described method of restoration.","However, should the virtual path traverse one or more of the inter-zone links, the manner in which failures at various points along the virtual path are dealt with varies depending on where along the virtual path the failure occurs. For example, a virtual path provisioned over a physical path  and starting again at node (), proceeding through nodes (), (), (), and (), and terminating at node () may encounter a failure at one of several points. For this configuration, nodes () and () are the boundary nodes for their respective zones (zones  and , respectively). In certain failure scenarios, nodes () and () act as proxy nodes for their respective source\/destination nodes (nodes () and (), respectively) in order to restrict restoration efforts to the affected zone. Failures, however, can occur at any of the nodes along the path, or at one of the links along the path.","For example, the restoration operations for a failure on the intra-zone link between nodes () and () is preferably restricted to zone . In this scenario, RPR packets are sent out by node () and a new physical path is provisioned to restore the virtual path. The RPR packets need not go any further than node () (unless there are insufficient resources within zone ) because node () acts as a proxy for destination node (). By employing a proxy boundary node, the restoration process is limited to the zone in which the failure occurred and so the network overhead associated with sending RPR packets outside of zone  is avoided. Thus, the restoration of the virtual path focuses on zone , resulting in, for example, a new physical path  from node (), through nodes () and () to node (). Assuming () is the source node and that () is the destination node, it can be seen that the same scenario for a failure in zone  affecting the virtual path would follow a similar sequence. In that case, a new physical path supporting the original virtual path would be provisioned within zone , with no effect on the overhead experienced by the nodes outside that zone (this being a result of node () acting as a proxy for the source node (node ())).","Inter-Zone Failure Restoration","With regard to inter-zone failures (i.e., failures between zones occurring on inter-zone links, for example) or intra-zone failures requiring inter-zone resources for restoration, several approaches to failure restoration present themselves. As an initial matter, it will be noted that inter-zone restoration involves the boundary nodes of at least the zones containing the source and destination nodes. Boundary nodes, as noted, maintain a separate topological database for each of the zones to which they are attached.","The restoration of a virtual path through two boundary nodes is preferably accomplished by the following exemplary process. The boundary nodes begin by attempting to restore the failure using only other inter-zone links, and in particular, those inter-zone links shared by the two. If there are no acceptable inter-zone links shared by the two boundary nodes, the boundary nodes search for inter-zone links that are parallel to the failed link but terminate at different boundary nodes. In other words, the two boundary nodes employ links in the network's backbone zone to bridge the gap left by the failed link. If the attempt to restore the virtual circuit using other backbone links fails, the two boundary nodes then try to restore the virtual path by establishing an end-to-end physical path using the backbone zone and includes zones that must be traversed to establish a path between the source and destination nodes. An RPR is then sent to each zone to establish a route within that zone. Preferably, these new intra-zone routes are established concurrently in order to minimize the delay associated with restoration of the virtual path.","In one embodiment, a combination of broadcast and source-routed packets are used to restore inter-zone traffic affected by a failure in an inter-zone link or one of an inter-zone link's two end-nodes. The protocol uses information contained in the topology database of zone 0 (backbone zone) to compute new inter-zone routes for the failed VP's. Source routed packets are then used to request and establish the new routes (i.e., no flooding or broadcasting of packets is ever attempted, or allowed, between zones, only within zones). One of two nodes that share the failed inter-zone link is designated the master boundary node, and computes an alternate path for each failed route (e.g., using a shortest-path-first technique), inserts the alternate path into a Create-Path packet, and sends the Create-Path packet to the next node along the path. Tandem boundary nodes then use the computed route to forward the packet towards its ultimate destination. Routes within each zone are established using the same mechanism described previously. It is important to note that intra-zone restoration activities can occur in parallel and independent of each other, as this feature speeds the restoration process.",{"@attributes":{"id":"p-0123","num":"0176"},"figref":["FIG. 15","FIG. 14"],"b":["1400","1495","1410","6","1410","1","1420","2","1420","3","1410","1","1420","2"],"ul":{"@attributes":{"id":"ul0024","list-style":"none"},"li":{"@attributes":{"id":"ul0024-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0025","list-style":"none"},"li":["1. The two end-nodes of the failed inter-zone link, i.e., the boundary nodes (nodes () and ()) detect the failure on inter-zone link () and send one or more delete-path requests to all end-nodes affected by the failure (step ). An end-node is any node that terminates a VP within that zone, including proxy source and destination nodes. In this example, the two end nodes are nodes () and ().","2. The master boundary node (node (), because its node ID of 1.1 is numerically lower than that of node () (with a node ID of 2.2)) computes a new inter-zone route for each failed VP using the topology database for inter-zone link (), which is part of backbone zone  (step ). The vertices of a graph of backbone zone  represent entire zones (e.g., zones , , and ) interconnected by inter-zone links ()-(). The master boundary node first tries to establish the route over inter-zone links that are parallel to the failed link (inter-zone link ()). If unsuccessful, which is the case in this example, the node then tries to establish the paths over links that traverse other zones (e.g., inter-zone link ()). A method of path selection, such as that described herein, is used in the latter case to select the shortest path (e.g., minimum-hop path) between the two zones. The resulting route for this example is [zone \u2192zone \u2192zone ].","3. A source-routed message is then sent to the boundary node that connects the current zone of the next zone along the path (step ), which would also be the target zone if a parallel link were found in step . That node is referred to herein as the origin boundary node, since that node is responsible for establishing the intra-zone leg of the overall path. The node is also referred to herein as a boundary tandem node since that node is responsible for forwarding the Create-Path message to the next tandem boundary node along the inter-zone path. In this example, this node is node () and the next zone along the path is zone .","4. The origin boundary node first forwards the Create-Path message to the next boundary node along the path (i.e., node ()) (step ). It will be noted that the zone information is contained in the path being carried in the message. The node ID of the adjacent boundary node is obtained from the associated neighbor data structure.","5. The origin boundary node then sends a restore-path request to the other end-node of the VP (node () in this example) in order to establish an intra-zone path within its own zone (step ). The mechanism used to establish the intra-zone path can employ, for example, the methods described previously.","6. When the Create-Path message arrives at a transit zone (e.g. zone ) (step ), the message is forwarded in the manner described in step  (step ). The entry boundary node, i.e., the node that receives the request from the boundary node of the previous zone (node () in this example), then establishes a path for the VP within its own zone using the restoration method described previously (step ). The entry boundary node uses the exit boundary node (node () in this example) as a target node for all restore-path requests.","7. When the message finally arrives at the entry boundary node of the target zone (node () and zone , respectively), the sequence described in step  is followed to establish the requested paths (step ). The target node in this case is the actual end point of the VP (node () in this example).","8. The target node then sends an appropriate response back to the boundary node from which the target node received the create-path request (step ). The response is propagated all the way back to the master boundary node, causing the nodes along the new path to allocate resources reserved during the outbound traversal of the Create-Path message and freeing all other resources reserved during that phase."]}}}},"With regard to forwarding packets within the zone, when a protocol message arrives at the entry boundary node of a transit zone, that node is required to do two things:\n\n",{"@attributes":{"id":"p-0125","num":"0188"},"figref":["FIG. 16","FIG. 14"],"b":"1460","ul":{"@attributes":{"id":"ul0028","list-style":"none"},"li":{"@attributes":{"id":"ul0028-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0029","list-style":"none"},"li":["1. The entry boundary node (node ()) uses the topology database of its own zone (zone ) to find the shortest path P between self and the exit boundary node (node ()) (step ). In this example, P is [node ()\u2192node ()].","2. The entry boundary node then moves the contents of the inter-zone path being carried in the message down by Length(P) positions, and adds P (step ). This emulates the function of a stack (a last-in, first-out, or LIFO, structure), where the last item \u201cpushed\u201d onto the stack is the first item taken out (popped off the stack). The resulting path (P) for this example is: [node ()\u2192node ()\u2192node ()].","3. The entry boundary node then sends the message to the next node along the modified path (node () in this example) (step ).","4. Tandem nodes within the zone forward the message using information specified in its path, continues until the message finally reaches the exit boundary node (node ()), which also uses the next hop contained in its path to forward the message to the entry boundary node of the next zone (node () and zone , respectively) (steps  and ).","5. When the message finally reaches an entry boundary node that is the target node of the request, this entry boundary node establishes the requested intra-zone path (step ) and sends an appropriate response (step ). The response follows the same path (both intra and inter-zone) specified in the request. It will be noted that new intra-zone paths are only computed when failures are detected within a given zone."]}}}},"Another method of dealing with inter-zone failures is to use protection schemes such as diverse routing and rings. The use of such protection schemes for inter-zone links can be justified on at least two points:\n\n","Protocol messages (or packets) preferably begin with a standard header to facilitate their processing. Such a header preferably contains the information necessary to determine the type, origin, destination, and identity of the packet. Normally, the header is then followed by some sort of command-specific data (e.g., zero or more bytes of information).","Such a header may include, for example, a request response indicator (RRI), a negative response indicator (NRI), a terminate\/commit path indicator (TPI), a flush path indicator (FPI), a command field, a sequence number, an origin node ID () and a target node ID. A description of these fields is provided below in Table 10. It will be noted that although the terms \u201corigin\u201d and \u201ctarget\u201d are used in describing header , their counterparts (source and destination, respectively) can be used in their stead. Preferably, packets sent using a protocol according to the present invention employ a header layout such as that shown as header . The header is then followed by zero or more bytes of command specific data.",{"@attributes":{"id":"p-0129","num":"0199"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 10"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"The layout of exemplary header 1600."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["R-bit","This bit indicates whether the packet is a request (0) or a response"]},{"entry":[{},"(1). The bit also known as the request\/response indicator or RRI for"]},{"entry":[{},"short."]},{"entry":["N-bit","This bit, which is only valid in response packets (RRI = 1), indicates"]},{"entry":[{},"whether response is positive (0) or negative (1). The bit is also"]},{"entry":[{},"known as the Negative Response Indicator or NRI."]},{"entry":["T\/C Bit","In a negative response (NRI = 1), this bit is referred to herein as a"]},{"entry":[{},"Terminate Path Indicator or TPI. When set, TPI indicates that the"]},{"entry":[{},"path along the receiving link should be terminated and never used"]},{"entry":[{},"again for this or any other instance of the corresponding request. The"]},{"entry":[{},"response also releases all bandwidth allocated for the request along"]},{"entry":[{},"all paths, and makes that bandwidth available for use by other"]},{"entry":[{},"requests. A negative response that has a \u201c1\u201d in its T-Bit is referred to"]},{"entry":[{},"herein as a Terminate response. Conversely, a negative response"]},{"entry":[{},"with a \u201c0\u201d in its T-Bit is referred to herein as a no-Terminate"]},{"entry":[{},"response."]},{"entry":[{},"In a positive response (NRI = 0), this bit indicates whether the"]},{"entry":[{},"specified path has been committed to by all nodes (1) or not (0). The"]},{"entry":[{},"purpose of a positive response that has a \u201c0\u201d in its C-Bit is to simply"]},{"entry":[{},"acknowledge the receipt of a particular request and to prevent the"]},{"entry":[{},"upstream neighbor from sending further copies of the request. Such a"]},{"entry":[{},"response is referred to herein as a no-Commit response."]},{"entry":["F-bit","Flush Indicator. When set, this bit causes the resources allocated on"]},{"entry":[{},"the input link for the corresponding request to be freed, even if the"]},{"entry":[{},"received sequence number doesn't match the last one sent. However,"]},{"entry":[{},"the sequence number has to be valid, i.e., the sequence number"]},{"entry":[{},"should fall between FirstReceived and LastSent, inclusive. This bit"]},{"entry":[{},"also prevents the node from sending other copies of the failed request"]},{"entry":[{},"over the input link."]},{"entry":[{},"This bit is reserved and must be set to \u201c0\u201d in all positive responses"]},{"entry":[{},"(NRI = 0)."]},{"entry":["Command","This 4-bit field indicates the type of packet being carried with the"]},{"entry":[{},"header."]},{"entry":["SequenceNumber","A node and VP unique number that, along with the node and VP IDs,"]},{"entry":[{},"helps identify specific instances of a particular command."]},{"entry":["Origin","The node ID of the node that originated this packet."]},{"entry":["Target","The node ID of the node that this packet is destined for."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The protocol can be configured to use a number of different commands. For example, seven commands may be used with room in the header for 9 more. Table 11 lists those commands and provides a brief description of each, with detailed description of the individual commands following.",{"@attributes":{"id":"p-0131","num":"0201"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 11"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary protocol commands."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Command",{}]},{"entry":["Command Name","Code","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["INIT","0","Initialize Adjacency."]},{"entry":["HELLO","1","Used to implement the Hello protocol"]},{"entry":[{},{},"(see Section 3 for more details)."]},{"entry":["RESTORE_PATH","2","Restore Virtual Path or VP."]},{"entry":["DELETE_PATH","3","Delete and existing Virtual Path."]},{"entry":["TEST_PATH","4","Test the specified Virtual Path."]},{"entry":["LINK_DOWN","5","Used by slave nodes to inform their"]},{"entry":[{},{},"master(s) of local link failures."]},{"entry":["CONFIGURE","6","Used by master notes to configure slave"]},{"entry":[{},{},"nodes."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"An initialization packet causes a START event to be sent to the Hello State Machine of the receiving node and includes a node ID field, a link cost field, one or more QoS capacity fields (e.g., a QoS3 capacity (Q3C) field and a QoSn capacity (QnC) field), a Hello interval field, and a time-out interval field. The initialization (or INIT) packet is used by adjacent nodes to initialize and exchange adjacency parameters. The packet contains parameters that identify the neighbor, its link bandwidth (both total and available), and its configured Hello protocol parameters. The INIT packet is normally the first protocol packet exchanged by adjacent nodes. As noted previously, the successful receipt and processing of the INIT packet causes a START event to be sent to the Hello State machine. The field definitions appear in Table 12.",{"@attributes":{"id":"p-0133","num":"0203"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 12"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Field definitions for an initialization packet."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NodeID","Node ID of the sending node."]},{"entry":["LinkCost","Cost of the link between the two neighbors. This"]},{"entry":[{},"may represent distance, delay or any other additive"]},{"entry":[{},"metric."]},{"entry":["QoS3Capacity","Link bandwidth that has been reserved for QoS3"]},{"entry":[{},"connection."]},{"entry":["QoSnCapacity","Link bandwidth that is available for use by all QoS"]},{"entry":[{},"levels (0-3)."]},{"entry":["HelloInterval","The number of seconds between Hello packets. A"]},{"entry":[{},"zero in this field indicates that this parameter hasn't"]},{"entry":[{},"been configured on the sending node and that the"]},{"entry":[{},"neighbor should use its own configured interval."]},{"entry":[{},"If both nodes send a zero in this field then the"]},{"entry":[{},"default value should be used."]},{"entry":["HelloDeadInterval","The number of seconds the sending node will wait"]},{"entry":[{},"before declaring a silent neighbor down. A zero in"]},{"entry":[{},"this field indicates that this parameter hasn't"]},{"entry":[{},"been configured on the sending node and that the"]},{"entry":[{},"neighbor should use its own configured value."]},{"entry":[{},"If both nodes send a zero in this field then"]},{"entry":[{},"the default value should be used."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"A Hello packet includes a node ID field, an LS count field, an advertising node field, a checksum field, an LSID field, a HOP_COUNT field, a neighbor count field, a neighbor node ID field, a link ID field, a link cost field, a Q3C field, and a QnC field. Hello packets are sent periodically by nodes in order to maintain neighbor relationships, and to acquire and propagate topology information throughout the network. The interval between Hello packets is agreed upon during adjacency initialization. Link state information is included in the packet in several situations, such as when the database at the sending nodes changes, either due to provisioning activity, port failure, or recent updates received from one or more originating nodes. Preferably, only modified LS entries are included in the advertisement. A null Hello packet, also sent periodically, is one that has a zero in its LSCount field and contains no LSAs. Furthermore, it should be noted that a QoSn VP is allowed to use any bandwidth reserved for QoS levels 0 through n. Table 13 describes the fields that appear first in the Hello packet. These fields appear only once.",{"@attributes":{"id":"p-0135","num":"0205"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 13"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Field definitions for the first two fields of a Hello packet."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NodeID","Node ID of the node that sent this packet, i.e. our neighbor."]},{"entry":["LSCount","Number of link state advertisements contained in this packet."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0136","num":"0206"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 14"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Field definitions for information carried for each LSA."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AdvertisingNode","The node that originated this link state entry."]},{"entry":["Checksum","A checksum of the LSAs content, excluding fields that"]},{"entry":[{},"node's other than the originating node can alter."]},{"entry":["LSID","Instance ID. This field is set to FIRST_LSID on the"]},{"entry":[{},"first instance of the LSA, and is incremented for every"]},{"entry":[{},"subsequent instance."]},{"entry":["Hop_Count","This field is set to 0 by the originating node and is"]},{"entry":[{},"incremented at every hop of the flooding procedure."]},{"entry":[{},"An LSA with a Hop_Count of MAX_HOPS is not"]},{"entry":[{},"propagated. LSAs with Hop_Counts equal to or"]},{"entry":[{},"greater than MAX_HOPS are silently discarded."]},{"entry":["NeighborCount","Number of neighbors known to the originating node."]},{"entry":[{},"This is also the number of neighbor entries contained"]},{"entry":[{},"in this advertisement."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0137","num":"0207"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 15"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Field definitions for information carried for each neighbor."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Neighbor","Node ID of the neighbor being described."]},{"entry":["LinkCost","Cost metric for this link. This could represent distance,"]},{"entry":[{},"delay or any other metric."]},{"entry":["QoS3Capacity","Link bandwidth reserved for the exclusive use of QoS3"]},{"entry":[{},"connections."]},{"entry":["QoSnCapacity","Link bandwidth available for use by all QoS levels (0-3)."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"A GET_LSA packet has its first byte set to zero, and includes an LSA count that indicates the number of LSAs being sought and a node ID list that reflects one or more of the node IDs for which an LSA is being sought. The node ID list includes node IDs. The GET_LSA response contains a mask that contains a \u201c1\u201d in each position for which the target node possesses an LSA. The low-order bit corresponds to the first node ID specified in the request, while the highest-order bit corresponds to the last possible node ID. The response is then followed by one or more Hello messages that contain the actual LSAs requested.","Table 16 provides the definitions for the fields shown in .",{"@attributes":{"id":"p-0140","num":"0210"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 16"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Field definitions for a GET_LSA packet."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Count","The number of node ID's contained in the packet."]},{"entry":["NodeID0-","The node IDs for which the sender is seeking an LSA. Unused"]},{"entry":["NodeIDn","fields need not be included in the packet and should be"]},{"entry":[{},"ignored by the receiver."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"An RPR packet includes a virtual path identifier (VPID) field, a checksum field, a path length field, a HOP_COUNT field, and an array of path lengths. The path field may be further subdivided into hop fields, which may number up to MAX_HOPS hop fields. The Restore Path packet is sent by source nodes (or proxy boundary nodes), to obtain an end-to-end path for a VP. The packet is usually sent during failure recovery procedures but can also be used for provisioning new VPs. The node sending the RPR is referred to herein as the origin or source node. The node that terminates the request is referred to herein as the target or destination node. A restore path instance is uniquely identified by its origin and target nodes, and VP ID. Multiple copies of the same restore-path instance are identified by the unique sequence number assigned to each of them. Only the sequence number need be unique across multiple copies of the same instance of a restore-path packet. Table 17 provides the appropriate field definitions.",{"@attributes":{"id":"p-0142","num":"0212"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 17"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Field definitions for a Restore Path packet."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["VPID","The ID of the VP being restored."]},{"entry":["Checksum","The checksum of the complete contents of the RPR, not"]},{"entry":[{},"including the header. The checksum is normally"]},{"entry":[{},"computed by a target node and verified by the origin"]},{"entry":[{},"node. Tandem nodes are not required to verify or update"]},{"entry":[{},"this field."]},{"entry":["PathLength","Set to MAX_HOPS on all requests: contains the length"]},{"entry":[{},"of the path (in hops, between the origin and target"]},{"entry":[{},"nodes)."]},{"entry":["PathIndex","Requests: Points to the next available entry in"]},{"entry":[{},"Path [ ]. Origin node sets the PathIndex to 0, and"]},{"entry":[{},"nodes along the path store the link ID of the input"]},{"entry":[{},"link in Path[ ] at PathIndex. PathIndex is then"]},{"entry":[{},"incremented to point to the next available entry in Path[ ]."]},{"entry":[{},"Responses: Points to the entry in Path[ ] that corresponds"]},{"entry":[{},"to the link the packet was received on.."]},{"entry":["Path[ ]","An array of PathLength link IDs that represent the path"]},{"entry":[{},"between the origin and target nodes."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"A CREATE_PATH (CP) packet includes a virtual path identifier (VPID) field, a checksum field, a path length field, a HOP_COUNT field, and an array of path lengths. The path field may be further subdivided into hop fields, which may number up to MAX_HOPS. The CP packet is sent by source nodes (or proxy boundary nodes), to obtain an end-to-end path for a VP. The node sending the CP is referred to herein as the origin or source node. The node that terminates the request is referred to herein as the target or destination node. A CP instance is uniquely identified by its origin and target nodes, and VP ID. Multiple copies of the same CP instance are identified by the unique sequence number assigned to each of them. Only the sequence number need be unique across multiple copies of the same instance of a restore-path packet. Table 18 provides the appropriate field definitions.",{"@attributes":{"id":"p-0144","num":"0214"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 18"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Field definitions for a Create Path packet."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["VPID","The ID of the VP being provisioned."]},{"entry":["Checksum","The checksum of the complete contents of the CP, not"]},{"entry":[{},"including the header. The checksum is normally computed"]},{"entry":[{},"by a target node and verified by the origin node. Tandem"]},{"entry":[{},"nodes are not required to verify or update this"]},{"entry":[{},"field."]},{"entry":["PathLength","Set to MAX_HOPS on all requests: contains"]},{"entry":[{},"the length of the path (in hops, between the origin and"]},{"entry":[{},"target nodes)."]},{"entry":["PathIndex","Requests: Points to the next available entry in Path[ ]."]},{"entry":[{},"Origin node sets PathIndex to 0, and nodes along the path"]},{"entry":[{},"store the link ID of the input link in Path[ ] at PathIndex."]},{"entry":[{},"PathIndex is then incremented to point to the next"]},{"entry":[{},"available entry in Path[ ]."]},{"entry":[{},"Responses: Points to the entry in Path[ ] that corresponds"]},{"entry":[{},"to the link the packet was received on.."]},{"entry":["Path[ ]","An array of PathLength link IDs that represent the path"]},{"entry":[{},"between the origin and target nodes."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The Delete Path packet is used to delete an existing path and releases all of the path's allocated link resources. The Delete Path packet can use the same packet format as the Restore Path packet. The origin node is responsible for initializing the Path [ ], PathLength, and Checksum fields to the packet, which should include the full path of the VP being deleted, and also sets PathIndex to zero. Tandem nodes should release link resources allocated for the VP after they have received a valid response from the target node. The target node should set the PathIndex field to zero prior to computing the checksum of packet.","The TestPath Packet","The Test Path packet is used to test the integrity of an existing virtual path, and uses the same packet format as the RestorePath packet. The originating node is responsible for initializing the Path [ ], PathLength, and Checksum fields of the packet, which should include the full path of the span being tested. The target node also sets PathIndex to zero. The target node should set the PathIndex field to zero prior to computing the checksum of packet. The Test Path packet may be configured to test functionality, or may test a path based on criteria chosen by the user, such as latency, error rate, and the like.","The Link-Down Packet","The Link-Down packet is used when master nodes are present in the network, and is used by slave nodes to inform the master node of link failures. This message is provided for instances in which the alarms associated with such failures (AIS and RDI) do not reach the master node.","While particular embodiments of the present invention have been shown and described, it will be obvious to those skilled in the art that, based upon the teachings herein, changes and modifications may be made without departing from this invention and its broader aspects and, therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore, it is to be understood that the invention is solely defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 16"}]},"DETDESC":[{},{}]}
