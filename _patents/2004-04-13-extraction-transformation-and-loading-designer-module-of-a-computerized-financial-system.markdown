---
title: Extraction, transformation and loading designer module of a computerized financial system
abstract: An extraction, transformation and loading (ETL) designer module of a computerized financial system that is used to configure an ETL package for loading data elements from a financial table of a financial database into a reporter table in accordance with a predefined format. The ETL designer module includes a transformation class that defines transformation objects. Each transformation object is responsible for a transformation of the source data elements of a source column of the financial table into a reporter format of an associated destination column of the reporter table.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07805341&OS=07805341&RS=07805341
owner: Microsoft Corporation
number: 07805341
owner_city: Redmond
owner_country: US
publication_date: 20040413
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","Computing Environment Overview","Computerized Financial System"],"p":["The present invention generally relates to an Extraction, Transformation and Loading (ETL) designer module of a computerized financial system that operates to communicate instructions to ETL services module of a server to configure ETL packages. The ETL packages are used to extract, transform and load elements from a source financial table contained in a source database or data store into a destination table of a destination database or data store having a pre-defined format that is independent of the format of the first table.","Computerized financial systems include various software packages including accounting programs and financial reporting programs. The accounting programs maintain various accounts for the business such as a general ledger, inventory, accounts receivable, accounts payable, balances, payroll and other accounts. The general ledger is a storehouse for financial activity and history of a company, which contains all of the financial transactions for the company. The general ledger and other accounts are typically stored as tables (financial tables) in one or more databases.","Financial reporting applications utilize the data stored in the financial tables of the databases to generate reports. Such reports can include balance reports and forecasting reports, for example.","The databases that contain the financial tables of a business are conventionally organized and maintained using a variety of Database Management Systems (DBMS). Among such database systems, are those adhering to a \u201crelational\u201d model which are recognized as Relational Database Management Systems (RDBMS). A relational database is a collection of data that is organized in related two-dimensional tables of columns and rows. Data in a table can be accessed and manipulated by performing set operations on the tables, such as join, sort, merge, and so on. These operations are typically initiated by way of a user-defined query that is constructed in a query language such as Structured Query Language (SQL). SQL queries consist of high level commands which typically describe the data set to be selected, retrieved or processed.","As mentioned above, the financial reporting programs need to access the financial information of the business in one or more financial tables to extract information that will be utilized to form the report. Some prior art financial reporting programs or tools include program code (e.g., SQL statements) in their software to directly access particular financial tables of a database. One problem with such an approach is that, when a financial table is modified or added, the program code of the reporting program needs to be modified to provide access to the modified or new financial table. Such modifications are complex, time consuming and expensive to complete.","An alternative approach to the above is to make use of existing Extraction Transformation and Loading (ETL) services provided with some servers. ETL services provide a set of tools for extracting, transforming and consolidating data from disparate sources into single or multiple destinations to build data warehouses or data marts in accordance with a predefined format. Data Transformation Services (DTS) of Microsoft\u00ae SQL Server is one example of an ETL service.","ETL services allow for the creation of ETL packages (DTS Packages for Microsoft\u00ae SQL Server) that define custom data movement solutions that are tailored to the financial reporting application. Each ETL package generally defines multiple steps of associated tasks that operate to perform the desired extraction and transformation of the data elements contained in the source table. Additionally, execution of the ETL package causes the ETL to import the specified source data of the source table, transform the data into the desired format, and export the data to the destination table in the destination database on store. As a result, such ETL services can be used to form an ETL package that moves selected data elements from a source financial table (e.g., a general ledger), transform the data elements into a desired format, and load the data elements into a reporter table that is ready for use by the financial reporting application. Additionally, modifications can be made directly to the ETL packages to accommodate desired modifications without having to modify the program code of the financial reporting application.","Although the use of such ETL services avoids the need to customize the reporter application code to a particular financial table, the ETL packages that define the custom data movement must still be programmed and configured. ETL services include a user interface (such as Enterprise Manager for DTS of Microsoft\u00ae SQL Server) that allows the user to directly configure the DTS Packages. Such programming is time-consuming and must be performed by someone that not only has a complete understanding of the destination table that is desired by the financial reporting application including the desired source data and the desired format of the data, but also a knowledge of how to program or configure the ETL packages to perform the extraction, transformation and loading steps. Additionally, the configuring of the ETL packages can be complex due to the multiple steps and associated tasks that must be manually entered to perform the desired data extraction, transformation, or loading operation.","A need exists for improved methods of programming or configuring ETL packages for use by financial reporting applications including making such configuring methods more efficient and user friendly.","The present invention is generally directed to an extraction, transformation and loading (ETL) designer module of a computerized financial system that is used to configure ETL packages. Each ETL package can be used for loading data elements from one or more financial tables of a financial database into a reporter table in accordance with a predefined format. The ETL designer module includes a transformation class that defines transformation objects. Each transformation object is responsible for a transformation of the source data elements of a source column of the financial table into a reporter format of an associated destination column of the reporter table.","In accordance with one embodiment of the invention, the transformation includes a substitution of at least a portion of the source data elements with a predefined substitution element.","In accordance with another embodiment of the invention, the transformation includes a parsing of the source data elements.","In accordance with yet another embodiment of the invention, the transformation includes a concatenation of the source data elements of two or more source columns.","In accordance with another embodiment of the invention, the transformation includes a pivot of the source data elements of the source column.","The present invention generally relates to an extraction, transformation and loading (ETL) designer module of a computerized financial system that operates to communicate instructions to an ETL services module of a server to configure ETL packages. Each ETL package is used to extract, transform and load source elements from a source table contained in a source database into a destination table of a destination database having a predefined format that is independent of the format of the source table.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier WAV or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, FR, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into the computer  through input devices such as a keyboard , a microphone , and a pointing device , such as a mouse, trackball or touch pad. Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a hand-held device, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user-input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","As noted above, the present invention can be carried out on a computer system such as that described with respect to . Alternatively, the present invention can be carried out on a server, a computer devoted to message handling, or on a distributed system in which different portions of the present invention are carried out on different parts of the distributed computing system.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":["200","200","202","204","206","208","206"]},"A relational database typically includes multiple tables. A database typically will also include associative structures. An example of an associated structure is an index, typically, but not necessarily, in the form of B-tree or hash index. An index provides for seeking to a specific row in a table with a near constant access time regardless of the size of the table. Associative structures are transparent to the users of the database but are necessary for efficient operation and control of the database management system.","A database management system (DBMS), particularly a relational database management system (RDBMS), is a control system that supports database features including, but not limited to, storing data on a memory medium, retrieving data from the memory medium and updating data on the memory medium.","The exemplary financial database  includes a general ledger table  and a balance table , which are shown in , respectively. Each table comprises columns  and rows . Exemplary general ledger table  comprises multiple columns  including Reference, Code , Code , Date, Debit, and Credit fields for the columns. Columns  in balance table  include Period, 1, 2, 3, and 4 fields for the columns. Financial database  also includes an index table (not shown) that contains information regarding each table in the database.","Generally, data stored in a relational database is accessed by way of a user-defined query that is constructed in a query language such as SQL. Typically, for any given SQL query there are numerous procedural operations that need to be performed on the data in order to carry out the objectives of the SQL query. For example, there may be numerous joins and table scans that need to be performed so as to accomplish the desired objective.","The exemplary server  of  has a simplified SQL server RDBMS architecture that essentially comprises three layers. Layer one provides at least two classes of integration with the SQL server including an Applications interface  that allows integration of a server interface into user applications such as Distributed Component Object Modules (DCOM), and a Tools Interface  that provides an interface for integration of administration and configuration tools developed by independent software vendors.","Layer two opens the functionality of the SQL server  to other applications by providing Application Programming Interfaces (API) including SQL namespace , SQL Distributed Management Objects , and ETL services . A user interface  is provided by Wizards, HTML, and so on.","SQL Distributed Management Objects API  abstracts the use of DDL, systems stored procedures, registry information, and operating system resources, providing an API to all administration and configuration tasks for the SQL server.","(ETL) Services API  exposes the services provided by SQL server , or other server product, to aid in building data warehouses and data marts and preferably includes a data pump application. As described more fully below, these services provide the ability to transfer and transform data between heterogeneous data sources in accordance with ETL packages  (e.g., DTS packages).","The present invention makes use of ETL services  of the server  through execution of the pump application to extract source elements from a source financial table, such as general ledger table , of the source financial database , transform at least some of the source elements, and load or pump the source elements into a destination reporter table of the reporter database or data store  through the execution of an ETL package .","This operation is depicted schematically in . As each row  is pulled from the source table into data pump , a transform  is applied. The transformed source element can be temporarily stored in a staging table before pumping or loading the transformed source elements into the corresponding destination table of destination database . Data pump  may be implemented as all or part of an application program  comprising instructions executed by a processing unit  of a computer system , which are shown in .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6","b":["230","230","234","230","236","238","230"]},"COM objects are modules designed in accordance with the object-oriented programming model. Object-oriented programming allows the use and re-use of program modules without knowledge of internal state and procedures of the module. Step objects  coordinate the flow of control of execution of tasks . A task  that does not have an associated step  object is never executed. The step objects  can also establish a precedence constraint  that is associated with a corresponding task . The precedence constraints are events which must occur prior to execution of the corresponding task .","Tasks  define actual operations to be performed on data (e.g. by the data pump). For example, tasks  may convert the data among formats. Once the data is in a useable format, transformation tasks  transform the data before moving it to the destination row. The tasks could be custom procedural scripts , ActiveX script , or simple data pump transformations . A task  defines the source table  (e.g., general ledger table  or database table ), the destination table  of the reporter database , and associated columns  between the two tables. Additionally, the task  includes a transformation algorithm  that defines how the data is transformed.","Thus, each ETL package , which may be incorporated into a COM based architecture, also allows for the specification of numerous tasks , as well as any complex work flow and scheduling relationships among them. Existing processing environments which provide for specification of such work flow and scheduling and precedence relationships require a pre-determined specification (e.g., in the form of a tree) of all such relationships among all tasks. By contrast, COM based ETL packages  allow specification of such overall scheduling relationships via specification of precedence and priority for each task separately, one task at a time. Thus, overall scheduling relationships need not be known in advance, so long as precedence constraints for individual steps  are known.","Financial reporting software package  includes various program modules including an ETL designer module , a data refresher module , and a reporter application or module . Package  also includes a user interface  through which a user  can view and interact with the program modules including providing input to the ETL designer module , designing reports, and viewing reports.","Generally, program modules include routines, programs, objects, components, data structures and the like that are stored on a computer-readable medium and perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations than that described with respect to , including handheld devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, network personal computers, minicomputers, mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","The ETL designer module  of the present invention includes a library of classes, interfaces, and value types that are used to programmatically communicate with ETL services  through Applications Interface  () to configure an ETL package  that is designed to extract and transform data from financial tables of source financial database  and load the data into a reporter table of destination reporter database  in accordance with a predefined format. The reporter database  can be accessed by reporter application  to generate reports .","An exemplary object model for the ETL designer module  is illustrated schematically in . ETL designer module  includes a Mapper Engine root class from which a Mapper Engine object  is defined or instantiated. The Mapper Engine root object  configures source and destination column mappings and transformations. Sibling objects of the Mapper Engine root object  are preferably organized in a hierarchical manner within source database and destination database branches  and .","The source database branch  of the Mapper Engine object model generally describes the source table of the source financial database . Source database branch  includes a source database object , a source table object , and source column objects .","The source database object  is defined by, and is an instantiation of a source database class and identifies (i.e., names) a source database, such as source financial database .","The source table object  is a sibling of the source database object  and is defined by, and is an instantiation of, a source table class. The source table object  identifies (i.e., names) the source table, such as source financial table  () or  ().","The source column objects  are siblings of the corresponding source table object  and are defined by, and are instantiations of, a source class. The source column objects  each identify a column of the source table including the column name (i.e., field) and data type. This information is preferably obtained from the schema of the source table that is received through a communication with source database . For the exemplary source table  of , source column objects would be generated for each column, such as the Reference, Code , Code , Date, Debit and Credit columns.","The destination database branch  generally describes the destination table of the destination reporter database , examples of which are provided in .  shows an exemplary reporter table  that corresponds to the general ledger table  of .  shows an exemplary reporter table  that corresponds to the balance table  of . Additionally, branch  describes associations between columns of the destination table and columns of the corresponding source table of the source financial database . Destination database branch  includes a destination database object , a destination table object , destination objects , association objects , and transformation objects .","The destination database object  is defined by, and is an instantiation of, a destination database class and identifies (i.e., names) a destination database, such as destination reporter database .","The destination table object  is a sibling of the destination database object  and is defined by, and is an instantiation of, a destination table class. Destination table object  identifies (i.e., names) a predefined destination table, such as destination reporter table  () or  (). The schema of the destination table is programmed into the ETL designer module  based upon the format desired by the reporter application .","The destination column objects  are siblings of the corresponding destination table object  and are defined by and are instantiations of a destination object class. The destination column objects  each identify a column of the destination table including column name (i.e., field) and data type. Additionally, the destination column objects  are predefined based upon the corresponding destination table and, therefore, are set without any user input. With exemplary reporter table  of , destination column objects would be generated for each column, such as the Reference, Code, Date, Debit and Credit columns.","One or more association objects  are siblings of each destination column object  and are defined by, and are instantiations of, an association class. The association objects  each identify an association of a column of the source table, such as general ledger table  (), and the corresponding parent destination column object  of the destination table. Accordingly, the association objects define a mapping between one or more columns of the source table and a column of the destination table. Thus, at least some of the columns of the destination reporter table will have a corresponding association object , each of which correspond to one of the available source columns defined by source column objects  of the corresponding source table object . For example, in order to map the Reference reporter column  to the Reference source column , the association object  that is a sibling of the destination object  identifying the Reference reporter column  of reporter table  can be linked to the source column object  corresponding to the Reference source column  of the source financial table . In a similar manner, association objects  can map the destination Date column  to the source Date column , the destination Debit column  to the source Debit column , and so on. Additionally, multiple association objects  may be linked to one destination object . For example, the destination object corresponding to the destination Code column  can have two association object siblings that identify source column objects  for the source Code  and Code  columns  and , respectively, of the source table.","The transformation objects  are siblings of, or correspond to, the association objects  and are defined by and are instantiations of a transformation class. In general, the transformation objects  are responsible for a transformation of source elements from a source format of the source table columns to a destination format of the associated destination column. The transformation objects  define steps and associated tasks that will be programmed into the ETL package  to perform the desired transformation.","The transformation objects  can be configured to perform substitution , parse , concatenation , and pivot  transformations. The substitution transformation  generally involves a substitution of at least a portion of the source elements with predefined substitution elements. Typically, the substitutions only modify the format of the source elements while maintaining the value or meaning of the source elements. For example, source financial table  includes a Date column  having source elements  in a source format of MM\/DD\/YY, whereas the associated destination Date column  of reporter table  is in a destination format of MM\/DD\/YYYY. The corresponding transformation object  is responsible for the transformation of each of the source elements  from the source format of MM\/DD\/YY to the destination format. Accordingly, this exemplary transformation object  operates to convert the year from the two digit format to the four digit format prior to the pumping of the source elements  into the destination table .","The parse transformation  generally involves a parsing or removing of portions of the source elements  of a source column to convert them from the source format into the desired destination format for the associated destination column. Thus, the parse transformation  is useful when, for example, the source elements  correspond to a code that includes multiple pieces of information, such as a client identifier portion and a matter identifier portion, and the corresponding destination column only requires the client identifier portion. Additionally, the parse transformation can be used to eliminate undesired characters. For example, source financial table  includes Reference column  having a source format of ###-##, whereas the destination format of the corresponding or associated destination Reference column  is #####. Accordingly, the corresponding transformation object will perform a parse transformation on the source elements  in the column  to remove the \u201c-\u201d and thereby transform the source elements into the destination format.","The concatenation transformation  generally involves joining two or more source columns that are associated to a single destination column as defined by corresponding association objects . For example, a transformation object  can be associated to the association objects  linking the source Code  and Code  columns  and , respectively, of the source table  () to the destination Code column  of the destination table  (). In this case, the transformation object  is responsible for a concatenation of the source Code  and Code  columns  and  to convert the source format of separate codes (e.g., \u201c44\u201d and \u201cA22\u201d) into the destination format in which the two codes are joined into a single code (e.g., \u201c44A22\u201d).","The pivot transformation  generally involves transposing the columns and rows of the source table or, in other words, converting column data to row data. For example the source table  of  has a source format in which the Periods for the business are organized in columns  and the Beginning and Ending Balances are organized in rows . Unfortunately, the corresponding destination table  () has a destination format that is the opposite of the source format: the Periods are organized in rows  and the Beginning and Ending Balances are organized in columns . The pivot transformation  operates to transpose the source table elements  to match the destination table to thereby provide the desired transformation, which is shown as being complete in .","The Mapper Engine object  includes an ETL generator method  that, when called, programmatically communicates with the ETL services  to generate an ETL package  that can be used to perform the desired extraction and transformation of the source data elements of the source table, and load the transformed source data elements into the destination table in accordance with the service and destination related objects of the Mapper Engine object . Accordingly, the ETL generator  generates instructions, which configure the steps and associated tasks for the ETL package  automatically through ETL services  (), based upon the Mapper Engine objects, including the setting of precedence and the programming of SQL statements.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 10","FIG. 7","FIG. 3","FIG. 8","FIG. 7","FIG. 2","FIG. 3"],"b":["230","250","200","370","280","210","270","372","282","258","374","230","320","374"]},"It is vital that the user properly completes the Mapper Engine object model for the desired ETL operation by defining all of the necessary associations of source and destination columns as well as transformations of the data elements contained in the source columns that are required to convert the data elements into the reporter format of the destination reporter table. If not, the ETL package  will be unable to conduct the desired transformation and pump operation resulting in an incomplete destination reporter table.","In accordance with one embodiment of the invention, the destination column objects  include \u201cIsRequired\u201d and \u201cIsComplete\u201d properties that are used to ensure that the mappings and transformations have been fully defined for the destination table. The IsComplete property indicates whether or not the object model state is considered complete and the IsRequired property indicates whether it is required to be complete. If the IsRequired property is set to \u201ctrue\u201d, then the IsComplete property will be set to \u201cfalse\u201d until all the required association objects  and transformation objects  are set for the destination column object . On the other hand, if the IsRequired property is set to \u201cfalse\u201d then the IsComplete property can be set to \u201ctrue\u201d since it is not necessary to set association and transformation objects for the destination object. The ETL generator method  is only allowed to configure the corresponding ETL package  when the IsComplete property for all destination column objects  for the destination table object are set to \u201ctrue\u201d.","The setting of the IsRequired property can change based upon various conditions. For instance, if the user indicates that the source table includes a transaction table, the IsRequired property for destination column objects  corresponding to columns for such data may change from \u201cfalse\u201d to \u201ctrue\u201d. In that case, the necessary association and transformation objects for those destination column objects must be completed to change the IsComplete property to \u201ctrue\u201d before the ETL generator method  can be executed.","Based on the IsRequired and IsComplete properties, a task pane can be provided in the user interface  () that indicates the associations and transformations that must be completed by the user before the ETL generator method  can be executed. Accordingly, the task pane preferably identifies the destination column object (i.e., destination column) that is incomplete and required and the remaining tasks, such as identifying the associated source column of the source table, or selecting a transformation, that must be completed.","Although the present invention has been described with reference to particular embodiments, workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 3 and 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 8 and 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
