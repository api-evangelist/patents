---
title: Computer method and system for integrating enterprise JavaBeans into non-Java environments
abstract: Disclosed herein is a method of accessing an Enterprise Java Bean (EJB) by a non-Java application within a computing environment, comprising: calling a client library by the non-Java application; invoking a function within the client library to construct an HTTP request corresponding to the calling input parameters from the non-Java application; passing the HTTP request from the client library to an EjbServlet; invoking a method on an EJB by the EjbServlet based upon the HTTP request; returning information from the invoked method from the EJB to the EjbServlet; decoding the returned information into an HTTP response string by the EjbServlet; transmitting the HTTP response from the EjbServlet to the client library; and parsing the HTTP response by the client library into return information compatible with the non-Java application and then passing the return information from the client library to the non-Java application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07617504&OS=07617504&RS=07617504
owner: Sprint Communications Company L.P.
number: 07617504
owner_city: Overland Park
owner_country: US
publication_date: 20030908
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","REFERENCE TO A MICROFICHE APPENDIX","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","System Overview","EXAMPLES","Example 1","Example 2","Example 3","Example 4","Example 5","Example 6"],"p":["The present application claims the benefit of U.S. provisional application Ser. No. 60\/410,036, filed Sep. 12, 2002 and entitled \u201cWebCall2,\u201d which is hereby incorporated herein by reference.","Not applicable.","Not applicable.","The present invention generally relates to the integration of components in the field of enterprise computing. More specifically, the invention relates to a method for integrating the capabilities provided by Enterprise JavaBean components with non-Java computing environments.","In the field of enterprise computing, much of the focus on integration has been directed at the problem of integrating non-Java systems into Java-based computing environments. The inverse problem of integrating Java components, especially Enterprise JavaBeans, into non-Java environments has received relatively little attention to date. Enterprise JavaBeans (EJBs) are a Java API (Application Program Interface) specification developed by Sun Microsystems that defines a component architecture for multi-tier client\/server systems. A few commercially available Enterprise Application Integration (EAI) products offer some help with integrating Java components into non-Java environments, but few currently provide turnkey support for integrating EJBs. CORBA products also offer some help with this problem, but not all non-Java environments are supported by the major vendors of CORBA infrastructure services, for example, Clarify ClearBasic. Therefore, a need exists for a method and system to integrate the capabilities provided by EJBs with non-Java systems, especially for non-Java environments such as legacy mainframe systems that do not have CORBA support.","Disclosed herein is a method of accessing an Enterprise Java Bean (EJB) by a non-Java application within a computing environment, comprising: calling a client library by the non-Java application; invoking a function within the client library to construct an HTTP request corresponding to the calling input parameters from the non-Java application; passing the HTTP request from the client library to an EjbServlet; invoking a method on an EJB by the EjbServlet based upon the HTTP request; returning information from the invoked method from the EJB to the EjbServlet; decoding the returned information into an HTTP response string by the EjbServlet; transmitting the HTTP response from the EjbServlet to the client library; and parsing the HTTP response by the client library into return information compatible with the non-Java application and then passing the return information from the client library to the non-Java application. In an embodiment, the HTTP request and the HTTP response are passed between the client library and the EjbServlet via an HTTP protocol, wherein the HTTP protocol enables the client library and EjbServlet to communicate across a distributed computing environment. In an embodiment, the calls between the client library and the non-Java application are based upon the C language calling convention.","Also disclosed is a computing system for accessing an EJB by a non-Java application comprising: a non-Java application in communication with a client library; a means for calling the client library from the non-Java application wherein said means for calling the client library is used to establish communication between the non-Java application and the client library; an EjbServlet in communication with the client library wherein the client library comprises a function to take input parameter information from the call, embed the information into an HTTP request, and transfer the request to the EjbServlet; a means for transferring information between the client library and the EjbServlet wherein said means for transferring it is used to establish communication between the EjbServlet and the client library via an HTTP protocol; the EjbServlet configured to receive the HTTP request from the client library and invoke a corresponding method on the EJB; and a remote method interface (RMI) for invoking and returning Java objects between the EjbServlet and the EJB.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1","b":["5","5","2","4","40","2","10","30","20","4","50","80","60"]},"Definition of Webcall","The present disclosure as depicted in the computing system  shown in  can be referred to as WebCall. WebCall is a distributed component for integrating EJBs into non-Java systems. WebCall makes it possible for non-Java code to call any method supported by any EJB and receive the returned information, typically in the form of an object. In an embodiment, WebCall can also make subsequent calls to methods on the returned object. In either case, the clients of WebCall receive a text representation of the call results, along with format descriptors that may be used to parse the information, which means to divide the text into small components that can be analyzed. The following is a detailed description of the WebCall computer method and system for integrating EJBs into non-Java environments.","Non-Java Application","The non-Java application  in  makes a call  to the client library  to transmit calling input parameters to invoke a function in the client library. The non-Java application of the present disclosure can be any computing application implementing a business-related functionality written in a non-Java language that requires access to external functionality encapsulated in an EJB, for example a billing application or a database application. The non-Java application may be based on any programming language\/computing environment capable of calling external library functions via the C language calling convention. Some examples of language\/computing environments for the present disclosure could include a stand-alone FORTRAN program on a midrange computer, or a Visual Basic program running on a personal computer. Some other examples of acceptable programming languages for the non-Java application  are C, Pascal, Basic, or ClearBasic.","When the non-Java application  makes a call  to invoke a function in the client library , the calling code establishes parameters used to transfer information\/data between the non-Java application  and the client library . Parameters are defined as fixed amounts of memory used to hold the data being transferred. Parameters used only for transferring data from the non-Java application to the client library function are known as input parameters. Parameters used only for transferring data from the client library function to the non-Java application are known as output parameters. Some parameters are used as both input and output parameters. The amount of memory associated with each parameter is related to its purpose. Some para meters will have only enough memory to hold a single data value as dictated by the programming language\/environment. Others, particularly output parameters, may be a much larger size chosen by the non-Java application. These large output parameters are referred to as buffers. The size of each buffer may be subject to limitations imposed by the programming language\/environment in which the non-Java application is written.","Client Library","The client library  is a module of code for WebCall related functions. Non-Java application  interfaces with the client library  to make a call  to those WebCall related functions found within the client library . The client library  is the client side interface of the present invention.","In an embodiment, the client library  is a linkable library that exposes an API (Application Programming Interface) to allow the applications to make method calls on an EJB  and the objects they return. The client library API is based on the C calling convention, and as mentioned previously any programming language that supports the C calling convention may make a call  to the client library . The client library  may be implemented as a single shared object library file named libWEBCALL.so on any platform, for example Sun Microsystem's Solaris 2.6 Unix operating system. In an embodiment, the client library  can be deployed by copying the file to a location where the client-side, non-Java application  can access it. For example, the deployment location could be a directory in the path that non-Java application  will search when dynamically loading code.","In an embodiment, the code within the library is in standard C, provided however that the library can optionally be built for other platforms\/languages supporting the C based calling convention. The client library  is deployed with the client non-Java application  and is dynamically linked to that application. Consequently, the library executes as part of the client application's process. The client library  then communicates with the EjbServlet  via the HTTP protocol .","The client library  is comprised of a collection of functions, collectively the WebCall API, such as a webCall function, a webCallSession function, and webCallSetLogging function. The first two functions are both embodiments of the present disclosure for calling EJB . The webCall function is a \u2018one shot\u2019 call\/return procedure used to retrieve the resulting data of a specific call to a desired EJB, whereas the webCallSession function is an iterative return procedure used to retrieve the desired EJB data in a series of truncated segments. The webCallSessions function can be used optionally when the buffer size is too small for a complete \u2018one shot\u2019 retrieval of the EJB data and will be discussed in more detail later. The webCallSetLogging function is an optional functionality that is unrelated to calling an EJB. It controls a logging function of the client library . The logging function can be defined as the messages written to a file to establish and maintain a running dialogue of such things as operations performed by the client library  that can be used for debugging purposes, if desired.","The client library  is in communication with the EjbServlet  wherein the client library  comprises a function (for example, the webCall function) to take the information from the call  and convert it into an HTTP request text string and then transfer it to the EjbServlet . The client library  embeds the relevant input parameters from the call  into the HTTP request. Some input parameters are embedded as HTTP headers, while others are embedded in the HTTP message body as lines of text formatted using a \u2018name equals value\u2019 notation. Each \u2018name\u2019 corresponds to an input parameter name and each \u2018value\u2019 corresponds to the value\/data of the input parameter. Since the HTTP request is a text string, the client library may desirably convert numeric input parameters to their text representations before embedding them in the HTTP request.","Some of the input parameters passed from the non-Java application  to the client library  are used to identify the EJB and method, and the address of the EjbServlet . The client library can then use the supplied input parameter values to access the desired EJB  method. The input parameters passed from the non-Java application to the client library are used to identify the DNS (Domain Name Service) name (or IP address) of the machine that hosts the EjbServlet, the TCP port on which the EjbServlet is listening for requests, the EjbServlet's Uniform Resource Identifier (URI, which is an identifier representing the EjbServlet as deployed on the machine), the information required to identify a specific EJB method, and the sizes of the various buffer parameters. The client library constructs the complete \u201caddress\u201d of the EjbServlet by combining the DNS name (or IP address), TCP port, and URI values passed to it by the non-Java application. The non-Java application supplies information to the client library via the call parameter to identify the specific EJB method to be called. Typically, the EjbServlet is deployed on a Java application server that also hosts multiple EJBs. Co-location of the EjbServlet with the EJBs it might call is beneficial, but not required. In an embodiment, the EjbServlet may be deployed on one server and the EJBs deployed on other servers, provided however that such an arrangement is typically avoided due to inefficiency.","The client library  later extracts, parses, and converts the returned HTTP response headers and body received back from the EjbServlet  into data values compatible with the non-Java application , places them into the output parameters provided by the calling code, and returns them to the non-Java application . Since the HTTP response headers and body text are strings, the client library may also perform text-to-numeric conversions on the text representations of some numeric values it extracts from the response. The means for transferring information between the client library  and the EjbServlet  is via an HTTP protocol  connection that enables the two devices to communicate across a distributed computing environment.","Information Formatting","The distributed components of the present disclosure, the client library  and the EjbServlet , act as an adapter between incompatible programming environments, making it possible for a non-Java application  to make use of EJBs . Typically, when richly formatted information flows between incompatible environments, some type of format transformation occurs so that the information may be used natively in each environment.","In most embodiments of the present disclosure, the kinds of information that flow through the disclosed computing system such as the one shown in  are the parameter values being passed to a specified EJB method (and optional chained methods), and the results of the method invocation(s) being returned back to the client. Since method parameters and return types (including thrown exceptions) can be complex Java objects, the distributed components of the present disclosure desirably rely on some syntactic conventions to help describe the semantics of the information. Chained methods refers to methods provided by a returned object. EJB methods often return objects that represent multiple attributes. For example, a getCustomer method might return a Customer object that contains multiple attributes such as Name, Address, SSN, etc. Some of these attributes may themselves be objects that represent multiple attributes, such as Address, which might contain Street, City, Zip, etc. For example, the method signature specified via the call parameter might include a chained method to retrieve the City of a Customer, like this: \u201cgetCustomer(String).getCity( )\u201d. Here, the EJB supports a method called getCustomer that returns a Customer object, and the Customer object supports a method called getCity. WebCall allows method calls to be \u201cchained\u201d together in this fashion. Any number of methods can be chained together, limited only by the combination of objects that are possible starting with the object returned by the initial EJB method call. A benefit of chaining is that it can decrease the amount of data returned across the wire, thus improving the efficiency of retrieving the desired data.","The client library  organizes returned information generated by the EjbServlet  from method calls into two separate text strings: a data string and a format descriptor string. The data string is a text string containing the text representation of all data and\/or error information returned from the method call. In situations where a method call returns multiple data values, (such as an array, a vector, or a Java business domain object containing multiple attributes), the text representation of all values are concatenated together within the data string. The text string contains no delimiters or other special characters that are not part of the returned data. To assist the non-Java application in parsing the data string, client library  also provides a corresponding format descriptor string. The format descriptor is a text string generated by the EjbServlet containing information about the returned data. Using the format descriptor, the non-Java application can locate (by name) and extract individual values from the data string. More information about the format descriptor syntax is presented in detail later in this disclosure.","Usage","Non-Java applications  can use WebCall  by directly invoking the client library's webCall function, which consists of the following C functions exposed by the client library .","webCall Function Syntax:",{"@attributes":{"id":"p-0026","num":"0025"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"int webCall(char*host,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int","port,"]},{"entry":[{},"char*","uri,"]},{"entry":[{},"char*","call,"]},{"entry":[{},"int","callSize,"]},{"entry":[{},"char*","data,"]},{"entry":[{},"int","dataSize,"]},{"entry":[{},"char*","format,"]},{"entry":[{},"int","formatSize);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"This client library  WebCall function accepts information about the desired EJB method call from the non-Java application  and passes it via HTTP protocol  to the EjbServlet . It then waits for results returned by the EjbServlet  via HTTP protocol  and passes them back to the calling non-Java application  via the output parameters. Parameter descriptions are provided in Table 1 below. The client library  also returns a return code to indicate the status of a call. For example a return code of 0 would indicate that the call completed successfully. Errors encountered within the Client Library  are indicated by negative integer values returned by the WebCall API. A return code of \u22121, \u22122, or \u22123 indicates that the return data was truncated signaling to the non-Java application  that the webCallSession function desirably could be called rather than the \u2018one shot\u2019 webCall function to enable a complete retrieval of the data. webCallSession will be described in more detail later in this disclosure. Return values representing the status code may be any of the values listed in Table 2 below.",{"@attributes":{"id":"p-0028","num":"0027"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["host","Input parameter containing the host name of the server used to access the WebCall"]},{"entry":[{},"EjbServlet."]},{"entry":["port","Input parameter containing the port number for host."]},{"entry":["uri","Input parameter containing the Uniform Resource Identifier for the WebCall"]},{"entry":[{},"EjbServlet."]},{"entry":["call","Input parameter containing multiple pieces of information required to make an EJB"]},{"entry":[{},"method call. All elements of the call string desirably should be concatenated"]},{"entry":[{},"together into a single string so that the individual elements are separated from each"]},{"entry":[{},"other by a newline character (i.e., the ASCII character value 10). Each element of"]},{"entry":[{},"the call string is a keyword\/value pair separated by the equals character (=)."]},{"entry":[{},"The call parameter desirably should contain the following elements in the exact"]},{"entry":[{},"order listed below:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1.","package\u2014the fully qualified name of the Java package that contains the EJB's"]},{"entry":[{},{},"home interface."]},{"entry":[{},"2.","home Interface\u2014the name of the EJB's home interface. The home interface"]},{"entry":[{},{},"name should not be prefixed with a package name."]},{"entry":[{},"3.","jndiName\u2014the name used to locate the EJB via a JNDI (Java Names"]},{"entry":[{},{},"Directory Interface) lookup. This corresponds to the beanHomeName"]},{"entry":[{},{},"parameter in the Em's deployment descriptor file."]},{"entry":[{},"4.","methodSig\u2014the signature of the EJB method to be called. The method"]},{"entry":[{},{},"signature consists of the EJB method name, an opening parenthesis character,"]},{"entry":[{},{},"comma-delimited parameter type names (if applicable), and a closing"]},{"entry":[{},{},"parenthesis character. The method signature should contain no spaces. The"]},{"entry":[{},{},"method signature may also contain chained method calls."]},{"entry":[{},"5.","methodParams\u2014the text representation of the values to be passed as"]},{"entry":[{},{},"parameters to the method(s) specified in the method signature. The first"]},{"entry":[{},{},"parameter value is preceded by the delimiter character that is used to separate"]},{"entry":[{},{},"the parameter values that follow it. If the EJB method takes no parameters, the"]},{"entry":[{},{},"entire methodParams element should be omitted."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Below is an example call string."]},{"entry":[{},"package=com.sprint.service.account.component"]},{"entry":[{},"homeInterface=AccountHome"]},{"entry":[{},"jndiName=Account"]},{"entry":[{},"methodSig=findInfo(String,String,String,int,String)"]},{"entry":[{},"methodParams=;John Doe;USA;male;50;555-55-5555"]},{"entry":["callSize","Input parameter containing the size of the information in the call buffer."]},{"entry":["data","Output buffer parameter to receive the data from the called method(s)."]},{"entry":["dataSize","Input parameter containing the allocated size of the data buffer."]},{"entry":["format","Output buffer parameter to receive the format descriptor that describes the"]},{"entry":[{},"individual data values passed back in the data buffer. The format descriptor"]},{"entry":[{},"makes it possible for the caller to locate (by name) and extract individual data"]},{"entry":[{},"values from the data buffer."]},{"entry":["formatSize","Input parameter containing the allocated size of the format buffer."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0029","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","Call completed successfiully. Note that this does not mean that no Java exceptions"]},{"entry":[{},"were encountered during the course of calling the EJB and converting the results to"]},{"entry":[{},"text."]},{"entry":["\u22121","Returned data was truncated to fit into the data buffer."]},{"entry":["\u22122","Returned format descriptor was truncated to fit into the format buffer."]},{"entry":["\u22123","Both data and format descriptor were truncated to fit into their respective buffers."]},{"entry":["\u22124","Communication error. Unable to initiate or complete interaction with EjbServlet."]},{"entry":["\u22125","Memory allocation error."]},{"entry":["\u22126","host is invalid (NULL or empty)."]},{"entry":["\u22127","port is invalid (less than 0)."]},{"entry":["\u22128","uri is invalid (NULL or empty)."]},{"entry":["\u22129","call is invalid (NULL or empty)."]},{"entry":["10","callSize is invalid (not greater than 0)."]},{"entry":["\u221211","data buffer is invalid (NULL)."]},{"entry":["\u221212","format buffer is invalid (NULL)."]},{"entry":["\u221213","data and format buffers are invalid (NULL)."]},{"entry":["\u221214","dataSize is invalid (not greater than 0)."]},{"entry":["\u221215","formatSize is invalid (not greater than 0)."]},{"entry":["\u221299","Unknown error occurred (should never happen)."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The method signature element formed by the client library  is a text string that desirably conforms to the following format:","methodSig=EjbMethodName(ParameterType, ParameterType, . . . , ParameterType)","As demonstrated above, the method signature value consists of the EJB method name, an opening parenthesis character, comma-delimited parameter type names (if applicable), and a closing parenthesis character. The method signature contains no spaces or other extraneous characters. If the EJB method takes no parameters, the parentheses are present, but empty.","Parameter types are classified as simple or complex. The simple parameter types supported by WebCall  include the following Java data\/object types: String, StringBuffer, int, Integer, short, Short, long, Long, boolean, Boolean, float, Float, double, Double, char, Character, byte, and Byte. WebCall  will recognize these parameter type names. They can be used \u2018as-is\u2019 directly in the method signature.","The complex parameter types supported by WebCall  include: Java arrays, Java Vectors, and Java Objects. WebCall  requires a special syntax to assist in properly creating and initializing objects of these types.","Array and Vector parameter types desirably should conform to the following formats:","ElementType[ElementCount] . . . [ElementCount]",{"@attributes":{"id":"p-0036","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["Example: String [25][2]","Example: mypackage.Account(String,String)[20]"]}}}},"Vector(ElementType)[ElementCount] . . . [ElementCount]\n\n","Within the (required) brackets, ElementCount is a positive integer indicating how many elements the array or Vector will contain, and ElementType is the data type of each element (all elements will be this type). ElementType can be any simple or complex parameter type supported by WebCall.","Object parameter types desirably should conform to the following format:","Package.ObjectClass(ParameterType, ParameterType, . . . , ParameterType)",{"@attributes":{"id":"p-0040","num":"0000"},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":"Example: com.sprint.sales.Account(String,String,String,int)"}}}},"Any parameter type in the method signature that is not recognized as one of the simple, Array, or Vector types will be evaluated to see if it is a reference to a Java object class. To be successfully recognized, the parameter type desirably should consist of a valid, fully qualified Java class name, an opening parenthesis character, comma-delimited parameter type names (if applicable), and a closing parenthesis character. The ParameterType names within the parentheses are used to find a matching constructor defined in the objects class. Each ParameterType can be any simple or complex parameter type supported by WebCall. If the desired constructor takes no parameters, the parentheses should be empty.","Method Chaining","Additional method calls may also be appended onto the end of the method signature in a manner similar to the method call chaining syntax supported by Java. For example, method signatures of the following form would be valid:","methodSig=EjbMethod(types).Method1(types).Method2(types)","Here, EjbMethod( ) is called on the EJB, then Method1( ) is called on the object returned by EjbMethod( ), and then Method2( ) is called on the object returned by Method1( ). Any extra parameters for the additional methods are simply concatenated (in order) to the end of the methodParams element.","Use of this method-chaining feature is optional. When used, its syntax is consistent with syntax described above. Each appended method desirably should consist of the method name, an opening parenthesis character, comma-delimited parameter type names (if applicable), and a closing parenthesis character. Each appended method is separated from the closing parenthesis of the previous method by a period. No spaces or other extraneous characters should be included. If an appended method takes no parameters, the parentheses should be present, but empty.","Member Classes as Method Parameter Types","Special care desirably should be taken when an EJB method accepts member class parameters (a member class is a non-static inner class). Every instance of a member class implicitly refers to an instance of the class that contains it. The Java compiler automatically inserts a private field in the member class to hold a reference to the containing object. The compiler also automatically inserts a hidden parameter to all constructors of the member class and passes the containing object as the value of this parameter. As described earlier, WebCall  desirably should construct the parameter objects that will be passed to the EJB method before calling it. WebCall  does this by using reflection to obtain a reference to a constructor object for each method parameter. In the case of member classes, WebCall  can construct an instance of an inner class parameter using a constructor defined by the inner class. Consequently, the method signature can accurately indicate which constructor to use by including the hidden parameter type at the beginning of the constructor's parameter type list.","Method Parameters Syntax","The method parameters element is a text string that desirably should conform to the following format:","methodParams=Value, Value, . . . , Value","As demonstrated above, the method parameters value consists of a delimiter character followed by parameter values separated by the delimiter character. A parameter value desirably should be provided for every method parameter that occurs in the method signature. If the method(s) in the method signature take no parameters, the entire methodParams element should be omitted from the information passed into the WebCall API.","Any character other than the newline character (ASCII value 10) can be used as the delimiter between parameter values. In the format example above, a comma is used as the delimiter. The delimiter desirably is chosen so that it does not match any of the characters in the parameter values. For parameters that are simple types, the parameter value will be the string representation of the value. For parameters that are arrays or vectors of simple types, the parameter value will be a sequence of the string representations of each array\/vector element value separated by the specified delimiter. For parameters that are object types, the parameter value will be a sequence of string representations of values separated by the specified delimiter. These values will be assumed to be constructor parameters that will be used to create an instance of the associated object type.","For arguments that are arrays or vectors of object types, the parameter value will be sequences of string representations of values separated by the specified delimiter. These values in these sequences will be assumed to be constructor parameters that will be used to create each instance of the specified object type. Parameter values can not contain the newline character. \u201cEmpty\u201d values can be specified for String and StringBuffer type parameters that contain no characters. WebCall interprets empty values for String and StringBuffer type parameters as nulls. \u201cEmpty\u201d values can also be specified for object type parameters with constructors that take no parameters. A delimiter typically precedes empty values. In situations where only one parameter value is required and the parameter value is empty, the body of the methodParams element desirably should still begin with a delimiter although an empty value (i.e., nothing) follows it.","EjbServlet: Input Object","The EjbServlet  in  is a Java servlet that calls a specified EJB  method (and possibly additional chained methods) and returns the result via HTTP . All of the EJB-related work performed by the present disclosure takes place within the EjbServlet . In an embodiment, the EjbServlet  is based on the javax.http.servlet.HttpServlet class. The EjbServlet  can be deployed on any suitable Java application server, for example, it can be deployed on a web server or application server that supports Servlet 2.0 (or greater) API and utilizes Java version 1.2 (or greater). In an embodiment, the EjbServlet  may be deployed on a WebLogic Server. In an alternate embodiment, the EjbServlet  may be deployed on an IBM Java application server such as WebSphere.","The EjbServlet  is configured to accept an HTTP request from the client library , further comprising extracting the input parameter information (including the method signature and method parameters) out of the structures used to carry it through the HTTP protocol , encoding or converting the extracted information into zero or more Java objects for invoking EJB , and identifying the method being called by the client from the encoded parameters. EjbServlet  then transfers the encoded objects to EJB . The EjbServlet  extracts the information from the HTTP structures as text only. Some of that information may represent parameters that are to be passed into the EJB method. As known to those of skill in the art, when a method is called in Java, often some of the parameters to be passed into the method may or may not be required to be in Java object form. Therefore, when the EjbServlet  recognizes that the method it will call requires passing input Java objects, EjbServlet  then takes the text representing that parameter and creates a Java input object that represents that text. Likewise, when an object is not required, none is created by the EjbServlet . The input object is constructed by the EjbServlet  and passed to the EJB  for the purpose of invoking the method. The number of input objects corresponds to the number of inputs required for the method being invoked on the EJB","The EjbServlet  requires information about the parameter values being passed to the specified method(s) that it will call on behalf of the client. The EjbServlet  as part of its API call parameter encodes this information, which is the method signature. The method signature, as described earlier, is comprised of the EJB method name followed by parentheses that enclose comma-separated data type names for each parameter expected by the method. It looks much like any Java method declaration. It may also contain additional method names with their own parameter type lists. The EjbServlet  uses the method signature to convert the method parameter values supplied by the client from their text representations into the appropriate Java objects expected by the method(s).","EjbServlet: Encoding-Text-to-Object Conversions","The EjbServlet  converts text strings passed through its calling function API (API call) into Java objects to convert the text corresponding to the method parameter values into the Java data types specified in the method signature. This occurs according to the technique used to call the method(s). Part of the text passed through the calling interface is used by the EjbServlet  to create a Java object representing an instance of the EJB. Then, a Java Reflection API may be used to obtain a reference to a Method object corresponding to the EJB method specified in the signature. The Reflection API is a means provided by Java to allow programs to dynamically discover, create, and make use of objects at runtime rather than hard-coding these activities into the programs. For example, a program could be written to statically create and manipulate a Person object. Alternatively, the program could be written to use the Reflection API to dynamically create and manipulate a Person object, or any other object by passing the name of the object's type to the program at runtime. This capability can be beneficial to the EjbServlet because it is designed to have no prior knowledge of the EJBs\/methods it will interact with, thus making it a generically applicable EJB calling mechanism.","The Method object is an object provided by the Reflection API. All Method objects support a method named invoke that calls the underlying method represented by the Method object on the specified object with the specified parameters. Before this call can be made, the method parameters passed in by the client desirably are converted from text strings to Java objects based on the data types specified in the method signature. If the method signature also contains chained methods, similar conversions will be performed for them as well. The EjbServlet  performs these conversions using the following techniques:\n\n","The EjbServlet  is further configured to receive a returned Java object from the EJB , decode or convert the returned object into data and format descriptor text strings, and then place these strings, along with other information, into the HTTP response. The data and format descriptor strings are streams of characters that represent the object that was returned by the method call. For example, if the method call returns an Account Java object, the object may have multiple attributes such as name, address, phone number, and other such attributes. That one object can then be converted into four or five distinct data values (or however many data values for the corresponding number of attributes within the object). Those values are then converted into a string of data that is returned as a string of text with name, address, and phone number blocked together one after another. The format descriptor string contains tags that are separated by brackets. Each tag comprises four fields such as type, name, start position, and length. The format string can then be used later by the non-Java calling application  to locate the data values in the corresponding data string.","Additionally, the EjbServlet  does not have access to the output buffers passed by the non-Java application  to the client library . The information that flows between the client library and the EjbServlet is embedded within HTTP Requests and HTTP Responses. The client library extracts the data and format descriptor strings from the HTTP response into the respective output buffers supplied by the non-Java application. The client library typically does not perform any conversions on these strings as it extracts them.","The return object corresponds to the output of the method on the EJB . As known to those of skill in the art, there is always either zero or one object returned by an EJB method. This is a fundamental characteristic of all Java methods and is not unique to WebCall. However, a return object may be internally composed of multiple other Java objects as demonstrated by the example above. Thus, the decoding or deconstruction of one return object can result in multiple atomic data values. The HTTP response string constructed by the EjbServlet  may contain other information in addition to containing data and format strings resulting from the decoding of the object returned from the EJB method call. This information may include various HTTP-related control information, the lengths of the data and format strings, an EjbServlet error code, an EjbServlet version ID, and (in the case of WebCallSession only) a session ID. The EjbServlet  then may transfer the response back to the client library  across the HTTP  connection.","EjbServlet: Decoding-Object-to-Text Conversions","In an embodiment of the present disclosure Java objects are converted to strings by the EjbServlet  to convert the Java object returned by the called method(s) into the data text string that is returned to the client library . The EjbServlet  performs this conversion (known as decoding) using the following algorithm:\n\n","This decoding process begins by using the Java Reflection API to obtain a list of all Methods declared by the class or interface that the returned object represents. Next, each Method is examined to determine if it is an accessor. Each Method is assumed to be an accessor if it meets the following criteria:","1. It is defined in the object's class as public.","2. It takes no parameters.","3. It has a non-void return type.","4. Its name is not toString.","5. The class type of the object returned by the Method does not match the class type of the object being decoded unless the Method's return type is a direct or indirect superclass or superinterface of the object being decoded.","6. The class type of the object returned by the Method is not an array or Collection containing elements that match the class type of the object being decoded unless the type of elements in the Method's returned array\/collection are direct or indirect superclass or superinterface of the object being decoded.","All methods meeting these criteria are called via invoke, and the returned objects (or exceptions) are converted to a text strings by one of the algorithms presented above. As each object returned by an accessor is converted, it is concatenated to the data string.","Converting a complex object to a text string can cause this algorithm to be executed recursively to break down complex objects into constituent elements that can be converted to text. As each text conversion occurs, format descriptor tags are generated and appended to the format descriptor string. Consequently, there is a one-to-one relationship between format descriptor tags and the individual data values in the data string. Each tag in the format descriptor contains sufficient information to indicate the following:\n\n","Errors encountered during Java method calls are generally manifested in the form of Java Exceptions. The EjbServlet  will catch all exceptions based on the Java Exception class that are thrown during the course of either calling a method or converting the results to text format. When an exception is caught, the format descriptor will contain an exception tag indicating that the text in the data string is an exception message rather than a valid data value.","As previously described, all calls to methods specified in the method signature are actually made by calling the invoke method of the java.lang.reflect.Method class. If a method called by invoke completes abruptly by throwing an exception, invoke embeds this exception in an InvocationTargetException which is thrown in turn to the caller of invoke (i.e., EjbServlet ). In this situation, EjbServlet  retrieves the embedded method exception from the InvocationTargetException and returns any available information about the embedded exception. The associated format descriptor will then indicate that an exception has been returned rather than valid data.","Exceptions can also occur during subsequent Java method calls that might be required to convert the returned object to text. A specific example of this is when a Java object is converted to text by calling its accessors. In this scenario, it is possible that some accessor calls will complete without error, and some will not. In this situation, WebCall  makes no judgment on the validity of the object being converted. It is assumed that the designer of the object has a reason to allow some accessors to complete successfully while others fail. In any case, the data and format descriptor strings returned by WebCall  will accurately reflect what happened.","EjbServlet: Encoding Alternatives","In an embodiment, the syntactic conventions required by the WebCall API consider that data passed to and from Java methods are inherently variable in size and complexity. Consequently, the method signature and format descriptor describe incoming and outgoing data respectively. These descriptions are passed along with the data each time an EJB method call is made via WebCall . This can impose additional network traffic between the non-Java application  and the EJBs  it uses. In an alternate embodiment, the conventions could be based on fixed-length encoding. This may require that mapping information be maintained for each desired method that describes how the EjbServlet  should convert between Java data objects and fixed size strings representing data values. This mapping information can be maintained on both the client  and the server , eliminating the need to transmit data formats back and forth. With fixed-length encoding, some per-call descriptive information may be desirable in situations where an invoked method returns an object that contains arrays or collections of varying sizes. Because of this, a variable-length encoding scheme relying on format information could be the desired convention. Techniques are available to help overcome any issues exacerbated by the WebCall variable-length encoding scheme. For example, if the class of the object returned by an EJB method call defines a toString( ) method that returns a String, the client can indicate that WebCall  should call this method on the object returned by the EJB method rather than converting the results of (potentially) multiple accessor calls. This reduces the number of format descriptor tags required for the object to one. The non-Java application  desirably should know how this single string is formatted and parse it accordingly. In another embodiment, EJBs can be based on a Facade pattern (a pattern that is based on multiple values that are fixed-length and encoded in a single text string) to impose a simpler interface between the client  and business logic EJBs . A Fa\u00e7ade interface such as this may help to reduce format descriptor sizes. This technique can also prevent undesirable modifications or extensions to the interfaces of existing EJBs .","EjbServlet: Format Descriptor Syntax","The format descriptor tags are the following:",{"@attributes":{"id":"p-0073","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<f name pos size>","a Field corresponding to a simple value"]},{"entry":[{},"<e name pos size>","an Element of an array or Collection"]},{"entry":[{},"<x name pos size>","an eXception"]},{"entry":[{},"<u name pos size>","Unknown (should never happen)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Each of these tags contains the item's name, its position in the data string, and its length.","The pos portion of the tag is a non-negative integer that indicates the position of the associated value in the data string. In effect, it is a zero-based index into the data string returned along with the format descriptor. Position 0 is the first character, position 1 is the second character, and so on.","The size portion of the tag is a non-negative integer that indicates the size of the associated value in the data string. Data values may have a size equal to or greater than zero. A size of zero indicates that the associated data value is either an empty String\/StringBuffer object, or a null object.","The name portion of the tag will be (at a minimum) the name of the method called to access the data value associated with the tag. For method calls that return a simple value, the associated Field tag that is returned in the format descriptor will look like <f EjbMethodNane 0 32>. For method calls that return complex types, the name portion of the tag will contain additional information as described below.","If the method returned an array or collection, multiple Element tags will be present in the format descriptor\u2014one for each element in the array\/collection. Each Element tag name will be the name of the method that returned the array\/collection plus an index specifier indicating the ordinal position of the associated data value in the array\/collection. For example, <e getNames[2] 216 32> indicates that the value of the third element of the array returned by a call to getNames starts at the 217character in the data string, and the value is 32 characters long.","If the method returned an object, multiple Element tags will be present in the format descriptor\u2014one for each accessor called to retrieve the data values of the object. Each Element tag name will be the name of the method that returned the object plus the name of the accessor object called to get the associated data value. For example, <e getCustomer.getSSN 11 9> indicates that the value returned by the getSSN accessor of the object returned by getCustomer starts at the 12character in the data string, and the value is 9 characters long. If the object returned by getCustomer has another accessor named getNumbers that returns an array or collection, the format descriptor would have an additional Element tag for each element of the returned array\/collection. For example, <e getCustomer.getNumbers[1] 140 10> would indicate that the value of the second element of the array\/collection returned by getNumbers for the object returned by getCustomer starts at the 141character in the data string, and the value is 10 characters long.","If a called method throws an exception based on the Java Exception class, the text string returned by the exception's toString method will be returned as the data string value corresponding to the call. An associated Exception tag will be present in the format descriptor. The name portion of the tag will be (at a minimum) the name of the called method that generated the exception. In the case of exceptions thrown by accessors or object\/text conversions, the name will be prefixed with the name of the method that returned the parent object. For example, if the previous getCustomer.getSSN example threw an exception, the associated tag would look like <x getCustomer.getSSN 11 30>.","Remote Method Interface (RMI)","In , the Remote Method Invocation (RMI) , for invoking and returning Java objects between the EjbServlet  and the EJB , is a set of protocols developed by Sun's JavaSoft division that enables Java objects to communicate remotely with other Java objects. RMI is a relatively simple protocol written in standard Java code, but unlike more complex protocols such as CORBA and DCOM that are designed to support objects created in any language, RMI works only with Java objects. RMI  in  enables server  to run across a distributed computing environment if desired, in which EJBs can run in a separate process space from the calling application. For example, the EjbServlet  could be located in Kansas City and the EJB  could be located in Dallas.","Sequence of Events for a WebCall Function","In general, the sequence of events for a \u2018one shot\u2019 webCall function of the present disclosure can occur as follows. In , non-Java application  makes a call  to the client library  API, passing it parameters that indicate the name and location of the EjbServlet , the method name or signature of the method(s) to be called, and the values to be passed as the method parameters. The client library  translates the information passed to it into an HTTP request  and sends the request to the EjbServlet . The EjbServlet  encodes the WebCall-related information extracted from the HTTP request  received from client library  and calls (via RMI ) the specified method of the specified EJB  using the specified parameter values and constructing input objects as needed. If necessary, EjbServlet  makes the additional chained method call(s) on the returned object(s). The EjbServlet  translates the object returned by the method call(s) into two text strings: a raw text string containing the data, and a companion format descriptor string that describes the format of the data string. The EjbServlet  assembles the data and format strings into an HTTP response  and sends the response to the client library  via RMI . The client library  extracts the format descriptor and data strings from the HTTP response  and passes them as output parameters to the non-Java application  that initiated the call. In an alternate embodiment the EjbServlet  can be accessed without using the client library . For example, the EjbServlet  can be invoked via HTTP from a client application that is written in Java. This approach is similar in concept to Web Services, and can be advantageous in situations where direct RMI calls to EJBs are complicated by the presence of firewalls.","webCallSession Function","In an alternate embodiment, the webCallSession function of the WebCall API can be accessed by the non-Java application  to iteratively retrieve large results from an EJB  in truncated sections. Like the webCall function, the webCallSession function accepts information about the desired EJB method call and passes it via HTTP protocol  to the EjbServlet . It then waits for results returned by the EjbServlet  via HTTP  and passes them back to the calling non-Java application  via the return parameters.","The webCallSession function can be used in situations where the amount of decoded information returned by an EJB method call could possibly exceed the size of the buffers used to receive it. Before making the initial call, the non-Java application  desirably has knowledge of the size of the results from the EJB  it is calling and can therefore be aware, up front, of whether or not to call the webCall function (for small EJB results) or to call the webCallSession function (for large EJB results). For example, the non-Java application  could call the webCall function when retrieving a small amount of information such as an accounting function to get an address from a user account. Alternatively, the non-Java application  could call the webCallSession function when retrieving a large amount of information such as the total usage by a user account for the past ten years. Those skilled in the art typically can determine whether to use webCallSession when developing an application based on the buffer size limitations imposed by their programming language\/environment, and knowledge of the volumes of data returned by the various EJB methods. WebCall imposes no special limitations on buffer size. The client library makes use of the buffers that are allocated by the calling application regardless of their size. If the programming language\/environment of the calling application imposes no meaningful limitations on buffer size, then the developers skilled in the art can choose a buffer size that will be large enough for the desired retrieval. In such a case, webCallSessions would not be used. However, even when there are no imposed limitations, the developers can choose to use smaller buffers and perform iterative retrieval so that the application can perform other work during each iteration. For example, the application may update a \u201cRetrieval Status\u201d display for the user between webCallSession calls so that the system does not appear to have died during the retrieval of large volumes of data.","When accessing large results from an EJB , the webCallSession function can be called repeatedly (i.e., in a loop) to retrieve the results. During the first iteration of the loop, the call to webCallSession causes the EJB method to be called. Part (or possibly all) of the data and format strings are returned along with their sizes. If only part of the data and\/or format string was returned, the status code returned will indicate that webCallSession should be called again (perhaps multiple times) to get the remaining results. The status code returned by webCallSession indicates whether webCallSession needs to be called again. The status code is an integer. If it is 1, another call needs to be made. If it is 0, no more calls are required. If it is less than 0, some type of error occurred. All subsequent calls simply return the next portions of the data and\/or format strings. The EJB method is only called once by the first webCallSession call. During a session, the EjbServlet  stores the decoded EJB method call results in memory on the server. It then uses the session ID as a \u2018key\u2019 to access the stored results.","Non-Java applications  use the client library  webCallSession function by directly invoking webCallSession, which consists of the following C function exposed by the client library . Parameter descriptions are provided in Table 3. Again, the return value is a status code as described earlier and may be any of the values listed in Table 4.",{"@attributes":{"id":"p-0087","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"int webCallSession(char* host,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int","port,"]},{"entry":[{},"char*","uri"]},{"entry":[{},"char*","call,"]},{"entry":[{},"int","callSize,"]},{"entry":[{},"char*","data,"]},{"entry":[{},"int*","dataSize,"]},{"entry":[{},"char*","format,"]},{"entry":[{},"int*","formatSize,"]},{"entry":[{},"char*","sessionID,"]},{"entry":[{},"int","IDsize);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0088","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["host","Same as WebCall function."]},{"entry":["port","Same as WebCall function."]},{"entry":["uri","Same as WebCall function."]},{"entry":["call","Same as WebCall function."]},{"entry":["callSize","Same as WebCall function."]},{"entry":["data","Same as WebCall function."]},{"entry":["dataSize","Same as WebCall function with one exception: Upon return, dataSize will"]},{"entry":[{},"contain the size of the information returned in the data parameter. Consequently,"]},{"entry":[{},"this parameter desirably should be passed by reference, not by value."]},{"entry":["format","Same as WebCall function."]},{"entry":["formatSize","Same as WebCall function with one exception: Upon return, formatSize will"]},{"entry":[{},"contain the size of the information returned in the format parameter."]},{"entry":[{},"Consequently, this parameter desirably should be passed by reference, not by value."]},{"entry":["sessionID","Output\/input buffer parameter to contain the session ID. For the first call of a"]},{"entry":[{},"session, this parameter desirably should contain a NULL character (ASCII 0) at the"]},{"entry":[{},"beginning of the buffer. Upon completing the first call, this parameter will contain a"]},{"entry":[{},"sequence of characters that desirably should be used in subsequent calls in the"]},{"entry":[{},"session to retrieve the remaining portions of the data and\/or format strings."]},{"entry":["IDsize","Input parameter containing the allocated size of the sessionID buffer. The"]},{"entry":[{},"minimum allowable size is 300. This size should be sufficient for most situations."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0089","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Call completed successfully. Partial data and\/or format information was returned."]},{"entry":["0","Call completed successfully. All data and format information has been returned."]},{"entry":["\u22121","Returned data was truncated to fit into the data buffer."]},{"entry":["\u22122","Returned format descriptor was truncated to fit into the format buffer."]},{"entry":["\u22123","Both data and format descriptor were truncated to fit into their respective buffers."]},{"entry":["\u22124","Communication error. Unable to initiate or complete interaction with EjbServlet 50."]},{"entry":["\u22125","Memory allocation error."]},{"entry":["\u22126","host is invalid (NULL or empty)."]},{"entry":["\u22127","port is invalid (less than 0)."]},{"entry":["\u22128","uri is invalid (NULL or empty)."]},{"entry":["\u22129","call is invalid (NULL or empty)."]},{"entry":["\u221210","callSize is invalid (not greater than 0)."]},{"entry":["\u221211","data buffer is invalid (NULL)."]},{"entry":["\u221212","format buffer is invalid (NULL)."]},{"entry":["\u221213","data and format buffers are invalid (NULL)."]},{"entry":["\u221214","dataSize is invalid (NULL or not greater than 0)."]},{"entry":["\u221215","formatSize is invalid (NULL or not greater than 0)."]},{"entry":["\u221216","sessionID buffer is invalid (NULL)."]},{"entry":["\u221217","IDsize is invalid (less than 300)."]},{"entry":["\u221299","Unknown error occurred (should never happen)."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In general, the sequence of events for an iterative webCallSession function of the present disclosure can occur as follows. In , non-Java application  makes a call  to the client library  webCallSession function, passing it parameters that indicate the name and location of the EjbServlet , the method name or signature of the method(s) to be called, the values to be passed as the method parameters, buffers to contain the results of the EJB method call, a buffer to contain a session ID (key), and the sizes of the buffers. The client library  translates the information passed to it into an HTTP request  and sends the request to the EjbServlet . The EjbServlet  encodes the HTTP request  received from client library  and calls (via RMI ) the specified method of the specified EJB  using the specified parameter values and constructing input objects as needed. If necessary, EjbServlet  makes the additional chained method call(s) on the returned object(s). The EjbServlet  translates the object returned by the method call(s) into two text strings: a raw text string containing the data, and a companion format descriptor string that describes the format of the data string and places all or part of this information into the HTTP response. The EjbServlet  stores any remaining decoded EJB method call results that do not fit the size of the returning buffers into memory on the server, sets the return code value to indicate that the return data being passed back was truncated, and attaches a key for identification purposes to the stored data. It then assembles the truncated data and format strings, along with a matching key to be used to retrieve the remaining data, and the return code into an HTTP response , and sends the response to the client library  via HTTP. The client library  extracts the format descriptor and data strings (including the key and return code) from the HTTP response  and passes them as output parameters to the non-Java application  that initiated the call. The non-Java application  accepts the returned information and then reads the return code to determine if the data retrieved has been truncated. If the return code is 1 (indicating the return data has been truncated) a subsequent call is made by the non-Java application , furthermore, passing the key back to the client library  and on to the EjbServlet  via HTTP. The EjbServlet  uses the passed identification key to locate the remaining stored encoded EJB return data by matching the passed key to the key stored with the remaining information. After a match is found, the EjbServlet  places the additional information into the HTTP Response, determines a new return code to indicate if the new batch of data is again truncated or is complete, and then passes the additional information along with the same key back to the client library  and on to the calling non-Java application . Subsequent calls will continue to be made to the return information stored on the EjbServlet  until all of the data is retrieved which would then be indicated by a return code of 0.","webCallSetLogging Function","The webCallSetLogging function, callable by the non-Java application , allows the specification of a file to receive logging output from the client library . If not called, all logging output is directed to a console. This is an optional function within the client library  and may be executed in combination with one of the other library functions such as the webCall function or the webCallSession function. The syntax of the function follows with the parameter description in Table 5 and the possible return values listed in Table 6.","int webCallSetLogging(char*logfile);",{"@attributes":{"id":"p-0093","num":"0111"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"252pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["logfile","Input parameter containing the path\/name of the file to which the client library should"]},{"entry":[{},"log its messages."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0094","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 6"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0","Logging destination could not be set as specified."]},{"entry":[{},"1","Logging destination successfully set as specified."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Although only a few embodiments of the present invention have been described herein, it should be understood that the present invention may be embodied in many other specific forms without departing from the spirit or the scope of the present invention. The present examples above and as follows are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope of the appended claims along with their full scope of equivalents. The examples that follow are included to demonstrate various embodiments of the present disclosure. The examples include demonstrations of making calls to the three client library functions, the webcall function, the webCallSessions function, and the webCallSetLogging function. Also included are examples of deployment of the EjbServlet, method signatures and method parameters, and parsing the format descriptor.","The following example demonstrates an application making a call to the webCall function of WebCall  that has been described in the present disclosure. The call typically can be made using any non-Java language but for demonstration purposes a pseudo-code is shown. The example shown sets up the call string, allocates the buffers, and makes the call to the EJB method. Note that the \u2018int code\u2019 is the return value representing the status code.","\/\/Set up the call string","String call[1000]","String newline=CHR(10)\/\/linefeed character",{"@attributes":{"id":"p-0097","num":"0000"},"ul":{"@attributes":{"id":"ul0013","list-style":"none"},"li":"call=\u201cpackage=com.sprint.service.account.component\u201d+newline+\u201chomeInterface=AccountHome\u201d+newline+\u201cjndiName=Account\u201d+newline+\u201cmethodSig=findInfo(String,String,String,int,String)\u201d+newline+\u201cmethodParams=,John Doe,USA,male,50,555-55-5555\u201d\n\n\/\/Allocate buffers for data and format descriptor\n\nint bufSize=60000\n\nString data[bufSize]\n\nString format[bufSize]\n\n\/\/Call EJB method\n\nint code=webCall(\u201cIDServer.corp.sprint.com\u201d, 80, \u201cEjbServlet\u201d, call, call.length( ), data, bufSize, format, bufSize)\n\nif(code==0)\n"}},"getData(data, format)","else","errorMessage(code)","The following example demonstrates an application making a call to the webCallSession function of WebCall  that has been described in the present disclosure. Again, the call typically can be made using any non-Java language but for demonstration purposes a pseudo-code that is similar in form to Visual Basic is shown. The example shown sets up the call string, allocates the buffers, makes the initial call to the EJB method, and sets up a loop to get the results.","\u2032Declare some useful types and variables","Const WebCallBufferSize as Integer=30000","Type WebCallResults","dataBuf as String*WebCallBufferSize","dataLen as Integer","dataPos as Integer","formatBuf as String*WebCallBufferSize","formatLen as Integer","formatPos as Integer","status as Integer","End Type","Dim results(3) as WebCallResults","Type WebCallValue","tagType as String","name as String","pos as Integer","size as Integer","data as String","End Type","\u2032-------------------------------------------------------------------",{"@attributes":{"id":"p-0113","num":"0000"},"ul":{"@attributes":{"id":"ul0014","list-style":"none"},"li":"Sub sessionCall(String host, Integer port, String uri, String call, Integer callSize)"}},"\u2032 Declare variables","Dim n as Integer","Dim f as Integer","Dim d as Integer","Dim min as Integer","Dim max as Integer","Dim sessionID as String*300","Dim tagEnd as Integer","Dim tagEnd as Length","Dim tag as String","Dim value as WebCallValue","Dim valueLen as Integer","\u2032 Initialize variables","min=LBound(results)","max=UBound(results)","For n=min To max\n\n","Next n","value.tagType=\u201c \u201d","value.name=\u201c \u201d","value.pos=0","value.size=0","sessionID=Chr$(0)","n=min","status=1","\u2032 Get the results","while n<=max And status>0\n\n","Wend","\u2032 Parse the results","f=min","d=min","status=1","tag=\u201c \u201d","while f<=max And d<=max\n\n","Wend \u2032 Loop to do the next tag\/value","End Sub \u2032 sessionCall( )","The following example demonstrates an application making a call to the webCallSetLogging function of WebCall  that has been described in the present disclosure. As mentioned previously, the call typically can be made using any non-Java language but for demonstration purposes a pseudo-code is shown. The example shown sets up a file to store logging information on the client library that could be accessed by the non-Java application programmer for debugging purposes.","\/\/Direct logging to specified file","int logFileSet=webCallSetLogging((\u201clogs\/WebCallclient.log\u201d);","The following example is included to explain how to deploy the distributed component of the present disclosure on a WebLogic 6.0+.","The WebCall EjbServlet is provided in a single tar file. For example purposes, assume that WebCall.tar is the file name holding the information for the Java class files for the Java code that comprises the EjbServlet. Deployment of the EjbServlet on a WebLogic 6.0+ application server can occur according to the following steps:","1. Copy the tar file to a location used by the client application to store its own component (e.g., EJBs) files.","2. Extract all files from the tar file using the Unix tar utility. The proper command line is:",{"@attributes":{"id":"p-0151","num":"0000"},"ul":{"@attributes":{"id":"ul0028","list-style":"none"},"li":{"@attributes":{"id":"ul0028-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0029","list-style":"none"},"li":["tar xvf WebCall.tar*","This will extract all necessary files into a WebCall subdirectory, overwriting all previous versions of the files if present.\n\n3. Examine the web.xml.template file in the WebCall\/WEB-INF directory. Adjust the initialization parameters as necessary. Typically, only the DebugLevel parameter is adjusted.\n\n4. Make sure that an entry is added to the transformFiles file to transform the web.xml.template (located in WebCall\/WEB-INF) into an environment-specific web.xml file.\n\n5. Stop and restart the managed servers to which the EjbServlet will be deployed.\n\n6. Use a web browser to open the WLS (WebLogic Server) administrator console for the application's domain. (If the console does not respond properly, start the domain admin server.)\n\n7. Under \u201cWeb Applications\u201d, select the \u201cConfigure a new Web Application . . . \u201d link. This displays the \u201cWeb Applications>create\u201d page. If desired, navigate to the \u201cGeneral\u201d tab.\n\n8. Type WebCall in the Name field. Type WebCall in the URI field. In the Path field, type the full path of the application's lib directory (e.g., \/<env>\/<applId>lib). Make sure the Deployed checkbox is checked. Finally, click the Create button.\n\n9. Navigate to the Targets tab and then select the Servers tab. Select the managed instance(s) to which the EjbServlet should be targeted, then click the Apply button.\n\n10. If applicable, select the Clusters tab. Select the cluster(s) to which the EjbServlet should be targeted, then click the Apply button.\n\nTo check that the EjbServlet is available, use a web browser to access the following URL:\n"]}}}},"http:\/\/<hostname:port>\/WebCall\/EjbServlet\/","This should display a page listing the servlet name, version number, and other information. Note that the bracketed item desirably should be replaced with the proper hostname:port combination. These values are dependent on the location and configuration of the application server.","To further help to illustrate the rules regarding the syntax of method signatures and method parameters when calling EJBs, some samples are given in Table 7. In each sample, the body of each element is underlined to help distinguish it from the element keyword and equal sign that precedes it.",{"@attributes":{"id":"p-0155","num":"0210"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"301pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Elements","Examples"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["method signature:","methodSig=aMethod( )"]},{"entry":"method parameters:"},{"entry":["method signature:","methodSig=aMethod(String)"]},{"entry":["method parameters:","methodParams=;"]},{"entry":["method signature:","methodSig=aMethod(String)"]},{"entry":["method parameters:","methodparams=;"]},{"entry":["method signature:","methodSig=aMethod(String, String)"]},{"entry":["method parameters:","methodParams=;;the first parameter is an empty string (like previous example)"]},{"entry":["method signature:","methodSig=aMethod(int,String double)"]},{"entry":["method parameters:","methodParams=,16,Here's a string,3.1415923"]},{"entry":["method signature:","methodSig=aMethod (string [4])"]},{"entry":["method parameters:","methodParams=&JOHN LENNON&PAUL MCCARTNEY&GEORGE HARRISON&RINGO STARR"]},{"entry":["method signature:","methodSig=aMethod(String[2] [3])"]},{"entry":["method parameters:","methodParams=;str(0,0);str(0,1);str(0,2);str(1,0);str(1,1);str(1,2)"]},{"entry":["method signature:","methodSig=aMethod (mypackage.Color(String,String,String))"]},{"entry":["method parameters:","methodParams=+red+green+blue"]},{"entry":["method signature:","methodSig=aMethod(Vector(mypackage.Color(String,String,String))[2])"]},{"entry":["method parameters:","methodParams=\u2033red\u2033green\u2033blue\u2033cyan\u2033magenta\u2033yellow"]},{"entry":["method signature:","methodSig=aMethod(mypackage.Rect(int.int,String) [2] ,boolean,String)"]},{"entry":["method parameters:","methodParams=,480,320,Small Rect,640,480,Big Rect,true,Dual Rectangles"]},{"entry":["method signature:","methodSig=aMethod(mypackage.DullObject( ))"]},{"entry":["method parameters:","methodParams=;"]},{"entry":["method signature:","methodSig=aMethod(String,mypackage.AnObject( ))"]},{"entry":["method parameters:","methodParame=#My Text#"]},{"entry":["method signature:","methodSig=aMethod(mypackage.AnObject( ),String)"]},{"entry":["method parameters:","methodParams=;;A string"]},{"entry":["method signature:","methodSig=aMethod(mypackage.AnObject( ),String,mypackage.TheirObject( ))"]},{"entry":["method parameters:","methodParams=;;A string;"]},{"entry":["method signature:","methodSig=aMethod(mypackage.MyObject( ),mypackage.MyOtherObject( ))"]},{"entry":["method parameters:","methodParams=,,"]},{"entry":["method signature:","methodSig=aMethod(String,String).toString ( )"]},{"entry":["method parameters:","methodParams=,string1,string2"]},{"entry":["method signature:","methodSig=aMethod(String,String).getAnotherObject(int).getValue(String)"]},{"entry":["method parameters:","methodparams=,string1,string2,100,string3"]},{"entry":["method signature:","methodSig=aMethod( ).toText(String)"]},{"entry":["method parameters:","methodParams=,\u2018toText( ) Parameter\u2019"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As explained previously, the client library extracts, parses, and converts a returned HTTP response text string received back from the EjbServlet into data values compatible with the non-Java application, places them into the buffers provided by the calling code, and returns them to the non-Java application. The following pseudo-code example demonstrates using the format descriptor for parsing the returned text string.",{"@attributes":{"id":"p-0157","num":"0212"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Sub Parse (strFormat As String, strData as String)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"intCount = ItemCount(strFormat, \u201c>\u201d)"]},{"entry":[{},"For I = 1 To intCount"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"strTag = Item(strFormat, I, I, \u201c>\u201d)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"strTagType = Left(strTag, 2)","\u2032size of tag key is 2"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"strName = Item(strTag, 2, 2, \u201c >\u201d)"]},{"entry":[{},"intPos = Val(Item(strTag, 3, 3, \u201c >\u201d))"]},{"entry":[{},"intSize = Val(Item(strTag, 4, 4, \u201c >\u201d))"]},{"entry":[{},"\u2032Add code below to access individual values in data string"]},{"entry":[{},"Select Case strTagType"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case \u201c<f\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2032a Field"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case \u201c<e\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2032an Element of an array, collection, or object"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case \u201c<x\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2032an eXception"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Case Else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2032unknown item type"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"End Select"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Next I"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"End Sub"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"}},"DETDESC":[{},{}]}
