---
title: Exchanging data associated with a communication session within a communications system
abstract: In an embodiment, objects are downloaded to an access terminal (AT) based on which window(s) are prominently displayed on the AT. In another embodiment, objects are downloaded to the AT based on a set of user-specified object download priorities. In another embodiment, a portion of a streaming data session to the AT is de-prioritized in response to a transition of a display of the AT from a first set of windows associated with the streaming data session to a second set of windows associated with a different session. For example, the de-prioritization can result in the portion (e.g., a video-portion of a audio and video conference) being omitted or reduced. In another embodiment, in response to the AT entering a limited environment, objects being downloaded to the AT can be dynamically altered to conform with the AT's limited environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09100459&OS=09100459&RS=09100459
owner: QUALCOMM Incorporated
number: 09100459
owner_city: San Diego
owner_country: US
publication_date: 20110428
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY UNDER 35 U.S.C. \u00a7119","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application for patent claims priority to Provisional Application No. 61\/330,179 entitled \u201cEXCHANGING DATA ASSOCIATED WITH A COMMUNICATION SESSION WITHIN A COMMUNICATIONS SYSTEM\u201d, filed Apr. 30, 2010, and assigned to the assignee hereof and hereby expressly incorporated by reference herein.","1. Field of the Invention","Embodiments of the present invention are directed to exchanging data associated with a communication session with a communications system.","2. Description of the Related Art","Wireless communication systems have developed through various generations, including a first-generation analog wireless phone service (1G), a second-generation (2G) digital wireless phone service (including interim 2.5G and 2.75G networks) and a third-generation (3G) high speed data\/Internet-capable wireless service. There are presently many different types of wireless communication systems in use, including Cellular and Personal Communications Service (PCS) systems. Examples of known cellular systems include the cellular Analog Advanced Mobile Phone System (AMPS), and digital cellular systems based on Code Division Multiple Access (CDMA), Frequency Division Multiple Access (FDMA), Time Division Multiple Access (TDMA), the Global System for Mobile access (GSM) variation of TDMA, and newer hybrid digital communication systems using both TDMA and CDMA technologies.","The method for providing CDMA mobile communications was standardized in the United States by the Telecommunications Industry Association\/Electronic Industries Association in TIA\/EIA\/IS-95-A entitled \u201cMobile Station-Base Station Compatibility Standard for Dual-Mode Wideband Spread Spectrum Cellular System,\u201d referred to herein as IS-95. Combined AMPS & CDMA systems are described in TIA\/EIA Standard IS-98. Other communications systems are described in the IMT-2000\/UM, or International Mobile Telecommunications System 2000\/Universal Mobile Telecommunications System, standards covering what are referred to as wideband CDMA (WCDMA), CDMA2000 (such as CDMA2000 1xEV-DO standards, for example) or TD-SCDMA.","In wireless communication systems, mobile stations, handsets, or access terminals (AT) receive signals from fixed position base stations (also referred to as cell sites or cells) that support communication links or service within particular geographic regions adjacent to or surrounding the base stations. Base stations provide entry points to an access network (AN)\/radio access network (RAN), which is generally a packet data network using standard Internet Engineering Task Force (IETF) based protocols that support methods for differentiating traffic based on Quality of Service (QoS) requirements. Therefore, the base stations generally interact with ATs through an over the air interface and with the AN through Internet Protocol (IP) network data packets.","In wireless telecommunication systems, Push-to-talk (PTT) capabilities are becoming popular with service sectors and consumers. PTT can support a \u201cdispatch\u201d voice service that operates over standard commercial wireless infrastructures, such as CDMA, FDMA, TDMA, GSM, etc. In a dispatch model, communication between endpoints (ATs) occurs within virtual groups, wherein the voice of one \u201ctalker\u201d is transmitted to one or more \u201clisteners.\u201d A single instance of this type of communication is commonly referred to as a dispatch call, or simply a PTT call. A PTT call is an instantiation of a group, which defines the characteristics of a call. A group in essence is defined by a member list and associated information, such as group name or group identification.","Conventionally, data packets within a wireless communications network have been configured to be sent to a single destination or access terminal. A transmission of data to a single destination is referred to as \u201cunicast\u201d. As mobile communications have increased, the ability to transmit given data concurrently to multiple access terminals has become more important. Accordingly, protocols have been adopted to support concurrent data transmissions of the same packet or message to multiple destinations or target access terminals. A \u201cbroadcast\u201d refers to a transmission of data packets to all destinations or access terminals (e.g., within a given cell, served by a given service provider, etc.), while a \u201cmulticast\u201d refers to a transmission of data packets to a given group of destinations or access terminals. In an example, the given group of destinations or \u201cmulticast group\u201d may include more than one and less than all of possible destinations or access terminals (e.g., within a given group, served by a given service provider, etc.). However, it is at least possible in certain situations that the multicast group comprises only one access terminal, similar to a unicast, or alternatively that the multicast group comprises all access terminals (e.g., within a cell or sector), similar to a broadcast.","Broadcasts and\/or multicasts may be performed within wireless communication systems in a number of ways, such as performing a plurality of sequential unicast operations to accommodate the multicast group, allocating a unique broadcast\/multicast channel (BCH) for handling multiple data transmissions at the same time and the like. A conventional system using a broadcast channel for push-to-talk communications is described in United States Patent Application Publication No. 2007\/0049314 dated Mar. 1, 2007 and entitled \u201cPush-To-Talk Group Call System Using CDMA 1x-EVDO Cellular Network\u201d, the contents of which are incorporated herein by reference in its entirety. As described in Publication No. 2007\/0049314, a broadcast channel can be used for push-to-talk calls using conventional signaling techniques. Although the use of a broadcast channel may improve bandwidth requirements over conventional unicast techniques, the conventional signaling of the broadcast channel can still result in additional overhead and\/or delay and may degrade system performance.","The 3Generation Partnership Project 2 (\u201c3GPP2\u201d) defines a broadcast-multicast service (BCMCS) specification for supporting multicast communications in CDMA2000 networks. Accordingly, a version of 3GPP2's BCMCS specification, entitled \u201cCDMA2000 High Rate Broadcast-Multicast Packet Data Air Interface Specification\u201d, dated Feb. 14, 2006, Version 1.0 C.S0054-A, is hereby incorporated by reference in its entirety.","In an embodiment, objects are downloaded to an access terminal (AT) based on which window(s) are prominently displayed on the AT. In another embodiment, objects are downloaded to the AT based on a set of user-specified object download priorities. In another embodiment, a portion of a streaming data session to the AT is de-prioritized in response to a transition of a display of the AT from a first set of windows associated with the streaming data session to a second set of windows associated with a different session. For example, the de-prioritization can result in the portion (e.g., a video-portion of a audio and video conference) being omitted or reduced. In another embodiment, in response to the AT entering a limited environment, objects being downloaded to the AT can be dynamically altered to conform with the AT's limited environment.","Aspects of the invention are disclosed in the following description and related drawings directed to specific embodiments of the invention. Alternate embodiments may be devised without departing from the scope of the invention. Additionally, well-known elements of the invention will not be described in detail or will be omitted so as not to obscure the relevant details of the invention.","The words \u201cexemplary\u201d and\/or \u201cexample\u201d are used herein to mean \u201cserving as an example, instance, or illustration.\u201d Any embodiment described herein as \u201cexemplary\u201d and\/or \u201cexample\u201d is not necessarily to be construed as preferred or advantageous over other embodiments. Likewise, the term \u201cembodiments of the invention\u201d does not require that all embodiments of the invention include the discussed feature, advantage or mode of operation.","Further, many embodiments are described in terms of sequences of actions to be performed by, for example, elements of a computing device. It will be recognized that various actions described herein can be performed by specific circuits (e.g., application specific integrated circuits (ASICs)), by program instructions being executed by one or more processors, or by a combination of both. Additionally, these sequence of actions described herein can be considered to be embodied entirely within any form of computer readable storage medium having stored therein a corresponding set of computer instructions that upon execution would cause an associated processor to perform the functionality described herein. Thus, the various aspects of the invention may be embodied in a number of different forms, all of which have been contemplated to be within the scope of the claimed subject matter. In addition, for each of the embodiments described herein, the corresponding form of any such embodiments may be described herein as, for example, \u201clogic configured to\u201d perform the described action.","A High Data Rate (HDR) subscriber station, referred to herein as an access terminal (AT), may be mobile or stationary, and may communicate with one or more HDR base stations, referred to herein as modem pool transceivers (MPTs) or base stations (BS). An access terminal transmits and receives data packets through one or more modem pool transceivers to an HDR base station controller, referred to as a modem pool controller (MPC), base station controller (BSC) and\/or packet control function (PCF). Modem pool transceivers and modem pool controllers are parts of a network called an access network. An access network transports data packets between multiple access terminals.","The access network may be further connected to additional networks outside the access network, such as a corporate intranet or the Internet, and may transport data packets between each access terminal and such outside networks. An access terminal that has established an active traffic channel connection with one or more modem pool transceivers is called an active access terminal, and is said to be in a traffic state. An access terminal that is in the process of establishing an active traffic channel connection with one or more modem pool transceivers is said to be in a connection setup state. An access terminal may be any data device that communicates through a wireless channel or through a wired channel, for example using fiber optic or coaxial cables. An access terminal may further be any of a number of types of devices including but not limited to PC card, compact flash, external or internal modem, or wireless or wireline phone. The communication link through which the access terminal sends signals to the modem pool transceiver is called a reverse link or traffic channel. The communication link through which a modem pool transceiver sends signals to an access terminal is called a forward link or traffic channel. As used herein the term traffic channel can refer to either a forward or reverse traffic channel.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 1","b":["100","100","102","104","120","102","126","102","108","110","112","102","108","110","112"]},"Referring back to , the components of the wireless network  and interrelation of the elements of the exemplary embodiments of the invention are not limited to the configuration illustrated. System  is merely exemplary and can include any system that allows remote access terminals, such as wireless client computing devices , , ,  to communicate over-the-air between and among each other and\/or between and among components connected via the air interface  and RAN , including, without limitation, carrier network , the Internet, and\/or other remote servers.","The RAN  controls messages (typically sent as data packets) sent to a base station controller\/packet control function (BSC\/PCF) . The BSC\/PCF  is responsible for signaling, establishing, and tearing down bearer channels (i.e., data channels) between a packet data serving node  (\u201cPDSN\u201d) and the access terminals \/\/\/. If link layer encryption is enabled, the BSC\/PCF  also encrypts the content before forwarding it over the air interface . The function of the BSC\/PCF  is well-known in the art and will not be discussed further for the sake of brevity. The carrier network  may communicate with the BSC\/PCF  by a network, the Internet and\/or a public switched telephone network (PSTN). Alternatively, the BSC\/PCF  may connect directly to the Internet or external network. Typically, the network or Internet connection between the carrier network  and the BSC\/PCF  transfers data, and the PSTN transfers voice information. The BSC\/PCF  can be connected to multiple base stations (BS) or modem pool transceivers (MPT) . In a similar manner to the carrier network, the BSC\/PCF  is typically connected to the MPT\/BS  by a network, the Internet and\/or PSTN for data transfer and\/or voice information. The MPT\/BS  can broadcast data messages wirelessly to the access terminals, such as cellular telephone . The MPT\/BS , BSC\/PCF  and other components may form the RAN , as is known in the art. However, alternate configurations may also be used and the invention is not limited to the configuration illustrated. For example, in another embodiment the functionality of the BSC\/PCF  and one or more of the MPT\/BS  may be collapsed into a single \u201chybrid\u201d module having the functionality of both the BSC\/PCF  and the MPT\/BS .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 2A","FIG. 2A","FIG. 1","FIG. 1","FIG. 2A"],"b":["126","126","160","165","170","175","170","160","175","170","102","108","110","112","120","160","160","160","120","122"]},"Referring to , the broadcast serving node (BSN)  may be configured to support multicast and broadcast services. The BSN  will be described in greater detail below. The BSN  communicates with the RAN  (e.g., the BSC\/PCF ) via a broadcast (BC) A10 connection, and with the application server  via the Internet . The BCA10 connection is used to transfer multicast and\/or broadcast messaging. Accordingly, the application server  sends unicast messaging to the PDSN  via the Internet , and sends multicast messaging to the BSN  via the Internet .","Generally, as will be described in greater detail below, the RAN  transmits multicast messages, received from the BSN  via the BCA10 connection, over a broadcast channel (BCH) of the air interface  to one or more access terminals .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 2B","FIG. 1","FIG. 2B"],"b":["100","1","120","1","3","120","162","160","165","162","188","175","182","184","186","170","2","5","120","164","160","165","162","164","188","175","182","184","186","170","4","175","175"]},"Referring to , ATs ,  and  . . . N are illustrated as wireless cell-phones, AT  is illustrated as a wireless tablet-PC and AT  is illustrated as a wired desktop station. However, in other embodiments, it will be appreciated that the wireless communication system  can connect to any type of AT, and the examples illustrated in  are not intended to limit the types of ATs that may be implemented within the system. Also, while the AAA server , the provisioning server , the IMS\/SIP registration server  and the application server  are each illustrated as structurally separate servers, one or more of these servers may be consolidated in at least one embodiment of the invention.","Further, referring to , the application server  is illustrated as including a plurality of media control complexes (MCCs)  . . . N B, and a plurality of regional dispatchers  . . . N A. Collectively, the regional dispatchers A and MCCs B are included within the application server , which in at least one embodiment can correspond to a distributed network of servers that collectively functions to arbitrate communication sessions (e.g., half-duplex group communication sessions via IP unicasting and\/or IP multicasting protocols) within the wireless communication system . For example, because the communication sessions arbitrated by the application server  can theoretically take place between ATs located anywhere within the system , multiple regional dispatchers A and MCCs are distributed to reduce latency for the arbitrated communication sessions (e.g., so that a MCC in North America is not relaying media back-and-forth between session participants located in China). Thus, when reference is made to the application server , it will be appreciated that the associated functionality can be enforced by one or more of the regional dispatchers A and\/or one or more of the MCCs B. The regional dispatchers A are generally responsible for any functionality related to establishing a communication session (e.g., handling signaling messages between the ATs, scheduling and\/or sending announce messages, etc.), whereas the MCCs B are responsible for hosting the communication session for the duration of the call instance, including conducting an in-call signaling and an actual exchange of media during an arbitrated communication session. Accordingly, in another embodiment of the invention, the MCCs B may be referred to as PTT application servers and\/or PTT media-distribution servers, assuming the arbitrated communication sessions correspond to PTT calls.","Referring to , an access terminal , (here a wireless device), such as a cellular telephone, has a platform  that can receive and execute software applications, data and\/or commands transmitted from the RAN  that may ultimately come from the carrier network , the Internet and\/or other remote servers and networks. The platform  can include a transceiver  operably coupled to an application specific integrated circuit (\u201cASIC\u201d ), or other processor, microprocessor, logic circuit, or other data processing device. The ASIC  or other processor executes the application programming interface (\u201cAPI\u2019)  layer that interfaces with any resident programs in the memory  of the wireless device. The memory  can be comprised of read-only or random-access memory (RAM and ROM), EEPROM, flash cards, or any memory common to computer platforms. The platform  also can include a local database  that can hold applications not actively used in memory . The local database  is typically a flash memory cell, but can be any secondary storage device as known in the art, such as magnetic media, EEPROM, optical media, tape, soft or hard disk, or the like. The internal platform  components can also be operably coupled to external devices such as antenna , display , push-to-talk button  and keypad  among other components, as is known in the art.","Accordingly, an embodiment of the invention can include an access terminal including the ability to perform the functions described herein. As will be appreciated by those skilled in the art, the various logic elements can be embodied in discrete elements, software modules executed on a processor or any combination of software and hardware to achieve the functionality disclosed herein. For example, ASIC , memory , API  and local database  may all be used cooperatively to load, store and execute the various functions disclosed herein and thus the logic to perform these functions may be distributed over various elements. Alternatively, the functionality could be incorporated into one discrete component. Therefore, the features of the access terminal in  are to be considered merely illustrative and the invention is not limited to the illustrated features or arrangement.","The wireless communication between the access terminal  and the RAN  can be based on different technologies, such as code division multiple access (CDMA), WCDMA, time division multiple access (TDMA), frequency division multiple access (FDMA), Orthogonal Frequency Division Multiplexing (OFDM), the Global System for Mobile Communications (GSM), or other protocols that may be used in a wireless communications network or a data communications network. The data communication is typically between the client device , MPT\/BS , and BSC\/PCF . The BSC\/PCF  can be connected to multiple data networks such as the carrier network , PSTN, the Internet, a virtual private network, and the like, thus allowing the access terminal  access to a broader communication network. As discussed in the foregoing and known in the art, voice transmission and\/or data can be transmitted to the access terminals from the RAN using a variety of networks and configurations. Accordingly, the illustrations provided herein are not intended to limit the embodiments of the invention and are merely to aid in the description of aspects of embodiments of the invention.","If a given access terminal (AT) has a large amount of data to send to a particular target, the set-up time of the file-transfer session is of relatively low importance because the time related to the file-transfer session will be relatively high as compared to the set-up time of the file-transfer session. However, the set-up time for file-transfer sessions where a relatively small amount of data is exchanged can be disproportionately high as compared to the duration of the session itself.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 4A","FIG. 4A"]},"Referring to , a given AT (\u201cAT \u201d) determines whether to initiate a file-transfer session, A. If AT  determines not to initiate the file-transfer session, then AT  does not set-up resources for a communication session and the process remains in A.","Otherwise, if AT  determines to initiate the file-transfer session, AT  sets up a TCH with the RAN  for the file-transfer session, A. Then, once obtaining the TCH for the file-transfer session, AT  sets-up its transport connection for the file-transfer session by engaging in a 3-way TCP handshake in order to obtain a data-port for exchanging data during the file-transfer session with the application server , A. TCP is well-known in the art and uses standard network layering protocols. Generally, before a client such as AT  attempts to connect with a server such as the application server , the server must first bind to a port to open the client up for connections, which is referred to a \u2018passive open\u2019. Once the passive open is established, a client may initiate an \u2018active open\u2019. To actually establish the transport or TCP connection, the three-way (or 3-step) handshake occurs whereby the active open is performed by the client sending a SYN to the server, the server replies with a SYN-ACK and the client sends an ACK back to the server. At this point the client, which is AT  in this case, has activated its transport connection with the application server  and has a data port with which to tag messages to the application server . While not shown explicitly in , the above-described TCP-handshake also occurs at the target-side for the communication session. The set-up that occurs at the target side is described below with respect to .","After setting up the transport connection, AT  can set-up the application that handles the file-transfer session at AT  and can begin sending application-layer data (i.e., the file to be transferred) to the application server  for transmission to AT , A. The AT  can periodically determine whether the file(s) to be transferred during the file-transfer session have been successfully sent to the application server  for transmission to AT , A. If AT  determines that one or more files or file-portions have not yet completed their transmission in A, the process returns to A and AT  continues to send file(s) or file-portions to the application server  for transmission to AT  using the resources obtained in A and A. Otherwise, the process advances to A after the transfer of all files for the file-transfer session of A complete their transmission","In A, AT  releases the session resources obtained for the data transmission of A, such that the TCH from A is torn-down and the transport connection of A is terminated. At some later point in time, AT  determines whether to send any additional files to AT , A. If so, the process returns to A so that AT  can again obtain session resources (e.g., a TCH, a transport connection, etc.) and send one or more file(s) during another file-transfer session to AT .",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 4B","FIG. 4A","FIG. 4B","FIG. 4A"],"b":"2"},"Referring to , after the application server  is notified that AT  will be sending data to be forwarded to AT , the application server  sends an Open message (e.g., a page message) to the RAN , B, which is then transmitted by the RAN  to AT , B. AT  receives the Open message and begins to set-up a traffic channel (TCH), B. Next, in B, AT  sets up a transport connection via a TCP handshake, similar to the process that occurs at AT  in A.","At some point during this process, AT  begins sending data in A to the application server  via its established data port for the communication session. The application server  begins buffering the data from AT  in B because the TCP handshake with AT  is not yet complete and\/or the application server  is required to send data packets in-sequence and the packets can arrive out-of-order. Once AT  completes the TCH-handshake by ACKing the SYN-ACK message, the application server  can begin forwarding the buffered data to AT , B. However, it will be appreciated that the buffering of B does not necessarily end the instant the ACK is received, and can continue for a period of time.","As will be appreciated, the data packets that arrive at the application server  in A may be out of order or out of sequence due to loss in the wireless link. Therefore, the application server  will buffer all the packets in B. After the data port is established with AT , the application server  can begin to deliver the buffered data packets to AT , B. Conventionally, only consecutive packets from 1 to p can be delivered to AT  even if n\u22121 packets are available because packet p+1 is still missing. This is known in the art as \u2018head-of-line blocking\u2019 and is a problem in conventional TCP. As will be described below in more detail, in at least one embodiment of the invention, head-of-line blocking can be reduced and\/or eliminated. Thus, delays associated with  and\/or B occur in part because files in TCP enforces that files be delivered in order or in sequence.","As will be appreciated, a relatively long time can occur between the time AT  determines to initiate the file-transfer session in A to the time when AT  is able to begin sending data packets for the file-transfer session in A. For example, it can take approximately 300 ms to set-up the TCH, and it can then take additional time to set-up the transport connection. Accordingly, embodiments of the invention are directed to permitting an AT to begin transmitting data for a file-transfer session more quickly when the AT is concurrently engaged in a previously-established communication session (e.g., a VoIP session, etc.).",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIGS. 4C and 4D","FIG. 4C","FIG. 4D"],"b":["1","2","1","170","170","2"]},"Referring to , a given AT (\u201cAT \u201d) determines whether to initiate a file-transfer session, C. If AT  determines not to initiate the file-transfer session, then the process remains in C. Otherwise, if AT  determines to initiate the file-transfer session, AT  determines whether a communication session that has already been established by AT  has access to session resources that are currently available for the transmission of the file(s) for the file-transfer session, C. For example, if AT  is already engaged in another file-transfer session in C, then AT  can simply use the TCH and transport connection of the other file-transfer session for the newly initiated file-transfer session. Otherwise, if existing session resources are not available for the file-transfer session, the process advances to C.","Referring to , AT  begins setting-up a TCH with the RAN  for the file-transfer session, C. Unlike , in C, instead of waiting for the TCH to complete set-up, AT  instead preemptively begins set-up of the transport connection and application-layer connection by configuring a data-over-signaling (DoS) message to include transport data and application data, and then sending the DoS message on a reverse link access channel to the RAN , which forwards the DoS message to the application server . In an example, the DoS message transmitted in C can use a signaling or DoS port that has already been set-up for signaling messages of AT . For example, certain ATs can be preconfigured with DoS ports by a service provider (e.g., Sprint, Verizon, etc.) before being provisioned to end-users of the ATs. Thereafter, the ATs are permitted to use their associated DoS port so long as coverage can be provided by the RAN .","Accordingly, AT  leverages the previously established signaling port to set-up the transport and application-layer connections for the file-transfer session in C. The application server  recognizes specific information (e.g., a message being delivered on a different port than the port that is being used to send the data, such as the signaling port) the contained in the DoS message in C, determines AT  is attempting to set-up a transport connection in order to send data to AT  during a file-transfer session. Accordingly, the application server  uses the transport-layer parameters contained in the DoS message from C to select a data port for AT  to use during the file-transfer session, C.","The application server  sends a Start message to AT  in D to instruct AT  to prepare for the file-transfer session. D is discussed in more detail below with respect to , which covers signaling between the application server  and the target AT  in more detail.","At some later point in time, assume that AT  completes its TCH set-up, C. AT  also receives a reply, from the application server , to the DoS message of C on the data port that is set-up for AT  in C, C. At this point, AT  begins sending data to the application server  to be forwarded to AT  on the data port, C. As will be appreciated, the initial data message, C, that is sent on the data port over the TCH to the RAN  to be forwarded to the application server  functions as an ACK to the reply message from C, such that AT  need not send an explicit ACK to the reply message. The application server  forwards the data from AT  to AT  in D (e.g., after buffering the data for a period of time until AT  is prepared to receive the data), which is discussed in more detail below with respect to .","As discussed above, the DoS message of C can function as a SYN message. Thereafter, the Reply message of C can function as a SYN-ACK message, and AT  can complete set-up of the data port by sending data on the data port in C and C, which functions to ACK the reply message. Accordingly, C, C and C collectively correspond to a different manner of performing the TCP-handshaking that is shown in A of , whereby the transport connection can begin set-up before a TCH is obtained.","In an example, the TCP SYN message (e.g., shown in A of ) can be embedded within the DOS message of C. The key contents of the TCP SYN message include the source and destination ports and the initial sequence number. The application server  can respond with a SYN_ACK message (e.g., which can be embedded in the reply message of C, which is discussed below in more detail) or can encode the key contents of the SYN ACK message (e.g., the source and destination ports and the initial sequence number) in another message sent to AT , such as an ACK to a call request message (e.g., a Call-ACK message over user datagram protocol (UDP)). In either case, the TCP transport connection for AT 's file-transfer session leverages the signaling session parameters that are typically used for an application-layer communication session (e.g., a multimedia session between two or more participants). By initiating set-up of the transport connection in C, the SYN message can be communicated more quickly to the application server , and consequently the set-up of the TCP connection can occur more quickly for an end-to-end call between participants. In other words, delay associated with performing the 3-way handshake for setting up the TCP connection (as in A of ) is reduced in the embodiment of .","The reply message of C is sent on the data port instead of the signaling port, and after the reply message (e.g., containing information similar to a SYN-ACK message) is sent in C, AT  can begin to use the data port for transmissions of data during the file-transfer session. Accordingly, by concurrently initiating processes for bringing up the TCH and obtaining a transport connection for the file-transfer session, AT  can more quickly begin sending application-layer data for the file-transfer session. As noted above with respect to , the data packets sent in C and C may arrive at the application server  out of order due to loss in the wireless link. The application server  will buffer all the packets in this case. Conventionally, only consecutive packets from 1 to p can be delivered to AT  even if n\u22121 packets are available because packet p+1 is still missing. This is known in the art as \u2018head-of-line blocking\u2019 and is a problem in conventional TCP. As will be described below in more detail, in at least one embodiment of the invention, head-of-line blocking can be reduced and\/or eliminated (e.g., when the data port corresponds to UDP, blocking is eliminated altogether). For example, as will be discussed below in more detail, buffering may only continue until a reply message is received from target AT  at D of , as compared to conventional  whereby buffering occurs until a given file completes its transfer.","AT  can periodically determine whether the file(s) to be transferred during the file-transfer session have been successfully sent to the application server  for transmission to AT , C. If AT  determines that one or more files or file-portions have not yet completed their transmission in C, the process returns to C and AT  continues to send file(s) or file-portions to the application server  for transmission to AT . Otherwise, the process advances to C after the transfer of all files for the file-transfer session of C complete their transmission. In C, AT  determines whether to send any additional files to AT . If so, the process returns to C, and AT  re-uses the session resources established during C through C for the previous file-transfer session to send one or more file(s) during another file-transfer session to AT . Otherwise, if AT  determines no more data requires transmission to AT  in C, AT  releases the session resources obtained for the data transmission of C and C, such that the TCH from C and C is torn-down and the transport connection (i.e., data port) is terminated.","As will be appreciated from a review of , the signaling port is used to send the SYN-message (or equivalent information), and thereafter data is sent to the application server  via the data port. Thus, the transport connection is set-up on a different port than the port being set-up for the actual session.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 4D","FIG. 4C","FIG. 4D","FIG. 4C"],"b":["170","2","170","2","401","445"]},"Referring to , upon receiving the Start message from AT  in C of , the application server  identifies and locates each intended target for the file-transfer session, and then sends a Start message to each identified and located target, D. In , for convenience of explanation, a single target AT  is shown. The Start message(s) of D includes transport data, such as timer delays and message window sizes, along with some application data such as a designation of a port upon which the application server  expects to receive data from AT . As will be appreciated, the data port(s) allocated to the target(s) of the file-transfer session need not be the same as the data-port allocated to AT . The Start message of D is sent over a signaling port, such as a DoS port. Accordingly, the Start message can correspond to a mobile-termination (MT)-DoS message, contrasted with a mobile-originated (MO) DoS message as in C from AT .","Upon receiving the Start message, AT  determines whether AT  is already engaged in an existing communication session, such that AT  already has a TCH, D. If AT  determines that AT  does not yet have a TCH in D, AT  brings up a TCH in D.","Turning back to AT , after AT  obtains a data port (e.g., after AT  receives the reply message in C of ), AT  begins sending data to the application server  on the data port, D. In , C corresponds to the initial data packet sent over the data port from AT , and C of  also corresponds to the like-numbered signal discussed above with respect to .","In the embodiment of , it is assumed that data from AT  intended for AT  begins arriving at the application server  on AT 's data port before AT  is prepared to receive the data. Accordingly, the application server  begins buffering the data from AT  in D, and the application server  continues to buffer the data in D at least until AT  indicates its readiness to download the data from the application server .","After setting up the TCH in D or confirming that AT  already had a TCH in D, AT  sends a reply message to the application server , D. The reply message of C includes information such as the port AT  is using for the file-transfer session. Upon receiving the reply message from AT , the application server  knows the data port used by AT  for the file-transfer session, and thereby begins sending the buffered data of C to AT , D.","While not shown in , it is possible that the reply message of D can arrive at the application server  before the data from AT  arrives at the application server  in C. For example, if AT  starts the process of  without a TCH and AT  starts the process of  with a TCH, AT  may be able to respond to the Start message more quickly than AT  can set up its own TCH and start sending data. In this case, the application server  need not perform the buffering of D, and rather can begin forwarding the data from AT  to AT  as soon as the data from AT  begins to arrive at the application server .","While  relate to how a file-transfer session can be set-up, another aspect to file-transfer sessions in wireless communication systems is the interaction between different functional layers of an originating or target access terminal. In , references are made to functional layers \u201c\u201d, \u201c\u201d and \u201c\u201d of AT . These different functional layers correspond to a combination of software and\/or hardware that is responsible for performing a particular function at different layers. However, while the embodiments described below focus upon three (3) functional layers for convenience of explanation, it will be appreciated that the embodiments are not restricted to 3 functional layers and can instead include any number of functional layers.","In an example, functional layer  can be referred to as a MAC layer, functional layer  can be referred to as a transport-layer, and functional layer  can be referred to as an application-layer. Functional layer  is characterized as having a transmission window or transmission queue that holds data packets queued for transmission on a reverse-link physical layer channel to the RAN . Functional layer  can request certain packets to be added to the transmission window of functional layer , and these packets can actually be generated at a higher-level or higher-layer by functional layer .","In an example, functional layer  can correspond to an application-layer interface such as a session initiation protocol (SIP) client or any other multimedia application layer interface process. A SIP client for instance, may be responsible for managing application-layer functionality of a media application (e.g., a VoIP application, a PTT application, etc.), a transport layer protocol, and a lower-layer controller (e.g., a controller of a radio link control (RLC) layer in W-CDMA systems, a controller of a radio link protocol (RLP) layer in EV-DO systems, etc.).","Generally, when functional layer  has data to send to another session participant (e.g., AT ), functional layer  requests functional layer  to send the data, which in turn requests functional layer  to send the data on the physical-channel. However, because functional layer  does not have direct control with regard to when the data is actually transmitted, functional layer  cannot determine when the data is sent on the physical-channel by functional layer . Thus, the functional layer  typically tracks when it issues data-packet transmission commands to functional layer , but does not track when functional layer  transmits the actual data packet on the physical layer (i.e., over the wireless interface ).","Referring to , assume AT  sets up and begins participation in a communication session (e.g., a streaming media session, a file-transfer session, etc.) with at least one other session participant, A. Next, functional layer  issues a request to functional layer  to transmit a new data packet for the communication session be sent to the application server  and then to the at least one other session participant, A. After requesting functional layer  to transmit the new data packet, functional layer  starts an expiration timer having a given expiration period. While the expiration timer is running, functional layer  waits to receive an ACK of the transmitted data packet, whereby functional layer  will infer that the transmission of the data packet was not successful if no ACK is received before the expiration timer expires, A.","Functional layer  receives the request for transmission of the new data packet and adds the data packet to a transmission queue or window maintained by functional layer , A, after which functional layer  instructs functional layer  to attempt to transmit all of the data packets that are currently scheduled in the transmission window of functional layer , A. As will be appreciated, not all embodiments of the invention require the functional layer  to have its own transmission window or queue. If functional layer  did not have such a transmission window, functional layer  could simply add the data packet requested for transmission in A into the transmission window of functional layer  each time a new data packet is requested for transmission by functional layer . Accordingly, while functional layer  does not necessarily have its own transmission queue, the embodiments of  are described under the assumption that functional layer  has access to its own transmission queue. It will be readily appreciated by one of ordinary skill in the art how  can be modified to accommodate the lack of a transmission queue at functional layer  in other embodiments of the invention.","Functional layer  receives the transmission order from functional layer , and then adds the data packets from the transmission window of functional layer  to its own transmission window, A. At A, functional layer  makes one or more attempts to transmit the data packets contained in the transmission window of functional layer . In A, when a transmission attempt of one of the data packets in the transmission window of functional layer  is not successful, functional layer  adds the unsuccessfully transmitted data packets back to the transmission window of functional layer  a given number of times until the data packet(s) are sent successfully. Accordingly, A shows the data packet being added back to the transmission window of functional layer  resulting in its successful transmission. As will be appreciated by one of ordinary skill in the art, functional layer  is not notified with regard to whether these individual attempts to send the data packet are successful or unsuccessful. After the successful transmission of the data packet in A, the Application Server  acknowledges the successful receipt of the data packet by sending a function layer- ACK message back to AT , A.","While the above-described data packet transmission process is ongoing at functional layer , functional layer  is not actually aware of the actions taking place at functional layer , and functional layer  simply monitors whether an ACK to the data packet requested for transmission in A has been received at functional layer . Accordingly, in A, functional layer  determines whether an ACK to the requested data packet from A has been received before the expiration timer expires. If functional layer  determines that the data packet has been successfully ACKed in A, the process advances to A. Otherwise, if functional layer  determines that the data packet has not been successfully ACKed in A, functional layer  infers transmission failure for the data packet, and issues another request to the transport layer protocol for transmitting the data packet again, A. In the embodiment of , the ACK in A is received after the expiration of the expiration timer, such that functional layer  has already determined that its data packet has not been ACKed successfully in A.","Accordingly, functional layer  receives the new request for the transmission of the data packet, and again adds the data packet to the transmission window of functional layer , A. At this point, the process returns to A and repeats for the new request for transmission of the data packet by functional layer . As will be appreciated, even though functional layer  has continued to attempt to send the data packet, functional layer  is only aware that the expiration timer has expired which triggers the new request for the data packet's transmission. This will then require functional layer  to send the data packet to the application server  twice (i.e., once for each packet transmission request issued by functional layer  in A).","In the embodiment of , when functional layer  determines that one of the data packets it has requested for transmission has been successfully ACKed by the application server  in A, functional layer  then determines whether more data is to be requested for transmission to the application server , A. If functional layer  determines to transmit more data to the application server  in A, the process returns to A and repeats for the transmission of one or more additional data packets. Otherwise, the process of  terminates, although the communication session of A could continue with AT  receiving data packets without sending data packets for a period of time.","An embodiment of the invention directed to a mechanism by which functional layer  and functional layer  can exchange information related to the status of a packet awaiting transmission at functional layer  will now be described with respect to .","Referring to , assume AT  sets up and begins participation in a communication session with at least one other session participant, B. Next, functional layer  requests that a new data packet for the communication session be sent to functional layer  for transmission to the application server  and then to the at least one other session participant, B. However, unlike , after requesting functional layer  to send the new data packet in B, functional layer  does not yet start the expiration timer that defines a time period during which functional layer  will wait for the ACK to the data packet.","Next, B through B of  generally correspond to A through A, respectively, of , and as such will not be described in further detail for the sake of brevity. After functional layer  successfully transmits the data packet to the RAN  on the physical-layer in B, the RAN  sends a layer -ACK to functional layer  of AT , B, after which functional layer  sends a notification message to functional layer  that indicates that the data packet requested for transmission in B has been transmitted from AT , B. For example, the notification message from functional layer  to functional layer  may be implemented as a call-back API. While not shown explicitly in , the notification of B can be performed for each data packet that has been requested for transmission by functional layer  when the respective data packets are transmitted from AT  at functional layer .","Functional layer  conventionally starts the expiration timer when functional layer  itself requests the data packet transmission, which does not take into account delays at functional layers  and\/or  before the data packet can be transmitted from AT . In the embodiment of , upon receiving the notification of data packet transmission at functional layer  in B, functional layer  starts the expiration timer in B, instead of when the data packet transmission request is issued in B. As will be appreciated by one of ordinary skill in the art, starting the expiration period at this later point in time reduces the chance that functional layer  will re-issue requests to transmit the same data packet due to delays at functional layers  and\/or  of AT  that occur prior to the transmission of the data packet. Also, throughput need not be degraded except in an edge scenario. Further, it will be appreciated that while the expiration timer started in B is shown as running for a shorter period of time than the expiration timer in A, the actual expiration periods for the times of A and B can be the same. However, because the expiration timer in B starts at a later point in time, the expiration timer of B can run for a shorter period because an ACK will be more quickly received subsequent to the start of the timer.","Turning back to functional layer , after the successful transmission of the data packet in B, the Application Server  acknowledges the successful receipt of the data packet by sending a layer- or SIP-layer ACK message back to AT , B.","In B, functional layer  determines whether an ACK to the requested data packet from B and transmitted from AT  at B has been received before the expiration timer expires. Again, the expiration timer in  starts after the notification of B instead of earlier when the actual data packet transmission request is issued from functional layer  at B, which generally means the expiration timer of  will grant the Application Server  a longer timer to ACK an initial data packet's transmission before a repeat-transmission is requested by functional layer . If functional layer  determines that the data packet has been successfully ACKed in B, the process advances to B. Otherwise, if functional layer  determines that the data packet has not been successfully ACKed in B, functional layer  infers transmission failure for the data packet, and issues another request to functional layer  for transmitting the data packet again, B. Functional layer  receives the new request for the transmission of the data packet, and again adds the data packet to the transmission window of functional layer , B. At this point, the process returns to B and repeats for the new request for transmission of the data packet. In the example of , it will be appreciated that the decision block of B evaluates to the ACK from the Application Server  being received within the expiration period based at least in part to functional layer  starting the expiration timer responsive to the notification of B instead of the transmission request of B.","Accordingly,  is one example embodiment the demonstrates how the number of unnecessary repeated data packet transmission requests from functional layer  can be reduced by implementing a mechanism by which functional layer  can notify functional layer  with regard to when a data packet transmission over the wireless or physical layer to the RAN  is successful. Accordingly, while  illustrate benefits associated with an early notification to functional layer  of the successful physical-layer transmission of a given data packet,  illustrate benefits associated with an early notification to functional layer  of the unsuccessful physical-layer transmission of a given data packet.","Referring to , assume AT  sets up and begins participation in a communication session (e.g., a streaming media session, a file-transfer session, etc.) with at least one other session participant, C. Next, functional layer  issues a request to functional layer  for transmission of a new data packet to the application server  and then to the at least one other session participant, C. After requesting functional layer  to send the new data packet, functional layer  starts an expiration timer having a given expiration period, as in A of . While the expiration timer is running, functional layer  waits to receive an ACK of the transmitted data packet, whereby functional layer  will infer that the transmission of the data packet was not successful if no ACK is received before the expiration timer expires, C.","Functional layer  receives the request for transmission of the new data packet and adds the data packet to a transmission window of functional layer , C, after which functional layer  instructs functional layer  to attempt to transmit all of the data packets that are currently scheduled in the transmission window of functional layer , C. Functional layer  receives the transmission order from functional layer , and then adds the data packets from the transmission window of functional layer  to its own transmission window, C. At C, functional layer  makes one or more attempts to transmit the data packets contained in the transmission window of functional layer . In C, when a transmission attempt of one of the data packets in the transmission window of functional layer  is not successful, functional layer  adds the unsuccessfully transmitted data packets back to the transmission window of functional layer  a given number of times until the data packet(s) are sent successfully the number of repeated transmission attempts exceeds a threshold. Accordingly, C shows an unsuccessful attempt to transmit the data packet to the application server, whereby the data packet is not sent successfully to the RAN .","Because the RAN  could not complete the transmission of the data packet to the application server , the RAN  sends a layer- negative ACK (NACK) to functional layer  of AT , C. Alternatively, an explicit NACK need not be sent by the RAN , in which case functional layer  will simply infer failure of the data packet's transmission on the physical layer after a threshold period of time without an ACK being received from the RAN  (i.e., ACK-timeout). However, while functional layer  receives the NACK-frame or infers packet-loss when no ACK is received, functional layer  does not notify functional layer  that the attempted transmission of the data packet has already failed.","In the embodiment of , while the above-described data packet transmission process is ongoing at functional layer , functional layer  is not actually aware of the actions taking place at functional layer , and functional layer  simply monitors whether an ACK to the data packet requested for transmission in C has been received at functional layer . Accordingly, in C, functional layer  determines whether an ACK to the requested data packet from C has been received before the expiration timer expires. If functional layer  determines that the data packet has been successfully ACKed in C, the process advances to C. Otherwise, if functional layer  determines that the data packet has not been successfully ACKed in C, functional layer  infers transmission failure for the data packet, and issues another request to functional layer  for transmitting the data packet, C. Functional layer  receives the new request for the transmission of the data packet, and again adds the data packet to the transmission window of functional layer , C. At this point, the process returns to C and repeats for the new request for transmission of the data packet.","As will be appreciated, even though functional layer  determined packet-failure or packet-loss in C (e.g., either from an explicit NACK or a failure to receive an ACK from the RAN ), functional layer  assumes the transmission failure only upon expiration of the expiration timer in C. Accordingly, relying upon the expiration timer in  caused an unnecessary repeat-transmission of the data packet when the ACK arrived late, and relying upon the expiration timer in  caused an unnecessary delay before ordering a repeat-transmission of the data packet when the transmission attempt actually fails.","Turning back to , when functional layer  determines that one of the data packets it has requested for transmission has been successfully ACKed by the application server  in C, functional layer  then determines whether more data is to be requested for transmission to the application server , C. If functional layer  determines to transmit more data to the application server  in C, the process returns to C and repeats for the transmission of one or more additional data packets. Otherwise, the process of  terminates, although the communication session of C could continue with AT  receiving data packets without sending data packets for a period of time.","An embodiment of the invention directed to a mechanism by which functional layers  and  can exchange information related to the status of a packet awaiting transmission at functional layer  will now be described with respect to .","Referring to , assume AT  sets up and begins participation in a communication session with at least one other session participant, D. Next, functional layer  requests that a new data packet for the communication session be sent to functional layer  for transmission to the application server  and then to the at least one other session participant, D. However, unlike , after requesting functional layer  to send the new data packet in D, functional layer  does not yet start the expiration timer that defines a time period during which functional layer  will wait for the ACK to the data packet.","Next, D through D of  generally correspond to C through C, respectively, of , and as such will not be described in further detail for the sake of brevity. If functional layer  was able to successfully transmit any data packets to the RAN  in B, functional layer  sends a notification message to functional layer  that indicates that the data packet requested for transmission in D has been transmitted from AT , D, similar to B of . However, soon after D, assume that the RAN  either sends a layer- NACK for the data packet to functional layer  of AT , or alternatively functional layer  infers packet-failure or packet-loss when the RAN  fails to ACK the data packet, D. In , the indication of packet-transmission failure at C resulted in the cessation of subsequent transmission attempts for the data packet. However, in , of indication of packet-transmission failure at D also results in a notification to functional layer  that the attempt to transmit the data packet, which was indicated to functional layer  in D, has failed in D. Similar to the notifications of B of  and\/or D of , the notification message from functional layer  to functional layer  in D may be implemented as a call-back API.","While not shown in , functional layer  can start the expiration timer upon receipt of the transmission-notification in D. However, upon the subsequent receipt of the notification of transmission-failure in D, functional layer  need not wait for this expiration timer to expire and rather can infer upon that the data packet requires re-transmission via the notification from functional layer .","Accordingly, responsive to the transmission-failure notification from functional layer , functional layer  issues another request to the functional layer  for transmitting the data packet, D (e.g., irrespective of whether an expiration timer corresponding to a period to refrain from re-issuing the data request transmission, or to wait for the ACK, has expired). Functional layer  receives the new request for the transmission of the data packet, and again adds the data packet to the transmission window of functional layer , D. Functional layer  then instructs functional layer  to attempt to transmit all of the packets in the transmission window of functional layer , D. Functional layer  receives the transmission order from functional layer , and then adds the data packets from the transmission window of functional layer  to its own transmission window, D. At D, assume that functional layer  successfully transmits the data packet to the RAN , and that the RAN  successfully forwards the data packet to the application server . Accordingly, the Application Server  acknowledges the successful receipt of the data packet by sending a layer- ACK message back to AT , D.","Upon receiving the ACK, functional layer  determines whether to transmit another data packet, D. If functional layer  determines to transmit another data packet, the process returns to D. Otherwise, if functional layer  determines not to transmit another data packet in D, the process of  terminates, although the communication session of D could continue with AT  receiving data packets without sending data packets for a period of time.","While not shown explicitly in  in order to simplify the signaling diagram, it will be appreciated that the repeated attempt to transmit the data packet between D and D could also be associated with the notifications of D and D, as appropriate. These notification messages are omitted for clarity, but it will be appreciated that a transmission-notification could be sent from functional layer  to functional layer  after D, for example, which could result in the expiration timer being started at functional layer .","In a further example, referring to , when using Enhanced Multi-flow Packet Application, the RLP layer (e.g., functional layer ) performs the framing and de-framing of maximum transmission units (MTUs). If an RLP NACK is received at functional layer , the RLP layer upon retransmitting the packet a threshold number of times can indicate to the higher layer (e.g., functional layer ) whether the MTU was transmitted successfully or not (e.g., as in B of  or D of ). In case RLP NACKs are disabled but a MTU is fragmented over multiple RLP packets which are further segmented over Physical Layer packets, then the loss of a segment can be inferred by Physical Layer NACKs. A RLP packet can be inferred as successful based on these Physical Layer NAKs. However, if even one of the physical layer segments is completely lost, then the MTU is lost and this information can be utilized by the higher layer to invoke retransmission of the MTU (e.g., in other words, a NACK or packet transmission-failure to any packet \u2018segment\u2019 can be used to infer a failure of the transmission of the whole packet). Similar procedures can be accomplished in WCDMA physical layers if the loss is deduced by the RLC layer. Accordingly, the NACK or packet-transmission failure of D could be a NACK or packet-transmission failure to any particular segment.",{"@attributes":{"id":"p-0112","num":"0111"},"figref":["FIG. 6A","FIG. 6A"],"b":["170","1","2","600","170","1","2","605","600","605"]},"Further assume, at this point, that AT  is positioned in a relatively \u2018fast\u2019 network that is capable of supporting AT 's real-time media transmissions for the first session (i.e., the streaming communication session) and is also capable of concurrently supporting AT 's packet transmissions at a given payload-size for the second session (i.e., the file-transfer session).","Accordingly, AT  transmits streaming packet # for the first session, A, and AT  then transmits data packet # for the second session, A and A. AT  then transmits streaming packet # for the first session, A, and AT  then transmits data packet # for the second session, A and A. AT  then transmits streaming packet # for the first session, A.","Below, references are made to a \u2018lower\u2019 data-rate environment and a \u2018higher\u2019 data-rate environment. As will be appreciated, based on the type of data being transferred (and how much data is being simultaneously or concurrently transferred), there is some expectation of time for the user to have a \u2018good\u2019 user experience. In this case, a nominal data rate can be determined whereby most users would be expected to consider their experience-level to be satisfactory. The nominal data-rate can vary between different network technologies (e.g., EV-DO, LTE, WiFi, etc.) and also can even vary based on individual user-performance expectations and\/or other factors. Accordingly, as used herein, a lower data-rate environment is associated with a lower expected or actual data-rate as compared to a higher data-rate environment. Also, as used herein, the lower-data rate environment is associated with an actual or expected data rate that is lower than the relevant nominal data-rate, and the higher-data rate environment is associated with an actual or expected data rate that is greater than or equal to the relevant nominal data-rate.","At this point, assume that AT  transitions to a lower data-rate environment (e.g., via a handoff from an EV-DO to a 1x system, due to a deterioration in network conditions without a handoff to another network, due to the same physical-channel resources being shared by multiple sessions or applications, etc.), A. Accordingly, AT  still sends data packet # for the second session as scheduled, A, and the application server  sends data packet # to AT , A. However, due to the lower data-rate environment, the transmission of data packet # takes a longer amount of time and overlaps, in part, with the slot during which streaming packet # for the first session. Accordingly, streaming packet # for the first session is dropped or delayed in A during its scheduled slot so that data packet # for the second session can complete its transmission. Streaming packet # for the first session is then re-scheduled for transmission for a slot after the transmission of data packet # for the second session in A.","As will be appreciated, in , even though the first session is generally more susceptible delays in packet-transmission, the lower data-rate environment causes the transmission of data packet # to delay the transmission of the next streaming packet for the first session. For example, because functional layer  already has a certain number of packets in its transmission queue, it can be difficult to maintain packets of the first session prioritized over packets of the second session begin the second session's packets are already in the queue.","Accordingly,  illustrates an embodiment of the invention whereby the size of data packets for non-streaming sessions, such as file-transfer sessions, are dynamically modified such that delays to packet transmissions of real-time or streaming sessions are reduced and\/or avoided entirely. Referring to , B through B substantially correspond to A through A of , respectively, and as such will not be described further for the sake of brevity.","In B, AT  detects that it has transitioned to a lower data-rate environment (e.g., in A, AT  does not necessarily make this detection during the transition). In an example, the detection of the lower data-rate environment can correspond to entering a 1x, General Packet Radio Service (GPRS), an Evolution-Data Optimized (EV-DO) Rel. 0 Network or Rev. A network with QoS not available to the handset, etc.","After transitioning to a lower data-rate environment in B, AT  dynamically reduces the size of the data payload within packets for the second session, B. For example, the payload-size reduction of B can be calculated based on a network to which AT  has transitioned (e.g., a first payload-size is used for file-transfer sessions over EV-DO networks, a second payload-size is used for file-transfer sessions over 1x networks, etc.). Alternatively, the payload-size reduction of B can be calculated based on any other type of estimation for the lower data-rate environment such that data packets of the second session will not cause delays or rescheduling of the streaming data packets of the first session. Alternatively, the application server  can calculate the size that can be allocated to the next data packet without incurring delays to the next streaming data packet, and the application server  can convey the acceptable data-packet size to AT  (e.g., in an ACK packet, etc.).","Accordingly, AT  transmits data packet #for the second session, B and B. As noted above, the payload-portion of data packet #is smaller than the payload-portions of data packets # and\/or # of B and B and\/or B and B. Next, AT  transmits streaming packet # for the first session, B. Unlike B and B, the streaming packet # for the first session can be sent on time and as a full-payload packet because packets for the second session instead of the first session are reduced in order to conform to AT 's lower data-rate environment. The sessions continue whereby AT  transmits data packet #for the second session with the reduced payload-portion, B and B, and then AT  transmits another streaming data packet #, B, without rescheduling and at a full data-rate.","Accordingly, by prioritizing a streaming communication session over a file-transfer session, AT  can reduce the occurrence of rescheduling or delaying real-time packets for the streaming communication session in the event that AT  transitions to a lower data-rate environment.","Further, while  illustrates a particular example whereby AT  transitions from a high data-rate environment or network to a low data-rate environment or network, it will be appreciated that  is more broadly representative of a dynamic rate control algorithm (DRCA). For example, the DRCA can schedule high priority, delay-sensitive streamed data at regular intervals (per the cadence of the application, as in the first session of ) and can transmit non-QoS data (e.g., the second session in ) in a volume-regulated manner in the time interval between successive transmissions of the streamed data. For example, depending on the network type, the amount of data of the non-QoS application can be limited to a fixed value.","Alternatively, the amount of data of the non-QoS application (i.e., the second session from ) can be adjusted in every successive time-interval based on one adaptive or probing algorithms such as starting with a conservative value, increasing the MTU size if the voice\/QoS packet is not impacted by the delay and reducing the amount of data transmitted if the voice packet is impacted by some delay. E.g., learning algorithms such as reward-penalty algorithms can be used. In another alternative example, the amount of data of the non-QoS application (i.e., the second session from ) can be adjusted in every successive time-interval based on precise information functional layer  with regard to the number of slots required to transmit QoS streaming data as well as past non-QoS streaming data, in which case the amount of data scheduled for the next time-interval can be calculated by the handset (e.g., or the application server , which can then convey this information to the handset or AT ).","Thus,  explicitly shows data payload \u2018reduction\u2019 upon entry into a lower data-rate environment. In an alternative example,  could be modified to accommodate an AT that transitions from the lower data-rate environment to a higher-data rate environment. In this alternative example, the payload is increased upon entry into the higher data-rate environment and many different mechanisms of computing the actual payload for the next non-QoS packet could be used.  illustrates another conventional mechanism of supporting a file-transfer session concurrently with a streaming or real-time communication session. In particular,  is similar in some respects to , except the target AT  transitions to the lower data-rate environment instead of the transmitting AT . Referring to , C through C substantially correspond to A through A of , respectively, and\/or B through B of , respectively, and as such will not be described further for the sake of brevity.","At this point, assume that AT  transitions to a lower data-rate environment (e.g., via a handoff from an EV-DO to a 1x system, due to a deterioration in network conditions without a handoff to another network, etc.), C. Accordingly, AT  still sends data packet # for the second session as scheduled, C, and the application server  begins the transmission of data packet # to AT , C. Before data packet # completes its transmission to AT , AT  sends streaming packet # for the first session to the application server  for transmission to AT . The application server  delays the forwarding of the streaming packet # to AT , C. In other words, due to the lower data-rate environment of AT , the transmission of data packet # from the application server  to AT  takes a longer amount of time and overlaps, in part, with the slot during which streaming packet # for the first session is scheduled. Accordingly, streaming packet # for the first session is delayed in C. Streaming packet # for the first session is then re-scheduled for transmission for a slot after the transmission of data packet # for the second session in C.","As will be appreciated, in , even though the first session is generally more susceptible to delays in packet-transmission, the lower data-rate environment causes the transmission of data packet # to delay the transmission of the next streaming packet for the first session.","Accordingly,  illustrates an embodiment of the invention whereby the size of data packets for downlink non-streaming sessions, such as file-transfer sessions, are dynamically modified at the application server  and\/or the RAN  such that delays to packet transmissions of real-time or streaming sessions are reduced and\/or avoided entirely. Referring to , D through D substantially correspond to C through C of , respectively, and as such will not be described further for the sake of brevity.","Referring to , after AT  transitions to the lower data-rate environment in D, the application server  detects AT 's transition to the lower data-rate environment, D. For example, the detection at the application server  of AT 's transition to the lower data-rate environment can correspond to (i) a notification from AT  or the RAN  regarding AT 's current data-rate environment, (ii) a detection of performance degradation of the application server 's connection to AT , (iii) a report of AT 's current location, where the application server  has knowledge of data-rates associated with particular geographic regions or serving areas, and\/or (iv) any other mechanism by which the application server  can infer performance characteristics of its link or connection to AT .","Upon determining that AT  has transitioned to a lower data-rate environment in D, the application server  reduces the payload of the individual data packets that the application server  is forwarding to AT  for the second session, D. For example, the payload-size reduction of D can be calculated based on a network to which AT  has transitioned (e.g., a first payload-size is used for file-transfer sessions over EV-DO networks, a second payload-size is used for file-transfer sessions over 1x networks, etc.). Alternatively, the payload-size reduction of D can be calculated based on any other type of estimation for the lower data-rate environment such that data packets of the second session will not cause delays or rescheduling of the streaming data packets of the first session. Alternatively, AT  can calculate the size that can be allocated to the next data packet without incurring delays to the next streaming data packet, and AT  can convey the acceptable data-packet size to the application server  (e.g., in an ACK packet, etc.).","Accordingly, AT  transmits data packet # for the second session with a normal or full-sized payload portion, D. Upon receiving data packet # from AT , the application server  reduces the payload-size of data packet # to generate data packet #having a reduced payload-portion, while buffering any data-payload that was excluded from data packet #. The application server  then sends data packet #to AT , D. Next, AT  transmits streaming packet # for the first session to the application server , D, and the application server  is able to send the streaming packet # to AT  without incurring the delays shown in  because the RAN  is able to transmit data packet #more quickly due to its decreased payload size, D. In D, the application server  transmits data packet #for the second session with the reduced payload-portion.","Accordingly, by prioritizing a streaming communication session over a file-transfer session, the application server  can reduce the occurrence of rescheduling or delaying real-time packets for the streaming communication session in the event that the target AT  transitions to a lower data-rate environment.","Further, while  illustrates a particular example whereby AT  transitions from a high data-rate environment or network to a low data-rate environment or network, it will be appreciated that  is more broadly representative of a dynamic rate control algorithm (DRCA). For example, the DRCA can schedule high priority, delay-sensitive streamed data at regular intervals (per the cadence of the application, as in the first session of ) and can transmit non-QoS data (e.g., the second session in ) in a volume-regulated manner in the time interval between successive transmissions of the streamed data. For example, depending on the network type, the amount of data of the non-QoS application can be limited to a fixed value.","Alternatively, the amount of data of the non-QoS application (i.e., the second session from ) can be adjusted in every successive time-interval based on one adaptive or probing algorithms such as starting with a conservative value, increasing the MTU size if the voice\/QoS packet is not impacted by the delay and reducing the amount of data transmitted if the voice packet is impacted by some delay. For example, learning algorithms such as reward-penalty algorithms can be used. In another alternative example, the amount of data of the non-QoS application (i.e., the second session from ) can be adjusted in every successive time-interval based on precise information with regard to the number of slots required to transmit QoS streaming data as well as past non-QoS streaming data, in which case the amount of data scheduled for the next time-interval can be calculated by the application server  (e.g., or the handset, which can then convey this information to the application server ). Thus, while  explicitly shows data payload \u2018reduction\u2019 upon entry into a lower data-rate environment, the manner in which the data payload is adjusted in other embodiments could increase the payload (e.g., upon entry into a higher data-rate environment) and many different mechanisms of computing the actual payload for the next non-QoS packet could be used.","Also, while  illustrates the application server  performing the dynamic payload reduction for the non-QoS or non-real-time session, it will be appreciated that these operations can be performed by AT 's RAN  in other embodiments of the invention. In this case, the application server  would forward the data packets for the first and second sessions to the RAN , where the RAN  would be responsible for dynamically reducing the payload size of the streaming packets to ensure that the transmission of the non-streaming packets does not incur delays to the streaming session.",{"@attributes":{"id":"p-0136","num":"0135"},"figref":["FIG. 7A","FIG. 7A","FIG. 7A"],"b":["170","1","2","700","170","1","2","705","700","705","1","2","2","1","1","2"]},"Accordingly, AT  voice packet # (\u201cHello, How\u201d) for the first session, A, and AT  then transmits data packet # for the second session, A and A. AT  then transmits voice packet # (\u201cAre You\u201d) for the first session, A, and AT  then transmits data packet # for the second session, A and A. AT  then transmits voice packet # (\u201cDoing Today?\u201d) for the first session, A, and AT  then transmits data packet # for the second session, A and A.","At this point, assume that a user of AT  stops talking into a microphone of AT . As such, AT  transmits a silence packet as voice packet #, where a silence packet corresponds to a voice packet that only includes silence frames, A. Silence packets include a relatively small data payload and generally contain only background \u2018comfort\u2019 noise, but are treated on the network with the same QoS as a \u2018real\u2019 voice packet. As will be appreciated, in the concurrent voice and media context, these silence packets are packets where data for the file-transfer session or second session could have been sent instead. Thereafter, AT  sends data packet # for the second session, A and A, and eventually AT  responds to AT 's question by responding with its own voice response packet # (\u201cGood.\u201d), A.","As will be appreciated, in , AT  sends its silence packet even though little to no actual voice-data is contained therein. Accordingly, for concurrent sessions where a file-transfer is taking place at the same time that a voice (or other multimedia) session is taking place, silence packets can be suppressed and data packets for the file-transfer session can be sent in their place, as will be described next with respect to .","Accordingly,  illustrates an embodiment of the invention whereby silence frames for a streaming multimedia session are suppressed and an increased number of data packets for a low-QoS or non-QoS file-transfer session are transmitted. Referring to , B through B substantially correspond to A through A of , respectively, and as such will not be described further for the sake of brevity.","After transmitting data packet # for the second session in B, AT  determines that the next queued streaming voice packet corresponds to a silence packet, B. As used herein, a silence packet can correspond to a series of silence frames. For example, if a series of silence frames amounting to a threshold time period (e.g., 100 ms) of silence is detected in B, this may constitute detection of a silence packet, because a next voice packet (e.g., RTP packet) will only include silence frames and will not include actual voice data (i.e., noise). In an example, EV-DO protocols specify 20 ms per silence frames, in which case AT  can count the number of 20 ms frames to be included in the next voice packet, and if each of these 20 ms frames are silence frames, AT  determines that the next voice packet is a silence packet.","Further, silence frames can be relatively easy to detect because each silence frame is generally constructed in a standard fashion. Accordingly, AT  can compare each voice frame with a predetermined silence frame. By storing a single silence frame to use as a template, AT  can compare the template silence frame with its queued voice-packets to determine whether a particular voice-packet is carrying a silence frame.","After determining that the next queued streaming voice packet corresponds to a silence packet in B, AT  suppresses the silence-packet and schedules the next queued data-packet for the second session in the slot that was to carry the silence packet or voice packet #, B. AT  then transmits the next queued data-packet (i.e., data packet #) for the second session in the slot that was initially scheduled for voice packet # of the first session, B. AT  receives the unexpected data packet # in B and interprets the consecutive receipt of non-streaming or non-voice data packets for the second session as an indication that AT  suppressed a silence packet for the first session, and thereby plays \u2018comfort\u2019 noise as AT  would have if AT  had actually transmitted the silence packet including the series of silence frames, B.","AT  then transmits data packet # for the second session in the slot initially scheduled for transmission of data packet # before data packet # replaced the silence packet, B. At some later point in time, AT  responds to AT 's question by responding with its own voice response packet # (\u201cGood.\u201d), B. Accordingly, by suppressing silence packets when a streaming communication session is conducted concurrently with a file-transfer session, data packets for the file-transfer session, which typically have a lower-priority than voice packets of the streaming session, are sent in their place.",{"@attributes":{"id":"p-0145","num":"0144"},"figref":["FIG. 7C","FIG. 7C","FIG. 7B","FIG. 7C","FIG. 7A","FIG. 7B"],"b":["170","1","700","736","700","736","700","736"]},"Referring to , after transmitting data packet # for the second session in C and C, AT  transmits voice packet # to the application server  for the first session, C. In the embodiment of , it may be assumed that voice packet # corresponds to a silence packet that includes a given number of silence frames. The application server  receives and evaluates voice packet # and determines that voice packet # is a silence packet, C. After determining that the next streaming voice packet # corresponds to a silence packet in C, the application server  suppresses the silence-packet and determines to schedule the next packet received from AT  for AT  (e.g., either a data packet for the second session or non-silence packet for the first session) instead of sending voice packet #, C.","Accordingly, AT  then transmits the next queued data-packet (i.e., data packet #) for the second session to the application server , C. In this example, data packet # is sent in its scheduled slot with no change at AT . The application server  receives data packet # and forwards data packet # to AT  in the slot that was initially scheduled for voice packet # of the first session, C. AT  receives the unexpected data packet # and interprets the consecutive receipt of non-streaming or non-voice data packets for the second session as an indication that the application server  suppressed a silence packet for the first session, and thereby plays \u2018comfort\u2019 noise as AT  would have if AT  had actually transmitted the silence packet including the series of silence frames, C.","At some later point in time, AT  responds to AT 's question by responding with its own voice response packet # (\u201cGood.\u201d), C. Accordingly, by suppressing silence packets when a streaming communication session is conducted concurrently with a file-transfer session, data packets for the file-transfer session, which typically have a lower-priority than voice packets of the streaming session, are sent in their place by the application server .",{"@attributes":{"id":"p-0149","num":"0148"},"figref":["FIG. 8A","FIG. 8A","FIG. 8A"],"b":["170","1","2","800","1","800","1","1","2","805","806","170","1","809","2","1","2","1","170","810","1","815","816","820","821"]},"At this time, because AT  has transmitted all of its packets for the file-transfer session to AT , AT  stops transmitting data in A. However, also in A, because AT  has not yet received ACKs to all of its transmitted data packets (i.e., data packets N\u22121 and N), AT  retains its TCH because there is a possibility a NACK will be received for data packet N\u22121 and\/or data packet N (or an ACK-timeout), in which case a packet retransmission will be required. The application server  ACKs data packets N\u22121 and N in A, after which AT  tears down the TCH, A. In this example, assume that AT  eventually also sends ACKs for both data packets N\u22121 and N, A.","As will be appreciated, in the event that data packets N\u22121 and N are ACKed as shown in , AT  unnecessarily holds onto its TCH for longer than is actually necessary for the file-transfer session. Also, in the event that a retransmission of data packets N\u22121 and\/or N is required, the period from the initial transmission of these data packets to their eventual retransmission corresponds to \u2018wasted\u2019 time during which AT  has a TCH but is not actually transmitting data, as will be described next with respect to .  another conventional process focuses on the signaling between AT  and the application server  at the end of a file-transfer session, and as such signaling between AT  and the application server  is shown via a dotted line.","Referring to , B through B substantially correspond to A through A of , respectively, and as such will not be described further for the sake of brevity. After receiving ACKs for data packets  . . . N\u22122, AT  attempts to transmit data packet N\u22121, B, and data packet N, B (e.g., although some of the ACKs from B could actually be received after one or more of these transmission attempts). In the embodiment of , assume that the transmission attempts of both data packet N\u22121 and N fail in B and B, respectively.","In B, as in A of , AT  stops transmitting data and retains its TCH. Next, the application server  sends NACKs for data packets N\u22121 and N to AT , B. Also, after a given period of time, AT  also determines to send NACKs for data packets N\u22121 and N to the application server , B, and the NACKs are sent from AT  to the application server  in B. Accordingly, AT  re-transmits data packets N\u22121 and N in B and B, and B and B, respectively. The application server  ACKs data packets N\u22121 and N from AT , B, after which AT  can tear down the TCH, B. AT  also ACKs data packets N\u22121 and N that are successfully received at AT  from the application server , B.","As will now be described with respect to , embodiments of the invention are directed to an opportunistic or preemptive re-transmission of data packets during periods where a transmitting AT has a TCH and is not transmitting data. , similar to , each focus on the signaling between AT  and the application server , and as such signaling between AT  and the application server  is shown via a dotted line.","Referring to , C through C substantially correspond to A through A of , respectively, and as such will not be described further for the sake of brevity. After transmitting data packets N\u22121 and N in C and C, respectively, instead of simply holding onto the TCH and waiting for an ACK or a NACK from AT , AT  maintains its TCH and determines to preemptively re-transmit data packets N\u22121 and N before ACKs or NACKs to these data packets are actually received, C.","Accordingly, AT  re-transmits data packets N\u22121 and N to the application server  in C and C, and the application server  forwards data packets N\u22121 and N to AT  in C and C, respectively. The application server  ACKs data packets N\u22121 and N, C, after which AT  can tear down the TCH, C. Also, AT  ACKs data packets N\u22121 and N to the application server , C. It will be appreciated that the ACKs received in C at AT  can be either for the initial transmission of data packets N\u22121 and N in C through C, or for the re-transmission of data packets N\u22121 and N in C through C (or some combination, where at least one ACK is for an initial transmission and at least one ACK is for a re-transmission).","Further, while  shows a single re-transmission of data packets N\u22121 and N, it will be appreciated that AT  can simply continue to re-transmit data packets N\u22121 and N until an ACK or NACK is received from the application server , or for a given number of times (e.g., three retransmissions, etc.). Further, while  is directed to an example where re-transmissions are performed for the last two data packets in a stream of data packets for a file-transfer session (i.e., data packets N\u22121 and N), other embodiments can perform the above-described preemptive packet retransmission(s) for different numbers of packets, such as the last three packets, the last four packets, only the last packet, etc.","Referring to , D through D substantially correspond to B through B of , respectively, and as such will not be described further for the sake of brevity. After unsuccessfully attempting to transmit data packets N\u22121 and N in D and D, respectively, instead of simply holding onto the TCH and waiting for an ACK-timeout or a ACK or a NACK from the application server , AT  maintains its TCH and determines to preemptively re-transmit data packets N\u22121 and N before ACKs or NACKs, D.","Accordingly, AT  re-transmits data packets N\u22121 and N to the application server  in D and D, and the application server  forwards data packets N\u22121 and N to AT  in D and D, respectively. At some later point in time, assume that AT  receives ACKs for data packets N\u22121 and N from the application server , D (e.g., in an example, NACKs to earlier transmissions of data packets N\u22121 and N from D and D may also be received at AT , but it is assumed in this case that one of the retransmissions is successfully sent to the application server ). It will be appreciated that the ACKs received in D at AT  are for the re-transmission of data packets N\u22121 and N in D and D (e.g., because the initial transmissions of these data packets is assumed to be unsuccessful). At this point, AT  can tear down the TCH, D. At some later point in time, AT  can also ACK its receipt of data packets N\u22121 and N to the application server , D.","Further, while  shows a single re-transmission of data packets N\u22121 and N, it will be appreciated that AT  can simply continue to re-transmit data packets N\u22121 and N until an ACK-timeout is determined or an ACK or NACK is received from the application server , or for a given number of times (e.g., three retransmissions, etc.). Further, while  is directed to an example where re-transmissions are performed for the last two data packets in a stream of data packets for a file-transfer session (i.e., data packets N\u22121 and N), other embodiments can perform the above-described preemptive packet retransmission(s) for different numbers of packets, such as the last three packets, the last four packets, only the last packet, etc.","Further, while  each show examples by which a preemptive re-transmission of data packets occurs near the expected end-point of a file-transfer session, it will be appreciated that other conditions could be used to trigger a preemptive re-transmission of packets where a TCH is maintained by an AT and is not used continuously. For example, the sender could be measuring the exact network conditions and, if the network conditions are determined to be poor and it is more likely that there is loss, then the sender can optimistically retransmit the last window of packets. Alternatively, the sender (i.e., AT ) could employ a given type of \u2018learning\u2019 algorithm that measures how many packets were lost over the course of the connection (available from ACK and retransmits) and makes an educated guess as to when to perform preemptive retransmissions. The learning algorithm could be even more complicated and extend to the life of particular calls to particular targets, location, time of the day, etc. In an example, not only could the learning algorithm predict when to preemptively retransmit data packets, but the learning algorithm could also predict the order or which packets to retransmit based on the likelihood of loss.",{"@attributes":{"id":"p-0162","num":"0161"},"figref":["FIG. 8E","FIGS. 8C and 8D","FIG. 8E","FIG. 8E"],"b":["170","1","2","170","1","170"]},"Referring to , E through E substantially correspond to D through D of , respectively, and as such will not be described further for the sake of brevity. Unlike , in  and E, AT  successfully sends data packets N\u22121 and N to the application server . However, the application server  is unable to successfully transmit data packets N\u22121 and N to AT  in E and E, respectively.","The application server  ACKs data packets N\u22121 and N in E, after which AT  can tear down its TCH, E. In E, instead of simply forwarding one instance of data packets N\u22121 and N, the application server  determines to preemptively re-transmit data packets N\u22121 and N before ACKs or NACKs to these data packets are actually received from AT . In an example, the determination of E can be based on the application server 's knowledge that data packets N\u22121 and N correspond to the last two packets for the communication session, in an example.","Accordingly, the application server  re-transmits data packets N\u22121 and N to AT  in E and E, respectively. At some later point in time, assume that the application server  receives ACKs for data packets N\u22121 and N from AT , E. At this point, the application server  can stop its re-transmission of data packets N\u22121 and N (if the application server  has not done so already), E.","Further, while  shows a single re-transmission of data packets N\u22121 and N, it will be appreciated that the application server  can simply continue to re-transmit data packets N\u22121 and N until an ACK or NACK is received from AT , or for a given number of times (e.g., three retransmissions, etc.). Further, while  is directed to an example where re-transmissions are performed for the last two data packets in a stream of data packets for a file-transfer session (i.e., data packets N\u22121 and N), other embodiments can perform the above-described preemptive packet retransmission(s) for different numbers of packets, such as the last three packets, the last four packets, only the last packet, etc.","Embodiments of content-based processes will now be described with respect to . As used herein, in the context of a display on an AT, a window corresponds to object(s) configured to be viewable on the display and is associated with a particular application executing on the AT. For example, assume that the AT corresponds to a cellular telephone, the AT is executing a mobile web browsing application and a particular web-page is being displayed to the user on the display. In this case, the window corresponds to a graphical construct used by the mobile web browsing application to present the particular web-page to the AT's user on the display. While windows as used herein are configured to be viewable on the display of the AT, it will be appreciated that each window need not be viewable on the display of the AT at all times. For example, a particular window that would otherwise be viewable on the display of the AT may be minimized or overlapped by another window and thereby, for a period of time, would not be viewable on the display of the AT.","In another example, different windows on a display of an AT can be associated with different objects that a user of the AT has requested for download. In the case of the mobile web browsing application, the different objects can include a set of objects to be displayed and\/or presented to the AT's user in association with the particular web page of the window. However, less than all of these windows may be \u2018active\u2019 at a given time. For example, a given user of the AT can request that four (4) different websites be loaded on the AT via the mobile web browsing application, but the given user can set one of the four websites to an \u2018active\u2019 or viewable status on the AT. Alternatively, multiple windows can be viewable but one particular window is presented more prominently than the others (i.e., the \u2018active\u2019 window, such as when the active window is completely viewable on the display of the AT and other windows are partially and\/or fully overlapped by or covered up by the active window). As will be appreciated, this suggests that the user is interested in viewing the active website before the other websites. However, the server from which the objects of the four websites are downloaded conventionally is unaware of which window the given user has established as active. Accordingly,  illustrates a process of selectively downloading file objects to an AT in accordance with a content-based priority scheme in an embodiment of the invention.","Referring to , a given AT (\u201cAT \u201d) receives one or more user requests to download multiple objects, A. In an example, the request(s) of A can correspond to a user of AT  requesting the download, or a message received from AT  that indicates a user of AT  is requesting to send the multiple objects to AT , or a combination thereof. As noted above, the request of A could correspond to a request to load content associated with different websites in multiple windows of a web-browser. In A, AT  determines which window on AT  is currently \u2018active\u2019. As noted above, an \u2018active\u2019 window can correspond to which browser window (or windows) is most prominently on AT , as opposed to \u2018hidden\u2019 windows that are not currently selected by a user of AT . Next, AT  determines at least one of the multiple objects from A to be associated with the current active window, A. For example, if the user requests in A to load a sports web-site and also to load a news-website, and a window in which the sports web-site is to be displayed is most prominently displayed on AT , then the files or objects determined to be associated with the current active window in A are the objects associated with the sports web-site.","In A, AT  configures one or more download requests to request a download of the multiple objects from the application server , and further configures the request(s) to indicate which objects are associated with the current active window of AT , A. As will be appreciated, the indication of which objects are associated with the current active window of AT functions to prioritize the associated objects over the non-associated objects. In A, AT  sends the configured request(s) to the application server , A. The application server  then forwards the configured request to AT , A. Responsive to the configured request(s) received in A, AT  begins sending the multiple objects to AT  in accordance with the object priorities indicated in the configured request(s) that was forwarded to AT  in A, A. For example, AT  can provide objects that are associated with AT 's current active window first, followed by non-associated objects. Likewise, the application server  receives the objects from AT  in A, and then begins to provide the multiple objects to AT  in accordance with the object priorities of the configured request(s), A.","During the download of the multiple objects, AT  determines whether its current active window has changed, A. If not, AT  determines whether the download is complete, A. If the download completes, the process returns to A where AT  waits for a next object download request. Otherwise, if the current active window has not changed and the download is not yet complete, AT  continues to monitor the download of the multiple objects. However, if AT  determines its current active window has changed in A (e.g., if a user transitions AT  to a different active window), then AT  determines at least one of the multiple objects from A to be associated with its new current active window, A.","In A, AT  configures one or more supplemental download requests to request a download of the multiple objects from the application server , and further configures the supplemental request(s) to indicate which objects are associated with AT 's new current active window. In A, AT  sends the configured supplemental request(s) to the application server . Responsive to the configured supplemental request(s) received in A, the application server  updates the download priority for providing the multiple objects to AT  from the application server  and also updates the upload priority by which AT  uploads the multiple objects to the application server  (e.g., at least for 1-to-1 communication sessions between AT  and AT  only), A. Also in A, the application server  can send a message to AT  that requests AT  modify its upload order to conform with the new or updated object priorities based on AT 's window-change. In an example, the upload and download orders or priorities can be set to be the same. For example, for files A, B, C and D, the download order may be [A,B,C,D] and the upload order may also be [A,B,C,D]. In an alternative embodiment, however, the upload and download orders need not be the same. For example, the download order may be [A,B,C,D] and the upload order may be [A,C,D] if file B is already accessible at the application server .","Thereafter, the AT  continues to send the multiple objects to the application server  in accordance with the object priorities indicated in the configured supplemental request(s), and the application server  likewise continues to send the multiple objects to AT  in accordance with the object priorities indicated in the configured supplemental request(s).","As will be appreciated,  describes a process by which a user's content priorities are inferred based on which window the user has set to be active, and the inferred user-priority is then conveyed to the download server (or application server ). In another example, the user can explicitly establish its priorities for downloading objects, such that inferring a user's expected priorities from the behavior of the user need not be performed.","As such, referring to , AT  receives a set of user-specified object download priorities, B. The set of user-specified object download priorities could be configured in a number of different ways.","For example, the set of user-specified object download priorities could be configured to prioritize certain mime types over other mime types (e.g., to prioritize text over graphical images, to prioritize video over audio, to prioritize audio over graphics, etc.). For example, AT  can track a frequency at which objects with a plurality of different mime types have been downloaded historically, and can then allocate a higher priority to more-frequently downloaded mime types. In another example, a z-index of different layers using cascading style sheets (CSS) can be generated, as is popular with many websites, whereby the z-index can convey the priority within a given page. Thus, if a particular website is a music-related website, audio may be prioritized over other forms of media (e.g., text, images, video, etc.). In another example, if a particular website is related to graphic still images or art, then images may be prioritized over other forms of media (e.g., text, audio, etc.). In a further example, the z-indices of different websites may be used to establish priorities between the websites, such that if AT  is attempting to load multiple websites at the same time the objects of the respective websites can be downloaded in accordance with their relative priority levels.","In another example, a webpage that includes CSS elements (e.g., a background template, navigation bars, body text, and\/or other javascript widgets) could organize the z-index in a particular order (e.g., body text, navigation bars, background template, and javascript widgets, in order) to enhance the user experience.","In another embodiment, the set of user-specified object download priorities could be to prioritize files for certain applications over other applications. In an example, the type of application may be indicative of its importance or urgency, such that the more important or more urgent application is given priority, such that a web-browsing session is prioritized over a passive OS update, for example. In another example, AT  may track information related to how frequently applications are used or executed. The historical usage information for the applications can then be used to establish relative priorities among the applications, such that more frequency used applications are prioritized over less frequency used applications.","In another example, each time a user of AT  requests a file download (e.g., each time a user navigates and clicks on a URL, etc.), a time stamp associated with the file download request can be stored at AT . The relative times at which the user of AT  requests respective file downloads can then be used to establish relative priorities between the file downloads. For example, more recently initiated file download requests can be prioritized over earlier or older file download requests. At some later point in time, AT  receives one or more user requests to download multiple objects, B. The request of B could correspond to a request to load content associated with one or more websites, in an example, or to receive a file transfer from another AT during a communication session. In B, AT  configures one or more download requests to request a download of the multiple objects from the application server , and further configures the request(s) to indicate which the set of user-specified object download priorities from B. In B, AT  sends the configured request(s) to the application server , B. The application server  then forwards the configured request to AT , B. Responsive to the configured request(s), AT  begins sending the multiple objects to the application server  in accordance with the set of user-specified object download priorities indicated in the configured request(s), B, and the application server  likewise sends the multiple objects to AT  in accordance with the object priorities indicated in the configured request(s), B. As will be appreciated, from the perspective of AT , the object priorities can be construed as an upload priority instead of a download priority. In any case, the order in which files are uploaded form AT  is maintained consistent with the order in which files are downloaded to AT  from the application server .","In another embodiment, with respect to , AT  may be representative of a plurality of ATs that are receiving objects from AT . In this case, it will be appreciated that not all of the plurality of ATs may be permitted to affect the file-order in which AT  is transmitting the objects to the plurality of ATs. In an example, the application server  may forward the first-requested user-specified object download priority from the plurality of ATs, and may thereafter deny later-requested user-specified object download priorities. In an alternative example, the application server  may forward a later-requested user-specified object download priority to AT , whereby AT  will conform with a most-recently forwarded user-specified object download priority, but only if the later-requested user-specified object download priority is received at the application server  from a higher-priority AT as compared to the first-requested or earlier-requested user-specified object download priority. In another example, in the case that AT  is representative of a plurality of ATs, the application server  can performing a weighing or averaging of different requested user-specified object download priorities from the respective ATs. For example, the application server  may only act upon a particular set of user-specified object download priorities when a threshold number of percentage of ATs request the same set of user-specified object download priorities, the application server  may determine common elements across multiple requested user-specified object download priorities and then only act upon the common elements, and so on.","In another embodiment, with respect to , AT  may be representative of a plurality of ATs that are transferring objects to AT . In this case, the set of user-specified object download priorities can be configured to prioritize objects from certain ATs over other ATs. In this case, in an example, the configured requests for the multiple objects in B can be queued by AT  and then be sent successively to the plurality of ATs in order of highest-priority to lowest-priority after each AT completes its respective object transfer. Alternatively, AT  may notify the application server  of the ATs' respective priorities for AT . In this case, the configured requests for the multiple objects in B can be sent to each of the plurality of ATs, and the application server  can then attempt to buffer the objects received from the plurality of ATs so as to deliver the objects to AT  in an order corresponding to AT 's set of user-specified object download priorities.","In another example, as will be described next with respect to , a given user of AT  can navigate between windows that are associated with different communication sessions (e.g., such as a streaming video conference session and a file-transfer session). Depending on which window is active, all or a portion of the media of the session that is not associated with the active window can be de-prioritized (at least until the given user navigates back to the window of the other session). For example, assume that, due to the layering of windows on AT , only partial video is displayed. In this case, only the portion of the window that is shown can be sent as part of the video. AT  can convey some indicator of the displayed video portion from which the application server  can filter the non-viewable portion.","Referring to , assume that AT  is participating in a streaming communication session associated with a first set of windows over a first connection, C. In an example, the first connection (or connection ) can correspond to a single connection that carries a single media type or multiple media types (e.g., video and audio). In another example, the first connection can correspond to a plurality of different connections with each type of streaming media being allocated to a different one of the connections (e.g., audio is received over 1x and video is received over EV-DO, video and audio are received on different ports within an EV-DO network, etc.). Also, the streaming communication session could be between AT  and a server, AT  or some other AT, and as such AT  is not explicitly illustrated as part of the streaming communication session in , although this is a possible implementation.","Next, AT  switches to a second set of windows in order to initiate a file-transfer session to transfer one or more objects over a second connection from a transmitting AT , C. For example, the streaming communication session can correspond to a video conference supported by a high QoS connection (i.e., the first connection), and the file-transfer session can be supported by a low QoS connection or even a connection that is not guaranteed any degree of QoS.","Because AT  has switched its current active window from a window associated with the streaming communication session to a window associated with the file-transfer session, AT  sends a request to de-prioritize at least a portion of the streaming communication session in C. In an example, if the streaming communication session corresponds to a video-only session, the de-prioritization request can request that the video-feed no longer be sent to AT  because AT  is not even watching the window that would display the video. In a further example, if the streaming communication session corresponds to feed containing video and audio, the de-prioritization request can request that the video-feed no longer be sent to AT  while still requesting the audio-feed or portion of the streaming communication session to be sent to AT  (e.g., because even though the video is not viewable in this instance, the user could still listen to the audio-portion of the session during the user's navigation to the other window). In this example, if the first connection includes different connections for audio and video, the de-prioritization request can be configured to request that a rate at which the video frames are conveyed to AT  be reduced, or alternatively that the video connection be temporarily suspended or shut-down. Accordingly, in C, the application server  modifies the streaming communication session to AT  in accordance with the de-prioritization request from C.","In C, AT  requests to download one or more objects over the second connection of the file-transfer session, and the application server  forwards the download request to AT , C. AT  begins sending the requested objects to the application server , D, and the application server  sends the requested object(s) from AT  to AT  over the second connection, C. In an example, AT  can download a photo that is emailed to AT  from a session participant of the streaming communication session (e.g., AT ), such as a diagram that is being discussed. Alternatively, the file-transfer session need not be directly associated with the streaming communication session.","At this point, assume AT  switches back to the streaming communication session such that the first set of windows are again activated and AT  can again fully participate in the streaming communication session, C. Accordingly, AT  sends a \u2018re\u2019-prioritization request to request that the de-prioritized portion of the streaming communication session again be given a high level of priority, C. For example, the re-prioritization request can request that a discontinued video-feed of a video-conference be resumed. Accordingly, in C, the application server  modifies the streaming communication session to AT  in accordance with the re-prioritization request from C.","In the embodiment of , a given transport protocol (e.g., TCP, etc.) can be used to adjust the manner in which a particular set of windows is advertised to the application server  and\/or AT  in association with a particular TCP connection. For example, a first TCP connection can be associated with the first set of windows and a second TCP connection can be associated with the second set of windows. Thereby, the de-prioritization request of C can correspond to a configuration of a smaller advertised window for the first TCP connection of the first set of windows to reflect the lower-priority of the first set of windows, and the re-prioritization request of C can correspond to a configuration of a larger advertised window for the second TCP connection of the second set of windows to reflect the higher-priority of the second set of windows. While the first and second set of windows are described above as each being related to TCP connections, it will be appreciated that, in other embodiments of the invention, at least one of the connections need not be TCP, but could rather be UDP or some other windowless transport protocol.","While  illustrate examples by which the objects or media are selectively provided AT  based on either an inferred or explicit priority of the content, it is generally assumed in  that any data actually provided to AT  is conveyed at a full-quality level. In an alternative embodiment, described below with respect to , if AT  is positioned in a limited environment, AT  can prompt a download of objects that are re-formatted to conform with the limited environment.","As used herein, a \u2018limited environment\u2019 is defined as any condition, qualitative metric and\/or quantitative metric that is expected to be associated with performance degradation for a download request of AT . For example, the limited environment can correspond to as a bandwidth-limited environment where AT  is operating in a high-interference zone, a 1x network and\/or where AT 's resources are strained such as when AT  is concurrently participating in multiple sessions. In another example, AT  can be deemed to be in a limited environment if AT  is connected to an EV-DO network and T2P of EV-DO falls below a given threshold or a bandwidth measurement using CapProbe or CapProbe-like program falls beneath a predetermined threshold.","Referring to , AT  receives at least one request to download multiple objects, D. As noted above, the multiple-object download request can correspond to a request to load a website, in an example, or to receive a file transfer from another AT during a communication session. In another example, the multiple-object download request can correspond to a photo-slideshow. In D, AT  determines if AT  is currently operating in a limited environment that is expected to be limited relative to the download request.","As will be appreciated, there are a number of different manners by which AT  can determine if its current operating environment is a \u2018limited environment\u2019 (e.g., limited relative to the download request). For example, an environment can be limited relative to the download request if the ratio of the amount of data requested to the time in which a reasonable user expects to receive that amount of data would take longer than a predetermined amount. This ratio can be preconfigured on respective ATs or UEs, in an example. Thus, being connected to a 1x network is not a limited environment if the AT is requested download of a 10 kilobyte (KB) file, but the 1x network could be a limited environment if the requested download is for a 10 megabyte (MB) file. Likewise, being connected to a 4g network is not a limited environment if the AT is requested download of a 10 MB file, but even the 4G network could be a limited environment if the requested download is for a 10 gigabyte (GB) file.","In another example, if AT  is operating in a 1x network, AT  may simply assume its environment is limited. In another example, AT  can evaluate a data-rate obtained in a recent communication session, and if the data-rate is relatively low or below a threshold then AT  can determine its environment to be -limited.","In another example, the application server  (or the RAN ) can send a connection quality indicator to AT  that indicates a level of AT 's current connection quality, as shown in D. For example, the connection quality indicator can be indicative of network delay, congestion or loss associated with AT 's current serving network as measured by the application server . As will be appreciated, as bandwidth increases and latency decreases, there will eventually be a point at which there are diminishing returns in terms of user-experience or user-perception, such that changes in bandwidth and\/or latency can be evaluated to determine whether a particular operating environment is limited. In a further example, if AT  already has a connection established with the application server , the connection quality indicator can be conveyed to AT  within an ACK packet or data packet sent by the application server  to AT . For example, the application server  may have special knowledge related to a connection quality of AT 's current network, which can be based on part on AT 's geographic location for example. The application server  can then configure a header portion (e.g., a DSCP field) of a packet to AT  with a code or bit-setting to convey the special knowledge.","It may be assumed in D that AT  determines its environment to be a limited environment. Accordingly, AT  configures one or more download requests to request a download of the multiple objects from the application server , and further configures the request(s) to indicate that AT  is operating in a limited environment, D. In D, AT  sends the configured request(s) to the application server , and the application server  forwards the configured request(s) to AT . Responsive to the configured request(s), AT  begins sending the requested objects via its own connection to the application server , B. Upon receiving the multiple objects from AT , the application server  alters or modifies at least one of the multiple-objects from a first \u2018realization\u2019 to a second \u2018realization\u2019 in order to reduce a delivery time of the at least one object to be altered or modified, D. In an example, for a graphic object (e.g., a JPEG, TIFF, bitmap, etc.), the modification of D can correspond to a resolution reduction (e.g., normal-resolution to thumbnail image, etc.) of the graphic object (e.g., or for multiple graphic objects in the case of a photo-slideshow). In another example, for an audio object (e.g., a way file, MP3, etc.) the modification of D can correspond to a quality reduction of the audio object. After the modification of D, the application server  begins sending the multiple objects to AT  such that any modified objects are sent in place of their non-modified versions, D.","In D, at some later point in time, the application server  determines whether to send the at least one object to AT  in their first or non-modified format. In an example, the application server  can determine to send the at least one object in its \u2018full\u2019 quality first format after all other multiple objects are sent to AT , in response to a message that AT  is no longer operating in a limited environment (e.g., via a connection quality update message in D, for instance), after a threshold period of time, etc. If AT  determines not to transmit the at least one object in its first format, the process returns to D and the application server  continues to send the multiple objects to AT  (without sending all of the objects to AT  in their first realization). Otherwise, if AT  determines to transmit the at least one object in its first format to AT , the application server  continues to send the multiple objects to AT  while sending the objects modified in D to AT  in their original or unmodified, first realization, D.","In , it is possible that the download request D corresponds to real-time or streaming media. In this case, it will be appreciated that if a low-resolution video, for example, is sent to a user, there is little value in sending the higher-resolution video to the user when the user re-connects to a higher-performing network or its connection otherwise improves. In this case, blocks D and D can potentially be omitted for streaming or real-time sessions in an embodiment of the invention, where \u2018old\u2019 files have less value than more recent files, even if the older files were sent with lower quality.","While  are described as separate processes above, it will be appreciated that two or more of  can be implemented in a coordinated manner in other embodiments of the invention. For example, the prioritization-focused embodiments of ,  and\/or  can be implemented in conjunction with the limited environment-focused embodiment of . In this case, in addition and\/or in place of modifying the realizations of the multiple objects in D, the transition of AT  to the limited environment may cause the object transfer priorities of ,  and\/or  to be modified. In another example, ,  and\/or  may simply be executed in parallel with  but may not actually be directly affected by . For example, the multiple objects that are described as transferred from AT  to AT  in  may be provided in an order based on the respective object transfer priorities of ,  and\/or .","Further, while each of  are directed to embodiments whereby objects are transferred from AT  to AT , it will be appreciated either of AT  and\/or AT  may be representative of multiple ATs. In other words, the objects arriving at AT  in  can alternatively originate from multiple ATs instead of a single AT . Also, the objects sent from AT  in  can alternatively be sent to multiple target ATs instead of a single AT .","In the case of AT  being one of a plurality of ATs that are receiving the objects from AT , with respect to , it will be appreciated that each AT receiving the objects from AT  can be associated with its own respective object transfer priority. Thus, the processes of  can be executed for each respective receiving AT, potentially resulting in the objects from AT  being delivered to the respective receiving ATs in different orders. With respect to , it will be appreciated that the entry of one of the receiving ATs to a limited environment need not limit the objects transferred to other receiving ATs that are not in a limited environment. Thus, the execution of  may affect less than all of the receiving ATs.","Further, in any of , one or more of the objects being transferred may be associated with an expiration time whereby, after the expiration time, a value associated with the one or more objects is decreased and\/or eliminated entirely. Accordingly, during object transfer, a given entity can check a current time against the associated expiration times for the one or more objects to determine whether to dynamically de-prioritize the one or more objects and\/or drop the one or more objects entirely. In an example, this operation may occur at AT  during A of , B of , C of  and\/or D of . Alternatively, this operation may occur at the application server  during A of , B of , C of  and\/or D of .","Those of skill in the art will appreciate that information and signals may be represented using any of a variety of different technologies and techniques. For example, data, instructions, commands, information, signals, bits, symbols, and chips that may be referenced throughout the above description may be represented by voltages, currents, electromagnetic waves, magnetic fields or particles, optical fields or particles, or any combination thereof.","Further, those of skill in the art will appreciate that the various illustrative logical blocks, modules, circuits, and algorithm steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware, computer software, or combinations of both. To clearly illustrate this interchangeability of hardware and software, various illustrative components, blocks, modules, circuits, and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application, but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.","The various illustrative logical blocks, modules, and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor, a digital signal processor (DSP), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA) or other programmable logic device, discrete gate or transistor logic, discrete hardware components, or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor, but in the alternative, the processor may be any conventional processor, controller, microcontroller, or state machine. A processor may also be implemented as a combination of computing devices, e.g., a combination of a DSP and a microprocessor, a plurality of microprocessors, one or more microprocessors in conjunction with a DSP core, or any other such configuration.","The methods, sequences and\/or algorithms described in connection with the embodiments disclosed herein may be embodied directly in hardware, in a software module executed by a processor, or in a combination of the two. A software module may reside in RAM memory, flash memory, ROM memory, EPROM memory, EEPROM memory, registers, hard disk, a removable disk, a CD-ROM, or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read information from, and write information to, the storage medium. In the alternative, the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user terminal (e.g., access terminal). In the alternative, the processor and the storage medium may reside as discrete components in a user terminal.","In one or more exemplary embodiments, the functions described may be implemented in hardware, software, firmware, or any combination thereof. If implemented in software, the functions may be stored on or transmitted over as one or more instructions or code on a computer-readable medium. Computer-readable media includes both computer storage media and communication media including any medium that facilitates transfer of a computer program from one place to another. A storage media may be any available media that can be accessed by a computer. By way of example, and not limitation, such computer-readable media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also, any connection is properly termed a computer-readable medium. For example, if the software is transmitted from a website, server, or other remote source using a coaxial cable, fiber optic cable, twisted pair, digital subscriber line (DSL), or wireless technologies such as infrared, radio, and microwave, then the coaxial cable, fiber optic cable, twisted pair, DSL, or wireless technologies such as infrared, radio, and microwave are included in the definition of medium. Disk and disc, as used herein, includes compact disc (CD), laser disc, optical disc, digital versatile disc (DVD), floppy disk and blu-ray disc where disks usually reproduce data magnetically, while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer-readable media.","While the foregoing disclosure shows illustrative embodiments of the invention, it should be noted that various changes and modifications could be made herein without departing from the scope of the invention as defined by the appended claims. The functions, steps and\/or actions of the method claims in accordance with the embodiments of the invention described herein need not be performed in any particular order. Furthermore, although elements of the invention may be described or claimed in the singular, the plural is contemplated unless limitation to the singular is explicitly stated."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A more complete appreciation of embodiments of the invention and many of the attendant advantages thereof will be readily obtained as the same becomes better understood by reference to the following detailed description when considered in connection with the accompanying drawings which are presented solely for illustration and not limitation of the invention, and in which:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2B","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 4C and 4D"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 5A through 5D"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6C"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6D"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 7C"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIGS. 8C and 8D"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 8E"},"Each of  illustrate a different content-based communicative process associated with a file-transfer session in accordance with embodiments of the invention."]},"DETDESC":[{},{}]}
