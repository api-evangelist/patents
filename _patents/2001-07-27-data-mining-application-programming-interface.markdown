---
title: Data mining application programming interface
abstract: An application programming interface, computer program product implementing the application programming interface, and a system implementing the application programming interface, which provides an advanced interface including support for hierarchical and object-oriented programming languages and sophisticated programming language constructs, and does not need to be integrated using additional tools. The application programming interface for providing data mining functionality comprises a first layer providing an interface with an application program, and a second layer implementing data mining functionality, the second layer comprising a mining object repository maintaining data mining metadata, a plurality of mining project objects each mining project object containing data mining objects created and used by a user, a plurality of mining session objects, each mining session object containing data mining processing performed on behalf of a user, a plurality of data mining tables, each data mining table mapping a table or a view in a database, a plurality of data transformation objects, each data transformation object defining computations or manipulations to be performed on data in the database, a plurality of data mining models, each data mining model implementing conditions and decisions, and a plurality of data mining result objects, each data mining result object generated as a result of scoring or analyzing a data mining model or an input dataset.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06865573&OS=06865573&RS=06865573
owner: Oracle International Corporation
number: 06865573
owner_city: Redwood Shores
owner_country: US
publication_date: 20010727
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates to an application programming interface for implementing data mining functionality.","Data mining is a technique by which hidden patterns may be found in a group of data. True data mining doesn't just change the presentation of data, but actually discovers previously unknown relationships among the data. Data mining is typically implemented as software in or in association with database systems. Data mining includes several major steps. First, data mining models are generated based on one or more data analysis algorithms. Initially, the models are \u201cuntrained\u201d, but are \u201ctrained\u201d by processing training data and generating information that defines the model. The generated information is then deployed for use in data mining, for example, by providing predictions of future behavior based on specific past behavior or recommendations for actions, such as purchases, based on past actions.","In order to add data mining functionality to application software, the application software must access and control software that provides the data mining functionality. Typically, application software accesses and controls the data mining software using an application programming interface (API) that is specific to the particular data mining software being used. Existing data mining software products provide APIs that are based on proprietary scripting languages, which are specific to each data mining software product. A problem arises with such existing languages in that they are inherently flat in structure, or use a non-object oriented programming language to specify the interface. Since most modern application software is written in standard object-oriented programming languages, using flat and\/or non-object oriented APIs can be difficult and clumsy.","Additional problems arise in that existing data mining software products are often limited in the degree of programming language constructs that they support. For example, many data mining software products provide limited or no support for loops and conditional logic and parameterization of functions composed of data mining commands. In addition, many data mining tool scripting languages need to be integrated using an additional scripting tool, such as Practical Extraction and Report Language (Perl).","A need arises for a data mining application programming interface that provides an advanced interface including support for hierarchical and object-oriented programming languages and sophisticated programming language constructs, and does not need to be integrated using additional tools.","The present invention is an application programming interface, computer program product implementing the application programming interface, and a system implementing the application programming interface, which provides an advanced interface including support for hierarchical and object-oriented programming languages and sophisticated programming language constructs, and does not need to be integrated using additional tools. The application programming interface for providing data mining functionality, according to the present invention, comprises: a first layer providing an interface with an application program, and a second layer implementing data mining functionality, the second layer comprising a mining object repository maintaining data mining metadata, a plurality of mining project objects, each mining project object containing data mining objects created and used by a user, a plurality of mining session objects, each mining session object containing data mining processing performed on behalf of a user, a plurality of data mining tables, each data mining table mapping a table or a view in a database, a plurality of data transformation objects, each data transformation object defining computations or manipulations to be performed on data in the database, a plurality of data mining models, each data mining model including rules implementing conditions and decisions, and a plurality of data mining result objects, each data mining result object generated as a result of scoring or analyzing a data mining model or an input dataset.","The application programming interface may further comprise a plurality of data mining settings objects, each data mining settings object specifying a type of model to build and function and model building algorithm specific parameters.","The first layer may be a client-side layer operable to execute on a client computer system. The second layer may be a server-side layer operable to execute on a server computer system. The first layer and the second layer may be implemented in the Java programming language. The database may comprise training data to be used to train the data mining models. The database may comprise test and evaluation data to be used to test and evaluate the data mining models. The database may comprise scoring data to be used to score the data mining models. Each data mining project object may maintain a name space within which data mining objects are named. A data mining project object may be shared among users. The data mining table objects may be included in the data mining object repository. Each data mining table may include a set of columns of data mining data and associated metadata. Each data mining transformation object may perform data transformations on a data mining table, a data column in a data mining table, a data row in a data mining table, or a value in a data row or a data column in a data mining table. 1. Each data mining transformation object may comprise metadata. Each data mining settings object may comprise metadata. Each data mining model may comprise metadata.","The application programming interface may further comprise a plurality of schema view objects, each schema view object providing access to a data table in the data mining object repository. The application programming interface may further comprise a plurality of data mining settings objects, each data mining settings object specifying parameters for building a particular type of data mining model.","An exemplary data mining system , in which the present invention may be implemented, is shown in FIG. . System  includes a database\/data mining system  that is connected to a variety of sources of data. For example, system  may be connected to a plurality of internal or proprietary data sources, such as systems A-N. Systems A-N may be any type of data source, warehouse, or repository, including those that are not publicly accessible. Examples of such systems include inventory control systems, accounting systems, scheduling systems, etc. System  may also be connected to a plurality of proprietary data sources that are accessible in some way over the Internet . Such systems include systems A-N, shown in FIG. . Systems A-N may be publicly accessible over the Internet , they may be privately accessible using a secure connection technology, or they may be both publicly and privately accessible. System  may also be connected to other systems over the Internet . For example, system  may be privately accessible to system  over the Internet  using a secure connection, while system  may be publicly accessible over the Internet .","The common thread to the systems connected to system  is that the connected systems all are potential sources of data for system . The data involved may be of any type, from any original source, and in any format. System  has the capability to utilize all such data that is available to it.","An exemplary embodiment of database\/data mining system  is shown in FIG. . System  is a database management system that includes data mining functionality. Database\/data mining system  is connected to data sources , such as the proprietary and public data sources shown in FIG. . Database\/data mining system  includes two main components, data , and database management system (DBMS) engine . Data  includes data, typically arranged as a plurality of data tables, such as relational data tables, as well as indexes and other structures that facilitate access to the data. DBMS engine  typically includes software that receives and processes queries of the database, obtains data satisfying the queries, and generates and transmits responses to the queries. DBMS engine  also includes data mining block , which provides DBMS engine  with the capability to obtain data and perform data mining processing on that data, so as to respond to requests for data mining processed data from one or more users, such as user .","An exemplary block diagram of a database\/data mining system , shown in , is shown in FIG. . Database\/data mining system  is typically a programmed general-purpose computer system, such as a personal computer, workstation, server system, and minicomputer or mainframe computer. Database\/data mining system  includes one or more processors (CPUs) A-N, input\/output circuitry , network adapter , and memory . CPUs A-N executes program instructions in order to carry out the functions of the present invention. Typically, CPUs A-N are one or more microprocessors, such as an INTEL PENTIUM\u00ae processor.  illustrates an embodiment in which data mining system  is implemented as a single multi-processor computer system, in which multiple processors A-N share system resources, such as memory , input\/output circuitry , and network adapter . However, the present invention also contemplates embodiments in which data mining system  is implemented as a plurality of networked computer systems, which may be single-processor computer systems, multi-processor computer systems, or a mix thereof.","Input\/output circuitry  provides the capability to input data to, or output data from, database\/data mining system . For example, input\/output circuitry may include input devices, such as keyboards, mice, touchpads, trackballs, scanners, etc., output devices, such as video adapters, monitors, printers, etc., and input\/output devices, such as, modems, etc. Network adapter  interfaces database\/data mining system  with network . Network  may be any standard local area network (LAN) or wide area network (WAN), such as Ethernet, Token Ring, the Internet, or a private or proprietary LAN\/WAN.","Memory  stores program instructions that are executed by, and data that are used and processed by, CPU  to perform the functions of the database\/data mining system . Memory  may include electronic memory devices, such as random-access memory (DAM), read-only memory (ROM), programmable read-only memory (PROM), electrically erasable programmable read-only memory (EEPROM), flash memory, etc., and electro-mechanical memory, such as magnetic disk drives, tape drives, optical disk drives, etc., which may use an integrated drive electronics (IDE) interface, or a variation or enhancement thereof, such as enhanced IDE (EIDE) or ultra direct memory access (UDMA), or a small computer system interface (SCSI) based interface, or a variation or enhancement thereof, such as fast-SCSI, wide-SCSI, fast and wide-SCSI, etc, or a fiber channel-arbitrated loop (FC-AL) interface.","Memory  includes data , database management processing routines , data mining processing routines , and operating system . Data  includes data, typically arranged as a plurality of data tables, such as relational database tables, as well as indexes and other structures that facilitate access to the data. Database management processing routines  are software routines that provide database management functionality, such as database query processing. Data mining processing routines  are software routines that implement the data mining processing performed by the present invention. Preferably, this data mining processing is integrated with database management processing. For example, data mining processing may be initiated by receipt of a database query, either in standard SQL or in the form of extended SQL statements. Operating system  provides overall system functionality.","A data flow diagram of a model building process, which may be performed by a data mining engine, is shown in FIG. . Model building involves building the models, for example, neural network models, decision tree models, association rule models, etc., which can be used to perform online recommendation and prediction. A configuration  defines the default system settings that affect data mining system operation and algorithm model building behavior, such as maximum allowed parallelism for a given model build, etc. A schema  defines the data used in the data mining process by providing metadata on the attributes used by the data mining algorithms. Client input  includes information that allows the user to control the building of data mining models, such as neural networks, decision trees, association rules, etc. For example, client input  may include information specifying a number of artificial neurons to be used in a data mining model, a type of neural network model to be build, such as a self-organizing map, a k-means model, a competitive learning model, etc., and other parameters that are specific to the type of model selected. Client input  takes the role of settings that prescribe model selection and data mining algorithm behavior. The configuration , the schema , and the client input  are input to model setup step , which sets up the models for training. In particular, model setup step  selects the modeling algorithms  that process the training data in order to actually build the models. For example, modeling algorithms  may include a self-organizing map (SOM) algorithm, a competitive learning model algorithm, a neural network modeling algorithm, etc. The algorithms that are to be used to build models can be automatically selected by model setup step  based on the definitions in schema , and as specified by the client input .","In addition, model setup step  generates and sets training parameters , where the user has indicated no preferences. Training parameters  are parameters that are input to the algorithms to control how the algorithms build the models. Training data  is data that is input to the algorithms that is used to actually build the models. Training parameters , the selected modeling algorithm, and training data  are input to model building block .","Model building block  invokes the selected modeling algorithm, initializes it using the training parameters , processes training data  using the modeling algorithm, and generates model . Model  includes a set of rules and\/or data that implement the conditions and decisions that make up an operational model.","Analysis block  performs two separate functions. First, analysis block  statistically analyzes model  and tests the model using a held aside dataset, such as test data , in the case of a supervised learning model. Analysis block  also generates statistics , which are computed from training data . Statistics  are used in the model scoring process shown in  to determine if scoring data presented to the model for scoring conforms to the same distribution and characteristics as the training data that was used to build the model.","A data flow diagram of a model scoring process is shown in FIG. . Client input  is input to prediction setup step . Client input  includes user data and desired results data. User data may include data relating to the type of predictions\/recommendations desired by the user, data relating to constraints on the generated prediction\/recommendation desired by the user, or relating to specific actions the user is currently taking that define the context in which the data mining is occurring. For example, in the case of a retail Website, browsing actions of a user may define the context in which the data mining is occurring. Desired results data may include definitions of the types of predictions and recommendations and constraints on the predictions and recommendations desired by the operator of the data mining system. For example, user data may include information relating to items the user is purchasing and desired results data may indicate that the desired result is a recommendation for another product to be suggested to the user for purchase.","Prediction setup step  uses the input user data and desired results data to select trained models  and to select and\/or generate prediction parameters  based on client input . Models  include one or more trained models that were generated by model building block , shown in FIG. . Prediction setup step  selects a model for use in scoring step  based on the user data and on the desired results data included in client input . Prediction parameters  are parameters that are input to the scoring step  to control the scoring of scoring data  against the model.","The selected model , prediction parameters , and scoring data  are input to scoring step . In scoring step , scoring data  is processed according to selected model , as controlled by prediction parameters , to generate one or more scores using model . For example, in a rule based model, such as a decision tree model, a rule is defined in terms of a function of input variables and a corresponding prediction\/recommendation. The input scoring data  is input to the function of each rule. The function is evaluated using the input scoring data  and scores are generated. The scores for each rule indicate how closely the function defined by the rule matches the prediction data, how much confidence may be placed in the match, how likely the output prediction\/recommendation from the rule is likely to be true, and other statistical indicators. The generated scored data  is output from scoring step  and includes the predictions\/recommendations  for each scored rule, along with the corresponding probabilities  for each scored rule.","The scored data  is input to selection and prediction\/recommendation generation step , which evaluates the predictions  and probabilities  and selects at least a portion of the predictions\/recommendations . The selected predictions\/recommendations  are those having scores meeting the selection criteria. The selection criteria may be defined by prediction parameters  and\/or by predefined or default criteria included in selection\/generation step . In addition, the selection criteria may include a limit on the number of predictions\/recommendations that are to be selected, or may indicate that the predictions\/recommendations are to be sorted based on their associated scores. The selected predictions\/recommendations are output  from step  for post data mining processing and\/or output to the user.","An exemplary block diagram of a Data Mining Application Programming Interface (DMAPI), according to the present invention, is shown in FIG. . DMAPI  defines a set of classes and operations to create and manipulate data mining objects. Specifically, DMAPI  provides support for the following functional areas:\n\n","DMAPI  is preferably implemented as a two tiered architecture consisting of a thin client-side API layer , which provides a direct interface with application program . Layer , being a client-side layer, is executed in a client computer system . DMAPI , also includes a thick server-side implementation layer , which is executed in a server computer system . DMAPI  is preferably implemented using the JAVA\u00ae (Java) programming language for client-side layer . Implementation layer  may be implemented in any programming language that can provide suitable performance.","Java is a high-level programming language developed by SUN MICROSYSTEMS\u00ae. Java is an object-oriented language similar to C++, but simplified to eliminate language features that cause common programming errors. Java source code files (files with a java extension) are compiled into a format called bytecode (files with a class extension), which can then be executed by a Java interpreter. Compiled Java code can run on most computers because Java interpreters and runtime environments, known as Java Viral Machines (VMs), exist for most operating system, including UNIX\u00ae, the APPLE MACINTOSH OS\u00ae, and MICROSOFT WINDOWS\u00ae. Bytecode can also be converted directly into machine language instructions by a just-in-time compiler (JIT). Java is a general purpose programming language with a number of features that make the language well suited for use on the World Wide Web. Small Java applications are called Java applets and can be downloaded from a Web server and run on your computer by a Java-compatible Web browser, such as NETSCAPE NAVIGATOR\u00ae or MICROSOFT INTERNET EXPLORER\u00ae.","Scripting of data mining operation sequences may be accomplished through a combination of the DMAPI calls and standard Java code. This allows DMAPI  to provide a fully supported and flexible interface for providing data mining functionality to application programs. Implementation layer may be provided as a Java core implementation with a PL\/SQL wrapper , which is automatically generated, making it accessible to the Java DMAPI client-side API layer  via Java Database Connectivity (JDBC). JDBC is a Java API that enables Java programs to execute SQL statements. This allows Java programs to interact with any SQL-compliant database. Since nearly all relational database management systems (DBMSs) support SQL, and because Java itself runs on most platforms, JDBC makes it possible to write a single database application that can run on different platforms and interact with different DBMSs.","DMAPI  provides a Java-based API that enables scripting within Java programs. Java has quickly become the programming language of choice for many advanced applications, including web-based applications and servers. This makes the API more accessible and usable by a broader range of customers. This also avoids having to develop a proprietary scripting syntax with associated programming control constructs.","An exemplary block diagram of major objects handled by DMAPI  is shown in FIG. . Database  represents one or more database systems that store training data that is used for training data mining models during the model building process and scoring data mining models during the prediction\/recommendation generation process. Mining Object Repository (MOR)  is a database that maintains Mining Metadata defined by the data mining schema and serves as the focus for logging into the data mining system, logging off, and validating users to use MOR and data mining functionality. Mining Projects  serve as containers for the data mining objects used and created by a user. Each user has one or more projects, and each project maintains a separate name space within which to name mining objects. Users may choose to mark a project as shared such that all other users of the system have read-only and copy privileges. Multiple users can log in using the same user ID if they wish to work in the same project since a project is owned by a single user ID. Mining Sessions  serve as containers for the data mining processing performed on behalf of a user during each login session.","Mining Tables  are data mining system maintained entities that map to a table or a view in database . Each table  includes a set of columns of data mining data and associated metadata. Mining Table instances exist within the MOR . Data Transformations  include computations or manipulations performed on a data mining table, a data column in a data mining table, a data row in a data mining table, or a value in a data row or a data column in a data mining table to support data exploration or preparation leading to providing a table's data for data mining. Transformations utilize Mining Table and Column metadata, including statistics, as maintained in MOR , to effect the transformation. Mining Settings  specify the parameters for building a particular type of data mining model. Settings will include both general and algorithm-specific data. Instances can be reused to build multiple models on different datasets. Mining Models  represent the result of mining algorithm build operations. Each mining model includes a set of rules that implement the conditions and decisions that make up the model. These conditions and decisions are typically represented as metadata and extensible markup language (XML) strings. Each XML string contains specific model statistics and results that may be of interest to end users. Mining Results  include prediction\/recommendation information produced as a result of the model scoring process, which yields several kinds of result objects: lift, evaluation (e.g., confusion matrix), apply, etc. Instances of Mining Results  and subclasses maintain the model that created the result and the mining input data. Schema Views  are part of DMAPI  that exposes certain tables in MOR schema  as views to allow unrestricted read-only access for end users. These views may be one-to-one mappings to the source MOR table, or derivatives of one or more MOR tables as deemed appropriate. This avoids having DMAPI  become too verbose to anticipate developer needs and provides flexible querying by users.","DMAPI  supports remote invocation of data mining functionality and supporting Java and PL\/SQL packages, as well as database-internal usage. DMAPI  provides progress feedback to users for long running operations. As such DMAPI functionality can be categorized as direct, synchronous manipulation of MOR tables involving fast operations, longer running operations requiring status reporting, asynchronous operations, workflow-supported database operations, and enqueuing requests for the data mining processing.","Some DMAPI operations take less than one second to execute. These may or may not access the MOR database. Such operations occur synchronously and provide no feedback to the user on progress, indicative of their fast execution. Other DMAPI operations that are also synchronous may take considerably longer to execute, on the order of minutes or hours, e.g., the execution of a sophisticated query over a very large mining table. These operations accept a status request and return status information. Asynchronous operations can be supported by workflow processing or may enqueue their requests for processing. Once the DMAPI turns over control to an asynchronous handler, it is up to the handler to provide status notifications.","It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media such as floppy disc, a hard disk drive, RMA, and CD-ROM's, as well as transmission-type media, such as digital and analog communications links.","Although specific embodiments of the present invention have been described, it will be understood by those of skill in the art that there are other embodiments that are equivalent to the described embodiments. Accordingly, it is to be understood that the invention is not to be limited by the specific illustrated embodiments, but only by the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The details of the present invention, both as to its structure and operation, can best be understood by referring to the accompanying drawings, in which like reference numbers and designations refer to like elements.",{"@attributes":{"id":"P-00012","num":"00012"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00013","num":"00013"},"figref":"FIG. 2","b":"1"},{"@attributes":{"id":"P-00014","num":"00014"},"figref":"FIG. 3","b":["102","1"]},{"@attributes":{"id":"P-00015","num":"00015"},"figref":"FIG. 4","b":"3"},{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 5","b":"3"},{"@attributes":{"id":"P-00017","num":"00017"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 7","b":"6"}]},"DETDESC":[{},{}]}
