---
title: Apparatus and methods for providing an event driven notification over a network to a telephony device
abstract: The invention is directed to techniques for notifying a client device of the occurrence of an event using a web application activated based on an application-state data record. A persistent process monitors incoming data for the occurrence of an event and provides the application-state data record that can be used to activate a session of an event notification application. The persistent process provides an event indicator to a proxy browser which then activates the event notification application. The event notification application provides an event notification to the proxy browser, which in turn provides an audio notification of the event to the client device, which may be a telephony device or other two-way audio communication device. The user of the client device can then respond to the event notification or otherwise interact with the event notification application via the proxy browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06907455&OS=06907455&RS=06907455
owner: Cisco Technology, Inc.
number: 06907455
owner_city: San Jose
owner_country: US
publication_date: 20000629
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The evolution of the conventional public switched telephone network has resulted in a variety of voice applications and services that can be provided to individual subscribers and business subscribers. Such services include voice messaging systems that enable landline or wireless subscribers to record, playback, and forward voice mail messages. However, the ability to provide enhanced services to subscribers of the public switched telephone network is directly affected by the limitations of the public switched telephone network. In particular, the public switched telephone network operates according to a protocol that is specifically designed for the transport of voice signals; hence any modifications necessary to provide enhanced services can only be done by switch vendors that have sufficient know-how of the existing public switched telephone network infrastructure.","An open standards-based Internet protocol (IP) network, such as the World Wide Web, the Internet, or a corporate intranet, provides client-server type application services for clients by enabling the clients to request application services from remote servers using standardized protocols, for example, the hypertext transport protocol (HTTP). The web server application environment can include web server software, such as Apache, implemented on a computer system attached to the IP network. Web-based applications are composed of HTML (Hypertext Markup Language) pages, logic, and database functions. In addition, the web server may provide logging and monitoring capabilities.","In contrast to the public switched telephone network, the open standards-based IP network has enabled the proliferation of web based applications written by web application developers using web development tools. Hence, the ever increasing popularity of conventional web applications and web development tools provides substantial resources for application developers to develop robust web applications in a relatively short time and in an economical manner. However, one important distinction between telephony-based applications and web-based applications is that telephony-based applications are state aware, whereas web-based applications are stateless.","In particular, conventional telephony applications are state aware to ensure that prescribed operations between the telephony application servers and the user telephony devices occur in a prescribed sequence. For example, operations such as call processing operations, voicemail operations, call forwarding, etc., require that specific actions occur in a specific sequence to enable the multiple components of the public switched telephone network to complete the prescribed operations.","The prior art web-based applications running in the IP network, however, are state-less and transient in nature, and do not maintain application state because application state requires an interactive communication between the browser and back-end database servers accessed by the browsers via a HTTP-based web server. However, an HTTP server provides asynchronous execution of HTML applications, where the web applications in response to reception of a specific request in the form of a URL (Uniform Resource Locator) from a client, instantiate a program configured for execution of the specific request, send an HTML web page back to the client, and terminate the program instance that executed the specific request. Storage of application state information in the form of a \u201ccookie\u201d is not practical because some users prefer not to enable cookies on their browser, and because the passing of a large amount of state information as would normally be required for voice-type applications between the browser and the web application would substantially reduce the bandwidth available for the client.","Referring now to conventional approaches used to track and monitor events of significance to a user of some service, in one approach the user actively checks or monitors data to determine if some event occurred of significance to the user. For example, the user opens a web browser and accesses a web site to check on when packages are likely to be delivered to or picked up from the user's office, or whether a user's overnight delivery package has been delivered to an intended recipient. The user can use the packages identification number or other information to check the web site to determine when and where the package was delivered. The user can also use the web site, or call the overnight deliver service provider, to determine when a package will be picked up for outgoing delivery.","In another conventional approach, a user can be contacted by an individual calling the user over a telephone. For example, a stock broker can initiate a phone call to the user when a stock has reached a low price level to discuss with the user whether to buy the stock or not.","In another example, the user accesses a web site to check on a current stock quote price. For example, a user can access a commercial web site, such as the Yahoo!\u2122, currently located at www.yahoo.com, provided by Yahoo! Inc., Santa Clara, Calif. The user can request a stock quote. The web site then locates the latest stock quote for the stock in question, and presents it to the user via a web page provided to the user and displayed on the user's local browser. The user then decides whether to purchase the stock, either through a link associated with the web site, or by contacting a stock broker independently from the web site, such as by contacting the stock broker by telephone.","The following paragraphs summarize related applications suitable for use in implementing the invention.","Commonly-assigned, copending application Ser. No. 09\/480,485, filed Jan. 11, 2000, entitled \u201cApplication Server Configured for Dynamically Generating Web Pages for Voice Enabled Web Applications\u201d, the disclosure of which is incorporated in its entirety herein by reference, discloses an application server that executes a voice-enabled web application by runtime execution of extensible markup language (XML) documents that define the voice-enabled web application to be executed. The application server includes a runtime environment that establishes an efficient, high-speed connection to a web server. The application server, in response to receiving a user request from a user, accesses an XML page that defines at least a part of the voice application to be executed for the user. The XML page may describe a user interface, such as dynamic generation of a menu of options or a prompt for a password, an application logic operation, or a function capability such as generating a function call to an external resource. The application server then parses the XML page, and executes the operation described by the XML page, for example, by dynamically generating an HTML page having voice application control content, or fetching another XML page to continue application processing. In addition, the application server may access an XML page that stores application state information, enabling the application server to be state-aware relative to the user interaction. Hence, the XML page, which can be written using a conventional editor or word processor, defines the application to be executed by the application server within the runtime environment, enabling voice enabled web applications to be generated and executed without the necessity of programming language environments. Hence, web programmers can write voice-enabled web applications, using the teachings of the above-incorporated application Ser. No. 09\/480,485, by writing XML pages that specify respective voice application operations to be performed. The XML documents have a distinct feature of having tags that allow a web browser (or other software) to identify information as being a specific kind or type of information.","Commonly assigned, copending application Ser. No. 09\/501,516, filed Feb. 1, 2000, entitled \u201cArrangement for Defining and Processing Voice Enabled Web Applications Using Extensible Markup Language Documents\u201d, the disclosure of which is incorporated in its entirety herein by reference, discloses an arrangement for defining a voice-enabled web application using extensible markup language (XML) documents that define the voice application operations to be performed within the voice application. Each voice application operation can be defined as any one of a user interface operation, a logic operation, or a function operation. Each XML document includes XML tags that specify the user interface operation, the logic operation and\/or the function operation to be performed within a corresponding voice application operation, the XML tags being based on prescribed rule sets that specify the executable functions to be performed by the application runtime environment. Each XML document may also reference another XML document to be executed based on the relative position of the XML document within the sequence of voice application operations to be performed. The XML documents are stored for execution of the voice application by an application server in an application runtime environment. Hence, the XML document described in the above-incorporated application Ser. No. 09\/501,516, which can be written using a conventional editor or word processor, defines the application to be executed by the application server within the runtime environment, enabling voice enabled web applications to be generated and executed without the necessity of programming language environments.","Commonly assigned, copending application Ser. No. 09\/461,191, filed Dec. 15, 1999, entitled \u201cApparatus and Method for Providing Server State and Attribute Management for Voice Enabled Web Applications\u201d the disclosure of which is incorporated in its entirety herein by reference, discloses an arrangement for providing the application server state and managing application attributes for a voice enabled web application. An application server configured for executing voice-enabled web applications for a web browser generates and maintains a server-side data record that includes application state information and user attribute information for an identified user session with a web browser. The application server, in response to receiving a new web page request from a browser, upon verifying that a new session with the user is required, creates a transient application session and executes a web application instance to complete the request, and generates the server-side data record including application state information for the application session and user attribute information for the user of the application session. The server-side data record also includes a session identifier that uniquely identifies the session with the user of the application session. The application server stores the server-side data record in a memory resident within the server side of the network, and sends to the browser the session identifier and the corresponding web page requested by the web browser. In response to receiving a second web page request from the browser that includes the session identifier, the application server executes a new web application instance, and recovers the server-side data record from the memory based on the session identifier included in the second page request. Hence, the application server is able to resume processing relative to the prior application state and user attributes specified in the server-side data record, providing a state-full session for the user without the passing of the application state and the user attributes to the browser as cookies.","The present invention is directed to an improved approach for providing notification of the occurrence of an event. There are a number of deficiencies with conventional event tracking systems and approaches. Users of a service, such as an overnight delivery service, may be required to initiate action, such as making a phone call or checking a web site, when they often desire to be notified about important events without repeated checking of the incoming data on their part. Users often wish to respond to an event notification to take some further action in a quick and convenient manner.","The techniques of the invention are directed to providing an event notification system that proactively contacts the user and puts the user in contact with an interactive web application that can respond to the user's further requests. For example, instead of the user actively monitoring an overnight delivery web site to determine when a package was delivered or when the delivery service will deliver packages to the user's office, the techniques of the invention can be used to contact the user by a telephone, or other two-way audio communication device, to notify the user when packages will be delivered and respond to further requests by the user. In one arrangement, the user can respond, in the same phone session, and provide a further a response to a web application. For example, the phone message can indicate that the delivery service will be delivering packages at a certain time, and request whether the user has any packages to be picked up at that same time.","In another example, a service can monitor a user's electronic mail messages for a message of particular significance, such as an urgent message from the user's boss. The service can then contact the user by telephone to inform the user of the urgent message. The service can also ask if the user over the telephone if the user wishes to hear the urgent message.","In one embodiment, the invention is directed to a method for notifying a telephony device over a network of an occurrence of an event detected by an independent process. The method includes receiving an event indicator over a network in response to the occurrence of the event. The event indicator is capable of activating a session of a web application based on an application-state data record created by the independent process. The method also include activating the web application session based on the application-state data record in response to receiving the event indicator and providing an event notification over the network. The event indicator is one that is suitable for providing audio output to the telephony device.","In another embodiment, the method includes receiving a uniform resource locator (URL) request identifying a persistent extensible markup language (XML) document including an identifier of the telephony device, a reference to an application-defining XML document, and event information based on the occurrence of the event. Another embodiment includes activating the session of the application based on an application-defining document identified in the application-state data record.","The invention is also directed to an application server configured for providing a notification for a telephony device over a network of an occurrence of an event detected by an independent process, including a network interface and an application runtime environment. The network interface is configured to receive an event indicator over the network from a proxy browser in response to the occurrence of the event. The event indicator is capable of activating a session of a web application executing in the application runtime environment based on an application-state data record created by an independent process and specified in the event indicator. The application runtime environment is configured to activate the session of the web application based on the application-state data record in response to receiving the event indicator. The network interface is configured to provide an event notification over the network to the proxy browser, the event notification suitable for providing audio output to the telephony device.","In another embodiment, the event indicator includes a uniform resource locator (URL) request identifying a persistent extensible markup language (XML) document including an identifier of the telephony device, a reference to an application-defining XML document, and event information based on the occurrence of the event. In a further embodiment, the system of the invention includes a document database, and the application-state data record identifies an application-defining document in the document database. The application runtime activates the session of the web application based on the application-defining document.","Another embodiment of the invention is directed to a computer program product that includes a computer readable medium having instructions stored thereon for notifying a telephony device over a network of a occurrence of an event detected by an independent process. The instructions, when carried out by a computer, cause the computer to perform any or all of the operations disclosed herein of the invention. For example, the instructions cause the computer to receive an event indicator over the network in response to the occurrence of the event. The event indicator is capable of activating a session of a web application based on an application-state data record created by an independent process. The instructions also cause the computer to activate the session of the web application based on the application-state data record in response to receiving the event indicator, and provide an event notification over the network, the event notification suitable for providing audio output to the telephony device.","The invention is also directed to an application server configured for providing a notification for a telephony device over a network of an occurrence of an event detected by an independent process, including a network interface and means for providing notification of the event. The network interface is configured to receive an event indicator over the network from a proxy browser in response to the occurrence of the event. The event indicator is capable of activating a session of a web application based on an application-state data record created by an independent process and specified in the event indicator. The producing notification means is configured to activate the session of the web application based on the application-state data record in response to receiving the event indicator. The network interface is configured to provide an event notification over the network to the proxy browser, the event notification suitable for providing audio output to the telephony device.","In another embodiment, the invention is directed to a method in a persistent process executing on a server for providing notification over a network of an occurrence of an event. The method includes monitoring data for the occurrence of the event, generating an application-state data record specifying a session of a web application in response to the occurrence of the event, and providing an event indicator over the network in response to the generating of the application-state data record, the event indicator capable of activating the session of the web application based on the application-state data record.","In a further embodiment, the method includes generating a persistent extensible markup language (XML) document including an identifier of a client device, a reference to an application-defining XML document, and event information based on the occurrence of the event, and providing a uniform resource locator (URL) identifying the persistent XML document and a location of the web application to a proxy browser. The proxy browser is capable of requesting activation of the session of the web application based on the URL.","The method includes, in other embodiments, accessing data in a web site or monitoring data incoming over the network. In another embodiment, the method includes storing the application-state data record in a database accessible to an application server capable of executing the session of the web application. In a further embodiment, the method includes providing a telephony number associated with a client device.","In another embodiment, the invention is directed to a system for providing notification over a network of an occurrence of an event, including a network interface, and a persistent process that is in communication with the network interface. The persistent process is configured generate an application-state data record specifying a session of a web application capable of execution on an application server in response to the occurrence of the event, and provide an event indicator over the network using the network interface in response to the generation of the application-state data record. The event indicator is capable of activating the session of the web application based on the application-state data record.","In another embodiment, the persistent process is configured to generate within the application-state data record a persistent extensible markup language (XML) document comprising an identifier of a client device, a reference to an application-defining XML document, and event information based on the occurrence of the event. The event indicator includes a uniform resource locator (URL) identifying the persistent XML document and a location of the web application. The persistent process provides the event indicator to a proxy browser that is capable of requesting activation of the session of the web application based on the URL.","In other embodiments, the persistent process is configured to access data in a web site or monitor data incoming over the network. In another embodiment, the persistent process stores the application-state data record in a database accessible to an application server capable of executing the session of the web application. In a further embodiment, the application-state data record includes a telephony number associated with a client device.","In another embodiment, the invention is directed to a computer program product that includes a computer readable medium having instructions stored thereon for providing notification of an event over a network. The instructions, when carried out by a computer, cause the computer to perform any or all of the operations disclosed herein of the invention. For example, the instructions cause the computer to monitor data for the occurrence of the event, generate an application-state data record specifying a session of a web application in response to the occurrence of the event, and provide an event indicator over the network in response to the generating of the application-state data record. The event indicator is capable of activating the session of the web application based on the application-state data record.","In a further embodiment, the invention is directed to a computer program propagated signal product embodied in a propagated medium, having instructions for providing notification of an event over a network. The instructions, when carried out by a computer, cause the computer to perform any or all of the operations disclosed herein of the invention. For example, the instructions cause the computer to monitor data for the occurrence of the event, generate an application-state data record specifying a session of a web application in response to the occurrence of the event, and provide an event indicator over the network in response to the generating of the application-state data record. The event indicator is capable of activating the session of the web application based on the application-state data record.","In another embodiment, the invention is directed to a system for providing notification over a network of an occurrence of an event, including a network interface and means for producing an event indicator. The producing means is in communication with the network interface. The producing means is configured to generate an application-state data record specifying a session of a web application capable of execution on an application server in response to the occurrence of the event, and provide an event indicator over the network in response to the generation of the application-state data record. The event indicator is capable of activating the session of the web application based on the application-state data record.","In some embodiments, the techniques of the invention are implemented primarily by computer software. The computer program logic embodiments, which are essentially software, when executed on one or more hardware processors in one or more hardware computing systems cause the processors to perform the techniques outlined above. In other words, these embodiments of the invention are generally manufactured as a computer program stored on a disk, memory, card, or other such media that can be loaded directly into a computer, or downloaded over a network into a computer, to make the device perform according to the operations of the invention.","The invention is directed to techniques for notifying a client device, such as a telephony device, of the occurrence of an event using an event notification application which has been activated based on an application-state data record. In one embodiment, a persistent process monitors incoming data for the occurrence of an event and provides an application-state data record that can be used to activate a session of an event notification application. The persistent process provides an event indicator to a proxy browser which is connected, in one example, to the telephony device. The proxy browser requests activation of the event notification application at a specified (or default) application server based on the event indicator. The event notification application provides an event notification suitable for audio output to the proxy browser, which in turn provides the audio output providing notification of the event to the telephony device. The user of the client device can then respond to the event notification or otherwise interact with the event notification application via the proxy browser.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIGS. 1 through 5"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["60","42","42","42","50","18","18","18","18","18","18","18","62","64","66","68","42","56","44","42","42","42","56"],"i":["a ","b","a","b","c","d","e","f","a ","a ","a","b "]},"The clients and , referred to herein as \u201cfat clients\u201d and \u201cthin clients\u201d, respectively, have the distinct advantage that they can initiate requests using IP protocol to any connected web server  to execute part or most of the applications  on behalf of the clients. An example of a fat client is an e-mail application on a PC that knows how to run the application  and knows how to run the IP protocols to communicate directly with the messaging server via the packet switched network . An example of a thin client is a PC that has a web browser , which, in this case, can use IP protocols such as HTTP to receive and display web pages generated according to hypertext markup language (HTML) from server locations based on uniform resource locators (URL's) input by the user of the PC.","As shown in , each of the clients (tiny clients , , ; skinny clients , , ; thin clients ; and fat clients ) are able to communicate via a single, unified architecture  that enables voice communications services between different clients, regardless of whether the client actually has browser capabilities. Hence, the fat client and the thin client are able to execute voice enabled web applications without any hardware modification or any modification to the actual browser; rather, the browsers  in the clients and merely are provided with an executable voice resource configured for providing browser audio control, described below.","The user devices , , and , illustrated as a cordless telephone , a fax machine having an attached telephone, and an analog telephone , are referred to herein as \u201cskinny clients,\u201d defined as devices that are able to interface with a user to provide voice and\/or data services (e.g., via a modem) but cannot perform any direct control of the associated access subnetwork.","The wireless user devices , , and , illustrated as a cellular telephone (e.g., AMPS, TDMA, or CDMA) , a handheld computing device (e.g., a 3-Com Palm Computing or Windows CE-based handheld device) , and a pager , are referred to as tiny clients. \u201cTiny clients\u201d are distinguishable from skinny clients in that the tiny clients tend to have even less functionality in providing input and output interaction with a user, rely exclusively on the executable application in an access subnetwork to initiate communications; in addition, some types of tiny clients may pot be able to send or receive audio signals such as voice signals at all.","Hence, the skinny clients , , and and the tiny clients , , and access the unified voice messaging services in the unified network  via a proxy browser , configured for providing an IP and HTTP interface for the skinny clients and the tiny clients. In particular, browsers operate by interpreting tags within a web page supplied via an HTTP connection, and presenting to a user media content information (e.g., text, graphics, streaming video, sound, etc.) based on the browser capabilities; if a browser is unable to interpret a tag, for example because the browser does not have the appropriate executable plug-in resource, then the browser typically will ignore the unknown tag. Hence, the proxy browser  can provide to each of the skinny clients and tiny clients the appropriate media content based on the capabilities of the corresponding client, such that the cordless telephone and telephone receive analog audio signals played by the proxy browser  and no text information (unless a display is available); the fax machine and pager only receive data\/text information, and the cellular telephone and the handheld computing device receive both voice and data information. Hence, the proxy browser  interfaces between the IP network and the respective local access devices for the skinny clients and the tiny clients to provide access to the unified messaging network .","The proxy browser  and the web browsers  within the fat client and the thin client execute voice enabled web applications by sending data and requests to a web server , and receiving hypertext markup language (HTML) web pages from the web server , according to hypertext transport protocol (HTTP). The web server  serves as an interface between the browsers ,  and an application server  that provides an executable runtime environment for XML voice applications . For example, the web server  may access the application server  across a common gateway interface (CGI), by issuing a function call across an application programming interface (API), or by requesting a published XML document or an audio file requested by one of the browsers  or . The application server , in response to receiving a request from the web server , may either supply the requested information in the form of an HTML page having XML tags for audio control by a voice resource within the browser, or may perform processing and return a calculated value to enable the browser  or  to perform additional processing.","The application server  accesses selected stored XML application pages (i.e., pages that define an application) and in response generate new HTML pages having XML tags during runtime and supply the generated HTML pages having XML tags to the web server . Since multiple transactions may occur between the browser  or  and the application server , the application server  is configured to store, for each existing user session, a data record, referred to as a \u201cbrownie\u201d, that identifies the state of the existing user session; hence, the application server  can instantiate a procedure, return the necessary data, and terminate the procedure without the necessity of maintaining the instance running throughout the entire user session.","Hence, the application server  executes voice application operations from a stored XML document based on a transient application state, where the application server  terminates the application instance after outputting the generated XML media information to the browser .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["60","64","66","70","72","74","76","80"]},"In addition to ,  includes PSTN (Public Switched Telephone Network) , voice resources , IP (Internet Protocol) connections , routers , , , , IP gateway , , voice over IP interface , HTTP connections , firewalls , gateserver , a browser based XML editor tool , XML applications and functions , dynamic HTML\/XML pages , and a registry .  also illustrates in further detail the browser and web application server interaction. In particular, the thin clients (and fat clients ) may be configured for accessing the web server  via a direct IP connection  to a router . The thin client can directly access the web server  for voice enabled web application services if the thin client has a browser  and an executable voice resource , for example an executable XML aware plug-in resource, or a Java applet embedded within a received HTML page. Alternatively, the thin client may access the web server  via the public switched telephone network , where an IP gateway includes a voice over IP interface  that sends information to the server  using an HTTP connection  via a firewall .","Since the skinny clients and tiny clients  do not have browser resources, the skinny clients and tiny clients  access the proxy browser  via the PSTN  and the IP gateway . The IP gateway includes both a proxy browser  and a voice resource , enabling the IP gateway  to provide all audio control service for the skinny clients and tiny clients . Hence, the PSTN  is used merely for transfer of analog audio signals, with intelligent application processing being provided by the proxy browser . Note that if one of the telephones \u2032 is an IP telephone, then it can access the server  via an IP connection ; in this case, the browser internal to the IP telephone \u2032 processes only audio functions, and ignores any tags associated with text or image content.","As shown , the web server , the application server , and the voice web applications  reside within a gateserver . The gateserver  includes a browser based XML editor tool  that enables a web programmer to design voice applications using XML pages. The XML pages are stored as XML applications and functions , for example within a document database accessible by the application server . The XML pages stored within the XML application and functions database  may be stored as static pages to be fetched by the web server  and supplied to a browser, however the XML pages may also define the actual application to be executed by the application server  in runtime.","According to the disclosed embodiment, the browsers  and  provide audio control for voice enabled web applications based on the HTML-XML pages supplied by the application server  to the web server  for transport across an HTTP connection.","The application server  executes stored XML applications, also referred to generally as a web applications, in response to HTML requests from the user. In particular, four types of XML documents are used by the application server  to execute web applications: menu documents, activity documents, decision documents, and \u201cbrownies\u201d. The menu documents, activity documents, and decision documents are XML documents that define user interface and boolean-type application logic for a web application, hence are considered \u201cexecutable\u201d by the application server . The brownie document is an XML data record used to specify application state and user attribute information for a given XML application during a user session. During execution of the stored XML applications, the application server  stores the \u201cbrownie\u201d in a registry .","Hence, the XML documents define user interface logistics and tie services and application server events together in a meaningful way, forming a coherent application or sets of applications. Additional details regarding the definition of executable voice applications using XML documents are described in the above-incorporated application Ser. No. 09\/501,516.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 3","FIG. 3"],"b":["66","66","66","220","96","100","66","222","66","64"]},"The application server  also includes a runtime environment  for execution of the parsed XML documents. As described above, the runtime environment  may selectively execute any one of user interface operation , a logic operation , or a procedure call  as specified by the parsed XML document. In particular, the application runtime environment  includes a tag implementation module  that implements the XML tags parsed by the XML parser . The tag implementation module  performs relatively low-level operations, for example dynamically generating an XML menu page in response to detecting a menu tag, performing a logical operation in response to a decision tag, or fetching an audio (.wav) file in response to detecting a sound tag. Hence, the tag implementation module  implements the tag operations that are specified within the XML framework of the stored XML documents.","The application server  also includes a set of libraries  that may be implemented as dynamically linked libraries (DLLs) or application programming interface (API) libraries. The libraries  enable the runtime environment  to implement the procedures  as specified by the appropriate XML document. For example, the application server  may issue a function call to one of a plurality of IP protocol compliant remote resources , , or  according to protocols based on IMAP (Internet Message Access Protocol), LDAP (Lightweight Directory Access Protocol), or SMTP (Simple Mail Transfer Protocol), respectively. For example, the PHP hypertext processor includes executable routines capable of accessing the IMAP or LDAP services. Note that the mechanisms for accessing the services , , or  should be established within the application server  before use of XML documents that reference those services.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 4","FIG. 4"],"b":["102","102","102","104","66","104","102","102"]},"The application server  also generates XML tags  and  that specify attributes for the user. These tags are data fields as retrieved by an application instance and stored in the brownie in order to maintain persistence. For example, the XML tag  identifies the user identifier as \u201cuser\u201d, where the value \u201cuser\u201d specifies a unique user ID. The unique user ID in tag  may be used as the login to an IMAP mailbox, an ID for a pager, and the like. The XML tag  specifies a password state for the corresponding user; for example the XML tag  may specify the password to be entered by the user (e.g., \u201cabxy\u201d), or alternately the XML tag  may specify that the user has already been authenticated during a previous interaction during the same user session specified in the session identifier .","The application server  also generates an XML tag  that specifies the application state with the user. For example, the state \u201cXML_Menu_State\u201d specifies that the last page executed by the application server  for the corresponding session ID \u201c12345\u201d was the XML application page \u201cmain.xml\u201d. Hence, the application server , upon determining that the prior application state was \u201cmain.xml\u201d, may be able to determine the next subsequent page that needs to be generated for the user session based on the user input. For example, if the user input was a value of \u201c2\u201d, the application server  would be able to interpret the input as selection \u201c2\u201d from a previously supplied main menu; hence, the application server  could execute the XML application that corresponds to selection \u201c2\u201d from the main menu of the user session, providing the perception to the user of a state-full interactive voice application.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 5","FIG. 5"]},"The method begins in step  by the application server  initiating execution of the first web application instance in response to receiving an HTML request from a user. Specifically, the web application instance is initiated by the application server  in response to reception of a standard HTTP form post to a URL containing a session identifier. Alternately, a new session may be initiated upon detection of a standard HTTP form post to a default URL.","In response to detecting the session identifier in the HTML request, the application server  in step  searches for a brownie  in the storage registry  that corresponds to the session identifier contained in the query string of the post URL. Alternatively, the session identifier may be specified in a cookie supplied by the browser  or  along with the HTTP request (e.g., the standard HTTP form post to the default URL). If in step  the application server  determines that the brownie does not exist for the supplied session identifier, the application server  generates a new session in step  and returns a new URL containing the valid session identifier (alternately, the new session ID may be supplied in a cookie to the browser). However, if in step  the application server  determines that a brownie  exists for the corresponding session identifier , the application server  in step  parses the brownie  into an internal memory as an associative array.","The application server  then begins execution in step  of a selected web application instance based on the user input and the application state  supplied in the corresponding brownie . The application server  selectively adds and removes state information from the associative array, used to temporarily store state and user attribute information, during the execution of the web application instance in step . Upon completion of the execution of the web application instance in step , the application server  converts the information stored in the associative array back into a brownie format , stores the brownie back into the registry , and terminates the executed web application instance.","Hence, the application server  is able to maintain state information for a user session, giving the appearance of a single, interactive application. The application server  actually executes separate web application instances for each user request, using the data record  to maintain application state and user attribute information. Hence, the application server  can provide the appearance of an interactive voice response system that provides intelligent decisions based on the user profile and based on the current position of the user within a menu structure.","The application server  may also include an aging function, where data records  are removed from the registry  in step  after a prescribed time interval has passed in step . This aging function not only controls the storage requirements for the registry , but also provides enhanced security by maintaining the data records  for a limited period of time, for example five minutes; hence, any hackers that may access the brownies  will be unable to utilize the compromised brownies  once the prescribed time interval has passed.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 6","b":["300","301","304","305","66","96","62","306","301","303","62","304","302","301","302","302","304","308","102","4","304","66","304","100","3","304","301","66"]},"The persistent process  is in communication with the event subscriber database , which includes profile information for subscribers to an event notification service provided by the event notification application . In one embodiment, the persistent process  accesses the event subscriber database  over the Internet through the network interface . In another embodiment, the persistent process  accesses the event subscriber database  through a network connection other than the Internet, or the event subscriber database  is part of the persistent server . In a further embodiment, the event subscriber database  is an LDAP directory including subscriber information.","The application server  includes an application runtime , an application server network interface , an event notification application  capable of execution in the application runtime  on the application server , implemented, in one example, as a voice enabled XML application stored in the document database . The document database  is associated with the application server , in one embodiment, and includes application defining documents , implemented, in one example, as XML documents, that define the event notification application . The network interface  provides communication through a network, such as the Internet, to the proxy browser , document database , and application-state database . In one embodiment, the network interface  also provides a communication connection to the persistent server  and the event subscriber database .","The client device  is a limited communication device, for example, a handheld computing device , a pager , or a telephony device. The telephony device can be, for example, a cordless telephone , a fax machine having an attached telephone , an analog telephone , or cellular telephone ","In one embodiment, a computer program product  including a computer readable medium (e.g. one or more CDROM's, diskettes, tapes, etc.) provides software instructions for the persistent process  and\/or event notification application . The computer program product  can be installed by any suitable software installation procedure, as is well known in the art. In another embodiment, the software instructions for the persistent process  and\/or event notification application  can also be downloaded over a wireless connection. A computer program propagated signal product  embodied on a propagated signal on a propagation medium (e.g. a radio wave, an infrared wave, a laser wave, sound wave, or an electrical wave propagated over the Internet or other network) provides software instructions for the persistent process  and\/or event notification application . In alternate versions, the propagated signal is an analog carrier wave or a digital signal carried on the propagated medium. For example, the propagated signal can be a digital signal propagated over the Internet or other network. In one embodiment, the propagated signal is a signal that is transmitted over the propagation medium over a period of time, such as the instructions for a software application sent in packets over a network over a period of seconds, minutes, or longer.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 7","FIGS. 8A through 8D","FIG. 8A","FIGS. 8B through 8D","FIG. 8B","FIG. 8C","FIG. 8D"],"b":["400","300","306","6","7","500","308","312","520","560"]},"Further details of the method  will now be provided with reference to FIG. . In step , an independent or persistent process  monitors incoming data for the occurrence of an event. In one example, the persistent process  can be a shipping monitor program or process that monitors the shipment and delivery of overnight packages for a user who is interested in knowing that a shipment has been delivered to a destination. The shipping monitor program notices the occurrence of the event. For example, the shipping monitor program monitors a web site or accesses a database provided by an overnight delivery service to check on events of interest to a user, based on the user's account number, or other identifying information.","In step , the persistent process  provides an application-state data record - (see ) specifying a session of an event notification application  and stored in the application-state database . First, the persistent process  accesses the event subscriber database  to obtain profile information, such as the telephone number of the event subscriber's client device . The persistent process  then uses the profile information from the event subscriber database  when creating the application-state data record -.","For example, the shipping monitor program creates an application state XML document or brownie , as shown in , specifying a new session of the event notification application . The application state document  has a session identification number associated with it, such as \u201c11223344\u201d. The XML document  includes an XML state file  that indicates the initial state of the event notification application , a target phone number , a shipping time , and a shipment number . The shipping monitor program retrieves the target phone number  from the event subscriber database  to indicate a client device  to be called for the event subscriber who is interested in the event that has occurred.","In step , the persistent process  then provides an event indicator - (see ) capable of activating the session of the event notification application  based on the application-state data record - to the proxy browser .","For example, the shipping monitor builds a URL such as the following:","http:\/\/appserver1.domain.com\/appserver.app?RESUME:XML:11223344","The shipping monitor then sends the event indicator -, including this URL, to the proxy browser . The proxy browser  receives the event indicator - and interprets the URL. Based on the URL, the proxy browser  opens a socket to \u201cappserver1.domain.com\u201d, which is the Internet address for an application server  that is capable of initiating a session of an event notification application .","In step , the proxy browser  provides an event indicator - to the application server . For example, the proxy browser  requests. \u201cappserver.app?RESUME:XML:11223344\u201d, which is a request to start a session of an event notification application  (indicated in this example by the \u201cappserver.app\u201d) using the application-state data record - (e.g. application state document  shown in ) indicated by the session ID, \u201c11223344\u201d.","In another embodiment, the persistent process  sends the event indicator  as a message to an IMAP directory, which is then provided as a message to the application server . In other embodiments, the persistent process  uses other messaging, electronic mail, or communication services to provide the event indicator  to the application server . In further embodiments, the event indicator  includes the application-state data record - (or equivalent information), and the persistent process  is not required to store the application-state data record - in the application-state database .","In step , the application server  activates a session of the event notification application  based on the application-state data record - retrieved from the application-state database . For example, the application server  first accepts the event indicator -, which includes the request to start the session of the event notification application . The application server  then locates the application state document  with the session ID 11223344, and retrieves it from the application-state database . The application server  then loads the XML state file  indicated in the application state document . This XML state file  is SHIPPING_NOTIFY_SETUP_CALL.xml , illustrated in FIG. B. Because the SHIPPING_NOTIFY_SETUP_CALL.xml file  is a decision type of application defining document , as indicated by the Type menu variable , the application server  executes the call_setup API  indicated in the Action option. The call_setup API  is passed \u201cB|Target_PhoneNumber\u201d, which indicates to use the value of the target phone number  found in the brownie  (see FIG. A), which is \u201c8885550000\u201d, which is the telephone number in this example for a client device .","In step , the proxy browser  receives a response - from the application server . For example, the application server  sends a response - to the proxy browser  that directs the proxy browser  to make a phone call to \u201c888-555-0000\u201d based on the target phone number  retrieved by the call setup API  from the application state document , as described above. The application server  then loads the MENU:SHIPPING_OUTCALL_PENDING.xml file  from option  in the SHIPPING_NOTIFY_SETUP_CALL.xml file . The MENU:SHIPPING_OUTCALL_PENDING.xml file  is illustrated in FIG. C.","In step , the proxy browser  contacts the client device . For example, the proxy browser  then makes the phone call to the client device .","In step , the proxy browser  makes an acknowledgment to the application server  based on the first response - . For example, the proxy browser  sends an acknowledgment to the application server  with one of the values indicated in MENU:SHIPPING_OUTCALL_PENDING.xml file , such as \u201cMAKECALL_NO\u201d , indicating that the call was not made, \u201cMAKECALL_OK\u201d , indicating that the call was completed, or \u201cTIMEOUT\u201d , indicating that the call was not completed before a time out period. Assuming the user answers the client device , then the proxy browser  then posts MAKECALL_OK to the application server .","In step , the application server  provides a second response - (e.g. event notification) to the proxy browser . For example, the application server  loads the application defining document  indicated in the MAKECALL_OK option  of the MENU:SHIPPING_OUTCALL_PENDING.xml file . This application defining document  is SHIPPING_PLAY_INFORMATION.xml  (see FIG. D). The application server  then provides the second response -, based on the SHIPPING_PLAY_INFORMATION.xml . This response - is an HTML page providing audio output files generated from SHIPPING_PLAY_INFORMATION.xml . The condition value  in SHIPPING_PLAY_INFORMATION.xml  causes the application server  to invoke the shipping_playinfo API , which provides a message \u201cYour package number ______ will be here in ______ minutes.\u201d The application server  recovers the shipment number  and shipping time  from the application state document , inserts them into the message, and provides the message in an audio file to be included in the HTML page returned as a response - to the proxy browser . The application server  also includes a second audio file in the HTML response - that plays the prompts indicated in the text menu variable  in SHIPPING_PLAY_INFORMATION.xml .","In step , the proxy browser  provides an event notification, such as audio output , to the client device . For example, the proxy browser  plays the audio files in the second response - from the application server  for transmission to the client device . For example, the proxy browser  plays the two audio files based on SHIPPING_PLAY_INFORMATION.xml , as described above, so that the user of the client device  hears the following:","\u201cYour package number 1442Z4E6 will be here in 15 minutes.","To inquire about another shipment, press 1.","To set up how you want to be notified, press 2.\u201d","While this invention has been particularly shown and described with references to preferred embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined by the appended claims.","For example, the proxy browser , persistent server , application-state database , event subscriber database , and application server  are not required to be connected by the Internet, but may be connected by other types of network or direct line connections, as is known in the art. Also, the various combinations of functions and capabilities of the proxy browser , persistent server , application-state database , event subscriber database , and application server , as described herein, can be implemented on one computer system, rather than separate computer systems, or on many computer systems, such as in a distributed object or other distributed computing approach.","In addition, the persistent process  can be implemented as a hardware circuit, such as an ASIC (application specific integrated circuit) or implemented as part of some server computer other than the persistent server . For example, the persistent process  can be implemented to execute on an electronic mail server to monitor users'mail messages as they are received by the electronic mail server."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular description of preferred embodiments of the invention, as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, emphasis instead being placed upon illustrating the principles of the invention.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 7","b":"6"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIGS. 8A through 8D","FIG. 7"]}]},"DETDESC":[{},{}]}
