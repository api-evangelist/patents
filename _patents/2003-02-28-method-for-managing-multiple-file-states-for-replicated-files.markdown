---
title: Method for managing multiple file states for replicated files
abstract: A server file replication technique is implemented with three local copies of a replicated file. First, a shadow file is a copy of the last known good version of the file on the server. Second, a local copy is the user's working copy. Whatever changes the user has made to the file are stored in the local copy. Third, a rollback file is a copy made of the local copy if the local copy changes (for example, when conflicts are resolved or the server version is copied to the local copy.) Different states exist, based on whether these copies contain differences from each other and from the server version, and based on the user's use of the document. These states guide what is done to maintain the local copies and whether conflict resolution is required.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08010491&OS=08010491&RS=08010491
owner: Microsoft Corporation
number: 08010491
owner_city: Redmond
owner_country: US
publication_date: 20030228
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","CONCLUSION"],"p":["This patent application relates to commonly assigned copending U.S. patent application Ser. No. 10\/376,738, filed Feb. 28, 2003 and entitled \u201cManaging File Replication in Applications.\u201d","This invention relates to the field of document management, and in particular to a method and system for managing multiple file states during the use of a file copied from a server.","It is common practice in a networked computer environment for a computer user to collaborate on a document with another user on the network. Such a network may be a local area network (LAN), wide area network (WAN), the Internet or the like. In such a collaboration, each user may create and edit an electronic file by using a software application such as general application software, software designed specifically for the type of file that is the object of the collaboration, or the like.","A collaboration may be made possible by maintaining a master version of the electronic file in a location that is accessible to all users who will be collaborating on the file. In a conventional networked computer environment, there may exist a server computer and one or more user computers. The server is accessible to each user computer and therefore may store and control the master version of the file being collaborated on by the users.","When collaborating on an electronic file, a user accesses the file on the server. The user may then work on the file by altering the file in any way made available to the user by the application. For example, if the application is a word processor, spreadsheet, database, and\/or the like, the application may provide means for performing tasks such as appending to, editing, copying, and\/or deleting the file. At the completion of any alterations, the user may save changes to the version of the file stored on the server if the user wishes to retain such alterations to the file and has the requisite permissions.","While having a centrally-stored file is good for collaboration, requiring access to the server has a downside. A user must be connected to the server in order to access the server copy of the file. Replication engines are used to solve this problem. Such engines allow the user to have a local copy of the file on the server. This local copy allows the user to work with or view the file even when the server copy is not accessible. The replication engine manages the replication of the server state of the file to the user's local machine, giving the user offline access while attempting to maintain consistency between the server copy and the local copy.","This solution, however, has drawbacks, however, and such consistency is difficult or impossible to maintain using existing replication engines. The version of the file on the server computer may change while the user is not connected. For example, the version of the file on the server may be version A. This version A is copied to the user's computer by the replication engine. When the user is \u201coffline\u201d (disconnected from the server), the user edits the file, producing version B. Meanwhile, a second user edits the server copy of the file, creating version C. When the user again connects to the server, the user will have access to the user's current version (B) and the server version (C). Current replication engines provide only the ability to copy the user's version over the server version, in which case the second user's changes are lost, or to copy the server version over the user version. No information is available for the user regarding changes from version A. If the user synchronizes by saving version C and abandoning changes, version B will no longer be accessible to the user.","Because of these drawbacks, an improved way of managing replicated files from a server is desirable.","A server file replication technique is implemented which stores three copies of a replicated file. These three files allow improved conflict resolution for the user.","The shadow file is a copy of the last known good version of the file on the server. When the file is initially copied from the server, an extra copy is made to the shadow file. The shadow file is brought to the local machine to improve performance in synchronization and conflict management as well as afford an offline experience. The shadow file is updated from the server copy any time that a connection exists to the server and the server copy has changed from the version contained in the shadow copy. This is the only time this file is updated.","The local copy is the user's working copy. Whatever changes the user has made to the file are stored in the local copy. This local copy is used to update the server (in the case that the user's changes need to be pushed to the server) or to identify conflicts (when both the user's and the server versions have changed.)","A rollback file is also stored. This rollback file is a copy made of the local copy if the local copy changes (for example, when conflicts are resolved or the server version is copied to the local copy.) This copy ensures the ability to return the user to the last known copy that the user has seen.","Overview","A server file replication technique is implemented which stores three copies for each file on a server for while replication is in use. A local file stores is the user's working copy of the file. The shadow file is a copy of the last known good version of the server file (the version of the file on the server.) A rollback file stores a copy of the last local copy before a conflict resolution or replication has updated it.","When the file is initially copied from the server as the local copy, an extra copy is made to the shadow file. This is done in order to improve synchronization performance and implement conflict management.","When the user's computer is connected to the server, replication occurs. The shadow file is compared to the server version. If they are the same, then no update has been made to the server version of the file since the last synchronization. If they are not the same, the server version is copied to the shadow version. The local version is saved to rollback, and the shadow version is saved to the local version.","Versioning states track the state of changes to the local and server files. Information regarding versioning states and options for conflict management are provided to the user.","Exemplary Computing Device",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},"Although not required, the invention can be implemented via an operating system, for use by a developer of services for a device or object, and\/or included within application software that operates according to the invention. Software may be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, appliances, lights, environmental control elements, minicomputers, mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network\/bus or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices, and client nodes may in turn behave as server nodes.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer system . Components of computer system  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer system  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer system  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, Random Access Memory (RAM), Read Only Memory (ROM), Electrically Erasable Programmable Read Only Memory (EEPROM), flash memory or other memory technology, Compact Disk Read Only Memory (CDROM), digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer system . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer system , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer system  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer system . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer system  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory . GPUs , however, are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer system . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computer systems may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer system  may operate in a networked or distributed environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer system , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks\/buses. Such networking environments are commonplace in homes, offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer system  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer system  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer system , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web-enabled interface for applications and computing devices, making computing activities increasingly Web browser or network-oriented.","For example, MICROSOFT\u00ae's .NET platform includes servers, building-block services, such as Web-based data storage and downloadable device software. While exemplary embodiments herein are described in connection with software residing on a computing device, one or more portions of the invention may also be implemented via an operating system, application programming interface (API) or a \u201cmiddle man\u201d object between any of a coprocessor, a display device and requesting object, such that operation according to the invention may be performed by, supported in or accessed via all of .NET's languages and services, and in other distributed computing frameworks as well.","Managing Multiple File States for Replicated Files Replication","With reference to , a server computer  is connected via network  to user computer . When the request is received by the server, the server allows the user computer  to open the file. File replication allows the user computer  to work, along with users on other user computers , on a local version of a server file. The authoritative version of the file is stored as server copy  on server computer . File replication manager  creates three copies of the file in user computer . These are the local copy , the shadow copy , and the rollback copy .","The local copy  is opened on the user computer  by an application . In one embodiment, there is a copy of the local copy  in the user's namespace  on user computer . In this embodiment, the local copy  tracks changes in a namespace copy  and the namespace copy  is used by application .","Where a namespace copy  is used, the namespace copy  isn't managed by the file replication manager . In this embodiment, the namespace copy  is a file that the user generally accesses. This file could be a file that they've created or a file that they've received via e-mail. Where the file is received via e-mail, the user receives an \u201calways live attachment\u201d (with server information) and save a copy to their local computer. Just the act of saving this file means that there are two copies, the one in the mail store and the one on the local machine. The local machine copy is the namespace copy . The server information in the attachment allows for file replication and the creation of the local copy , the shadow copy , and the rollback copy . Namespace copies are synchronized by the replication manager  with the local copy  when they are being used by a user.","The shadow copy  maintains the version of the server copy  last known to user computer . When the user computer  is connected to the server computer , the shadow copy  is the same as the server copy .","The rollback copy  stores the last known copy that the user has viewed or edited. When the local copy  has been overwritten in the replication process but the user wishes to return to the previous state, the rollback copy  is used to provide the last copy the user has read or edited.","The file replication manager  may be separate from the application , as shown, or it may be integrated into application . In either case, messages and information for the user from the file replication manager, and user interfaces collecting user input and displaying messages for the user may be integrated into the display presented to the user application . Information presented to the user regarding changes made between two version of a file (further described below) may also be presented using the display of application . Additionally, the production of such information for display to the user may utilize functionality of application .","Versioning States","The action of the file replication techniques according to one embodiment of the invention can be understood by reference to versioning states. For each replicated document, a versioning state describes what is occurring with the document at user computer . These versioning states are based on previous versioning states and the actions occurring in the local copy , the shadow copy , and the server copy  (the master copy of the document).","The first state is \u201ccurrent\u201d. The versioning state is current when the local copy  is the same as shadow copy . For example, when a file which is saved on user computer  is uploaded to server computer  for collaboration, the local copy  is the same as shadow copy . Similarly, when a file on server computer  is first replicated to user computer , the local copy is equal to shadow copy . As shown in the state diagram of , when a change is made to the local copy , so that it is no longer the same as shadow copy , the state transitions from \u201ccurrent\u201d state  to \u201cmodified\u201d state . When this modification is pushed up to the server or abandoned, so that the local copy  is again equal to the shadow copy , then the state returns to \u201ccurrent\u201d state .","When the user computer  is connected to server computer  and notes that the server copy  has been updated, a copy of the new server copy  is made to shadow copy . The local copy  is saved as rollback copy , and the shadow copy  is then copied to local copy . In one embodiment, the last copy viewed by the user is tracked. Thus, if the user has viewed version A, and version B is downloaded from the server, the rollback will be a copy of version A. But if version C now is downloaded from the server, the rollback will not be changed to version B unless version B has been accessed by the user. Thus the rollback holds the last version looked at by the user.","As seen in , if a server file change is downloaded to the shadow file and a rollback copy is stored, and the state is \u201ccurrent\u201d state , the new state will be \u201crollback available\u201d . If, however, this occurs in \u201cmodified\u201d state , then there have been both local changes to the a previous version of the server copy, which are saved in the local copy , and some other changes (from other users) resulting in a new version of the server copy . This results in the \u201cconflicted\u201d state .","When a \u201cconflicted\u201d state  occurs, a resolution of the two possibly divergent sets of changes in local copy  and shadow copy  must occur. For example, the user could choose to abandon changes which had been made in local copy  or to overwrite the changes. The file resulting from this resolution is stored as local copy , and the state returns to \u201cmodified.\u201d As noted previously, when the changes in local copy  are pushed up to the server or abandoned in favor of the current server copy, the state is changed to \u201ccurrent.\u201d","Uploading Changes to the Server","In each of the versioning states, synchronization options are available to a user. These options may be separately available from the file replication manager  or may be integrated into application . If changes have been made, uploading (or \u201cpushing\u201d) the changes to the server copy  is one option. This synchronization option allows the user to connect to the server computer  (if a connection is available) and synchronize the local copy  with the server copy .","If the versioning state is current  or rollback available , then no modifications have been made, and so no file is pushed to the server. If the versioning state is the modified state , the differences between the local copy  and the shadow copy  are determined. This process is known as \u201cgenerating a diff\u201d (for difference) of the two files. If the versioning state was modified state , the shadow copy  is the same as the server copy  (otherwise the versioning state would be conflicted state ). Therefore the entire file does not need to be uploaded to the server\u2014a file which includes all information regarding differences between the local copy  and shadow copy  contains all necessary information. This diff file is used by server computer  to update the server copy . Once the server copy  is updated, it should be copied to the shadow copy  and the versioning state changed appropriately.","The generation of the diff file may be done off-line. The user may decide to request synchronization at a time when the server computer  is not reachable from the user computer . If this happens, then the diff may be created and the action queued so that next time the server computer  is accessible, the uploading process may continue.","If the versioning state is conflicted state , then a conflict user interface must be begun. This conflict user interface should allow the user to resolve the differences between the local copy  and the shadow copy , for example, by saving the local copy  elsewhere on user computer  and copying the shadow copy  as the new local copy . The user interface may also be a more complex interface, as described in the related application listed above.","In one embodiment, checks are made to ensure that no local change has been made when the file is in the current state  or the rollback available state , and to ensure that the upload of the diff file was successful. If these checks fail, a modified state  or conflicted state  should result.","Rollback Version","Another option available to the user is when the versioning state is rollback available  or modified . A user interface will then be available to the user which will allow them to roll back to the version of the document previously viewed or edited by the user, which is stored in rollback copy .","In one embodiment, the user interface is displayed to the user, indicating that the document has been updated by another user. The user interface allows the user to select the previous version, stored in the rollback copy , or to view the differences between the previous version, stored in the rollback copy , and the current version, stored in local copy .","The rollback copy is only present in some embodiments of the invention. As shown in , file replication of a server file occurs on a user computer according when a local copy is stored (step ) and a shadow copy is stored (step ). Access is permitted to the local copy for modification (step ). In some embodiments, this is done through a namespace copy of the local copy. When the user computer is connected to the server computer and the master file changes, then the shadow copy is updated (step ). In one embodiment, versioning states are tracked for the replication.","Where the rollback copy is kept, as shown in , again, file replication of a server file occurs on a user computer according when a local copy is stored (step ) and a shadow copy is stored (step ). Access is permitted to the local copy for modification (step ). When the user computer is connected to the server computer and the master file changes, then the shadow copy is updated (step ). In this step, when the shadow copy is updated, the rollback copy is also updated, if necessary. First, the local copy is stored as the rollback copy, and the local copy is then updated with the shadow copy. In one embodiment, this is done only if the local copy has been accessed since the previous rollback.","The file replication manager  may be a separate application or may be wholly or partially integrated into the application used with the file being replicated.","As mentioned above, while exemplary embodiments of the present invention have been described in connection with various computing devices and network architectures, the underlying concepts may be applied to any computing device or system in which it is desirable to implement collaboration via server. Thus, the methods and systems of the present invention may be applied to a variety of applications and devices. While exemplary programming languages, names and examples are chosen herein as representative of various choices, these languages, names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same, similar or equivalent systems and methods achieved by the invention.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the signal processing services of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","The methods and apparatus of the present invention may also be practiced via communications embodied in the form of program code that is transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via any other form of transmission, wherein, when the program code is received and loaded into and executed by a machine, such as an EPROM, a gate array, a programmable logic device (PLD), a client computer, a video recorder or the like, or a receiving machine having the signal processing capabilities as described in exemplary embodiments above becomes an apparatus for practicing the invention. When implemented on a general-purpose processor, the program code combines with the processor to provide a unique apparatus that operates to invoke the functionality of the present invention. Additionally, any storage techniques used in connection with the present invention may invariably be a combination of hardware and software.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. Furthermore, it should be emphasized that a variety of computer platforms, including handheld device operating systems and other application specific operating systems are contemplated, especially as the number of wireless networked devices continues to proliferate. Therefore, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of preferred embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary embodiments of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
