---
title: Mobile device with local server
abstract: A method for operating a mobile computing device includes running a platform-independent application program using a virtual machine operating on the mobile computing device. A server program runs on the mobile computing device so as to access a native function of the mobile computing device that is not supported by the virtual machine. The native function is invoked from the application program by opening a communication connection to the server program using a communication application programming interface (API) of the virtual machine, and sending a message to the server program via the communication connection, so as to cause the server program to access the native function.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07568203&OS=07568203&RS=07568203
owner: Telmap Ltd
number: 07568203
owner_city: Herzlia
owner_country: IL
publication_date: 20040618
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The present invention relates generally to software applications for mobile computing devices, and specifically to enhancing the functionality of applications that run in a virtual machine environment.","Java\u2122 is a platform-independent programming language, developed by Sun Microsystems. An integral component of the Java architecture is the Java Virtual Machine (JVM), which is available on numerous computing platforms in order to provide Java with a high level of platform-independence. The Java 2 Platform, Micro Edition (J2ME\u2122), specifies a scaled-down version of the JVM, known as the K Virtual Machine (KVM), which is designed for mobile wireless information devices such as cellular telephones and personal digital assistants (PDAs).","J2ME currently provides two configurations: Connected Limited Device Configuration (CLDC) and Connected Device Configuration (CDC). CDC was developed for more powerful devices, and therefore supports a full Java 2 Virtual Machine. CLDC is targeted at devices with limited memory and\/or processing power, and does not support the full set of standard Java 2 Standard Edition (J2SE) Application Programming Interfaces (APIs). CLDC includes a core development library and specifies the KVM. A Mobile Information Device Profile (MIDP) is layered on top of CLDC and defines a limited set of Java APIs that provide an application runtime environment for mobile information devices, such as mobile telephones and personal digital assistants (PDAs). These APIs, which have the form of classes grouped in class libraries, include the user interface, networking and messaging. MIDP applications that use the MIDP and CLDC APIs are known as MIDlets.","J2SE provides a Java Native Interface (JNI), which is a standard programming interface for writing Java native methods. \u201cNative\u201d in this sense refers to functions of the operating system (OS) that are not accessed via the standard Java APIs. The JNI permits programmers to take advantage of platform-specific functionality outside of the JVM by integrating native code with programs written in Java. Programmers can use the JNI to write native methods to handle situations in which an application cannot be written entirely in the Java programming language. It is useful particularly when the standard Java class library does not support platform-dependent features needed by the application. J2ME, however, does not provide JNI support.","Because of the lack of JNI support in J2ME, a programmer working in J2ME is not able to access directly native OS functionality. As a result, given the limited set of APIs that are available in J2ME, some mobile device functions are inaccessible to the programmer.","In response to these shortcomings, some embodiments of the present invention provide a native interface server, which runs in software on a mobile device alongside a virtual machine, such as the KVM. Platform-independent application programs, such as programs written in J2ME, communicate with the server using communication APIs that are provided by the virtual machine. These APIs invoke standard communication protocols that are also supported by the native OS. For example, the application program may use an API of the virtual machine to communicate with the server over a TCP connection, possibly using HTTP requests and responses. Alternatively, the application program may communicate with the server by sending and receiving User Datagram Protocol (UDP) packets, if supported by the KVM. Using the communication protocol, the application program may send a message to the server to call a certain native function. The server runs the function and then returns the results in a similar message to the application program.","Although the embodiments described herein make reference specifically to J2ME and the Java KVM, the principles of the present invention may similarly be applied to platform-independent applications that run on virtual machines of other sorts.","There is therefore provided, in accordance with an embodiment of the present invention, a method for operating a mobile computing device, including:","running a platform-independent application program using a virtual machine operating on the mobile computing device;","running a server program on the mobile computing device so as to access a native function of the mobile computing device that is not supported by the virtual machine; and","invoking the native function from the application program by:\n\n","In a disclosed embodiment, running the platform-independent application program includes running a Java program using a K Virtual Machine (KVM).","Typically, invoking the native function includes invoking an input\/output (I\/O) function of the mobile computing device that is not supported by the virtual machine. The I\/O function may include one or more of receiving data via a communication port of the mobile computing device, playing a sound, driving a display of the mobile computing device, and operating a backlight of a display of the mobile computing device.","Typically, invoking the native function includes interacting with a peripheral device.","In disclosed embodiments, opening the communication connection includes opening the connection using a network communication protocol. In one embodiment, using the network communication protocol includes opening a Transmission Control Protocol\/Internet Protocol (TCP\/IP) connection, and sending the message includes sending a Hypertext Transfer Protocol (HTTP) request to a Uniform Resource Identifier (URI) that is associated with the server program. In another embodiment, sending the message includes sending a User Datagram Protocol (UDP) packet.","Typically, the method includes sending a reply to the message from the server program to the application program returning a result of the native function.","There is also provided, in accordance with an embodiment of the present invention, a mobile computing device, including a microprocessor, which is programmed to run a platform-independent application program using a virtual machine operating, and to run a server program so as to access a native function of the mobile device that is not supported by the virtual machine, and which is programmed to invoke the native function from the application program by opening a communication connection to the server program using a communication application programming interface (API) of the virtual machine, and sending a message to the server program via the communication connection, so as to cause the server program to access the native function. The present invention will be more fully understood from the following detailed description of the embodiments thereof, taken together with the drawings in which:",{"@attributes":{"id":"p-0022","num":"0023"},"figref":"FIG. 1","b":["20","22","20","22","25","22"]},"In the exemplary application shown in , mobile device  typically comprises a cellular telephone or a personal digital assistant (PDA) with cellular communication capabilities. Device  comprises a microprocessor, which is programmed in software to carry out the functions described hereinbelow. The mobile device communicates over a wireless link with a server , in order to download maps and instructions for use by a driver of a vehicle. Device  comprises a serial port, which is coupled to receive position readings from a position sensor , such as a Global Positioning System (GPS) device. These position readings are used in determining the location of the vehicle relative to the map provided by server  and in generating instructions to the driver as the vehicle proceeds along its course. Device  renders the appropriate map segments to display , and may also provide verbal instructions to the driver via an audio speaker . Further details of this navigation method and system are described in U.S. patent application Ser. No. 10\/426,947, filed Apr. 30, 2003 (published as US 2003\/0229441 A1), now U.S. Pat. No. 6,917,878, whose disclosure is incorporated herein by reference.",{"@attributes":{"id":"p-0024","num":"0025"},"figref":"FIG. 2","b":["22","22","30","30","32","34","32","36","22"]},"OS  includes peripheral device drivers  for interfacing with peripheral devices (such as display  and speaker  within device , and I\/O interfaces to external devices such as sensor ). APIs  of virtual machine , however, do not enable application  to access these drivers. To overcome this limitation, a native interface server  runs in software on device . Server  typically runs as an application process on OS , alongside virtual machine . Software code for server  may be written in any suitable programming language, such as C or C++, using APIs provided by OS  to access peripheral devices , ,  via drivers . Thus, in the present example, server  may be capable of receiving GPS data through a serial port of device , rendering map images to display , and playing sounds via speaker .","OS  also provides a communication API  (or a set of communication APIs), which is used by both virtual machine  and server . Java application  is able to access the communication functions of API  via appropriate calls to Java APIs . Communication API  generally includes both transport- and session-layer support. At the transport layer, the communication API provides a Transmission Control Protocol\/Internet Protocol (TCP\/IP) stack, which is typically used in establishing TCP\/IP connections between applications running on mobile device  and external servers. Other protocols may also be supported. At the session layer, communication API  provides a Hypertext Transfer Protocol (HTTP) interface, which may be used by device  to communicate (over a TCP\/IP connection) with HTTP servers on the Internet.","In the present embodiment, on the other hand, communication API  is used internally, within device , to support communication between application  and server . This novel use of the communication API permits application  to access the native functions of OS  via the server. For example, in order to receive location data from GPS , application  may invoke a socket API (among APIs  of KVM ) in order to open a TCP\/IP connection. This API is normally intended for network communications, but in this case is invoked by application  in order to open an internal TCP\/IP connection to server . For this purpose, application  and server  typically have their own, separate ports. In response to the API call by application , KVM  invokes communication API  of OS  in order to open the desired connection.","Once the connection is opened, application  sends a message over the connection to server , indicating the name of the native function that application  would like server  to execute and the parameters of the function. A function \u201cGPS( ),\u201d for example, might cause the server to read data from GPS  via the serial port of device , and then return a message to application  giving the current reading. Other functions might cause the server to render a specified object to display  or play certain sounds via speaker .","Optionally, the message sent by application  may have the form of a HTTP request, using the HTTP functionality of APIs  and . The HTTP request in this case is directed to a known uniform resource identifier (URI) of server . A different URI may be defined for each of the native functions that the server is capable of performing. Server  then returns a message to application  in the form of a HTTP response. TCP\/IP and HTTP are generally convenient choices of protocols to use, since they are standardized, widely supported by different operating systems, and familiar to most programmers. Alternatively or additionally, other suitable protocols may be used for communication between virtual machine  and server .","Appendix A below provides an example of source code used for controlling the backlight of display  on device , in accordance with the methods described above. In this example, Java application  sends one byte to turn the backlight on, and another to turn it off. Server , based on the above-mentioned Symbian OS, listens for messages from the application (on port ) and performs the specified actions.","Although the embodiments described herein make reference specifically to J2ME and the Java KVM, the principles of the present invention may similarly be applied to platform-independent applications that run on virtual machines of other sorts. Furthermore, although the specific embodiment described above uses TCP to for communication between application  and server , other communication protocols, such as UDP, may alternatively be used for this purpose if supported by KVM  and OS . It will thus be appreciated that the embodiments described above are cited by way of example, and that the present invention is not limited to what has been particularly shown and described hereinabove. Rather, the scope of the present invention includes both combinations and subcombinations of the various features described hereinabove, as well as variations and modifications thereof which would occur to persons skilled in the art upon reading the foregoing description and which are not disclosed in the prior art.",{"@attributes":{"id":"p-0032","num":"0033"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"APPENDIX A"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SAMPLE SOURCE CODE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public class BacklightManager {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private static BacklightManager","backLight","= null;"]},{"entry":[{},"private final byte","BACKLIGHT_ON","= 100;"]},{"entry":[{},"private final byte","BACKLIGHT_OFF","= 101;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ the default port for the communication"]},{"entry":[{},"private final int PORT = 6789;"]},{"entry":[{},"private final String URL = \u201csocket:\/\/127.0.0.1:\u201d;"]},{"entry":[{},"\/\/ flag to tell us if we are connected or not."]},{"entry":[{},"private Boolean connected = false;"]},{"entry":[{},"\/\/ flag to tell us the state of the backlight"]},{"entry":[{},"private Boolean backLightOn = false;"]},{"entry":[{},"\/\/ those variables are for the connection"]},{"entry":[{},"\/\/ and communication with the server."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private StreamConnection","conn","= null;"]},{"entry":[{},"private DataInputStream","din","= null;"]},{"entry":[{},"private DataOutputStream","dout","= null;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/**"]},{"entry":[{},"\u2003* This function will connect us to the Symbian."]},{"entry":[{},"\u2003* We will open a connection and then write the on\/off"]},{"entry":[{},"\u2003* byte for backlight option."]},{"entry":[{},"\u2003*"]},{"entry":[{},"\u2003* @return status of connection"]},{"entry":[{},"\u2003*\/"]},{"entry":[{},"private synchronized boolean connect ( ) {"]},{"entry":[{},"\/\/ we check to see if the flag is true"]},{"entry":[{},"\/\/ in case that some thread was waiting for this"]},{"entry":[{},"\/\/ function and meanwhile another thread already"]},{"entry":[{},"\/\/ opened a connection."]},{"entry":[{},"\/\/ we also check to see if the connection was"]},{"entry":[{},"\/\/ closed for some reason."]},{"entry":[{},"if (connected && conn != null)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return connected;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"try {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ open connection"]},{"entry":[{},"conn = (StreamConnection) Connector.open (URL +"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"PORT, Connector.READ_WRITE, true);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ open the data input stream"]},{"entry":[{},"din = new"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"DataInputStream (conn.openInputStream ( ));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ open the data output stream"]},{"entry":[{},"dout = new"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"DataOutputStream (conn.openOutputStream ( ));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ set the connectivity flag"]},{"entry":[{},"connected = true;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} catch (Exception e) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"connected = false;"]},{"entry":[{},"e.printStackTrace ( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return connected;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"}"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public synchronized void start ( ) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ first check to see that the light is off"]},{"entry":[{},"if (backLightOn)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ try to connect."]},{"entry":[{},"\/\/ if we are already connected the function will"]},{"entry":[{},"\/\/ do nothing"]},{"entry":[{},"\/\/ since we check it in the connect method."]},{"entry":[{},"if (connect ( ))"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"try {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dout.writeByte(BACKLIGHT_ON);"]},{"entry":[{},"dout.flush ( );"]},{"entry":[{},"backLightOn = true;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} catch (IOException e) {"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/**"]},{"entry":[{},"\u2003* Stop the backlight"]},{"entry":[{},"\u2003* The stop simply turn on the flag by sending"]},{"entry":[{},"\u2003* byte to the symbian"]},{"entry":[{},"\u2003*"]},{"entry":[{},"\u2003* @return"]},{"entry":[{},"\u2003*\/"]},{"entry":[{},"public synchronized void stop ( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ first check to see that the light is off"]},{"entry":[{},"if (!backLightOn)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ try to connect."]},{"entry":[{},"\/\/ if we are already connected the function will"]},{"entry":[{},"\/\/ do nothing"]},{"entry":[{},"\/\/ since we check it in the connect method."]},{"entry":[{},"if (connect ( ))"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"try {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dout.writeByte(BACKLIGHT_OFF);"]},{"entry":[{},"dout.flush ( );"]},{"entry":[{},"backLightOn = false;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} catch (IOException e) {"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/**"]},{"entry":[{},"\u2003* This function will clean the flags we use"]},{"entry":[{},"\u2003* and will close all opened connections."]},{"entry":[{},"\u2003**\/"]},{"entry":[{},"public void destroy ( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ stop the backlight if its turn on"]},{"entry":[{},"stop ( );"]},{"entry":[{},"\/\/ set the flags to the initial state"]},{"entry":[{},"connected = false;"]},{"entry":[{},"backLightOn = false;"]},{"entry":[{},"try {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (conn != null)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"conn.close ( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (din != null)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"din.close ( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (dout != null)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"dout.close ( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} catch (Exception e) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ do nothing"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} finally {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"conn = null;"]},{"entry":[{},"din = null;"]},{"entry":[{},"dout = null;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0022"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
