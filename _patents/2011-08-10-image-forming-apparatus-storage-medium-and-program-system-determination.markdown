---
title: Image forming apparatus, storage medium, and program system determination
abstract: An image forming apparatus includes a memory configured to store programs installed in the image forming apparatus and having plural states; a condition storing unit configured to store at least one condition defining a set of states of one or more of the programs; a state obtaining unit configured to obtain state information indicating current states of the programs; and a condition examination unit configured to examine the condition based on the obtained state information to determine whether the condition is satisfied and to output a result of the determination.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08839250&OS=08839250&RS=08839250
owner: Ricoh Company, Ltd.
number: 08839250
owner_city: Tokyo
owner_country: JP
publication_date: 20110810
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present application is based upon and claims the benefit of priority of Japanese Patent Application No. 2010-188576, filed on Aug. 25, 2010, the entire contents of which are incorporated herein by reference.","1. Field of the Invention","A certain aspect of this disclosure relates to an image forming apparatus, a storage medium, and a program state determination system.","2. Description of the Related Art","A known image forming apparatus is configured such that applications programs or \u201cplug-ins\u201d (hereafter, simply called \u201capplications\u201d) can be additionally installed after the shipment (see, for example, Japanese Laid-Open Patent Publication No. 2004-312711). The states of the applications may change independent of each other. For example, it is possible to start and stop the applications independently. A started application changes into a started state that can be further classified into various states. Similarly, a stopped application changes into a stopped state that can be further classified into various states.","Accordingly, when multiple applications are installed in an image forming apparatus, the number of combinations of the states of the applications may become huge.","Meanwhile, in such an image forming apparatus, a service (or function) may be implemented by collaboration of multiple applications. To be able to provide such a service, all applications implementing the service need to be installed and started in the image forming apparatus.","However, since the states of applications can change independently as described above, it may happen that one of applications implementing a service has been started, but another one of the applications has not been started. For this reason, an administrator (user, serviceperson, or so on) needs to check the states of all applications implementing a service to determine whether the service is in normal operation. This in turn makes it necessary for the administrator to know the applications implementing the service.","Moreover, in an environment where multiple image forming apparatuses are managed via a network, the administrator needs to check the states of applications for each of the image forming apparatuses.","Accordingly, the workload of an administrator increases as the number of applications and the number of image forming apparatuses to be managed increase.","In an aspect of this disclosure, there is provided an image forming apparatus including a memory configured to store programs installed in the image forming apparatus and having plural states; a condition storing unit configured to store at least one condition defining a set of states of one or more of the programs; a state obtaining unit configured to obtain state information indicating current states of the programs; and a condition examination unit configured to examine the condition based on the obtained state information to determine whether the condition is satisfied and to output the result of the determination.","Preferred embodiments of the present invention are described below with reference to the accompanying drawings.  is a drawing illustrating an exemplary configuration of an apparatus management system  according to a first embodiment. As illustrated in , the apparatus management system  includes one or more image forming apparatuses  (for descriptive purposes, the image forming apparatuses  may be called the image forming apparatus  in the singular form), an apparatus management server , and a user terminal  that are connected via a (wired or wireless) network  such as a local area network (LAN).","The image forming apparatus  may be, for example, a multifunction peripheral including multiple functions such as printing, scanning, copying, and facsimile transmission and reception. Alternatively, the image forming apparatus  may be an apparatus providing any one of the functions. The image forming apparatus  may be configured such that applications (e.g., SDK applications  described later) can be installed and uninstalled to add and remove functions.","The apparatus management server  may be implemented, for example, by a computer and configured to remotely manage and\/or operate the image forming apparatuses  according to requests sent from the user terminal . For example, the apparatus management server  monitors the states of the image forming apparatuses  and the states of programs installed in the image forming apparatuses .","The user terminal  may be implemented by a computer including an input unit such as a mouse and a keyboard and a display unit such as a liquid-crystal display, and configured to function as a user interface for the apparatus management system . For example, the user terminal  allows the user to input a request to be sent to the apparatus management server  and displays information sent from the apparatus management server  in response to the request.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 2","FIG. 2"],"b":["20","20","200","202","203","204","205"]},"Programs for implementing various processes at the apparatus management server  may be provided by a storage medium  such as a CD-ROM, a DVD-ROM, or a USB memory. When the storage medium  storing programs is mounted on the drive unit , the programs are read by the drive unit  from the storage medium  and are installed in the secondary storage unit . The programs may not necessarily be installed from the storage medium , but may instead be downloaded via a network from another computer. The secondary storage unit  stores the installed programs and other necessary files and data.","The memory  temporarily stores programs retrieved from the secondary storage unit  when the programs are executed. The CPU  performs functions of the apparatus management server  according to the programs temporarily stored in the memory . The interface  connects the apparatus management server  to a network.","The apparatus management server  may be configured to be operated directly by the user. In this case, the apparatus management server  may further include an input unit and a display unit.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 3"],"b":["10","10","11","12","13","14","15","16","17"]},"The controller  may include a CPU , a RAM , a ROM , an HDD , and a non-volatile RAM (NVRAM) . The ROM  stores, for example, programs and data used by the programs. The RAM  is used, for example, as a storage area into which programs are loaded and as a work area for the loaded programs. The CPU  executes the programs loaded into the RAM  to implement various functions. The HDD  stores, for example, programs and data used by the programs. The NVRAM  stores, for example, various settings.","The scanner  is hardware (image scanning unit) for scanning a document to obtain image data. The printer  is hardware (printing unit) for printing print data on a recording medium such as paper. The modem  is hardware for connecting the image forming apparatus  to a telephone line and is used to send and receive image data for facsimile communications. The operations panel  is hardware including an input unit such as buttons for receiving user inputs and a display unit such as a liquid crystal display panel. The network interface  is hardware for connecting the image forming apparatus  to a (wired or wireless) network such as a LAN. The SD card slot  reads, for example, programs stored in an SD card . Thus, with the image forming apparatus  of this embodiment, in addition to the programs stored in the ROM , programs stored in the SD card  can be loaded into the RAM  and executed.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 4","FIG. 4"],"b":["10","10","151","152","153","154","155"]},"The standard applications  are default applications installed in the image forming apparatus  before the factory shipment. In the example of , the standard applications  include a scanning application , a printing application , a copying application , and a fax application . The scanning application  performs a scan job. The printing application  performs a print job. The copying application  performs a copy job. The fax application  performs a facsimile transmission job and a facsimile reception job.","The control service  is implemented by software modules that, for example, provide functions for controlling various hardware resources for upper-layer applications and perform fundamental functions of the image forming apparatus .","The SDK applications  (may be used in the singular form for descriptive purposes) are plug-in applications that are additionally installed to expand the functions of the image forming apparatus  after its factory shipment. Applications that provide any appropriate functions may be used as the SDK applications . The SDK applications  may be installed, for example, via the SD card  or a network into a storage unit or a memory (e.g., an HDD  or an NVRAM  described later) of the image forming apparatus .","The SDK platform  provides an execution environment for the SDK applications . The SDK applications  are developed using application programming interfaces (API) provided by the SDK platform . For example, the SDK platform  provides the SDK applications  with a scanning function interface, a print function interface, and a copy function interface. APIs provided by the SDK platform  may be made public to allow a third party to develop the SDK applications . Since the APIs are machine-independent, it is generally not necessary to modify the SDK applications  for different types (or models) of image forming apparatuses.","The OS  is an operating system. Software programs in the image forming apparatus  run as processes or threads on the OS .","The SDK applications  and the SDK platform  are described below in more detail.  is a drawing illustrating exemplary functional configurations of the SDK applications  and the SDK platform .","In the example of , the image forming apparatus  includes an SDK application and other SDK applications . In this embodiment, the SDK application functions as an application state management unit. Hereafter, the SDK application is called the application state management unit to distinguish it from other SDK applications .","The application state management unit manages the states of the other SDK applications . The application state management unit may include a communication control unit , a set condition management unit , a set condition examination unit , an application state obtaining unit , and a set condition storing unit .","The set condition storing unit  is implemented, for example, by a part of the NVRAM  and stores one or more set conditions. In this embodiment, a \u201cset condition\u201d defines a set of conditions or parameters indicating the states of one or more SDK applications . A combination of SDK applications  specified in a set condition is called an \u201capplication set\u201d. A combination of SDK applications  constituting an application set may be determined based on functional dependence or distribution-related relationships among the SDK applications . Functional dependence indicates, for example, a relationship where an SDK application  (application A) uses the function of another SDK application  (application B). A distribution-related relationship indicates, for example, a relationship where the application A and the application B are sold or marketed as a packaged product. In many cases, SDK applications  having a distribution-related relationship also have functional dependence. However, SDK applications  having a distribution-related relationship may not have functional dependence.","The set condition management unit  records or registers set conditions in the set condition storing unit , retrieves the set conditions from the set condition storing unit , and processes the set conditions.","The application state obtaining unit  obtains state information indicating the state of each SDK application  from the corresponding SDK application . In this embodiment, each SDK application  has various states and changes (or transitions) from one state to another in response to the occurrence of an event.","The set condition examination unit  determines whether the set conditions stored in the set condition storing unit  are satisfied (or met) based on the state information obtained by the application state obtaining unit .","The communication control unit , for example, receives a request to examine set conditions (to determine whether the set conditions are satisfied) from the apparatus management server  and sends the result of examination by the set condition examination unit  to the apparatus management server .","Each of the SDK applications  other than the application state management unit may include an application state reporting unit , an application state saving unit , and an application state storing unit .","The application state reporting unit  retains the current state of the corresponding SDK application  using, for example, the RAM . In other words, the application state reporting unit  stores and keeps state information indicating the current state of the corresponding SDK application  in the RAM . Also, the application state reporting unit  sends the state information stored in the RAM  in response to a request for the state information from the application state obtaining unit .","The application state saving unit  obtains the state information from the application state reporting unit  when the SDK application  changes to the stopped state, and writes (or saves) the obtained state information in the application state storing unit .","The application state storing unit  stores the state information using, for example, the NVRAM . More specifically, the state information of the SDK application  is stored in a storage area in the NVRAM  which is associated with the SDK application .","The SDK platform  may include a multifunction peripheral class library , a virtual machine , a native program interface , and an application management unit .","The multifunction peripheral class library  is a Java (registered trademark) class library that provides APIs. Requests submitted via the APIs may be transferred to the control service  as necessary. The results of processing performed by the control service  are returned to the multifunction peripheral class library . Then, the multifunction peripheral class library  converts the processing results into formats corresponding to the APIs and returns the converted processing results to the SDK applications .","The native program interface , for example, enables the multifunction peripheral class library  to transfer requests to the control service  using the Java Native Interface (JNI). That is, the native program interface  is necessary for communications between the multifunction peripheral class library  and the control service  that is written in native code.","The virtual machine  is a Java virtual machine that interprets and executes Java bytecode instructions. The SDK applications  are executed as threads by the virtual machine .","The application management unit , for example, manages life cycles of the SDK applications . For example, the application management unit  displays a management screen for allowing the user to operate the SDK applications . In response to user inputs on the management screen, the application management unit  installs, starts, stops, and uninstalls the SDK applications . The application management unit  also manages application list information containing a list of the SDK applications  installed in the image forming apparatus . The application list information may be stored, for example, in the NVRAM .","Here, the SDK platform  itself is also a type of application installed in the image forming apparatus . The SDK platform  may be installed, for example, via the SD card  or a network into the image forming apparatus . Unlike the SDK applications , the SDK platform  runs as a process on the control service .","Next, states of the SDK applications  are described.  is a table illustrating exemplary states of the SDK applications . In , \u201ca\u201d through \u201ci\u201d in the rightmost column are signs assigned to the respective states.","The states of an SDK application  may be roughly classified into a non-installed state \u201ci\u201d and an installed state. The non-installed state \u201ci\u201d indicates that the SDK application  has not been installed in the image forming apparatus . The installed state indicates that the SDK application  has been installed in the image forming apparatus .","The installed state may be classified into a started state and a stopped state. The started state indicates that the SDK application  has been loaded into the RAM  and started (e.g., the SDK application  is running as a thread). The stopped state indicates that the SDK application  is inactive.","The started state may be further classified into an active state \u201ca\u201d, a configuration-required state \u201cb\u201d, a restart-required state \u201cc\u201d, and an error state \u201cd\u201d. The active state \u201ca\u201d indicates that the SDK application  has been started and is able to normally perform a process. The configuration-required state \u201cb\u201d indicates that the SDK application  has been started, but is unable to normally perform a process because settings necessary for its operation have not been specified (e.g., immediately after the installation). The restart-required state \u201cc\u201d indicates that the SDK application  has been started, but the restart of the image forming apparatus  is necessary. For example, after settings of the SDK application  are changed, in some cases, it is necessary to restart the image forming apparatus  to reflect the changes to the operation of the SDK application . The error state \u201cd\u201d indicates that the SDK application  that has been started is not able to perform a process normally due to an error. Some SDK applications  may not have the configuration-required state \u201cb\u201d and\/or the restart-required state \u201cc\u201d.","The stopped state may be further classified into a standby state \u201ce\u201d, a configuration-required state \u201cf\u201d, a restart-required state \u201cg\u201d, and an error state \u201ch\u201d. The standby state \u201ce\u201d indicates that the SDK application  has been installed but is inactive. The configuration-required state \u201cf\u201d indicates that the SDK application  is inactive and settings necessary for its operation have not been specified. The restart-required state \u201cg\u201d indicates that the SDK application  is inactive and the restart of the image forming apparatus  is necessary. The error state \u201ch\u201d indicates that the SDK application  is inactive and an error has occurred. Some SDK applications  may not have the configuration-required state \u201cf\u201d and\/or the restart-required state \u201cg\u201d.","The states of the SDK application  change, for example, as illustrated in .  is a drawing illustrating exemplary state transition of the SDK application .","When an SDK application  in the non-installed state \u201ci\u201d is installed with an automatic start parameter set to ON, the SDK application  changes to the configuration-required state \u201cb\u201d. The automatic start parameter is used to specify whether the SDK application  is automatically started (ON) or not (OFF) after the installation.","When the SDK application  in the configuration-required state \u201cb\u201d is stopped, the SDK application  changes to the configuration-required state \u201cf\u201d. Then, the application state saving unit  of the SDK application  stores state information indicating the configuration-required state \u201cf\u201d in the application state storing unit . When the SDK application  in the configuration-required state \u201cf\u201d is started, the SDK application  changes to the configuration-required state \u201cb\u201d. Then, the application state reporting unit  of the SDK application  determines that the SDK application  is to change to the configuration-required state \u201cb\u201d based on the state information indicating the configuration-required state f stored in the application state storing unit  and stores state information indicating the configuration-required state in the RAM . When necessary settings are specified in the configuration-required state \u201cb\u201d, the SDK application  changes to the active state \u201ca\u201d.","When the SDK application  in the active state \u201ca\u201d is stopped, the SDK application  changes to the standby state \u201ce\u201d. Then, the application state saving unit  of the SDK application  stores state information indicating the standby state in the application state storing unit . When the SDK application  in the standby state \u201ce\u201d is started, the SDK application  changes to the active state \u201ca\u201d.","When an error occurs in the active state \u201ca\u201d, the SDK application  changes to the error state \u201cd\u201d. When the SDK application  in the error state \u201cd\u201d is stopped, the SDK application  changes to the error state \u201ch\u201d. Then, the application state saving unit  of the SDK application  stores state information indicating the error state \u201ch\u201d in the application state storing unit . When the SDK application  in the error state \u201ch\u201d is started, the SDK application  changes to the error state \u201cd\u201d. When the SDK application  in the error state \u201cd\u201d recovers from the error (or the error is corrected), the SDK application  changes to the active state \u201ca\u201d.","When the settings are changed in the active state \u201ca\u201d, the SDK application  changes to the restart-required state \u201cc\u201d. When the SDK application  in the restart-required state \u201cc\u201d is stopped, the SDK application  changes to the restart-required state \u201cg\u201d. Then, the application state saving unit  of the SDK application  stores state information indicating the restart-required state \u201cg\u201d in the application state storing unit . When the SDK application  in the restart-required state \u201cg\u201d is started, the SDK application  changes to the restart-required state \u201cc\u201d.","Meanwhile, when an SDK application  in the non-installed state \u201ci\u201d is installed with the automatic start parameter set to OFF, the SDK application  changes to the configuration-required state \u201cf\u201d. When necessary settings are specified in the configuration-required state \u201cf\u201d, the SDK application  changes to the standby state \u201ce\u201d.","The states and state transition rules of the SDK application  (how the SDK application  changes states) described above are just examples and the SDK application  may have states and state transition rules other than those illustrated in .","An exemplary process performed by the image forming apparatus  is described below.  is a sequence chart illustrating an exemplary process of examining set conditions according to the first embodiment.","In step S, in response to a request received from the user terminal , the apparatus management server  sends an examination request to request the image forming apparatus  to examine set conditions (to determine whether the set conditions are satisfied). The examination request may be sent to one or more image forming apparatuses  whose identification information (e.g., IP addresses) is registered in advance in the apparatus management server  or to one or more image forming apparatuses  that are specified in the request from the user terminal .","When receiving the examination request, the communication control unit  of the image forming apparatus  inputs the examination request to the set condition examination unit  (S). In response to the examination request, the set condition examination unit  requests the set condition management unit  to send an inquiry list (S). The inquiry list contains a list of the SDK applications  whose states are to be inquired about (or are necessary) to determine whether set conditions are satisfied. Then, the set condition management unit  refers to the set condition storing unit  and determines whether there are set conditions that need to be examined (S).",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIG. 9","FIG. 9"],"b":"165"},"The set condition name is an identifier of the corresponding set condition. The check flag indicates whether it is necessary to examine the set condition. When \u201con\u201d is specified for the check flag, the set condition needs to be examined; and when \u201coff\u201d is specified for the check flag, it is not necessary to examine the set condition.","The product ID is an identifier of an SDK application  included in the set condition. The state information indicates a state of the SDK application  corresponding to the product ID. When the actual state(s) of the SDK application(s)  matches the state information, the set condition is satisfied. One set condition may include two or more combinations of product IDs and state information. In this case, the set condition is satisfied when the actual states of all SDK applications  corresponding to the product IDs match the state information (i.e., a logical AND operation is performed). Alternatively, the set condition may be satisfied when at least one of the actual states of the SDK applications  matches the state information (i.e., a logical OR operation may be performed). Also, each set condition may additionally include a parameter indicating a logical operation to be performed. In , the state information is indicated by one of the signs assigned to the respective states illustrated in .","For example, a set condition A in  is satisfied if the actual states of the SDK applications  corresponding to product IDs \u201cAAA\u201d, \u201cBBB\u201d, \u201cCCC\u201d, and \u201cDDD\u201d are the active state \u201ca\u201d. As another example, a set condition B in  is satisfied if the actual states of the SDK applications  corresponding to product IDs \u201cAAA\u201d and \u201cEEE\u201d are the active state \u201ca\u201d.","In , the check flags of the set conditions A and B are both set to \u201con\u201d. Meanwhile, in , the check flags of the set conditions A and B are both set to \u201coff\u201d.","Changing the values of check flags makes it possible to select set conditions to be examined according to the user preference. For example, it is possible to select set conditions that need to be satisfied to implement a service.","In step S, based on the check flags, the set condition management unit  determines whether there are set conditions that need to be examined. More specifically, the set condition management unit  determines whether there are set conditions whose check flags are set to \u201con\u201d.","When set conditions whose check flags are set to \u201con\u201d are found, the set condition management unit  obtains the found set conditions from the set condition storing unit  (S). Next, the set condition management unit  generates an inquiry list including the product IDs contained in the obtained set conditions (S). In this step, the set condition management unit  eliminates duplicate product IDs in the set conditions.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIG. 11","FIG. 11","FIG. 9"],"b":"152"},"Next, the set condition management unit  sends the generated inquiry list to the set condition examination unit  (S). Based on the inquiry list, the set condition examination unit  requests the application state obtaining unit  to generate an inquiry result list indicating the states of the SDK applications  included in the inquiry list (S).","In response, the application state obtaining unit  requests the application management unit  to send a list of the SDK applications  installed in the image forming apparatus  (S). The application management unit  obtains a list of product IDs of the installed SDK applications  from, for example, the NVRAM  and sends the obtained list of product IDs (hereafter called an installed application list) to the application state obtaining unit  (S).",{"@attributes":{"id":"p-0099","num":"0098"},"figref":["FIG. 12","FIG. 12"],"b":["152","152","184","152","152","152"]},"Based on the installed application list, the application state obtaining unit  obtains the state of each of the SDK applications  included in the inquiry list. More specifically, for each of the SDK applications  that are in the started state and included in the inquiry list, the application state obtaining unit  requests the application state reporting unit  of the corresponding SDK application  to send the state information of the SDK application  (S). In response to the request (or inquiry), the application state reporting unit  sends state information indicating the state of the corresponding SDK application  to the application state obtaining unit  (S). Also, for each of the SDK applications  that are in the stopped state and included in the inquiry list, the application state obtaining unit  obtains state information from the application state storing unit  of the corresponding SDK application  (S, S). Meanwhile, the application state obtaining unit  does not send requests for state information to the SDK applications  that are included in the inquiry list but not installed in the image forming apparatus  (i.e., not included in the installed application list). Instead, the application state obtaining unit  determines that the SDK applications  are in the non-installed state \u201ci\u201d.","After obtaining the state information of all the SDK applications  in the inquiry list, the application state obtaining unit  generates an inquiry result list based on the obtained state information (S).",{"@attributes":{"id":"p-0102","num":"0101"},"figref":["FIG. 13","FIG. 13","FIG. 11","FIG. 13","FIGS. 6 and 7"],"b":"152"},"Next, the application state obtaining unit  sends the generated inquiry result list to the set condition examination unit  (S). The set condition examination unit  compares the set conditions whose check flags are \u201con\u201d with the inquiry result list to determine whether the set conditions are satisfied (S).","Take, for example, the set conditions A and B illustrated in . According to the inquiry result list of , the set condition A is not satisfied. That is, the states of the SDK applications  corresponding to the product IDs \u201cBBB\u201d, \u201cCCC\u201d, and \u201cDDD\u201d in the inquiry result list do not match the active state \u201ca\u201d specified in the set condition A. Meanwhile, the set condition B is satisfied. That is, the states of the SDK applications  corresponding to the product IDs \u201cAAA\u201d and \u201cEEE\u201d in the inquiry result list match the active state \u201ca\u201d specified in the set condition B.","Next, for each of the set conditions examined, the set condition examination unit  sends an examination result indicating whether the set condition is satisfied to the communication control unit  (S). The examination result may also include detailed information. For example, the examination result may include the states of the SDK applications  that do not match the state information specified in the set condition. As another example, the examination result may include information indicating whether the state of each of the SDK applications  included in the set condition matches the corresponding state information specified in the set condition.","Next, the communication control unit  sends the examination results as a response to the examination request (S). When receiving the examination results, the apparatus management server , for example, requests the user terminal  to display a screen including the examination results. The screen may be implemented, for example, by a Web page. Alternatively, the apparatus management server  may be configured to send an email message including the examination results to the user terminal .","The user refers to the examination results displayed on the user terminal  to confirm whether the set conditions are satisfied.","In the example of , the process performed by the application state management unit is started in response to the examination request from the apparatus management server . Alternatively, the process performed by the application state management unit may be started in response to an event other than the reception of the examination request from the apparatus management server . For example, the process may be started when the image forming apparatus  is started or may be started at a predetermined interval. In this case, the examination results may be \u201cpushed\u201d from the application state management unit to the apparatus management server  and transferred from the apparatus management server  to the user terminal . This configuration enables the user to monitor the constantly-changing status of the set conditions in real time.","The process performed by the application state management unit in  is described in more detail with reference to a flowchart of .","In , step numbers enclosed in brackets indicate the corresponding step numbers in .","In step S, the set condition examination unit  requests the set condition management unit  to send an inquiry list. In response, based on the check flags of the set conditions stored in the set condition storing unit , the set condition management unit  determines whether there are \u201ctarget\u201d set conditions that need to be examined (S).","When set conditions whose check flags are set to \u201con\u201d are found (YES in S), the set condition management unit  generates an inquiry list including a list of the product IDs in the found set conditions (S). Next, the application state obtaining unit  obtains an installed application list from the application management unit  (S).","Then, the application state obtaining unit  selects one of the \u201cunprocessed\u201d product IDs from the inquiry list (S). Here, \u201cunprocessed\u201d indicates that step S and subsequent steps have not been performed for the product IDs. When an unprocessed product ID is selected (or present in the inquiry list) (YES in S), the application state obtaining unit  determines whether the SDK application  (hereafter called a current application) corresponding to the product ID has been installed (S). More specifically, the application state obtaining unit  determines whether the product ID of the current application is in the installed application list.","If the product ID is in the installed application list (YES in S), the application state obtaining unit  determines whether the current application is in the started state (S). For example, when the installed application list includes information indicating whether the SDK applications  are in the started state as illustrated in , the application state obtaining unit  may be configured to determine whether the current application is in the started state by referring to the installed application list. Alternatively, the application state obtaining unit  may be configured to try to obtain state information from the current application and to determine that the current application is in the started state if the state information is successfully obtained.","If the current application is in the started state (YES in S), the application state obtaining unit  requests the application state reporting unit  of the current application to send the state information of the current application (S). Here, if the installed application list indicates that the current application is in the started state but the application state reporting unit  of the current application does not respond to the request for the state information, the application state obtaining unit  determines that the current application is in the error state \u201cd\u201d. Alternatively, the application state obtaining unit  may be configured to repeat the request for the state information at a predetermined interval and to determine that the current application is in the error state \u201cd\u201d if the number of repetitions exceeds a predetermined value (an upper limit) or a predetermined period of time passes.","If the current application is not in the started state (NO in S), the application state obtaining unit  obtains (or retrieves) the state information from the application state storing unit  of the current application (S). Thus, storing the state information in the application state storing unit  (i.e., a storage area associated with the SDK application ) makes it possible to obtain the state information of an SDK application  that has not been started.","Next, the application state obtaining unit  records (or adds) the product ID and the state information of the current application in an inquiry result list (S). Meanwhile, if it is determined that the current application has not been installed (NO in S), the non-installed state \u201ci\u201d is recorded as the state information of the current application.","When steps S through S have been performed for all of the SDK applications  in the inquiry list (NO in S), the set condition examination unit  compares the set conditions whose check flags are \u201con\u201d with the inquiry result list, thereby determines whether the set conditions are satisfied, and generates examination results (S). Meanwhile, if there is no set condition whose check flag is \u201con\u201d (NO in S), an examination result indicating that there is no set condition to be examined is generated. Then, the communication control unit  outputs or sends the examination results of the set condition examination unit  (S).","A set condition may be defined in any appropriate manner.  illustrates another exemplary set condition C used to confirm that incompatible SDK applications do not coexist. Here, \u201ccoexist\u201d means that the SDK applications are installed in the same image forming apparatus .","The set condition C is satisfied if the SDK applications  corresponding to the product IDs \u201cAAA\u201d, \u201cBBB\u201d, and \u201cCCC\u201d (hereafter called the first SDK applications ) are in the active state \u201ca\u201d and the SDK application  corresponding to the product ID \u201cDDD\u201d (hereafter called the second SDK application ) is in the non-installed state \u201ci\u201d. Thus, the set condition C is used to determine whether the first SDK applications  and the second SDK application  coexist. When the set condition C is satisfied, the first SDK applications  and the second SDK application  do not coexist. Meanwhile, when the set condition C is not satisfied, the first SDK applications  and the second SDK application  may coexist. However, even if the second SDK application  is in the non-installed state \u201ci\u201d, the set condition C is not satisfied if the states of the first SDK applications  do not match the specified states. To obviate this problem, multiple states (conditions or parameters) may be specified for each of the first SDK applications . For example, in the set condition C, all states other than the non-installed state \u201ci\u201d may be specified for each of the first SDK applications . In this case, the set condition C is satisfied if the second SDK application  is in the non-installed state and each of the first SDK applications  is in any one of the specified states.","Also, as illustrated in , the states of the SDK applications  have an inclusion relationship or a hierarchical structure. For example, the installed state includes the started state and the stopped state, and each of the started state and the stopped state includes multiple states. It is possible to specify states at a given hierarchical level in a set condition. For example, in the set condition C, the installed state may be specified for each of the first SDK applications . In this case, the set condition C is satisfied if each of the first SDK applications  is in any one of the states included in the installed state and the second SDK application  is in the non-installed state \u201ci\u201d.","Set conditions are independent of each other. Therefore, set conditions that are mutually exclusive may be defined and examined at the same time.",{"@attributes":{"id":"p-0123","num":"0122"},"figref":["FIG. 16","FIG. 16"],"b":["152","152"]},"Also, a set condition is not necessarily used to confirm an affirmative (or desired) condition. For example, it is possible to define a set condition indicating a negative (or undesirable) condition and determine whether the set condition is satisfied to confirm the occurrence of the undesirable condition.","As described above, according to the first embodiment, set conditions are registered in the set condition storing unit  and the actual states of the SDK applications are compared with the states of the SDK applications specified in the set conditions to determine whether the set conditions are satisfied. Registering a combination (or set) of states of the SDK applications  as a set condition in the set condition storing unit  in advance makes it possible to easily determine whether the combination of the states of the SDK applications  is met.","For example, to confirm whether a service implemented by collaboration of multiple SDK applications  is available, a set condition that is satisfied when all the SDK applications  are in the active state \u201ca\u201d may be registered.","However, set conditions may be used not only to determine the availability of services, but also to confirm any conditions specified by the user.","An exemplary functional configuration of the apparatus management server  and an exemplary process of registering set conditions in the image forming apparatus  according to a second embodiment are described below. Here, differences between the first embodiment and the second embodiment are mainly described and descriptions in the first embodiment may also apply to the second embodiment unless otherwise mentioned.",{"@attributes":{"id":"p-0129","num":"0128"},"figref":["FIG. 17","FIG. 17"],"b":["20","20","21","22","20","204"]},"The central set condition storing unit  concentrates and stores set conditions to be registered in multiple image forming apparatuses  using the secondary storage unit  of the apparatus management server . The configuration of set conditions stored in the central set condition storing unit  may be substantially the same as the configuration of set conditions stored in the set condition storing unit  of the image forming apparatus  (see ). However, while the set condition storing unit  stores only set conditions related to the corresponding image forming apparatus , the central set condition storing unit  stores set conditions related to multiple image forming apparatuses .","The set condition providing unit  provides the set conditions stored in the central set condition storing unit  to the image forming apparatuses . More specifically, the set condition providing unit  provides only set conditions to each image forming apparatus  that are valid for the image forming apparatus .","An exemplary process of registering set conditions in the image forming apparatus  is described below.  is a sequence chart illustrating an exemplary process of registering set conditions in the image forming apparatus  according to the second embodiment. In the second embodiment, the process of  may be performed even when no set condition is registered in the set condition storing unit  of the image forming apparatus .","At a predetermined timing, the set condition management unit  starts a process of updating the set condition storing unit  (S). Step S may be performed, for example, immediately after the startup of the image forming apparatus  or at regular intervals. Alternatively, step S may be performed after the set condition examination unit  requests an inquiry list at step S in  and before step S in  is performed.","Then, the set condition management unit  sends a set condition request to the set condition providing unit  of the apparatus management server  (S). The set condition request includes a list (list information) of the product IDs of the SDK applications  installed in the image forming apparatus . The set condition management unit  may obtain the list information from the application management unit .","In response to the set condition request, the set condition providing unit  searches for and retrieves set conditions to be provided to the requesting image forming apparatus  (that has sent the set condition request) from the central set condition storing unit  (S). The set condition providing unit  retrieves only the set conditions that are valid for the requesting image forming apparatus . Here, \u201cvalid\u201d set conditions indicate that the SDK applications  specified in the set conditions (i.e., the SDK applications  whose states are to be confirmed to determine whether the set conditions are satisfied) correspond to the product IDs in the set condition request. This is because if a set condition includes an SDK application  not installed in the requesting image forming apparatus , the set condition will never be satisfied in the requesting image forming apparatus  and is therefore invalid. However, even if a set condition includes an SDK application  that is not installed in the requesting image forming apparatus  that has sent the set condition request, the set condition may be provided to the requesting image forming apparatus  if the state information specified for the SDK application  is the non-installed state \u201ci\u201d.","For example, when the set condition request includes product IDs \u201cAAA\u201d and \u201cEEE\u201d and the set conditions A and B of  are stored in the central set condition storing unit , the set condition B is provided to the requesting image forming apparatus  but the set condition A is not provided to the requesting image forming apparatus . As another example, when the set condition request includes product IDs \u201cAAA\u201d, \u201cBBB\u201d, and \u201cCCC\u201d and the set condition C of  is stored in the central set condition storing unit , the set condition C is provided to the requesting image forming apparatus . This is because, although the set condition C includes the SDK application  with a product ID \u201cDDD\u201d that is not included in the set condition request, the state information specified for the SDK application  with the product ID \u201cDDD\u201d is the non-installed state \u201ci\u201d.","When one or more \u201cvalid\u201d set conditions are found (S), the set condition providing unit  sends the found set conditions to the set condition management unit  of the requesting image forming apparatus  (S). Then, the set condition management unit  registers (or records) the set conditions sent from the apparatus management server  in the set condition storing unit  (S). When a set condition with the same name as one of the set conditions sent from the apparatus management server  is already in the set condition storing unit , the set condition is overwritten (or updated).","Meanwhile, if no \u201cvalid\u201d set condition is found (i.e., if no set condition is sent from the apparatus management server ), no set condition is registered in the set condition storing unit .","As described above, according to the second embodiment, set conditions stored in the central set condition storing unit  of the apparatus management server  are automatically downloaded to each of the image forming apparatuses  and registered in the set condition storing unit . With this configuration, an administrator (or user) only needs to register set conditions in the central set condition storing unit  of the apparatus management server  and does not need to manually register set conditions in each of the image forming apparatuses . Also with the configuration of the second embodiment, only \u201cvalid\u201d set conditions are downloaded according to the SDK applications  installed in the respective image forming apparatuses . This in turn makes it possible to prevent wasting the storage areas of the image forming apparatus  by registering unnecessary (or invalid) set conditions.","Next, a variation of second embodiment is described as a third embodiment. Here, differences between the second embodiment and the third embodiment are mainly described and descriptions in the second embodiment may also apply to the third embodiment unless otherwise mentioned.",{"@attributes":{"id":"p-0141","num":"0140"},"figref":"FIG. 19","b":"10"},"Steps S and S of  are partly different from steps S and S of  as described below. Steps S, S, and S of  are substantially the same as steps S, S, and S of .","In step S, the set condition management unit  sends a set condition request to the set condition providing unit  of the apparatus management server . In this embodiment, the set condition request includes the model name (model information) of the image forming apparatus  in addition to a list (list information) of the product IDs of the SDK applications  installed in the image forming apparatus .","In response to the set condition request, the set condition providing unit  searches for and retrieves set conditions to be provided to the requesting image forming apparatus  (that has sent the set condition request) from the central set condition storing unit  (S).",{"@attributes":{"id":"p-0145","num":"0144"},"figref":["FIG. 20","FIG. 20"],"b":["21","10"]},"The SDK applications  that can be installed in an image forming apparatus  may depend on its model. Although the APIs provided by the SDK platform  are machine-independent (or model-independent), an SDK application  that requires functions (e.g., special hardware) unique to a particular model does not work in a different model. In the third embodiment, to determine \u201cvalid\u201d set conditions based on the dependence between the SDK applications  and the models of the image forming apparatuses , set conditions are associated with model names. Here, multiple set conditions may be associated with one model name. In the example of , set conditions F and H are associated with a model name \u201cRRR5000\u201d. Also, one set condition may be associated with multiple model names.","In step S, the set condition providing unit  selects set conditions from a group of set conditions that are associated with the model name specified in the set condition request. In other words, the set condition providing unit  selects set conditions based on the model name and the list of the product IDs.","Step S and subsequent steps are substantially the same as step S and subsequent steps of .","The third embodiment provides advantageous effects similar to those provided by the second embodiment. Also, since the set conditions are associated with model names of the image forming apparatuses , it is possible to exclude set conditions, which might be selected with the process of the second embodiment, based on the model names. Thus, the third embodiment makes it possible to more accurately select set conditions that are valid for the respective image forming apparatuses .","Next, another variation of the second embodiment is described as a fourth embodiment. Here, differences between the second embodiment and the fourth embodiment are mainly described and descriptions in the second embodiment may also apply to the fourth embodiment unless otherwise mentioned.",{"@attributes":{"id":"p-0151","num":"0150"},"figref":["FIG. 21","FIG. 17","FIG. 21","FIG. 21"],"b":["20","20","23","23","152","10","202","20"]},{"@attributes":{"id":"p-0152","num":"0151"},"figref":"FIG. 22","b":"10"},"Step S of  is substantially the same as step S of . After step S, the set condition management unit  sends a set condition request to the set condition providing unit  of the apparatus management server  (S). In this embodiment, the set condition request includes identification information (an apparatus ID that is unique to each image forming apparatus ) of the requesting image forming apparatus .","Based on the apparatus ID specified in the set condition request, the set condition providing unit  obtains the list of the SDK applications  installed in the requesting image forming apparatus  from the apparatus information storing unit  (S, S).",{"@attributes":{"id":"p-0155","num":"0154"},"figref":["FIG. 23","FIG. 23"],"b":["23","23","10","152","10","20","10","152","23"]},"Thus, in step S, the set condition providing unit  obtains the list of the product IDs of the SDK applications  installed in the requesting image forming apparatus .","Step S and subsequent steps are substantially the same as step S and subsequent steps of , except that the set condition providing unit  retrieves set conditions based on the list of the product IDs obtained from the apparatus information storing unit  in step S.","The fourth embodiment provides advantageous effects similar to those provided by the second embodiment. Also, the fourth embodiment eliminates the need to include a list of product IDs in the set condition request to be sent from the image forming apparatus  to the apparatus management server  and thereby makes it possible to reduce the communication load.","The process of  may also be performed when SDK applications  are (additionally) installed in the image forming apparatus  and\/or when (some) SDK applications  are uninstalled from the image forming apparatus . In this case, the set condition request sent in step S may include the product IDs of installed or uninstalled SDK applications  in addition to the apparatus ID. When the set condition request includes the apparatus ID and the product IDs of installed SDK applications, the set condition providing unit  stores the product IDs in the apparatus information storing unit  in association with the apparatus ID. Meanwhile, when the set condition request includes the apparatus ID and the product IDs of uninstalled SDK applications, the set condition providing unit  removes the product IDs associated with the apparatus ID from the apparatus information storing unit . Then, the set condition providing unit  performs step S and subsequent steps.","The above process makes it possible to efficiently report changes in the SDK applications  installed in the image forming apparatus  to the apparatus management server . In other words, the above process makes it possible to synchronize the information stored in the apparatus information storing unit  of the apparatus management server  with the configurations of the SDK applications  currently installed in the image forming apparatuses . This in turn makes it possible to register set conditions corresponding to the currently-installed SDK applications  in the image forming apparatuses .","The third embodiment and the fourth embodiment may be combined together. That is, also in the fourth embodiment, set conditions stored in the central set condition storing unit  may have the configuration as illustrated in . In this case, the set condition request may include a model name in addition to an apparatus ID, and step S and subsequent steps may be performed in a manner similar to step S and subsequent steps of .","In the second through fourth embodiments, set conditions that are valid for the requesting image forming apparatus  are searched for (i.e., selected) by the apparatus management server . Alternatively, the image forming apparatus  may be configured to select \u201cvalid\u201d set conditions by itself. In this case, the apparatus management sever  may be configured to transfer all set conditions stored in the central set condition storing unit  to the image forming apparatus . The set condition management unit  of the image forming apparatus  may be configured to select \u201cvalid\u201d set conditions from the set conditions received from the apparatus management sever  through steps similar to those performed by the set condition providing unit  of the apparatus management server  in the second through fourth embodiments and to store the selected set conditions in the set condition storing unit .","Also in the above embodiments, the application state management unit is implemented as an SDK application. This configuration makes it possible to install the application state management unit as an SDK application in the image forming apparatus  and is therefore particularly suitable to apply the present invention to image forming apparatuses that are already on the market.","However, employing this configuration is not based on technical limitations. For example, the application state management unit may be implemented in the SDK platform .",{"@attributes":{"id":"p-0165","num":"0164"},"figref":["FIG. 24","FIG. 5","FIG. 24"],"b":["153","152"],"i":"a"},"In , the application state management unit is included in the SDK platform . This configuration eliminates the need to install the application state management unit as an SDK application . Meanwhile, with this configuration, it is necessary to upgrade the SDK platform  to add the function of the application state management unit to an image forming apparatus on the market.","As described above, an aspect of this disclosure provides an image forming apparatus, a program state determination system, and a non-transitory computer-readable storage medium storing program code for causing a computer to perform a program state determination method that make is possible to easily determine the states multiple programs.","The present invention is not limited to the specifically disclosed embodiments, and variations and modifications may be made without departing from the scope of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 24"}]},"DETDESC":[{},{}]}
