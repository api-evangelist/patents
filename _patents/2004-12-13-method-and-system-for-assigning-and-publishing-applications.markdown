---
title: Method and system for assigning and publishing applications
abstract: A method and system for managing and deploying applications across a computer network by assigning and publishing applications to user and computer policy recipients. Assigned applications are automatically applied via a script to the policy recipients, thereby ensuring that the recipient has an administrator-specified workstation configuration. Assigned applications are advertised so as to appear available to the user, by adding an application shortcut to the start menu, and by populating the machine registry with appropriate application information. Other applications may be published to users, whereby those applications are optionally available for use by users. Published application information is maintained in a centralized store of information on the network. Assigned and published applications may be installed on demand, such as when the application is activated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07631061&OS=07631061&RS=07631061
owner: Microsoft Corporation
number: 07631061
owner_city: Redmond
owner_country: US
publication_date: 20041213
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This is a continuation of U.S. patent application Ser. No. 09\/158,968 filed Sep. 21, 1998.","This application is related to the following United States patents, all of which were filed on Sep. 21, 1998 and assigned to the same assignee as the present application:\n\n","The invention relates generally to computer systems and networks, and more particularly to an improved method and system for deploying applications to users and computers in a network.","In contemporary enterprises such as a corporation, one of the duties of a network administrator is to set up and maintain the corporation's computers so as to make employees more productive. Lost productivity at employees' computer desktops is a major cost for corporations, often resulting from user errors such as inadvertently removing some or all of a needed application or using an old application rather than an enterprise-specified one that is improved, secure and\/or compatible with others. Productivity is also lost when a desktop is too complex, such as when the desktop has too many non-essential applications and features thereon. Much of the expense of administering distributed personal computer networks is spent at the desktop, performing tasks such as fixing the applications and settings that the user has incorrectly or inadvertently modified.","At the same time, an enterprise wants certain personnel to have access to various software applications, while wanting other applications to be available to certain users for access if needed. For example, a corporate enterprise may declare a policy specifying that everyone in the company should use a particular electronic mail program, while in addition, those in the research department should be able to load a particular spreadsheet application if needed. Similarly, the enterprise may decide that employees spend too much time browsing the Internet, whereby the enterprise desires that only certain groups such as the research group and management group should have Internet browsers installed on their machines.","However, to implement such policy decisions, administrators or the like generally need to physically visit each workstation to load or unload the specified programs, and spend time with the employees regarding the need for installing optional programs. In addition to initially setting the computers, the administrators must hope (or regularly check) that the users do not change the settings, however users regularly make modifications, leading to lost productivity. The administrator also needs to revisit the workstations to install new versions of applications.","Moreover, such policies cause problems when multiple users share the same computer, since a policy instituted for one user of that computer may not be compatible with the policy for another. As can be readily appreciated, deploying applications in an enterprise is a complex task that does not fit in well with existing systems and methods.","Briefly, the present invention provides a system and method for automatically deploying applications by assigning certain applications to users and machines in accordance with a policy. One or more advertising scripts are stored with a policy associated with computer or user policy recipients, and each advertising script includes an application assigned to the policy recipient. When one or more advertising scripts are applied, such as to a user at logon or a machine at re-boot, assigned applications are advertised as available to the user by placing application shortcuts on a start menu or desktop and by writing entries to the system registry such as to enable document invocation through the Windows shell and class activation through system components and applications, i.e., file-extension based activation and COM (Component Object Model) CLSID (class identifier)-based activation, respectively. In this manner, assigned applications may be advertised as available, prior to the actual installation thereof. An installer installs advertised applications as needed, i.e., upon user activation of the application. Other applications may be published, whereby they do not appear to be available, but are optionally available if activated (e.g., via file extension-based activation and CLSID-based activation) or manually installed by a user.","Other benefits and advantages will become apparent from the following detailed description when taken in conjunction with the drawings, in which:","Exemplary Operating Environment",{"@attributes":{"id":"p-0020","num":"0023"},"figref":"FIG. 1"},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer  or the like, including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read-only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  may further include a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD-ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read-only memories (ROMs) and the like may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system  (preferably Windows NT), one or more application programs , other program modules  and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , personal computers typically include other peripheral output devices (not shown), such as speakers and printers.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, Intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","For purposes of the following description, a client workstation (e.g., ) may correspond to the computer system , while an application package  () may reside on one of the remote computers . However as can be readily appreciated, no particular arrangement of the various files, interfaces, objects, mechanisms, processes and so on described herein is necessary to the present invention. Indeed, as is understood in computing and networking in general, such files, interfaces, objects, mechanisms, processes and so on may be combined, separated and\/or distributed in virtually any number of ways among the various network devices.","In general, the present invention provides a method and system for deploying software applications throughout a computer network in a highly flexible, scalable, extensible and efficient manner. To this end, the method and system leverage a highly flexible architecture wherein an administrator can tailor policies to sites, domains, and organizational units of users and computers thereunder, (in a hierarchical manner), by specifying one or more policies therefor, such that the policy within an organization is centrally managed. Such group policies, including the prioritizing of multiple policies for policy recipients (e.g., users or machines) are described in U.S. Pat. No. 6,466,932, a continuation-in-part of U.S. patent application Ser. No. 09\/134,805, now abandoned, entitled \u201cSystem and Method for Implementing Group Policy,\u201d assigned to the assignee of the present invention and hereby incorporated by reference herein in its entirety.","Although not necessary to the present invention, group policies are maintained via a Windows NT\u00ae 5.0 directory service, known as the Active Directory , ordinarily maintained in a domain controller  (). More particularly, each group policy object  () comprises a group policy container in the directory service and a group policy template in the \u201csysvol\u201d of the domain controller , but for purposes of simplicity are generically referred to herein as a group policy object. In general, the Active Directory  stores information about the objects of a domain, and makes this-information easy for administrators to access, find and apply via a single, consistent and open set of interfaces. For example, with the Active Directory , administrators have a single point of administration for the objects on the network, which can be viewed in a hierarchical structure. A core unit in the Active Directory  is the domain, and the objects of a network exist within a domain. A single domain can span multiple physical locations or sites.","Thus, the present invention is described herein with reference to the Microsoft\u00ae Windows NT\u00ae operating system, and in particular to the flexible hierarchical structure of sites, domains and\/or organizational units of a Windows NT\u00ae Active Directory . Notwithstanding, there is no intention to limit the present invention to Windows NT\u00ae and\/or the Active Directory architecture, but on the contrary, the present invention is intended to operate with and provide benefits with any operating system, architecture and\/or mechanisms that utilize network information.","Application Deployment: Assign and Publish","In general, a primary aspect of application deployment involves initially making an application available to users. To initially deploy an application, an administrator can choose to either \u201cassign\u201d or \u201cpublish\u201d the application. To this end, as shown in , one or more group policy objects (templates)  may be associated with policy recipients, and a subcontainer of each group policy object, deemed a class store, may include application deployment information. Note that although separately shown in  for purposes of simplicity, a class store  is actually a subcontainer of the group policy container, as described in more detail in co-pending United States Patent entitled \u201cClass Store Schema,\u201d hereby incorporated by reference herein in its entirety.","In accordance with one aspect of the present invention, via this centrally maintained deployment information in the class store , policy recipients (e.g., users and workstations\/machines) in a domain are assigned applications, or applications are published thereto. An application typically is assigned to a group of users (or a group of machines) when it is deemed mandatory for that group to have that application, while published applications are those that are made optionally available to users who may benefit therefrom. For example, the same version of an electronic mail application program may be assigned to everyone in an organization, while a word processing program may be assigned to every group of users that needs some word processing capabilities. However, an application program for editing images may not be needed by everyone, and thus such a program may be published on a per-group basis so that those groups of users who may benefit from the program have it, while others who do not need it will not have it occupy resources of their workstations. Publishing is described in more detail below.","In accordance with one aspect of the present invention, assigned applications have a number of attributes, including that they are advertised, i.e., they appear as available to a user at each logon (if assigned to a user) or at each re-boot (if assigned to a machine). Note that advertised applications are not necessarily installed on the workstation, but rather may only appear to be installed. As described in more detail below, so as to make an application appear installed, advertisements for an application include shortcuts that appear on the Start Menu and\/or placement of shortcuts\/icons on the desktop, and a collection of registry entries required primarily for OLE and shell activation. For example, to explicitly launch an application, users navigate the Start Menu looking for a shortcut representing the application, then click that shortcut. Thus, shortcuts placed on the Start Menu represent a blatant advertisement for an application. Users also implicitly launch applications by double-clicking a file (of a file system) having an extension associated with a particular application. Since associations between file extensions and applications are stored in the system registry  (), writing such associations to the registry  is another way in which the present invention may advertise applications. Other examples of how an application is advertised include writing class information (i.e., for OLE\/COM activation), MIME associations, type library information, and shell verbs. Note that shortcuts and default entries in the registry  may reference files that contain indexed icons that are normally application executables. However, when advertised, an application's executable may not be installed, which would otherwise render the icon unavailable. Icon files provide a place to store icons for shortcuts, and for default icon registry entries to reference.","Assigned applications are also resilient, in that they will be re-advertised on the next logon (or machine re-boot as appropriate) if deleted from the local workstation (machine) . For purposes of simplicity, assignment will hereinafter ordinarily be described with reference to being applied to users via a policy at user logon, although it is understood that policies may be applied to a machine when the machine connects to the network, e.g., at machine re-boot, and thus applications may be assigned to machines (e.g., via a machine profile ) in the same general manner as users. Moreover, even if a user installs another program or different version of the application over an assigned application, because the advertise script is applied, the assigned application (the administrator-specified version) will return at the next logon. Only an administrator (and in particular a domain administrator) may permanently remove an assigned application, by doing so via the centralized location.","To assign an application, as generally shown in , the administrator, using an application deployment editor  or other suitable tool, selects an application package (e.g., ). Packages are stored and cataloged under the class stores , and may be available from various vendors for different platforms, activation modes, access control, setup, and installation information. For example, a package  may include an entire application (e.g., Microsoft\u00ae Word or Excel), a set of binary component implementations packaged together, or a standalone COM (Component Object Model) component (e.g., an ActiveX\u2122 control). Once a package  is selected for deployment, an advertise script , which includes information about the application, is generated by calling a function of an application programming interface of a managed software installer mechanism ","The managed software installer mechanism facilitates a number of deployment tasks, including advertising, which occurs when a package  (and any transforms encapsulating administrator customizations) are advertised into a group policy object (e.g., ). As described below, the result of such an advertisement is the advertise script , a file that gets physically stored in the group policy object . At logon time, a user having the group policy object applied thereto receives a copy of the advertise script (and other scripts). Note that the scripts may be copied from the domain controller's sysvol to the user profile , or processed from the network rather than physically copied, however, copying the scripts outside of the profile is preferable for security and performance reasons.","Logon code  then calls the managed software installer mechanism to process the copied advertise script (or scripts) , the result of which is the creation of a collection of advertisement information  including shortcuts on the Start Menu and registry entries required for shell and OLE activation, as also described below. Advertisement information references the managed software installer mechanism , and, as described below, the operating system  knows what to do when it encounters such information. Lastly, the managed software installer mechanism is involved when activation occurs, i.e., the managed software installer mechanism is called when an application is activated to install one or more components as needed to service the activation request.","Thus, to summarize, via the managed software installer mechanism , the application deployment editor causes the advertise script  to be stored for one or more groups of users (or machines) in a group policy object (template) (e.g., ) of the Active Directory . In general, the application deployment editor  is an extension to a Group Policy Editor, which is a snap-in to the Microsoft Management Console, a common framework for administrative tools and processes. As described in the aforementioned \u201cGroup Policy\u201d patent, the Group Policy Editor is a tool used by an administrator to create, edit, and manage group policy objects , which associate policy with Active Directory containers (sites, domains and organizational units). The application deployment editor  extension thereto allows an administrator to deploy applications, i.e., the application deployment editor  is an administrative tool for assigning, publishing and removing software in a network of servers and workstations.","Thus, to assign an application, the administrator selects an application package  (e.g., provided by a vendor) and optionally transforms the package  to customize it to meet particular needs. By way of example of a transform, a spreadsheet program may be installed with customized spreadsheet templates needed in an organization. The administrator may also create network shares for the software, including executable, configuration, data files, components and packages, and the administrator may set up the application to run from the network. The administrator then causes the advertise script  to be generated.","More particularly, to generate the advertise script , the application deployment editor  calls the MsiADvertiseProduct( ) API(application programming interface) of the managed software installer mechanism with the information as set forth in the table below:",{"@attributes":{"id":"p-0039","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"UINT MsiAdvertiseProduct("}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003LPCTSTR","szPackagePath","\/\/ Fully qualified path to a package"]},{"entry":["\u2003LPCTSTR","szScriptFilePath","\/\/ If NULL, product is advertised locally"]},{"entry":["\u2003LPCTSTR","szTransforms","\/\/ Semi-colon delimited list of"]},{"entry":[{},{},"transforms"]},{"entry":["\u2003LANGID","idLanguage","\/\/ Language of product being advertised"]},{"entry":");"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":["74","66","74","70"],"sub":"2 ","figref":"FIG. 4"},"Thus, in accordance with another aspect of the present invention and as generally shown in , in a networked environment, at user logon, as part of a logon process , one or more group policy objects are ordinarily applied to the user that is logging on, which includes executing at least one advertise script therefor (such as the script ). Note that policy, and thus application assignment, may also be applied by administered policy or the like, such as on a periodic basis as set by the administrator, (e.g., apply policy once every six hours), to enforce policy for machines that seldom re-boot or users that seldom logon. In general, executing the advertising script makes the application appear to be available to the user, including writing information to the system registry  and adding script information such as shortcuts to assigned programs to the user profile  (e.g., the Start Menu or desktop) on the workstation. Optionally, a rollback script  is generated so that any changes made during the logon process may be undone, such as if an error or failure occurs.","More particularly, the logon process  gathers up the new or modified advertise scripts from the group policy objects -associated with the directory containers to which the user belongs, and stores them in a storage in the user's local workstation . Then, each of these advertise scripts is handed to the managed software installer mechanism for processing, via the MsiAdvertiseScript( ) API, as set forth in the table below:",{"@attributes":{"id":"p-0042","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"UINT WINAPI MsiAdvertiseScript ("}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003LPCTSTR","szScriptFile, \/\/ path to script from MsiAdvertiseProduct"]},{"entry":["\u2003\u2003DWORD","dwFlags,\u2003\/\/ the SCRIPTFLAGS bit flags that control"]},{"entry":[{},"the script execution"]},{"entry":["\u2003\u2003PHKEY","phRegData,\u2003\u2003\/\/ optional parent registry key"]},{"entry":["\u2003\u2003BOOL","fRemoveItems);\/\/ TRUE if specified items are to"]},{"entry":[{},"be removed"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0043","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Typedef enum tagSCRIPTFLAGS"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003SCRIPTFLAGS_CACHEINFO \u2003\u2003= 0x00000001L,","\/\/ set if the icons need to be"]},{"entry":[{},"\/\/ created\/ removed"]},{"entry":["\u2003\u2003SCRIPTFLAGS_SHORTCUTS\u2003\u2003= 0x00000004L,","\/\/ set if the shortcuts needs to"]},{"entry":[{},"\/\/ be created\/ deleted"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003SCRIPTFLAGS_MACHINEASSIGN\u2003= 0x00000008L,","\/\/ set if product to be"]},{"entry":[{},"\/\/ assigned to machine"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u2003\u2003SCRIPTFLAGS_REGDATA_APPINFO = 0x00000010L, \/\/ set if the app advt"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ registry data needs to be"]},{"entry":[{},"written\/ removed"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u2003\u2003SCRIPTFLAGS_REGDATA_CNFGINFO = 0x00000020L, \/\/ set if the product cnfg"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ mgmt. registry data needs to be written\/ removed"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003SCRIPTFLAGS_REGDATA\u2003= SCRIPTFLAGS_REGDATA_APPINFO |"},{"entry":"\u2003\u2003SCRIPTFLAGS_REGDATA_CNFGINFO, \/\/ for source level backward compatibility"},{"entry":"\u2003\u2003SCRIPTFLAGS_VALIDATE_TRANSFORMS_LIST = 0x00000040L"},{"entry":"} SCRIPTFLAGS;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The MsiAdvertiseScript( ) serially executes the list of advertise script information in accordance with the above parameters. Once successfully processed, an advertise script stores information in the user's profile  and the system registry  that is used to manage advertised applications. This set of per-user information includes attributes for each advertised product, source list information, feature-to-product associations, and descriptors for each advertised component. An association between the managed software installer mechanism  and the operating system  facilitates advertising. For example, shell and OLE activation code, as well as many shell and OLE-related registry entries, are preferably installer mechanism-aware. To this end, managed shortcuts include a descriptor that the shell activation code (of the operating system ) detects, hands to the managed software installer mechanism for resolution in the form of a path, and then processes the resulting path. Similarly, OLE activation is aware of such descriptors and calls an API of the managed software installer mechanism to resolve them.","To manage the advertised applications, the managed software installer mechanism uses the identifiers set forth in the following table:",{"@attributes":{"id":"p-0046","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["{ProductCode}","A standard GUID which uniquely identifies"]},{"entry":[{},"a product."]},{"entry":["FeatureID","A string which represents a feature. A FeatureID"]},{"entry":[{},"should be human readable and need only be"]},{"entry":[{},"unique within a given product."]},{"entry":["{ComponentCode}","A standard GUID which uniquely identifies"]},{"entry":[{},"a component."]},{"entry":["[Descriptor]","A descriptor is comprised of a {ProductCode},"]},{"entry":[{},"a FeatureID and a {ComponentCode} within"]},{"entry":[{},"square brackets, e.g., [{ProductCode}"]},{"entry":[{},"FeatureIDdelimiter{ComponentCode}]. A"]},{"entry":[{},"delimiter exists between the FeatureID and the"]},{"entry":[{},"{ComponentCode} since a FeatureID is"]},{"entry":[{},"variable in length."]},{"entry":["Delimiter","ASCII value 2, chosen so as to not collide with"]},{"entry":[{},"characters that might appear as part of a FeatureID"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"An administrator may also choose to publish an application, essentially to make the application available to a user if needed. Published applications are just as manageable as assigned applications, however unlike assigned applications, a published application has no presence on a user's machine until invoked. Thus, a published application has no attributes on the client machine, but rather has its attributes stored in the Active Directory . A published application can be located in the Active Directory in a number of ways, including via the application name, a class ID serviced by the application, a program ID serviced by the application, a file extension serviced by the application, an interface identifier serviced by the application and MIME type or content type serviced by the application.","To this end, each of the above attributes may be used as the key to locate a published application in the Active Directory. Then, once a published application is located, the application's user-friendly (human readable) name is available, as well as enough information to assign the application to the user. Thus, until needed, a published application does not look installed. For example, there are no shortcuts present to use for activating the application, (however it should be noted that this does not prevent an administrator from placing a document managed by a published application on the desktop or the Start Menu, which is not the same as application assignment). Instead, published applications may be activated by the above-attributes such as file extension, in a two-step process as described below with particular reference to . First the operating system  shell (or similarly OLE) attempts to locate the application activation information in the local machine's registry . If the information is not found (as with a published application), an Active Directory  lookup occurs (as described in the aforementioned \u201cClass Store Schema\u201d patent). If the directory lookup is successful, the return information is used to assign the application to the user's profile. Note that the user may be given a roaming profile, whereby such information roams with the user regardless of where the user logon takes place. If not, the information stays on the machine that triggered the assignment. In this manner, published applications as well as assigned applications essentially follow the user around. Once the application is assigned, activation continues as with normal assigned applications as described above.","Moreover, the \u201cDesktop-New\u201d context menu may choose to not list published applications, nor need the \u201cInsert-object\u201d menus of applications list published applications. However, another way in which a published application may be assigned is manually, via the \u201cAdd\/Remove Programs\u201d Control Panel applet. To this end, the class store  is queried and the list of installable programs provided to the user includes those published programs listed in the class store or stores associated via the policy objects with that user's group or groups.","Once advertised, the applications may be installed on the local workstation by the managed software installer mechanism on an as-needed basis, e.g., as Program Files  () in the file system, the place where the actual application files are stored. For example, the first time that a user activates such an application (e.g., via the Start Menu), the managed software installer mechanism looks for it on the local machine but does not find it, after which the managed software installer mechanism installs the application from an application image  () on a network server . Note that the network server  may be the same server  on which the application package  was loaded, however as can be appreciated, this is not necessary. Thereafter, the application remains on the local workstation and need not be re-installed, unless deleted in some manner. However, even if deleted, the application will be re-advertised the next time policy is applied, e.g., at the next user logon, whereby if again activated, the application will again be re-installed. In this manner, assigned applications are automatically deployed in accordance with a policy, but for purposes of efficiency, initially may be only advertised rather than installed. As can be readily appreciated, installing programs only if and when activated provides substantial benefits, including efficient use of workstation resources, rapid user-logon, and balancing of the load on the network servers. The on-demand installation of software implementations including applications (e.g., features, components and files) is described in United States patents entitled \u201cMethod and System for On-Demand Installation of Software Implementations\u201d and \u201cSoftware Implementation Installer Mechanism,\u201d hereby incorporated by reference herein in their entireties.","Turning to an explanation of the operation of the present invention,  shows the general steps taken to assign an application, such as to users of a Directory container (site, domain or organizational unit). At step , the administrator creates or selects (via the group policy editor\/application deployment editor tool ) the group policy object (e.g., ) associated with the appropriate directory container. Then, at step  the administrator selects the application package  to be assigned, along with any transforms applied to the package . The application deployment editor tool  calls the installer mechanism at step , whereby the advertise script  is generated in step . Lastly, at step , the script  is stored with the group policy object .",{"@attributes":{"id":"p-0052","num":"0055"},"figref":"FIG. 6","b":["80","600","66","80","74","20","602","74","76","604","70","606","608"],"sub":["2","1"],"i":["a","b "]},"Once the one or more scripts are processed, assigned applications are advertised as available to the user. One way in which a user may activate such an application is by clicking a shortcut corresponding thereto.  shows the general steps taken when a user clicks a shortcut, beginning at step . At step , the operating system  communicates with the managed software installer mechanism to determine if the application is locally installed, one of the possible states of an advertised application. At step , if the application is not locally installed, the installer installs it (or at least some core portion thereof) at step , as described in more detail in the aforementioned United States patents entitled \u201cMethod and System for On-Demand Installation of Software Implementations\u201d and \u201cSoftware Implementation Installer.\u201d Also, the state of the application is changed to installed, so that the next time activation thereof is requested, installation is not necessary. Lastly, at step , the installer and the operating system  execute the application. Note that except for possible installation delay times, in typical situations, the installation is essentially invisible to the user.","Both assigned and published applications may be activated by invoking (e.g., double-clicking) a file (document) having an extension with an associated application registered in the registry.  show how such an action leads to the file being executed, beginning at step  which represents the double-clicking (or similar operation such as right-click, open) of the document. At step , the operating system  looks to the local registry  for file extension information, i.e., an application associated with the file extension. If the information is found, step  branches to step  which then calls the installer to launch the application () as described below. Note that the administrator may prioritize which application handles which extension since multiple applications may be capable of handling the same file type.","If not found in the local registry at step , then an application corresponding to the extension has not been assigned, however an application corresponding to the extension may still be published to the requesting user. Thus, step  branches to step  to look for the extension information in the Active Directory, i.e., the class stores  associated with this user. To determine this, step  queries the class store or stores  to find the appropriate script or scripts and look in the scripts for the file association. Note that the administrator may similarly prioritize which application in the class stores handles which extension. If found, the application script is advertised at step  as described above, i.e., the application is effectively assigned to the user, the registry is populated, the item added to the Start Menu, and so on as if the application was assigned. The process then returns to step  so that the application may be launched. Conversely, if no associated application is found in the class stores at step , an appropriate error is returned (e.g., no association for this application for this user) at step .",{"@attributes":{"id":"p-0056","num":"0059"},"figref":["FIG. 9","FIG. 8"],"b":["76","76","900","76","902","76","904","906","908","808"],"i":["b ","b ","b ","b "]},"As can be seen from the foregoing detailed description, there is provided a method and system for automatically deploying applications across a network in accordance with a policy. Via a script associated with a policy, and applied at user logon or machine connection to the network, applications may be assigned to policy recipients (users or machines), whereby the assigned applications are advertised to those policy recipients. Other applications may be published to users, whereby the application may be indirectly activated.","While the invention is susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific form or forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0021"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0022"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
