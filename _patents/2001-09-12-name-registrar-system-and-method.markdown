---
title: Name registrar system and method
abstract: A Name Registrar (NaR) system and method incorporating a separate software component that permits manipulation, control, and distribution of names/objects under direction of a distributed naming policy is disclosed. The present invention teaches creation of a separate software component to handle name registration running within a separate software process. This separate software process has a remote interface utilized by a software application to send information related to names/objects in their most basic form to the Name Registrar (NaR). Subsequently, the NaR performs all other functions that are necessary to publish the supplied name/object in the proper form and type required by the accessing system consumers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08108499&OS=08108499&RS=08108499
owner: Alcatel Societe Anonyme
number: 08108499
owner_city: Paris
owner_country: FR
publication_date: 20010912
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","PARTIAL WAIVER OF COPYRIGHT","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","REFERENCE TO A MICROFICHE APPENDIX","FIELD OF THE INVENTION","BACKGROUND AND DESCRIPTION OF THE PRIOR ART","Overview","Prior Art Solutions","Deficiencies in the Prior Art","OBJECTIVES OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","System Overview ()","Exemplary Telecommunication System Application ()","Method Overview ()","Exemplary Method Components ()","Exemplary Advantages","DESCRIPTION OF THE PRESENTLY PREFERRED EXEMPLARY EMBODIMENTS","Definitions","Exemplary Application Overview","Exemplary Application Behavior","Preferred System Context of the Present Invention","Generalized Distributed Software Environment ()","Exemplary Telecommunications Context ()","CONCLUSION"],"p":["Not Applicable","All of the material in this patent application is subject to copyright protection under the copyright laws of the United States and of other countries. As of the first effective filing date of the present application, this material is protected as unpublished material.","However, permission to copy this material is hereby granted to the extent that the copyright owner has no objection to the facsimile reproduction by anyone of the patent documentation or patent disclosure, as it appears in the United States Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","Not Applicable","Not Applicable","The present invention is related to the general area of any distributed computing software application that makes extensive use of names to find objects representing services but may have specific application in network and distributed Element Management Systems (EMS). These related software techniques may be used to minimize the maintenance overhead of EMS when responding to changes in network protocols and\/or incorporation of new\/modified network elements (NE). While the present invention has wide applicability to distributed name and object distribution systems, one particularly advantageous application is in the area of distributed telecommunications network management systems.","The essence of distributed computing software applications is that there are a number of components, each of which provides one or more specialized services, which are distributed in time and\/or space. In order for the application as a whole to work, the different components must be able to access each other's services. To accomplish this, the components must know how to find the available services by some means. In distributed object-oriented software, the means to find the services (which are represented by different object interfaces) is to look them up by name from some central location. This name lookup is similar to what people do when they want to find a service, such as a plumber. They go to a phone book (a central location), look up a name according to a set of rules (in this case, alphabetical listings of company names by category of service) and find the location (phone number) from which the service can be accessed.","The finding of object interfaces by looking up a name can become very complicated. What the name means, how it is constructed, what parts does it have and where the names are located are all part of a set of rules. This set of rules can be called a naming policy. The naming policy must be followed by all components of the distributed application for any component to work properly. The components publishing names must follow the naming policy so that other components, again using the naming policy, can later find the objects by name.","To ensure that all components follow the policy, a common approach is to embed the policy in the code or configuration of each and every application component. Unfortunately, this strategy of embedding the naming policy, and perhaps more than one in more complicated applications, in every component means that any change in the policy requires every component to be modified. Coordinating this modification across many components and versions of complex, distributed software is usually a costly and mistake-prone endeavor. Modifying software is a form of software maintenance. In this case, modifications to support naming policy changes are very costly because every component needs to be modified.","The technical problem is to reduce the maintenance costs of changing naming policies in a distributed software product.","The existing prior-art solutions can be organized into three categories: avoidance, design minimization, and automation.","Avoidance of maintenance is achieved by making all possible naming policies static and fixed. No subsequent changes are allowed, thus there is no associated maintenance costs.","Design minimization is achieved by making the initial naming policy as simple as possible. An example of a simple naming policy is a common \u2018white pages\u2019 phone book. Every name is listed at the \u2018top\u2019 level following an alphabetical structure. No hierarchical structure is allowed. This is known as a \u2018flat\u2019 structure and it has some very restrictive constraints such as every name must be unique in the entire phone book. Maintenance costs are limited because a simple naming policy can only be modified in very limited ways. In the phone book example, new names can be added, old names can be removed and the number for a name can be changed. Otherwise, nothing can be done without breaking the simple policy.","Automation of any naming policy changes is another way to reduce maintenance costs. By creating automatic tools that can modify the code and\/or configuration of components for naming policy changes, the maintenance effort can be reduced. However, this doesn't change the fundamental fact that all components must be modified to support any naming policy changes.","The existing solutions either lack flexibility or are not cost efficient.","Both the avoidance and design minimization approaches limit what the naming policy can be or do. As software is used and extended, new requirements for the naming policy cannot be accommodated. Avoidance means that no changes are tolerated. Minimization means that only a very small set of changes can be made. Anything more significant and the minimal design is broken.","The automation approach is usually not cost efficient. The cost of making and maintaining the automation tools must be amortized over many changes of naming policy across many components. Otherwise, the build and maintenance costs of the tools may exceed the cost of simply changing each component manually. Also, the automation tools are usually created with specific constraints on the possible changes in naming policy. Significant naming policy changes require significant changes to the automation tools, compromising the cost savings of automation.","Finally, none of the existing solutions can easily support the most common change of all; where new software clients expect new, additional naming policies for existing distributed computing software components. This type of change leaves an existing naming policy untouched, but adds one or more new sets of rules. The avoidance and minimization approaches cannot handle this change at all. The automation approach incurs substantial additional costs to support this, if it is even feasible at all.","Accordingly, the objectives of the present invention are (among others) to circumvent the deficiencies in the prior art and affect the following:\n\n","As illustrated in  (), the present invention as embodied in a system comprises one or more distributed systems (, ) that may be connected via a distributed network (). These distributed systems generally comprise a Publishing System () and an Accessing System () that may have corresponding computer systems (, ) that operate from instructions contained in computer software embodied on a variety of media (, , , ).","The computer software in the disclosed invention takes the form of a distributed Name Registrar (NaR) () software application that coordinates and implements Naming Policies () to permit names and objects published by the Publishing System () to be migrated to the Accessing System () via some communication means (). The present invention permits the Name Registrar () functionality to be centralized in one single software component to permit a greater degree of software reliability and maintainability than previously possible in the prior art.","As illustrated in  (), the distributed nature of the present invention is not specifically associated with telecommunications networks (although it has ample application in same) and may be advantageously applied to a wide variety of distributed computer software applications. Because distributed computer software applications exist for all manner of purposes, including but not limited to telecommunications network management, the scope of the exemplary application is rather broad. One could narrow the scope to just distributed computer software applications used to provide network management of telecommunications networks if necessary. However, as illustrated in  () the broadest application could simply show the computers (, ) that host the distributed computer software () (along with media (, , , )), the components that make up the software and communication () between them.","As an exemplary implementation context illustrated in  (), the present invention may have application (among others) in situations where there are one or more telecommunications networks (, ) that may or may not contain equipment from different vendors. The network equipment elements (NE) used within these networks (, , , ) may take many forms, including but not limited to switch gear, multiplexers, and the like. These network elements (, , , ) are generally under control of one or more computer systems (, ) that are controlled by computer software (, ) that may be stored on a variety of storage media. This computer software generally takes the form of one or more network element managers (, , , ) that control and monitor the network elements (, , , ) that comprise constituent components of the telecommunication networks (, ). In these circumstances, the present invention may deal specifically with implementations of the event transport architecture (ETA) and its associated naming\/object distribution\/publication as it relates to the overall control and monitoring of the various network elements (, , , ) within the context of one or more telecommunications networks (, ).","As illustrated in  (), the present invention may have application in situations where there are one or more distributed application components () that need to publish names of objects in a naming service () that are later accessed by other application components (). Most distributed software solutions find services (in the form of objects) by looking them up by name. The publishing of these names for each object must be done in a manner that is known to all participants. The publishing rules about where the names are located, what the names mean and how they are constructed are all part of a naming policy (). The naming policy must be followed by all components (, ) in order for the distributed system to work. Usually this is accomplished by embedding the naming policy in each and every component that makes up the distributed application.","The present invention deals specifically with a centralized service that provides naming policy and name publishing management as implemented in a Naming Registrar (NaR) (, ()). This NaR component provides functions to read a configuration file describing one or more naming policies, build static naming structures in a naming service (), publish objects by name in a naming service and provides an external interface that distributed components use to have their objects published by name according to the relevant naming policies.","The present invention is contrasted with the prior art in that rather than embed naming policies into every component of a distributed application, a separate software process running a separate application provides a name registration service.","The name registration service is embodied in an application called the Name Registrar (NaR) (). The NaR provides the ability to correctly publish objects by name according to one or more naming policies () for any number of components (). Each component () accesses the NaR at runtime by way of an external interface. The component provides a list of object references along with their basic names to the NaR. The NaR uses this information in conjunction with defined naming policies to determine where and how the object references are published in the naming service () so that other components () can access them.","By removing the knowledge of the naming policies from the components, and placing it in a central service, the high maintenance costs for naming policy changes are significantly reduced. Instead of having to change all components, only the central service need be modified.","The NaR is both flexible and cost efficient. Changes to a naming policy, or even additional naming policies, can be added by only modifying the NaR itself. Achieving this flexibility is cost effective because only a single component, the NaR itself, is modified.","The present invention avoids the problems of the existing prior art solutions and their related costs. The quantifiable costs are a function of the specific naming policy features of the target distributed computing software applications. In some cases, where the requirements are minimal, these costs will be very small and the present invention is not cost efficient. With requirements for multiple, complicated naming policies for a wide variety of clients, the present invention will be very cost effective.","Furthermore, as a separate software process, the present invention can be updated in the field without impacting other components. In practice, small and large naming policy changes can be supported by stopping and restarting the present invention in its new form with no effect on other distributed components.","The only drawback of the present invention is that it requires the development of a separate software component. The development costs of a new software component with the generality to support multiple, varying naming policies is not negligible but they are relatively small. The NaR is a highly cohesive component that only has to do one thing. Additional complicated features common to other distributed components are not needed. Thus, the NaR can be developed for a small fraction of the costs of a full-scale distributed computer software application component.","While this invention is susceptible of embodiment in many different forms, there is shown in the drawings and will herein be described in detailed preferred embodiment of the invention with the understanding that the present disclosure is to be considered as an exemplification of the principles of the invention and is not intended to limit the broad aspect of the invention to the embodiment illustrated.","The numerous innovative teachings of the present application will be described with particular reference to the presently preferred embodiment, wherein these innovative teachings are advantageously applied to the particular problems of a NAME REGISTRAR SYSTEM AND METHOD. However, it should be understood that this embodiment is only one example of the many advantageous uses of the innovative teachings herein. In general, statements made in the specification of the present application do not necessarily limit any of the various claimed inventions. Moreover, some statements may apply to some inventive features but not to others.","Throughout the discussion in this document the following definitions will be utilized:","System Blocks\/Procedural Steps not Limitive","The present invention may be aptly described in terms of exemplary system block diagrams and procedural flowcharts. While these items are sufficient to instruct one of ordinary skill in the art the teachings of the present invention, they should not be strictly construed as limiting the scope of the present invention. One skilled in the art will be aware that system block diagrams may be combined and rearranged with no loss of generality, and procedural steps may be added or subtracted, and rearranged in order to achieve the same effect with no loss of teaching generality. Thus, it should be understood that the present invention as depicted in the attached exemplary system block diagrams and procedural flowcharts is for teaching purposes only and may be reworked by one skilled in the art depending on the intended target application.","Personal Computer not Limitive","Throughout the discussion herein there will be examples provided that utilize personal computer (PC) technologies to illustrate the teachings of the present invention. The term \u2018personal computer\u2019 should be given a broad meaning in this regard, as in general any computing device may be utilized to implement the teachings of the present invention, and the scope of the invention is not limited just to personal computer applications.","Internet\/Intranet not Limitive","Throughout the discussion herein the terms Internet and Intranet will be used generally to denote any network communication system or environment. Generally the term Intranet will denote communications that are local to a given system or user, and Internet will describe communications in a more distant local. One skilled in the art will recognize that these terms are arbitrary within the contexts of modern communication networks and in no way limitive of the scope of the present invention.","The present invention specifically anticipates that in some implementations the GUI development framework (and\/or its runtime component) will communicate with the data used to drive the GUI over the Internet. Thus, the application driving the user interface may reside on one computer system and the data used for presentation and control may be contained somewhere else on another computer system and be accessed via any number of networking protocols.","Application Programming Interface (API) not Limitive","While the present invention may be in part implemented using standard Application Programming Interfaces (APIs) such as Software Development Kits (SDKs) and the like, there is no requirement that the present invention be implemented using these tools. Note also that the framework of the present invention may be incorporated into standard toolkits and the like which may or may not be integrated into an API framework for use in standard software development frameworks.","Operating System not Limitive","Additionally, while the present invention may be implemented to advantage using a variety of Microsoft\u00ae operating systems (including a variety of Windows\u2122 variants), nothing should be construed to limit the scope of the invention to these particular software components. In particular, the system and method as taught herein may be widely implemented in a variety of systems, some of which may incorporate a graphical user interface. Some examples of these include HP-UX\u2122, LINUX\u2122, SOLARIS, and UNIX\u2122 (and its variants), among others.","Data Structures not Limitive","The present invention may be embodied in a variety of data structures in some preferred embodiments. However, the form of such data structures as described herein is only exemplary. One skilled in the art would quickly realize that a wide variety of other data structures could be used equivalently in this application. Therefore, no data structure contained herein should be interpreted as limiting the scope of the present invention.","Communication Media not Limitive","The present invention may be embodied to affect transport of naming policy and\/or name registrar information over a variety of communication media. However, the signal format used to transmit such transmissions as described herein is only exemplary. One skilled in the art would quickly realize that a wide variety of other communication media could be used equivalently in this application. Therefore, no communication media contained herein should be interpreted as limiting the scope of the present invention.","CORBA not Limitive","The present invention may be implemented using the CORBA object oriented framework in some preferred embodiments. However, the form of implementation described herein is only exemplary. One skilled in the art would quickly realize that a wide variety of other distributed object oriented frameworks could be used equivalently in this application. Therefore, no framework contained herein should be interpreted as limiting the scope of the present invention.","A detailed technical description of the Naming Service used within the context of the various exemplary embodiments of the present invention can be obtained by referring to the CORBA Standard Services documentation (\u201cThe Common Object Request Broker: Architecture and Specification\u201d at ftp:\/\/ftp.omg.org\/pub\/docs\/formal\/98-12-01.pdf as well as the 1998 Object Management Group (OMG) CORBAservices: Common Object Services Specification, Revised Edition, OMG TC Document 98-12-09, Object Management Group (ftp:\/\/ftp.omg.org\/pub\/docs\/formal\/98-12-09.pdf)). These naming services are only exemplary of many that are possible for use with the teachings of the present invention.","Relationships to Invention Overview","The exemplary application is used in a distributed computing software application for network management functions for telecommunications networks. In this application, there are several components that need to have objects published in the naming service, but the primary ones are Element Management Layer (EML) Servers. There are two primary types of accessing components, with multiple instances of each, that need to find objects by name. One type of component uses a naming policy defined by an ECOM specification. Another type of component uses a naming policy defined by a 1353GEM specification. All components in this example use the CORBA standard Naming Service as a central location for storing and accessing names.","Separate Application","The present invention as embodied in the Naming Registrar (NaR) is implemented as a separate, stand-alone application. This application is usually run on the same delivery platform (PC, etc.) used by the other components that make up the distributed network management software application. The exemplary NaR uses CORBA interfaces to provide access to its services. It uses an implementation of a CORBA Naming Service for storage of object references by name. The NaR is started as part of the network management software infrastructure and runs indefinitely. It can be stopped by external command.","Operational Behavior ()","Upon startup the NaR reads a configuration file that describes the necessary naming policies (). Then, the NaR obtains a reference to the Naming Service, a place where all named interfaces are stored. The NaR creates the necessary static entries in the Naming Service according to the desired policies specified in the configuration file ().","When other client components startup and create interface objects that represent their services, they contact the NaR (). These clients of the NaR provide necessary information to the NaR either in the initial registration call or by responding to NaR queries.","The NaR uses this information (and its configured naming policies) to place the client objects into the Naming Service (). The NaR uses the naming policy information to determine where and with what actual names, the objects are placed.","This section describes, using various diagrams to include flowcharts, how the exemplary application behaves to achieve its functionality.","Naming Policy Example ()",{"@attributes":{"id":"p-0066","num":"0072"},"figref":"FIG. 10","b":"1000"},"In this naming tree, each major node () represents a Naming Context in the Naming Service. Naming Contexts represent major braches of the tree. Each object reference node () is bound to a Naming Context by a specific name. The path to an individual object reference node is the set of names of its containing Naming Contexts represented by the name bindings () between the nodes. In , the name path for object reference node () is \u201cECOM\/EML\/EML1\/ElementManager\u201d. Accessing components that know this naming policy can find the object references by using the name path.","In , there are two naming policies, one for the ECOM specification and one for the 1353GEM specification. Note that the two policies can co-exist in the same Naming Service without any conflicts.","ECOM Naming Policy ()","The naming rules for ECOM () are:\n\n","The naming rules for 1353GEM () are:\n\n",{"@attributes":{"id":"p-0071","num":"0083"},"figref":["FIG. 5","FIG. 5"],"b":["0500","0510","0520","0530","0540"]},"Read Configuration and Initialize ()",{"@attributes":{"id":"p-0072","num":"0084"},"figref":"FIG. 6","b":["0600","0610","0620","0630","0640","0650"]},"Build Static Naming Tree ()","The exemplary application uses the configuration data from () to determine what static naming context nodes must be created to support the required naming policies. To create these static contexts, the exemplary application finds the root naming context (), which is shown as (). The NaR first checks to see if there is already a naming tree present () or not. A naming tree may already be present if the NaR was started, then stopped and restarted. If a naming tree exists, the NaR verifies that it contains the necessary static naming contexts (). If the tree is verified () the NaR ends this activity. If not, it builds the static contexts in the usual fashion.","The NaR first creates each individual static Naming Context () using the standard Naming Service interface. It then binds these contexts in the required order of name paths using the names specified in the naming policies ().  () illustrates the static naming contexts of the naming tree example from . In this tree, the NaR finds the root context () and then creates (for example) the ECOM, 1353GEM, and EML contexts (, , ). It binds () and () to the root context and then binds the EML context () to the ECOM one (). In this fashion the initial and static portions of the naming tree are constructed and are available for the later dynamic portions to be inserted.","Receive Client Registration ()",{"@attributes":{"id":"p-0075","num":"0087"},"figref":"FIG. 8","b":["0800","0810","0820","0630","0830"]},"Build Dynamic Naming Trees ()",{"@attributes":{"id":"p-0076","num":"0088"},"figref":"FIG. 9","b":["0900","0830","0910","0920","0930","0940","0930"]},{"@attributes":{"id":"p-0077","num":"0089"},"figref":["FIG. 12","FIG. 10","FIG. 7","FIG. 11"],"b":["1200","1000","0700","1100"]},"The NaR finds the two naming policies that must be supported for this client as noted in step (). The NaR creates the Naming Contexts in the tree (, ) according to (). The NaR must then compute the names of these contexts based upon client supplied data and the naming policies.","The client tells the NaR in its registration call that it manages 1640-type NEs and that its numeric ID is \u201c7\u201d. Using this data, the NaR constructs the name \u201cEML7\u201d for () and \u201cEML1640\u201d for (). Using these names, the NaR binds the contexts to the static parts of the tree ().","In order to bind the object references to the tree (), the NaR needs these references and must compute name bindings for them. The registering client also supplies the object reference for the ElementManager object. The NaR constructs the names \u201cElementManager\u201d and \u201cElementManager7\u201d from the data it has and the naming policy rules. Finally, it binds the object references using these names into the naming tree at () and ().","As mentioned previously, the present invention may have wide application in distributed computer system networks in which one or more publishing systems () communicate with one or more accessing systems () to transfer names\/objects and\/or manipulate and control naming policies () under control of a centralized name registrar () service. While one skilled in the art will realize that a wide variety of computer networks () are applicable to this environment, there are also situations where the publishing () and accessing () systems may reside on the same computer system.","While the present invention may be best applied to situations in which telecommunications networks are to be managed and maintained either locally or remotely using graphical user interface (GUI) based operator consoles, the present invention also has wide applicability in situations in which any type of hardware and\/or software component in a computer network is to be managed in a uniform way with minimal software design complexity and maintenance costs.","The functional elements of the present invention are widely applicable to situations involving multiple types of remote equipment sourced from a variety of hardware and software manufacturers. Since the present invention breaks the compile-time link between network element management and the tool used to perform the management function, this permits a wide variety of applications in situations where networks must be grown dynamically by adding hardware and software, but which must remain up and functional during this upgrade process.","A Name Registrar (NaR) system and method incorporating a separate software component that permits manipulation, control, and distribution of names\/objects under direction of a distributed naming policy has been disclosed. The present invention teaches creation of a separate software component to handle name registration running within a separate software process. This separate software process has a remote interface utilized by a software application to send information related to names\/objects in their most basic form to the Name Registrar (NaR). Subsequently, the NaR performs all other functions that are necessary to publish the supplied name\/object in the proper form and type required by the accessing system consumers.","Although a preferred embodiment of the present invention has been illustrated in the accompanying Drawings and described in the foregoing Detailed Description, it will be understood that the invention is not limited to the embodiments disclosed, but is capable of numerous rearrangements, modifications, and substitutions without departing from the spirit of the invention as set forth and defined by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a fuller understanding of the advantages provided by the invention, reference should be made to the following detailed description together with the accompanying drawings wherein:",{"@attributes":{"id":"p-0035","num":"0041"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0036","num":"0042"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0037","num":"0043"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0038","num":"0044"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0039","num":"0045"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0040","num":"0046"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0041","num":"0047"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0042","num":"0048"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0043","num":"0049"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0044","num":"0050"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0045","num":"0051"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0046","num":"0052"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
