---
title: File stashing for storage media
abstract: An embodiment of a method includes determining a file size of each of multiple files to be included in a file system image. For each file having a file size less than a lower file size threshold of the storage device currently storing the file, the file is stashed in an alternate storage device having a throughput greater than a throughput of the current storage device. In an example embodiment, files that have sizes within a size range greater than the lower file size threshold are randomly selected for stashing in an alternate storage device. A system includes a file system image generator configured to selectively stash files based on file sizes and a lower file size threshold.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08370294&OS=08370294&RS=08370294
owner: Microsoft Corporation
number: 08370294
owner_city: Redmond
owner_country: US
publication_date: 20090506
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A disc image is a single file or set of data containing the complete contents and structure of a data storage device, such as a hard drive. Disc images are often created as system backups, or for deployment of commercial application programs or for audio\/video content. Disc images are often stored on destination devices that record the images on compact discs (CDs) or digital versatile discs (DVDs), which may be sensitive to the rate at which the data is delivered.","If the data is provided to such destination devices at a rate slower than the destination device optimally records the data, buffer under-run can occur. When buffer under-run occurs, physical damage can occur to the physical media of the destination device, because the destination device must wait for more data to be provided. While the destination device is waiting for more data, the writing element of the device, such as the laser in optical disc drives, may burn the media in a manner that renders the media unreadable.","Implementations of systems and methods described herein selectively stash files that are to be included in a file system image on a destination device, in order to meet a desired performance objective, such as a desired data transfer rate. Stashing involves storing a file from a source device to an intermediate storage device prior to communicating the file to the destination device. Stashing may be temporary or permanent. The intermediate storage device generally provides higher throughput than the source device. By stashing selected files in intermediate memory, the rate at which files are communicated to the destination device can be managed.","An implementation of a computer implemented method includes determining that a file size of a file to be included in a file system image is less than a lower file size threshold associated with a current storage device currently storing the file, and stashing the file on an intermediate storage device prior to storing the file in the file system image on a destination storage device based on the determination that the file size is less than the lower file size threshold. The method may further include measuring throughput of the current storage device while stashing the file, and adjusting the lower file size threshold if the measured throughput is less than a minimum throughput.","An implementation of a computer program product includes at least one computer storage medium storing computer executable instructions. When executed by a computer, the computer executable instructions cause the computer to carry out a process including determining a file size of each of a plurality of files to be included in a file system image. For each file having a file size less than a lower file size threshold, the file is stashed in an intermediate storage device having a throughput greater than the throughput of a current storage device where the file is currently stored. The process may further include randomly selecting files from the plurality of files that have sizes within a size range greater than the lower file size threshold and stashing the randomly selected files in the intermediate storage device.","This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","When recording files on certain media, there can be buffer under-runs, which arise if the source of the files is unable to keep up with the recording process. Buffer under-runs can cause problems. For example, when files are recorded on optical media of an optical storage device (e.g., an optical disc drive), a buffer under-run can cause physical damage to the media because the laser of the optical storage device may remain too long in one place over the surface of the optical media while the device is waiting for more data to be provided from the source. As a result, buffer under-runs can render the media unreadable.","The source of the files to be recorded may be, for example, a hard disk drive or network server, which may not be able to keep up with the recording process for any number of reasons. These reasons may include limited capabilities of the source, network congestion, or others. One way to prevent buffer under-runs is to stash all the files in another intermediate storage device which is capable of keeping up with the recording process. After all the files are stashed in the intermediate storage device, the files are transferred to the destination device at a data rate that is at least as fast as the destination device reads the data, thereby avoiding an under-run. While stashing all the files in an intermediate storage device solves the problem, this solution has drawbacks. For example, stashing all the files can be a costly use of processing time and computer resources.","In an example implementation discussed further below, prior to sending the files to the destination device, files are selectively stashed in intermediate storage devices that are able to keep up with the recording process. In other words, some files are stashed and other files are not stashed, so that buffer under-runs can be prevented, while conserving resources and minimizing expense. The determination of which files to stash and which files not to stash is based on the data transfer rates of the destination and source devices, as well as the sizes of the files. As is discussed further below, a lower file size threshold is determined, wherein files of sizes below the lower file size threshold are stashed in an intermediate memory.","Furthermore, the process of selectively stashing can be adjusted in real-time to thereby maintain a balance between avoiding buffer under-runs and saving costs, while coping with changes, such as changes in storage device data transfer rate. In an example embodiment files are throughput is measured while certain files are selectively stashed and while certain files are transferred to the destination device. Lower file size threshold for source and intermediate storage devices can be changed in real-time in response to variations in data throughput.","In various implementations, data entities, such as files, to be included in a file system or disc image are selectively stashed to achieve or exceed a performance objective, such as a specified data transfer rate. The specified data transfer rate is a recommended or desired data transfer rate of a destination device that receives the files. Stashing a file refers to storing the file on an intermediate storage device, which is capable of meeting the performance objective, prior to copying the file to a destination device. A file may be stashed temporarily or permanently. For example, a file can be stashed by copying the file from a source storage device to the intermediate storage device, and later copied from the intermediate storage device to the destination device.","Intermediate storage devices may include volatile or nonvolatile memory, which can provide for temporary or permanent file stashing. Source storage devices are devices where files originally reside and can include local or remote devices. Intermediate storage devices and source storage devices have various capabilities and designs that impact the rate at which those devices transfer data. Accordingly, the data transfer rates of the various storage devices can impact whether a buffer under-run occurs when transferring files from those devices to a destination device.","With further regard to data transfer rate, the data transfer rate is a function of the time it takes a storage device to open a file, read the file and transmit the file. In implementations discussed below, real-time adjustment of the stashing process is based on storage device throughput, which includes the data transfer rate of a given storage device and other factors impacting the rate of data transmission. For example, when a file is requested from a source storage device, the request may traverse a communication channel and the data from the storage device may traverse the communication channel, which can impart delay in a net or overall rate of data transfer. In implementations discussed below, the throughput of a storage device is the net or overall rate of data transfer.","As is discussed further below, in an example implementation the throughput of a storage device is measured when files of various sizes are transferred from the storage device. The measured throughput is used to calculate a minimum file size threshold. Files having sizes below the minimum file size threshold are stashed in intermediate memory prior to being transferred to the destination device. In one implementation, a file assembly process occurs, in which the files to be included in the image are identified and located. During the assembly process, any file that has a size less than the calculated lower file size threshold is stashed. After a file assembly process the files are copied to a buffer accessible by the destination device. The destination device is typically associated with a desired data transfer rate. The throughput of a storage device that a file is stored on may or may not be sufficient to achieve the desired transfer rate for a given range of file sizes.","As discussed further below, throughput of storage devices may vary as a function of file size. Because throughput for the various storage devices may vary as a function of file size, throughput of a storage device (e.g., source or intermediate storage device) may not be sufficient for files having sizes less than a certain size. Therefore, according to an implementation, file-size dependent throughput of each storage device is monitored to determine a lower file size threshold below which a minimum throughput is not met by each device. Files having sizes below the lower file size threshold for a given storage device are stashed in an intermediate storage device that can provide a higher throughput to the destination device.","In one or more implementations, storage device throughputs that are dependent on file size, are monitored during file stashing and the lower file size thresholds may be adjusted based on the measured throughputs. The lower file size threshold for a given storage device is increased by a determined amount when the storage device's throughput, measured while stashing a file having a size within a certain range below the file size threshold, is less than a certain rate or amount above the desired data transfer rate.","In some implementations, the file-size dependent throughputs of the storage device(s) are measured during recording of the image on media of the destination device, and the lower file size thresholds may be adjusted based on the measured throughputs. The lower file size threshold is set equal to the size of a recorded file plus a certain amount, if during recording of the file, the throughput of the storage device is less than the desired data transfer rate plus a determined amount.","According to various implementations, selected files that would otherwise be communicated to the destination device without being stashed, are nonetheless stashed. In such implementations, files having sizes within a certain range above the lower file size threshold are randomly selected to be stashed. During stashing in these cases, the throughput of the current storage device is checked and the lower file size threshold is adjusted as warranted under the usual stashing process.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","100","102","104","106","108","102","106"]},"In at least one implementation, the file system image generator  is part of the operating system (OS) of a computing device, such as a desktop computer, laptop computer, server computer, or others. For example, the file system image generator  may be part of a file system layer or mastering layer of the operating system. A file system imaging application  may be included on the computing device to enable a user to create file system images. The file system imaging application  can provide a user interface and\/or an application programming interface (API), through which the user can request that a file system image be created that includes one or more selected files or other data entities.","According to various implementations, the file system image generator  includes an application programming interface (API), through which the file system imaging application  communicates with the image generator . The file system imaging application  can receive a request from a user or an automated system or program (e.g., an application program) to generate a file system image, such as image . Through the API, the file system imaging application  can pass the request to the file system image generator .","In various implementations, through the file system imaging application , one or more data entities, such as files  or directories  (which can include one or more other files  or other subdirectories ), which are to be included in the image  can be specified. The file system imaging application  passes the specified file selection(s) to the file system image generator . A file system is a set of one or more files that may have some organization and attributes. The selected file(s)  may reside on one or more sources , such as local storage device(s) A, external storage device(s) B, network-based storage device(s) C or other storage device(s) D.","Files  selected for inclusion in the image  may be organized in some fashion, such as in a directory structure. Such file  organization can be defined in one or more sets of metadata, which can be included in the files . For example, metadata can specify attributes of files , such as their locations within the file organization or whether files are hidden or read-only. The image  therefore can include a copy of the selected files  and associated metadata.","In general, the file system image generator  copies data from the selected file(s)  from the one or more source(s)  to a buffer from which the destination storage device  reads the data. The destination storage device  may be sensitive to the rate at which data is provided to the destination storage device  from the file system image generator . Typically, the destination storage device  has an associated desired data transfer rate, which is the rate at which the destination device  optimally reads data from the buffer where the file system image generator  copies data.","If file data is transferred to the destination storage device  more slowly than the desired transfer rate, a buffer under-run condition may arise in which the destination storage device  waits for more data to be provided. Waiting for data by the destination storage device  can result in numerous potential disadvantages. For example, creation of the image  may be inefficient or time consuming. It is even possible that the image  is rendered unreadable if the destination storage device  waits for data.","The file system image generator , therefore, includes functionality to maintain the rate of data transfer to the destination storage device , even though the source devices  and intermediate devices  may vary in the rate of data transfer. The source devices  and intermediate devices  typically have different associated rates of data transfer, or throughputs. The throughputs of the storage devices can vary from device to device and\/or over time for any given device, as a result of numerous factors.","The throughput, and therefore the latency, of a source device  or intermediate device  in providing data of a requested file can be affected by several factors, such as the overhead time to open the file, the time it takes the storage device to read the file, and random delays, such as central processing unit (CPU) load or communication channel congestion (e.g., in the case of a network-based source device C). Throughput therefore includes not only the speed of the storage device in opening and reading the file, but also the speed of intervening communication channels.","To illustrate,  is a graph  depicting three example storage device throughput profiles: throughput  (), throughput  () and throughput  (), showing file size in kilobytes (KB) along the x-axis and throughput in kilobytes\/second along the y-axis. As shown, the throughput typically depends upon the file size. Typically, throughput increases asymptotically from zero to a maximum throughput as file size increases. The illustrated throughput profiles are different from each other due to random factors associated with file retrieval (e.g., differing or varying network congestion, etc.).","As a result of throughput profiles such as those shown in , when files are copied from their current location (e.g., a source device  or intermediate device ) to the destination , the rate of delivery to the destination  can vary based on numerous factors, including file size. The rate of delivery may or may not correspond to a desired data transfer rate associated with the destination storage device . For any particular file of a given size, the retrieval rate from the current storage device may not be sufficient to meet the desired data transfer rate of the destination device .","In accordance with an implementation, intermediate devices  can be used to compensate for differences between data rates of source devices  and the destination device . The intermediate devices  provide faster data transfer than the sources . More specifically, the intermediate devices  provide data throughput that is at least as fast as a specified data transfer rate of the destination device . Accordingly, by using the intermediate devices  for temporary storage of data, the file system image generator  can manage the rate at which data is provided to the destination storage device  to more consistently achieve a desired data transfer rate.","Examples of intermediate devices  are a local hard drive A, random access memory (RAM) B, non-volatile memory C and other memory D. With regard to non-volatile memory C, in at least one implementation, non-volatile memory C includes Flash memory. The Flash memory can be internal or external to the computing device which is creating the file system image. For example, internal Flash memory may reside physically or logically between dynamic random access memory (DRAM) and the destination storage device .","According to various implementations, the file system image generator  selectively stashes files from the source  to an intermediate storage device  (or from an intermediate device  to another intermediate device ). Stashing refers to temporarily or permanently storing data from a file in an intermediate memory or other intermediate storage device prior to communicating the data to the destination storage device . The file system image generator  determines whether to stash a given file  in an intermediate memory based on the size of the file and a measurement of the file-size dependent throughput associated with retrieving the file from the storage device that currently stores the file (i.e., the current storage device). Thus, the generator  selectively stashes files from the source .","In general, according to at least one implementation, to determine whether to stash files for a given source device , for example, the file system image generator  determines a lower file size threshold that corresponds to the desired data rate of transfer to the destination device . Any file having a size less than the determined lower file size threshold is stashed prior to being transmitted to the destination device . The lower file size threshold is adjusted in real time as files are transferred in order to adjust for changes in throughput and maintain a desired data transfer rate.","In some implementations, discussed in more detail below, files that have been stashed in an intermediate device  (e.g., in nonvolatile memory) can be later stashed in another intermediate device . Such a situation may arise, for example, if the throughput of the first intermediate device  changes for some reason (e.g., delay in reading memory or data bus congestion). In such implementations, a lower file size threshold is determined for each intermediate device  and files already stored in an intermediate device  can be moved to another intermediate device  if the files have sizes less than the threshold. Lower file size thresholds are discussed below in detail with respect to source storage devices , but it will be understood that lower file size thresholds can be usefully applied to intermediate storage devices  as well.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 4","b":["400","402","104","106","404","406","404","404"]},"The desired data transfer rate  can be set according to design parameters, and may be obtained from specifications of the destination storage device . For example, the manufacturer of the destination storage device  may publish (e.g., in manufacturer's specifications) a recommended or specified transfer rate, desired read speed or similar value indicating the rate that data is read by the destination device . In various implementations, the desired data transfer rate  is used to determine or adjust the lower file size threshold. In general, throughput is tested during file stashing and communication to the destination device. Based on the measured throughput , the lower file size threshold may be adjusted during stashing or communication.","In one implementation, during image generation, the generator  measures storage device throughput for stashed files that have sizes within a tolerance region less than the current lower file size threshold. If the measured throughput  is not at least a determined amount greater than the desired transfer rate  for a given file, the lower file size threshold for the storage device is adjusted. In one implementation, the adjustment involves increasing the lower file size threshold by a selected amount, which may be a percentage of the current lower file size threshold.","To illustrate, referring to , assume line  marks a file size corresponding to the current lower file size threshold  minus a set value, denoted as N % of the current lower file size threshold . The region between line  and the current lower file size threshold  defines a tolerance region  of file sizes for which throughput will be tested during stashing. Another line  marks a throughput equal to the sum of the desired transfer rate plus a determined amount, where the determined amount is denoted as M % of the desired transfer rate . In this implementation, the value M % represents a safety margin, which can be used to further ensure that buffer under-runs will not occur. The value of M can be adjusted to balance the likelihood of buffer under-run with the cost of stashing files. Line  marks a minimum throughput, below which, the lower file size threshold is adjusted.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 4","b":["402","410","410","407","412","414","414"],"sub":"1"},"With regard to values k, N and M, these values are design parameters that can be set to achieve particular design goals and\/or adjusted in real time to adapt performance. In one implementation, kis 4, N % is 15% and M % is 10%, but k, N and M are not limited to these values.","Before describing , some discussion is provided with respect to  and .  shows adjustment of the lower file size threshold during stashing of files. As is discussed in further detail below with respect to , files are stashed, if at all, prior to communicating the files to the destination device.  shows adjustment of the lower file size threshold during communication of the files to the destination device, for example so that the adjustments can be applied in a future data transfer.  also shows how files that would otherwise not be stashed can be selected for stashing, and how the lower file size threshold can be adjusted prior to being communicated to the destination device.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 5","FIG. 5"],"b":["500","502","108","504","506","508","510"]},"In the example scenario shown in , the measured throughput  for the given file \u201cx\u201d is less than a minimum throughput, determined by the sum of the desired transfer rate  plus a determined value, denoted as M % of the desired transfer rate . The minimum throughput in this case is marked by line  in . Because the measured throughput  is less than the minimum throughput , the lower file size threshold is adjusted. Specifically, the lower file size threshold is set equal to a new threshold , given by the sum of the file size  plus a determined amount, denoted by N % of the file size .","In some implementations, some files may be stashed even though their sizes are greater than the lower file size threshold . In such implementations, files that have sizes that fall within a test region  above the lower file size threshold are randomly stashed. For example, in one implementation files that have sizes greater than or equal to the lower file size threshold, but less than an upper threshold size  greater than the lower file size threshold  (i.e., files which would otherwise be communicated to the destination device without stashing) are randomly stashed. In one implementation, the upper threshold size  is equal to the current lower file size threshold  times some percentage, which is typically greater than 100%.","Random stashing of files that would otherwise not be stashed may be referred to as forced stashing. In such cases, the source throughput is checked as it normally would be during stashing and the lower file size threshold is adjusted if appropriate. Such additional stashing and checking can help ensure that the lower file size threshold is set to achieve the desired data transfer rate.","In accordance with various implementations, the lower file size threshold (e.g., , ) may decrease under certain circumstances. For files that are in a certain range greater than the lower file size threshold, the throughput is measured while those files are being communicated to the destination device. The measured throughput is compared to a minimum data transfer rate. If the measured throughput is at least as great as the minimum data transfer rate at least a certain number of times, then the lower file size threshold can be reduced by some reduction value.","For example, suppose the current lower file size threshold is X. During recording of data onto the destination device, the throughput is checked for files with sizes that are within a range above X, such as files of sizes within [X; X+A %] range. If the measured throughput was above a minimum transfer rate (e.g., desired data transfer rate+B %) for a specified number (e.g. 1000) of files in that range, then the lower file size threshold, X, is reduced by C %. A counter can be used to count how many files within the range [X; X+A %], and compared to the specified number. When the counter reaches the specified number, the file size threshold is reduced.","In implementations that allow for reduction of the lower file size threshold, the file counter may be reset to 0 if the lower file size threshold is changed. For example, suppose X is 1 MB, and transfers of 500 files between 1 MB and 1 MB+A % have exhibited throughput of at least the minimum transfer rate. If X increases to 1.2 MB due to another adjustment (e.g.,  (FIG. )), then the counter should be reset to zero (0). By resting the counter, 1000 files with size between 1.2 MB and 1.2 MB+A % will be counted at or above the specified minimum data transfer rate, before reducing the lower file size threshold by C %. The values X, A, C and B, as well as the specified number of files, are not limited to any particular values and can be set to any values based on design objectives.","Referring again to , in some implementations, for a given file and desired data transfer rate, the file system image generator  selects an intermediate device  from multiple intermediate devices . The selection of the intermediate device  to be used for stashing can be based on a determination of a lower file size threshold for each intermediate device  and comparison of the current file size to the threshold, for example, in the manner discussed above with regard to the source storage devices .","In accordance with various implementations, the lower file size thresholds are stored in association with corresponding storage devices, for example in one or more data structures. The storage device thresholds and data for use in assembling the file system image can be stored in the file system image management data . In some implementations, the file system image management data  is stored in persistent memory, such as nonvolatile memory. An example of file system image management data  is shown in .","The example implementation of the file system imaging management data  shown in  includes storage device lower file size threshold table  and file system imaging assembly data . Storage device lower file size threshold table  maintains associations between identifiers  of storage devices, desired transfer rates  and associated lower files size thresholds . The storage device identifiers  may identify source storage devices  or intermediate storage devices .","In one implementation, the lower files size threshold table  is maintained in persistent memory, such as the operating system registry or Flash memory, so that the lower file size threshold for each storage device is available for use from one image generation process to another. Because a destination device may support multiple speeds and a source device in example implementations can supply or feed data to multiple destination devices, desired transfer rates  are stored in association with the storage device identifiers  and lower file size thresholds . For example a destination device may support a number of discrete speeds, such as 2\u00d7, 4\u00d7, or others.","In the illustrated implementation, for a given storage device, multiple thresholds may be determined for multiple desired transfer rates. Therefore, table  may include multiple rows for a given storage device to associate multiple storage device\/desired transfer rate pairs with corresponding determined lower file size thresholds. For example, in the scenario of , three thresholds (threshold , threshold  and threshold ) have been determined for storage device . Each of the three thresholds corresponds to a different desired transfer rate (desired transfer rate , desired transfer rate  and desired transfer rate ) associated with storage device .","Initially, before any file system images are created, the lower file size thresholds  may be set to default values. At the beginning of each image generation, the appropriate threshold is read from the table , depending on which storage device currently stores the file(s) to be imaged and the desired transfer rate. The thresholds  may be updated during each image generation process as the thresholds change.","For example, threshold  may be initially set to a default value of 550 KiloBytes (KB). While generating a first image that includes files from storage device , the threshold  might be determined to be 1000 KB. Threshold  is updated to be equal to 1000 KB. When a second image is created later, the 1000 KB threshold is read from table  and used to create the second image. While creating the second image, due to changes in throughput of storage device  or other factors, the threshold may change to 1500 KB. In this case, the threshold  is updated with the new file size threshold of 1500 KB.","The example file system image assembly data  maintains associations between identifiers (e.g., file names, uniform resource locators (URLs), etc.)  of files to be included in an image and identifiers of the current storage locations  of those files. The identified locations  in the assembly data  identify at least the storage device, but may also identify a memory location on the appropriate storage device, as well other information used during image assembly or communication to a destination device. The current storage locations  may identify source storage devices or intermediate storage devices, depending on where the files  are currently located.","In one implementation, the locations  are initially set with default values, such as the source storage locations where the identified files  are stored. During the image generation process, one or more of the files  may be stashed in an alternate memory, such as an intermediate storage device. The locations associated with those one or more files are updated to identify the intermediate storage device locations. In some implementations, the file system image assembly data  is stored in persistent memory, where it can be carried over and used from one image generation process to the next.","During the image assembly process, the storage locations  are set and\/or changed. During the image communication process, the storage locations  are used to locate the files to be included in the image. An example image assembly process that can use and update file system image assembly data  is shown in  and discussed below. An example file communication process that can use the file system image assembly data  to locate files is shown in  and discussed below.","The image assembly data  may span more than just the previous assembly. Depending on the amount of space available on intermediate storage devices, stashed copies do not necessarily need to be deleted after each image generation. To keep track of previously stashed files, the image assembly data  may also include one or more last access times . A last access time  can be associated with each of the identified files  and updated each time the identified file is stashed or the stashed copy is used. The oldest entry or entries (i.e., the least recently accessed file or files) in the image assembly data , and the file(s) associated with the entry or entries, can be removed to free memory.","Although the implementation shown in  relates to the storage of an image  on a destination storage device , concepts described herein can also be applied in cases where the destination device is not a storage device, and in cases that have nothing to do with image creation. For example, stashing of files could be used when the destination device is a video or audio player that plays back content. As another example, the destination device may be a printer. In such cases, and others, the destination device may be sensitive to the rate at which data is communicated to, or read by, the destination device. Accordingly, data may be stashed in intermediate storage\/memory as discussed herein to achieve a desired data transfer rate, even when the destination device is not a storage device.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 6","FIG. 1"],"b":["600","602","102","110","1"]},"A creating operation  creates a set of file system imaging management data (e.g., file system image assembly data  ()) for use in constructing and communicating the image to a destination device, if no file system imaging management data has been created yet. In general, if file system imaging management data  exists from a previous image generation process, the existing file system imaging management data  can be used and updated during the process of creating the next file system image.","If no file system imaging management data  exists, the creating operation  creates a new set of file system imaging management data . In this case, creating operation  involves creating data structures, such as storage device lower file size threshold table  and file system image assembly data , with one or more blank entries. As is discussed below with regard to assembling operation , the blank entries are filled in, and new entries are added, as the user or application program specifies files to be included in the file system image.","In a receiving operation , one or more file specifications are received, which specify a file or files to be included in the image. The receiving operation may receive a file name or other identifier identifying a selected file. Alternatively, the receiving operation  may receive a directory or directory tree name or other identifier. When a directory or directory tree identifier is received, this generally indicates that the files with the specified directory and subdirectories are to be included. As such, numerous files can be specified by way of a directory or directory tree specification.","In an assembling operation , a file system image is assembled to include one or more selected files. In an implementation of the assembling operation , the one or more files specified in receiving operation  are identified and their locations updated and\/or registered (e.g., in file system image assembly data  ()). Subsequently, the communicating operation  can use the registered file locations to locate and transfer the files to the destination.","In an implementation of the assembling operation , it is determined whether the selected file or files should be stashed based on file size and a lower file size threshold. During image assembling operation , file locations (e.g., file locations  ()) may be updated in the file system image assembly data  for any files whose locations change, for example, as a result of stashing. An example assembling operation  is shown in  and discussed below.","A querying operation  determines whether at least one more file is specified for inclusion. Querying operation  may check whether a user or automated system has specified another file or files to be included. If at least one more file is specified, handling operation  branches \u201cYES\u201d to receiving operation , where an identifier of the one or more files is received. If no more files are specified, handling operation  branches \u201cNO\u201d to a communicating operation . Accordingly, in this implementation, all the specified files are assembled and stashed, if appropriate, prior to transferring them to the destination device.","In a communicating operation , files to be included in the image are communicated to the destination device. In an implementation of the communicating operation , file system image assembly data  can be used to locate the files to be copied. During the communicating operation , one or more lower file size thresholds (e.g., lower file size thresholds  ()) may be updated, depending on the throughput of the storage device(s) during data transfer. An example communicating operation  is shown in  and discussed below.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 7","FIG. 6"],"b":["608","608","608"]},"A determining operation  determines a selected file's current location. In one implementation of the determining operation , the current location of the selected file is determined by searching a data structure, such as file system image assembly data  (). If the selected file is identified in the data file system image assembly data , the associated current location is obtained from the set of current locations .","If, in the determining operation , the selected file is not found in the file system image assembly data , the current location can be determined using standard file locating systems, such as the OS file system (for local files) or a domain name system (DNS) look-up with a URI (for network-based files). The determining operation  then adds the new file, along with the file's location, to the file system image assembly data .","In another determining operation , the size of the first selected file (the current file for purposes of this iteration) is determined. In one implementation, the name or other identifier of the current file may be obtained from the file system image assembly data . The storage device where the current file is currently located is also determined, for example by reading the current storage location  from the file image assembly data . In an implementation of determining operation  metadata about the selected file is read to determine the file size. Determining operation  may query the current storage device that contains the file to determine the file size.","In a querying operation  it is determined whether the file size of the current file is less than the lower file size threshold associated with the current storage device and desired transfer rate. In one implementation of the querying operation , the lower file size threshold associated with the current storage device and desired transfer rate is read from a data structure, such as lower file size threshold data structure  (). The file size determined in operation  is compared to the lower file size threshold associated with the current storage device and desired transfer rate.","If, in querying operation , it is determined that the file size is less than the lower file size threshold, the assembling operation  branches \u201cYES\u201d to stashing operation . Stashing operation  copies the current file to an intermediate storage device. During the copying of the file from the current storage device to the intermediate storage device, the throughput of the current storage device is measured. As discussed above, the intermediate storage device used for stashing may be an intermediate storage device that is generally capable of providing a throughput greater than throughput associated with the current storage device.","In an implementation of the stashing operation , the intermediate storage device is selected from multiple intermediate storage devices, which have different speed or latency characteristics. The intermediate storage device may be selected based on a determined throughput based on file size. For example, stashing operation  may compare the current file size with the lower file size threshold associated with each intermediate storage device and the desired transfer rate, such as thresholds in the data structure  ().","An implementation of the stashing operation  may choose one of the intermediate storage devices based on the difference between the current file size and the intermediate device threshold and the sensitivity of the destination device to data buffer under-run conditions. If the destination device is more sensitive, the stashing operation  may choose an intermediate storage device having a lower associated lower file size threshold. If the destination device is less sensitive, the stashing operation  may choose an intermediate storage device having a higher associated lower file size threshold.","In another implementation of the stashing operation , the intermediate storage device is selected based on the amount of memory available on the intermediate storage devices. For example, an intermediate storage device may be selected over another intermediate storage device that has less memory available for stashing.","In yet another implementation of the stashing operation , selection of an intermediate storage device may be based on a predefined ranking of intermediate storage devices. The predefined ranking may reflect each intermediate storage device's relative value. For example, on-board Flash memory may be more valuable than a local hard drive, because the amount of such memory is typically much smaller than the amount of space on a local hard drive. Flash memory may also provide higher performance and may be utilized, for example, to cache other data that may be more important.","In an updating operation , the location of the current file is updated in the file system image assembly data  (). In an implementation of the updating operation , an identifier for the intermediate memory location  is stored in association with the identifier (e.g., name) of the current file  in the file system image assembly data . For example, the intermediate memory location identifier  may identify a selected intermediate storage device, as well as the memory address on the selected intermediate storage device.","In another querying operation  it is determined whether the file size of the current file is within a tolerance region (e.g., region  ()) less than the lower file size threshold of the current storage device from which the current file was retrieved in the stashing operation . In the illustrated implementation, the tolerance region is defined by the lower file size threshold and a lesser value such as the lower file size threshold minus a tolerance factor, such as N % of the lower file size threshold.","If the file size is not within the tolerance region , the operation  branches \u201cNO\u201d to another querying operation , which checks whether another file has been specified.","On the other hand, if in querying operation  it is determined that the file size is within the tolerance region, the operation  branches \u201cYES\u201d to another querying operation . In querying operation , it is determined whether the throughput of the current storage device measured in stashing operation  is at least as great as a minimum throughput, such as the desired data transfer rate plus a safety margin (e.g., M %). In the illustrated implementation, querying operation  determines whether the measured throughput is greater than or equal to the desired data transfer rate plus another tolerance factor, such as M % of the desired data transfer rate.","If in querying operation  it is determined that the measured throughput of the current storage device is at least as great as the minimum throughput, the operation  branches \u201cYES\u201d to querying operation , which checks whether another file has been specified.","On the other hand, if in querying operation  it is determined that the measured throughput of the current storage device is less than the minimum throughput, the operation  branches \u201cNO\u201d to a setting operation . In setting operation , the lower file size threshold associated with the current storage device (i.e., the device from which the current file was copied in stashing operation ) and the desired transfer rate is set. In this particular implementation, the lower file size threshold is increased by setting the lower file size threshold equal to the size of the current file plus another tolerance factor, denoted by \u201ck*N %\u201d (N % of the size of the current file) in .","The values N, M and kmay be set as design parameters to meet one or more performance objectives. In one particular implementation, N=15%, M=10% and k=4. It should be understood that N, M and kare not limited to these particular values, but rather, they may be set to any respective values as may be suitable to the particular implementation. For example, in other implementations, N is 20%, M is 15% and kis 5. Furthermore, one or more of N, M and kmay be automatically or manually adjusted in response to real-time observations. For example, if buffer under-runs occur despite the processes described herein, M may be increased to thereby increase the safety margin. As another example, N may be decreased to reduce the size of the tolerance region  to thereby perform the throughput check in querying operation  less and free up processing time.","After the lower file size threshold is set in setting operation , the operation  branches to querying operation , which checks whether another file has been specified. Returning to querying operation , if it is determined that the current file size is not less than the lower file size threshold, the operation  branches \u201cNO\u201d to another querying operation .","In querying operation  it is determined whether the current file size is within a test range (e.g., test range  ()) greater than or equal to the lower file size threshold and whether the current file is selected for stashing. In a particular implementation, it is checked whether the current file size is between the lower file size threshold of the current storage device and some amount, k, times the lower file size threshold. If the file size is between the lower file size threshold and ktimes the lower file size threshold, the current file has a probability \u201cP\u201d of being selected. If the current file is selected, the assembling operation  branches \u201cYES\u201d to the stashing operation .","To further illustrate, in an implementation of the querying operation , if the current file size is within a range bounded by the lower file size threshold and a predetermined amount (e.g., k) times the lower file size threshold, there is only a chance, P, that the operation  will branch \u201cYES\u201d to stashing operation . The value of kmay be virtually any value, depending on the implementation. In some implementations, the value of kis typically between 1 and 5, and may or may not be an integer. By branching \u201cYES\u201d with probability P, the stashing operation , querying operation , querying operation  and setting operation  may occur randomly in some cases where stashing and associated threshold and throughput testing and adjustment would not otherwise occur.","Probability P is typically selected to ensure that at least some of the files that would otherwise not be stashed before being communicated to the destination storage device are stashed. For example, in some implementations, P may be set to 20%, so that on average one in five files which would not otherwise have been stashed will be stashed. P may be set to virtually any value between zero and 100%, depending on the particular implementation. By randomly stashing files that have sizes within the test range, the lower file size threshold can be further verified in cases where it would not otherwise be verified.","In another implementation of the querying operation , every \u201cn\u201d file having a size within the test range  is selected. In this implementation, the value \u201cn\u201d could be any number, depending on design goals. For example, \u201cn\u201d may be 5, 10, 20, or some other number. Further, \u201cn\u201d may be set and\/or adjusted based on real-time observations. For example, if \u201cn\u201d is initially set to 20, but during the file transfer process, it is determined that under-run conditions still occur, \u201cn\u201d may be reduced to cause more files to be stashed.","If, on the other hand, it is determined in querying operation  that the current file size is not within the test range or the current file is not randomly selected, the operation  branches \u201cNO\u201d to querying operation , which checks whether another file has been specified. If in querying operation , it is determined that at least one more file has been specified, the operation  branches back to determining operation .","Operation  continues to loop until the specified files have been assembled, iterating through each file to be included in the file system image. If the querying operation  determines that all the specified files have been assembled, the assembling operation  branches \u201cNO\u201d to returning operation , which returns to operation  ().","In an alternative implementation of the assembling operation , the decision whether to stash the selected file(s) is made after all the selected files and\/or directory trees have been specified. For example, as a user selects each file or directory tree to be included, associated identifier(s) of the selected file(s) can be stored in memory, for example, in file system image assembly data  (). After the file(s) have been specified and entered into the file system image assembly data , the assembly operation  can iteratively step through the entries and determine whether each specified file should be stashed.",{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 8","b":["612","608","802"]},"In a particular implementation, the current location of the file to be copied is determined by reading the current location data  of the file image assembly data  (). Of course, the current location may be a source location (e.g., source storage device  ()) or an intermediate location (e.g., intermediate storage device  ()). In copying operation , the throughput of the current storage device is measured during copying from the current storage device to the destination storage device.","In a querying operation  it is determined whether the measured throughput of the current storage device is at least as great as some minimum throughput. In one implementation, querying operation  determines whether the measured throughput is greater than or equal to a desired data transfer rate associated with the destination device plus some tolerance. In the particular implementation shown, it is determined whether the measured throughput is greater than or equal to the desired transfer rate plus M % of the desired transfer rate.","If, in querying operation , the measured throughput is determined to be greater than or equal to the desired transfer rate plus the tolerance, the operation  branches \u201cYES\u201d to another querying operation , which checks whether another file is to be communicated to the destination memory.","If, on the other hand, it is determined in querying operation  that the measured throughput is not at least as great as the minimum throughput (e.g., the desired data transfer rate plus a safety margin), the operation  branches \u201cNO\u201d to a setting operation . In the particular implementation shown, setting operation  adjusts the lower file size threshold of the current storage device by setting it equal to the current file size (the file size of the file copied in copying operation ) plus N % of the current file size.","In one implementation, the setting operation  saves the change to the lower file size threshold in the storage device lower file size threshold table  (). For example, the new lower file size threshold can be saved in a set of threshold values  in association with the corresponding current storage device and desired transfer rate.","After adjusting the lower file size threshold in setting operation , the operation  branches to querying operation . Querying operation  determines whether at least one more file is to be communicated to the destination memory. If so, communicating operation  branches \u201cYES\u201d to the copying operation  where the next file is copied from the next file's storage device to the destination memory. If querying operation  determines that all files have been copied, communicating operation  branches to returning operation , which returns to the handling operation  shown in .","It will be appreciated that the operations shown in  are merely one illustrative implementation and numerous changes may be made, depending on the design. For example, the order of operations shown in  may be changed to suit any particular design. In addition, operations shown in one or more of  may be logically included in other operations and\/or combined to suit a particular design.","With reference to , an exemplary system for implementing the operations described herein includes a general-purpose computing device in the form of a conventional personal computer , including a processing unit , a system memory , and a system bus . System bus  links together various system components including system memory  and processing unit . The processing unit  can include one or more processors, for example microprocessors or multiprocessors.","System bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. System memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routine that helps to transfer information between elements within the personal computer , such as during start-up, is stored in ROM .","As discussed above, in various implementations, the personal computer  can include internal Flash memory , which can be used as intermediate memory. Flash memory  may have a faster throughput than other types of memory. In this regard, Flash memory  can be used to stash files or other data, prior to communicating the data to another destination device. Because Flash memory  is nonvolatile, files may be stashed in Flash memory  on long term basis, such as semi-permanently.","As depicted, the example personal computer  further includes a hard disk drive  for reading from and writing to a hard disk (not shown), a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disc drive  for reading from or writing to a removable optical disc  such as a CD ROM, DVD, Blu-Ray\u2122, or other like optical media.","As discussed above, optical disc drive  is one possible storage device that can be used to store a file system image that includes from other storage media accessible to the computer . Because optical disc drive  may be sensitive to the rate of data transfer, selective stashing processes discussed above may be used to provide a desired rate of data transfer to the optical disc drive . However, it will be understood that the systems and processes described herein can be implemented even if the destination storage device is not sensitive to the rate of data transfer.","Hard disk drive , magnetic disk drive , and optical disc drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. These exemplary drives and their associated computer readable storage media provide nonvolatile storage of computer readable instructions, data structures, computer programs and other data for the personal computer .","Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disc , it should be appreciated by those skilled in the art that other types of computer readable storage media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video discs, random access memories (RAMs), read only memories (ROMs), and the like, may also be used in the exemplary operating environment.","A number of computer programs may be stored on the hard disk, magnetic disk , optical disc , ROM  or RAM , including an operating system , one or more application programs , other programs , and program data . As discussed above, operating system  may include a file system image generation program  that includes executable instructions for implementing the selective stashing systems and carrying out the processes described in  when executed by one or more processors. Application programs  may include a file system image application  that provides a user interface and interacts with the file system image generator  to enable a user to generate a file system image.","A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device  (such as a mouse). Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port, a universal serial bus (USB), etc.","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown), such as speakers and printers.","Personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . Remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer .","The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, Intranets and the Internet.","When used in a LAN networking environment, personal computer  is connected to local network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. Modem , which may be internal or external, is connected to system bus  via the serial port interface .","In a networked environment, computer programs depicted relative to personal computer , or portions thereof, may be stored in a remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Some or all of the example technology described herein can be variously implemented via computer-executable instructions, such as program modules, which are stored and\/or executed by one or more computers (or processors within them) or other devices. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various implementations.","An implementation of these modules and techniques may be stored on or transmitted across some form of computer-readable media. Computer-readable media can be any available media that can be accessed by a computer. By way of example, and not limitation, computer-readable media may comprise \u201ccomputer storage media\u201d and \u201ccommunications media.\u201d","\u201cComputer storage media\u201d, \u201cstorage media\u201d, \u201cstorage\u201d, and the like include volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Computer storage media includes RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile discs (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices.","\u201cCommunication media\u201d typically embodies computer-readable instructions, data structures, program modules, or other data in a modulated data signal, such as carrier wave or other transport mechanism. Communication media also includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above are also included within the scope of computer-readable media.","Although some exemplary methods and systems have been illustrated in the accompanying drawings and described in the foregoing Detailed Description, it will be understood that the methods and systems shown and described are not limited to the particular implementation described herein, but rather are capable of numerous rearrangements, modifications and substitutions without departing from the spirit set forth herein. For example, principles and technologies disclosed herein can be applied not only to copying a disc image onto a storage medium such as one or more CDs or DVDs, but to copying or transferring any set or lesser subset of data from a source device to a destination device directly and\/or or through one or more intermediate storage devices. There can be multiple layers of storage devices, and an intermediate storage device can function as a source device with respect to another intermediate storage device, in a process or system for transferring data to a destination device. For example, principles and technologies disclosed herein can be applied in \u201con-demand\u201d transfer of music, video, or other multimedia, or other data, to one or more destination devices where timing is an issue. For example, in situations where transfer of data needs to occur at or above a minimum continuous rate and\/or at or above an overall rate, and\/or by a particular time deadline, principles and technologies disclosed herein can be applied. The data to be transferred can be contiguous or monolithic, or can be a set of separate groups of data, which can (but need not necessarily) be related or linked with each other in a hierarchical or other fashion.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts describe above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 4-5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 6-8"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
