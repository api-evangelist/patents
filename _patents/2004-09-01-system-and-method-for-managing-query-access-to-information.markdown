---
title: System and method for managing query access to information
abstract: A system, computer usable medium and computer-based method for supporting named memory variables in an information retrieval system including a relational database. PUBLIC and PRIVATE named memory variables can be created, referenced, modified or deleted using SQL statements. The information retrieval system allocates a memory area as a named variable storage space for storing named memory variables. System catalogs may be used for storing information about PUBLIC, SECURE PUBLIC, PRIVATE, SECURE PRIVATE and pre-defined named memory variables. PUBLIC and PRIVATE named memory variables can be used for transferring information between SQL statements of one or more sessions or for retrieving system information from the relational database. Both PUBLIC and PRIVATE types can be defined as SECURE named memory variables requiring specific authorization privileges to read or write to the variable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07668805&OS=07668805&RS=07668805
owner: International Business Machines Corporation
number: 07668805
owner_city: Armonk
owner_country: US
publication_date: 20040901
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to information retrieval systems, and more specifically, relates to managing query access to information.","2. Description of Related Art","Relational database systems are widely used for storing and retrieving information. Typically, relational database systems have a database including tables of data stored on a data storage medium, such as disk, and a relational database management system (RDBMS) for managing the database and providing an interface thereto. The RDBMS is responsible for processing requests to access the information in the database, for client applications, which requests are typically formalized in the Structured Query Language (SQL). To make requests and receive responses, client applications typically connect to the RDBMS and conduct the communications within a session. Connection and session management at the RDBMS is a typical manner of sharing resources among a plurality of client applications.","Traditionally, in order to share information between different SQL statements in the same session, or between different database sessions, the client application issuing the SQL statements either must copy the values from the set of input\/output arguments (e.g. host variables) of one statement to those of another or write the values to a table in the RDBMS with one statement and read them from that table with the next statement. Thus, sharing information between SQL statements traditionally requires that the client application provide the mechanism and logic necessary to transport the information and the used SQL statements must intrinsically understand and use the same client mechanism. Also, SQL statements defined and contained within the database system itself, such as SQL statements used to define triggers and views, could not access this information at all if it was contained in the client application's memory. Another problem encountered by RDBMS products is that access to internal system information by SQL statements has traditionally been done via SQL special registers but these registers must be defined and implemented within the SQL language and the SQL Compiler in the relational database system before the special register may be used. This overhead slows the introduction of access to internal information desired by users of relational database systems and forces users to wait for the relational database system vendor to implement the new special register.","Overall, these restrictions limit the flexibility of relational database systems and, thus, the ability of users of such systems to implement complex, interactive models within the database itself. Users are forced to implement supporting logic inside their client applications or stored procedures (i.e. independent routines containing both logic as well as SQL statements, all of which are stored in the database for later invocation) in order to access and transfer information from SQL statement to SQL statement within a relational database system. Ensuring the security of the information being transferred and accessed is also left to the user to enforce in their application logic.","Therefore, there is a need for a simple, optimized and generic method for permitting query access to the information, in a system for information retrieval adapted to receive and respond to queries for information stored in a database, which mitigates the shortcomings and problems related to known technology.","The foregoing and other objects, features, and advantages of the present invention will be apparent from the following detailed description of the preferred embodiments, which makes reference to several drawing figures.","One preferred embodiment of the present invention is a computer-based method for supporting named memory variables in an information retrieval system including a relational database. PUBLIC and PRIVATE named memory variables can be created, referenced, modified or deleted using SQL statements. The information retrieval system allocates a memory area as a named variable storage space for storing named memory variables. System catalogs may be used for storing information about PUBLIC, SECURE PUBLIC, PRIVATE, SECURE PRIVATE and pre-defined named memory variables. PUBLIC and PRIVATE named memory variables can be used for transferring information between SQL statements of one or more sessions or for retrieving system information from the relational database. Both PUBLIC and PRIVATE types can be defined as SECURE named memory variables requiring specific authorization privileges to read or write to the variable.","Another preferred embodiment of the present invention is a system implementing the above-mentioned method embodiment of the present invention.","Yet another preferred embodiment of the present invention includes a computer usable medium tangibly embodying a program of instructions executable by the computer to perform method steps of the above-mentioned method embodiment of the present invention.","In the following description of the preferred embodiments reference is made to the accompanying drawings, which form the part thereof, and in which are shown by way of illustration specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional changes may be made without departing from the scope of the present invention.","The present invention discloses a system, a method and a computer usable medium embodying a program of instructions executable by a computer to perform the method of the present invention for permitting and providing query access to the information, for an information retrieval system for managing query access to information stored in a database. The method includes permitting a first query to access the information stored in the database and transferring the accessed information from the first query to the second query.","To overcome the noted restrictions of the conventional systems and to maximize the flexibility of an information retrieval system, such as a relational database system, the present invention introduces the concept of a named memory variable which may be named, accessed and modified by the user through use of adapted SQL statements supported by a correspondingly adapted SQL compiler of the RDBMS. A named memory variable, in use, is allocated a named block of memory coupled to the RDBMS that can be associated within an individual database session (i.e. it is PRIVATE) or to all database sessions (i.e. it is PUBLIC). A named memory variable can also be defined as being SECURE, which enforces a set of authorization controls on the ability to read or modify that variable. Named memory variables can be defined by the user or can be provided in the form of pre-defined named memory variables by the RDBMS or database vendor.","With the introduction of named memory variables and a set of SQL statements to manipulate them, users are facilitated with a further tool to build client applications for a relational database where information can be shared between SQL statements, on the same or different sessions, or can be accessed by SQL statements defined and contained within the database system, all without any requirement for application logic to support this transfer of information. Further, where security of the information is an issue, the use of SECURE variables provides the required security, again without any application logic. Finally, database vendors may easily introduce access to additional internal information through the simple addition of a new pre-defined variable name.","In accordance with an aspect the present invention provides a method, in an information retrieval system adapted to receive and respond to queries for information, for permitting query access to the information. The method utilizes a named memory variable, which is allocated a portion of a memory coupled to the information retrieval system, to facilitate the transfer of information between queries and for processing the queries in accordance with the facility. The method permits a first query to access the information stored in the database, where at least some of the accessed information defines a particular named memory variable, and to transfer the information from the first query to a second query using the particular named memory variable.","The following detailed description of the embodiments of the present invention does not limit the implementation of the invention to any particular computer programming language. The present invention may be implemented in any computer programming language provided that the OS (Operating System) provides the facilities that may support the requirements of the present invention. A preferred embodiment is implemented in the C or C++ computer programming language or other computer programming languages in conjunction with C\/C++. Any limitations presented would be a result of a particular type of operating system, computer programming language or data processing system, and would not be a limitation of the present invention.","An embodiment of the invention, computer system , is illustrated in . Computer system , which is illustrated for exemplary purposes as a computing device, is adapted to communicate with other computing devices (not shown) using network . As will be appreciated by those of ordinary skill in the art, network  may be embodied using conventional networking technologies and may include one or more of the following: local networks, wide area networks, intranets, the Internet, and the like.","Through the description herein, an embodiment of the invention is illustrated with aspects of the invention embodied solely in computer system . As will be appreciated by those of ordinary skill in the art, aspects of the invention may be distributed amongst one or more networked computing devices which interact with computer system  using one or more networks such as, for example, network . However, for ease of understanding, aspects of the invention have been embodied in a single computing device\u2014computer system .","Computer system  typically includes a processing system , which is enabled to communicate with the network , and various input devices  and output devices . Input devices , such as a keyboard and mouse, as shown, may also include a scanner, an imaging system (e.g., a camera, etc.) or the like. Similarly, output devices , such as a display, as shown, may also include printers and the like. Additionally, combination input\/output (I\/O) devices may also be in communication with processing system . Examples of conventional I\/O devices (not shown in ) include: removable recordable media (e.g., floppy disk drives, tape drives, CD-ROM drives, DVD-RW drives, etc.), touch screen displays and the like.","Exemplary processing system  is illustrated in greater details in . As illustrated, processing system  includes a number of components: a central processing unit (CPU) , memory , network interface (I\/F)  and input-output interface (I\/O I\/F) . Communication between various components of the processing system  may be facilitated via a suitable communications bus , as required.","CPU  is a processing unit, such as an Intel Pentium\u2122, IBM PowerPC\u2122, Sun Microsystems UltraSparc\u2122 processor or the like, suitable for the operations described herein. As will be appreciated by those of ordinary skill in the art, other embodiments of processing system  could use alternative CPUs and may include embodiments in which two or more CPUs are employed (not shown). CPU  may include various support circuits to enable communication between itself and the other components of processing system .","Memory  includes both volatile memory  and persistent memory  for the storage of: operational instructions for execution by CPU , data registers, application and thread storage and the like. Memory  preferably includes a combination of random access memory (RAM), read only memory (ROM) and persistent memory, such as that provided by a hard disk drive.","Network I\/F  enables communication between other computing devices (not shown) and other network computing devices via network . Network I\/F  may be embodied in one or more conventional communication devices. Examples of a conventional communication device include: an Ethernet card, a token ring card, a modem or the like. Network I\/F  may also enable the retrieval or transmission of instructions for execution by CPU , from or to a remote storage media or device, via network .","I\/O I\/F  enables communication between processing system  and the various I\/O devices  and . I\/O I\/F  may include, for example, a video card for interfacing with an external display, such as output device . Additionally, I\/O I\/F  may enable communication between processing system  and a removable media . Removable media  may include a conventional diskette or other removable memory devices, such as Zip\u2122 drives, flash cards, CD-ROMs, static memory devices and the like. Removable media  may be used to provide instructions for execution by CPU  or as a removable data storage device.","Computer instructions\/applications stored in memory  and executed by CPU , thus adapting the operation of the computer system  as described herein, are illustrated in functional block form in . As will be appreciated by those of ordinary skill in the art, the discrimination between aspects of the applications illustrated as functional blocks in  is somewhat arbitrary in that the various operations attributed to a particular application as described herein may, in an alternative embodiment, be subsumed by another application.","As illustrated for exemplary purposes only, memory  stores a number of applications and data for enabling the operation of the system for supporting named memory variables in a relational database that includes: an operating system (OS) , a communication suite , a relational database management system (RDBMS)  and one or more client applications  (multiple client applications , , are shown). Each of the client applications  is adapted to communicate with RDBMS  using SQL statements (not shown).","Each application  that establishes a session with RDBMS  is assigned an individual session (e.g. , ) storage area from a named memory variable storage space  for storing private named memory variables (e.g. and ). RDBMS further has a public variable storage space  to store variables for use within different sessions and one or more system catalogs  which may define the public variables. A system catalog is a RDBMS system table composed of metadata about the RDBMS and other components of the database. The metadata may be provided as one or more rows of attributes for particular database objects. For example, each catalog row or tuple may include various attributes of a database object, such as its object name, internal ID, and type (e.g., system table, user table, view, stored procedure, trigger, etc.), among other information. In accordance with the invention, the metadata may include a reference to or definition for a named variable, particularly a PUBLIC named variable, which variable may be SECURE or a SECURE PRIVATE or PRIVATE named variable.","In the illustrated example the client applications  are run on the same computer system  but it will be understood by persons skilled in the art that the client applications  can be run on different computer systems that are enabled to communicate with the computer system  using the network .","OS  is an operating system suitable for operation with a selected CPU  and the operations described herein. Multi-tasking, multi-threaded OSs such as, for example, IBM AIX\u2122, Microsoft Windows 2000\u2122, Linux\u2122 or the like, are expected to be preferred in many embodiments. Communication suite  provides, through interaction with the OS  and the network I\/F  (), suitable communication protocols to enable communication with other networked computing devices via the network  (). Communication suite  may include one or more of such protocols, such as TCP\/IP, Ethernet, token ring and the like. Communications suite  preferably includes asynchronous transport communication capabilities for communicating with other computing devices.","RDBMS  is a software application executable in the environment of OS  in order to manage information stored in a relational database (not shown) and provide this information to client applications , on request. Client applications  can also be run in the environment of OS  or can be run on other computer systems adapted to communicate with a computer system  using the network .","Typically, each of client applications  interacts with RDBMS  in a session which is a series of interactions between one of client applications  and a relational database from RDBMS . Typically, a client application  requests a connection with RDBMS  and if RDBMS  replies agreeing to the connection, the client application  and RDBMS  take turns exchanging commands and data. The session begins when the connection is established at the client applications  and RDBMS  and terminates when the connection is ended.","In accordance with the invention, RDBMS  provides named memory variables which can be created, named, accessed, modified and dropped by client applications , for transferring information between SQL statements.","The information stored in named memory variables can be accessed by SQL statements defined and contained within the database system, without any requirement for client application logic to support this transfer of information. Where specific security restrictions must be applied, the use of SECURE variables provides the security without any modification application logic and thus without modifying the programming code of the client applications. Finally, database vendors may easily grant access to database internal information through the simple addition of a new predefined variable name.","Each named memory variable is saved in a named block of memory. The named block can be for a private variable which is used within an individual session , of respective client applications , or for a public variable which can be used within more than one session. Private variables are stored to private variable storages , and public variables are stored to a public variable storage . Any named memory variable can also be defined as being SECURE. Secure variables require a predetermined set of authorization controls for enabling operations, such as reading or modifying the contents of the session variable. Named memory variables can be defined by the client application and\/or can be provided in a predefined form by the database vendor.","In accordance with the invention, a set of SQL statements to support named memory variables are provided and the RDBMS  is adapted to process such statements to create, manipulate and remove named memory variables.","For example, the CREATE VARIABLE statement is provided to create a named variable. It may have a syntax such as:\n\n","The data type specifies the data type of the variable which may be restricted by the implementation for performance or other reasons. Exemplary variable attributes include PUBLIC or PRIVATE, indicating whether the named variable is to have a common value for all sessions or a unique value for individual sessions. Further, for a PRIVATE variable, a LIFETIME attribute may be used to define the duration that the value will be maintained. LIFETIME SESSION specifies that the value will remain throughout the session while LIFETIME TRANSACTION specifies that the value will remain until the current unit of work ends. Once the LIFETIME expires, the value will be set to a default specified by variable parameter DEFAULT. DEFAULT may be defined with reference to a function, constant, special register or other value.","The following example creates a private named memory variable to indicate which printer to use for the session:\n\n","Information on created public and private session variables may be stored to one of system catalogs . A view of the system catalog may be created to for the information such as:",{"@attributes":{"id":"p-0050","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["VARIABLESCHEMA","The schema for naming private and public"]},{"entry":[{},"variables"]},{"entry":["VARIABLENAME","The variable name"]},{"entry":["TYPESCHEMA","The schema of the data type"]},{"entry":["TYPE","The name of the data type"]},{"entry":["LENGTH","The maximum length of the variable"]},{"entry":["SCALE","The scale of the variable"]},{"entry":["VOLATILITY","Whether the value can change during a statement"]},{"entry":[{},"execution"]},{"entry":["LIFETIME","Duration of value: SESSION or TRANSACTION"]},{"entry":["DEFAULT","Default value"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The named variable information may include a variable name, a data type, a maximum length of the variable, a scale of the variable, an indication whether a value for the named memory variable may change during an execution of the query, duration for the value and an initial default value for the named memory variable.","A session variable may be referenced directly by any SQL statement or, if a default value is to be provided in the event of a session variable not being defined at time of reference, an indirect mechanism, such as the GETVARIABLE function, can be used. The GETVARIABLE function returns a variable length character string representation of the current value of the named memory variable identified by a string expression. An optional default value (e.g. NULL) may be specified to be returned to avoid getting an error, if the request issuer does not have an appropriate READ privilege for the variable.","The DROP statement deletes a named memory variable from the database. A DROP statement may have the syntax:\n\n","The optional RESTRICT qualifier specifies that the variable cannot be dropped, if it is referenced in or by a dependent object. CASCADE deletes the variable in any event. All constraints that reference the variable are dropped. All triggers and view that reference the variable are made inoperable. All packages dependent on a dropped object are invalidated.","Privileges on a secure public or secure private named memory variable may be granted via a GRANT statement:\n\n","More than one authorization name may be specified. WITH GRANT OPTION permits the grantee to further grant privileges to others. A REVOKE statement similarly revokes privileges. The following example grants read and write privileges on variable myjob_ptr to a user FRED:\n\n","A SET statement is provided to assign values to variables, provided there are adequate privileges held. For example, the following statement assigns the maximum values of the salary compensation columns to the two session variables, counting commission as part of the salary and excluding the president's values:\n\nSET (session.max_salary, session.max_bonus)=(SELECT MAX(salary+comm.), MAX(bonus)\n\n",{"@attributes":{"id":"p-0058","num":"0067"},"figref":"FIG. 4","b":["306","306","402","404","406","408"]},"The SQL compiler  is used to analyze SQL statements that are submitted to RDBMS  prior to execution to determine the semantics and most efficient approach. In order to properly process SQL statements, including understanding of the statement's objective and creation of the executable format that correctly matches this objective, each attribute of any database object referenced within a SQL statement, for example, a table, view, or special register, must be known by the SQL compiler . If the SQL compiler  identifies an unknown object which is not defined within the context of the SQL statement or within the system catalogs  of the RDBMS , the SQL compiler  refers to the external reference resolution mechanism  to identify the object. On receipt of a request from the SQL compiler , the external reference resolution mechanism  attempts to resolve the reference to a number of different entities, including session variables. In order to resolve a named memory variable reference, the external reference resolution mechanism  looks within the private variable storage  or public variable storage  to find a name match. In one embodiment of the invention, the variable name itself may indicate which storage area is to be searched, or, alternatively, both areas are searched in a defined search hierarchy (determined by the RDBMS implementation). Once all objects in the SQL statement are known, an executable form of the section may be constructed and made available to proceed for execution by the runtime executor .","During execution, any named variable referenced by the statement may be resolved by having the external reference resolution mechanism  called to locate the variable in the appropriate storage area and acquire the data value.","If an attempt is made to read or modify a secure variable's contents by an SQL statement, variable security enforcement component  is invoked to validate rights to use the secure variable. Security may be enforced in accordance with well-known techniques, such as MAC\/DAC. The authorization information of the user seeking to use the secure variable may be evaluated and compared with information in the system catalogs  to determine if the necessary authority is held. Similarly, if an attempt is made to create or drop a variable's contents by an SQL statement, variable security enforcement component  is invoked to validate the statement, comparing the attempting user's authorization ID with information in system catalogs .",{"@attributes":{"id":"p-0062","num":"0071"},"figref":"FIG. 5","b":["500","310","500","502","504","504","506","506","506","504"],"i":["a","b ","c"]},"Storage structure  is useful to store both private and public named memory variables that use the same namespace, so that duplicate names can be detected. Each individual variable structure (e.g. , and ) has unique information about the variable, including the name of the variable, the data type and the length of variable, the pointer to the current data value contained by the variable and an indicator as to whether or not the variable is a secure variable.",{"@attributes":{"id":"p-0064","num":"0073"},"figref":"FIG. 6","b":["600","402","306","602","402","604","402","606","404","608","610","612","614","406","616","610","622"]},"If, at Step , the accepted SQL statement is identified as not being a DML statement, the compiler  identifies whether the received SQL statement includes a reference to create or drop (destroy) statement for a named variable (Step ). If yes, the authorization for the ID executing the accepted SQL statement must be verified (Step ). If the accepted SQL statement successfully passes the authorization evaluation (Step ), the SQL statement is processed to produce an executable version of the statement (Step ). If the accepted SQL statement does not pass an authorization evaluation (Step ), error processing is undertaken (Step ). If the compiler  identifies that the received SQL statement does not include a statement to create or drop a named variable (Step ), the accepted SQL statement is processed in a normal fashion used to produce an executable version of the statement (Step ).",{"@attributes":{"id":"p-0066","num":"0075"},"figref":["FIG. 7","FIG. 6"],"b":["700","614","306","406","702","704","706","708","404","710","712","714","714","706"]},"If a variable reference cannot be resolved by the reference resolution mechanism at Step , the SQL statement is discarded, receiving a processing error (Step ) and processing of the SQL statement is ended (Step ).","If the referenced variable is identified as secure (Step ), then the authorization of the ID being used to execute the SQL statement is evaluated for authorization to access the variable (Step ). Successful authorization proceeds to Step  where the execution of the SQL statement begins or continues. If the authorization step fails (Step ) the SQL statement is discarded, receiving a processing error (Step ) and processing of the variable reference is ended (Step ).","The system and method for supporting named memory variables in a relational database in accordance with the present invention provides PUBLIC and PRIVATE named memory variables, which are available to any SQL statement within the relational database. PUBLIC and PRIVATE named memory variables can be used for transferring information between SQL statements of one or more sessions or for retrieving system information of the relational database. Both PUBLIC or PRIVATE types can be defined as SECURE named memory variables which have specific privileges required to read or write to them.","The system and method for supporting named memory variables in a relational database can enhance the flexibility of the relational database.","The foregoing description of the preferred embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
