---
title: Method and system for recording and replaying input-output requests issued by a user-mode program
abstract: I/O request data for user-mode programs is recorded into a log, which later allows the I/O requests to be replayed. By substantially exact replay, tests are performed with different versions/combinations of kernel components using the same I/Os as when recorded. A user-mode record/replay program and kernel-mode filter driver record a program's I/O requests, such as data I/O request packet (IRP) data received by the filter driver. While recording, tests exclude IRPs not directly resulting from program requests. Recorded I/O request data is maintained in log file records. At replay time, the records are read and corresponding I/O requests sent towards the storage volume as if requested by the original program. Tables are maintained for information relevant to the replay context, such as file handles, file IDs, and short names that vary from the record context. Substitution from the tables allows I/O requests to be replayed as originally issued.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07676508&OS=07676508&RS=07676508
owner: Microsoft Corporation
number: 07676508
owner_city: Redmond
owner_country: US
publication_date: 20041110
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT DISCLAIMER","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The invention relates generally to computer programs, and more particularly to testing the interoperability of application programs.","Many computer program bugs are found very late in the product cycle, or in a worse case, by customers. Indeed, given a large enough market, software consumers will find numerous bugs in software programs, which can reflect poorly on the developer. Thus, an important part of software development is testing to eliminate bugs in software, and to have the software designed to otherwise handle unusual circumstances. That is one reason why Beta testing is used, so that by sheer numbers, many users (who understand that bugs are likely early in the development process) can help to debug a product before it is sold to consumers.","Beta testing is only one way software is tested, and can only be done when the product under development is reasonably stable and safe enough to give to those who will use it in the real world. To get to this point, and also to find bugs that even large numbers of Beta testers may not find, software producers also run their programs through pre-arranged tests.","While these tests find many bugs, there is no way for developers to realistically anticipate each of the possible combinations of actions that can cause a bug. Testing all combinations is not possible. By way of a general example, consider an application program's or shell program's I\/O (input\/output) requests directed towards a file system or remote server; it is virtually impossible to test all I\/O combinations since they are essentially infinite, especially if timing among the I\/O requests is a factor.","As a more particular example, consider a filter driver component such as a quota filter driver that limits the amount of space a user may consume on a shared storage volume. The test team that tests the quota filter driver is not responsible for testing the operating system shell or a suite of application programs such as Microsoft\u00ae Office. Likewise the shell and program suite teams are not responsible to test quota filter drivers. Addition of another filter driver, such as an antivirus product, can also change the way I\/Os behave. Essentially, there are no tests as to whether the I\/Os triggered by application programs and\/or the shell work properly, let alone when using a certain filter driver or combination of filter drivers, other than tests performed manually, which are very time consuming and error prone. Further, it is not practical to redo these manual tests on a regular basis, even though various versions of programs and filter drivers are regularly released.","In sum, the I\/Os generated by an application program can uncover program bugs in the program as well as in lower-level filter drivers that handle corresponding I\/Os requests below the program. However finding and fixing those bugs often requires significant manual testing to recreate the actions that first found the bug. What is needed is a way to automate testing tasks that otherwise have to be done manually when testing the compatibility of kernel-mode components with user-mode programs.","Briefly, the present invention is directed towards a system and method that records data for I\/Os originated by user-mode programs into a log, and later allows the log to be replayed by a replay engine in a manner that recreates the user-mode program's I\/O requests, (even when the originating user-mode program is not present). As a result, tests can be performed with different versions and\/or combinations of kernel-mode components using exactly the same I\/Os as a previous test.","In one implementation, the recording mechanism includes a user-mode record\/replay application program and a kernel-mode filter driver. The kernel-mode filter driver receives and records data from I\/O request packets (IRPs) sent into the filter drivers that correspond to I\/O requests originated from a user-mode program being recorded. The I\/O request packets may be destined for a local storage volume or for a network drive, and the filter driver may be instructed as to which path or paths to record I\/O requests. The recorded I\/O request data may be preserved as records or the like in a log file.","In one alternative, the record I\/O filter driver records I\/O requests into a buffer, which the user mode record\/replay application occasionally reads for writing to the log file. In another alternative implementation, the record I\/O filter driver may write to the log file directly.","At a later replay time, a replay engine (that may be incorporated into the user-mode record\/replay application program) reads the log file to replay the I\/O requests, such as in a modified test setting having one or more kernel-mode components (e.g., filter drivers) slightly modified from the state of the components at record time. For example, one version of a quota filter driver may be used in the recording context, and a newer version used in the replay context to determine if any difference is found with respect to I\/O handling, which may indicate a bug.","In one implementation, the present invention uses a kernel-mode filter driver to record the I\/O-related data in the IRPs. The present invention may be incorporated into various architectures, including one in which an I\/O manager generates IRPs based on I\/O requests from the user-mode program being recorded, and passes the IRP to a filter manager. In turn, for each IRP, the filter manager calls on the filter driver or drivers that have registered for calls based on a given IRP type, which for the filter driver that records I\/O requests is any IRP that a user-mode program can cause the I\/O manager to produce. Based on an ordering, the record I\/O filter driver is the first filter driver called for each new IRP. The user-mode record\/replay application and its corresponding filter driver may have a private communication channel.","Other architectures are feasible, including one in which filter drivers are arranged in a stacked manner wherein each filter driver processes received IRPs as desired and sends them (modified or unmodified) up or down the stack as appropriate. Each filter driver that receives an IRP may decide to perform some action, or may determine that it is not interested in the IRP. Again, the record I\/O filter driver is the top one in the stack.","The recording and later replaying of I\/Os dramatically reduces the time to test, relative to manual testing of any component or combination of components that are related to file system operations. The user-mode application allows a tester to selective start and stop recording I\/Os by receiving user-provided commands and configuration information, and sending corresponding messages to the record I\/O filter driver.","When started, the record I\/O filter driver records each of the I\/O requests (e.g., those corresponding to previously specified paths) by constructing records or the like based on the IRP, including file object information in each IRP, information on the type of IRP, and the parameters within the IRP. Other information may also be recorded, such as security descriptor data. The IRP data is recorded in conjunction with the volume ID, so that the IRP is replayed to a corresponding volume during replay. Recorded IRPs include IRP_MJ_CREATE, IRP_MJ_CLEANUP, IRP_MJ_SET_INFORMATION, IRP_MJ_WRITE, IRP_MJ_FILE_SYSTEM_CONTROL (e.g., FSCTL_SET_COMPRESSION, FSCTL_SET_OBJECT_ID and so forth), IRP_MJ_ACQUIRE_FOR_SECTION_SYNCHRONIZATION. Other IRPs such as IRP_MJ_READ, IRP_MJ_DIRECTORY_CONTROL (to enumerate files and sub-directories), IRP_MJ_QUERY_INFORMATION, and IRP_MJ_QUERY_EA (related to extended attributes) also may be recorded.","Certain IRPs that reach the record filter driver are generated by something other than directly in response to a call from the user-mode program that is having its I\/O requests recorded, and those IRPs have to be discarded rather than recorded. One such IRP-type that may or may not be recorded is related to paging I\/Os. In general, paging I\/O IRPs result from a cache manager flushing a cache, and are originated by the cache manager, not the I\/O manager in response to the API call from the user-mode program being recorded. Such paging I\/Os are marked as such and are discarded, unless an exception applies corresponding to a mapped file section. With a mapped section, the program being recorded can write to memory and thus change the state of the mapped section without issuing an I\/O request. A memory manager later flushes the written page or pages to disk via an IRP marked with the paging flag. This type of paging IRP needs to be recorded because it is the way in which the program's change is written to the disk. To distinguish between the types of paging IRPs, when a user-mode program requests a mapped section, information about the mapped section request is maintained in association with the file, e.g., in a stream context associated with the file. In this manner, any incoming paging I\/Os associated with a mapped file are recognized and recorded, while other paging I\/Os are not recorded.","Another time that I\/Os are not recorded involves reparse points, which are used for performing operations such as redirecting I\/Os to another volume. In general, the file system will not succeed a requested operation if an IRP has a reparse point, and return the IRP with a status reparse error. Reparse point errors may result in the IRP being turned around by the I\/O manager and sent back through the filter drivers. Such an I\/O manager-generated indirect IRP should not be recorded, because the user-mode program did not directly request it. To avoid recording the second, indirectly-generated IRP, during the first IRP, the reparse point IRP data is saved in conjunction with the IRP's thread context in a table. When the second IRP is received, it is on the same thread context, because the I\/O manager does not change the thread. If there is a status reparse indicated in the table for that thread, then the IRP is known to be a continuation of the other IRP, and can then be discarded.","Some time later, the log file is closed and can then be used to replay the I\/O requests. To properly test the interaction among components with respect to I\/O handling, the replay environment needs to be identical to the state of the machine before recording the I\/Os, with respect to the storage volume or volumes and the stored contents. For example, the state of the files need to be the same on each storage volume, and the drive letters need to match.","As part of replay, various information is maintained so that the replayed I\/O requests will correspond to those that were sent at the time of recording the I\/O requests. More particularly, for optimal replay, the replay engine of the user-mode record\/replay program replays I\/Os the way that they were initially issued. For example, files may be created and opened in many ways; if during recording, a file was opened by the user-mode program using a short name, (which is essentially a filename with an eight-character maximum followed by an optional extension of up to three characters, sometimes referred to as \u201c8.3\u201d format), the file is opened again with a short name at replay time, and not a long file name for that file. Similarly, files may be opened by file IDs instead of by path. If so, each such open will be recorded this way, whereby the replay engine likewise will open the corresponding file by its file ID during replay. In general, any type of create is replayed in the same way it was recorded, including normal creates via a path, relative opens in which part of the path is represented by a directory handle, opens that use a File ID, and opens that use short names.","To facilitate the replay, various tables are maintained, including a FILE_OBJECT to new file handle (in the replay context) association table, an old (record context) file ID to new (replay context) file ID association table. File IDs may be obtained via a query to the file system, although the privileged kernel-mode filter driver may be used to assist in getting the file IDs to prevent situations in which the user mode replay engine cannot obtain the file ID due the file having been opened with exclusive access. Note that the filename may be maintained in the tables as well, e.g., for debugging purposes. Directory handles obtained in the replay context are likewise cached, and used for relative opens, which may also use volume handles that are previously maintained the replay engine.","Object IDs, which are provided by the system and are optionally requested to correspond to a file, are handled similar to file IDs. The file system may also be queried for a file's object ID, which is then used for a create\/open request.","Other IRPs generally use the handle maintained in the FILE_OBJECT, handle association table, e.g., IRP_MJ_CLEANUP, IRP_MJ_SET_INFORMATION, and read and write requests.","Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings, in which:","Exemplary Operating Environment",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to: personal computers, server computers, hand-held or laptop devices, tablet devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, and so forth, which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in local and\/or remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","The computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer  and includes both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer-readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules  and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media, described above and illustrated in , provide storage of computer-readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules  and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers herein to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a tablet, or electronic digitizer, , a microphone , a keyboard  and pointing device , commonly referred to as mouse, trackball or touch pad. Other input devices not shown in  may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . The monitor  may also be integrated with a touch-screen panel or the like. Note that the monitor and\/or touch screen panel can be physically coupled to a housing in which the computing device  is incorporated, such as in a tablet-type personal computer. In addition, computers such as the computing device  may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface  or the like.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface  or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Record and Replay I\/Os","The present invention is generally directed towards a system and method by which the I\/O requests issued by user-mode (e.g., shell or application) programs are recorded in a manner that allows their replay at a later time, such as in a modified testing context having one or more varied kernel-mode components. A typical example of recording is to record the I\/Os from a shell explorer or an application program such as a processing program, in which the number of I\/Os may be on the order of hundreds, thousands, or tens of thousands of (or even more) file system-directed requests to open files, read, write, close and so forth. When replayed by a replay application program, virtually the exact same requests are issued, without the original application (e.g., word processing) needing to be executed, or even be present on the system. Thus, a single set of I\/O requests may be developed and tested numerous times through different components, different combinations of components, different versions of components, and so forth, with the results reevaluated for each test. However, although the invention provides numerous benefits and advantages in testing, it has other uses, such as, for example, to recreate a document in the exact order it was created and saved at various times, and so forth with respect to any file system operations.","As will be understood, numerous ways to implement the present invention are feasible, and only some of the alternatives are described herein. For example, the present invention is primarily described below with reference to I\/O request packets (IRPs) that pass through a set of filter drivers, in which the IRP passing may be controlled by a manager via pre-callbacks and post-callbacks, or in which the passing may be through a stack of filter drivers, sequentially from one filter driver to the next. Moreover, the program having its I\/Os being recorded may be writing to one or more local file system volumes and\/or to one or more network servers. Notwithstanding, other types of filter driver arrangements, I\/O passing and\/or storage options are feasible. For example, the present invention may be configured to work in an architecture where requests are not passed as IRPs, but in some other format. As such, the present invention is not limited to any particular examples used herein, but rather may be used various ways that provide benefits and advantages in computing in general.","As represented in , an exemplary arrangement  of components of a system is provided into which the present invention may be incorporated. The components include one or more user-mode (e.g., application) programs , a set of application programming interfaces (APIs) , an input\/output (I\/O) manager , a filter manger , a file system , storage volume , and filters -. Note that the present invention may work with multiple file systems and\/or multiple storage volumes, however for purpose of simplicity,  shows one file system and one storage volume.","In accordance with an aspect of the present invention, two components shown in  are directed towards recording the I\/Os from one or more of the other user-mode programs  for later replay. These components include the user-mode record\/replay (IORADMIN) application program  and one of the filter drivers, namely the I\/O record (sys) filter . For various purposes described below, the user-mode record\/replay application program  includes a record component , a user interface  (which may be via the command prompt), a replay engine  and various replay tables . As will be understood, the separation of these components is for convenience in this architecture, and the division in structure and\/or functionality between them is somewhat arbitrary except that in general, kernel-mode components are generally written to be highly efficient and as straightforward as possible to avoid potential errors. Thus, although it is understood that essentially all of the present invention's recording operations may be implemented in the filter driver component , having the user-mode component  provides certain advantages and benefits in recording, and thus is used in environments where some communication channel exists between the user-mode component  and the kernel-mode component . Notwithstanding, it is feasible to implement a filter driver that is installed and configured, such as following system boot, and logs data and I\/Os into a file until halted in some manner; the file then contains the information and can be independently accessed as needed.","User-mode computer programs  often make file system-directed requests via API calls through the API set  to the I\/O manager . The I\/O manager  may determine what I\/O request or requests should be issued to fulfill each program request, and sends the corresponding request or requests to the filter manager . In the example implementation described herein, the I\/O manager sends requests in the form of an I\/O request packet, or IRP. The I\/O manager  also returns status codes and\/or data to the user-mode programs  in response to the API calls.","In general, a filter driver is software code that is able to inspect and possibly modify data sent to or received from the file system . For example, an antivirus filter driver may look for virus signatures, a quota filter driver may watch a user's disk space consumption, an encryption filter driver may encrypt data on its way to the file system and decrypt it on the way back, and so forth.","In one implementation, described in U.S. patent application Ser. No. 10\/315,384, filter drivers may register (e.g., during an initialization procedure) with a registration mechanism in the filter manager . For efficiency, each filter driver typically will only register for file system requests in which it may be interested in processing. To this end, as part of registration, each filter driver notifies the filter manager  of the types of I\/O requests in which it is interested (e.g., create, read, write, close, rename, and so forth). For example, an encryption filter driver may register for read and write I\/Os, but not for others wherein data does not need to be encrypted or decrypted. Similarly, a quota filter driver may be interested only in object creates and object writes. In the situation of a filter driver that wants to record I\/Os, the record filter driver registers for any I\/O request that a user-mode program can make.","Note that the user-mode record\/replay application  and its corresponding filter driver  may have a private communication channel, e.g., the filter manager  recognizes and appropriately routes such private communications. This communication channel is represented in  by the relatively-wide gray arrows; note that this channel may be protected such that administrator-level privileges are required to communicate over it. Also note that in , like components are labeled with like numerals, while components that are alike (possibly identical but at least very similar) are labeled with numbers that share the last two digits (e.g., ,  and ); note that this does not mean that the components in  that are labeled with identical numerals are required to be identical, only that in these example implementations, they likely do not change between environments.","In addition to specifying the types of I\/O requests in which it is interested, a filter driver may further specify whether the filter driver should be notified for pre-callbacks and post callbacks for each of the types of I\/O. A pre-callback is called as data associated with an I\/O request propagates from the I\/O manager  towards the file system , while a post-callback is called during the completion of the I\/O request as data associated with the I\/O request propagates from the file system  towards the I\/O manager . During pre-callback, a filter driver can opt out of receiving a post-callback for a particular IRP even if it is generally registered for those types of IRPs.","In general, the filter manager  receives IRPs from the I\/O manager  and sequentially passes data associated with that IRP to each filter driver registered for that type of request, in an order that generally depends on whether the filter driver modifies the data or not, e.g., an antivirus filter driver should come before an encryption filter driver for data on its way to the file system so that the antivirus filter driver can see the data in its unencrypted form. As will be understood, the recording filter driver  of the present invention does not modify data, nor block any IRPs, but rather only copies information for later playback, and thus should be at the top of the ordering; (note that filter drivers that primarily inspect data, such as an antivirus filter driver or quota filter driver, can block a request, whereby exact playback of an program's I\/O requests would depend on other factors unless the record I\/O filter driver  was first in the ordering or at least not after any other filter driver that could change IRP data or behavior).","Filter drivers have a number of capabilities. For example, a filter driver may be attached to one or more volumes, that is, a filter driver may be registered to be called and receive callback data for I\/Os related to only one volume or more than one volume. A filter driver may generate its own I\/O requests, which may then be passed to other filter drivers. A filter driver may stop an I\/O request from propagating further and may instruct the filter manager to report a status code (e.g., success of failure) for the I\/O request. A filter driver may store data in memory and persist this data on a storage volume. In general, a filter driver may be created to perform any set of actions that may be performed by a kernel-mode or user-mode process and may be reactive (e.g., wait until it receives I\/O requests before acting) and\/or proactive (e.g., initiate its own I\/O requests or perform other actions asynchronously with I\/O requests handled by the I\/O manager ).","In an alternative environment  generally represented in , filter drivers (e.g., three are shown, labeled -) may be arranged in a stacked manner, providing another exemplary arrangement of components of a system in which the present invention may operate. In this embodiment, there is no filter manager. Instead, each filter driver processes received IRPs and sends them (modified or unmodified) up or down the stack as appropriate. Each filter driver that receives an IRP may decide to perform some action, or may determine that it is not interested in the IRP.","In the typical environment that has filter drivers stacked in this way, many I\/O requests reach the file system, and after the file system  services the I\/O request, the results are passed back up the stack, e.g., in a reverse order from that in which the IRP was processed on its way to the file system. In this manner, each filter driver may examine the results, may determine whether that filter driver is interested in the results, and may perform actions based thereon before passing the results (changed or unchanged) on towards the next filter driver above it or the I\/O manager  if the filter driver is at the top of the stack.","The present invention also may operate in a stacked environment, with at least the filter driver , but also can have a user-mode component  as long as some communication is possible between the user-mode component and the I\/O record filter driver. Note that a private communication channel is straightforward to implement, because the I\/O record filter driver is first in the stack and can recognize special messages via IRPs sent thereto by the user-mode record\/replay program  that the filter driver  need not forward to any filter drivers below it.  represents these components with different labels relative to , namely  and , because, for example, they will likely be slightly different from their counterparts  and  in , e.g., the filter driver  will not be set to handle pre-callbacks and post-callbacks and will instead directly process IRPs from the I\/O manager . Note that even if communication between the user-mode component and the I\/O record filter driver is not possible, the filter driver can be installed and configured as necessary (e.g., at boot time) to log an application's I\/Os and record to a log file until some event stops the filter driver from recording, and thus the present invention may still be implemented without user-mode code for recording I\/Os.","It will be readily recognized that filter drivers may be implemented in many other configurations without departing from the spirit or scope of the invention. In general, a filter driver comprises any object that examines I\/O between an application and a file system and that is capable of changing, completing, or aborting the I\/O or performing other actions based thereon.","The file system  may have one or more corresponding volumes that may be located locally or remotely relative to the machine or machines upon which the user-mode programs  execute, although there may be other components involved for network storage. For example,  shows that a multiple UNC provider (MUP)  may receive I\/O requests and send them over a network to a remote a file system for storing on a file server. Note that in , the block  also represents the local file system, depending on the destination of a given I\/O request.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 4","FIG. 4","FIG. 2","FIG. 3"],"b":["450","432","430","450","450","200","300","420"]},"In an alternative logging implementation, a filter driver may issue IRPs and write files to the file system, as mentioned above. As such, the filter drivers  or  need not buffer the data for consumption by the user-mode record\/replay program  or , but may instead write to the log file directly. This is generally represented in  by the presence of the log file  without any buffer, although it should be understood that the ability to directly write to the log file  is not limited to the filter manager model of , but may be accomplished by any filter driver, including the filter driver  in the stacked filter driver architecture  of . For purposes of simplicity, the present invention will be described primarily with reference to the buffered model of FIG. , in a filter manager-type architecture, except where otherwise noted.","In keeping with the present invention, the recording and later replaying of I\/Os dramatically reduces the time to test, relative to manual testing of any component or combination of components that are related to file system operations. In one implementation, the kernel-mode component (e.g., ) is named IORECORD.SYS, and comprises a file system mini-filter driver that records I\/Os and provide an interface to a user-mode application that allows the filter driver to start, stop and configure I\/O recording. The user-mode record\/replay application (e.g.,  of ), named IORADMIN.EXE in this implementation, provides a way for a tester to start and stop recording I\/Os by receiving user-provided commands and configuration information, and sending corresponding messages to the filter driver . The filter driver  and user-mode record\/replay application  then records the I\/Os, e.g., via the buffer , whether local I\/Os directed towards one or more local drives or network I\/Os (mapped drives and UNC path) directed to remote servers.","This example user-mode record\/replay application  also replays the I\/Os via a replay engine , e.g., by using Microsoft\u00ae Windows\u00ae NT APIs with essentially the exact same parameters that were used at record time. As can be readily appreciated, the replay engine  may be entirely separate from the recording components.","As is generally known with kernel-mode I\/O components, when a user-mode program  requests creation (or opening) of a file, the I\/O manager  is responsible for locating or creating a named file object that represents the data file. The I\/O manager  returns a file handle to the user-mode program  for referencing that file while it is open. In the kernel, for these and other user-mode program requests, IRPs are constructed by the I\/O manager  and sent to the filter driver stack (e.g., - of ), or to the filter manager (e.g.,  of ) for delivering their data to the appropriately-registered filter drivers -. Each IRP contains a pointer to the file object associated with the request. Note, however, that any kernel-mode component can create an IRP and issue it to a kernel-mode filter driver, e.g., using the IoAllocateIrp( ) and IoCallDriver( ) I\/O Manager routines. As described below, because the record filter  is the first filter manager in the ordering, only IRPs issued by the I\/O manager  correspond to those that may have come from the user-mode program  that is having its I\/Os recorded.","To start recording I\/Os, the tester\/user runs the user-mode record\/replay application , (e.g., IORADMIN), providing it with operating parameters including a list of paths to record. The number of paths that can be recorded is not limited and the paths can refer either to local drives or network locations. In the case of network locations, the user-mode record\/replay application  accepts mapped drive letters or UNC paths. It is possible to record network I\/Os using the special path \u201c\\\\\u201d and\/or the I\/O requests targeted to a remote server using \\\\servername. By default, the I\/O requests are recorded into a file named RECORD.LOG, although the name of the log file may be changed, e.g., by using a \/LOG command line option. Command line examples include:",{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IORADMIN \/RECORD:C:\\ \/verbose"]},{"entry":[{},"IORADMIN \/RECORD:C:\\MYDIR"]},{"entry":[{},"IORADMIN \/RECORD:Z:\\"]},{"entry":[{},"IORADMIN \/RECORD:\\\\server\\share"]},{"entry":[{},"IORADMIN \/RECORD:\\\\server (all shares on that server)"]},{"entry":[{},"IORADMIN \/RECORD:\\\\\u2003(all network I\/Os)"]},{"entry":[{},"IORADMIN \/RECORD:C:\\TEMP"]},{"entry":[{},"\\\\server\\share\\FOO \/LOG:C:\\MYLOG.LOG \/verbose"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The user-mode record\/replay application  obtains the list of the volumes referenced by the input paths (e.g., E:\\, X:\\ etc); the remote I\/Os go through the MUP . The user-mode record\/replay application  attaches an instance of the IORECORD mini-filter driver  to each of the volumes corresponding to a local path and to the remote stack (MUP) if network I\/Os are being recorded (e.g., equivalent of the FLTMC ATTACH X: IORECORD command line). The user-mode record\/replay application  saves the volume information in the log file, although as mentioned above, if the filter driver was writing the log file directly, the filter driver would save this path information, which it has received from the user-mode record\/replay application .","At some time, such as triggered by the tester\/user, the user-mode record\/replay application  sends down a message to activate the filter driver's recording mode, IORECORD_MSG_STARTRECORDING. For each path passed in the command line, the user-mode record\/replay application  sends the message IORECORD_MSG_ADDPREFIX to the filter driver  so that it records only I\/Os under that path.","At this point the filter driver  records each of the I\/O requests under the specified paths, (except for certain exceptions for I\/O requests that were not actually generated by the application program, as described below). Each recorded I\/O is queued in the temporary buffer , with those queued records processed asynchronously by the user-mode record\/replay application . For example, in this implementation, the user-mode record\/replay application  obtains new records by sending a message named IORECORD_MSG_GETRECORDS to the filter driver . The user-mode record\/replay application  then writes the records to the log file on one of the storage volumes, which the tester may specify (as described above). To stop recording I\/Os, the user-mode record\/replay application  sends a message (e.g., named IORECORD_MSG_STOPRECORDING) to the filter driver .","When the filter driver  is in recording mode, the file system-directed I\/Os initiated by the user-mode program  are thus temporarily intercepted and recorded in the queue with the user input parameters. More particularly, IRP data is recorded in conjunction with the volume ID, so that the IRP is replayed to a corresponding volume during replay, (which may be the same volume or another volume).","In one implementation, the filter driver  creates records upon certain low-level IRPs and file system controls (FSCTLS), including those set forth in the following table:",{"@attributes":{"id":"p-0070","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IRP_MJ_CREATE"]},{"entry":[{},"IRP_MJ_CLEANUP"]},{"entry":[{},"IRP_MJ_SET_INFORMATION"]},{"entry":[{},"IRP_MJ_GET_INFORMATION"]},{"entry":[{},"IRP_MJ_READ"]},{"entry":[{},"IRP_MJ_WRITE"]},{"entry":[{},"IRP_MJ_FILE_SYSTEM_CONTROL"]},{"entry":[{},"\u2003Record FSCTLs. E.g.,"]},{"entry":[{},"\u2003\u2003FSCTL_SET_COMPRESSION"]},{"entry":[{},"\u2003\u2003FSCTL_SET_OBJECT_ID"]},{"entry":[{},"\u2003\u2003Etc."]},{"entry":[{},"IRP_MJ_ACQUIRE_FOR_SECTION_SYNCHRONIZATION"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Other IRPs such as IRP_MJ_DIRECTORY_CONTROL (to enumerate files and sub-directories), IRP_MJ_QUERY_INFORMATION, IRP_MJ_QUERY_EA (related to extended attributes) also may be recorded. Reads when passed to NtCreateFile may also be recorded and replayed. Reparse points, described below, may or may not be handled, (e.g., CREATE returning STATUS_REPARSE and replay reparse point creation\/deletion) depending on whether the application program generated the I\/O. Security descriptors may also be recorded.","To provide a maximum amount of benefit while being flexible as to what can be tested, the present invention records and replays I\/Os exactly the way they were issued by the user-mode program  being recorded. For example if a program requests a file be opened via a file identifier (file ID, described below) instead of by providing a path and filename, for example, the request is recorded such that during replay the file is again opened via a file ID, and not in some other manner. This is true for other types of recorded requests.","As will be understood, however, there are certain IRPs that reach the record filter driver  that have to be discarded rather than recorded. In particular, these correspond to certain IRPs that are generated by something other than the user-mode program  that is having its I\/O requests recorded. Note that it would be equivalent to record these I\/O requests and flag them in some manner so that they will not be replayed, although it is more efficient to simply not record them.","One such IRP-type that may or may not be recorded is related to paging I\/Os. In general, in many situations, a cache manager component will cache write requests directed to the file system in a RAM cache, and then at some later time flush the cache and send the requests to the file system for persisting to the appropriate file on a storage volume. However, when the cached is flushed, the cache manager sends another IRP which reaches the I\/O record filter driver . If this cache-flushing IRP is recorded, the file data may become corrupted on replay, such as due to timing issues among write requests. Note that the write IRP generated by the user-mode program  was already recorded as if the data was directly and immediately written to the file system, and if replayed into the same environment, will likewise generate a paging I\/O; replaying a recorded cache-flushing paging I\/O would be incorrect.","While this flushing-generated IRP generally looks like the application program may have generated it, IRPs for paging I\/Os are marked with the paging flag. As a result, I\/O record filter driver  is able to detect such a situation. User-mode applications cannot issue paging I\/Os. As is understood, the goal is to replay the write requests issued by the application, and not IRPs generated when the system flushes dirty pages to the disk.","However, there is an exception to this rule of not recording paging I\/Os, which involves mapped sections in which a file (or some section of the file) is mapped into memory. With a mapped section, a memory manager will read data from the storage volume into memory as it is needed, via a page fault mechanism. The program can write to memory and thus change the state of the mapped section, referred to as \u201cdirtying\u201d the page for each page that has a change written to it. For example, to modify a file user mapped files, a user-mode program typically makes the following types of calls and performs similar operations:",{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"H1 = CreateFile( ) ;"]},{"entry":[{},"H2 = CreateFileMapping(H1) ;"]},{"entry":[{},"P = MapViewOfFile (H2, Offset, Length)"]},{"entry":[{},"Modify memory pointed by P"]},{"entry":[{},"CloseHandle (H2)"]},{"entry":[{},"CloseHandle (H1)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The memory manager knows when pages are dirty, and at some time later flushes the dirtied page or pages to disk via a paging write IRP marked with the paging flag. Because this corresponds to what the user-mode program wrote to memory, but no other IRP was generated for this write, this type of paging IRP needs to be recorded.","To distinguish such memory-mapped paging IRPs (e.g., from cache-flushing paging IRPs), when a user-mode program requests a mapped section, (e.g., via an I\/O request packet for mapped file creations of type IRP_MJ_ACQUIRE_FOR_SECTION_SYNCHRONIZATION), the I\/O record filter driver  detects the request and flags its knowledge of this request in association with the file. In one implementation, the information is flagged by the filter driver  in a stream context associated with the file, wherein a stream context comprises a kernel-mode structure that represents the physical file (and wherein the file object, or file objects if multiple handles have been opened on the file, each hold a pointer to the stream context); a file may have multiple streams. Alternatively, the I\/O record filter driver  may independently maintain information indicating that the file is a mapped file. In any event, any incoming paging I\/Os from a mapped file are recognized and recorded, while other paging I\/Os are not recorded.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 5","FIG. 5","FIG. 7"],"b":["502","508"]},"If the IRP is marked as a paging I\/O at step , then the stream context for this file object is read at step  to determine whether (step ) the above-described flag in the stream context was previously set to indicate that the user-mode program requested a mapped section. If so, this paging I\/O resulted from a memory manager flush from a mapped memory section and needs to be recorded, as indicated by step  branching to step . If not, the write was from the cache manager flushing its write cache, and thus the I\/O was already recorded and should not be recorded again.","It should be noted that read requests are handled similarly to write requests. The IRP information is recorded, although there is no block of data to write associated with a read request, as data will be obtained via the IRP rather than persisted by the IRP.","Another time that I\/Os are not recorded involves reparse points, which are used for performing operations such as redirecting I\/Os to another volume. In general, the file system will not succeed a requested operation if an IRP has a reparse point, and return the IRP with a status reparse error. Normally an IRP with a status indicating error is not a concern for recording purposes, as the error is handled below the I\/O record filter driver driver, or passed back up to the I\/O manager for sending a corresponding errorcode to the user-mode program that initiated the I\/O. On replay, the IRP should result in the same error. However, reparse point errors may result in the IRP being turned around by the I\/O manager and sent back through the filter drivers, e.g., with the IRP modified so that it is directed towards a different volume. Such an I\/O manager indirectly-generated IRP should not be recorded, because the user-mode program did not directly request a second I\/O, and the second IRP should be generated again by the I\/O manager during replay.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 6","FIG. 2"],"b":["1","206","2","206","1","3","4","5","220","222"]},"When the callbacks have completed, the filter manager  sends the IRP to the file system , represented as arrow (), at which time the file system detects the reparse point and accordingly fails the open, represented as arrow (). Post-callbacks are made to the filter drivers  and , represented as arrows () and (); note that not all filter drivers necessarily want post-callbacks and inform the filter driver of this during the pre-callback, and thus other filter driver  did not receive a post-callback in this example.","When the failed IRP reaches the I\/O manager , represented as arrow (), the I\/O manager  will inspect it and recognize the reparse error status. The I\/O manager  then modifies the IRP for another volume, V as maintained in a reparse tag, removes the reparse point, and returns the IRP to the filter manager , represented by arrow (). After the pre-callbacks, (arrows (), () and ()), the filter manager  passes the IRP to the file system, represented by arrow (). This time (in this example) the request succeeds, and as represented by arrow () the IRP goes back up to the filter manager  for any post-callbacks (represented by arrows () and ()). Following post-callbacks, the IRP returns to the I\/O manager  as represented by arrow (), and is converted to an return code corresponding to success that is then given to the user-mode program (arrow ()).","As seen from the above-described example of , data of two IRPs reached the I\/O record filter driver , however only data from the first of the IRPs is to be recorded, otherwise an extra IRP would be incorrectly generated in the replay environment. To avoid recording the second IRP, during the first IRP, the reparse point IRP data is saved in conjunction with the IRP's thread context in a table . When the second IRP is received, it is on the same thread context, because the I\/O manager  does not change the thread. If there is a status reparse indicated in the table  for that thread, then the IRP is known to be a continuation of the other IRP, and can then be discarded. Note that this table  can be cleaned up on the last post callback, e.g., where the I\/O manager-generated IRP has succeeded.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 7","b":["702","690","704","206"]},"If there is no reparse point associated with this thread at step , the I\/O is recorded (or tested further) at step . Then, because this IRP may have a reparse point, step  evaluates whether the IRP has a reparse point. If so, step  branches to step  to add the thread, reparse point association to the table . Otherwise the process returns from the callback. Note that  is simplified to describe a general way to process IRPs with respect to reparse points; there likely will be other tests (e.g., as in  described above) that are performed before deciding to record an I\/O for playback. For example, it is understood that the tests of  may be merged into those of , or vice-versa.","Although exceptions exist as described above, in general, the typical IRP has its data recorded in conjunction with its file object data. The information that is logged comprises the volume ID, request data and parameters including the file object information, along with other data such as a block of data to be written, for example.","It is possible that recording began while the user-mode program  was already running, whereby at least one file handle may be opened with a corresponding file object already existing before the filter driver  recorded any I\/O records. Another I\/O on that file may be then received. When this occurs, the contents of the stream context is recorded. This will allow the replay engine  to determine what the file is, by name, via a table of stream contexts (which may refer to an alternate stream) maintained during replay.","Turning to an explanation of replaying the I\/Os, to properly test the interaction among components with respect to I\/O handling, the replay environment needs to be identical to the state of the machine before recording the I\/Os, such as with respect to the storage volume or volumes and the stored contents and the type of test being performed, (although not ordinarily with respect to the changed component or components being tested). For example, if a file was deleted from a volume in the recording environment, that file needs to be present on a corresponding volume in the replay environment or the delete request will fail on replay rather than succeed as it did while recording. Similarly, the drive letters need to match, although it is understood that the replay environment may be made to artificially match the record environment, such as by substituting c:\/ for d:\/ in the log file prior to replay, or dynamically as needed during replay, before issuing a request. In a testing setting, it is straightforward to ensure that the replay environment matches the record environment, such as by restoring a machine to a previous state, or by taking the log file to replay its I\/Os another machine that matches the environment, (but for the component or components being tested that change from the record context to the replay context).","It should be noted that the replay can continue on a detected error or halt on a detected error. Thus, it is possible to continue even if, for example, a file for which deletion occurred within the record context is not present within the replay context. The test being performed thus may allow certain types of inconsistencies between environments, depending on its purpose. Logging can also occur during replay, and the original record log compared with the replay record log to detect any differences.","In accordance with another aspect of the present invention, various information is maintained so that the replayed I\/O requests will correspond to those that were sent at the time of recording the I\/O requests. For example, one way a program opens a file is with a normal, full path open request, such as c:\\abc\\123.txt. The same path will exist in the replay context, so this is not an issue when recording such an open request. However, as described below, other I\/O requests need to be properly built so that the current I\/Os correspond to the recorded I\/Os, e.g., storage-volume unique names and identifiers typically will change from one storage volume to a corresponding storage volume.","More particularly, for optimal replay, the replay engine of the user-mode record\/replay program  replays I\/Os the way that they were initially issued. For example, files may be created and opened in many ways; if during recording, a file was opened by the user-mode program  using a short name, (which is essentially a filename with an eight-character maximum followed by an optional extension of up to three characters, sometimes referred to as \u201c8.3\u201d format), the file is opened again with a short name at replay time, and not a long file name for that file. Similarly, files may be opened by file IDs instead of by path. If so, each such open will be recorded this way, whereby the replay engine  likewise will open the corresponding file by its file ID during replay.","The I\/O for a file create is recorded when an IRP of type IRP_MJ_CREATE is received at the record filter driver (e.g., ), which records a full set of create parameters. Depending on the implementation, and, for example, factors such as the goal of a particular test, security descriptors and extended attributes may or may not be recorded; note that if security descriptors are recorded and replayed, in general the replay security context will need to match (or give more rights relative to) the record security context. Any type of create is replayed in the same way it was recorded, including normal creates via a path, relative opens in which part of the path is represented by a directory handle, opens that use a File ID, and opens that use short names.","Note that volume open requests are not replayed, and need not be recorded. This is because the paths are already logged, and the user-mode record\/replay application  ensures that the volumes are available before replay. In the replay environment, the volume handles are already known, and thus a relative open may be accomplished using a volume handle, to thereby replay a recorded relative open I\/O that used the volume handle.","In kernel mode, filter drivers see FILE_OBJECT pointers and not handles. File create I\/O records, as well as other I\/O records, include the FILE_OBJECT. The user mode replay engine  running in user mode (part of IORADMIN.EXE) opens a handle by calling NtCreateFile( ), and adds an association between the FILE_OBJECT and the returned handle into a table of a set of tables . While the file is open, whenever this same file object is seen in a record, the corresponding handle is looked up in the table and used by the user mode replay engine to replay the I\/O request. When the file is closed, the handle may be removed from the table, (or may be overwritten on the next create\/open request for that file), if any. Note that the filename is maintained in the table as well for debugging purposes, giving a handle, FILE_OBJECT, filename relationship to the table. Renamed or moved files need to be updated in the table.","In the case of a relative create request, the relative FILE_OBJECT is recorded as well so that the replay engine  can later obtain a related handle and use it to replay the relative create request in user mode. For example, consider that the program being recorded performs a relative open, such as by opening a handle to a directory of path c:\\abc, providing the directory handle (e.g., 0x68) that the file system assigns, and then requesting open of a file relative to that directory handle, e.g., open hdir\\123.txt, (where hdir is 0x68 in this example). As is understood, when the directory handle was obtained, there was a corresponding file object for it. This file object data is recorded in the log file, and in the replay context, a handle obtained for it as well. When obtained in the replay context, the directory handle (e.g., 0x100) is maintained in a table in association with its file object data, in the set of tables . This may be the same table as that used for filenames, with the directory path maintained instead of the path to the filename for debugging purposes.","Thereafter, while that directory handle is open, the replay engine substitutes the new handle (e.g., 0x100) into an I\/O request that uses that directory handle in a relative open, whereby any directory-relative I\/Os work properly. In the above example where the file request is to open hdir\\123.txt, the replay engine will use 0x100 as hdir for replaying this request. Note that with any of the tables  described herein, a secondary data structure such as a hash table based on a hash function may be used for rapid lookup of the corresponding current handle. Further, note that if a directory is renamed or moved, the table needs to be updated.","As mentioned above, another context-relative issue involves a file identifier (file ID), which in one (NTFS) file system implementation comprises a sixty-four bit number assigned by the file system to uniquely identify that file on a storage volume. A different storage volume (or possibly the same storage volume in a later state, e.g., in which files are deleted and new ones added) will not, unless coincidentally, use the same file IDs for the recorded program's files. Thus, in the case of open-by-file-ID I\/O request, where there is no guarantee that the new file ID will be equal to the file ID at record time, the replay engine needs to discover the new file ID corresponding to the one recorded as the old file ID. Among the set of tables , the replay engine maintains a per-volume table of file IDs containing associations between each old file ID, new file ID and filename.","The old file ID and the file name are recorded when recording all I\/Os. The new file ID is discovered when needed at replay time by querying the file system, supplying the file system with the filename; (note that given a full path or a relative path, a file identifier may be obtained via a query to the file system). In one implementation, the query is indirectly accomplished by sending a message, e.g., IORECORD_MSG_GETFILEID, from the user mode replay engine  to the filter driver . This is because in this implementation, the file ID cannot be necessarily discovered in user mode, as a result a handle possibly opened on that file with exclusive access; such a request receives an access denied failure. The filter driver, being a privileged kernel-mode component, is able to bypass sharing access, and thus can get the new file ID. Note that in this implementation, this is one time that the replay engine  needs the help of the filter driver , and indeed, if not logging the replay I\/Os, a different filter driver may be used that need not log but needs to be able to handle this message.","Once the new file ID is returned from the filter driver , the new file ID is known and recorded into the old file ID, new file ID and filename association table. Thereafter, the table may be accessed to translate this former file identifier to the new file identifier whenever encountered, avoiding the need to query more than once per old file ID. Again, anytime a file is renamed or moved, the path portion needs to be updated. Further, note that during replay, because a file may be created in one way and thereafter opened by its file ID, it is not guaranteed that the old file ID, new file ID and filename association table can be filled in by querying for the new file IDs prior to replaying any I\/Os. In other words, some of the new file IDs may not yet exist until some replay occurs.","Object IDs, which are provided by the system and are optionally requested to correspond to a file, are handled similar to file IDs. For example, object IDs are used by the shell with an icon that points to a file, such that if the file is moved, the object ID allows the icon to still properly reference the file. A new object ID obtained as needed in the replay environment, and a table is used to substitute the correct object ID for the recorded object ID.","A similar issue involves short filenames. Given a long filename, the file system generates a short filename guaranteed to be unique within a subdirectory path. Thus, a file named longfilename1.extension may have a short filename of longfi\u02dc1.ext, while a file named longfilename2.extension may have a short filename of longfi\u02dc2.ext, and so on. However, there is no guarantee that given a long filename, the replay environment will return the same filename as the record environment, e.g., the file named longfilename2.extension may have a different short filename generated for it, e.g., longf\u02dc21.ext.","Given a full path or a relative path to a long filename, the short name may be obtained via a query to the file system. If a short name is used and recorded, a query (and thereafter a similar table lookup and substitution) is thus used to find the current short name within the replay context. The filter driver may be leveraged if necessary to avoid exclusive access issues. If the full path is associated with the old short name, new short name association, the path portion of the table is updated if the file is renamed or moved.","In this manner, creates are replayed in the same way they occurred during recording. As can be readily appreciated, this finds bugs that result from the different types of create requests requiring code to handle each differently.","Turning to closing files, another type of IRP, IRP_MJ_CLEANUP, is recorded and replayed by calling a CloseHandle( ) API. Again, because the FILE_OBJECT is recorded when logging this I\/O request, the file handle associated with the FILE_OBJECT is obtained as needed from the appropriate file object to handle table in the set of tables .","Other recorded IRPs include IRP_MJ_SET_INFORMATION, which like other IRPs includes a file object that can be converted to a handle at replay time using the above-described table. Such IRPs are replayed by passing the same input parameters and calling the appropriate NT API, (e.g., NtSetInformationFile in case of IRP_MJ_SET_INFORMATION). For IRP_MJ_SET_INFORMATION calls, the file object is recorded along with such as attributes, time, size and so forth, and moves and renames are handled. When replayed, the handle that matches the FILE_OBJECT is found, the parameters that were recorded by the filter driver  are used, and the internal tables  are updated as need be, (e.g., for future opens by the file ID).","As generally described above with respect to recording, the replay engine  will replay the non-paging I\/Os, and paging I\/Os for mapped files. The replay of non-paging I\/Os may be accomplished via calls to NtWriteFile( ). Note that normally, the write buffer is recorded in the record log so as to replay the I\/O exactly. However, it is feasible to write different data depending on the test being performed. For example, for a disk space stress test, substantially much more data may be written by the replay engine than the original I\/O requested, and indeed, the original write buffer need not necessarily be recorded in such a situation. The replay of paging I\/Os may be accomplished via the following calls:",{"@attributes":{"id":"p-0111","num":"0110"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"H1 = CreateFile( ) ;"]},{"entry":[{},"H2 = CreateFileMapping(H1) ;"]},{"entry":[{},"P = MapViewOfFile (H2, Offset, Length)"]},{"entry":[{},"Modify memory pointed by P"]},{"entry":[{},"CloseHandle (H2)"]},{"entry":[{},"CloseHandle (H1)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Read I\/O requests are replayed in a similar manner. Assuming no testing errors, the replay engine  will produce the exact same resultant volume state with respect to recorded and replayed paths as the originating application program did, and the resultant contents may be compared to the original to detect any bugs. The documents, other files and so forth modified by a user-mode program such as an application program will simply appear as if the application program was executed and the user performed identical actions, even though the application program need not even be installed and\/or executed on the replay environment.","The following structures are used by one implementation of the present invention to maintain data common to the user mode and the kernel mode, and define messages passed down to the filter driver:",{"@attributes":{"id":"p-0114","num":"0113"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#ifndef _IORECORDIOCTLS_H"},{"entry":"#define _IORECORDIOCTLS_H"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["#define IORECORD_FILTER_NAME","L\u201cIORECORD\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"#define IORECORD_COMMUNICATION_PORT_NAME \u2003L\u201c\\\\IoRecordCommPort\u201d"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#define IORECORD_MUPVOLUME","L\u201c\\\\Device\\\\Mup\u201d"]},{"entry":["#define IORECORD_VERSION_MAJOR","0x1"]},{"entry":["#define IORECORD_VERSION_MINOR","0x1"]},{"entry":["#define IORECORD_VERSION","((IORECORD_VERSION_MAJOR << 16) |"]},{"entry":"IORECORD_VERSION_MINOR)"},{"entry":"#ifndef ROUND_TO_SIZE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"#define ROUND_TO_SIZE(_length, _alignment) \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\\"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"((((ULONG_PTR)(_length)) + ((_alignment)\u22121)) & ~(ULONG_PTR)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"((_alignment) \u2212 1))"},{"entry":"#endif"},{"entry":"#define ROUND64(_length) \u2003ROUND_TO_SIZE (_length, sizeof(PVOID))"},{"entry":"#ifndef Add2Ptr"},{"entry":"#define Add2Ptr(P,I) ((PVOID)((PUCHAR) (P) + (I)))"},{"entry":"#endif"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["#define MAX_SHORTNAME_LENGTH_IN_CHARS (12)","\/\/ 8.3"]},{"entry":"\/\/"},{"entry":"\/\/ Record sent to user mode (Always add new record type at the end"},{"entry":"\/\/ in order to keep backward compatibility)"},{"entry":"\/\/"},{"entry":"typedef enum {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IORECORD_RECORD_TYPE_INSTANCE = 1,","\/\/ Recorded by kernel mode"]},{"entry":[{},"IORECORD_RECORD_TYPE_INSTANCE2,","\/\/ Recorded by user mode"]},{"entry":[{},{},"\/\/ for local disks only"]},{"entry":[{},"IORECORD_RECORD_TYPE_FO_STREAMCONTEXT_INFO,","\/\/ Mapping stream context,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"203pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/","FILE_OBJECT (name is NULL)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IORECORD_RECORD_TYPE_CREATE_V10,","\/\/ Record modified for"]},{"entry":[{},{},"\/\/ reparse points"]},{"entry":[{},"IORECORD_RECORD_TYPE_CLEANUP,"]},{"entry":[{},"IORECORD_RECORD_TYPE_CLOSE,"]},{"entry":[{},"IORECORD_RECORD_TYPE_SETINFO,"]},{"entry":[{},"IORECORD_RECORD_TYPE_RENAME,"]},{"entry":[{},"IORECORD_RECORD_TYPE_WRITE,"]},{"entry":[{},"IORECORD_RECORD_TYPE_FSCTL,"]},{"entry":[{},"IORECORD_RECORD_TYPE_VERSION,","\/\/ Version added as the"]},{"entry":[{},{},"\/\/ first record"]},{"entry":[{},"IORECORD_RECORD_TYPE_CREATE,"]},{"entry":[{},"IORECORD_RECORD_TYPE_NETWORK_QUERY_OPEN,"]},{"entry":[{},"IORECORD_RECORD_TYPE_LASTRECORD = 0x99","\/\/ Added when record mode"]},{"entry":[{},{},"\/\/ is stopped"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["}","IORECORD_RECORD_TYPE ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"typedef struct _IORECORD_RECORD {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IORECORD_RECORD_TYPE RecordType ;"]},{"entry":[{},"ULONG RecordSize ;"]},{"entry":[{},"NTSTATUS Status;"]},{"entry":[{},"LARGE_INTEGER Time;"]},{"entry":[{},"LONG RecordNumber ;"]},{"entry":[{},"LONGLONG FileObject;"]},{"entry":[{},"LONGLONG StreamContext ; \u2003\u2003\/\/ Unique way to identify FCB"]},{"entry":[{},"ULONG_PTR ProcessId;"]},{"entry":[{},"ULONG_PTR ThreadId;"]},{"entry":[{},"union {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GUID","InstanceGuid ;","\/\/ Instance GUID"]},{"entry":[{},"BOOLEAN","IsDirectory ;","\/\/ TRUE if directory"]},{"entry":[{},"LONGLONG","RelatedFileObject ;","\/\/ Related FO"]},{"entry":[{},"LONGLONG","RelatedStreamContext ;","\/\/ Initialized only"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\/\/ if Related FO is not NULL"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ACCESS_MASK","DesiredAccess ;","\/\/ Desired access"]},{"entry":[{},"LARGE_INTEGER","AllocationSize ;","\/\/ Allocation size"]},{"entry":[{},"ULONG","FileAttributes;","\/\/ File attributes"]},{"entry":[{},"ULONG","ShareAccess ;","\/\/ Share access"]},{"entry":[{},"UCHAR","CreateDisposition;"]},{"entry":[{},"ULONG","CreateOptions ;"]},{"entry":[{},"LARGE_INTEGER","FileId ;","\/\/ Zero if not set"]},{"entry":[{},"USHORT","ShortNameLength ;","\/\/ Zero if not set"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"WCHAR","ShortName[MAX_SHORTNAME_LENGTH_IN_CHARS] ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"196pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ 8.3"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"USHORT","OpenPathLength;","\/\/ Path used to open file"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"USHORT","NormalizedFullPathLength;","\/\/ Normalized path"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\/\/ length to match short names and file IDs"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"WCHAR","PathAndData[1];","\/\/ OpenPath followed"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ by normalized path"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","Create_v10 ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GUID","InstanceGuid ;","\/\/ Instance GUID"]},{"entry":[{},"GUID","TargetInstanceGuid ;","\/\/ Used in case of"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ STATUS_REPARSE for the target file"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"BOOLEAN","IsDirectory ;","\/\/ TRUE if directory"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LONGLONG","RelatedFileObject ;","\/\/ Related FO"]},{"entry":[{},"LONGLONG","RelatedStreamContext ;","\/\/ Initialized if"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Related FO is not NULL"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ACCESS_MASK","DesiredAccess ;","\/\/ Desired access"]},{"entry":[{},"LARGE_INTEGER","AllocationSize ;","\/\/ Allocation size"]},{"entry":[{},"ULONG","FileAttributes;","\/\/ File attributes"]},{"entry":[{},"ULONG","ShareAccess ;","\/\/ Share access"]},{"entry":[{},"UCHAR","CreateDisposition;"]},{"entry":[{},"ULONG","CreateOptions ;"]},{"entry":[{},"LARGE_INTEGER","FileId ;","\/\/ Zero if not set"]},{"entry":[{},"USHORT","ShortNameLength ;","\/\/ Zero if not set"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"WCHAR","ShortName[MAX_SHORTNAME_LENGTH_IN_CHARS] ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"\/\/ 8.3"]},{"entry":[{},"USHORT","OpenPathLength;","\/\/ Path used to"]},{"entry":[{},{},{},"\/\/ open file"]},{"entry":[{},"USHORT","NormalizedFullPathLength;","\/\/ Normalized path"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\/\/ length to match short names and file IDs"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WCHAR","PathAndData[1];","\/\/ OpenPath followed"]},{"entry":[{},{},{},"\/\/ by normalized path"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","Create ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GUID","InstanceGuid ;","\/\/ Instance GUID"]},{"entry":[{},"GUID","TargetInstanceGuid ;","\/\/ Used in case of"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\u2003\/\/ STATUS_REPARSE for the target file"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LONGLONG","RelatedFileobject ;","\/\/ Related FO"]},{"entry":[{},"LONGLONG","RelatedStreamContext ;","\/\/ Initialized if"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Related FO is not NULL"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"USHORT","OpenPathLength;","\/\/ Path used to"]},{"entry":[{},{},{},"\/\/ open file"]},{"entry":[{},"USHORT","NormalizedFullPathLength;","\/\/ Normalized path"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\/\/ length to match short names and file IDs"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FILE_NETWORK_OPEN_INFORMATION Info ;","\/\/ Result of the IO"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"WCHAR","Paths[1];","\/\/ OpenPath"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\/\/ followed by normalized path"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","NetworkQueryOpen ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FILE_INFORMATION_CLASS InfoClass ;"]},{"entry":[{},"union {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003FILE_BASIC_INFORMATION","BasicInformation;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"196pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ BASIC_INFORMATION"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003BOOLEAN","Delete ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ FileDispositionInformation"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003LARGE_INTEGER","Size ;","\/\/ For SetInfo"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ classes including only LARGE_INTEGER"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"} ;"]},{"entry":[{},"}","SetInfo ;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FILE_INFORMATION_CLASS InfoClass ;","\/\/ Rename or link"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GUID","InstanceGuid ;","\/\/ Instance GUID"]},{"entry":[{},"BOOLEAN","IsDirectory ;","\/\/ TRUE if directory"]},{"entry":[{},"BOOLEAN","ReplaceIfExists;","\/\/ From"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"\/\/ FILE_RENAME_INFORMATION"]},{"entry":[{},"ULONGLONG","RootDirectory;","\/\/ file object is stored and"]},{"entry":[{},{},{},"\/\/ not a handle (for replay)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ (unlike FILE_RENAME_INFORMATION)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ULONG","TargetFileNameLength;","\/\/ Target file name as passed"]},{"entry":[{},{},"\/\/ in FileRenameInformation"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ULONG","NormalizedTargetFileNameLength; \u2003\/\/ Normalized"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\u2003\u2003\/\/ target file name without volume name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"WCHAR","Names[1] ;","\/\/ Target file name followed by"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ normalized file name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","Rename ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GUID","Guid ;","\/\/ Instance GUID"]},{"entry":[{},"USHORT","VolumeNameLength ;","\/\/ Length of volume name"]},{"entry":[{},"WCHAR","VolumeName[1] ;","\/\/ Volume name"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","Instance ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GUID","Guid ;","\/\/ Instance GUID"]},{"entry":[{},"USHORT","VolumeDosNameLength;","\/\/ DOS name length"]},{"entry":[{},"WCHAR","VolumeDosName[1] ;","\/\/ Volume name"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","Instance2 ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BOOLEAN","PagingIo ;"]},{"entry":[{},"BOOLEAN","NoCache ;"]},{"entry":[{},"BOOLEAN","IsSection ;"]},{"entry":[{},"ULONGLONG","Offset ;"]},{"entry":[{},"ULONG","Length ;"]},{"entry":[{},"ULONG","BytesWritten ;"]},{"entry":[{},"char","Buffer[1] ;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","Write ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"GUID","InstanceGuid ;","\/\/ Instance GUID"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","FoStreamContext ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ULONG","FsControlCode ;","\/\/ FSCTL code"]},{"entry":[{},"ULONG","OutputBufferLength ;","\/\/ Ignore contents of"]},{"entry":[{},{},{},"\/\/ output buffer"]},{"entry":[{},"ULONG","InputBufferLength ;","\/\/ Input buffer is"]},{"entry":[{},{},{},"\/\/ copied into record"]},{"entry":[{},"char","InputBuffer[1] ;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","Fsctl ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ULONG","VersionNumber ;","\/\/ Version # = (max << 16) | min"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","Version ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["}","IORECORD_RECORD, *PIORECORD_RECORD ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/"},{"entry":"\/\/ Record list"},{"entry":"\/\/"},{"entry":"typedef struct_IORECORD_RECORD_ENTRY {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LIST_ENTRY ListEntry ;",{}]},{"entry":[{},"IORECORD_RECORD Record ;","\/\/ At the end of that structure as the"]},{"entry":[{},{},"\/\/ record length may vary"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["}","IORECORD_RECORD_ENTRY, *PIORECORD_RECORD_ENTRY ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/"},{"entry":"\/\/ Messages sent down to IORECORD communication port"},{"entry":"\/\/"},{"entry":"typedef enum {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IORECORD_MSG_ADDPREFIX = 1,","\/\/ Add prefix"]},{"entry":[{},"IORECORD_MSG_ADDEXCLUDEPREFIX,","\/\/ Add exclude prefix"]},{"entry":[{},"IORECORD_MSG_REMOVEPREFIX,","\/\/ Not implemented"]},{"entry":[{},"IORECORD_MSG_RESETPREFIX,","\/\/ Reset prefix list"]},{"entry":[{},"IORECORD_MSG_RESETALLPREFIX,","\/\/ Reset prefix list on all instances"]},{"entry":[{},"IORECORD_MSG_STARTRECORDING,","\/\/ Start recording"]},{"entry":[{},"IORECORD_MSG_STOPRECORDING,","\/\/ Stop recording"]},{"entry":[{},"IORECORD_MSG_GETRECORDS,","\/\/ Get records"]},{"entry":[{},"IORECORD_MSG_GETFILEID,","\/\/ Get New File ID when replaying"]},{"entry":[{},{},"\/\/ CREATE by file ID"]},{"entry":[{},"IORECORD_MSG_MAX"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["}","IORECORD_MSG_TYPE ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"typedef struct _IORECORD_MESSAGE {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IORECORD_MSG_TYPE MsgType ;"]},{"entry":[{},"union {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ RECORD Messages"]},{"entry":[{},"\/\/"]},{"entry":[{},"struct {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"USHORT VolumeLength ;","\/\/ Volume length in bytes"]},{"entry":[{},"USHORT PrefixLength ;","\/\/ Prefix length in bytes"]},{"entry":[{},"WCHAR Names[1] ;","\/\/ VolumeName followed by PrefixName"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","AddPrefix ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"USHORT VolumeLength ;","\/\/ Volume length in bytes"]},{"entry":[{},"WCHAR VolumeName[1] ;","\/\/ VolumeName"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","ResetPrefix ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ULONG Flags ;","\/\/ Unused"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","StartRecording;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ULONG Flags ;","\/\/ Unused"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","StopRecording;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ULONG Flags ;","\/\/ Unused"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","GetRecords ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/"]},{"entry":[{},"\/\/ REPLAY Messages"]},{"entry":[{},"\/\/"]},{"entry":[{},"struct {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"USHORT FileNameLength ;","\/\/ File name length in bytes (NT"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ format, call RtlDosPathNameToNtPathName_U"]},{"entry":[{},"\/\/ in user mode)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"WCHAR FileName[1] ;","\/\/ File name"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"280pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","GetFileId ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"308pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["}","IORECORD_MESSAGE, *PIORECORD_MESSAGE ;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#endif"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"As can be seen from the foregoing detailed description, there is provided a method and system that record and replay user mode I\/O requests in a substantially identical manner. This allows testing tasks that otherwise have to be done manually to be automated, such as when testing the compatibility of file system-related components with user-mode programs when handling I\/O requests.","While the invention is susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
