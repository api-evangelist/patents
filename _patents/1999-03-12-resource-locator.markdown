---
title: Resource locator
abstract: A computing environment includes an application server code resident on a remote application server that can be distributed by a local server. A request for information by a client is serviced by a request handler on the local application server. If the information is available on the local application server, the request handler satisfies the request. If the information is not available locally, the request handler can access the remote application server. When the information is copied to the local application server, the request handler retains a copy of the information and forwards a copy to the client. Where the information cannot be transferred to the local application server, the request handler can establish a proxy to the remote server and a response from the remote application server to the client. The client communicates with the remote application server via the proxy on the local application server and is unaware of the remote application server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06868448&OS=06868448&RS=06868448
owner: Sun Microsystems, Inc.
number: 06868448
owner_city: Palo Alto
owner_country: US
publication_date: 19990312
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This is a continuation-in-part of application Ser. No. 09\/106,868, filed Jun. 29, 1998, now U.S. Pat. No. 6,446,109, entitled \u201cApplication Computing Environment\u201d.","1. Field of the Invention","This invention relates to computing systems, and more particularly to the architecture and environment for computing and applications executing therein.","Portions of the disclosure of this patent document contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office file or records, but otherwise reserves all copyright rights whatsoever. Sun, Sun Microsystems, the Sun logo, Solaris, SPARC, Java, JavaBeans and all Java-based trademarks and logos are trademarks or registered trademarks of Sun Microsystems, Inc. in the United States and other countries.","2. Background Art","Computers are used to send and receive data using a transport mechanism or communications network. The Internet is one example of a transport mechanism and other examples include local area networks (LANs) and wide area networks (WANs). Using a network, a software application (a sender) that resides on one computer system can exchange information (e.g., corporate data or executable code) with a software application (a receiver) that resides on a remote computer system, for example. The exchange of information between computers typically occurs between a \u201cserver application\u201d that provides information or services, and a \u201cclient application\u201d that receives the provided information and services.","A problem with existing server applications is that they must be pre-configured to include the information that they are to provide to a client application (they cannot be configured dynamically). Additionally, files that are needed to execute an application are transferred one at a time as they are needed thereby delaying the execution time for various applications. Thus, instead of having all files that are utilized by an application transferred prior to execution (thereby expediting the actual execution), each file is transferred as it is needed. Further, when information or an application is updated, the updates have to be manually retrieved and installed. Additionally, disk space on a server must be managed by a user to relieve disk space for further use. Issues such as transmission efficiency and security are raised when information is exchanged between computers. Transmission inefficiencies are especially apparent where information is communicated over a long distance and\/or lower speed or bandwidth lines. Further, where a transmission is being received by a computer system, security measures are typically used to ensure that the transmitted information (e.g., program code) does not corrupt the computer system. Unfortunately, security measures can restrict access to the computer system's resources which can hinder an application's efficiency and usability.","As will be discussed below, computing environments that use an application architecture initially developed for use with the Internet can be significantly affected by the type of medium used to form the Internet connection. The type of connection that a user has to the Internet can impact the speed at which information is transmitted.","The application architecture that is typically used in the Internet environment is referred to as a three-tier application architecture, or three-tier architecture. The three-tier architecture was originally designed to allow a client to have access to data and applications. In this architecture, a client communicates requests to a server for data, software and services, for example. The three-tier architecture includes a database tier that includes a database server, an application tier that includes an application server and application logic (i.e., software application programs, functions, etc.), and a client tier. The application server responds to application requests (e.g., a request for a software applet, etc.) received from the client. The application server forwards data requests to the database server.","The number of tiers that are required for an application may vary. For example, a calculator application might only involve the client tier. That is, if the calculator application software and data are resident on the client, there is no need to access the application or database tiers. An application that makes use of persistent storage such as a word processing application and the documents created therein may involve both the client and the application tiers. An enterprise's application (e.g., an accounting or personnel) application may involve all three tiers as data that is used by the application may be stored in a database.",{"@attributes":{"id":"P-00012","num":"00012"},"figref":"FIG. 1","b":["102","106","106"]},"Application server  is pre-configured to include those applications that are needed by its clients. In an effort to keep the size of the client minimal or \u201cthin,\u201d applets that are executed in client tier  generally do not include any significant application logic. Application server  is pre-configured to include the application logic that is not included in client tier . The majority of an application's functionality is performed by the application logic that resides on and is managed by application server  in application tier . Database tier  contains the data that is accessed by the application logic in application tier . Database server  manages the data, its structure and the operations that can be performed on the data and\/or its structure.","Application server  and database server  reside in production data center . Application server  can be pre-configured with applications such as a corporation's accounting, personnel and payroll applications, for example. Application server  manages requests directed to the applications that are stored on application server . Database server  manages the database(s) that manage data for applications. Database server  responds to request to access the accounting, personnel and payroll applications' data, for example.","Connection  is used to transfer code, data, and graphical user interface layer to client tier  and to transmit enterprise data between client tier  and production data center . The client tier can communicate with the application tier using various protocols including HTTP (HyperText Transfer Protocol), HTTPS (Secure Hyper Text Transfer Protocol), Socket, CORBA, or an RMI (a Remote Method Invocation) application programming interface (API) available from Sun Microsystems. The RMI API provides the ability to invoke methods, or software modules, that reside on another computer system. Parameters are packaged (or marshalled) and unpackaged (or unmarshalled) for transmittal to and from the client tier. Connection  represents the transmission of requests for data and the responses to such requests from applications that reside in application server .","In a typical computing environment, production data center  is located at a centralized site. In this way, applications can be centrally managed such that updates can be made and a standardized application base can be provided to users. However, an application's users can be spread across a wide geographical area. Thus, client tier  is not necessarily located at the same site or proximately connected to application server  (e.g., via a local area network, or LAN). Information may be transmitted, for example, via a wide area network (WAN) or the Internet that involve remote transmissions (e.g., overseas) and lower bandwidth communication technologies (e.g., modem) which can result in unacceptable transmission times. Transmission times are of concern since both data and application code may be transmitted between client tier  and application server  in the three-tier architecture.","The three-tier architecture can be used with various types of networks (e.g., Internet and intranet). Typically, client tier  communicates with production data center  via browser  which issues a request of application server . The client can request a resource that is identified by a uniform resource locator (URL) designation. For example, the URL can identify a page definition (e.g., an HTML document) that browser  uses to generate a display, or the URL can identify page definition with an embedded applet (i.e., executable program code) that is run inside browser ).","The information that is represented by a URL is downloaded to client tier . Thus, if a corporate application requires multiple downloads (e.g., multiple page definitions and\/or applets) to run within client tier , the downloading process is inefficient when application server  is remote and\/or slower transmission rates are used. Web applications (where the client is using a browser as the application container), often do not store code, nor data in the disk on client tier . All information is retrieved from the application server  every time. Further, when information may be stored within client tier  (for example when a client is the tuner Castanet product available from Marimba discussed below), the information downloaded to client tier  may occupy a significant amount of client tier 's disk space. To free up memory and disk space on client tier , a user has to manually delete unused applications.","One type of application that can be used for distributing, updating, and managing business applications and accompanying information on the client is the Castanet product available from Marimba. The Castanet product consists of a tuner (client software that resides on the desktop or computing device) and transmitter (server software). A tuner can receive, install, and launch applications automatically without intervention. When a network connection is available, the tuner looks for updates to the installed applications and selectively downloads only the information that has changed. The transmitter distributes and updates applications over a network. Information and applications distributed and managed by the Castanet product through the transmitters and receivers are referred to as channels. Thus, the Castanet product may be utilized to distribute and manage channels. However, the tuner for the Castanet product is required in order to receive the transferred information.","Security measures adopted for use with the application architecture limit the applications that have been developed according to this architecture. For example, an application's efficiency and\/or usability can be impacted as a result of security measures. Further, there are issues of security concerning the transmission of information. From the perspective of client tier , for example, it is necessary to ensure that the information that is being received is \u201ctrusted.\u201d That is, it is important to ensure that client tier  is not corrupted by unauthorized software executing in client tier . Further, it is important to ensure that a client that attempts to access production data center  can be trusted with the corporation's data and applications.","Optimally, client tier  executes only those applets that have been received from a known and trusted source (e.g., production data center ). A level of trust can be achieved between a client tier  and production data center  such that data and applets can be transmitted freely between client tier  and production data center . However, this paradigm is limiting and does not always occur in practice. Browser  may request an applet from a source other than production data center , for example. If an applet is allowed to execute unchecked in client tier , it introduces the potential for serious breaches of security and\/or malicious access to the data and resources.","Security models or approaches have been adopted to limit the damage that may be caused by a breach of security and maliciousness. One such security approach, referred to as the sandbox security model, limits the access given to applets from an \u201cuntrusted\u201d (i.e., unknown) source to only its namespace (e.g., operating system-assigned boundaries of a program such as the addressable memory). For example, normally, applets run within a browser's sandbox model, due to which the applets are not allowed to access any local resources like file systems and printers. The only way to access file systems and printers is from the application server which is normally in a remote location. Such a solution is not efficient and may not provide access to resources close to a client. Under the sandbox model, one solution to this problem is to use signed applets that make the applets trusted, thereby allowing the applets to use the local resources. Further, when applets are downloaded from an application server, the applets can only communicate with the application server. Thus, it is not possible to share services by applets downloaded from different application servers.","An \u201cuntrusted\u201d applet or software program is allowed to access only memory or other computer resources that are in its namespace. By limiting an \u201cuntrusted\u201d applet to its own namespace, the applet can be prohibited from modifying areas of memory assigned to other applets or applications, for example.","Further, an applet may be prohibited from establishing a connection to (and\/or downloading code from) a server (e.g., file or printer servers) other than the one from which it was retrieved. Client tier  may be forced to access another server via application server . To make a request of a file server, for example, client tier  sends the request to application server  which forwards the request to the file server. This is inefficient particularly when the file server adjacent to client tier .","Further, in the sandbox approach, printing is accomplished by displaying material to be printed in browser  and relying on the user to print the material using the print functionality available in browser .","The sandbox approach has clear disadvantages. An applet that is confined to its namespace cannot access information that is stored in a local file system. Further, confined applets cannot pool or share resources such as memory.","Another security approach uses signatures or other forms of certification to certify that an applet is from a known source. An \u201cuntrusted\u201d applet can become a \u201ctrusted\u201d applet, if its digital signature can be verified by, for example, client tier . Verification can be accomplished with digital signatures using a public key\/private key encryption technique. The recipient of the information (e.g., client tier ) uses the digital signature and a public key (a key generated from the private key and distributed to the public) to verify the digital signature thereby verifying the information.","Signed applet support is not provided by all clients. To support digitally signed applets, it is necessary for client tier  to include the ability to verify the signature. Many currently available browsers do not have such a capability.","In addition to the efficiency, memory, and security issues, in the three-tier model each application must log in to application server  separately. There is no ability to store user information (e.g., profile information) in client tier  or elsewhere so that it can be used for subsequent applications.","One or more embodiments of the invention comprise a computing environment that offers a level of decentralization wherein application code resident on a remote application server can be distributed to a local server, or local application server, that services a client. A local application server can be dynamically configured to serve its clients based on requests for application code and\/or services. Further, if application code that is downloaded to a client from the local application server cannot be trusted, access to the local application server's resources may not be given to the downloaded application code. Efficiencies can be achieved for the transmission of information.","Using embodiments of the invention, it is not necessary to pre-configure the local application server to satisfy a request of the server. The local application server can be configured dynamically (e.g., as needed) in response to requests. For example, there is no need to install application code or services on the local application server in anticipation of a request. If the local application server is not configured to handle a request, the local application server dynamically configures itself to satisfy the request.","A request for information, such as application code (e.g., an applet) by a client, can be serviced by the local application server with its existing configuration or a new configuration. Further, by using the local server, it is possible to access local resources in an efficient way from the local server without using signed applets (which requires a costly infrastructure and certificates management). Thus, all of the applets are downloaded from the local server regardless of the application server. Proxies are installed in the local server and communicate with the application servers. Therefore, it is possible for applets to share services in the network using the proxies downloaded in the local server. Further, because the user downloads all of the applets from the local server, the application server locations and URLs are transparent to the user, and from the user perspective, all applications are local. Consequently, from the applet perspective, all services are available on the local server, and the resource locator\/handler (discussed below) running in the local server downloads the proxies for the actual services and makes the locations transparent for the applet. In addition, since the applet is obtaining all services from the local server, a signed applet infrastructure is not required.","One or more embodiments provide for a request handler to manage a client's requests and ensure that needed files and applications are installed. If the local application server's configuration includes the requested application code, the local application server satisfies the request using its existing configuration. If the local application server's configuration does not include the requested application code, the local application server (through the request handler) attempts to locate the requested application code (e.g., from another application server). When the requested application code is located, it is transferred to the local application server. The local application server retains a copy of the application code and forwards a copy to the client. Thus, if a subsequent request is made for the application code, it can be satisfied by the local application server (without accessing another application server). Further, a complete set of the files needed to run an application are downloaded and installed rather than one file at a time as needed for a particular application.","The local application server can further be dynamically configured with services that can satisfy a client request. When a service request is received from the client, the local application server attempts to satisfy the request using a service that resides on the local application server. If the requested service is resident on the local application server, the local application server forwards the request to the service. There is no need to reconfigure the local application server.","If a request is for a service for which the local application server is not already configured, the local application server (through the request handler) determines whether the service resides elsewhere (e.g., on another server). If the local application server finds the service, it determines whether the service can be acquired from its current location. If so, the service is copied to the local application server and is used to satisfy the client's request.","Where the requested service cannot be transferred to the local application server, the local application server establishes a proxy for the service. The proxy resides on the local application server and forwards the client request to the service that resides on the other application server. If a response is generated by the service, the response is sent to the proxy on the local application server and forwarded to the client. Thus, where a proxy is used, the client need not be aware of the service's actual location. The client is unaware that the requested service does not reside on the local application server.","In embodiments of the invention, the local application server includes a resource locator (also referred to as a request handler), a download service and one or more local services. The resource locator is used by the local application server to locate application code and services (respectively) when a request is made that cannot be satisfied using the local application server's current configuration. Services that are downloaded to the local application server can be used by the local application server to satisfy a request.","The local application server can be configured with proxy services as needed. A proxy service acts a proxy for a service that resides elsewhere (e.g., on another server). A proxy service is used when, for example, a service cannot be transferred to the local application server. A service request is forwarded by the proxy service to the service. The service sends a response, if any, to the proxy service for forwarding to the requester.","The local application server can be configured with application software as needed. When, for example, a client requests application code, the local application server can obtain the application code, if it does not already have the requested application code. Application code that is acquired by the local application server is retained and can be used to satisfy a subsequent request for the application code, if any.","The local application server can be configured to include local services such as print, file, login or profile services that can be shared by multiple applications. Where the local application is configured to include local services, a client request for a local service is forwarded by the local application server to the local service.","One such local service allows a client to log in to the local application server. During a login process, the client establishes its identity which is stored on the local application server and can be used for multiple applications and information requests. The local server generates a credential for the client that can be used to authorize access to any application server and\/or service requested by the client.","In embodiments of the invention, applications and information that has been updated at a remote server are automatically updated on the local application server. Further, disk space and memory are managed automatically such that unused applications are removed from the local application server.","An enterprise computing environment is described. In the following description, numerous specific details are set forth in order to provide a more thorough description of the present invention. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In other instances, well-known features have not been described in detail so as not to obscure the invention.","Embodiment of Computer Execution Environment (Hardware)","An embodiment of the invention can be implemented as computer software in the form of computer readable program code executed on a general purpose computer such as computer  illustrated in , or in the form of bytecode class files executable within a Java\u2122 runtime environment running on such a computer, or in the form of bytecodes running on a processor (or devices enabled to process bytecodes) existing in a distributed environment (e.g., one or more processors on a network). A keyboard  and mouse  are coupled to a system bus . The keyboard and mouse are for introducing user input to the computer system and communicating that user input to processor . Other suitable input devices may be used in addition to, or in place of, the mouse  and keyboard . I\/O (input\/output) unit  coupled to system bus  represents such I\/O elements as a printer, A\/V (audio\/video) I\/O, etc.","Computer  includes a video memory , main memory  and mass storage , all coupled to system bus  along with keyboard , mouse  and processor . The mass storage  may include both fixed and removable media, such as magnetic, optical or magnetic optical storage systems or any other available mass storage technology. Bus  may contain, for example, thirty-two address lines for addressing video memory  or main memory . The system bus  also includes, for example, a 64-bit data bus for transferring data between and among the components, such as processor , main memory , video memory  and mass storage . Alternatively, multiplex data\/address lines may be used instead of separate data and address lines.","In one embodiment of the invention, the processor  is a microprocessor manufactured by Sun Microsystems, Inc., such as a SPARC microprocessor, or a microprocessor manufactured by Motorola, such as the 680X0 processor, or a microprocessor manufactured by Intel, such as the 80X86, or Pentium processor. However, any other suitable microprocessor or microcomputer may be utilized. Main memory  is comprised of dynamic random access memory (DRAM). Video memory  is a dual-ported video random access memory. One port of the video memory  is coupled to video amplifier . The video amplifier  is used to drive the cathode ray tube (CRT) raster monitor . Video amplifier  is well known in the art and may be implemented by any suitable apparatus. This circuitry converts pixel data stored in video memory  to a raster signal suitable for use by monitor . Monitor  is a type of monitor suitable for displaying graphic images.","Computer  may also include a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling via a network link  to a local network . For example, if communication interface  is an integrated services digital network (ISDN) card or a modem, communication interface  provides a data communication connection to the corresponding type of telephone line, which comprises part of network link . If communication interface  is a local area network (LAN) card, communication interface  provides a data communication connection via network link  to a compatible LAN. Wireless links are also possible. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals which carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals which carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer , are exemplary forms of carrier waves transporting the information.","Computer  can send messages and receive data, including program code, through the network(s), network link , and communication interface . In the Internet example, server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . In accord with the invention, one such downloaded application is the application computing environment described herein.","The received code may be executed by processor  as it is received, and\/or stored in mass storage , or other non-volatile storage for later execution. In this manner, computer  may obtain application code by way of a carrier wave.","Application code may be embodied in any form of computer program product. A computer program product comprises a medium configured to store or transport computer readable code, or in which computer readable code may be embedded. Some examples of computer program products are CD-ROM disks, ROM cards, floppy disks, magnetic tapes, computer hard drives, servers on a network, and carrier waves.","The computer system described above is for purposes of example only. An embodiment of the invention may be implemented in any type of computer system or programming or processing environment.","Four-Tier Architecture","One or more embodiments of the invention comprise a computing environment that offers a level of decentralization wherein information needed by a client can be cached at local application servers referred to as webtop servers. A webtop server can be-, for example, an instance of computer . Webtop servers also provide access to local and remote network services. Thus, a client accesses a webtop server instead of a remote server such as, for example, application server  that resides in production data center  of FIG. .","In one or more embodiments of the invention, a webtop server is included in a four-tier application architecture (or four-tier architecture) as illustrated in FIG. . As in the three-tier architecture, client tier  provides a graphic user interface (GUI). The GUI can be written as a Java applet which runs from browser  or any Java enabled environment such as is provided on network computers. Browser  runs in client tier  which is comprised of an instance of computer  in an embodiment of the invention. The software program functionality or logic that is executed in client tier  can be minimized to limit the size of the programs that must be transmitted to client tier . This facilitates the deployment of client software to the clients that implement client tier .","Application server  resides in application server tier . Application server  manages requests for application logic and is responsible for database transaction handling with database server  that is in database tier . Database server  is responsible for storing application data in a persistent store such as a relational database (RDB) or an object-oriented database (OODB), for example. Database server  responds to a request to access accounting, personnel and payroll applications' data, for example. In an embodiment of the invention, application server  and database server  are instances of computer .","Application server  and database server  can be resident in a production data center that is remote to a client in client tier . A client in client tier  communicates its requests to webtop server  in webtop server tier . Webtop server  can support multiple clients. Webtop server  caches applets and\/or static data that are needed by a client. Further, webtop server  manages services which provide access to network resources need by a client (e.g., file system and printer resources).","In an embodiment of the invention, communication link  between a client in client tier  and webtop server  uses both the Hypertext Transmission Protocol (HTTP) and Remote Method Invocation (RMI). Similarly, communication link  between webtop server  and application server  uses both HTTP and RMI. In one or more embodiments of the invention, communication link  between webtop server  and application server  uses the Castanet product to transmit information (channels) from webtop server  to application server  and vice versa. Alternatively, instead of the Castanet product, an HTTP Distribution and Replication Protocol (DRP protocol) may be utilized. Using DRP, a client can download only the data (or application) that has changed since the last time the client checked (i.e., only the differences are downloaded). The DRP protocol uses content identifiers to automatically share resources that are requested more than once (thereby eliminating redundant transfers of commonly used resources). Additionally, the DRP protocol uses a data structure called an index that describes meta data (e.g., the exact state of a set of data files). The DRP protocol is more fully described in the document entitled \u201cThe HTTP Distribution and Replication Protocol\u201d (1997) available at \u201chttp:\/\/www.w3.org\/TR\/NOTE-drp\u201d. It should be apparent, however, to one of ordinary skill in the art that other communication techniques and\/or protocols can be used for communication links  and .","In one embodiment of the invention, communication link  between application server  and database server  uses a Java Database Connectivity (JDBC) Application Program Interface (API) that is available from Sun Microsystems, Inc. It should be apparent, however, to one of ordinary skill in the art that other database interfaces can be used for communication link .","Webtop server  caches data and applets for use by a client. Initially, webtop server  is empty without any information maintained. When a client accesses an application for the first time, webtop server  retrieves and stores the program software from application server . Subsequent requests for the application software can be satisfied using the program software stored in webtop server . Where the program software is written as Java applets, webtop server  becomes the applet-host once the applets are transferred from application server . Thus, when the applet is executed on the client, the applet can communicate back to webtop server  as the host of that applet thereby satisfying the sandbox security paradigm.","Other program software that can be transmitted to webtop server  includes servlets. A servlet is a software program that is written in the Java programming language (or any other programming language) and runs on a server. A servlet can be invoked by a client via a name or a URL, for example. Servlets can be used to write application services that comprise application server tier , for example. An applet running on a client requests the handle for a servlet (e.g., a URL) from webtop server . If the servlet does not already reside at webtop server , webtop server  can obtain the servlet from application server  and send the service's handle to the client.","When a request is received by a servlet, the servlet can either satisfy the request locally or forward the request (or some portion of it) to another service. For example, file system and printing requests can be handled by services that reside on webtop server .",{"@attributes":{"id":"P-00075","num":"00075"},"figref":"FIG. 4A","b":["404","404","402","410","410","420","420","430","430","404","404"]},"Clients A-C, A-C and A-C reside at sites ,  and  (respectively). Using embodiments of the invention, it is unnecessary for sites ,  and  and their clients A-C, A-C and A-C to be proximately located with reference to production data center . Webtop servers ,  and  reside at sites ,  and  (respectively) and are dynamically configured to handles requests such as those received from clients A-C, A-C and A-C. Application software and services requested by clients A-C, A-C and A-C can reside on webtop servers ,  and  respectively.","Webtop server  can reside in the same building or campus as clients A-C, for example. Similarly, webtop servers  and  can be proximately located to clients A-C and A-C, respectively. Clients A-C, A-C and A-C interact with webtop servers ,  and , respectively.","When a client requests application software or a service that is not resident on the webtop server, the webtop server can obtain the request software or service from the production data center . When a client requests software that has already been cached on the webtop server, the software can be downloaded to the client without interfacing with production data center . A service that is resident on a webtop server can be used to satisfy a client's request for that service. Thus, the need to access application servers A-C in production data center  is minimized. This is advantageous particularly when an inefficient mode of communication would otherwise need to be used between production data center  and clients A-C, A-C and A-C.",{"@attributes":{"id":"P-00079","num":"00079"},"figref":"FIG. 4B","b":["402","404","404","414","414","404","404","414","414","402","404","404","414","414","402"]},"Application servers A-C forward requests for stored data (e.g., stored in a database) to database servers A-C. A response received from one of database servers A-C is forwarded by one of application servers A-C. Thus, for example, a request for data initiated by client A residing at site  is forwarded to webtop server . Webtop server  forwards the request to one of the application servers at production center  (e.g., application server A). Application server A forwards the request to the appropriate database server (e.g., database server A). Database server A processes the request and responds with the requested data (or an error), for example. The response is forwarded to client A via application server A and webtop server .","Thus, when transactions (e.g., an HTML form is submitted with search criteria) are requested by clients A-C, A-C and A-C, the transactions are not processed by webtop servers ,  and  respectively. Instead the transaction requests are forwarded to application servers A, B, and C respectively. When the requested information has been located, the information is then transmitted back to clients A-C for display.","Webtop Server","Webtop server  includes a service locator, cached applets and servlets, and local services. Examples of local services include file system, print, login and profile services which will be discussed in more detail below.  provides an illustration of a webtop server according to an embodiment of the invention.","Referring to , webtop server  includes application locator , download service , service locator , proxy services manager , local services  (e.g., file service A, print service B, login service C, and profile service D) and application software . Application software  comprises software that is cached at webtop server . The following provides a discussion of components of webtop server .","Login and Profile Services","In one or more embodiments of the invention, a login service (e.g., login service C) runs on webtop server  to log in a client and verify the client's login information (e.g., login identification and password). Login service C can further create a cookie to track the client session. A cookie is, for example, an item or items of information that is stored on the client and accessed by software that is running on the client (e.g., a browser). A cookie is typically stored as a text file, however, it can be retained using other storage mechanisms.","In one or more embodiments of the invention, login service C maintains, on webtop server , the client's profile that contains information about the client. Profile service D examines the profile to obtain information about the client. For example, profile service D can examine a client's profile to determine whether the client is able to connect to other systems on the network from an applet which is downloaded from webtop server . This occurs when, for example, the client trusts webtop server  as a trusted server. A client's profile can further include, for example, an identification of the protocols (e.g., RMI) supported by the client.","Profile service D can examine a client's profile information to identify and create a start page (e.g., an initial page that displays in client tier ) once the client has successfully logged in. The initial screen is transmitted to client tier  for display by browser  in client tier .","In an embodiment of the invention, login service C is used to generate a credential that can be used on behalf of the client to verify the client to an application or network service. When the client wishes to access an application or network service, the credential is sent to the application or network server. The application or network server trusts the credential generated by login service C after verifying the signatures of login service C. The credential can be used to enable a client to enter a single login for all of the applications and\/or network services that it accesses.","Login service C generates a credential certificate upon request of the client. It is not necessary for the credential certificate to contain the client's password. The credential certificate is sent by the applet to the network service or application. The network service or application verifies the signature(s) generated by login service C using the credential certificate.","Application Locator","Application locator  is used in one or more embodiments of the invention to locate application program software (e.g., applets). Application program software may be written in any programming language including but not limited to the Java programming language, HTML, and the Java scripting language. Application software that is not already cached on webtop server  is stored on an application server (e.g., application server ) that is typically located in a central production center. Application locator  consults a directory to locate the application server that contains the requested application software. Once the applet is located, download service  acquires the application software for storage on webtop server .","The application software that is stored on webtop server  can be downloaded to client tier  from webtop server . Webtop server  becomes the host server for the application software that is downloaded to client tier . Thus, under the sandbox security model, the application software executing on the client can send requests to webtop server .","Application locator  can further verify that the application software that is cached on webtop server  is the current version of the software. The directory information that application locator  can contain versioning information that application locator  can examine to determine whether the cached version of the software is the most recent version of the application software. If a more recent version exists, download service  can access application server  to obtain the current version of the application software. Because webtop server  maintains the most recent version of the application software, the client receives the current version of the application software.","A broadcast message technique can be used as an alternative to webtop server  examining the directory to determine whether it has the most recent version of application software. For example, when an applet is changed, a broadcast message can be sent across the network. The broadcast message can be sent out to all instances of webtop server  or only those instances that have registered to receive such a message. When a broadcast message is received by webtop server , it can respond by obtaining the new version. Download service  can respond by acquiring the changed application software from the application server on which the newer version resides for storage on webtop server , for example.","Thus, application server  can notify webtop server  when a change occurs in application code. Alternatively, webtop server  can contact application server  to determine whether the application code has been updated. Application server  can keep track of all changes to application software. When contacted by webtop server , application server  examines its set of changes and respond to webtop server . If application server  indicates that application code has changed, webtop server  can request an updated copy of the application code.","To request application software, the client need only reference application locator  on webtop server  and identify the requested application software by name, for example. There is no need for the client to remember a URL for the requested application software. Application locator  accesses the directory to translate the name provided by the client into a identifier (e.g., a URL) for the application software.","Service Locator","Application software that is running on a client can request a service (e.g., file system or print services). When a service request is received by webtop server , service locator  is used in one or more embodiments of the invention to locate a local or network service to satisfy the request. It is not necessary for the application software to be aware of the location of the network or local service. Thus, a network or local service can be moved without impacting the applet code.","To illustrate, an applet (or other application software) running in client tier  submits a request for a service via communication link . The request is received by service locator  which proceeds to find the requested service.","If the service can be transferred to webtop server , download service  acquires the service from the server on which it resides. If not, service locator  acquires a proxy on webtop server  that acts as a conduit for transmissions between the client and the requested service.","In one or more embodiments of the invention, services are written in the Java programming language (or any other programming language) and are referred to as servlets. Sun Microsystems, Inc.'s WebServer\u2122, as well as other servers, support the use of server-side programs (servlets) that may be written in the Java programming language (or other programming language). A Java Servlet API is available from Sun Microsystems, Inc. that includes abstract classes that can be subclassed to create a servlet.","Where it is possible for an application software's request to be satisfied by more than one service, service locator  can choose based on each service's respective loads. Thus, service locator  can perform load balancing across the services. A discussion of load balancing is provided below.","Resource Locator\/Handler","As an alternative to Application Locator  and Service Locator ,  illustrates an embodiment of the invention with Request Handler  (also referred to as a Resource Handler). Resource Handler  has many responsibilities with respect to processing client requests. Resource Handler  must ensure that the files and applications needed pursuant to a request by the client are installed and running. Additionally, resource handler  is responsible for maintaining the most current version of the information and application and releasing unused disk space from webtop server .","Processing by resource handler  commences upon receiving a client request  from a client using a standard internet browser such as Navigator available from Netscape or Internet Explorer available from Microsoft. Resource handler  checks to determine if the request is an application or transaction request (e.g., if the URL (Uniform Resource Locator\u2014the language used to specify the information to be transmitted via the internet) starts with \u201chttp:\/\/<HOST>\/app\/\u201d or is an HTML form). If the request  is not an application or transaction request, resource handler  passes the request  to the webtop server  for processing as described above. Webtop server  processes the request and transmits the response  back to request hander  where it is forwarded  to the client via HTTP for example. If the request  is an application request, request handler  determines if the request is locally available. If the request is locally available, request handler  forwards the request  to webtop server  for processing.","If the application is not locally available, request handler  checks  with an information base such as directory service  (or a database or other repository of information) to determine if the application exists and its location (e.g., with the Castanet technology, request handler  checks with the directory service to determine if the application channel exists). Directory service  provides the results  to request handler . If the requested information does not exist or is not listed with directory service , an ERROR message may be provided to the client via path . Once the location of the requested application is provided by directory service , request handler  requests  the WebDist  module to obtain the application. WebDist module  may-contain the Castanet tuner (or a device configured in the DRP protocol) to receive the relevant information from a Castanet transmitter  (or DRP transmitter) located on an application server, for example. Consequently, the WebDist module  may request the information  from Castanet (or DRP) Transmitter  which then provides the information  back to the Castanet (or DRP) Tuner located within the WebDist module .","Once retrieved, the WebDist module  may store the relevant information  in the HTML directory structure  of webtop server . WebDist module  may then notify the request handler  that the application is ready for retrieval and transmission to the client. The notification may be synchronous or asynchronous. If asynchronous, the user will be notified the application is being obtained and a re-request may be performed automatically in a few seconds.","When information is transmitted to WebDist , a properties file is also provided. The properties file specifies all additional information and dependencies that are needed for the application to run. For example, one application may need another application to properly run. This properties file is provided via path  to request handler  for processing. Request handler  examines the properties file and if additional resources (e.g., files, information, or applications) are needed, request handler  requests WebDist  to retrieve the appropriate resource. The properties file consists of the name of the channel or application being provided, the owner of the channel\/application, and any dependencies (e.g., other channels needed to use the current channel and information regarding how to retrieve the needed channel.","Once the necessary information is installed in the HTML tree (also referred to as HTML directory structure) , request handler  provides the information necessary to load the necessary servlets  to webtop server . Webtop server  then installs the necessary servlets  using the invoker servlet . For example, a servlet located in a JAR file may need to be started up in order to process the HTTP request or run the CGI script requested by the client. In this manner, the servlets are loaded dynamically within the webtop server or proxy when they are needed.","Disk space on a webtop server may be limited. Since the request handler  is responsible for maintaining and updating the necessary files, request handler  may request WebDist to remove specific files that are no longer used or needed by webtop server . Alternatively, WebDist  may determine that additional space is necessary and ask request handler  which files and resources it can remove.",{"@attributes":{"id":"P-00112","num":"00112"},"figref":"FIG. 10","b":["924","924","1030","1032","1034","1036","1038","1040","924","1000","1032","1032","1032","1034","1002","10004","1032","932","1024","918","920","1026","1032","1028","922","1032","1036","1006","1036","926","1008","902","904","1010","1012","922"]},"If the resource exists, kernel  adds the resource to the resource table  and the resource is prepared  by requesting the WebDist module  to make the resource locally available . If the resource is prepared and locally available , kernel  requests the webtop server  to load the necessary servlets . Processing continues as described above. Alternatively, the resource may not be immediately loaded or available (e.g., it is being used by another application or is being retrieved from an application server), and will be placed on waiting list . Once the resource is loaded and available, notification of the resource's availability may be sent to the client. The notification may be synchronous or asynchronous. Further, the resource may remain on the waiting list in a \u201cpreparing\u201d state until all of the resource's dependencies are retrieved, loaded, and available.","By utilizing the request handler in this manner, the webtop server is the real application server from the perspective of the client.","Directory Service","Service locator  and application locator  (and request handler ) locate a service (or services) and application code (respectively) when webtop server 's current configuration cannot satisfy a request. In one or more embodiments of the invention, a directory service (also referred to as an information base, a database, or repository of information) can be accessed, for example, to locate a service or an application's program code.","A directory service can be centrally located or distributed at various geographical areas. A distributed directory service can comprise entries for all geographical areas, or those for a particular area. A replication mechanism can be used to replicate entries to each of the distributed directory services such that each directory service comprises all entries, for example.","A directory service receives and processes locator requests. A directory service maintains a store of information that contains an entry for each service or application code that is registered with the directory service. This store is referred to herein as a directory. When a new service or application is installed, an entry is added to the directory by the directory service. The new service or application may also be added to the resource table . Entries can also be deleted from the directory or resource table when, for example, a service or application is no longer available.","With respect to a service, a directory entry associates a service name with the location of the service. Similarly, a directory entry can identify an application's program code by its name. The location can be expressed in terms of a URL in one or more embodiments of the invention. Service locator  or application locator  queries the directory service using the name of the service or application (respectively). The directory service queries the directory for a service or application code with that name. The directory service returns the location of the service(s) or application code, or an error, if the directory does not contain an entry with the name.","Proxy Services","In some cases, a service cannot be transferred to webtop server . In this case, webtop server  can transfer a proxy for the service. A service may, for example, process secure information and must therefore be executed in a secure environment such as application server . The service's proxy forwards the client's request to the service that is running on application server .","If a proxy is copied to webtop server  instead of the service, webtop server  creates a handle for the proxy. The proxy's handle is forwarded to the client. The client is unaware that the handle is to a proxy and not the actual service. The client submits a request to the service via the service's proxy using the proxy's handle. When the request is received by webtop server , it is given to the service's proxy. The service's proxy forwards the request to the service.","If the service generates a response to the request that is to be transmitted back to the client via the proxy. The service sends the response to the proxy on webtop server . The proxy forwards the response to the client.",{"@attributes":{"id":"P-00124","num":"00124"},"figref":"FIG. 6","b":["604","308","602","602","610","610","604","610","610","602","602","606","606"]},"A credential certificate generated by login service C can be sent to a network service (e.g., services A-B). The network service trusts the credentials supplied by login service C after it verifies the signatures of login service C. The client need only enter a single login (i.e., with login service C) to access multiple applications and network services.","Local Services","Services that are resident on webtop server  are local services. For example, local services are those services that permanently reside on webtop server , or are copied to webtop server  in response to a request by the client. Referring to , login service C and profile service D are examples of services that typically reside permanently on webtop server . If these or other services are not resident on webtop server , they may be transferable to webtop server  as described herein. Other examples of local services are file service A and print service B.","A client forwards a request for a handle to a service to webtop server . If the service is local to webtop server , the handle is forwarded by webtop server  to client. The client can access the service using the handle. Responses generated by a local service are forwarded by webtop server  to the client.","Load Balancing","Service locator  and proxy services  can perform load balancing according to an embodiment of the invention. Where service locator  is aware of more than one service that is capable of satisfying a service request, service locator  can balance the processing load between the services. For example, service locator  can select a service based on which of the services received the last request. That is, service locator  can assign requests to each of services in a sequential, cyclical manner (e.g., a round robin assignment) to balance the load across all of the services that are capable of satisfying the service request.","Similarly, proxy services  may be aware of multiple services that can satisfy a request. Proxy services  can act as the proxy for multiple services. Therefore, proxy services  can distribute service requests to the services for which it acts as a proxy to balance the request processing load. For example, proxy services  can assign service requests using a round robin technique.","Using the above services in a local server architecture according to one or more embodiments of the invention provides many advantages. A request for information, such as application code (e.g., an applet) by a client, can be serviced by the local application server with its existing configuration or a new configuration. Further, by using the local server, it is possible to access local resources in an efficient way from the local server without using signed applets (which requires a costly infrastructure and certificates management). Thus, all of the applets are downloaded from the local server regardless of the application server. Proxies are installed in the local server and communicate with the application servers. Therefore, it is possible for applets to share services in the network using the proxies downloaded in the local server. Further, because the user downloads all of the applets from the local server, the application server locations and URLs are transparent to the user, and from the user perspective, all applications are local. Consequently, from the applet perspective, all services are available on the local server, and the resource locator\/handler (discussed below) running in the local server downloads the proxies for the actual services and makes the locations transparent for the applet. In addition, since the applet is obtaining all services from the local server, a signed applet infrastructure is not required.","Acquisition Process","Application software and services can reside on webtop server  for local access by a client. If the application software and\/or services do not already reside on webtop server , they can be downloaded for use by the client.  provide process flows for acquiring the application software and services, respectively, according to embodiments of the invention.","Referring to , a request for application software is received from the client at step . At step , webtop server  determines whether the software is cached on the server. If so, processing continues at step  to send the requested application software to the client and processing of the software request ends at step .","If the requested software does not reside on webtop server , processing continues at step  to determine the location of the software. Webtop server  consults an information base (e.g., database, directory service, or other repository of information) that can reside at a local, regional or centralized site, for example, to determine the location of the requested software. In one embodiment of the invention, the client identifies the requested software by name, for example. It is not necessary for the client to know the exact location of the requested software. However, if the location is known by the client (e.g., in the form of a URL), the client can submit this information to webtop server .","Using the location information obtained for the requested software, webtop server  sends a request to the application server on which the requested software resides (application server ). If necessary, webtop server  can provide a credential so that the request can be verified by the application server. At step , the application software that is transferred from the application server is cached on webtop server . Further, any dependencies of the application software are transferred and cached on webtop server . At step , the requested application software is forwarded to the client and processing of the software request ends at step .","Similarly, the client can request a service (e.g., print or file service). If the service is local to webtop server , a handle for the service can be sent to the client. If the service is not local, webtop server  attempts to download the service for use locally by the client. If the service cannot be obtained or there is no gain (e.g., efficiency gain), webtop server  obtains a proxy for the service and a proxy handle is sent to the client.  provides a service acquisition process according to an embodiment of the invention.","At step , a request for a service handle is received from the client. At step , webtop server  determines whether the service is already local (or resident on webtop server ). If so, processing continues at step  to return a handle for the service to the client and processing of the service request ends at step .","If the service is not local to webtop server , processing continues at step  to determine the location of the requested service. Webtop server  consults an information base (e.g., database, directory service, or other repository of information) that resides at a local, regional or centralized site, for example, to determine the location of the requested service.","At step , a determination is made whether the service can run locally on webtop server . If, for example, the service must run in a secure environment of another server, the service cannot be copied to webtop server . Further, if the service must interact with other services that cannot be copied to webtop server, there is little benefit to obtaining a copy of the service. In these cases, webtop server  does not download the service, but requests a proxy for the service at step . If webtop server  determines that the service is transferable, it requests a copy of the service at step .","At step , a handle to the service of the service's proxy is sent to the client. Processing of the service request ends at step .","Servlet Security","In one or more embodiments of the invention, a security model is implemented whereby an applet's status as trusted or untrusted indicates the degree of access to resources given to the applet. An untrusted applet is limited to its own namespace, for example. A trusted applet can have access to resources (e.g., memory) outside of its namespace. Since servlets (like applets) can be copied from trusted servers as well as untrusted servers, a security approach can be used to ensure that servlets cannot cause harm to computer resources.","In one embodiment of the invention, webtop server  limits the acquisition of servlets such that servlets ate only obtained from trusted servers. A servlet that is obtained from a trusted server is considered to be a trusted servlet and may be given access outside the sandbox (e.g., outside of its own namespace).","In another embodiment of the invention, webtop server  allows servlets to be obtained from both trusted and untrusted servers. To verify an untrusted servlet, webtop server  can require that a servlet obtained from an untrusted server be signed with a signature of an authorized person. The signature is verified before the servlet is considered to be a trusted servlet. If a servlet is obtained from an untrusted server, it is considered to be untrusted unless it has a signature that has been verified. As with an untrusted applet, an untrusted servlet is limited, in its access, to its own namespace. That is, an untrusted servlet is run inside the sandbox.","Thus, an enterprise computing environment has been provided in conjunction with one or more specific embodiments. The invention is defined by the claims and their full scope of equivalents."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"P-00043","num":"00043"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00044","num":"00044"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00045","num":"00045"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00046","num":"00046"},"figref":"FIG. 4A"},{"@attributes":{"id":"P-00047","num":"00047"},"figref":"FIG. 4B"},{"@attributes":{"id":"P-00048","num":"00048"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00049","num":"00049"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00050","num":"00050"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00051","num":"00051"},"figref":"FIG. 8"},{"@attributes":{"id":"P-00052","num":"00052"},"figref":"FIG. 9"},{"@attributes":{"id":"P-00053","num":"00053"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
