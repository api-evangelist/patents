---
title: Method and apparatus for implementing a real-time event management platform
abstract: A method and apparatus for implementing a real-time enterprise event management system is disclosed. The enterprise event management (EEM) system couples together various “event aware” computing resources that publish and subscribe to “events” that provide information about the state computing resources. All of the events are represented as eXtensible Mark-up Language (XML) documents. Chains of related events are known as “event streams”. In the real-time event management platform, the event streams are available to all other event-aware computing resources operating in the shared event driven environment. The three main components are a real-time messaging system or handing event messages, a rules engine for allowing specific event message handing rules to be created, and a enterprise directory schema for providing a comprehensive directory of all the available resources and the means in which the resources may be accessed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07454459&OS=07454459&RS=07454459
owner: Jarna, Inc.
number: 07454459
owner_city: Menlo Park
owner_country: US
publication_date: 20020904
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","Real-Time Enterprise Event Management System Overview","Real-Time Event Management Platform","An Example Set of Applications","Personal Information Management","The Mobile Client Device","Adding New Web Services"],"p":["The present U.S. patent application claims priority to the U.S. provisional patent application entitled \u201cMethod and Apparatus for Implementing a Real-Time Event Management Platform\u201d, filed on Sep. 4, 2001 and having Ser. No. 60\/317,372.","The present invention relates to the field of enterprise software. In particular the present invention discloses a real-time event management platform that can be used to join together many different enterprise information systems and extend the enterprise information system to mobile devices in a secure manner.","As enterprises evolve into increasingly distributed organizations they face the increasingly difficult problem of managing numerous distributed data stores, facilitating distributed workgroups and supporting the proliferation of devices within the corporate environment. The solution is a real-time, collaborative messaging fabric that is able to intelligently manage these distributed resources, enabling enterprises to streamline processes and communication.","Presently, the majority of enterprise applications are designed without true real-time, workforce collaboration in mind. Although many vendors claim that their solutions are designed to aid real-time collaboration, these applications often merely provide a shared data store and rarely allow users to work together in a truly real-time integrated manner.","Even when these needs are met, the scope of the possible collaboration is normally restricted to a single application that understands how to communicate with users using the same program. Because of this limited view, these applications are difficult to extend to a distributed enterprise environment. This is especially true of a large enterprise that runs many different and sometime redundant information services due to different entities that have been joined due to mergers and acquisitions. Thus, it would be desirable to have a real-time system that integrates all the computing resources in an enterprise.","A method and apparatus for implementing a real-time event management platform is disclosed. In the following description, for purposes of explanation, specific nomenclature is set forth to provide a thorough understanding of the present invention. However, it will be apparent to one skilled in the art that these specific details are not required in order to practice the present invention. For example, the present invention has been described with reference to the well-known TCP\/IP data communication protocols. However, the same techniques can easily be applied to other types of data communication protocols.","To solve difficult enterprise information management problems, the present invention introduces a distributed event-driven system known as an \u201centerprise event management\u201d (EEM) system. The enterprise event management (EEM) system is created by uniting many different enterprise-computing resources around a real-time event management platform in order to create an integrated real-time event management system.","The enterprise event management (EEM) system requires that individual computing resources (such as groupware servers, databases, directories, etc.) expose their inner workings to the real-time event management platform and be transformed into \u201cevent aware\u201d data sources. The various computing resources then publish and subscribe to \u201cevents\u201d to the real-time event management platform such that the published events provide information about the state computing resources. In a preferred embodiment, all of the events are represented as eXtensible Mark-up Language (XML) documents. Chains of related events are known as \u201cevent streams\u201d. In the real-time event management platform, the event streams are available to all other event-aware computing resources operating in the shared event driven environment.","In addition to event streams, computing resources integrated with the real-time event management platform are also capable of sending individual messages to other computing resources in the enterprise environment. The real-time event management platform intelligently and reliably delivers these messages to the proper destinations. The real-time event management platform uses different transport methods to communicate with the various computing resources as appropriate. The wealth of real-time message and event data enables computing resources to collaborate more rapidly and more intelligently than such computing resources could individually. A computing resource integrated into the real-time event management system is thus defined to be an application that is capable of receiving enterprise events and messages from the real-time event management platform and using these events and messages to be a more efficient problem-solving tool.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["150","150","121","123","129","181","183","187","161","163","151","151"]},"The system of the present invention unites the various different within an enterprise by adding a layer of software as necessary to enable these computing resources to communicate with the real-time event management system . Legacy resources may be integrated with a layer of software that makes such computing resources \u201cevent aware.\u201d Such a layer of software may be referred to as \u201cevent agent\u201d or an \u201cevent connector\u201d since the software layer acts as an agent to handle events for the legacy resource. The various event agent programs used to couple different computing resources to the real-time event management system  will vary depending on the capabilities of the particular computing resource. Each event agent program is designed to provide the best use of its associated computing resource.","Server Systems","Server systems may be coupled to the enterprise event management system  directly or indirectly through a connector program. For example, server system  is connected directly to the enterprise event management system . However, server systems  and  are indirectly coupled to the enterprise event management system .",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["195","187","150","191","191","150","191","195"]},"Similarly, server system  uses an event connector  to connect server system  to the real-time event management system . If server system  has an event-driven application programming interface (API), then the event connector  may just be a bidirectional translator that translates between the event format of the real-time event management system  and the event format of server system . If the server system  does not support an event-driven API, then event connector  may periodically poll server system  to learn about any changes and then generate events from any changes detected. Event aware connectors have been created for Microsoft Exchange Servers, Lotus Notes Servers, Novell GroupWise servers, IMAP-compliant email servers, LDAP compliant Directory servers, Steltor CorporateTime servers, and iCAL compliant calendar servers.","Personal Computer Systems","Personal computer systems may also be coupled directly or indirectly to the enterprise event management system .  illustrates a personal computer system  coupled directly to the enterprise event management system  and personal computer system  coupled indirectly to the enterprise event management system ","To be coupled directly to the enterprise event management system , the personal computer system must be made event aware using an event agent. The event agent in a personal computer system may act as a centralized event distributor for other programs that may use events. Specifically, personal computer  illustrated in  has an event agent  that distributes events to various event aware applications on the personal computer system .","The event aware applications on the person computer system  may be native event applications or legacy applications that use another event aware agent as an intermediary. For example, in personal computer  of  a native chat application  communicates directly with event agent  to send and receive events. Legacy email program  communicates with the event agent  though an email agent  that translates the communication between the legacy email application and the event agent . Similarly, legacy calendar program  communicates with the event agent  though a calendar agent  that translates the communication between the legacy calendar application  and the event agent . Once event  agent has been installed on a personal computer, the personal computer system may run custom event applications such as custom event application .","As previously set forth, a personal computer does not have to have an event agent to participate in the real-time event management system . The personal computer may instead participate indirectly with the real-time event management system . For example, personal computer  may work with server system  using a native client application for server system . However, the changes made to server system  by personal computer  using the native client application will be reflected in the real-time event management system  due to event connector  publishing events caused by the changes.","Mobile Computer Systems","One of the key features of the real-time event management system  is the ability to allow many different types of mobile computer systems to be integrated into the real-time event management system . By creating a platform-neutral standards-based real-time event management system, the present invention allows any new mobile computer system to be quickly integrated into the event management system. Thus, the real-time event management system  provides Information Technology (IT) managers with a choice among the existing mobile computer systems and the ability to adapt to new mobile devices that are later released. The degree of integration of a particular mobile computer system will depend upon the resources of the mobile computer system.","Some very limited computing resources cannot be sufficiently modified to become event aware. For example, a cellular telephone system with a very primitive browser application cannot be made event aware. With such limited systems, a proxy application can be used to integrate such \u201cthin-client\u201d systems into the real-time event management system . For example,  illustrates a thin-client handheld system  that cannot be significantly modified. To support such a thin-client device, a thin-client proxy application  is created to integrate the thin-client handheld system  into the real-time event management system .","The task of integrating limited mobile systems with the real-time event management system  may be split into more than one application running on different systems. This technique works well for mobile systems with limited abilities. For example, limited mobile computer system  may execute a limited event agent  that performs certain event operations. However, due to resource limitations, limited event agent  cannot handle a full range of event messages. To compensate for the limitations of limited event agent , limited event agent  is supported by event application .","The user experience will be provided to mobile computer systems with a good programming environment. In such systems, a full event agent is handles event messages for the mobile computer system.  illustrates mobile computer system  containing a full event agent . Like the event agent  in personal computer , even agent  can send and receive event messages. Similarly, event agent  distributes event messages to event aware applications on the mobile computer system or event connectors that communicate with native applications through their native APIs.","Event Applications","In the traditional approach to solving enterprise Information Technology (IT) problems, a single application is assigned to work on specific problems and processes. The event management system of the present invention provides an alternative approach to finding solutions to these problems by having developers recognize that processes are really part of the greater enterprise framework. In the system of the present invention, the solution to a problem may be found by distributing the problem over a number of different applications and resources within the system. From the perspective of the individual application, it is still trying to achieve its own goal, however the individual application is free to collaborate with other applications and resources in the overall system. Thus, by uniting all the computing resources of an enterprise together with a real-time event management system, new event management applications can be created.","The system of the present invention allows an entity to create any number of event management applications. Each event management application communicates using the message passing features of the real-time event management system .  illustrates custom event management applications  and . Custom event management applications  and  can provide new applications and services that were previously not possible since custom event management applications  and  have access to every other computer resource connected in the real-time event management system .","At the core of the real-time event management system  is the real-time event management platform . All of the different enterprise computing resources communicate directly or indirectly with the real-time event management platform  in order to unite the various computing resources.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 2","FIG. 2"],"b":["210","220","230","240","250","260","270","220","240","210"]},"Enterprise Directory","To allow distributed computing resources to communicate effectively, the various computing resources must have a consistent shared context such that the different computing resources can identify and address each other. With a universally consistent shared context, the various computing resources can generate events that are delivered to the proper interested parties.","To implement universally consistent shared context, real-time event management platform provides the Universal Database Directory (UDBD) \u2014an abstracted data model that is common to all EEM applications running in the corporate environment. EEM applications can use the UDBD  as a shared context in which the EEM applications know all resources of interest can be found. This shared data store can also be used by EEM applications for storing application-specific data that needs to be accessed regardless of location or device. In addition, the UDBD  can be used in an inter-application context by providing a central repository of data that is shared by several applications and users. This central store is one of the key benefits of the EEM platform that allows the development of cross-device, cross-application composite solutions.","Real-Time Messaging System","Event and messaging services in the EEM platform environment are provided by the Real-Time Messaging Service (RTMS) . The RTMS  provides applications with guaranteed delivery for messages as well as event publishing and subscription services. In a preferred embodiment, the RTMS  provides the applications with an ability that allows them to communicate with each other via XML messages without having to worry about the intermediate transports. Various different secure transports are provided by the security system .","The RTMS  is constructed directly on top of the UDBD , allowing EEM platform applications to communicate with each other via the UDBD  abstraction. When an EEM platform application wishes to receive event notifications about a specific resource, the EEM platform application finds the UDBD location that correlates to that particular resource and subscribes to events from that location. As a corollary, when an event on that resource occurs, an application will publish a RTMS event on that same location. The RTMS  will then take care of delivery the event to all the subscribers.","With the aid of the presence management system , the RTMS  has been constructed to be intelligent in terms of message delivery. If a destination device is offline (as detected by the presence management system ), the message will automatically be queued. Message routing is designed to be dynamic and intelligent, with the RTMS  determining, in real-time and on a per-message basis, the device that best represents a resource. This run-time device determination allows the delivery device for a particular resource (whether it be a person or application) to be changed dynamically and in real time. If an EEM platform user is carrying a PalmOS based handheld computer system one day and a Research In Motion (RIM) Blackberry device the next day, all that has to be done is notify the RTMS  of the change. Once this is done, messages destined for that user will be sent to the RIM Blackberry device without having to change anything in the applications themselves.","Determining the physical delivery device at delivery time is especially powerful when coupled with the notion that not all resources in the UDBD  have to be real resources. Locations can instead represent abstract virtual \u2018roles\u2019 within the system. The physical entity that is playing a given role can change at any time, or a role could be played by several physical entities. Arranging resources in this way allows the EEM platform to dynamically adjust, in real-time, to respond to the changing enterprise environment.","Rules Engine","In conjunction with the Real-Time Messaging Service (RTMS) , the present invention provides a Rules Engine . The rules engine  allows the administrator to have complete control over the EEM platform by processing every event message with a set of administrator-defined rules. The rules engine can determine how event messages are routed, what applications should to be activated, and number of other reactions in response to an event message. If a desired reaction to a particular event message is too complicated to create with the rules engine , then the rules engine  can be used to direct that event message to an external event aware application.","In order to route messages to various resources in the enterprise, the rules engine  relies upon the Universal Database Directory (UDBD) . Specifically, the UDBD  provides a comprehensive directory of all the available computing resources and the means in which the computing resources may be accessed.","Presence Management System","Using the Presence Service, EEM platform applications can query in real time for the presence of computing resources within the enterprise. The presence of computing resources is automatically maintained by the RTMS  based on availability of end-devices, and this is all abstracted from the application designers. In conjunction with the EEM platform virtual resource and roles system, presence maintenance becomes a very powerful concept. Applications are able to query the presence of abstract resources within the system without having to worry about which exact entities are playing which exact roles at the moment.","The EEM presence system  allows for a new class of intelligent applications that utilize the availability status of various resources to more efficiently achieve their goals. This is especially powerful since various levels of presence are in fact supported, i.e. a resource might be present at a device level but not present at an application level. Granular control of the presence status of individual resources allows their status within platform to be carefully customized by solution designers.","Security System","The EEM platform has been designed to be extremely easy to integrate into an existing enterprise environment, both in terms of its core technology and in terms of its security model. By default, all EEM platform services and technologies run from behind the corporate firewall on machines in a secure data center. While the EEM platform ideally has a few ports open in the firewall to allow client applications to connect to the EEM platform, the EEM platform does natively support SSL connections to clients, allowing applications to use secure connections into the backend services. If it is not possible to open ports on the firewall, the EEM platform requests can also be sent over HTTPS (a secure version of the well-known HTTP protocol).","The EEM platform is intended to directly interface with the corporate security environment. For example, it is possible to drop the EEM platform into an enterprise that uses Kerberos and have all the EEM platform applications and services use Kerberos tickets for authentication purposes. However, the EEM platform can use almost any scheme for authentication.","Internally EEM platform applications are written to use the authentication systems of the EEM Security System . The EEM Security System  provides an abstracted layer of encryption and authentication interfaces which can be modified from deployment to deployment. Once a user is authenticated to the EEM Security System , the EEM Security System  will take care of taking whatever steps are necessary to authenticate the user to the enterprise environment. If user input is needed to do so (a passphrase or a SecurId for example), then the EEM Security System  will use the RTMS  to acquire the required information. By using the EEM Security System , EEM applications can ensure that very little word need be done to deploy EEM enabled applications in various enterprise environments.","The EEM platform also has separate security and access control list (acl) protection built into the RTMS  and UDBD . The EEM platform protects the UDBD  from unauthorized reads as well as writes and the RTMS  has inhibitors to prevent users sending undesired messages to other locations in the enterprise. When applications are installed onto the EEM platform, the Administrator will grant the appropriate permissions to the application to allow it to perform its work. By granting only limited permissions, the system will be protected from damaging actions performed by malicious or faulty applications.","Groups Engine","The Groups Engine  of the EEM platform enables workflow and workgroup applications by joining related enterprise resources together. Using a group, a node in the UDBD  tree can conceptually represent more than one resource. For example, a group might be a team of users within a corporation or a cluster of distributed data. The notion of a group is one that is built into the EEM platform, however it is up to applications to determine how to logically handle the flow of data for groups. Such applications are known as group-aware applications. These group-aware applications incorporate groups and group members into their logic. For example, a group-aware email server would take any email that is addressed to a group and make sure that each individual member of the group is delivered the message.","The Groups Engine  is a resident application that enables groups to seamlessly incorporate the events produced by its members. When a new member is added to a group, the Groups Engine  automatically subscribes to all events produced by that member. Whenever an event is generated on that member, the Groups Engine  will automatically send the event to all other group members. In this way, the group becomes the sum of the contributions of its members. This abstraction allows applications to treat the group as an entity in its own right. For example, a workflow monitoring application could keep track of different parts of a company in terms of groups and still get feedback about all work as it progresses. Without the Groups Engine , modeling data flow among and between corporate workgroups would require many more individual subscriptions and a great deal of micro-management.","EEM Application Programming Interface (API)","The EEM platform provides an EEM applications programming interface (API)  that provides a development environment that is programming language-independent and platform independent. Communication with the RTMS  and other EEM platform services is done via an XML-based Application programming Interface (API)  using TCP\/IP or HTTP. The XML-based API  provides application developers with a web services interface that supports open standards such as XML-RPC, SOAP, UDDI, WSDL, and J2EE.","This open API allows programmers to choose whichever development language they want. Since there is no required development or deployment environment, EEM platform applications can be created for any computing platform or device. Thus, the EEM platform's interface allows developers to use their favorite development environment such as Visual .NET, JBuilder, IBM's development toolkit, or others to build real-time collaborative applications. Because the component applications of an EEM solution have such flexibility in their development and deployment, EEM platform solutions are effectively \u201cfuture proof\u201d.","The EEM platform allows developers to create a set of event-driven applications that are referred to as \u2018web services\u2019. The developed web services operate on enterprise data provided by EEM-enabled applications. These web services all operate upon the shared directory-based data store known as the UDBD . In addition, the web services use the RTMS  when they need to send or receive data from client EEM applications.","Referring to , the UDBD server , RTMS server , and EEM web services  typically reside in a secure location on-site behind a firewall . The EEM applications and EEM clients  themselves can, of course, operate externally.","The EEM platform provides its functionality via always-on, always-available XML-based web services  that are accessible across the Internet. Whether applications access this functionality through HTTP or TCP\/IP or any other transport, the goal of the EEM platform is to allow applications to push rules, intelligent message routing and message delivery to the platform level. Sophisticated solutions can be developed that contain complex logic at the EEM platform level and only simple application logic at the device level. This is ideal for mobile devices, since current mobile systems typically do not have the computing power necessary to do complex real-time processing.","The EEM platform is designed to easily integrate with past, current and future enterprise data sources. From the perspective of the platform all data sources, whether they be users, applications or data stores, are treated in a similar fashion. They are each given a location in the UDBD  tree on which they can publish events and from which they can retrieve their messages. The message and delivery services are replaceable components of the EEM platform designed to allow XML to be transmitted to and from any device or application. Customizing these services will suffice to allow simple XML communication between a data source and the EEM platform.","Oftentimes, the EEM platform will be responsible for integrating with a legacy data source and extracting the event data needed by other applications. When integrating with a legacy data source, an intelligent EEM connector is written for the data source. This connector is typically fairly simple and is charged with querying the data source for required information and relaying that information to the platform in the form of EEM events and messages. It is also responsible for receiving EEM messages destined for the legacy source and translating it into a form that it can understand. For all intents and purposes, EEM connectors can be considered to be proxies for the data source that they represent.","EEM Transport Services","Typically the EEM runtime services are made accessible to client applications via client-instantiated TCP\/IP connections to web services. To support clients that reside outside of the protected network, this does make it necessary for certain ports to be opened up through the corporate firewall . If this is not possible, or if additional transport protocols are desired, the EEM platform also supports multiple different transport mechanisms using plug-in transport modules.","The details of how each secure transport is implemented are fully contained within the individual plug-in secure transport module. By abstracting secure transport into the EEM platform layer, EEM applications can be made to communicate with a variety of different client devices and systems with no modification of web services application-side code.","As illustrated in , the EEM platform has several different built-in secure transport mechanisms for interfacing with various different computing resources. The EEM platform will automatically select the best secure transport system that is supported by a particular computing resource (such as a mobile client device). Support for different secure transport mechanisms including SMS (Small Message Service), SMTP (Simple Mail Transport Protocol), and TCP\/IP (Transmission Control Protocol\/Internet Protocol) are built into the EEM platform in the form of plug-in secure transport modules. By using plug-in modules, it is simple to add, modify and remove the secure transport modules. A number of the plug-in transport modules will be discussed with reference to  that illustrates SMTP transport , TCP\/IP transport , SMS transport , WML transport , and HTTP Transport .","As previously set forth, it is possible to access the EEM platform functionality as web services through the HTTP protocol using HTTP transport module . The EEM platform provides a messaging interface connector that installs onto any J2EE compliant application server and utilizes the server HTTP listener to provide EEM web services. The connector can be leveraged if browser-based access is required, for security purposes or for any other situation where HTTP is the protocol of choice. Once the connector is installed on the J2EE server, EEM services can also be reached via the EEM Real-Time Messaging System . In the case that the EEM platform has been deployed via a J2EE application server, the EEM platform can use the Java Connector Architecture to communicate with any compatible Enterprise Information System.","To support various markup languages, such as HTML and WML (Wireless Markup Language), the EEM platform provides an XSL-based style-sheet engine that supports such browser-based solutions. When a request comes into the EEM platform from a browser, style-sheets are applied to convert the request from its native markup form to internal EEM platform XML based event messages. These XML-based event messages are then issued to EEM platform web services applications. The results from the web services application are reassembled, sent through another style-sheet, and transmitted back to the browser. Using this system, Web (HTML) and WAP (WML) front-ends can be quickly generated on top of existing solutions by writing only style-sheets and high-level scripts. Thus, Web (HTML) and WAP (WML) browsers can be supported by the EEM platform. As no EEM agent is installed on the WAP devices, security is limited to whatever the native browser supports.","To support more advanced client devices that have access to HTTP, the EEM provides a HTTP transport module . The HTTP transport module  differs from HTML transport in that a device that uses HTTP transport  has a full client device agent. Devices such as the Palm i, the RIM  devices, and the Handspring Treo can be supported with a client device agent that uses the HTTP transport module  for communication between the mobile client device and the EEM platform. The communication mechanism for this solution requires an EEM application residing on a J2EE compliant application server to exchange information with the mobile client device. The application server must be Internet accessible to enable routing of messages between the application server and the mobile client devices. As with other EEM transport modules, all information within the HTTP packets sent and received by the mobile client device contain encrypted and compressed XML event messages.","As new generations of mobile client devices and new wireless networks are introduced, developers will implement new communication systems for these new devices and networks. If the new networks use standard mechanisms (such as TCP\/IP) then the EEM platform will already have native support in the platform layer. Otherwise, a new custom plug-in transport module can be written to allow the EEM applications to reach the new client device over the new network.","For client devices that have extremely limited networking capabilities (such as RIM Blackberry devices) email is sometimes the only accessible transport to the Internet. To help enable these systems, the EEM platform fully supports session-based communication with XML over SMTP email transport with the SMTP transport module . Applications on these devices can send and receive EEM events via the RTMS  system just like any TCP\/IP enabled device would be able to. The EEM SMTP transport module  typically will not interfere with the flow of regular email to and from a client device.","Note that the EEM platform does not provide any external transport services. For example, the secure SMS transport plug-in module will allow secure XML based communication over SMS but does not provide an SMS gateway. Similarly, the SMTP transport allows XML based communication with devices through e-mail, but does not provide an SMTP gateway. Instead, these plug-in modules leverage the existing infrastructure of the enterprise. When installing the EEM platform, the resources of the target enterprise are assessed, and appropriate secure plug-in transport modules are installed to allow EEM applications to take full advantage of them.","The TCP\/IP transport  can be used to support mobile client devices that only support cradle-based synchronization for communication. Cradle-based synchronization enables PalmOS and WindowsCE devices to access email and PIM resources on the corporate network communication. With cradle-synchronized devices such as sync device , the user will place their mobile client device  in a cradle connected to their personal computer  that is connected to the local corporate network via direct network access or VPN. An EEM aware synchronization agent  resides on the personal computer  and provides a secure encrypted connection to the EEM platform through the TCP\/IP transport  for the cradled device. As with all other EEM transport systems, the information exchanged between the client device and the EEM platform across the TCP\/IP transport  will be encrypted at the originating point then decrypted upon receipt by the receiving point.","The EEM aware synchronization agent  is not directly associated with a specific cradle-based mobile client device. In this manner, a user is able to place their cradle-based mobile client device in any EEM-enabled cradle and synchronize the latest modifications to their email and PIM information with their corporate server.","Note that a specific mobile client device may be accessible through more than one network using one of several transport different protocols. The EEM platform is designed to resolve these issues dynamically at run-time. Once a particular client device registers its presence within the EEM platform all messages are sent to that mobile client device using the optimal transport protocol available (wired or wireless).","In today's fast-paced working environment, employees are becoming increasingly mobile. At the same time, more and more information is being placed at their disposal to aid them in maximizing their productivity. These two factors are making it considerably harder to give the employee's the tools they need to manage their personal information. Even when mobile Personal Information Management (PIM) tools are available, they do not always present consistent views of the available data nor do they always act in an intelligent, co-operative fashion.","The EEM platform of the present invention can be used to implement an integrated PIM solution for an enterprise. The PIM solution allows a message to be delivered to any user at any time. The sender of the message does not necessarily have to be another user, the sender could instead be an automated application or a rule. When an instant message is received on a device, the message must be displayed to the user. The method of delivery of the message could be anything, email, SMS, XML or various proprietary protocols.","The PIM solution keeps track of information related to other people who may or may not be in the EEM platform system. Contacts applications are especially useful when they are pervasive\u2014that is the same contacts data can be accessed and updated anywhere, anytime. The PIM solution further allows users to make and view their appointments and schedules. It warns of conflicts and alerts the user when it is coming close to a given event. It also allows users to coordinate in order to find mutually agreeable times to hold joint events.","Using the EEM platform as a tool, it is relatively easy to develop a powerful PIM suite that will meet all the requirements described above.  illustrates one embodiment of an enterprise PIM solution implemented with the EEM platform of the present invention. The overall PIM-solution is made up of a set of individual PIM applications that are in charge of providing functionality in their own specific areas. Specifically,  illustrates an email web service application , a calendar web service application , a directory web service application , and an instant messaging (IM) web service application . Each individual PIM web service application will be discussed individually below.","Email Web Service","One of the most fundamental information applications available today is simple email messaging. Email allows people to communicate detailed information in an asynchronous manner. So important is email that Research In Motion has built a successful business based primarily upon mobile email access with their Blackberry line of products. The EEM platform of the present invention can transform an enterprise email system into an event-driven email system that can be securely adapted to any new network or mobile device that subsequently becomes available.","Referring to , the email web service application  interfaces with the EEM platform  through the Web Services Application Programming Interface (API) . To communicate with the enterprise's existing email infrastructure, one or more email connectors are used.","In the embodiment of , a special Domino email connector  is used to integrate the email web service application  to a Domino email server . As previously set forth, the EEM platform provides a modular approach to authentication services and supports most standard authentication mechanisms required by corporate applications. For Lotus Domino support, there are two application components that comprise the EEM system solution: the main EEM platform  and the Domino connector . To access the Domino server from mobile client device, they user must first use the mobile client device agent application to authenticate themselves to Domino with their native Notes ID and password. The device agent packages the authentication information using a locally stored key, and then transmits the encrypted (3DES, Blowfish, AES) message through the transport service available to the mobile device. The authentication message is then received by the EEM platform  and decrypted using a local key stored for that user. The EEM platform  then uses the Notes ID and password on behalf of the user to authenticate itself before enabling the flow of information between the user's account and their device. The EEM platform  holds the user's password in memory until the EEM platform  expires their authentication. The period that the user's authentication is valid is configurable by the EEM platform administrator. The Domino connector  is based on Note's API's and runs as a Notes server task. The Domino connector  delivers user's events to the EEM system provided the user's authentication information is valid","When possible, it is desirable to implement connectors using well known standards. In , the email web service application  is integrated to a Microsoft Exchange Email Server  and a Cyrus Email server  using an IMAP Email Connector  that uses the well-known standard IMAP email protocol. Newer IMAP servers that support an event-driven model using an \u2018IDLE\u2019 command can be interfaced with an event-drive connector. However, older IMAP implementations are periodically polled.","Once the existing enterprise email systems have been integrated into the EEM platform, the information in those email systems become part of the overall event-driven EEM system. Email messages can trigger rules, routed to multiple destinations, forwarded to a designated agent, etc.","Contacts Web Service","Personal contact information such as sales contacts, vendors, and potential customers are vital information to any enterprise. However, most existing systems do not allow user's to easily share contact information. The EEM platform can be used to implement an enterprise-wide directory system that allows any user to easily share their contacts with any other user.  illustrates a directory web services application  that integrates all the different contacts and directory systems of an enterprise. In such a shared system, if user A wants to share a contact-book with user B, then all that is required is that user A set the permissions of user B to allow user B to view the contact-book. From that point on onwards, that contact-book could be \u2018imported\u2019 as one of user B's contact-books. Thus, updates made by user A to the contact-book would automatically be seen by user B. User B could also set alerts on the contact-book, so that whenever user A updated it, then user B would be notified by email, SMS, or an Instant Message.","In the PIM solution of , the directory web services application  is coupled to a Domino contacts server  through a Domino directory connector . The Domino directory connector  could be a Notes server task as set forth with the Domino Email connector . Directory web services application  is as coupled to a couple of Light-weight Directory Access Protocol (LDAP) directories (LDAP server  and Active Directory ) through an LDAP connector .","The EEM platform directory web services application  may heavily leverage the UDBD  as a data source. Since access to the UDBD  is available via TCP\/IP or HTTP web services, it makes sense to store contact information in the UDBD  as it then becomes pervasive. In addition, the directory structure of the UDBD  is a good tool with which to model contact-books as well as individual contacts. Most of the logic of the directory web services application  is written as an always-running web service similar to the EEM platform core services. Individual contacts applications written for individual devices would connect to the directory web services application  and use XML messages to add, delete and view contacts. Because the XML interface of the directory web services application  is standardized, the same instructions would be issued no matter which device is running the contacts client.","Calendar Web Service","The EEM platform Calendar web services application  can be implemented in a similar fashion to the directory web services application , as it shares many of the same features. The central data repository may also be the UDBD , with all of the EEM platform specific Calendar information stored there.","Calendar connectors have been developed for the various popular Calendaring backend systems. Specifically,  illustrates a Domino calendar connector  connecting to a Domino Calendar server , an Exchange calendar connector  connecting to an Exchange Calendar server , and a Steltor calendar connector  connecting to a Steltor Calendar server . In one embodiment, the EEM platform calendaring web services application could be a wrapper for one of the above calendaring systems, with no calendar logic of its own.","In an environment with a calendar web service application, the EEM platform calendar clients on devices would connect to the calendar web service and issue a request. That request will be issued to the appropriate backend, such as the Steltor calendar , via the RTMS  and the Steltor calendar connector . Once the Steltor calendar  responds, the RTMS  will transport that reply back to the requesting client. In this way, an enterprise can leverage its existing Calendar software investments.","One advantage to using EEM platform is that it can help unify the client view of the Calendar state when multiple systems are in use as in the system of  where three different calendar systems are in use. If some people use Exchange for their calendar while others use Steltor, the single Calendar web services application  serves both sets of people. Only the EEM platform configuration need be changed to route their requests appropriately.","Using the UDBD  to implement the same sharing model as described in the Contacts section, the Calendar web services application  can provide group scheduling logic. While an individual user's schedule will be made up of both shared (group) and personal appointments, all of this is made transparent to anything other than the UDBD . Users will be able to seamlessly create, share, and modify both their own individual commitments as well as those of their teams and groups. To further accelerate the process of establishing multiple-person commitment, the EEM platform alerts, rules and event systems can be leveraged to alert users in real-time whenever their schedules are adjusted by another user.","Instant Messaging Web Service","Instant Messaging (IM) is an application that is easy to implement using the EEM platform since user based messaging is just a subset of the messaging functionality provided by the EEM platform.  illustrates an instant messaging (IM) web services application .","In one embodiment, the IM web services application  could just be a customized thin wrapper for the RTMS . When a message is sent from user A to user B, the IM web services application  would just use the RTMS  to transmit a message from user A's UDBD location to user B's UDBD location. If user B is online, the RTMS  will automatically deliver the instant message regardless of which device user B is using. This device could be a personal computer, a Palm Pilot, an iPAQ handheld, a laptop computer, a RIM Blackberry, or any other client system integrated into the EEM platform. Depending on which client device it is, the instant message might be delivered in via different messaging protocols. For example on a Palm Pilot, a specially written IM client would pick up and display the message. On the RIM Blackberry, the instant message could be sent as an email using the SMTP transport . On a WAP phone, the message would come in as SMS message. The determination of the delivery protocol is handled by the EEM platform  without the IM application itself having to concern itself.","While the intelligent routing of the RTMS  makes a compelling IM client, this is not the only feature of the RTMS  that makes it useful for implementing an IM system. The EEM platform also provides a way for clients to send messages that require responses. The IM web services application  could therefore send an instant message to a user that asks the user to select from a list of responses and reply to the sender. In conjunction with the native group support provided by the EEM platform, the IM web services application  could quickly become a very powerful way of quickly polling teams of users for information and receiving real-time replies.","EEM PIM Solution Advantages","Once the core PIM applications (email web service application , calendar web service application , directory web service application , and IM web service application ) are deployed, they can now be used as building blocks to extend the overall EEM platform PIM solution. Possible collaboration scenarios between these applications include: Calendaring and Instant Messaging; and Calendaring and Contacts and the EEM platform Role System.","By leveraging the functionality of these two services, a more powerful, flexible solution emerges. For example, when User A wants to schedule a meeting with User B then User A can schedule a tentative meeting on her side then send an Instant Message to User B. That instant message will be delivered by the RTMS  and will be routed to User B's client device. If that client device happens to have User B's calendar application running, it can intercept the instant message, determine if User B is able to attend, and automatic reply. If the appointment was accepted, the device will alert user B that he has a new appointment. When the reply instant message is received at User A's device, she will be notified that the appointment was accepted.","If the calendaring instant message is received on User B's client device and there is no calendar software running, the instant message will be displayed by the IM client on the client device. User B will see the instant message indicating that there is a request for an appointment at a certain time and be asked whether he wishes to accept or refuse. User B can make a selection, then send an IM back to User A confirming\/denying the appointment. At the same time, the IM client will send an XML event message back to User B's Calendar server back at the home office, which will commit the appointment on his side.","By combining these applications, a complicated real-time solution can be built that better adjusts to the changing enterprise environment. Say that User A wants to meet with the trader who will be working on a given account on a given day. User A would use the EEM platform calendaring client, but rather than have to look up who that trader actually is, User A can instead schedule her appointment with the EEM platform virtual role of the trader. User A now has an appointment, not with a particular person, but with a virtual EEM platform user. At this time, the calendar web service application  would also dynamically query the contacts database to find out who the trader is currently and display their name and contact information in case User A needs it. It would also co-ordinate with that person's contact application to reserve the appointment time.","Because the appointment made by User A is not against a particular person but instead with a role, that information never has to be hard-wired to that commitment. Instead, if the trader ever changes (for example if the account is handed off, or that salesperson calls in sick) then the role of the trader will be played by another user in the EEM platform. An event will be generated, and with no intervention by User A, her calendar will automatically update itself to display the new trader's contact information. It will also use the RTMS  to automatically contact that person's calendar to make an appointment with them. If desired, User A could set up an alert rule to notify her if this occurs, or she can merely let it happen transparently. Overall though, the combination of contacts, roles and calendaring allows for a much more flexible, dynamic overall solution.","A key feature of the EEM platform is that once enterprise PIM applications have been abstracted into event-driven web services (as done with email web service application , calendar web service application , directory web service application , and IM web service application ), those web services can be easily made available to mobile client devices such as client device  in . The mobile client device may include a dedicated set of client applications for easily interacting with the PIM web services. For example, client device  includes an email client , a calendar client , a contacts client , and an IM client  for interacting with email web service application , calendar web service application , directory web service application , and IM web service application , respectively. Various different client devices can use various different secure transport mechanisms. Mobile client device  uses the secure SMTP transport mechanism .",{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 4","b":["400","410","410","400","410","410","401","400"]},"The device specific agent  communicates with one of the device or protocol specific transport systems of the EEM system. Specifically, a device\/protocol transport module  in the device specific agent  communicates with a matching device\/protocol specific transport mechanism  in the EEM system. The device\/protocol transport module  includes an encryption and decryption module  for maintaining a secure connection across the transport means. The device\/protocol transport module  is responsible for providing a reliable transport means for exchanging XML event messages with the EEM platform.","After the device\/protocol transport module  has received a decrypted an XML event message, the device\/protocol transport module  passes the XML event message to an XML Router . The XML Router  is responsible for routing the message to an appropriate receipt application. In the mobile device  of , there are five different XML connectors (, , , , and ) for receiving XML messages from the XML Router .","The device specific agent  itself may be a recipient of XML messages. Specifically, the device specific agent  includes a device management module  for managing the mobile device . The XML Router  routes special device control XML messages to the device management module  and the device management module  implements the request of those messages.","For example, the EEM administrator may send a device control message to a mobile device instructing it to move to the next set of encryption keys. The device management module  would receive such a message and instruct the encryption and decryption module  to move to the next set of encryption keys.","If the mobile device were lost, the EEM administrator could send an XML control message that would have the device management module  destroy all the client data on the device to prevent an unauthorized finder of the mobile device from accessing confidential information stored on the device. If the device is subsequently retrieved, the administrator can remotely restore the user's information by sending a control message that allows the various client applications to resynchronize with their various corresponding web service applications. For example, the email web service  could synchronize with the email application .","The device management module  can be used to allow the EEM platform administrator to configure a mobile client device. Thus, these management features enable the administrator to remotely reconfigure the device for deployment to another user while the mobile device is in the field. This eliminates any need by the administrator for hands-on access to the device.","Many mobile devices already include good Personal Information Management (PIM) client applications. For example, mobile device  includes a native email application , a native contacts application , and a native calendar application . To leverage such native PIM client applications, small XML connector applications may simply added. The XML connector applications receive the XML event messages from the EEM platform and translate those XML messages into commands for the API of the native applications. In , mobile device  includes three XML connectors , , and  to communicate with the native email API , the native contacts API , and the native calendar API , respectively. Thus, XML connectors , , and  convert the , native contacts application , and native calendar application , respectively, into client applications for the PIM web services applications.","In mobile device , there is no native instant messaging (IM) application. Thus, an instant messaging application  has been created with an associated XML connector  for communicating with the EEM platform. XML connector  may be an integrated part of instant messaging application .","Integrating a New Mobile Client Device","As previously set forth, once the PIM web services have been created, any new mobile device may be added to the EEM platform to support the PIM web services.  illustrates a flow diagram describing how new mobile client device is added to the EEM platform.","First, at step , a transport mechanism is selected for the new mobile client device. One of the existing transport mechanisms such as SMTP, SMS, or HTTP may be selected. However, at step , a decision is made as to whether a new transport system is needed. If a new transport system is needed, then a new transport plug-in module is developed at step  for that new transport mechanism.","Once the transport mechanism has been selected, a transport connector is developed for the new mobile device at step . The new transport connector should include encryption and decryption services in order to support a secure transport system.","Next, at step , an XML event message router is developed for the new mobile client device. The XML event message router receives XML event messages from the transport connector developed in step  and delivers those messages to client applications that run on the new mobile client device. Thus, the XML event message router must be integrated with the inter-process communication systems available from the operating system of the mobile client device.","At step , a client management module is developed for the new client device. The client management module must be able to handle the client management messages that are sent from the EEM administrator.","Finally, at step , the developer integrates the client transport module from step , the XML router from step , and client management module from step  into a client agent for the mobile device. The client agent becomes the extensible platform that can be used to add individual client applications.","At step , a client application is added to the mobile device. A client application may be added by developing an XML connector that integrates an existing native client application into the EEM system or by creating a whole new client application for the mobile device. As set forth in step , step  is repeated to add all the desired client applications to the mobile device.","After developing all the desired client applications for the new mobile client device, the new mobile client device is ready for use with the EEM platform. Thus, at step , the new mobile client device is integrated into the EEM platform. Specifically, a set of rules are created into the rules engine for determining how the EEM platform will use the new mobile client device. For example, the rules engine will be informed as to which transport system should be used when communicating with the new mobile client device.","Email Receiving Example","To fully describe how a mobile client device operates with the EEM platform, a full example of how the EEM platform may forward an enterprise email message to a mobile client device will be provided with reference to , , and the flow diagram of .","Referring to , an email message is received in an enterprise email server at step . This may be the any of the email servers , , or  of . How the system proceeds next will depend on if the connector the email server is event-driven or polled as set forth in step . If the email connector is event-driven, then the connector will immediately learn about the received email message at step  and thus send an XML email event message to the email web service application  as set forth in step . If the email connector is polled, then the connector will eventually poll the email server to learn about the new email message and thus send an XML email event message to the email web service application  as set forth in step .","Once the email web service application  receives the XML email event message, the email web service application  consults the rules for that user at step . If the rules do not specify that the message should be forwarded, then the email web service application  just follows what the rules specify at step . If the rules specify that the message should be forwarded to a mobile client, then the email web service application  proceeds to step  where it packages the email message into an XML event message and sends it to the user's client device.","In the case of a client device such as a RIM Blackberry, the EEM platform automatically packages the XML email event message into an encrypted email message using the SMTP transport  of . The encrypted email message is then emailed to the Blackberry. Thus, assuming the SMTP transport mechanism  will be used for this example, the packaged XML email event message is sent to an enterprise email server (, , or ) at step . The enterprise email server emails the message which will then pass through the wireless transport system used by RIM Blackberry devices in step . Note that although the message is being broadcast on a wireless network, the contents of the message are secure since the message was encrypted by the EEM system back in step .","After being carried by the wireless transport system, the device agent  on the mobile client device  receives the email message. In a RIM Blackberry device, the device agent  intercepts all email messages and handles all XML event messages. If an email message is not an XML event message, then the device agent forwards the standard email message to the email client. At step , the transport module  of the device agent decrypts and decompresses the XML event message and passes the XML event message to the XML router . The XML router  then routes the message appropriately at step . If the XML event message is not an email event message, the XML router  then routes the XML event message appropriately at step . But if the event message is an email event message, then the XML router  routes the XML event message to the designated XML connector  for email event messages.","At step , the XML connector  for XML email event messages handles the XML email event message appropriately. If the XML connector  is working with a native email application, then the XML connector  uses the native email application's API  to deliver the email message to the native email application . This may be performed using standard SMTP or by manipulating the native email applications email storage directly. On current RIM Blackberry models, email messages may be added by directly manipulating the email storage. But in general, it is preferable to use the native client APIs when they are available. For example, on a PocketPC based mobile client device, the XML connector can use an API on the native email clients and calendar clients to \u201cadd mail\u201d or \u201cadd calendar\u201d, respectively.","Thus, the end result of step  is that the native email application receives the email message. At step , the native email application delivers the email message to the user.","Email Sending Example","Sending email from the mobile device is handled in a similar manner. An example of sending an email message from an EEM enabled mobile client device will be described with reference to , , and the flow diagram of .","At step , a user composes and sends an email message on a native email client application such as native email client  in mobile device  of . At step , the XML connector  intercepts the email message and instead formats an XML email event message addressed to the email web service  of . The XML connector  forwards the XML email event message to the device specific agent  on the mobile device .","At step , the device specific agent  encrypts the XML email event message and sends the encrypted XML email event message to the email web service . The device specific agent  uses the device\/protocol transport module  that handles the selected transport mechanism.","In a RIM Blackberry device, the SMTP transport system is used. Thus, the device\/protocol transport module  emails the encrypted XML email event message in an email message addressed to the email web service  using the Blackberry's wireless email system. Thus, in step , the wireless transport system carries the encrypted XML email event message to one of the enterprise email servers (, , or ). At step , the enterprise email server that receives the encrypted XML email event message forwards it to the email web service .","At step , the encrypted XML email event message is received by a redirector in the EEM platform that decrypts and decompresses the XML email event message. Next, at step , the email web service  reformats the XML event message into a normal email message that is addressed to the intended recipient and from the user of the mobile device. The from-address may be the normal enterprise email address of the user or the mobile email address of the user if the user so desires. The email web service  then places a copy of the reformatted email message in the user's sent folder and sends the reformatted (normal) email message at step . Thus, the email web service  may send the reformatted email message to one of the enterprise email servers (, , or ).","At step , the enterprise email server forwards the reformatted email message to the intended recipient. Thus, the email message sent from the mobile device finally ends in the email server of the intended recipient in step .","Many new web services can be added to the enterprise once the EEM has been installed. The types of new web services that may be added are only limited by the imagination of the EEM administrator and developer.  illustrates a flow diagram that describes the steps of implementing a new web service for the EEM platform.","At step , the develop designs an interface for the new event-drive web services application. The interface comprises a set of XML formatted event messages that will be sent from and received by the new web services application. Ideally, the developer will define the interface of the new Web Service following any open standards available such as IMAP, ICAL, LDAP, etc. The web service may further be extended to include additional functionality. If the web service will be based upon a legacy application, the developer may wish to provide support for any additional functionality supported by the base legacy application. The web services interface will form an asynchronous, bi-directional event stream between the application and the EEM Platform.","Next, at step , the developer determines if the new web service will be based upon an existing legacy application. If not, the developer proceeds to step  to develop the web service application. If the new web service will be based up on an existing legacy application, the developer determines if the legacy application publishes events at step . If the legacy web services application publishes events, then the developer creates an XML event message based translator at step . If the legacy web services application does not publish events, then the developer creates an XML event message based polling agent that will poll the legacy application to determine when events occur at step .","Next, the developer develops the web services application at step . A whole range of web services applications may be created to perform any desired task that operates on enterprise events. Once the new web services application is complete, the EEM platform administrator deploys the event translator or polling agent (if there is one) and the new web services application at step . Then, at step , the new web services application is integrated into the existing EEM platform. This step may require changes to the rules engine to allow certain event messages to be delivered to the new web services application.","Finally, if the new web services application is an application that will be used by individual EEM platform users, the developer may design and deploy a corresponding custom client application at step . The custom client application may be integrated into EEM enabled mobile devices such as the mobile device  of  by adding a new application with an appropriate XML connector.","The foregoing has described an enterprise event management platform that provides secure access to a wide variety of mobile devices. It is contemplated that changes and modifications may be made by one of ordinary skill in the art, to the materials and arrangements of elements of the present invention without departing from the scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The objects, features, and advantages of the present invention will be apparent to one skilled in the art, in view of the following detailed description in which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 4","FIG. 3B"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
