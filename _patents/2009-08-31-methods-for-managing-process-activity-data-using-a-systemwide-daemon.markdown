---
title: Methods for managing process activity data using a system-wide daemon
abstract: Techniques for managing process activity statistics using a system-wide daemon are described herein. A power management daemon retrieves process activity status data from a system monitoring file stored within a data processing system, in response to a request received from a session client via an application programming interface (API). The power management daemon is a single system-wide component within the data processing system to provide the process activity status data to a plurality of session clients. The retrieved process activity status data is returned to the client via the API, where the system monitoring file requires a predetermined accessing privilege for accessing. Thus, through the power management daemon, the session client does not have to satisfy the predetermined accessing privilege in order to access the process activity status data stored in the system monitoring file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08307230&OS=08307230&RS=08307230
owner: Red Hat, Inc.
number: 08307230
owner_city: Raleigh
owner_country: US
publication_date: 20090831
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["The present invention relates generally to power management. More particularly, this invention relates to managing process activity data using a system-wide daemon.","When a session or system process is running, a processor (e.g., a central processing unit or CPU) is also running at a higher rate (e.g., 100%), consuming significant power. If some processes go to sleep, then the processor can return back to low frequency and voltage states (e.g., P and C states), which saves significant power (e.g., 50-90%) on laptop, desktop and server computer systems. By monitoring what processes are waking up (and causing the processor to also return to full power mode) over a period of time, one can identify which processes are waking up most frequently and correct such problems as needed in order to reduce power consumption.","Typically, the kernel of an operating system (OS) only exports certain system activities in a file, such as \/proc\/interrupts for kernel interrupts and \/proc\/timer_stats for user space interrupts. When these files are read, new values are calculated and the values are returned to the user space as the number of wakeups associated with a process or kernel identifier (ID).","Unfortunately, the user space tracing has a measurable cost (in power and latency). It requires a user running at a root level (e.g., as a power user or administrator) to enable this tracing functionality, and then disable it when the user has finished monitoring the process wakeup activities. If more than one application enables and disables the logging, then one instance may prevent another instance from working correctly. While this may be acceptable on a single-user system with full root access, it is not suitable for a multi-user workstation.","In the following description, numerous details are set forth to provide a more thorough explanation of the embodiments of the present invention. It will be apparent, however, to one skilled in the art, that embodiments of the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring embodiments of the present invention.","Reference in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification do not necessarily all refer to the same embodiment.","According to certain embodiments of the invention, instead of having only one user space application with a certain accessing privilege such as a root accessing privilege to access the process activity data such as wakeup activity data, a system-wide power management daemon (e.g., as part of an operating system) is maintained and configured to provide an API to allow multiple user space applications to access the process activity data without requiring the applications to have the required root accessing privilege.","By making the process activity statistics available to software developers (and not just administrators with the root password) power-users and developers can become aware of the power \u201ccost\u201d of a process having certain activities (e.g., wakeup activities). Throughout this application, a wakeup activity is utilized as an example of process activities. However, it is not so limited, other types of process activities may also be applied herein.","The user-space and kernel wakeups can be used as a session power management policy input. This would allow tasks to be scheduled only when the computer is idle, or more usefully to warn users and\/or developers when idle applications are performing many wakeups and consuming too much of power. This would also be useful to identify computers that are part of a cluster or part of virtual servers with many idle wakeups, so that tasks may be disabled or moved from one instance from another, or to notify the administrator.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","101","102","103","112","104","104","112","112"]},"Specifically, according to one embodiment, power management daemon  includes a wakeup statistics and\/or profile calculator , a data collector , and a wakeup statistics and\/or profile repository or database .","According to one embodiment, data collector  is configured to access the file  to collect process wakeup data. The data that is collected is the process ID (PID) and the number of wakeups the process has done since it started. The current reading is taken away from the last reading and divided by the poll interval to give a floating point representation of the number of wakeups per second. The current reading is then saved as the \u201clast\u201d reading. If this PID has been started since the last polling interval then it is then processed so the PID is given a more familiar command description (e.g. converting PID 54662 to \u201c\/usr\/bin\/gedit\u201d)\u2014this is only done once and cached as it is quite a computationally expensive operation. The data is also labeled as either \u201cuser space\u201d or \u201ckernel space\u201d using a boolean flag. The process wakeup data may be exported into file  by one or more system monitors  such as a user-space logging unit and\/or a kernel logging unit as part of an operating system. The wakeup statistics\/profile calculator  is configured to compute process wakeup statistics and\/or profile in view of the process wakeup activity data collected by data collector  and store the information in database .","Typically, file  is maintained in a certain location of system  that requires a user\/client to have a certain accessing privilege (e.g., root accessing privilege) in order to access file . For example, in a Linux operating environment, file  may be a part of \/proc\/interrupts and\/or \/proc\/timer_stats files. By using system wide power management daemon  and API , content of file  can be exposed to multiple clients - without requiring clients - to have the required accessing privilege. In addition, by using system wide power management daemon  and API , multiple clients can substantially concurrently access contents of file  as well we data stored in database .","The calculated wakeup statistics and\/or profile data may be used by clients - to determine and\/or present to a user wakeup statistics of one or more processes running within system . Alternatively, such data may also be used by a power manager client (e.g., gnome power manager in a Linux environment) to construct and present more complicated process operating statuses to users, such as, for example, those as shown in , including identifying how many wakeups caused by which processes, etc.","Thus, by having a single daemon controlling the kernel and user space monitoring files (e.g., \/proc\/interrupts and\/or \/proc\/timer_stats files in a Linux environment), there is a single process generating the statistics and enabling\/disabling access to the user space profiling. For example, in a Linux operating environment, power management daemon  may be implemented as a component of a hardware abstract layer (HAL) of an operating system or as a separate daemon such as DeviceKit-power in a Linux operating environment. In addition, the API  allows multiple session clients or users to query the statistics data generated by the power management daemon \u2014applications can easily query for a set of data listing each application and the average wakeups per second (and the type, userspace\/kernelspace) without having to keep a large amount of data and poll the interfaces themselves. This data is ready-formatted to allow easy display to the end user, for instance, displaying the command line string rather than the PID number. without querying the kernel or recalculating the statistics individually. In one embodiment, clients - may work on a cached copy of the data cached by the power management daemon . A user session does not have to have a high accessing privilege such as a \u201croot\u201d privilege to access such data, because the power management daemon  takes care of such a requirement.","In addition, according to one embodiment, power management daemon  may invoke an authentication framework  to control whether a particular client can access the statistics data. The authentication framework  may be part of an operating system. For example, when a session client or client application attempts to access the statistics data, power management daemon  invokes the authentication framework , where the authentication unit  is configured to authenticate the client based on the authentication policies . As a result, power management daemon can prevent a client (e.g., a logged-in user) from accessing the statistics data when such a client should not have a privilege to do so.","Further, according to one embodiment, implementing this control in one central place also has the advantage in which the kernel space and user space logging performed by system monitor  can be enabled only when a client is requesting the statistics data (e.g., based on a command received via API ). As soon as the client stops requesting the data (e.g., based a command received via API ), such a logging can be disabled. That is, the user space and kernel space logging by system monitor  can be enabled and\/or disabled in response to a client request (e.g., on demand manner), which may further reduce power consumption.","According to another embodiment, power management daemon  is configured to keep track the number of clients that are currently requesting the statistics data. For example, power management daemon  utilizes a reference count (not shown) indicating how many clients are currently logged in. Thus, when a new client logs in or starts requesting data via API , the reference count is incremented and similarly, the reference count is decremented when a client logs off or stops requesting data via API . According to one embodiment, the user space and\/or kernel space logging performed by system monitor  is enabled when there is at least one client currently requesting data and the logging is disabled when no more client is currently requesting data. Note some or all of the components as shown in  can be implemented in software, hardware, or a combination of both.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 2","FIG. 1","FIG. 2","FIG. 1","FIG. 1","FIG. 2"],"b":["102","100","202","201","203","205","206","207","103"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3","FIG. 1","FIG. 3"],"b":["300","300","103","301","303","304","305"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4","b":"800"},"The exemplary computer system  includes a processing device , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM), etc.), a static memory  (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device , which communicate with each other via a bus .","Processing device  represents one or more general-purpose processing devices such as a microprocessor, a central processing unit, or the like. More particularly, the processing device may be complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device  may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device  is configured to execute the instructions  for performing the operations and steps discussed herein.","The computer system  may further include a network interface device . The computer system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The data storage device  may include a computer-accessible storage medium  (also known as a machine-readable storage medium or a computer-readable medium) on which is stored one or more sets of instructions or software (e.g., power management daemon ) embodying any one or more of the methodologies or functions described herein. The power management daemon  may also reside, completely or at least partially, within the main memory  and\/or within the processing device  during execution thereof by the computer system , the main memory  and the processing device  also constituting machine-accessible storage media. The power management daemon  may further be transmitted or received over a network via the network interface device .","The computer-readable storage medium  may also be used to store the power management daemon  persistently. While the computer-readable storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201ccomputer-readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The terms \u201ccomputer-readable storage medium\u201d shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term \u201ccomputer-readable storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.","The modules , components and other features described herein can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS, FPGAs, DSPs or similar devices. In addition, the modules  can be implemented as firmware or functional circuitry within hardware devices. Further, the modules  can be implemented in any combination hardware devices and software components.","In the above description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cretrieving\u201d or \u201creturning\u201d or \u201ccomputing\u201d or \u201cenabling\u201d or \u201cdisabling\u201d or \u201cmaintaining\u201d or \u201cincrementing\u201d or \u201cdecrementing\u201d or \u201cinvoking\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable medium. A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium (e.g., read only memory (\u201cROM\u201d), random access memory (\u201cRAM\u201d), magnetic disk storage media, optical storage media, flash memory devices, etc.), a machine (e.g., computer) readable transmission medium (electrical, optical, acoustical or other form of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.)), etc.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method operations. The required structure for a variety of these systems will appear from the description above. In addition, embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.","In the foregoing specification, embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of embodiments of the invention as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings in which like references indicate similar elements.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
