---
title: Methods for blatant auxiliary activation inputs, initial and second individual real-time directions, and personally moving, interactive experiences and presentations
abstract: Methods for implementing auxiliary activation inputs that are blatantly displayed provide productivity boosts without memorization, efficient display utilization one fullscreen at a time, and efficacious use of available device inputs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348488&OS=09348488&RS=09348488
owner: 
number: 09348488
owner_city: 
owner_country: 
publication_date: 20131112
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FEDERALLY SPONSORED RESEARCH","Joint Research Agreement","Computer Program Listing Appendix","BACKGROUND","Prior Art","Advantages","SUMMARY","DRAWINGS","Reference Numerals","DETAILED DESCRIPTION","First Embodiment\u2014FIGS. -","Operation","First Embodiment\u2014FIGS. -","Major Subunits","DETAILED DESCRIPTION","Alternative Embodiments\u2014FIGS. - Initial Individual Real-Time Directions"],"p":["This application claims the benefit of PPA Ser. No. 61\/731,446, filed 2012 Nov. 29 by the present inventor, which is incorporated by reference.","Not Applicable","Not Applicable","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The entire contents of eleven text file attachments are hereby incorporated by reference as if fully set forth herein. The eleven attached text files are listed as follows:",{"@attributes":{"id":"p-0008","num":"0006"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Name","Creation Date","Modification Date","Bytes"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["cueStage.txt","Jul. 16, 1999","Nov. 1, 2012","237,316"]},{"entry":["tdiObjShow.txt","Nov. 20, 2009","Nov. 1, 2012","183,177"]},{"entry":["buildShow.txt","Jan. 13, 2010","Nov. 19, 2012","411,318"]},{"entry":["mkTxoImgs.txt","Dec. 30, 2009","Nov. 1, 2012","6,023"]},{"entry":["chkTxoImg.txt","Apr. 23, 2011","Jun. 12, 2012","1,944"]},{"entry":["hlpFiles.txt","Feb. 17, 2010","Oct. 27, 2012","634,617"]},{"entry":["bldShwSkel.txt","Oct. 31, 2012","Jan. 9, 2013","840,578"]},{"entry":["uuDec.txt","May 21, 2012","May 27, 2012","1,254"]},{"entry":["tgzExt.txt","May 18, 2012","May 27, 2012","1,263"]},{"entry":["txtDebut.txt","Oct. 27, 2012","Oct. 27, 2012","1,501"]},{"entry":["pchFiles.txt","Oct. 10, 2011","Nov. 16, 2012","40,756"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"A method for animating an object with varying motion is proposed in U.S. Pat. No. 7,932,909 to Niles et al. (2011), \u201cby either applying another behavior (such as randomize or ramp) or keyframing the Velocity parameter of the Wind behavior.\u201d However, these processes are not conducive to choreography nor practicable for inexpert users.","Animated objects are programmed to perform specific movements and behaviors and\/or to respond to virtual stimuli, including wind, gravity, sound, and other virtual objects. A sense of satisfaction for a computer animator is limited to how well an animation accomplishes a motion or behavior, or how well an algorithm adapts to given stimuli. A complicated graphical user interface, while versatile, increases a stress level for the animator.","Videos are commonly distributed using internet video or cloud sharing services. However, still photos and sound recordings often provide equal or higher image resolution and audio fidelity for significantly less bandwidth.","Video and audio podcasts or netcasts are commonly recorded and distributed on the internet. Audio netcasts consume much less bandwidth than video netcasts, but are often limited to single \u201ccover art\u201d images. Videos are unrealistic without a sufficient service provider data contract.","Due to recent dramatic cost reductions, many users have large troves of digital photographs and are challenged to efficiently organize, annotate, and present them.","Plain text menus hark back to early computing and monochrome monitors. A user would read a menu, type a number corresponding to a menu selection, confirm the number visually, and press a \u201creturn\u201d key. Plain text menus were around before mice, high-resolution CRTs, (cathode ray tubes), and graphics hardware. They are considered unattractive, uninspiring, inefficient, and inconvenient.","Icon toolbars or ribbons are popular, but are confusing, intimidating, and tiny for a new user. A mouse or other pointing device activates them. They do not convey a hierarchical workflow.","Tabbed notebook widgets allow a user to change contents of a displayed page by clicking on tabs or activating auxiliary key combinations and sequences that have been memorized, (at least partially, such as knowing to include an \u201calt\u201d key, for example). New users may not realize a tab is present or its purpose. Lengths of tab titles are restricted to one or two words. Tabbed notebook widgets do not convey a hierarchical workflow.","Menubars containing drop-down menus are promoted as versatile, convenient, and sophisticated. However, menubars containing drop-down menus and submenus use small font sizes. Usually after a first mouse click opens a menu, dexterous navigation through submenus and another mouse click confirm a choice. A pop-up dialog box may appear, requesting more user input. People with low visual acuity or computer familiarity may start down a wrong drop-down menu path, and not achieve a sought result within an allotted period of time. Menubars containing drop-down menus do not convey a hierarchical workflow.","Some operating systems provide a dedicated menubar that switches drop-down menus depending on which program is active. A user may not realize the menubar is a replacement, because of similar or identical drop-down menu titles. Confusion surfaces if an errant mouse click backgrounds an active program, switching menubars unbeknownst to the user.","Links to a large number of pages and dialog boxes often are conglomerated into one menubar containing drop-down menus. A novice user may become discouraged by a vast multitude of selections, reckoning that a program is for someone more expert. That is, someone who has taken a course, or who has had time to study a manual.","Large menubars containing drop-down menus mandate programmers establish esoteric hot key or shortcut key or auxiliary key combinations to differentiate among a wide range of choices. For example, a \u201cshift\u201d key, \u201ccontrol\u201d key, and \u201cn\u201d key may be indicated to activate a menu selection via keyboard. All three keys may need to be pressed, and in a correct order. Often practicality dictates just a few selections be assigned auxiliary key combinations. As auxiliary key definitions are commonly hidden until a drop-down menu opens, auxiliary key combinations are often memorized before providing a productivity boost.","Selecting a touch screen icon comprises hand-eye coordination, possibly diverting visual attention in a multitasking situation.","Several advantages of one or more aspects are that users, within a broad range of experience levels, are likely to be successful at, and enjoy making, watching, and\/or interacting with, personally moving experiences and presentations.","In accordance with one embodiment, digital displays, audio speakers, and memory devices are manipulated to elicit and record unique real-time directions from individuals via buttons, keyboards, mice, pointing devices, touch sensors, optical sensors, acoustic sensors, motion sensors, and\/or other input devices. In accordance with one embodiment, initial and\/or second individual real-time direction recordings are used to create personally moving experiences and presentations. In accordance with one embodiment, images and text are organized into \u201cthree-dimensional image objects\u201d which move according to initial and\/or second individual real-time direction recordings. Video and\/or audio recordings may play simultaneously. In accordance with one embodiment, second individual real-time directions may further adjust viewing parameters and play additional video and\/or audio recordings. In accordance with one embodiment, shows are exported and imported to and from single, small (i.e. about 100 kilobytes) \u201cexport text files.\u201d They include initial and\/or second individual real-time direction recordings, video recording names, audio recording names, photograph names, databases detailing three-dimensional image object constructions and\/or a text file that may automatically convert into three-dimensional image objects. Export text files facilitate sharing, database management, and back-up.","In accordance with one embodiment, a customization process involves 1) identifying a registration number and unique identification code, 2) submitting the registration number and unique identification code while requesting a particular customization to modify certain default parameters, 3) receiving a customization file which is specific to a unique identification code, 4) receiving a reversion file which is specific to a unique identification code, 5) placing a copy of the customization file (or reversion file) in a designated customization folder, and 6) selecting a \u201ccustomize\u201d button widget menu item.","In accordance with one embodiment, blatant auxiliary activation inputs advantageously speed menu navigation and program operation.","The figures depict one embodiment for purposes of illustration. A person skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.",{"@attributes":{"id":"p-0146","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":[{"@attributes":{"id":"ul0002-0001","num":"0144"},"b":"1"},{"@attributes":{"id":"ul0002-0002","num":"0145"},"b":"2"},{"@attributes":{"id":"ul0002-0003","num":"0146"},"b":"3"},{"@attributes":{"id":"ul0002-0004","num":"0147"},"b":"4"},{"@attributes":{"id":"ul0002-0005","num":"0148"},"b":"5"},{"@attributes":{"id":"ul0002-0006","num":"0149"},"b":"6"},{"@attributes":{"id":"ul0002-0007","num":"0150"},"b":"7"},{"@attributes":{"id":"ul0002-0008","num":"0151"},"b":"8"},{"@attributes":{"id":"ul0002-0009","num":"0152"},"b":"9"},{"@attributes":{"id":"ul0002-0010","num":"0153"},"b":"10"},{"@attributes":{"id":"ul0002-0011","num":"0154"},"b":"11"},{"@attributes":{"id":"ul0002-0012","num":"0155"},"b":"12"},{"@attributes":{"id":"ul0002-0013","num":"0156"},"b":"13"},{"@attributes":{"id":"ul0002-0014","num":"0157"},"b":"14"},{"@attributes":{"id":"ul0002-0015","num":"0158"},"b":"15"},{"@attributes":{"id":"ul0002-0016","num":"0159"},"b":"16"},{"@attributes":{"id":"ul0002-0017","num":"0160"},"b":"17"},{"@attributes":{"id":"ul0002-0018","num":"0161"},"b":"18"},{"@attributes":{"id":"ul0002-0019","num":"0162"},"b":"19"},{"@attributes":{"id":"ul0002-0020","num":"0163"},"b":"20","figref":"FIG. 113A"},{"@attributes":{"id":"ul0002-0021","num":"0164"},"b":"21"},{"@attributes":{"id":"ul0002-0022","num":"0165"},"b":"22","figref":"FIG. 113B"},{"@attributes":{"id":"ul0002-0023","num":"0166"},"b":"23"}]}}}},{"@attributes":{"id":"p-0147","num":"0167"},"figref":"FIG. 1"},"Medley Shows",{"@attributes":{"id":"p-0149","num":"0169"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 2","FIG. 1"]},"Medley Shows\u2014Photo Folder",{"@attributes":{"id":"p-0151","num":"0171"},"figref":["FIG. 3","FIG. 2","FIG. 2"]},"\u201cPHOTO FOLDER (f)\u201d and \u201cDELETE (d)\u201d are button widget menu items. If a folder has been previously chosen by the user, a \u201cCURRENT PHOTO FOLDER NAME:\u201d label indicates its full pathname. If not, or if the delete button is activated, the label and pathname are absent. If a pathname no longer exists, (i.e. from a previously saved show), it is listed along with a bright pink \u201c(MISSING)\u201d label, (not depicted).",{"@attributes":{"id":"p-0153","num":"0173"},"figref":["FIG. 4","FIG. 3"]},"\u201cUSE PHOTOS IN SUBFOLDERS TOO (s)\u201d and \u201cSHUFFLE PHOTOS (1)\u201d of  are \u201ccheckbutton widget selection items.\u201d They are distinguished by the same color and cursor as button widget menu items. Likewise, blatant auxiliary activation keys are indicated in parentheses.  illustrates checkmarks in each, indicating they are both selected. The checkbuttons are independent. If one is activated, its checkmark disappears. If it is activated again, its checkmark reappears. If the subfolders checkbutton is selected, subdirectory image files are also included. Otherwise they are not. If the shuffle checkbutton is selected, image files appear in random order. Otherwise they do not.","An entire ordered show may be created by selecting just a single folder! Photographs from a vacation excursion or other event may be downloaded from a digital camera and viewed in chronological order. Likewise, sequentially numbered images of a multi-page document, story or lesson may be easily displayed in correct order. Of course, such shows would leave the shuffle checkbutton of  unselected.","Medley and Selection Shows\u2014Options",{"@attributes":{"id":"p-0157","num":"0177"},"figref":["FIG. 5","FIG. 2"]},"\u201cNORMAL SHOW (n)\u201d and \u201cSLIDE SHOW (s)\u201d are interrelated checkbutton widget selection items. A checkmark appears by the one that is activated, (however many times), and disappears, if present, from the other. Sets of six three-dimensional image objects are displayed between transitions if the \u201cnormal show\u201d checkbutton is selected. One three-dimensional image object is displayed between transitions if the \u201cslide show\u201d checkbutton is selected. \u201cVIEW TIME (v)\u201d is a button widget menu item that creates a \u201ctext entry widget box,\u201d (not depicted), enabling the user to adjust how much time elapses between transitions.","\u201cON AT START (o),\u201d \u201cNON-PANORAMIC OPTION (p),\u201d \u201cALTERNATE ORIENTATION (a),\u201d and \u201cCUSTOM (FIRST ON LINEUP) (c)\u201d are independent checkbutton widget selection items affecting background scenery for the show. Usually, a show begins with a default background scene turned off. If the \u201con at start\u201d checkbutton is selected, it begins instead with background scenery turned on. If the custom checkbutton is selected, images from an initial three-dimensional image object replace the default background scene. If the non-panoramic checkbutton is selected, right and left images of a background scene are swapped. If the \u201calternate orientation\u201d checkbutton is selected a background scene rotates ninety degrees, moving a top image where a front image normally would be.","\u201cLOW (1),\u201d \u201cMEDIUM (m),\u201d and \u201cHIGH (h)\u201d are interrelated checkbutton widget selection items. If the low checkbutton is selected, regular images are capped at 256\u00d7256 pixels. If the medium checkbutton is selected, regular images are capped at 512\u00d7512 pixels. Regular images are displayed as-is if the high checkbutton is selected. Lower resolutions entail fewer bits and are therefore relatively faster to upload to graphics hardware. They also suffice for shrunken or moving presentations. In addition, during the show, a \u201csecond individual real-time direction\u201d may upgrade an image to high resolution on a one by one basis.","\u201cBOTTOM CORRECTION (b)\u201d is a button widget menu item that creates a text entry widget box, (not depicted), enabling the user to effectively reduce screen length. \u201cRESIZE PHOTOS (NEAREST POWER-OF-2) (r)\u201d is an independent checkbutton widget selection item that, if selected, resizes photos to mollify older, cantankerous hardware.","\u201cCUSTOMIZE (z)\u201d is a button widget menu item that is or is not enabled, depending upon whether or not, respectively, one or more enhancement and\/or reversion files are located in a folder of the buildShow.txt embodiment named, \u201cCustomize.\u201d If disabled, the customize button loses its distinguishing foreground color. Enhancement and reversion files are requested and copies placed in the Customize folder separately by the user. In order to request enhancement and reversion files, the user submits a registration number and unique identification code. Whether the customize button is enabled or not, those numbers appear when the cursor enters the vicinity of the button, as illustrated in .","If the customize button is enabled, it may be activated once for each enhancement and\/or reversion file copied to the Customize folder. Each activation may apply changes to one or more starting variables that stay in effect even after exiting. After each enhancement and\/or reversion file has been processed, it is deleted from the Customize folder, for one embodiment. Alternative embodiments may move the file to a storage or garbage folder. The customize button is disabled after the last file is deleted. The user may inhibit the registration number and unique identification code from appearing, for security and privacy, by removing a specifically-named file from the Customize folder.","Medley and Selection Shows\u2014Voice",{"@attributes":{"id":"p-0165","num":"0185"},"figref":["FIG. 7","FIG. 2","FIG. 9"]},"Medley and Selection Shows\u2014Song",{"@attributes":{"id":"p-0167","num":"0187"},"figref":["FIG. 8","FIG. 2","FIG. 10","FIG. 2"]},"Audio files designated as vocal recordings or songs do not have to adhere to their designations. Both audio files may be vocal recordings, songs, both, or neither. Both files start together, but don't have to play for equal durations. They can musically augment each other, or not. One or both can provide information, commentary, and\/or promotion. Each can represent one end of a two-way communication. One or both can even be video files. By default, video windows will be hidden by the show window. However, by using the customization process or editing strVars.txt, they may be placed in front of the show window and be of specified sizes and locations. If just an audio portion of a video is pertinent, then hiding it is less distracting, for example. Also, when the show window is active, (i.e. inputs are routed to the show since it is the foreground task), second individual real-time direction inputs may be responsive. If a video pretends to interact with objects from medley or selection shows, placing and sizing the show window on top enables the illusion, for example.","Medley and Selection Shows\u2014Choreography",{"@attributes":{"id":"p-0170","num":"0190"},"figref":["FIG. 11","FIG. 2"]},"\u201cNEW DANCE (n)\u201d is a button widget menu item. It creates a bright pink \u201cSTARTING CUE STAGE APPLICATION\u201d label, portrayed in , and plays a sound effect audio file. It also runs a subunit of the buildShow.txt embodiment named, \u201ccueStage.txt,\u201d depicted in . The user operates cueStage.txt to create, modify, or recall an initial individual real-time direction recording, a start delay, and track. When complete, the \u201cSTARTING CUE STAGE APPLICATION\u201d label disappears and the \u201cCURRENT DIRECTED DANCE:\u201d label is updated.","Define and Record Initial Individual Real-Time Directions",{"@attributes":{"id":"p-0173","num":"0193"},"figref":["FIG. 13","FIG. 11"]},"To the left of each cue touch item, is its summary definition or status. For example, \u201cCUE (f)\u201d is predefined to set the group of circle objects rotating clockwise with a \u201c4\/4\u201d time signature at a speed of 10 quarter note beats per minute. \u201cCUE (k)\u201d is predefined to set the group of circle objects rotating counterclockwise with an \u201c8\/8\u201d time signature at a speed of 50 quarter note beats per minute. A predefined flow style, (i.e. legato-comport, legato-overlap, or staccato), is not included in the summary, but is usually immediately apparent from the object motion.","None of the objects move unless rotation is enabled. \u201cROTATE (r)\u201d is a button widget menu item that toggles rotation on and off. If rotation is enabled, the summary that is active exhibits the same bright pink color as the \u201cON STAGE\u201d label. The inactive summaries, and an \u201cIN THE WINGS\u201d label above, appear normally colored. To the left of each summary, are two button widget menu items, \u201cSTYLE \/\u201d and \u201cTEMPO,\u201d used to set the respective rotation style and tempo.  depict drop-down menus that are opened by the buttons. Also discussed below, \u201cLIGHTS (1),\u201d \u201cRESET\/HOLD (2),\u201d \u201cCONCLUDE (3),\u201d \u201cRECALL (4),\u201d and \u201cPLAY (5)\u201d are button widget menu items.",{"@attributes":{"id":"p-0176","num":"0196"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0177","num":"0197"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0178","num":"0198"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0179","num":"0199"},"figref":["FIG. 17","FIG. 18","FIGS. 108-109"]},{"@attributes":{"id":"p-0180","num":"0200"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0181","num":"0201"},"figref":["FIG. 20","FIG. 21"]},{"@attributes":{"id":"p-0182","num":"0202"},"figref":"FIG. 22"},"When activated, the start button removes the red background and turns back into the reset button. Each activation of a cue touch item, lights or rotate button is recorded as an initial individual real-time direction. The first one begins the recording. It also starts playing the audio or video file specified in . The user may activate individual real-time direction inputs with music synchronously and asynchronously, creating audiovisual effects. Using the mouse and\/or activating auxiliary activation inputs with music may be appealing, fun, playful, relaxing, and therapeutic.","Define Name, Start Delay, Track, and Save",{"@attributes":{"id":"p-0185","num":"0205"},"figref":["FIG. 23","FIG. 24"]},"\u201cDELETE,\u201d \u201cCOPY (y),\u201d \u201cRENAME (r)\u201d are button widget menu items that perform the relevant functions on the highlighted title. The delete button does not have a blatant auxiliary activation key to help prevent accidents. Also, it moves the title to a \u201cgarbage\u201d subdirectory, where the most recent hundred versions are stored. \u201cGO LOWER (l),\u201d \u201cGO HIGHER (h),\u201d \u201cSTART DELAY (d),\u201d \u201cTRACK (t),\u201d \u201cSAVE (s),\u201d and \u201cIMPORT (i)\u201d are also button widget menu items. The \u201cgo lower\u201d button, as depicted in , creates a lower level text entry widget box with a highlighted duplicate name. Typing a name and pressing \u201creturn\u201d creates a lower level of that name. The button is not needed for simple navigation. Dropping to an existing lower level is automatic by simply pressing \u201creturn\u201d when the parent level is highlighted in the listbox. The \u201cgo higher\u201d button, as depicted in , navigates back to the parent level. The \u201cstart delay\u201d button creates a text entry widget box, as illustrated in . It allows the user to set a delay for playback of the initial individual real-time directions relative to the start of the show.",{"@attributes":{"id":"p-0187","num":"0207"},"figref":["FIG. 28","FIG. 23"]},"The custom track is drawn by the user after activating \u201cNEW DESIGN (n),\u201d a button widget menu item that opens a full screen page depicted in . A light gray label reads, \u201cUSE MOUSE TO DRAW, ESC KEY TO FINISH.\u201d Moving the mouse with its left button depressed draws curves. Clicking the mouse draws a straight line from where the last click occurred. Arbitrary paths are acceptable. They can even form piquant drawings and writings. When finished, the escape key removes the page and updates the custom track preview of .","A clockwise bearing, as may be chosen by drop-down menu such as in , corresponds to the direction the custom track was actually drawn by the user. That is, unless \u201cREVERSE DRAW DIRECTION (r)\u201d independent checkbutton widget selection item of  is selected. If it is, then clockwise bearing corresponds to the reverse direction.","The save button of  saves the cached initial individual real-time direction recording from . It saves it under the title highlighted in the listbox. In addition, it saves the start delay and track settings, as well as the position coordinates for the four cue touch items of . Finally, it closes the page and enables the play button of .",{"@attributes":{"id":"p-0191","num":"0211"},"figref":["FIG. 30","FIG. 23","FIG. 31"]},"Load Initial Individual Real-Time Direction Recording",{"@attributes":{"id":"p-0193","num":"0213"},"figref":["FIG. 32","FIG. 13","FIG. 23","FIG. 13","FIG. 13","FIG. 13"]},"Play Initial Individual Real-Time Direction Recording",{"@attributes":{"id":"p-0195","num":"0215"},"figref":["FIG. 33","FIG. 13","FIG. 13","FIG. 28","FIGS. 34-36"]},{"@attributes":{"id":"p-0196","num":"0216"},"figref":["FIG. 34","FIG. 33","FIG. 28","FIG. 35","FIG. 34","FIG. 36","FIG. 35","FIG. 28","FIG. 35","FIGS. 34 and 35","FIG. 36"]},"An initial individual real-time direction recording which has been named and saved, or recalled, may be modified and\/or appended. It automatically continues from where it stopped if one of the cue touch items, lights, or rotate button of  is activated. The audio or video recording, specified with the page of , plays from where it stopped. If, after saving or recalling, no individual real-time direction inputs are yet activated, then the style, tempo, and conclude buttons of  may be used to change and save style and tempo definitions for the existing recording. A new title name, start delay, and\/or track may also be chosen. A new audio or video recording may be chosen to play with the initial individual real-time direction recording, using the song button of . Many experiments may be performed to find interesting and\/or aesthetic results!","Medley Shows\u2014Begin Show",{"@attributes":{"id":"p-0199","num":"0219"},"figref":["FIG. 37","FIG. 23","FIG. 38"],"b":"2"},"\u201cDELETE,\u201d \u201cDO NOT SAVE (d),\u201d \u201cLOAD (l),\u201d \u201cBEGIN SHOW (b),\u201d \u201cATTACH EDITS TO SHOW (a),\u201d \u201cIMPORT (i),\u201d and \u201cEXPORT (x)\u201d are also button widget menu items. \u201cEDIT MODE (e)\u201d and \u201cVIEW MODE (v)\u201d are interrelated checkbutton widget selection items. \u201cSAVE OVERWRITES EDITS (o)\u201d is an independent checkbutton widget selection item. The delete button deletes the highlighted show. The delete button does not have a blatant auxiliary activation key to help prevent accidents. Also, it appends the show to a \u201cgarbage\u201d database. The save button creates or overwrites an entry in a medley show database, storing the show's settings. The load button caches the highlighted show's settings allowing the user to modify them for the same or a derivative show.","If \u201cphoto folder,\u201d (e.g. from ), is not specified, then the save and \u201cdo not save\u201d buttons are disabled because a complete show has not been determined. If \u201cphoto folder\u201d is specified prior to  appearing, then the user is reminded to pick a name, (new or existing), and save the show settings as follows: 1) the save, \u201cdo not save,\u201d load, and \u201cbegin show\u201d buttons are disabled. 2) After the user confirms or changes the highlighted name, the save and \u201cdo not save\u201d buttons are enabled, (but load and \u201cbegin show\u201d buttons stay disabled). 3) After either save or \u201cdo not save\u201d is activated, both buttons become disabled and the load and \u201cbegin show\u201d buttons become enabled.","The \u201cbegin show\u201d button starts the highlighted show when activated. Similar to a selection show counterpart, discussed further below, it posts a bright pink \u201cSTARTING 3-D IMAGE OBJECT SHOW APPLICATION\u201d label, depicted in , plays a sound effect audio file, and runs a subunit of the buildShow.txt embodiment named, \u201ctdiObjShow.txt,\u201d (for three-dimensional image object show), portrayed in .","If the \u201cedit mode\u201d checkbutton of  is selected when the \u201cbegin show\u201d button is activated, then, as discussed in more detail below, second individual real-time directions may be recorded as the show plays. When the show finishes, the cached recording may be stored with the highlighted show by activating the \u201cattach edits\u201d button. If the \u201cview mode\u201d checkbutton is selected when the highlighted show starts, the second individual real-time direction recording is played back as part of the show, and most second individual real-time direction inputs are ignored. If a recording is not available, (neither stored nor cached), the \u201cedit mode\u201d checkbutton is automatically selected just before the highlighted show begins. Starting an edit mode show caches a new recording. Starting a \u201cview mode\u201d show caches a previously stored recording, if it exists. If the \u201csave overwrites edits\u201d checkbutton is selected, then the save button also stores the latest cached recording, possibly overwriting a previously stored one.","Medley Shows\u2014Import",{"@attributes":{"id":"p-0205","num":"0225"},"figref":["FIG. 39","FIG. 37","FIG. 41","FIG. 43"]},"If a medley show export text file has a name matching the highlighted show, then it is preselected when  appears. For example, consider that a folder named, \u201cShows,\u201d was recently used, and it contains a show export text file named, \u201cMedley Show 5.bsm.\u201d Then a \u201cCURRENT FOLDER:\u201d label lists \u201cShows\u201d in  and a \u201cCURRENT FILE:\u201d label lists \u201cMedley Show 5.bsm\u201d because the corresponding show is highlighted in . The import button of  adds new entries to the medley show database. It does not overwrite existing entries. If a show export text file contains a medley show with a name that already exists, a suffix is added to the name, (or modified), before it is added to the database. The suffix has the form of \u201c(i),\u201d where \u201ci\u201d is an integer.","\u201cINCLUDE TEXT LIST TOO (o),\u201d \u201cONLY IMPORT TEXT LIST (y),\u201d \u201c\u2018IMPORTED AUDIO\u2019 FOLDER HAS VOCAL RECORDING (v),\u201d \u201c\u2018IMPORTED AUDIO\u2019 FOLDER HAS SONG (s),\u201d and \u201c\u2018IMPORTED PHOTOS\u2019 FOLDER HAS PHOTOS (p)\u201d of  are independent checkbutton widget selection items. As further discussed with selection shows below, a text file named, \u201cTextList.txt,\u201d may reside within a folder of the buildShow.txt embodiment named, \u201cText Folder.\u201d It also may be wrapped within a show export text file. If so, and if the \u201cinclude text list too\u201d checkbutton is selected, then the wrapped text file replaces TextList.txt when the import button is activated. If the \u201conly import text list\u201d checkbutton is selected, then that's what happens. The show database is left unmodified.","Each medley show database entry may refer to, among other things, a vocal recording audio or video file, a song audio or video file, and a photo folder. Although audio and\/or video file and photo folder names are included, the files themselves are not. Music and other media may be promoted without infringing copyrights. The bottom three central checkbuttons of  solve a problem of where to store audio, video and image files transferred from a device with different directories, and referred to by a transferred show export text file. For example, the user may store the show export text file in a folder of the buildShow.txt embodiment named, \u201cShows.\u201d Supporting audio, video, and image files may be stored in folders of the buildShow.txt embodiment named, \u201cImported Audio\u201d and \u201cImported Photos,\u201d respectively. If the \u201c\u2018Imported Audio\u2019 folder has song\u201d checkbutton is selected, then activating the import button will add a modified entry to the show database. Specifically, the directory component of the song audio or video filename is replaced with the \u201cImported Audio\u201d folder. Likewise for the other \u201c\u2018Imported Audio\u2019 folder\u201d checkbutton. If the \u201c\u2018Imported Photos\u2019 folder\u201d checkbutton is selected, the entry is modified by listing the \u201cImported Photos\u201d directory as the photo folder. If a checkbutton is not selected, then the corresponding full, perhaps missing, pathname is entered into the show database as-is.","Each medley show database entry includes a message authentication code generated by the buildShow.txt embodiment. Message authentication codes may advantageously assimilate plain-text user-defined data. If a show export text file is modified, (specifically, its show database entry), without using the buildShow.txt embodiment, then the message authentication code may not verify. If so, the import operation is cancelled, advantageously reducing unexpected device behavior due to transmission or other errors.","Medley Shows\u2014Export",{"@attributes":{"id":"p-0211","num":"0231"},"figref":["FIG. 40","FIG. 37","FIG. 37","FIG. 39","FIGS. 42 and 44","FIG. 37"]},"Show export text files are a good way to backup and share shows. Containing no media content other than, potentially, TextList.txt, they are compact and likely free of copyright restrictions. As text, they may be easily distributed electronically.","Selection Shows",{"@attributes":{"id":"p-0214","num":"0234"},"figref":["FIG. 45","FIG. 1","FIG. 2"]},"Selection Shows\u2014Three-Dimensional Image Objects",{"@attributes":{"id":"p-0216","num":"0236"},"figref":["FIG. 46","FIG. 45"]},"Selection Shows\u2014Creations and Changes",{"@attributes":{"id":"p-0218","num":"0238"},"figref":["FIG. 47","FIG. 46","FIG. 37","FIG. 48"]},"The labels are adjacent to button widget menu items, \u201cFRONT (f),\u201d \u201cRIGHT (r),\u201d \u201cBACK (b),\u201d \u201cLEFT (l),\u201d \u201cTOP (t),\u201d \u201cBOTTOM (m),\u201d \u201cHUE (h),\u201d and \u201cHUE RULE (e).\u201d Other button widget menu items are \u201cDELETE,\u201d \u201cCOPY (c),\u201d \u201cRENAME (a),\u201d and \u201cTEXT LIST (x).\u201d The delete, copy, and rename buttons perform the relevant functions on the highlighted object. The delete button does not have a blatant auxiliary activation key to help prevent accidents. Also, it appends the object to a \u201cgarbage\u201d database. The buttons alongside the listbox and under the name button specify aspects of the highlighted three-dimensional image object. The front, right, back, left, top, and bottom buttons open nearly identical pages, depicted in , to choose images for their respective faces. The \u201chue\u201d button opens a page, portrayed in , for choosing a default tint. The \u201chue rule\u201d button opens a page, illustrated in , for choosing a rule that determines when to use the default or a random tint. The \u201ctext list\u201d button opens a page, pictured in , to view and edit TextList.txt, (see  discussion), and to generate images based on each of its lines.","Many types of three-dimensional image objects may be designed. If side images of a subject are used, then during the show, the subject may give the impression of being frozen inside the object. A panoramic image may be divided and shared among the six sides of an object. Objects may also be made of disparate images that tell a story, instruct, document, inform, entertain, advertise, depict art, etc. Images may be raw or re-touched photographs, artistically rendered artworks, computer generated animations, etc. Any object may be selected to project background scenery for the show.",{"@attributes":{"id":"p-0221","num":"0241"},"figref":["FIG. 49","FIG. 47","FIG. 47","FIG. 50","FIG. 51"]},"On the bottom half of , a listbox widget lists lines from a text file named, \u201cFavoritesList.txt,\u201d residing in a folder of the buildShow.txt embodiment named, \u201cFavorites Folder.\u201d An image file named, \u201cKJDC0201.JPG,\u201d is highlighted. As explained below, full pathnames of images are added to FavoritesList.txt during a show using second individual real-time directions.  portrays a preview of the image found using the highlighted filename. It appears when a \u201cPREVIEW (p)\u201d button widget menu item is activated, (or \u201creturn\u201d key pressed), and disappears when \u201cCLEAR (c)\u201d button widget menu item is activated, (or escape key or up button activated). A bottom \u201cDELETE\u201d button widget menu item removes the highlighted line from FavoritesList.txt and the listbox. Clicking or moving the highlighted line, or previewing its image, before activating the front button, makes it the default highlighted image name in the dialog box of . Double-clicking also opens the dialog box. FavoritesList.txt images may be rapidly previewed, one-after-the-other, by pressing \u201cdown arrow\u201d or \u201cup arrow\u201d key then \u201cp\u201d or \u201creturn\u201d key, on an ongoing basis.","If the front face has no assigned image, then on the top half of , the preview, clear, and delete buttons are disabled. Both top and bottom clear buttons are disabled unless a respective preview image is displayed. If the top clear button is enabled, then except for up and exit buttons, the other buttons are disabled. When the bottom clear button is enabled, the up, exit, and bottom preview buttons are also exclusively enabled.",{"@attributes":{"id":"p-0224","num":"0244"},"figref":["FIG. 53","FIG. 47","FIG. 49","FIG. 47","FIG. 50","FIG. 54","FIGS. 55-58","FIG. 47","FIG. 49","FIG. 47"]},{"@attributes":{"id":"p-0225","num":"0245"},"figref":["FIG. 59","FIG. 47","FIG. 60","FIG. 47"]},{"@attributes":{"id":"p-0226","num":"0246"},"figref":["FIG. 61","FIG. 47","FIG. 47"]},"Selection Shows\u2014Text Objects",{"@attributes":{"id":"p-0228","num":"0248"},"figref":["FIG. 62","FIG. 47","FIG. 63"]},"The \u201cupdate text objects\u201d button converts each line of TextList.txt into an image. The filename for the image of the first line is \u201cTextImage00001.png\u201d and resides in a subfolder of the buildShow.txt embodiment named, \u201cprogram\/tim,\u201d (for TextList.txt images). Filenames for the other lines are similar. Line numbers are used as suffixes. Three-dimensional image objects that have a name beginning with, \u201cText object,\u201d followed by at least one integer, are \u201ctext objects.\u201d They assign one or more of their faces an image made from TextList.txt. For example, as depicted in , the object named, \u201cText object01,\u201d assigns images of the first four lines of TextList.txt to the front, right, back, and left faces, respectively. Of course, three-dimensional image objects that include such images may have different names as well.",{"@attributes":{"id":"p-0230","num":"0250"},"figref":["FIGS. 51 and 54","FIG. 52","FIG. 52"]},{"@attributes":{"id":"p-0231","num":"0251"},"figref":"FIG. 64"},"As discussed with , a TextList.txt file may be wrapped in a show export text file. When importing a show, just the TextList.txt file may be unwrapped. And text object images may then be updated to reflect it. Since it's wise to export shows for use as a backup anyway, many shows based on different TextList.txt files are easily managed. Shows can be used to post or send reminders, greetings, agendas, schedules, announcements, invitations, information, advertisements, affirmations, quotations, messages, to do items, commercials, instructions, lessons, translations, addenda, jokes, etc. When not the main focus, a show can stay resident as a background task.","Selection Shows\u2014Lineup",{"@attributes":{"id":"p-0234","num":"0254"},"figref":["FIG. 65","FIG. 46","FIG. 46","FIG. 66","FIG. 66","FIG. 67"]},"Selection Shows\u2014Begin Show",{"@attributes":{"id":"p-0236","num":"0256"},"figref":["FIG. 68","FIG. 45","FIG. 37","FIG. 65","FIG. 68","FIG. 37"]},"Selection Shows\u2014Import, Export","Similar pages to those of  are depicted in . They appear when button widget menu items of , \u201cIMPORT (i)\u201d and \u201cEXPORT (x),\u201d are activated. Because of the difference in database entries, the export text files for selection shows have a \u201c.bss\u201d extension, (i.e. for buildShow.txt selection). The files also contain three-dimensional image object database entries for the objects in the lineup. Object database entries contain object names, image filenames, hues, and hue rules among other things.","As with \u201c.bsm\u201d export text files and medley show database entries, selection show database entries are not overwritten when importing \u201c.bss\u201d files. A suffix, in the form of \u201c(i),\u201d where i is an integer, is added to a show name from a .bss file, (or modified), if a name collision is imminent.","Three-dimensional image object database entries are also protected. Before importing, if an object database entry from a .bss file has a name that already exists in the object database of the buildShow.txt embodiment, the two are compared. If the objects are identical, there's no need to do any more. If they differ, a suffix is added to the name in the .bss file, (or modified), and the entry is added to the object database. Also, the selection show database entry from the .bss file is updated before being added to the selection show database of the buildShow.txt embodiment. The suffix needs to be added to the object name in the show lineup too, (or modified)!","TextList.txt images, such as those of , are automatically detected. Specifically, image names that begin with \u201cTextImage\u201d and an integer, end with \u201c.png,\u201d and are located in a \u201ctim\u201d subdirectory, are targeted. Object database entries from the .bss file, with TextList.txt images, are modified before being compared to the object database of the buildShow.txt embodiment. The directory components of the TextList.txt image filenames are replaced with the \u201cprogram\/tim\u201d subfolder of the buildShow.txt embodiment. To keep a TextList.txt image permanently, the user may copy it to a different folder. The images may be incorporated into a show for general text annotation purposes.","If the \u201c\u2018Imported Photos\u2019 folder\u201d checkbutton of  is selected, then, object database entries from the .bss file are modified before being compared to the object database of the buildShow.txt embodiment. Directory components of image filenames are replaced with the \u201cImported Photos\u201d folder of the buildShow.txt embodiment.","Each selection show database entry includes a message authentication code generated by the buildShow.txt embodiment. If a show export text file is modified, (specifically, its show database entry), without using the buildShow.txt embodiment, then the message authentication code may not verify. If so, the import operation is cancelled, advantageously reducing unexpected device behavior due to transmission or other errors.","Each three-dimensional image object database entry also includes a message authentication code generated by the buildShow.txt embodiment. The code authenticates the database entry itself, and moreover, the contents of the referenced images. If a relatively small export text file is delivered securely from a trusted source, the images may be transferred in a less secure fashion, yet still be authenticated. Object database entries are not checked when a show imports, but rather, when it starts. If an object does not authenticate, it is pulled from the lineup, but the show goes on! If authentication fails due to a missing or substitute image, a new message authentication code may be easily generated using the page of . Just highlighting the name and reselecting the hue rule, is enough to fix the message authentication code for the object!","Selection Shows\u2014Text Show (Auto-Updated)","The other difference between  is the presence of a show in the listbox named, \u201cText Show (Auto-Updated).\u201d It is highlighted in . Its default lineup, partially depicted in , consists of a long series of text objects. There are no restrictions on the lineup, however. It is the show name that has significance. When the \u201cbegin show\u201d button is pressed with this show highlighted, the timestamp of TextList.txt is compared with that of TextImage00001.png. If the text file is newer than the image, then instead of the selection show actually beginning, the text objects are updated just as if the update button of  were pressed. Although not described earlier, besides new TextList.txt images, fresh text object message authentication codes are also generated. To affirm that revived codes are for text objects, (or at least, objects limited to two colors), a subunit of the buildShow.txt embodiment named, \u201cchkTxoImg.txt,\u201d (for check text object image), may be employed. A feature-reduced version of the buildShow.txt embodiment might not allow creation of new selection show three-dimensional image objects, even though text objects and the default \u201cText Show (Auto-Updated)\u201d are fully implemented. Two bright pink labels, \u201cAUTO-UPDATING TEXT OBJECTS,\u201d and \u201cPLEASE WAIT,\u201d (not depicted), appear, and a sound effect audio file is played. When the update is complete, the labels disappear. And the second time the \u201cbegin show\u201d button is pressed, the show actually begins.","This feature facilitates a quick method for viewing multiple selection shows that use different text objects. Each show is exported with its TextList.txt. To watch the show, 1) import it after selecting the \u201conly import text list\u201d checkbutton. 2) Highlight and run \u201cText Show (Auto-Updated)\u201dto update text objects. 3) Highlight and run the show. Complete text-based selection shows can be shared, using this process, without transferring images! Device storage space is conserved, as text files use fewer bits than corresponding image files.","Tab-Completion Feature","The text entry widget boxes associated with listbox name buttons, including the one for , which would look like the one of , help speed the above process by providing a tab-completion feature. Consider, for example, the listbox contains one name that begins with \u201cTex.\u201d Then just typing, \u201cTex,\u201d and pressing the \u201ctab\u201d key, will cause characters \u201ct Show (Auto-Updated)\u201d to be automatically typed into the box, completing the show name. Most dialog boxes have a similar feature.","Record Second Individual Real-Time Directions with \u201cEdit Mode\u201d","Selecting the \u201cedit mode\u201d checkbutton of , as depicted in , switches on second individual real-time direction inputs during the show. As described below, they may be used synchronously or asynchronously with music, voice, and\/or video to create commercial, educational, entertaining, informative, investigative, and\/or inspiring audiovisual effects.",{"@attributes":{"id":"p-0252","num":"0272"},"figref":["FIG. 72","FIG. 71","FIGS. 7-10"]},"Medley and Selection Shows Illustrated",{"@attributes":{"id":"p-0254","num":"0274"},"figref":["FIGS. 73-94","FIG. 11","FIG. 73","FIG. 11","FIG. 28","FIG. 73","FIG. 33","FIG. 33","FIG. 33","FIG. 73","FIG. 28","FIGS. 34-36","FIGS. 74-76","FIGS. 73-76"]},"Second Individual Real-Time Directions","Objects move as directed by initial individual real-time directions, if the \u201cdirected\u201d checkbutton of  had been specified. When the directions finish, or if, in , the \u201cstandard\u201d checkbutton had been selected instead, the objects move at a specific speed determined by second individual real-time directions. The speed may be increased or decreased by second individual real-time directions. The default speed and adjustment factors may be modified using the customization process or editing strVars.txt.","Whether moving as directed by initial individual real-time directions or not, each object also spins around its own axis or axes, or rotates in-place. By default, each object rotates about its vertical axis. Number of axes, which axes, default in-place rotation speed and adjustment factors may be modified using the customization process or editing strVars.txt. Rate of in-place rotation may be increased or decreased by second individual real-time directions. In-place rotation may be paused and resumed while initial individual real-time directions are underway, (with second individual real-time directions).","In addition to increasing or decreasing object speeds, second individual real-time directions may also change object dimensions. One direction enlarges three-dimensional image objects, and another reduces them. Default object sizes may be modified using the customization process or editing strVars.txt.","Three-dimensional image objects come in sets of six or one, depending upon whether the \u201cnormal show\u201d or \u201cslide show\u201d checkbutton of  is selected, respectively. And the set size for the \u201cnormal show\u201d checkbutton may be changed from six using the customization process or editing strVars.txt. A small number of simultaneously displayed objects advantageously uses fewer graphics processing cycles, screen pixels, and consequent energy for portable devices. A large number of visible objects advantageously presents more information in a compelling, interactive experience.","A show is not limited to just one set of objects. Rather, many sets of objects are permissible. A medley show may be working from a photo folder with hundreds or thousands of images. A selection show may have a similarly long list of object names in its lineup. By default, each set appears for the number of \u201cview time\u201d seconds specified in . However, the user may use second individual real-time directions to transition objects on demand, in forward or reverse, in steps of one to six sets at once. The initial object set may be recalled anytime. During transitions, one embodiment gradually displaces a current object set with another object set before removal.","Full screen edge track has an aesthetic advantage in that three-dimensional image objects may be apparent just beyond the extent of a smaller foreground window, (i.e. from an independent, concurrent application). Text objects, study note images, weekend excursion photographs, and\/or commercial marketing material, for example, may decorate the display while poised to provide productivity boosting reference, inspiration, and\/or distraction. Other object sizes and locations are attainable.","Other show window sizes and locations are possible. Second individual real-time directions allow switching between the full screen show window to a resizable show window. A skinny vertical or squat horizontal show window may fit alongside a window of an independent, concurrent application, for example. If three-dimensional image object sets of just one are displayed in \u201cFace View,\u201d such as when the \u201cslide show\u201d checkbutton of  is selected, images are often distinguishable, even within a small window. Default show window size may be modified using the customization process or editing strVars.txt.","If the user wants to avoid background object movement distractions, and\/or free-up processing cycles, a \u201cfreeze\u201d second individual real-time direction is available. Another direction freezes and hides a show window at once. During any \u201cview mode\u201d show the \u201cpause\u201d second individual real-time direction input issues a freeze direction instead, for one embodiment. A speaker may effectively pause a presentation, (including audio and\/or video playback), for an audience question, then continue.","Using the customization process or editing strVars.txt to mandate slower refresh rates also reduces CPU cycles. Medley and selection shows progress, but in a stilted fashion. Lower refresh rates allow for operation on slower hardware and a wider variety of devices.","Background Scenery",{"@attributes":{"id":"p-0266","num":"0286"},"figref":["FIG. 77","FIG. 73","FIG. 78","FIG. 77","FIG. 77","FIG. 78"]},"Default scenery is stored in a subfolder of the buildShow.txt embodiment named, \u201cprogram\/img,\u201d and is normally absent from a medley show photo folder or a selection show lineup. However, if the custom checkbutton is selected in , images from an initial three-dimensional image object replace the default background scene.  also demonstrates use of a second individual real-time direction to pause object movement, but not virtual perspective changes, (or audio playback). That is, the objects neither translated nor rotated in-place from , while the user activated second individual real-time directions to change virtual perspectives.","Second individual real-time directions provide flight controls to pivot left, right, up, down, clockwise, or counterclockwise and to move forward or backward. Speeds may also be increased or decreased. Default speeds may be modified with the customization process or editing strVars.txt. The user can make a game of flying alongside or through objects. Flying to spots where objects pass very close by provides interesting virtual perspectives.","By default, background scenery turns on automatically after a virtual perspective change beyond a pre-defined distance. This feature may be turned off or adjusted using the customization process or editing strVars.txt. If the \u201con at start\u201d checkbutton of  is selected, scenery appears at show startup. Scenery may be toggled on and off via second individual real-time directions.","A second individual real-time direction saves a virtual perspective to a cached list of views. Each view in the list may be recalled, in forward or reverse sequence, by other directions. The first six views may be accessed in random order. Views may be deleted as well.","Another second individual real-time direction speeds refresh rates on a temporary basis. A background medley or selection show may run at slow refresh rates and reduced processing cycles. Yet, by holding down the right-hand \u201cshift\u201d key while piloting, a full-speed virtual space trip is possible immediately! Throughout 360 degrees of yaw and pitch maneuvering, background scenery may provide a cohesive rendition of a specific location, real or imaginary. Such a break!","Survey View",{"@attributes":{"id":"p-0273","num":"0293"},"figref":"FIGS. 79-86"},"Face View",{"@attributes":{"id":"p-0275","num":"0295"},"figref":["FIGS. 87-94","FIGS. 87-88 and 91-94"]},"Available in Face View, another second individual real-time direction records the name of the image being viewed to FavoritesList.txt.  depict temporary informational messages that appear when the direction is activated for , respectively.  illustrates a preview of  via FavoritesList.txt. The user can use the list, among other things, to remember individual images or to help organize sequences of images.","When a medley or selection show starts, three-dimensional image objects have cube shapes. That is, each image is potentially distorted into a square, with a width:height aspect ratio of 1:1. Another second individual real-time direction alternately corrects the aspect ratio for the image being viewed and reverts it back to 1:1. For effect, other directions intentionally distort the image by increasing or decreasing the aspect ratio. Yet another direction upgrades a low or medium resolution image (as determined by the resolution checkboxes in ) to high resolution.","The previously mentioned second individual real-time directions that pull an object closer or push it farther away still work. Other directions pan up, down, left, and right, which help inspect zoomed in images. Other directions increase or decrease the panning rate. Default panning speed may be modified using the customization process or editing strVars.txt.","A presenter can zoom and pan an image to indicate relevant portions while recording or playing an audio file. Zoom and pan offsets remain constant while viewing different face images. A presenter may display a pristine image, then switch to a marked-up copy and back. The mark-up seems to magically appear and disappear! Close-up differences between original images and filtered and\/or touched-up versions are easy to illustrate. The user may change to Stage View, Survey View, or other virtual perspectives, yet still achieve the prior zoom and pan offsets upon returning to Face View.","The user may display a Face View image, or zoom and pan to display just a portion of it. Zoom and pan effectively crop the image! On a fullscreen window, activating the \u201cfreeze\u201d second individual real-time direction, effectively creates a background, \u201cwallpaper\u201d image. After working on a foreground task, the user can switch back to the buildShow.txt embodiment to view the wallpaper image, free from operating system icons!","Fit Mode, Quick Option","Communication costs may be reduced if images use fewer bits to store their information. For example, many ideas may be conveyed with drawings and text using just two colors. Pixels of such images may correspond to single bits and can use a format named, \u201cTIFF,\u201d (for tag image file format). To be clearly discernible, the high resolution checkbutton of  should be selected. Even then, graphics hardware limitations may cause the buildShow.txt embodiment to discard pixels if an image is too large. The buildShow.txt embodiment therefore automatically detects TIFF images that might be large, black and white documents and implements \u201cFit Mode\u201d for medley shows that had the \u201cslide show\u201d checkbutton of  selected. Normally, Fit Mode breaks a document into top and bottom halves with trimmed margins. It is also available for selection shows. However, in addition to using one bit per pixel tiff images, a redundant image should be assigned to a second face of a three-dimensional image object. When Fit Mode and Face View are both active, a second individual real-time direction turns on \u201cQuick Option.\u201d It instructs the buildShow.txt embodiment to use the front face image for right, back, and left faces too, without halving or margin trimming. Another direction turns Quick Option off. For one embodiment, if Fit Mode and Face View are both active, \u201cq\u201d key turns Quick Option on, while \u201cshift\u201d-then-\u201cq\u201d keys (together) turn Quick Option off.","To make presentations easier to read and more interesting, black and white images may be tinted with a color using the hue and \u201chue rule\u201d checkbuttons of . One bit per pixel TIFF images, that are not assigned a color, but do use white text on a black background, are automatically tinted the distinguishing color of button widget menu items.","Additional Audio and\/or Video Recordings","If a medley or selection show consists of many images, then it may include more than one set of three-dimensional image objects. Transitioning to a new set of objects may add a variable delay, as images are processed and uploaded to graphics hardware. The delay could cause a presentation to become desynchronized with audio recordings chosen in . Two or more transitions increase the chances for desynchronization. Fortunately, each image assigned to a three-dimensional image object has, potentially, its own audio or video recording file which may be played using second individual real-time directions. Each audio or video file may be played as its corresponding image is viewed in Face View, or other times, even in Stage View or Survey View. By using second individual real-time directions that occur after the variable transition delay, the delay is bypassed and the show stays synchronized! If video files are included, video window size and location may be specified, using the customization process or editing strVars.txt.","One embodiment finds image specific audio or video files by matching their names. For example, an audio file named, \u201csunset5.mp3,\u201d matches an image named, \u201csunset5.jpg.\u201d Digital cameras that also record videos often provide an alternative use for their microphones. After a photograph is taken in \u201ccamera mode,\u201d the user may view the image in \u201cplayback mode\u201d and record audio! Names of audio files match their respective images. The buildShow.txt embodiment automatically finds such audio files when the second individual real-time direction is given! Documentary capabilities of digital cameras may be fully realized! Persons who do not wish to have their photographs taken may still grant a request for audio commentary!","After viewing the official presentation with the \u201cview mode\u201d checkbutton of  selected, an audience member may play it again with the \u201cedit mode\u201d checkbutton selected instead. Images of interest may be studied in depth and corresponding audio or video even replayed! New material that was skipped in the official presentation may even be discovered! For example, top and bottom faces may include information, but do not get visited in Face View during the \u201cview mode\u201d show because the jump second individual real-time direction automatically bypasses them. Entire sets of three-dimensional image objects may be passed over, or placed at the end of a show lineup, but not viewed. Promise of hidden extra material generates audience interest and demand for medley and selection shows, whether commercial, educational, or neither! Even audience members without sufficient bandwidth for online videos may enjoy such medley and selection shows!","An advantage of one or more aspects is that the user can skip through material, to get an advanced look. Also, subject matter can be reviewed at different angles, using virtual perspective changes. Persons with attention deficit\/hyperactivity disorder, (ADHD), and\/or other behavioral and\/or emotional conditions may be engaged, intrigued, and\/or feel empowered to learn more efficiently.","Text Objects",{"@attributes":{"id":"p-0290","num":"0310"},"figref":["FIGS. 95-100","FIGS. 47, 62, and 95-98","FIGS. 95-96","FIGS. 51 and 54","FIG. 47","FIGS. 95-98","FIGS. 99-100"]},"Second Individual Real-Time Direction Inputs","Second individual real-time direction inputs are also known as \u201cpostproduction command keys.\u201d A subunit of the buildShow.txt embodiment, a help file named, \u201ccmdKeys.txt,\u201d lists the keys, and is reproduced below. It leaves out Quick Option keys for clarity, (because they apply during Fit Mode and Face View and are less general).","General EDIT MODE (e) Operations:","minus sign, \u201c\u2212\u201d: Stage View: 3-D IMAGE OBJECTS (i) on EDGE (e) or CUSTOM (c) TRACK (t) are all visible","equal sign, \u201c=\u201d or \u201cshift\u201d-then-\u201c=\u201d (together): Survey View: close-up of individual 3-D IMAGE OBJECT (i) rotating in place; switch to next or previous with another press of \u201c=\u201d or \u201cshift\u201d-then-\u201c=\u201d (together), respectively","\u201cf\u201d or \u201cshift\u201d-then-\u201cf\u201d (together): Face View: close-up of individual 3-D IMAGE OBJECT'S (i) face; switch to next or previous face with another press of \u201cf\u201d or \u201cshift\u201d-then-\u201cf\u201d (together), respectively; Face View is a refined version of Survey View (see \u201c=\u201d above); get back to normal version of Survey View through Stage View, (by hitting minus sign, \u201c\u2212\u201d, then equal sign, \u201c=\u201d)","\u201cj\u201d or \u201cshift\u201d-then-\u201cj\u201d (together): Face View: jump to next or previous image, respectively, among all displayed 3-D IMAGE OBJECTS (i); like \u201cf\u201d key, although skip top and bottom faces, and jump to next object when appropriate; autorepeats when held down","\u201c1\u201d to \u201c6\u201d-then-\u201c1\u201d to \u201c6\u201d (consecutively): Face View: punch in <object number>-then-<face number> to view specific image immediately","\u201c1\u201d to \u201c6\u201d-then-\u201cp\u201d-then-\u201c1\u201d to \u201c6\u201d (consecutively): punch in <object number>-then-\u201cp\u201d-then-<face number> to play video or audio track associated with specific image WITHOUT switching to Face View (video or audio file is located in same folder and has same base name as image; e.g. \/Users\/joe\/Pictures\/image3.mp3 for \/Users\/joe\/Pictures\/image3.jpg) (also see \u201cp\u201d in Face View section below)","\u201c1\u201d to \u201c6\u201d-then-\u201cv\u201d (consecutively): punch in <view number>-then-\u201cv\u201d to immediately access the first six user-defined virtual perspectives saved with \u201cs\u201d. (See \u201cs\u201d, \u201cv\u201d, and \u201cd\u201d, below.)","\u201c\/\u201d or \u201cshift\u201d-then-\u201c\/\u201d (together): enlarge or reduce dimensions of all 3-D IMAGE OBJECTS (i), respectively trick for EDGE (e) TRACK (t): make objects translate BEYOND edges: reduce size of objects (hit \u201cshift\u201d-then-\u201c\/\u201d (together) twice), press minus sign, \u201c\u2212\u201d, (placing shrunken objects on edges proper), then restore original size (push \u201c\/\u201d twice)","period, \u201c.\u201d or \u201cshift\u201d-then-\u201c.\u201d (together): increase or decrease in place rotational speed of all 3-D IMAGE OBJECTS (i), respectively","comma, \u201c,\u201d or \u201cshift\u201d-then-\u201c,\u201d (together): increase or decrease translational speed of all 3-D IMAGE OBJECTS (i), respectively, unless they're following DIRECTED (d) CHOREOGRAPHY (c), in which case comma, \u201c,\u201d, will toggle in place rotation on or off (see period, \u201c.\u201d, above)","\u201ck\u201d: view or hide background scenery","zero, \u201c0\u201d: start with beginning set of 3-D IMAGE OBJECTS (i)","\u201cn\u201d: next set of 3-D IMAGE OBJECTS (i)","\u201c1\u201d to \u201c6\u201d-then-\u201cn\u201d (consecutively): skip 1 to 6 sets ahead","\u201cr\u201d: reverse set of 3-D IMAGE OBJECTS (i)","\u201c1\u201d to \u201c6\u201d-then-\u201cr\u201d (consecutively): skip 1 to 6 sets behind","\u201cspace bar\u201d: pause and resume: pause stops the 3-D IMAGE OBJECTS (i), but NOT user-defined virtual perspective changes or audio play (for an EDIT MODE (e) show)! (\u201cspace bar\u201d freezes a VIEW MODE (v) show, see below)","\u201cshift\u201d-then-\u201cspace bar\u201d (together): freeze: halts virtual perspective changes and audio play as well, drastically reducing device resource usage; hit the \u201cspace bar\u201d to unfreeze","\u201cw\u201d: toggle between full screen and resizable windows; resize window by dragging right-bottom corner of screen: place mouse cursor at corner, then press and hold mouse button while moving cursor to obtain specified window size; also works for VIEW MODE (v)","right-hand \u201cshift\u201d: hold down for Fast Mode and improved video refresh rates, (if curtailed by customization to reduce device resource usage); also works for VIEW MODE (v)","\u201ch\u201d: hide screen and freeze; hit \u201ch\u201d again to recover (alternatively, hit \u201cspace bar\u201d to unfreeze and then \u201cw\u201d); also works for VIEW MODE (v)","\u201cesc\u201d: close the 3-D IMAGE OBJECT SHOW; also works for VIEW MODE (v)","User-Defined Virtual Perspective Changes for EDIT MODE (e):","\u201cq\u201d: move forwards","\u201ca\u201d: move backwards","\u201cleft-arrow\u201d: pivot left","\u201cright-arrow\u201d: pivot right","\u201cdown-arrow\u201d: pivot up","\u201cup-arrow\u201d: pivot down","\u201cz\u201d: pivot clockwise","\u201cx\u201d: pivot counterclockwise","\u201ct\u201d or \u201cshift\u201d-then-\u201ct\u201d (together): increase or decrease move speed, respectively","\u201cy\u201d or \u201cshift\u201d-then-\u201cy\u201d (together): increase or decrease pivot speed, respectively","\u201cs\u201d: save the \u201cvirtual perspective\u201d","\u201cv\u201d or \u201cshift\u201d-then-\u201cv\u201d (together): rotate through saved virtual perspectives in forward or reverse order, respectively","\u201cd\u201d: delete the virtual perspective if it has been just displayed (\u201cv\u201d or \u201cshift\u201d-then-\u201cv\u201d (together) was pushed, but no other POSTPRODUCTION COMMAND KEY (p) has been pressed)","Survey View and Face View operations for EDIT MODE (e):","\u201ce\u201d and \u201cshift\u201d-then-\u201ce\u201d (together): extend away from or enlarge, respectively, 3-D IMAGE OBJECT (i); one may zoom-in all the way to opposite side of 3-D IMAGE OBJECT (i), for an unobstructed view!","Face View Operations for EDIT MODE (e):","(Lima), \u201c1\u201d: append current face's photo to Favorites List; press \u201cc\u201d-then-\u201cc\u201d (consecutively) to remove advisory message","arrow keys: pan image in given direction","(India), \u201ci\u201d or \u201cshift\u201d-then-\u201ci\u201d (together): increase or decrease panning rate, respectively","\u201cc\u201d: toggle between a perfect cube and correct aspect ratio for current face's photo; also reset extension distance (if \u201ce\u201d key has been pressed) and off-center offset (if an arrow key has been pressed)","\u201cg\u201d and \u201cshift\u201d-then-\u201cg\u201d: do and undo goof effect","\u201cm\u201d: improve resolution, and correct aspect ratio; also reset extension distance (if \u201ce\u201d key has been pressed) and off-center offset (if an arrow key has been pressed)","\u201cp\u201d: play image's associated video or audio, (i.e. .mp4, .mpg, .mov, .mp3, .wma, .wav or .aif video or audio file with same folder and base name as image; e.g. \/Users\/joe\/Pictures\/image3.mp3 for \/Users\/joe\/Pictures\/image3.jpg) ","Splash Message when Embodiment Closes",{"@attributes":{"id":"p-0341","num":"0361"},"figref":["FIGS. 101-103","FIG. 101","FIG. 102","FIG. 103"]},{"@attributes":{"id":"p-0342","num":"0362"},"figref":"FIG. 104"},"Arrows radiate outwards from the buildShow.txt circle of  to the other circles and ovals, indicating that the buildShow.txt component calls each of the other subunits. One-way arrows from the strVars.txt box to the two lower circles indicate that cueStage.txt and tdiObjShow.txt read the file. They do not modify it. There is no direct arrow from strVars.txt to mkTxoImgs.txt, because buildShow.txt reads strVars.txt and passes the relevant information in its call.","The buildShow.txt component updates strVars.txt. And it does so using the customization process, which entails reading enhancement and\/or reversion files in a folder named, \u201cCustomize.\u201d A box in  entitled \u201cenhanceXXXX.txt\u201d represents an enhancement file. Each \u201cX\u201d stands for a digit. The enhancement file contains new values for one or more starting variables. The reversion file, \u201crevertXXXX.txt,\u201d contains the original default values, in case the user wants to restore them. Both files also contain a unique identification code that should match a calculation by buildShow.txt for a particular installation. If not, the customization process fails. If the file is valid, then the values supplied by each enhancement or reversion file are written to strVars.txt. The files are plaintext for demonstration purposes. An actual deployment would use coded files. A file named, \u201cShowNos.txt,\u201d when present in the Customize folder, enables the user to display a registration number and the unique identification code, (see ). These numbers should be included when requesting enhancement and reversion files.","Text Objects",{"@attributes":{"id":"p-0346","num":"0366"},"figref":["FIG. 105","FIGS. 62 and 64","FIG. 68"]},"Arrows indicate that when mkTxoImgs.txt is called by buildShow.txt, it reads TextList.txt and creates the images in the \u201cprogram\/tim\u201d subfolder. Bidirectional arrows indicate that buildShow.txt both reads and writes TextList.txt, (see ), and a file named, \u201ctdiObjectDb.txt,\u201d (for three-dimensional image object database), (see ). The latter file, as discussed with , stores the database for three-dimensional image objects used in selection shows. Portions of two object database entries are shown. The object names are, \u201cTodo object01,\u201d and \u201cTodo object06.\u201d Image filenames for front, right, back, and left faces of the first object match those in . For simplicity, just filenames are shown. Actual database entries contain full pathnames, such as depicted by the \u201cCURRENT CHOICE:\u201d label in , \u201c\/Users\/kjacobi\/buildShow\/program\/tim\/TextImage00001.png.\u201d Each time an image filename, a hue, or a hue rule is changed using the page of , the corresponding object database entry inside tdiObjectDb.txt is automatically updated.","Databases, Tdiobjshow.Txt Caches",{"@attributes":{"id":"p-0349","num":"0369"},"figref":"FIG. 106"},"In addition to tdiObjectDb.txt, bidirectional arrows in  indicate that buildShow.txt also reads and writes medleyDb.txt and selectDb.txt. Each time a save button on a \u201cbegin show\u201d page is activated, a show database entry is added or updated within the corresponding database file, (see ).","A bidirectional arrow indicates the lower tdiObjectDb.txt is generated by tdiObjShow.txt. For a medley show, when the \u201cbegin show\u201d button of  is activated, buildShow.txt passes a single entry from the medleyDb.txt file. The medley show database entry contains a photo folder, and tdiObjShow.txt figures out how to make three-dimensional image objects by itself. As mentioned with , medley shows use temporary object databases; tdiObjShow.txt deletes the lower tdiObjectDb.txt upon show close.","In contrast, when the \u201cbegin show\u201d button of  is activated, and buildShow.txt passes a single entry from selectDb.txt, it contains a lineup of objects that are specified by the upper tdiObjectDb.txt. Hence, as a unidirectional arrow indicates, tdiObjShow.txt reads the object database to present a selection show. It creates tdiMinDb.txt, picking out object entries named on the lineup. If the user has created many objects for selection shows, then tdiMinDb.txt may contain significantly fewer object database entries than tdiObjectDb.txt. As such it may be faster to read when transitioning between object sets during a show. The tdiObjShow.txt subunit deletes tdiMinDb.txt upon show close.","There are other uses for tdiMinDb.txt. For example, tdiObjShow.txt contains within itself, a single three-dimensional image object database entry for the default scenery. That object database entry is the first one listed in tdiMinDb.txt, if the custom scenery option, as discussed with , is not selected. For this reason, and for consistency with selection shows, tdiMinDb.txt is created for medley shows as well. Additionally, buildShow.txt may request tdiObjShow.txt make a tdiMinDb.txt for wrapping into a selection show export text file. Such tdiMinDb.txt files also do not include the default scenery.","Another difference between the two tdiObjectDb.txt files is that they use incompatible message authentication codes. Hence, if a temporary three-dimensional image object database entry from a medley show is subverted and manually copied from one tdiObjectDb.txt file to the other, it will not verify. And tdiObjShow.txt will automatically pull it from a selection show lineup. This mechanism would help sustain a feature-reduced version of the buildShow.txt embodiment, which might not allow creation of new selection show three-dimensional image objects, even though medley shows are fully implemented.","When a medley or selection show is started with the \u201cedit mode\u201d checkbutton in  selected, second individual real-time directions are recorded as the show progresses. Upon show close, they are written to psc_1.txt. As discussed just after introducing , virtual perspectives may be saved using a second individual real-time direction. The list of views is stored within psc_2.txt. When the \u201cattach edits to show\u201d button is activated on pages 37 or 68, buildShow.txt copies these cache files to separate medley or selection show subfolders. The \u201cpsc\u201d is changed to the show name, but the \u201c_1.txt\u201d and \u201c_2.txt\u201d are kept. The cache files are similarly copied if the save button is pressed when the \u201csave overwrites edits\u201d checkbutton is selected. When a medley or selection show is started with the \u201cview mode\u201d checkbutton in  selected, second individual real-time directions are replayed. The stored subfolder files, if they exist, are copied back to psc_1.txt and psc_2.txt, potentially overwriting a previous set. The second individual real-time directions from the psc_1.txt file are replayed during the show.","Cuestage.Txt Caches",{"@attributes":{"id":"p-0357","num":"0377"},"figref":["FIG. 107","FIG. 13","FIG. 23","FIG. 28","FIG. 29","FIG. 23","FIG. 23"]},"The initial individual real-time directions are written in native format to cue_1.txt, and, in tdiObjShow.txt formats, to cue_3.txt and cue_5.txt. The coordinates for the cue touch widgets in  are stored in cue_2.txt. When the recall button in  is activated, the stored subfolder files, if they exist, are copied back to the cue_1.txt through cue_5.txt files.","The initial individual real-time directions from cue_1.txt are replayed by cueStage.txt when the play button on  is activated. For simplicity, the arrows in  point from cue_3.txt through cue_5.txt to tdiObjShow.txt. In fact, tdiObjShow.txt reads the corresponding stored subfolder files directly to replay initial individual real-time directions during a show.","Musical Paths","Music is written in measures or bars of notes. Notes lasting one quarter of a bar are referred to as quarter notes. Eighth notes and sixteenth notes are sometimes referred to as \u201cquavers\u201d and \u201csemiquavers.\u201d In general, many compositions rely on sixteenth and longer notes to establish an overall melody, giving rise to musical meters or time signatures defined in terms of quarter or eighth notes. For example, 4\/4 time, 3\/4 time, 2\/4, 3\/8 and 12\/8 times are usual time signatures.","Just as a bar of music is broken into eighth, quarter, half, etc. notes, a finite length path is, for one embodiment, separated into eighth, quarter, half, etc. segments. Just as a musical tempo specifies a number of quarter notes per minute, a motion tempo of an object along a finite path is, for one embodiment, specified by a number of quarter segments per minute. Similarly, just as notes are played with staccato or legato styles, objects, for one embodiment, jump instantaneously or flow smoothly from segment to segment. Furthermore, just as legato style notes may contain accents, object motions, for one embodiment, contain smooth flowing, yet contrasting, phase one and phase two speeds along each segment. Several advantages of one or more aspects are methods that accomplish these mappings.","Segment examples 1-5 in , illustrate whole, half, quarter, eighth, and sixteenth segments, respectively, of a straight line path. A given object may traverse each path from start to finish in identical amounts of time for a given tempo, although with different styles. For staccato flow, a time interval between jumps is inversely proportional to total segments. For legato flow, each segment may have a fast and a slow phase, which distinguishes each segment example. For one embodiment, legato flow assigns a faster phase first and a slower phase second, and each phase lasts a same duration. Motion speed of the faster phase is quadruple that of the slower phase, leading to four-fifths of a segment length for phase one, and a remaining one-fifth for phase two. , example 6, illustrates eighth segments, each broken into phases one and two, from left to right, for one embodiment.","Segment length, as a fraction of path length, is indicated, for one embodiment, by a denominator in a musical time signature. For example, as in , 5\/4 and 7\/4 time signatures establish quarter segments, whereas 5\/8 and 7\/8 time signatures portend eighth segments. A total number of segments to be traversed for each path is indicated by a numerator in a musical time signature, for one embodiment. For example, as in , 4\/4 time indicates an object will traverse four quarter segments, while 3\/4 time signifies an object will traverse three quarter segments before returning to a starting point.","Equations 7-17 in  demonstrate how cueStage.txt deals with some of these concepts quantitatively. Variables \u201cxi\u201d 8 and \u201ckappa\u201d 9 are read from the strVars.txt file (see cueStage.txt, lines , ). They represent choices for exactly how each beat is divided into fast and slow phases. The xi variable 8 designates how long the faster phase persists versus the duration of the slower. The kappa variable 9 controls the speed of the faster phase relative to that of the slower. A beat, incorporating both phases in either order, is set by a time signature 10. That is, each cycle or total length of a path is divided into a number of equal counts determined by the denominator of the time signature. Variable \u201ciposArcPerBeat\u201d 11 stores how many \u201cinterpositions\u201d or indices the beat covers. It represents arcs of a circle or segments of an arbitrary path, (see cueStage.txt, line , where, for one embodiment, 256 total interpositions are used). Given xi 8, kappa 9, and iposArcPerBeat 11, one embodiment determines how many interpositions are allocated to each phase. Variable \u201ciposArcPerPhsFast\u201d 16 gives interpositions for the fast phase. Variable \u201ciposArcPerPhsSlow\u201d 17 yields interposition count for the slow phase (see cueStage.txt, lines , ). One embodiment uses the faster phase for phase 1 and the slower phase for phase 2. However, a different embodiment could use the slower phase first.","Positions, Interpositions, and Indices","As implied by equations 7-17 in , interpositions form a skeletal basis for a path. Objects on the path are located with respect to such interpositions. For a given path, possible object quantities and spacings are numerous. One embodiment defines a sixteenth interposition as a \u201cposition,\u201d indicating it may be used as a reference point to locate an object, (i.e. in the reset state, before any movement). As one embodiment employs 256 interpositions, a total of sixteen objects may be accommodated per path. For example,  depict sixteen positions along circular and custom paths, respectively. Position 0 is on top of the circle in , while position 4 is on the right.","\u201cInterpositions\u201d are formally indices between positions, although they are often referred to interchangeably with \u201cindices.\u201d For one embodiment, positions range from 0 to 15, interpositions from 0 to 15, and indices from 0 to 255. For a given position and interposition combination, a corresponding index equates to sixteen times the position plus the interposition, (i.e. index=16*position+interposition). The converse conversion is also straightforward. For a given index, the position is the truncated integer result after dividing by 16, (i.e. position=int(index\/16)). The interposition is the remainder after subtracting the nearest multiple of 16 from the index, (i.e. interposition=(index modulo 16)=index % 16=mod(index, 16)).","Coordinates for interpositions on a circular path are determined, for one embodiment, using sine and cosine functions. A one-to-one correspondence exists between each interposition coordinate and an angle that is some multiple of twice pi divided by 256. Coordinates from the sine and cosine functions may be uniformly scaled by a radius and offset, to size and locate the circular path, respectively, for one embodiment. That is, one embodiment uses cosine and sine functions to create a set of parametric equations. Other embodiments can use other functions to form parametric equations for other paths. Other embodiments may scale and offset coordinates nonuniformly. Other embodiments may include a z-coordinate to define three-dimensional paths.","Index Coordinates for Custom Paths","An advantage of one or more aspects is a process for quickly determining interpositions of a custom path. A flowchart in  elucidates such a procedure, for one embodiment. A simple example demonstrating two cycles of the flowchart is depicted graphically in , and quantitatively in . As discussed below, one embodiment obtains a more uniform interposition distribution using two rounds. That is, the fifth segment of  is closer in length to segments one through four than the final segment of  is to its counterparts.",{"@attributes":{"id":"p-0372","num":"0392"},"figref":["FIG. 113A","FIG. 113B","FIGS. 114A-114B","FIG. 113C","FIG. 113A","FIG. 113B","FIGS. 114C-114D"]},"Final segment lengths in  are shorter than their counterparts. This discrepancy is due to decision step 5 of the flowchart in . If a point defining a path represents too fine a detail, it is ignored. That is, if the additional distance added by the point does not bring the total span up to or over the threshold for adding a new index, then it is ignored and the next point on the path is examined by looping back to step 4. Likewise, any remaining gap, after including one or more segments, is also disregarded. Hence, \u201ctoo fine a detail\u201d equates to an extent less than the interposition segment length, \u201ctrkIpsLength.\u201d","This effect is often negligible, merely smoothing out jittered curves. However, a path could have many intricate details such as small curlicues. They might be replaced with straight line segments during the  indexing process, leading to a much smaller track length than originally calculated. Such a case might read all coordinates via step 4 before indices have been fully placed. All unplaced indices would then be assigned to the endpoint, by way of step 9.","It is instructive to consider how such an index distribution might affect object motion. Consider that a particular style, tempo, and phase determine how fast objects move from index to index. Where indices are uniformly spaced, objects move as calculated, but are stuck in place when \u201cmoving\u201d between indices assigned to the same spot on the track. That is, objects move normally along the beginning of the path, halt at the end, then continue normally again from the start point. Likewise, when indices are closer than the average interposition segment length, objects move slower between them; when farther apart, they move faster.","One embodiment uses the track length of a first estimate to quickly make a second estimate with a more uniform index distribution. Other embodiments may use additional rounds. Other embodiments may use a different procedure to create a nonuniform index distribution. That is, a same number of indices may be used, but spaced closer together, to portray detail, and farther apart, along straighter lengths. Objects would then move slower through detailed areas of the path, and faster along straight sections. Other embodiments could allow the user to choose between such processes. Additional interrelated checkbutton options could be affixed to the track page of , for example. To maintain accuracy through multiple trials, the original track would be stored in addition to the indexed track.","Another embodiment could impose equal interposition segment lengths, and place index coordinates on the original track. The difference, in the  example, would appear after the third index point, (x2, y2). Instead of following a trajectory directly to the endpoint, the third interposition segment could be swiveled up until (x3, y3) intersected the original path, (portrayed separately in ). Successive interposition segments would then use the trajectory of the original path to the endpoint. The third segment would still approximate some detail. That is, instead of two legs of a triangle connecting (x2, y2) and (x3, y3), reflecting the original path, the third segment would represent the base of the triangle. The third segment would therefore represent a reduction in track length. A second round through the procedure, using the track length from the first round, would decrease interposition segment length discrepancies near the endpoint. Other embodiments could use additional rounds. Other embodiments could allow the user to choose a process. Additional interrelated checkbutton options could be affixed to the track page of , for example. To maintain accuracy through multiple trials, the original track would be stored in addition to the indexed track.","At least two procedures could be used to find the point where (x3, y3) would intersect the original track. The first involves writing equations for a circle, representing the swiveling third segment, and a line, for the  segment. Solving the two equations for the two unknowns, x and y, leads to the intersection coordinates. Since a line may intersect a circle twice, the lower intersection coordinate should be selected, for the example. A second process would assign an initial slope, such as zero, to the third segment. After finding the intersection point and evaluating the resultant length for the third segment, a new slope would be calculated and the steps iterated until the intersection point that gives the specified segment length is found.","Another embodiment may use more interpositions to reduce the relative interposition segment length, automatically improving tracing accuracy and allowing more detail. That is, equations 21 and 23 in  indicate that a larger number of interpositions reduces the interposition segment length, trkIpsLength. For example, if eleven indices were used instead of six, then equation 21 result would be 1.0 instead of 2.0. Instead of just two interposition segments fitting between the start and mid points of the  path, as in , five would fit. Five would also fit between the mid and end points. And the first round path would exactly match the  path! Even if the match were not exact, it would still be closer than what was achieved with six interpositions.","Other embodiments could allow the user to directly set an index quantity for delineating a path used for replay. For example, a button option, similar to the start delay button on the conclude page of , could be provided on the track page of . Because the total replay path length would still correspond to a single cycle of the circular path of , used to record initial individual real-time directions, object speed would not be affected by the chosen number of interpositions. For a given tempo, objects would still speed-up to cover more distance for a longer track. To maintain accuracy through multiple trials, the original track would be stored in addition to the indexed track.","Other embodiments could allow the user to decide how many cycles of the circular recording path of  correspond to a replay path, simultaneously increasing the number of indices with each cycle. A button on the track page of  could be employed. For example, one embodiment uses 256 indices for all paths. However, just as a song is written or performed, note by note, bar by bar, so too are initial individual real-time directions recorded. That is, the circular track, visually depicting the flow of each beat through one bar, provides a good recording gauge. Once a recording is complete, an embodiment could map multiple cycles of the circular track onto a replay track, just as a song consists of numerous bars of notes.","Each section of replay track corresponding to a cycle could add another 256 indices. A greater number of cycles would increase the number of indices. And a larger count of indices would lead to a smaller interposition segment length and a correspondingly lower speed. Hence, such an option could be used to adjust both replay track resolution and object speed. To maintain accuracy through multiple trials, the original track would be stored in addition to the indexed track.","As noted before discussing , slower refresh rates reduce device resource usage. Another approach is to neglect performing interpolation calculations. That is, objects move from index to index on a given schedule. If a display updates faster than the schedule, or is refreshed asynchronously to it, objects may be placed between indices, by interpolation. Device resource usage may be reduced by not interpolating between indices. A larger number of indices, leading to finer-grained indexed paths, could improve flow appearance for such cases, depending on style, tempo, and track distance.","Standard Edge Track","As discussed after introducing , the user may change both three-dimensional image object and show window sizes using second individual real-time directions.  illustrates how one embodiment determines position coordinates for the standard edge track. One embodiment places five positions along each edge of the show window. Thirty percent spacing is included in cube width and height, cw and ch, respectively, for one embodiment.  depicts sixteen possible three-dimensional image objects occupying the standard edge track, for one embodiment.  portrays the same track, filled by objects in positions 0, 2, 4, 6, 8, and 10, as implemented when the \u201cnormal show\u201d checkbutton is selected in , for one embodiment. Note that horizontal and vertical interposition segment lengths may not be identical. When the width of a show window is greater than its height, and objects are actual cubes, with equal widths and heights, objects travel faster along the top and bottom than the vertical sides, due to relatively longer interposition segments. Other embodiments could employ different schemes to figure distances between positions.","Buildshow.Txt","Programming languages Tcl, (for tool command language), with its Tk, (for tool kit), extension and Wish, (for windowing shell) application, and Python, with its Tkinter and Pygame modules, (among others), are concise languages for illustrating concepts associated with the buildShow.txt embodiment.","When opening buildShow.txt, a Python interpreter loads a class, named \u201cShwBuild,\u201d and its methods, until line . Then it analyzes its invocatory line, (i.e. \u201ccommand line\u201d), to determine its program directory, \u201cproDir.\u201d From there, it initializes other variables for files and directories expected to exist relative to proDir. After determining which operating system is running, from lines  to , it reads and analyzes a configuration file named, \u201cconfig.txt,\u201d from lines  to . Variables containing full pathnames of Python, Wish, and Mplayer applications are set.","Lines  to  create \u201cbldKey,\u201d (for buildShow.txt key), used to generate message authentication codes for medley show, selection show, and three-dimensional image object database entries. Lines  to  define \u201cuidKey,\u201d which helps determine a unique identification code, \u201cself.uidCode,\u201d for the local installation of the buildShow.txt embodiment. A constant, named \u201cUIDLINE,\u201d on line , indicates which line of strVars.txt self.uidCode should be placed during the customization process. Default strVars.txt files yield, \u201cFACTORY DEFAULT,\u201d on UIDLINE until it is customized.","Line  instantiates a Tkinter toplevel widget. Line  instantiates a ShwBuild object, including running method, \u201c_init_( ),\u201d specified on lines  to . Line  starts an event loop, allowing widgets to respond as programmed.","Reading Default Values from Strvars.Txt","Lines  to  of the _init_( ) method establish variables. Lines  to  read strVars.txt, as depicted in , and create more variables. Lines  to  implement default values if strVars.txt yields fewer lines than expected. Lines  to  set up window sizes and fonts. Lines  to  read a registration number from a file named, \u201cregNum.txt,\u201d and place it in a variable named, \u201cself.regNum.\u201d Lines  to  generate self.uidCode. Lines  to  verify registration number and strVars.txt. Line  adds self.uidCode to self.regNum on a second line. Lines  to  generate the page of .","Blatant Auxiliary Activation Inputs","Lines  to  define a method called, \u201cexitCmd( ),\u201d which is called to establish the exit button found on most pages of the buildShow.txt embodiment. It also displays a copyright notice, (not depicted), on each page. Line  indicates that a method named, \u201cfinishExit( ),\u201d is called when the exit button is activated. Similarly, a method named, \u201c_finishExit( ),\u201d is called when the blatant auxiliary activation key, \u201c6,\u201d (as in deep-six), is pressed, according to line . Lines  to  store the binding in a variable named, \u201cboundX,\u201d where X is a number representing the current level, self.level. The page of  establishes level 0. Each new page created increments self.level. Each page removed with the up button decrements self.level, (see line ).","Lines  and  establish that _finishExit( ) in turn calls finishExit( ). Separate method _finishExit( ), since it is called when the blatant auxiliary activation key is pressed, acknowledges an argument named, \u201cevent.\u201d When finishExit( ) is called by the exit button itself, no event argument is included. Hence, the _finishExit( ) relay satisfies the Python interpreter.","Lines  to  define the finishExit( ) method. On line , a variable named, \u201cself.disable,\u201d disables the method if it is set. The exit button does nothing unless self.disable is reset. Lines  to  terminate Mplayer application, if active. Lines  to  remove second individual real-time direction cache files, psc_1.txt and psc_2.txt, depicted in . Line  calls \u201csplash1cmd( )\u201d method which implements the first part of a sign-off message such as in . Line  causes a 0.3 second delay. Line  calls \u201csplash2cmd( )\u201d, which displays a second part of the sign-off message, as illustrated in . After the final part of the sign-off message has been displayed for 0.25 second, lines  to  close buildShow.txt embodiment.","Lines  to  define initMedley( ) method which creates the page of . Line  calls a method named, \u201cunbindAll( ),\u201d which removes all auxiliary activation key bindings from the previous page, (i.e. that of ). Line  increments self.level to 1.","A method named, \u201coptionsCmd( ),\u201d called on lines  and , is specified on lines  to . It adds the options button to the pages of . A method named, \u201cchooseOptions( ),\u201d called when the options button is activated, and defined on lines  to , creates the page of . It also creates a fake options page, (not depicted), used in conjunction with the \u201chelp files\u201d button of . Line  calls method unbindAll( ), and line  increments self.level to 2.","Customize Button of ","Lines  to  create the customize button of . Line  causes a method named, \u201c_shwRegNum( ),\u201d to be called when the mouse cursor enters the vicinity of the customize button. The _shwRegNum( ) method displays self.regNum, such as depicted in . Line  causes a method named, \u201c_rmRegNum( ),\u201d to be called when the cursor leaves the vicinity of the button, removing the numbers. Lines  to  place a list of enhancement and reversion files in a variable named, \u201cenhFiles.\u201d If it is nonempty, as tested on line , the customize button is enabled. Lines  to  define methods _shwRegNum( ) and _rmRegNum( ). Line  disables _shwRegNum( ) if a file named, \u201cShowNos.txt,\u201d is missing from the Customize folder, \u201cenhDir.\u201d","Line  indicates a method named, \u201cstrVarsUpd( ),\u201d is called when the customize button is activated. It is defined on lines  to . The strVars.txt file is read from lines  to . The enhFiles variable is reconstituted by lines  to . The enhFiles list is sorted on line  and rearranged to put reversion files before enhancement files on line . One file is processed per customize button activation. Line  picks the first one on the list. Its lines are read into a variable named, \u201cenhLines.\u201d They are processed on lines  to , and then the reversion or enhancement file is deleted on line . An alternative embodiment could move the reversion or enhancement file out of the Customize folder instead of deleting it. Again the enhFiles variable is re-created from scratch on lines  to . If the enhFiles list is empty, the customize button is disabled by lines  to .","If a unique identification code, embedded in the reversion or enhancement file, matches self.uidCode, a variable named, \u201cuidMatch,\u201d is set on line . Lines  and  assure that the updated strVars.txt file stores self.uidCode on the appropriate line, identified by UIDLINE constant. Lines  to  create a new strVars.txt file that includes the customizations specified by the reversion or enhancement file, as depicted in . Line  determines if a strVars.txt line should be replaced. Line  replaces it. After the strVars.txt file is updated, it is re-read, as originally done by _init_( ) method, to refresh corresponding variables.","Method regNumVerify( ), defined on lines  to , is a simple, contrived example. It serves as a placeholder for an actual registration number verification routine.","One of the pages, (not depicted), that may be viewed after activating the \u201chelp files\u201d button of , is \u201coption details.\u201d It resembles the options page of , except each checkbutton is replaced with a regular button. When activated, the \u201cnormal show\u201d button, for example, creates a scrollable window loaded with a help file named, \u201cnormalShow.txt,\u201d on the right side of the page. The article explains what features the \u201cnormal show\u201d checkbutton of  provides. Similar articles may be viewed for other option buttons.","Each button calls a method, which in turn calls \u201coptView( )\u201d method, which displays the appropriate help article in the scrollable window. Line  assigns \u201copvNormalShow( )\u201d method to the \u201cnormal show\u201d button of the help page. Line  is a call to optView( ) from opvNormalShow( ). An argument, \u201cnormalShow,\u201d distinguishes the call from those of other buttons. Lines  to  define optView( ). The argument from the opvNormalShow( ) call is assigned to a variable named, \u201coptName.\u201d Line  prepends a subdirectory of the buildShow.txt embodiment named, \u201chlp,\u201d to optName. It also appends a \u201c.txt\u201d suffix and opens the resultant file for reading. Line  reads the file. Line  inserts it into the scrollable window.","Lines  to  define method, \u201cchooseBeta( ).\u201d As per line , it is called when the \u201cbottom correction\u201d button of  is activated. As previously explained with , the button creates a text entry widget box. The box is removed if the button is activated again without first finishing the entry update. Lines  and  test whether the box is still present. Lines  to  remove the box. Line  ignores the button activation if self.disable is set. For example, when the \u201cview time\u201d button of  is activated, a different text entry widget box is created. To prevent a second text entry widget box from appearing, self.disable is set. It is also set to prevent the up or exit buttons from interrupting an entry update. Lines  to  create the text entry widget box.","Line  calls unbindAll( ) to redirect all keyboard keys towards the text entry widget box. Line  sets self.disable to prevent a second text entry widget box from appearing, and the up or exit buttons from interrupting. Line  removes the label of  that displays the current bottom correction factor, \u201c0.975.\u201d Line  causes method \u201c_finishBeta( )\u201d to be called when the \u201creturn\u201d key is pressed. Because the entry expects numerical values, it is possible to reassign the alphabetical blatant auxiliary activation key for the \u201cbottom correction\u201d button on line . In addition, since a second activation removes the box and cancels the update, assigning the escape, \u201cesc,\u201d key too, on line , for convenience, is appropriate. Method _finishBeta( ) is defined on lines  to .","Lines  to  define methods \u201cchooseTime( )\u201d and \u201c_finishTime( ),\u201d which similarly handle updates for the \u201cview time\u201d button of .","Lines  to  define methods \u201cbkVoiceCmd( )\u201d and \u201cbkSongCmd( ),\u201d which place the voice and song buttons, respectively, on the pages of . Method initMedley( ) calls them on lines  and . A method named, \u201cinitSelect( ),\u201d calls them on lines  and .","Method \u201cdirDelete( ),\u201d defined on lines  to , clears the variable named, \u201cself.phoDir,\u201d and removes the \u201cCURRENT PHOTO FOLDER NAME\u201d label of . In order to make sure the label updates, lines  and  effectively hit the up button followed by the \u201cphoto folder\u201d button of . That is, the page of  is removed and recreated from scratch.","Methods \u201chueDelete( )\u201d and \u201ctdfDelete( ),\u201d defined on lines  to , likewise perform the operations for the delete buttons of , (upper delete button).","Method \u201cshwUpdDb( ),\u201d updates a show database file, medleyDb.txt or selectDb.txt, as depicted in , depending on which is relevant. It is called when the save button of  is activated, and a previous version of the show already exists. It is described on lines  to . A variable named, \u201cmdlFlag,\u201d is set if a medley show is applicable on line . A variable named, \u201cself.unkShow,\u201d contains the latest medley or selection show database entry. It stands for \u201cunknown show,\u201d because if the user starts with the top button widget menu item of either , and works down, then it may have no name, until just before saving!","When the none, hue, or random checkbuttons of  are activated, method \u201crulUpdDb( )\u201d is called. It is specified on lines  to . As depicted in , it updates tdiObjectDb.txt for a three dimensional image object. The full pathname of the database file is given by a variable named, \u201ctdiDb,\u201d defined earlier on line . It is referenced on lines  and . Lines  to  assign a chosen hue rule, or no hue rule, to a database entry of an object. A message authentication code, as discussed with regard to , is refreshed by a method named, \u201ctdiBldCode( ),\u201d on line . The method is defined within tdiObjShow.txt, lines  to .","When a hue is changed by pressing the ok button of , or the delete button of , method \u201chueUpdDb( )\u201d is called. It is specified on lines  to , and updates tdiObjectDb.txt, as depicted in . Lines  to  assign a chosen hue, or no hue, to a database entry of an object.","When an image is changed by pressing the ok button of , or the upper delete button of , method \u201cphoUpdDb( )\u201d is called. It is specified on lines  to . Line  assigns a filename of a chosen image, or an empty string, to a face of an object.","After mkTxoImgs.txt finishes making text objects, method, \u201ctxoUpdDb( ),\u201d on lines  to , updates their message authentication codes. First, it checks them with method, \u201cchkTxoImages( ),\u201d defined on lines  to . The latter method calls chkTxoImg.txt, as depicted in .","Method, \u201cchooseFace( ),\u201d on lines  to , creates the dialog box of , for choosing an image file for a face of an object.","Lines  to  define method \u201cinitImport( ),\u201d which creates the pages of . Method \u201cupdShowLineup( ),\u201d on lines  to , replaces a specific name on a lineup list with a new name. It is used by method \u201cimportShow( ),\u201d which is called when the import button of  is activated, and defined on lines  to .","Similarly, lines  to  define method \u201cinitExport( ),\u201d which creates the pages of . Method \u201cmkShwMinDb( ),\u201d on lines  to , pulls a show database entry from either medleyDb.txt or selectDb.txt and readies it for export. Method \u201cdeleteExpShow( ),\u201d on lines  to , moves an export text file into a garbage subdirectory, avoiding name collisions by adding or modifying a suffix. Both methods are used by method \u201cexportShow( ),\u201d which is called when the export button of  is activated, and defined on lines  to .","Method \u201cattachEdits( ),\u201d on lines  to , stores second individual real-time direction cache files when the \u201cattach edits\u201d button of  is activated.","Method \u201cdesignChoreo( ),\u201d on lines  to , is called when the \u201cnew dance\u201d button of  is activated. It creates the \u201cSTARTING CUE STAGE APPLICATION\u201d label of , plays a sound effect audio file, and calls cueStage.txt, as depicted in .","Lines  to  define method \u201cchooseFile( ),\u201d which creates the dialog boxes of .","Lines  to  define method \u201cchoreoCmd( ),\u201d which creates the choreography buttons of .","Method \u201cbeginCmd( ),\u201d on lines  to , creates the \u201cbegin show\u201d buttons of .","Method \u201cupCmd( ),\u201d on lines  to , creates the up buttons for buildShow.txt pages. Method \u201cgoBack( ),\u201d on lines  to , is called when the up button is activated, among other times. It removes a current page and its associated auxiliary activation key bindings. Method \u201cremoveBindings( ),\u201d on lines  to , removes bindings from a current page, and restores bindings from a previous page.","Method unbindAll( ), on lines  to , removes all auxiliary activation key bindings.","Method \u201cinitBegin( ),\u201d on line  to , creates the pages of .","Lines  to  specify method \u201cupdShwLstBox( ),\u201d which loads the listbox of  with alphabetized names of shows from medleyDb.txt or selectDb.txt, respectively. A show is highlighted as well.","Lines  to  define method \u201clstShwName( ),\u201d which re-highlights a listbox show name and calls method \u201cshwName( ),\u201d Lines  to  specify method shwName( ), which updates the name label of  to match whichever show is highlighted in the listbox. It also enables the save and \u201cdo not save\u201d buttons if appropriate.","Method \u201cchooseShow( ),\u201d on lines  to , creates the text entry widget box of , for selecting or adding listbox shows. Lines  to  define method \u201c_finishShow( ),\u201d which moves the listbox highlight to an old or new show and calls shwName( ) when the \u201creturn\u201d key is pressed.","Method \u201cdeleteShow( ),\u201d on lines  to , deletes a show when the delete button of  is activated.","Method \u201ccancelShowSave( ),\u201d on lines  to , cancels saving a show when the \u201cdo not save\u201d button of  is activated.","Method \u201csaveShow( ),\u201d on lines  to , saves a show when the save button of  is activated.","Method \u201cloadShow( ),\u201d on lines  to , loads a show when the load button of  is activated.","Lines  to  define method \u201cbeginShow( ),\u201d which is called when the \u201cbegin show\u201d button of  is activated. It creates the \u201cSTARTING 3-D IMAGE OBJECT SHOW APPLICATION\u201d label of , plays a sound effect audio file, and calls tdiObjShow.txt, as depicted in .","Method \u201ccpFiles( ),\u201d on lines  to , copies files. Method \u201c_tabComplete( ),\u201d on lines  to , provides a tab completion feature.","Lines  to , \u201cmkUnkShwDict( ),\u201d creates an unnamed show database entry based on currently available settings.","Methods \u201c_nonSelect( ),\u201d \u201c_hueSelect( ),\u201d and \u201c_rdmSelect( ),\u201d on lines  to , bind to blatant auxiliary activation keys for the checkbuttons of . Similarly, methods on lines  to  activate checkbuttons of . Lines  to  define methods that activate the checkbuttons of . Lines  to  activate the checkbutton of . Lines  to  invoke the checkbuttons of . Lines  to  are for checkbuttons of . Lines  to  implement blatant auxiliary activation keys for checkbuttons of . Lines  to  assist checkbuttons of .","Method \u201cchooseFolder( ),\u201d on lines  to , creates the dialog boxes of .","Lines  to  describe method \u201cinitFolder( ),\u201d which creates the page of . The page of  is created by method \u201cinitSelect( ),\u201d on lines  to . Method \u201cinitTdis( ),\u201d on lines  to , creates the page of .","Lines  to  define method \u201cmkTdiDbMap( ),\u201d which creates an index of tdiObjectDb.txt in a variable called, \u201cself.tdiDbMap.\u201d It also returns names of shows within the three-dimensional image object database file.","Method \u201cmkTdi( ),\u201d on lines  to , creates the page of .","Method \u201cfvrListCmd( ),\u201d on lines  to , re-highlights a file in the favorites listbox of  and calls method \u201cfvrCmd( ).\u201d Lines  to  specify fvrCmd( ), which updates a favorites listbox index, \u201cself.fvrLbi,\u201d and sets a \u201cself.useFvr\u201d variable. Double-clicking a file in the listbox, via line , calls method \u201c_fvrCmd2( ),\u201d defined on lines  to . It calls fvrCmd( ) and then opens the dialog box of  by calling method chooseFace( ).","Method \u201c_listCmd( ),\u201d on lines  to , works on listboxes of , which display names of three-dimensional image objects. It re-highlights a name and updates either a label or a listbox index.","Method \u201ctdfPreview( ),\u201d on lines  to , presents previews of images assigned to three-dimensional image object faces, such as in . It runs when the upper preview button is activated. Method \u201cfvrPreview( ),\u201d on lines  to , presents previews of images from the favorites list, such as in . It operates when the lower preview button is activated. Both preview methods call method \u201cshwPvwImg( ),\u201d defined on lines  to , which resizes an image, saves it to \u201cgif\u201d format, and creates \u201cself.image\u201d on line . The self.image is displayed using a label widget, (see lines  to  or lines  to ).","Lines  to  cover methods splash1cmd( ), splash2cmd( ), \u201csplash3cmd( ),\u201d and \u201crmSplash( ),\u201d which create and remove the sign-off messages of  as discussed earlier in connection with the finishExit( ) method.","Methods \u201cshwImpVoxRename( )\u201d and \u201cshwImpSngRename( ),\u201d on lines  to , implement modifications provided by the \u201c\u2018Imported Audio\u2019 folder has vocal recording\u201d and \u201c\u2018Imported Audio\u2019 folder has song\u201d checkbuttons, respectively, of . Similarly, lines  to  define method \u201ctdiImpPhoRename( ),\u201d which makes modifications for the \u201c\u2018Imported Photos\u2019 folder has photos\u201d checkbutton of .","Method \u201cgetTdiObject( ),\u201d on lines  to , uses self.tdiDbMap index to return an object database entry from tdiObjectDb.txt.","Method \u201clabelsCmd( ),\u201d on lines  to , update the three-dimensional image object labels of .","Lines  to  define method \u201cchooseHue( ),\u201d which creates the dialog box of .","Lines  to  specify method \u201ceditTxt( ),\u201d which creates the page of . Methods \u201ccancelTxt( )\u201d and \u201csaveTxt( ),\u201d on lines  to , implement functions of the cancel and save buttons of , respectively.","Method \u201cinitTxt( ),\u201d on lines  to , creates the page of .","Text Objects","Method \u201cmkTxos( ),\u201d on lines  to , makes text objects when the update button of  is activated. It plays a sound effect audio file and displays the \u201cPLEASE WAIT\u201d labels of . It calls mkTxoImgs.txt as depicted in , and then method txoUpdDb( ).","Similarly, method \u201cautUpdTlos( ),\u201d on lines  to , displays \u201cAUTO-UPDATING TEXT OBJECTS\u201d and \u201cPLEASE WAIT\u201d labels, (not depicted, but discussed with ). If TextList.txt is newer than TextImage00001.png, it calls mkTxoImgs.txt and then method txoUpdDb( ).","Method \u201cinitRule( ),\u201d on lines  to , creates the page of .","Method \u201cinitChoreo( ),\u201d on lines  to , creates the page of .","Method \u201cinitVoice( ),\u201d on lines  to , creates the page of .","Method \u201cinitSong( ),\u201d on lines  to , creates the page of .","Method \u201cinitHue( ),\u201d on lines  to , creates the page of .","Method \u201cinitFace( ),\u201d on lines  to , creates the pages of . It calls method \u201cfvrView( ),\u201d specified on lines  to , to create the favorites list listbox and associated preview, clear, and delete buttons. Methods \u201cinitFront( ),\u201d \u201cinitRight( ),\u201d \u201cinitBack( ),\u201d \u201cinitLeft( ),\u201d \u201cinitTop( ),\u201d and \u201cinitBottom( ),\u201d on lines  to , interface to method initFace( ) for three-dimensional image object face buttons of .","Methods \u201ctdfClear( ),\u201d and \u201cfvrClear( ),\u201d on lines  to , remove image previews for three-dimensional image object faces and favorites list line items, respectively. They run when the upper and lower clear buttons, respectively, of  are activated. As a convenience, when a preview image is displayed, they also run when the escape, \u201cesc,\u201d button is pressed, (lines  and ).","Method \u201cfvrDelete( ),\u201d on lines  to , deletes a line item from the favorites list listbox and from FavoritesList.txt when the lower delete button of  is activated.","Lines  to  define method \u201ccopyName( ),\u201d which executes when the copy button of  is activated. Likewise, lines  to  define methods \u201crenameName( )\u201d and \u201cdeleteName( ),\u201d which implement rename and delete button functions, respectively, of .","Lines  to  define method \u201cchooseName( ),\u201d which creates the text entry widget box of , when the name button is activated. Methods chooseName( ) and renameName( ) create text entry widget boxes using a common method named, \u201cnameEntry( ),\u201d defined on lines  to .","Lines  to  specify method \u201clbxHighlight( ),\u201d which highlights a listbox line for listboxes of , or .","Method \u201caddShwObject( ),\u201d defined on lines  to  adds a show database entry to medleyDb.txt or selectDb.txt.","Method \u201caddTdiObject( ),\u201d defined on lines  to  adds a three-dimensional image object database entry to tdiObjectDb.txt.","Method \u201c_finishName( ),\u201d on lines  to , closes the text entry widget box of , and processes its three-dimensional image object name.","Method \u201cmkPicks( ),\u201d on lines  to , creates the page of .","Lines  to  define method \u201cstrFresh( ),\u201d which removes all three-dimensional image object names from the right listbox of  when the \u201cstart fresh\u201d button is activated.","Lines  to  specify method \u201csubCmd( ),\u201d which removes a single name from the right listbox of  when it is clicked on, or when it is highlighted and the \u201creturn\u201d key pressed.","Lines  to  define method \u201caddCmd( ),\u201d which adds a single name to the right listbox of  when it is clicked on in the left listbox, or, in the left listbox, it is highlighted and the \u201creturn\u201d key pressed.","Lines  to  define methods \u201cdirTutorial( ),\u201d \u201cdirTopFloor( ),\u201d \u201cdirExeSui1( ),\u201d \u201cdirExeSui2( ),\u201d and \u201cdirExeSui3( ),\u201d which display a \u201cdirectory tree structure\u201d tutorial, (not depicted). It represents one of the menu choices on a subsequent page, (not depicted), that appears when the \u201chelp files\u201d button of  is activated.","Methods \u201c_magnify( )\u201d and \u201c_demagnify( ),\u201d on lines  to , substitute larger or smaller font sizes within text widget windows, such as of . Font size grows when keys \u201ccontrol\u201d-then-\u201c=\u201d (together) or \u201ccontrol\u201d-then-\u201cshift\u201d-then-\u201c+\u201d (together) are pressed. Font size shrinks when keys \u201ccontrol\u201d-then-\u201c\u2212\u201d keys (together) are pressed.","Lines  to  define methods \u201cqAndA( ),\u201d \u201ccmdKeys( ),\u201d and \u201cinitHelp( ),\u201d Method initHelp( ) creates the menu choice page, (not depicted), when the \u201chelp files\u201d button of  is activated. A button on that page calls method qAndA( ) to display help file, \u201cqAndA.txt,\u201d (also not depicted). Another button on that page calls method cmdKeys( ) to display help file, \u201ccmdKeys.txt,\u201d incorporated into DETAILED DESCRIPTION section, under \u201cSECOND INDIVIDUAL REAL-TIME DIRECTION INPUTS\u201d heading.","Cuestage.Txt","Line , a usage statement, indicates a Tcl\/Tk Wish application, \u201cwish8.5,\u201d is called to provide a widget environment. Subunit cueStage.txt may be called with or without a pathname. A full pathname sets variable, \u201cproDir,\u201d (for program directory) unequivocally, (see lines  to ). Brackets signify optional parameters. However, there is an expected order. If a first parameter is missing, a second and third should be absent as well. An audio or video file may be included as first command line parameter, otherwise default \u201cmissing.mp3\u201d is substituted, (see lines  to ). A second parameter reveals a cueStage.txt subdirectory where cache files from a previous initial individual real-time direction session are stored, (see ). Variable \u201cnewDir\u201d saves the subdirectory, (see line ). A third parameter, stored as variable, \u201cloadOnlyFlag,\u201d (see line ), is expected to be either 1 or 0. If set to 1, cueStage.txt regenerates cache files cue_3.txt and cue_5.txt, (and their stored copies), and closes. It is used to import export text files, (i.e. .bsm and .bss files). The two cache files are left out of export text files to reduce file size. Smaller files are easier and cheaper to share, using less bandwidth to transport electronically.","Line  is a window manager command that sets a window title.","Line  clears variable \u201cdebug.\u201d If it is set instead, (see line ), extra commentary is reported for some errors.","Line  effectively escapes all spaces within the name of the song file with a double-backslash to prevent errors when using it later.","Upon startup, \u201cfinishLoad( )\u201d procedure is called, (see line ), which defines cue touch items from cache files in proDir or stored in newDir. Line  sets \u201ciniCstFlag,\u201d (for initialize custom), which tells finishLoad( ) to use newDir (lines  to ).","Line  sets the loadOnlyFlag if a \u201c1\u201d is found on the command line for the third parameter. Lines  to  close cueStage.txt after procedure finishLoad( ) has finished.","Lines  to  determine proDir. Line  sets proDir to \u201cpresent working directory,\u201d (pwd), since variable \u201cargv0\u201d starts with \u201c.\/\u201d. If cueStage.txt is called from a parent directory, then by line , proDir contains an appended subdirectory path, (i.e. argv0 starts with \u201c.\/<subdirectory path>\/\u201d). Line  is the same as line  because a Tcl interpreter sets the directory name to \u201c.\u201d. Line  is similar to line  because argv0 starts with \u201c<subdirectory path>\/\u201d. Line  doesn't use the pwd command because argv0 contains a full pathname.","Line  sets variable \u201csong\u201d to missing.mp3 if a first parameter is either not specified or not found, (though named).","Reading Default Values from Strvars.Txt","Lines  to  retrieve default values for many variables from strVars.txt, as depicted in . Keeping these values in a separate file allows a company to release a binary version of the buildShow.txt embodiment, yet still allow changes of strVars.txt. A business may use standard encryption techniques to protect its ability to exclusively modify strVars.txt. A customization service may then be offered. The first token of each line corresponds to an initial value for a variable. If the file is missing, then a \u201ccatch\u201d command on line  returns a nonzero value, causing an early exit on either lines  or . If a line is missing within the file, (or is blank), then variable \u201csvrProb,\u201d (for strVars.txt problem), is set, leading to an early conclusion on either lines  or . For an actual debug session, lines  and  may be easily commented-out, to continue a flawed run regardless.","Line  sets number of pixels per point from variable \u201csclFactor\u201d.","Line  sets window size and location to a value stored in variable \u201cgemSpec,\u201d for one embodiment. A typical character string, \u201c770\u00d7490+80+80,\u201d indicates a window size of 770\u00d7490 pixels, 80 pixels from left edge of display and 80 pixels from top edge. Lines  and  store width and height information from gemSpec into separate variables, \u201cgemW\u201d and \u201cgemH\u201d.","Lines  to  initialize variables. A \u201cpack\u201d command on line  yields a colored background or \u201ccanvas,\u201d with a Tk pathname, \u201c.c.\u201d The color is given by variable \u201cbkground.\u201d A \u201c.\u201d in Tk pathnames refers to the root or roof of a full path. The canvas is equivalent to a top floor, or level 0. Variable \u201cactive\u201d starts as a list with its first entry a period, \u201c.\u201d, on line . Variable \u201cdisable\u201d prevents confusion when the user opens a text entry widget box. Other buttons and keyboard bindings are temporarily disabled while the text entry widget box is active. Dictionary variables \u201cbound0,\u201d \u201cbound,\u201d \u201cbound2,\u201d and \u201cbound3,\u201d remember keyboard bindings for levels 0 through 3, respectively. They allow the user to go to a deeper level, creating a new set of keyboard bindings. Upon returning, previous bindings are restored automatically. Variable \u201ctrkList\u201d holds raw user-specified coordinates for a custom track while procedure \u201cdrawTrack( )\u201d is active. Variable \u201ctrkListP\u201d is a standardized (i.e. \u201cprime\u201d) version of trkList. It is created by procedure \u201climitTrack( )\u201d and stored in cue_4.txt. It is used internally by procedure \u201cmkTrack( ),\u201d (for make track), and externally by tdiObjShow.txt, as depicted in . Variable \u201ctrkDrwFlag\u201d allows drawTrack( ) to tell a more primitive \u201cstartDraw( )\u201d procedure to initialize a new trkList, (i.e. if it's 0). Variable \u201coc\u201d enables use of procedure \u201cgoLoop( )\u201d for both the level 0 page of  and the full screen playback page of .","Calling Mplayer Application","Variable \u201ccmd,\u201d (line ), contains a string of characters that is normally entered on a shell command line to activate open source program Mplayer. Variable \u201cmplApp,\u201d read from \u201cconfig.txt\u201d file on line , contains a full pathname for \u201cmplayer.\u201d An \u201copen\u201d command, (line ), effectively executes the shell command. Variable \u201cmplayer\u201d stores a handle to the mplayer session. Variable \u201cffwTime,\u201d (lines , ), represents a number of seconds to fast-forward into an audio or video file, in case initial individual real-time directions are being tacked-on to a previously saved recording. An \u201cfconfigure\u201d command, (line ), sets the mplayer pipe to be nonblocking and line buffered. Such settings allow mplayer communication using Tcl command \u201cputs,\u201d (for put string). A \u201cfileevent\u201d command, (line ), makes sure nothing is done in case the mplayer application sends data through the pipe.","Averaging Real-Time Performance","Lines  to  define procedure \u201ckiloAvg( ),\u201d which initializes variable \u201cdivisor\u201d on line . Timestamps from Tcl command \u201cclock\u201d help record initial individual real-time directions. For playback, Tcl command \u201cafter\u201d pauses cueStage.txt for a specified number of milliseconds. The divisor variable converts from timestamp units to millisecond units. Because a CPU may be heavily loaded, causing real-time behavior to be slower than expected, kiloAvg( ) averages up to 1,000 real-time tests for what divisor should be, which is a reasonable attempt to achieve some error correction for those machines that are regularly stressed. That is, many tests are taken as a group to avoid over-correcting if the processor happens to be overly tasked on just one or two occasions. Each new session of cueStage.txt runs another test, (i.e. an \u201cNth\u201d test), leading to test result \u201cdivisorN,\u201d (line ), which is used as a parameter to kiloAvg( ). Test results are stored and updated in the file named \u201cdivSmp.txt\u201d (line ). An average of available samples (up to 1,000) is returned by kiloAvg( ) (lines , , , , or ).","Index Coordinates for Circular Path of ","As discussed after introducing , sine and cosine functions may be used to pre-calculate 256 evenly spaced positions around a circle. From lines  to  a \u201cposCoords\u201d list is created which contains a double-set of 256 positions\u2014the (x1, y1) set and the (x2, y2) set. It defines the circular path of  and the size of its circle objects. Line  indicates each x2 is \u201covlSize\u201d pixels to the right of each x1; line  indicates each y2 is ovlSize pixels below each y1. With Tk, (i.e. Wish), an abscissa increases from left to right; an ordinate increases from top to bottom. Each entry of posCoords list is perfect for Tk commands \u201ccreate oval\u201d and \u201ccoords.\u201d They use two sets of coordinates to delimit an oval, (or circle). Line  defines variable \u201covlPos\u201d to be a set of integers from 0 to 15 which represent 16 evenly spaced positions around a circular track. As depicted in , an ovlPos of 0 is on top; ovlPos of 15 is to the left. Interposition distance between each ovlPos is kept track of by variable \u201covllPos,\u201d defined on line  to be a set of integers from 0 to 15 as well. As ovllPos and ovlPos increment, they choose indices around the track in a clockwise fashion; as they decrement the choices rotate counterclockwise. Equations for x1 and y1 on lines  and  represent a circle with a radius of 110 pixels and a center at (555, 180).","Lines  to  are more variable initializations. Variables ovlPos and ovllPos are set to choose the top position of the circular track. Variable \u201cmtrPos\u201d counts full beats, (i.e. both phase 1 and phase 2). Variable \u201covlPosStart\u201d remembers a position that is current when an initial individual real-time direction is given. Variable \u201cindex\u201d converts a pair of ovlPos and ovllPos numbers into a single integer from 0 to 255, (by multiplying ovlPos by 16 and adding ovllPos, see line ). They are initialized to zero.","Line  initializes variable \u201crtuPhase,\u201d (for rotate update phase). It stores a current phase. Variables \u201crtuPhs1Thresh\u201d and \u201crtuPhs2Thresh\u201d hold timestamps that indicate when a beat should transition to phases 1 and 2, respectively. Since, rotation (i.e. object motion) is initially off, neither phase 1 nor phase 2 are relevant. The two threshold variables are initialized to non-timestamp values, (i.e. negative real numbers, \u201c\u221260e30\u201d), for clarity.","As explained with , variables xi 8 and kappa 9 are read from strVars.txt. Variables \u201cxiKappa\u201d and \u201cinvXiKappa\u201d are calculated on lines  and . As mentioned with example 6 of , for one embodiment, kappa is 4.0, signifying a faster phase is four times quicker than a slower phase. For one embodiment, xi is 1.0, indicating the faster phase endures for as long as the slower phase. Hence, the faster phase takes up 4\/5 of a beat segment, while the slower phase uses 1\/5 of it. See lines  and  and note that, for the example, (1+xiKappa)=5 and (1+invXiKappa)=(1+1\/4)=5\/4. One embodiment uses the faster phase for phase 1 and the slower phase for phase 2. However, a different embodiment could use the slower phase first.","Variable \u201cnewPhs1,\u201d line , indicates that a new beat is about to commence when set to 1. Interestingly, if an initial individual real-time direction interrupts a beat, a reset variable, \u201crstPhs1,\u201d is set, which in turn activates newPhs1 upon a next iteration of goLoop( ). When rtuPhs2Thresh is given a negative real number on line , thanks to rstPhs1 being 1, then line  will be bypassed in favor of line . Similarly, because rtuPhs1Thresh is given a negative real number on line , line  is accepted, and goLoop( ) uses code it would normally use if a previous beat were timing-out normally and a next beat were being set up, including setting newPhs1 to 1 on line .","For one embodiment, definitions for each cue touch item are numbered 1 through 4. Variable \u201cdowNum,\u201d (for window number), stores this number when procedure \u201csetRot( ),\u201d (for set rotation) is called. Another embodiment may have more or fewer cue touch items.","When a summary window is colored bright pink, it tells the user which cue touch item is active, and moreover, it also informs cueStage.txt itself! Specifically, when a cue touch item is activated, it calls procedure \u201ccueRot( ),\u201d (for cue rotation), which in turn calls setRot( ). It checks to see if the cue touch item is already active by inspecting the foreground color of its summary. Variable \u201clastX\u201d provides a secondary mechanism that is more reliable in case all cue touch items are momentarily deactivated by the rotate button of . When rotation is turned back on, lastX may help distinguish between two otherwise identical definitions, (see relevant parts of procedure \u201ctoggleRot( ),\u201d (for toggle rotation), lines , , , and ). On line , lastX is initialized to 0 to indicate that no cue has yet been active.","If cue touch items are inactive because rotation is off, rotation location variable \u201crtLoc\u201d is assigned a character string, \u201cwings.\u201d If a cue touch item is active because rotation is on, rtLoc is assigned, \u201cstage.\u201d On line , rtLoc is initialized to \u201cwings,\u201d because rotation is off.","Three procedures, cueRot( ), setRot( ), and \u201cdowCmd( ),\u201d (for summary window command), are defined before main screen widgets, because some widget definitions reference them. Lines  to  define cueRot( ). It is called when the mouse cursor enters the vicinity of a cue text widget touch item, (see lines , , , and ), a blatant auxiliary activation key is pressed, (see lines , , , and ) or potentially when an even entry of variable \u201cplaList,\u201d (for play list), is evaluated, (see lines , , , and ). Variable \u201crotCurrent,\u201d (for current rotation), represents a stage for a cue touch item. \u201cGoing on stage,\u201d to a cue touch item basically refers to copying its definition to rotCurrent. Variables \u201crotDow1\u201d through \u201crotDow4,\u201d (and therefore rotCurrent), are all structured lists that contain individual specifications for each cue touch item. After updating rotCurrent, cueRot( ) then calls setRot( ), defined on lines  to .","Refresh Time","Variable \u201crefTime,\u201d (for refresh time), is initialized by strVars.txt, (see line ). It contains how many milliseconds cueStage.txt waits between goLoop( ) calls, (see lines  to ). Procedure setRot( ) scans rotCurrent and sets various control variables. Procedure goLoop( ) continuously interprets these variables and updates the display. Procedure setRot( ), if appropriate, also saves a record of each cue touch item activation, (i.e. initial individual real-time direction), and its timestamp within variable \u201ccueList,\u201d (see lines  to ). Furthermore, it colors cue touch item summaries, (see lines  to ).","Procedure \u201crebuildLists( )\u201d is called during a start, load, or save, (see lines , , ). Procedure \u201crstHold( )\u201d is called during a restart. Variable \u201cnewLoad\u201d is set by rebuildLists( ), (line ), and rstHold( ), (line ). It is cleared by setRot( ), (line ), toggleRot( ), (line ), and \u201ctoggleLts( ),\u201d (for toggle lights), (line ).","Procedures setRot( ), toggleRot( ), and toggleLts( ) help record initial individual real-time directions by updating variable cueList with an appropriate input mnemonic and timestamp. However, if variable \u201ccueLock\u201d is set, then cueList is \u201clocked,\u201d indicating modifications are forbidden. The procedures can perform their other tasks without affecting a recording.","When cueStage.txt is replaying initial individual real-time directions, variable \u201cplt2Threshold\u201d contains a timestamp indicating when a next plaList command is to be interpreted (see lines  and ). Play mode is disabled when plt2Threshold is set to 60e30, a real number representing a timestamp for the year, 1.9e18 or 1.9 billion, (i.e. 60e30 microseconds from the year 1970).","Line  of setRot( ) evaluates true, if cueStage.txt is set to record initial individual real-time directions, but has not begun. Recording is enabled when cueLock is 0 and plt2Thresh is 60e30. Activating an initial individual real-time direction input calls setRot( ), toggleRot( ), or toggleLts( ), eventually clearing newLoad, as discussed above.","Hence, lines  to  enable changes just before a first initial individual real-time direction is recorded. Lines  through  load and pause an audio or video file. If a cueStage.txt subdirectory is not specified as a second command line parameter, then iniCstFlag is zero and cueList has one starting entry, (see lines  through ). The timestamp of that starting entry is replaced by line . Lines ,  start the audio or video file playing from its beginning. Initial individual real-time directions are already stored in cueList if a cueStage.txt subdirectory is specified on startup, or a save or a load has successfully completed. Therefore, because procedure \u201cfinishSave( )\u201d needs to resynchronize old timestamps with newly appended ones, a \u201cskip\u201d mnemonic and timestamp are appended on line . Lines ,  start the audio or video file playing from where it left off, thanks to nonzero ffwTime, (see lines , , and ).","As rebuildList( ) rebuilds plaList after a save or load, it tracks whether rotation is on or off with variable \u201clastRot,\u201d (lines  to ). It tracks lights with variable \u201clastLts,\u201d (lines  to ). Line  turn lights on or off and line  turns rotation back on if plaList and cueList mandate it. (Procedure goLoop( ) automatically turns rotation off after a performance by calling haltMotion( ), (line )).","Line  colors the play button of  light gray, or whatever color is stored in variable \u201cwngColor,\u201d (for \u201cin the wings\u201d color). It also changes its cursor to a pointer. The play button is disabled while initial individual real-time directions are being recorded.","Cue Touch Item Summary Definitions","For one embodiment, as discussed with , each cue touch item summary displays a time signature, rotation direction, and tempo. Lines  to  of dowCmd( ) bring up a bitmap image for a time signature. Lines  to  generate the rest. Both commands specify widget tags. For example, line  includes variable \u201cdow,\u201d (first parameter of dowCmd( )), as a first of three tags. Variable dow could be any of four strings, \u201crtd1\u201d through \u201crtd4\u201d depending on which cue touch item is pertinent. Line  references one of these tags in its \u201citemcget\u201d command, (i.e. \u201crtd$dowNum\u201d represents a concatenation of two strings, \u201crtd\u201d, and variable dowNum, to check color of an appropriate summary.","A bright pink color, \u201cstgColor,\u201d (for stage color), and a lastX match, denote a consecutive setRot( ) call for a same cue touch item. For one embodiment, object positions are reset by calling procedure \u201crstPosition( ),\u201d (line ), and finishing early, (line ), since other control variables are in place already.","Line  updates lastX.","Lines  to  scan rotCurrent, converting its contents into individual control variables. A numerator of a time signature is assigned to \u201cmtrX,\u201d a denominator to \u201cmtrY.\u201d Legato flow implies \u201crotSmooth\u201d is 1. Staccato flow signifies rotSmooth is 0. If legato flow comports, then \u201crotCmprt\u201d is 1. If it overlaps, then rotCmprt is 0. If a clockwise bearing is chosen, \u201cbearing\u201d is \u201ccw.\u201d Variable bearing is \u201cccw\u201d if counterclockwise rotation is selected. If the tempo is 100 quarter beats per minute, then variable \u201cqbpm\u201d is 100.","Line  sets \u201cmtrPosTotal\u201d to mtrX, because a numerator of a time signature gives total number of beats per bar. Line  resets mtrPos, a current beat count, to 0.","Staccato, Legato Flow","Lines  to  set up staccato style rotation, (i.e. object motion around a circle). Lines  to  prepare for legato flow. Staccato is simple\u2014there is one phase, (\u201crtuTime2\u201d and \u201crtuPeriod2\u201d are zero), and one update per beat. Each \u201crtuTime1,\u201d (rotate update time for phase 1), ovllPos is incremented by \u201covlIPosDelta1\u201d and ovlPos is incremented by \u201covlPosDelta1.\u201d Since there is one update per beat, \u201crtuPeriod1\u201d equals rtuTime1. Variable rtuTime1 represents the number of milliseconds per beat. Its equation on line  is derived, for one embodiment, by rearranging the following: (60,000 milliseconds\/minute*4 quarter beats\/whole note)\/(tempo*mtrY). Variable qbpm stores tempo in units of quarter beats per minute. Variable mtrY is a number of beats per whole note (from a time signature denominator). The numerator of the above equation has units (ms\/min*qb\/wn) and its denominator has units of (qb\/min*b\/wn), leaving ms\/b, or milliseconds\/beat, after cancellation.","An equation on line  for ovlIPosDelta1 indicates, for one embodiment, 256 interpositions represent a whole note or complete trek along a circle, or any path representing a bar of music. A modulo function is used to throw away that part of the path that is taken care of by ovlPosDelta1, where each increment represents 16 interpositions. Lines  and  negate corresponding deltas to effect a counterclockwise bearing.","As discussed with  and lines , , equations on line  to  help specify legato rotation, (compare to equations 11, 16, and 17, ). Equations on lines  and  are identical. However, line  does not truncate the result to an integer and assign it to rtuTime1. Instead, it saves it as a real number to \u201cmsPerBeat.\u201d Recall that xi=TF\/TS, a ratio of a faster phase time period over a slower phase time period. Hence, TF=xi*TS. For one embodiment, each beat is made up of a slow and fast phase, or msPerBeat=TF+TS. Variable \u201cmsPerPhsSlow,\u201d (i.e. TS), on line  takes advantage of these relations. For one embodiment the slower phase corresponds to the second phase, leading to line . On line , msPerPhsFast is initially assigned whatever is leftover after the the slow phase takes its share from the beat time. However, before committing, a test is performed to see if it makes sense to split the beat into two phases. That is, is the beat time long enough to resolve two phases effectively? For one embodiment, \u201cminUpdate,\u201d a delay before an index updates, is stored as 50 milliseconds within strVars.txt. If the time period for the fast phase isn't at least twice minUpdate, then line  is accepted and lines  to  enforce one phase per beat.","Because a millisecond is a practical resolution limit for scheduling a multi-tasking central processing unit, (as suggested by Tcl command \u201cafter\u201d), and because motion pictures (i.e. movies) use 24 frames per second, or one each 41.7 milliseconds, it's appropriate to digitize object movement in terms of integral numbers of milliseconds and interposition indices. Interpolation may further smooth object travel. For one embodiment implementing a \u201ccomport\u201d option, digitization rounding error is handled by defining a limit position and stopping a motion if it is reached before beat's end. For one embodiment, since the slower phase is second, any slight halting blends right in. For one embodiment, a tremolo or \u201cfuzzy stop\u201d option makes objects hop among a range of positions around a limit position, if it's reached. Another embodiment could add the effect to staccato flow or even no movement.","In general, a smooth flow is achieved with a large number of small updates. However, there is a practical limit to the short update time, minUpdate. Also, there is a digitization constraint that an interposition increment, or delta, be at least one index. For very slow moving beats, (i.e. objects transit a small number of indices over a long time period), an update each minUpdate, as calculated on lines  and , could lead to interposition deltas less than one index. Interposition deltas are calculated on lines  and  and tested on lines  and . If a test fails, then the delta is set to one interposition index, (lines  and ). Also, the update time is increased by reducing the number of updates to just the integer number of interposition indices within the phase, (lines  and ). Hence lines  and  calculate update times greater than or equal to minUpdate (or zero for line  if phase 2 is cancelled).","After update times, rtuTime1 and rtuTime2, are finalized on lines  and , the deltas are converted from their theoretical real values to their best integer approximations. Cumulative rounding errors are taken into account. That is, phase 1 delta is rounded down. Otherwise, if it's rounded up, there may be no interpositions left in a beat for phase 2 travel! Phase 2 then, because path length for phase 1 may be slightly less than the theoretical value, inherits any unused interpositions from phase 1, called an \u201caccumulated deficit,\u201d or \u201caccDef,\u201d on line . Phase 2 is rounded up, and for one embodiment, any excess interpositions are, (if the comport option is enabled), thrown out, the motion briefly halted at the theoretical end-of-beat boundary. An extra amount is called an \u201caccumulated surplus,\u201d or \u201caccSrp,\u201d on lines  and . The phase 2 delta is tested, in brute-force fashion, from lines  to . The code checks whether phase 2 delta can be decreased and still maintain a positive surplus. That is, it attempts to decrease the surplus in order to increase normal phase 2 motion, for one embodiment. Another embodiment may seek to increase the surplus to allow more time to accentuate the fuzzy stop effect, for example.","Lines  and  negate interposition deltas if counterclockwise movement is specified. Lines  and  set position deltas (i.e. to zero for slow beats). Lines  and  negate them for counterclockwise motion. Lines  and  calculate phase periods as exact integer multiples of their update times. If the comport option is selected, \u201cincPos\u201d is set to an integer number of positions per beat. As previously explained, one embodiment uses 16 positions per whole note. Variable incPos is used at the beginning of a beat to determine \u201clmtPos,\u201d a theoretical end-of-beat boundary (see lines , , , , and ). It is negative for counterclockwise movement.","Line  effectively resets ovlPosStart to a current ovlPos, as calculated on an ongoing basis by goLoop( ). Variable ovlPosDelta1 is subtracted to compensate for goLoop( ) adding it on a next upcoming run, before refreshing the display, (on line ). On the next iteration of goLoop( ), ovlPos is set to \u201citself-minus-ovlPosDelta1\u201d, (i.e. ovlPosStart), on line . Variable mtrPos is reset to 0 on line . Variable rstPhs1 is set to 1 on line . Therefore, rtuPhase is set to 1 on line , newPhs1 is set to 1 on line , and mtrPos is updated to 1 on line . (Variable mtrPosTotal is generally greater than 1). Line  sets \u201cstartZeroIPos,\u201d ensuring that a new beat starts off at interposition zero via line . Procedure toggleRot( ) initializes mtrPos to 1 (i.e. instead of 0 like setRot( )). By doing so, when rtLoc is reset to \u201cstage,\u201d objects don't suddenly jerk, ensuring a smooth off-on transition. That is, because mtrPos is updated to 2 or 0 on line .","Setting \u201crtt2Threshold\u201d to a negative real number on line , ensures that it is less than any actual timestamp. It thus activates lines  to  of goLoop( ). Line  resets a beat to the beginning of phase 1 by setting variable rstPhs1, as explained earlier with reference to line  and newPhs1.","Initial Individual Real-Time Directions","In a nutshell, setRot( ) scans cue touch item definitions and updates control variables that goLoop( ) uses to implement initial individual real-time directions. Procedures toggleRot( ) and toggleLts( ) operate similarly. Other embodiments can reduce processing overhead by storing and recalling more calculations, instead of computing them each time an initial individual real-time direction is given or played back.","Procedure dowCmd( ) is defined from lines  to . Generally, when a style item or tempo is chosen from a menu of , a global variable is set. Then dowCmd( ) is called, to update a cue touch item summary definition.","As depicted in , lines  to  create two text widgets, \u201cIN THE WINGS\u201d and \u201cON STAGE,\u201d and two button widget menu items, \u201cPLAY (5)\u201d and \u201cROTATE (r).\u201d Foreground color for the play button is light gray, wngColor. The button is disabled because no initial individual real-time direction session is yet loaded. Foreground color for the rotate button is green, from variable \u201cfrground.\u201d The button is enabled on startup.","Lines  to  setup menus for the style and tempo buttons of . A first menu of either button executes a \u201cpostcommand\u201d before it appears. By calling procedure \u201cescCmd0( ),\u201d any open menus are first closed, (see lines  and ). Line  \u201cposts\u201d the menu of , (for the tempo button), away from cue touch item default locations, (i.e. to upper-left coordinates (80, 187)). The menu is posted if the mouse button is released while still over the tempo button, (i.e. without making a selection).","Line  creates a \u201cfor\u201d loop which iterates four times, establishing the style and tempo buttons of  and their corresponding menus. A different embodiment that uses fewer cue touch items, reduces the \u201c5\u201d on line . An embodiment establishing more cue touch items, increases the \u201c5.\u201d","Lines  to  create the corresponding cue text widget touch items of . Each cue text widget tag that begins with \u201crtc,\u201d binds it to a different cueRot( ) call when the cursor enters its vicinity, (see lines , , , and ). Tag \u201ctgc\u201d binds each cue touch item to identical \u201cstartTug( )\u201d and \u201ctugWidget( )\u201d calls when the mouse clicks on and moves it, respectively, (see lines  and ). Procedures startTug( ) and tugWidget( ), (lines  to ), allow the user to move cue touch items anywhere within the cueStage.txt window for best timing effect.","Lines  to  create the rest of the widget buttons and text on the main page of .","Circle Objects","Lines  to  create 16 invisible circles, using the posCoords list described above. The circles are invisible because they are filled with a background color, from variable bkground. For one embodiment, the first six circles described by even positions are later filled with rainbow colors red, orange, yellow, green, blue, and violet. They constitute a group or pattern of objects. Another embodiment may use a different set of positions and colors. Another embodiment may incorporate additional selection menus and cue touch items, similar to those for rotation, to choose multiple patterns and colors and to switch between them. An embodiment might associate color choices with a particular pattern or have it apply to all patterns as an independent choice of its own or a combination. Another embodiment may provide sets of dynamic patterns and color palettes that automatically switch at specified tempos. The tempos for the dynamic pattern and palette sets could run independently or synchronize to the rotation tempos. If synchronized, an embodiment could allow the user to set delays for when to switch groups and palettes relative to the beat. If synchronized, rotation cue touch items could switch the tempos of the dynamic sets, even if rotation (i.e. movement) were off. Another embodiment may provide different shapes other than circles. It could use diamonds, squares, ovals, trapezoids, other geometric shapes, custom bitmaps, or a combination. It could use standard or custom images.","Lines  to  update coordinates of the cue touch items with most recently used values from crdLatest.txt. The values in crdLatest.txt are refreshed when an initial individual real-time direction session is saved, (see lines  to ). If a cueStage.txt subdirectory is specified as a second command line parameter upon startup, the crdList.txt values are overwritten with those from the stored cue_2.txt cache file, (see , lines ,  to ).","Blatant Auxiliary Activation Inputs","For a mouse, a widget is inaccessible as soon as its page is closed, or concealed beneath another page. The same is not true, however, for auxiliary activation keys, (blatant or otherwise). If a \u201cbind\u201d Tk command remains intact, a key can still call a procedure even though its button, (and an entire page), have been deleted. An auxiliary activation key could, if allowed, still activate a button, even if it's obscured from view. To avoid confusion, keyboard bindings are erased when a new page is created. New bindings are asserted. When the user returns, bindings are again deleted. The bindings for the previous page are then recalled and reinstated. Lines  to  take care of bindings for the level 0 page of . For each binding, dictionary variable bound0 gets a new entry. Each entry is identified by a dictionary \u201ckey\u201d revealing an \u201cevent sequence\u201d string. The entry itself equates to one or more commands and\/or procedures being \u201cbound.\u201d Lines  to  define procedure \u201cremoveBindings( ).\u201d It removes bindings for a most recent level, (1 through 3), and restores bindings for a previous level, (0 through 2). Procedure \u201cunbindAll( ),\u201d on lines  to , just removes all bindings, regardless of level. Procedure \u201cunk( ),\u201d (for unknown), (lines  to ), is a do-nothing placeholder routine for erasing certain specific bindings.","Procedures startDraw( ) and \u201cdrawLine( ),\u201d (lines  to ), pressed into service by drawTrack( ), (lines  to ), allow the user to specify an arbitrary path for object movement.","Procedure toggleLts( ), (lines  to ), toggles visibility of objects, as if switching stage lights on and off. Lines  to  are identical to lines  to  of setRot( ), discussed earlier.","Procedure rstPosition( ), (lines  to ), sets ovllPos and ovlPos to their negative deltas, persuading goLoop( ) to reset object positions on a next cycle.","Reset\/Hold, Start Buttons of ","Procedure rstHold( ), (lines  to ), resets cueList, plaList, and object positions. It halts movement and audio, (or video), if applicable. It toggles variable \u201choldStatus\u201d and the reset and start buttons of . An initial individual real-time direction session is interrupted and thrown out, if the reset and start buttons are activated. A new session begins following activation of a cue touch item, the rotate button or the lights button. For striking effect, as depicted in , when the reset button is activated, background color is set to red via lines ,  to . Tk command \u201citemconfigure,\u201d on lines  and , targets the circle objects by referring to their tags, (see lines , ). Procedure rstHold( ) turns all 16 circles invisible. Procedure goLoop( ) restores the visible ones. When the start button is pressed, the \u201cplaInit\u201d list is re-initialized to ensure a correct start upon replay. To confirm that cueList and plaList are erased (and to toggle holdStatus back to 0 and normalize background color), rstHold( ) is called if the conclude or load buttons are pressed after reset button, but before start button. That is, list entries, potentially added during reset, are ignored.","A playback of initial individual real-time directions is interrupted with the blatant auxiliary activation key, \u201c2,\u201d of the reset button, or the escape key, \u201cesc,\u201d (see lines  to ). A replay creates a new page and increments variable \u201clevel\u201d to 1 (see lines  to ). That page is removed and the level brought back to 0 by procedure \u201cgoBack( ),\u201d called within rstHold( ) on line . Procedure \u201cstdRestore( ),\u201d called on line  and defined on lines  to , reestablishes the original posCoords list, allowing objects to form the standard circle of , (see discussion above for lines  to ).","Variable disable, on line , prevents procedure \u201cplayCmd( ),\u201d (lines  to ), from running if a text entry widget box is present. Thus, for example, the user should close a \u201cmio meter . . . \u201d tempo dialog box, containing a text entry widget box, as depicted in , before replaying an initial individual real-time direction session. Procedure \u201cchooseMm( ),\u201d on line , sets disable. Either procedure \u201cfinishMm( ),\u201d on line  or procedure \u201cescCmd0( ),\u201d on line , clears it. Line  ensures that when playCmd( ) runs, the play button of  is enabled, as per its foreground color.","Lines  to  interrogate line one of cue_4.txt to find variables \u201ctrkStyle,\u201d \u201ctrkDirection,\u201d \u201cww,\u201d and \u201cwh.\u201d For one embodiment, when trkStyle is \u201cstandard,\u201d cueStage.txt uses a circular path, and tdiObjShow.txt deploys a rectangular edge path. A different embodiment could use different curves and\/or additional options. Variable trkListP defines a track when trkStyle is \u201ccustom.\u201d As explained above, with reference to lines  to , limitTrack( ) creates trkListP from raw user data, trkList, collected by drawTrack( ). As depicted by the flowchart of FIG. , limitTrack( ) creates trkListP by reinterpreting trkList's curve with 256 equally-spaced coordinates, for one embodiment. These coordinates correspond to the 256 indices around the circle of , for one embodiment. A different embodiment may use a greater or lesser number of coordinates. Because tdiObjShow.txt relies on open source software packages, Python and Pygame, it uses a coordinate system whose origin is at the center of the window and whose ordinate increases in the up direction. However, cueStage.txt, invokes open source software packages Tcl and Tk, and their Wish application. Its coordinate system has an upper left corner origin with an ordinate that increases in the down direction. Since coordinates within cue_4.txt are native to tdiObjShow.txt, line  converts them for cueStage.txt. Variables ww and wh represent full screen width and height, for one embodiment. They are read from \u201cshwScreen.txt,\u201d generated by buildShow.txt, (see lines  to , , ). Lines  to  expand the window size to full screen, for one embodiment.","When a new page or level is created, input bindings are erased, variable level is incremented, and variable active appends a new frame name. The frame is created. It is populated by a background canvas widget, (see lines  to ). Because the new canvas hides the old one, lines  to  duplicate lines  to  to form new objects. Line  sets variable oc to the name of the new canvas, allowing goLoop( ) to update the right (i.e. visible) set of objects. Lines  to , similar to lines  to , redefine the posCoords list for a larger screen size. Variable \u201cplaIndex\u201d is set to index 0 on line , to point to the first entry of plaList. An audio or video recording is started via lines  to . Line  turns on play mode via line  of goLoop( ). When goLoop( ) has finished activating each plaList cue, line  calls goBack( ) to reinstate the level 0 page and its bindings, as depicted in . Line  calls stdRestore( ) to re-initialize posCoords, (compare lines  to ). goBack( ) calls removeBindings( ) to erase level 1 bindings and re-establish level 0 bindings, (see line ). Line  recalls the level 1 frame name from the end of the active list and destroys the corresponding page. Line  pops the level 1 entry off the end of the list. Lines  to  restore the default screen size and location, while line  points goLoop( ) back to the original set of objects on the level 0 canvas. Line  decrements variable level back to 0.","When the up button of  is activated, or the escape key, \u201cesc,\u201d is pressed, and no menus or text entry widget boxes are present, then procedure \u201cfinishExit( ),\u201d lines  to , is called. Because variable \u201cupFlag\u201d is set to 1, cueStage.txt exits with a status of 0, (see line ). If the exit button of  is activated, upFlag is cleared to 0 and cueStage.txt exits with a status of 1, (see line ). As cueStage.txt closes, control is returned to buildShow.txt, which checks the returned status and itself exits if it is 1.","Procedures \u201cinitLoad( ),\u201d (lines  to  and ), \u201cinitSave( ),\u201d (lines  to  and ), \u201cimpFolders( ),\u201d (lines  to  and ), mkTrack( ), (lines  to  and ) and drawTrack( ), (lines  to  and ), create new levels, hiding prior pages. In each case, input bindings of the prior page are removed by calling unbindAll( ). Variable level is incremented by 1. Variable active appends a new frame name. The frame is created and filled with a canvas. Newly defined input bindings are added to the appropriate \u201cbound\u201d variable for the level. If no legitimate input bindings are called for, a fake one is added to the \u201cbound\u201d variable so that removeBindings( ) works as expected when the page is eventually closed. That is, removeBindings( ) deletes the fake binding and restores the bindings of the prior page. For the above routines, except drawTrack( ), the up and exit buttons are added to the page by calling procedures \u201cupCmd( )\u201d and \u201cexitCmd( ),\u201d respectively.","Interestingly, upCmd( ), (lines  to ), inspects level, (see lines  and ), to determine which \u201cbound\u201d variable to use, since upCmd( ) may be called by overlapping pages. Likewise for exitCmd( ), (lines  to ), (see lines  and ). When an up button activates, goBack( ), (lines  to ), generally calls removeBindings( ), destroys a current page, and takes care of bookkeeping for variables active and level. If a replay is ending, then window size is restored. If a save or load is finishing, object motion is halted and object positions are reset. A level of 2 implies that impFolders( ) or mkTrack( ) has finished and a return to  is in progress. Procedure goBack( ) re-highlights the listbox for convenience. A level of 3 implies drawTrack( ) is relinquishing control back to mkTrack( ) and . Procedure goBack( ) resizes the window from the full screen dimensions, for one embodiment.","Procedures \u201cchooseMm( ),\u201d (for mio meter, lines  to ), \u201cchooseName( ),\u201d (lines  to ), and \u201cchooseSd( ),\u201d (for start delay, lines  to ), introduce text entry widget boxes to their pages. The latter two first check whether their text entry widget box is already open, and if so, cancel it by calling removeBindings( ), destroying the widget, and clearing disable. That way, one activation opens, and a second activation closes. If a text entry widget box isn't posted, then each routine first checks variable disable and refuses any action if its set. Another text entry widget box is already open, awaiting a response. If disable is clear, then all input bindings are removed to prevent errors when the user types miscellaneous data into the text entry widget box. Of course, variable disable is set, to lock attention on the soon-to-appear text entry widget box. As previously discussed, for proper use of removeBindings( ) later, new input bindings are recorded in a \u201cbound\u201d variable that normally corresponds to a next higher level. For example, chooseMm( ) runs on the main page of , level 0, but lines  and  store information in variable bound, (i.e. normally associated with level 1). Both chooseName( ) and chooseSd( ) run on level 1, but lines , , , , , and  remember input bindings in variable bound2. Note that line , which rebinds the \u201cd\u201d key to the \u201cstart delay\u201d button of , is possible because the text entry widget box is for numerical data. However, allowing the user to press \u201cd\u201d key a second time to close the text entry widget box is consistent with the mouse clicking scheme. If the entry isn't cancelled, then cleanup is left to procedures \u201cfinishMm( ),\u201d (lines  to ), \u201cfinishName( ),\u201d (lines  to ), or \u201cfinishSd( ),\u201d (lines  to ). After each routine processes data from the text entry widget box, it calls removeBindings( ), destroys the text entry widget box, and clears variable disable.","Although not a text entry widget box, the dialog box of procedure \u201cchooseFolder( ),\u201d (lines  to  and ), created by calling \u201ctk_chooseDirectory( )\u201d on lines  to , does accept miscellaneous user data. Hence, input bindings are erased and disable is set. If the dialog box is cancelled, variable \u201cmusDir\u201d will be an empty string and a previous condition is restored by clearing disable, calling goBack( ), and then impFolders( ). Procedure goBack( ) returns to the level 1 conclude page of , made by initSave( ). Procedure impFolders( ) recreates the level 2 import page of . Thus, input bindings are restored without using removeBindings( ). A valid musDir result is processed by procedure \u201cfinishImp( ),\u201d (lines  to ).","The five cache files that cueStage.txt manages, cue_1.txt through cue_5.txt, depicted in , are hidden from the user, who just needs to create or select a title in conjunction with listboxes of . To accelerate browsing, a tab completion routine, \u201ctabComplete( ),\u201d (lines  to ), binds to the name text entry widget box, depicted in , (see line ). The user may type a first few unique characters of a title before pressing \u201ctab\u201d key to fill in a match found in the listbox.","Initial individual real-time direction recordings are stored under a subdirectory named, \u201ctitles.\u201d The listbox lists directories, not filenames. A new name added by using the name button of , creates a peer directory. To create a title hierarchically below a current one, the user activates the \u201cgo lower\u201d button. To navigate up in a title hierarchy, use the \u201cgo higher\u201d button. To navigate down, simply highlight a title and press the \u201creturn\u201d key. If one or more subfolders exist, they will be displayed. If none are present, the listbox remains unchanged. The import button of  expedites organizing titles by replicating a chosen directory structure that catalogs sound tracks of interest.","To speed editing, an initial individual real-time direction session is overwritten without flashing an \u201cAre you sure?\u201d dialog box, when the save button is pressed. However, up to 100 of the most recent versions of a given name are stored in a \u201cgarbage\u201d subdirectory. Suffixes \u201c(2)\u201d to \u201c(100)\u201d are appended transparently to the user. To reduce data storage space, three fundamental files are junk collected. Two others may be regenerated and are deleted. In fact when a show is exported by buildShow.txt, it excludes the redundant two too, to shrink the show export text file size. When importing, buildShow.txt calls cueStage.txt with a loadOnlyFlag to restore the missing files.","Those secondary files are revived by procedures \u201cspeedd( ),\u201d (for speed daemon, lines  to ), and \u201clightsd( ),\u201d (for lights daemon, lines  to ). They convert calculations performed by goLoop( ) to an understandable format for external programs, such as tdiObjShow.txt. Procedure speedd( ) works by duplicating the structure of goLoop( ) but instead of waiting in real-time for a \u201ct2\u201d timer to increment, it is updated immediately, artificially. Instead of changing object locations on the display each refTime milliseconds, position index, interposition index, speed, and duration are recorded each update time, (see lines  to ). If the t2 threshold set by the plaList, plt2Threshold, interrupts the latest position-speed interval to activate the next recorded cue touch item, then the most recent duration is amended to the appropriately reduced time, \u201crdcTime,\u201d (see lines  to ). The job for lightsd( ) is considerably simpler, measuring delays between plaList invocations of toggleLts( ) and keeping track of off or on status.","Microprocessors continuously field many operating system and network requests which limit the precision of their schedules. Therefore, goLoop( ), (lines  to ), which updates a display in real-time, keeps its own clock with variable t2 instead of presuming that each cycle is refTime milliseconds apart.","When a beat cycle starts, phase 1 is active first. Therefore, rtuPhs2Thresh indicates a timestamp that marks a transition to phase 2 and rtuPhs1Thresh indicates a timestamp that marks a transition to a next cycle's phase 1. Upon initiation of the next cycle, both thresholds are updated. Hence, the beat is within phase 1 if t1 is less than rtuPhs2Thresh and rtuPhs1Thresh. It is within phase 2 if t1 is greater than rtuPhs2Thresh and less than rtuPhs1Thresh. Procedure goLoop( ) initiates phase 1 of the next cycle if t1 is greater than rtuPhs2Thresh and rtuPhs1Thresh. Note that a new phase 1 may be instigated by setting both rtuPhs2Thresh and rtuPhs1Thresh to a negative number such as \u221260e30 because any t1 timestamp will be positive and therefore greater.","Each phase may update object position indices numerous times, (i.e. using the same delta), before switching phases. Variable rtt2Threshold keeps track of exactly when these intraphase updates occur for both phase 1 and phase 2. Because the phase periods, (timed by rtuPhs2Thresh and rtuPhs1Thresh), are integer multiples of the phase update times, (timed by rtt2Threshold), the interphase transitions occur at the end of intraphase updates.","When a cue touch item is activated or rotation is toggled on, setRot( ), rstPosition( ), or toggleRot( ) sets rstPhs1, (see lines , , and ). Hence, goLoop( ) imposes negative values on the thresholds, (see lines , ). Thereafter, goLoop( ) computes threshold values using a starting timestamp of t1, (see lines , , , and ). However, to avoid accumulating micro-errors due to imprecision of the schedule of a processor, the thresholds update themselves by theoretically perfect values thereafter, (i.e. even if a cycle starts a little late).","Procedure goLoop( ) is called each refTime milliseconds, which for one embodiment is half of minUpdate, a delay before a position index changes. In this case, each alternate goLoop( ) cycle has a position index that is the same as for the last cycle, because the test on line  fails. However, it still interpolates new object coordinates based on speed and direction of the last cycle and what portion of the update time has passed, (see lines  to ). Tests on lines  to  prevent coordinate interpolation, if a limit position is active for comported legato flow. Objects temporarily hesitate in place. For one embodiment, a variable named, \u201cfuzzFlag,\u201d may be set within strVars.txt, causing objects to jump amongst a set of four coordinates in the neighborhood of a limit position. They are defined by variables fuzzIncr1a, fuzzIncr1b, (see lines  and ), fuzzIncr2a and fuzzIncr2b, (see lines  and ), also specified within strVars.txt. Another embodiment, may add this \u201cfuzzy stop\u201d option to staccato flow or even no movement.","Variable refTime controls display refresh time for both cueStage.txt and tdiObjShow.txt. Larger refTime values may be used, for example, to reduce CPU usage, ease reading of text-based three-dimensional image objects, or add a slow motion effect to a choreographic work. For large refTime values, it makes sense to match minUpdate to refTime. Procedure goLoop( ) can update position indices without losing intermediate changes due to infrequent cycles.","Tdiobjshow.Txt","When tdiObjShow.txt is called from buildShow.txt, line  holds true. Lines  to  set some global variables. Line  calls function \u201ccmdParse( ),\u201d (lines  to ) to parse a command line from buildShow.txt. Lines  to  initialize variables to take care of any option not mentioned by buildShow.txt. A \u201cfor\u201d loop from lines  to  inspects and interprets command line arguments. Some arguments, like \u201c\u2212s\u201d, are self-contained, whereas other options, like \u201c\u2212t<seconds>\u201d, expect a data word to follow. Logic on Line  is true whether \u201c\u2212s\u201d is by itself or combined with another self-contained option such as \u201c\u2212n\u201d, (e.g. \u201c\u2212sn\u201d). Lines  to , however, mandate that arguments like \u201c\u2212t<seconds>\u201d not be merged with others. Any non-option argument is presumed to be a list of three-dimensional image object names, a selection show lineup. A medley show is specified with a \u201c\u2212d<photo directory>\u201d option.","Show Lineup","A lineup is appended to a \u201ctdiNames\u201d list variable on lines  to  for a selection show. A medley show invokes function \u201cmkTdiDb( ),\u201d (lines  to ), to make three-dimensional image objects on the fly from photos found in a directory. Names of those dynamically created objects are then added to tdiNames (see line ). If line  discovers that mkTdiDb( ) did not set variable \u201cphoDbDir,\u201d (because no photos were found in the directory, for example), the show is cancelled. If line  ascertains that tdiNames doesn't hold any names, the show ends, (after a usage statement is printed). Hence, if line  doesn't see phoDbDir, it simply implies a selection show is pertinent, instead of a medley show. Line  sets variable \u201ctdiDbActive\u201d to a global variable, \u201ctdiDb.\u201d Variable tdiDb is defined on line  and depicted in  as the upper tdiObjectDb.txt database file. It stores object specifications generated with the page of . Otherwise line  sets tdiDbActive to the lower tdiObjectDb.txt file portrayed in . It represents a temporary, auto-generated database for a medley show.","Line  calls function \u201cmkTdiMinDb( ),\u201d (lines  to ), which produces a file named, \u201ctdiMinDb.txt,\u201d (see lines , , and ), depicted in . The file is a lean copy of tdiDbActive. It contains database entries referred to by variable tdiNames. Thus, intrashow lookups, (i.e. for object set transitions), are generally faster for selection shows, since there are likely fewer entries to contend with. A medley show database is already trim.","Function mkTdiMinDb( ) also adds a default background scenery database entry, (see lines  to  and  to ), and returns variables \u201ctdiMinDbMap\u201d and \u201cfoundCount.\u201d Variable tdiMinDbMap maps where each three-dimensional image object database entry is within tdiMinDb.txt. Give tdiMinDbMap a name and it returns a line number, replacing multiple search string compare computations and reducing lookup time. Variable foundCount tells how many unique names in tdiNames were actually present within the tdiDbActive database, plus one for default background scenery, (if the custom scenery option of  is off). Lines  to  compile \u201cnotFound\u201d and \u201cbldFail\u201d lists and pare down tdiNames correspondingly. If names are found within tdiMinDb.txt, but their message authentication codes aren't valid, they are added to the bldFail list and variable foundCount is decremented. If foundCount is zero, an error is printed before show cancellation (see lines  to ). Otherwise a warning is printed for names not found and\/or not validated, but the show goes on, (see lines  to )! If tdiObjShow.txt is run without any command line arguments, a show is cancelled after printing a usage statement, (see lines  to ).","Refresh Time","A show is a go when function \u201crun( ),\u201d (see lines  to ), is called on lines  to . Broadly speaking, setup occurs from lines  to , and an event loop entered on line . As with goLoop( ) in cueStage.txt, variable refTime, specifies a cycle time. It is read from strVars.txt as depicted in . On line , variable \u201ctimePassed\u201d gets a number of milliseconds since a last iteration from function \u201cclock.tick( ).\u201d Line  lets tdiObjShow.txt sleep awhile longer if refTime milliseconds have not yet passed. Line  includes actual slept time, (per CPU scheduling precision), in timePassed. As units for timePassed are milliseconds, line  divides by one thousand to yield variable \u201ctimePassedSeconds,\u201d with units of seconds.","Second Individual Real-Time Direction Inputs","Variable \u201ceventList\u201d stores second individual real-time direction inputs, gathered by function \u201cpygame.event.get( ),\u201d on line . For one embodiment, events are included for window resizing and closing, keyboard key pushing and releasing, mouse movement, and mouse button pushing and releasing. For a different embodiment, an eventList may include internal or separately linked motion sensor readings, touch screen gestures, optical pattern recognition data, joy stick particulars, game pad specifics, etc.","If the \u201cbegin show\u201d button of  is activated with the \u201cview mode\u201d checkbutton selected, function cmdParse( ) finds \u201c\u2212y\u201d on a command line and sets variable \u201cpscPlay\u201d to 1. Line  is true. Lines  to  check eventList for interrupts or window resizings. If none are found, live events are ignored. Instead, previously recorded second individual real-time direction inputs are substituted, (see lines  to ).","Multiple input activations may be grouped together, for a given event loop iteration, whether live or recorded. Variable \u201cdlyList\u201d matches each eventList item with a time duration. If several live events are selected at once, the last one is associated with timePassedSeconds on line . The other events get zero on line  to account for their simultaneity. Live events are removed when eventList is initialized to an empty list on line . Recorded inputs are appended on lines , , .","Second Individual Real-Time Direction Recordings","A recorded eventList derives from variable \u201cevtSched,\u201d (for event schedule) and psc_1.txt, the cache file depicted in , which is written upon conclusion of an \u201cedit mode\u201d show. Lines  to  build variable \u201cpscSched,\u201d (for postproduction command schedule). Function \u201cformatEvents( ),\u201d (lines  to ), produces evtSched on line . Function formatEvents( ) filters eventList-specific press codes and converts from short, byte-conserving psc_1.txt format to pygame.event.get( ) format.","If the \u201cbegin show\u201d button of  is activated with the \u201cedit mode\u201d checkbutton selected, variable pscPlay is 0, and \u201cnot pscPlay\u201d is true. Function pygame.event.get( ) gathers many events, including superfluous ones. Therefore, lines  to  check each event to see if it matches a pertinent second individual real-time direction. Upon finding a match, it is acted upon. Also, a short identifier code, for the second individual real-time direction input, is appended to variable \u201cpoCmds2,\u201d (for postproduction commands). The codes are eventually written to cache file psc_1.txt. Although it would be straightforward to store each pygame.event.get( ) list within psc_1.txt, an advantage of one or more aspects is a comparatively smaller file size. The psc_1.txt file represents second individual real-time direction recordings that are included as part of an export text file. Hence, decreasing file size for psc_1.txt, lowers file size for a subsequent export text file.","Each line of psc_1.txt consists of a list of second individual real-time direction input codes, and a time delay to wait before moving on, (see lines  to ,  to ,  to , ). When a code is stored in variable poCmds2, variable timePassed informs how much time passed since a previous iteration. Variable \u201cpoDly,\u201d (for postproduction delay), sums each iteration to find total delay from poCmds2 receiving a previous code to a current one. This delay fits psc_1.txt format for the previous code!","Line  sets variable \u201cdlyIdx,\u201d (for delay index), to \u22121. Line  increments it for each pass through an event \u201cfor\u201d loop declared on line . Variable dlyIdx is therefore zero, (and \u201cnot dlyIdx\u201d is true), on a first iteration. Hence, lines  and  to  are likewise invoked on the first iteration, (for an \u201cedit mode\u201d show). Variable \u201cpoCmds\u201d is initialized as an empty list on line  and represents a previous set of input codes. That is, when an input code is received by poCmds2 during an \u201cedit mode\u201d show, line  is true. Variable \u201cpscSched\u201d creates a list containing poCmds and poDly on line . It is appended to variable \u201cpscSchedList\u201d on line . Variable pscSchedList is written out to file psc_1.txt upon show close, (lines  to ). After poCmds is recorded by pscSchedList, it is time to set up the next iteration. Hence, the current input code gets transferred from poCmds2 to poCmds, to become the previous input code for the next iteration, (line ). Also, poCmds2 and poDly are cleared, (lines , ).","As a result, psc_1.txt usually starts off with a first line containing an empty set of input codes. Delays on each line total to the running time of a \u201cview mode\u201d show. A last line usually consists of an escape, \u201ces,\u201d input code and a 0 delay as per lines ,  to .","Initially, variable \u201cevtTimer\u201d is 0 (line ) and on a first loop becomes negative timePassedSeconds (line ), (i.e. negative refTime, or thereabouts). A negative amount tells how much evtSched time may be processed. Variable evtTimer becomes more negative for each new event loop. A \u201cwhile\u201d loop on line  processes evtSched entries until evtTimer climbs out of negative territory, (line ), or evtSched entries run out, (line ). Each entry of evtSched may contain multiple simultaneous events. Each one runs through the event \u201cfor\u201d loop declared on line , (and extending to line ).","Variable refTime is not a fixed constant. It is determined by strVars.txt and may be changed using the customization process or editing strVars.txt. For a \u201cview mode\u201d show, refTime may be larger than when its second individual real-time directions were recorded by a corresponding \u201cedit mode\u201d show. For example, different devices may have varying graphics capabilities. Variable refTime may be increased to ease device resource usage. Perhaps refTime is greater to conserve battery power, reduce background processing cycles, improve visibility and\/or readability of three-dimensional image objects, or even to achieve an artistic slow motion effect. Hence, multiple evtSched entries may be read and compiled into the substitute eventList. Because eventList may therefore consist of consecutive events, dlyList keeps track of duration for each item. It allows a playback to catch-up, during each refTime loop, without skipping any intermediate computations. To further enhance accuracy, each batch of dlyList entries totals to timePassedSeconds. A last event duration may be shortened, thereby preventing a playback from jumping ahead of a recording, (lines  and ). Any time left over is handled with an artificial \u201cwait\u201d event at the start of a next loop. The previous loop is thereby allowed to finish and stay synchronized to the recording, (lines  to ).","Line  checks for empty evtSched entries. They occur for a first entry, (see poCmds comments above), and \u201ctime filler\u201d entries precipitated by formatEvents( ), when it prunes away pressList items from pscSched, (see below). Artificial \u201cwait\u201d events get their corresponding dlyList values recognized. Line  bypasses empty event lists. Lines  to  add individual events from an evtSched event list to eventList. Since each evtSched event list represents simultaneously recorded events, a last event dlyList value is the full duration (lines  to ). The rest are naught, (lines  to ).","Lines  to  close a show when evtSched is depleted, as long as an \u201ces\u201d code finishes psc_1.txt. Line  invokes \u201cedit mode\u201d functionality by resetting pscPlay to zero. Regardless of the mode switch, the \u201cescape\u201d event closes a show without user input, (see lines , ,  to ). Variable timePassed is set to zero on line , preventing psc_1.txt from being overwritten by line . A different embodiment could append new second individual real-time directions at the end of a \u201cview mode\u201d show, by jumping to \u201cedit mode!\u201d Such operation is enabled by removing the final \u201ces\u201d code line from a psc_1.txt file before a \u201cview mode\u201d show begins. As a show progresses in \u201cview mode,\u201d a recorded substitute eventList is treated the same as a live one, updating pscSchedList regularly (line ). When evtSched is depleted, line  resets pscPlay, invoking \u201cedit mode\u201d functionality. With an \u201ces\u201d code missing, timePassed is updated upon a next loop, (lines , ), and an eventual user-initiated show close will write out all, (original plus appended), second individual real-time directions normally.","Lines  to  add an artificial \u201cnone\u201d event to eventList. It ensures the event \u201cfor\u201d loop declared on line  is cycled at least once, and timePassed gets recognized. The lines are invoked during an \u201cedit mode\u201d show when no second individual real-time directions are given. A \u201cview mode\u201d show uses them when a duration for a current evtSched entry is equivalent to multiple refTime event loop cycles.","Second Individual Real-Time Directions","A first \u201cfor\u201d loop \u201cif\u201d clause, (lines  to ), takes care of recording second individual real-time directions within poCmds2 and implementing features that may be provided immediately, (i.e. within a same refTime loop). For example, although a press or release of an \u201ca\u201d key may be recorded, (lines , , , , , and ), motion calculations are not enacted, (i.e. to move a virtual perspective backwards), which generally occur over multiple refTime loops.","Initial Individual Real-Time Direction Recordings","Variables \u201cedGldOffset,\u201d (for edge glide offset), and \u201cipRotOffset,\u201d (for in-place rotation offset) determine position and rotation of three-dimensional image objects and are set on lines  to . Variable \u201ccueSpeed\u201d indicates whether objects, and edGldOffset, follow initial individual real-time directions. Line  holds objects still during a pause, by preventing any changes to edGldOffset or ipRotOffset. If cueSpeed is 1, line  sets edGldOffset to variable \u201cedGldOffsetCalc,\u201d derived from cueStage.txt cache file, cue_3.txt, depicted in , and \u201cspdSched,\u201d (see lines  to ). Variables edGldOffset and ipRotOffset are in units of indices. For one embodiment, 256 indices are used, and therefore each update is modulo 256. Both edGldOffset and ipRotOffset are real numbers, to allow for interpolation between indices, if specified.","Lines  to  prepare edGldOffsetCalc by way of spdSched. Lines  to  update \u201cspdTimer.\u201d During an \u201cedit mode\u201d show, whether one or multiple or no (i.e. \u201cnone\u201d artificial event) events are detected, spdTimer is updated once, (i.e. when dlyIdx is 0), with a full timePassedSeconds. For a \u201cview mode\u201d show, (i.e. pscPlay is 1), an artificial \u201cnone\u201d event indicates that evtTimer is positive. An event loop is run once on an obligatory basis, and spdTimer gets a whole timePassedSeconds. Otherwise, eventList is updated with a current evtSched entry or entries and spdTimer is updated on a per event basis via dlyList.","As with evtTimer, a negative spdTimer allows reading one or more entries from spdSched. For legato flow, spdSched contains phase 1 and phase 2 starting positions, speeds, and durations for each beat. For staccato flow, spdSched contains phase 1 starting position, speed (equal to 0), and duration for each beat. Lines  and  give edGldOffsetCalc based on the current spdSched entry. Lines ,  calculate a current offset with a same spdSched entry used in a previous loop, but with a new, smaller spdTimer value.","If a pause command ensues, audio and\/or video recordings continue playing, (three-dimensional image objects stop), and spdTimer continues counting. That way, after the pause, objects catch-up and continue from where they would have been had there not been a pause.","Once a spdSched is exhausted, lines  to  turn speed control back over to second individual real-time direction inputs, for one embodiment. In particular, resetting cueSpeed on line , prevents spdTimer from being updated again, by way of line .","Lines  to  formulate variable \u201clightsOn,\u201d which turns on and off \u201cstage lights,\u201d based on cueStage.txt cache file, cue_5.txt, and variable \u201cltsSched,\u201d (see , lines  to ). Three-dimensional image objects are either rendered on a display or not. Time tracking is analogous to that for spdSched.","Object Set Transitions","Lines  to  update variable \u201csdxTimer,\u201d which tracks display time for each set of three-dimensional image objects. A \u201cslide show\u201d presents one object on a screen at once. A \u201cnormal show\u201d exhibits up to six, for one embodiment. A new set of objects, (if available from a lineup or photo folder, for a selection show or medley show, respectively), takes over when sdxTimer reaches a \u201cviewTime\u201d limit, (see lines ,  to ,  to , , , and  to ). For one embodiment, objects are spaced at positions 0, 2, 4, 6, 8 and 10, or indices 0, 32, 64, 96, 128, and 160, (for up to six objects). A \u201cpreloadTime\u201d is at 72% of viewTime (line ). Preparations for a transition begin by uploading a next set of \u201ccubes\u201d and \u201ctextures,\u201d (i.e. images), to graphics hardware, (see lines  to ).","An upload may take more time than a refTime loop period. Variable timePassed does not reflect the excess time, and edGldOffset and ipRotOffset do not grow abnormally large, because a clock is reset on line  (on the previous loop). Objects appear to halt momentarily, but then continue from where they left off. Of course, initial individual real-time directions may get out-of-synch with an audio recording if a preload pause was not planned for. Preload times may vary depending on such factors as amount of data uploaded, software efficiency, and hardware performance specifications. Another embodiment may remove, or provide an option to remove, a clock reset, to keep post preload pause movements synchronized. Another embodiment could use multiple \u201cpreloadTimeX\u201d values to better spread-out upload background processes, reducing and perhaps preventing preload pauses.","By line , after an upload, sdxTimer is set to a second before \u201ctransTime.\u201d Variable transTime marks the introduction of a new set of objects at interstitial pattern positions 15, 1, 3, 5, 7, and 9, or indices 240, 16, 48, 80, 112, and 144. Variable sdxTimer is artificially set to ensure that it starts a transition at the beginning. For example, an upload could take excessive time and a clock, (for another embodiment), may not reset. For one embodiment and a \u201cnormal show,\u201d transTime allows 10 seconds for a transition. New cubes gradually move from their interstitial positions to primary positions. Old cubes likewise move to interstitial positions before disappearing. A \u201cslide show\u201d transition, for one embodiment, endures for 2 seconds. However, if transTime numbers represent more than 14% of viewTime, then a transition period is limited to the smaller 14%, (see lines  to ). Lines  to  generate new cube index coordinates, \u201cncxCoords.\u201d Variable \u201csdxOffset\u201d is a slide index that gradually moves old and new cubes an additional amount during a transition. When sdxTimer is equal to transTime, sdxOffset is zero. As sdxTimer approaches viewTime, sdxOffset approaches 15. After sdxTimer reaches viewTime, old cubes are deleted and sdxTimer and sdxOffset are reset to zero (lines  to  and  to ).","Lines  to  update \u201crptTimer\u201d to implement autorepeat for certain second individual real-time direction inputs. For one embodiment, keyboard key \u201cj\u201d implements a \u201cjump\u201d direction discussed with . The user jumps from one image to another among all displayed three-dimensional image objects. For one embodiment, the top and bottom faces of each object are skipped. Variable \u201cjmpNum\u201d determines the number of faces to skip, if any, and may be modified using the customization process or editing strVars.txt. If the user continuously holds down the \u201cj\u201d key, a next image appears each 150 milliseconds, for one embodiment. Variable \u201crptInterval\u201d determines the 150 millisecond repeat interval and may be modified using the customization process or editing strVars.txt.","Lines  to  update poDly and pscSchedList. Each event is appended to poCmds2 as it happens. Variable poCmds contains events occurring in a previous loop. For a new event, line  is true and poCmds and poDly are combined in a list and appended to pscSchedList. Variable poDly represents a duration for poCmds, before another event happens. To set up a next loop, poCmds gets poCmds2, which is then cleared, as is poDly.","Events are polled each refTime milliseconds. Hence, accuracy is about +\/\u2212refTime milliseconds. Consider that second individual real-time direction recordings may invoke a pause and subsequent virtual perspective changes, for example. Another embodiment, therefore, may provide an option to adjust a start time, to improve playback pause precision. Another embodiment may use an interrupt technique, (instead of polling), to improve timing precision.","Freeze","Lines  to  mandate each refTime loop be extended to at least one second if a \u201cfreeze\u201d second individual real-time direction is given. Freeze signifies a show window is unresponsive except for unfreezing, unhiding, or quitting. Hence, an event loop continues checking for unfreeze, unhide, and quit events. However, all code related to object positions and rotations and virtual perspective changes is bypassed. Although halted three-dimensional image objects are still displayed, device resource usage is dramatically reduced. A freeze effectively stops simulation time. It therefore remains an unrecorded second individual real-time direction.","Line , for an \u201cedit mode\u201d show, makes a one entry list from a large tuple returned by method \u201cpygame.key.get_pressed( ).\u201d If a particular keyboard key is pressed, a 1 is given for its entry within the tuple, otherwise 0. For a \u201cview mode\u201d show, variable \u201cpressList\u201d is created from \u201cprsSched\u201d entries. Variable prsSched is derived from the same data as evtSched, (i.e. psc_1.txt and pscSched). It pays attention to a different set of keys. It tracks their ongoing status instead of just individual press and release events. A pressed dictionary is initialized on lines  to , indicating keys are released. A prsSched is created on line  by calling function \u201cformatPressed( ).\u201d It returns a list of pressed dictionaries and their respective durations throughout a show.","Virtual Perspective Change, Pan, Jump","Similar to the \u201cfor\u201d loop for eventList, lines  to  form a \u201cfor\u201d loop for pressList. It helps update virtual perspective changes from Stage View, pan an image in Face View, and jump to a new image using autorepeat in Face View. Lines  to  reset virtual perspective vectors, \u201crotationDirection\u201d and \u201cmovementDirection,\u201d based on a current pressed dictionary. Lines  to  increment or decrement \u201cfmrOffset,\u201d (for face view (mode) right offset), and \u201cfmuOffset,\u201d (for face view (mode) up offset), for panning in Face View. Lines  to  jump to a next image if variable rptTimer has reached the rptInterval limit. Lines  to  calculate virtual perspective changes from Stage View.","Survey View, Face View","Instead of an independent virtual perspective, Survey View locks a perspective view, or camera, over a current object. Object position changes are matched to cancel object motion. A steady close-up watch over a rotating, apparently stationary object is achieved, (lines  to ). Likewise, Face View keeps a constant gaze above a single face of a current three-dimensional image object. Shifts and twirls of the object are cancelled by automatically shifting and twirling the virtual perspective view, (lines  to ).","Stage View","Each position within \u201cipRot\u201d and \u201ciniZeroAngle\u201d lists, for one embodiment, is \u201con\u201d, (lines  to ,  to ,  to ). However, these lists may be modified using the customization process or editing strVars.txt. If an ipRot entry is \u201coff\u201d, then an object in that corresponding position doesn't rotate in-place. If an iniZeroAngle entry is \u201coff\u201d, then an object in that corresponding position has a skewed in-place rotation angle offset.","Background Scenery","A background scene, background enclosure, or \u201csky cube,\u201d is easily rendered when depth analysis and GL_CULL_FACE are disabled, (see lines  to  and  to ). For one embodiment, background scenery is normally off. Variable \u201cskyOn\u201d is 0. However, if a virtual perspective moves a significant distance from a starting coordinate, (0.0, 0.0, vz+czp\/2.0), background scenery appears. Variable skyOn is set to 1, (see lines  to  and  to ). Variable skyOn may also be set by way of a second individual real-time direction input, (keyboard key \u201ck,\u201d for one embodiment). After skyOn is set, additional directions are enacted by toggling variable \u201cskyMask.\u201d Selecting the \u201con at start\u201d checkbutton of  is another way that skyOn is set. Function cmdParse( ) finds a \u201c\u2212s\u201d command line option in that case, (see line  to , ,  to , and ).","Index 0 of a \u201ccubes\u201d list refers to the sky cube, which when rendered, for one embodiment, has a choice between two standard orientations, determined by the \u201calternate orientation\u201d checkbutton of  and a \u201c\u2212a\u201d command line option, (see lines ,  to , , and  to ).","If variable \u201cskyFlag\u201d is set, functions cubes[0].render( ), (lines  to ), and reorient( ), (lines  to ), distinguish a sky cube from standard three-dimensional image objects. For example, images of the sky cube may be mirrored from left-to-right to account for an inside, rather than outside, view, (see lines , , , , , and ). Left and right images may be swapped if they constitute left and right sides of an object, instead of a panoramic scene, (see lines  to  and  to ). Other transpositions may accompany an object, to make left, right, top, and bottom faces resemble mirrors, (see lines  to ,  to ,  to , and  to ). Although function reorient( ) scales regular three-dimensional image objects to keep them onscreen, (lines  to ), it does not scale the sky cube, for one embodiment. A perspective view provides its own location coordinate to establish a center of the sky cube. Therefore, although the perspective view twists and translates, faces of the sky cube remain at a constant, inside distance.","After current changes of a refTime loop are added to variable \u201ccameraMatrix,\u201d line  uploads it to graphics hardware via an \u201cOpenGL API,\u201d (for open graphics language application programming interface). It informs graphics hardware which virtual perspective to portray, (see McGugan, Will \u201cBeginning Game Development with Python and Pygame,\u201d Berkeley, Calif.: Apress, 2007, p. 204).","The rest of the refTime loop determines a current location and rotation angle for each three-dimensional image object, (lines  to ). They are rendered if variable lightsOn is set, ( to ). Object sets of a show lineup are tracked and transitions, if any, are handled. Variable sdxTimer grows from 0 to preloadTime, (lines  to ), then beyond tranTime, (lines  to ,  to ,  to ,  to , and  to ), and finally to viewTime, (lines  to ). Line  switches graphics hardware buffers, displaying what is current!","For a given \u201cnormal show\u201d or \u201cslide show,\u201d the user decides on a quantity of three-dimensional image objects. How many objects are displayed together, including the sky cube, (before a transition), is \u201cnumTexs,\u201d (for number of textured objects, lines  to ). A total number of objects in a lineup, minus the sky cube, is \u201cnumCubes,\u201d for one embodiment, (line ).","Three-Dimensional Image Objects","File tdiMinDb.txt, depicted in , lists a name for each three-dimensional image object in a show. For each object, it also lists hue, hue command, polygon identifiers, (i.e. \u201cfront,\u201d \u201cright,\u201d \u201cback,\u201d \u201cleft,\u201d \u201ctop,\u201d and \u201cbottom\u201d, for one embodiment), and image file names to be applied as textures to those polygons, (i.e. rectangles, for one embodiment). The file is indexed by variable tdiMinDbMap. Both the file and the index are created by function cmdParse( ), described earlier. For each three-dimensional image object whose portrayal is imminent, function \u201ctexLoad( ),\u201d (for texture load, lines  to ), pulls a relevant dictionary line out of tdiMinDb.txt. It uses the information to create an instance of a \u201cTdi\u201d class. It appends the instance to a \u201ctdis,\u201d (for three-dimensional image objects), list, (lines  to ). Anticipating a need to read and convert image file data for use by graphics hardware, it also appends an instance of a \u201cTdiTexture\u201d class to a \u201ctexs,\u201d (for textures), list, (lines  to ). Loading data from disk files to program memory structures speeds up subsequent accesses, improving show performance. To further reduce slow disk file reads and memory resource usage, texLoad( ) builds variable \u201ctdiRdnMap,\u201d (for tdi redundant map). It is an index for three-dimensional image objects already loaded into memory. They don't have to be loaded again, if a show lineup contains duplicates, (lines  to ).","Variable \u201cclrMap,\u201d (for color map, lines  to , ), is a numbered dictionary of six (red, green, blue) color tuples, representing red, orange, yellow, green, blue, and violet. Each object has a \u201ccolors\u201d list, mapping each face with a random color, (lines  to ), for one embodiment. Before readying a new set of objects for display, a single random index is chosen. From that single random number, the face colors for the new objects are determined. The random index is incremented between texLoad( ) calls. This method prevents a single object from being assigned a same color twice (i.e. to different polygons), for one embodiment. It also assures variation among similar sides, when using object set sizes of six or less, (lines ,  to ,  to ,  to ), for one embodiment. Variable clrMap may be modified using the customization process or editing strVars.txt.","If variable tdiRdnMap already contains a name, then variable \u201cpreI,\u201d (for previous index), on line , receives an index greater than or equal to zero. Line  evaluates true. Data previously loaded is assigned to a TdiTexture instance, (lines  to ). Otherwise, each face, when an image file is matched to it, loads the image file onto a pygame surface. Image width and height are recorded, (line ). Function \u201cchkPhoto( )\u201d is run, (line ). The function, (lines  to ), reduces dimensions if they exceed variable \u201cmaxSize,\u201d determined by which \u201cresolution\u201d checkbutton of  is selected, (see lines  to , ,  to ). It adjusts dimensions to a power-of-two if variable \u201cpowerOf2\u201d is set, because the \u201cresize photos\u201d checkbutton of  is selected. A potentially modified surface is then converted into a string by function \u201cpygame.image.tostring( ).\u201d It is stored in a \u201cdataF,\u201d \u201cdataR,\u201d \u201cdataB,\u201d \u201cdataL,\u201d \u201cdataT,\u201d or \u201cdataM\u201d variable appropriate for the front, right, back, left, top or bottom face, respectively, (lines  to ). It is ready for upload to graphics hardware. If no photo is assigned to a face, zeros are assigned to the relevant variables, (lines  to ).","After texture data is loaded into internal memory, function \u201ctexUpload( ),\u201d (lines  to ), uploads it to graphics hardware.","Three-dimensional image object faces without an assigned photo, may substitute a solid color, for one embodiment. The colors are brightest if they tinge a plain white background image, such as global variable \u201cunkFile,\u201d (for unknown file, line ). A string conversion for an unkFile pygame surface, along with width and height information, are organized within variable \u201cunk.\u201d It is an instance of class \u201cUnk,\u201d (lines  to ,  to ). Function \u201cunkUpload( ),\u201d (lines  to ), sends it to graphics hardware, (lines , , , , , and ).","After graphics hardware has been primed with textures, a list of instances of class \u201cCube,\u201d (lines  to ), cubes, defines each grouping of \u201cGL QUADS\u201d that make up geometrical objects, for one embodiment, ( to , ,  to ,  to , and  to ).","Function \u201creorient( ),\u201d (lines  to ), scales three dimensional image objects and their track. It calculates an amount of z-axis depth for Survey View or Face View, \u201cvzSlideP,\u201d (lines  to ) It prepares \u201cposCoords,\u201d a list of coordinates mapping object locations to indices, (lines  to ). It puts together \u201crotVertsList,\u201d a list of vertex sets mapping object rotation angles to indices, (lines  to ). The latter two lists replace real-time calculations with simple, fast lookups. One embodiment uses 256 indices that are divided into 16 object positions, each with 16 interpositions.","Standard Edge Track",{"@attributes":{"id":"p-0631","num":"0651"},"figref":"FIGS. 115A-115B"},"Variable \u201cacs,\u201d (for adjacent cube space), is 1.3, for one embodiment, (lines , , ). It adds 30% to a width or height dimension to provide object spacings. Variables \u201ccw\u201d and \u201cch,\u201d (for cube width and height), specify object dimensions. Total height for five objects stacked above each other is 5.0*ch*acs. If this height is greater than variable \u201cscrHeight,\u201d (for screen or window height), then some objects won't fit. To prevent this situation, object dimensions are lowered by applying a scaling factor, \u201csclFactor,\u201d less than one. However, if 5.0*cw*acs is even larger with respect to \u201cscrWidth,\u201d than 5.0*ch*acs is with respect to scrHeight, then objects have even less room horizontally. They are scaled accordingly, (lines  to ).","If screen width is \u201cvw,\u201d (for view width), then distance between center coordinates of two horizontal corner cubes is (vw\u2212cw), as depicted in . For one embodiment, each side has an equivalent number of indices. There are, therefore, 256\/4=64 interposition spaces between two horizontal corner cubes. Each one represents a distance of (vw\u2212cw)\/64. Likewise, distance between center coordinates of vertical corner cubes is (vh\u2212ch). A vertical interposition space represents a distance of (vh\u2212ch)\/64, (lines  to ). Other embodiments could use other methods for defining edge tracks. For example, another embodiment could equalize horizontal and vertical interposition spaces.","Function reorient( ), for one embodiment, supports object in-place rotation around either one or two object axes. Each run through the indices, implies a rotation of 360 degrees around an axis. A smooth continuous rotation is achieved, even as a last index loops back to a first index. For two axes, one embodiment divides its 256 indices into quarters. Each 64 indices, rotation switches to an alternate single axis. Therefore, when two axes are involved, each axis has effectively half as many indices in which to rotate 360 degrees. Each set of 64 indices should complete 180 degrees around one of the two axes. Therefore, an increment, update, or delta angle is twice as much for two axes, than if just one axis were involved, (lines  to ).","One embodiment uses one axis for three-dimensional image objects, (lines , , ). One embodiment uses either one or two axes for a sky box. If the \u201calternate orientation\u201d checkbutton of  is selected, then two axes are employed, (lines  to ). Variables \u201cnumAxes,\u201d \u201cnumAxesSky,\u201d (lines , , , ), \u201crotTypes,\u201d (lines , , ), and \u201crotTypesSky,\u201d (lines , , , ), control how many and which axes are used. They may be modified using the customization process or editing strVars.txt. Another embodiment could use a total number of indices greater than 256. Another embodiment could provide up to three axes of rotation. Another embodiment could allow simultaneous rotation around more than one axis, providing 256 indices, (or some other total number of indices), for 360 degrees of rotation, no matter how many axes are involved.","Another embodiment could change position locations of objects, relative to their order within a show lineup. For example, one embodiment maps first through sixth three-dimensional image objects on a lineup, to positions 0, 2, 4, 6, 8 and 10, respectively, (with the custom checkbutton of  left unselected). However, another embodiment could map them to positions 10, 8, 6, 4, 2, and 0, respectively, for example. Additionally, for the standard edge track of , position 0 could be located somewhere other than top center. Successive positions could follow in a counterclockwise fashion, instead of a clockwise fashion. For custom tracks, the \u201creverse draw direction\u201d checkbutton of  provides this latter feature. However, as previously explained, opposite movement directions also occur.","Another embodiment may not specify corner positions, per se, for the standard edge track of . It could divide the rectangular edge track into a total number of equal or unequal interposition lengths.","Functions texLoad( ), texUpload( ), and reorient( ), for one embodiment, set up a sky box once before an event loop starts, (lines  to , ,  to ). Another embodiment could allow new custom scenery continuously throughout a show. For example, each three-dimensional image object set transition could also swap to a different sky box.","Function reorient( ) is called when a show window is resized. It is called when three-dimensional image objects are resized. It determines, as depicted in , object center coordinates for the standard edge track. It takes into account object sizes, screen dimensions, and field of view! Field of view angle, \u201ctheta,\u201d is 60.0 degrees, for one embodiment, (line ). Another embodiment could make theta modifiable using the customization process or editing strVars.txt.","An aspect ratio is defined as (width\/height). It may be approximately 1.6 for a full screen window. It could be 8.0 for a horizontal \u201cstatus bar\u201d type window. It could also be 0.125 for a vertically oriented window. An aspect ratio for a portable device may be greater than or less than 1.0 depending on which 90 degree orientation the user holds it! Variable \u201cfitFlagSky,\u201d if set, fits a background image onto a screen. It constrains aspect ratios for a sky box to match that of a device screen, (lines  to , , ). One embodiment does not set fitFlagSky. However, it may be set using the customization process or editing strVars.txt.","Build Notes, Unpacking Buildshow Embodiment","Unpack and set up the buildShow embodiment. On Mac OS X or Linux, open a \u201cTerminal\u201d window. On Windows, open a \u201cCommand Prompt\u201d window. Change directories, (using \u201ccd\u201d command), to a suitable local directory such as, \u201c\/Users\/kjacobi\/\u201d on Mac OS X or \u201cc:\\Users\\kjacobi\\\u201d on Windows, or \u201c\/home\/kjacobi\/\u201d on Linux. For help with \u201ccd\u201d command, type \u201cman bash\u201d (for on-line manual page for Bourne-again shell), on Mac OS X or Linux, or \u201chelp cd\u201d on Windows.","Copy \u201cbldShwSkel.txt\u201d, (for buildShow skeleton), to the directory using \u201ccp\u201d command for Mac OS X or Linux, or \u201ccopy\u201d command for Windows. For help with \u201ccp\u201d command, type \u201cman cp\u201d. For help with \u201ccopy\u201d command, type \u201chelp copy\u201d. Make new subdirectory, \u201cbin\/\u201d, (using \u201cmkdir\u201d command), and copy \u201cuuDec.txt\u201d, (for uudecode) \u201ctgzExt.txt\u201d, (for tar gzip extract), and \u201ctxtDebut.txt\u201d to it.","Rename bldShwSkel.txt to \u201cbuildShow.tgz.uue\u201d using \u201cmy\u201d command on Mac OS X or Linux, or \u201cmove\u201d command on Windows, (type \u201cman my\u201d or \u201chelp move\u201d for help). Within bin\/subdirectory rename uuDec.txt to \u201cuuDec.py\u201d, tgzExt.txt to \u201ctgzExt.py\u201d, and txtDebut.txt to \u201ctxtDebut.py\u201d.","If \u201cpython\u201d command is not already available, download and install a binary version of it from python.org or activeState.com. A standard build of Python with \u201cos\u201d, \u201csys\u201d, \u201cuu\u201d, and \u201ctarfile\u201d modules is good enough for unpacking the buildShow embodiment. However, a fresh python build, containing additional modules, will be compiled and linked, (see below), for running the buildShow embodiment. Alternatively, \u201cuudecode\u201d and \u201ctar\u201d commands, (if already available), along with a text editor can be used to unpack the buildShow embodiment. A third alternative is to unpack after completing the fresh python build. Unpacking is presented first because it is more straightforward and germane.","On Mac OS X or Linux, type \u201cpython bin\/uuDec.py buildShow.tgz.uue\u201d or \u201cuudecode buildShow.tgz.uue\u201d. On Windows, type \u201cpython bin\\uuDec.py buildShow.tgz.uue\u201d or \u201cuudecode buildShow.tgz.uue\u201d. A resultant binary file, \u201cbuildShow.tgz\u201d, appears in the directory.","Type \u201cpython bin\/tgzExt.py buildShow.tgz\u201d, (or \u201cpython bin\\tgzExt.py buildShow.tgz\u201d on Windows), or \u201ctar xzfp buildShow.tgz\u201d. A resultant subdirectory, \u201cbuildShow\/\u201d, appears in the directory. It establishes a skeleton directory structure with miscellaneous supporting files for the buildShow embodiment. For example, files, \u201cconfig.txt\u201d and \u201cstrVars.txt\u201d are located in \u201cbuildShow\/cueDir\/program\/\u201d subdirectory.","Change to buildShow\/cueDir\/program\/directory, (or buildShow\\cueDir\\program on Windows). Copy \u201ccueStage.txt\u201d to it. Rename cueStage.txt to \u201ccueStage.tcl\u201d.","Change to \u201cbuildShow\/program\/\u201d directory. Copy \u201ctdiObjShow.txt\u201d, \u201cbuildShow.txt\u201d, \u201cmkTxoImgs.txt\u201d, and \u201cchkTxoImg.txt\u201d to it. Rename tdiObjShow.txt to \u201ctdiObjShow.py\u201d. Rename buildShow.txt to \u201cbuildShow.py\u201d. Rename mkTxoImgs.txt to \u201cmkTxoImgs.py\u201d. Rename chkTxoImg.txt to \u201cchkTxoImg.py\u201d.","Change to \u201cbuildShow\/program\/hlp\/\u201d directory. Copy \u201chlpFiles.txt\u201d to it. Type \u201cpython ..\/..\/..\/bin\/txtDebut.py hlpFiles.txt\u201d or use a text editor to manually break hlpFiles.txt into its constituent text files. Twenty text-based files associated with the help button of  appear in the directory. Four of them have a \u201c.xbm,\u201d (for X Window System bitmap), file extension.","Build Notes, Running Buildshow Embodiment","After the fresh python build is complete, (see below), the buildShow embodiment may be run by changing directories to \u201cbuildShow\/program\/\u201d and typing \u201cpython buildShow.py\u201d. On Mac OS X, first typing \u201cexport DISPLAY=:0.0\u201d and \u201copen \/Applications\/Utilities\/X11.app\u201d, may help, (see script file, \u201cbuildShow\/program\/bldShwStartOSX\u201d). The config.txt file may first have to be adjusted for specific local installation paths of Python, Wish, and Mplayer applications, as well as whether current graphics acceleration hardware is compatible with the operating system.","After the buildShow embodiment starts, in order to get the \u201cText Show (Auto-Updated)\u201d selection show of  running, it may be helpful to first delete the show and import it from \u201cbuildShow\/Shows\/\u201d directory. Select the \u201cinclude text list too\u201d checkbutton of  when importing. After importing, make sure the show is highlighted in the listbox of .","To get a \u201cTown\u201d medley show running, it may be helpful to first load it using the load button of , then select \u201cbuildShow\/program\/img\/\u201d as a replacement photo folder using the \u201cphoto folder\u201d buttons of , and save the show using the save button of .","If font size of the buildShow embodiment is too large or small, edit \u201cbuildShow\/Downloads\/enhance0002.txt\u201d. First, go to the options page of  to get a unique identification code similar to that of . Update enhance0002.txt to reflect the unique identification code and a proper font size. For example, a smaller font size of \u201c12\u201d may look better if default \u201c16\u201d looks too big. Copy enhance0002.txt to \u201cbuildShow\/Customize\u201d, and activate the Customize button of . For full effect, restart the buildShow embodiment.","Build Notes, Fresh Python Build (and tcl and tk)","One embodiment uses a 2.26 GHz Intel Core 2 Duo central processor with an Nvidia GeForce 9400M graphics processor on Mac OS X, Linux, or Windows operating systems. An earlier version of the embodiment ran on a 2 GHz Intel Core Duo with an Intel GMA 950 graphics processor. Applying \u201cpatch\u201d fixes to some source code files may help avoid errors during compilation and installation. Make a directory such as \u201c\/Users\/kjacobi\/patchFiles\u201d, and copy \u201cpchFiles.txt\u201d to it. Change to the directory and type \u201cpython ..\/bin\/txtDebut.py pchFiles.txt\u201d. Twenty eight \u201c.pch\u201d, six \u201c.pch.uue\u201d, two \u201c.def\u201d, and three \u201c.tcl\u201d text-based files, are added to the directory. A source code file is \u201cpatched\u201d using a \u201cpatch\u201d command. For example, type, \u201cpatch <source file> <patch file>\u201d. Type \u201cman patch\u201d for more information.","Mac OS X","For Mac OS X, (version 10.7.1), with Xcode, (version 4.1 (4B110)), download, unpack, compile, and install the following open source software package files, (in order): tcl8.5.10-src.tar.gz, bzip2-1.0.6.tar.gz, db-4.6.21.tar.gz, gdbm-1.9.1.tar.gz, expat-2.0.1.tar.gz, gperf-3.0.4.tar.gz, libiconv-1.14.tar.gz, ncurses-5.9.tar.gz, gettext-0.18.1.1.tar.gz, zlib-1.2.5.tar.bz2, openssl-1.0.0e.tar.gz, readline-6.2.tar.gz, sqlite-autoconf-3070701.tar.gz, Python-2.7.2.tar.bz2, freetype-2.4.6.tar.bz2, freetype-doc-2.4.6.tar.bz2, fontconfig-2.8.0.tar.gz, perl-5.12.3.tar.bz2, gettext-1.05.tar.gz, help2man-1.40.4.tar.gz, m4-1.4.16.tar.bz2, autoconf-2.68.tar.bz2, automake-1.11.1.tar.bz2, libtool-2.4.tar.gz, glib-2.28.8.tar.bz2, pkg-config-0.26.tar.gz, bigreqsproto-1.1.1.tar.bz2, inputproto-2.0.2.tar.bz2, kbproto-1.0.5.tar.bz2, xproto-7.0.22.tar.bz2, libXau-1.0.6.tar.bz2, libXdmcp-1.1.0.tar.bz2, libpthread-stubs-0.3.tar.bz2, libxml2-2.7.8.tar.gz, xcb-proto-1.6.tar.bz2, libxcb-1.7.tar.bz2, util-macros-1.15.0.tar.bz2, xcmiscproto-1.2.1.tar.bz2, xextproto-7.2.0.tar.bz2, xf86bigfontproto-1.2.0.tar.bz2, xtrans-1.2.6.tar.bz2, libX11-1.4.4.tar.bz2, renderproto-0.11.1.tar.bz2, libXrender-0.9.6.tar.bz2, libXft-2.2.0.tar.bz2, libXext-1.3.0.tar.bz2, scrnsaverproto-1.2.1.tar.bz2, libXScrnSaver-1.2.1.tar.bz2, tk8.5.10-src.tar.gz, distribute-0.6.21.tar.gz, bdist_mpkg-0.4.4.tar.gz, altgraph-0.9.tar.gz, modulegraph-0.9.1.tar.gz, macholib-1.4.2.tar.gz, py2app-0.6.3.tar.gz, pyobjc-core-2.3.tar.gz, jpegsrc.v8c.tar.gz, libpng-1.4.8.tar.bz2, libICE-1.0.7.tar.bz2, libSM-1.2.0.tar.bz2, libXt-1.1.1.tar.bz2, libXpm-3.5.9.tar.bz, gd-2.0.35.tar.bz2, libidn-1.22.tar.gz, libpaper_1.1.24.tar.gz, tiff-3.9.5.tar.gz, ghostscript-9.04.tar.gz, ghostscript-fonts-other-6.0.tar.gz, mappingresources4pdf_2unicode_20091116.tar.Z, mappingresources4pdf_other 20091116.tar.Z, jasper-1.900.1.zip, jbigkit-2.0.tar.gz, netpbm-10.47.29_0.darwin_11.x86_64.tbz2, gts-0.7.6.tar.gz, cmake-2.8.5.tar.gz, pixman-0.22.2.tar.bz2, xcb-util-0.3.8.tar.bz2, cairo-1.10.2.tar.gz, pango-1.28.4.tar.bz2, libLASi-1.1.0.tar.gz, urw-fonts-1.0.7pre44.tar.bz2, psutils-p17.tar.gz, groff-1.21.tar.gz, libXmu-1.1.0.tar.bz2, libXaw-1.0.9.tar.bz2, graphviz-2.28.0.tar.gz, tcllib-1.13.tar.bz, pycrypto-2.3.tar.gz, randrproto-1.3.2.tar.bz2, libXrandr-1.3.2.tar.bz2, SDL-1.2.14.tar.gz, SDL_image-1.2.10.tar.gz, libogg-1.3.0.tar.gz, flac-1.2.1.tar.gz, libmikmod-3.2.0-beta2.tar.bz2, libvorbis-1.3.2.tar.gz, smpeg-0.4.4.tar.gz, SDL_mixer-1.2.11.tar.gz, SDL_ttf-2.0.10.tar.gz, fftw-3.3.tar.gz, nose-1.1.2.tar.gz, numpy-1.6.1.tar.gz, pygame-1.9.1release.tar.gz, lcms-1.19.tar.gz, Imaging-1.1.7.tar.gz, PyOpenGL-accelerate-3.0.1.tar.gz, PyOpenGL-3.0.1.tar.gz, xvidcore-1.3.2.tar.bz2, a52dec-0.7.4.tar.gz, aalib-1.4rc5.tar.gz, cppunit-1.12.1.tar.gz, dirac-1.0.2.tar.gz, audiofile-0.2.7.tar.gz, esound-0.2.41.tar.bz2, faac-1.28.tar.gz, lame-3.98.4.tar.gz, popt-1.16.tar.gz, libdv-1.0.0.tar.gz, libmad-0.15.1b.tar.gz, libmng-1.0.10.tar.gz, liboil-0.3.17.tar.gz, libtheora-1.1.1.tar.bz2, lzo-2.05.tar.gz, lcms2-2.2.tar.gz, openjpeg_v1_4_sources r697.tgz, orc-0.4.14.tar.gz, schroedinger-1.0.10.tar.gz, speex-1.2rc1.tar.gz, libsndfile-1.0.25.tar.gz, twolame-0.3.13.tar.gz, x264-snapshot-20110628-2245.tar.bz2, xineramaproto-1.2.1.tar.bz2, libXinerama-1.1.1.tar.bz2, videoproto-2.3.1.tar.bz2, libXv-1.0.6.tar.bz2, xf86vidmodeproto-2.3.1.tar.bz2, libXxf86vm-1.1.1.tar.bz2, yasm-1.1.0.tar.gz, mplayer-33766.tar.gz, dejavu-fonts-ttf-2.33.tar.bz2, gameobjects-0.0.3.zip, pytiff-0.1.6.tar.gz.","An open source automation tool for completing the above steps is a \u201cport\u201d command from The MacPorts Project at macports.org. Download and install MacPorts, (version 2.02, (selfupdate on 09\/18\/2011)), and issue the following port commands: \u201cport install tcl+threads+universal\u201d, \u201cport install python27+universal\u201d, \u201cport install tk+universal\u201d, \u201cport install py27-tkinter+universal\u201d, \u201cport install py27-pyobjc+universal\u201d, \u201cport install tcllib\u201d, \u201cport install py27-crypto+universal\u201d, \u201cport install py27-game+universal\u201d, \u201cport install py27-pil+universal\u201d, \u201cport install py27-opengl\u201d, \u201cport install mplayer-devel+osd+x11+noappleremote+mencoder extras+dirac+speex+a52+aa+esd+mng+sdl\u201d, \u201cport install dejavu-fonts\u201d.","Unpack, compile, and install macports source code file, MacPorts-2.0.2.tar.bz2. Specify a \u201cframeworks\u201d directory. For example, make directories \u201c\/opt\u201d, \u201c\/opt\/local\u201d, \u201c\/opt\/local\/applications\u201d, \u201c\/opt\/local\/frameworks\u201d, \u201c\/opt\/local\/tclpackage\u201d, and \u201c\/opt\/local\/tclpackage\/macports2.0\u201d. Make sure PATH environment variable does NOT include any of the above directories, (yet). For example, type \u201cexport PATH=\/usr\/local\/bin:\/usr\/bin:\/bin:\/usr\/sbin:\/sbin:\/usr\/X11\/bin:\/Developer\/usr \/bin:\/Developer\/usr\/sbin\u201d. After unpacking MacPorts-2.0.2.tar.bz2, change directories to resultant \u201cMacPorts-2.0.2\/\u201d subdirectory and type, \u201cmake clean\u201d, \u201c.\/configure --prefix=\/opt\/local --with-install-user=kjacobi --with-install-group=staff --with-applications-dir=\/opt\/local\/applications --with-frameworks-dir=\/opt\/local\/frameworks --with-tclpackage=\/opt\/local\/tclpackage\/macports2.0 --with-included-tclthread\u201d, (consider changing \u201ckjacobi\u201d username), \u201cmake\u201d, \u201cmake install\u201d, \u201cexport PATH=\/opt\/local\/bin:${PATH}\u201d, and \u201crehash\u201d. (Restart computer for good measure.) Typing \u201cwhich port\u201d should return \u201c\/opt\/local\/bin\/port\u201d. Otherwise, fix PATH environment variable to start with \/opt\/local\/bin.","To install gameobjects, type, \u201cunzip gameobjects-0.0.3.zip\u201d, \u201ccd gameobjects-0.0.3\u201d, and \u201cpython2.7 setup.py install\u201d.","To install pytiff, type, \u201ctar xzfp pytiff-0.1.6.tar.gz\u201d, \u201ccd pytiff-0.1.6\u201d, \u201cexport CFLAGS=-I\/opt\/local\/include\u201d, \u201cpatch pytiff.c \/Users\/kjacobi\/patchFiles\/patch-osx-pytiff-0.1.6.pch\u201d, \u201cpython2.7 setup.py build\u201d, and \u201cpython2.7 setup.py install\u201d.","Linux","For Ubuntu Linux, (version 11.04), type \u201csudo apt-get install tk8.5\u201d and \u201csudo apt-get install mplayer\u201d. Use Ubuntu Software Center to install apt-build, python-apt-dev, libept-dev, IDLE, (using Python-2.7, (installs Tkinter)), python-pygame, python-opengl, (including libgle3 add-on), tcllib, libtiff4-dev, (libtiff4 already installed), libtiff-doc, libtiff-tools, libtiff-opengl, pngtools, libjpeg62, libjpeg62-dev, libpng12-dev, and libsmpeg-dev.","To install pytiff, type, \u201ctar xfp pytiff-0.1.6.tar.gz\u201d, \u201ccd pytiff-0.1.6\/\u201d, \u201cpython2.7 setup.py build\u201d, and \u201csudo python2.7 setup.py install\u201d.","To install gameobjects, type, \u201cunzip gameobjects-0.0.3.zip\u201d, \u201ccd gameobjects-0.0.3\/\u201d, and \u201csudo python2.7 setup.py install\u201d.","To install yasm, type, \u201ctar xfp yasm-1.1.0.tar.gz\u201d, \u201ccd yasm-1.1.0\/\u201d, \u201c.\/configure\u201d, \u201cmake\u201d, and \u201csudo make install\u201d.","To install mpg123, type, \u201ctar xfp mpg123-1.13.4.tar.bz2\u201d, \u201ccd mpg123-1.13.4\/\u201d, \u201c.\/configure\u201d, \u201cmake\u201d, and \u201csudo make install\u201d.","To install mplayer, type, \u201ctar xfp mplayer-33766.tar.gz\u201d, \u201ccd mplayer-33766\/\u201d, \u201c.\/configure\u201d, \u201cmake\u201d, and \u201csudo make install\u201d. Before running this version of mplayer, (i.e. \/usr\/local\/bin\/mplayer), type \u201cexport LD_LIBRARY_PATH=\/usr\/local\/lib\u201d. Alternatively, run \/usr\/bin\/mplayer, (which was installed with apt-get command above).","Windows","To use Unix command line tools on Windows, (Microsoft Windows 7 Professional, Service Pack 1, 32-bit), download and install MinGW, (for minimalist Gnu for Windows), from www.mingw.org and sourceforge.net\/projects\/mingw\/. For example, type \u201cmkdir c:\\MinGW\u201d and \u201ccd c:\\MinGW\u201d. Download up to about 166 different package files, such as binutils-2.21.53-1-mingw32-bin.tar.lzma and gcc-core-4.6.1-2-mingw32-bin.tar.lzma, to the c:\\MinGW directory and unpack them. One unpacking method is to use \u201ctar xfp\u201d command on Mac OS X or Linux for \u201c.tar.gz\u201d, \u201c.tar.bz2\u201d, and \u201c.tar.lzma\u201d package files and then copy an entire directory, with the unpacked files, to Windows. Add \u201cc:\\MinGW\\bin\u201d to PATH environment variable, (open Start menu, right-click on Computer, left-click on Properties, click on \u201cAdvanced system settings\u201d link, click on \u201cEnvironment Variables . . . \u201d button, highlight \u201cPath\u201d in \u201cSystem variables\u201d listbox, and press \u201cEdit . . . \u201d button). Type \u201cmkdir c:\\MinGW\\MSYS\\\u201d, \u201cmkdir c:\\MinGW\\MSYS\\1.0\\\u201d and \u201ccd c:\\MinGW\\MSYS\\1.0\\\u201d. Download up to about 327 different package files, such as binutils-2.19.51-3-msys-1.0.13-bin.tar.lzma and coreutils-5.97-3-msys-1.0.13-bin.tar.lzma, to the c:\\MinGW\\MSYS\\1.0\\ directory and unpack them. From within the directory, type \u201cmsys.bat\u201d, and a new MSYS terminal window appears which emulates a bash Unix shell! In the new window, type \u201c\/postinstall\/pi.sh\u201d. Add \u201cc:\\MinGW\\MSYS\\1.0\\bin\\\u201d to PATH environment variable.","To use native Windows tools, buy Microsoft Visual Studio 2010 Professional on amazon.com, (i.e. current for 11\/8\/2010).","Download and install Windows SDK7.1, (for Software Development Kit) from microsoft.com, (i.e. download.microsoft.com\/download\/F\/1\/0\/F10113F5-B750-4969-A255-274341AC6BCE\/GRMSDK_EN_DVD.iso). Burn GRMSDK_EN_DVD.iso to CD-R. Run Setup.exe. Select all components except Microsoft Help stuff.","Download and install Service Pack 1 for Microsoft Visual Studio 2010 from microsoft.com, (i.e. http:\/\/go.microsoft.com\/fwlink\/? LinkId=210710). Burn VS2010SP1dvd1.iso to a DVD-R disk. Run Setup.exe.","Download and install Microsoft Exchange 2003 SDK, June2007, from microsoft.com. Run E2k3SDK.exe.","Download and install Microsoft HTML Help Workshop, from microsoft.com, (i.e. http:\/\/go.microsoft.com\/fwlink\/?LinkId=14188). Run htmlhelp.exe.","Search for \u201ccabarc.exe\u201d on go.microsoft.com. Download WindowsXP-KB838079-SupportTools-ENU.exe, install it on a Windows XP machine. Back on Windows 7 machine, using Command Prompt window, type, \u201cmkdir c:\\Users\\kjacobi\\bin\\\u201d, (if haven't already done so). Place cabarc.exe in it. Add c:\\Users\\kjacobi\\bin\\ to PATH environment variable.","Download and install Microsoft DirectX SDK, from microsoft.com. Run DXSDK_Jun10.exe.","Make directories such as \u201cc:\\Users\\kjacobi\\openSourceSw\\\u201d and \u201cc:\\Users\\kjacobi\\openSourceSw\\build\\\u201d, and change to the latter directory. Copy tcl8.5.10-src.tar.gz to it and unwrap it, (i.e. open MSYS window and type \u201ccd \/c\/Users\/kjacobi\/openSourceSw\/build\u201d, and \u201ctar xfp tcl8.5.10-src.tar.gz\u201d). A resultant subdirectory, \u201ctcl8.5.10\/\u201d, appears. Make a sibling subdirectory called, \u201ctcltk\/\u201d, which will be used later when compiling Python-2.7.2 and its \u201ctkinter\u201d module. Open a Command Prompt window and type \u2018\u201cc:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\bin\\vcvars32.bat\u201d\u2019, (for Visual C variables, 32-bit), \u201ccd c:\\Users\\kjacobi\\openSourceSw\\build\\tcl8.5.10\\win\u201d, \u201cnmake -f makefile.vc OPTS=threads COMPILERFLAGS=-DWINVER=0x0500 DEBUG=0 INSTALLDIR=..\\..\\tcltk clean\u201d, \u201cnmake -f makefile.vc OPTS=threads COMPILERFLAGS=-DWINVER=0x0500 DEBUG=0 INSTALLDIR=..\\..\\tcltk all\u201d, and \u201cnmake -f makefile.vc OPTS=threads COMPILERFLAGS=-DWINVER=0x0500 DEBUG=0 INSTALLDIR=..\\..\\tcltk install\u201d. For general use, (i.e. in addition to supporting Python-2.7.2 installation), make directory, \u201cc:\\Tcl85\u201d, and type, \u201cnmake -f makefile.vc OPTS=threads COMPILERFLAGS=-DWINVER=0x0500 DEBUG=0 INSTALLDIR=c:\\Tcl85 clean\u201d, \u201cnmake -f makefile.vc OPTS=threads COMPILERFLAGS=-DWINVER=0x0500 DEBUG=0 INSTALLDIR=c:\\Tcl85 all\u201d, and \u201cnmake -f makefile.vc OPTS=threads COMPILERFLAGS=-DWINVER=0x0500 DEBUG=0 INSTALLDIR=c:\\Tcl85 install\u201d. Add \u201cc:\\Tcl85\\bin\u201d to PATH environment variable. Because \u201cthreads\u201d option is used in above commands, a \u201ct\u201d is added to various resultant names for distinction. To provide expected reference names, manually copy to them. That is, change directories to \u201c..\\..\\tcltk\\bin\u201d and type \u201ccopy tcl85t.dll tcl85.dll\u201d, \u201ccopy tclsh85t.exe tclsh85.exe\u201d, \u201ccd ..\\lib\u201d, and \u201ccopy tcl85t.lib tcl85.lib\u201d. Likewise for files under \u201cc:\\Tcl85\\\u201d and \u201copenSourceSw\\build\\tcl8.5.10\\win\\Release_VC10\\\u201d.","To install tk8.5.10-src.tar.gz, unpack it in \u201copenSourceSw\/build\/\u201d, (with MSYS window). In previous Command Prompt window, (i.e. vcvars32.bat already run), cd to \u201copenSourceSw\\build\\tk8.5.10\\win\\\u201d, and type \u201cnmake -f makefile.vc OPTS=threads,noxp COMPILERFLAGS=-DWINVER=0x0500 DEBUG=0 INSTALLDIR=..\\..\\tcltk TCLDIR=..\\..\\tcl8.5.10 clean\u201d, \u201cnmake -f makefile.vc OPTS=threads,noxp COMPILERFLAGS=-DWINVER=0x0500 DEBUG=0 INSTALLDIR=..\\..\\tcltk TCLDIR=..\\..\\tcl8.5.10 all\u201d, and \u201cnmake -f makefile.vc OPTS=threads,noxp COMPILERFLAGS=-DWINVER=0x0500 DEBUG=0 INSTALLDIR=..\\..\\tcltk TCLDIR=..\\..\\tcl8.5.10 install\u201d. For general installation, type \u201cnmake -f makefile.vc OPTS=threads,noxp COMPILERFLAGS=-DWINVER=0x0500 DEBUG=0 INSTALLDIR=c:\\Tcl85 TCLDIR=..\\..\\tcl8.5.10 clean\u201d, \u201cnmake -f makefile.vc OPTS=threads,noxp COMPILERFLAGS=-DWINVER=0x0500 DEBUG=0 INSTALLDIR=c:\\Tcl85 TCLDIR=..\\..\\tcl8.5.10 all\u201d, and \u201cnmake -f makefile.vc OPTS=threads,noxp COMPILERFLAGS=-DWINVER=0x0500 DEBUG=0 INSTALLDIR=c:\\Tcl85 TCLDIR=..\\..\\tcl8.5.10 install\u201d. Copy to expected reference names. That is, type \u201ccd ..\\..\\tcltk\\bin\u201d, \u201ccopy wish85t.exe wish85.exe\u201d, \u201ccopy tk85t.dll tk85.dll\u201d, \u201ccd ..\\lib\u201d, and \u201ccopy tk85t.lib tk85.lib\u201d. Likewise for files under \u201cc:\\Tcl85\\\u201d and \u201copenSourceSw\\build\\tk.5.10\\win\\Release_VC10\\\u201d.","In addition to tcl8.5.10 and tk8.5.10, several other packages support an upcoming Python-2.7.2 build. For example, download Tix8.4.3-src.tar.gz and copy it to openSourceSw\/build\/. Unpack it. Change directories to \u201copenSourceSw\/build\/Tix8.4.3\/win\u201d in MSYS window and type \u201cpatch makefile.vc\/c\/Users\/kjacobi\/patchFiles\/patch-Tix8.4.3.pch\u201d and \u201ctclsh85 \/c\/Users\/kjacobi\/patchFiles\/convert.tcl\u201d. Switch to Command Prompt window, run vcvars32.bat, (see above), change to directory openSourceSw\\build\\Tix8.4.3\\win, and type \u201cnmake \/f makefile.vc INSTALLDIR=..\\..\\tcltk clean\u201d, \u201cnmake \/f makefile.vc INSTALLDIR=..\\..\\tcltk all\u201d, and \u201cnmake \/f makefile.vc INSTALLDIR=..\\..\\tcltk install\u201d.","Open an MSYS window, copy Python-2.7.2.tar.bz2 to openSourceSw\/build\/ and unwrap it. A resultant subdirectory, \u201cPython-2.7.2\/\u201d, appears. Change directories to \u201cPython-2.7.2\/Tools\/msi\/\u201d, (for Microsoft installer), and type, \u201cpatch msi.py \/c\/Users\/kjacobi\/patchFiles\/patch1-Python-2.7.2.pch\u201d. Change directories to \u201cPython-2.7.2\/Lib\/distutils\/\u201d, and type, \u201cpatch cygwinccompiler.py \/c\/Users\/kjacobi\/patchFiles\/patch2-Python-2.7.2.pch\u201d and \u201cpatch msvc9compiler.py\/c\/Users\/kjacobi\/patchFiles\/patch3-Python-2.7.2.pch\u201d. From directory \u201cPython-2.7.2\/Lib\/distutils\/command\/\u201d, type, \u201cpatch build_ext.py\/c\/Users\/kjacobi\/patchFiles\/patch4-Python-2.7.2.pch\u201d.","Download and install a binary version of \u201csvn\u201d, (for subversion), command for Windows, or use a Mac OSX or Linux machine that already has it, and download specific versions of some packages by typing \u201csvn export http:\/\/svn.python.org\/projects\/external\/bzip2-1.0.5\u201d, \u201csvn export http:\/\/svn.python.org\/projects\/external\/openssl-0.9.8l\u201d, \u201csvn export http:\/\/svn.python.org\/projects\/external\/db-4.7.25.0\u201d, \u201csvn export http:\/\/svn.python.org\/projects\/external\/sqlite-3.6.21\u201d, \u201csvn co http:\/\/svn.python.org\/projects\/external\/Sphinx-0.6.7\/sphinx tools\/sphinx\u201d, \u201csvn co http:\/\/svn.python.org\/projects\/external\/docutils-0.6\/docutils tools\/docutils\u201d, \u201csvn co http:\/\/svn.python.org\/projects\/external\/Jinja-2.3.1\/jinja2 tools\/jinja2\u201d, and \u201csvn co http:\/\/svn.python.org\/projects\/external\/Pygments-1.3.1\/pygments tools\/pygments\u201d, (\u201cco\u201d is short for checkout). Copy resultant subdirectories, \u201cbzip2-1.0.5\/\u201d, \u201copenssl-0.9.8l\/\u201d, \u201cdb-4.7.25.0\/\u201d, and \u201csqlite-3.6.21\/\u201d to Windows directory \u201cc:\\Users\\kjacobi\\openSourceSw\\build\\\u201d. Copy resultant subdirectories in \u201ctools\/\u201d subdirectory to Windows directory \u201cc:\\Users\\kjacobi\\openSourceSw\\build\\Python-2.7.2\\Doc\\tools\\\u201d. In MSYS window, change directories to \/c\/Users\/kjacobi\/openSourceSw\/build\/openssl-0.9.8l\/ and type, \u201cpatch e_os.h\/c\/Users\/kjacobi\/patchFiles\/patch-openssl-0.9.8l\u201d.","Download nasm-2.09.10-win32.zip from nasm.sf.net. Using MSYS window type, \u201ccd \/c\/Users\/kjacobi\/bin\/\u201d. Copy nasm-2.09.10-win32.zip to it, and type, \u201cunzip nasm-2.09.10-win32.zip\u201d, \u201crm -f nasm-2.09.10-win32.zip\u201d, \u201ccd nasm-2.09.10\u201d, and \u201ccp -p nasm.exe nasmw.exe\u201d. Add c:\\Users\\kjacobi\\bin\\nasm-2.09.10 to the PATH environment variable.","Open \u201copenSourceSw\\build\\Python-2.7.2\\PCbuild\\pcbuild.sln\u201d with Microsoft Visual Studio 2010 Professional. Solution Explorer indicates that Berkeley DB 4.7.25 Source Files are located within and below PCbuild\/subdirectory. For that reason, consider typing, \u201ccd openSourceSw\/build\/Python-2.7.2\/PCbuild\u201d and \u201cmy..\/..\/db-4.7.25.0\/* .\u201d, (and unpacking a fresh version of db-4.7.25.0 within openSourceSw\/build\/).","Select \u201cConfiguration Manager . . . \u201d from \u201cBuild\u201d drop-down menu and choose \u201cRelease\u201d and \u201cWin32\u201d for \u201cActive solution configuration\u201d and \u201cActive solution platform,\u201d respectively, (and for each project), in pop-up window.","Select \u201cProperty Manager\u201d from \u201cView\u201d drop-down menu. Highlight all projects, (click on top project, hold \u201cShift\u201d key down and click on bottom project). Click on \u201cAdd Existing Property Sheet\u201d button, (i.e. with the green \u201c+\u201d icon). Browse to c:\\Program Files\\MSBuild\\Microsoft.Cpp\\v4.0\\Platforms\\Win32\\PlatformToolsets\\Windows 7.1 SDK\\Microsoft. Cpp.Win32.Windows 7.1 SDK.props and click \u201cOpen\u201d button.","Highlight project \u201c_tkinter,\u201d in Solutions Explorer and select \u201cProperties\u201d from the \u201cProject\u201d drop-down menu. Within a pop-up \u201c_tkinter Property Pages\u201d window, change Linker\u2192Input\u2192Additional Dependencies to \u201c..\\..\\tcltk\\lib\\tcl85.lib;..\\..\\tcltk\\lib\\tk85.lib\u201d and click \u201cApply\u201d button. Double-check Linker\u2192Command Line shows quotation marks around each .lib file above.","Select \u201cClean Solution\u201d then \u201cBuild Solution\u201d from Build drop-down menu.","Open a Command Prompt window, change directories to \u201cPython-2.7.2\\Doc\u201d, and type, \u201c.\\make.bat html\u201d and \u201c.\\make.bat htmlhelp\u201d.","Download pywin32-216.zip from https:\/\/sourceforge.net\/projects\/pywin32 to \u201copenSourceSw\/build\/\u201d, unwrap it, and move resultant \u201cpywin32-216\/\u201d subdirectory into Python-2.7.2\/subdirectory, (i.e. \u201copenSourceSw\/build\/Python-2.7.2\/pywin32-216\/\u201d). With MSYS window change directories to Python-2.7.2\/pywin32-216\/ and type \u201cpatch setup.py\/c\/Users\/kjacobi\/patchFiles\/patch1-pywin32-216.pch\u201d, \u201cpatch pywin32_postinstall.py\/c\/Users\/kjacobi\/patchFiles\/patch2-pywin32-216.pch\u201d, \u201ctclsh85 \/c\/Users\/kjacobi\/patchFiles\/convert.tcl setup.py\u201d, and \u201ctclsh85 \/c\/Users\/kjacobi\/patchFiles\/convert.tcl pywin32_postinstall.py\u201d. Change directories to \u201cPython-2.7.2\/pywin32-216\/pythonwin\/Scintilla\/win32\/\u201d and type \u201cpatch scintilla_vc6.mak \/c\/Users\/kjacobi\/patchFiles\/patch3-pywin32-216.pch\u201d and \u201ctclsh85 \/c\/Users\/kjacobi\/patchFiles\/convert.tcl scintilla_vc6.mak\u201d.","Open a Command Prompt window and type \u201cset LIB=c:\\Users\\kjacobi\\openSourceSw\\build\\Python-2.7.2\\PCbuild\u201d, \u201cset MSSdk=c:\\Program Files\\Microsoft SDKs\\Windows\\v7.1\u201d, \u2018\u201cc:\\program files\\microsoft visual studio 10.0\\vc\\bin\\vcvars32\u201d\u2019, \u201ccd c:\\Users\\kjacobi\\openSourceSw\\build\\Python-2.7.2\\pywin32-216\\\u201d, \u201c..\\PCbuild\\python.exe setup.py build\u201d, and \u201c..\\PCbuild\\python.exe setup.py install\u201d.","Add c:\\Users\\kjacobi\\openSourceSw\\build\\Python-2.7.2 to PATH environment variable.","Open a Command Prompt window and type \u201cset LIB=c:\\Users\\kjacobi\\openSourceSw\\build\\Python-2.7.2\\PCbuild\u201d, \u201cset MSSdk=c:\\Program Files\\Microsoft SDKs\\Windows\\v7.1\u201d, \u2018\u201cc:\\program files\\microsoft visual studio 10.0\\vc\\bin\\vcvars32\u201d\u2019, \u201ccd c:\\Users\\kjacobi\\openSourceSw\\build\\Python-2.7.2\\Tools\\msi\u201d, \u201cnmake \/f msisupport.mak\u201d, \u201ccd ..\\..\\UPC\u201d, \u201cnmake \/f icons.mak\u201d, and \u201ccd ..\\Toos\\msi\u201d, \u201c..\\..\\PCbuild\\python.exe msi.py\u201d. Run resultant \u201cpython-2.7.15261.msi\u201d file to install python.exe in directory, \u201cc:\\Python27\u201d! Add c:\\Python27 to PATH environment variable. Remove c:\\Users\\kjacobi\\openSourceSw\\build\\Python-2.7.2 from PATH environment variable.","Copy nose-1.1.2.tar.gz to openSourceSw\/build\/directory and unwrap it. Open a Command Prompt window, change to nose-1.1.2\/subdirectory, and type, \u201cset MSSdk=c:\\Program Files\\Microsoft SDKs\\Windows\\v7.1\u201d, \u2018\u201cc:\\program files\\microsoft visual studio 10.0\\vc\\bin\\vcvars32\u201d\u2019, \u201cpython setup.py build\u201d, and \u201cpython setup.py install\u201d.","Copy distribute-0.6.21.tar.gz to openSourceSw\/build\/directory, unwrap it, change to distribute-0.6.21\/ subdirectory, and type, \u201cpython setup.py install\u201d.","In MSYS window, copy numpy-1.6.1.tar.gz to openSourceSw\/build\/directory and unwrap it. From directory \u201cnumpy-1.6.1\/numpy\/distutils\/\u201d type \u201cpatch misc_util.py \/c\/Users\/kjacobi\/patchFiles\/patch1-numpy-1.6.1.pch\u201d, \u201cpatch system_info.py\/c\/Users\/kjacobi\/patchFiles\/patch2-numpy-1.6.1.pch\u201d. From directory \u201cnumpy-1.6.1\/numpy\/distutils\/command\u201d type \u201cpatch build_ext.py\/c\/Users\/kjacobi\/patchFiles\/patch3-numpy-1.6.1.pch\u201d.","Open a Command Prompt window, change to numpy-1.6.1\/subdirectory, and type, \u201cset MSSdk=c:\\Program Files\\Microsoft SDKs\\Windows\\v7.1\u201d, \u2018\u201cc:\\program files\\microsoft visual studio 10.0\\vc\\bin\\vcvars32\u201d\u2019, \u201cpython setup.py build\u201d, and \u201cpython setup.py install\u201d.","In MSYS window, copy tiff-3.9.5.tar.gz to openSourceSw\/build\/directory and unwrap it. From directory \u201ctiff-3.9.5\/\u201d, type, \u201cpatch nmake.opt\/c\/Users\/kjacobi\/patchFiles\/patch1-tiff-3.9.5.pch\u201d, (consider changing patch file's \u201ckjacobi\u201d directory first), \u201ctclsh85 \/c\/Users\/kjacobi\/patchFiles\/convert.tcl nmake.opt\u201d. Change directories to \u201ctiff-3.9.5\/tools\u201d and type, \u201cpatch tiff2pdf.c \/c\/Users\/kjacobi\/patchFiles\/patch2-tiff-3.9.5.pch\u201d.","Using prepped Command Prompt window, (i.e. set MSSdk, run vcvars32), change to tiff-3.9.5\/ directory and type, \u201cnmake -f Makefile.vc\u201d, \u201ccd libitff\/\u201d, \u201cmove libtiff.lib libtiff_s.lib\u201d, and \u201ccopy libtiff_i.lib libtiff.lib\u201d.","In MSYS window, copy jpegsrc.v8c.tar.gz to openSourceSw\/build\/directory and unwrap it. From resultant \u201cjpeg-8c\/\u201d directory, in prepped Command Prompt window, type \u201cnmake -f makefile.vc setup-v10\u201d.","In MSYS window, copy \u201c\/c\/Users\/kjacobi\/patchfiles\/patch1-jpeg-8c.pch.uue\u201d to jpeg-8c\/ and type, \u201cpython \/c\/Users\/kjacobi\/bin\/uuDec.py patch1-jpeg-8c.pch.uue\u201d and \u201cpatch jpeg.vcxproj.filters patch1-jpeg-8c.pch\u201d. Patch five other \u201c.vcxproj.filters\u201d files with patch1-jpeg-8c.pch. Patch \u201cjpeg.vcxproj\u201d file with \u201cpatch2-jpeg-8c.pch\u201d, (i.e. after applying uuDec.py to \u201cpatch2-jpeg-8c.pch.uue\u201d). Similarly, patch five other \u201c.vcxproj\u201d files with \u201cpatch3-jpeg-8c.pch\u201d. For six \u201c.vcxproj\u201d files, also run convert.tcl. For example, type, \u201ctclsh85 \/Users\/kjacobi\/patchFiles\/convert.tcl jpeg.vcxproj\u201d. Type, \u201cpatch jmorecfg.h \/Users\/kjacobi\/patchFiles\/patch4-jpeg-8c.pch\u201d.","Using Visual Studio, open \u201cjpeg.sln\u201d. Highlight \u201cjpeg\u201d project in Solution Explorer and select \u201cProperties\u201d from \u201cProject\u201d drop-down menu. In Property Pages pop-up window, change Configuration Properties\u2192General\u2192Target Extension to \u201c.dll\u201d. Change Configuration Type to Dynamic Library (.dll) and press \u201cApply\u201d button. Select \u201cClean Solution\u201d then \u201cBuild Solution\u201d from Build drop-down menu. Close jpeg solution. Move resultant \u201cjpeg-8c\/jpeg.lib\u201d, (i.e. an \u201cimport library\u201d used when linking dependent applications to resultant \u201cjpeg-8c\/Release\/jpeg.dll\u201d), to \u201cjpeg-8c\/Release\/jpeg.lib\u201d.","Type, \u201cpatch jmorecfg.h \/Users\/kjacobi\/patchFiles\/patch5-jpeg-8c.pch\u201d. Using Visual Studio, open \u201capps.sln\u201d. Select \u201cClean Solution\u201d then \u201cBuild Solution\u201d from Build drop-down menu.","In MSYS window, copy zlib-1.2.5.tar.bz2 to openSourceSw\/build\/directory and unwrap it. From resultant \u201czlib-1.2.5\/\u201d directory, in prepped Command Prompt window, type \u2018nmake -f win32\/Makefile.msc LOC=\u201c-DASMV -DASMINF\u201d OBJA=\u201cmatch686.obj inffas32.obj\u201d\u2019.","In MSYS window, copy libpng-1.4.8.tar.bz2 to openSourceSw\/build\/directory and unwrap it. Change directories to \u201clibpng-1.4.8\/projects\/vstudio\/\u201d and type, \u201cpatch zlib.props \/c\/Users\/kjacobi\/patchFiles\/patch1-libpng-1.4.8.pch\u201d, (consider first updating \u201ckjacobi\u201d path within patch file). Copy patch2-libpng-1.4.8.pch.uue through patch4-libpng-1.4.8.pch.uue from \/c\/Users\/kjacobi\/patchFiles\/ and uudecode them with \/c\/Users\/kjacobi\/bin\/uuDec.py. Type, \u201cpatch zlib\/zlib.vcxproj patch2-libpng-1.4.8.pch\u201d, \u201ctclsh85 \/Users\/kjacobi\/patchFiles\/convert.tcl zlib\/zlib.vcxproj\u201d, \u201cpatch libpng\/libpng.vcxproj patch3-libpng-1.4.8.pch\u201d, \u201ctclsh85 \/Users\/kjacobi\/patchFiles\/convert.tcl libpng\/libpng.vcxproj\u201d, \u201cpatch pngtest\/pngtest.vcxproj patch4-libpng-1.4.8.pch\u201d, and \u201ctclsh85 \/Users\/kjacobi\/patchFiles\/convert.tcl pngtest\/pngtest.vcxproj\u201d. Change directories back to \u201clibpng-1.4.8\/\u201d and type, \u201cpatch pngconf.h \/Users\/kjacobi\/patchFiles\/patch5-libpng-1.4.8.pch\u201d.","Using Visual Studio, open \u201clibpng-1.4.8\/projects\/vstudio\/vstudio.sln\u201d. Select \u201cConfiguration Manager . . . \u201d from Build drop-down menu and choose \u201cRelease\u201d and \u201cWin32\u201d for \u201cActive solution configuration\u201d and \u201cActive solution platform,\u201d respectively, (and for each project), in pop-up window. Choose \u201cClean Solution\u201d then \u201cBuild Solution\u201d from Build drop-down menu.","In MSYS window, copy freetype-2.4.6.tar.bz2 to openSourceSw\/build\/directory and unwrap it. Change directories to \u201cfreetype-2.4.6\/include\/freetyp\/config\u201d and type, \u201cpatch ftoption.h \/c\/Users\/kjacobi\/patchFiles\/patch1-freetype-2.4.6.pch\u201d. Change directories to \u201cfreetype-2.4.6\/builds\/win32\/vc2010\/\u201d and type, \u201cpatch freetype.vcxproj \/c\/Users\/kjacobi\/patchFiles\/patch2-freetype-2.4.6.pch\u201d and \u201ctclsh85 \/c\/Users\/kjacobi\/patchFiles\/convert.tcl freetype.vcxproj\u201d.","Using Visual Studio, open \u201cbuilds\/win32\/vc2010\/freetype.sln\u201d. Select \u201cConfiguration Manager . . . \u201d from Build drop-down menu and choose \u201cRelease\u201d and \u201cWin32\u201d for \u201cActive solution configuration\u201d and \u201cActive solution platform,\u201d respectively, (and for project), in pop-up window. Choose \u201cClean Solution\u201d then \u201cBuild Solution\u201d from Build drop-down menu.","Copy SDL-1.2.14.tar.gz to openSourceSw\/build\/directory, unwrap it, change directories to resultant \u201cSDL-1.2.14\/\u201d subdirectory and unzip \u201cVisualC.zip\u201d.","Start Visual Studio and open \u201cSDL-1.2.14\/VisualC\/SDL.sln\u201d. Select \u201cConfiguration Manager . . . \u201d from Build drop-down menu and choose \u201cRelease\u201d and \u201cWin32\u201d for \u201cActive solution configuration\u201d and \u201cActive solution platform,\u201d respectively, (and for each project), in pop-up window.","Select \u201cProperty Manager\u201d from \u201cView\u201d drop-down menu. Highlight all projects. Click on \u201cAdd Existing Property Sheet\u201d button. Browse to c:\\Program Files\\MSBuild\\Microsoft.Cpp\\v4.0\\Platforms\\Win32\\PlatformToolsets\\Windows 7.1 SDK\\Microsoft. Cpp.Win32.Windows 7.1 SDK.props and click \u201cOpen\u201d button.","Highlight project \u201cSDL,\u201d in Solutions Explorer and select \u201cProperties\u201d from the \u201cProject\u201d drop-down menu. Within a pop-up \u201cSDL Property Pages\u201d window, add \u201cC:\\Program Files\\Microsoft DirectX SDK (June 2010)\\Lib\\x86\u201d to VC++ Directories\u2192Library Directories, and click \u201cApply\u201d button.","Select \u201cClean Solution\u201d then \u201cBuild Solution\u201d from Build drop-down menu.","In MSYS window, copy SDL_image-1.2.10.tar.gz to openSourceSw\/build\/directory, unwrap it, change directories to resultant \u201cSDL_image-1.2.10\/\u201d subdirectory and unzip \u201cVisualC.zip\u201d. Copy \u201cSDL-1.2.14\/VisualC\/SDL\/Release\/SDL.dll\u201d to \u201cSDL_image-1.2.10\/VisualC\/\u201d and \u201cSDL_image-1.2.10\/VisualC\/showimage\/Release\/\u201d subdirectories. Change directories to \u201cSDL_image-1.2.10\/VisualC\/graphics\/\u201d and type, \u201crm -rf include\u201d, \u201crm -rf lib\u201d, \u201cmkdir include\u201d, \u201cmkdir lib\u201d, \u201ccd include\u201d, \u201ccp -p ..\/..\/..\/..\/libpng-1.4.8\/png.h.\u201d, \u201ccp -p ..\/..\/..\/..\/libpng-1.4.8\/pngconf.h.\u201d, \u201ccp -p ..\/..\/..\/..\/tiff-3.9.5\/libtiff\/tiffvers.h.\u201d, \u201ccp -p ..\/..\/..\/..\/tiff-3.9.5\/libtiff\/tiffio.h.\u201d, \u201ccp -p ..\/..\/..\/..\/tiff-3.9.5\/libtiff\/tiffconf.h.\u201d, \u201ccp -p ..\/..\/..\/..\/tiff-3.9.5\/libtiff\/tiff.h.\u201d, \u201ccp -p ..\/..\/..\/..\/zlib-1.2.5\/zlib.h.\u201d, \u201ccp -p ..\/..\/..\/..\/zlib-1.2.5\/zconf.h.\u201d, \u201ccp -p ..\/..\/..\/..\/jpeg-8c\/jpeglib.h.\u201d, \u201ccp -p ..\/..\/..\/..\/jpeg-8c\/jmorecfg.h.\u201d, \u201ccp -p ..\/..\/..\/..\/jpeg-8c\/jerror.h.\u201d, \u201ccp -p ..\/..\/..\/..\/jpeg-8c\/jconfig.h.\u201d, \u201ccd ..\/lib\u201d, \u201ccp -p ..\/..\/..\/..\/libpng-1.4.8\/projects\/vstudio\/Release\/libpng14.lib.\u201d, \u201ccp -p ..\/..\/..\/..\/tiff-3.9.5\/libtiff\/libtiff.lib.\u201d, \u201ccp -p ..\/..\/..\/..\/zlib-1.2.5\/zdll.lib.\u201d, and \u201ccp -p ..\/..\/..\/..\/jpeg-8c\/Release\/jpeg.lib.\u201d.","Start Visual Studio and open \u201cSDL_image-1.2.10\/VisualC\/SDL_image.sln\u201d. As before, choose \u201cRelease\u201d and \u201cWin32\u201d configuration. Add Windows SDK 7.1 property sheet to project. Add \u201cc:\\Users\\kjacobi\\openSourceSw\\build\\SDL-1.2.14\\include\u201d to VC++Directories\u2192Include Directories. Add \u201cc:\\Users\\kjacobi\\openSourceSw\\build\\SDL-1.2.14\\VisualC\\SDL\\Release\u201d and \u201cc:\\Users\\kjacobi\\openSourceSw\\build\\SDL-1.2.14\\VisualC\\SDLmain\\Release\u201d to VC++ Directories\u2192Library Directories. Add \u201cSDL.lib;SDLmain.lib\u201d to Linker\u2192Input\u2192Additional Dependencies. Add \u2018LOAD_JPG_DYNAMIC=\u201cjpeg.dll\u201d\u2019, \u2018LOAD_PNG_DYNAMIC=\u201clibpng14.dll\u201d\u2019, and \u2018LOAD_TIF_DYNAMIC=\u201clibtiff.dll\u201d\u2019 to C\/C++\u2192Preprocessor\u2192Preprocessor Definitions.","Select \u201cClean Solution\u201d then \u201cBuild Solution\u201d from Build drop-down menu.","In MSYS window, copy SDL_ttf-2.0.10.tar.gz to openSourceSw\/build\/directory, unwrap it, change directories to resultant \u201cSDL_ttf-2.0.10\/\u201d subdirectory and unzip \u201cVisualC.zip\u201d. Copy \u201cSDL-1.2.14\/VisualC\/SDL\/Release\/SDL.dll\u201d to \u201cSDL_ttf-2.0.10\/VisualC\/\u201d and \u201cSDL_ttf-2.0.10\/VisualC\/Release\/\u201d subdirectories. Change directories to \u201cSDL_ttf-2.0.10\/VisualC\/FreeType\/include\/\u201d and type, \u201crm -f ft2build.h\u201d, \u201ccp -p ..\/..\/..\/..\/freetype-2.4.6\/include\/ft2build.h.\u201d, \u201crm -rf freetype\u201d, \u201ccp -pR ..\/..\/..\/..\/freetype-2.4.6\/include\/freetype freetype\u201d, \u201ccd ..\/lib\u201d, \u201crm -f libfreetype.lib\u201d, and \u201ccp -p ..\/..\/..\/..\/freetype-2.4.6\/objs\/win32\/vc2010\/freetype246.lib.\u201d.","Start Visual Studio and open \u201cSDL_ttf-2.0.10\/VisualC\/SDL_ttf.sln\u201d. As before, choose \u201cRelease\u201d and \u201cWin32\u201d configuration. Add Windows SDK 7.1 property sheet to projects. To all projects, add \u201cc:\\Users\\kjacobi\\openSourceSw\\build\\SDL-1.2.14\\include\u201d to VC++Directories\u2192Include Directories. Add \u201cc:\\Users\\kjacobi\\openSourceSw\\build\\SDL-1.2.14\\VisualC\\SDL\\Release\u201d and \u201cc:\\Users\\kjacobi\\openSourceSw\\build\\SDL-1.2.14\\VisualC\\SDLmain\\Release\u201d to VC++ Directories\u2192Library Directories. Add \u201cSDL.lib;SDLmain.lib\u201d to Linker\u2192Input\u2192Additional Dependencies. In Solution Explorer, highlight and remove \u201clibfreetype.lib\u201d of project \u201cSDL_ttf\u201d. With same project highlighted, select \u201cAdd Existing Item . . . \u201d from Project drop-down menu and choose \u201cSDL_ttf-2.0.10\/VisualC\/FreeType\/lib\/freetype246.lib\u201d.","Select \u201cClean Solution\u201d then \u201cBuild Solution\u201d from Build drop-down menu.","In MSYS window, copy SDL_mixer-1.2.11.tar.gz to openSourceSw\/build\/directory, unwrap it, change directories to resultant \u201cSDL_mixer-1.2.11\/\u201d subdirectory and unzip \u201cVisualC.zip\u201d. Copy \u201cSDL-1.2.14\/VisualC\/SDL\/Release\/SDL.dll\u201d to \u201cSDL_mixer-1.2.11\/VisualC\/\u201d subdirectory.","Start Visual Studio and open \u201cSDL_mixer-1.2.11\/VisualC\/SDL_mixer.sln\u201d. As before, choose \u201cRelease\u201d and \u201cWin32\u201d configuration. Add Windows SDK 7.1 property sheet to projects. To all projects, add \u201cc:\\Users\\kjacobi\\openSourceSw\\build\\SDL-1.2.14\\include\u201d to VC++ Directories\u2192Include Directories. Add \u201cc:\\Users\\kjacobi\\openSourceSw\\build\\SDL-1.2.14WisualC\\SDL\\Release\u201d and \u201cc:\\Users\\kjacobi\\openSourceSw\\build\\SDL-1.2.14WisualC\\SDLmain\\Release\u201d to VC++ Directories\u2192Library Directories. Add \u201cSDL.lib;SDLmain.lib\u201d to Linker\u2192Input\u2192Additional Dependencies.","Select \u201cClean Solution\u201d then \u201cBuild Solution\u201d from Build drop-down menu.","In MSYS window, copy pygame-1.9.1release.tar.gz to openSourceSw\/build\/directory, unwrap it, change directories to resultant \u201cpygame-1.9.1release\/\u201d subdirectory, type, \u201cpython setup.py --help\u201d, and press \u201cReturn\u201d for prompted questions. A file named \u201cSetup\u201d is generated. Type, \u201cpatch Setup \/c\/Users\/kjacobi\/patchFiles\/patch-pygame-1.9.1release.pch\u201d and \u201ctclsh85 \/c\/Users\/kjacobi\/patchFiles\/convert.tcl Setup\u201d. Type, \u201ccd src\u201d, \u201cgcc -c scale_mmx32.c\u201d, \u201cmkdir ..\/obj\u201d, \u201cmkdir ..\/obj\/win32\u201d, and \u201cmy scale_mmx32.o ..\/obj\/win32\/scale_mmx.obj\u201d.","In a prepped Command Prompt window, change to pygame-1.9.1release\/directory and type, \u201cpython setup.py build\u201d and \u201cpython setup.py install\u201d.","In MSYS window, copy glut-3.7.6-src.zip to openSourceSw\/build\/directory and unwrap it.","Start Visual Studio and open \u201cglut-3.7.6\/glut.dsw\u201d. As before, choose \u201cRelease\u201d and \u201cWin32\u201d configuration. Add Windows SDK 7.1 property sheet to projects. Highlight project \u201cglut32,\u201d in Solutions Explorer and select \u201cProperties\u201d from the \u201cProject\u201d drop-down menu. Within a pop-up \u201cglut32 Property Pages\u201d window, delete copy commands under Configuration Properties\u2192Build Events\u2192Post-Build Event\u2192Command Line, and description under Post-Build Event\u2192Description. Click \u201cApply\u201d button.","Select \u201cClean Solution\u201d then \u201cBuild Solution\u201d from Build drop-down menu.","In MSYS window, copy gle-3.1.0.tar.gz to openSourceSw\/build\/directory, unwrap it, change to \u201cgle-3.1.0\/ms-visual-c\/\u201d directory and copy \u201c\/c\/Users\/kjakobi\/patchFiles\/gle32.def\u201d to it.","Start Visual Studio and open \u201cgle-3.1.0\/ms-visual-c\/vc.dsw\u201d. As before, choose \u201cRelease\u201d and \u201cWin32\u201d configuration. Add Windows SDK 7.1 property sheet to projects. Highlight project \u201cgle,\u201d in Solutions Explorer and select \u201cProperties\u201d from the \u201cProject\u201d drop-down menu. Within a pop-up \u201cgle Property Pages\u201d window, replace \u201c.lib\u201d with \u201c.dll\u201d under Configuration Properties\u2192General\u2192Target Extension. Select \u201cDynamic Library (.dll)\u201d under General\u2192Configuration Type. Change General\u2192Target Name to \u201cgle32\u201d. Add \u201copengl32.lib; glu32.lib\u201d to Linker\u2192Input\u2192Additional Dependencies. Add \u201cc:\\Users\\kjacobi\\openSourceSw\\build\\gle-3.1.0\\ms-visual-c\\gle32.def\u201d under Linker\u2192Input\u2192Module Definition File. Click \u201cApply\u201d button.","Select \u201cClean Solution\u201d then \u201cBuild Solution\u201d from Build drop-down menu.","In MSYS window, copy PyOpenGL-3.0.1.tar.gz to openSourceSw\/build\/directory, unwrap it, change to \u201cPyOpenGL-3.0.1\/OpenGL\/DLLS\/\u201d directory and type, \u201ccp -p ..\/..\/..\/glut-3.7.6\/lib\/glut\/Release\/glut32.dll.\u201d and \u201ccp -p ..\/..\/..\/gle-3.1.0\/ms-visual-c\/gle\/Release\/gle32.dll.\u201d. Change back to \u201copenSourceSw\/build\/\u201d directory, copy PyOpenGL-accelerate-3.0.1.tar.gz to it, and unwrap it.","In a prepped Command Prompt window, change to \u201cPyOpenGL-3.0.1\\\u201d directory and type, \u201cpython setup.py build\u201d and \u201cpython setup.py install\u201d. Change to \u201c..\\PyOpenGL-accelerate-3.0.1\\\u201d directory and type, \u201cpython setup.py build\u201d and \u201cpython setup.py install\u201d.","In MSYS window, copy yasm-1.1.0.tar.gz to openSourceSw\/build\/directory, unwrap it, change to \u201cyasm-1.1.0\/\u201d directory and type, \u201c.\/configure\u201d and \u201cmake\u201d.","Start Visual Studio and open \u201cyasm-1.1.0\/Mkfiles\/vc10\/yasm.sln\u201d. As before, choose \u201cRelease\u201d and \u201cWin32\u201d configuration. Add Windows SDK 7.1 property sheet to projects. Select \u201cClean Solution\u201d then \u201cBuild Solution\u201d from Build drop-down menu. Copy resultant \u201cyasm-1.1.0\\Mkfiles\\vc10\\Win32\\Release\\yasm.exe\u201d to c:\\Users\\kjacobi\\bin\\.","In MSYS window, copy libmad-0.15.1b.tar.gz to openSourceSw\/build\/directory, unwrap it, change to \u201clibmad-0.15.1b\/msvc++\/\u201d directory and copy \u201c\/c\/Users\/kjacobi\/patchFiles\/libmad.def\u201d to it.","Start Visual Studio and open \u201clibmad-0.15.1b\/msvc++\/libmad.dsp\u201d. As before, choose \u201cRelease\u201d and \u201cWin32\u201d configuration. Add Windows SDK 7.1 property sheet to projects. Highlight project \u201clibmad,\u201d in Solutions Explorer and select \u201cProperties\u201d from the \u201cProject\u201d drop-down menu. Within a pop-up \u201clibmad Property Pages\u201d window, replace \u201c.lib\u201d with \u201c.dll\u201d under Configuration Properties\u2192General\u2192Target Extension. Select \u201cDynamic Library (.dll)\u201d under General\u2192Configuration Type. Add \u201cc:\\Users\\kjacobi\\openSourceSw\\build\\libmad-0.15.1b\\msvc++\\libmad. def\u201d under Linker\u2192Input\u2192Module Definition File. Click \u201cApply\u201d button. Select \u201cClean Solution\u201d then \u201cBuild Solution\u201d from Build drop-down menu.","In MSYS window, copy mpg123-1.13.4.tar.bz2 to openSourceSw\/build\/directory and unwrap it.","Start Visual Studio and open \u201cmpg123-1.13.4\/ports\/MSVC++\/2008\/mpg123.sln\u201d. As before, choose \u201cRelease\u201d and \u201cWin32\u201d configuration. Add Windows SDK 7.1 property sheet to projects. Select \u201cClean Solution\u201d then \u201cBuild Solution\u201d from Build drop-down menu.","In MSYS window, change to openSourceSw\/build\/directory and type, \u201csvn export -r33766 --ignore-externals svn:\/\/svn.mplayerhq.hu\/mplayer\/trunk mplayer-33766\u201d, \u201csvn export -r1228 svn:\/\/svn.mplayerhq.hu\/dvdnav\/trunk\/libdvdnav\/src mplayer-33766\/libdvdnav\/\u201d, \u201csvn export -r1228 svn:\/\/svn.mplayerhq.hu\/dvdnav\/trunk\/libdvdread\/src mplayer-33766\/libdvdread4\/\u201d, \u201cgit clone --depth 1000 git:\/\/git.videolan.org\/ffmpeg.git mplayer-33766\/ffmpeg\u201d, \u201ccd mplayer-33766\/ffmpeg\/\u201d, and \u201cgit checkout -f 9e17d051ac9b113b70980373b8489ca469505f3f\u201d.","Copy library and header files to allow use with MinGW compilers and linkers. Type, \u201ccd \/c\/Users\/kjacobi\/openSourceSw\/build\/jpeg-8c\/Release\/\u201d, \u201ccp -p jpeg.lib \/c\/MinGW\/lib\/libjpeg.a\u201d, \u201ccp -p jpeg.dll \/c\/MinGW\/bin\/\u201d, \u201ccd ..1\u201d, \u201ccp -p *.h \/c\/MinGW\/include\/\u201d, \u201ccd ..\/libpng-1.4.8\/projects\/vstudio\/Release\/\u201d, \u201ccp -p libpng14.lib \/c\/mingw\/lib\/libpng.a\u201d, \u201ccp -p libpng14.dll \/c\/mingw\/bin\/\u201d, \u201ccd ..\/..\/..\u201d, \u201ccp -p png.h \/c\/mingw\/include\/\u201d, \u201ccp -p pngconf.h \/c\/mingw\/include\/\u201d, \u201ccd ..\/SDL-1.2.14\/VisualC\/SDL\/Release\/\u201d, \u201ccp -p SDL.lib \/c\/mingw\/lib\/libSDL.a\u201d, \u201ccp -p SDL.dll \/c\/mingw\/bin\/\u201d, \u201ccd ..\/..\/..\/include\/\u201d, \u201cmkdir \/c\/mingw\/include\/SDL\/\u201d, \u201ccp -p *.h \/c\/mingw\/include\/SDL\/\u201d, \u201ccd ..\/..\/libmad-0.15.1b\/msvc++\/Release\/\u201d, \u201ccp -p libmad.lib \/c\/mingw\/lib\/libmad.a\u201d, \u201ccp -p libmad.dll \/c\/mingw\/bin\/\u201d, \u201ccd ..\/..\/\u201d, \u201ccp -p *.h \/c\/mingw\/include\/\u201d, \u201ccd ..\/SDL_mixer-1.2.11\/VisualC\/Release\/\u201d, \u201ccp -p SDL_mixer.lib \/c\/mingw\/lib\/lib SDL_mixer. a\u201d, \u201ccp -p SDL_mixer.dll \/c\/mingw\/bin\/\u201d, \u201ccd ..\/..\/\u201d, \u201ccp *.h \/c\/mingw\/include\/SDL\/\u201d, \u201ccd ..\/SDL_image-1.2.10\/VisualC\/Release\/\u201d, \u201ccp -p SDL_image.lib \/c\/mingw\/lib\/libSDL_image.a\u201d, \u201ccp -p SDL_image.dll \/c\/mingw\/bin\/\u201d, \u201ccd ..\/..\/\u201d, \u201ccp -p *.h \/c\/mingw\/include\/SDL\/\u201d, \u201ccd ..\/SDL_ttf-2.0.10\/VisualC\/Release\/\u201d, \u201ccp -p SDL_ttf.lib \/c\/mingw\/lib\/libSDL_ttf.a\u201d, \u201ccp -p SDL_ttf.dll \/c\/mingw\/bin\/\u201d, \u201ccd ..\/..\/\u201d, and \u201ccp -p *.h \/c\/mingw\/include\/SDL\/\u201d. \u201ccd ..\/zlib-1.2.5\/\u201d, \u201ccp -p zlib1.dll \/c\/mingw\/bin\/\u201d, \u201ccd ..\/mpg123-1.13.4\/ports\/MSVC++\/2008\/Release\/\u201d, \u201ccp -p libmpg123.lib \/c\/mingw\/lib\/libmpg123.a\u201d, \u201ccp -p libmpg123.dll \/c\/mingw\/bin\/\u201d, \u201ccd ..\/..\/..\/..\/src\/\u201d, \u201ccp -p *.h \/c\/mingw\/include\/\u201d, \u201ccd ..\/ports\/MSVC++\/\u201d, \u201ccp -p *.h \/c\/mingw\/include\/\u201d, \u201ccd ..\/..\/src\/libmpg123\/\u201d, \u201ccp -pi *.h \/c\/mingw\/include\/\u201d, (do not overwrite existing files), and \u201ccp -p mpg123.h.in \/c\/mingw\/include\/\u201d.","Apply patches. Type, \u201ccd ..\/..\/..\/mplayer-33766\/libao2\/\u201d, \u201cpatch ao_sdl.c \/c\/Users\/kjacobi\/patchFiles\/patch1-mplayer-33766.pch\u201d, \u201ccd ..\/libvo\/\u201d, \u201cpatch vo_sdl.c \/c\/Users\/kjacobi\/patchFiles\/patch2-mplayer-33766.pch\u201d, \u201ccd \/c\/mingw\/include\/\u201d, and \u201cpatch mpg123.h \/c\/Users\/kjacobi\/patchFiles\/patch3-mplayer-33766.pch\u201d.","Build mplayer. Change to mplayer-33766\/ directory and type, \u201cmake clean\u201d, \u201c.\/configure --disable-pthreads\u201d, and \u201cmake\u201d.","In MSYS window, copy Imaging-1.1.7.tar.gz to openSourceSw\/build\/directory, unwrap it, change to \u201cImaging-1.1.7\/\u201d directory and type, \u201cpatch setup.py \/c\/Users\/kjacobi\/patchFiles\/patch-Imaging-1.1.7.pch\u201d, (consider first updating \u201ckjacobi\u201d path within patch file), \u201ccd ..\/tiff-3.9.5\/libtiff\/\u201d, \u201ccp -p libtiff.lib \/c\/mingw\/lib\/libtiff.a\u201d, \u201ccp -p libtiff.dll \/c\/mingw\/bin\u201d, \u201ccp -p *.h \/c\/mingw\/include\u201d, \u201ccd ..\/..\/freetype-2.4.6\/objs\/win32\/vc2010\/\u201d, \u201ccp -p freetype246.lib freetype.lib\u201d, \u201ccp -p freetype.lib \/c\/mingw\/lib\/freetype.a\u201d, \u201ccp -p freetype246.dll \/c\/mingw\/bin\/\u201d, \u201ccd ..\/..\/..\/include\/freetype\/\u201d, and \u201ccp -p *.h \/c\/mingw\/include\/\u201d.","In a prepped Command Prompt window, change to \u201cImaging-1.1.7\\\u201d directory and type, \u201cpython setup.py build_ext -i\u201d and \u201cpython setup.py install\u201d.","In MSYS window, copy pytiff-0.1.6.tar.gz to openSourceSw\/build\/directory, unwrap it, change to \u201cpytiff-0.1.6\/\u201d directory and type, \u201cpatch setup.py \/c\/Users\/kjacobi\/patchFiles\/patch1-win-Imaging-1.1.7.pch\u201d, and \u201cpatch pytiff.c \/c\/Users\/kjacobi\/patchFiles\/patch2-win-Imaging-1.1.7.pch\u201d.","In a prepped Command Prompt window, change to \u201cpytiff-0.1.6\\\u201d directory and type, \u201cpython setup.py build\u201d and \u201cpython setup.py install\u201d.","In MSYS window, copy pycrypto-2.3.tar.gz to openSourceSw\/build\/directory and unwrap it. In a prepped Command Prompt window, change to \u201cpycrypto-2.3\\\u201d directory and type, \u201cpython setup.py build\u201d and \u201cpython setup.py install\u201d.","In MSYS window, copy gameobjects-0.0.3.zip to openSourceSw\/build\/directory and unwrap it. In a prepped Command Prompt window, change to \u201cgameobjects-0.0.3\\\u201d directory and type, \u201cpython setup.py install\u201d.","In MSYS window, consider copying dejavu-fonts-ttf-2.33.tar.bz2 to openSourceSw\/build\/directory and unwrapping it. Consider making a \u201cttf\/\u201d, (for true type font), subdirectory under \/c\/Users\/kjacobi\/buildShow\/cueDir\/program\/ that contains \u201cLICENSE\u201d, \u201cDejaVuSans-Bold.ttf\u201d, \u201cDejaVuSansMono-Bold.ttf\u201d, and \u201cDejaVuSans.ttf\u201d from the dejavu-fonts-ttf-2.33 archive.","Alternative embodiments could modify the pages of  by substituting, subtracting, and\/or adding different objects, colors, patterns, paths, buttons, menus, dialog boxes, cue touch items, and auxiliary activation inputs. More or less than four predefined cue touch items could direct rotation styles and tempos. Their specifications may be subdivided. In addition, specific objects, colors, patterns, paths, in-place rotations, in-place animations, and\/or in-place behaviors may be predefined with more buttons, menus, and dialog boxes, and selected with additional cue touch items and auxiliary activation inputs, providing additional initial individual real-time directions. Shows that choose to replay initial individual real-time directions, depicted in , are affected as well.","Different Objects","Instead of, or in addition to, circular objects on the pages of , squares, stars, diamonds, ovals, trapezoids, custom bitmaps, photographs, animations, videos, three-dimensional models, animated three-dimensional models, three-dimensional image objects, \u201cthree-dimensional video objects,\u201d or a combination, may be applied. Three-dimensional video objects are virtual polyhedrons with videos on one or more sides. One embodiment accommodates from 1 to 16 objects, (6 are used as a default). Other embodiments may allow more.","Objects may be modified, for one embodiment, using the customization process or editing strVars.txt. Lines  to  of cueStage.txt read variables \u201ciconTypeList,\u201d \u201cimgList,\u201d (for image list), and \u201cbtmList,\u201d (for bitmap list) from strVars.txt. Variable iconTypeList determines a type of object to be displayed in each of 16 positions. One embodiment uses code \u201covl\u201d in each position to indicate circular objects, (created as Tk canvas \u201coval\u201d items). Additional iconTypeList codes, \u201cimg,\u201d and \u201cbtm,\u201d direct one embodiment to find a respective object by referring to an image in imgList or a bitmap in btmList, respectively. Lines  to  of cueStage.txt and lines  to  of strVars.txt give examples of each list.","Alternative embodiments may provide a wider range of different objects. Similar to the style and tempo buttons of , alternative embodiments may provide \u201cobject\u201d buttons that provide menus and dialog boxes for selecting objects for particular positions. Cue touch items and auxiliary activation inputs, similar to those of , could instantly invoke the predefined objects. Such activations would constitute further initial individual real-time directions.","Different Object Patterns","Patterns of objects may be modified, for one embodiment, using the customization process or editing strVars.txt. Line  of cueStage.txt reads variable \u201cgroup,\u201d from line  of strVars.txt. Variable group determines, for one embodiment, which positions are visible. For example, one embodiment uses decimal 1365 as a value for group. Decimal 1365 equals binary 0000 0101 0101 0101. That is, bits 0, 2, 4, 6, 8, and 10 are set. They make positions 0, 2, 4, 6, 8 and 10 visible.","Alternative embodiments may provide a range of different object patterns. Similar to the style and tempo buttons of , alternative embodiments may provide \u201cpattern\u201d buttons that provide menus for selecting which positions are visible. Cue touch items and auxiliary activation inputs, similar to those of , could instantly invoke the predefined patterns. Such activations would constitute further initial individual real-time directions.","Different Object Colors and Opacity Levels","Colors of objects may be modified, for one embodiment, using the customization process or editing strVars.txt. Line  of cueStage.txt reads variable \u201ccolors,\u201d from line  of strVars.txt. Variable colors determines, for one embodiment, a color for each position.","Alternative embodiments may provide a range of different object colors and opacity levels. Similar to the style and tempo buttons of , alternative embodiments may provide \u201ccolor\u201d and \u201copacity\u201d buttons that provide menus for selecting colors and opacity levels for each position. Cue touch items and auxiliary activation inputs, similar to those of , could instantly invoke the predefined colors and opacity levels. Such activations would constitute further initial individual real-time directions.","Different Paths","Custom paths of objects may be drawn, for one embodiment, using the \u201cnew design\u201d button of  and drawing canvas of . One embodiment uses a circular path, depicted in , as a default when recording or replaying initial individual real-time directions. One embodiment, for both initial and second individual real-time direction environments, allows paths to become visible, with a specific color and thickness, using the customization process or editing strVars.txt.","Alternative embodiments may provide a range of different object paths, including three-dimensional paths. Similar to the style and tempo buttons of , alternative embodiments may provide \u201cpath\u201d buttons that provide menus, dialog boxes, polynomial equations, differential equation solutions, and\/or drawing canvases for creating or importing unique or standard object paths. Cue touch items and auxiliary activation inputs, similar to those of , could instantly invoke the predefined paths. Additional cue touch items could change their colors and opacity levels. Such activations would constitute further initial individual real-time directions.","Other embodiments may use a different path as a default path. For example, a path in the shape of a logo may augment branding efforts. One embodiment uses a default path instead of an edge path for initial individual real-time direction replays. An alternative embodiment could provide an extra option to choose, or use the edge path as indicated on the page of .","Paths, for one embodiment, depict a graphical motion analog to one bar of music. Paths, for alternative embodiments, may correlate to multiple bars of music. Alternative embodiments could record with single bar paths and replay with multiple bar paths, or vice versa. Alternative embodiments could offer options to set numbers of bars of music to be portrayed by particular paths. For example, one or more button widget menu items, similar to the \u201cstart delay\u201d button of , could be added to the page of  to indicate how many bars of music correspond to a custom path, edge path, or both.","Object In-Place Rotation, Animation, Behavior","One embodiment employs second individual real-time directions to facilitate object in-place rotation changes. Alternative embodiments may utilize initial individual real-time directions. In-place rotation may be controlled directly, depicted with three-dimensional objects, or interpreted from object movements. Each position on a closed path may be translated into an in-place rotation angle. Likewise for in-place animations and in-place behaviors.","Multiple Initial Individual Real-Time Direction Recordings","One embodiment incorporates a single initial individual real-time direction recording per medley or selection show. Alternative embodiments may record and integrate multiple sessions of initial individual real-time directions. For example, a session may be recorded for object movements. Another session may record changes in color and\/or opacity levels. Another session may record in-place rotation directions, etc. All initial individual real-time direction sessions may be brought to bear during medley and selection shows.","In addition to movements along a path, transitions throughout an entire volume may be achieved by alternative embodiments. For example, an alternative embodiment could record one initial individual real-time direction session per coordinate axis. Each cycle along the circular path of  could correspond to movement along a full extent, or a portion of, a coordinate axis, for example. Combining three separate sessions may be then combined to find corresponding three-dimensional volume coordinate changes, for example. Besides rectangular volumes, cylindrical or spherical coordinate systems may specify cylindrical or spherical volumes, respectively. Other arrangements are possible.","Initial individual real-time directions modifying different aspects and given by multiple users may be integrated into a single show by alternative embodiments. Such embodiments may be a basis for interactive social games.","Predefined Series of Activations, Tempos","For any type of initial individual real-time direction, a button may arrange to assemble a series of them. For example, several different patterns may be grouped together. These directions may follow each other automatically in succession, and repeat upon completion. An independent pace for each series may be set using tempo buttons similar to those of . A pace may also be linked to tempos for a separate type of direction. For example, a series of patterns may be linked with rotation tempos. Each pattern in the series may change for each rotation beat. Activating different rotation styles and tempos would automatically change tempos for series that were linked. The tempos for these linked series could be controlled by rotation cue touch items, even if rotation of objects was halted. A \u201cbeat delay\u201d variable may be set for each series. It would delay when a change occurs, relative to a new beat.","Additional Audio and\/or Video Recordings","One embodiment, using the song button of , plays one audio and\/or video recording when an initial individual real-time direction session starts or continues.","Alternative embodiments may include additional audio and\/or video recordings that play when an initial individual real-time direction starts or continues.","Second Individual Real-Time Directions","Different Objects","Instead of, or in addition to, three-dimensional image objects on the pages of , circles, squares, stars, diamonds, ovals, trapezoids, custom bitmaps, photographs, animations, videos, three-dimensional models, animated three-dimensional models, three-dimensional video objects, or a combination, may be applied. Other embodiments may accept a greater number of image formats and integrate converters, such as for PDF, (portable document format), files. One embodiment uses six-sided, rectangular three-dimensional image objects. Alternative embodiments may use virtual polyhedrons with a different number of sides. One embodiment provides hue and hue rule options affecting entire objects. Alternative embodiments can add finer-grained options that affect individual faces and portions of faces. One embodiment accommodates from 1 to 16 objects, (1 and 6 are used as defaults). Other embodiments may allow more.","One embodiment implements a predefined Fit Mode that breaks certain images, into two and trims margins to improve readability. Other embodiments can expand the Fit Mode concept into a full-featured option, selected and defined by the user on a per-image, per-image-type, or per-show basis. For example, the user may divide an image into a chosen number of images using specified division formats and margin reductions.","Graphical Controls","Alternative embodiments may provide one or more graphical control panels, buttons, and\/or other widgets, (and, optionally, blatant auxiliary activation inputs), to activate second individual real-time directions.","Additional Controls and Presets","Different formats and additional second individual real-time directions for controlling object speeds, in-place rotations, animations, and behaviors may be employed by alternative embodiments. Likewise for navigating between saved virtual perspectives, Survey Views, Face Views, and Stage View. For example, an alternative embodiment may dedicate an input to pause and resume object in-place rotations, regardless of whether an initial individual real-time direction recording is playing or not. Alternative embodiments may provide additional rotation controls for objects that rotate in-place on two or more axes. Alternative embodiments may add second individual real-time directions that toggle which way objects move and rotate in-place. Alternative embodiments may add second individual real-time directions that change object in-place animations and\/or in-place behaviors. Alternative embodiments may allow seamless transitions from Face View or Survey View to custom virtual perspectives when the pause second individual real-time direction is issued. Alternative embodiments may add second individual real-time directions for muting, unmuting, delaying, and advancing individual audio or video recordings. In addition to a constant press of a right-hand \u201cshift\u201d key to temporarily upgrade refresh rates, (if curtailed by customization), as for one embodiment, an alternative embodiment can implement a preselected time period and a momentary activation, for example. Multiple presets for instantly changing from one set or subset of directions to another may be utilized. Function directions, programmed to automatically switch through a series of presets, may be applied.","Face View Enhancements","Panning and zooming in Face View may be enhanced with directions that smoothly zoom into and pan to preselected areas. Preselected areas may be standard or custom. That is, pan and zoom offsets may be saved similarly to how other virtual perspectives are saved by the user when not in Face View or Survey View. Alternatively, they may be specified using a mouse or similar pointing device. Other directions can smoothly zoom and pan out, and\/or center a Face View image. A speaker may thus indicate relevant subject matter on a Face View image.","A cursor object, controlled by a mouse or similar pointing device, may be added to Face view. A speaker may thus point to relevant subject matter on a Face View image.","Cursor movements and preselected, smooth zooming and panning could be recorded as second individual real-time directions during an \u201cedit mode\u201d show. They could be replayed during a \u201cview mode\u201d show. Additionally, they could be separated from other second individual real-time directions into files associated with names of images or videos displayed during Face View. Those files, if present, could be played via a second individual real-time direction during subsequent \u201cedit mode\u201d shows. The second individual real-time direction could be the same one that plays additional audio and\/or video recordings corresponding to displayed Face View images, for one embodiment. The user may review audio and cursor movement portions of lectures that correspond to individual images, at random and on demand, for example.","In addition to playing audio, video, zoom, pan, and cursor movement recordings corresponding to displayed Face View images or videos, alternative embodiments may provide second individual real-time directions to launch additional services, applications, and\/or content. For example, instead of calling the Mplayer application to play an audio recording, a batch file, shell script, or other specific program call may be arranged. A show may thus become a full-fledged graphical user interface, (GUI), in itself!","Alternative embodiments may use additional object database entry fields that allow the user to specify additional materials directly. For example, one embodiment uses a \u201cleft\u201d field to specify an image name that corresponds to the left face of an object. Alternative embodiments may include a \u201cleft_aud\u201d field that specifies an additional audio recording name that corresponds to the left face of the object, or a \u201cleft_pro\u201d field that specifies an additional program name. Directly specified additional materials advantageously have fewer path and file naming constraints.","Alternative Motion Equations, Direction Paradigms Initial and\/or Second Individual Real-Time Directions","An initial or second individual real-time direction may or may not continue to apply after its input is released. Influence from the direction may vary with time, growing, decaying, oscillating, or a combination. For example, an initial individual real-time direction for object opacity may make objects gradually turn invisible then reappear.","Objects on a path do not have to move uniformly together. Initial and\/or second individual real-time directions may apply to just a subset of objects. A same subset and\/or additional subsets of objects may be influenced by direct interactions and\/or through attractive and\/or repulsive virtual forces from objects and\/or paths and\/or regions of virtual space. Likewise for virtual perspectives and related second individual real-time directions.","An initial individual real-time direction affecting object translation or rotation, may follow alternative equations than those outlined by , as per one embodiment. For example, a direction may impart a constant or variable virtual force of a given strength instead. The strength may determine acceleration and deceleration speeds, for example.","In addition to forward and reverse movements along a path, initial individual real-time directions may control transverse motions. Hence, an object \u201cwiggle\u201d and similar movements may be effected. On a three-dimensional path, two transverse motions may be directed.","Activating an initial individual real-time direction affecting object translation or rotation, when it is already active, (i.e. pressing its input twice in a row), may not reset object positions, as per one embodiment. For example, a different initial individual real-time direction affecting object translation may be activated each alternate button press. Hence, for example, toggling between two directions may be effected with consecutive presses of a single button. The alternate direction may be an adjacent direction or a most recently used different direction. Alternative embodiments may fast-forward objects at double-time for a quarter-cycle when an active direction is repeated, for example. Alternative embodiments may use repeated activations to switch directions for a number of beats. Alternative embodiments may define multiple menu options to control this aspect of initial individual real-time directions. Alternative embodiments may place objects mid-path for an activation, regardless if it is a repeat activation or not. Other alternatives are possible.","One embodiment can generate back-step movements by activating two initial individual real-time directions, (with opposite bearings), in close succession. Alternative embodiments may define automatic back steps for each beat or each number of beats as part of a single initial individual real-time direction.","Different Display Hardware and\/or Lighting Uses","The cue_1.txt to cue_5.txt cache files, depicted in , may be redeployed by different software, hardware, or both. Likewise for cache files of alternative embodiments. Initial individual real-time directions may thus affect flashing lights, including their synchronizations with audio recordings. Light emitting diodes, (LEDs, inorganic and organic), liquid crystal displays, (LCDs), digital light projectors, (DLPs), quantum dots, lasers, strobes, flashlamps, and light sources that can be electrically, optically, or mechanically shuttered, refracted, or reflected may be orchestrated. White light sources may be colored with transmission filters. Lights may appear to move if many lights are used or shone at various locations at a flash rate of around 20 Hz or greater, illuminating positions as per data in the cache files. Of course, lights may also actually move. A flash may highlight a current location. Any repetitive movement maps out an equivalent path that objects may translate upon. The cache files contain information for when flashing is needed to depict objects moving on their path, as per initial individual real-time directions.","Wheels, circular fans, windmills, gears, pulleys, and other rotary components may be visually enhanced with flashing lights controlled by initial individual real-time directions. Similarly arms, legs, heads, and torsos of athletes, dancers, fashion models, and robots often undergo repetitive movements and may be similarly enhanced. Colored, flashing lights influenced by initial individual real-time directions may guide an exerciser through a pre-planned range of tempos. They could be used as a choreography tool to help a dancer practice. They could be used to add pizzazz to an exhibition, musical presentation, or stage show.","Lighting devices following individual real-time directions may provide general entertainment, instruction, decoration, and ambience, with or without background music. For example, devices or displays comprised of LEDs, LCDs, quantum dots, or a combination, could be placed underneath translucent glassware or plasticware, perhaps with frosted surface designs, on a dining room table. The glassware may be illuminated with dancing designs that are synchronized to background audio recordings. The devices attached to wheels, wrists, ankles, etc. may help direct a coached work-out, while improving night-time safety. Decorative patches, lines, and patterns of light may illuminate in time with music for Christmas and holiday displays.","One embodiment allows for recording and replaying initial and second individual real-time directions, medley shows, and selection shows. One embodiment works on devices running Windows\u2122, Mac OS X\u2122, or Linux\u2122 operating systems. Example devices include netbooks, ultrabooks, laptops, desktops, handhelds, portable computers. One embodiment provides for lighting uses as well.","Alternative embodiments may similarly provide for recording and replaying initial and second individual real-time directions, medley shows, and selection shows. Alternative embodiments may work on devices running other operating systems other than Windows\u2122, Mac OS X\u2122, or Linux\u2122. Example devices include netbooks, ultrabooks, laptops, desktops, handhelds, smart phones, portable computers, cell phones, tablet devices, readers, music players, televisions, set-top boxes, digital video disc players (all formats), digital video recorders (DVRs), game consoles, mainframes, server and client machines integrating social network services, cloud services, and internet services. External displays and DLPs, may extend a device, for example. Alternative embodiments may provide for lighting uses as well.","Robotic Uses","As discussed above, initial individual real-time directions may replace the equations outlined by  with other paradigms, such as imparting a constant or variable virtual force of a given strength. This virtual force, used for display purposes, may then be translated into an actual force. For example, robotic motor current levels may be amplitude modulated to achieve choreographic motion.","Multiple Simultaneous Paths and Object Sets","One embodiment allows for one path, its lineup of objects, and initial and second individual real-time direction sessions. Alternative embodiments may enable multiple simultaneous paths, their object lineups, and initial and second individual real-time direction sessions. Objects may overlap each other or interact in some way. For example, two objects might bounce away from each other if they touch. They could also deform or cling together for a time. Paths, in such instances, may not be strictly adhered to. Instead, paths may act as virtual forces that attract\/repulse objects to\/from them over time. The attractive or repulsive virtual forces may vary with virtual distance and\/or time and be set by the user. A path may attract all objects, including objects originally from a different path. A path may be attractive to just its original set of objects. A path might be repulsive to objects from a different path. Initial and second individual real-time directions may influence similarly as virtual forces. Such parameters, and others, could be presented as additional options for the user to experiment with.","A single two- or three-dimensional object may be broken into multiple pieces. The pieces may constitute separate objects with independent paths.","Paths may be treated themselves as objects that follow a same or different initial individual real-time direction recording during an \u201cedit mode\u201d or \u201cview mode\u201d show. An \u201canchor\u201d point for each path could determine its position on a \u201csuper-path\u201d or \u201cpath for paths.\u201d Anchor points could be at central, corner, or side locations, for example. Multiple levels of complexity are possible. That is, super-paths may themselves be treated as objects, and so on.","Different Background Scenery Objects","One embodiment uses six-sided, rectangular three-dimensional image objects to display background scenery. Alternative embodiments may use virtual polyhedrons with a different number of sides and\/or use videos instead of still images to portray background scenery.","Multiple Background Scenery Objects","One embodiment displays one background scenery three-dimensional image object per show. Alternative embodiments may use more than one. Backgrounds could change via new second individual real-time directions, a countdown timer, and\/or a timetable.","Initial Individual Real-Time Directions for Background Scenery Objects","One embodiment uses the center of a background scenery three-dimensional image object as its anchor point. Alternative embodiments may use a series of anchor points within the object, forming a path. Alternative embodiments may use an initial individual real-time direction recording to determine where on the path to anchor the background scenery object at any given moment.","Multiple Simultaneous Users","One embodiment provides a single path with objects while recording initial individual real-time directions, as depicted by . Two or more users may take turns controlling initial individual real-time direction inputs during a recording session. Alternatively, one user could control the lights button of , a second user could control the rotate button of , and a third user could control the cue touch items of . Likewise for second individual real-time directions. Users may take turns or control different aspects at once. Three-dimensional image objects created by multiple users may form a show lineup.","Alternative embodiments with larger varieties of initial individual real-time directions could allow a greater number of people to participate at once. For example, one user could control object colors, another user could manage object patterns, another could administer object paths, another object rotations, etc.","Alternative embodiments could handle parallel sets of paths, objects, and initial and second individual real-time directions. Multiple users could simultaneously issue initial or second individual real-time directions. Two or more keyboards or joysticks could be attached to a single laptop or desktop computer via universal serial bus (USB), for example.","Networked Data and Users","One embodiment invokes dialog boxes allowing the user to choose image, audio, video, or show files or folders from local or networked storage devices, as depicted in . Text files of the buildShow.txt embodiment, TextList.txt and FavoritesList.txt, are local files for one embodiment. Similarly, enhancement and reversion files are placed in a local folder to be processed.","Alternative embodiments may provide interfaces to social networks, cloud-based, and internet services. Alternative embodiments may be provided as remote software services. Users could specify, (and show database entries could link), image, audio, video, and show files and folders directly. Separate downloading and re-linking steps may be skipped in some cases. Media may be streamed in some cases. For copy-protected works, an import mechanism may redirect links through the user's paid accounts. Alternative embodiments may link to and manage multiple cloud-based instances of FavoritesList.txt and TextList.txt. The customization process may be automated and managed with a cloud-based service.","Alternative embodiments may allow multiple, remotely located users to simultaneously record and replay initial and second individual real-time directions, medley shows, and selection shows collaboratively or independently. Social network, cloud, and internet connectivity may be employed. For example, while a same song plays, two or more users may each record, at a same time, initial individual real-time directions. Each user may control directions for one or more aspects of a single set of objects and paths. Alternatively, each user may manage all or a portion of directions for parallel sets of objects and paths. Parallel sets of objects may provide additional interactions based on virtual locations, (i.e. via virtual forces, etc.). Second individual real-time directions, where object translation and rotation controls are concerned, may also be shared. Each user may influence a subset of controls for a single set of objects and paths. Alternatively, each user may administer all or a portion of controls for parallel sets of objects and paths. Parallel sets of objects may provide additional interactions based on virtual locations, (i.e. via virtual forces, etc.). Multiple users may also work independently on separate works simultaneously.","Different Activation Inputs","One embodiment uses keyboard keys as blatant auxiliary activation inputs for initial individual real-time directions and menu navigation. For example, keyboard keys are depicted in parentheses within many figures, including the buttons of  and the cue touch items of . One embodiment activates many second individual real-time directions using keyboard keys as inputs.","Alternative embodiments may use different activation inputs. For example, buttons, screen touches, additional keyboard keys, joystick toggles, remote controls, and specific recognitions by way of mice, styluses, pointing devices, direct touches, optical cameras, audio microphones, motion sensors, and thought detectors may encompass activation inputs. Activation inputs may be derived from electronic musical instruments, electronically-adapted musical instruments, and musical instrument emulation devices, for example.","Different Widget and Activation Input Representations, Syntaxes, Icons","One embodiment uses text-based widgets. One embodiment uses text characters to indicate keyboard key activation inputs. Parentheses enclose text characters representing blatant auxiliary activation inputs, for one embodiment.","Alternative embodiments may use graphical representations, textual portrayals, or both to indicate widgets and\/or activation inputs. Alternative embodiments may indicate blatant auxiliary activation inputs using a different separator syntax. Blatant auxiliary activation inputs may involve a repetition count. Line numbers may imply repetition counts.","A consistent syntax may distinguish a blatant auxiliary activation input from its widget.  depicts some example button widget menu items similar to the option buttons of . They illustrate instances of syntaxes that indicate keyboard key \u201co\u201d is a blatant auxiliary activation input.","A consistent combination of upper case, lower case, italic, underlined, bold, and other text styles may designate widgets and their blatant auxiliary activation inputs.  portrays some examples of formats to represent button widget menu items similar to the option buttons of .","Alternative embodiments may use graphical icons that inform the user of activation inputs.  depicts example icons for motion gesture inputs. Motion sensors and\/or gesture recognizers may be integrated into or otherwise connected to a device. The icons are portrayed as blatant auxiliary activation inputs for button widget menu items similar to the option buttons of . A few words to describe each motion gesture appear below each example, in parentheses.","Each primary input may be combined with a second input, such as a button press or screen touch, to distinguish primary inputs from normal ambient conditions. For example, pressing a button while providing motion gestures may separate the inputs from normal motions that a portable device might undergo while in transit.","Alternative embodiments may indicate a number of repetitions that applies to a particular input or input combination, effectively refining or \u201ctime demultiplexing\u201d a single input or input combination into several activation inputs.  provides four examples of button widget menu items similar to the options, voice, and song buttons of . In each example, buttons are activated with a same motion gesture. They are distinguished by the number of consecutive motion gestures in a row, without a significant pause. The options button activates if a single gesture is given. The voice button corresponds to two consecutive gestures, and the song button three, before a pause.","If an input or input combination is established as a default, alternative embodiments may specify a number of repetitions to activate a widget, or an initial or second individual real-time direction.  provides three more examples like that of , minus icons for motion gesture inputs. The first example uses Arabic numerals, and the second, Roman numerals. The third example uses a line number to infer a repetition count! Consistent use of such menu activation layouts may improve multitasking performance of the user. Identifying a keyword and line number is enough to make a choice!",{"@attributes":{"id":"p-0838","num":"0858"},"figref":["FIG. 118","FIGS. 2 and 45"]},"Different Widget Organizations, Navigation Flows, Interfaces, Widgets","In addition to new widget and activation input representations, alternative embodiments may rearrange, reorganize, add, and\/or remove widgets, pages, navigation flows, and\/or interfaces.","One embodiment provides the copy and rename buttons of . Alternative embodiments may add similar buttons to the pages of , for example.","Different Menu Selection and Program Navigation Techniques","Alternative embodiments may use menubars containing drop-down menus, panes, tabbed notebook widgets, icon toolbars, ribbons, and other program navigation techniques.","An alternative embodiment may provide a new button on the page of  that establishes a second pop-up window for dragging and dropping image preview icons onto the front, right, back, left, top, and bottom buttons to specify images of a three-dimensional image object, for example. New dialog boxes, replacing those in , and , may be designed from scratch to include blatant auxiliary activation inputs and image and video preview icons, where relevant, for example. They may also implement application programming interfaces, (APIs), to social networks and cloud services, for example.","Different Devices, Os's, Software Frameworks, and Languages","Alternative embodiments may employ different devices, operating systems, software frameworks, and languages. For example, operating systems of smart phones, tablet computers, and personal digital assistants, may host alternative embodiments written in native development languages. Other languages, such as HTML5, PHP, XML, Ruby, Perl, Javascript, Java, C, C++, C#, ObjectiveC, Assembly, etc. may be utilized. Alternative embodiments may run from a browser application. Alternative embodiments may use different database models.","One embodiment allows for recording and replaying initial and second individual real-time directions, medley shows, and selection shows. One embodiment works on devices running Windows\u2122, Mac OS X\u2122, or Linux\u2122 operating systems. Example devices include netbooks, ultrabooks, laptops, desktops, handhelds, portable computers. External displays and DLPs, may extend a device, for example.","Alternative embodiments may similarly provide for recording and replaying initial and second individual real-time directions, medley shows, and selection shows. Alternative embodiments may work on devices running other operating systems other than Windows\u2122, Mac OS X\u2122, or Linux\u2122. Example devices include netbooks, ultrabooks, laptops, desktops, handhelds, smart phones, portable computers, cell phones, tablet devices, readers, music players, televisions, set-top boxes, digital video disc players (all formats), digital video recorders (DVRs), game consoles, mainframes, server and client machines integrating social network services, cloud services, and internet services. External displays and DLPs, may extend a device, for example.","Performance Improvements","One embodiment is described in concise terms. Alternative embodiments may improve performance using various techniques, including using lower level computer languages that are more efficient, but less concise. Post-processed images, including widths, heights, and string conversions of tdiObjShow.txt, lines  to , may be cached for subsequent runs of shows, for example.","Different International Languages","Alternative embodiments may integrate different international languages, (i.e. instead of English).","Two- and Three-Dimensional Environment Variations, Alterations","One embodiment uses a two-dimensional environment for recording and playing initial individual real-time directions. One embodiment uses a three-dimensional environment for medley and selection shows that include initial and second individual real-time directions.","Alternative embodiments may use two- or three-dimensional environments for recording and playing initial individual real-time directions. Alternative embodiments may employ two- or three-dimensional environments for medley and selection shows that include initial and second individual real-time directions.","A two-dimensional environment advantageously uses fewer device resources and less consequent energy for portable computing devices. A three-dimensional environment advantageously provides a compelling, interactive experience.","Alternative embodiments may emulate three-dimensional aspects within a two-dimensional environment. For example, instead of a rotating three-dimensional image object, a series of images may share an object position via time multiplexing. That is, a set of images may be displayed, one after the other. Rate of change may coincide with what would otherwise be in-place rotation speed. Each image could represent a face of a three-dimensional image object within Face View.","A three-dimensional environment may be further emulated by substituting the following two-dimensional object effects for three-dimensional perspective view actions: 1) zooming in and out instead of moving forward and backward, respectively, 2) panning left and right instead of yawing right and left, respectively, 3) rotating clockwise and counterclockwise instead of rolling counterclockwise and clockwise, respectively, and 4) panning up and down instead of pitching down and up, respectively.","Direct Sheet Music Translation","Alternative embodiments could use the ideas presented to translate sheet music directly into graphical object flows, replacing initial individual real-time directions for \u201ctime signatures.\u201d Initial individual real-time directions for flow styles, bearings, and tempos, among others, may still be applicable.","Channel Surfing and Program Selection","Providers of multimedia content may provide predefined show object lineups instead of program listings. The user may switch to programs and channels based on their corresponding objects, using existing and\/or new second individual real-time directions.","The user may select initial individual real-time direction recordings, object paths, and background audio or video recordings, as usual. Second individual real-time directions are used to peruse program content and channel content objects. Because the user is more engaged than when simply reading a schedule, unfamiliar content is less likely to be overlooked, and more likely to be reviewed, studied, and\/or investigated. Show lineups may include promotional objects that switch to advertisements or web sites.","Content providers may provide complete \u201cedit mode\u201d shows that also specify initial individual real-time direction recordings, object paths, and background audio or video recordings. \u201cView mode\u201d shows, that add second individual real-time direction recordings, may also be distributed by content providers. \u201cEdit mode\u201d and \u201cview mode\u201d shows may introduce and\/or conclude programs, and\/or advertise, for example. Users who want to read end credits for a movie can do so with an \u201cedit mode\u201d or \u201cview mode\u201d show, while a main channel begins a next scheduled movie without boring viewers who are not interested, for example. Facts, trivia, trailers, memorabilia, contests, news, reviews, commentaries, and cartoons are other examples of information that may be distributed with \u201cedit mode\u201d and \u201cview mode\u201d shows.","Multimedia Recorders and Players","Predefined or automatically generated \u201cedit mode\u201d and\/or \u201cview mode\u201d shows may provide the user an interface to recorded or featured programs and movies, scene selections, credits, trailers, behind-the-scenes extras, director and\/or actor interviews and commentaries, trivia, etc.","Graphical User Interface, (GUI)","\u201cEdit mode\u201d shows perform as general graphical user interfaces, (GUIs), when, for example, second individual real-time directions search for and run programs, batch files, and\/or shell script files that correspond to image filenames displayed in Face View. Such second individual real-time directions could be very similar to the ones that play additional audio and\/or video recordings, for one embodiment, for example. Alternative embodiments may use additional object database entry fields that allow the user to specify additional materials directly. For example, one embodiment uses a \u201cleft\u201d field to specify an image name that corresponds to the left face of an object. Alternative embodiments may include a \u201cleft_aud\u201d field that specifies an additional audio recording name that corresponds to the left face of the object, or a \u201cleft_pro\u201d field that specifies an additional program name. Directly specified additional materials advantageously have fewer path and file naming constraints.","Additional Uses","Blatant auxiliary activation inputs may be used to navigate programs, operating systems, services, applications, apps, utilities, web pages, etc. Complete screen utilization improves clarity and readability for vision-impaired or reduced-size display users.","Embodiments may be utilized as teaching and practicing tools for typing, music, math, foreign languages, sign languages, vocabulary, and\/or motor skills. Instruction and skills practice for other activation input mechanisms may comprise additional uses. Top-down menu layouts help teach \u201cdirectory tree structure\u201d. Embodiments may organize business, promotion, academic, and personal communications. Artistic expression, storytelling, entertainment, mood intervention, and social engagement are further applications.","Importing Scenes from a Video","Providing synopses of videos and a mechanism for commenting on videos are other uses. Reducing a video to a shortened series of images and an audio track diminishes data storage and bandwidth usage.","Alternative embodiments may automate conversions of videos to medley or selection shows. For example, given a list of time instances, an embodiment may rely on an import script to pull out corresponding images from a video and separate its audio portion. Second individual real-time directions that switch to the images in Face View at related time instances may be simulated by script, as well. Commentary audio tracks may be added. Cursor movement and\/or zooming second individual real-time directions may be incorporated.","Additional Audio and\/or Video Recordings","One embodiment, using the voice and song buttons of , plays two audio and\/or video recordings when a show starts, (i.e. specified without second individual real-time directions). One embodiment may play additional audio and\/or video recordings using second individual real-time directions.","Alternative embodiments may include additional audio and\/or video recordings that play when a show starts.","A start delay or skew may delay or advance, respectively, each recording with respect to a show start. In addition, second individual real-time directions may fine-tune each delay for each recording. Such capabilities enable, for example, replaying a conference call or netcast, with local recordings filling in for transmission loss gaps.","Audio and\/or Video Recording, Previewing, and\/or Editing Capabilities","Alternative embodiments may include audio and\/or video recording, previewing, and\/or editing capabilities.","Image Capture and\/or Editing Capabilities","Alternative embodiments may include image capture and editing capabilities.","Different Behaviors after Initial Individual Real-Time Directions Finish","As explained with lines  to  of tdiObjShow.txt, speed control of objects switches from initial to second individual real-time directions, after an initial individual real-time direction recording has finished. Alternative embodiments may choose instead to stop a show, repeat a same initial individual real-time direction recording, start a new initial individual real-time direction recording, or implement other behaviors.","Appending Second Individual Real-Time Directions","As explained with lines  to  of tdiObjShow.txt, alternative embodiments could provide an option to append new second individual real-time directions at the end of a \u201cview mode\u201d show.","Automatic Search, Download, and\/or Link","The bottom three checkbuttons of the import pages of  indicate to one embodiment where separately downloaded files may be found. Corresponding paths in database entries are automatically modified. Alternative embodiments may provide options that automatically search and find referenced titles, download them if pertinent, and update pathnames or universal resource locators, (URLs), within database entries. Searches may be performed on local storage devices, network attached storage devices, or on the internet.","Message Authentication Code Options for Covering Additional Recordings, Services, Applications, and Content","One embodiment authenticates images of three-dimensional image objects. Alternative embodiments may include an option to include show audio and\/or video file content for authentication purposes. Because these files may be quite long, an import process may experience delays.","One embodiment does not include additional recordings, services, applications, and\/or content that correspond to image or video names displayed in Face View as part of a show database. Alternative embodiments, during a save process, may conduct a search for these additional materials and include them as part of a show database. Alternative embodiments may use additional object database entry fields that allow the user to specify additional materials directly. For example, one embodiment uses a \u201cleft\u201d field to specify an image name that corresponds to the left face of an object. Alternative embodiments may include a \u201cleft_aud\u201d field that specifies an additional audio recording name that corresponds to the left face of the object, or a \u201cleft_pro\u201d field that specifies an additional program name. Directly specified additional materials advantageously have fewer path and file naming constraints. An option to include their contents for authentication purposes may be provided.","Message Authentication Codes Covering Entire Export Text Messages","One embodiment includes message authentication codes in show and object database entries. Alternative embodiments may include a message authentication code within an export text file that authenticates the entire file. A change to the show export text file, (not made with the buildShow.txt embodiment), may be detected and a show import operation cancelled. An \u201cAUTHENTICATION CODE:\u201d label and the message authentication code may be displayed near the \u201cCURRENT FILE:\u201d label of . The user may optionally send the message authentication code on a trusted channel to confirm origination. A change to the show export text file, even if made by the buildShow.txt embodiment, could then be manually detected before importing.","Show Export Binary Files","One embodiment uses show export text files. Alternative embodiments may use show export binary files.","Export Files Containing Referenced Material as Well","Show export text files for one embodiment contain no media content other than, potentially, TextList.txt. Show export text or binary files for alternative embodiments may contain additional relevant media content, such as referenced images, or audio or video recordings, for example.","Splash Messages for Medley and\/or Selection Shows","Similar to the splash message that closes the buildShow.txt embodiment, depicted in , alternative embodiments may allow the user to specify custom splash messages for medley and\/or selection shows. Messages may appear after a show opens, at specified times during the show, and\/or before it closes, for example.","Different Splash Messages for Embodiments","One embodiment uses a single splash message when closing. Alternative embodiments may use different splash messages when opening and\/or closing. A single message helps brand a product. Alternative embodiments could use multiple different messages for closings and\/or openings. Multiple different messages help keep a product fresh and new. Alternative embodiments could allow the user to customize closing and\/or opening messages. Custom messages provide a creative outlet for users.","Multiple Show Playlists","One embodiment plays initial individual real-time direction recordings and \u201cview mode\u201d shows one at a time. Alternative embodiments may allow the user to play several, successively, one after the other.","Enclosed Virtual Space","One embodiment does not limit virtual perspective changes. Alternative embodiments may enforce limits on virtual space volumes. Alternative embodiments may nix background scenery objects to ensure unencumbered views of such limits.","Computer Controlled Target and\/or Obstacle Objects","A background scenery object and objects on a lineup are included in a show, for one embodiment. Alternative embodiments may include additional stationary and\/or moving target and\/or obstacle objects to intercept or avoid, respectively, by chance or skill. Moving obstacles may be programmed with distinguishable behavior traits or a random set of vectors, for example.","Different Customization Interface, Customizations, Process","One embodiment uses plaintext enhancement and reversion files depicted in  and the customize button of  to illustrate a customization process concept. Alternative embodiments would provide a full-fledged interface to choose, request, turn on or revert, and otherwise manage customizations. Alternative embodiments with greater or fewer startup variable values, potentially eligible for customizations, may have correspondingly different strVars.txt file formats.","Instead of enhancement and reversion files, a complete, new, encrypted strVars.txt file may be delivered in response to a customization request. Public-key cryptography could then be used whereby an embodiment would read strVars.txt using a public key. An embodiment would not have to modify strVars.txt, and therefore the public key would suffice. A remote service would use the secret key to write the encrypted file. If an embodiment were reverse-engineered to discover the public key, a third party could read encrypted strVars.txt files, but could not alter or write them. The remote service would maintain distribution control of unique, new, encrypted strVars.txt files.","Advantages","Advantages of one or more aspects help users enjoy creating personally moving presentations. Users can experiment with initial individual real-time directions, paths, second individual real-time directions, audio recordings, video recordings, additional services, applications, and\/or content for various objects, lighting devices, machines, and\/or robots.","An advantage of one or more aspects challenges users on how best to evoke an emotional response, and\/or avoid obstacle objects, and\/or intercept target objects, and\/or create artistic, intriguing, unique, and\/or funny perspectives. Providing such creative outlets is a hook for becoming familiar with initial and second individual real-time directions. In addition to developing informal presentations that may, for example, convey recent personal events, messages, and\/or artistic sensibilities, they may be used for professional, educational, developmental, therapeutical, entertaining, promotional, and other commercial endeavors. User familiarity with second individual real-time directions stimulates curiosity and greater interactivity with third-party exhibits.","An advantage of one of more aspects encourages repetitive use of input mechanisms which boosts skill level and improves productivity. Specific input mechanisms may be targeted for more practice using the customization process or editing strVars.txt.","An advantage of one or more aspects allows users to make distinctive changes that are remembered on subsequent runs. User demand for customizations can be monetized by a supplier.","An advantage of one or more aspects pairs distinct presentation views of specific objects with audio recordings, video recordings, zoom recordings, pan recordings, cursor movement recordings, additional services, additional applications, and\/or additional content. Second individual real-time directions exhibit or discover them.","An advantage of one or more aspects visually animates musical concepts, promoting discussion, learning, and appreciation of music, math, arts, and sciences.","An advantage of one or more aspects enables small export text files to share, authenticate, and manage personally moving presentations without infringing copyrighted works. Shows are experienced as intended using personally licensed copies of referenced published songs or music-videos, for example.","An advantage of one or more aspects generates demand for personally licensed copies of published works.","An advantage of one or more aspects automatically recreates unique, colorful text objects from a TextList.txt file, (wrapped within an export text file) when importing a show. Complete shows may thus be shared with export text files. Copies of published works, if referenced, may already be personally licensed and available.","An advantage of one or more aspects allows easy production, exporting, authenticating, importing, and managing of shows incorporating initial and\/or second individual real-time directions. Shows may act as graphical user interfaces for images, documents, audio recordings, video recordings, additional services, additional applications, and\/or additional content.","An advantage of one or more aspects presents and shares information contained within a video using less bandwidth. High quality images and audio recordings are valued more highly than low quality videos, when bandwidth is a concern.","An advantage of one or more aspects reproduces teleconferences or netcasts or podcasts using high quality, remotely recorded audio and\/or video recordings, images and\/or documents. Remote recordings are not subject to transmission errors and\/or packet losses and resultant distortions and\/or drops.","An advantage of one or more aspects parlays one specific set of choices into another, one screenful at a time. Displays are fully utilized with fonts and icons that are easily distinguished.","An advantage of one or more aspects depicts auxiliary activation inputs blatantly, providing a productivity boost without memorization and efficacious use of available device inputs.","An advantage of one or more aspects automatically specifies, authenticates, and produces three-dimensional image and video objects from files contained in a single directory.","An advantage of one or more aspects enables a user to specify, authenticate, and produce distinctive three-dimensional image, document, and video objects.","An advantage of one or more aspects enables a user to organize images, documents, and videos. When specific images, documents, and\/or videos are viewed within a show, their filenames may be posted to a FavoritesList.txt file via second individual real-time directions. Entries from the list may be previewed and chosen directly when specifying three-dimensional image, document, and\/or video objects.","An advantage of one or more aspects sets virtual background surround scenes using three-dimensional image or video objects. Many uncluttered background wallpaper images are easily deployed.","An advantage of one or more aspects freezes shows while still displaying them, dramatically reducing processor utilization.","An advantage of one or more aspects reduces show refresh rates while still maintaining synchronization with audio and\/or video recordings. Processor utilization is dramatically reduced. A show produced on a high-end device may still be watched on a lower-end device. An ongoing, productivity boosting, background show may be displayed with low processor utilization. Another advantage of one or more aspects temporarily upgrades show refresh rates, providing a full-featured experience on demand.","Conclusion, Ramifications, and Scope","Initial individual real-time directions manipulate object movements, in-place rotations, in-place animations, paths, colors, or patterns. Multiple levels of complexity are achieved when paths themselves are treated as objects on super-paths. Additional intricacies are generated with object or path interactions or additional users. Multiple recording sessions of initial individual real-time directions, controlling separate aspects or different sets of objects may be combined into a single show.","Second individual real-time directions manipulate object movements, (absent initial individual real-time directions), in-place rotations, (absent initial individual real-time directions), in-place animations, (absent initial individual real-time directions), or sizes. They control virtual perspectives, (including Stage Views, Survey Views, Face Views, or custom views), background scenery, object set transitions, pausing, freezing, or muting. They interface with additional audio or video recordings, second individual real-time direction recordings corresponding to specific Face View content, services, applications or content. They manage Survey View or Face View zooming, (in or out), or Face View panning or cursor movements. They manage aspect ratios, resolution upgrades, or content identification additions to a favorites list. They resize, hide, restore, or close show windows. They upgrade show refresh rates on demand, if relevant.","Shows containing colorful text messages are easily composed, assembled, shared, authenticated and managed using a TextList.txt file, auto-generated text objects, and export text files.","Shows may be shared, authenticated, and managed using small export text files that do not infringe copyrights. Incorporated works, (other than TextList.txt), are referenced, not included.","Shows themselves, in conjunction with second individual real-time directions, make personally moving, interactive, graphical user interfaces, (GUIs). For example, objects may be perused and examined in Face View. Second individual real-time directions specific to each view of each object may be activated to instigate other services, applications, and content, for example. A three-dimensional virtual environment provides clarity for learning second individual real-time directions that may be emulated elsewhere in two-dimensions, if warranted by device hardware constraints.","Initial and second individual real-time directions may be re-purposed to influence lighting devices and mechanical movements. For example, LED light flashes on a windmill arm may emulate objects on the circular path of . Or initial individual real-time directions could influence motor currents and cause a robotic arm to circle in a similar fashion, for example. Zooming in and out with second individual real-time directions could influence the flash time of the windmill's LEDs or the height of the robot's arm, as further examples. Holiday light displays may be synchronized with music using initial and\/or second individual real-time directions, for example.","Those of skill in the art will appreciate that other embodiments may be realized. First, particular naming of components, capitalization of terms, attributes, data structures, or any other programming or structural aspect is not mandatory or significant, and mechanisms that implement features may have different names, formats, or protocols. Further, the system may be implemented via a combination of hardware and software, as described, or entirely in hardware elements. Also, the particular division of functionality between the various system components described herein is merely exemplary, and not mandatory; functions performed by a single system component may instead be performed by multiple components, and functions performed by multiple components may instead be performed by a single component.","Some portions of above description present a feature in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are used to most effectively convey substance. These operations, while described functionally or logically, are understood to be implemented by computer programs, which are stored in computer readable mediums. Furthermore, these arrangements of operations can be equivalently referred to as modules or code devices, without loss of generality.","It should be borne in mind, however, that these and similar terms are to be associated with appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise, it is appreciated that throughout the description, discussions utilizing terms such as \u201ccalculating\u201d or \u201cdetermining\u201d or the like, refer to action and processes of a computer system or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Certain aspects include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions could be embodied in software, firmware or hardware, and when embodied in software, could be loaded to reside on and be operated from different type of computing platforms.","Apparatus employing methods described herein may be constructed for the purposes, or may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, application specific integrated circuits (ASICs), or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus. Furthermore, the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.","The algorithms and illustrations presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may also be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specific apparatus to perform the method steps. The structure for a variety of these systems will appear from the description above. In addition, the methods not described with reference to any particular programming language. It is appreciated that a variety of programming languages may be used to implement the teachings as described herein, and any references to specific languages are provided for disclosure of enablement.","The methods are well-suited to a wide variety of computer network systems over numerous topologies. Within this field, configuration and management of large networks comprise storage devices and computers that are communicatively coupled to dissimilar computers and storage devices over a network, such as the internet.","Although the description above contains many specificities, these should not be construed as limiting the scope of the embodiments but as merely providing illustrations of some of several embodiments. The scope of the embodiments should be determined by the appended claims and their legal equivalents, rather than by the examples given."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":["DRAWINGS","Figures"],"p":["Closely related drawings share a common number, but have different letter suffixes.",{"@attributes":{"id":"p-0027","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0028","num":"0026"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0029","num":"0027"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0030","num":"0028"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0031","num":"0029"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0032","num":"0030"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0033","num":"0031"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0034","num":"0032"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0035","num":"0033"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0036","num":"0034"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0037","num":"0035"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0038","num":"0036"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0039","num":"0037"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0040","num":"0038"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0041","num":"0039"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0042","num":"0040"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0043","num":"0041"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0044","num":"0042"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0045","num":"0043"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0046","num":"0044"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0047","num":"0045"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0048","num":"0046"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0049","num":"0047"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0050","num":"0048"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0051","num":"0049"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0052","num":"0050"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0053","num":"0051"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0054","num":"0052"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0055","num":"0053"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0056","num":"0054"},"figref":["FIG. 30","FIG. 23"]},{"@attributes":{"id":"p-0057","num":"0055"},"figref":["FIG. 31","FIG. 30"]},{"@attributes":{"id":"p-0058","num":"0056"},"figref":["FIG. 32","FIG. 13"]},{"@attributes":{"id":"p-0059","num":"0057"},"figref":["FIG. 33","FIG. 13"]},{"@attributes":{"id":"p-0060","num":"0058"},"figref":["FIG. 34","FIG. 13"]},{"@attributes":{"id":"p-0061","num":"0059"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0062","num":"0060"},"figref":["FIG. 36","FIG. 28"]},{"@attributes":{"id":"p-0063","num":"0061"},"figref":["FIG. 37","FIG. 2"]},{"@attributes":{"id":"p-0064","num":"0062"},"figref":"FIG. 38"},{"@attributes":{"id":"p-0065","num":"0063"},"figref":["FIG. 39","FIG. 37"]},{"@attributes":{"id":"p-0066","num":"0064"},"figref":["FIG. 40","FIG. 37"]},{"@attributes":{"id":"p-0067","num":"0065"},"figref":["FIG. 41","FIG. 39"]},{"@attributes":{"id":"p-0068","num":"0066"},"figref":["FIG. 42","FIG. 40"]},{"@attributes":{"id":"p-0069","num":"0067"},"figref":["FIG. 43","FIG. 39"]},{"@attributes":{"id":"p-0070","num":"0068"},"figref":["FIG. 44","FIG. 40"]},{"@attributes":{"id":"p-0071","num":"0069"},"figref":["FIG. 45","FIG. 1"]},{"@attributes":{"id":"p-0072","num":"0070"},"figref":"FIG. 46"},{"@attributes":{"id":"p-0073","num":"0071"},"figref":"FIG. 47"},{"@attributes":{"id":"p-0074","num":"0072"},"figref":"FIG. 48"},{"@attributes":{"id":"p-0075","num":"0073"},"figref":["FIG. 49","FIG. 47"]},{"@attributes":{"id":"p-0076","num":"0074"},"figref":["FIG. 50","FIG. 49"]},{"@attributes":{"id":"p-0077","num":"0075"},"figref":"FIG. 51"},{"@attributes":{"id":"p-0078","num":"0076"},"figref":"FIG. 52"},{"@attributes":{"id":"p-0079","num":"0077"},"figref":["FIG. 53","FIG. 47"]},{"@attributes":{"id":"p-0080","num":"0078"},"figref":"FIG. 54"},{"@attributes":{"id":"p-0081","num":"0079"},"figref":["FIG. 55","FIG. 47"]},{"@attributes":{"id":"p-0082","num":"0080"},"figref":["FIG. 56","FIG. 47"]},{"@attributes":{"id":"p-0083","num":"0081"},"figref":["FIG. 57","FIG. 47"]},{"@attributes":{"id":"p-0084","num":"0082"},"figref":["FIG. 58","FIG. 47"]},{"@attributes":{"id":"p-0085","num":"0083"},"figref":["FIG. 59","FIG. 47"]},{"@attributes":{"id":"p-0086","num":"0084"},"figref":["FIG. 60","FIG. 59"]},{"@attributes":{"id":"p-0087","num":"0085"},"figref":["FIG. 61","FIG. 47"]},{"@attributes":{"id":"p-0088","num":"0086"},"figref":["FIG. 62","FIG. 47"]},{"@attributes":{"id":"p-0089","num":"0087"},"figref":"FIG. 63"},{"@attributes":{"id":"p-0090","num":"0088"},"figref":["FIG. 64","FIG. 62"]},{"@attributes":{"id":"p-0091","num":"0089"},"figref":["FIG. 65","FIG. 46"]},{"@attributes":{"id":"p-0092","num":"0090"},"figref":"FIG. 66"},{"@attributes":{"id":"p-0093","num":"0091"},"figref":"FIG. 67"},{"@attributes":{"id":"p-0094","num":"0092"},"figref":["FIG. 68","FIG. 45"]},{"@attributes":{"id":"p-0095","num":"0093"},"figref":["FIG. 69","FIG. 68"]},{"@attributes":{"id":"p-0096","num":"0094"},"figref":["FIG. 70","FIG. 68"]},{"@attributes":{"id":"p-0097","num":"0095"},"figref":"FIG. 71"},{"@attributes":{"id":"p-0098","num":"0096"},"figref":["FIG. 72","FIG. 68"]},{"@attributes":{"id":"p-0099","num":"0097"},"figref":"FIG. 73"},{"@attributes":{"id":"p-0100","num":"0098"},"figref":"FIG. 74"},{"@attributes":{"id":"p-0101","num":"0099"},"figref":"FIG. 75"},{"@attributes":{"id":"p-0102","num":"0100"},"figref":["FIG. 76","FIG. 28"]},{"@attributes":{"id":"p-0103","num":"0101"},"figref":"FIG. 77"},{"@attributes":{"id":"p-0104","num":"0102"},"figref":"FIG. 78"},{"@attributes":{"id":"p-0105","num":"0103"},"figref":"FIGS. 79 and 80"},{"@attributes":{"id":"p-0106","num":"0104"},"figref":"FIGS. 81 and 82"},{"@attributes":{"id":"p-0107","num":"0105"},"figref":"FIGS. 83 and 84"},{"@attributes":{"id":"p-0108","num":"0106"},"figref":"FIGS. 85 and 86"},{"@attributes":{"id":"p-0109","num":"0107"},"figref":"FIG. 87"},{"@attributes":{"id":"p-0110","num":"0108"},"figref":"FIG. 88"},{"@attributes":{"id":"p-0111","num":"0109"},"figref":["FIG. 89","FIG. 87"]},{"@attributes":{"id":"p-0112","num":"0110"},"figref":["FIG. 90","FIG. 88"]},{"@attributes":{"id":"p-0113","num":"0111"},"figref":"FIG. 91"},{"@attributes":{"id":"p-0114","num":"0112"},"figref":"FIG. 92"},{"@attributes":{"id":"p-0115","num":"0113"},"figref":"FIG. 93"},{"@attributes":{"id":"p-0116","num":"0114"},"figref":"FIG. 94"},{"@attributes":{"id":"p-0117","num":"0115"},"figref":"FIG. 95"},{"@attributes":{"id":"p-0118","num":"0116"},"figref":"FIG. 96"},{"@attributes":{"id":"p-0119","num":"0117"},"figref":"FIG. 97"},{"@attributes":{"id":"p-0120","num":"0118"},"figref":"FIG. 98"},{"@attributes":{"id":"p-0121","num":"0119"},"figref":"FIG. 99"},{"@attributes":{"id":"p-0122","num":"0120"},"figref":"FIG. 100"},{"@attributes":{"id":"p-0123","num":"0121"},"figref":"FIG. 101"},{"@attributes":{"id":"p-0124","num":"0122"},"figref":"FIG. 102"},{"@attributes":{"id":"p-0125","num":"0123"},"figref":"FIG. 103"},{"@attributes":{"id":"p-0126","num":"0124"},"figref":"FIG. 104"},{"@attributes":{"id":"p-0127","num":"0125"},"figref":"FIG. 105"},{"@attributes":{"id":"p-0128","num":"0126"},"figref":"FIG. 106"},{"@attributes":{"id":"p-0129","num":"0127"},"figref":"FIG. 107"},{"@attributes":{"id":"p-0130","num":"0128"},"figref":"FIG. 108"},{"@attributes":{"id":"p-0131","num":"0129"},"figref":"FIG. 109"},{"@attributes":{"id":"p-0132","num":"0130"},"figref":"FIGS. 110 and 111"},{"@attributes":{"id":"p-0133","num":"0131"},"figref":"FIG. 112"},{"@attributes":{"id":"p-0134","num":"0132"},"figref":["FIGS. 113A-113C","FIG. 112"]},{"@attributes":{"id":"p-0135","num":"0133"},"figref":["FIGS. 114A-114D","FIGS. 113A-113C"]},{"@attributes":{"id":"p-0136","num":"0134"},"figref":"FIG. 115A"},{"@attributes":{"id":"p-0137","num":"0135"},"figref":"FIG. 115B"},{"@attributes":{"id":"p-0138","num":"0136"},"figref":"FIG. 115C"},{"@attributes":{"id":"p-0139","num":"0137"},"figref":"FIG. 116A"},{"@attributes":{"id":"p-0140","num":"0138"},"figref":"FIG. 116B"},{"@attributes":{"id":"p-0141","num":"0139"},"figref":"FIG. 117A"},{"@attributes":{"id":"p-0142","num":"0140"},"figref":"FIG. 117B"},{"@attributes":{"id":"p-0143","num":"0141"},"figref":"FIG. 117C"},{"@attributes":{"id":"p-0144","num":"0142"},"figref":"FIG. 118"}]},"DETDESC":[{},{}]}
