---
title: Context-based suggestions mechanism and adaptive push mechanism for natural language systems
abstract: Natural language interface to a back-end application, incorporating synonyms, suggestions, and proposals. Roughly described, synonyms are automatically added to user input to enhance the natural language interpretation, whereas suggestions and proposals are offered to the user in an interaction, usually after an interpretation of prior user input. Suggestions and synonyms can be learned from user input, whereas proposals are programmed by a third party. The selection of synonyms, suggestions, and proposals for use with particular user input can be user input context-based so that further user input can maintain context by explicitly indicating that the same context is intended, and rewards-based reinforcement can be used to better focus suggestions and proposals on the characteristics of the particular user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08036877&OS=08036877&RS=08036877
owner: Sybase, Inc.
number: 08036877
owner_city: Dublin
owner_country: US
publication_date: 20081126
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","REFERENCE TO COMPUTER PROGRAM LISTING AND TABLE APPENDICES","COPYRIGHT DISCLAIMER","FIELD OF THE INVENTION","BACKGROUND AND SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","INDUSTRIAL APPLICABILITY","APPENDIX A","Dejima Policy Reference","Platform 3.0","Example 1","The Priority Vector of Claim on \u2018aaa bb\u2019 Made by policy P3","Example 2","Computing Adjacency Score","Example 3","Simple Command","Example 4","Simple Command: Attribute with Values","Example 5","Compound Attributes","Example 6","Compound Commands","Example 7","Ambiguity","Example 8","Generating XML Tags","Example 9","Generating XML Type Tags","Example 10","Generating XML Type Tags","Example 11","The Priority List of Claims","Example 12","Current Input is a Continuation","Example 13","Defining Alphabet in ParserParameters.xml","Example 14","Defining Numerals in ParserParameters.xml","Example 15","Defining Symbols in ParserParameters.xml","Example 16","Recognizing the \u00a3 Sign","Example 17","Tokenizing","Example 18","String Condition","Example 19","Using Special Characters in String Condition","Example 20","The \/F Condition","Example 21","The \/F Condition","Example 22","The \/F Condition","Example 23","The \/F Condition","Example 24","The \/F Condition","Example 25","The \/F Condition","Example 26","The Problem (why we Need Common File)","Example 27","How Common File Will Help","Example 28","Common Files","Example 29","Defining Spec File for JDBC Connection to Pointbase Using \/DB","Example 30","Defining Spec File for JDBC Connection to Microsoft Access Using \/DB","Example 31","Valid Numbers","Example 32","Symbol Terminal","Example 33","Symbol Terminal","Example 34","Delimiter Terminal","Example 35","Delimiter Terminal at the Beginning of the Input","Example 36","BOI Terminal","Example 37","EOI Terminal","Example 38","Check Condition","Example 39","Agent Reference","Example 40","Variable Condition Bound from Both Sides","Example 41","Variable Condition Bound from One Side","Example 42","Merging Variable Claims with Claims with No Variable Part","Example 43","No Claims are Made when the Input Contains No Variable Parts","Example 44","Claims with No Variables Win Over Claims with Variables","Example 45","Claims with Greater Number of Variables Win","Example 46","Claims with Smaller Variable Length Wins","Example 47","Named Variables","Example 48","Cascading Variables","Example 49","Unbound Variables","Example 50","Optional Condition","Example 51","Policy Conditions that should be Avoided","Example 52","Avoiding Null Claims","Example 53","Exists Condition","Example 54","Exists Condition","Example 55","Exists Condition","Example 56","Policies that should be Avoided","Example 57","Policy Conditions that should be Avoided","Example 58","<Exact> Condition","Example 59","Substring Matching","Example 60","Using Multiple Matches","Example 61","Default Matches (<Exact, Substring>)","Example 62","Matching Types Applied to File Terminals","Example 63","Unknown Condition","Example 64","Unknown Condition","Example 65","+ Condition","Example 66","+ Condition","Example 67","Policies Containing Recursive Conditions should not in General be Referenced by Other Policies. The Recursive Condition does not Generate all Possible Inner-Products","Example 68","An Example of Referencing Recursive Conditions in a Policy that Might go Unnoticed","Example 69","Common Mistake in + Operand Usage","Example 70","Correct Usage of + Operands","Example 71","Incorrect Usage of + Operands","Example 72","Timing Out in Recursive Condition","Example 73","^ Operand","Example 74","&^ Operand","Example 75","<^ Operand","Example 76","^ Operand","Example 77","Tag Condition","Example 78","Check Tag Condition","Example 79","| Condition","Example 80","AND Condition","Example 81","AND Condition on Claims with Loose Connections","Example 82","ORDERED Condition","Example 83","ADJACENT Condition","Example 84","COMBO Condition","Example 85","When Priority Prevents Ambiguity","Example 86","When Connection Prevents Ambiguity","Example 87","When Connection does not Prevent Ambiguity","Example 88","Incorrect Usage of Combo Condition","Example 89","Actions","Example 90","Ambiguity","Example 91","Ambiguity Using Execute Field","Example 92","More than One Ambiguity","Example 93","Too Ambiguous Error","Example 94","String Action Block","Example 95","Star Action Block","Example 96","Variable Action Block","Example 97","Not Recommended Usage","Example 98","Variable Trimmings","Example 99","Policy Reference Action Block","Example 100","Agent Reference Action Block","Example 101","Set Action Block","Example 102","Get Action Block","Example 103","Actuation Example","Example 104","Actuation"],"p":["This application claims the benefit of U.S. Provisional Application Nos. 60\/342,230 and 60\/342,237, both filed 20 Dec. 2001, and both of which are incorporated herein by reference.","Computer program listing and Table appendices comprising duplicate copies of a compact disc, named \u201cDEJI 1007-2-CPLA,\u201d accompany this application and are incorporated by reference. The appendices include the following files:",{"@attributes":{"id":"p-0004","num":"0003"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"right"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["extractSynonyms.txt","2","KBytes","created Nov. 13, 2002"]},{"entry":["InteractionAgent.java.txt","13","KBytes","created Nov. 13, 2002"]},{"entry":["opal.txt","279","KBytes","created Jul. 15, 2002"]},{"entry":["Proposal.java.txt","13","KBytes","created Nov. 13, 2002"]},{"entry":["ProposalImportance.java.txt","1","KBytes","created Nov. 13, 2002"]},{"entry":["ProposalMatch.java.txt","8","KBytes","created Nov. 13, 2002"]},{"entry":["ProposalTable.java.txt","10","KBytes","created Nov. 13, 2002"]},{"entry":["Suggestion.java.txt","6","KBytes","created Nov. 13, 2002"]},{"entry":["SuggestionMatch.java.txt","13","KBytes","created Nov. 13, 2002"]},{"entry":["Suggestions.java.txt","5","KBytes","created Nov. 13, 2002"]},{"entry":["SuggestionTable.java.txt","10","KBytes","created Nov. 13, 2002"]},{"entry":["XMLActuationAgent.java.txt","13","KBytes","created Nov. 13, 2002"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the U.S. Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The invention relates to user-machine interfaces, and more particularly, to techniques for applying synonyms, suggestions and push messages to improve the effectiveness of natural language user interaction with a back end application.","U.S. Pat. No. 6,144,989, incorporated by reference herein, describes an adaptive agent oriented software architecture (AAOSA), in which an agent network is developed for the purpose of interpreting user input as commands and inquiries for a back-end application, such as an audiovisual system or a financial reporting system. User input is provided to the natural language interpreter in a predefined format, such as a sequence of tokens, often in the form of text words and other indicators. The interpreter parses the input and attempts to discern from it the user's intent relative to the back-end application. The interpreter sometimes needs to interact with the user in order to make an accurate interpretation, and it can do so by outputting to the user an inquiry or request for clarification. In addition, the back-end application also needs to be able to provide output to the user, such as responses to the user's commands, or other output initiated by the application. AAOSA is one example of a natural language interpreter; another example is Nuance Communications' Nuance Version 8 (\u201cSay Anything\u201d) product, described in Nuance Communications, \u201cDeveloping Flexible Say Anything Grammars, Nuance Speech University Student Guide\u201d (2001), incorporated herein by reference.","Natural language interpreters have become very good at interpreting user's intent in many situations. Most systems rely on some sort of word-spotting algorithm that has been pre-defined by a programmer for the particular back-end application. In some situations, however, the language used by the user might not have been anticipated by the programmer, sometimes resulting either in commands that are either not recognized or recognized incorrectly. If they are not recognized, then the user might experience no response from the system, and if they are recognized incorrectly, then the system might command the back-end application to perform a function different from the user's intent. U.S. Pat. No. 6,144,989, incorporated above, provides some techniques for learning from contradiction resolution and from user dissatisfaction with the results of an interpretation, but additional mechanisms are needed.","Roughly described, the invention addresses the above problems through the formalized use of synonyms and suggestions. Synonyms are learned by the system using an explicit learning mechanism, and suggestions are learned using a form of implicit learning. In addition, many of the mechanisms for implementing suggestions can also be used to implement an adaptive, context-based \u201cpush\u201d functionality (sometimes referred to herein as proposals), in which the suggestions are programmed by someone other than the user. In addition, a novel statistics based reinforcement algorithm can be used to improve the accurate selection of suggestions and proposals.","A suggestion is a piece of information that the system believes to have an association with another piece of information. For example \u201cshow me movies around here\u201d may be associated with \u201cSunnyvale or Mountain View\u201d. A suggestion has value in that when it is presented to the user in an appropriate context, it allows the user to clarify a command. This improves the ability of the system to provide an interpretation. Suggestions can be vague, and may or may not be applicable in a given context. Suggestions should be presented to the user for confirmation of correct context.","In an embodiment, suggestions have an importance value attached to them to indicate the degree to which the system believes the two pieces of information are associated. For example, the association between the phrases \u201caround here\u201d and \u201cSunnyvale or Mountain View\u201d may have a high importance value, while the association between the phrases \u201cgroovy movie\u201d and \u201csomething with Bruce Willis in it\u201d may have a lower importance value. In an embodiment, the importance value is learned by the system using reinforcement learning. The importance value affects the system's selection of suggestions to present to the user.","One property of suggestions is that in general they must be presented to the user for verification. This is because a suggestion may not be appropriate for a given context. For example, if the system has an association between the phrases \u201cgroovy movie\u201d and \u201csomething with Bruce Willis in it\u201d, and the system automatically appends the second phrase to user input that includes the first phrase, without the user's acknowledgment, then the user would only ever see movies with Bruce Willis in them when requesting a groovy movie. This may often be a valid action. But it also may lead to incorrect interpretations and user confusion (\u201cwhy do I only get Bruce Willis movies when I ask for groovy movies?\u201d)","A \u201csynonym\u201d is a piece of information that means the same thing as something else. As used herein, synonyms represent an exact correspondence, and can automatically replace its matching phrase to aid interpretation. In some embodiments that include agents executing interpretation policies, synonyms common to different users can automatically be added to the appropriate agent policy to increase interpretation efficiency. Synonyms can be considered to be a subset of suggestions, in that a synonym is a suggestion with a maximum confidence value. A synonym can be swapped \u2018in place\u2019 with its matching phrase without changing the meaning of the user command. For example, given that \u201caround here\u201d has the synonym \u201cSunnyvale or Mountain View\u201d, if the user asks \u201cshow me movies around here\u201d, the system can automatically replace \u201caround here\u201d with \u201cSunnyvale or Mountain View\u201d when it attempts to interpret the command. This replacement can be done automatically, without the users knowledge. A synonym also can be used as a macro by allowing the user to define a simple phrase to stand for a complex one. For example, the user can create a synonym \u201cchart IBM\u201d equals \u201cchart IBM P\/E ratio for the last 3 years\u201d.","Proposals are similar to suggestions in that they are pieces of information that the system believes to have an association with another piece of information. They differ from suggestions in that they are programmed by a third party, such as the operator of the system, rather than being learned from interaction with the user. Proposals can be used, for example, in targeted marketing.","As with suggestions, proposals are context-based, and they are adaptive. A proposal is context-based in that the interpretation of the natural language input entered by a user is matched to a database of proposals. Only those proposals that match to a certain degree of confidence are offered to the user. Proposals are adaptive in that they can incorporate a reinforcement learning mechanism that responds to the acceptance or rejection of proposals by a user. This learning mechanism can be made system or user based. Context-based pushing of information is important both for users, who wish to avoid being flooded with irrelevant information, and information providers, who wish to target their audience. Applications for pushing relevant information to users are numerous, and include such domains as cellular phones and Internet sites. One less obvious but no less important application area for proposals is the education of users about the feature space of a natural language system. One problem associated with natural language systems is that since the user often has no visual clues as to what the system is capable of, the user fails to use many of the available system features, or attempts out of bounds functionality. Proposals can be created to recognize these situations and to provide information on the system scope. Thus the push mechanism described herein can be used to present relevant information to the user of a natural language system in response to a user interaction.","As mentioned, proposals are context based in that the interpretation, rather than the input string, is matched. Thus for proposals, the user's intent is compared to the proposal targets. Suggestions do not match on user's intent, but instead match on tokens in the user's natural language input. The reason for this difference is that generally, the reason a user follows up on previous input, is because of dissatisfaction with the system's response to the previous input. The user follows up in order to clarify or refine that response. This indicates that there were probably tokens in the input that the system did not recognize. So by generating the context value based on user input tokens, instead of on the system's interpretation, this information can hopefully be used. For example:",{"@attributes":{"id":"p-0029","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"User:","show me groovy movies"]},{"entry":[{},"System:","[responds with all movies, because it doesn't know"]},{"entry":[{},{},"what \u201cgroovy\u201d is, and hence does not claim it in the"]},{"entry":[{},{},"interpretation\/actuation)."]},{"entry":[{},"User:","something with bruce willis in it please"]},{"entry":[{},"System:","[gives results & creates a new suggestion]"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["User:","show me groovy Tom Cruise movies"]},{"entry":["System:","[returns Tom Cruise movies, and suggests \u201csomething"]},{"entry":[{},"with bruce willis in it please\u201d because the groovy token"]},{"entry":[{},"matches, even though the system still cannot interpret \u201cgroovy\u201d]."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Two drawbacks of suggestions are that it is not always easy to recognize when user input is intended as a follow-up, and it is not always easy to reformat suggestion text (which is in the same form in which it was provided by the user) to display text (which would be more user-friendly). Proposals have neither of these drawbacks, and have the added advantage of being able to calculate context based on the user's interpretation.","Creating Synonyms and Suggestions Through Learning","In the embodiments described herein, synonyms are created through explicit learning, and suggestions are created usually through implicit learning. For example, the following dialogue will result in explicit learning of a synonym:",{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"User> When I say sports I mean ESPN"]},{"entry":[{},"System> OK"]},{"entry":[{},"User> Turn to sports"]},{"entry":[{},"* The system turns to the ESPN channel."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Explicit learning also allows the user to create macros for commonly used expressions. For example, the following dialogue will result in explicit learning",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"User> In the future chart IBM is the same as chart IBM P\/E ratio for the"},{"entry":"last 3 years"},{"entry":"System> OK"},{"entry":"User> chart IBM"},{"entry":"* The system charts IBM P\/E ratio for the last 3 years."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Some of the advantages of explicit learning are that one-shot learning can occur, that unlearning of a synonym can be achieved, and macros can be defined and undefined. Some of the disadvantages of explicit learning are that the user may not bother to instruct the system, the system may not be able to interpret the user's command to learn a synonym, the system may learn a synonym incorrectly, and even though a user defines a synonym, it may not be a true synonym in the grammatical sense, and so in some contexts give confusing or incorrect interpretations. An example of the last point is if the user defines the synonym \u201caround here\u201d to be \u201cSunnyvale or Mountain View\u201d, but the user moves to New York, and asks for movies \u201caround here\u201d.","One way to improve the chance that the user takes time to instruct the system is to provide the user with tokens that were not understood by the system and ask for them to be explained. This can be done in when the system totally fails to interpret a command, when the system partially interprets a command, when the system encounters an ambiguity, and when user expresses dissatisfaction. Some examples of these cases are given below.",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Synonym learning on failure"},{"entry":"User> Turn to sports"},{"entry":"System> Sorry, I do not understand. Please explain some terms or"},{"entry":"rephrase the command (terms not understood: \u2018sports\u2019)"},{"entry":"User> Sports is ESPN"},{"entry":"* The system turns to ESPN and learns the synonym \u2018sports\u2019 is \u2018ESPN\u2019."},{"entry":"Synonym learning on partial success"},{"entry":"User> Show me all the groovy comedies around here"},{"entry":"System> There are 512 comedy movies playing in 2151 theaters. You can"},{"entry":"narrow down your search entering information on theater location, movie"},{"entry":"type (terms not understood: \u2018groovy around here\u2019)"},{"entry":"User> Around here is Sunnyvale or Mountain View"},{"entry":"* The system learns the synonym \u2018around here\u2019 is \u2018Sunnyvale or Mountain"},{"entry":"View\u2019 and returns a modified movie list."},{"entry":"Synonym learning on ambiguity"},{"entry":"User> Turn on the boobtube"},{"entry":"System> Do you mean"},{"entry":"the TV"},{"entry":"the VCR"},{"entry":"Ignore input"},{"entry":"(terms not understood: \u2018boobtube\u2019)"},{"entry":"User> boobtube is TV"},{"entry":"* The system learns the synonym \u2018boobtube\u2019 is \u2018TV\u2019, and turns on the TV."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"A difficulty with this method might be in the extraction of valuable words as opposed to garbage words. The chance of presenting garbage words could be reduced by firstly removing common and noise words that have been generated using the same corpus that is used to create the natural language interpreter. The system may also learn which words to present by noting user explanations. For example, three words may be unknown and presented to the user for explanation. If the user only explains one, the other two words could be added to a list of possible garbage words, and hence become less likely to be presented to the user again.","When the system fails to extract a synonym from an input, it can then proceed to make it a suggestion. Two cases in which the system will fail to extract a synonym are (1) when the user does not instruct the system, but merely rephrases the command; and (2) when a synonym cannot be extracted from the user explanation with the required degree of confidence. Examples of these two cases are given below.",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Suggestion learning on synonym extraction failure"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"User> Turn to sports"},{"entry":"System> Sorry, I do not understand. Please explain some terms or"},{"entry":"rephrase the command (terms not understood: \u2018sports\u2019)"},{"entry":"User> Turn to ESPN"},{"entry":"* The system turns to ESPN and learns the suggestion \u2018Turn to sports\u2019 is"},{"entry":"\u2018Turn to ESPN\u2019."},{"entry":"User> Turn to sports"},{"entry":"System> Sorry, I do not understand. Please explain some terms of"},{"entry":"rephrase the command (terms not understood: \u2018sports\u2019)"},{"entry":"User> well .. dude what I mean .. turn to well sports is really ESPN I"},{"entry":"guess try that"},{"entry":"* The system turns to ESPN and learns the suggestion \u2018Turn to sports\u2019 is"},{"entry":"\u2018well .. dude what I mean .. turn to well sports is really ESPN I guess"},{"entry":"try that\u2019."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In the last example the suggestion learned is a poor one (at best, too verbose), and so it will result in a poor confidence value.","One method that can be used to ensure that the extracted synonyms are what the user intended, is for the system to interact with the user to confirm the correctness of the synonym. If the user does not validate the synonym, a suggestion can be created instead so that no information is lost.",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Synonym verification"},{"entry":"User> Turn to sports"},{"entry":"System> Sorry, I do not understand. Please explain some terms of"},{"entry":"rephrase the command (terms not understood: \u2018sports\u2019)"},{"entry":"User> Sports is ESPN"},{"entry":"System> So, \u2018sports\u2019 is the same thing as \u2018ESPN\u2019?"},{"entry":"User> Yes"},{"entry":"* The system turns to ESPN and learns the synonym \u2018sports\u2019 is \u2018ESPN\u2019."},{"entry":"Synonym verification failure"},{"entry":"User> Show me all the groovy comedies around here"},{"entry":"System> There are 512 comedy movies playing in 2151 theaters. You can"},{"entry":"narrow down your search entering information on theater location, movie"},{"entry":"type (terms not understood: \u2018groovy around here\u2019)"},{"entry":"User> Around here is Sunnyvale or Mountain View"},{"entry":"System> So, \u2018around here\u2019 is the same thing as \u2018Sunnyvale or Mountain"},{"entry":"View\u2019"},{"entry":"User> Not always, just sometimes"},{"entry":"* The system creates the suggestion \u2018around here\u2019 is \u2018Sunnyvale or"},{"entry":"Mountain View\u2019 and returns a modified movie list."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Synonyms can be unlearned (or re-learned) when the user presents a new explanation. For example:",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"User> Turn to sports"},{"entry":"*The system turns to ESPN, since it has learned this synonym"},{"entry":"User> No, sports is FOX"},{"entry":"System> So, \u2018sports\u2019 is now \u2018FOX\u2019?"},{"entry":"User> Yes"},{"entry":"* The system turns to FOX and re-learns the synonym \u2018sports\u2019 is \u2018FOX\u2019."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In addition to learning, synonyms can also be created by transformation from suggestions. Suggestions can either become synonyms directly, or information from a suggestion can be extracted to make a synonym. Both transformations are performed carefully to avoid producing incorrect and confusing future interpretations. One method to perform the transformation is to allow suggestions to become synonyms when they reach a certain confidence value. Another method involves the extraction of a synonym using the correspondence of terms from multiple similar suggestions. In any event, to ensure that a valid synonym is created, the system should preferably interact with the user to request confirmation that the new synonym is correct.","Implementation Overview",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 1"},"Broadly, the system of  includes a synonyms unit , which maintains a database of synonyms, and a suggestions & proposals unit , which maintains databases of suggestions and proposals. The databases are preferably maintained on a per-user basis, but that is not necessary in other embodiments. As used herein, the term \u201cdatabase\u201d refers only to a collection of information and associations between such information. The term does not imply any particular structure, or even that the database be unitary in structure. One \u201cdatabase\u201d can include one or more \u201csub-databases\u201d, for example, all of which are themselves considered herein to be \u201cdatabases\u201d. Thus whereas synonyms, suggestions and proposals are all kept in separate structures in the present embodiment, a different embodiment might merge two or all three into a single unitary structure. Other variations of structure will be apparent.","User input arrives into the system in any desired form, such as text typed by the user, or sound samples, or input already partially processed. In the present embodiment the user input arrives in the form of a text string. In general, it can be said that user input arrives as a sequence of one or more \u201ctokens\u201d, which can include words, sub-words, punctuation, sounds and\/or other speech components. The user input is provided as a query into the synonyms unit , which outputs any synonyms that it has for any of the tokens in the user input. These are added to the input token sequence in a node . The resulting sequence is provided to a natural language interpreter (NLI)  for interpretation. The NLI  attempts to discern the user's intent from the user input token sequence, and outputs its resulting interpretation. Often the interpretation is forwarded on toward a back-end application as commands or queries, but in some embodiments and in some situations (such as where the NLI  failed to interpret some or all of the input token sequence), transmission toward the back-end application may be withheld. (The terms \u201ccommand\u201d and \u201cquery\u201d are used interchangeably herein.) In addition, both the user input and the interpretation are also often forwarded to the suggestions and proposals unit  to identify any suggestions and proposals that might be relevant. Suggestions and proposals are examples of what is sometimes referred to herein as \u201cadditional potential input.\u201d Note that whereas potential synonyms and suggestions are identified by analysis of the user input, proposals are identified by analysis of the NLI's interpretation of the user input. Any resulting suggestions and proposals identified by the unit  are added to any response from the back-end application in a node , and forwarded toward the user as system output.","In addition to these functions, the NLI  also includes functionality to recognize when the user input is defining a synonym, and to add it to the synonyms database in the synonyms unit . The NLI  also determines from user input that is a follow-up to prior user input, whether a new suggestion should be created, and\/or whether suggestions or proposals pre-existing in the suggestions and proposals databases should be rewarded or punished. This information is forwarded to the suggestions and proposals unit  for updating of the databases.","Natural Language Interpreter","The natural language interpreter  attempts to discern meaning from the user input token sequence even in the face of partial, unexpected or ungrammatical utterances. It accomplishes this in part by attempting to spot concepts in an incoming token sequence, typically by reference to specific keywords or classes of keywords. Some of the keywords are the concepts themselves (like \u201cMonday\u201d in the phrase, \u201cI'll be there on Monday\u201d), and some of the keywords are indicators of where the concept is likely to appear (like \u201con\u201d in the same phrase). The NLI  can be any of a variety of natural language interpreters, including, for example, Nuance Communications' Nuance Version 8 (\u201cSay Anything\u201d) product or a platform containing an AAOSA agent network from Dejima, Inc. In Nuance Version 8, the NLI compares the incoming text string to a natural language understanding (NLU) grammar which has been written by a designer to look for specific keywords. For example, in a natural language interface for an airline reservation system, the NLU grammar might look for words such as \u201cdepart\u201d, \u201cdeparting\u201d, or \u201cleaving from\u201d, followed by a city name. In this case the keywords referenced by the natural language interpreter  would include the words \u201cdepart\u201d, \u201cdeparting\u201d, \u201cleaving\u201d, \u201cfrom\u201d, as well as a complete list of city names. The city names are usually represented in a sub-grammar in the NLU. In an AAOSA agent network, agents contain policy conditions which either do or do not apply to the incoming text string, and if they do, they make a claim to at least a portion of the incoming text string. Such claims imply a tentative interpretation of part or all of the input string. For example, an agent network might be designed to include policy conditions to look for any of the words \u201cdepart\u201d, \u201cdeparting\u201d or \u201cleaving\u201d, earlier in the text string than the word \u201cfrom\u201d, which in turn is earlier in the text string than a city name. In this case as well, the keywords referenced by the natural language interpreter  would include the words \u201cdepart\u201d, \u201cdeparting\u201d, \u201cleaving\u201d and \u201cfrom\u201d, as well as a complete list of city names.","As used herein, \u201cdeveloping\u201d or \u201cattempting\u201d a \u201cnatural language interpretation\u201d means discerning or attempting to discern, from user input the user's intent relative to the back-end application. The user's intent may be represented in many different forms, but in the present embodiment the user's intent is represented as an XML string describing generalized commands that the system believes the user intends to apply to the back-end application. Note also that \u201cattempting\u201d a natural language interpretation does not necessarily imply that the attempt fails or fails partially. \u201cDeveloping\u201d a natural language interpretation, for example, is one of the possible consequences of \u201cattempting\u201d a natural language interpretation.","\u201cFailure\u201d of an attempted natural language interpretation depends on the implementation, but in the present embodiment, failure means that the NLI was unable to discern any intent at all from the user input. \u201cPartial failure\u201d in the present embodiment means that the NLI was able to make an interpretation of one portion of the user's input, but it was unable to make an interpretation of a second portion of the user's input.","AAOSA Implementation Overview",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 2","b":["200","200","210","212","214","216","218","220","212","212","214","200","210","210","212","212","216","210","214","214","214","210","214","214","212","212","214","200","212","210","212"]},"Databases","Before describing the components of the embodiment of  in more detail, it will be useful to define the fields of the various entries in the three databases ,  and . The synonyms database  contains a plurality of entries, with each entry having at least a \u201ctarget\u201d field and a \u201csynonym\u201d field. The \u201ctarget\u201d field contains a token sequence of one or more tokens that can be compared against user input tokens to identify a match. The \u201csynonym\u201d field contains a token sequence of one or more tokens that can be substituted for the token(s) in the input string that match the corresponding target token(s), without changing the user's intent. One target token sequence can appear in more than one entry in the database, for example if it has more than one alternative synonym token sequence. In another embodiment the database contains only unique targets, although synonyms can be repeated. The synonyms will be token strings that the agent network is known to be able to interpret, otherwise there is no point in creating the synonym table entry. This validation can be done in the actuation agent (or wherever the synonym table is stored), for example by comparing the synonym to a list of all known text tokens that can be claimed by the agent network. The synonyms database can be structured as a table, with each entry located on a separate row, preferably ordered from most recent to oldest, but what is important is the association between target token(s) on the one hand and their synonym(s) on the other hand. Another example structure, therefore, is a set of linked lists: the first entry in a linked list is a target token sequence, and the second and subsequent entries in the same linked list contains alternative synonym token sequences all associated with the same target token sequence. In an embodiment in which the database can hold more than one synonym for a single target, the placement of new synonyms at the front of the list for existing targets allows \u201cunlearning\u201d to occur if the embodiment is designed to return only the first synonym encountered.","The suggestions database  contains a plurality of entries, with each entry having at least a \u201ctarget\u201d field, a \u201csuggestion\u201d field, and an \u201cimportance\u201d field. The target field is similar to the target field in the synonyms database . It can be compared against user input tokens to identify a match. The \u201csuggestion\u201d field is a token string that, if offered to and accepted by the user, can be automatically sent into the interpretation network  as if it had been input by the user manually. Typically it appears to the interpretation network  as follow-up input to prior user input. It is formatted similarly to the format used for user input (or easily convertible to that format), rather than the format used for actuation strings. As with synonyms, the suggestions database  can include more than one entry with the same \u201ctarget\u201d field contents. In this case the suggestions in the suggestions field represent alternative suggestions that the system might offer in response to the same matching user input. The \u201cimportance\u201d field contains a value (between 0 and 1 in the present embodiment) that tries to represent the importance that the user places on the target\/suggestion association in that database entry. The number is assigned a default value when the entry is first created in the database , and then modified with reinforcement learning as suggestions are offered to the user and either accepted or rejected. Importance values are given that name herein based on the functions they perform in an implementation of the invention; they could of course be given different names in a different embodiment. Again, in the present embodiment the suggestions database  is implemented as a table, with each entry in a separate row. In another embodiment it can be implemented in other ways. What is important here is the associations between targets and synonyms, and the importance values assigned to those associations.","The proposals database  contains a plurality of entries, with each entry including a \u201ctarget\u201d field (similar to the target fields in the synonyms and suggestions databases  and ), a \u201cdisplay text\u201d field, containing the text to be shown to the user in the event of a match, a \u201cselection text\u201d field, which is the token string that, if the proposal is offered to and accepted by the user, can be automatically sent into the interpretation network  as if it had been input by the user manually. As with suggestions, the selection text typically appears to the interpretation network  as follow-up input to prior user input. It is formatted similarly to the format used for user input (or easily convertible to that format), rather than the format used for actuation strings. Because it is forwarded back into the interpretation network  if accepted by the user, the selection text of proposals, as well as the suggestion text of suggestions, are both sometimes referred to herein as \u201cadditional potential input.\u201d Each proposal entry also includes an \u201cimportance\u201d field, which like suggestions, contains a value (between 0 and 1 in the present embodiment) that tries to represent the importance that the user places on the target\/proposal association in that database entry. The number is assigned a default value when the entry is first created in the database , and then modified with reinforcement learning as proposals are offered to the user and either accepted or rejected. Each proposal entry also includes the interpretation of the selection text itself, and the purpose of this field is explained elsewhere herein. As with synonyms and suggestions, the proposals database  can include more than one entry with the same \u201ctarget\u201d field contents. In this case the proposals represent alternative proposals that the system might offer in response to the same matching user input. Again, in the present embodiment the suggestions database  is implemented as a table, with each entry in a separate row. In another embodiment it can be implemented in other ways. What is important here is the associations between targets and proposals, and the importance values assigned to those associations.","Interaction Agent",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 3","b":["210","210","310","312","314"]},"If not, then the agent next determines whether the input includes selection of a proposal that was offered to the user as part of a previous interaction (step ). In the present embodiment proposals are offered using descriptive text (\u201cdisplay text\u201d), and partially in order to simplify this determination, the user accepts a proposal by selecting an appropriate choice offered by the system rather than by new natural language input. In a graphical user interface (GUI), for example, the system might offer a check-box, a radio button or a drop-down list from which the user selects a response. Each user choice involving acceptance of a proposal also has attached to it a \u201cselection text\u201d string, which can differ from the display text. In step , if the user input does include acceptance of a proposal, the interaction agent  adds the \u201cselection text\u201d of the accepted proposal to the input token sequence. In one embodiment, the \u201cselection text\u201d string includes information to be added to the actuation string literally, and the interpretation network  is designed to recognize this. In the present embodiment, however, the \u201cselection text\u201d is in the form of additional user input that was carefully chosen by the proposal creator such that when interpreted by the NLI , an actuation string will result that will cause the actuation agent  to command the back-end application in a manner appropriate to acceptance of the proposal.","For example, in a movie database application the following exchange might occur:",{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["User>","get me movies times for that Harrison Ford movie that is"]},{"entry":[{},"playing in Sunnyvale"]},{"entry":["System>","Here are the Harrison Ford movies playing in Sunnyvale:"]},{"entry":[{},"[a list of movies and times is displayed here]"]},{"entry":[{},"There is a special on all movies showing at Cinema X in"]},{"entry":[{},"Sunnyvale at the moment - if you buy one ticket you get one"]},{"entry":[{},"free. Would you like to see movies showing there?"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The last paragraph in the above example is the display text of a proposal. The aim of this proposal is to push information regarding a special on movies at Cinema X, and it is targeted at people who are looking for movies in Sunnyvale. The selection text for the proposal might be something such as \u201cget movies showing at Cinema X\u201d, which might be interpreted by the interpretation agent  as:",{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<find>"]},{"entry":[{},"\u2003\u2003<movie>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<movieTheatre>Cinema X<\/movieTheatre>"]},{"entry":[{},"\u2003\u2003<\/movie>"]},{"entry":[{},"<\/find"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"It is also possible for the system to maintain context, and this option can be set as an attribute of a proposal. Thus in step , if the accepted proposal includes the attribute for maintaining context, the user input (including the selection text) is flagged as a continuation of the prior input. If context is maintained in the above example, the information originally entered by the user is used in the interpretation of the user's response to the proposal. Thus if the system had offered the above proposal in response to the user's request in prior input for movies starring Harrison Ford and showing in Sunnyvale, then the interpretation resulting from context being maintained might be:",{"@attributes":{"id":"p-0066","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<find>"]},{"entry":[{},"\u2003\u2003<movie>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<movieStar>Harrison Ford<\/movieStar>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<movieLocation>Sunnyvale<\/movieLocation>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<movieTheatre>Cinema X<\/movieTheatre>"]},{"entry":[{},"\u2003\u2003<\/movie>"]},{"entry":[{},"<find>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In this case, the system has remembered that the user is looking for Harrison Ford movies in Sunnyvale in particular, so that when the proposal to get movies at Cinema X is selected, the information regarding Harrison Ford and Sunnyvale is maintained.","A disadvantage of maintaining context is that there may be cases where the information previously given by a user, when combined with a proposal, gives an interpretation that is too narrow, and hence does not give the results intended by the proposal creator. An example of this would be if, in the above example, Cinema X was not in Sunnyvale. In this case the actuation of the interpretation in the above example would fail because the movie database back-end application would not be able find any movies matching the user's incorrectly interpreted request. For this reason care must be taken when creating proposals to ensure that the interpretations returned are what the proposal creator expects, especially if context is maintained.","In step , if the user input did not include selection of a proposal, the interaction agent  then determines whether the user input includes selection of a suggestion previously offered by the system. As with proposals, a user accepts a suggestion by selection of a choice offered by the system. Suggestions could be implemented similarly to proposals, with display text? selection text and an attribute for maintaining context, but in the present embodiment they are not. Instead the suggestions offered to the user are the same text strings that are added to the user input and forwarded to the interpretation network  in response to acceptance of a selection. Thus in step , if the input does include acceptance of a suggestion, the interaction agent  adds the text of the accepted suggestion to the input string. In addition, in step , since the acceptance of a suggestion is by nature a continuation of the user's previous input, the interaction agent  also flags the input as a continuation.","In step , again whether or not the user input includes acceptance of any proposals or suggestions, the interaction agent queries the actuation agent  for any synonyms associated with the user input. Since this query occurs after the processing of any suggestions and proposals, the text sent to the actuation agent  for the query includes any additional user input that was added in steps  and\/or . In step , any synonyms found are added to the input document. In one embodiment, the input document is merely a sequence of tokens, and the additional user input and synonyms are merely appended to the end. In another embodiment, the input document is organized into fields, and synonyms are added in a separate synonyms field, associated either with the entire input string or with only the individual tokens that produced each synonym. The input document might, for example, be an XML document. In a step , the resulting input document is broadcast into the interpretation network  for an interpretation.","Interpretation Network","The interpretation agent  is a typical AAOSA-based agent network adapted for use with the relevant back-end application.  is a diagram of an example interpretation network , used for implementing a natural language interface to a back end application that is designed for financial reporting. In particular, the back end application in this example is an Internet-queryable database provided by EDGAR Online, Inc. More information about the database can be found at http:\/\/www.finsight.com, visited Feb. 5, 2002, and incorporated herein by reference. This product permits a web client to retrieve desired financial information automatically using URL-based queries. The interface to this back end application, therefore, includes the formulation of the appropriate URL for satisfying the user's inquiry.","Only a partial representation of the interpretation network  appears in . A more complete version of the network is described in the Opal file named opal.txt in the accompanying Computer Program Listing and Table Appendices. An Opal file is an XML document which defines certain properties of each of the agents in an agent network. The agents themselves are implemented as instances of java classes and subclasses, and the Opal file specifies, for each agent and among other things, the specific class or subclasses from which the agent is to be instantiated, which other agents each particular agent listens to for each particular kind of message, as well as (for most agents) a set of one or more \u201cinterpretation policies\u201d which implement the interpretation task for which the particular agent is responsible. The Opal file is used by an Opal converter program at system startup time to instantiate the entire agent network such as network . The Opal file in opal.txt can be understood by a person of ordinary skill, especially with the assistance of the Dejima Policy Reference, Platform 3.0, a copy of which is attached hereto in Appendix A. In addition, it will be understood that the Opal file uses standard XML coding, in which (among other things):",{"@attributes":{"id":"p-0073","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["![CDATA[...]]","indicates that \u201c...\u201d is to be interpreted as Character data;"]},{"entry":["&letter;","means \u201c<\u201d (left angle bracket)"]},{"entry":["&gt;","means \u201c>\u201d (right angle bracket)"]},{"entry":["&amp;","means \u201c&\u201d (ampersand)"]},{"entry":["&apos;","means \u201c'\u201d (apostrophe)"]},{"entry":["&quot;","means \u201c\u201d (quotation mark)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As described in the Dejima policy reference, an interpretation policy contains, among other things, a policy condition and a policy action. When an agent receives a message from another agent to attempt to interpret and input string, it compares the input string to each of the agent's policy conditions in sequence. If a condition does apply to the input string, or to part of the input string, then the policy makes a \u201cclaim\u201d on the applicable portion of the input string, and returns the claim to the agent that requested the interpretation. A claim identifies (among other things) the agent and policy which is making the claim, the portion of the input string to which the claim applies (called the claim \u201cfocus\u201d), the priority number of the agent or policy, and also a confidence level which indicates how well the input matches the policy condition. The priority and confidence levels, and the focus, all can be used subsequently by upchain agents for comparison with other claims made by other downchain agents, so as to permit the upchain agent to select a \u201cbest\u201d one among competing claims.","Policy conditions are written as expressions made up from operators and operands. The various operators include unary operators such as <exists>, <exact>, <substring>, <accent>, <accent-substring>, REPEAT and RECURSIVE. They also include binary operators such as OR, AND, ORDERED, ADJACENT and COMBO. The operands on which an operator can act include tokens (words, strings, numbers, symbols, delimiters), text files (which can contain their own policy conditions), databases, and claims made by other policies. If a first policy condition (the \u201creferencing policy condition\u201d) refers to a second policy (the \u201creferenced policy\u201d) previously evaluated in the same agent, then any claim made by the referenced policy can be figured into the evaluation of the referencing policy condition in the manner specified by the operators. If a policy condition refers to another agent (the \u201creferenced agent\u201d) downchain of the current agent (the \u201creferring agent\u201d), then the claim or claims returned by the referenced downchain agent are figured into the evaluation of the referencing policy condition in the manner specified by the operators. Note that a policy condition that references a downchain agent cannot be completely resolved until the input string is passed to that other agent for comparing to its own policy conditions. In one embodiment, the referencing agent passes the input string to each downchain agent only upon encountering the agent's name while evaluating a policy condition. In the present embodiment, however, the referencing agent passes the input string to all downchain agents mentioned in any policy condition in the referencing agent, before the referencing agent begins evaluating even its first policy condition.","In , the interaction agent  initiates an interpretation attempt into the interpretation network  by communicating the input document, in an object of class \u201cInitiateInterpretationMessage\u201d, to the Top agent of the network . In the network of , the Top agent is System agent . The Top agent contains one or more interpretation policies whose policy conditions, in a typical network, do very little aside from referencing one or more other agents deeper in the network. System agent , for example, contains a single interpretation policy whose policy condition does nothing more than reference the Finance agent . Such a policy condition applies to the input token string if and only if the Finance agent can make a claim to at least part of the input token string. When System agent  encounters this policy condition, therefore, it forwards the input token string to the Finance agent  in an object of class \u201cIntepretItMessage\u201d. The Finance agent  is thus considered to be \u201cdownchain\u201d of the System agent , and the System agent  is considered to be \u201cupchain\u201d of the Finance agent .","When the Finance agent  receives the input token sequence, it first looks in its policies for policy conditions that make reference to further agents downchain of the Finance agent . If there are any, then the Finance agent  forwards the input token string to each of the further downchain agents in an \u201cIntepretItMessage\u201d and awaits replies. In the embodiment of , the Chart, Report and Companies agents ,  and , respectively, are all referenced in the Finance Agent's policy conditions and are therefore downchain of the Finance Agent . Each agent downchain of the Finance agent  does the same upon receipt of an InterpretItMessage. When an agent has received all replies (or in certain embodiments, times out on all replies not yet received), the agent tests the input token sequence against the agent's policy conditions. The agent processes the input in order from the agent's first policy to its last policy. Each policy makes all the claims it can on the input. Subsequent policies in the agent can make reference to claims made by previously processed policies in the agent, as well as to claims made by downchain agents. After all policies have made their claims the agent uses a predetermined algorithm to select the \u201cbest\u201d claim. If the best claim is one made from a non-grammatical condition (e.g. combo operator), then the sub-claims are also selected. The agent then returns the selected claim or claims to the agent's upchain agent in an object of class ClaimMessage. If the agent is not able to make any claims on the input, then the agent passes upchain an object of class NoClaimMessage.","Thus in the embodiment of , the Finance agent  eventually will receive any claims made by its downchain agents and will refer to such claims in the evaluation of its own policy conditions. The Finance agent  then will respond to the System agent  with either a ClaimMessage or a NoClaimMessage. If the System agent  receives a NoClaimMessage, then the System agent's single policy does not apply. A null actuation message will still be sent to the actuation agent , but no suggestions or proposals will be identified, and no command will be sent to the back-end application. If the System agent  receives a ClaimMessage, then the System agent's policy does apply.","The System agent  evaluates its own policy conditions in the same manner as other agents in the network, and each such policy again makes as many claims as it can on the input. But because the System agent  is the Top agent, it does not transmit any resulting claims (or NoClaims) to any further upchain agents. Instead, as the Top agent of a network, after selecting one or more \u201cbest\u201d claim(s) in the manner described above, System agent  has the responsibility to delegate \u201cactuation\u201d to the agents and policies that made up the claim(s). This process, which is sometimes called \u201cexecuting\u201d the winning claim, takes place according to the \u201caction\u201d part of the winning policy or policies in the Top agent. The action part of a policy builds up an actuation string in a manner similar to that in which policy conditions build up the result of the condition, that is, by string operators and operands that can include words, numbers, symbols, actuation sub-strings already created by other policies within the same agent, and actuation sub-strings created by other downchain agents. Typically the downchain agents referred to in the action part of a policy are the same agents referred to in the condition part of the policy. Also typically, the actuation string built up by this process is an XML string.","In order to fill in the actuation sub-strings defined by downchain agents, the Top agent sends an object of class DelegationMessage to each downchain agent referenced in the action part of the winning policy(ies). In the embodiment of , the System agent  contains only one policy, the action part of which does nothing more than delegate to the Finance agent . The actuation sub-string returned by the Finance agent  therefore will be the actuation string output of the network. The DelegationMessage received by an agent includes a reference to the particular policy or policies of that agent which formed part of the winning claim. Upon receipt of such a message, therefore, the agent executes the action part of each of its policies that formed part of the winning claim, issuing DelegationMessages of its own to its own downchain neighbors as called for in the action part of the such policies, and building up an actuation sub-string for returning to the agent's upchain caller. Actuation sub-strings are passed to upchain agents in objects of class ActuationMessage, ultimately once again reaching the Top agent of the network (System agent ). This agent in the present embodiment returns the actuation message in the form of an XML string to the Process method of Actuation agent . The actuation message contains the user's intent, as interpreted by the interpretation network , and can be converted by the actuation agent  into appropriate commands in the URL format required by the back-end application.","Thus it can be seen that interpretation of the user's intent takes place in an agent network in a distributed manner. Each of the agents in interpretation network  can be thought of as having a view of its own domain of responsibility, as defined by its interpretation policies. Typically the application domain is organized by the designer into a hierarchy of semantic sub-domains, and individual agents are defined for each node in the semantic hierarchy. In the embodiment of , for example, the Finance agent  is responsible for all semantics that relate to finance (i.e., all queries in the entire application domain in this example). The Chart agent  is responsible for detecting and acting upon parts of user queries that have to do with financial charting, whereas Report agent  is responsible for detecting and acting upon parts of user queries that have to do with financial reporting. Companies agent  is responsible for detecting and acting upon parts of user queries that have to do with company names. The Companies agent  has downchain thereof a Symbol agent , responsible for detecting and acting upon parts of user queries that involve company names provided in the form of a trading symbol; a Name agent , responsible for detecting and acting upon parts of user queries that involve company names provided as a company name; an Exchange agent , responsible for detecting and acting upon parts of user queries that involve companies that are trading exchanges, and so on.","It can also be seen that the Top agent of a network is responsible for receiving input and initiating queries into the network, and the agents representing the functionality of the system (the agents constructing their actuation sub-strings without reference to further agents) are the lowest order nodes (leaf agents) of the network. The network operates in two main phases: the interpretation phase and the delegation phase. In the interpretation phase, an initiator agent (such as the Top agent) receives the input token sequence and, by following its policy conditions, queries its downchain agents whether the queried agent considers the input token sequence, or part of it, to be in its domain of responsibility. Each queried agent recursively determines whether it has an interpretation policy of its own that applies to the input token sequence, if necessary further querying its own further downchain agents in order to evaluate its policy conditions. The further agents eventually respond to such further queries, thereby allowing the first-queried agents to respond to the initiator agent. The recursive invocation of this procedure ultimately determines a path, or a set of paths, through the network from the initiator agent to one or more leaf agents. The path is represented by the claim(s) ultimately made by the initiator agent. After the appropriate paths through the network are determined, in the delegation phase, delegation messages are then transmitted down each determined path, in accordance with the action parts of winning policies, with each agent along the way taking any local action thereon and filling in with further action taken by the agents further down in the path. The local action involves building up segments of the actuation string, with each agent providing the word(s) or token(s) that its policies now know, by virtue of being in the delegation path, represent a proper interpretation of at least part of the user's intent. The resulting actuation string built up by the selected agents in the network are returned to the initiator agent as the output of the network. This actuation string contains the fields and field designators required to issue a command or query to the back-end application, to effect the intent of the user as expressed in the input token string and interpreted by the interpretation network . Note that the transmission of a delegation message to a particular agent is considered herein to \u201cdelegate actuation\u201d to the particular agent, even if the particular agent effects the actuation merely by forwarding the delegation message to one or more further agents.","Actuation Agent",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 5","b":["212","214","510","212","512","212"]},"In step , the actuation agent  adds to the interaction string any proposals and suggestions that it has relative to the actuation string. In step , the actuation agent forwards the resulting interaction string to the interaction agent  for output toward the user.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 6","b":["514","610","612","614","212","616","212"]},"Because proposals are supposed to generate complete interpretations by themselves, the system does not try to make any new suggestions to the user if the current user input is in response to a prior proposal. In step , therefore, it is determined whether the current user input is a response to a prior proposal. If so, then the routine returns (step ) without making any new suggestions. If the current user input is not a response to a prior proposal, then in step , the routine compares the user input token sequence to the target token sequences in the suggestions database, again in the manner described hereinafter, to identify any suggestions that it can consider relevant to the actuation. In step , for each suggestion match found, the actuation agent  adds to the interaction string the display text of the suggestion (which in the present embodiment is also the selection text string of the suggestion), and the confidence level with which it considers the suggestion relevant. The routine then returns to the caller.",{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 7","b":["614","710","712","714"]},"In step , the actuation message is expanded into complete \u201cleaf\u201d strings. Since the actuation strings in the present embodiment are represented in XML, expansion to complete leaf strings involves substitution of user input tokens for XML tags, deletion of XML disjunctive operators, and replication of segments having conjunctively connected portions to complete independent strings with the formerly conjunctively connected portions in separate strings. That is, For example, the following actuation XML:",{"@attributes":{"id":"p-0089","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<get>"]},{"entry":[{},"\u2003\u2003<or>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<movieType> action <\/movieType>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<movieType> thriller <\/movieType>"]},{"entry":[{},"\u2003\u2003<\/or>"]},{"entry":[{},"\u2003\u2003<movieTheatre> AMC6 <\/movieThreatre>"]},{"entry":[{},"<\/get>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0090","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cget movieType action\u201d"]},{"entry":[{},"\u201cget movieType thriller\u201d"]},{"entry":[{},"\u201cget movieTheatre AMC6\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In step , each of the leaf strings is compared to each of the targets (also converted to leaf strings for the comparison) in the user's proposals table, and a confidence value is calculated for each proposal in the proposals database . The confidence value Cf, is the product of context value C, and the Importance value I of the proposal. The context value C is a measure of how well the target of the proposal matches the actuation string (as represented by the leaf strings), and the importance value is a measure of how much importance the user places on the association between the target and the proposal (i.e., how likely the user will be interested in this proposal if the actuation matched the target string of the proposal exactly). It is the latter value, I, that is adapted through reinforcement learning based on the user selection or non-selection of presented proposals. A benefit of having proposal selection based in part on a learned parameter is that those proposals that are presented to a user but not selected become less likely to be repeatedly displayed. On the other hand, those proposals that a user finds useful are more likely to be presented to the user again. Since both C and I are values between 0 and 1 in the present embodiment, confidence values Cf are also limited to this range.","The context value for a particular proposal relative to particular actuation is calculated using a correlation between the two. In particular, context is calculated using:\n\n\n\nwhere C is the Context, t is the number of matching corresponding XML leaf strings found in both the user and proposal interpretations, i is the number of XML leaf strings in the user interpretation, and p is the number of XML leaf strings in the proposal interpretation. Note that Context will be a value between 0 and 1. As an example, consider the following example user interpretation XML:\n",{"@attributes":{"id":"p-0093","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<find>"]},{"entry":[{},"\u2003<movie>"]},{"entry":[{},"\u2003\u2003<movieStar>Harrison Ford<\/movieStar>"]},{"entry":[{},"\u2003\u2003<movieLocation>Sunnyvale<\/movieLocation>"]},{"entry":[{},"\u2003<\/movie>"]},{"entry":[{},"<\/find>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0094","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<find>"]},{"entry":[{},"\u2003<movie>"]},{"entry":[{},"\u2003\u2003<movieLocation>Sunnyvale<\/movieLocation>"]},{"entry":[{},"\u2003<\/movie>"]},{"entry":[{},"<\/find>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The advantage of calculating Context using XML interpretations rather than user input is that it allows context matching to be performed on the user and proposal intent, as opposed to the natural language phrasing of the user and proposal creator.","Proposals are selected for display to the user based on the confidence score. There is also a preset limit, in the present embodiment, on the total number of proposals to be presented to the user regardless of their confidence score. In step , therefore, only the proposals with the X highest confidence scores are added to a vector of proposal matches, where X is a predetermined number. In step , any proposals in the vector with a confidence score less than another predetermined value Y are removed. The routine then returns with the resulting vector of proposal matches.",{"@attributes":{"id":"p-0097","num":"0096"},"figref":["FIG. 8","FIG. 6"],"b":["622","810","212","812","812","812"]},"Whenever user input is a continuation of prior user input, the system can learn that the user sometimes follows the prior user input with the new user input. The system learns this as a new suggestion. Thus if step  determines that the present input is a continuation, then in step  it is determined whether the prior interaction included suggestions offered by the system. If not, then the system learns the new suggestion (step ). In particular, the actuation agent  creates a new entry in the suggestions database  in which the target field contains the user's prior input phrase, the suggestion field contains the user's new input (response to the interaction), and an initial default value is written into the Importance field. An advantageous initial default value in this arrangement is around 0.8 because that would provide a bias towards more recently added suggestions. However, the system does not learn the new suggestion if the interpretation network  was completely unable to make an interpretation. Otherwise the system would be learning a useless suggestion, because the additional user input that would be submitted to the interpretation network if the user were to accept this suggestion would be just as uninterpretable then as it was the first time.","If step  determines that the prior interaction did include suggestions, then in step  the importance values of the suggestions offered to the user are updated as hereinafter described. In step  it is determined whether the user input includes selection of any of the suggestions that were offered in the prior interaction. Only if not is the new input used to learn a new suggestion in step . If the user input did include acceptance of a suggestion, then the system has already increased the importance value of the accepted suggestion in step .","In step , regardless of whether any new suggestions were added or importance values were updated, the actuation agent  next determines whether any new suggestions can be offered to the user in a new interaction.  is a flowchart of step . Some of these steps are also set out in more detail in the \u201cgetMatchingSuggestions( )\u201d methods of each of the classes SuggestionTable and Suggestions, both of which are incorporated herein from the java files named SuggestionTable.java.txt and Suggestions.java.txt, respectively, in the accompanying Computer Program Listing and Table Appendices. In step , a string is created that contains only the non-common tokens. This is because common and noise tokens are not counted in the context matching correlation. In step , the resulting modified input string is compared to each of the targets in the user's suggestions database , and a confidence value is calculated for each suggestion in the database. The calculation of confidence values for suggestions is the same as that for proposals, described above. In particular, the confidence value Cf, is the product of context value C, measuring how well the target of a suggestion matches the modified input string, and the Importance value I of the suggestion, adaptively measuring how likely the user is to accept the suggestion if the modified input matched the target string of the suggestion entry exactly. Again, the values C, I and Cf are each limited to the range of 0 to 1 in the present embodiment.","As with proposals, suggestions are selected for display to the user based on the confidence score and a preset limit on the total number of suggestions to be offered in an interaction. In step , therefore, only the suggestions with the X highest confidence scores are added to a vector of suggestion matches, where X is a predetermined number. In step , any suggestions in the vector with a confidence score less than another predetermined value Y are removed. X and Y for suggestions can be the same or different than the corresponding values for proposals.","In step , one final check is performed before a suggestion is returned as a match, and that is to ensure that the information content in the suggestion is not already contained in the user input. This is done by comparing the suggestion and user input on a token by token basis (with noise and common tokens removed). The comparison is performed using, for example, fuzzy matching (such as sub-string matching). If all the tokens in the suggestion are found in the user input, then the suggestion is not returned. This check is performed to stop the presentation of useless suggestions. For example if the user asked \u201cshow me action movies in Sunnyvale\u201d, the suggestion \u201cin Sunnyvale\u201d would not be returned regardless of the calculated Confidence value. This same check can also be performed in a particular embodiment for proposals, although preferably for proposals, the interpretation of the selection text is compared with the user input interpretation, to make sure the leaf strings of the selection text are not a subset of the leaf strings of the user input interpretation.","In step , the routine then returns with the resulting vector of suggestion matches.","Context-Based Reinforcement Learning","The reinforcement learning algorithm for Importance is the same for suggestions and proposals. No learning algorithm is needed for synonyms because the explicit learning of synonyms renders their importance effectively constant at 1.0. The learning algorithm calculates the average reward received over time received by a proposal or suggestion, starting with the initial assigned Importance value. For proposals, this initial value is set by the proposal creator and indicates the initial priority of the proposal. For suggestions, the initial value is set by system default upon creation of the suggestion. Only those proposals and suggestions presented to the user have their Importance values updated.","Importance values are updated in accordance with the following formula:",{"@attributes":{"id":"p-0106","num":"0105"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"msub":{"mi":"I","mrow":{"mi":"k","mo":"+","mn":"1"}},"mo":"=","mrow":{"msub":{"mi":["I","k"]},"mo":"+","mrow":{"mfrac":{"mn":"1","mrow":{"mn":"1","mo":"+","mi":"k"}},"mo":"\u2061","mrow":{"mo":["[","]"],"mrow":{"msub":[{"mi":"r","mrow":{"mi":"k","mo":"+","mn":"1"}},{"mi":["I","k"]}],"mo":"-"}}}}},"mo":","}}},"br":[{},{},{}],"sub":["k+1 ","k ","k+1","k "],"in-line-formulae":[{},{}],"i":["r","\u2212C","]I"],"sup":"n"},"The scaling of reward for unselected proposals is used because it allows the reward to be modified based on Context. For example, if a proposal has a small Context value and was not selected, the reward is such that there is only a minor reduction in the Importance value (for the case where the proposal has zero Context, the reward received is the current Importance value, resulting in no change in the Importance). On the other hand, if a proposal has a large Context value, and was not selected, the reward received approaches 0. The system therefore punishes proposals and suggestions that it made but were rejected, to a greater degree if the system thought the match was good than if it thought the match was poor.","The above learning algorithm also allows for a type of unlearning, or forgetting, to occur. For example, in the case where there are two suggestions for the same user phrase (such as \u2018turn to sports\u2019 suggesting either \u2018turn to ESPN\u2019 or \u2018turn to FOX\u2019). Since both phrases will have the same Context, the one selected more often will have its Importance increased, while the other will have its Importance reduced, eventually falling so low as to not even show up in the suggestion list.","The parameter n allows for the effect of Context on the reward to be scaled. Larger values of n result in little change in the Importance value if a proposal is not selected. As the value for n approaches 0, the reward for not being selected also approaches 0, regardless of the Context. As mentioned above, n is a constant real number greater than or equal to 0, and has a default value of 1.0.",{"@attributes":{"id":"p-0110","num":"0109"},"figref":["FIG. 10","FIG. 7"],"b":["712","1010","1012","1014","1016","1018","1010","1020"],"sub":["k+1","k+1"]},{"@attributes":{"id":"p-0111","num":"0110"},"figref":["FIG. 11","FIG. 8"],"b":["812","818","1110","1112","1114","1116","1118","1110","1120"],"sub":["k+1","k+1"]},"Implementation of Synonyms","As mentioned, while synonyms can in some embodiments be learned through implicit learning, preferably they are learned explicitly. The process followed for synonym learning is that an agent, or group of agents, either in the interaction agent , the actuation agent  or the interpretation network , receives all input from the user and attempts to parse the input to extract a synonym. Preferably synonym recognition agents are included as part of the interpretation agent network itself, so that recognition of a synonym command occurs along with and in competition with other agent claims. If a synonym recognition agent makes a winning claim, then the synonym is added to the synonyms database . If a synonym already exists in the database for the same target phrase, then the new synonym is added at the front of the synonyms list. This ordering of the list allows unlearning to occur, while still retaining old synonyms.","A simple synonym extraction algorithm is given in the file named extractSynonyms.txt in the accompanying Computer Program Listing and Table Appendices. It is able to parse and extract the following synonyms (note that compound definitions are also handled).",{"@attributes":{"id":"p-0114","num":"0113"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2018When I say sports I mean ESPN\u2019"]},{"entry":[{},"potential terms not understood: \u2018sports\u2019"]},{"entry":[{},"synonyms generated: \u2018sports\u2019 = \u2018ESPN\u2019"]},{"entry":[{},"\u2018sports is ESPN and flick equals movie\u2019"]},{"entry":[{},"Potential terms not understood: \u2018sports flick\u2019"]},{"entry":[{},"synonyms generated: \u2018sports\u2019 = \u2018ESPN\u2019, \u2018flick\u2019 = \u2018movie\u2019"]},{"entry":[{},"\u2018Remember that around here is Sunnyvale or Mountain View\u2019"]},{"entry":[{},"Potential terms not understood: \u2018around here\u2019"]},{"entry":[{},"synonyms generated: \u2018around here\u2019 = \u2018Sunnyvale or Mountain View\u2019"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In an AAOSA-based system, instead of using explicitly programmed software to extract synonyms, synonyms are more preferably extracted using the fundamental capabilities of the agent network itself. In this embodiment, an agent or group of agents is defined, for example as a standard part of an interpretation network such as , which contains interpretation policies that make claims on portions of user input that evidence a user intent to create a synonym. If the claim is successful, then the action part of the policy causes the synonym to be written into the synonyms database . An example set of policies that can implement synonym extraction in this manner is as follows, using the Opal language:",{"@attributes":{"id":"p-0116","num":"0115"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"(START:"},{"entry":"\u2003\u2003\u201c"},{"entry":"\u2003\u2003(\u2018when I say\u2019| \u2018and \u2019 | \u2018learn that\u2019 | \u2018remember that\u2019)"},{"entry":"\u2003\u2003\u2003\u2003{attributes:\u2018private\u2019}"},{"entry":"\u2003\u2003\u201d),"},{"entry":"(EQUALS:"},{"entry":"\u2003\u2003\u201c"},{"entry":"\u2003\u2003(\u2018is the same\u2019 [\u2018thing\u2019] \u2018as\u2019 | \u2018means\u2019| \u2018equals\u2019 |\u2018i mean\u2019 | \u2018=\u2019)"},{"entry":"\u2003\u2003\u2003\u2003{attributes:\u2018private\u2019}"},{"entry":"\u2003\u2003\u201d),"},{"entry":"(SYNONYM1:"},{"entry":"\u2003\u2003\u201c"},{"entry":"\u2003\u2003[START] ?"},{"entry":"\u2003\u2003\u2003\u2003{attributes:\u2018private\u2019}"},{"entry":"\u2003\u2003\u2003\u2003{action:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{execute:? }}"},{"entry":"\u2003\u2003\u201d),"},{"entry":"(TARGET1:"},{"entry":"\u2003\u2003\u201c"},{"entry":"\u2003\u2003SYNONYAM1 < EQUALS ?"},{"entry":"\u2003\u2003\u2003\u2003{action:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{execute:\u2018Synonym = \u2019,SYNONYM1,\u2018 Target = \u2019,? }}"},{"entry":"\u2003\u2003\u201d),"},{"entry":"(CATCH:"},{"entry":"\u2003\u2003\u201c"},{"entry":"\u2003\u2003TARGET1+"},{"entry":"\u2003\u2003\u201d)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The above set of policies make claims on input that uses terms like \u2018when I say\u2019, \u2018and\u2019, \u2018learn that\u2019, \u2018remember that\u2019, \u2018is the same as\u2019, \u2018is the same thing as\u2019, \u2018means\u2019, \u2018equals\u2019, \u2018i mean\u2019, and \u2018=\u2019, and if the claim wins, executes the action part of policy TARGET1. The action part of TARGET1 creates an actuation string of the form: \u2018Synonym=[synonym string] Target=[Target string]\u2019. The actuation agent  then includes the ability to recognize an actuation string of this form, and to write the new synonym into the synonyms database  in response.","In an AAOSA-based implementation, synonyms are preferably applied on a per agent basis in the following manner to enhance the interpretation of user input. Before each policy makes its claims it checks the input to see if there are any synonyms for any input (target) tokens. In one embodiment each agent checks or queries the synonyms database  for this information, but in a more preferred embodiment, this check is performed once for all agents, by the interaction agent , as set forth above in step  (). When the input arrives at an individual agent in the interpretation network , it includes the targets and synonyms in a synonyms field of the user input document. The individual agent then checks each synonym in the input document, and if the target string matches any of the string tokens in the agent's policies, the target tokens are added to the policy with a disjunctive (OR) operator. The policies then make claims as normal.","For example, assume a user input \u201cturn to sports\u201d, with a synonym of \u201cESPN\u201d for the target token \u201csports\u201d. Assume further that an individual agent in the interpretation network  includes the following policy:",{"@attributes":{"id":"p-0120","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(P1:",{},{}]},{"entry":[{},{},"\u201c"]},{"entry":[{},{},"\u201cESPN\u201d"]},{"entry":[{},{},{},"{action:"]},{"entry":[{},{},{},"{execute:* }}"]},{"entry":[{},{},"\u201d)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0121","num":"0120"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(P1:"]},{"entry":[{},"\u2003\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003\u2003\u201cESPN\u201d | \u201csports\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{action:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{execute:* }}"]},{"entry":[{},"\u2003\u2003\u2003\u201d)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"In an alternative embodiment, agents try their policies first against the native user input string. Then, if synonyms are present, the synonym is substituted in place of its target in the input string, and each policy is rechecked to see if it can now make a claim. Multiple synonyms for the same string are tried sequentially. Multiple synonyms for different strings are tried in the order they are encountered in the policy.","Thus it can be seen that synonyms, suggestions and\/or proposals implemented in conjunction with a natural language interpretation interface to a back-end application, can help the system seem more intelligent and be able to interact in a more natural manner with the user. It can also be seen that a learning method for synonyms, suggestions and proposals can be advantageous because learning can be on a per user basis, it can be implemented as a modular system that can be inserted and removed at any time, it reduces the likelihood of producing unwanted results, and allows the unlearning of synonyms. Any one, two or all three of the concepts can be implemented in a particular embodiment, although implementation of two or all three in a single embodiment is most preferred.","As used herein, the \u201cidentification\u201d of an item of information does not necessarily require the direct specification of that item of information. Information can be \u201cidentified\u201d in a field by simply referring to the actual information through one or more layers of indirection, or by identifying one or more items of different information which are together sufficient to determine the actual item of information. In addition, the term \u201cindicate\u201d is used herein to mean the same as \u201cidentify\u201d.","As used herein, a given event or value is \u201cresponsive\u201d to a predecessor event or value if the predecessor event or value influenced the given event or value. If there is an intervening processing element, step or time period, the given event or value can still be \u201cresponsive\u201d to the predecessor event or value. If the intervening processing element or step combines more than one event or value, the output of the processing element or step is considered \u201cresponsive\u201d to each of the event or value inputs. If the given event or value is the same as the predecessor event or value, this is merely a degenerate case in which the given event or value is still considered to be \u201cresponsive\u201d to the predecessor event or value. \u201cDependency\u201d of a given event or value upon another event or value is defined similarly.","The foregoing description of preferred embodiments of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Obviously, many modifications and variations will be apparent to practitioners skilled in this art. As one example, additional factors that may be taken into account when calculating context values include token adjacency and ordering. As another example, a particular embodiment could allow suggestions and\/or proposals to be enabled or disabled on a system-wide or on a per-user basis. Suggestions and\/or proposals can be enabled and disabled in response to a natural language command entered by the user and interpreted by the NLI . As other examples, and without limitation, any and all variations described, suggested or incorporated by reference in the Background section of this patent application are specifically incorporated by reference into the description herein of embodiments of the invention. The embodiments described herein were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalents.","1 Introduction","Policies are written in a language called OPAL. This reference intends to describe the OPAL language. The current version of the platform can run in backward compatibility mode. In this mode some of the features described in this document would not be available. The comment \u201c(not available in backward compatibility mode)\u201d is written in front of each of these features. Set the system property USE_AMBIGUITY_XML to also to run the platform in the backward compatibility mode. Example: java\u2212DUSE_AMBIGUITY_XML=false IDE.","2 Policy","An AAOSA agent uses a set of policies to make claims on the input and to make actions based on those claims.","2.1 Overview of Claim","A claim is the part of the input that an agent policy recognizes as part of its domain. A claim may be built by putting together claims made by other policies or other agents. For example a HOME_ENTERTAINMENT policy may make claims based on claims made by a TV policy and a VCR policy. We would refer to TV and VCR claims as sub claims in the context of the HOME_ENTERTAINMENT claim.","2.2 Propagation of Claims","An AAOSA agent will use its policies to process the input when it receives an initiate interpretation, interpretation or reinterpretation message. Agents process the input in order from first policy declared in the agent to the last policy. Each policy makes all the claims it can on the input. Following policies can access these claims. After all policies have made their claims the agent selects the best claim. If the best claim is made from a non-grammatical condition (e.g. combo), then the sub-claims are also selected. The selected claims are handed up to up chain agents (i.e. using claim message).","2.3 Actuation of Claims","An Actuation is a standardized output. The actuation phase begins when the top AAOSA agent selects its best claim. The top agent will actuate the best claim using the action part of the policy that made that claim. The policy's action dictates whether the actuation of the claim should be delegated to other policies or agents. If the actuation is delegated to another agent a delegation message is sent to that agent. When an AAOSA agent receives a delegation message for actuating a claim, it will use the policy responsible for making that claim to actuate it. Each policy will either actuate the claim entirely or delegate parts of the actuation to other policies or agents responsible for making its sub claims.","2.4 Overview of Policy Components","A policy can have several components:\n\n","A claim quantifies how well an input matches a policy condition. The information associated with a claim includes:","3.1 Owner","The name of the policy making the claim and the agent to which that policy belongs.","3.2 Focus","The parts of the input matched by the policy condition. Focus is represented using the character indexes of the input. (Characters in the input are indexed from 0). For example, focus [5 . . . 8] represents the word \u2018book\u2019 in the input \u2018Sell book\u2019. The characters of the input that correspond to the token separators (for example, white space) are never considered to be part of the focus. Therefore, a policy condition that matched \u2018Sell\u2019 and \u2018book\u2019 would have focus [0 . . . 3,5 . . . 8]. However, when there is no chance of confusion, for convenience this focus would be written as [0 . . . 8].","3.3 Priority","The precedence of the claim. (For details on assigning priorities to claims, see the Policy Components section.) Priorities are local to an agent. When an agent sends a claim to an up chain agent, the priority is reset to 0. The exception is priorities that are assigned for adding dialoging focus. These priorities are passed up-chain with the claim.","A vector is kept of all different priorities that were associated to sub-claims building up a claim. The focus size of the sub-claims with the same priority will be added up and would be kept in the vector.",{"@attributes":{"id":"p-0138","num":"0148"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018aaa\u2019 {priority:+1}"]},{"entry":[{},"P2: \u2018bb\u2019 (priority: 0}"]},{"entry":[{},"P3: P1 & P2"]},{"entry":[{},"User-Input: \u2018aaa bb\u2019"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Priority","1","0"]},{"entry":[{},"Focus size","3","2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"The priority criterion of two claims will be compared in the following manner:\n\n","A claim is said to be ambiguous if it contains two or more sub-claims with overlapping focuses. The ambiguity of the claim is equal to the number of ambiguous sub-claims that are found in the claim, including the claim itself.","3.5 Connection Weight","The total sum of connection weights assigned to operators making the claim. Each operator and operand has a predefined grammatical weight. The operators and operands in descending order of grammatical weight are:\n\n","The number of Combo (,) or Recursive (+) operators used to make a claim.","3.7 Unknown","Used to identify the number of items missing in the user input (deprecated). See Section 3-3-4 on <unknown if missing> condition.","3.8 Adjacency Score","Indicates the relative closeness of the claimed parts of the input. Adjacency score is calculated by adding up the number of tokens between claimed parts. If a claim has marked \u2018Siamak\u2019 and \u2018Hodjat\u2019 on the input \u201cSiamak is a Hodjat\u201d, its adjacency score is 2. A claim marking \u2018Sia\u2019 and \u2018Hodjat\u2019 on input \u201cSiamak is a Hodjat\u201d, will also have adjacency score of 2, because \u2018Sia\u2019 is part of the \u2018Siamak\u2019 token, but the same claim will have an adjacency threshold of 5 on the input \u201cSiamak's family name is Hodjat\u201d (Assuming the default USTokenizer is used). The following table shows the how adjacency score is calculated for different inputs claimed by the policy: \u2018aaaaa\u2019 & \u2018bbbbb\u2019.",{"@attributes":{"id":"p-0145","num":"0163"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Input","Adjacency score"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"aaaaa bbbbb","0"]},{"entry":[{},"aaaaa bbbbb","0"]},{"entry":[{},"aaaaas bbbbb","0"]},{"entry":[{},"Aaaaa cc bbbbb","1"]},{"entry":[{},"Aaaaa cc dd bbbbb","2"]},{"entry":[{},"Aaaaa's bbbbb","2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Note that adjacency is handled slightly differently in the case of the combo operator. See the section on the combo operator for details."]}]}}}},"br":{}},"Variables mark parts of the input that is not claimed by other conditions in a policy. Variables are adjustable and the part they mark may vary as the claim is manipulated (see variable condition).","4 Claim List","All claims made by policy conditions are added to an ordered list. The default criteria used to order the claims is as follows, listed in the order in which they are considered when comparing two claims. Each criterion is checked only if none of the criteria above it would apply. If two claims are equivalent with respect to all of the criteria, the claim that was made by the policy listed later in the Agent will win.","4.1 Coverage","A claim whose focus includes another claim's focus wins. If the focuses are equivalent, neither is considered to cover the other. For example, a claim made on \u2018Being John Malkovich\u2019 with focus [0 . . . 4][6 . . . 9][11 . . . 19] will win over a claim with focus [6 . . . 9][11 . . . 19]. However, if two claims both had focus [0 . . . 4], the claims would be equivalent in terms of the coverage criterion.","4.2 Priority","A claim with higher priority wins. If the priorities are the same, the claim with the higher priority score will win. (See the Policy Components section on Priority for details on how priority and priority score are assigned.)","4.3 Ambiguity","A claim with more ambiguity wins. This criterion is checked only if the current claim can be merged with the claim it's compared to. (See Claim Manipulation in Appendix 3 for further information.) If two claims have equivalent ambiguity, the ambiguity due only to the current claim is compared. If this differs, the claim with the smaller local ambiguity will win (regardless of whether the two claims can be merged).","4.4 Connection Weight","A claim made by more grammatical operators and exactly matched operands wins (that is with smaller connection weight). If the connection weights of two claims are equal then the claim with fewer loose connections wins.","4.5 Adjacent","A claim with smaller adjacency score wins.","4.6 Focus Size","A claim with a larger focus wins. For example, a claim made on \u2018Sell Book and Buy Toy\u2019 with focus [0 . . . 3][5 . . . 8], will win over a claim with focus [9 . . . 11][13 . . . 15]).","4.7 Match Restrictiveness","A claim using a more restrictive token matcher wins. The most restrictive token matcher is the exact token matcher, which has a restrictiveness of 100. The substring token matcher has a restrictiveness of 60.","4.8 Variable","When comparing two claims the claims with no variables is better than a claim with variables. If both claims have variables then the one with more variables but smaller ones is preferred to the one with less but wider variables (see variable condition).","4.9 Unknown (Deprecated)","A claim with unknown element(s) will win over a claim with no unknown elements. If both claims have unknown elements the one with less unknown elements wins.","4.10 Default Criterion:","A claim, which its focus is closer to the beginning of the input wins.","5 Policy Components","5.1 Name","Used to refer to the policy in the OPAL language. A policy name is a series of capital letters (\u2018A\u2019 to \u2018Z\u2019), digits (\u20180\u2019 to \u20189\u2019) or under score (\u2018_\u2019) that begins with a capital letter. Policies names should be unique (in the scope of the agent they are declared in).","5.2 Title","Used to refer to the policy in interactions and menus. Spaces\/symbols can be used in the title and it does not need to be in capital letters. The title is a literal and is automatically enclosed in quotes.","5.3 XML Tags (not Available in Backward Compatibility Mode)","The interpretation network will support the generation of output that contains XML tags. This section will discuss the types of tags that will be used and how they are generated. It will use the AV Network as an example. See .","An XML tag is made up of three components\n\n","A basic XML tag has the form:\n\n","For example, a tag having two parameters would have the form:\n\n","The interpretation network supports two parameters, type and ID. These are discussed in more detail later. For now, just note that the general form of an XML tag generated by the network is:\n\n","The XML tags that are supported by the interpretation network can be divided into four groups (two of which consist of a single tag):\n\n","The first three groups are common to all applications. The domain specific tags vary from application to application.","The tags are generated in two ways. The interpretation tag and the ambiguity tag are generated automatically by the interpretation network. The logical tags and domain specific tags are generated by setting the xml-tag and xml-type fields in the policy of a network agent.","As mentioned above, the system supports two parameters: type and ID. The type parameter is optional. For logical and domain specific tags, it can be specified by setting the xml-type field of a policy. The ID parameter is generated automatically by the system. Its value is equal to the ID of the claim that is being actuated by the policy.",{"@attributes":{"id":"p-0169","num":"0197"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Tag Name","Type (optional)",{}]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"XML Tags Generated Automatically by the System"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"Data Values"]},{"entry":[{},"interpretation","none","none"]},{"entry":[{},"xor","relation","none"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"XML Logical Tags Common to All Applications"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"and","relation","none"]},{"entry":[{},"or","relation","none"]},{"entry":[{},"lessThan","relation","none"]},{"entry":[{},"greaterThan","relation","none"]},{"entry":[{},"ifThen","relation","none"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"AV Network Application Specific XML Tags"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"Values"]},{"entry":[{},"TV","function","none"]},{"entry":[{},"VCR","function","none"]},{"entry":[{},"Power","parameter","none"]},{"entry":[{},"Channel","parameter","none"]},{"entry":[{},"Volume","parameter","none"]},{"entry":[{},"On","attribute","none"]},{"entry":[{},"Off","attribute","none"]},{"entry":[{},"Up","attribute","none"]},{"entry":[{},"Down","attribute","none"]},{"entry":[{},"Station","attribute","PBS, CBS, NBC, etc."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0170","num":"0198"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Input:\u2003\u2018Turn TV on\u2019."]},{"entry":[{},"XML: <interpretation>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<TV type=\u201dfunction\u201d ID=\u201d1_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<power type=\u201dparameter\u201d ID=\u201d2_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<on type=\u201dattribute\u201d ID=\u201d3_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/on>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<\/power>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<\/TV>"]},{"entry":[{},"\u2003\u2003<\/interpretation>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0171","num":"0199"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Input:\u2003\u2018Turn TV to PBS\u2019."]},{"entry":[{},"XML: <interpretation>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<TV type=\u201dfunction\u201d ID=\u201d1_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<channel type=\u201dparameter\u201d ID=\u201d2_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<station type=\u201dattribute\u201d ID=\u201d3_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003PBS"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/station>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<\/channel>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<\/TV>"]},{"entry":[{},"\u2003\u2003<\/interpretation>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0172","num":"0200"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Input:\u2003\u2018Turn on TV to PBS\u2019"]},{"entry":[{},"XML: <interpretation>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<TV type=\u201dfunction\u201d ID=\u201d1_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<and type=\u201drelation\u201d ID=\u201d2_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<power type=\u201dparameter\u201d ID=\u201d3_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<on type=\u201dattribute\u201d ID=\u201d4_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/on>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/power>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<channel type=\u201dparameter\u201d ID=\u201d5_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<station type=\u201dattribute\u201d ID=\u201d6_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003PBS"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/station>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/channel>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<\/and>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<\/TV>"]},{"entry":[{},"\u2003\u2003<\/interpretation>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0173","num":"0201"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Input:\u2003\u2018Turn VCR off and TV volume down.\u2019"]},{"entry":[{},"XML: <interpretation>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<and type=\u201drelation\u201d ID=\u201d1_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<VCR type=\u201dfunction\u201d ID=\u201d2_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<power type=\u201dparameter\u201d ID=\u201d3_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<off type=\u201dattribute\u201d ID=\u201d4_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/off>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/power>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<\/VCR>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<TV type=\u201dfunction\u201d ID=\u201d5_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<volume type=\u201dparameter\u201d ID=\u201d6_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<down type=\u201dattribute\u201d ID=\u201d7_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/down>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/volume>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<\/TV >"]},{"entry":[{},"\u2003\u2003\u2003\u2003<\/and>"]},{"entry":[{},"\u2003\u2003<\/interpretation>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0174","num":"0202"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Input:\u2003\u2018Turn off.\u2019"]},{"entry":[{},"XML: <interpretation>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<xor type=\u201drelation\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<TV type=\u201dfunction\u201d ID=\u201d1_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<power type=\u201dparameter\u201d ID=\u201d2_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<on type=\u201dattribute\u201d ID=\u201d3_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/on>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/power>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<\/TV>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<VCR type=\u201dfunction\u201d ID=\u201d4_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<power type=\u201dparameter\u201d ID=\u201d5_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<on type=\u201dattribute\u201d ID=\u201d6_\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/on>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<\/power>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003<\/VCR>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<\/xor>"]},{"entry":[{},"\u2003\u2003<\/interpretation>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Syntax: {XML tag: tag-name}","XML tag goes after the policy condition.",{"@attributes":{"id":"p-0177","num":"0205"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Policy::"]},{"entry":[{},"(THEATERNAME:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003\u2018AMC\u2019|\u2019century21"]},{"entry":[{},"\u2003\u2003\u2003\u2003{xml-tag:\u2018theaterName\u2019}"]},{"entry":[{},"\u2003\u2003\u2003\u2003{action:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{execute:*}}"]},{"entry":[{},"\u2003\u2003\u201d),"]},{"entry":[{},"Input:\u2003\u2018amc\u2019"]},{"entry":[{},"Output:\u2003<theaterName ID=\u201d1_\u201d> amc <\/theaterName>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Syntax: {XML tag: tag-name}","XML type tag goes after the XML tag. XML type is valid only if XML tag is provided for the policy.",{"@attributes":{"id":"p-0180","num":"0208"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Policy::"},{"entry":"(THEATERNAME:"},{"entry":"\u2003\u2003\u201c"},{"entry":"\u2003\u2003\u2018AMC\u2019|\u2019century21"},{"entry":"\u2003\u2003\u2003\u2003{xml-tag: \u2018theaterName\u2019}"},{"entry":"\u2003\u2003\u2003\u2003{xml-type: \u2019attrib\u2019}"},{"entry":"\u2003\u2003\u2003\u2003{action:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{execute:*}}"},{"entry":"\u2003\u2003\u201d),"},{"entry":"Input:\u2003\u2018amc\u2019"},{"entry":"Output:\u2003<theaterName type=\u201dattrib\u201d ID=\u201d1_\u201d> amc <\/theaterName>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Ambiguity tags are generated automatically.",{"@attributes":{"id":"p-0182","num":"0210"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Policy::"]},{"entry":[{},"(MOVIENAME:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003\u2018john malkovich\u2019"]},{"entry":[{},"\u2003\u2003{xml-tag: \u2018movieName\u2019}"]},{"entry":[{},"\u2003\u2003{xml-type: \u2019attrib\u2019}"]},{"entry":[{},"\u2003\u2003\u2003\u2003{action:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{execute:*}}"]},{"entry":[{},"\u2003\u2003\u201d),"]},{"entry":[{},"(MOVIESTAR:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003\u2018being john malkovich\u2019"]},{"entry":[{},"\u2003\u2003\u2003\u2003{xml-tag: \u2018movieStar\u2019}"]},{"entry":[{},"\u2003\u2003\u2003\u2003{xml-type: \u2019attrib\u2019}"]},{"entry":[{},"\u2003\u2003\u2003\u2003{action:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{execute:*}}"]},{"entry":[{},"\u2003\u2003\u201d),"]},{"entry":[{},"\u2003(MOVIE:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003MOVIENAME, MOVIESTAR"]},{"entry":[{},"\u2003\u2003\u2003\u2003{xml-tag: \u2018movie\u2019}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{action:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{execute:*}}"]},{"entry":[{},"\u2003\u2003\u201d),"]},{"entry":[{},"Input:\u2003\u2018john malkovich\u2019"]},{"entry":[{},"Output:"]},{"entry":[{},"<movie ID=\u201d1_\u201d><ambiguity>"]},{"entry":[{},"<movieName ID=\u201d2_\u201d>john malkovich<\/movieName>"]},{"entry":[{},"<movieStar ID=\u201d3_\u201d>john malkovich<\/movieStar>"]},{"entry":[{},"<\/ambiguity><\/movie>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0018","list-style":"none"},"li":{"@attributes":{"id":"ul0018-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0019","list-style":"none"},"li":"Using the backward compatibility mode will stop the automatic generation of the ambiguity XML tags and would prevent the XML tag and XML type from showing in the tee mode of policy editor.\n\n5.4 Priority\n"}}}},"The priority assigned to a policy. A policy's priority is assigned to all claims made by that policy.","Of the criteria used to order the claim list, priority is the only one that can be set explicitly in the policy. Priority is the second criterion used when comparing two claims; coverage is compared first. If two claims are equal in terms of coverage, then the one with a higher priority will win. Therefore, priority provides the policy writer with a good amount of control over which policy should produce the winning claims.","The default priority is 0. Priority can explicitly be set to any integer between \u22121000 and +1000, inclusive. A positive integer will give the claims made by the policy higher priority; a negative integer will give them lower priority.","A list is kept of all different priorities that were associated to sub-claims building up a claim. The focus of the sub-claims with the same priority will be added up and would be kept in the list.",{"@attributes":{"id":"p-0187","num":"0216"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018aaa\u2019 p=1"]},{"entry":[{},"P2: \u2018bb\u2019 p=2"]},{"entry":[{},"P3: \u2018cccc\u2019 p=2"]},{"entry":[{},"P4: (A B) & C"]},{"entry":[{},"User-Input: \u201ccccc aaa bb\u201d."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Priority","2","1"]},{"entry":[{},"Focus size","5 . . . 7","[0 . . . 3][9 . . . 12]"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"The priority criterion of two claims will be compared in the following manner:\n\n","Priority is used only for ordering the claim list of the agent containing the policy. When an agent passes a claim up chain, the priority of the claim is removed.","5.5 Continuation (not Available in Backward Compatibility Mode)","The continuation field provides support for recognizing continuation in the interpretation network.","For example consider the following dialog:\n\n",{"@attributes":{"id":"p-0192","num":"0228"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1:"]},{"entry":[{},"\/BOI \u2018and\u2019"]},{"entry":[{},"\/*"]},{"entry":[{},"\/BOI is a terminal condition that claims the beginning of the input"]},{"entry":[{},"*\/"]},{"entry":[{},"\u2003\u2003{continuation: join}"]},{"entry":[{},"\u2003\u2003{action:\u2003{execute:\u2003\u2018Recognized dependency\u2019\u2003\u2002}}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Whenever a policy is a join continuation then any claims made by that policy will be tagged as continued. Lets say the claim made by a policy with a {continuation: join} field would be part of the winning claim. If this is true then the input is going to be reinterpreted based on the claims made on the previous input. So in the above example the \u201cAnd Meg Ryan\u201d input will be claimed with dependency to the previous input (\u201cMovies staring Tom Hanks\u201d) and therefore \u201cAnd Meg Ryan\u201d will be reinterpreted again but this time the claims made on the previous input (\u201cMovies starring Tom Hanks\u201d) would be used.","5.6 Condition","Used to make claims from the input. Each condition will return a claim list of all claims it produces. There are four types of conditions: terminal, reference, unary and binary.","5.6.1 Terminal Condition","There are four types of terminal conditions:\n\n","Tokens are identified based on the following parameters:\n\n","The above parameters are defined in properties\/ParserParameters.xml. Whatever is not included as an alphabet, numeral or symbol is considered a delimiter by the tokenizer.",{"@attributes":{"id":"p-0198","num":"0243"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Policy:Alphabet>"]},{"entry":[{},"<Policy:CharacterRange lowerLimit=\u201ca\u201d upperLimit=\u201cz\u201d\u2003\/>"]},{"entry":[{},"<Policy:CharacterRange lowerLimit=\u201cA\u201d upperLimit=\u201cZ\u201d\u2003\/>"]},{"entry":[{},"<Policy:CharacterRange lowerLimit=\u201c&#x3000;\u201d"]},{"entry":[{},"upperLimit=\u201c&#xffee;\u201d\u2003\/>"]},{"entry":[{},"<\/Policy:Alphabet>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0199","num":"0244"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Policy:Numeric>"]},{"entry":[{},"<Policy:CharacterRange lowerLimit=\u201c0\u201d upperLimit=\u201c9\u201d\u2003\/>"]},{"entry":[{},"<\/Policy:Numeric>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0200","num":"0245"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Policy:Symbols>"]},{"entry":[{},"<Policy:CharacterRange lowerLimit=\u201c!\u201d upperLimit=\u201c\/\u201d \/>"]},{"entry":[{},"<Policy:CharacterRange lowerLimit=\u201c:\u201d upperLimit=\u201c@\u201d \/>"]},{"entry":[{},"<Policy:CharacterRange lowerLimit=\u201c[\u201d upperLimit=\u201c`\u201d \/>"]},{"entry":[{},"<Policy:CharacterRange lowerLimit=\u201c{\u201d upperLimit=\u201c~\u201d \/>"]},{"entry":[{},"<\/Policy:Symbols>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Note that based on example 11, the symbol $ will be recognized as a symbol because it is in the range between \u201c!\u201d and \u201c\/\u201d. But the symbol \u00a3 will not be recognized because it is not in any of the defined ranges. For it to be recognized as a symbol a new range would have to be added to the symbol definition (\u201c&#x00A3;\u201d is the Unicode for \u00a3).",{"@attributes":{"id":"p-0202","num":"0247"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Policy:Symbols>"]},{"entry":[{},"..."]},{"entry":[{},"<Policy:CharacterRange lowerLimit=\u201c&#x00A3;\u201d"]},{"entry":[{},"upperLimit=\u201c&#x00A3;\u201d\/>"]},{"entry":[{},"<\/Policy:Symbols>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Other than the above-mentioned parameters, customized tokenizer classes may introduce application or language dependent types. The custom tokenizer class should replace USTextTokenizer in ParserParameters.xml.","A token is any stream of characters of the same type (e.g. alphabet, number, symbol) separated by delimiters or other tokens. Symbols are exception to this rule because symbols are broken up character by character.",{"@attributes":{"id":"p-0205","num":"0250"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Input","Tokens"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2018John Smith\u2019","\u2018john\u2019 ,"]},{"entry":[{},{},"\u2018smith\u2019"]},{"entry":[{},"\u2018mp3\u2019","\u2018mp\u2019 (alphabet) ,"]},{"entry":[{},{},"\u20183\u2019 (number)"]},{"entry":[{},"\u2018we are: \u201cworld's greatest\u201d company\u2019","\u2018we\u2019 (alphabet),"]},{"entry":[{},{},"\u2018are\u2019 (alphabet),"]},{"entry":[{},{},"\u2018:\u2019 (symbol),"]},{"entry":[{},{},"\u2018\u201d\u2019 (symbol),"]},{"entry":[{},{},"\u2018world\u2019 (alphabet),"]},{"entry":[{},{},"\u2018\u2019\u2019 (symbol),"]},{"entry":[{},{},"\u2018s\u2019 (alphabet),"]},{"entry":[{},{},"greatest (alphabet),"]},{"entry":[{},{},"\u2018\u201d\u2019 (symbol),"]},{"entry":[{},{},"\u2018company\u2019 (alphabet)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}]},"There are three types of token terminals:\n\n","The condition applies if part of the input matches the string. The string is broken into tokens. The tokens are implicitly joined using the adjacent operator. Each token is matched using the default <exact, substring> match. See Section 5.3.3 on how each token is matched using <exact> and <substring>; see Section 5.4.4 on how the ADJACENT operator works.",{"@attributes":{"id":"p-0208","num":"0256"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Condition: \u2018john malkovich\u2019"]},{"entry":[{},"User-Input: \u2018a john malkovich movie\u2019"]},{"entry":[{},"The condition will apply and will mark \u2018john malkovich\u2019 as claimed"]},{"entry":[{},"User-Input: \u2018a john who is a malkovich movie\u2019"]},{"entry":[{},"The condition will not apply because \u2018john\u2019 and \u2018malkovich\u2019 are"]},{"entry":[{},"not adjacent in the input."]},{"entry":[{},"User-Input: \u2018a john malk movie\u2019"]},{"entry":[{},"The condition will not apply because \u2018malk\u2019 does not match"]},{"entry":[{},"\u2018malkovich\u2019."]},{"entry":[{},"User-Input: \u2018a john malkovic movie\u2019"]},{"entry":[{},"The condition will not apply because \u2018malkovic\u2019 is a substring"]},{"entry":[{},"match of \u2018malkovich\u2019."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The \u2032, \u2033, and \/ are special characters that should be referred to using %SINGLE_QUOTE%, %DOUBLE_QUOTE% and %BACK_SLASH% sequences.",{"@attributes":{"id":"p-0210","num":"0258"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Condition: \u2018%DOUBLE_QUOTE%malkovich%DOUBLE_QUOTE% \u2019"},{"entry":"User-Input: \u2018a \u201cmalkovich\u201d movie\u2019"},{"entry":"The condition will apply."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":[{},{}]},{"@attributes":{"id":"p-0211","num":"0259"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MN.txt:"]},{"entry":[{},"sixth sense"]},{"entry":[{},"being john malkovich"]},{"entry":[{},"the wall"]},{"entry":[{},"---------------------------------------------------"]},{"entry":[{},"Condition: \u2003\/F \u2018MN.txt\u2019"]},{"entry":[{},"User-Input: malkovich and sixth sense"]},{"entry":[{},"The condition will apply and two claims will be made."]},{"entry":[{},"The claims (in order) would mark the following:"]},{"entry":[{},"\u2018malkovich\u2019"]},{"entry":[{},"\u2018sixth sense\u2019"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"A claim will be made on only those input tokens that are in order.",{"@attributes":{"id":"p-0213","num":"0261"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MN.txt:"]},{"entry":[{},"being john malkovich"]},{"entry":[{},"---------------------------------------------------"]},{"entry":[{},"Condition: \u2003\/F \u2018MN.txt\u2019"]},{"entry":[{},"User-Input: john malkovich"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The condition will apply and will make the claim: \u2018john malkovich\u2019",{"@attributes":{"id":"p-0215","num":"0263"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MN.txt:"]},{"entry":[{},"being john malkovich"]},{"entry":[{},"---------------------------------------------------"]},{"entry":[{},"Condition: \u2003\/F \u2018MN.txt\u2019"]},{"entry":[{},"User-Input: malkovich john"]},{"entry":[{},"The condition will apply and will make the claim: \u2018malkovich\u2019 (The"]},{"entry":[{},"claim on \u2018john\u2019 lost to the claim on \u2018malkovich\u2019)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The default behavior will change if token matchers (see Section 5.3.3, e.g. <exact>, <substring> . . . ) are applied to the \/F condition. If token matchers are used then all tokens in the file entry must appear in the input adjacent and in order.",{"@attributes":{"id":"p-0217","num":"0265"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MN.txt:"]},{"entry":[{},"sixth sense"]},{"entry":[{},"---------------------------------------------------"]},{"entry":[{},"Condition: \u2003<exact> \/F \u2018MN.txt\u2019"]},{"entry":[{},"User-Input: sense"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The condition will not apply as \u2018sixth\u2019 does not appear in the input.",{"@attributes":{"id":"p-0219","num":"0267"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MN.txt:"]},{"entry":[{},"sixth sense"]},{"entry":[{},"---------------------------------------------------"]},{"entry":[{},"Condition: \u2003<exact> \/F \u2018MN.txt\u2019"]},{"entry":[{},"User-Input: sense sixth"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The condition will not apply as \u2018sixth sense\u2019 does not appear in the input in the same order as the file.",{"@attributes":{"id":"p-0221","num":"0269"},"tables":{"@attributes":{"id":"TABLE-US-00047","num":"00047"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MN.txt:"]},{"entry":[{},"sixth sense"]},{"entry":[{},"---------------------------------------------------"]},{"entry":[{},"\u2003\u2003\u2003Condition: \u2003<exact> \u2018MN.txt\u2019"]},{"entry":[{},"\u2003\u2003\u2003User-Input: sixth a sense"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The condition will not apply as \u2018sixth sense\u2019 is not adjacent in the input.","5.6.1.2.3 Common Files","A common file may be provided for an agent network to modify the behavior of file conditions (\/F). To prevent unwanted claims made by file conditions create a common file. The common file should contain a list of common words (e.g. the, as, is).",{"@attributes":{"id":"p-0224","num":"0272"},"tables":{"@attributes":{"id":"TABLE-US-00048","num":"00048"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Common file not provided:"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MN.txt:"]},{"entry":[{},"sixth sense"]},{"entry":[{},"being john malkovich"]},{"entry":[{},"the wall"]},{"entry":[{},"---------------------------------------------------"]},{"entry":[{},"Condition: \u2003\/F \u2018MN.txt\u2019"]},{"entry":[{},"User-Input: the movies in sunnyvale"]},{"entry":[{},"The condition will apply and one claim will be made on token"]},{"entry":[{},"\u2018the\u2019."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0225","num":"0273"},"tables":{"@attributes":{"id":"TABLE-US-00049","num":"00049"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Common file provided:"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"common.txt:"]},{"entry":[{},"the"]},{"entry":[{},"being"]},{"entry":[{},"----------------------------------------------------"]},{"entry":[{},"Condition: \u2003\/F \u2018MN.txt\u2019"]},{"entry":[{},"User-Input: the movies in sunnyvale"]},{"entry":[{},"The condition will not apply."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The file condition will ignore the common words only if they are not adjacent to a non-common word.",{"@attributes":{"id":"p-0227","num":"0275"},"tables":{"@attributes":{"id":"TABLE-US-00050","num":"00050"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Common file provided:"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Condition: \u2003\/F \u2018MN.txt\u2019"]},{"entry":[{},"User-Input: the wall"]},{"entry":[{},"The condition will apply."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"The condition applies if part of input matches one of the columns in a database. A database spec file (in text format) should be provided for the \/DB condition. This spec file should contain the following information:","1. JDBC driver","2. JDBC server location","3. Database name (or ODBC data source name)","4. Table name","5. Column name","6. Login","7. Password",{"@attributes":{"id":"p-0236","num":"0284"},"tables":{"@attributes":{"id":"TABLE-US-00051","num":"00051"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MS.spec:"]},{"entry":[{},"com.pointbase.jdbc.jdbcUniversalDriver"]},{"entry":[{},"jdbc:pointbase:\/\/192.168.0.26:1000\/"]},{"entry":[{},"movies"]},{"entry":[{},"star"]},{"entry":[{},"star_name"]},{"entry":[{},"public"]},{"entry":[{},"public"]},{"entry":[{},"---------------------------------------------------"]},{"entry":[{},"Condition: \/DB \u2018MS.spec\u2019"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0237","num":"0285"},"tables":{"@attributes":{"id":"TABLE-US-00052","num":"00052"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MS.spec:"]},{"entry":[{},"sun.jdbc.odbc.JdbcOdbcDriver"]},{"entry":[{},"jdbc:odbc:"]},{"entry":[{},"movies"]},{"entry":[{},"star"]},{"entry":[{},"star_name"]},{"entry":[{},"---------------------------------------------------"]},{"entry":[{},"Condition: \/DB \u2018MS.spec\u2019"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{},{}]},"The condition applies if a number token is found in the input (numbers are identified by the tokenizer).","You may also define a range for the \/NUMBER condition.","Numbers are tokenized using the following rule:","<DIGIT>+[(COMMA|PERIOD)<DIGIT>+]+","34","34.5","3,456","3,456.56","Known Issues:","The following are also considered to be valid numbers:","3.4.5","23,3434,43","3.4,5\n\n","The condition claims a single symbol in the input (numbers are identified by the tokenizer, refer to Section 5.4.1.1).",{"@attributes":{"id":"p-0249","num":"0300"},"tables":{"@attributes":{"id":"TABLE-US-00053","num":"00053"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Condition:","\/SYMBOL"]},{"entry":[{},"User-Input:","\u2018@\u2019"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"The condition will apply and the symbol @ will be claimed."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0250","num":"0301"},"tables":{"@attributes":{"id":"TABLE-US-00054","num":"00054"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Condition: \u2003\/SYMBOL"]},{"entry":[{},"User-Input: \u2018#@%\u2019"]},{"entry":[{},"The condition will apply and the symbol # will be claimed."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"(Not Available in Backward Compatibility Mode)","The condition claims a delimiter in the input (delimiters are identified by the tokenizer, refer to Section 5.4.1.1).",{"@attributes":{"id":"p-0253","num":"0304"},"tables":{"@attributes":{"id":"TABLE-US-00055","num":"00055"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Condition: \u2003\u2018blue\u2019\u2003\/DELIMITER \u2018book\u2019"]},{"entry":[{},"User-Input: \u2018blue \u2003book\u2019"]},{"entry":[{},"The condition will apply."]},{"entry":[{},"Claim: [\u2018blue\u2019][\u2018\u2003\u2018][\u2018book\u2019]."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Delimiters are most useful when used in conjunction with variables.","Note that Blanks are added to the beginning and the end of all text inputs automatically and therefore the beginning and the end of input is always a delimiter.",{"@attributes":{"id":"p-0255","num":"0306"},"tables":{"@attributes":{"id":"TABLE-US-00056","num":"00056"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Condition: \u2003\/DELIMITER \u2018book\u2019"]},{"entry":[{},"User-Input: \u2018book\u2019"]},{"entry":[{},"The condition will apply."]},{"entry":[{},"Claim: [\u2018\u2003\u2018][\u2018book\u2019]."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"(Not Available in Backward Compatibility Mode)","The condition claims the first character of the input that is always a blank space (blanks are added to the beginning and the end of all text inputs automatically).",{"@attributes":{"id":"p-0258","num":"0309"},"tables":{"@attributes":{"id":"TABLE-US-00057","num":"00057"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Condition: \u2003\/BOI \u2018a\u2019"]},{"entry":[{},"User-Input: \u2018a\u2019"]},{"entry":[{},"The condition will apply."]},{"entry":[{},"Claim: [\u2018\u2003\u2018][\u2018a\u2019]."]},{"entry":[{},"User-Input: \u2018b a\u2019"]},{"entry":[{},"The condition will not apply."]},{"entry":[{},"User-Input: \u2018a b\u2019;"]},{"entry":[{},"The condition will apply."]},{"entry":[{},"Claim: [\u2018\u2003\u2018][\u2018a\u2019]."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0034","list-style":"none"},"li":{"@attributes":{"id":"ul0034-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0035","list-style":"none"},"li":["The purpose of using \/BOI should be to detect continuation (normally if the input depends on the previous input). Policies that detect continuation should not be referred in the policies that make relation between other policies.","It is recommended to always use <exists> operator along with the \/BOI operator as normally the beginning delimiter themselves are not important.","This condition should only appear at the beginning of the policy condition (may follow the <exists> condition)\n\n5.6.1.7 End of Input Terminal (\/EOI)\n"]}}}},"(Not Available in Backward Compatibility Mode)","The condition claims the last character of the input that is always a blank space (blanks are added to the beginning and the end of all text inputs automatically).",{"@attributes":{"id":"p-0261","num":"0315"},"tables":{"@attributes":{"id":"TABLE-US-00058","num":"00058"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Condition: \u2003\/EOI \u2018a\u2019"]},{"entry":[{},"User-Input: \u2018a\u2019"]},{"entry":[{},"The condition will apply."]},{"entry":[{},"Claim: [\u2018a\u2019][\u2018\u2003\u2018]."]},{"entry":[{},"User-Input: \u2018a b\u2019"]},{"entry":[{},"The condition will not apply."]},{"entry":[{},"User-Input: \u2018b a\u2019"]},{"entry":[{},"The condition will apply."]},{"entry":[{},"Claim: [\u2018a\u2019][\u2018\u2003\u2018]."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0036","list-style":"none"},"li":{"@attributes":{"id":"ul0036-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0037","list-style":"none"},"li":["The purpose of using \/EOI should be to detect continuation (normally if the input depends on the next input). Policies that detect continuation should not be referred in the policies that make relation between other policies.","It is recommended to always use <exists> operator along with the \/EOI operators as normally the ending delimits themselves are not important.","This condition should only appear as the last operator in policy condition.\n\n5.6.1.8 Token Type Terminal (\/TOKEN)\n"]}}}},"The condition applies if a user defined token type is found in the input. New token types could be defined in the tokenizer.","5.6.1.9 Check Condition (<Check (Agent, Property, Key; Value)>):","Makes a claim only if an agent's property is equal to a specific value. This condition is especially useful for the AAOSA agents to know about the state of the application or device. For example the TV agent in a TV\/AV interface could use the <check> condition to know if the TV is on. If the TV is on and the user says \u2018power on\u2019 then the TV agent could generate the proper response. There are two types of properties that may be accessed through messaging:","a. Data property (basic objects)","b. Data store property (collection objects: hash tables, vectors, . . . )","Each agent must allow access to its data property by declaring it as a valid data property. The methods that should be sub-classed for this purpose are summarized in the following table:",{"@attributes":{"id":"p-0267","num":"0324"},"tables":{"@attributes":{"id":"TABLE-US-00059","num":"00059"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Access permission","methods","Set message"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Data","public Boolean","public void","<check (agent, property; value)>"]},{"entry":["Property","IsValidDataProperty(","setData("]},{"entry":[{},"String propertyName)","String propertyName,"]},{"entry":[{},{},"Object value)"]},{"entry":[{},{},"Object"]},{"entry":[{},{},"getData("]},{"entry":[{},{},"String propertyName)"]},{"entry":["Data","public Boolean","public void","<check (agent, property, key;"]},{"entry":["Store","IsValidDataStoreProperty(","setDataStoreElement(","value)>"]},{"entry":["Property","String propertyName)","String propertyName,"]},{"entry":[{},{},"String propertyKey,"]},{"entry":[{},{},"Object"]},{"entry":[{},{},"propertyValue)"]},{"entry":[{},{},"public Object"]},{"entry":[{},{},"getDataStoreElement("]},{"entry":[{},{},"String propertyName,"]},{"entry":[{},{},"String propertyKey)"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"All AAOSA agents have a STATE property that could be checked (STATE is a basic property).","The parameters of a check message, <check (agent, property, key, value)>, are:","Agent: The agent address that its property is to be checked. This parameter is optional. If omitted then an agent will \u201ccheck\u201d its own property.","Property: The name of the property to be checked.","Key: The key to the data store property (as a string). This parameter is optional. If omitted then an agent will \u201ccheck\u201d a basic property.","Value: The vale that the property will be compared to (as a string).",{"@attributes":{"id":"p-0270","num":"0327"},"tables":{"@attributes":{"id":"TABLE-US-00060","num":"00060"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1:"]},{"entry":[{},"Condition: \u2018open\u2019 {action: {execute: \u2018door"]},{"entry":[{},"openned\u2019,set(DOOR,\u2018STATE\u2019,\u2018\u2019;\u2018OPEN\u2019)}}),"]},{"entry":[{},"P2:"]},{"entry":[{},"Condition: \u2002<check(DOOR,\u2018STATE\u2019,\u2018\u2019; \u2018OPEN\u2019)> \u2018open\u2019 {action:"]},{"entry":[{},"{execute: \u2018door is already open!\u2019}}"]},{"entry":[{},"User-Input: \u2018open\u2019"]},{"entry":[{},"If the state of the door is open then policy P2 will apply and when"]},{"entry":[{},"actuated it would reply with: \u2018door is already open!\u2019"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"See section 6.2.6 and 6.2.7 for more information on set and get.","5.6.2 Reference Conditions","5.6.2.1 Policy Reference","The condition applies if another policy has claims. A policy name is a series of capital letters (\u2018A\u2019 to \u2018Z\u2019), digits (\u20180\u2019 to \u20189\u2019) or under score (\u2018_\u2019) that begins with a capital letter. A policy can only refer to policies that are declared before it.","5.6.2.2 Agent Reference","The condition applies if the referenced agent has claims. The referenced agent must be a listener to the agent that owns the policy.","An agent is referred to using its address. An agent address has the following format:","agent-instance-name.agent-class @ domain","An agent could be referred to only if it's agent-instant-name would be a series of capital letters (\u2018A\u2019 to \u2018Z\u2019), digits (\u20180\u2019 to \u20189\u2019) or under score (\u2018_\u2019) that begins with a capital letter.",{"@attributes":{"id":"p-0277","num":"0334"},"tables":{"@attributes":{"id":"TABLE-US-00061","num":"00061"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DOWN.com.MySubClassedAAOSA@x"]},{"entry":[{},"All agents in the same domain may be referred to using only the"]},{"entry":[{},"agent-instance-name. By default all agents are made in domain x."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Variables behave and generate claims according to the following rules:\n\n",{"@attributes":{"id":"p-0279","num":"0337"},"tables":{"@attributes":{"id":"TABLE-US-00062","num":"00062"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018in\u2019 ? \u2018folder\u2019"]},{"entry":[{},"Input: in my java folder"]},{"entry":[{},"The variable condition in the claims made by P1 is bound from left"]},{"entry":[{},"by the \u2018in\u2019 token and from right by the \u2018folder\u2019 token. Therefore,"]},{"entry":[{},"\u201cmy java\u201d is identified as the variable part of the input and is"]},{"entry":[{},"added to the claim's focus."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0040","list-style":"none"},"li":{"@attributes":{"id":"ul0040-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0041","list-style":"none"},"li":"If the variable condition is bound only on either the left or right side of the condition, then the leftmost\/rightmost token of the variable part of the input is added to the policy's claim. The variable part of the input is also referred as a left\/right \u201cadjustable\u201d variable."}}}},{"@attributes":{"id":"p-0280","num":"0339"},"tables":{"@attributes":{"id":"TABLE-US-00063","num":"00063"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018in\u2019 ?"]},{"entry":[{},"Input: in java folder"]},{"entry":[{},"In this case the variable is bound on the left by the \u2018in\u2019 token and"]},{"entry":[{},"the variable part is identified as \u201cright adjustable\u201d. Per our"]},{"entry":[{},"rule, the \u201cjava folder\u201d string is marked as the variable part of the"]},{"entry":[{},"input and \u201cjava\u201d is added to the claim focus."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0042","list-style":"none"},"li":{"@attributes":{"id":"ul0042-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0043","list-style":"none"},"li":"If a claim with a right (or left) adjustable variable is merged with another claim that does not have a variable part, then the variable part of the claim is adjusted by excluding all the tokens that are found from the beginning of the next claim focus."}}}},{"@attributes":{"id":"p-0281","num":"0341"},"tables":{"@attributes":{"id":"TABLE-US-00064","num":"00064"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018a\u2019 ?"]},{"entry":[{},"P2: \u2018b\u2019"]},{"entry":[{},"P3: P1 < P2"]},{"entry":[{},"Input: a x y z b r"]},{"entry":[{},"In this case, P1\u2032s subclaim variable part consists of the string \u201cx"]},{"entry":[{},"y z\u201d and its focus consists of \u201ca\u201d and \u201cx\u201d (second rule applies)."]},{"entry":[{},"When merged, P3\u2032s focus consists of \u2018a\u2019, \u2018x\u2019 and \u2018b\u2019."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0044","list-style":"none"},"li":{"@attributes":{"id":"ul0044-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0045","list-style":"none"},"li":["Claim list processing is performed as described in the policy reference. The variable length will be checked only after the appropriate checks for coverage, priority, ambiguity, connection weight, adjacency, focus size and restrictiveness are done.","If the variable condition does not mark any of the input, no claims are made."]}}}},{"@attributes":{"id":"p-0282","num":"0344"},"tables":{"@attributes":{"id":"TABLE-US-00065","num":"00065"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018in\u2019 ? \u2018folder\u2019"]},{"entry":[{},"Input: in folder"]},{"entry":[{},"Or"]},{"entry":[{},"P1: \u2018in\u2019 ?"]},{"entry":[{},"Input: folders that are in"]},{"entry":[{},"In both of these examples the variable condition does not mark any"]},{"entry":[{},"of the input and no claims are generated."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0046","list-style":"none"},"li":{"@attributes":{"id":"ul0046-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0047","list-style":"none"},"li":"When comparing two claims, any claims with no variables are selected over claims with variables"}}}},{"@attributes":{"id":"p-0283","num":"0346"},"tables":{"@attributes":{"id":"TABLE-US-00066","num":"00066"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018a\u2019 ?"]},{"entry":[{},"P2: \u2018a\u2019 \u2018b\u2019"]},{"entry":[{},"Input: a b"]},{"entry":[{},"In this case, P2 will win over P1."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0048","list-style":"none"},"li":{"@attributes":{"id":"ul0048-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0049","list-style":"none"},"li":"if two clams contain variables, then the claim with the greater number of variables wins."}}}},{"@attributes":{"id":"p-0284","num":"0348"},"tables":{"@attributes":{"id":"TABLE-US-00067","num":"00067"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018a\u2019 ? \u2018b\u2019 ? \u2018c\u2019"]},{"entry":[{},"P2: \u2018a\u2019 ? \u2018c\u2019"]},{"entry":[{},"Input: a x b y c"]},{"entry":[{},"In this example, P1 will be selected over P2."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0050","list-style":"none"},"li":{"@attributes":{"id":"ul0050-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0051","list-style":"none"},"li":"If two claims have the same number of variables, then the claim with the smaller variable length wins."}}}},{"@attributes":{"id":"p-0285","num":"0350"},"tables":{"@attributes":{"id":"TABLE-US-00068","num":"00068"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018a\u2019 ? \u2018b\u2019"]},{"entry":[{},"P2: \u2018c\u2019 ? \u2018d\u2019"]},{"entry":[{},"Input: a x b c j k d"]},{"entry":[{},"In this example, P1 is selected as it has the smallest variable length."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0052","list-style":"none"},"li":{"@attributes":{"id":"ul0052-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0053","list-style":"none"},"li":"Variable conditions may have a name assigned to them. A named variable condition consists of the variable operator followed by a semicolon followed by the variable name. For example, [?:First] is a valid variable name. References to variable names are only valid within the actions of the policy where the variables are declared"}}}},{"@attributes":{"id":"p-0286","num":"0352"},"tables":{"@attributes":{"id":"TABLE-US-00069","num":"00069"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018a\u2019 ?:A"]},{"entry":[{},"\u2003{action: {execute: ?:A}}"]},{"entry":[{},"P2: P1 \u2018b\u2019 ?:A"]},{"entry":[{},"\u2003{action: {execute: ?:A}}"]},{"entry":[{},"Input: a x b y"]},{"entry":[{},"In this example, P2 will be selected as the best claim and the"]},{"entry":[{},"result of the actuation consists of \u2018y\u2019."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0054","list-style":"none"},"li":{"@attributes":{"id":"ul0054-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0055","list-style":"none"},"li":"The use of cascading variables is illegal and its behavior is undefined and not supported."}}}},"P1: \u2018in\u2019 ???\n\n","P1: ?","5.6.3 Unary Conditions:","Unary condition is an operation on one operand. There are six basic unary conditions:\n\n","This condition will always make a claim. The claim made depends on the operand:\n\n",{"@attributes":{"id":"p-0291","num":"0367"},"tables":{"@attributes":{"id":"TABLE-US-00070","num":"00070"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Condition: [\u2018actor\u2019] \u2018john malkovich\u2019"]},{"entry":[{},"User-Input: actor john malkovich"]},{"entry":[{},"The condition will apply and will make the following claims:"]},{"entry":[{},"\u2018actor john malkovich\u2019"]},{"entry":[{},"\u2018john malkovich\u2019"]},{"entry":[{},"User-Input: john malkovich"]},{"entry":[{},"The condition will apply and will make one claim:"]},{"entry":[{},"\u2018john malkovich\u2019"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Policies should not be written in a way that they could make a null claim. For example, the following policies are not supported (although the SDK would not prevent them from being written):",{"@attributes":{"id":"p-0293","num":"0369"},"tables":{"@attributes":{"id":"TABLE-US-00071","num":"00071"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: [\u2018a\u2019]"]},{"entry":[{},"P2: [\u2018a\u2019] | [\u2018b\u2019]"]},{"entry":[{},"P3: [\u2018a\u2019 & \u2018b\u2019]"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Each of the above policies makes a null claim regardless of the input. An example of the bizarre behavior that would result is:",{"@attributes":{"id":"p-0295","num":"0371"},"tables":{"@attributes":{"id":"TABLE-US-00072","num":"00072"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"P1:\u2003[\u2018a\u2019]"},{"entry":"P2:\u2003P1 & \u2018b\u2019"},{"entry":"User-Input: b"},{"entry":"P2 will make a claim on \u2018b\u2019 with no reference to the null claim made by"},{"entry":"P1 and with connection weight 0 (the & operator will be ignored when"},{"entry":"calculating the connection weight)."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Checks to see if the operand has claims. If this is true, then the <exists> condition will make a null claim (an empty claim). If this is false, then the <exists> condition will not make a claim.",{"@attributes":{"id":"p-0297","num":"0373"},"tables":{"@attributes":{"id":"TABLE-US-00073","num":"00073"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1:"]},{"entry":[{},"Condition: \u2018starring\u2019 <exists> \u2018siamak\u2019"]},{"entry":[{},"User-Input: starring siamak"]},{"entry":[{},"The condition will apply, and will claim \u2018starring\u2019."]},{"entry":[{},"P1 condition will make the claim only if the word \u2018starring\u2019"]},{"entry":[{},"appears in the input adjacent to claim(s) made by the token"]},{"entry":[{},"terminal \u2018siamak\u2019."]},{"entry":[{},"User-Input: starring"]},{"entry":[{},"The condition will not apply."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"If binary conditions such as adjacent, and (&), ordered (<) and combo (,) appear in the same policy as the <exists> condition, then they behave as if <exists> condition is making claims on the input. For example:",{"@attributes":{"id":"p-0299","num":"0375"},"tables":{"@attributes":{"id":"TABLE-US-00074","num":"00074"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1:"]},{"entry":[{},"Condition: \u2018aaa\u2019 <exists> \u2018aaa\u2019"]},{"entry":[{},"User-Input: aaa aaa"]},{"entry":[{},"The condition will apply and marks the first \u2018aaa\u2019 ([0..2]) as its"]},{"entry":[{},"claim."]},{"entry":[{},"User-Input: aaa"]},{"entry":[{},"The condition will not apply, as there is no \u2018aaa\u2019 appears in the"]},{"entry":[{},"input before another \u2018aaa\u2019."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Note that the scope of <exists> condition is only the policy in which it appears.",{"@attributes":{"id":"p-0301","num":"0377"},"tables":{"@attributes":{"id":"TABLE-US-00075","num":"00075"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1:"]},{"entry":[{},"Condition: \u2018aaa\u2019 <exists> \u2018aaa\u2019"]},{"entry":[{},"P2:"]},{"entry":[{},"Condition: P1 \u2018aaa\u2019"]},{"entry":[{},"User-Input: aaa aaa"]},{"entry":[{},"The P2 condition will apply and will mark the first and second"]},{"entry":[{},"\u2018aaa\u2019 ([0..2][4..6]) as its claim."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Policies should not be written in a way that they could claim null. That is the following policies are not supported (although the SDK would not prevent them from being written):",{"@attributes":{"id":"p-0303","num":"0379"},"tables":{"@attributes":{"id":"TABLE-US-00076","num":"00076"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: <exists> \u2018a\u2019"]},{"entry":[{},"P2: [\u2018a\u2019] & <exists> \u2018b\u2019"]},{"entry":[{},"P3: < exists> (\u2018a\u2019 & \u2018b\u2019)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Each of the above policies makes a null claim regardless of the input. An example of the bizarre behavior that would result is:",{"@attributes":{"id":"p-0305","num":"0381"},"tables":{"@attributes":{"id":"TABLE-US-00077","num":"00077"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"P1: <exists> \u2018a\u2019"},{"entry":"P2:\u2003P1 & \u2018b\u2019"},{"entry":"User-Input: b"},{"entry":"P2 will make a claim on \u2018b\u2019 with no reference to the null claim made by"},{"entry":"P1 and with connection weight 0 (the & operator will be ignored when"},{"entry":"calculating the connection weight)."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"When using <exists>, an agent is checking against a part of the input that it is not going to claim. Therefore the agent must be aware of parts of the input that are possibly another agent's responsibility. This is against the agent oriented programming style where an agent should only care about its own domain and should not worry about other domains. Therefore <exists> should always be avoided if possible. There is usually a better way to write the policies or configure the agent network to avoid the usage of <exists>.","5.6.3.3 Token Matching Condition","This unary operator defines the type of token matching applied to token terminals and file terminals. There are 6 types of token matching:",{"@attributes":{"id":"p-0308","num":"0384"},"tables":{"@attributes":{"id":"TABLE-US-00078","num":"00078"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<exact>"]},{"entry":[{},"<substring>"]},{"entry":[{},"<accent>"]},{"entry":[{},"<accent-substring>"]},{"entry":[{},"<accent-edit-difference>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"For details on using these condition with combination to file terminal (\/F) please refer to the section on file terminals.","5.6.3.3.1. <Exact>","An input token matches a terminal token only if they are the same length and all their characters are exactly the same.",{"@attributes":{"id":"p-0311","num":"0387"},"tables":{"@attributes":{"id":"TABLE-US-00079","num":"00079"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1:"]},{"entry":[{},"Condition: <exact> \u2018malkovich\u2019"]},{"entry":[{},"User-Input: \u2018malkovic\u2019"]},{"entry":[{},"Claim: malkovic"]},{"entry":[{},"The condition will not apply."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Two tokens match only if there is an exact match or:\n\n","If the size of input token getting matched is less than the size of pattern, the input token will be claimed otherwise only the matched part of the input token will get claimed.",{"@attributes":{"id":"p-0314","num":"0392"},"tables":{"@attributes":{"id":"TABLE-US-00080","num":"00080"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1:"]},{"entry":[{},"Condition: <substring> \u2018malkovich\u2019"]},{"entry":[{},"User-Input:\u2003\u2018malkovic\u2019"]},{"entry":[{},"The condition will apply (note that the length of user"]},{"entry":[{},"input is less than the pattern\u2019s)"]},{"entry":[{},"Claim: malkovic"]},{"entry":[{},"P1:"]},{"entry":[{},"Condition: <substring> \u2018malkovich\u2019"]},{"entry":[{},"User-Input:\u2003\u2018malkovichab\u2019"]},{"entry":[{},"The condition will apply (note that the length of user"]},{"entry":[{},"input is greater than the pattern\u2019s)."]},{"entry":[{},"Claim: malkovich"]},{"entry":[{},"P1:"]},{"entry":[{},"Condition: <substring> \u2018malkovich\u2019"]},{"entry":[{},"User-Input: \u2018malkovi\u2019"]},{"entry":[{},"The condition will not apply because it does not satisfy"]},{"entry":[{},"the 80% match."]},{"entry":[{},"Claim: N\/A"]},{"entry":[{},"P1:"]},{"entry":[{},"Condition: <substring> \u2018malkovich\u2019"]},{"entry":[{},"User-Input: \u2018alkovich\u2019"]},{"entry":[{},"The condition will not apply because the starting"]},{"entry":[{},"characters do not match."]},{"entry":[{},"Claim: N\/A"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Tokens are matched using a rule-based collator.","5.6.3.3.4 <Accent-Substring>","Similar to a substring matcher but <accent-substring> matches the characters using a collator.","5.6.3.3.5 <Accent-Edit-Difference>","Matches two tokens using a rule based collator. The match allows missing or extra characters (less than a certain threshold currently defined in ParserParameters.xml). Tokens are matched only if they are larger than a certain length (currently defined in ParserParameter.xml).","5.6.3.3.6 Using Multiple Matchers","More than one token matching might be used to match terminal tokens. The matching will then be applied to the tokens one by one. If the first matching does not make a claim, the next matching in the list will be used.",{"@attributes":{"id":"p-0319","num":"0397"},"tables":{"@attributes":{"id":"TABLE-US-00081","num":"00081"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1"]},{"entry":[{},"Condition:\u2003<exact , substring> \u2018malkovich\u2019"]},{"entry":[{},"User-Input: \u2018being john malkovic\u2019"]},{"entry":[{},"The condition will apply, and will mark the following:"]},{"entry":[{},"\u2018malkovic\u2019 (substring match)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The default matching used are: <exact, substring>.",{"@attributes":{"id":"p-0321","num":"0399"},"tables":{"@attributes":{"id":"TABLE-US-00082","num":"00082"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1"]},{"entry":[{},"Condition:\u2003\u2018malkovich\u2019"]},{"entry":[{},"User-Input: \u2018john malkovic\u2019"]},{"entry":[{},"The condition will apply, and will mark the following:"]},{"entry":[{},"\u2018malkovic\u2019 (substring match)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Token matching types could be also applied to file terminals (changing their default matchings)",{"@attributes":{"id":"p-0323","num":"0401"},"tables":{"@attributes":{"id":"TABLE-US-00083","num":"00083"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MN.txt:"]},{"entry":[{},"sixth sense"]},{"entry":[{},"being john malkovich"]},{"entry":[{},"the wall"]},{"entry":[{},"--------------------------------------------------"]},{"entry":[{},"Condition:\u2003<exact, substring> \/F \u2018MN.txt\u2019"]},{"entry":[{},"User-Input: malkovich and sixth sense"]},{"entry":[{},"The condition will apply and only one claim will be"]},{"entry":[{},"made:"]},{"entry":[{},"\u2018sixth sense\u2019"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Each token matching type has a value, which shows how restrictive it is. The restrictiveness values is a constant, predefined heuristically:","Exact (100)","Substring (60)","Accent (50)","Accent-Substring (85)","Accent-Edit-Difference (50)","5.6.3.3.7 Fast Matchers (<Exact>, <Substring>)","The matchers are categorized into fast and flexible matchers. The fast matchers are: <exact> and <substring>.","5.6.3.3.8 Flexible Matchers(<Exact>, <Substring>, <Accent>, <Accent-Substring>, <Accent-Edit-Difference>)","The flexible matchers include all fast matchers and the <accent<, <accent-substring> and <accent-edit-difference> matchers. These matchers are not included into the development platform by default unless the parserParameter.xml would be changed to include them by replacing the following line:","<Policy:TokenMatchers value=\u201cfast\u201d\/>","With:","<Policy:TokenMatchers value=\u201cflexible\u201d\/>","Note: It is not recommended to use the flexible matchers as they have a very poor performance.","5.6.3.4 Unknown Condition (<Unknown if Missing> Operand)\u2014Deprecated:","Checks if the operand has claims. If this is true it will make the claim(s). If this is false, it will change the state of the claim to unknown (i.e. the operand is unknown). If a claim with unknown is actuated the system can prompt the user for clarification. How this prompting works and the attributes of the policies involved are discussed in section 4 (Actions).",{"@attributes":{"id":"p-0328","num":"0406"},"tables":{"@attributes":{"id":"TABLE-US-00084","num":"00084"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1:"]},{"entry":[{},"Condition: \u2018starring\u2019 <unknown if missing> MOVIESTAR"]},{"entry":[{},"User-Input: starring siamak"]},{"entry":[{},"The condition will apply. P1 will claim \u2018starring\u2019, and"]},{"entry":[{},"change the state of the claim to unknown."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0329","num":"0407"},"tables":{"@attributes":{"id":"TABLE-US-00085","num":"00085"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1:"]},{"entry":[{},"Condition: \u2018starring\u2019 <unknown if missing> MOVIESTAR"]},{"entry":[{},"P2:"]},{"entry":[{},"Condition: \u2018starring\u2019 <unknown if missing> <exists>"]},{"entry":[{},"MOVIESTAR"]},{"entry":[{},"User-Input: starring bruce willis"]},{"entry":[{},"P1 and P2 will both apply without changing the state of"]},{"entry":[{},"the claim."]},{"entry":[{},"P1 will claim the whole input but P2 will only claim"]},{"entry":[{},"\u2018starring\u2019."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The <unknown if missing> operator is deprecated and it is recommended to use other approaches for dialoging (refer to section 6 for more information).","5.6.3.5 Recursive Condition (Operand+):","The recursive condition makes new claims by merging subsets of the claims made by the operand. Specifically, each claim made by the recursive condition is the result of merging claims that form a maximal disjoint subset of the set of claims made by the operand. Two claims are said to be disjoint if their focuses do not overlap (that is, the intersection of their focuses is null). A set of claims is disjoint if every claim in the set is disjoint to every other claim in the set. A set is maximal if it is not a subset of any other set.",{"@attributes":{"id":"p-0332","num":"0410"},"tables":{"@attributes":{"id":"TABLE-US-00086","num":"00086"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MN.txt:"]},{"entry":[{},"sixth sense"]},{"entry":[{},"being john malkovich"]},{"entry":[{},"--------------------------------------------------"]},{"entry":[{},"Policy without recursive condition:"]},{"entry":[{},"P1:"]},{"entry":[{},"Condition: (\/F \u2032MN.txt\u2019)"]},{"entry":[{},"User-Input: \u2032being john malkovich and \u2018sixth sense\u2032"]},{"entry":[{},"The condition will apply and will make two claims."]},{"entry":[{},"The claims (in order) will mark the following:"]},{"entry":[{},"\u20031. \u2032being john malkovich\u2019"]},{"entry":[{},"\u20032. \u2032sixth sense\u2032"]},{"entry":[{},"Policy with recursive condition:"]},{"entry":[{},"P1:"]},{"entry":[{},"Condition: (\/F \u2032MN.txt\u2032)+"]},{"entry":[{},"User-Input: \u2032being john malkovich and \u2018sixth sense\u2032"]},{"entry":[{},"The operand makes the two claims above. The disjoint"]},{"entry":[{},"subsets of the operand claims are {1} (the set"]},{"entry":[{},"containing Claim 1), {2} (the set containing Claim 2),"]},{"entry":[{},"and {1, 2} (the set containing Claims 1 and 2). The"]},{"entry":[{},"sets {1} and {2} are not maximal because they are"]},{"entry":[{},"subsets of {1, 2}. Therefore, the recursive condition"]},{"entry":[{},"will make a claim by merging Claims 1 and 2. The claim"]},{"entry":[{},"will mark the following:"]},{"entry":[{},"\u20031. \u2032being john malkovich\u2032 , \u2032sixth sense\u2032"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0333","num":"0411"},"tables":{"@attributes":{"id":"TABLE-US-00087","num":"00087"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MN.txt:"]},{"entry":[{},"fifth sense"]},{"entry":[{},"sixth sense"]},{"entry":[{},"being john malkovich"]},{"entry":[{},"--------------------------------------------------"]},{"entry":[{},"P1: (\/F \u2032MN.txt\u2032)+"]},{"entry":[{},"User-Input = \u2032being john malkovich and sixth sense\u2032"]},{"entry":[{},"The condition will apply and will make two claims. The"]},{"entry":[{},"claims (in order) will mark the following:"]},{"entry":[{},"\u20031. \u2032being john malkovich\u2032 , \u2032sixth sense\u2032"]},{"entry":[{},"\u20032. \u2032being john malkovich\u2032 , \u2032sense\u2032"]},{"entry":[{},"Note that a claim is not made by combining the"]},{"entry":[{},"operands\u2019s claims on \u2018sixth sense\u2019 and \u2018sense\u2019 because"]},{"entry":[{},"the two claims are not disjoint. Another way to look at"]},{"entry":[{},"this is that merging these two claims would make an"]},{"entry":[{},"ambiguity. The recursive condition is not allowed to"]},{"entry":[{},"make new claims that have ambiguities."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"A policy condition should not reference a recursive condition.",{"@attributes":{"id":"p-0335","num":"0413"},"tables":{"@attributes":{"id":"TABLE-US-00088","num":"00088"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AB: \u2018a b\u2019"]},{"entry":[{},"\u2002C: \u2018c\u2019"]},{"entry":[{},"CD: \u2018c d\u2019"]},{"entry":[{},"P1: (AB | C)+"]},{"entry":[{},"RECURSIVE: (P1 | CD)+"]},{"entry":[{},"\u20030 2 4 6"]},{"entry":[{},"input: a b c d"]},{"entry":[{},"claims made by P1 recursive operand:"]},{"entry":[{},"\u20021. AB: a b [0.2]"]},{"entry":[{},"\u20022. C: c \u2002[4]"]},{"entry":[{},"\u20023. CD: c d [4.6]]"]},{"entry":[{},"maximal disjoint subsets for AB and C:"]},{"entry":[{},"\u2002{1,2}"]},{"entry":[{},"claims made by P1:"]},{"entry":[{},"\u20021. (AB, C): a b c [0.2.4] - best claim made by P1"]},{"entry":[{},"\u2002Note that P1 does not propagate claims made by AB and C"]},{"entry":[{},"\u2002individually because the claims are each individually subsets"]},{"entry":[{},"\u2002of the maximal disjoint subset (1,2)."]},{"entry":[{},"claims made by RECURSIVE:"]},{"entry":[{},"\u20021. (AB, C): a b c [0.2.4]"]},{"entry":[{},"\u20022. \u2003CD: c d \u2002[2.4] - best claim made by RECURSIVE"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0336","num":"0414"},"tables":{"@attributes":{"id":"TABLE-US-00089","num":"00089"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018a\u2019 \u2018b\u2019+"]},{"entry":[{},"Here the recursive condition is actually being referenced by the"]},{"entry":[{},"adjacent condition."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Be careful of the common mistake illustrated in the following example, in which A agent is downchain of Top agent:",{"@attributes":{"id":"p-0338","num":"0416"},"tables":{"@attributes":{"id":"TABLE-US-00090","num":"00090"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"A agent\u2019s policies:"},{"entry":"P1: \u2018a\u2019"},{"entry":"TOP agent\u2019s policies:"},{"entry":"P1: A+"},{"entry":"User-input = \u2018a a a\u2019"},{"entry":"The condition in TOP agent will apply and will only claim the first \u2018a\u2019"},{"entry":"in the input (default criterion)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"It might be expected that the TOP agent in the above example should claim the whole input ([0 . . . 0][2 . . . 2][4 . . . 4]). The reason it does not is that Agent A passes only its best claim up to the TOP agent. In other words, the recursive condition (like all other conditions) does not affect how a down chain agent makes claims on the input. If multiple claims on character \u2018a\u2019 are required, then Agent A should have a recursive condition of its own:",{"@attributes":{"id":"p-0340","num":"0418"},"tables":{"@attributes":{"id":"TABLE-US-00091","num":"00091"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A agent\u2019s policies:"]},{"entry":[{},"P1: \u2018a\u2019"]},{"entry":[{},"P2: P1+"]},{"entry":[{},"TOP agent\u2019s policies:"]},{"entry":[{},"P1: A+"]},{"entry":[{},"User-input = \u2018a a a\u2019"]},{"entry":[{},"The condition in TOP agent will apply and will claim all \u2018a\u2019s in the"]},{"entry":[{},"input."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the latter example it is not necessary to have the recursive condition in the TOP agent. However, a good practice is to use a \u201ccatch all\u201d policy, which applies the recursive condition to all of an agent's policies and down chain agents.","When two claims are merged using the recursive condition (and similarly the combo condition) then the resulting claim will have a loose connection. Claims with loose connections will fail to merge to other claims using the grammatical operators (such as &, < and adjacent).",{"@attributes":{"id":"p-0343","num":"0421"},"tables":{"@attributes":{"id":"TABLE-US-00092","num":"00092"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2032a\u2032+"]},{"entry":[{},"P2: P1 & \u2018c\u2019"]},{"entry":[{},"Input: a a c"]},{"entry":[{},"P2 will not apply."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0344","num":"0422"},"tables":{"@attributes":{"id":"TABLE-US-00093","num":"00093"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"P1: \u2018a\u2019"},{"entry":"P2: P1+"},{"entry":"User-input = \u2018a a a ... a\u2019"},{"entry":"The recursive condition can handle about 180 \u2018a\u2019s in 20 seconds. \u2002If the"},{"entry":"number of \u2018a\u2019s goes above this, the condition will time out and return"},{"entry":"the results generated so far. \u2002The message \u2018had enough in recursive"},{"entry":"condition\u2019 will be logged in the err.txt file, and the resulting claim"},{"entry":"will be tagged as timed out."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Recommended usage of the recursive operator is only in the catch policy (described later in the reference).","5.6.3.6 Repeat Condition (^)","The repeat condition is used to repeat the application of the AND (&), ORDERED (<) or adjacent operators. The following table illustrates the behavior of each repeat operator:",{"@attributes":{"id":"p-0347","num":"0425"},"tables":{"@attributes":{"id":"TABLE-US-00094","num":"00094"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Repeat opearator","What it means"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A&{circumflex over (\u2009)}B","A&B&B&B&B..."]},{"entry":[{},"A<{circumflex over (\u2009)}B","A<B<B<B<B<B..."]},{"entry":[{},"A{circumflex over (\u2009)}B","A B B B B B ..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0348","num":"0426"},"tables":{"@attributes":{"id":"TABLE-US-00095","num":"00095"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018book\u2019 | \u2018toy\u2019 | \u2018shirt\u2019"]},{"entry":[{},"P2: P1 \u2018and\u2019 P1"]},{"entry":[{},"User-Input: \u2018book and toy and shirt\u2019"]},{"entry":[{},"Condition P2 will apply and will make two claims:"]},{"entry":[{},"\u20031. \u2018book and toy\u2019"]},{"entry":[{},"\u20032. \u2018toy and shirt\u2019."]},{"entry":[{},"Now consider replacing P2\u2019s condition:"]},{"entry":[{},"P2: P1 {circumflex over (\u2009)} (\u2018and\u2019 P1)"]},{"entry":[{},"Condition P2 will apply and will make three claims:"]},{"entry":[{},"\u20031. \u2018book and toy and shirt\u2019"]},{"entry":[{},"\u20032. \u2018book and toy\u2019"]},{"entry":[{},"\u20033. \u2018toy and shirt\u2019"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0349","num":"0427"},"tables":{"@attributes":{"id":"TABLE-US-00096","num":"00096"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018a\u2019 &{circumflex over (\u2009)} \u2018b\u2019"]},{"entry":[{},"User-Input: \u2018b b a b b x b\u2019"]},{"entry":[{},"Condition P1 will apply and will make the claim \u2018b b a b b b\u2019."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0350","num":"0428"},"tables":{"@attributes":{"id":"TABLE-US-00097","num":"00097"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018a\u2019 <{circumflex over (\u2009)} \u2018b\u2019"]},{"entry":[{},"User-Input: \u2018b b a b b x b\u2019"]},{"entry":[{},"Condition P1 will apply and will make the claim \u2018a b b b\u2019."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0351","num":"0429"},"tables":{"@attributes":{"id":"TABLE-US-00098","num":"00098"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018a\u2019 {circumflex over (\u2009)} \u2018b\u2019"]},{"entry":[{},"User-Input: \u2018b b a b b x b\u2019"]},{"entry":[{},"Condition P1 will apply and will make the claim \u2018a b b\u2019."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Note that repeat condition cannot be applied to OR and COMBO conditions conceptually.","5.6.4 Tag Condition (<tag: > Operand):","Tags claim(s) made by an operand. The tags may be accessed later by the check tag condition. Tag is used to classify claims. Classifying claims allows a policy to know if the claim belongs to it or not.",{"@attributes":{"id":"p-0354","num":"0432"},"tables":{"@attributes":{"id":"TABLE-US-00099","num":"00099"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MN.txt:"]},{"entry":[{},"being john malkovich"]},{"entry":[{},"--------------------------------------------------"]},{"entry":[{},"P1:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Condition:","<tag: \u2018movie-name\u2019> (\/F \u2018MN.txt\u2019)+"]},{"entry":[{},"User-Input:","\u2009\u2018john malkovich\u2019"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"The condition will \u2002apply making one claim."]},{"entry":[{},"The claims (in order) would mark the following:"]},{"entry":[{},"\u2018being john malkovich\u2019 \u2002(tag = \u2018movie-name\u2019)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Using tags and check tags means that an agent has to be aware of policies of another agent (which could be a policy of an agent which is not an immediate down chain). This is against the agent oriented programming style where an agent should not care about the policies of another agent and should not be aware of any agent other than its immediate down chains. Therefore tags and check tags should be avoided if possible. There is usually a better way to write the policies or configure the agent network to avoid the usage of tags.","5.6.4.1 Check Tag Condition (<Check Tag: > Operand):","Filters out all claims made by an operand that does not have a specific tag.",{"@attributes":{"id":"p-0357","num":"0435"},"tables":{"@attributes":{"id":"TABLE-US-00100","num":"00100"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MN.txt:"]},{"entry":[{},"being john malkovich"]},{"entry":[{},"MS.txt:"]},{"entry":[{},"john malkovich"]},{"entry":[{},"MOVIE agent policies:"]},{"entry":[{},"P1:"]},{"entry":[{},"Condition: <tag: \u2032movie-name\u2032> (\/F \u2032MN.txt\u2032)+"]},{"entry":[{},"P2:"]},{"entry":[{},"Condition: <tag: \u2032movie-star\u2032> (\/F \u2032MS.txt\u2032)+"]},{"entry":[{},"CINEMA agent policies:"]},{"entry":[{},"P3:"]},{"entry":[{},"Condition: <check tag: \u2032movie-star\u2032> MOVIE"]},{"entry":[{},"P4:"]},{"entry":[{},"Condition: <check tag: \u2032movie-name\u2032> MOVIE"]},{"entry":[{},"User-Input: \u2018john malkovich\u2032"]},{"entry":[{},"The condition will apply, and CINEMA will make two claims."]},{"entry":[{},"The claims would mark the following:"]},{"entry":[{},"\u2032john malkovich\u2032 belongs to P4"]},{"entry":[{},"\u2032john malkovich\u2032 belongs to P3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Now that the claim is tagged the CINEMA agent knows which policy in MOVIE agent made the claims.","Using tags and check tags means that an agent has to be aware of policies of another agent (which could be a policy of an agent which is not an immediate down chain). This is against the agent oriented programming style where an agent should not care about the policies of another agent and should not be aware of any agent other than its immediate down chains. Therefore tags and check tags should be avoided if possible. There is usually a better way to write the policies or configure the agent network to avoid the usage of tags.","5.6.5 Binary Conditions","Binary condition merges claims made by two operands at the left and the right of a binary operator.","5.6.5.1 OR Condition (Operand1|Operand2):","Will apply only if at least one of the left or right operands has claims.",{"@attributes":{"id":"p-0362","num":"0440"},"tables":{"@attributes":{"id":"TABLE-US-00101","num":"00101"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"P1:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Condition:","\u2018willis\u2019 | \u2018malkovich\u2019"]},{"entry":[{},"User-Input:","\u2018willis\u2019"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"The condition will apply, and will claim willis as the"]},{"entry":[{},"input."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"User-Input:","\u2018willis or malkovich\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"The condition will apply, and will make two claims."]},{"entry":[{},"The claims (in order) would mark the following:"]},{"entry":[{},"\u2018malkovich\u2019"]},{"entry":[{},"\u2018willis\u2019"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0363","num":"0441"},"tables":{"@attributes":{"id":"TABLE-US-00102","num":"00102"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1:",{}]},{"entry":[{},"Condition:","\u2032john\u2032 & \u2032malkovich\u2032"]},{"entry":[{},"User-Input:","\u2032malkovich whose first name is john\u2032"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"The condition will apply, and will mark the following:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2032malkovich\u2032","\u2018john\u2019."]},{"entry":[{},"User-Input:","\u2032john\u2032"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"The condition will not apply."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The AND condition will apply only to those claims that have no loose connections.",{"@attributes":{"id":"p-0365","num":"0443"},"tables":{"@attributes":{"id":"TABLE-US-00103","num":"00103"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1:",{}]},{"entry":[{},"Condition:","\u2032send\u2032 , \u2032receive\u2032"]},{"entry":[{},"P2:"]},{"entry":[{},"Condition:","P1 & \u2018email\u2019"]},{"entry":[{},"User-Input:","send and receive email\u2032"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Condition P2 will apply, and will claim the following:"]},{"entry":[{},"\u2032receive email\u2032"]},{"entry":[{},"\u2032send email\u2032."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Will apply only if both left and right operands have claims and the part of the input claimed by the left operand should come before the part of input claimed by right operand.",{"@attributes":{"id":"p-0367","num":"0445"},"tables":{"@attributes":{"id":"TABLE-US-00104","num":"00104"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1:",{}]},{"entry":[{},"Condition:","\u2018john\u2019 < \u2018malkovich\u2019"]},{"entry":[{},"User-Input:","\u2018john whose family name malkovich\u2019"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"The condition will apply, and will claim \u2018john\u2019 and"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2018malkovich\u2019.",{}]},{"entry":[{},"User-Input:","\u2018malkovich whose first name is john\u2019"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"The condition will not apply."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The ORDERED condition will apply only to those claims that have no loose connections.","5.6.5.4 ADJACENT Condition (Operand1 Operand2):","Will apply only if both left and right operands have claims, and the left operand claim appears just before (adjacent to) the right operands claim.","The claims made by left and right operands are merged, the resulting claim will be accepted only if the adjacency score of the merged claim is 0.",{"@attributes":{"id":"p-0370","num":"0448"},"tables":{"@attributes":{"id":"TABLE-US-00105","num":"00105"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1:",{}]},{"entry":[{},"Condition:","\u2018john\u2019 \u2018malkovich\u2019"]},{"entry":[{},"User-Input:","\u2018john malkovich\u2019"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"The condition will apply, and will claim the whole"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"input.",{}]},{"entry":[{},"User-Input:","\u2018john smith malkovich\u2019"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"The condition will not apply. As the adjacency score of"]},{"entry":[{},"the merged claim is 1."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The ADJACENT condition will apply only to those claims that have no loose connections.","COMBO Condition (Operand1, Operand2):","Will try to join the left and right operands to make all combinations of ambiguous or non-ambiguous claims.",{"@attributes":{"id":"p-0373","num":"0451"},"tables":{"@attributes":{"id":"TABLE-US-00106","num":"00106"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1:"]},{"entry":[{},"Condition:\u2003<exact> \u2018johhn malkovich\u2019 | <exact> \u2018bruce"]},{"entry":[{},"willis\u2019"]},{"entry":[{},"P2:"]},{"entry":[{},"Condition: <exact> \u2018being johhn malkovich\u2019 | <exact> \u2018sixth"]},{"entry":[{},"sense\u2019"]},{"entry":[{},"P3:"]},{"entry":[{},"Condition:\u2003P1, P2"]},{"entry":[{},"User-Input: \u2018bruce willis and john malkovich\u2019"]},{"entry":[{},"P3 will make three claims."]},{"entry":[{},"The claims (in order) are:"]},{"entry":[{},"\u2018john malkovich\u2019\u2003(ambiguous, belongs to P1 or P2) , \u2018bruce"]},{"entry":[{},"willis\u2019\u2003(belongs to P1)"]},{"entry":[{},"\u2018john malkovich\u2019\u2003(non-ambiguous, belongs to P1), \u2018bruce"]},{"entry":[{},"willis\u2019\u2003(belongs to P1)"]},{"entry":[{},"\u2018john malkovich\u2019\u2003(non-ambiguous, belongs to P2), \u2018bruce"]},{"entry":[{},"willis\u2019\u2003(belongs to P1)"]},{"entry":[{},"\u2018john malkovich\u2019\u2003(ambiguous, belongs to P1 or P2)"]},{"entry":[{},"\u2018john malkovich\u2019\u2003(non-ambiguous, belongs to P1)"]},{"entry":[{},"\u2018john malkovich\u2019\u2003(non-ambiguous, belongs to P2)"]},{"entry":[{},"\u2018bruce willis\u2019\u2003(belongs to P1)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]},{"entry":[{},"Note:"]},{"entry":[{},"This is the only condition that can make ambiguous claims."]}]}}}}},"Claims may not be merged together using a combo condition if the merge would cause ambiguity and one claim has a higher priority or a better connection.",{"@attributes":{"id":"p-0375","num":"0453"},"tables":{"@attributes":{"id":"TABLE-US-00107","num":"00107"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"P1: \u2018a\u2019"},{"entry":"P2: \u2018a\u2019 {priority: 1}"},{"entry":"P3: P1,P2"},{"entry":"Input: a"},{"entry":"The result will not be ambiguous as the priority of claim made by policy"},{"entry":"P2 is higher thab the priority of policy P1."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"A better connection is defined to be based on the weight of the worst operator or operand used in a claim. The operators in order of weight are: adjacent, <, &. All operands in a claim have the same weight as the adjacent operator except for operands coming from the inexact matches of a database agent or a variable condition which have a weight worse than & and better than the combo (that weight is shown in the claim view as an INEXACT or \u02dc).",{"@attributes":{"id":"p-0377","num":"0455"},"tables":{"@attributes":{"id":"TABLE-US-00108","num":"00108"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2018a\u2019 \u2018b\u2019 \u2018c\u2019"]},{"entry":[{},"P2: \u2018a\u2019 \u2018b\u2019&\u2018c\u2019"]},{"entry":[{},"P3: P1,P2"]},{"entry":[{},"Input: a b c"]},{"entry":[{},"P3 will not make an ambiguous claim as P1's claim has a better"]},{"entry":[{},"connection (adjacent vs. &)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Note that the number of operators will not make any difference here:",{"@attributes":{"id":"p-0379","num":"0457"},"tables":{"@attributes":{"id":"TABLE-US-00109","num":"00109"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"P1: \u2018a\u2019&\u2018b\u2019&\u2018c\u2019"},{"entry":"P2: \u2018a\u2019&\u2018b\u2019 \u2018c\u2019"},{"entry":"P3: P1,P2"},{"entry":"Input: a b c"},{"entry":"P3 will be ambiguous as P1's claim has the same worst operator as the"},{"entry":"P2's claim (both are &)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"When two claims are merged using the combo condition (and similarly the recursive, +, condition) then the resulting claim will have a loose connection. Claims with loose connections will fail to merge to other claims using the grammatical operators (such as &, <and adjacent).",{"@attributes":{"id":"p-0381","num":"0459"},"tables":{"@attributes":{"id":"TABLE-US-00110","num":"00110"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"P1: \u2032a\u2032,\u2032b\u2032"]},{"entry":[{},"P2: P1 & \u2018c\u2019"]},{"entry":[{},"Input: a b c"]},{"entry":[{},"P2 will not apply."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The adjacency score of a claim made by a combo condition is not calculated directly from the focus of the claim (see adjacency score in Claim section). Instead it is calculated to be the sum of the adjacency scores of the sub-claims. For example, if P1 claims \u2018cat\u2019 and \u2018mouse\u2019 on the input \u2018cat dog mouse\u2019 and P2 claims \u2018dog\u2019, the adjacency score of (P1, P2) will be 1, whereas the adjacency score of (P1 & P2) will be 0. If P1 claims \u2018cat\u2019 on the input \u2018cat and dog\u2019 and P2 claims \u2018dog\u2019, the adjacency score of (P1,P2) will be 0, whereas the adjacency score of (P1 & P2) will be 1.","Recommended usage of combo operator is only in the catch policy (described later in the reference).","6 Actions","Actions transfers a claim to a standard format (e.g. an object containing XML)","6.1 Action Types:","6.1.1 Action:","The action that can be carried out unambiguously. The fields are: Delegate To; Execute; Explain; and Ask.\n\n",{"@attributes":{"id":"p-0386","num":"0468"},"tables":{"@attributes":{"id":"TABLE-US-00111","num":"00111"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"TV: [\u2018TV\u2019] \u2018on\u2019"},{"entry":"{title: \u2018TV\u2019}"},{"entry":"{action: {execute: \u2018TV ON!\u2019}{explain: \u2018You asked to turn the TV on.\u2019}"},{"entry":"VCR: [\u2018VCR\u2019] \u2018on\u2019"},{"entry":"{title: \u2018VCR\u2019}"},{"entry":"{action: {execute: \u2018VCR ON!\u2019}{explain: \u2018You asked to turn the"},{"entry":"VCR on.\u2019}"},{"entry":"HOME_ENTERTAINMENT: TV,VCR"},{"entry":"{title: \u2018HOME_ENTERTAINMENT\u2019}"},{"entry":"{action: delegate to TV, VCR}"},{"entry":"{ambiguity action: delegate to TV, VCR}"},{"entry":"User Input: TV on and VCR off"},{"entry":"Actuation:"},{"entry":"You asked to turn the TV on. You asked to turn the VCR on."},{"entry":"TV ON! VCR ON!"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The action that will be carried out when there is an ambiguity in the claim. This action item is only used to delegate actuation to the overlapping sub claims that have caused the ambiguity. The sub claims, which caused the ambiguity, would be actuated normally and their actuations would be put together to make the ambiguity choices.\n\n","For example lets say the TV and VCR policies would have an overlapping claim that has been put together by HOME_ENTERTAINMENT policy:",{"@attributes":{"id":"p-0389","num":"0475"},"tables":{"@attributes":{"id":"TABLE-US-00112","num":"00112"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"TV: [\u2018TV\u2019] \u2018on\u2019"},{"entry":"{title: \u2018TV\u2019}"},{"entry":"{action: {execute: \u2018<TV value=on \/>\u2019}{explain: \u2018You asked to turn the"},{"entry":"TV on.\u2019}"},{"entry":"VCR: [\u2018VCR\u2019] \u2018on\u2019"},{"entry":"{title: \u2018VCR\u2019}"},{"entry":"{action: {execute: <VCR value=on \/>}{explain: \u2018You asked to turn the"},{"entry":"VCR on.\u2019}"},{"entry":"HOME_ENTERTAINMENT: TV,VCR"},{"entry":"{title: \u2018HOME_ENTERTAINMENT\u2019}"},{"entry":"{action: delegate to TV, VCR}"},{"entry":"{ambiguity action: delegate to TV, VCR}"},{"entry":"Which one do you mean?"},{"entry":"You asked to turn the TV on. You asked to turn the VCR on."},{"entry":"\u20031. TV"},{"entry":"\u20032. VCR"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"When the system receives the input: \u2018on\u2019. The HOME_ENTERTAINMENT claim will then be ambiguous (as the claims made by TV and VCR would overlap). So the actuation made by the HOME_ENTERTAINMENT would be based on actuations made by TV and VCR policies. The actuation would be a multi choice menu. The menu prompt would be the made by putting together the explain actions of the TV and VCR actuations, and the menu items would be the titles of TV and VCR policies.","The explain field is now being deprecated. Instead the execute field will replace the explain field (when it is not provided):",{"@attributes":{"id":"p-0392","num":"0478"},"tables":{"@attributes":{"id":"TABLE-US-00113","num":"00113"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TV: [\u2018TV\u2019] \u2018on\u2019"]},{"entry":[{},"{title: \u2018TV\u2019}"]},{"entry":[{},"{action: {execute: \u2018TV ON!\u2019}"]},{"entry":[{},"VCR: [\u2018VCR\u2019] \u2018on\u2019"]},{"entry":[{},"{title: \u2018VCR\u2019}"]},{"entry":[{},"{action: {execute: \u2018VCR ON!\u2019}"]},{"entry":[{},"HOME_ENTERTAINMENT: TV,VCR"]},{"entry":[{},"{title: \u2018HOME_ENTERTAINMENT\u2019}"]},{"entry":[{},"{action: delegate to TV, VCR}"]},{"entry":[{},"{ambiguity action: delegate to TV, VCR}"]},{"entry":[{},"User-Input: On"]},{"entry":[{},"System:"]},{"entry":[{},"Which one do you mean?"]},{"entry":[{},"<TV value = on \/><VCR value = on \/>"]},{"entry":[{},"\u20031. TV"]},{"entry":[{},"\u20032. VCR"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The idea is that a scripting language would then take the interaction and make the proper prompt.","There are situations where there could be more than one questions asked for an ambiguity. For example the input bass in the network of  could generate ambiguity between FISH and DRUM or INSTRUMENTS and HOBBIES. The input \u2018bass\u2019 causes ambiguity in the HOBBIES agent (as bass could be a fish or a drum) and in the top agent (as bass can be a hobby or an instrument). Currently the system will find the source of the ambiguity and will only generate a question asking about that (in this case the source of ambiguity is if bass is a fish or a drum).",{"@attributes":{"id":"p-0395","num":"0481"},"tables":{"@attributes":{"id":"TABLE-US-00114","num":"00114"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(TOP:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003(HOBBIES, INSTRUMENTS)+"]},{"entry":[{},"\u2003\u2003\u201d)"]},{"entry":[{},"(HOBBIES:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003(FISH, DRUM)+"]},{"entry":[{},"\u2003\u2003\u201d)"]},{"entry":[{},"(INSTRUMENTS:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003(DRUM)+"]},{"entry":[{},"\u2003\u2003\u201d)"]},{"entry":[{},"(DRUM:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003(\u2018bass\u2019)+"]},{"entry":[{},"\u2003\u2003\u201d)"]},{"entry":[{},"(FISH:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003(\u2018bass\u2019)+"]},{"entry":[{},"\u2003\u2003\u201d)"]},{"entry":[{},"User: bass"]},{"entry":[{},"System:"]},{"entry":[{},"Which one do you mean?"]},{"entry":[{},"1: FISH"]},{"entry":[{},"2: DRUM"]},{"entry":[{},"3: Ignore input"]},{"entry":[{},"Selection (choose one):"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"There are network patterns that might lead to a too ambiguous situation. The following example demonstrates this situation. (See ).",{"@attributes":{"id":"p-0397","num":"0483"},"tables":{"@attributes":{"id":"TABLE-US-00115","num":"00115"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(HOBBIES:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003(INSTRUMENTS, DRUM)+"]},{"entry":[{},"\u2003\u2003\u201d)"]},{"entry":[{},"(INSTRUMENTS:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003(DRUM)+"]},{"entry":[{},"\u2003\u2003\u201d)"]},{"entry":[{},"(DRUM:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003(\u2018bass\u2019)+"]},{"entry":[{},"\u2003\u2003\u201d)"]},{"entry":[{},"User: bass"]},{"entry":[{},"System:"]},{"entry":[{},"Input too ambiguous. Please rephrase!"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The action that will be carried out if the claim has unknown (there are missing information in the input). The same four fields are available.\n\n","Each field in the action forms (e.g. execute, explain, ask and choice) is created using variety of building blocks. When actuated each building block generates an output. These outputs would be put together to make the final action. Building blocks could be:","6.2.1 Strings","Outputs any information entered in quotes.",{"@attributes":{"id":"p-0401","num":"0491"},"tables":{"@attributes":{"id":"TABLE-US-00116","num":"00116"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"P1:"},{"entry":"\u2018bruce willis\u2019"},{"entry":"\u2003{title: \u2018movie star\u2019}"},{"entry":"\u2003\u2003\u2003\u2003{action:"},{"entry":"\u2003\u2003\u2003\u2003{explain: \u2018You asked for a movie star\u2019} }"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003User-Input: bruce willis"},{"entry":"\u2003P1 will make a claim. If the claim would be delegated to policy P1 then"},{"entry":"the action would be: \u2018You asked for a movie star\u2019."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Outputs which part of the input was claimed by a policy.",{"@attributes":{"id":"p-0403","num":"0493"},"tables":{"@attributes":{"id":"TABLE-US-00117","num":"00117"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"P1:"},{"entry":"\u2003\u2018bruce willis\u2019"},{"entry":"\u2003{title: \u2018movie star\u2019}"},{"entry":"\u2003\u2003\u2003\u2003\u2003{action:"},{"entry":"\u2003\u2003\u2003\u2003\u2003{execute: *}"},{"entry":"User-Input: bruce willis"},{"entry":"P1 will make a claim. If the claim would be delegated to policy P1 then"},{"entry":"the action would be: \u2018bruce willis\u2019."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Shows which part of the input was marked as a variable in a claim. The variable action corresponds to the variable condition in the policy with the same name.",{"@attributes":{"id":"p-0405","num":"0495"},"tables":{"@attributes":{"id":"TABLE-US-00118","num":"00118"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"P1:"},{"entry":"\u2003\u2003\u2003\u2018starring\u2019 ?:MOVIESTAR \/DELIMITER"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{title: \u2018movie star\u2019}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{action: delegate to P1}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{action:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{execute: \u2018who is the movie star \u2019,"},{"entry":"\u2003\u2003?:MOVIESTAR , \u2018 you are looking for?\u2019} }"},{"entry":"User-Input: starring siamak"},{"entry":"P1 will make a claim. If the claim would be delegated to policy P1 then"},{"entry":"the action would be:"},{"entry":"Who is the movie star siamak you are looking for?"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"It is recommended to always use names with variables. However this is how multiple unnamed variables are handled:",{"@attributes":{"id":"p-0407","num":"0497"},"tables":{"@attributes":{"id":"TABLE-US-00119","num":"00119"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"P1:"},{"entry":"\u2003\u2003\u2018send email from\u2019 ? \u2018to\u2019 ?"},{"entry":"\u2003\u2003\u2003\u2003{action: delegate to P1}"},{"entry":"\u2003\u2003\u2003\u2003{action:"},{"entry":"\u2003\u2003\u2003\u2003{execute: ? } }"},{"entry":"User-Input: send email from Siamak to Kristi"},{"entry":"P1 will make a claim. If the claim would be delegated to policy P1 then"},{"entry":"the action would be: Siamak \u2003Kristi"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Note that variable trims the leading and trailing delimiters, but other delimiters are considered to be part of the variable. Multiple variables are trimmed after they are combined.",{"@attributes":{"id":"p-0409","num":"0499"},"tables":{"@attributes":{"id":"TABLE-US-00120","num":"00120"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"P1:"},{"entry":"\u2003\u2003\u2018being\u2019 ? \u2018.\u2019"},{"entry":"\u2003\u2003\u2003\u2003{action: delegate to P1}"},{"entry":"\u2003\u2003\u2003\u2003{action:"},{"entry":"\u2003\u2003\u2003\u2003{execute: \u2018var:\u2019,?,\u2019.\u2019 } }"},{"entry":"User-Input: being\u2003\u2003john\u2003\u2003\u2003malkovich."},{"entry":"P1 will make a claim. If the claim would be delegated to policy P1 then"},{"entry":"the action would be: var:john \u2003\u2003malkovich."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Used as a reference to an action part of another policy.",{"@attributes":{"id":"p-0411","num":"0501"},"tables":{"@attributes":{"id":"TABLE-US-00121","num":"00121"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003P1:"},{"entry":"\u2003\u2003\u2003\u2018bruce willis\u2019"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{title: \u2032movie star\u2032}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{action:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{execute: \u2018<movie-star=\u2019 , * , \u2018<\/>}"},{"entry":"\u2003\u2003P2:"},{"entry":"\u2003\u2003\u2003\u2018starring\u2019 P1"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{title: \u2032movie name\u2032}"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{action:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003{execute: P1} }"},{"entry":"User-Input: starring bruce willis"},{"entry":"P1 will make a claim. If the claim would be delegated to policy P2 then"},{"entry":"the action would be delegated to P1"},{"entry":"\u2003\u2003\u2003(the final result would be <movie-star=bruce willis<\/>)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Used when the action part of another agent should be used to build this element",{"@attributes":{"id":"p-0413","num":"0503"},"tables":{"@attributes":{"id":"TABLE-US-00122","num":"00122"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"(In VOLUME agent)"},{"entry":"P1:"},{"entry":"DOWN"},{"entry":"\u2003\u2003{title: \u2018movie name\u2019}"},{"entry":"\u2003\u2003{action:"},{"entry":"\u2003\u2003\u2003\u2003{execute: \u2018<volume=\u2019,DOWN,\u2019\/>\u2019} }"},{"entry":"(In DOWN agent, downchain of the Volume agent)"},{"entry":"P1:"},{"entry":"\u2018down\u2019"},{"entry":"\u2003\u2003{title: \u2018movie name\u2019}"},{"entry":"\u2003\u2003{action:"},{"entry":"\u2003\u2003\u2003\u2003{execute: \u2018down\u2019} }"},{"entry":"User-Input: down"},{"entry":"Policy P1 in VOLUME agent will make a claim. If the claim would be"},{"entry":"delegated to this policy then the action would be delegated to DOWN"},{"entry":"agent (the final result would be <volume=down<\/>)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The condition, set (agent, property, key; value), will cause the agent to sends a message to set a property in another agent. There are two types of properties that may be accessed through messaging:\n\n","Each agent must allow access to its data property by declaring it as a valid data property. The methods that should be sub-classed for this purpose are summarized in the following table:",{"@attributes":{"id":"p-0416","num":"0508"},"tables":{"@attributes":{"id":"TABLE-US-00123","num":"00123"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Access permission","Set method","Set message"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Data","public Boolean","public void","<set (agent, property; value)>"]},{"entry":["Property","IsValidDataProperty(","setData("]},{"entry":[{},"String propertyName)","String propertyName,"]},{"entry":[{},{},"Object value,"]},{"entry":[{},{},"ChainIdentifier"]},{"entry":[{},{},"chainID)"]},{"entry":["Data","public Boolean","public void","<set (agent, property, key; value)>"]},{"entry":["Store","IsValidDataStoreProperty(","setDataStoreElement("]},{"entry":["Property","String propertyName)","String propertyName,"]},{"entry":[{},{},"String propertyKey,"]},{"entry":[{},{},"Object propertyValue,"]},{"entry":[{},{},"ChainIdentifier"]},{"entry":[{},{},"chainID)"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"All AAOSA agents have a STATE property that could be set (STATE is a basic property).","The parameters of a set message, set (agent, property, key, value), are:","Agent: The agent address that its property is to be set. This parameter is optional. If omitted then an agent will \u201cget\u201d its own property.","Property: The name of the property to be set.","Key: The key to the data store property (as a string). This parameter is optional. If omitted then an agent will \u201cget\u201d a basic property.","Value: The value that the property should be set to (as a string).","action: set(CLOCK, \u2018TIME\u2019; \u201812:30\u2019)","6.2.7 Get Message (<Get (Agent, Property, Key)>)","Sends a get message to an agent, and shows the value replied by that agent. There are two types of properties that may be accessed through messaging:\n\n","Each agent must allow access to its data property by declaring it as a valid data property. The methods that should be sub-classed for this purpose are summarized in the following table:",{"@attributes":{"id":"p-0422","num":"0516"},"tables":{"@attributes":{"id":"TABLE-US-00124","num":"00124"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Access permission","Set method","Set message"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Data","public Boolean","public Object","<get (agent, property)>"]},{"entry":["Property","IsValidDataProperty(","getData("]},{"entry":[{},"String propertyName)","String propertyName,"]},{"entry":[{},{},"ChainIdentifier"]},{"entry":[{},{},"chainID)"]},{"entry":["Data","public Boolean","public Object","<get (agent, property, key)>"]},{"entry":["Store","IsValidDataStoreProperty","getDataStoreElement("]},{"entry":["Property","(String propertyName)","String propertyName,"]},{"entry":[{},{},"String propertyKey,"]},{"entry":[{},{},"ChainIdentifier"]},{"entry":[{},{},"chainID)"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"All AAOSA agents have a STATE property (STATE is a basic property).","The parameters of a get message, set (agent, property, key, value), are:","Agent: The agent address that it's property is to be set. This parameter is optional. If omitted then an agent will \u201cget\u201d its own property.","Property: The name of the property to be set.","Key: The key to the data store property (as a string). This parameter is optional. If omitted then an agent will \u201cget\u201d a basic property.","action: get(CLOCK, \u2018TIME\u2019)","6.3 Default Delegation","Whenever the action part of a policy is left empty a default delegation would be used. By default actions are delegated to policies responsible for making the sub claims. That is the policy:",{"@attributes":{"id":"p-0427","num":"0521"},"tables":{"@attributes":{"id":"TABLE-US-00125","num":"00125"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003POLICY2: AGENT1,AGENT2, POLICY1"},{"entry":"Will be interpreted as:"},{"entry":"\u2003\u2003POLICY2: AGENT1,AGENT2, POLICY1"},{"entry":"\u2003\u2003\u2003\u2003{action: delegate to AGENT1, AGENT2, POLICY1}"},{"entry":"\u2003\u2003\u2003\u2003{ambiguity action: delegate to AGENT1, AGENT2, POLICY1}"},{"entry":"\u2003\u2003\u2003\u2003{unknown action: delegate to AGENT1, AGENT2, POLICY1}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The default delegation could be overridden by filling the action part. For example the following policy:",{"@attributes":{"id":"p-0429","num":"0523"},"tables":{"@attributes":{"id":"TABLE-US-00126","num":"00126"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003POLICY2: AGENT1,AGENT2, POLICY1"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{action: {execute: *}}"},{"entry":"Will be interpreted as:"},{"entry":"\u2003\u2003POLICY2: AGENT1,AGENT2, POLICY1"},{"entry":"\u2003\u2003\u2003\u2003{action: {execute: *}}"},{"entry":"\u2003\u2003\u2003\u2003{ambiguity action: delegate to AGENT1, AGENT2, POLICY1}"},{"entry":"\u2003\u2003\u2003\u2003{unknown action: delegate to AGENT1, AGENT2, POLICY1}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Each policy can make an actuation by applying the action part to the claim it made. Actuation may be built by putting together other actuations (just like claims). Each actuation will have four arms: execute, explain, ask, and choice. Each arm will contain a list of strings or pointers to other actuations.","There is a difference when an actuation is converted to a string if the building blocks of the actuation are listed in one field or different fields. When building blocks are listed together there would be no space between each block that is converted to a string.",{"@attributes":{"id":"p-0432","num":"0526"},"tables":{"@attributes":{"id":"TABLE-US-00127","num":"00127"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"P1:"},{"entry":"\u2003\u2003\u2018aaa bbb ccc\u2019"},{"entry":"\u2003\u2003{action:"},{"entry":"\u2003\u2003\u2003\u2003{execute: \u2018aaa\u2019 , \u2018bbb\u2019 , \u2018ccc\u2019}"},{"entry":"User-Input: aaa bbb ccc"},{"entry":"P1 will make a claim. If the claim would be delegated to policy P1 then"},{"entry":"the action would be: aaabbbccc."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"When building blocks are listed in different fields there would be a space inserted between each block that is converted to a string.",{"@attributes":{"id":"p-0434","num":"0528"},"tables":{"@attributes":{"id":"TABLE-US-00128","num":"00128"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003P1:"},{"entry":"\u2003\u2003\u2003\u2003\u2018aaa bbb ccc\u2019"},{"entry":"\u2003\u2003\u2003\u2003{action:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003{execute: \u2018aaa\u2019 , \u2018bbb\u2019 , \u2018ccc\u2019}"},{"entry":"\u2003\u2003User-Input: aaa bbb ccc"},{"entry":"\u2003\u2003P1 will make a claim. If the claim would be delegated to policy P1"},{"entry":"\u2003\u2003then the action would be: aaa bbb ccc."},{"entry":"Implementation note: The space is actually the default join style. The idea"},{"entry":"is to have different join styles that could be set in the policy. For example"},{"entry":"AND joins, OR joins, XOR joins, . . ."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The agents are normally composed of 3 types of policies:","7.1 Tokens:","The condition of these policies has no reference to any other agent. The policies are made using binary and unary operators on token conditions, file terminals or database terminals.","7.2 Grammars","The condition of these policies makes grammatical relationship between the policies in this agent and its down chain agents. These grammatical relationships are made by using &, |, <, optional and adjacent operators. All that can be part of one command should be combined using the &, < or adjacent operators.","7.3 Catch Policy","The catch policy of an agent is used to make the claims that no policies were written to deal with. That includes different combination of commands and ambiguities that may occur. The catchall policy includes a combo of references to all other policies and down chain agents of that agent followed by a + operator. A | (or) condition should be used instead of a combo between any two policies or down chain agents which should never make ambiguities. For example, assume agents A, B and C are all downchain of Top agent.",{"@attributes":{"id":"p-0439","num":"0533"},"tables":{"@attributes":{"id":"TABLE-US-00129","num":"00129"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TOP agent policies:"]},{"entry":[{},"P1: ..."]},{"entry":[{},"P2: ..."]},{"entry":[{},"..."]},{"entry":[{},"CATCH_ALL: (P1, P2, ..., A, B, C)+"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The following is an example of how a user interface could be built for a store where books and toy in different colors could be bought.",{"@attributes":{"id":"p-0441","num":"0535"},"tables":{"@attributes":{"id":"TABLE-US-00130","num":"00130"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Step 1. Create the COLOR agent (See Fig. 15):"]},{"entry":[{},"(TOKENS:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003(\u2018red\u2019|\u2018blue\u2019|\u2018green\u2019)"]},{"entry":[{},"\u2003\u2003\u2003\u2003{title:\u2018A color\u2019}"]},{"entry":[{},"\u2003\u2003\u2003\u2003{action:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{execute:\u2018<color=\u2019,*, \u2018\/>\u2019}}"]},{"entry":[{},"\u2003\u2003\u201d),"]},{"entry":[{},"(RELATION:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003TOKENS {circumflex over (\u2009)} (\u2018and\u2019 TOKENS)"]},{"entry":[{},"\u2003\u2003\u2003\u2003{title:\u2018Colors\u2019}"]},{"entry":[{},"\u2003\u2003\u201d),"]},{"entry":[{},"(CATCH:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003(TOKENS, RELATION)+"]},{"entry":[{},"\u2003\u2003\u2003\u2003{title:\u2018Color\u2019}"]},{"entry":[{},"\u2003\u2003\u201d)"]},{"entry":[{},"Step 2. Create the BOOK agent as an up chain of the COLOR"]},{"entry":[{},"agent (Fig. 16): "]},{"entry":[{},"(TOKENS:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003\u2018book\u2019"]},{"entry":[{},"\u2003\u2003\u2003\u2003{title:\u2018Book\u2019}"]},{"entry":[{},"\u2003\u2003\u2003\u2003{action:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{execute: \u2018<book>?<\/book>\u2019}"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{ask:\u2018Which book?\u2019}}"]},{"entry":[{},"\u2003\u2003\u201d),"]},{"entry":[{},"(RELATION1:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003COLOR"]},{"entry":[{},"\u2003\u2003\u2003\u2003{title:\u2018Book\u2019}"]},{"entry":[{},"\u2003\u2003\u2003\u2003{action:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{execute:\u2018<book> \u2019,COLOR, \u2018 <\/>\u2019}}"]},{"entry":[{},"\u2003\u2003\u201d),"]},{"entry":[{},"(RELATION2:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003TOKENS & COLOR"]},{"entry":[{},"\u2003\u2003\u2003\u2003{title:\u2018Book\u2019}"]},{"entry":[{},"\u2003\u2003\u2003\u2003{action:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{execute:\u2018<book> \u2019,COLOR, \u2018 <\/>\u2019}}"]},{"entry":[{},"\u2003\u2003\u201d),"]},{"entry":[{},"(RELATION3:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003COLOR TOKENS"]},{"entry":[{},"\u2003\u2003\u2003\u2003{title:\u2018Book\u2019}"]},{"entry":[{},"\u2003\u2003\u2003\u2003{action:"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003{execute:\u2018<book> \u2019,COLOR, \u2018 <\/>\u2019}}"]},{"entry":[{},"\u2003\u2003\u201d),"]},{"entry":[{},"(CATCH:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003(TOKENS, RELATION1, RELATION2, RELATION3)+"]},{"entry":[{},"\u2003\u2003\u2003\u2003{title:\u2018Book\u2019}"]},{"entry":[{},"\u2003\u2003\u201d)"]},{"entry":[{},"Step 3. Create the TOY agent the same as the BOOK agent and join"]},{"entry":[{},"BOOK and TOY agents as down chain agents of the STORE agent"]},{"entry":[{},"(Fig. 17)."]},{"entry":[{},"(CATCH:"]},{"entry":[{},"\u2003\u2003\u201c"]},{"entry":[{},"\u2003\u2003(BOOK, TOY)+"]},{"entry":[{},"\u201d)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"1) Always include comments in your policies briefly describing why they are there and what they do. In general an observer should be able to understand the logic of why you have coded your agent the way you have. If it is too complex to understand, it is very likely that it needs some cleaning up.","2) If there are more than 6 policies in an agent rethink using a single agent for all these policies. It may also be that the agent has too big a fan-out.","3) Avoid too many agents reporting to a single agent (larger than 6 fan-out). Add agents to group down-chains into sub networks. Make sure the groupings correlate with the semantics of the application domain. Just as in menu structures, a big fan out is untidy and in our case they can also result in inefficient processing of policies that include operators like ^ or *.","Categorization is possible and quite natural. After all, this is how our minds work to enhance our memory. It is much harder to memorize 16 down chains for one agent than it is 4, each of which lead to another.","We should use a domain expert in this case to identify the categorization.","The merits of limiting the fan out can be summarized as:\n\n","As for the fan out, if there are many agents down-chain to one, it is very likely that there does exist a categorization for these concepts in the domain expert's lingo that we are missing and we should probably cover. If this is the case, then recategorizing and decreasing the fan out based on the domain classifications and the resulting modularity will make those categories more readily reusable, and the interactions with the application more manageable for the end users. It will also make the policies in the top agent more readable and tidy. This added modularity may also help the efficiency of the application where operators such as \u201c&\u201d or other firm operators are used between all down-chains. This is because it reduces the number of claims the up-chain agent to the top node will be receiving when a policy containing operators such as the \u201c&\u201d of the down chains fires.","4) Avoid creating agents that do not represent the semantics of the application.","5) Start each agents list of policies with policies that pick the tokens associated with this agent. Then follow with policies that describe the relationships. At the end, include catch-all policies.","TOKENS: The condition of these policies has no reference to any other agent. The policies are made using binary and unary operators on token conditions, file terminals or database terminals.","RELATIONS: The condition of these policies describe the relationships between the policies in this agent and its down chain agents. These grammatical relationships are made by using operators such as &, |, <, optional and adjacent. All that can be part of one command should be combined using these operators.","CATCHALLS: The catchall policy of an agent is used to make the claims that no policies were written to deal with. That includes different combination of commands and ambiguities that may occur. The catchall policy includes a combo of references to all other policies and down chain agents of that agent followed by a + operator. A | (or) condition should be used instead of a combo between any two policies or down chain agents which should never make ambiguities.","6) Avoid using catch-alls extensively and try to cover them in Relations policies. For example try using the repeat operator (^) more often.","7) Try not to repeat all of the contents of another policy in the following policies. It is inefficient and untidy:",{"@attributes":{"id":"p-0456","num":"0553"},"tables":{"@attributes":{"id":"TABLE-US-00131","num":"00131"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Bad:",{}]},{"entry":[{},{},"TOKENS: \u2018web\u2019|\u2018wap\u2019"]},{"entry":[{},{},"RELATIONS: (\u2018web\u2019|\u2018wap\u2019) & INDEX"]},{"entry":[{},"Good:"]},{"entry":[{},{},"TOKENS: \u2018web\u2019|\u2018wap\u2019"]},{"entry":[{},{},"RELATIONS: TOKENS & INDEX"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"8) Any policy on its own may make a claim. Do not have policies that may claim lone words that are not relevant to the agent:","DUMMY_TOKEN: \u2018the\u2019","In this case an agent, THE, should be created which claims \u2018the\u2019 but is never delegated to or referred to without constraining conditions around it.","9) Avoid using tags. Using \u201ctags\u201d and \u201ccheck tags\u201d mean that an agent has to be aware of policies of another agent (which could be a policy of an agent that is not an immediate down chain). This is against the agent oriented design principle where an agent should not care about the policies of another agent and should not be aware of any agent other than its immediate down chains. Therefore \u201ctags\u201d and \u201ccheck tags\u201d should be avoided if possible. There is usually a better way to write the policies or configure the agent network to avoid the usage of tags.","10) Avoid using <exists>","RELATIONS: <exists> \u2018token\u2019","When using <exists>, an agent is checking against a part of the input that it is not going to claim. Therefore the agent must be aware of parts of the input that are possibly another agent's responsibility. This is against the agent oriented design principle where an agent should only care about its own domain and not worry about other domains. Therefore <exists> should always be avoided if possible. There is usually a better way to write the policies or configure the agent network to avoid the usage of <exists>.","There are cases where using <exists> is appropriate as in the example below:","In this example, we have a top level FIND agent. Below FIND there is a FILETYPE agent and a FOLDER agent. FILETYPE has down-chain agents that recognize specifications for different kinds of files; FOLDER uses down-chain agents to identify specs for starting directories.","Now imagine a request like \u201cjava in web\u201d. Both \u201cjava\u201d and \u201cweb\u201d are valid file types; both are valid directory names. What we wanted to do in FILETYPE is say that if we see a file spec followed by the word \u2018in\u2019, to see that as a stronger claim than one without it. Similarly, we want FOLDER to use \u2018in\u2019 to indicate that what follows may be a directory spec.","Clearly, we can't have both agents claiming \u2018in\u2019. But \u2018in\u2019 is important for both. So we use <exists> to give the policy with \u2018in\u2019 a higher priority.","11) Avoid policies that may make a null claim:",{"@attributes":{"id":"p-0467","num":"0564"},"tables":{"@attributes":{"id":"TABLE-US-00132","num":"00132"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TOKENS: [\u2018a\u2019]"]},{"entry":[{},"NULLTOKENS: [\u2018a\u2019] | [\u2018b\u2019]"]},{"entry":[{},"INTERESTING_TOKENS: [\u2018a\u2019 & \u2018b\u2019]"]},{"entry":[{},"NOTOKENS: <exists> \u2018a\u2019"]},{"entry":[{},"WOWTOKENS: [\u2018a\u2019] & <exists> \u2018b\u2019"]},{"entry":[{},"OWTOKENS: < exists> (\u2018a\u2019 & \u2018b\u2019)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The OPAL language guarantees that the operands of operators appear to be evaluated in a specific evaluation order, namely, from left to right.",{"@attributes":{"id":"p-0469","num":"0566"},"tables":{"@attributes":{"id":"TABLE-US-00133","num":"00133"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Precedence","Operator type","Operator"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","Terminals and","\u2018string\u2019"]},{"entry":[{},"references","\/NUMBER,"]},{"entry":[{},{},"\/SYMBOL,"]},{"entry":[{},{},"\/TYPE,"]},{"entry":[{},{},"\/F,"]},{"entry":[{},{},"\/DB,"]},{"entry":[{},{},"\/IDB,"]},{"entry":[{},{},"<check(...)>,"]},{"entry":[{},{},"AGENT reference,"]},{"entry":[{},{},"POLICY reference,"]},{"entry":[{},{},"?,"]},{"entry":[{},{},"..."]},{"entry":["1","Brackets","( operand )"]},{"entry":[{},{},"[ operand ]"]},{"entry":[{},{},"operand+"]},{"entry":["2","Unary","<exists> operand"]},{"entry":[{},{},"<check...>"]},{"entry":[{},{},"<unknown ..> operand"]},{"entry":["3","Binary adjacent","operand1 operand2"]},{"entry":[{},{},"operand1 {circumflex over (\u2009)} operand2"]},{"entry":["4","Binary ordered","operand1 < operand2"]},{"entry":[{},{},"opernad1 <{circumflex over (\u2009)} operand2"]},{"entry":["5","Binary and","operand1 & operand2"]},{"entry":[{},{},"opernad1 &{circumflex over (\u2009)} operand2"]},{"entry":["6","Binary or","operand1 | operand2"]},{"entry":["7","Binary combo","operand1 , operand2"]},{"entry":["8","Unary tag","<tag:...> operand"]},{"entry":[{},{},"<check tag:...> operand"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":"Notes:"},{"entry":"It is generally a good idea to use parentheses liberally in expressions involving mixed operators to avoid operator precedence problems."}]}}}},"br":{}},"A follow-up answer will be learned only if:","There would be a variable terminal (?) in the condition of the policy.","The agent asking the question would make a claim on the follow-up.","11 Claim Manipulation","The recursive operator (+) and most binary operators (adjacent, &, <, + and combo) make their claims by merging other claims.","Merging","Claims:","Two claims Cand Cwill merge if and only if one of the following conditions would hold:",{"@attributes":{"id":"p-0474","num":"0000"},"ul":{"@attributes":{"id":"ul0076","list-style":"none"},"li":["1. C\u2229C=\u03c6 (if C's focus does not intersect with C's focus)","2. C=0 and"]}},"C=0 and","C\u2282\/Cand","C\u2282\/Cand","C=Cand","(C=Cor C<0)\n\n","The following is the BNF notation used to describe the Policy's syntax:\n\n","Whenever a BNF notation is used as a keyword in the grammar it is preceded by an escape character: \u2018\\\u2019.","12.2 Policy's BNF Notation","Here is a BNF notation of the policy's grammar.",{"@attributes":{"id":"p-0483","num":"0591"},"tables":{"@attributes":{"id":"TABLE-US-00134","num":"00134"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"policy ::="]},{"entry":[{},"\u2003\u2003label:"]},{"entry":[{},"\u2003\u2003\u201c\\\u201c\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003<condition>"]},{"entry":[{},"\u2003\u2003\u2003\u2003[\u201c{\u201c \u201ctitle:\u201d <title> \u201d}\u201d]"]},{"entry":[{},"\u2003\u2003\u2003\u2003[\u201c{\u201c \u201cxml tag:\u201d <string literal> \u201d}\u201d]"]},{"entry":[{},"\u2003\u2003\u2003\u2003[\u201c{\u201c \u201cxml type:\u201d <string literal> \u201d}\u201d]"]},{"entry":[{},"\u2003\u2003\u2003\u2003[\u201c{\u201c \u201cpriority:\u201d <integer> \u201d}\u201d]"]},{"entry":[{},"\u2003\u2003\u2003\u2003[\u201c{\u201c \u201ccontinuation:\u201d (\u201cjoin\u201d|\u201creplace\u201d) \u201d}\u201d]"]},{"entry":[{},"\u2003\u2003\u2003\u2003[\u201c{\u201c \u201caction:\u201d <action>}]"]},{"entry":[{},"\u2003\u2003\u2003\u2003[\u201c{\u201c \u201cambiguity action:\u201d <action> \u201d}\u201d]"]},{"entry":[{},"\u2003\u2003\u2003\u2003[\u201c{\u201c \u201cunknown action:\u201d <action> \u201d}\u201d]"]},{"entry":[{},"\u2003\u2003\u201d\\\u201c\u201d;"]},{"entry":[{},"<label> ::= [\u201cA\u201d - \u201cZ\u201d|\u201c_\u201d] ([\u201cA\u201d - \u201cZ\u201d | \u201c0\u201d - \u201c9\u201d | \u201c_\u201d | \u201c-\u201d])*"]},{"entry":[{},"<title> ::= <string_literal>"]},{"entry":[{},"<integer> ::= [+|\u2212] (\u201c0\u201d - \u201c9\u201d)+"]},{"entry":[{},"<condition> ::= \u201c(\u201c <condition> \u201d)\u201d"]},{"entry":[{},"<condition> ::= <ADJACENT_condition>"]},{"entry":[{},"<condition> ::= <ORDERED_condition>"]},{"entry":[{},"<condition> ::= <AND_condition>"]},{"entry":[{},"<condition> ::= <OR_condition>"]},{"entry":[{},"<condition> ::= <COMBO_condition>"]},{"entry":[{},"<condition> ::= <OPTIONAL_condition>"]},{"entry":[{},"<condition> ::= <TERMINAL_condition>"]},{"entry":[{},"<condition> ::= <EXISTS>"]},{"entry":[{},"<condition> ::= <TAG_condition>"]},{"entry":[{},"<condition> ::= <CHECK_TAG_condition>"]},{"entry":[{},"<condition> ::= <CHECK_condition>"]},{"entry":[{},"<OPTIONAL_condition> ::= \u201c[\u201c <condition> \u201d]\u201d"]},{"entry":[{},"<UNKNOWN_condition> ::= \u201c<unknown if missing>\u201d <condition>"]},{"entry":[{},"<ADJACENT_condition> ::= <condition> <condition> |"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<condition> \u201c{circumflex over (\u2009)}\u201d <condition>"]},{"entry":[{},"<ORDERED_condition> ::= <condition> \u201c<\u201d <condition> |"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<condition> \u201c<{circumflex over (\u2009)}\u201d <condition>"]},{"entry":[{},"<AND_condition> ::= <condition> \u201c&\u201d <condition> |"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<condition> \u201c&{circumflex over (\u2009)}\u201d <condition>"]},{"entry":[{},"<OR_condition> ::= <condition> \u201c|\u201d <condition>"]},{"entry":[{},"<COMBO_condition> ::= <condition> \u201c,\u201d <condition>"]},{"entry":[{},"<TERMINAL_condition> ::= <terminal>"]},{"entry":[{},"<EXISTS_condition> ::= \u201c<\u201d \u201cexists\u201d \u201c>\u201d <condition>"]},{"entry":[{},"<TAG_condition> ::="]},{"entry":[{},"\u2003\u2003\u201c<\u201d \u201ctag\u201d \u201c:\u201d <string_literal> \u201c>\u201d <condition>"]},{"entry":[{},"<CHECK_TAG_condition> ::="]},{"entry":[{},"\u2003\u2003\u201c<\u201d \u201ccheck\u201d \u201ctag\u201d \u201c:\u201d <string_literal> \u201c>\u201d <condition>"]},{"entry":[{},"<CHECK_condition> ::="]},{"entry":[{},"\u2003\u2003\u201c<\u201d \u201ccheck\u201d \u201c(\u201c <agent_address> \u201d,\u201c <property_name> \u201d,\u201c"]},{"entry":[{},"\u2003\u2003<property_key> \u201d;\u201c <property_value> \u201d)\u201d \u201c>\u201d <condition>"]},{"entry":[{},"<terminal> ::= <token_provider>"]},{"entry":[{},"<terminal> ::= <number>"]},{"entry":[{},"<terminal> ::= <symbol>"]},{"entry":[{},"<terminal> ::= <agent_name>"]},{"entry":[{},"<terminal> ::= <policy_name>"]},{"entry":[{},"<terminal> ::= <variable>"]},{"entry":[{},"<token_provider> ::="]},{"entry":[{},"\u2003\u2003[\u201c[\u201c <matcher-list> \u201d]\u201d] \u201c'\u201d <string_literal> \u201c'\u201d"]},{"entry":[{},"<token_provider> ::="]},{"entry":[{},"\u2003\u2003[\u201c[\u201c <matcher-list> \u201d]\u201d] \/F \u201c'\u201d <string_literal> \u201c\u2019\u201d"]},{"entry":[{},"<token_provider> ::="]},{"entry":[{},"\u2003\u2003\/DB \u201c'\u201d <string_literal> \u201c\u2019\u201d"]},{"entry":[{},"<matcher-list> ::="]},{"entry":[{},"\u2003\u2003\u201c<\u201d (<matcher> | (<matcher> \u201c,\u201d <matcher-list>)) \u201c>\u201d"]},{"entry":[{},"<matcher> ::="]},{"entry":[{},"\u2003\u2003\u201cexact\u201d | \u201csubstring\u201d |"]},{"entry":[{},"\u2003\u2003\u201cpartial\u201d | \u201caccent\u201d |\u201caccent-edit-difference\u201d"]},{"entry":[{},"<number> ::= \u201c\/NUMBER\u201d [ \u201c(\u201c <integer> \u201d,\u201c <integer> \u201d)\u201d ]"]},{"entry":[{},"<symbol> ::= \u201c\/SYMBOL\u201d"]},{"entry":[{},"<agent_name> ::="]},{"entry":[{},"\u2003\u2003[\u201cA\u201d - \u201cZ\u201d|\u201c_\u201d] ([\u201cA\u201d - \u201cZ\u201d|\u201c0\u201d - \u201c9\u201d| \u201c_\u201d | \u201c-\u201d])*"]},{"entry":[{},"<policy_name> ::= (\u201c\/P\u201d ([\u201c0\u201d - \u201c9\u201d])+)"]},{"entry":[{},"<variable> ::= \u201c?\u201d"]},{"entry":[{},"<string_literal> ::="]},{"entry":[{},"\u2003\u2003\u201c'\u201d (~([\u201c\\\u201c\u201d,\u201c\\\\\u201d,\u201c\\n\u201d,\u201c\\r\u201d, \u201c'\u201d]) |"]},{"entry":[{},"\u2003\u2003<special_characters> )* \u201c'\u201d"]},{"entry":[{},"<special_characters> ::="]},{"entry":[{},"\u2003\u2003%BACK_SLASH% | %SINGLE_QUOTE% |"]},{"entry":[{},"\u2003\u2003%DOUBLE_QUOTE% | %NEW_LINE%"]},{"entry":[{},"<action> ::="]},{"entry":[{},"\u2003\u2003[\u201c{\u201c \u201cexecute:\u201d <action_element_list> \u201d}\u201d]*"]},{"entry":[{},"\u2003\u2003[\u201c{\u201c \u201cask:\u201d <action_element_list> \u201d}\u201d]*"]},{"entry":[{},"\u2003\u2003[\u201c{\u201c \u201cchoice:\u201d <action_element_list> \u201d}\u201d]*"]},{"entry":[{},"\u2003\u2003[\u201c{\u201c \u201cexplain:\u201d <action_element_list> \u201d}\u201d]*"]},{"entry":[{},"<action_element_list> ::="]},{"entry":[{},"\u2003\u2003<variable_action_element> [\u201c,\u201d <action_element_list>]"]},{"entry":[{},"<action_element_list> ::="]},{"entry":[{},"\u2003\u2003<constant_action_element> [\u201c,\u201d <action_element_list>]"]},{"entry":[{},"<variable_action_element> ::= \u201c*\u201d"]},{"entry":[{},"<variable_action_element> ::= \u201c?\u201d"]},{"entry":[{},"<variable_action_element> ::= <agent_name>"]},{"entry":[{},"<variable_action_element> ::= <policy_name>"]},{"entry":[{},"<variable_action_element> ::="]},{"entry":[{},"\u2003\u2003\u201cset\u201d \u201c(\u201c [<agent_address> \u201c,\u201d <property_name> \u201c,\u201d"]},{"entry":[{},"\u2003\u2003<property_key> \u201c;\u201d <property_value> \u201d)\u201d"]},{"entry":[{},"<variable_action_element> ::="]},{"entry":[{},"\u2003\u201cget\u201d \u201c(\u201c [<agent address> \u201c,\u201d] <property_name> \u201c,\u201d"]},{"entry":[{},"\u2003<property_key> \u201d)\u201d"]},{"entry":[{},"<constant_action_element> ::= <string_literal>"]},{"entry":[{},"<property_name> ::= <string_literal>"]},{"entry":[{},"<property_key> ::= <string_literal>"]},{"entry":[{},"<property_value> ::= <string_literal>"]},{"entry":[{},"<expression> ::= <string_literal>"]},{"entry":[{},"<agent_address> ::="]},{"entry":[{},"<agent_name> [\u201c.\u201d <agent_class> \u201c@\u201d <agent_domain> ]"]},{"entry":[{},"\u2003\u2002<agent_class> ::= <string_literal>"]},{"entry":[{},"<agent_domain> ::= <string_literal>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will be described with respect to particular embodiments thereof, and reference will be made to the drawings, in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 1 and 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 5","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 8","FIG. 6"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 10","FIG. 7"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 11","FIG. 8"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 12-17"}]},"DETDESC":[{},{}]}
