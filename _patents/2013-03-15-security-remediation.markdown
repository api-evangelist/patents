---
title: Security remediation
abstract: A method is provided to remediate defects in first computer program code that can be used to configure a computer to produce code for use by the same or a different computer configured using second computer program code to use the produced code to produce output information, the method comprising: configuring a computer to perform static analysis of the first program to produce an information structure in a non-transitory computer readable storage device that associates a respective code statement of the first program code with a respective context, wherein the context associates a parser state with a potential defect in the produced code; identify a defect in the first computer program code that is associated with the respective code statement; and determining a remediation for the identified defect.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141807&OS=09141807&RS=09141807
owner: Synopsys, Inc.
number: 09141807
owner_city: Mountain View
owner_country: US
publication_date: 20130315
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DESCRIPTION OF EMBODIMENTS","Overview of Security Remediation ","Example","Security Remediation in a Web Application\/Browser","Parsing States","Associating Contexts and Code Statements","Static Analysis to Identify Defects and Technology","Determining Remediation Based Upon Defect Type, Context and Technology","Example","Cross-Site Scripting Defect\u2014Web Application\/Browser"],"p":["This application claims priority to U.S. provisional patent application Ser. No. 61\/706,823 entitled Security Remediation, filed Sep. 28, 2012, which is incorporated in its entirety herein by this reference.","A computer program such as a browser, for example, configures a computer to generate user interface information based at least in part upon code such as HTML, CSS and javascript downloaded from another computer such as a web server, for example. Defects and\/or vulnerabilities in the downloaded code can be harmful to the operation of a computer configured to use such code, such as a computer configured to implement a browser, for example. Defects in a program running on a web server, for example, that produces the downloaded code can result in the defects or vulnerabilities in the downloaded code that put at risk a computer configured to use such code.","In one aspect, a method to remediate a defect in first computer program code that can be used to configure a computer to produce code for use by the same or a different computer configured using second computer program code to use the produced code to produce output information. A computer is configured to perform static analysis of the first program. The static analysis produces results that associate a respective code statement of the first program code with a respective context. The respective context associates a parser state associated with the produced code with a potential defect type in the produced code. The static analysis also produces results that identify a defect type in the first computer program code that is associated with the respective code statement. A determination is made of a remediation for the identified defect to be applied to the first computer program code based upon at least the identified defect type, the context associated with the respective code statement and a technology used by the first computer program code to produce the respective code statement.","The following description is presented to enable any person skilled in the art to create and use a computer system configuration and related method and article of manufacture to configure a computer to identify a remediation of one or more defects in a first computer program that configures a first computer to produce code for consumption by a second computer configured using a second computer program to generate output information based upon the produced code. Various modifications to the embodiments will be readily apparent to those skilled in the art, and the generic principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the invention. Moreover, in the following description, numerous details are set forth for the purpose of explanation. However, one of ordinary skill in the art will realize that the invention can be practiced without the use of these specific details. In other instances, well-known data structures and processes are shown in block diagram form in order not to obscure the description of the invention with unnecessary detail. Identical reference numerals may be used to represent different views of the same item in different drawings. Flow diagrams in drawings referenced below are used to represent processes. A computer system is configured to perform these processes. The flow diagrams include modules that represent the configuration of a computer system according to computer program code to perform the acts described with reference to these modules. Thus, the present invention is not intended to be limited to the embodiments shown, but is to be accorded the widest scope consistent with the principles and features disclosed herein.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["101","102","1","105","107","109","111","113"]},"A remediation tool  determines security\/safety obligations  as a function of context , a defect type , and technology . In some embodiments, each individual obligation , such as obligation- , indicates defect type, code statement location, context, technology and existing mitigation. A synthesizer tool  determines as a function of each obligation (obligation-, . . . , obligation-n) , one or more remediation fragments  stored in a remediation database  and assembles the determined fragments into remediation advice . The advice  includes information  that includes source code location in the code where the advice would be associated, the advice (e.g., a textual message), and possibly, code fixes.","An application profile  includes information stored in a database, for example, that indicates characteristics of the first application  that is useful in customizing the remediation advice  later. For example, in some embodiments the application profile  includes information such as which libraries  the application  uses, which frameworks  it uses, which database  it uses and which existing mitigations  it already uses. The application profile  provides information that is useful to ensure that remediation guidance that is consistent with existing practices in the application. In some embodiments, application profile information is gathered through static analysis, which garners information about an application in the course of running static analysis checks on the source code of the application.","A list of available libraries  that are available at runtime in effect defines a set of functions that can be used to mitigate the defect. In general, if a certain function already is being used to remediate a defect, then the remediation advice would be aligned with that function rather than suggest some other function that a developer of the application code might be unfamiliar with. As used herein, the term \u2018function\u2019, also referred to as a subroutine, procedure or method, means a portion of a program that performs a specific task that is relatively independent of other code within the program and that typically is written so that it can be invoked at several different places within the program including from within other functions. For example, if an application already uses a certain function to escape tainted data in a particular way, then the remediation advice would be aligned with that approach when applied to a specific defect where the escaping function is a correct remediation for that defect.","Application frameworks  often include mitigations for defects that can be easily used by developers. By knowing about the use of a particular framework  the remediation advice  can specify a framework-specific remediation. As used herein, the term \u2018framework\u2019 means a software platform used to develop applications; a framework may include one or more of support programs, compilers, code libraries, an application programming interface (API) and tool sets that bring together different components to facilitate development of an application.","A record of existing mitigations  includes mitigations already applied in the code for a potential defect that has been discovered. A defect that occurs in spite of an existing mitigation is a defect for which the existing mitigation is insufficient to meet the safety or security obligation. In that case, the existing mitigation is either not the correct mitigation or not complete enough to fix the defect. It may be useful to know of an existing albeit inadequate mitigations because a recommended remediation may involve removing the existing mitigation and\/or adding another mitigation.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["202","204","206","208","210","212","206","214","212","216"]},"More specifically, for example, in some embodiments of the system and process of , the first computer  is configured to operate as a web server, and the first computer program  running on the web server  produces the first output information  in the form of a code structure, and the second computer program  configures a second computer to act as a browser that produces the second output information  in the form of frame buffer data used to generate a user interface (UI) display  on a computer screen . In operation, for example, a user  of the second computer  causes it to send an information request  over a network  to the first computer . The first program  configures the first computer (the web server)  to generate the first output information  in the form of an HTML code structure in response to the request  and to send it over the network  to the second computer . The browser program  configures the second computer  to produce second output information  in the form of frame buffer information  used to generate an interactive UI display  on a display screen  in response to the HTML structure. In some embodiments, the first computer program  running on the web server  includes first code  represented in the Java Enterprise Edition language, for example, that is used to produce code structure  that includes HTML code. In some embodiments, the second computer program  configured to act as a browser includes the produced code structure  represented in the HTML, CSS and JavaScript languages (mash-up of the three languages), for example, that is used to generate the screen display .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIGS. 3A-3B","FIG. 3A","FIG. 3B","FIG. 2","FIG. 3A"],"b":["300","320","204","206","300","208","300","320","300","302","312","300","302","312","304","302"]},"As used herein, an \u2018HTML context\u2019 represents a set of one or more internal parser states reached by the HTML, JavaScript, and CSS parsers in the course of parsing the produced code  as a function of security obligations associated with the parser state. Each context - corresponds to some portion of the produced code  and also corresponds to a portion of the first program  used to produce that portion of the produced code . Security obligations are constraints that correspond to one or more internal parser states to identify parser state transitions that could be problematic in the event of the occurrence of a defect or vulnerability. It will be appreciated that a defect identified herein is a defect or vulnerability in the first computer program  that can result in a defect or vulnerability in the code structure  produced using the first computer program . The context referred to herein is an internal parser state of parsers of the second computer program  that includes one or more parsers to parse the produced code structure .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIGS. 17A-17B","FIG. 17A","FIG. 17B","FIG. 17A","FIG. 17B"],"b":["206","210","1702","1702","206","1710","206","210","1710","210","1712","1714","1716","1712","1718","1716","1718"],"i":["a","m "]},"Persons skilled in the art will understand that an internal \u2018parser state\u2019 is a current state of a parser process as it iterates over a grammar (or a language). The parser consumes elements of the grammar (tokens), and a typical logic implemented by the parser involves the parser, when in any given parse state, to look at what characters, grammar or token is\/are next, for example, and to either create a transition to different parser state or stay in the same parser state but consume more characters, for examples. In accordance with some embodiments, a security obligation acts as a constraint that prevents the second program  from making a transition to a different parser state, particularly one which would typically trigger a defect. Stated differently, if a security obligation is not met then the second program  can make an erroneous transition, which may constitute a defect or vulnerability. A context is generated to identify these possible defects or vulnerabilities.","The example UI display  includes first through sixth display regions -. In some embodiments, the display regions display interactive components such as fields in which a user can enter information and menu items that can be used to make selections and enter commands, for example. The second computer  configured as a browser uses the contexts - in conjunction with a document object model (DOM)  stored in storage  to generate frame buffer information  used to produce the corresponding display regions - within the UI display . For example, the first context  is used to generate the first display region, and the second context  is used to generate the second display region .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 4","b":["402","402","404","422","404","422","302","312","402","302","304","404","306","408","308","412","310","312","418","302","312","206","204"]},"Static analysis can be performed on static code (i.e., code that is not running during the analysis process) to identify weaknesses and\/or errors in the code. Static analysis tools can detect errors that are often missed when using dynamic analysis tools alone. For example, static analysis may detect an illegal operation that is contained in a rarely traversed or otherwise hard-to-test conditional branch code path. Because the path is so rarely visited during operation of the software, this error might not be detected using a dynamic analysis tool. Commonly owned U.S. Pat. No. 7,340,726 invented by Chelf et al., which is expressly incorporated herein in its entirety by this reference describes known static analysis techniques in accordance with some embodiments.","Static analysis can involve use of numerous different static analysis programs\/software tools often referred to as \u2018checkers\u2019 to evaluate code paths to identify vulnerabilities and\/or errors. For example, checkers can be used to detect syntax errors, functions without return values, variables that have been declared but not used, inadvisable automatic type conversions, \u2018taint\u2019 analysis aimed at identifying tainted data, integer overflows, or global-variable inconsistencies, problems associated with using modules (e.g., missing or invalid modules or input\/export mismatches), to name just a few.","It is known to persons skilled in the art that static analysis techniques can be used to identify a program output produced by a computer program. In particular for example, static analysis techniques can identify a produced output information  in the form of an HTML structure  is produced by the first computer program  running on the first computer  configured to act as a web server. Even more particularly, for example, the contexts - can be for HTML structure  can be identified through static analysis. Other examples of such instances in a program include but are not limited to the generation of SQL queries, XML structures, file path locations, etc.","For example, programs generated by web applications are manipulated as strings. Static analysis tracks the possible combination of strings that are generated by a program (abstract program). For example, static analysis is used to track the creation of HTML pages, which are output as a sequence of strings by the program code. Moreover, for example, static analysis can determine the possible values of string variables in a program by following different program paths and determining the value of the strings output on each path. In particular, for some defect types like cross-site scripting (XSS), the output is a buffered stream that \u201cprints\u201d the output string by string. The static analysis can determine the strings output in a linear fashion on each path to determine the possible structure of the output.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 5","b":["502","504","502","302","312","202","404","422","102","206","502","404","422","502","502","402","302","304","404","406","406","502","408","410","308","502","412","414","310","312","502","418","420"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 6","FIG. 2"],"b":["600","202","206","202","202","206"]},"Referring again to , module  configures a computer system to run a static analysis checker process on code statements of the selected code path within the first computer program . Typically, running a checker process involves following (tracing) a path from one code statement to the next in the first computer program . The path may branch into branching paths in which case the checker process typically will be run on all branch paths. A checker process may attempt to traverse every possible unique path within first computer program . The method of accomplishing a complete traversal may vary. Methods include, but are not limited to, depth-first and breadth-first search, and using recursion to provide coverage or using work lists to record paths that must be traversed as branches are encountered. Path traversal continues until all paths within the first program  have been traversed. In the course of the code path traversal(s), decision module  determines whether a defect is identified with reference to a code statement in a currently traversed path. If no, then the traversal continues. If yes, then module  identifies a location within the first computer program  of the code statement for which the defect is identified.","As shown in , numerous different checker processes may be run in the course of traversal of the first computer program . Different checker process may check for the presence of a different defect type among code statements within the first computer program . Additionally, checkers may check to determine the technology used to create different portions of the first computer program  including creation of individual statements for example. Thus, in the course of traversal of the many code paths within the first computer program, the multiple checkers may check the code statements of each given path, each checker checking for a different defect type and for the technology used to creat the code on the path. The decision module  identifies defects for and the code statement identification module  associate defect types with code statements for each different checker process. Thus, multiple different types of defects may be identified for one or more code statements within any given code path.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 7","FIG. 6"],"b":["1","702","704","1","1","1","404","2","1","418","706","708","1","404","2","418"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 8","FIG. 7","FIG. 7"],"b":["800","802","804","802","1","804","1","702","1","1"]},"Module  identifies a context that corresponds to the selected defect. Referring to , recall that contexts are identified using static analysis of the produced code  that correspond to one or more parser states that may be associated with a security obligation, that is an obligation associated with a potential defect or vulnerability. Referring to , the data structure  correlates code statements of the first computer program  traversed during path traversal with contexts that correspond to portions of the produced code  that is produced in response to the code statements. Continuing with the above example, the data structure  of  indicates that defect  of defect type # is associated with code statement , and data structure  of  indicates that contexts  and  correspond to statement . The data structure  interleaves contexts within a stack of code statements ordered in execution path order in the storage device . Thus, one or more output information contexts for produced code can be identified for the code statement that is associated with the selected defect. Note that defects such as defect  that do not involve context are not described.","Module  identifies a technology associated with the identified code statement from the first computer program . Referring to , there are shown illustrative information structures stored in computer readable storage device representing a hierarchy of technologies () and a specific example of hierarchy of technologies () in accordance with some embodiments. The structure  of  indicates language . The language includes multiple libraries - to -. Each library includes multiple functions. Library - includes functions, function- to function-n. Library -includes functions, function-x to function-xt. Thus, for example module  might use the information structure  to determine that a developer of the first program  uses function-n -in library- - of the language  to create a code statement that is associated with an identified defect.","The structure  of  provides a more specific illustrative example. The technology includes a language , which is JAVA in this example. The technology includes a library , which is Hibernate in this example. The library may include a library subset, such as a set of functions provided by the library such as a \u2018DSL\u2019 (domain specific library) such as HQL, for example. Other example Hibernate library sets include, Criteria, SQL and ORM, for example.","Module  identifies an operation (a high level summary of the code statement) associated with the code statement. Identification of the operation is used to determine how to generate a code fix (or patch). A patch is generated that fits the current code statement based upon the type of operation.","Module  identifies existing remediation associated with the code statement. The presence of existing remediation, if one exists, means that the code statement employs part of what may have been considered to be an ideal remediation. However, since it is incomplete we choose to keep this part and to add an appropriate remediation fragment to it to complete it. Note that in some embodiments, the \u2018existing remediation\u2019 is not gathered (or computed) at this stage but earlier (during the static analysis\/checker phase).",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 9","FIG. 8"],"b":["902","902","904"]},"It will be appreciated that the decision module  of  may refer to such an obligation data structure to identify security obligations associated with a particular parser state.","Referring to , for example It will be appreciate that a code statement may be associated with more than one defect of a given defect type. Referring to , for example, it can be seen that code statement  is associated with two contexts  and  that are associated with the same defect type. In accordance with some embodiments, a separate remediation obligation data structure is created for each context that is associated with the same code statement and the same defect type. More particularly, for example, a code statement, may be associated with a stack of context (nested contexts), in which case separate obligations are created for each of the nested context.","Defect-related information provided by the remediation obligation data structure  is used to determine a remediation for a defect identified by the data structure. As explained below with reference to , a defect type, context and technology identified within a remediation obligation data structure are used to identify remediation fragments, which are assembled into a remediation recommendation. As explained below with reference to , a code statement identified within a remediation obligation data structure is used to determine a location within code of the first computer program  to associate the remediation recommendation. Moreover, an operation identified within a remediation obligation data structure is used as a constraint to generate a possible code fix (or patch). An existing remediation identified within a remediation obligation data structure is used as another constraint. Essentially, when an existing remediation is detected, we force a remediation engine to use this existing remediation (for one or many nested contexts according to what is safe).",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIGS. 10A-10B","FIG. 10A","FIG. 10B","FIGS. 10A-10B"],"b":["902","902"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 10A","FIG. 10A","FIG. 10A"],"b":["1002","1003","1005","1002","1002","206","206"]},"Alternatively, for example, in some embodiments security obligations may have been created that have entries that corresponds to both js_string_sq and js_string_dq. In that case, the information structure of  could be used to match a js_string_sq parse state identified for the second code  to a corresponding security obligation that contains a js_string_sq parse state entry and to match a js_string_dq parse state identified for the second code  to a corresponding security obligation that contains a js_string_dq parse state entry.","Referring back to  and assuming, for example, that the produced code  includes both a js_string_sq parse state and a js_string_dq parse state, but that a security obligation exists only for a js_string parse state, the, module  would report the context for each of the parse states a js_string_sq and js_string_dq as being js_string.","It will be appreciate that this hierarchy involving js_string and js_string_sq and js_string_dq is merely an example and other context hierarchies may be used such as SQL string hierarchy, SQL keyword hierarchy, HTML attribute hierarchy, CSS string, URI, etc.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 10B","FIG. 10B"],"b":["1004","1007","1009","1004","1004"]},"It will be appreciated, for example, that in some embodiments a security obligation may have been created that corresponds to JAVA, but that no security obligation has been created that corresponds to either JAVA_JDBC or JSP_SCRIPLET. In that case, the information structure of  could be used to match either of a JAVA_JDBC technology or a JSP_SCRIPLET technology identified by a static analysis tool as a technology used to create one or more code statements in the first program code  to the security obligation that corresponds to JAVA. In that case, for example, the JAVA technology would serve as the context for each of a JAVA_JSBC and a JSP_SCRIPLET technology for the one or more code statements of the first code .","Alternatively, for example, in some embodiments security obligations may have been created that have entries that corresponds to both JAVA_JSBC and JSP_SCRIPLET. In that case, the information structure of  could be used to match a JAVA_JBBC technology identified for a code statement of the first program  to a corresponding security obligation that contains a JAVA_JSBC technology entry and to match a JSP_SCRIPLET technology identified for a code statement of the first program  to a corresponding security obligation that contains a JSP_SCRIPLET technology entry.","It will be appreciated that this hierarchy involving JAVA and JSP_SCRIPLET and JAVA_JDBC is merely an example and other technology hierarchies may be used such as JSP, EL, Hibernate, Hibernate Query Language, etc.","As used herein, the term \u201ctechnology\u201d can refer to a language, including domain specific languages such as a templating language such as JSP or REL and to application programming interfaces (API) such as APIs to different libraries.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 11","b":["1100","1015","1021","1003","1017","1021","1007","1102","1015","1017","1021","1003","1007"]},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 12","b":"1200"},"To generate a complete remediation for a stack of contexts, the remediation for each combination of context and technology is determined by looking up a corresponding description and code fix as a function of context and technology. The resulting descriptions are appended to the overall remediation description (e.g. appended for all contexts in the stack into the template for the advice). The code is also appended\/assembled with other code fragments for other contexts to give the user a complete code example for how the defect should be fixed.","Module  matches defect type indicated in the remediation obligation data structure  with a defect type in a remediation fragments database. Module  matches a context indicated in a remediation obligation data structure  with a context indicated in the remediation fragments database. Module  uses the context data structure  of . Module  matches a technology indicated in a remediation obligation data structure  with a technology indicated in the remediation fragments database. Module  uses the remediation fragments context data structure  of . Module  applies the best match process that minimizes (i. e. optimizes) differences (or distance) between a requested pair (context stack, technology) and available ones. to select remediation fragments as a function of the matched defect type, matched context and matched technology.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 13","FIG. 12","FIG. 12"],"b":["1302","1304","1208","1306"]},"Module  uses the selected templates to assemble advice for presentation to a user. In accordance with some embodiments, the assembly of advices is determined by the selected template. Each remediation fragment is integrated into the template based on the properties of the template itself. A computer is configured to use the selected template t direct it in the composing advice. For example, the template may direct ordering of advice as: functional and syntactical composition, append to a list of advices (advice , advice , etc.)","Module  associates the assembled advice with code location within the first computer program  of the code statement indicted within the remediation obligation. A user viewing the source code of computer program  can also view the assembled advice that is associated with the code. For example, the code and the advice, which are stored in a computer readable device, can be viewed using a computer display screen.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 14","FIG. 14","FIG. 4","FIG. 14","FIG. 5"],"b":["206","404","302","302","304","404","406","302","304","302","304"]},"In some embodiments, contexts interleaved within a code stack are identified based upon one or more language parsers. When multiple languages are involved, the parsing of the languages is nested for example. For example, Assuming that a first parser for a language  starts and proceeds until it perceives a transition to another language, language , in which case it derives the context from its parser state. A second parser starts parsing the nested language, language , and so on. When a nested language is parsed, the parser creates a transition to the parent language (e.g., language  to language )","In accordance with some embodiments, the output  is consumed by a machine, e.g., a computer, configured to simulate a web browser in the case of HTML pages. This machine is configured to implement several language parsers (e.g., HTML, CSS, JavaScript which are different languages). The machine picks up one language to start parsing (based upon the first language in HTML pages which is always HTML), and consumes the tokens until a transition to another language is detected (defined the specification for HTML). In this case, the parser for another language (JavaScript for example) starts the parsing and consumes the nested language tokens. The parse states are used to derive a context for each of the nested languages (here, HTML and JavaScript in this example). Finally, these contexts are composed together as a stack of context (nested contexts) associated with the code statements that were parsed to arrive at the contexts.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 15","FIG. 14"],"b":["1502","302","1502","404","304","202","202","202"]},{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 16","FIG. 14"],"b":["1602","304","1602","404","404","202","202"]},"The remediation advice that is provided in a computer readable storage device for the example first context  is to use the code: htmlEscape. More particularly, for example, remediation for cross-site scripting in EL: Escaping needs to be done for all of the contexts in the following order, for example, htmlEscape(JS_StringEscape(hi), where JS_StringEscape is a function from Coverity that escapes tainted data (for JavaScript string).","The remediation advice that is provided in a computer readable storage device for the example second context is to use the code: JS_stringEscape. More specifically, htmlEscape escapes tainted data (for HTML attribute).","The nested advice that is provided in a computer readable storage device for both context  and context  is expressed as: htmlEscape (JS_stringEscape(tainted data))."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIGS. 3A-3B","FIG. 3A","FIG. 3B","FIG. 2"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIGS. 10A-10B","FIG. 10A","FIG. 10B"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 13","FIG. 12"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 15","FIG. 14"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 16","FIG. 14"],"b":["1602","304"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIGS. 17A-17B","FIG. 17A","FIG. 17B"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIGS. 18A-18B","FIG. 18A","FIG. 18B"]}]},"DETDESC":[{},{}]}
