---
title: Method and system for automatic generation of cache directives for security policy
abstract: An authorization method is implemented in an authorization engine external to an authorization server. The authorization server includes a cache. The external authorization engine comprises an authorization decision engine, and a policy analytics engine. The method begins when the authorization decision engine receives a request for an authorization decision. The request is generated (at the authorization server) following receipt of a client request for which an authorization decision is not then available at the server. The authorization decision engine determines an authorization policy to apply to the client request, applies the policy, and generates an authorization decision. The authorization decision is then provided to the policy analytics engine, which stores previously-generated potential cache directives that may be applied to the authorization decision. Preferably, the cache directives are generated in an off-line manner (e.g., during initialization) by examining each security policy and extracting one or more cache dimensions associated with each such policy. The policy analytics engine determines an applicable cache directive, and the decision is augmented to include that cache directive. The decision (including the cache directive) is then returned to the authorization server, where the decision is applied to process the client request. The cache directive is then cached for re-use at the authorization server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08701163&OS=08701163&RS=08701163
owner: International Business Machines Corporation
number: 08701163
owner_city: Armonk
owner_country: US
publication_date: 20110603
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","BRIEF SUMMARY","DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT"],"p":["1. Technical Field","This disclosure relates generally to application security and in particular to a method and system for automatic generation of cache directives for authorization decisions associated with security policy evaluation.","2. Background of the Related Art","Many authorization systems provide a mechanism to integrate with external systems whose results can be combined to calculate an authorization decision. In a known system, a security policy manager includes a mechanism to model application resources and actions, attach policy controlling the conditions under which those resources can be accessed, and evaluate that policy by invoking an authorization API. In such a system, however, calls to external authorization systems cause additional processing overhead, particularly with a decision engine that is remote to the calling application. The performance impact of this remote call can be reduced by the introduction of a cache that determines if, when and how authorization decisions should be cached for re-use.","Within some authorization engines, internal caches may exist and which reduce the amount of time it takes to calculate an authorization decision. A problem, however, still exists when a caller is required to make a remote call to an authorization engine. As noted, the performance cost of making the remote call usually is much larger than any performance gain due to internal caching within the authorization engine itself.","According to this disclosure, an authorization method is implemented in an authorization engine external to an authorization server. The authorization server includes a cache. The external authorization engine comprises an authorization decision engine, and a policy analytics engine. The method begins when the authorization decision engine receives a request for an authorization decision. The request is generated (at the authorization server) following receipt of a client request for which an authorization decision is not then available at the authorization server. The authorization decision engine determines an authorization policy to apply to the client request, applies the policy, and generates an authorization decision. The authorization decision is then provided to the policy analytics engine, which stores previously-generated potential cache directives that may be applied to the authorization decision. Preferably, the cache directives are generated in an off-line manner (e.g., during initialization) by examining each security policy and extracting one or more cache dimensions associated with each such policy. The policy analytics engine determines an applicable cache directive, and the authorization decision is augmented to include that cache directive. The decision (including the cache directive) is then returned to the authorization server, where the decision is applied to process the client request. If caching is possible, the cache directive and authorization decision are then cached for re-use at the authorization server.","In an alternative embodiment, the above-described method is performed in an apparatus.","In another alternative embodiment, the above-described method is performed by a computer program product in a computer readable medium for use in a data processing system. The computer program product holds computer program instructions which, when executed by the data processing system, perform the method.","The foregoing has outlined some of the more pertinent features of the invention. These features should be construed to be merely illustrative. Many other beneficial results can be attained by applying the disclosed invention in a different manner or by modifying the invention as will be described.","With reference now to the drawings and in particular with reference to , exemplary diagrams of data processing environments are provided in which illustrative embodiments of the disclosure may be implemented. It should be appreciated that  are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the disclosed subject matter may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.","With reference now to the drawings,  depicts a pictorial representation of an exemplary distributed data processing system in which aspects of the illustrative embodiments may be implemented. Distributed data processing system  may include a network of computers in which aspects of the illustrative embodiments may be implemented. The distributed data processing system  contains at least one network , which is the medium used to provide communication links between various devices and computers connected together within distributed data processing system . The network  may include connections, such as wire, wireless communication links, or fiber optic cables.","In the depicted example, server  and server  are connected to network  along with storage unit . In addition, clients , , and  are also connected to network . These clients , , and  may be, for example, personal computers, network computers, or the like. In the depicted example, server  provides data, such as boot files, operating system images, and applications to the clients , , and . Clients , , and  are clients to server  in the depicted example. Distributed data processing system  may include additional servers, clients, and other devices not shown.","In the depicted example, distributed data processing system  is the Internet with network  representing a worldwide collection of networks and gateways that use the Transmission Control Protocol\/Internet Protocol (TCP\/IP) suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, governmental, educational and other computer systems that route data and messages. Of course, the distributed data processing system  may also be implemented to include a number of different types of networks, such as for example, an intranet, a local area network (LAN), a wide area network (WAN), or the like. As stated above,  is intended as an example, not as an architectural limitation for different embodiments of the disclosed subject matter, and therefore, the particular elements shown in  should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.","With reference now to , a block diagram of an exemplary data processing system is shown in which aspects of the illustrative embodiments may be implemented. Data processing system  is an example of a computer, such as client  in , in which computer usable code or instructions implementing the processes for illustrative embodiments of the disclosure may be located.","With reference now to , a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system  is an example of a computer, such as server  or client  in , in which computer-usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example, data processing system  includes communications fabric , which provides communications between processor unit , memory , persistent storage , communications unit , input\/output (I\/O) unit , and display .","Processor unit  serves to execute instructions for software that may be loaded into memory . Processor unit  may be a set of one or more processors or may be a multi-processor core, depending on the particular implementation. Further, processor unit  may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example, processor unit  may be a symmetric multi-processor system containing multiple processors of the same type.","Memory  and persistent storage  are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a temporary basis and\/or a permanent basis. Memory , in these examples, may be, for example, a random access memory or any other suitable volatile or non-volatile storage device. Persistent storage  may take various forms depending on the particular implementation. For example, persistent storage  may contain one or more components or devices. For example, persistent storage  may be a hard drive, a flash memory, a rewritable optical disk, a rewritable magnetic tape, or some combination of the above. The media used by persistent storage  also may be removable. For example, a removable hard drive may be used for persistent storage .","Communications unit , in these examples, provides for communications with other data processing systems or devices. In these examples, communications unit  is a network interface card. Communications unit  may provide communications through the use of either or both physical and wireless communications links.","Input\/output unit  allows for input and output of data with other devices that may be connected to data processing system . For example, input\/output unit  may provide a connection for user input through a keyboard and mouse. Further, input\/output unit  may send output to a printer. Display  provides a mechanism to display information to a user.","Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory  for execution by processor unit . The processes of the different embodiments may be performed by processor unit  using computer implemented instructions, which may be located in a memory, such as memory . These instructions are referred to as program code, computer-usable program code, or computer-readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer-readable media, such as memory  or persistent storage .","Program code  is located in a functional form on computer-readable media  that is selectively removable and may be loaded onto or transferred to data processing system  for execution by processor unit . Program code  and computer-readable media  form computer program product  in these examples. In one example, computer-readable media  may be in a tangible form, such as, for example, an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage  for transfer onto a storage device, such as a hard drive that is part of persistent storage . In a tangible form, computer-readable media  also may take the form of a persistent storage, such as a hard drive, a thumb drive, or a flash memory that is connected to data processing system . The tangible form of computer-readable media  is also referred to as computer-recordable storage media. In some instances, computer-recordable media  may not be removable.","Alternatively, program code  may be transferred to data processing system  from computer-readable media  through a communications link to communications unit  and\/or through a connection to input\/output unit . The communications link and\/or the connection may be physical or wireless in the illustrative examples. The computer-readable media also may take the form of non-tangible media, such as communications links or wireless transmissions containing the program code. The different components illustrated for data processing system  are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in  can be varied from the illustrative examples shown. As one example, a storage device in data processing system  is any hardware apparatus that may store data. Memory , persistent storage , and computer-readable media  are examples of storage devices in a tangible form.","In another example, a bus system may be used to implement communications fabric  and may be comprised of one or more buses, such as a system bus or an input\/output bus. Of course, the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally, a communications unit may include one or more devices used to transmit and receive data, such as a modem or a network adapter. Further, a memory may be, for example, memory  or a cache such as found in an interface and memory controller hub that may be present in communications fabric .","Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object-oriented programming language such as Java\u2122, Smalltalk, C++ or the like, and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer, or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash memory, equivalent non-volatile memory, or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in . Also, the processes of the illustrative embodiments may be applied to a multiprocessor data processing system, other than the SMP system mentioned previously, without departing from the spirit and scope of the disclosed subject matter.","As will be seen, the techniques described herein may operate in conjunction within the standard client-server paradigm such as illustrated in  in which client machines communicate with an Internet-accessible Web-based portal executing on a set of one or more machines. End users operate Internet-connectable devices (e.g., desktop computers, notebook computers, Internet-enabled mobile devices, or the like) that are capable of accessing and interacting with the portal. Typically, each client or server machine is a data processing system such as illustrated in  comprising hardware and software, and these entities communicate with one another over a network, such as the Internet, an intranet, an extranet, a private network, or any other communications medium or link. A data processing system typically includes one or more processors, an operating system, one or more applications, and one or more utilities. The applications on the data processing system provide native support for Web services including, without limitation, support for HTTP, SOAP, XML, WSDL, UDDI, and WSFL, among others. Information regarding SOAP, WSDL, UDDI and WSFL is available from the World Wide Web Consortium (W3C), which is responsible for developing and maintaining these standards; further information regarding HTTP and XML is available from Internet Engineering Task Force (IETF). Familiarity with these standards is presumed.","A data processing system such as illustrated in  may be configured as a client system, or a server system.","A typical enterprise system in which the subject matter of this disclosure may be implemented includes an authorization component. Authorization typically is provided in association with an access manager, which is a component that prevents unauthorized use of resources, including the prevention of use of a given resource in an unauthorized manner. A representative access manager is the Tivoli\u00ae Access Manager for e-business (TAM) product, which is available commercially from IBM, and is represented in . Of course, the identification of this commercial product is not meant to be taken to limit the disclosed subject matter. More broadly, any system, device, program or process that provides a policy\/access\/service decision may be used for this purpose. A representative but non-limiting implementation is a point of contact (PoC) that acts as an intermediary between a client browser and one or more back end applications. The point of contact is a reverse proxy, a Web server plug-in, or the like, that is executed in at least one processor. As described above, this component is responsible for the authorization of users.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 3"],"b":["302","308","304","306","302","308","308","310","312","310","314","316","302","312"]},"TAM provides a reverse proxy, web plug-in or the like that provides session management functionality and that includes authorization functionality as part of this session management. Authentication is handled by TAM, meaning that TAM collects a user's authentication credentials, evaluates them, and establishes a session, including some form of session management functionality (such as a session cookie). To provide a user with the advantages of this consolidated environment, TAM then provides a single sign-on solution for the user by asserting authentication credentials (such as username\/password) to the back-end applications. This allows the back-end application to be added to the portal environment without modification.","The authentication and authorization framework illustrated in  may be extended with additional security policy components that are available commercially. For example, IBM Tivoli Security Policy Manager (TSPM) provides the capability to externalize an application's authorization decisions, allowing for a policy-based approach to managing entitlements across an enterprise. TSPM provides a mechanism to model application resources and actions, attach policy controlling the conditions under which those resources can be accessed, and evaluate that policy by invoking an authorization API. The authorization API is built on two standards: Java Authorization Contract for Containers (JACC), and eXtensible Access Control Markup Language (XACML). As is well-known, the JACC specification is extended to allow applications to pass so-called \u201ccontext\u201d information. In a typical TSPM operation, this context information, such as the authenticated user and the resource being accessed, is converted into an XACML request and sent to a Runtime Security Service (RTSS) to be evaluated against a policy. JACC-style context handlers are used to populate additional information that may be needed for the policy to reach a decision. As used herein, \u201ccontext\u201d refers to context information consistent with the above-identified standards.","Using such solutions, it is also known to provide a \u201cpolicy generator\u201d to translate access pattern data to technology-specific policies and to provide these policies to the \u201cpolicy manager,\u201d which is responsible for distributing the policies to one or more \u201cpolicy enforcement points\u201d within or across an enterprise. A policy enforcement point (PEP) may comprise a local or remote (i.e., external) policy decision point (PDP) at which a policy decision is applied.","In a known commercial authentication, authorization and security policy framework, TAM is used as a front-end, and TSPM is used as a back-end. Of course, the techniques that are described below are not limited to any specific implementation.","Automatic Generation of Cache Directives for Security Policy","The subject matter herein typically is implemented in the context of an authorization server that has externalized at least part of an authorization decision to an external authorization engine in the manner illustrated in . As noted above, a commercial system that provides the basic capability to externalize an application's authorization decisions is IBM Tivoli Security Policy Manager, and the following techniques may be implemented on such a platform. In the following discussion, it is further assumed that an authenticated (user) browser session has been established between a client browser and the authorization server with respect to a web application (or other resource) executing on an associated web (or other) server, once again in a well-known manner. The particular manner in which the secure browser session has been established is not within the scope of this disclosure.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4","FIG. 4"],"b":["400","402","404","404","406","406","404","402","404","402","408","410","412","412"]},"The external authorization engine  comprises a number of components: a policy evaluation engine , and a policy analytics engine, . As will be seen, the policy analytics engine extends the policy evaluation engine to provide the functionality of this disclosure.","The authorization engine  and its externalized policy evaluation engine  are known in the art. According to this disclosure, the authorization engine is extended to include the authorization decision cache , and the policy evaluation engine  is augmented with the policy analytics engine . In one embodiment, the policy analytics engine  is distinct from the policy evaluation engine, but this is not a requirement. In an alternative embodiment, the policy analytics engine  is integral to the policy evaluation engine, in which case it is implemented as a functional component thereof. Thus, the representation (in which the components  and  are shown as distinct and independent) is not meant to be limiting. In addition, each of the policy evaluation engine and the policy analytics engine may be implemented across a single machine or process, or across multiple machines and processes.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 4"},"At step , the client makes a request (typically over https) to the secure proxy  acting as an authorization server. At step , the proxy has determined that it must authorize the request. An authorization request is then provided to the authorization engine . At step , the authorization engine  performs a cache check in the authorization decision cache  to determine if a decision already exists for the request. As will be seen, an aspect of this disclosure is that a particular authorization decision (generated by the external authorization engine ) is cached for re-use in the authorization decision cache (if caching is available). The decision may be cached for a configurable period, depending on the size of the cache and other factors, such as communication latency.","Referring back to the drawing, at step , the authorization engine  decides, after having checked the cache and found no prior decision (or, in the alternative, a stale decision), that an external authorization call is requested. The authorization engine  then instructs its external authorization client  to do so. At step , the external authorization client  makes an authorization call to the external authorization engine  and includes a \u201ccontext\u201d in which the authorization decision is to be made. As used herein, the \u201ccontext\u201d typically is information about the resource being accessed, the type of access being requested, and an arbitrary set of attributes describing an environment in which the request is being made, such as time of day\/week, or location of the server or data. The representation of the context may vary based on the authorization policy standard being used.","The external authorization engine  receives the call and, at step , the engine  uses its policy evaluation engine  to perform a policy evaluation. At step , the outcome of the policy evaluation is passed from the policy evaluation engine  to the policy analytics engine . At step , and as will be described in more detail below, the policy analytics engine  then makes a decision about the cache directive that should be returned (if any) for this context and the applicable policy; it then returns this information to the external authorization client  of the secure proxy . At step , the external authorization client  returns the cache directive and decision to the authorization engine . The authorization engine then inspects the cache directive and, at step , caches the decision in the authorization decision cache . An additional processing required for the initial request is then performed at step  by the authorization engine . At step , the response is returned to the requesting client. This completes the processing.","Thus, according to the transaction flow shown in , the known technique (of having the authorization engine  use an externalized policy evaluation engine ) is augmented (or supplemented) to include the operation of the policy analytics engine . In particular, the policy analytics engine  determines which cache directive, if any, should be returned with respect to an authorization decision that has been made with respect to a policy and the context at issue (its policy evaluation). As used here, a \u201ccache directive\u201d should be broadly construed to refer to any directive that may be implemented with respect to an authorization decision, and representative cache directives may be quite varied, e.g., \u201ccache for all users,\u201d \u201ccache for this user only,\u201d \u201ccache for this action only,\u201d \u201ccache for all actions,\u201d \u201cdo not cache,\u201d and so forth. The particular semantics and nomenclature for the cache directives are not limited to any particular approach.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 5","b":["504","514","506","516","516"]},"In particular, the policy analytics engine  works in conjunction with the policy decision (the policy evaluation engine ) to return both a policy decision and a policy cache directive for a caller to consume. In general, the policy analytics engine  works by examining specific policy and determining how the current decision, or similar decisions, may be cached by the caller. Thus, according to this disclosure, when an authorization decision is made, instead of returning the result back to the caller directly, the external authorization engine preferably goes through an additional analysis phase where the analytical engine (the policy analytics engine ) inspects specific policy and adds a cache directive to the result. As used herein, a \u201cresult\u201d or \u201cresponse\u201d returned from the external authorization engine may be the decision and the cache directive, or the combination thereof. In a preferred embodiment, the authorization decision is constructed in XML and includes the cache directive embedded therein. Several examples of this XML-based approach are shown in ,  and  below. The authorization decision and the cache directive can be returned from the external authorization engine in any convenient manner of course. As will be described, the policy analytics engine  is closely tied to the policy evaluation engine  in that it understands the policy language that the policy decision uses, regardless of whether the caller knows about this language. The cache directive and decision thus are policy language-agnostic, but the external authorization engine nevertheless still returns a decision and a cache directive that a caller can consume.","In an illustrative embodiment, which is now described, these advantages are achieved as follows. With reference to , the policy analytics engine preferably implements several functions using components\/modules that are identified for convenience as follows: a policy analyzer , a decision request analyzer , and a cache directive writer . These components may be a single component. The policy analyzer  typically is implemented during an initialization or configuration phase, or periodically. It comprises a series of steps or operations that are described in more detail in the process flow diagram in . As will be seen, as a result of executing the policy analyzer , a map (or, more generally, a data array or data structure)  is generated. The map , which may be implemented as a hash map, associates each policy (as identified by a policy identifier) with a set of potential cache directives that may be used in association with that policy. Preferably, and as noted above, the map is generated off-line (during initialization or configuration), and it is available to the decision request analyzer , which is the routine that makes a decision (using the map) about which cache directive (if any) should augment (e.g., be included with or within) a particular authorization decision. The decision request analyzer comprises a series of steps or operations that are described in more detail in the process flow diagram of . In a representative embodiment, each of the routines in  and in  may be implemented in software as a set of computer program instructions executed in one or more processors.","Referring now to , a prepare policy routine, which is the function of the policy analyzer , is described. As noted above, this routine typically is executed off-line, such as during initialization of the external authorization engine (and\/or the policy analytics engine thereof). In general, this routine identifies the potential for cacheability of a policy decision. By way of brief background, according to the techniques herein, for a given authorization policy type and its syntax, a set of potential cacheable dimensions exist and\/or may be determined. For example, dimensions of an XACML policy that may be cacheable include \u201csubject\u201d and \u201cactions.\u201d When analyzing a policy, policy dimensions may be examined and potential cache directives determined. Thus, for example, if a match criterion for a \u201csubject\u201d (in an XACML policy) is one or more groups, then a potential cache directive is around that group(s). As an alternative example, if a match criterion for the \u201csubject\u201d is a wildcard representing all users, then a potential cache directive is some designation of \u201call users\u201d or \u201call authenticated.\u201d The set of \u201cactions\u201d in a policy may also be a cacheable dimension. Other dynamic features of a policy may override cacheability. For example, a policy that references a rule (e.g., an externally-coded one) might be deemed to negate any potential for caching. A more sophisticated implementation may enable an administrator to specify caching semantics of an external rule upon configuration.","Referring now to , the routine begins at step . At step , a policy is read from the policy store. The routine continues at step  to parse the policy. At step , the policy is analyzed to extract one or more cacheable dimensions and, based on those dimensions, to identify a set of one or more potential cache directives that may be used in association with that policy.","How a particular policy is parsed to identify its cacheable dimension(s) thus is a function of the policy language, including the policy specification and semantics. For example, for the sample XACML policy in , the policy is applicable for all Subjects if the action is \u2018READ,\u2019 and thus the cache directive is \u2018all users and action equals READ\u2019 as shown in . The discussion above provides several other examples of this process step, which may be implemented programmatically, manually, or otherwise.","At step , a test is performed to determine if all the policies from the policy store have been loaded and analyzed. If the outcome of the test at step  is negative, the routine cycles back to step  to read a next policy from the policy store. If, however, the outcome of the text at  indicates that all of the policies have been analyzed, the routine terminates at step . The result is the map, which stores an association of a policy (identified by a policy identifier) and its one or more potential cache directives.","Thus, the techniques herein take advantage of the characteristic that a policy has one or more potential cache directives associated therewith. These potential cache directives are stored in a manner such that they may be readily and efficiently accessed, searched and retrieved by the policy evaluation engine. As noted above, a hash map is one representative embodiment of the map.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 8","FIG. 6","FIG. 6"],"b":["604","800","802","804","806","808","804","804","810","812"]},{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 9","FIG. 8","FIG. 10"],"b":["1000","1002","1004","1004"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 11","FIG. 12"],"b":["1200","1202","1204"]},"The technique is not limited for use with XACML-based policies such as shown in  and . The policy may be of any type, such as an access control list (ACL)-based policy.  is an example of a third ACL policy, which allows unauthenticated read access with respect to a resource to which the ACL is attached. A request for a resource by any user performing the READ action would then return an authorization decision such as \u201callow and cache this decision for all users,\u201d as represented by the XML-based authorization decision  comprising decision section  and cache directive  shown in .","As a skilled person will recognize, the authorization decision and cache directive returned from the external authorization engine is the same in both the first and third examples, despite that the policy language used to write the respective policy was different.","The disclosed subject matter provides significant advantages. The policy analytics engine augments the policy decision with a cache directive that may be re-used as needed by the proxy. In this manner, an authorization decision may be cached and re-used, thereby obviating one or more external calls to the external authorization engine. The policy analytics engine and the policy decision engine understand the policy language that the policy decision uses, irrespective of whether the caller knows about this language. As noted above, the cache directive and decision thus are policy language-agnostic, but the external authorization engine nevertheless still returns a decision and a cache directive that a caller can consume.","The functionality described above may be implemented as a standalone approach, e.g., a software-based function executed by a processor, or it may be available as a managed service (including as a web service via a SOAP\/XML interface). The particular hardware and software implementation details described herein are merely for illustrative purposes are not meant to limit the scope of the described subject matter.","More generally, computing devices within the context of the disclosed invention are each a data processing system (such as shown in ) comprising hardware and software, and these entities communicate with one another over a network, such as the Internet, an intranet, an extranet, a private network, or any other communications medium or link. The applications on the data processing system provide native support for Web and other known services and protocols including, without limitation, support for HTTP, FTP, SMTP, SOAP, XML, WSDL, UDDI, and WSFL, among others. Information regarding SOAP, WSDL, UDDI and WSFL is available from the World Wide Web Consortium (W3C), which is responsible for developing and maintaining these standards; further information regarding HTTP, FTP, SMTP and XML is available from Internet Engineering Task Force (IETF). Familiarity with these known standards and protocols is presumed.","The scheme described herein may be implemented in or in conjunction with various server-side architectures including simple n-tier architectures, web portals, federated systems, and the like. The techniques herein may be practiced in a loosely-coupled server (including a \u201ccloud\u201d-based) environment. The secure web server itself may be hosted in the cloud.","Still more generally, the subject matter described herein can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment, the function is implemented in software, which includes but is not limited to firmware, resident software, microcode, and the like. Furthermore, as noted above, the analytics engine functionality can take the form of a computer program product accessible from a computer-usable or computer-readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description, a computer-usable or computer readable medium can be any apparatus that can contain or store the program for use by or in connection with the instruction execution system, apparatus, or device. The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or a semiconductor system (or apparatus or device). Examples of a computer-readable medium include a semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk-read only memory (CD-ROM), compact disk-read\/write (CD-R\/W) and DVD. The computer-readable medium is a tangible item.","The computer program product may be a product having program instructions (or program code) to implement one or more of the described functions. Those instructions or code may be stored in a computer readable storage medium in a data processing system after being downloaded over a network from a remote data processing system. Or, those instructions or code may be stored in a computer readable storage medium in a server data processing system and adapted to be downloaded over a network to a remote data processing system for use in a computer readable storage medium within the remote system.","In a representative embodiment, the analytics engine is implemented in a special purpose computer, preferably in software executed by one or more processors. The software is maintained in one or more data stores or memories associated with the one or more processors, and the software may be implemented as one or more computer programs. Collectively, this special-purpose hardware and software comprises the analytics engine framework, and the associated response processing, which are described above.","The policy analyzer, decision request analyzer, and cache directive writer functionality provided by the analytics engine may be implemented as an adjunct or extension to an existing access manager or policy management solution.","While the above describes a particular order of operations performed by certain embodiments of the invention, it should be understood that such order is exemplary, as alternative embodiments may perform the operations in a different order, combine certain operations, overlap certain operations, or the like. References in the specification to a given embodiment indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic.","Finally, while given components of the system have been described separately, one of ordinary skill will appreciate that some of the functions may be combined or shared in given instructions, program sequences, code portions, and the like.","As used herein, the \u201cclient-side\u201d application should be broadly construed to refer to an application, a page associated with that application, or some other resource or function invoked by a client-side request to the application. A \u201cbrowser\u201d as used herein is not intended to refer to any specific browser (e.g., Internet Explorer, Safari, FireFox, Chrome or the like), but should be broadly construed to refer to any client-side rendering engine that can access and display Internet-accessible resources. Further, while typically the client-server interactions occur using HTTP, this is not a limitation either. The client server interaction may be formatted to conform to the Simple Object Access Protocol (SOAP) and travel over HTTP (over the public Internet), FTP, or any other reliable transport mechanism (such as IBM\u00ae MQSeries\u00ae technologies and CORBA, for transport over an enterprise intranet) may be used. Also, the term \u201cweb site\u201d or \u201cservice provider\u201d should be broadly construed to cover a web site (a set of linked web pages), a domain at a given web site or server, a trust domain associated with a server or set of servers, or the like. A \u201cservice provider domain\u201d may include a web site or a portion of a web site. Any application or functionality described herein may be implemented as native code, by providing hooks into another application, by facilitating use of the mechanism as a plug-in, by linking to the mechanism, and the like.","The techniques disclosed herein are not limited to a Web-based portal having a point of contact that provides authentication, session management and authorization, but this will be a typical implementation. As noted, the above-described function may be used in any system, device, portal, site, or the like wherein server-set session management data might be re-used (either by an original user in a different session, or by another user) through the same client browser. More generally, the described technique is designed for use in any operating environment wherein given information (including, without limitation, session management data) is not intended to persist across applications or sessions but ends up doing so because of patterns of client re-use and\/or application-level granularity of session information.","Having described our invention, what we now claim is as follows."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention and the advantages thereof, reference is now made to the following descriptions taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 8","FIG. 6"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
