---
title: Failover and recovery of a computing application hosted by a virtual instance of a machine
abstract: A system and method are described for performing failover and recovery of a computing application hosted by a virtual instance of a machine. An example system may include an instance status monitor, an instance failure detector, and a failover module. The instance status monitor may be configured to monitor status of a virtual instance hosted by a virtualization service. The instance failure detector may be configured to detect that the virtual instance has failed or is running in a degraded or failed state and is thus to be considered a failed virtual instance. The failover module may be configured to facilitate launching a new virtual instance in a recovered state that reflects a last known operational state of the failed virtual instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08332688&OS=08332688&RS=08332688
owner: Adobe Systems Incorporated
number: 08332688
owner_city: San Jose
owner_country: US
publication_date: 20090721
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This disclosure relates generally to the technical fields of software and\/or hardware technology and, in one example embodiment, to systems and methods for performing failover and recovery of a computing application hosted by a virtual instance of a machine.","The approaches described in this section could be pursued, but are not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated herein, the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.","Enterprise application software has traditionally been delivered using three-tiered architecture, with a user interface tier, a server or business logic tier, and a database tier. These applications are typically deployed locally by a customer within their own data center, on their own hardware, and with their own support staff. Each application operates within its own \u201csilo\u201d of hardware, software, and support that does not leverage any of the resources that all such enterprise applications share. The initial cost to deploy an enterprise application with this architecture is substantial, in both dollars and time, and this initial cost has always been an obstacle to the sale of enterprise software to the small and medium business (SMB) market.","A two-tiered application architecture that relies upon a web browser-based client tier and a remotely deployed internet-accessible server tier to provide functionality that was previously delivered via a locally deployed three-tiered application is commonly referred to as software-as-a-service (SaaS) or Cloud Computing. A SaaS approach is intended to leverage the shared functions of computing applications, together with shared hardware, data, and support capacities, in order to provide a user experience with improved scalability, extensibility, maintainability, and with significantly reduced up-front costs. The term software-as-a-service (SaaS) is used as a blanket term for a set of features that uses a two-tiered network-accessible hosted service architecture.","The phrase \u201ccloud computing\u201d refers to an architectural paradigm in which computation is moved from local servers to a remote service that provides computation as a commodity or utility. A \u201ccloud\u201d is typically a large collection of shared commodity computation resources that can be interchangeably provisioned for client computation requests. Cloud computing is frequently used in SaaS application architectures and may be viewed as an implementation choice for application deployment that leverages shared resources and improved cost structure of the cloud. A cloud computing approach may be used to implement a variety of computational paradigms, such as virtual machines, jobs, remote procedure calls, traditional servers, etc.","In the following detailed description, numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However, it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.","Some portions of the detailed description that follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification, the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here, and generally, considered to be a self-consistent sequence of operations or similar signal processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a specific apparatus, such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification, therefore, a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals, typically represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the special purpose computer or similar special purpose electronic computing device.","A system and method are described for performing failover and recovery of a computing application running within a public virtualization space, such as the virtualization space provided by Amazon's Elastic Compute Cloud (EC2) service. A system that provisions and manages a computing application hosted on an instance of a virtual machine may be referred to as a hosted service system. A hosted service system may be configured to provide automated administration of the computing application, replacing the administration tasks that would otherwise be performed by the customer when running in an on-premise production deployment. In addition, a hosted service system may be configured to provide encrypted networking and other services that are specific to the public virtualization environment and are designed to provide a secure integration fabric between a customer's own private data center and virtual instances of the computing application running within an insecure public virtualization service. The technology within an example hosted service system may hide the behavior of the underlying virtualization service and the insecure network environment, and provide instances of a computing application that are substantially indistinguishable (e.g., in terms of reliability, security, and performance) from local on-premise deployments of the computing application. An example computing application that a hosted service system may provision and manage is Adobe\u00ae LiveCycle\u00ae Enterprise Suite (ES) offered by Adobe Systems Incorporated (\u201cLiveCycle\u201d). It will be noted, that while embodiments of the hosted service system are described with reference to LiveCycle, the hosted service system may be utilized advantageously to provision and manage any computing application within a public virtualization space. Furthermore, while references are made to Amazon EC2 service, other virtualization services may be utilized.","For the purposes of this description, a computing application that is executing on a virtual instance of a machine may be referred to as a virtual instance or merely instance. When a virtual instance terminates abnormally or stops responding, an example system for performing failover and recovery may detect the failed state of the virtual instance and initiate a recovery sequence. A recovery sequence, in one embodiment, is to facilitate loading of a new virtual instance in a configuration that corresponds to the last valid saved state of the failed virtual instance. The system for performing failover and recovery may also be configured to notify a user that was in control of the failed virtual instance that the virtual instance has failed and that a new instance has been loaded in a restored state.","In operation, a user can access a provider's web site and request to launch a computing application that can be deployed remotely on a virtual instance of a machine (on a cloud) such that the user no longer is required to deploy the computing application locally, within their own data center, on their own hardware. A request may be triggered by a user, e.g., by activating a visual control such as a \u201cStart\u201d button presented on a web page. In response to such request, the generic instance of the requested computing application is provisioned on a cloud and then personalized in accordance with the specific user's requirements, as described in further detail below.","While a virtual instance is running on a cloud, it is being monitored via two separate mechanisms to assess the operational status of the virtual instance. One mechanism comprises periodically polling, from a hosted service system, a status application programming interface (API) provided by the virtualization service. Another mechanism comprises polling an agent associated with the computing application running on the virtual instance. These two mechanisms, in one example embodiment, facilitate a redundant, fault-tolerant test of the operational availability of the virtual instance. If either method returns information indicating that the virtual instance is running in a degraded state, or if either method indicates a connection failure, then the system for performing failover and recovery determines that the virtual instance has failed and initiates a recovery sequence that is described below.","In one embodiment, a recovery sequence is initiated after the virtual instance remained in a failed state for a predetermined number of sequential polling intervals. A threshold number of polling intervals may be made configurable. The system for performing failover and recovery transmits a failure notification message to the user that owns (or is in control of) the virtual instance. After the virtual instance has remained in a failed state for more than the threshold number of polling intervals the virtual instance is considered lost and automatic recovery is initiated. A forced shutdown command is issued to the failed virtual instance. The forced shutdown command is to halt the virtual instance if the virtual instance remains in communication with the hosted service system. A sequence for launching a new virtual instance is initiated, as described further below, and its launch configuration is set for a full system restore on boot using the last known good backup for the virtual instance. In one embodiment, the last backup taken prior to the detected failure is considered the last known good backup. Once the new instance has reached the running state, the user is notified that the automatic failover operation has taken place and that the new virtual instance running in a restored state is now available.","A sequence for launching a new virtual instance initiated automatically by the system for providing failover and recovery is similar to a sequence for launching a virtual instance in response to a request from a user. When a hosted service system receives a request to launch a computing application, a call is made to the application programming interface (API) associated with the virtualization service to trigger the loading of the machine image associated with the requested computing application. A request to launch a computing application may be triggered explicitly by a user or automatically, in response to detecting a failed virtual instance. The machine image is a read-only boot image for a virtual instance. The associated virtual instance launched on a cloud is loaded with the contents of the machine image. The virtual instances launched by the virtualization service are transient, meaning that they do not persist in any way after they are terminated. Thus, no changes that may be made to a virtual instance after booting are reflected in the associated machine image. The hosted service system may be configured to facilitate establishing a secure communications channel for communications with the virtual instance and for configuring a personalized state of the virtual instance over the secure communications channel as is described further below.","An example method and system to provision and manage a computing application hosted by a virtual instance of a machine (also referred to as merely \u201cvirtual instance\u201d) may be described with reference to an architecture diagram illustrated in . The architecture  may include a client computer system  and a hosted service system . In one example embodiment, the hosted service system  is to provision and manage an enterprise SaaS product (e.g., virtual instances of LiveCycle) utilizing a cloud-based computing service as a virtualization infrastructure. Cloud based computing services are shown in  as a virtualization service  and a network storage service . In one embodiment, a hosted service system  utilizes Amazon EC2 as a virtualization service and Amazon Simple Storage Service (Amazon S3) as a network storage service. The client computer system  and the hosted service system  may be in communication with each other via a communications network that may be a public network (e.g., the Internet).","The virtualization service  may load a virtual instance  running the computing application onto a cloud. The virtual instance  may be accessed by the client  via a browser application . As mentioned above, a user in control of the client computer system  may send a request to the hosted service system  to load the computing application. The request may be initiated via a user interface  provided by the hosted service system  to the client computer system  via the browser application .","The user interface , in one embodiment, provides both an end-user's and a system administrator's view of the virtual instance (that runs the computing application) and also permits issuing control operations to the virtual instance and permits viewing the resulting changes in the state of the computing application. For example, where the computing application is LiveCycle, an end-user may manipulate various electronic forms. The user interface  may also serve as a source of information for the hosted service system , including documentation, downloads, and support. The user interface , in one embodiment, uses Adobe\u00ae Flex\u00ae software, offered by Adobe Systems Incorporated, as the user interface technology for the implementation of the user interface. The user interface , in one embodiment, uses an XML (Extensible Markup Language)-based representational state transfer (REST) style secure communications protocol to synchronize its operations with a control server . A request to access the user interface  may be authenticated using one of a variety of authentication techniques.","The request from the client computer system  to load the virtual instance  is received at the control server , which responds to the request by activating an access interface  provided by the virtualization service . The control server , in one example embodiment, provides coordination between the components of the architecture , provides administration and monitoring of the virtualization service , and also may be configured to audit system usage and resource allocation with respect to the virtual instance . The control server  includes a database to store information pertaining to various aspects of system usage. The control server , in one embodiment, runs within a standard Hypertext Transfer Protocol Secure (HTTPS)-compliant web server and may be deployed as a publically accessible web application that is available outside a firewall. The control server , in one embodiment, is implemented using Ruby on Rails\u2122 technology.","The virtualization service  accesses the storage  of the network storage system  to obtain a machine image in order to load the associated virtual instance . The machine image can be uploaded to the network storage system by the control server  utilizing an access interface  provided with the network storage system . As mentioned above, the machine image obtained by the virtualization service  from the network storage system  permits the virtualization service  to load a generic virtual instance\u2014a virtual instance running the computing application in a state that is neither personalized for any particular user nor reflects any state that is different from a newly installed computing application. Personalization of a computing application, in one example embodiment, may reflect configuration data associated with a specific user or, e.g., associated with a specific state of the computing application. In order to facilitate launching the computing application in a state that reflects changes effectuated by a user with respect to the computing application during an earlier invocation of the computing application, the control server  may provide a launch configuration that reflects the updated state of the computing application. In an event of an automatic failover with respect to a failed virtual instance of the computing application, where it may be desirable to launch a restored virtual instance in a configuration that corresponds to the state that the computing application was in prior to the failure of the virtual instance , the control server  may provide a launch configuration that reflects the restored state of the computing application.","In order to facilitate personalization of the computing application running as part of the virtual instance, the control server  loads a public encryption key and a certain launch configuration onto the storage , which is accessible by the virtualization service , and provides additional information to the virtual instance  to permit the virtual instance  to configure the computing application to a desired state. The communications between the virtual instance  and the control server , after the public key and launch configuration have been retrieved from the storage , may include monitoring the state of the virtual instance  and providing additional information to the virtual instance . For example, the virtual instance  may request from the control server  the private encryption key. The control server  may also monitor the state of the virtual instance  as the personalization process progresses, and periodically update its database with the status of the personalization process. This monitoring continues after personalization is complete, for as long as the virtual instance  remains executing. Specifically, according to one embodiment, the control server  may include an instance status monitor  that monitors operational availability of the virtual instance  by polling an agent associated with the computing application and also polling an instance status API running on the virtual instance .","The hosted service system  further includes a secure networking client  to provide a bidirectional, encrypted, compressed connection between a machine in the end-user's secure network environment (e.g., the client computer system ) and a virtual instance running within the virtualization infrastructure (the virtual instance ). The networking client  manages various aspects of transmission control protocol (TCP) traffic forwarding, encryption, and network discovery, such that the user can access the virtual instance  as if it was running locally on the user's machine. In this mode, the user's network security envelope is extended to surround the virtual instance  using comparable levels of encryption and protection against network security threats.","An example system to manage a computing application running on a virtual instance may be discussed with reference to .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 2","FIG. 2"],"b":["200","200","220","250","260","270","220","224","222","226","230"]},"The agent  is provided to permit communications between the virtual instance  and the network storage system , the client computer system , and the control server . The agent  includes an operating system (OS) adapter  to facilitate communication between the agent  and the operating system  and an application interface  to facilitate communications between the computing application  and the agent . A network storage interface  is configured to facilitate communications between the network storage system  and the agent . A network component  is configured to facilitate communications between the client computer system  and the agent . A web server  is configured to facilitate communications between the control server  and the agent .","The control server , in one example embodiment, is a web server that provides a web application architecture, in which objects are modeled within a relational database and actions performed on those objects are methods within a set of controllers. Example controllers include a site controller, an EC2 controller, and an administration controller. The site controller supports the user interface and handles all command functions. The EC2 controller acts as an adapter to the Amazon EC2 API and handles commands directed to the virtual instance . The EC2 controller also monitors the state of the virtual instance . As shown in , the control server  comprises an instance status monitor  (that may be configured as part of the EC2 controller) that polls, the agent  to obtain information provided by an agent status monitor  and also polls an instance status interface  provided by the virtualization service  of .","The administration controller supports several asynchronous background operations that run periodically to monitor usage, resource limits, and the state of Amazon's EC2 service and the virtual instance running within it. These controllers operate upon object models including a user object, an instance object, and an image object. The user object represents each authenticated user within the hosted service system . The instance object monitors all aspects of the state of the virtual instance . The image object represents an EC2 AMI within the hosted service system  and is used to translate command requests to start instances into actual running instances within EC2. Some components of the control server  may be described with reference to .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 3","FIG. 3","FIG. 1"],"b":["300","300","120","310","320","330","340","350","310","320","330","120","340","340","350"]},"The control server  may further include a backup monitor . The backup monitor , in one example embodiment, may be configured to monitor backup operations performed by the virtual instance and to store data indicating a location of a backup object generated by the backup operation. The backup object may be used to restore the state of the computing application the next time the same user requests that the computing application is instantiated on a cloud. The backup monitor  may be implemented as an administration controller discussed above with reference to .","In one example embodiment, the control server  may be configured to detect whether a request from the client computer system to instantiate a computing application indicates that the computing application is to be loaded in a default state or in a persisted, previously stored state. If the request indicates that the computing application is to be loaded in a previously stored state, the encryption module  pushes a private decryption key onto the virtual instance. The private decryption key may be used by the virtual instance for decrypting an encrypted backup object stored at the network storage system.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4","b":"400"},"The method  may be performed by processing logic that may comprise hardware (e.g., dedicated logic, programmable logic, microcode, etc.), software (such as run on a general purpose computer system programmed to perform particular functions pursuant to instructions from program software or on a dedicated machine), or a combination of both. The processing logic, according to example embodiments, may reside in any of the modules shown in  and . The modules illustrated in  and  may be implemented as software, hardware, or a combination of both.","As shown in , the method  commences with operation , where the hosted service system  of  generates a machine image that can be used by the virtualization service  of  to load a virtual instance including a computing application. The hosted service system  stores the generated machine image on the network storage system  of . At operation , the control server  of  receives a request to instantiate the computing application. At operation , the control server  requests that the virtualization service  loads a virtual instance comprising a virtual computing system hosting the computing application. At operation , the control server  provides a public encryption key to the network storage system . As explained above, the public encryption key is used for establishing a secure communication channel between the hosted service system  and the virtual instance. At operation , a launch configuration (e.g., in a form of a file) is generated based on the request from the client computer system. The control server  provides the launch configuration to the network storage system . The control server  communicates with the virtual instance via the secure communications channel established between the hosted service system  and the virtual instance at operation . The secure communications channel makes it possible to secure the configuration and the state of the virtual instance within a public virtualization provider such as the virtualization service . At operation , the control server  proceeds with facilitating access to the computing application running on a cloud.","As mentioned above, the control server  of  may be configured to detect whether a request from the client computer system to instantiate a computing application indicates that the computing application is to be loaded in a default state or in a persisted, previously stored state. In one embodiment, the control server  may include a failover and recovery system  configured to detect that a virtual instance has failed or is running in a degraded state and initiate an automatic failover process. The failover and recovery system  may be used to facilitate restoring a failed virtual instance to a last knows operational state of the failed virtual instance. Some of the modules included as part of the failover and recovery system  are described below with reference to .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 5","FIG. 5","FIG. 1","FIG. 2","FIG. 2"],"b":["500","500","510","520","530","510","130","510","512","225","130","514","243","230"]},"The instance failure detector  may be configured to detect that the virtual instance has failed or is running in a degraded or failed state and is thus to be considered a failed virtual instance. The failover module  may be configured to facilitate launching a new virtual instance in a recovered state that reflects a last known operational state of the failed virtual instance. As mentioned above, an automatic recovery sequence may be initiated in response to determining that the virtual instance remained in a failed state for a predetermined number of polling intervals.","The failover and recovery system  further comprises a recovery configuration module , a forced shutdown module , and a notification generator. The recovery configuration module  may be configured to provide a recovery launch configuration to the network storage system  of . The recovery launch configuration may include an instruction to restore the last known operational state of the failed virtual instance. The last known operational state of the failed virtual instance may be reflected in a backup object generated as a result of a backup operation performed by the failed virtual instance prior to the failure and stored at the network storage system . The forced shutdown module  may be configured to issue a forced shutdown command to the failed virtual instance in response to the instance failure detector . The notification generator  may be configured to generate a notification of the failure to be transmitted to the owner of the failed virtual instance and also to generate a notification of the launching of a new virtual instance that is running in a restored state. Example operations performed by the failover and recovery system  are discussed below with reference to .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 6","FIG. 1","FIG. 3","FIG. 5","FIG. 1","FIG. 3","FIG. 5"],"b":["600","600"]},"The method  commences at operation , when a virtual instance of a computing application is launched on a cloud. At operation , the instance status monitor  of  periodically tests operational availability of the virtual instance by polling an instance status interface  of  provided by the virtualization service  of  and by polling an agent status monitor  provided with the computing application . A backup of a current state of the virtual instance is generated periodically at operation  and stored at the network storage system  of .","At operation , the instance failure detector  of  detects that the virtual instance is running in a degraded state or that one of the polling methods fail to connect. The virtual instance may be designated as a failed instance after the virtual instance remained in a failed state for a predetermined number of polling intervals. At operation , upon concluding that the virtual instance has entered a failed state, the failover module  of  facilitates restoring a last known operational state of the failed virtual instance. Various operations performed during the process of restoring a last known operational state of the failed virtual instance are discussed with reference to .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 7","FIG. 1","FIG. 3","FIG. 5","FIG. 1","FIG. 3","FIG. 5"],"b":["700","700"]},"As shown in , at operation , the notification generator  of  notifies a user that the virtual instance has entered a failed state. The automatic recovery process is initiated at operation . At operation , the forced shutdown module  of  issued a forced shutdown command to halt the execution of the virtual instance. At operation , the recovery configuration module  of  generates a recovery launch configuration reflecting a full system restore on boot, using the last known operational backup for the virtual instance. The launching of a new virtual instance in a secure manner is facilitated at operation . In one embodiment, the launching of a new virtual instance in a secure manner may be performed according to a method described with reference to . At operation , it is determined that the new virtual instance was launched using the recovery launch configuration and that the new virtual instance has reached a running state. The notification generator  notifies the user that the new virtual instance is available at operation .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 8","b":"800"},"The example computer system  includes a processor  (e.g., a central processing unit (CPU), a graphics processing unit (GPU) or both), a main memory  and a static memory , which communicate with each other via a bus . The computer system  may further include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)). The computer system  also includes an alphanumeric input device  (e.g., a keyboard), a user interface (UI) cursor control device  (e.g., a mouse), a disk drive unit , a signal generation device  (e.g., a speaker) and a network interface device .","The disk drive unit  includes a computer-readable (or machine-readable) medium  on which is stored one or more sets of instructions and data structures (e.g., software ) embodying or utilized by any one or more of the methodologies or functions described herein. The software  may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by the computer system , the main memory  and the processor  also constituting machine-readable media.","The software  may further be transmitted or received over a network  via the network interface device  utilizing any one of a number of well-known transfer protocols (e.g., Hyper Text Transfer Protocol (HTTP)).","While the machine-readable medium  is shown in an example embodiment to be a single medium, the term \u201cmachine-readable medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-readable medium\u201d shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention, or that is capable of storing or encoding data structures utilized by or associated with such a set of instructions. The term \u201cmachine-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, optical and magnetic media. Such medium may also include, without limitation, hard disks, floppy disks, flash memory cards, digital video disks, random access memory (RAMs), read only memory (ROMs), and the like.","Thus, method and system method for performing failover and recovery of a computing application hosted by a virtual instance of a machine have been described. The embodiments described herein may be implemented in an operating environment comprising software installed on a computer, in hardware, or in a combination of software and hardware. Although embodiments have been described with reference to specific example embodiments, it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["Embodiments are illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
