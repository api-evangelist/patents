---
title: Visual administrator providing java management bean support
abstract: A method, apparatus, and system are provided for a visual administrator providing Java management bean (MBean) support. According to one embodiment, a representation of a plurality of MBeans is displayed on a graphical user interface of a computing device. One of the plurality of MBeans may be selected with the graphical user interface. In an embodiment, an attribute of the selected MBean is accessed with the graphical user interface. In an embodiment, an operation of the selected MBean is invoked with the graphical user interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07661066&OS=07661066&RS=07661066
owner: SAP AG
number: 07661066
owner_city: Walldorf
owner_country: DE
publication_date: 20040326
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["Embodiments of the invention generally relate to the field of system resource monitoring and more particularly, to a visual administrator providing Java management bean support.","Many businesses are providing access to their products and services through computer networks. The Java 2 Enterprise Edition Specification v1.3, published on Jul. 27, 2001 (the J2EE Standard) defines an increasingly popular architecture for the server-side of enterprise computer networks. As these computer networks become more complex, there is an increased need for improved administration, monitoring, and management of enterprise computer networks.","An emerging standard, JSR-000003 Java Management eXtensions (JMX), version 1.2 (hereinafter, the JMX Specification), provides a standardized way to manage arbitrary Java resources in enterprise computer networks. The JMX Specification describes a management architecture, an Application Program Interface (API), and a number of services for Java enabled applications. Together, these elements provide a standardized way to manage arbitrary Java resources.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1","b":["110","120","110","112","114"]},"Agent level  includes MBean server . MBean server  provides a registry for MBeans  and  and also an interface between registered MBeans and distributed services level . Management applications (e.g., in distributed services level ) may access services provided by MBean server  to manipulate MBeans  and . The services provided by MBean server  may be defined by the JMX Specification and may include a monitoring service, a timer service, and a relation service for registered MBeans. Non-java objects may also register with MBean server  if they have a Java wrapper. The term \u201cJava wrapper\u201d refers to data that proceeds or frames a non-Java resource so that the non-Java resource can interface with a Java resource.","Distributed services level  provides an interface between management applications (not shown) and MBean server . Management applications may connect to MBean server  through a variety of means including connector  and protocol adaptor . Connector  may provide an interface to management applications that complies with the JMX Specification or it may provide an interface for proprietary management applications. Protocol adaptor  translates operations between MBean server  and well-known protocols such as, Request For Comments (RFC) 2617 entitled, \u201cHyperText Transport Protocol (HTTP) Authentication: Basic and Digest Access Authentication,\u201d June 1999 (Hereinafter, the HTTP Protocol). The JMX Specification, however, does not provide a mechanism to change attributes and\/or execute operations on MBeans with a graphical user interface.","A method, apparatus, and system are provided for a visual administrator providing Java management bean (MBean) support. According to one embodiment, a representation of a plurality of MBeans is displayed on a graphical user interface of a computing device. One of the plurality of MBeans may be selected with the graphical user interface. In an embodiment, an attribute of the selected MBean is accessed with the graphical user interface. In an embodiment, an operation of the selected MBean is invoked with the graphical user interface.","Embodiments of the invention are directed to a visual administrator providing Java management bean (MBean) support. According to one embodiment, a representation of a plurality of MBeans is displayed on a graphical user interface of a computing device. One of the plurality of MBeans may be selected with the graphical user interface. In an embodiment, an attribute of the selected MBean is accessed with the graphical user interface. In an embodiment, an operation of the selected MBean is invoked with the graphical user interface.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["200","206","206","206","212"]},"According to one embodiment, monitor service  may gather and maintain data related to monitored resources such as monitoring data . Monitoring data  may provide a history of monitoring data which may be used to provide alerts when various resources, such as parameters, applications, or components reach a critical state. In an embodiment, the features of JMA  may enabled or disabled depending on administrative commands provided by, for example, visual administrator .","According to one embodiment, JMA  may include monitoring service  and one or more JMX-based monitor servers (JMX monitors). Monitoring service  may help establish a connection between a JMX monitor and the various components of JMA . In one embodiment, the JMX monitors may reside and work on separate or remote Java virtual machines (JVMs) to collect data from cluster elements, and report information and statistics regarding the cluster nodes and their components to, for example, visual administrator  having a monitor viewer , and\/or to CCMS  via CCMS agent , and to various other third party tools. CCMS , visual administrator , and other third party tools may reside generally on client side , while other components, as illustrated, may reside on server side .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3","FIG. 2"],"b":["300","302","310","314","206","302","220","214","216","216","302"]},"The data collected may include information and statistics related to, for example, applications, server parameters, cluster nodes and their components of the J2EE engine. According to one embodiment, the collected data may also be reported to CCMS  via CCMS agent , and\/or to third party tools . In one embodiment, third party tools  include a file system to, for example, temporarily store the collected data in a specified file format, for example, an Extensible Markup Language (\u201cXML\u201d) format or a HyperText Markup Language (\u201cHTML\u201d) format. The collected data may subsequently be reported to the components on client-side  (e.g., in an XML or HTML format).","According to one embodiment, the expected overhead of JMA  may vary according to its functionality. For example, the overhead may be light when reporting to CCMS  or third party tools , as opposed to when reporting to visual administrator . Furthermore, the larger the requesting and\/or reporting interval of monitor server , the smaller the expected overhead may be. The expected overhead may be relatively higher when using monitor viewer  to actively retrieve and view the monitoring data.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 4","b":["400","400","402","404","408","400","410","410","202"]},"According to one embodiment, managed beans (or simply, MBeans or beans) (e.g., runtime managed beans or resources beans -) may be used to provide continuous monitoring of various resources - associated with a Java 2 Platform, Enterprise Edition (J2EE) engine. Resources - may include a kernel, services, interfaces, and libraries for dispatchers and servers, such as dispatcher  and servers -.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 5","b":["514","500","520","500","514","508","504"]},"According to one embodiment, JMA  provides monitoring of a Java 2 Platform, Enterprise Edition (J2EE) engine (e.g., J2EE engine , shown in ), and its associated resources , including but not limited to various managers, services, components, such as a kernel, interfaces, libraries for each of the dispatchers and servers, network connections, memory consumption, threads, classloaders, database connections, database transactions, HyperText Transport Protocol (\u201cHTTP\u201d) cache, Java Messaging Service (\u201cJMS\u201d) queues and topics, and sessions.","To monitor resources , JMA  may employ monitor service  having modules, servers, and\/or interfaces to connect the monitoring side with the rest of JMA , including central database  and client-side applications, such as visual administrator  and CCMS . The monitoring architecture may include a managed bean server (bean server) , a plurality of monitor managed beans (monitor beans)  and\/or runtime managed beans (runtime beans) . In one embodiment, runtime beans  register with bean server  to provide monitoring of underlying resources  at runtime. Bean server  may include a container for monitor beans  and runtime beans , to provide them access to various resources  and management applications , .","To provide Java objects (e.g., monitor beans  and runtime beans ) to various applications ,  and to use bean server  for such purposes, applications ,  may be made available via the distributed services level (e.g., distributed services level , shown in ) of the JMX-based architecture (e.g., JMA ). For example, well-known protocols such as HTTP may be used to communicate with bean server  via an appropriate protocol adapter that may translate operations into representations in a given protocol. In addition, one or more connectors may be used to communicatively couple the applications ,  to bean server  using a proprietary protocol.","JMA  may be distributed across the three levels of the JMX architecture including a distributed services level, an agent level, and an instrumentation level. The instrumentation level may include, for example, monitor and runtime beans , . The agent level may include, for example, bean server . The distributed services level may include, for example, various applications , , adaptors, and connectors.","According to one embodiment, various Java resources  at the agent level may be included as an external library. A JMX service module (jmx_service) may provide some of the functionality from the distributed services level, and may create an instance of bean server  on each of the nodes in one or more clusters and provide local and cluster connections to all of them. Monitor beans  may be registered clusterwide. As such, a user or client may work with bean server  transparently (e.g., from the user's perspective there may appear to be only one bean sever  showing all monitor beans  of the cluster). In addition, to receive JMX notifications clusterwide, a notification service module (jmx_notification) may be employed in combination with the JMX service.","Bean server  may include a registry of monitor and runtime beans -. Bean server  may also serve as a single entry point for calling monitor and runtime beans - in a uniform fashion from applications , , to monitor the resources , and to collect or gather the monitoring data or information associated with monitored resources . According to one embodiment, bean server  may reside at a particular Java virtual machine (JVM) and may call registered monitor and runtime beans - from the same JVM or other JVMs. According to one embodiment, bean server  may, in fact, be multiple managed bean servers. According to one embodiment, various modules of monitor service  may reside on the same JVM (e.g., with bean server ). In an alternative embodiment, the various modules of monitor service  may reside on separate JVMs.","According to one embodiment, resources  including kernel resources, libraries, interfaces, and services may be monitored using the runtime and monitor beans - registered with the bean server . To monitor the resources , including arbitrary Java resources, and be manageable, a management interface may be provided, and objects (e.g., monitor bean  and runtime bean ) that implement such management interface may be registered with bean server . Bean server , as previously described, may then serve as a container for monitor bean  and runtime bean , and provide them with access to resources  to be monitored.","According to one embodiment, runtime bean  (also sometimes referred to herein as a \u201cresource\u201d bean) may provide continuous or periodic monitoring of resources  and may provide dynamic resource notifications or responses including information regarding resources  to each of the monitor beans . According to one embodiment, monitor service  may retrieve an Extensible Markup Language (XML) file , having semantics and installation directives on how monitor tree  is created, from database  to create monitor tree . Monitor tree  may then be generated with various nodes, such as node . Each of the nodes may include one or more monitor beans  associated with one or more resources .","According to one embodiment, monitor bean  at node  may request information regarding its associated resource  from the runtime bean  associated with the resource. For example, monitor bean  may invoke a method or request  during runtime to retrieve monitoring data from runtime bean , and runtime bean  may respond or provide a notification including the requested information  to monitor bean  regarding associated resource . According to another embodiment, information  regarding associated resource  may be provided periodically as predetermined and pre-set using timer . Timer  may include predetermined criteria including a predetermined time period for periodically providing information  from runtime bean  to monitor bean .","Monitor service  may include an administrative services interface to provide the monitoring data or information to, for example, administrative tools including visual administrator . The information received at visual administrator  may be displayed using a monitor viewer  including a Web-based monitor browser or Graphical User Interface (GUI)-based monitor viewer. Monitor service  may include other interfaces, such as a managed enterprise Java beans (\u201cMEJB\u201d) interface, to connect to remote third party tools, and a CCMS agent to connect to CCMS .","The MEJB of the MEJB interface may be implemented with a session Enterprise Java Bean (EJB). The MEJB may provide local and remote access to a platform's manageable resources through the EJB interoperability protocol. The MEJB may reside in and may be executed in a runtime environment (e.g., MEJB container), which may provide a number of common interfaces and service to the MEJB. The common interfaces and services may include security and transaction support. The MEJB interface may provide future scalability and allow multiple user interfaces to be used, such as a standard Web browser.","The managed beans, such as monitor and runtime beans -, may include the following two logical types of registered managed beans: (1) standard beans and (2) specific beans. Standard beans may provide standard functionality of start\/stop, get\/set properties, etc. Standard beans may be registered by default for all deployed components (e.g., kernel, libraries, interfaces, and services). Specific beans may provide component-specific functionalities that may vary from one component to another. To interface with a specific bean, a component may register an object that may implement a specific interface to list the processes available for its management and to extend the management interface (e.g., com.company.engine.frame.state. ManagementInterface).","According to one embodiment, for kernel resources, a standard bean may be registered with each manager having a specific bean. A prerequisite for this may be to return a non-null value in a method (e.g., getManagementInterface( )) from the manager interface. For libraries and interfaces, only standard beans may be registered. For services, except for the already registered standard beans, each of the services may register specific beans. Implementation of the management interface may also cause a specific bean to be registered for that particular service.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 6","FIG. 5"],"b":["530","514","516","526"]},"For example, according to one embodiment, using the monitor tree, the module developer may configure runtime beans  to monitor one or more resources  and provide monitoring information  to monitor beans  at a particular node  (or group of nodes). Monitoring information  may be provided continuously and\/or upon request  from monitor bean  associated with the underlying resource .","Associated resource  is associated with a particular monitor bean  to individualize the monitoring process (e.g., by receiving monitoring information about a particular resource rather information about all resources). Similarly, according to one embodiment, particular resources  may be associated with one or more runtime beans  to further individualize the process. Resources  may include the kernel, services, interfaces, libraries, and the like, for each of the dispatchers and servers associated with an application server engine (e.g., such as the Java 2 Platform, Enterprise Edition (J2EE) engine  described above).","As used herein, a \u201cJ2EE server\u201d may include distributed J2EE servers, including, for example, multiple instances of a group of redundant J2EE servers and a dispatcher. Associated resource  may refer to one of the resources  that is associated with monitor bean  at node  to, for example, allow monitor bean  to request monitoring information from runtime bean . The end result is a simplified distribution of monitoring information in the form of a monitor tree with individual nodes, as opposed to a system in which monitoring information must be centralized.","According to one embodiment, monitoring data  may then be provided to various client level applications, such as visual administrator  and\/or CCMS  via monitor service . According to one embodiment, monitor viewer  may be used to view the monitor tree (e.g., monitor tree , shown in ) and its various tree nodes and the monitoring information associated with the each of the nodes (e.g., node  and associated resource ). A user may select any of the nodes or resources shown as part of the monitor tree to view the monitoring data. According to one embodiment, a color or symbol combination may be used to determine the status of associated resources at various nodes. For example, a red\/green\/yellow combination may be used wherein, if associated resource  at node  is in a \u201cnormal\u201d state, a green mark may be shown next to it. If associated resource  approaches a critical value, the mark may turn yellow and once the associated resource  reaches the critical value, the mark may turn red. Additionally, the mark may be of a different color, such as white, when there is inactivity associated with the associated resource . However, the underlying principles of the invention are not limited to any particular color scheme.","According to one embodiment, monitor viewer  may be used to display other information related to the resources  including, for example, the name of the resource, the resource description, the resource type, relevant dates and\/or time, resource properties and values. The-information may also include data history regarding the resources . The data history may include, for example, values associated with the resource over different periods of time (e.g., over a minute, hour, day, . . . etc).","As mentioned above, according to one embodiment, XML file  may be retrieved by monitor service  from central database  to generate monitor tree . The XML file may include semantics and directives to generate the monitor tree using monitor service . An XML parser may be used to parse the semantics and directives of the XML file. Furthermore, a Java Management Extensions (JMX)-based application programming interface (API) may be used to create and customize the monitor tree. The monitor API may facilitate and handle both (1) the creation of the monitor tree and (2) the customization of the monitor tree as will as the reporting of the monitoring information and values. Typically, an API refers to a language or message format used by an application program to communicate with the operating system, communications protocols, and\/or with other control programs (e.g., database management systems).",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 7","b":["700","706","708","700","700","706","708"]},"Along with providing instrumentation of certain modules and components (e.g., libraries and interfaces), basic service  may also provide and facilitate registration of managed beans (beans)  with managed bean server (bean server)  via monitor service . Beans  may include monitor managed beans (monitor beans)  (including, e.g., monitor bean , shown in ) and runtime managed beans (runtime beans or resource beans)  (including, e.g., runtime bean , shown in ).","According to one embodiment, monitor beans  registered with bean server  using basic service  may be used for individual tree nodes (nodes) of monitor tree . Each of the monitor beans  may be used for reboot and shutdown, as well as for defining the type of nodes (e.g., dispatcher or server type nodes) and the resources associated with each of the nodes, for which monitoring information may be retrieved from runtime beans . Runtime beans  may be used for monitoring of all clusters and resources .","Basic service  may provide registration for the following two logical types of beans : (1) standard beans and (2) specific beans. Standard beans may provide standard functionality of start\/stop, get\/set properties, etc. Standard beans may be registered by default for all deployed components or resources (e.g., kernel, libraries, interfaces, and services). Specific beans may provide component-specific functionalities that may vary from one component to another. To have specific beans, a component may register an object that may implement a specific interface to list the processes available for its management and to extend the management interface (e.g., com.company.engine.frame. state.ManagementInterface).","For kernel resources, a standard bean may be registered with each manager having a specific bean. A prerequisite for this may be to return a non-null value in a method (e.g., getManagementInterface( )) from the manager interface. For libraries and interfaces, only standard beans may be registered. For services, except for the already registered standard beans, each of the services may register specific beans, and implementation of the management interface may also cause a specific bean to be registered for that particular service.","Adapter service  may be part of the distributed services level of JMA . Adapter service  may include or provide the following: (1) remote connector ; (2) convenience interface ; (3) swing-based Graphical User Interface (GUI) ; and (4) shell commands . By having remote connector , adapter service  may allow users to have remote access to the bean server  and seek monitoring information relating to one or more resources .","Convenience interface  may allow users to remotely access bean server  using remote administration tools. Remotely accessing bean server  may include remotely accessing and working with beans  as registered by basic service  based on the semantics of resources  that are instrumented and monitored by these beans . Stated differently, adapter service  provides a high-level view to bean server . The high-level view may be represented by a monitor tree, such as monitor tree . Furthermore, adapter service  may retrieve monitor tree  and provide interfaces to manage each type of node in monitor tree . By way of example, the node types within the monitor tree may include a root node representing the cluster (\u201cTYPE_CLUSTER_MBEAN\u201d), a basic cluster node type representing a node within the cluster (\u201cTYPE_CLUSTER_NODE_MBEAN\u201d), a standard MBean that instruments the kernel of a cluster node (\u201cTYPE_KERNEL_MBEAN\u201d), a standard MBean that instruments a service (\u201cTYPE_SERVICE_MBEAN\u201d), a standard MBean that instruments a library (\u201cTYPE_LIBRARY_MBEAN\u201d), a standard MBean that instruments an interface (\u201cTYPE_INTERFACE_MBEAN\u201d), a standard MBean that instruments a defined group of clusters (\u201cTYPE_GROUP\u201d), and all other MBeans (\u201cTYPE_UNSPECIFIED_MBEAN\u201d). It should be noted, however, that the underlying principles of the invention are not limited to any particular set of MBean types.","Swing-based GUI  may use convenience interface  and monitor tree  to represent the management functionality of JMA  to a human administrator. The console counterpart of the GUI administrator may consist of various shell commands  that may be grouped together in an administration command group.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 8","FIG. 5"],"b":["502","800","514","804","806","528","502","528","510"]},"The XML technology may be integrated with a Java 2 Platform Enterprise Edition (J2EE) engine (J2EE) (e.g., J2EE , shown in ) for electronic data interchange, due to XML's characteristics of being broad and relatively easy to use. To support and build the XML technology, including XML file , in the J2EE engine, a number of application programming interfaces (APIs), such as API , may be employed to use XML file  to configure various components and application modules. For example, XML file  may be used to facilitate components and modules of monitor service  to generate monitor tree .","According to one embodiment, API  may be a Java Management Extensions (JMX)-based API. Examples of Java APIs include, for example, J2EE XML API, Java API for XML Processing (JAXP), Java Messaging Service (JMS) API, Java API for XML Messaging (JAXM), Java Transaction API (JTA), Java API for XML-Remote Procedure Call (JAX-RPC), Java API XML Binding (JAXB), and Java API for XML Registries (JAXR). API  may facilitate and handle both (1) the creation of monitor tree  and (2) the customization of monitor tree  as will as the reporting of the monitoring information and values. Typically, an API refers to a language or message format used by an application program to communicate with the operating system, communications protocols, and\/or with other control programs (e.g., database management systems). According to one embodiment, multiple XML files may be used and similarly, multiple APIs may be used to generate monitor tree .","According to one embodiment, XML file  may include semantics  and directives  to help monitor service  with generating monitor tree . Semantics  of XML file  may include information about monitor tree , the monitor managed beans (monitor beans), and the resources to be monitored. Semantics  may include a code or a set of instructions for generating monitor tree . The set of instructions may include, for example, the instructions for setting the color-coded marks representing the corresponding status of the resources. For example, a green mark may indicate monitoring of the corresponding resource. A yellow mark may indicate continuous monitoring of the corresponding resource and may also indicate that the resource being monitored may be reaching a critical value or stage. A red mark may indicate that the corresponding resource may have reached a critical value. Finally, a white mark may indicate inactivity or that the corresponding resource is not being monitored.","According to one embodiment, directives  may specify the form in which monitor tree  may be generated. Stated differently, directives  may provide installation instructions for how semantics  are to be implemented. For example, directives  may include one or more templates to match various monitor beans with corresponding associated resources at various nodes of monitor tree . Monitor service  may use API  to use semantics  and directives  together to generate monitor tree .","Semantics  and directives  of XML file  may include elements (e.g., similar to HyperText Markup Language (HTML) tags) to provide context to the information (e.g., semantics  and directives ) of XML file . XML file  may be document-centric to be used by humans or data-centric to be used by another software application or module containing data extracted from a database, such as central database , and may be submitted to API . XML file  may include the following components: (1) a prologue at the beginning of XML file ; (2) elements or sequences of elements, as described above, containing data or other elements similar to the HTML tags; and (3) attributes associated with each of the elements to further qualify the elements.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 9","b":["528","528","514","528","804","806","528","902","528","906","528","902","804","806","528","902","906","528","906","528","906"]},"XML parser  may provide or include an application with access to the elements (as described with reference to ) of XML file  to establish a link between XML file  and other components or modules, such as the application programming interface (API) , of JMA . According to one embodiment, API  may be used to further comprehend, develop, manipulate, and use XML file  for the purposes of implementation of XML file . API  may be used separately or in combination with XML parser . In an embodiment, API  may be part of XML parser . API  and XML parser  may provide another application or module, such as the application\/module (application) , to transform the XML file into its resulting and intended application including the monitor tree .","Application  may help facilitate the assignment of various monitor beans, including monitor bean , with their associated resources, including associated resource , at various nodes, including node . According to one embodiment, for the purposes of customizing monitor tree , API  may include a bootstrapper. The bootstrapper may include a code or a sequence of codes to initiate a relationship between a component agent and monitor bean . The customizing may refer to customizing monitor tree  according to the customizing data (e.g., thresholds, descriptions, etc.) that may be registered along with monitor bean .","According to one embodiment, application  may also be used to help facilitate the assignment of various runtime beans , with various resources. For example, application  may help runtime bean  implement a certain communication interface, based on a required or predetermined monitoring logic, coupled with the resources , using a component agent. The monitoring information from the resource  may be reported by runtime bean  to the component agent which may be later reported to monitor bean . A notification system may be employed for maintaining event-based communication between the component agent and runtime bean  when the monitoring data from the resources  becomes available.","XML file  may be parsed in several ways including using the Document Object Model (DOM), which reads the entire XML file  and forms a tree like structure, or using the Simple API for XML (SAX), which is regarded as an event-driven parser that reads XML file  in segments. API  may be a Java Management Extensions (JMX)-based API. Examples of Java or JMX-based APIs include J2EE XML API, Java API for XML Processing (JAXP), Java Messaging Service (JMS) API, Java API for XML Messaging (JAXM), Java Transaction API (JTA), Java API for XML-Remote Procedure Call (JAX-RPC), Java API XML Binding (JAXB), and Java API for XML Registries (JAXR).","Turning now to , the particular methods associated with embodiments of the invention are described in terms of computer software and hardware with reference to a flowchart. The methods to be performed by a visual administrator providing Java management bean support may constitute state machines or computer programs made up of computer-executable instructions. Describing the methods by reference to a flowchart enables one of ordinary skill in the art to develop such programs including such instructions to carry out the methods on suitably configured computing devices (e.g., one or more processors of a node) executing the instructions from computer-accessible media. The computer-executable instructions may be written in a computer programming language or may be embodied in firmware logic. If written in a programming language conforming to a recognized standard, such instructions can be executed on a variety of hardware platforms and for interface to a variety of operating systems. In addition, embodiments of the invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein. Furthermore, it is common in the art to speak of software, in one form or another (e.g., program, procedure, process, application, etc.), as taking an action or causing a result. Such expressions are merely a shorthand way of saying that execution of the software by a computing device causes the device to perform an action or produce a result.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 10","FIG. 5","FIG. 12"],"b":["1010","504"]},"In an embodiment, the plurality of MBeans are organized as a tree structure having a root node (e.g., monitor tree , shown in ). In one embodiment, the root node is an MBean representing the cluster of application servers. The tree structure may include one or more server nodes depending from the root node. In such an embodiment, each server node may be an MBean representing a server within the cluster of application servers.","In one embodiment, each server node may have a depending kernel node. The term \u201ckernel\u201d refers to a fundamental part of a program that provides basic services. In such an embodiment, the kernel node is an MBean representing the kernel of the server node from which it depends. In an embodiment, a library node depends from at least one of the server nodes. In such an embodiment, the library node may represent a library of the server from which it depends. The term \u201clibrary\u201d refers to set of software routines (or functions) that may be accessed by a program.","In an embodiment, the tree structure may include a service node depending from at least one of the one or more server nodes. In such an embodiment, the service node may represent a service of the server from which in depends. The term \u201cservice\u201d refers to functionality derived from a particular software program. The functionality provided by a service may include, and is not limited to, lifecycle management, security, connectivity, transactions, and\/or persistence.","Referring to process block , the graphical user interface may be used to select one of the plurality of MBeans. In an embodiment, \u201cselecting an MBean\u201d refers to receiving an indication from a pointing device that an MBean has been selected. Similarly, \u201cselecting an MBean\u201d may refer to receiving an indication from a keyboard that an MBean has been selected.","Referring to process block , the graphical user interface (GUI) may access an attribute of the selected MBean. As described above, MBeans may have one or more attributes. Examples of attributes include items of information that are exposed for monitoring purposes, state information about an MBean, and\/or arguments provided to an MBean. In one embodiment, a GUI within a visual administrator (e.g., monitor viewer , shown in ) may interface with a monitor service (e.g., monitor service , shown in ) to access an attribute of a selected MBean (e.g., tree node , shown in ).","Referring to process block , the GUI may invoke an operation of the selected MBean. As described above, the term \u201coperation\u201d may refer to a process that an object (e.g., an MBean) performs. In an embodiment, the selected MBean may perform operations such reading a monitored value, changing a threshold value, starting a process, stopping a process, resetting a value to null, etc. In one embodiment a GUI within a visual administrator (e.g., monitor viewer , shown in ) may interface with a monitor service (e.g., monitor service , shown in ) to invoke an operation of the selected MBean (e.g., tree node , shown in ).",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 11","b":["1100","1100","1110","1120","1130","1140","1150","1170","1110","1120"]},"JMA  enables computing device  to access and manipulate an MBean with a graphical user interface. JMA  may be executable content, control logic (e.g., ASIC, PLD, FPGA, etc.), firmware, or some combination thereof, in an embodiment of the invention. In embodiments of the invention in which JMA  is executable content, it may be stored in memory  and executed by processor(s) .","Memory  may encompass a wide variety of memory devices including read-only memory (ROM), erasable programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), random access memory (RAM), non-volatile random access memory (NVRAM), cache memory, flash memory, and other memory devices. Memory  may also include one or more hard disks, floppy disks, ZIP disks, compact disks (e.g., CD-ROM), digital versatile\/video disks (DVD), magnetic random access memory (MRAM) devices, and other computer readable media that store instructions and\/or data. Memory  may store program modules such as routines, programs, objects, images, data structures, program data, and other program modules that perform particular tasks or implement particular abstract data types that facilitate system use.","One or more I\/O interfaces  may include a hard disk drive interface, a magnetic disk drive interface, an optical drive interface, a parallel port, serial controller or super I\/O controller, serial port, universal serial bus (USB) port, a display device interface (e.g., video adapter), a network interface card (NIC), a sound card, modem, and the like. System interconnection  permits communication between the various elements of computing device .","In one embodiment of the invention, the management techniques which are the focus of this application are used to manage resources within a cluster of server nodes. An exemplary application server architecture will now be described, followed by a detailed description of the management architecture and associated processes.","An application server architecture employed in one embodiment of the invention is illustrated in . The architecture includes central services \u201cinstance\u201d  and a plurality of application server \u201cinstances\u201d , . As used herein, application server instances,  and , each include a group of server nodes , ,  and , , , respectively, and a dispatcher, , , respectively. Central services instance  includes locking service  and messaging service  (described below). The combination of all of the application instances ,  and central services instance  is referred to herein as a \u201ccluster.\u201d Although the following description will focus solely on instance  for the purpose of explanation, the same principles apply to other instances such as instance .","Server nodes , ,  within instance  provide the business and\/or presentation logic for the network applications supported by the system. Each of the server nodes , ,  within a particular instance  may be configured with a redundant set of application logic and associated data. In one embodiment, dispatcher  distributes service requests from clients to one or more of server nodes , ,  based on the load on each of the servers. For example, in one embodiment, a dispatcher implements a round-robin policy of distributing service requests (although various alternate load balancing techniques may be employed).","In one embodiment of the invention, server nodes , ,  are Java 2 Platform, Enterprise Edition (\u201cJ2EE\u201d) server nodes which support Enterprise Java Bean (\u201cEJB\u201d) components and EJB containers (at the business layer) and Servlets and Java Server Pages (\u201cJSP\u201d) (at the presentation layer). Of course, certain aspects of the invention described herein may be implemented in the context of other software platforms including, by way of example, Microsoft .NET platforms and\/or the Advanced Business Application Programming (\u201cABAP\u201d) platforms developed by SAP AG, the assignee of the present application.","In one embodiment, communication and synchronization between each of instances  and  is enabled via central services instance . As illustrated in , central services instance  includes messaging service  and locking service . Message service  allows each of the servers within each of the instances to communicate with one another via a message passing protocol. For example, messages from one server may be broadcast to all other servers within the cluster via messaging service . In addition, messages may be addressed directly to specific servers within the cluster (e.g., rather than being broadcast to all servers).","In one embodiment, locking service  disables access to (i.e., locks) certain specified portions of configuration data and\/or program code stored within a central database . Locking managers  and  employed within the server nodes lock data on behalf of various system components which need to synchronize access to specific types of data and program code (e.g., such as the configuration managers  and ). As described in detail below, in one embodiment, locking service  enables a distributed caching architecture for caching copies of server\/dispatcher configuration data.","In one embodiment, messaging service  and locking service  are each implemented on dedicated servers. However, messaging service  and the locking service  may be implemented on a single server or across multiple servers while still complying with the underlying principles of the invention.","As illustrated in , each server node (e.g., , ) includes a lock manager ,  for communicating with locking service ; a cluster manager ,  for communicating with messaging service ; and a configuration manager ,  for communicating with central database  (e.g., to store\/retrieve configuration data). Although lock managers  and , cluster managers  and , and configuration managers  and  are illustrated with respect to particular server nodes,  and , in , each of the server nodes , ,  and  and\/or on the dispatchers ,  may be equipped with equivalent lock managers, cluster managers and configuration managers.","It should be appreciated that reference throughout this specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Therefore, it is emphasized and should be appreciated that two or more references to \u201can embodiment\u201d or \u201cone embodiment\u201d or \u201can alternative embodiment\u201d in various portions of this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures or characteristics may be combined as suitable in one or more embodiments of the invention.","Similarly, it should be appreciated that in the foregoing description of exemplary embodiments of the invention, various features of the invention are sometimes grouped together in a single embodiment, figure, or description thereof for the purpose of streamlining the disclosure aiding in the understanding of one or more of the various inventive aspects. This method of disclosure, however, is not to be interpreted as reflecting an intention that the claimed invention requires more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive aspects lie in less than all features of a single foregoing disclosed embodiment. Thus, the claims following the detailed description are hereby expressly incorporated into this detailed description, with each claim standing on its own as a separate embodiment of this invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the invention are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which like reference numerals refer to similar elements.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2","b":"200"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3","b":"300"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4","b":"400"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11","b":"1100"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
