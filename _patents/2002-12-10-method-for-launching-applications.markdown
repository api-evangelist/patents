---
title: Method for launching applications
abstract: An originating application in a process plant is able to launch multiple desired applications, with one or more of the desired applications having a different application programming interface. In one example, the originating application is able to launch multiple desired applications via an application launcher program. The originating application provides the application launcher program with an indication of the desired application to be launched, and the application launcher program then launches the indicated desired application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07600234&OS=07600234&RS=07600234
owner: Fisher-Rosemount Systems, Inc.
number: 07600234
owner_city: Austin
owner_country: US
publication_date: 20021210
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE DISCLOSURE","BACKGROUND","SUMMARY OF THE DISCLOSURE","DETAILED DESCRIPTION"],"p":["The present disclosure generally relates to process plants, and, more particularly, to launching applications from an originating application in a process plant.","Process plants, like those used in chemical, petroleum, manufacturing or other processes, typically include one or more process controllers communicatively coupled to one or more field devices via analog, digital or combined analog\/digital buses. The field devices, which may be, for example, valves, valve positioners, switches and transmitters (e.g., temperature, pressure and flow rate sensors), are located within the process environment and perform process functions such as opening or closing valves, measuring process parameters, etc. Smart field devices, such as the field devices conforming to a well-known fieldbus protocol (e.g. the Foundation Fieldbus protocol, the HART protocol, etc.) may also perform control calculations, alarming functions, and other control functions commonly implemented within the controller. The process controllers, which are also typically located within the plant environment, receive signals indicative of process measurements made by the field devices and\/or other information pertaining to the field devices and execute a controller application that runs, for example, different control modules which make process control decisions, generate control signals based on the received information and coordinate with the control modules or blocks being performed in the field devices, such as HART and Foundation Fieldbus field devices. The control modules in the controller send the control signals over the communication lines to the field devices to thereby control the operation of the process.","Information from the field devices and the controller is usually made available over a data highway to one or more other hardware devices, such as operator workstations, personal computers, data historians, report generators, centralized databases, etc., typically placed in control rooms or other locations away from the harsher plant environment. These hardware devices run applications that may, for example, enable an operator to perform functions with respect to the process, such as changing settings of the process control routine, modifying the operation of the control modules within the controller or the field devices, viewing the current state of the process, simulating the operation of the process for the purpose of training personnel or testing the process control software, keeping and updating a configuration database, etc.","As an example, control systems, such as the DeltaV\u2122 control system sold by Emerson Process Management, may include multiple applications stored within and executed by different hardware devices located at diverse places within a process plant. For instance, a control system may include a configuration application that resides in one or more workstations. The configuration application may enable users to create or change process control modules and download these process control modules via a data highway to dedicated distributed controllers. The configuration application may also allow a designer to create or change user interfaces which are used by a viewing application to display data to a user and to enable a user to change settings, such as set points, within the process control routine.","Similarly, the control system may include a configuration database application that may be executed, for example, by the same workstation(s) which execute the configuration application, or by a different hardware device coupled to the data highway. The configuration database application may store the current process control routine configuration and data associated therewith in a configuration database. Also, the control system may include a data historian application that may be executed by a data historian device. The data historian application controls the data historian device to collect and store some or all of the data provided across the data highway.","Additionally, a control system may include controller applications that may be stored and executed on a dedicated controller and, in some cases, field devices. A controller application may run control modules, which have been assigned and downloaded to the controller or field device, to implement actual process control.","Further, a control system may include viewing applications that may be executed on one or more operator workstations. A viewing application may receive data, for example, from a controller application via a data highway and display this data to process plant designers, operators, or users using user interfaces. The user interfaces may provide any of a number of different views, such as an operator's view, an engineer's view, a technician's view, etc.","As another example, management systems, such as the AMS predictive maintenance software sold by Emerson Process Management, may interact with one or more smart field devices to read the device, block, parameter, variable, or configuration information associated with those devices. Typically, a management system may reside on one or more operator workstations having appropriate communication ports which allow it to interconnect to, communicate with, and reconfigure a smart device. Management systems may be on-line, that is, have a hard-wired or any other permanent connection with a smart device. Management systems may also be portable and be capable of being periodically connected to a smart device to reconfigure or troubleshoot problems with that smart device.","Management systems typically perform a wide variety of functions with respect to smart devices within a system. For example, management systems may be used to provide users with information (e.g., values of variables or parameters) pertaining to the state of a process and to each of the smart field devices associated with or connected to the process. Management systems may also be used to enable a user to monitor a process and control the process by reconfiguring smart devices within the process as necessary.","A management system may include one or more core applications as well as add-on applications provided, for example, by individual smart device manufacturers to implement changes on, and read data from, a particular smart device. A core application may, for example, include a graphical user interface that provides hierarchical views of devices in a plant or process. A core application may also, for example, provide a base functionality for interfacing with certain devices. For instance, a core application may permit a user to configure and\/or read data from HART devices at a generic level. An add-on application may, for example, permit a user to configure and\/or read data from devices that communicate via protocol other than that (those) supported by a core application. Also, an add-on application may, for example, permit a user to configure and\/or read data from devices at level beyond the generic level supported by a core application. Further, management systems may utilize other applications such as word processing programs, spreadsheet programs, internet browsing programs, etc. For example, a management system may utilize an internet browsing program to display on-line maintenance documents made available by a device manufacturer.","Applications in a process plant often launch other applications. For example, a management system may launch a first application provided by a first smart device manufacturer to configure a first smart device. Also, the management system may launch a second application provided by a second smart device manufacturer to configure a second smart device. Similarly, a management system may launch a web browser to display a web page that provides information about a particular device.","Various applications to be launched often do not share a common or consistent application program interface (API). Therefore, an originating application that launches multiple other applications, often includes multiple custom launching mechanisms. Developing such multiple launching mechanisms can be cumbersome and time consuming. Additionally, if it is desired to provide a new application that can be launched from an existing originating application, a new custom launching mechanism is typically developed, and the originating application modified to include the new custom launching mechanism.","The examples described herein are generally related to launching desired applications via an originating application in a process plant. It may be desired for an originating application to be able to launch multiple desired applications, with one or more of the desired applications having a different application programming interface. In one example, the originating application is able to launch multiple desired applications via an application launcher program, subroutine, object, etc. The originating application provides the application launcher program, subroutine, object, etc. with an indication of the desired application to be launched, and the application launcher program, subroutine, object, etc. then launches the indicated desired application.","A convenient user interface may be used to configure the process plant application to launch multiple desired applications via the application launcher program. In one example, a user may be prompted to indicate at least one desired application. For instance, the user may be prompted to specify a name of an executable file of a desired application, and may also be prompted to specify a location (e.g., a path) of the executable file. Additionally, the user may be prompted to indicate a component in a process plant, with which the at least one desired application is to be associated. In the case of a management system application, the user may be prompted to specify a device type with which the desired application is to be associated. Then, the at least one desired application may be associated with the at least one component. For instance, an indication of the desired application may be stored in a file associated with a specified component of the process plant.","For ease of illustration, some of the following examples are described in the context of a management software application in a process plant. It will be appreciated by one of ordinary skill in the art, however, that the techniques described herein can be used in other aspects of a process plant such as a control system application, a device or equipment management application, a simulation application, documentation system, work order management system, enterprise resource planning system, procurement system, etc.","System Overview",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 1","FIG. 1"],"b":["10","10","12","14","16","18","20","10","12","14","16","12","14","16","22","23","24","12","14","16","18","20","18","20","30","12","14","16","22","23","24","18","20"],"i":["a","a","a ","a","a ","a ","a ","a "]},"Generally speaking, the workstations and of the nodes  and  may be used to store and execute applications used to configure and monitor the process plant , and to manage devices ,  in the process plant . Further, a database  may be connected to the data highway  and operate as a data historian and\/or a configuration database that stores the current configuration of the process plant  as downloaded to and\/or stored within the nodes , , ,  and .","Each of the controllers , and , which may be by way of example, the DeltaV controller sold by Emerson Process Management, may store and execute a controller application that implements a control strategy using a number of different, independently executed, control modules or blocks. The control modules may each be made up of what are commonly referred to as function blocks wherein each function block is a part or a subroutine of an overall control routine and operates in conjunction with other function blocks (via communications called links) to implement process control loops within the process plant . As is well known, function blocks typically perform one of an input function (such as that associated with a transmitter, a sensor or other process parameter measurement device), a control function (such as that associated with a control routine that performs PID, fuzzy logic, etc. control), or an output function which controls the operation of some device (such as a valve, to perform some physical function within the process plant ). Of course hybrid and other types of function blocks exist and may be utilized. While a fieldbus protocol and the DeltaV system protocol may use control modules and function blocks designed and implemented in an object oriented programming protocol, the control modules could be designed using any desired control programming scheme including, for example, sequential function block, ladder logic, etc. and are not limited to being designed using function block or any other particular programming technique. As is typical, the configuration of the control modules as stored within the process control nodes ,  and  is stored in the configuration database  which is accessible to applications executed by the workstations and ","In the system illustrated in , the field devices  and  coupled to the controllers , and may be standard 4-20 ma devices, or may be smart field devices, such as HART, Profibus, or Foundation Fieldbus field devices, which include a processor and a memory. Some of these devices, such as Foundation Fieldbus field devices (labeled with reference number  in ), may store and execute modules, or sub modules, such as function blocks, associated with the control strategy implemented in the controllers , and . Of course, the field devices ,  may be any types of devices, such as sensors, valves, transmitters, positioners, etc. and the I\/O devices  may be any types of I\/O devices conforming to any desired communication or controller protocol such as HART, Foundation Fieldbus, Profibus, etc.","A management application may be stored on and executed by one or more of workstations and .  is a block diagram of example workstation (workstation may comprise a same or similar device). The workstation may include at least one processor , a volatile memory , and a non-volatile memory . The volatile memory may include, for example, a random access memory (RAM). The non-volatile memory may include, for example, one or more of a hard disk, a read-only memory (ROM), a compact disk ROM (CD-ROM), a digital versatile disk (DVD), a FLASH memory, etc. The workstation may also include an input\/output (I\/O) device . The processor , volatile memory , non-volatile memory , and I\/O device  may be interconnected via an address\/data bus . The workstation may also include at least one display  and at least one input device . The input device may include, for example, one or more of a keyboard, a keypad, a mouse, etc.","The display  and the input device  are coupled with the I\/O device . Additionally, the workstation is coupled with the data highway via the I\/O device . Although I\/O device  is illustrated in  as one device, it may comprise several devices.","A management application may be stored, for example, in whole or in part, in the non-volatile memory  and executed, in whole or in part, by the processor .","Application Launcher Overview",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 3","FIG. 3"],"b":["100","100","100","104","108","112","104"]},"In a management system, an add-on application  may be, for example, an application, provided by a manufacturer of a device, that permits communication and configuration resources for a device for which the core application  does not provide such resources. Similarly, an add-on application  may be, for example, an application, provided by a manufacturer of a device, that permits communication and configuration resources for a device beyond those provided by the core application . In a management system, a custom application may be, for example, an application developed by an end user that provides a level of communication and configuration resources not provided by a core application  or an add-on application .","The process plant application  may also utilize one or more general purpose applications , such as a word processing application, a spreadsheet application, a web browsing application, etc. The process plant application  may further include an application launcher program .","An application, such as core application , can launch applications, such as add-on applications , custom applications , and general purpose applications , via the application launcher program . In the example illustrated in , core application  uses application launcher program  to launch other applications such as add-on applications , custom applications , and general purpose applications . The core application , however, need not use application launcher  to launch every application. Additionally, in some examples, other applications besides core application  may utilize the application launcher program  or a separate application launcher program (not illustrated) similar to application launcher program . For example, an add-on application  may launch a general purpose application  via a separate application launcher program (not illustrated).","Each of the add-on applications , the custom applications , and the general purpose applications , potentially, may have a unique API. Thus, by utilizing the application launcher program , the core application  may launch multiple applications, having multiple APIs, via potentially only a single API.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 4","FIG. 4","FIG. 5"],"b":["150","180","120","184"]},"At block , an originating application  launches the application launcher program . The originating application  may be, for example, a core application of a process plant application. When launching the application launcher program , the originating application  may provide to the application launcher program  an indication of the particular desired application  to be launched. Additionally, the originating program  may provide to the application launcher program  an indication of startup parameters which may be used to launch the desired application . It will be appreciated by one of ordinary skill in the art that the indication of the desired application  and the indication of startup parameters may be a single indicator or multiple indicators.","The launching of the application launcher program  and the providing of the indicator or indicators of the desired application  and the startup parameters may be performed according to an API of the application launching program . It will be appreciated by those of ordinary skill in the art that the API of the application launching program  may be designed to match a portion of the API of the originating application  that corresponds to program launching.","At block , the application launching program  may utilize the indicator or indicators of the desired application  and the startup parameters to retrieve information  related to launching the desired application  according to the API of the desired application . The information  may include, for example, a file name of the desired application , a location of the desired application  (e.g., a path name), startup parameters to be provided to the desired application  in an order and syntax according to the API of the desired application  (e.g., a command line), etc. The information  may be stored, for example, in a file, database, etc., such that the application launching program  can use the indicator or indicators of the desired application  and the startup parameters to retrieve the information . The indicator(s) may include, for example, a file name in which the information  is stored, a location within a file, a database query for retrieving the information  from a database, a URL, an XML document, a HTTP GET, etc.","At block , the application launcher program  utilizes the information  to launch the desired application according to an API of the desired application . If startup parameters are provided, the desired application  may be considered to be launched \u201cin-context.\u201d For example, if the desired application  is a web browser, the web browser may be launched displaying a particular web page.","Configuring the Process Plant Application",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 6","b":["200","204"]},"At block , the user may be prompted to provide a file name and a location of an executable file of the desired application. At block , the user may be prompted to provide startup parameters for the desired application. The types of startup parameters that may be provided may be determined, in part, by the API of the desired application. Additionally, the user may specify, for example, an ordering, a syntax, etc., of the startup parameters that correspond to the desired application's API.","At block , the user may be prompted to specify one or more components in a process plant with which the desired application should be associated. For instance, in a control system application, the user may specify one or more of a controller, a module, a device, etc., used in a process. In a management system application, the user may specify, for example, a specific device, a device type, etc.","At block , the desired application and the startup parameters may be associated with the one or more components (which the user was prompted to specify at block ). For instance, a text file may be created that includes the file name and path of the executable file and the startup parameters to be used in launching the desired application. The text file may be given a unique name that can be associated with the component(s) (which the user was prompted to specify at block ).","At block , the process plant application may be configured to reflect the association between the desired application (which the user was prompted to specify at block ) and the component(s) (which the user was prompted to specify at block ). For instance, an originating application of the process plant application may be configured to provide a user interface mechanism for initiating a launch of the desired application. The user interface mechanism may be associated with the component(s). As a specific example, a menu associated with the component(s) may be configured to include an item having the descriptive name which the user was prompted to specify at block . Continuing with the example described with reference to block , the menu item may be associated with the text file that includes the file name and path of the executable file and the startup parameters to be used in launching the desired application.","Configuring a Management System Application",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIGS. 7-9","FIG. 6","FIG. 7","FIG. 6","FIG. 6","FIG. 6"],"b":["204","208","212","216","250","204","208","212","254","258","262"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 8","FIG. 6"],"b":["270","212","272","272","274","274","272","272","274","274","270","276","276","278","274","274"],"i":["a","m ","a","m ","a","m","a","m","a","m ","a","m"]},"Using user interface , a person may specify an appropriate syntax for passing information to the desired application. For instance, using boxes -, -, and -, a user may add spaces, delimiters, and\/or quotation marks and create a \u201ccommand line\u201d that includes the parameters in the appropriate syntax. Box  may provide the user with a view of the command line as it is being created so, for example, the user can verify that the correct syntax is being used.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 9","FIG. 6"],"b":["290","216","290","292","296","298","296","292","292","298"],"i":["a ","a","a","a. "]},"The user interface  may also include a list  of devices and\/or device types that have been selected to be associated with the desired application. The user may use button to \u201cdeselect\u201d all of the devices and\/or device types in list . Additionally, the user may highlight one or more individual devices and\/or device types in list , and the select button to \u201cdeselect\u201d those devices and\/or device types.","Because the user interfaces , , and  may permit a user to associate a desired application with a device type, the user, in effect, may be able to associate the desired application with, potentially, multiple devices. Thus, the user need not associate the desired application with each device, individually. In other examples, the user may be permitted to associate desired applications with individual devices.","Continuing with the example described with reference to , associating the desired application and startup parameters with the one or more devices (block  of ) may include storing an indication of the association in a file, such as a configuration file. If the management system application is implemented with a WINDOWS\u2122 operating system available from Microsoft Corporation (e.g., WINDOWS XP\u2122, WINDOWS 2000\u2122, WINDOWS NT\u2122, etc.), indication(s) of the association may be stored, for example, in an INI file and\/or a Registry file. For instance, the information obtained via the user interface described with reference to  may be stored in an INI file.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 10","FIG. 6"],"b":["320","224","324"]},"In one specific example, the desired application's executable file and path may be stored in a file. Additionally, parameters assembled into a command line via, for example, a user interface such as user interface  () may also be stored in the file.","At block , an originating application of the management system application is configured to include one or more user interface mechanisms for initiating a launch of the desired application. For instance, if the user specified one or more device types via user interface  (), and the process or plant includes multiple devices of that type or types, multiple user interface mechanisms corresponding to the multiple devices may be included.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 11","FIG. 11"],"b":["350","354","358","354","354","358","354","358"]},"In this example, a user has specified, via user interfaces , , and  () that a desired application with the descriptive name \u201cValve Documentation\u201d is to be associated with various device types including device type \u201cDVC5000.\u201d In , the device \u201cFC-4000,\u201d which is of the type \u201cDVC5000,\u201d has been selected. In this example, the originating application has been configured to include a menu item  in a menu associated with devices of the type \u201cDVC5000.\u201d The menu  can be displayed, for example, by selecting device \u201cFC-4000\u201d with an activation of a left mouse button, and then activating a right mouse button.","As is well known to those of ordinary skill in the art, for applications designed for a WINDOWS\u2122 type operating system, the originating application may be configured to provide one or more user interface mechanisms, such as a menu item, by modifying a configuration file, such as an INI file associated with the origination application, or a \u201cregistry\u201d file.","At block , the originating application may be configured to launch the application launcher program upon activation of the user interface mechanism (block ). Additionally, the originating application may be configured to launch the application launcher program with the information formatted at block . Continuing with the example described with reference to block , the originating application may be configured, when launching the application launcher program, to indicate to the application launcher program the name and location of the file created at block . As is well known to those of ordinary skill in the art, for applications designed for a WINDOWS\u2122 type operating system, the originating application may be so configured by modifying a configuration file, such as an INI file associated with the origination application, or a \u201cregistry\u201d file.","Launching the Desired Application",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 12","FIG. 12","FIGS. 11 and 13"],"b":"400"},"At block , a user may activate a user interface mechanism in an originating application. Referring again to , the user may, for example, select a menu item such as menu item . At block , based on the activated user interface mechanism, the originating application may determine that an application launcher program should be launched. For example, if a menu item is selected by a user, the originating application may determine, based on the selected menu item, that the application launcher program should be launched.","Referring now to , the originating application  may examine a first file, registry, etc., or portion of a file, registry, etc., (first file ) associated with the menu item selected at block . The first file  may provide the executable file name and path of the application launcher program, thus indicating that the application launcher program should be launched.","Referring again to , at block , the originating application may determine, based on the user interface mechanism activated at block , an indicator or indicators of a desired application to be launched and of startup parameters for the desired application. For example, if a menu item is selected by a user, the originating application may determine, based on the selected menu item, an indicator or indicators of a desired application to be launched and of startup parameters for the desired application. In one particular example, the originating application may examine a configuration file or a portion of a configuration file, a registry file, etc., associated with the menu item. This configuration file, registry file, etc., may include a file name and path of another file. This other file may include information regarding the desired application, as well as startup parameters for the desired application.","Referring again to , the originating application  may examine the first file  associated with the menu item selected at block . The first file  may provide a file name and path of a second file . The second file may include the executable file name and path of the desired application to be launched. Additionally, the second file may include startup parameters for the desired application in a format according to the API of the desired application. For example, the startup parameters may be in a format assembled using the user interface  of .","Referring again to , at block , the originating application may launch the application launcher program according to the standard API of the originating application (or a non-standard API). Additionally, the originating application may provide, via the API of the application launcher program, the indicator(s) of the desired application to be launched and its startup parameters. In the example of , the originating application  may launch the application launcher program , and provide it the name and path of the second file .","At block , the application launcher program may determine the desired application to be launched, based on the indicator(s) provided at block . In the example of , the application launcher program  may determine the desired application  by examining the second file . At block , the application launcher program may determine the startup parameters for launching the desired application, based the indicator(s) provided at block . In the example of , the application launcher program  may determine the startup parameters by examining the second file .","At block , the application launcher program may launch the desired application according to the API of the desired application. Additionally, the application launcher program may provide startup parameters to the desired application, according to the API of the desired application. In the example of , the application launcher program  may launch the desired application specified in the second file . Additionally, the application launcher program  may provide to the desired application the startup parameters provided in the second file . The startup parameters may be formatted in the second file  according to the API of the desired application. For instance, a user may use a user interface such as user interface  of  to assemble a \u201ccommand line\u201d that is formatted according to the API of the desired application.","If the startup parameters include arguments (e.g., Device ID, Device Type, etc.), the application launcher program may determine the value of those arguments, and then, for example, may include those values in the command line. In one example, the originating application (or some other application) may pass the values of a set of arguments (e.g., all arguments, all arguments that could possibly be used by the application launcher program, all arguments that it has been determined that the application launcher program will need, etc.) to the application launcher program upon startup. Also, the originating application (or some other application) may store the values of the set of arguments in a file. Then, when the application launcher needs values of particular arguments for launching a desired application, the application launcher program may determine those values by retrieving the needed values from the set of values passed to the application launcher program, or stored in the file. Then, the application launcher program may provide the values of those arguments to the desired application via the API of the desired application.","One of ordinary skill in the art will recognize that an application launcher program may be implemented as a separate program from the originating application, or as a subroutine, object, etc., of the originating application.","The methods described above may be implemented as software programs for execution by one or more processors. Such programs may be embodied in software stored on a tangible medium such as CD-ROM, a floppy disk, a hard drive, a digital versatile disk (DVD), or a memory associated with the processor, but persons of ordinary skill in the art will readily appreciate that the entire program or parts thereof could alternatively be executed by a device other than a processor, and\/or embodied in firmware and\/or dedicated hardware in a well known manner. Additionally, although the examples described above were described with reference to the flow diagrams of , , , and , persons of ordinary skill in the art will readily appreciate that many other methods of implementing these methods may alternatively be used. For example, the order of execution of the blocks may be changed, and\/or the blocks may be changed, eliminated, or combined.","While the invention is susceptible to various modifications and alternative constructions, certain illustrative embodiments thereof have been shown in the drawings and are described in detail herein. It should be understood, however, that there is no intention to limit the disclosure to the specific forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions and equivalents falling within the spirit and scope of the disclosure as defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features and advantages of the examples described herein will be best appreciated upon reference to the following detailed description and the accompanying drawings, in which:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
