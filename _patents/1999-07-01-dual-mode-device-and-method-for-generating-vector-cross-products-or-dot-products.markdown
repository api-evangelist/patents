---
title: Dual mode device and method for generating vector cross products or dot products
abstract: A dual mode device and method is provided for generating cross product or dot product from a pair of vectors. The dual mode device generates a cross product or a dot product from a first vector and a second vector. The first vector has a first set of components and the second vector has a second set of components. The device includes a dual mode controller and a dual mode unit. The dual mode controller receives the first and second vectors and is configured to select vector components for evaluating a cross product component or a dot product in response to a first signal. The first signal indicates whether to generate a cross product component or a dot product. The dual mode unit is coupled to receive the selected vector components and generates the cross product component or the dot product in response to the first signal.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06891538&OS=06891538&RS=06891538
owner: Microsoft Corporation
number: 06891538
owner_city: Redmond
owner_country: US
publication_date: 19990701
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application is related to U.S. patent application Ser. No. 09\/265,507 filed on the Mar. 9, 1999 and entitled \u201cMethod and Device for Generating Per-Pixel Values,\u201d by inventors David C. Tannenbaum et al. The application is incorporated herein by reference.","The present invention relates to the field of devices for generating vector products and, more particularly, to devices for efficiently generating vector cross products and dot products in computer graphics systems.","Rendering of realistic images (e.g., two- or three-dimensional images) is one of the main goals of graphics system designers. Rendering images of real or imaginary objects typically involves generating geometric models (e.g., polygons) of the objects and applying lighting effects to the polygonal surfaces. In computer graphics, surfaces of an object are generally modeled by a polygonal mesh, which is a collection of vertices, edges, and\/or polygons. A mesh of polygons may be produced from a variety of sources such as an application, tesselated NURBS surfaces, spheres, cones, etc. The vertices may be connected by edges and a sequence of edges or vertices may define one or more polygons.","Rendering of realistic 3D graphics requires accurate and efficient modeling of 3D surfaces based upon the position, orientation, and characteristics of the surfaces and the light sources illuminating them. In particular, the interaction between lights and surfaces must be modeled for rendering. To more accurately model lighting effects, conventional computer graphics systems have typically implemented shading techniques to generate light values at individual pixels using an illumination or lighting model.","Conventional lighting models typically model one or more lighting effects such as diffuse reflection, specular reflection, and spotlighting, each of which is typically determined by evaluating a dot product of two vectors. Diffuse reflection accounts for reflection of light from a surface, especially a dull, matte surface. The reflected light from the surface falls off approximately uniformly as a function of an angle between N and L, where N is the outward normal vector at a surface point and L is a light vector. The light vector L points in the direction from the surface point to the light source. The diffuse light fall-off in the diffuse reflection model is typically modeled by using a dot product term N\u25cfL.","Similarly, the specular reflection accounts for reflection of light off a shiny surface. When a light from a light source is reflected off a shiny surface, the reflected light is modeled as falling off exponentially from a direction of reflection vector R as seen from a direction of view vector V. For example, the fall-off may be modeled by cos\u03b1, where S is a surface material's specular-reflection coefficient and a is an angle between vectors R and V. In practice, a dot product term (N\u25cfH)is often used in place of cos\u03b1 to model specular reflection at a surface point, where N is a normal vector and H is a half-angle vector.","The spotlight model, on the other hand, adds a direction to a positional light source to allow modeling of directional lights. That is, a spotlight is a special type of light source that has a direction as well as a position. For example, a positional light source may function as a spotlight by restricting the shape of the light to a cone. The direction of the spotlight is the direction in which the light points. The spotlight thereby simulates a cone of light, which may have a fall-off in intensity based upon the distance from the center of the cone of light. As is well known in the art, a spotlight value is typically computed in accordance with a basic spotlight equation, spotlight=(S\u25cfL), where S represents a spotlight source direction vector, L represents the vector from a point on the surface to the light source, and exp is a spotlight exponent. The spotlight equation may also include other well-known variables such as attenuation, shadow, etc.","The diffuse, specular, and spotlight models are well known and: are described in greater detail in by James D. Foley et al., Addison-Wesley (1996), ISBN 0-201-84840-6, which is incorporated herein by reference. Additionally, the OpenGL\u2122 (versions 1.1 and 1.2) application programming interface (API) describes various lighting models such as spotlighting, diffuse light reflection, specular light reflection, and related parameters for implementing such models. The OpenGL\u2122 (versions 1.1 and 1.2) graphics application programming interface is commercially available from Silicon Graphics, Inc., the assignee of the present application, and is incorporated herein by reference.","Lighting models often include diffuse, specular, and spotlight units for evaluating the diffuse, specular, and spotlight values. For example, U.S. patent application Ser. No. 09\/265,507 entitled \u201cMethod and Device for Generating Per-Pixel Values\u201d by inventors David C. Tannenbaum et al. describes a lighting subsystem that includes a diffuse light unit, a specular light unit, and a spotlight unit, for determining the diffuse, specular, and spotlight values. Each of these units evaluates a dot product of vectors (e.g., N, L, S) for computing lighting values.","In computer graphics, however, evaluating light values often requires computing cross products of two vectors. For example, cross products are evaluated to find a vector that is at right angles, i.e., a normal vector, to two other vectors. The normal vectors such as N are routinely used in evaluating light values as described above.","A surface normal vector N at a point P (e.g., vertex, pixel, etc.) may be determined from a pair of vectors originating at the point to associated target points. Unless these vectors are parallel to each other, the vectors define a plane. In practice, the pair of vectors may be obtained by coordinates of the original point to the target coordinates of the associated vectors. Evaluating a cross product of these vectors yields a normal vector that may be used as a surface normal vector depending, for example, on the view direction and the order of the cross product.","Conventional computer graphics systems typically evaluate cross products by using general purpose processors or dedicated cross product units. These approaches, however, may degrade performance or add substantial cost. For example, given that normal vectors can be computed for thousands or even millions of points in a scene, employing the general purpose processors to evaluate cross products may significantly limit the performance of the computer graphics systems. On the other hand, using a cross product unit dedicated to evaluating cross products may be costly to implement within the limited die size of integrated circuit chips.","Thus, what is needed is a device and method for efficiently evaluating cross products of vectors without the performance penalty of the general purpose processors or the cost associated with dedicated cross product units.","Broadly speaking, the present invention fills these needs by providing a dual ode device and method for generating vector cross products or dot products. It should be appreciated that the present invention can be implemented in numerous ways, including as a process, an apparatus, a system, a device, a method, or a computer readable medium.","In one aspect of the invention, the dual mode device generates a cross product or a dot product from a first vector and a second vector. The first vector has a first set of components and the second vector has a second set of components. The device includes a dual mode controller and a dual mode unit. The dual mode controller receives the first and second vectors and is configured to select vector components for evaluating a cross product component or a dot product in response to a first signal. The first signal indicates whether to generate a cross product component or a dot product. The dual mode unit is coupled to receive the selected vector components and generates the cross product component or the dot product in response to the first signal.","The present invention advantageously provides a device and method that can efficiently evaluate a cross product or a dot product by using shared logic units such as multipliers and adders. By thus sharing resources for generating cross products and dot products, the dual mode device of the present invention significantly reduces the cost of the hardware needed to implement both dot product units and cross product units. At the same time, providing a dedicated dual mode device for evaluating cross product or dot product enhances performance without the performance penalty associated with using general purpose processors. The dual mode device and method may be implemented in any suitable manner. For example, by implementing the dual mode devices in conventional lighting units adapted to evaluate dot products, the present invention provides additional functionality at a minimal cost. Other aspects and advantages of the invention will become apparent from the following detailed description, taken in conjunction with the accompanying drawings, illustrating by way of example the principles of the invention.","Reference will now be made to the present preferred embodiments of the invention, examples of which are illustrated in the accompanying drawings. In the following detailed description of the present invention, which includes a dual mode device and method for generating vector cross products or dot products, numerous specific details are set forth to provide a thorough understanding of the present invention. It will be obvious to one skilled in the art, however, that the present invention may be practiced without these specific details. In other instances, well-known methods, procedures, components, and circuits have not been described in detail so as not to unnecessarily obscure certain aspects of the present invention.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1A","b":["100","102","104","102"]},"The signal SELECT indicates whether to generate a cross product vector component Cor a dot product A\u25cfB. Hence, the SELECT signal indicates the mode, either cross product or dot product mode, the device  is to operate in. On the other hand, the input signal COMP indicates the vector component C(e.g., x, y, or z cross product vector component) of a cross product to be determined. As will be described in more detail below, in response to the SELECT and COMP signals, the dual mode controller  selects components of the vectors A and B needed for evaluating the cross product component Cor dot product. The dual mode controller  may also apply or change signs of one or more selected vector components to subsequently effect a subtraction for computing the cross product component C.","The dual mode unit  is coupled to the dual mode controller  to receive the selected vector components and signal SELECT for generating either Cor dot product A\u25cfB. Specifically, the dual mode unit  operates in either a cross product mode or a dot product mode in response to SELECT signal. In a cross product mode, the dual mode unit  generates the cross product component Cwhile it generates dot product A\u25cfB in the dot product mode. As will be described in more detail below, the dual mode unit  includes one or more adders and multipliers that are used in evaluating both the dot products and cross product components.","Those skilled in the art will appreciate that the device  may also include a plurality of dual mode controllers and dual mode units for generating other cross product components in parallel. For example, the dual mode controller  and dual mode unit  may be used to compute an x-component Cx (i.e., AyBz\u2212AzBy) of cross product vector A{circumflex over (x)}B while other dual mode controllers and units are used to evaluate a y-component Cy (i.e., AzBx\u2212AxBz) and a z-component Cz (i.e., AxBy\u2212AyBx) of cross product vector A{circumflex over (x)}B. In addition, for computing all components of a cross product vector, the dual mode controller may also be configured to sequentially iterate through each of the components Cx, Cy, and Cz.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1B","b":["102","110","112","114","116"],"sub":"COMP "},"Then, in operation , all components of vectors A and B that are different from the component Cto be evaluated are selected for determining C. For example, for three-component vectors A and B having components (Ax, Ay, Az) and (Bx, By, Bz), respectively, components Ay, Az, By, and Bz are selected for computing x-component cross product Cx. The selected components Ay, Az, By, and Bz may be designated or labeled as Ai, Aj, Bi, and Bj, respectively. The following Table 1 tabulates selection of vector components and designation of the selected vectors as Ai, Aj, Bi, and Bj, where i and j are different from the component to be evaluated.",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"56pt","align":"center"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["COMP","Ai","Bj","Aj","Bi"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["x","Ay","Bz","Az","By"]},{"entry":["y","Az","Bx","Ax","Bx"]},{"entry":["z","Ax","By","Ay","Bx"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"After selecting the components for computing the cross product component C, a sign is applied or changed, in operation , for a component selected from either Aj or Bi. For instance, for computing x-component Cx, the sign of either Az or By may be changed to \u2212Az or \u2212By to implement the standard cross product equation. It should be noted that the sign of only one component, and not both components, is changed in this manner. The selected components are then output, in operation , to the dual mode unit  as Ai, Bj, \u2212Aj, and Bi for evaluating the cross product component C. Alternatively, the selected components may be output as Ai, Bj, Aj, and \u2212Bi.","If in operation , it is determined that the mode is not cross product, the method proceeds to operation , where all components of the vectors A and B are selected. All these components are then output, in operation , to the dual mode unit  for evaluating the dot product A\u25cfB. The method then terminates in operation .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1C","b":["104","104","152","154","156","158","162","152","154","156","102","152","154","154","158"],"sub":["COMP ","COMP"]},"On the other hand, when SELECT signal indicates dot product mode, multipliers ,  and  are used to multiply x-, y-, and z-components of vectors A and B. For example, multiplier  receives and multiplies x-components Ax and Bx to generate AxBx; multiplier  receives and multiplies y-components Ay and By to produce AyBy; and multiplier  receives and multiplies vector z-components Az and Bz to generate AzBz. Adder  receives and adds AxBx and AyBy from multiplier  and , respectively, to produce a sum (AxBx+AyBy). Adder  receives and adds product AzBz and the sum (AxBx+AyBy) from multiplier  and DEMUX , respectively, to generate a sum (AxBx+AyBy+AzBz), which is the dot product of vectors A and B.","In the dual mode device , the multipliers  and , and the adder  are used for evaluating both the cross product component and the dot product. By thus sharing resources for generating cross products and dot products, the dual mode device of the present invention significantly reduces the cost of the hardware needed to implement both dot product units and cross product units. For example, the implementation of the dual mode devices provides enhanced functionality at a minimal cost in conventional lighting units adapted to evaluate dot products. It should be noted also that the normalization logic already present for the dot product can be used for the cross product.","A dual mode device, in one embodiment, may include a dual mode unit  (e.g., sub-dual mode unit) for each of the components of a cross product vector C. For example,  shows a schematic block diagram of an exemplary dual mode device  for generating either cross product or dot product from a pair of vectors in accordance with one embodiment of the present invention. The vectors A and B include x, y, and z components. The dual mode device  includes a dual mode controller  and dual mode units , , and . The dual mode units , , and  are used to generate x-, y-, and z-components, respectively, of the cross product vector C during cross product mode. In addition, each of the dual mode units , , and  may be used to receive a pair of vectors such as A and B for evaluating a dot product in dot product mode.","The dual mode controller  receives vectors A, B, and signal SELECT that indicates whether to generate a cross product or dot product. Specifically, in response to SELECT signal, the dual mode controller  selects components of vectors A and B and routes the selected components to the dual mode units , , and  for evaluating cross product vector components, Cx, Cy, and Cz, respectively. The selection and routing of each of the vector components are carried out in a manner similar to the method described in FIG. B.","Dual mode devices of the present invention may be used in any applications where vector cross products or dot products are needed. For example, the dual mode devices may be used to generate cross or dot products used in electromagnetics, computer graphics, electromechanics, and any other applications that use such products. In a preferred embodiment, the dual mode devices of the present invention are used to evaluate cross products or vector products in computer graphics systems configured to generate diffuse light, specular light, and spotlight values.","For example, U.S. patent application Ser. No. 09\/265,507 entitled \u201cMethod and Device for Generating Per-Pixel Values,\u201d by inventors David C. Tannenbaum et al. describes an exemplary computer system that includes hardware units adapted to evaluate dot products for generating diffuse light, specular light, and spotlight values. The dual mode devices of the present invention may be implemented in the diffuse light, specular light, and spotlight units to generate cross products in addition to generating dot products.","By way of example,  illustrates a block diagram of an exemplary computer graphics system  within which the dual mode devices may be implemented or practiced. It should be borne in mind that the computer graphics system  is exemplary only and that the present invention can operate within a number of different computer system configurations including general purpose computer systems, embedded computer systems, and computer systems specially adapted to electronic design automation. In describing various embodiments of the present invention, certain processes and operations are realized as a series of instructions (e.g., software programs) that reside within computer readable memory units of computer graphics system  and are executed by processors therein.","The computer graphics system  may be any computer-controlled graphics system suitable for generating complex 2D or 3D images. The computer graphics system  includes a bus  for transmitting information between the various parts of the computer system. One or more processors  for processing information are coupled to the bus . The information, together with the instructions for processing the information, are stored in a hierarchical memory system comprised of a mass storage device , a read only memory (ROM) , and a main memory . The mass storage device  is used to store a vast amount of data and may include one or more hard disk drives, floppy disk drives, optical disk drives, tape drives, CD-ROM drives, or any number of other types of storage devices having media for storing data. The ROM  is used to store data on a permanent basis, such as instructions for the microprocessors. The main memory  is used for storing data on an intermediate basis and may be implemented as DRAM, SDRAM, RDRAM, or any other suitable memory for storing data for the computer graphics system .","A graphics subsystem  may be included in the computer graphics system . The processor  provides the graphics subsystem  with graphics data, such as drawing commands and primitives including coordinate vertex data (e.g., pixel color, surface normal vector N, light vector L, and view vector V), and other data related to an object's geometric position, color, texture, shading, and other surface parameters. A display device  is coupled to the graphics subsystem  to receive image data (e.g., pixel data) for display. Alternatively, the display device  may be coupled to the computer graphics system  via the bus .","Other devices also may be coupled to the computer graphics system . For example, an alphanumeric keyboard  may be used for entering commands and other information to processor  via the bus . Another type of user input device is cursor control device  (e.g., mouse, trackball, joystick, and touchpad) used for positioning a movable cursor and selecting objects on a computer screen.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 4","b":["312","402","404"]},"In operation , a range of allowable values for each component of vectors N and L may be defined for each of the vertices of the graphics primitive to save hardware in subsequent stages. Next, in operation , the graphics primitives are rasterized to generate a set of N and L vectors for each of the pixels within the primitives. Then in operation , the graphics subsystem  generates a cross product of the vectors N and L. The generated cross product vector is then stored in operation  to be used, for example, in evaluating light values. The method then terminates in operation .",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 5","b":["312","502","504","506","508","510","502"]},"For each of the vertices of the graphics primitives, the geometry subsystem  preferably defines a predetermined range of allowable values for each component of the N, L, and V vectors. For example, for the normal vector N, the x, y, and z components, Nx, Ny, and Nz, may be defined to be in the range of [\u22122,2), which specifies a range from \u22122 inclusive to 2. To ensure that each of the components of a vector falls within the predetermined range of allowable values, each of the components of the vector may be divided by the largest component of the vector. Consequently, the magnitude of any component of the N, L, and V vectors is assured to be within the predetermined range. Although the preferred embodiment defines a predetermined range, those skilled in the art will appreciate that the present invention also may be implemented without defining such a predetermined range.","The resulting graphics primitives (e.g., points, lines, polygons, etc.) are then provided to the rasterization subsystem , which is coupled to the geometry subsystem . The rasterization subsystem  converts the received graphics primitives into pixel data. In addition, the rasterization subsystem  rasterizes the graphics primitives to generate a set of N, L, and V vectors for each of the pixels within the primitives. At this stage, the rasterization subsystem  may also perform Z-buffering, blending, texturing, and antialiasing functions.","The lighting subsystem  is coupled to receive the pixel values such as vectors N, L, V, and S and material property values from the rasterization subsystem . As will be discussed in more detail below, the lighting subsystem  generates light values for each of the pixels on a per pixel basis in accordance with one of the embodiments of the present invention. The light values for each of the pixels are then transmitted to the display subsystem  and stored in the frame buffer . The display subsystem reads the frame buffer  and transmits the lighted pixel data values to the display device  for display. It should be noted that the frame buffer  may also be used by other subsystems (e.g., rasterization subsystem ) in the graphics subsystem  to perform assigned functions.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 6","FIG. 2"],"b":["506","506","602","604","606","608","610","602","604","200","604","604","606","608","610"]},"Each of the units , , and  receives and operates in response to SELECT signal indicating cross product mode to generate and output x-, y-, and z-components of the cross product. The diffuse light unit  computes an x-component Cx of the cross product of normalized vectors N and L in a log space (e.g., base-two log space). This facilitates normalization of the vectors as described in U.S. patent application Ser. No. 09\/265,507, which was previously incorporated by reference herein.","Similarly, the specular light unit  evaluates a y-component Cy of the cross product in the log space. Likewise, the spotlight unit  determines a z-component Cz of the cross product in the log space.","In one embodiment, each of the resulting products in the log space may then be used as an index to an anti-log base two function defined as x=2, where x is a desired output and y is the index. Preferably, the logarithm and anti-log functions are implemented by using lookup tables followed by linear interpolation. Although the use of linear interpolation is described herein, those skilled in the art will appreciate that other suitable interpolation techniques such as, for example, bi-cubic interpolation and other higher order interpolation techniques, also may be used. Furthermore, the components Cx, Cy, and Cz terms may be converted to a floating-point format with an exponent portion and a fraction portion. This conversion allows a maximum number of significant bits to be fed into a lookup table (e.g., 64-entry lookup table) by using the fraction as an index to the lookup table.","In accordance with one embodiment of the present invention, log or anti-log values over a predefined range, Xf in 1.ffff format (e g., [1.0,2.0)) are found by coding a lookup table and performing a lookup operation in the table. In particular, a floating-point number that includes a fraction part and an exponent part may be employed to perform the log table lookup and interpolation operation to convert the number into a log space. The log and anti-log tables may be implemented by having positive or, more preferably, negative arguments as indices of the tables. A portion of the fraction part may be used as an index to the lookup table that tabulates log values corresponding to a predetermined range of the floating-point number.","For example, the high-order six bits in a 16-bit fraction may be used to select an entry in a lookup table. Then, the remaining fraction bits are used to determine a log or anti-log value corresponding to the fraction by interpolating between the selected entry and the next entry. In an alternative embodiment, the log or anti-log values of a fraction may be determined by performing only a table lookup operation. In this case, the lookup table is provided with a number of entries sufficient to obtain the desired output precision.","The log space and floating-point formats may be used to compute normalized cross product components with improved precision. By way of example,  shows a flowchart of a method performed by the specular light unit  to generate a normalized cross product component Cy. In operation , normalized vector L and unnormalized vector N are received, preferably in a Cartesian coordinate format: Nx, Ny, and Nz; Lx, Ly, and Lz. In one embodiment of the invention, each component is received in S1.14 format.","The method then proceeds to two parallel branches of operations. Specifically, in operation , a value of NON is determined by computing NN=Nx+Ny+Nz, which yields the magnitude of vector N. At the same time, the y-component value (i.e., inner product) of the cross product is determined in operation  by computing Cy=(NzLx\u2212NxLz). The computed values NN and Cy are preferably in fixed-point formats such as U4.28 and S4.28, respectively, where S signifies a sign bit and U signifies an unsigned number.","The computed values NN and Cy are then converted from the fixed-point formats to floating-point formats in parallel in operations  and , respectively. For example, NN may be converted from the fixed-point format U4.28 into a floating-point format that includes an exponent portion eand a fraction portion f. Similarly, Cy may be converted from a fixed-point format S4.28 into a floating-point format that includes an exponent portion eand a fraction portion f. Then, in operation , the fraction part fis converted into a log space using a table lookup and interpolation process. Similarly, the fraction part fof the y-component Cy is also converted, in operation , into the log space by a table lookup and interpolation process.","In operation , normalized inner product Cy is computed by a log arithmetic operation by computing a difference term {log(Cy)\u2212[(\u00bd)*log(NN)]}. In one embodiment, the logarithms of Cy and NN can be determined in accordance with the equation log(X)=Xe+log(Xf). For example, the exponent ey may be shifted left by 16 places and the log(f) value may then be appended for e. Similarly, the exponent emay be shifted 15 places for NN exponent ewith log(f) appended. These shifts result in appending 16 fraction bits to the right of the binary point for eand 15 fraction bits for e. The difference of 1 fraction bit is provided to effectively divide eby two. Subtracting one-half of eeffectively results in dividing by the square root in the original non-log space, thus affecting the vector normalization.","In operation , the normalized component Cy in the log space is converted back into the original number space format by an anti-log table lookup and interpolation process. Preferably, the original number space is a non-log space, which may be any number space other than the logarithm space. The method then terminates in operation . The x- and z-components, Cx and Cz, can be generated using the diffuse light unit  and the spotlight unit  in a similar manner.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 8","b":["608","608","802","804","802","804","802"]},"The log space converter  includes a dot product unit , a dual mode device , fixed-to-floating point converters  and , and a pair of log converters  and . The dot product unit  receives an unnormalized N vector and evaluates the dot product N\u25cfN by computing NN=Nx+Ny+Nz. On the other hand, the dual mode device  receives a normalized vector L and an unnormalized vector N and determines Cy by computing Cy=(NzLx\u2212NxLz).","The fixed-to-floating point converters  and  receive and convert fixed-point inputs NN and Cy, respectively, into a floating-point format. Specifically, the fixed-to-floating point converter  converts NN from a fixed-point format (e.g., U4.28) into a floating-point format that includes an exponent portion eand a fraction portion f. Likewise, the fixed-to-floating point converter  converts Cy from a fixed-point format (e.g., S4.28) into a floating-point format that includes an exponent portion eand a fraction portion f.","The log converter  receives the NN value and converts the fraction part finto log space (e.g., base-two log space) via a table lookup and interpolation process. Similarly, the log converter  receives the floating-point value fof the Cy value and converts the fraction part finto log space via a table lookup and interpolation process.","The pixel evaluator  includes a difference evaluator  and an anti-log converter . The difference evaluator  receives the log space values NN and Cy to compute normalized cross product component Cy in the log space. The difference evaluator  preferably computes the normalized Cy by computing a difference term, {log(Cy)\u2212[(\u00bd)*log(NN)]}. It should be noted that the subtraction operation in the log space is equivalent to the division operation in a non-log number space.","The anti-log converter  is configured to receive the normalized cross product component Cy in the log space for conversion. Specifically, the anti-log unit  converts the normalized cross product component Cy in the log space back into the original non-log number space format using an anti-log table lookup and interpolation process. The anti-log converter  then outputs the normalized cross product component Cy value in the original number space with enhanced precision. Those skilled in the art will recognize that the x- and z-components, Cx and Cz, of a cross product may be evaluated in a manner similar to the y-component, Cy, with minor modifications to the method and device shown in , respectively. The present invention thus provides a dual mode device and method that can generate vector cross products and dot products by sharing hardware resources. The invention has been described herein in terms of several preferred embodiments. Other embodiments and equivalents of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention. The embodiments and preferred features described above should be considered exemplary, with the invention being defined by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and form a part of this specification, illustrate embodiments of the invention and, together with the description, serve to explain the principles of the invention.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1C","sub":"COMP "},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
