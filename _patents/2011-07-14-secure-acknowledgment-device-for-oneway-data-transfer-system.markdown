---
title: Secure acknowledgment device for one-way data transfer system
abstract: An apparatus for relaying a hashed message from a first node to a second node, comprising an inlet interface for receiving a message from the first node, a hash number calculator for hashing the message from the inlet interface, an outlet interface for sending the hashed message to the second node, a first one-way data link for unidirectional transfer from the inlet interface to the hash number calculator, and a second one-way data link for unidirectional transfer from the hash number calculator to the outlet interface, is provided. The apparatus provides a secure mechanism and communication channel for relaying hashed acknowledgment messages from a receive node to a send node to inform the status of data transfer from the send node to the receive node across a one-way data link. The apparatus may be further implemented with the capability of comparing hashed messages from the two nodes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08732453&OS=08732453&RS=08732453
owner: Owl Computing Technologies, Inc.
number: 08732453
owner_city: Ridgefield
owner_country: US
publication_date: 20110714
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This U.S. non-provisional patent application claims priority from U.S. provisional patent application Ser. No. 61\/365,625 filed on Jul. 19, 2010, the content of which is incorporated herein by reference in its entirety.","The present invention generally relates to the security of data networks. More particularly, the present invention relates to a secure communication device for relaying acknowledgment messages in a one-way data transfer system.","Protection of a computer or data network from undesired and unauthorized data disclosure has been a perennial concern in the field of computer and network security. For example, firewall and anti-spyware software have been developed to address security concerns for computers and networks connected to the Internet and to protect them from possible cyberattacks such as Trojan horse-type viruses or worms that may trigger undesired and unauthorized data disclosure by these computers and networks. However, for high security computer networks such as those used by government agencies and intelligence communities and certain commercial applications, the conventional network security devices such as firewalls may not provide sufficiently reliable protection from undesired data disclosure.","Alternative network security methods and devices have been devised to address the network security concern. For example, U.S. Pat. No. 5,703,562 to Nilsen (\u201cthe '562 patent\u201d), the contents of which are hereby incorporated by reference in their entirety, provides an alternative way to address the network security concern. The '562 patent discloses a method of transferring data from an unsecured computer to a secured computer over a one-way optical data link comprising an optical transmitter on the sending side and an optical receiver on the receiving side. By providing such an inherently unidirectional data link to a computer\/data network to be protected, one can eliminate any possibility of unintended data leakage out of the computer\/data network over the same link.","One-way data transfer systems based on such one-way data links, including Dual Diode developed and marketed by Owl Computing Technologies, Inc., provide network security to data networks by isolating the networks from potential security breaches (i.e., undesired and unauthorized data flow out of the secure network) while still allowing them to import data from the external source in a controlled fashion.  schematically illustrates an example of one such Dual Diode one-way data transfer system. In the one-way data transfer system shown in , two computing platforms (or nodes)  and  (respectively, \u201cthe Send Node\u201d and \u201cthe Receive Node\u201d) are connected to the unsecured external network  (\u201cthe source network\u201d) and the secure network  (\u201cthe destination network\u201d), respectively. The Send Node is connected to the Receive Node by one-way data link , which may comprise, for example, a high-bandwidth optical fiber configured to operate as a unidirectional data gateway from the source network  to the secure destination network .","The one-way data transfer system described above may further comprise two specially configured Asynchronous Transfer Mode (ATM) network interface cards installed respectively in the Send Node and the Receive Node and respectively coupled to the ends of the high-bandwidth optical fiber. The interface card in the Send Node may be equipped only with components for phototransmission and the card in the Receive Node may be equipped only with components for photodetection, so that unidirectionality of data flow from the Send Node to the Receive Node across the optical fiber is physically enforced.","This configuration physically enforces one-way data transfer at both ends of the optical fiber connecting the Send Node to the Receive Node, thereby creating a truly unidirectional one-way data link between the source network  and the destination network  shown in . Unlike conventional firewalls, one-way data transfer systems such as Dual Diode based on a one-way data link are designed to transfer data or information only in one direction and it is physically impossible to transfer data or information of any kind in the reverse direction. No information or data of any kind, including handshaking messages such as those used in TCP\/IP, SCSI, USB, Serial\/Parallel Ports, etc., can travel in the reverse direction from the Receive Node back to the Send Node across the one-way data link. Such physically imposed unidirectionality in data flow cannot be hacked by a programmer, as is often done with firewalls. Accordingly, the one-way data transfer system based on a one-way data link ensures that data residing on the isolated secure computer or network is maximally protected from any undesired and unauthorized disclosure.","There exist other types of one-way data links that are capable of enforcing unidirectional data flow. For example, IP (Internet Protocol) architecture using standard firewalls or routers can be specially configured in various ways to enforce unidirectional data flow between two network domains or nodes. One example of such one-way data link is specially configured IP architecture that uses standard firewalls to enforce unidirectional flow of UDP (User Datagram Protocol) data packets between two network security domains corresponding to Send Node and Receive Node. In that configuration, a Receive Node may be protected by a standard firewall which is designed to accept only UDP data packets and deny all other service requests. Furthermore, a pair of additional firewalls that are joined back to back and positioned between the Send Node and the Receive Node may form a network guard capable of enforcing unidirectional flow of UDP data packets from the Send Node to the Receive Node. Preferably, this network guard is administered separately.","The unidirectionality of data flow in such configuration can be achieved as follows: The first firewall of the network guard which interfaces with the Send Node (which may also be protected by its own standard firewall) is designed to accept only UDP data packets from the Send Node and deny all other service requests from the Send Node. The second firewall of the network guard which interfaces with the firewall associated with the Receive Node is designed to deny all incoming service requests or data flow from the Receive Node. In this manner, the specially configured IP architecture based on standard firewalls may permit only unidirectional flow of UDP data packets from the Send Node to the Receive Node and denies any data flow from the Receive Node to the Send Node.","While a one-way data link provides excellent protection for data residing in the secure network as described above, its use raises a dilemma concerning data verification and data receipt acknowledgment capability which is critical in any data transfer system: In a one-way data transfer system based on a one-way data link, in the absence of any acknowledgment signal or message from the Receive Node, the Send Node cannot verify from the Receive Node the status and integrity of the data it sent to the Receive Node without giving up the unidirectionality of data flow and thereby compromising the security provided by use of one-way data links.","The conventional implementation of data verification schemes requires a way for the Receive Node to communicate to the Send Node information regarding the status and integrity of the data received by the Receive Node from the Send Node. This can be easily implemented in bi-directional communication environment. However, since a one-way data link allows only unidirectional communications from the Send Node to the Receive Node, a one-way data transfer system based solely on a one-way data link between the Send Node and the Receive Node cannot implement the data verification schemes without giving up the unidirectionality of data flow in the system.","The '562 patent addresses data verification for one-way data transfer systems based on a one-way data link by providing a \u201cwarning device\u201d coupled to the secured computer that \u201cemits\u201d a \u201cwarning signal\u201d when the secured computer detects error in data transmission over the one-way data link. As an example, the '562 patent suggests the use of \u201ca single long duration tone\u201d as the warning signal for error detection. (The '562 patent, Col. 4, lines 20-29, and FIG. 1.) However, while the '562 patent discloses that parity or checksum calculations or other conventional error detection calculations may be performed to detect any errors introduced during the repeated data transfer, it does not disclose or suggest any means for transmitting the result of such error detection calculations by the Receive Node to the Send Node so that the Send Node can compare the results and deduce the status and integrity of the transferred data from the comparison. Accordingly, the warning device as described in the '562 patent is not capable of maximally utilizing modern data verification schemes such as advanced hash algorithms.","This dilemma concerning data verification for one-way data transfer system based on a one-way data link is addressed by U.S. Pat. No. 7,675,867 to Mraz et al. (\u201cthe '867 patent\u201d), the contents of which are hereby incorporated by reference in their entirety. The '867 patent is directed to a one-way data transfer system with built-in data verification mechanism that is capable of maximally utilizing the power and benefits of the modern data verification schemes without compromising the level of security afforded by the use of one-way data links. Illustrated in  is a schematic diagram of an exemplary one-way data transfer system with built-in verification mechanism described in the '867 patent. The system  comprises a Send Node  coupled to the source network through a connection , a Receive Node  coupled to the destination network through a connection , and a Feedback Node . The Send Node  is connected to the Receive Node  by a one-way data link , the Receive Node  is connected to the Feedback Node  by a one-way data link , and the Feedback Node  is connected to the Send Node  by a one-way data link . As indicated by the arrow-bar symbols (only intended to symbolize the unidirectionality of data flow) in , the system  is designed to only allow unidirectional data flow from the Send Node to the Receive Node, from the Receive Node to the Feedback Node, and from the Feedback Node to the Send Node. This configuration described in the '867 patent allows no direct bilateral communication between any two of the Nodes.","One-way data links , ,  used in the system  can be of any types of data transfer conduit that are capable of enforcing unidirectional data flow. For example, each of the one-way data links , ,  may be implemented in hardware and comprise high-bandwidth optical fiber whose both ends are respectively coupled to two specially configured ATM network interface cards for enforcing unidirectional optical data flow as described earlier in connection with the Dual Diode product. Alternatively, one-way data links used in the system  may be implemented in software and comprise the specially configured IP architecture that use standard firewalls to enforce unidirectional transfer of, for example, UDP data packets, as described earlier. Alternatively, a combination of different types of one-way data link may be used in the system .","In , the Send Node  and the Receive Node  provide the main data transfer conduit from the source network via connection  across the one-way data link  to the destination network via connection . Thus, these Nodes may comprise high-throughput computing platforms capable of carrying out the data transfer.","On the other hand, the third node in the system , Feedback Node , can be a special-purpose machine or device that is designed solely for processing and relaying data verification information from the Receive Node  to the Send Node , all via one-way data links  and . Accordingly, the Feedback Node  may comprise a minimum capacity machine incapable of transferring any data or information other than specifically designated data verification information from the Receive Node  to the Send Node .","The Feedback Node  may be designed to be user-configurable. In other words, it can be configured by the user to explicitly limit and adjust the channel capacity of the feedback channel through the Feedback Node , and thus limit the channel capacity of the only covert channel data path available in the one-way data transfer system. This capability for users to configure the security characteristics of the one-way data transfer system to match their security requirements can be a powerful feature. Whatever the settings for the channel capacity of the Feedback Node , it would be necessary to configure the Send Node  in a complementary manner to avoid timeout problems which may occur, for instance, when the Send Node  issues a feedback verification request.","The data verification information used in the system  may be generated by advanced hash algorithm. The hash algorithm is a type of the modern data verification schemes and widely-used hash algorithms include MD5 and the Secure Hash Algorithm (SHA) such as SHA-1. Before describing the possible use of hash algorithms in the system , further description of the application of hash algorithms in the context of bilateral communications and one-way data transfer between the Send Node and the Receive Node are in order.","One possible implementation of the data verification scheme using hash algorithm in the context of bilateral communications between the Receive Node and the Send Node can be described as follows: When transferring data packets to the Receive Node, the Send Node applies the hash algorithm to the contents of each data packet and calculates a corresponding \u201chash\u201d number (i.e., the data is \u201chashed\u201d) and transmits it to the Receive Node along with the data packets. Upon receipt of the data packets from the Send Node, the Receive Node also calculates the hash numbers corresponding to the received data packets and compares them with the hash numbers calculated by the Send Node. If the hash numbers calculated by both Nodes match, then there is no error in the data transfer. However, if the hash numbers do not match, then the Receive Node may drop the data packets it has received and log an error in the data transfer and communicates the error message to the Send Node. Typically, the error message comprises the hash number calculated by the Receive Node so that the Send Node can compare it with the hash number which the Send Node originally calculated and deduce the status and integrity of the transferred data from the result of the comparison.","Advanced hash algorithms may also be used to verify data integrity during one-way data transfer between the Send Node and the Receive Node in the following manner: A Send Node calculates a hash number corresponding to the contents of data or a data packet to be transferred to a Receive Node. The Send Node then transfers the hash number along with the data. Upon receipt of the data and the hash number from the Send Node, the Receive Node calculates on its own a hash number corresponding to the contents of the data or data packet it received. In each case, the hash algorithm generates a unique hash number corresponding to the data or data packet upon which the algorithm is applied. Accordingly, if the hash number calculated by the Receive Node matches with the hash number originally calculated by the Send Node, then there is no error in the data transfer from the Send Node to the Receive Node since the match indicates that the data received by the Receive Node is identical to the data sent by the Send Node. However, if these two hash numbers do not match, there must have been an error in the data transfer and accordingly, the Receive Node logs an error and may drop the data it received from the Send Node.","The data verification scheme based on advanced hash algorithms may be implemented in the system  shown in  as follows: The Send Node  first calculates a hash number corresponding to the data to be transferred to the Receive Node  (\u201cHash Number \u201d). The Send Node additionally calculates a hash number corresponding to the foregoing hash number (\u201cHash Number \u201d).","Upon receipt of the data across a one-way data link , the Receive Node  calculates a hash number corresponding to the data it received (\u201cHash Number \u201d). The Receive Node  may also be designed to further receive Hash Number  calculated by the Send Node  based on the sent data and compare it with Hash Number . The matching of these two Hash Numbers indicates that there is no error in the one-way data transfer across the one-way data link . On the other hand, if these two Hash Numbers do not match, the Receive Node  becomes aware of the existence of an error in the one-way data transfer and may drop the data it received from the Send Node  and logs an error.","The Receive Node transmits Hash Number  to the Feedback Node  over a one-way data link . The Feedback Node  may be designed solely for processing hash numbers transmitted from the Receive Node  and then transmitting the results to the Send Node  over a one-way data link . For example, the Feedback Node  (in this example, it may be called the \u201cHash Feedback Node\u201d) may be designed solely for calculating a hash number corresponding to Hash Number  from the Receive Node  (\u201cHash Number \u201d) and transmit it to the Send Node .","Upon receipt of Hash Number  from the Feedback Node , the Send Node  compares Hash Number  with the Hash Number  it calculated prior to the data transfer to verify the status of the data it transferred to the Send Node . If Hash Number =Hash Number , the Send Node  deduces that the data received by the Receive Node  is identical to the data sent by the Send Node . On the other hand, if these Hash Numbers do not match, the Send Node  deduces that there must have been one or more errors in the data transfer across the one-way data link . In this manner, the Send Node  is capable of verifying the status of the data transferred to the Receive Node  with the help of the Feedback Node , without sacrificing the unidirectionality of data flow in the system  and the level of network security provided by it.","Other possible implementations of the system  shown in  are explained with the help of functional block diagrams shown in .  is a functional block diagram for primary data flow for the embodiment of the present invention shown in .  shows the primary data flow from the source network through connection  to the Send Node  and to the Receive Node  across a one-way data link  and to the destination network through connection . During the primary data flow, the one-way data links  and  to and from the Feedback Node  may remain inactive.","During the primary data flow, the Send Node  may receive data in arbitrary form from the source network across connection . Send Node  may then encapsulate the data it receives (preferably in the order in which the data is received) for transfer to the Receive Node  across one-way data link . Encapsulated portions of data, which may be considered packets of proprietary structure, may be assigned with numbers for identification. These data packets may be grouped according to sessions, which are also assigned with identification numbers. The Send Node  may maintain a record of the packets it sent and the sessions to which they belong. The Send node  may also maintain a record of the status of its operational health. Such status may include presence or absence of errors in data transfer. The Receive Node  also maintains a record of the packets received and the sessions to which they belong. The Receive node  also maintains a record of the status of its operational health.","The data involved in the primary data flow may comprise one or more data packets or data files. Some examples of the types of data that may be involved in the primary data flow in  include: one or more files in the Send Node , UDP (User Datagram Protocol) packets received from the source network , TCP (Transmission Control Protocol) packets received and acknowledged by connection to the source network , and IP (Internet Protocol) packets received and acknowledged by connection to the source network . The data may also include header information or header bits containing information regarding the data such as file name, byte count, time stamp, and status bits. The status bits may comprise a limited number of pre-assigned status or error codes that may respectively indicate, for example, \u201cno error,\u201d \u201cfile system full,\u201d \u201clost data packet,\u201d \u201cunknown error,\u201d etc. The status bits may also contain non-error-related information, indicating, for example, \u201ceverything is okay, so the data transfer should be speeded up,\u201d or \u201ceverything is okay, but the data transfer should be speeded down since the node is really busy.\u201d","The Send Node  calculates and may store a hash number corresponding to the data to be transferred to the Receive Node , including the header information of the data. The Send Node  may be designed to further transmit this hash number to the Receive Node  along with the data. The Send Node  then further calculates and may store another hash number corresponding to the foregoing hash number (i.e., the data is \u201cdoubly hashed\u201d). In addition, the Send Node  may have a table of all possible results from doubly hashing all possible status bits of the header information (i.e., hash numbers corresponding to all possible hash numbers, which in turn correspond to all possible status and error codes in the status bits for the data to be transferred).",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 4","FIG. 3"],"b":["33","21","22","43","21","44","45"]},"Either before or after receiving the verification request from the Send Node  across the one-way data link , the Receive Node  calculates a hash number corresponding to the data it received from the Send Node  across the one-way data link . The Receive Node  may be designed to further compare this hash number with the hash number calculated by and received from the Send Node , which corresponds to the original data sent by the Send Node . Based on the comparison, the Receive Node  may determine the status of the received data and updates the status bits in the header information by setting up those bits corresponding to the appropriate status or error codes.","For example, if those two hash numbers match and therefore there is no error in the one-way data transfer across the one-way data link , then the Receive Node  sets the status code for \u201cno error\u201d to be non-zero (i.e., \u201c1\u201d) and sets other error codes to be zero. If the two hash numbers do not match, then this non-match indicates that there may be one or more errors in the one-way data transfer across the one-way data link . Upon detecting the existence of one or more errors, the Receive Node  sets all the corresponding status and error bits to be non-zero. The status bits may be designed to indicate more than one error. If there are multiple errors in the one-way data transfer, then the multiple bits embedded in the status bits corresponding to all the applicable predefined error codes may be toggled to non-zero by the Receive Node .","The status bits may also be designed to indicate an error that is not directly related to the one-way data transfer. For example, if the data storage for the Receive Node  is full, then the Receive Node  will not be able to store and further process the data received from the Send Node  even if the received data does not contain any error or corruption. In this case, the Receive Node  may update the status bits to indicate a \u201cdisk full\u201d or \u201cfile system full\u201d error.","The Receive Node  may also calculate a hash number corresponding to this updated status and error bits. Upon encountering an error in the one-way data transfer, the Receive Node  may abort further processing of the data received from the Send Node , drop it, perform any necessary cleanup operations, and then wait for receipt of new data from the Send Node .","Upon receiving the verification request from the Send Node  across the one-way data link , the Receive Node  transmits the hash number corresponding to the received data across a one-way data link  to the Feedback Node . The Receive Node  may also transmit the hash number corresponding to the status and error bits it updated to the Feedback Node  across the one-way data link . The Feedback Node  is designed solely for processing hash numbers from the Receive Node  and transmitting the results to the Send Node . Accordingly, the only type of data transmitted from the Receive Node  to the Feedback Node  and from the Feedback Node  to the Send Node  is hash numbers such as MD5 or SHA-1 digests. The Feedback Node  then calculates hash number(s) corresponding to the hash number(s) received from the Receive Node  (i.e., doubly hashed status bits), and transmits the results to the Send Node  over a one-way data link .","Upon receipt of hash number(s) from the Feedback Node , the Send Node  may verify the status of the data sent to the Receive Node  across the one-way data link  by comparing the doubly hashed sent data it calculated and stored as described earlier with the doubly hashed received data from the Feedback Node . If those two hash numbers do not match, then the Send Node  may become aware of the existence of an error in the one-way data transfer to the Receive Node .","Additionally or alternatively, the Send Node  can also verify the status of the data transferred to the Receive Node  across the one-way data link  by comparing the value of the doubly hashed status bits from the Feedback Node  with the expected values known by the Send Node . As described earlier, the Send Node  may already know all possible expected values of doubly hashed status bits, based on which the Send Node  may generate and maintain a table of all the expected values. In this way, if an error has occurred, not only can the Send Node  detect the existence of an error in the one-way data transfer, but it can also identify the type of error in the one-way data transfer by identifying the error code in the status bits. However, if there is no match between the hash number from the Feedback Node  and any of the known expected values of the doubly hashed status bits, the Send Node  may determine that some unknown error must have occurred in the one-way data transfer to the Receive Node .","In an alternative configuration, instead of knowing in advance all possible values of doubly hashed status bits, the Send Node  may examine and compare bit by bit the doubly hashed status bits from the Feedback Node  as follows: The Send Node  turns on (i.e., sets to be non-zero) the leftmost bit in the status bits field in the header information, calculates its expected doubly hashed value, and compares it to the value of the doubly hashed status bits received from the Feedback Node . If both hash numbers match, then the error that occurred corresponds to the single bit that is turned on in the status bits. If these two hash numbers do not match, then the error bit is rotated right to the next bit position of the status bits field and the double hash number calculations and comparisons are repeated until either a match occurs, or all defined positions in the status bits have been examined and exhausted. If all bit positions corresponding to errors have been rotated through without any match between the hash number calculated by the Send Node  and the hash number received from the Feedback Node , then some unknown error has occurred and the one-way data transfer process may be terminated by the Send Node .","The functional diagram in  uses flow charts to describe another way to implement the system  shown in . As shown in , the Send Node  transfers data  with its existing headers and check bits to the Receive Node  via a one-way data link . The Send Node  maintains status information . In addition to carrying ubiquitous information, data  may also indicate Start of Message (SOM) or End of Message (EOM). The status information  may include a running digest of previously accumulated hash information, current packet number, session number, or other information.","The Receive Node  receives data  from the Send Node  which may or may not contain errors introduced during the one-way transfer. The received data  may or may not be identical to the sent data . The Receive Node  also determines its own status and maintains status information .","At some predefined time interval, or at any time when deemed necessary, the Send Node  initiates a verification request process . During the verification request process, the sent data , which may contain an SOM or an EOM indicator or any other information, is designated as a Feedback Verification Request Message  and sent to the Receive Node . The Feedback Verification Request Message  may be structurally identical to the previously sent data-bearing message , and may be identified by a single toggled bit in the data header.","Upon receipt of the Feedback Verification Request Message , the Receive Node  initiates a verification response process . The verification response process in the Receive Node  uses the status information  determined and maintained by the Receive Node  and the status information embedded in the Feedback Verification Request Message  from the Send Node  to render its own status report . The status information embedded in the Feedback Verification Request Message  may include information relating to time stamp, packet number and session number, and may contain some portion of the status information  generated by the Send Node . Alternatively, the status information embedded in the Feedback Verification Request Message  may be identical to the status information  generated by the Send Node .","The status report  in the Receive Node  may contain up to 64 individual binary status indicators which may be used singly or concurrently, and includes the communication status on Receive Node  and known data items. The status report  may include time stamp information which can be used to perform data throughput calculation in real time. Such calculations may be used to measure the operational health of the overall system, including detection of instances of \u201coperating system interference.\u201d The Receive Node  uses status report  to create a hash number . The hash number  may be generated by a single 16 byte MD5 hash calculation. The Receive Node  then passes the hash number  to the Hash Feedback Node  via a one-way data link .","Upon receipt of the hash number  (also labeled hash number  in the Receive Node ) via the one-way data link  from the Receive Node , the Hash Feedback Node  rehashes the hash number  to create double hash number . The Hash Feedback Node  then sends this double hash number  to the Send Node  via a one-way data link .","Upon receipt of the double hash number  (also labeled double hash number  in the Hash Feedback Node ) via the one-way data link  from the Hash Feedback Node , the Send Node  initiates a hash comparison . During the hash comparison , the Send Node  renders the status information  retained in the Send Node  into a status report . The status report  may contain up to 64 individual binary status indicators which may be used singly or concurrently. Like the status report  in the Receive Node , the status report  may include time stamp information which can be used to perform data throughput calculation in real time. Such calculations may be used to measure the operational health of the overall system, including detection of instances of \u201coperating system interference.\u201d","The Send Node  uses the status report  to create a hash number , which is hashed again in the Send Node  to generate a double hash number . The hash number  may be generated by a single 16 byte MD5 hash calculation. Likewise, the double hash number  may be the result of the same 16 byte MD5 hash calculation applied to the hash number . The hash comparison  compares the two double hash numbers  and . When these two double hash numbers  and  match, the state is known (i.e., no error in the one-way data transfer ). If they do not match, the following loop algorithm may be employed.","The Send Node  recalculates the status report , hash number , and double hash number  by running through a sequence of known hypothetical errors in data transfer, comparing each new recalculated value of double hash number  with the hash number  received from the Hash Feedback Node  until a match is found, or until all known error conditions are exhausted. A looping algorithm used here may be designed to create the status request for the most commonly encountered states first, typically starting with the no-error state. The hash comparison  checks for all known possible status conditions including absence of errors, known errors, unknown errors, and other known possible states. Exhaustion of all known error states without a match between the double hash numbers  and  may indicate some unknown fundamental breakdown in the one-way data transfer system and may raise an alarm.","In addition, if the Send Node  initiates a verification request process  but fails to receive a double hash response  from the Hash Feedback Node  within a user-configurable time interval, the feedback verification process may be designed to time out and raise an alarm. As described earlier, the Hash Feedback Node  may be configured to have a limited communication channel capacity, and therefore may be configured to only operate for short predefined time intervals (e.g., one-second intervals) to mitigate the possible threat of a reverse-direction covert channel. In that case, the timeout configuration of the Send Node  is necessarily tuned to the channel capacity limits of Hash Feedback Node .","In some configurations, the timing of the processes described above and in  may be randomized to prevent potential risk of covert channel being created through the Hash Feedback Node  by, for example, time-series modulation of the messages through the Node . This randomization can be achieved by introducing arbitrary time delay in any or all of the processes involved in the data verification shown in . For example, instead of predefined periodic time intervals, the Send Node  may initiate the verification request process  and send the Feedback Verification Request Message  to the Receive Node  at random time intervals.","The present invention seeks to provide a further refined alternative data verification or acknowledgment mechanism for a one-way data transfer system.","It is an object of the present invention to provide a secure acknowledgment device for relaying acknowledgment messages from a Receive Node to a Send Node without compromising the security of the one-way data transfer system.","It is also an object of the present invention to provide a secure communication channel that strictly enforces unidirectionality of data flow passing through the channel, but at the same time, includes interfaces for bi-directional communications with other nodes.","Other objects and advantages of the present invention will become apparent from the following description.","It has now been found that the above and related objects of the present invention are obtained in the form of a secure acknowledgment device for one-way data transfer system.","More particularly, the present invention relates to an apparatus for relaying a hashed message from a first node to a second node, comprising an inlet interface for receiving a message from the first node, a hash number calculator for hashing the message from the inlet interface, an outlet interface for sending the hashed message to the second node, a first one-way data link for unidirectional transfer from the inlet interface to the hash number calculator, and a second one-way data link for unidirectional transfer from the hash number calculator to the outlet interface.","In at least one embodiment, the first node is a receive node; the second node is a send node; and the message comprises an acknowledgment message relating to receipt of data from the send node by the receive node via a third one-way data link.","The present invention is also directed to a data transfer system comprising a send node, a receive node, a first one-way data link for unidirectional transfer from the send node to the receive node, and a secure acknowledgment device for relaying a hashed acknowledgment message from the receive node to the send node, wherein the device comprises an inlet interface for receiving from the receive node an acknowledgment message relating to receipt of data from the send node by the receive node via the first one-way data link, a hash number calculator for hashing the acknowledgment message from the inlet interface, an outlet interface for sending the hashed acknowledgment message to the send node, a second one-way data link for unidirectional transfer from the inlet interface to the hash number calculator, and a third one-way data link for unidirectional transfer from the hash number calculator to the outlet interface.","The present invention is also directed to a data transfer system comprising a send server communicatively coupled to a data source platform, a receive server communicatively coupled to a data destination platform, a first one-way data link for unidirectional transfer from the send server to the receive server, and a secure acknowledgment device for relaying a hashed acknowledgment message from the data destination platform to the data source platform, wherein the secure acknowledgment device comprises an inlet interface for receiving from the data destination platform an acknowledgment message relating to receipt of data from the send server by the receive server via the first one-way data link, a hash number calculator for hashing the acknowledgment message from the inlet interface, an outlet interface for sending the hashed acknowledgment message to the data source platform, a second one-way data link for unidirectional transfer from the inlet interface to the hash number calculator, and a third one-way data link for unidirectional transfer from the hash number calculator to the outlet interface.","The present invention also relates to an apparatus for comparing hashed messages, comprising an inlet interface for receiving a message from a first node, a first hash number calculator for hashing the message from the inlet interface, an outlet interface for receiving the hashed message from the first hash number calculator and communicating with a second node, a first one-way data link for unidirectional transfer from the inlet interface to the first hash number calculator, and a second one-way data link for unidirectional transfer from the first hash number calculator to the outlet interface, wherein the outlet interface comprises a second hash number calculator for hashing an expected message from the second node, and a comparator for comparing the hashed message from the first hash number calculator with the hashed expected message from the second hash number calculator and sending the result of the comparison to the second node.","In at least one embodiment, the first node is a receive node; the second node is a send node; and the message comprises an acknowledgment message relating to receipt of data from the send node by the receive node via a third one-way data link.","These and other features of this invention are described in, or are apparent from, the following detailed description of various exemplary embodiments of this invention.","Illustrated in  is a schematic diagram of an exemplary embodiment of the present invention in the form of a secure acknowledgment device , which may be used as an alternative, further refined substitute for the Feedback Node ,  of the '867 patent described above. The device  comprises an inlet interface module  for receiving a message from a first node (e.g., from a Receive Node), a hash number calculator  for computing a hash number corresponding to the message (i.e., hashing the message), an outlet interface module  for sending the hashed message to a second node (e.g., to a Send Node), a first one-way data link  for unidirectional transfer from the inlet interface module  to the hash number calculator , and a second one-way data link  for unidirectional transfer from the hash number calculator  to the outlet interface module . The first and second one-way data links  and  can be of any type of data transfer conduit that is capable of strictly enforcing unidirectional data flow, and each of them may be implemented in hardware or software or combination thereof.","The hash number calculator  may use an advanced hash algorithm, such as MD5 or Secure Hash Algorithm (SHA), for hashing the message received from the first node via the inlet interface module  and the first one-way data link . As shown in , the hash number calculator  is completely isolated by the first and second one-way data links  and  and their hardware-enforced unidirectionality of data flow. In view of this feature, the secure acknowledgment device  is a one-way data transfer device (even if, as discussed below, its interfaces ,  may allow bidirectional communications) and is also called Application Hash Acknowledgment Diode (AHAD). The hash number calculator  may be configurable, or, alternatively, may be hard-coded into the CPU module using methods that are non-configurable after initial manufacturing stage.","In some embodiments of the present invention, unlike the Feedback Node ,  of the '867 patent described above (see ), which is connected to the Receive Node  by one-way data link ,  and also connected to the Send Node  by one-way data link , , the secure acknowledgment device  shown in  may be implemented with interface(s) for bidirectional communications with one or each of the first and second nodes. One or each of the inlet interface module  and the outlet interface module  may comprise an interface for bidirectional communication and may be implemented in accordance with various interface standards. For example, one or each of the inlet interface module  and the outlet interface module  may comprise a Universal Serial Bus (USB) connector (e.g., USB 1.1, or USB 2.0) for coupling to the USB in a node\/computing platform. Alternatively, one or each of the inlet interface module  and the outlet interface module  may comprise a specially configured Peripheral Component Interconnect (PCI) card having PCI interface for coupling to the PCI bus in a node\/computing platform. Other possible types of interface and interface standards that may be utilized in the interface modules ,  include serial port connectors based on RS-232 standard and FireWire connectors (e.g., FireWire 400, or FireWire 800 connectors) based on IEEE 1394 standard. These connectors can be plugged into corresponding standard sockets in the host computers to access data bus in the host computers.","In another embodiments of the present invention, one or each of the inlet interface module  and the outlet interface module  of the device  may comprise an interface for one-way data link.","In some embodiments of the present invention, the device  may be designed to accept only short, fixed-length messages through the inlet interface module  and the first one-way data link , hash them using an advanced hash algorithm such as MD5 or SHA in the hash number calculator , and transmit the hashed messages through the second one-way data link  and the outlet interface module . The forms of the fixed-length message that are acceptable to the device  may include (framed) binary, arbitrary ASCII strings, ASCII hex characters, and\/or a hash number. The length of the message corresponds to the hash number length produced by the specific hash algorithm used in the hash number calculator . Since all messages passing through the device  are restricted to have short, fixed length, and must be hashed in the process, no executable software or no data in intelligible form can pass through the device  from the first node to the second node. Accordingly, the secure acknowledgment device  could provide a secure communication channel for relaying acknowledgment messages from a Receive Node to a Send Node of a one-way data transfer system without compromising the security of the Receive Node.","The schematic diagram in  illustrates an example of how the secure acknowledgment device  of  may be deployed in a one-way data transfer system  as a secure communication channel for relaying acknowledgment messages from a Receive Node  to a Send Node . In the exemplary embodiment shown in , the Send Node  comprises separate but interconnected send server  and data source platform . Likewise, the Receive Node  comprises separate but interconnected receive server  and data destination platform . The send server  hosts a send interface  to one-way data link , while the receive server  hosts a receive interface  to the one-way data link . The data source platform  transmits data to the send server  to be transferred across the one-way data link . Upon receipt of the data from the one-way data link , the receive server  transfers the received data to the data destination platform . In alternative embodiments of the present invention, the send server  and data source platform  of the Send Node  may be placed within a single node unit, and likewise, the receive server  and data destination platform  of the Receive Node  may be placed within a single node unit. In another alternative embodiments of the present invention, the send server  and data source platform  of the Send Node  may be part of a network, and likewise, the receive server  and data destination platform  may be part of another network.","In an exemplary embodiment of the present invention, each data message transferred from the Send Node  to the Receive Node  across the one-way data link  may trigger generation of a corresponding acknowledgment message  by the Receive Node . In alternative embodiments, messages transferred through the one-way data link  may or may not require acknowledgment from the Receive Node , depending, for example, on the protocols of source and destination software applications ,  installed in the data source and data destination platforms , , respectively. In this case, the messages requiring acknowledgment from the Receive Node  may carry a predefined unique message identifier or transaction number that can be recognized by the source software application  and the destination software application  to trigger the acknowledgment process.","For the embodiments of the present invention involving the source software application  in the data source platform  of the Send Node  and the destination software application  in the data destination platform  of the Receive Node , an application programming interface (API) function library or a suitable processor\/circuitry ,  may be installed in each of the source and destination platforms ,  to provide the functional interface between the secure acknowledgment device  and the source and destination software applications , , respectively.","When the Receive Node  receives a data message requiring acknowledgment through the one-way data link , the destination software application  in the data destination platform  may generate a response (return) code, and provide the return code and the message identifier of the data message to the API function library  as function arguments. Upon receiving the function arguments from the destination software application , the API function library  in the data destination platform  generates a hashed acknowledgment message (e.g., hashed return code)  and sends it to the inlet interface module  of the secure acknowledgment device . The hashed acknowledgment message  may be in the form of a short, fixed-length hash number, which is recognizable only by the destination software application  in the data destination platform  and a source software application  in the data source platform .","When passing through the device , the hashed acknowledgment message  is further hashed by the hash number calculator , and then sent from the outlet interface module  to the Send Node  in the form of a double-hashed acknowledgment message . The double-hashed acknowledgment message  may not be intelligible or readily recognizable to any actors or processes other than the destination software application  in the data destination platform  and the source software application  in the data source platform .","In an exemplary embodiment of the present invention, the set of acknowledgment messages most likely to be generated by the destination software application  in response to receipt of data messages through the one-way data link  are known to the source software application  and may be rendered in the data source platform  as a static library. For example, the expected acknowledgment messages may include acknowledgment of success of data transfer or responses relating to error conditions commonly encountered in one-way data transfers. In alternative embodiments, the set of expected acknowledgment messages may be hard-coded within the source software application . The expected acknowledgment messages rendered in the data source platform  may be further double-hashed by a double-hash number calculator  and the corresponding double hash values (i.e., double-hashed expected acknowledgment messages)  may be stored in a static library  in the data source platform .","The double-hashed acknowledgment message  sent from the outlet interface module  of the secure acknowledgment device  may be stored in a message queue  in the data source platform . A comparator or comparison engine  (e.g., API function library) in the platform  reads the received double-hashed acknowledgment message  from the queue  and compares it with the expected responses (i.e., double-hashed expected acknowledgment messages)  stored in the static library . If the double-hashed acknowledgment message  matches with an expected response, then the transaction state of data transfer across the one-way data link  is known. If no match is found, then the acknowledgment indicates an unknown error.","The acknowledgment message  may be processed and transmitted to the Send Node  by the secure acknowledgment device  before the next data message is sent by the Send Node  through the one-way data link . To facilitate rapid exchanges of data and acknowledgment messages between the Send Node  and the Receive Node , the Send Node  (e.g., the source software application ) may take the step of preparing to receive the acknowledgment messages  via the device  before it sends a data message to the Receive Node .","Illustrated in  is a schematic diagram for another embodiment of the present invention, wherein a comparison engine or comparator for comparing an acknowledgment message from a Receive Node with an expected value stored in a Send Node of a one-way data transfer system is incorporated within a secure acknowledgment device  itself. The device  comprises an inlet network interface , a first hash number calculator , an outlet server network interface , a first one-way data link  for unidirectional transfer from the inlet network interface  to the first hash number calculator , and a second one-way data link  for unidirectional transfer from the first hash number calculator  to the outlet server network interface . The outlet server network interface  may comprise a comparison engine  and a second hash number calculator .","An acknowledgment message  (e.g., from a Receive Node in a one-way data transfer system) may be input into the inlet interface module  of the secure acknowledgment device . The acknowledgment message passes through the first one-way data link , hashed by the first hash number calculator , and then its hashed value  passes through another second one-way data link  to reach the outlet server network interface .","The second hash number calculator  receives the set of expected acknowledgment messages  (e.g., from a Send Node in the one-way data transfer system) and hash them to create the hashed expected acknowledgment messages . The outlet server network interface  may call for the set of expected acknowledgment messages  from another node and hash them every time they are needed (e.g., when the hashed acknowledgment message  has been or is about to be created). Alternatively, it may do that once and store the hashed expected acknowledgment messages  within the interface . The hashed expected acknowledgment messages  may be rendered in the outlet server network interface  as a static library accessible by the comparison engine . The comparison engine  reads the hashed acknowledgment message , compares it with the hashed expected messages , and sends out the result  of the comparison (e.g., to the Send Node of the one-way data transfer system). In this way, this alternative embodiment of the present invention provides an integrated module or device for securely performing the feedback and verification functions.","While the acknowledgment or data verification scheme using hash algorithm is used here to illustrate embodiments of the present invention, those skilled in the art will appreciate that the present invention does not depend on the choice of particular type of data verification scheme or algorithm, and that the choice of data verification scheme and algorithm will depend on the customer's needs such as the computer hardware\/software requirements, the required level of sophistication for data verification, etc.","It is to be understood that while certain forms of the present invention have been illustrated and described herein, it is not to be limited to the specific forms or arrangement of parts described and shown. The present embodiments are therefore to be considered in all respects as illustrative and not restrictive. Accordingly, the spirit and scope of the present invention is to be construed broadly."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The above and related objects, features and advantages of the present invention will be more fully understood by reference to the following, detailed description of the preferred, albeit illustrative, embodiment of the present invention when taken in conjunction with the accompanying figures, wherein:",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 5","FIG. 2"]},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 7","FIG. 9"]},{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
