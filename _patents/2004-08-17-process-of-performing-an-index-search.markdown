---
title: Process of performing an index search
abstract: One implementation provides a method included in performing a computer-implemented search of electronically stored content. The method includes receiving from one of multiple software applications an input indicating a user request that a computer-implemented search be performed to identify content that, firstly, is stored in a specified one of multiple knowledge bases, and secondly, satisfies user-specified conditions. The method further includes determining which one of multiple search engines has been preconfigured to be used for searches involving the one software application from which the search request input was received and the selected one knowledge base, and initiating the requested search to be executed by the determined search engine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07644065&OS=07644065&RS=07644065
owner: SAP Aktiengesellschaft
number: 07644065
owner_city: Walldorf
owner_country: DE
publication_date: 20040817
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60\/496,166, which was filed on Aug. 18, 2003.","This document describes a system that provides, within an enterprise computing system, the ability to use an existing or third-party search engine software application with a new software application being implemented.","In today's ever more complex enterprise computing systems, it is often desirable, and even necessary in many cases, to have within a single enterprise computing system various different software applications from different software vendors. In such a case, the enterprise computing system is referred to as having a heterogeneous system landscape. Integrating various software applications from different vendors, and sometimes applications from the same vendor, is a challenging and often costly task.","There are many software applications where it is helpful for a user, when using the software application, to perform a search for content electronically stored in a knowledge base. One example of such a software application is a customer interaction center software application. A customer interaction center application is a software application that is used in a customer interaction center, for example, a call center. A customer interaction center software application assists a human being agent (that is, a user) in interacting with a customer. During the course of a customer interaction, it may be helpful for the interaction center agent to search for information that is stored in a knowledge base, for example, to find a solution to a customer's problem.","It is possible that search engine functionality may be built in, or pre-configured, to operate with a particular software application. Such may be the case, for example, when both the software application and the search engine functionality are provided by the same software vendor. Even where a software application and a search engine application are not designed to work with one another, because for example the two are provided by different software vendors, it may be possible to integrate the search engine application with the software application so that functionality from both software applications may be executed as an integrated software solution where, from the user's perspective, it appears that a single software application is being executed. Although such integration may be possible, it typically has required a costly and time-consuming software integration effort.","As a result, in many cases where there is implemented, in a single computing environment, both a software application and a search engine application that may be needed in combination with the software application, the two applications operate entirely separately. As such, a user will need to switch between the two applications, for example, by switching between different windows. Particularly in a customer interaction center application, where timeliness is typically essential, this switching between the interaction center application and the search engine application may take too much time, and as such may be unacceptable from a customer care perspective. In addition, where the two functions are not integrated, various functions that may be possible with an integrated solution may not be possible.","One implementation provides a framework that allows a software application to be easily integrated with a search engine application. In addition, one implementation provides a recording function that is made possible by the software application and the search engine application being integrated.","One implementation provides a method included in performing a computer-implemented search of electronically stored content. The method includes receiving from one of multiple software applications an input indicating a user request that a computer-implemented search be performed to identify content that, firstly, is stored in a specified one of multiple knowledge bases, and secondly, satisfies user-specified conditions. The method further includes determining which one of multiple search engines has been preconfigured to be used for searches involving the one software application from which the search request input was received and the selected one knowledge base, and initiating the requested search to be executed by the determined search engine.","The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.","An enterprise computing system , shown in , includes several software applications, there being three such applications , and in this example. Each software application -makes use of services that enable users to search for electronically stored knowledge base information. Several search engines\u2014in this example, three such engines , , \u2014are included, and may be search engines of different types and, for example, offered by different software vendors. Searchable indexes , and are each associated with one of the search engines -, and each may include more than one index. A knowledge base index being associated with a particular one of the search engines -means that the index is created and maintained in a format that enables it to be searched using the particular search engine with which the index is associated. When a user wishes to search for content stored in a particular knowledge base, it is an index of that knowledge base content that is searched by the applicable search engine, and in response, a \u201chit list\u201d of content may be provided that meets certain user-specified search criteria. Thereafter, a user may initiate the retrieval of content identified in the \u201chit list\u201d directly from a knowledge base or other data source. In one implementation, the \u201chit list\u201d of content includes content that is directly provided by the knowledge base or data source. In this implementation, the run-time environment  collects information provided by the search engine services  to determine which content is to be retrieved from the knowledge repository  and included within the \u201chit list\u201d. The run-time environment  sends a request to the knowledge service  and receives, in return, information that is contained within one of the knowledge bases -or contained within an external data source.","By way of example, the software applications -may be 1) a customer call center application, 2) an internet-accessible self-service customer interaction center application, and 3) a field-service technician application. In a call center application, a call center agent may search for a solution to a customer problem with a purchased product in a solution database (that is, in a knowledge base of product problem solutions). In such an example, the call center agent may be on the telephone with the customer, and may access the solution and describe it to the customer over the telephone. The call center agent may also, for example, retrieve a solution and electronically transmit a document containing the solution to the customer, for example, via electronic mail. The call center software application may also record solutions being retrieved and sent to a customer, as a record of interactions with the customer for future reference if necessary. A self-service customer interaction center may enable a customer to enter information about a problem, initiate a search for a solution, and retrieve information explaining the solution for the customer. As with the call center application, a record may be made of the customer interaction and the solution material that was identified and retrieved by the customer. A field service software application may enable a field technician that makes on-site calls to retrieve solutions to problems encountered when making a field repair. Again, such an application may include recording functionality to record the solutions being retrieved by the technicians, and on behalf of specified customers whose equipment is being repaired. Of course many other software applications make use of knowledge base search functionality, and these examples are to be understood as only a few of the many possibilities.","Search engines are important components for business operations in an enterprise system, such as the system , to efficiently locate records or information needed to complete business transactions. For example, in the area of customer service, locating a customer using various search criteria, such as an address, a name, past interaction records, is very helpful in providing quality service. The search engine designed for the enterprise system can quickly locate a specific record from millions of records or documents. Such a search engine can provide powerful search capabilities, such as fuzzy text searches, or traditional database retrievals. With increasing Internet access, more search engines are developed to provide Internet search capabilities.","There are various different reasons why it may be desirable for an enterprise computing system  to make use of multiple different search engines. For example, it may be that significant time and expense has already been expended to get a particular search engine application implemented so that it works well with a particular software application and with a particular existing knowledge base. In such an example, it may be desirable to maintain that application as it is while implementing other applications that use other search engines. This may be particularly useful, for example, when two companies with different software solutions and search engines are combined, for example, through a corporate merger. Another example of why it may be desirable for an enterprise computing system  to make use of multiple different search engines is that it may be desirable to implement a certain search engine application that may not be standard with a particular software application, for example, to improve the performance of search services.","The enterprise computing system  has a knowledge repository , which includes a number of separate knowledge bases, there being in this example four such knowledge bases -. Electronically stored in the knowledge bases -is content that a person interacting with software applications -may wish to retrieve. The knowledge bases in an enterprise system, such as the knowledge bases -in the system , may include any business information that is needed for business operation. For example, a solution knowledge base may be used to provide solutions or steps to fix a problem for a service company. A product knowledge base may contain product-related specifications and descriptions. A business partner knowledge base may contain customer information that has been collected and processed over time. An interaction record knowledge base may contain interaction history information for a company and its customers. Of course, a knowledge base can have combined data sources (e.g., interaction records with customer information, product information and related documents). In addition, there may be various other types of knowledge bases that may be included within a knowledge repository, such as the repository  shown in .","The electronically stored content in the knowledge bases -is indexed in the previously discussed indexes -to enable the previously mentioned index searching. Each knowledge base -has an associated plug-in -to external data sources that provide the data for the knowledge bases -. When information is retrieved from a search index (such as from one of the indexes -), some basic information can be presented in a \u201chit-list\u201d to a user, but the detailed information may be from the search index or from a data source via the knowledge base plug-ins -. If the display details are from the search index, the speed may be fast, but the information may not be completely up-to-date (depending on when the indexes -were last updated). Thus, in one implementation, details are retrieved from an original data source to obtain the most recent information when such is requested or required, and information directly from the search index can also be used in certain situations when speed of information retrieval is a premium. A rule-based engine contained within the search engine services  or the run-time environment  may be used, in one implementation, to determine whether to retrieve content information for the \u201chit-list\u201d from one of the indexes -, directly from an external data source coupled to the knowledge repository  via the plug-ins -, or from a combination thereof. The rules used by the rule-based engine may be configured by the design-time environment  or by the run-time environment  upon receipt of input from the applications -","As is shown in , the application programming interface  may be directly coupled to the knowledge service  within the knowledge repository . The knowledge service  is capable of providing information from the knowledge repository  directly to the applications , , or through the application programming interface . Thus, in one implementation, the applications , , and\/or are capable of directly retrieving information from the knowledge repository . The knowledge repository  may also be provided with information from one or more external data sources through the plug-ins -","The knowledge repository  also has a knowledge service component , which provides services related to the knowledge bases -and provides an interface for access and interaction with the knowledge bases -","A search engine framework  is part of the enterprise computing system . The search engine framework  interfaces with the software applications -, the search engines -, and the knowledge repository . For each of the search engines -, the framework  includes an associated plug-in , and , which translates search engine functions specified in a common, or generic, format into a format usable by the associated search engine -. In one example, XML (the Extensible Markup Language) is used to define a generic interface that can be consistently shared and translated from different search engines. In another example, a programming application interface is used to make sure the different search engines are implemented via the standard interface. As such, the plug-ins -enable search engine functions to be performed within the framework  in a generic way, while enabling the use of different search engines. This offers the flexibility, for example, to continue the use of search engines that are included in legacy computing solutions, or search engines that may already have be adapted to be used with a particular software solution.","Each of the plug-ins -consists of executable software code that integrates the particular search engine with which the plug-in is associated into the enterprise computing system . Each plug-in, for example, may include code that, when executed, takes a command (for example, an index search command or an index action command) that is expressed in the generic format of the search engine framework , and composes from that generically expressed command a similarly functioning command that is in a format that can be executed by the specific search engine associated with the plug-in. This may be implemented, for example, using object-oriented programming methods, wherein the plug-in functions to instantiate, from a generic command provided by the search engine services component , an object for a command that is to be used by the applicable search engine. In addition, for example, each of the plug-ins -may include configuration information for the associated search engine and that is needed by the search engine services component . Such configuration information may include, for example, an identification of default fields used by the particular search engine in executing an index search request, an identification of information that must be stripped from a command when executing an index search request, etc. Default field values may be provided by a plug-in when a search engine requires a value not provided by the software application. The plug-in may strip away values that are provided by the software application but not required by, or relevant to, the search engine.","The search engine framework  also includes an application programming interface  for the software applications -that enables communication between the applications -and the framework . The framework  also has a design-time environment , a run-time environment , and a search engine services component . The design-time environment  is a software environment that, among other functions, provides the ability for an administrator, using an administration user interface (UI) , to create a configuration database . The configuration database  includes electronically stored mappings  among the applications -, the knowledge bases -, and the search engines -. For example, the stored mappings  specify the particular one of the search engines -that is to be used to execute a search request received from a particular one of the applications -and that includes a request for an identification of certain content that is stored in a specified one, or more, of the knowledge bases -. The design-time environment  also provides the ability for an administrator to perform actions related to the indexes -, for example, to create an index of content that is stored in a specified one, or more, or the knowledge bases -, and to associate that index with one of the search engines -. In one implementation, an automated process within the design-time environment  or, more generally, within the search engine framework , can perform actions related to the indexes -without user intervention using various rules and a rule-based engine.","The search engine services component  is a software application that includes a common, or generic, version (that is, not necessarily adapted for a particular search engine) of various services related both to the execution of a search request and to the performance of various indexing actions. As such, for example, when the design-time environment  receives an input from the administration UI  requiring that a certain specified knowledge base index be created and associated with a particular specified one of the search engines -, the design-time environment  may invoke an index creation service included in the search engine services component . The index creation service may, in turn, initiate and control the various actions involved in creating the index. In this example, the actions may include initiating a translation of the index creation request into a format that is usable by a specified one of the search engines -, sending the request to the specified search engine to be executed, and controlling communications with the knowledge repository . More detail of an example of how an index may be created is provided later.","The run-time environment  is a software environment that performs various actions in response to an index search request received from one on the software applications -. For example, the run-time environment , in response to the receipt of an index search request, may determine, using the configuration database , which one of the search engines -has been mapped to be used to execute the received index search request. After doing this, the run-time environment  may then invoke an appropriate service within the search engine services component , which service may initiate and control the various actions involved in executing the index search request. In this example, the actions performed by the service may include initiating a translation of the index search request into a format that is usable by the specified one of the search engines -, sending the translated index search request to the specified search engine to be executed, and initiating the return of a \u201chit list\u201d to the software application -from which the index search was received. More detail of an example of an index search request is executed is provided later.","In one implementation, the search engine framework  includes an internal search engine (which is not shown in ). In this implementation, the internal search engine is coupled to the search engine services . The internal search engine is known to and provided within the framework . For example, the internal search engine may be managed or maintained by the same company that manages or maintains the framework . No plug-in is required for the search engine services  to invoke the internal search engine, because all interface, configuration, data format, etc., relating to the internal search engine is controlled by the search engine services . The internal search engine is also coupled to and uses an internal index, which is also contained within the framework .","In one implementation, the applications -may send requests to the framework  that cause multiple indexes to be searched. In this implementation, an individual request that is received from one of the applications -includes information that is used to identify multiple knowledge bases. The request may explicitly identify these knowledge bases, or it may contain information that the framework  can use to identify these knowledge bases (such as specific attribute information that is associated with a particular knowledge base). The framework  accesses the mapping information  to determine which of the search engines -are to be used for search operations with respect to the identified knowledge bases. The framework  is then capable of creating search requests that are sent to the determined search engines -and providing search results to the one application -that had sent the original request.","An example enterprise computing system , shown in , illustrates an example of mappings, such as the mappings  stored in the configuration database  shown in , that may be specified among software applications, knowledge bases, and search engines. In this example, the enterprise computing system  has three enterprise servers ,  and . In one example, the different enterprise servers may provide different software functions. For example, one enterprise server may contain and execute a customer relationship management (CRM) software solution, another enterprise server may contain and execute a supply chain management (SCM) software application, and another enterprise server may contain and execute an enterprise resource planning (ERP) software application.","In addition, each of the enterprise servers ,  and  may be sub-divided into multiple client systems that contain and execute a sub-set of functions provided by the software application provided on the enterprise server. For example, enterprise server , in this example, has three client systems ,  and . In one example, the different client systems may correspond to different departments of an enterprise, for example, one client system may be provided for a customer service department, another for a marketing department, another for an accounting or financials department, and another for a human resources department. In another example, multiple clients may be used by different companies in a hosting solution where small and medium-scaled companies may pay usage fees to a hosting solution without managing the data. It will be appreciated that enterprise servers  and  may similarly be sub-divided into multiple client systems, although not shown in .","The client system , in this example, has two software applications and , which are the software applications also shown in . As discussed previously, these software applications and each make use of knowledge base search services. In particular, Application I provides the ability to search three knowledge bases , and , whereas Application II provides the ability to search only two of the knowledge bases, namely knowledge bases and ",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["104","104"],"i":["a","d "]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["102","110","104","110","102","102","104","104","214","216","104","230","104","104","240","104","104","104"],"i":["a ","a ","a","b ","a ","b ","b","c","d","a ","b","b","c","d"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 3","FIG. 1","FIG. 1","FIG. 3"],"b":["300","116","305","128","102","102","102","102","122","124"],"i":["a","c","a","c"]},"As shown in , the initial action that is taken in response to the receipt of a request depends on the type of request that is received. For example, if it is determined at blocks  and  that the request is one for either a delta index update or a full index update, then the processing proceeds to block  where the processing of the indexing request is started (an example of which is shown in ). Generally, a delta index update is one where the update only takes into account modifications to the knowledge base that have occurred after the most recent update or creation of the index, whereas a full index update is one that in essence compiles data into an existing index or a new index every time an update is performed. If it is determined at blocks ,  or  that the request is one either to create an index, delete and index, or retrieve information about an index, then the processing proceeds to block  where an index maintenance process is started (an example of which is shown in ).","Next, if it is determined at block  that the request is one for index clustering, then the processing proceeds to block  where a content clustering process is started (an example of which is shown in ). Generally, clustering involves the grouping of indexed content into groups, or clusters, retrieving characteristic features from each cluster, and storing the characteristic cluster features, for example in a file or a database table. A feature-cluster table may then be used to filter out non-essential features and to compare the differences between old relevant cluster feature sets and new relevant cluster feature sets. Clustering processes may further involve more advanced clustering, such as hierarchical clustering or other structures with sub-structures.","Further, if it is determined at block  that the request is one for content classification, then the processing proceeds to block  where a content classification process is started (an example of which is shown in ). A classification can match the similarity between a text-based content, such as contained within an email message, and clusters created from the clustering process. The input text then can be classified into one or more of the pre-defined clusters. Finally, if it is determined at block  that the request is one requesting that an index search be executed, then the processing proceeds to block  where an index search process is started (an example of which is shown in ).","In one example of the  process, the initial processing of index actions in the  system are performed by a dispatch unit to determine whether the request should be submitted to the design-time environment component , or by the run-time environment component . Thus in this example, blocks , , , , , ,  and  are processed by the dispatch unit that will determine whether the request should be performed by the design-time environment component , or the run-time environment component . The processes represented by the blocks  and  are processed by the design-time environment component , and the processes represented by the blocks  and  are processed by the run-time environment component . The distinction between the design-time environment component  and the run-time environment component  can avoid the interference between indexing actions and search actions, according to one implementation.","Referring now to , there is shown a flowchart that shows a process  that is performed when a request is received that is determined, for example at block  of the  process, to be an index search request. In one example of the  system, some of the blocks of the process  are performed by the search engine framework , while other blocks are performed by a specified one of the search engines -. The process  begins at block  where an application (such as one of the applications -) submits a search query that identifies a set of one or more targeted knowledge bases. In one example, the knowledge base or bases are identified because a user interacting with the application -has explicitly selected the knowledge base to be searched, while in another example, the knowledge base or bases are identified by a process that determines the applicable knowledge base or bases to be searched for certain search criteria (e.g., terms or attributes) that a user has specified in the search request.","Next, at block , it is determined whether there is a converter for the particular software application from which the index search request was received. For example, if the software application from which the index search request was received has a search request format that differs from the standard format for the search engine framework , then the format used by the software application will need to be translated into the format used by the search engine framework . This block  may be performed by the application programming interface . If it is determined that there is a converter, then processing proceeds to block  where text and attribute formats for the received search request are converted into the standard, or generic, text and attribute format that is used by the search engine framework . This block  may include, for example, the translation of, or inclusion of, default values included in the search request, mapping attributes to corresponding names in the standard query format, managing attribute dependencies (such as city\/zip code\/country), or the stripping away of attributes that have no correspondence in the standard search query format.","After the conversion block , or if it is determined at block  that there is no converter, processing proceeds to block , where the search engine, or engines, that are associated, or mapped, to the targeted knowledge base or bases are determined. In one example of the  system, the run-time environment component  performs this block by making a call to the configuration database , where the applicable search engine is specified for the particular software application from which the index search request was received and for the specified knowledge base. In that a search request may involve more than one knowledge base, more than one search engine may be identified, where, for example, the knowledge bases are mapped to different search engines. Also, as discussed in connection with , the identification of the search engine, or engines, may take into account the language (for example, English, German, etc.) that has been specified for the index search.","Next, at block , search-related configuration information for the identified search engine, or engines, is retrieved. In one example of the  system, this search-related configuration information passed from the plug-in -for the identified search engine -. In another example of the  system, the configuration information may be stored in the configuration mapping  and it is the search engine services component  that retrieves the configuration information. The search-related configuration may include the location of a search engine, the return attribute values of search requests, the maximal number of returned \u201chits\u201d, the degree of fuzziness used for the search, or other parameters related to different fuzzy search algorithms. Following block , it is determined at block  whether information security is required for the search. Information security provides techniques that are implemented to prevent certain users from viewing or accessing certain knowledge base content. If it is determined that information security is required, processing proceeds to block  where information security processing is triggered. Next, at block , the information security is converted into a format of an attribute search query, and at block , that information security query is merged with the existing attribute search query. As such, the additional attributes converted from the information security serve to filter content from being identified in the index search.","Processing then proceeds to block , where it is determined if language-specific settings are required. If it is determined that they are, then processing proceeds to block , where the proper language-specific settings are determined. For example, the standard fuzzy search to allow spelling errors in alphabet-based languages cannot be used for other specific languages, such as Japanese, Chinese and Korean. In these cases, different language-specific settings may be needed to manage fuzzy searches. Next, at block , it is determined whether multiple index searching is needed, and whether that is supported. This may occur if multiple knowledge bases are specified by virtue of the originally received index search request, which means that multiple indexes would need to be searched. If it is so determined at block , then processing proceeds to block  where a multi-index definition is prepared. In one example, the multi-index definition defines the indexes to be searched and the attributes to be searched in each of the indexes. This may be done whether the indexes are being searched by the same search engine, or by different search engines.","After the multi-index definition has been prepared, or after it is determined that a multi-index search is not supported, processing proceeds to block , where requested return attributes are prepared. The functionality of requested return attributes can provide an efficient way to present the matched hits with additional details. In one example, different business applications, such as the applications -shown in , may need to present different details when searching a common index. In other example, different roles of users even using the same business application may require to view details, for example, in different fashions. For example, one user may have permission to view the details of all search results, while another user has only have permission to view the details of a sub-set of search results (possibly related only narrowly to this user's entry-level job function).","Next, at block , the applicable search engines are instantiated via a plug-in framework. As discussed previously, this may be implemented, for example, using object-oriented programming methods, wherein the plug-in functions to instantiate, from a generic index search query, or command, an index search object that is usable by the applicable search engine. As such, the index search object is instantiated within the applicable search engine. Then, at block , a call is made of a search method of each identified search engine. In the  system for example, this may be called by the search engine services component , and the method may be executed by the applicable search engine, and using the index search object that was instantiated in block . As such, a search of the applicable index, or indexes, is performed by the applicable search engine, or engines, to identify indexed content that meets the user-specified search criteria.","Finally, at block , the search results are prepared, and returned. The search results may comprise a list of content stored in the applicable knowledge base that meets the search criterion. In the  example, the results may be returned, firstly, to the search engine framework , and from there to the software application from which the index search request was received. As such, a \u201chit list\u201d of content that meets the search criteria may be displayed for a user interacting with the software application. As such, the user may then review the list of content, and if desired, initiate a retrieval command to retrieve the content\u2014in the form of an electronic document or the like\u2014from the applicable knowledge base. Thereafter, the user may review the electronic document, for example, and in the example of a call center software application, may forward the retrieved electronic document to a customer by electronic mail.","Referring now to , there is shown a process  that is performed when an index update request is received, for example, as determined at blocks  and  of . In one implementation, the index update request identifies the knowledge bases for which associated indexes are to be updated. In another implementation, all knowledge base indexes will be periodically updated. After the process has been started at block , processing proceeds to block  where it is determined whether or not the update of a particular knowledge base is to be a delta type of update. If not, which means a full index update is to be performed, then processing proceeds to block  where the data source for the particular knowledge base is scanned for all of the knowledge entities from the original data source. In one implementation of the  system, block  may be initiated by the design-time environment component  of the search engine framework  and performed by the knowledge service component  of the knowledge repository . Because the meta-definitions of knowledge bases -are previously defined, the knowledge service component  may trigger a scanning action by either directly checking all knowledge entities from the original data sources, or communicating with the external data source (via one or more of the plug-ins -) to request information of all knowledge entities.","If it is determined at block  that a delta type of update process is to be performed, then processing proceeds to block  where it is determined whether or not data source scanning is required. Whether data source scanning is required may depend on whether a \u201cpush\u201d or a \u201cpull\u201d methodology has been employed for modifications to knowledge entities. For example, a push methodology means that when a knowledge entity is modified in any way (that is, when it is created, revised or deleted), that the information of the knowledge entity is automatically \u201cpushed\u201d from the data source to the knowledge base, which in the  example means that it is pushed from an external data source (not shown in ) into one of the knowledge bases -via one of the data source plug-ins -. When this occurs, the identities of modified knowledge entities may be stored in a buffer table; which for example may be maintained in the knowledge repository . Alternatively, a pull methodology may be employed, which means that a modification of a knowledge entity in the data source is not automatically pushed into the knowledge base, but instead must be pulled to the knowledge base, for example, as initiated by the knowledge repository  of the  system to check timestamps and determine which knowledge entity is created, modified, or marked for deletion.","Accordingly, where data source scanning is required, which means a pull methodology is employed, processing proceeds to block  where the applicable data source is scanned for modified knowledge entities. Then, at block , an update of the identities of the modified entities is provided into the previously described buffer table. As mentioned, in one implementation of the  system, the buffer table is provided in the knowledge repository . Next, at block , the buffer table is scanned to determine the identity of the knowledge entities that need to be updated into the search engine index.","Next, starting at block , batches of knowledge entities are retrieved from the applicable data source and indexed. In particular, at block , first a batch of knowledge entities is retrieved from the applicable data source. For example, in a database management system, the retrieval step may be a SQL (Structured Query Language) select statement for a database table with master key or ID information that will retrieve a set of knowledge entities with a fixed size. In many instances, a knowledge base (such as the knowledge bases -) may include many database tables, (e.g., a service order may have more than twenty database tables including linked documents). After the keys or ID's for a batch are obtained, entity details are retrieved by passing those ID's to trigger the knowledge base plug-ins -to get detailed information at block .","Then, at block , it is determined whether the index is being updated for an external search engine, or in other words, a search engine that has been integrated into the system via a plug-in (such as the plug-ins -shown in the  example). In performing this action, it may first need to be determined from a configuration mapping database (such as database  in the  example) which of the search engines is mapped to be used in searches of the knowledge base for which an index is to be created. In addition, it may be that more than one search engine may be used to search for content in a particular knowledge base, for example, if one software application uses one search engine to search for content in the knowledge base, whereas another software application uses a different search engine to search for content in the same knowledge base. In such a case, more than one index will need to be created for the knowledge base to be updated, although not all search engine indexes for a particular knowledge base need be updated at the same time. If it is determined at block  that an external search engine is involved, then the processing proceeds to block  where the applicable plug-in (for example, one of the plug-ins -) for the particular search engine for which an index is to be updated is called to compose an indexing request. In one implementation of the  system, this call is made by the search engine services component , and is executed by the applicable plug-in -","From block , processing proceeds to block  where search engine configuration information is retrieved, for example, from the applicable plug-in -and by the search engine services component . Next, at block , communication is established (for example, by the search engine framework , and in particular, by the search engine services component ) with the external search engine (for example, one of the search engines -in the  system). Next, at block , the index action request is submitted to the applicable search engine for execution. Generally in response, the search engine then receives from the framework  the batch of entities and the entity details and creates an update to the index for the knowledge base for that search engine to use later in an index search.","After the update index action request has been submitted to the search engine, processing proceeds to block  where it is determined whether or not there remains any more batches of knowledge entities that require indexing. If so, then processing proceeds back to block  and processing of the next batch of knowledge entities proceeds as previously described. If it is determined at block  that there are no more batches to be indexed by the search engine, then processing proceeds to block  where indexing information may be logged, for example, as a record of the indexing action that has been performed. The log may include, for example, the date and time that the index update was performed, etc.","Referring now to , there is shown a process  that is performed when an process index clustering request is received, for example, as determined at block  in the  process. In one implementation, the request identifies the knowledge base to which the indexing request relates. From this information it can be determined which of the search engines (for example, of search engines -) may be used by any software application to search for content in the knowledge base. Again, in the  system, for example, the applicable search engines may be determined from the mapping information  in the configuration database .","After the process  has been started at block , processing proceeds to block  where it is determined whether or not a search engine index exists for the specified knowledge base. If so, then processing proceeds to block  where configuration information of clustering parameters is retrieved. The clustering parameters are part of search engine configuration stored in the configuration database . The parameters, for example, include selection of clustering algorithms, selection of classification algorithms, maximal number of clusters, maximal level of hierarchical clusters, threshold to determine a characteristic features, and\/or threshold to merge or divide clusters.","Then, at block , it is determined whether the index is being updated for an external search engine, as in the case of the  process (block ). Again, in performing this action, it may first need to be determined from a mapping database (such as database  in the  example) which of the search engines is mapped to be used in searches of the knowledge base for which an index is to be created. In addition, it may be that more than one search engine may be used to search for content in a particular knowledge base, for example, if one software application uses one search engine to search for content in the knowledge base, whereas another software application uses a different search engine to search for content in the same knowledge case. In such a case, more than one index will need to be created for the knowledge base to be updated, although not all search engine indexes for a particular knowledge base need be updated at the same time. If it is determined at block  that an external search engine is involved, then the processing proceeds to block  where the applicable plug-in (for example, one of the plug-ins -) for the particular search engine for which an index is to be updated is called to compose an indexing request. In one implementation of the  system, this call is made by the search engine services component , and is executed by the applicable plug-in -","From block , processing proceeds to block  where communication is established (for example, by the search engine framework , and in particular, by the search engine services component ) with the external search engine (for example, one of the search engines -in the  system). Next, at block , the clustering request is submitted to the applicable search engine for execution. Generally in response, the search engine then divides the indexed content into groups, or clusters, retrieves characteristic features from each cluster, and stores the characteristic cluster features, for example in the index created by the search engine -. A feature-cluster mapping may then be used to filter out non-essential features and to compare the differences between old relevant cluster feature sets and new relevant cluster feature sets.","Next, at block , it is determined whether the clustering action is finished, and if so, at block  information about the clustering action that has been performed and a time stamp as to when the clustering action occurred are logged for future reference if necessary. If it was determined at block  that a search engine index does not exist, then processing skips from block  to block , and that fact is logged.","Referring now to , there is shown a process  that is performed when an process content classification request is received, for example, as determined at block  in the  process. In one implementation, the request identifies the knowledge base to which the indexing action request relates. From this information it can be determined which of the search engines (for example, of search engines -) may be used by any software application to search for content in the knowledge base. Again, in the  system, for example, the applicable search engines may be determined from the mapping information  in the configuration database .","After the process  has been started at block , processing proceeds to block  where it is determined whether or not a search engine index exists for the specified knowledge base. If so, then processing proceeds to block  where configuration information of classification parameters is retrieved. The parameters, for example, include the type of classification algorithms (e.g., k-mean, support vector machine), the threshold to determine whether a cluster matches the input text, or other algorithm specific parameters. The classification parameters are either stored in the configuration database  or passed with the classification request.","Then, at block , it is determined whether the index is being updated for an external search engine, as in the case of the  process (block ) and of the  process (block ). Again, in performing this action, it may first need to be determined from a mapping database (such as database  in the  example) which of the search engines is mapped to be used in searches of the knowledge base for which an index is to be created. In addition, it may be that more than one search engine may be used to search for content in a particular knowledge base, for example, if one software application uses one search engine to search for content in the knowledge base, whereas another software application uses a different search engine to search for content in the same knowledge case. In such a case, more than one index will need to be created for the knowledge base to be updated, although not all search engine indexes for a particular knowledge base need be updated at the same time. If it is determined at block  that an external search engine is involved, then the processing proceeds to block  where the applicable plug-in (for example, one of the plug-ins -) for the particular search engine for which an index is to be updated is called to compose an index action request (and specifically, an index classification action request). In one implementation of the  system, this call is made by the search engine services component , and is executed by the applicable plug-in -","From block , processing proceeds to block  where communication is established (for example, by the search engine framework , and in particular, by the search engine services component ) with the external search engine (for example, one of the search engines -in the  system). Next, at block , the index classification request is submitted to the applicable search engine for execution. Generally in response, the applicable search engine performs an automated process on the knowledge base index that classifies the input texts to one or more of the generated clusters.","Next, at block , information related to the identified classes is retrieved. In the  implementation, for example, it may be the search engine services component  that retrieves this information, and the information may be retrieved from clusters by the applicable search engine. In another example, the detailed descriptions of matched clusters are returned along with the matched clusters by individual search engine. Then, this retrieved cluster information is organized based on the degree of matched similarity. If it was determined at block  that a search engine index does not exist, then processing skips from block  to block .","Referring now to , there is shown a process  that is performed when an process index maintenance request is received, for example, as determined at block  in the  process. In one implementation, the request identifies the knowledge base to which the indexing action request relates. From this information it can be determined which of the search engines (for example, of search engines -) may be used by any software application to search for content in the knowledge base. Again, in the  system, for example, the applicable search engines may be determined from the mapping information  in the configuration database .","After the process  has been started at block , processing proceeds to block  where it is determined whether the index is being updated for an external search engine, as in the case of the  process (block ), the  process (block ), and of the  process (block ). Again, in performing this action, it may first need to be determined from a mapping database (such as database  in the  example) which of the search engines is mapped to be used in searches of the knowledge base for which an index is to be created. In addition, it may be that more than one search engine may be used to search for content in a particular knowledge base, for example, if one software application uses one search engine to search for content in the knowledge base, whereas another software application uses a different search engine to search for content in the same knowledge case. In such a case, more than one index will need to be created for the knowledge base to be updated, although not all search engine indexes for a particular knowledge base need be updated at the same time. If it is determined at block  that an external search engine is involved, then the processing proceeds to block  where the applicable plug-in (for example, one of the plug-ins -) for the particular search engine for which an index is to be updated is called to compose an index action request (and specifically, an index maintenance action request). In one implementation of the  system, this call is made by the search engine services component , and is executed by the applicable plug-in -","From block , processing proceeds to block  where communication is established (for example, by the search engine framework , and in particular, by the search engine services component ) with the external search engine (for example, one of the search engines -in the  system). Next, preparation is made to submit the index action request to the applicable search engine to be executed. If the index action request is to retrieve certain identified information about the index (for example, an index log information), as determined at block , and if it is determined at block  that the index exists, then processing proceeds to block  where the index information request is submitted to the applicable search engine for execution. Next, if the index action request is to delete the index, as determined at block , and if it is determined at block  that the index exists, then processing proceeds to block , where the index deletion request is submitted to the applicable search engine for execution. Finally, if the index action request is to create the index in the first instance, as determined at block , and if it is determined at block  that the index does not exist, then processing proceeds to block , where the index create request is submitted to the applicable search engine for execution. After the index action request has been submitted to the applicable search engine for execution, processing proceeds to block  where a log of the index action that was performed is created.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 9","FIG. 1"],"b":["900","102","110","104","900","100","104","106","900","116","130","118"],"i":["a","c","a","d","a","c","a","c ","a","c ","a","c. "]},"The process  begins at block , when the framework  configures search engine hardware-related parameters, such as server, port, and queue server parameters, for the various search engines -. The framework  may access the configuration database  to retrieve one or more predefined parameters from search engine configuration information  for the search engines -. In one implementation, the search engine services  may also include a portion of the search engine configuration information . The configuration parameters may include various predefined parameters used when interfacing with search engines in general. For examples, the various search engines -typically reside on one or more servers and have input\/output ports for communication with the framework . Therefore, the configuration parameters would typically include parameters for server and port information. In addition, the plug-ins -may provide engine-specific values for various parameters that are specific to the corresponding engines -","At block , the framework  further configures search indexing, clustering, and classification related parameters. As described earlier, the framework  retrieves certain indexing, clustering, and classification configuration information from the database  and uses this information to configure the engines -and the indexes -. To do so, the framework  makes use of the engine-specific plug-ins -. In one implementation, the framework  is also capable of updating the search engine configuration information  that may be contained within the framework  and\/or within the database . If the framework  has been specifically configured within, for example, the design-time environment , of if the framework  obtains any configuration information via the administration UI , the framework  may then update the search engine configuration information .","At block  of the process , the framework  assigns, or maps, each knowledge base -to one or more of the search engines -based upon identification (by input from the administration UI  or by the framework  itself) of information contained within the knowledge bases -and identification of the specific search engines -. In one implementation, the framework  uses its design-time environment  to determine the assignments. For example, the design-time environment  may include a rule-based engine that automatically assigns knowledge bases -to search engines -based upon the rules that are used and the type of content contained within (or provided by) the knowledge bases -. In one implementation, the framework  may receive input from the administration UI  that specifies the mappings between knowledge bases -and search engines -. An individual search engine that is assigned to a given knowledge base will access and use an index, such as one of the indexes -, that contains index entries for electrical content contained within the given knowledge base. A knowledge base can be assigned to more than one search engine. For example, the knowledge base may be assigned to the engines and . In this example, the indexes and will each include index entries for content contained within the knowledge base ","Once the framework  has assigned knowledge bases to search engines, the framework updates the knowledge base-to-search engine mapping information  that is stored within the database . In one implementation, the mapping information  is included within the mappings  shown in .","At block , the framework  assigns knowledge bases -to business applications -and stores assignment information within the application-to-knowledge base mapping information  within the database . In one implementation, the mapping information  is included within the mappings  shown in . The assignments are based upon identification (by input from the applications -, from the administration UI , or by the framework  itself) of one of the knowledge bases -. For example, one of the applications -may send a search request to the framework . The search request may include an identification of one of the knowledge bases -. Upon receipt of the request, the framework  can store the mapping information for the application and identified knowledge base within the mapping information  for later use. In another example, the search request may not explicitly include an identification of one of the knowledge bases -. In this case, the framework  may dynamically determine a mapping between the application and one of the knowledge bases -using a rule-based engine that analyzes the type of application that has provided the request and attempts to find a match with a specific knowledge base. Alternatively, the framework  may access the mapping information  to determine if mapping information exists for the given application. For example, if the same application -had previously sent a request identifying one of the knowledge bases -, and if the framework  captured this identification within the mapping information , the framework  may then identify the same knowledge base upon receipt of subsequent requests from the same application.","In one implementation, the design-time environment  may also play a role in assigning knowledge bases to business applications by receiving input from the administration UI . In this implementation, an administrator may use the administration UI  to send configuration commands to the framework  to specify assignments between knowledge bases -and applications -. The design-time environment  may process these configuration commands and provide the assignment information for storage within the mapping information .","When the framework  has received a search request from an application -and has identified a knowledge base -, the framework  can then access the mapping information  to determine which search engine -(and corresponding index -) that is to be used in processing the search request, as is described above in reference to earlier figures. The framework  also accesses the configuration information  that is used for interfacing with the assigned search engine -by way of the plug-ins -",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 10","FIG. 1"],"b":["1000","116","1000","1002","1004","1006","1008","1010","1002","1004","1006","1008","1010","1002","1000","1002","1002","1002","1004","1006","1008"]},"The memory  stores information within the computing device . In one implementation, the memory  is a computer-readable medium. In one implementation, the memory  is a volatile memory unit. In another implementation, the memory  is a non-volatile memory unit.","The storage device  is capable of providing mass storage for the computing device . In one implementation, the storage device  is a computer-readable medium. In various different implementations, the storage device  may be a floppy disk device, a hard disk device, an optical disk device, or a tape device.","In one implementation, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the memory , the storage device , or a propagated signal.","The input\/output controller  manages input\/output operations for the computing device . In one implementation, the input\/output controller  is coupled to an external input\/output device, such as a keyboard, a pointing device, or a display unit that is capable of displaying various GUI's.","The computing device  further includes the network adaptor . The computing device  uses the network adaptor  to communicate with other network devices that may be included within the system .","A number of implementations of the invention have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention. Accordingly, other implementations are within the scope of the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 3-8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 10","FIG. 1"]}]},"DETDESC":[{},{}]}
