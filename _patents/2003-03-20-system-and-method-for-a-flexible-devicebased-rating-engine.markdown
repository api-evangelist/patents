---
title: System and method for a flexible device-based rating engine
abstract: A system and method for computerized metering, rating, billing and managing of account balances on an end computing device is disclosed herein wherein the end device may facilitate such processing whether the device is connected or is not connected to a network. The end device, furthermore, initiates communications with a host processor to obtain updated algorithms, rating tables and other accouterments necessary or desired to meter, rate, and process payments for transaction events. The end device initiates communications with the host processor or another end device to facilitate the synchronization of usage for pricing plans that span one or more devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08484130&OS=08484130&RS=08484130
owner: Convergys Information Management Group, Inc.
number: 08484130
owner_city: Cincinnati
owner_country: US
publication_date: 20030320
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This is a non-provisional patent application which claims priority from three prior-filed provisional applications with the following serial numbers and filing dates: 60\/367,964 (Mar. 27, 2002); 60\/375,455 (Apr. 25, 2002); and 60\/414,122 (Sep. 27, 2002). Each of those applications is hereby incorporated by reference into the current non-provisional patent application.","This invention is in the field of computerized billing systems.","Single purpose computerized end devices, i.e., cell phones, pagers, personal digital assistants, etc., have become commonplace. These single purpose devices have not, in the past, included any kind of application hosting facility. This was understandable given the network and processors that were available. Any intelligence had to be found in the \u201chosts\u201d that they were attached to. Often, the only way the end consumer could access the \u201creal data\u201d was to talk to a customer service representative (CSR) who had direct access to the host where the data resides.","Also until very recently, the environments for customer care and billing applications versus the overall carrier network environment were very different. Application environments, typically, were either Unix\/Open systems-based or Microsoft-based. The wireless networks used proprietary technologies. Finally, end devices and switches used proprietary operating systems, application development languages and runtime environments. Gateways had to be created to allow special purpose data (usage records, etc.) to be moved from the proprietary operating network to the more open application networks.","More Capable Devices","Four key trends are shaping the computerized billing industry: increased processing power on user devices, longer lasting batteries for user devices, standardization of the development and operating environment on the user device (standard operating systems), and finally the demand and growth of applications executing on the user device. End devices are rapidly moving from simple, proprietary, single purpose devices to full-fledged mobile application deployment platforms. The devices are also merging as personal digital assistants become wireless enabled and cell phones extend to become personal information management devices. These advancements include several dimensions: CPUs, memory, networking, graphical displays and operating systems.","Nomadic computing is a reaction to the complexity of interaction described above. In this nomadic computing model, the system adapts to the end user so that they have access to relevant information wherever they are, independent of their access mechanism. The system understands the location of the end user (both the virtual location, such as a portal, as well as their physical location), the identity of the user (his security credentials as well as his preferences), the time of his access, and the surrounding environment in which the interaction is performed (the device capabilities, the network bandwidth, etc). The system is responsible for maintaining the overall context of the interaction even as the user migrates from access point to access point.","These forces will merge to drive the next generation of the Internet which will be known as the Supranet. But satisfying user experiences will not be made strictly by wireless access; instead, integrating all end user access into a coherent whole will make compelling interactions. This integration will cross network boundaries and allow an interaction to be initiated in one medium and consumed in another. For example, driving directions requested by phone could be delivered by email. End users will access the Supranet via a variety of mechanisms: personal computers, phones, hand held devices, cameras, music players, game consoles, cars, public facilities such as kiosks.","Referring to , this includes a transition from a \u201cone-to-many\u201d model (client-server model) to a \u201cmany-to-many\u201d model where interactions are becoming more direct between individual users. This model is termed Peer to Peer (P2P) and will trigger a swing from centralized web applications to more distributed ones exploiting resources at the edge of the network.","There are several examples of these applications: Napster, ICQ, Popular Power, Freenet, AIMster, and Groove. What all of these have in common is that they are all leveraging previously unused resources by tolerating and even working with the variable connectivity of the hundreds of millions of devices that have been connected to the edge of the Internet.","The Current Model","As technology advances, so must the billing and customer care applications which support service offerings\/content access on the end-device. Customer care and billing applications (including pre-paid applications) have generally followed a network-centric or server-centric processing model. Please see, U.S. Pat. No. 6,198,915 by Russo, which issued on Mar. 6, 2001. Network-centric models process and store information centrally in the network and not in the device or access point that generates the data or events. Customer data is housed on centralized databases. Rating and billing for events involves some sort of network activity or usage. The model for rating and billing is to pull events from essentially dumb devices\/networks to a central location where business logic can be applied to determine and apply tariffs. This information is then sent back across the network to users or other systems.","The timing of these calculations can vary greatly from a few minutes to once a month depending on the particular billing system. What is common is that the billing is done not where the activity takes place but centrally and not when the activity is occurring but after some interval.","Even where some processing functionality takes place on an end device, please see, U.S. Pat. No. 5,577,100 by McGregor, which issued on Nov. 19, 1996 and U.S. Pat. No. 6,198,915 by Russo, which issued on Mar. 6, 2001, such applications are marked by a server-controlled relationship and are very limited in the scope of functionality offered on the end device.","Various embodiments (including systems and methods) for a flexible device-based rating Engine are disclosed. These embodiments may employ one or more of the following features disclosed herein either singly or in combination. These embodiments may facilitate the emerging technologies discussed in the background above, as well as technologies yet to come. The device-based rating Engine comprises a computerized application which facilities the configuration of computerized metering, rating, billing and managing of account balances on an end computing device whether the device is connected to a network or not connected to a network. It also facilitates the allocation of the metering, rating, billing, and managing of account balances between the end device and other peers, including a centralized system. The device-based rating Engine may be incorporated into virtually any end device that is capable of hosting the application.","A computerized system for processing events wherein said computerized system comprises an end device and said end device comprises a computerized Engine configured to process an event wherein said end device may process said event entirely within said computerized Engine and under the direction of said computerized Engine. Events may be generated by the consumption of content, games, network and device based services, voice transactions and more","The computerized Engine may further communicate with a computerized digital rights management (DRM) module to effect certain authorization and validation functions for the events. The DRM may also be contained entirely within the end device.","The computerized Engine also initiates communications with a centralized system via a network to interact with a back end billing system that handles aggregation, cross device discounts, shared resource utilization (minutes, downloads, etc), fraud detection and settlement requests generated by the computerized Engine.","The computerized Engine may also maintain an account balance for a user associated with the end device. The account balance may be stored entirely within the end device and may be manipulated by the computerized Engine in response to an event promulgated by said user.","The computerized Engine may further initiate communications with a payment agent (Visa or other crediting or debiting entity) wherein the account balance stored within the end device may be replenished when the account balance satisfies a controlling business rule such as when a balance reaches a predetermined limit.","The computerized Engine may be deployed over the following embodiments: end device's hardware, end device's firmware, end device's operating system, and\/or an application level deployment within said end device. Components of the computerized Engine may be distributed over one or more of these deployments as well.","Finally, the computerized Engine may achieve the following benefits:","Scalability\u2014As with other peer-to-peer systems, the overall system scales with the number of devices because each device comes with its own processing power. The system automatically adjusts to increases in the number of devices because each device brings its own CPU and rating instance.","Network Bandwidth\u2014The DRE improves network utilization because network traffic is not incurred for every transaction. Information can actually be bundled in this model. In a network-based system all the data required for rating needs to be transmitted. In a DRE system when the data needs to be transmitted for record keeping, etc, all the data needed for rating does not need to be transmitted because the records are rated on the device. In prepay instances the savings can even be greater. Normally in prepay with a network client server model a lot of authorization messages need to be transmitted. When the device may be maintaining the balance, these messages are not required. Also in a prepay model, a user may need to be informed of rating limits while activity may be occurring. For example, in a prepay voice call, the user is sometimes informed of minutes used or balances via a whisper. In network systems, this involves network traffic and the use of special network equipment. Neither this type of traffic nor the specialized equipment for such traffic is required for various embodiments of the invention.","Lower Deployment Costs\u2014Because the rating function may be distributed out across the processors of the devices there may be no need for large centralized computing resources specifically dedicated to rating. While some form of backend system may be required for administration and for processing cross device discounts, promotions, fraud detection, etc. there may be no need for large server farms dedicated to rating and billing. This may be especially true in a prepay model.","Easier Customer Support\u2014The device may support real time on device rate determination. It may also support, via the storage facility, a journal or record of activity. The end user (with the appropriate UI) may actually see this information. This allows them in many instances to answer many of their billing questions directly themselves on the device in real time. This should result in significant savings in the cost of back-office, customer-service agents. Today many calls made to such agents are for access to the information that only the agent has access to because of the client\/server model of the billing system. In this embodiment, the end user has direct access to the information because it may be happening directly on his device.","Content Billing\u2014Most of today's networks are packet-based. At the network level, content transmission is simply a series of packets. Voice may be intermixed with video, file sharing, application requests, etc. The network in many instances does not understand the particular content it may be transmitting. This independence is one of the real powers of today's packet-based network, but it makes billing for content more difficult. Billing at the device, however, solves this problem because the device (the applications) knows what content is being consumed. This allows for the application context to be included in the rating and a large factor here may be the content itself. This may be extremely important as billing moves away from just billing for packets or time and actually billing for content.","Network Independence\u2014A device-based rating system can be independent of the network it may be connected to. It can rate in a network agnostic fashion. For network usage type services, the DRE can support a complete range of network protocols (2G, 2.5G, 3G. 802.11, BlueTooth, Infrared, etc).","Real Time Metering\u2014Rating on the device can be done in real time as content or services are being used. This allows very fine grain control of pricing and content utilization. It also allows for real time display to the end user of specific charges for specific use.","Rating while off Network\u2014Many types of content can be consumed while a device may not be connected to a network: games, music, software, etc. All of this digital content can be consumed independent of any network connection.","In one embodiment, the invention comprises a computerized system for processing events (including but not limited to content consumption events and\/or transaction events) wherein said computerized system comprises an end device and a host system wherein said end device comprises an Engine configured to process an event. The Engine further is configured to receive an event for processing and to process said event while disconnected from a host system (any back-end system connected to a network that is accessible by the Engine). The Engine is further configured to selectively establish a communication link (physical or logical connection) with said host system to synchronize with said host system. The host system may comprise one or more of the following: billing system, settlement agent, rating Engine, and\/or content provider system. Synchronization means a matching up of the two systems being synchronized so that they comprise mirror images in the areas to which the process was applied. Synchronization may include, but is not limited to, the following: one or more account balances, one or more rated or unrated usage records, one or more price plans, one or more payment classifications, and\/or one or more credit policies.","In another embodiment, the Engine may be capable of connecting to a network and transmitting a limited inquiry to determine the level of traffic present on the network and, using this information, selectively choose to establish a connection to a host system on that network if the level of traffic is within a set of predetermined boundaries. Selective establishment of connection to the host processor may also be based on the level of activity on the end device, a predetermined schedule, when a particular type of event is processed or when a certain number of records have been processed.","In some embodiments, the Engine may begin processing of the event but more complicated processing may be required or some other reason may exist to complete processing on the host system. The Engine is configured to split processing responsibility between the end device and the host system where desired. In an alternative embodiment, the Engine may send the event to a third party provider for further specialized processing. For instance, a third party provider may provide a rebate for the purchase of a particular item but it needs to be notified of the purchase before it can send a rebate event to the Engine.","An advantage to a device-based rating Engine is the end device's ability to determine, in a content-based operation, the type of content that it is actually consuming. Rating plans may be built around content types rather than merely time or byte based and the Engine may be designed to select the proper algorithm for the proper event.","All events that the Engine processes are stored\/summarized in an on-device journal that may be accessed by a user of the end device through a user interface (preferably a GUI).","In another embodiment, the invention comprises a computerized system for processing events wherein said computerized system comprises a first end device and at least one additional end device wherein said first and said at least one additional end device each comprise an Engine configured to independently process at least one event; wherein said Engine of said first end device may selectively establish a communication link with said at least one additional end device to synchronize one or more events processed on said at least one additional end device with said first end device. The first end device may maintain a master balance to be utilized by said Engine to settle a cost associated with said event. The master balance may be earmarked among one or more providers or even for particular events. The master balance may also be reallocated upon the request of one of the additional end devices to the first end device. This may be according to a predetermined formula or it may be calculated based on a history of events processed on the devices which are to share in the reallocated balance. The formula may also take into account other information such as preferred customer status, credit status, etc.","End devices may comprise a spectrum of technologies and two end devices comprising Engines for processing events do not necessarily have to be of the same type (e.g., one may be a cell phone and the other may be personal digital assistant). Nonetheless, these different devices may be assigned to the same plan for processing events and share algorithms, balance totals, etc.","Finally, in another embodiment of the invention third party applications may reside on the end device and interface with the Engine through a set of publicly available application program interfaces. By way of example and not limitation, one such interface may be designed to accept\/receive events from third party application programs. Another interface may be designed to accept\/receive queries from a third party application as to the status of a particular event. Using the application program interfaces, a third party application may be configured to produce an event, which is specialized according to the parameters of that third party application. A similar API could be used by a DRM platform for DRM integration.","This application discusses a different perspective on the problem of metering, rating, billing and managing account balances by performing some or all of the functionality in the device itself as an alternative to the traditional, centralized model. Embodiments of the invention include a conceptual and detailed design for a Device Based Rating Engine (various embodiments shall be collectively referred to as DRE or Engine). The terms Engine\/application\/program as used herein will refer to any embodiment of computer-executable instructions on a computer readable medium including but not limited to software, hardware, firmware, modules, programs, routines, etc.","The programs described herein are presented according to principles of object-oriented design, the terms and concepts inherent to this model will be easily understood by those of skill in the art; however, it should be understood that other programming methodologies would work as well.","Device-Based Rating","The DRE may comprise a general-purpose rating and billing Engine hosted on a wide variety of end devices which may not be specific to any industry. The DRE processes transaction events, which should be understood to refer to an activity performed by a user via use of the end device which are capable of being measured, billed or authorized, and content consumption events (e.g., download or read a book, open a WebPage, check a stock portfolio, etc.) which are a specific type of transaction event, as that term is defined above. The end device may comprise any device capable of hosting content or offering a meterable service. The end device may be fixed or mobile, distributed or centralized (i.e., where a server itself may be actually consuming content or engaging in a transaction event as opposed to merely delivering content to a client system.) Content may even be stored and consumed later on the end-device when the end-device is off-network. Preferably, some, at least periodic (scheduled), intermittent (random), or occasional (user-initiated), connection to a network may be available. The following list of potential end devices is meant to be explanatory rather than limiting: mobile devices, pagers, cell phones, PDAs, laptops, desktops, game consoles, set-top boxes, appliances such as televisions and washing machines, services, personal computers, stereos, walkmen, MP3 players, DVD player (handheld or otherwise), vending machines, rental equipment and more.","As a rating system, the DRE may calculate a price for some actual or potential occurrence by considering factors such as the date and time of an occurrence, length of time of an occurrence, some dimension or size of an occurrence (such as number of bytes in a download), history of past occurrences, or some quality of the occurrence (sound fidelity, resolution of video, etc.). In past attempts to tailor calculation of charges to specific factors, attempts have been made to attach markers to the bytes or packets being transmitted over the network that designate the download as voice, e-mail or music so that the network could assess the transmission according to that code. The reality, however, may be that these elements are intermixed and that the network in many instances does not understand the particular content it may be transmitting (the network perspective is the bytes or packets downloaded). The end device, however, does understand what it is consuming and is in the best position to know exactly of what type, when, and how much of the content was actually consumed and then use information about application context to calculate the charges associated with such consumption.","Another possible billing model that may be further enabled with the DRE is recognition of its geographic location and the ability to consume location-based services that are in turn rated and billed for on the device.","The DRE may also include real time metering and fraud detection using the device's rating system to meter the use of the content in real time and ensure that the requirement for sufficient funds may be enforced directly at the point of consumption thus reducing fraud.","DRE () may be implemented on the user device (). Various remote systems (-) are provided as examples of potential external interactions with other systems. Referring to , specific interactions are dependent on the implementations of the collectors and rules (, ) that process any given event (). These may include managing an account on the DRE, generating rated usage on the DRE, managing a balance on the DRE, applying cross-device discounts, applying credit policies, mediating, settling and more.","Events () may comprise occurrences of external actions reported to the DRE () to cause some effect. Events () may be produced by external applications and consumed by the DRE () or forwarded to a remote system. Events may be categorized by type for generic processing or specialized for specific processing.","In an embodiment of the invention, the DRE is autonomous. The end device is in control, that is, the end device initiates communications with a back-end system to the extent that the end devices interfaces with a back-end system (e.g., to synchronize charges, events, or to download new rating schemes, data from external databases, and new algorithms for rating, encoding, encryption, etc) according to predetermined or programmable triggering points (e.g., a specific number of events, on a timer with an error check to make sure there are events to report before initiating the communication, etc.). In various embodiments, the end device is no longer a slave to inquiries by a central rating and billing system. This feature embodies the paradigm shift from the old \u201cserver-centric model\u201d to a \u201cdistributed model\u201d in which the end devices control the processing of events\/transactions and the consumption of content. This improves traffic flow over the network because unnecessary traffic is not created by a centralized rating and billing system to update rules\/algorithms\/tables when such may not be utilized by the end device. In one embodiment, since the device handles rating, there isn't any need to handle all of the usage\/authorization records that are moved around the network today. Furthermore, bandwidth may not be utilized for fruitless, automated polling queries by the centralized rating and billing system\u2014the device may simply upload records when such records exist or a predetermined amount of records has been accumulated. Finally, the end device may choose the most appropriate time (through analysis of its current processing power consumption and\/or analysis of current network throughput) to upload events to the centralized rating and billing system to achieve the most efficient transfer possible.","The DRE may take advantage of common operating environments available on the next generation set of hand-held and wireless devices (including but not limited to J2ME enabled devices, Palm devices, Symbian devices, Microsoft CE-based devices, and equivalents therefor). The DRE may be a host application on the device; it may use the common operating environment on the device for its processing, networking, display, timing, event notification and storage. It may provide its services to other device-hosted applications that require rating and authorization for access and content. This may be provided through the common application interface mechanisms provided by the DRE's operating system.","Scaling also takes on a different dynamic with a device-based solution. In a sense with a device-based model every subscriber shows up with his or her own CPU. Because the processing is distributed, the system scales evenly with the addition of new subscribers. It is a self-regulating system.","For purposes of scalability, various embodiments may utilize threading. A thread allows multiple paths of execution, e.g. simultaneous execution of event processing, network connections, etc. An instance of the DRE handles multiple concurrent \u2018events\u2019 or service requests. Each event can be assigned to a pre-allocated thread (from a pool) that processes the \u2018event\u2019. If multiple instances of event processing or network connection handling are using the program or concurrent requests from other programs occur, a thread is created and maintained for each of them.","Various embodiments of the invention propose to solve individually or in combination the current rating dilemmas:\n\n","The DRE () is a very flexible system where the amount of rating and billing processing can be shifted between a single device, a set of devices, remote provider systems or a centralized system. An embodiment of a DRE () may fit within an overall system () for billing, rating, administration, and customer care. In another embodiment a peer-to-peer model for rating, billing, and settlement may be accomplished by distributing the processing out to the devices () themselves. Another embodiment may allow network involvement in an end-device system that provides local rating and billing but cooperates with a back end billing system that handles aggregation, cross device discounts, shared resource utilization (minutes, downloads, etc), fraud detection, settlement, etc. Virtually any combination of the aforementioned functionalities may be created.","The amount and kind of processing performed in the end device can be tailored to the individual application executing on that specific device. Thus, the DRE can perform processing (including metering, rating and billing) for many applications on a single device even though each application may have its own unique requirements for processing.","A central rating and billing system () can collaborate with the distributed DRE system () to produce the final bill for the customer. The DRE () can provide varying degrees of rating and summarization of events occurring on the device and send those onto the centralized system (). Referring to , the rated usage () may be periodically synchronized with enterprise settlement peers (). These enterprise peers () can provide subscriptions for services and content to DRE customers (). These enterprises () may choose to offer cross promotional or discounted offerings to subscribers () with DRE () enabled devices () based on rated usage () information acquired from DRE () enabled customers (). Some example promotions are holiday discounts on content and services, as well as extra credit for high game scores on a DRE-rated game used by customers () of the enterprise peer (). Also, the rated usage can be used by the enterprise () to analyze content and service usage patterns.","Referring to , a Record Store () may provide a facility to hold the data about price plans as well as usage history. This store () may sit on top of the standard storage API provided by the operating system or execution environment.","High Level Design","The DRE model may be particularly suited toward a prepaid model where the balance persists even when the consumer may be out of range of the network. This disconnected mode may occur by environment (inside a building, elevator, or tunnel), regulation (airplane), or choice (power-saving mode). Also, in the prepaid model, a platform may be designed to deal with micro-payments which are currently associated with high processing and transmission costs.","Rating may also be performed continuously or simultaneously as an occurrence may be underway. It may not be necessary for rating to happen after the fact. In a preferred embodiment, rate plans may be configurable and modifiable at runtime. They may be managed in a central location and then downloaded to the DRE upon initiation by the DRE via a synchronization program.","Referring to , the end-device () may include a DRE further comprising a generic \u201cevent-based\u201d rating Engine (). The DRE () may be configured with a set of generic \u201ccollectors\u201d that capture the events and process them by analyzing the attributes of an event and, when a match occurs, launching an associated rule (-). The generic collectors may provide a set of standard billing and rating services. Generic collectors may use meta-rules (instructions derived through data) () to process generic events (). Specialized collectors with specialized rules () may be added to the DRE (possibly through customized development) () configuration to capture specific events and process them with specialized business rules (). Collectors and rules may be managed in a central location and then downloaded to the DRE upon initiation by the DRE via a synchronization program. Rules may comprise rate plans, rating algorithms, and\/or payment algorithms.","The DRE () may collaborate with remote systems in a modified version of the traditional client\/server model. A centralized rating and billing (CRB) component\/peer () may facilitate the configuration and maintenance of the collectors, rules, and known events. The other remote systems (-) may collaborate with the DRE () to process events (). The CRB () may also serve as a mediator between other remote systems (-). Events () may be passed from the DRE (), to the CRB (), which may then collaborate with another system based on its specific interfaces and protocols.","The DRE () may maintain on the device () a set of account balances that can be debited, credited and queried as necessary based on the rating and\/or consumption of events () in either connected or disconnected mode. The balance may be expressed as units, which can represent any type of measure (i.e., dollars, time, tokens, megabytes), or as a specific type of measure. The balance may also be stored in generic \u201cunits\u201d and the rating program may comprise a translation mechanism to convert units into the appropriate unit of measure necessary to facilitate an event. An account balance may be maintained in a generalized account used to settle any event () authorized to draw from that account. The balance may also be maintained in a specialized account associated with a limited set of events () specific for that account balance.","Referring to , there is shown a high-level service view of a DRE () and a centralized DRE peer () and the division of duties thereon. A DRE () may be capable of managing and maintaining account and account balances on a device () utilizing the hardware and software security. The on-board account and balance management can either be maintained by the DRE account management module or it can integrate with a standardized, vendor specific or generic e-wallet management system. The DRE account and balance activity may be periodically synchronized () with the appropriate primary settlement peer (). DRE account management can and will occur when the device may not be connected to the network, but periodic synchronization to the peer may occur for account auditing and other possible centralized account management functions.","Balances may also be shared across systems whether like or dissimilar. For example, a balance of game tokens may be shared across two gaming devices that are each held by two family members. In another embodiment, a balance of units for the mother's mobile phone may be combined and redistributed with the balance of game tokens on her son's gaming device.","An end user may also establish an account balance on the end device () that can only be used to settle with a specific provider.","Low-Level Design","Centralized telecommunications carrier billing, rating and usage (BRU) () systems typically process every phone usage record generated by the phone switch. In order to provide certain billing features, these huge amounts of usage records must be processed in near real-time. The DRE () may provide two critical services to assist the carrier's BRU (): usage summarization and service authorization. The DRE () may accumulate usage details and present them to the BRU () in a summarized format to compress the amount of usage records required by the BRU (). Additionally, the DRE () may authenticate services based on information stored and\/or accumulated on the device such as remaining prepaid minutes.","Once the DRE () has rated and billed for some service, the DRE () may collaborate with a Settlement Agent () for payment. For example, a prepay arrangement might be established that when an account drops below a given threshold a debit may be issued with Visa. Upon successful interaction with the settlement agent (), Visa in this case, additional prepaid credits may be stored on the device (). Based on credit worthiness, a balance could also go negative (i.e., extend credit to the device up to 20 units.)","The Sync facility () may provide the messaging infrastructure to synchronize the device () status with the backend system. Like the Record store () it may ride on top of the standard system level services provided by the operating system or execution environment. It may or may not be tied to any particular protocol. Messaging in this design is always initiated and controlled from the device ().","Referring to , once the rated usage information from the DRE () is at a recognized settlement peer (), settlement activities may be performed by the peer on behalf of the content and service provider partners (). Synchronization policies may be defined by any of the following DRE stakeholders: device manufacturers that provide an embedded DRE, enterprise device providers, content providers, service providers. The following policies may also be defined: periodic synchronization based on a timer, network sense synchronization (whenever a device starts a network connection), application initiated synchronization (either prior or after an application or service may be initiated), and device user initiated synchronization (whenever a user manually issues a synchronization). Referring to , virtually any aspect of the DRE () may be synchronized with a back-end peer including but not limited to account balance, generated\/rated usage (mediation), price plans, payment classification, credit policies, content provisioning, and DRE updates.","Referring to , an embodiment detailing one example of the rules design and the integration of the rating Engine component with the DRE () is shown. A Collector class comprises a Rating Engine class and a ConfigRatingCollector class. The RatingEngine includes the subclasses Rule which further includes RuleAction and RuleCriteria. Further subclasses include ConcreteAction, ConcreteCriteria and ConcreteRule. The ConfigRatingCollector consumes ConfigRatingEvent objects and uses the CVG Record Store.","A RuleAction Interface () defines the method \u2018apply\u2019 () which may be used to perform the behavior associated with the rule. The apply method () accepts an Event object, which may be modified during the action processing. A ConcreteAction () implements the RuleAction ().","The Collector abstract class () contains methods to manage the Collectors configured within the system, as well as define the \u201chandleEvent\u201d method () used by all subclasses to process the Event. The subclasses of the Collector abstract class () will implement the required behavior to process their specific Event types (RatingEngine for rating events and ConfigRatingCollector for configuration events).","The RatingEngine () may be a standard Collector () that may be configured to consume Events () that should be rated. The RatingEngine () may obtain a list of Rules from the ConfigRatingCollector () either remotely or by calling the \u201cbootstrap\u201d method (). When an Event () may be passed to the RatingEngine (), it tests the applicability of each Rule by using the associated RuleCriteria () class. If the Rule may be applicable to the Event () passed, the associated RuleAction may be executed against the Event. The RuleCriteria Interface () defines the method \u201cmatches\u201d () which may be used to determine if an associated RuleAction () should be applied to the Event passed on the method call. A ConcreteCriteria () class provides an implementation of the interface and performs the test. Based on a Boolean result, the RuleAction () may be executed.","Rule Interface () defines three methods for managing the collection of RuleActions () and RuleCriterias (). The methods \u201cgetAction\u201d () and \u201cgetCriteria\u201d () are used to obtain the two associated concrete implementations. The method \u201cgetPriority\u201d () may be used to order a sequence of Rules that should be performed against an Event type. The priority becomes important when multiple Rules can be applied to a specific Event. A ConcreteRule class () provides the implementation of the interface.","The ConfigRatingCollector () class refines the Collector abstract class () and provides the behavior to consume ConfigRatingEvent objects. ConfigRatingEvent objects () are used to add, remove, and update rating rules in a persistent store (). The store () maintains the rules past the life span of the RatingEngine () instance (i.e., the device () may be turned off) in the CVGRecordStore (), which abstracts device file system to provide helper methods for accessing records and fields. When the RatingEngine () may be started again, the ConfigRatingCollector () may be used to bootstrap the rules by reading the persistent store of Rules. The RecordStore () may be also used to hold information that may be synchronized between the DRE () and other remote systems ().","Referring to , a diagram is shown which illustrates an embodiment of the overall design of the Event Processor () component of the DRE (). The EventProcessor () class includes the Collector abstract class () which contains methods to manage the sub-collectors (i.e., , , , , ). The subclasses of the Collector abstract class () will implement the required behavior to process their specific Event types. The Event interface () defines methods to determine the type and source of the Event (). Event types provide the ability to categorize the Event (). Collectors can be provided to process specific concrete events or for a specific set of event types. Concrete events may provide data used to process the Event () according to the specific needs of the Event ().","The ConfigEventCollector class () refines the Collector Abstract class () and provides the behavior to consume ConfigCollectorEvent () objects. This collector () can reconfigure (add, remove, update) collectors and rules from a persistent store. The store may maintain the Collectors past the life span of the EventProcessor () instance (i.e., the device may be turned off). When the Event Processor () may be started again, the ConfigEventCollector () may be used to bootstrap the Collectors by reading the persistent store of Collectors.","The ConfigCollectorEvent () subclass may be used to administer the EventProcessor () remotely. This type of event () may be used to add, remove and update Collectors within the EventProcessor ().","The RemoteEventCollector class () may be provided as a default collector that consumes Events () that should be queued for transmission to a remote system (-). The RemoteEventProcessor () class consumes events () transmitted from the local EventProcessor () and forwards them to the appropriate networked system for final consumption.","The DefaultEventCollector class () may be provided a default collector that consumes the event if all other Collectors have not consumed the Event.","A ConcreteCollector () may be an instance of a specific collector to perform specific behavior. These collectors () are aware of specific Event types and Event data to be processed. These collectors () are configured into the EventProcessor () as needed based on the posting of Events () by an Application ().","The Task Class () may be used within the EventProcessor () to execute a unit of work associated with an Event that has been posted to the EventProcessor (). The Task class can implement a platform specific thread interface, e.g. the java runable interface. Each event () that may be posted to the EventProcessor () may be placed into a Task object, and the Task may be executed using a pooled thread object.","The EventProcessor class () may be the only visible interface to the DRE system () to applications. The EventProcessor () exposes the method \u201cpostEvent\u201d () through which all events () enter the DRE (). The DRE () may be started by issuing a call to the static method \u201cgetProcessor\u201d that returns the singleton EventProcessor () object. During the construction of the EventProcessor (), it calls the ConfigEventCollector () to obtain the persisted configuration of Collectors and it also creates the Thread pool. Calling the \u201cclose\u201d method, which waits for all Threads executing Tasks to complete before returning, stops the EventProcessor ().","Referring to , an illustration of one embodiment of the invention may be shown which depicts a sample set of interactions between an Application (), the EventProcessor (), and the Rating Engine (). In this embodiment, the DRE () is acting as an \u201cin-process sequence\u201d, where the application () and the DRE () execute in the same process space on the device (i.e., in the same Java virtual machine, a symbian process, etc). When an Application () wants to make use of the DRE (), specialized Events, Collectors, and Rules can be created for that application if the standard set of generalized objects do not satisfy the Application's () requirements. This sequence assumes that the ConcreteCollector () has registered an interest in the ConcreteEvent () class posted by the Application (). The sequence diagram also illustrates the three main threads of execution during the processing of the event (). The Application () runs on its own thread. The EventProcessor () also executes on its own thread with the primary function of accepting events () and handing them off to Task objects (). The EventProcessor () may maintain a pool of threads to execute Task objects (). The threads running the Task objects () are the third main set of threads involved in the processing of the Events (). The EventProcessor () and the RatingEngine () are singleton objects. In object-oriented programming, a singleton class is a class that can have only one object (instance of the class) at a time. When the first reference may be made to obtain the EventProcessor (), the DRE system () may be started. The Application () obtains a reference to the EventProcessor () by calling the static method EventProcessor.getInstance (). The Application () creates the ConcreteEvent object () with whatever information may be relative to the ConcreteEvent type. The Application () then posts the populated events to the EventProcessor (). The ConcreteEvent () should implement a blocking call that suspends the thread of execution until the event state may be modified from unprocessed to processed. In this case, the isReady method () may perform a blocking \u201cwait\u201d. Once the \u201cwait\u201d releases, the method can check an error status on the event and respond appropriately (True\/False). Events () can implement the ErrorHandler interface if the event wants to consume any errors that occur during the processing of the event. The ConcreteEvent () may then respond that an event failed and why back to the Application (). If the \u201cisReady\u201d method () response is \u201ctrue\u201d, then the application () may proceed.","When an event posts to the EventProcessor (), a Task object () may be created with the Event () to process the request. A thread may be removed from the pool of available threads and used to execute the task. At this point, this may be the EventProcessor's () only responsibility so that it can process events () as quickly as they are posted. When the task completes, the thread may be placed back into the pool of available threads.","The bulk of work may be performed within the Task object (). Collectors () evaluate the type and source of the event () to determine if they should handle the Event (). If a Collector () processes an Event (), it marks the Event () as processed at the completion of their processing. This stops the chain of Collectors () from examining the Event (). In this example, the ConcreteCollector () accepts the ConcreteEvent () for processing. The ConcreteCollector () directly calls the RatingEngine ().","When an Event () may be posed to the RatingEngine (), the rating Engine () evaluates the configured rating rules () to see which ones should be applied to the Event (). Each Rule () provides a ConcreteCriteria object () that performs this evaluation. If the matches call () on the ConcreteCriteria () returns \u201ctrue\u201d, the associated ConcreteAction () may be applied to the Event (). The ConcreteAction () may perform the rating and set the cost of the Event () directly into the Event (). All rules that apply to the Event () will be processed (). Rules are applied in the priority order as specified during their configuration.","Referring to , an embodiment of the DRE () is displayed as an out-of-process model, where the application and the DRE execute in two different process spaces and communicate using through the operating system. In this embodiment, message queues are utilized. The three main threads of execution are depicted as the Application () waiting for a response, the EventProcessor () accepting requests and allocating threads for the Task () to process the Event (). The details of the handleEvent method on the ConcreteCollector () remain the same as depicted in . In the out-of-process model, the primary difference may be the use of an intermediary to pass Event messages between the Application () and the DRE (). These messages may be encrypted and digitally signed before they are sent across the open. Two queues may be enlisted to pass the messages of serialized Events. The WriteQueue () may be used to send messages to the DRE () and the ReadQueue () may be used to retrieve messages from the DRE (). The Application's () main thread blocks on the receive method wait for a response back from the DRE (). Once the message may be received, the message may be deserialized back into an Event. The \u201cisReady\u201d method () may be then called on the Event () to test the result of the DRE () processing. This version of the isReady () method doesn't block as in the in-process version.","The EventProcessor's () main thread performs a blocking call () on the receive method () against the WriteQueue () waiting for messages to be posted for DRE () processing. Once a message is received (), the message may be deserialized () into an Event Object (). The Event Object () may be placed into a Task object () (), which may be then run () a thread. The Task object () performs its normal processing by calling the appropriate ConcreteCollector () to handle () the Event Object (). The Task object () has the additional responsibility of serializing () the Event () back into a message and posting that message () onto the ReadQueue () before the Task () completes.","Synchronization","In an embodiment of the invention, the DRE may execute in both connected and unconnected modes but a device and the backend system, at various times, may need to synchronize (). For example, the device may maintain a store of information relating to the activities of the user on the device. The user may also have made a payment on the device. Likewise, administrators could have added new rules for pricing and billing. In these instances, the device may need to upload information to the backend system and the backend system may need to download information to the device. A Synchronization protocol may therefore be required between the two systems. In the device, this synchronization is always initiated by the system resident in the device.","The Operating System's network interface () may be used by the Synchronization Facility () to create a connection between the device () and a remote server (). The connection offered may support the Secure Socket Layer (SSL) protocol or any other industry-accepted protocol. Operating System Facilities () may be the standard platform and system level services used by the DRE. They may include timing services (for the capture of events that have a timing element), IO facilities for the storage facility, and networking facilities for networked messaging.","To facilitate synchronization, the DRE () may maintain an event queue locally on the device (). A second event queue may be maintained on remote systems () that collaborate in the distributed model. The DRE () may be configured to communicate with multiple back-end systems (-). When a connection may be established between these systems, events in these queues are exchanged between these systems. Each instance of the DRE () may be configured with a globally unique identifier that may be used to identify itself to the centralized systems (). These centralized systems () may store many events in the queue for the many instances of the DRE system (). When the DRE () connects, the unique ID may be presented to the centralized system (), which responds by transmitting all of the associated events destined for that instance of the DRE system (). The DRE () maintains the queue of events as a persistent store on the device (). The sequence of events may be maintained within the store and may be transmitted to the centralized system in that order. When the DRE system () may be started, the EventProcessor () instantiates a timer object. The timer's responsibilities are to maintain a list of configured timing intervals and associated events that should be posted to the EventProcessor () when an interval may be reached. The timer uses a specialized Collector to receive Timing Configuration events from the administration system to add, remove and update the list of timed events. Timed events may be used to initiate synchronization with the back end systems (). These events can be scheduled to execute when the DRE system () starts and or attempt to connect at a configurable interval\/parameter. If the device () cannot obtain a connection, events continue to queue up in the synchronization store until the next interval. Some event types might require synchronization with back end systems () and should not be cached on the device (). These events may cause an immediate synchronization with the back end () or result in an error message if a connection cannot be established. The user could be informed that they must move to a location with connectivity to proceed. The DRE () could also require the user be in an area with connectivity to perform a synchronization due to an accumulation of events or some other threshold such as pre-pay balance level.","Rate plans implemented within the RuleAction implementations may use time as a factor in determining the cost of an event. However, time may be relative. Time can represent the duration of time between two events. It can represent the time based on a centralized server or Greenwich Mean Time (GMT). Time can also represent the local time based on the location of the device. In order to determine time duration, the DRE () takes two or more snapshots of time and derives the duration based on the difference. Typically, the application would send two events to the DRE (); some type of \u201cstart\u201d event and some type of \u201cend\u201d event. During the processing of the start event, the DRE takes the initial snapshot of the current time. When the end event may be posted, the DRE takes the second snapshot of the current time. The start and end times are compared to derive the time interval between the two events.","The DRE () may also execute as an application on the device (). It therefore may use the operating system on the device to determine time. It is immaterial to the DRE how the operating system determines time, it simply uses the timing facility provided by the operating system. Events that require the timestamp (date and time) of an event must have a trusted source of the timestamp. This type of event can be further broken down into events that are time zone sensitive and insensitive. The actual time of day may be difficult to securely determine simply on the device as the user can set and reset the time of day. Additional mechanisms may be in place to raise the level of trust of the device's () system clock for timestamp purposes. In between synchronizations, the DRE can intermittently validate the system clock by comparing a stored time value plus the interim validation period with the current system clock time. A discrepancy would indicate that the user has altered the system clock time.","During an initial startup, the DRE () may attempt to synchronize with the backend system. If the device cannot synchronize, then the system clock must exceed the last valid time stored within the DRE as time only moves forward, other than daylight savings time. If the device has not synchronized the GMT within some period of time (i.e., configurable hours or days), the system clock may lose its trusted status resulting in error messages displayed at the user. Stationary devices (i.e., set-top boxes) may be configured to obtain the time zone from the centralized billing system, which holds the device's location. Stationary devices that post time zone sensitive events can use the DRE trust building method described above.","Devices that are mobile may issue an off device request, to obtain the current time, based on the current location of the device (). The off device time of day request may be fulfilled by either the network providing the user's connectivity or a chip on the device that automatically accepts time synchronization from external sources (i.e., utilizes the FLEX pager protocol and chip architecture by Motorola). Without a trusted time of day source, the events () would either be immediately synchronized or rejected.","The DRE () may support a plug-able networking layer. This may be based on the Sync-ML model. The initial set of plug-ins may support HTTPS, 802.11b and Bluetooth. A Java JINI interface may also be supported. The plug-able model may also enable the use of proprietary telecommunication carrier protocols over the user's existing cell phone connection (i.e., GPRS). The application level protocols may be XML\/SOAP-based.","Architecture","Referring to , the DRE may be deployed utilizing multiple models. Each model varies the layer where the DRE may be deployed. A fourth model () is presented that is a variation of the Application deployment model (). In all cases, the DRE requires some degree of services offered by the current or lower layers of the deployment stack. These services are accessed by application programming interfaces (APIs) offered at the various layers.","The deployment stack may comprise four layers: Application, Operating System, Firmware and Hardware. The hardware layer represents the lowest layer and embodies the physical device and its properties such as keypad, screen and CPU. Moving up one layer, the Firmware layer consists of operating instructions encoded directly into the hardware chip set. These chips provide the necessary services by executing the encoded instructions. The next layer up may be the Operating System layer that creates a hosting environment for applications on the device and provides an implementation or interface for the services on the device. The top layer may be the Application layer, where third party software typically executes on the device.","Referring to , the DRE () may require up to nine services from the deployment platform depending on the deployment scenario. These should be conceived as logicial services offered in some way on the platform. They may not manifest themselves as specific physical API's to some physical service, but rather as a deployment methodology or process (e.g. the secure area is supported by installing on a tamper resistant co-processor.) The Secure Store service () offers the ability to restrict access to persistent data required by the DRE for state management. The Secure Area service () may be used by the Secure Store service and the DRE to provide limited access to storage or memory. The Secure Code service () ensures that only the appropriate code base executes as part of the DRE and that debuggers cannot attach to the executing process. The Encryption service () provides cryptography services. The Key Management service () provides a secure store for public and private cryptographic keys. The Secure Transport service () provides the ability to create secure (i.e., Secure Socket Layer (SSL)) connections to other networks. The Registry service () provides awareness of other applications on the device and those that will be collaborating with the DRE. The Networking service () provides the ability to create connections to other networked clients and servers. Finally, the Life Cycle service () provides the ability to start, execute, suspend, resume and terminate applications on the device.","Referring to , the DRE can be deployed using an Application deployment model. In this scenario, the DRE may be installed on the device just like all other applications. The DRE makes use of the required services by calling the operating system service APIs. The nine services can be deployed in either the operating system or firmware layers. The Application deployment model () provides the ability to deploy the DRE as a post-production application, where the DRE does not have to be installed by the device manufacture. DRE code updates may be downloaded over the air providing greater maintenance flexibility. However, this model also provides a higher degree of security challenges to ensure a secure code base.","Referring to , the DRE can be deployed using an Operating System deployment model. In this scenario, the DRE may be installed as one of the standard operating system services. Applications, such as DRM and content players, access the DRE services by invoking operating system calls exposing the DRE as a service. In this model, the operating system provides secure code and life cycle services on the DRE code base. The DRE utilizes the Secure Store, Secure Transport, Key Management and Registry services within the same operating system layer. The Secure Area, Encryption and Networking services may be deployed within the O\/S or Firmware layers (depending the O\/S implementation).","The Operating System model () provides a more secure environment over the Application model () as the code base may be located and controlled within the device's () own O\/S. However, this model requires the DRE to be incorporated by the O\/S manufacture and pre-installed on the device prior to the consumer's use. Updates to the DRE code base might require O\/S patches. Potentially, these patches can be downloaded overt the air and installed. DRE updates to price plan information\u2014expressed as metadata\u2014do not have the same O\/S patch restriction. The DRE would also have to be ported to numerous operating system versions for numerous devices.","Referring to , the DRE can be deployed using a Firmware deployment model (). In this scenario, the DRE may be installed into the device's chip firmware. Applications, such as DRM and content players, continue to access the DRE functionality through O\/S layer APIs. However, these APIs are just proxies to the chip executing the DRE firmware instruction set. In this scenario, the DRE would only rely on the Secure Transport, Secure Area, Encryption and Networking services also offered at the firmware layer. The remaining services are not required in this deployment model.","The Firmware deployment model offers the most secure version of the deployment models. However, this model may be the most difficult to maintain. The only way to update the DRE code would be through firmware updates, an unlikely scenario for consumer devices. The DRE would also have to be ported to every chip set used by device manufactures incorporating the DRE.","Referring to , the final deployment model presented may be an extension of the Application model where the DRE may be deployed as a Java application that executes within a Java Virtual Machine controlled by the device's operating system. In this scenario, other applications access the DRE as just another application executing on the same device.","In a java based deployment model, the DRE uses the Secure Code and Secure Transport services offered by the Java VM. The remaining services are accessed by using the O\/S APIs. This model provides a level of security that must be augmented by the O\/S and device manufacture in the form of the depicted services. The Java-VM deployment model provides the greatest level of portability and maintainability. The J2ME environment enables a single code base to service many O\/S\u2014device combinations. The ability to download code and have the VM dynamically, and securely, load the code base enables the distributed maintenance of the DRE.","It may be also possible to have hybrid deployment models of the DRE, as well as C\/C++ and Java embodiments. For example, in the event some of the services are not available, the DRE may implement the service. In the case of a Secure Area service, the DRE might provide an implementation of the service that requires a Firmware deployment, while the remainder of the DRE code base may be deployed using the O\/S model.","Price Plans","Reputable, authorized, and trusted peer administrators () define credit policies (). These credit policies define customer credit attributes that are to be used by the DRE prior, during and post rating of content and\/or service usage. Credit policies () such items as credit class; pre-paid spending limits, and post-paid spending credit based on credit class. Assigned payment classifications () identify whether customers are post-pay or pre-pay. These classifications have predetermined credit policies () that may be used by the DRE (). These classifications and their associated credit policies can be modified and enhanced.","Referring to , DRE will rate content and services offered on a device (). When the customer consumes content or a service the DRE may use the following rate factors to meter content and service usage: balance management (), content price plan (), credit policies (), payment classification (), content usage journal (), quality of service, number of bytes, etc. The DRE () may be capable of metering services based on the defined Content and\/or Enterprise price plan (). A DRE will provide a standard set of price plans, but content and service providers are not limited to those price plans. Price plans are completely configurable and definable by the content provider and or enterprise provider. Price plans may be designed around per use, one time charges, duration of use, time of day, number of uses, etc. These plans may also be combined to create more complex price plans. A DRE () may be capable of complex price plan management on device and in conjunction with a peer. Price plans can reside on the DRE, may be acquired on demand by the DRE from a peer or may use a combination of one demand plan access and device resident price plan descriptions. On-device price plans have life cycles constraints that are defined by content and service providers. Life cycles constraints will define items such as how long a price plan may be valid, how often, and when the DRE should communicate to a peer to validate or update a resident price plan.","The Remote Settlement Agent () resolves how an individual payment may be split between collaborating parties that offer some type of service or content. The DRE () can perform settlement if there may be sufficient information on the device () or the DRE () can collaborate with a remote settlement agent to split the payments for consumed content.","A Network Billing System () provides the final billing for the user's voice and data network access. The DRE () can provide varying degrees of rating and summarization of network access events () and sent these onto the user's network provider for final billing.","Self-Care","Another aspect to the DRE may include the deflection of self-care from a call center to the end device. Each subscriber may have a user interface connected to their own on-device billing and rating Engine which allows the user to query the device for information relating to their account (usage, charges, etc.). As events occur and are priced and balances are adjusted, the DRE may maintain a running log of such transactions. These logs may record various attributes of the event processing (data and time, location, etc.). These logs may be transferred to back-end systems for long-term storage and balance reconciliation. The policy for such interactions may be configurable.","Because the DRE can rate and maintain the balance on the device, the self-care system will work even when the device is not connected to the network. The information may be up-to-date and available in real-time and does not have to be mediated by a central system or accessed by a customer service representative. This could offer significant reductions in the number of call center representatives as well as some automated systems (IVR, Web Self Care) since the processing and access may be performed out on the device itself.","Referring to , because content and service transactions may be rated in real-time on the DRE (), the customer () has immediate usage information available from the DRE Journal (). For enterprise subscription payment or immediate transaction\/service payments, the DRE () can perform immediate payment debits from the DRE account balances.","Referring to , customers () will manage their accounts (, ) primarily on their devices () using the DRE (). This can be the default DRE account management module or it could also be a vendor-specific, de facto or industry standard wallet. This does not, however, preclude management of the account () on the centralized peer () through a web browser on their device or another device.","All rating transactions are logged by DRE () into a Journal () that may be used by the DRE self-care interface. The DRE journal () can be used by customers () to review content and service usage. The users may also use the journal to log charge disputes. The DRE () will forward any dispute onto the appropriate peer for dispute resolution.","Digital Rights Management","Finally, the DRE may collaborate with an on-device digital rights system to meter and unlock content for consumption by an end user.","Referring to , applications on the device () may interface to the DRE () through published application programming interfaces (API) (). These may be created via the standard library code interface mechanisms that are available for each targeted environment for the DRE (). Through this local API (), applications may publish events for rating and billing and query the DRE () for statistics and rate information.","The Event Processor () processes events () as they are posted by applications (). Every application () may define the concrete event types specific to their application needs through the public Application Programming Interface ().","Examples of such applications include device-based games, digital rights management solutions, and network access\/usage systems (broadband content consumption, VOIP, data services, and voice services).","Localized content () may represent some type of application or digital content residing on the device () (i.e., telephony applications, games, content display, MP3 players, etc.) and being managed by a resident Digital Rights Management System that produces events () and sends them to the DRE (). One embodiment may include a game that executes on the device () and sends a \u201cplay game\u201d event () to the DRE (). The game in this case comprises the localized content (). The \u201cplay game\u201d event () may be rated and billed by the DRE ().","A content provider () may provide their own system that performs some additional function against events (). These events () may be passed through the DRE (), possibly processed, and sent to the content provider's system (). In an embodiment of this functionality, a gaming company may offer a token credit for the highest score of the month. High score events () may be passed from the DRE () to the content provider's system (). The content provider () may award the winner(s) with credit events, which may be synchronized () with the DRE (). These interactions may be transparent.","When the content may be consumed on the device, the DRE () can perform the rating and billing functions. The resulting information can be sent to third party networked content providers for settlement or final billing. Settlement may also be handled on the device itself in a pre-paid model or through third party settlement agents such as Visa.","The end devices () may maintain a user interface. This interface can use the API layer to access the DRE () for information. Using such an interface, the subscriber can check balances, view history, perform transactions, etc.","Peer-To-Peer","The Central System () may also provide additional billing and rating functions that employ a cross-device perspective. This may allow the end provider to support price plans that take advantage of cross-product discounts, specialized loyalty arrangements, and access to shared\/pooled resources such as pooled game minutes, shared volumes of downloaded content, etc. For example, in an embodiment of this functionality, a family could purchase a plan that allowed them a certain shared number of video clips per month that would be shared across all of the devices (). As they were used, the end device () may reserve the content and provide the on-device billing and balance while the CRB () may handle the reservation and perform the end reconciliation across the devices (). This shared perspective of the CRB () may also allow discounts to be provided which may be downloaded to the device () as a credit to the kept balance.","Discounts may, in one embodiment, be applied at a centralized peer or, in another embodiment, the devices participating in the discount arrangement may also synchronize with each other over a peer-to-peer network and calculate their own discount.","The centralized system may be used to configure the billing arrangement as well as the rating and discounting information into the DRE (). The additional billing arrangement information may be used by the DRE to identify the P2P addresses of the other devices that will participate in the bill cycle discounting. One of the devices may be also declared as the coordinator of the bill cycle processing. The coordinator device may be the one that actually runs the bill cycle processing on behalf of all the devices in the billing arrangement. The centralized system may also be used to configure the policy that will be employed in the event that any device may be unavailable to participate in the billing cycle for an extended period of time. Each device continues to capture events and perform their individual rating. These rated events are stored on the individual devices as usage. When the device reaches a synchronization point, it attempts to establish a connection with the coordinating device in the billing relationship. If a connection can be established, the summarization event may be transmitted to the coordinating device. Depending on the reporting requirements of the application and billing contracts, the usage and\/or summarization event might be synchronized with a remote system for historical references. The coordinating device has the additional responsibility of accumulating the summarization usage events and applying cross device discount based on the account's price plan. The final amount can either be presented to the device's user for electronic payment, or transmitted off the device for bill presentment and settlement. The connection can be configured to occur at regular intervals and durations so that the other devices can expect the coordinator to be connected at certain times for synchronization. These devices can synchronize the P2P rendezvous intervals based on the coordinator broadcasting its clock time value to the other devices in the billing arrangement. These devices don't need to rest their clock; they just need to derive the next rendezvous point based on the coordinator device's time. This limits the amount of time the devices must be on the network.","Network and content providers can also offer price plans that offer a pool of units that can be shared across devices that participate in the billing arrangement. The units (i.e., dollars, time, and tokens) may be allocated to specific devices or allotted on an as-needed basis. There are two models to manage the balance of units residing in devices: centralized allocations and peer balance leveling.","In the Centralized Allocations model, a centralized system may be used to maintain the master value of units for the entire set of devices in the billing arrangement. As the devices consume units, the DRE instance will reach a low balance threshold, and the DRE will attempt to acquire another set of units from the central system. If the central system has additional pre-paid units available to allocate to the requesting device, it transfers the units to the device's balance by sending an adjustment event to the DRE. The DRE accepts the event and adjusts the stored balance to reflect the adjustment. In the event the central system has an insufficient amount of units remaining, it must execute a purchasing routine to acquire additional pre-paid units for the master balance.","In the Peer Balance Leveling model, the DRE instances on the devices participating in a billing arrangement could \u201cspend\u201d balance among themselves. The peers use a peer configured as a coordinator to maintain the master balance. The coordinating peer may be the peer that must synchronize with the central system to purchase additional units and perform sanity checks on the master balance. When the peers rendezvous with the coordinating peer, as described in the previous section, they have the opportunity to shift unused balances from one device to another based on spending patterns derived from usage events. This model allows devices with higher unused balances to be shifted to devices that consume higher amounts of units.","Point of Sale","A consumer's device with a DRE and a merchant's Point of Sale (POS) system could collaborate to determine the customer's final price of items based on historical information and e-coupons stored within the consumer's device. In this case, the DRE and POS system act as peers to perform real-time rating and discounting of items the consumer may be purchasing.","Typically, the POS associates a flat rate with a given item. There are currently two ways to provide customers with discounts; coupons and rebates. The rebates include both pre-pay, where the vender refunds the discount, and post-pay where the vender discounts the amount due on the consumer's bill. The DRE-POS collaboration provides enhanced solutions for each of these methods as well as provide for additional discounting models.","The POS issues an event to the DRE, which evaluates its list of e-coupons. Upon finding a match, the discount may be applied and the new amount and discount information may be returned to the POS. Any settlement for the discount between the merchant and vender can also be handled by the DRE and the centralized system.","In addition, the e-coupon can support various discounting models, such as 20% off the first purchase and 15% off the second. E-Coupons could also support discounts based on volume purchases of an item across a given duration. For example, 20% off of your next two purchases if you purchase five of our cereals this month.","Mail-in rebates require an inconvenience to the consumer and manual-processing overhead by the vendor. The DRE-POS collaboration could combine the purchasing information (i.e., date of sale, amount, UPC) with the consumer's information (i.e., name, address) to electronically supply the rebate data to the vendor for settlement. If the vendor supplied a Web Service interface, the amount could be directly discounted in real-time from amount due.","The DRE may also maintain the purchasing history (for participating vendors) on the consumer's device. When the POS sends an event to the DRE for rating, the DRE can calculate the discount and return the new amount in real-time. The POS amount due can then reflect the discounted price.","The merchant's POS and consumer's device first establish a secure wireless connection using an industry standard short distance technology, such as Bluetooth. The POS establishes a level of trust with the consumer's device by sending an event to the DRE requesting identification of the device. If the consumer's DRE participates in the merchant's POS rating\/discounting plan, a digitally signed token may be returned to the POS system and verified.","The token can either be an opaque merchant token, or a DRE authentication token. If the token is merchant generated, it may be merely stored on the DRE and passed back to the merchant on valid requests from the authoring merchant. The DRE authentication token may contain attributes such as customer and device identification information along with timestamps and a random token.","If the token is the merchant token, they perform their own validation within the POS system. If the token is a DRE authentication token, the merchant's POS may be configured with a DRE authentication utility to process DRE authentication tokens. The DRE POS authentication utility may be configured to trust the device if the token can successfully be decrypted without further validation. The merchant may also configure the utility to validate additional attributes such as the timestamps and random token against the centralized system. Upon successful validation by the DRE POS authentication utility, a new DRE authentication token may be generated and signed by the merchant's system and sent back to the consumer device's DRE for storage. If the centralized system is in use, these additional attributes may be updated in the centralized system in order to validate the token on the next interaction.","Conclusion","The foregoing is considered as illustrative only of the principles of the invention. Further, since numerous changes and modifications will readily occur to those skilled in the art, it is not desired to limit the invention to the exact construction and operation shown and described, and accordingly, all such suitable changes or modifications in structure or operation which may be resorted to are intended to fall within the scope of the claimed invention."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["While the invention is claimed in the concluding portions hereof, preferred embodiments are provided in the accompanying detailed description which may be best understood in conjunction with the accompanying diagrams where like parts in each of the several diagrams are labeled with like numbers.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 12","b":"110"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 21"}]},"DETDESC":[{},{}]}
