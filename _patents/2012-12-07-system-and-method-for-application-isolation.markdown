---
title: System and method for application isolation
abstract: A system, method, and computer readable medium for providing application isolation to one or more applications and their associated resources. The system may include one or more isolated environments including application files and executables, and one or more interception layers intercepting access to system resources and interfaces. Further, the system may include an interception database maintaining mapping between the system resources inside the one or more isolated environments and outside, and a host operating system. The one or more applications may be isolated from other applications and the host operating system while running within the one or more isolated environments.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08943500&OS=08943500&RS=08943500
owner: Open Invention Network, LLC
number: 08943500
owner_city: Durham
owner_country: US
publication_date: 20121207
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","INCORPORATION-BY-REFERENCE OF MATERIAL SUBMITTED ON A COMPACT DISC","NOTICE OF MATERIAL SUBJECT TO COPYRIGHT PROTECTION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DEFINITIONS","DETAILED DESCRIPTION OF THE INVENTION","1. Introduction","1. Overview","2. Installing and Running Applications","3. Uninstalling Applications","4. Interception Database and Resource Mapping","5. Interception Data and Control Flow","6. Application Groups","7. Concurrent Operation of Multiple Application Groups","8. Running Multiple Concurrent Instances of One Application","9. Installation-Free Deployment","10. Administration","11. Deployment Scenarios","12. Conclusion"],"p":["This application is a continuation of U.S. patent application Ser. No. 12\/421,691, filed Apr. 10, 2009, titled SYSTEM AND METHOD FOR APPLICATION ISOLATION, now issued U.S. Pat. No. 8,341,631, issued on Dec. 25, 2012. The present application is related to U.S. patent application Ser. No. 12\/334,654, filed Dec. 15, 2008, titled METHOD AND SYSTEM FOR PROVIDING STORAGE CHECKPOINTING TO A GROUP OF INDEPENDENT COMPUTER APPLICATIONS, and U.S. patent application Ser. No. 12\/334,660, filed Dec. 15, 2008, titled METHOD AND SYSTEM FOR PROVIDING CHECKPOINTING TO WINDOWS APPLICATION GROUPS, the disclosure of each of which is hereby incorporated by reference herein in their entirety.","Not Applicable","Not Applicable","A portion of the material in this patent document is subject to copyright protection under the copyright laws of the United States and of other countries. The owner of the copyright rights has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the United States Patent and Trademark Office publicly available file or records, but otherwise reserves all copyright rights whatsoever. The copyright owner does not hereby waive any of its rights to have this patent document maintained in secrecy, including without limitation its rights pursuant to 37 C.F.R. \u00a71.14.","1. Field of the Invention","This invention pertains generally to enterprise computer systems, computer networks, embedded computer systems, wireless devices such as cell phones, computer systems, and more particularly to methods, systems and procedures (i.e., programming) for providing application isolation for multiple applications running on a host operating system.","2. Description of Related Art","In many environments one of the most important features is to ensure that one running application doesn't affect other running applications, and that the crash of one application doesn't compromise other running applications. In many environments applications share system resources, libraries and hardware, which exposes subtle interconnects between seemingly unrelated applications.","Several approaches have been developed addressing this fundamental problem. The first level of application isolation is provided by the operating system. Modern operating systems such as Linux, UNIX, Windows2000, NT, XP and Vista provide some level of application isolation through the use of processes, and the underlying hardware memory management unit. The use of processes generally ensure that one running application process cannot address memory owned and used by other processes. This first level of isolation does not address the use of shared resources, such as files, file systems, shared memory, and libraries, so other approaches have been developed","In U.S. Pat. No. 6,496,847 Bugnion et al. teach the use of a virtual machine monitor (VMM) with a protected host operating system (HOS). This invention partially solves the isolation problem by placing every application into its own VMM. The solution requires the use of a VMM subsystem and in some cases a customized operating system. U.S. Pat. No. 6,496,847 does not provide isolation at the level of individual applications, but for entire operating systems with all the applications within it. It does not address the problem of application isolation with multiple natively running applications on one host computer.","In U.S. Pat. No. 6,601,081 Provino et al. teach the use of a virtual machine for a plurality of application programs. As with U.S. Pat. No. 6,496,847 the use of a VM subsystem simply moves the problem to a different layer, and does not address the fundamental issue of application isolation with several natively running applications on one host computer.","In U.S. Pat. No. 7,028,305 Schaefer teaches a system for creating an application protection layer to separate an application from the host operating system. Shaefer primarily teaches how to intercept the Windows registry to capture configuration information for Windows application and how to create a virtual operating environment for the application. Access to files is provided via a virtual file system, access to registry information via the virtual registry etc. For Unix and MacOS few specific teachings are presented.","The present invention provides a system, method, and computer readable medium to create an application isolation environment where applications can run unmodified, on un-modified operating systems without requiring any virtual environments, virtual machines or virtual machine monitors. The present invention also teaches how to manage and handle applications that share libraries and resources, and how to handle complex multi-process applications. In one embodiment an implementation in the Linux environment is described, in another embodiment an implementation on Windows is described.","A method, system, apparatus and\/or computer program are described for achieving application isolation for single and multi-process applications and their associated resources. The application isolation is provided without requiring any changes to the host operating system kernel or requiring any changes to the applications. The application isolation is fully transparent to both operating system and application and automatically adjusts for resources such as memory, storage, and CPUs being allocated and released. The application isolation is provided in an interception layer interposed between the individual applications and the operating system and an interception database. Preferably, any functional changes to system calls are done exclusively within the interception layer and interception database, and only in the context of the calling application.","Another aspect of the present invention relates to a method and a computer readable medium comprising instructions for application and application group isolation. The instructions are for installing the applications into the isolated environment, running the application in the isolated environment, un-installing applications from the isolated environment, configuring the isolated environments, and deploying the isolated environments.","Yet another aspect of the invention relates to a system for providing application isolation to one or more applications, the system comprising: one or more isolated environments including application files and executables; one or more interception layers intercepting access to system resources and interfaces; an interception database maintaining mapping between the system resources inside the one or more isolated environments and outside; and a host operating system, wherein the one or more applications are isolated from other applications and the host operating system while running within the one or more isolated environments.","The terms \u201cWindows\u201d and \u201cMicrosoft Windows\u201d are utilized herein interchangeably to designate any and all versions of the Microsoft Windows operating systems. By example, and not limitation, this includes Windows XP, Windows Server 2003, Windows NT, Windows Vista, Windows Server 2008, Windows Mobile, and Windows Embedded.","The terms \u201cLinux\u201d and \u201cUNIX\u201d are utilized herein to designate any and all variants of Linux and UNIX. By example, and not limitation, this includes RedHat Linux, Suse Linux, Ubuntu Linux, HPUX (HP Unix), and Solaris (Sun Unix).","The term \u201cnode\u201d and \u201chost\u201d are utilized herein to designate one or more processors running a single instance of an operating system. A virtual machine, such as VMWare or XEN VM instance, is also considered a \u201cnode\u201d. Using VM technology, it is possible to have multiple nodes on one physical server.","The terms \u201capplication\u201d is utilized to designate a grouping of one or more processes, where each process can consist of one or more threads. Operating systems generally launch an application by creating the application's initial process and letting that initial process run\/execute. In the following teachings we often identify the application at launch time with that initial process.","The term \u201capplication group\u201d is utilized to designate a grouping of one or more applications.","In the following we use commonly known terms including but not limited to \u201cprocess\u201d, \u201cprocess ID (PID)\u201d, \u201cthread\u201d, \u201cthread ID (TID)\u201d, \u201cthread local storage (TLS)\u201d, \u201cinstruction pointer\u201d, \u201cstack\u201d, \u201ckernel\u201d, \u201ckernel module\u201d, \u201cloadable kernel module\u201d, \u201cheap\u201d, \u201cstack\u201d, \u201cfiles\u201d, \u201cdisk\u201d, \u201cCPU\u201d, \u201cCPU registers\u201d, \u201cstorage\u201d, \u201cmemory \u201cmemory segments\u201d, \u201caddress space\u201d, \u201csemaphore\u201d, \u201cloader\u201d, \u201csystem loader\u201d, \u201csystem path\u201d, and \u201csignal\u201d. These terms are well known in the art and thus will not be described in detail herein.","The term \u201ctransport\u201d is utilized to designate the connection, mechanism and\/or protocols used for communicating across the distributed application. Examples of transport include TCP\/IP, Message Passing Interface (MPI), Myrinet, Fibre Channel, ATM, shared memory, DMA, RDMA, system buses, and custom backplanes. In the following, the term \u201ctransport driver\u201d is utilized to designate the implementation of the transport. By way of example, the transport driver for TCP\/IP would be the local TCP\/IP stack running on the host.","The term \u201cinterception\u201d is used to designate the mechanism by which an application re-directs a system call or library call to a new implementation. On Linux and other UNIX variants interception is generally achieved by a combination of LD_PRELOAD, wrapper functions, identically named functions resolved earlier in the load process, and changes to the kernel sys_call_table. On Windows, interception can be achieved by modifying a process' Import Address Table and creating Trampoline functions, as documented by \u201cDetours: Binary Interception of Win32 Functions\u201d by Galen Hunt and Doug Brubacher, Microsoft Research July 1999\u201d. Throughout the rest of this document we use the term to designate the functionality across all operating systems.","The term \u201cfile context\u201d or \u201ccontext\u201d is used in relation with file operations to designate all relevant file information. By way of example, and not limitation, this includes file name, directory, read\/write\/append\/execute attributes, buffers and other relevant data as required by the operating system.","The term \u201ctransparent\u201d is used herein to designate that no modification to the application is required. In other words, the present invention works directly on the application binary without needing any application customization, source code modifications, recompilation, re-linking, special installation, custom agents, or other extensions.","The terms \u201cprivate and isolated environment\u201d and \u201cisolated environment\u201d are used herein interchangeably to designate the private area set aside for application isolation, as described in further detail below.","The present invention provides application isolation at several levels: 1) during installation, all installation and registration information is intercepted and installation is re-directed to a private and isolated environment, 2) during launch of an application the installation information is retrieved and provided to the application again via interception, and 3) during access to external resources interception of all access is re-directed as necessary. The combination of all levels of isolation provides for fully transparent application isolation. Thus at all times, access to resources, configuration and run-time information is intercepted and redirected.","By way of example, and not limitation, for embodiments within Windows operating systems, access to the Windows Registry is intercepted and included in the application isolation.","Further aspects of the invention will be brought out in the following portions of the specification, wherein the detailed description is for the purpose of fully disclosing preferred embodiments of the invention without placing limitations thereon.","Referring more specifically to the drawings, for illustrative purposes the present invention will be described in relation to  through . It will be appreciated that the system and apparatus of the invention may vary as to configuration and as to details of the constituent components, and that the method may vary as to the specific steps and sequence, without departing from the basic concepts as disclosed herein.","The context in which this invention is described is one or more applications being installed, running and accessing local and remote resources. Without affecting the general case of multiple applications, the following scenarios often depict and describe one or two applications as applicable. Multiple applications are handled in a similar manner.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 1","FIG. 1"],"b":["10","10","22","26","14","12","16","17","22","26","18","20","28","16","17","28","24","36","34","32","30","38","32","32"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 2","b":["40","42","50","50","58","44","50","54","58","58","60","62","64","42","60","62","64","44","62","42","58","54","50","46","42","42","46","48","50","58","56","58"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 2","b":["40","42","42","42","42","44","50","52","58","42","60","62","42","58"],"i":"s "},"At times it may be desirable to store some user-data outside the isolated environment, such as on a central file server. In a preferred embodiment, this is supported by specifying which resource locations should remain fixed and public in the global exceptions . Such public resources are not translated into the isolated environment.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 3","b":["80","82","84","86","88","90","92","86","94","90","90","100","82","96","98"]},"The Interception Database (IDB) is a system wide database containing mappings between the resources as the application requests them, and their private values inside the isolated environment.  illustrates, by way of example embodiment , the Interception Database (IDB) , and its various components. The IBD  contains two main components, a rules engine  and the core resource mappings . The rules engine  contains the main high-level configuration information  as provided by an administrator . The rules engine  and its configuration information  includes, but is not limited to, information designating the base directory for installing the isolated environment, specific exceptions  to the resource mappings and the general mechanism used to create the mappings. The administrator  defines exceptions  as needed. The global exceptions contain all resources that should not be remapped to the isolated environments. Examples include, but are not limited to, shared storage, shared devices, network resources, and system-wide resources.","The resource mapping  maintains mapping between public resources  and the corresponding private and isolated resources . The resource mapping  also consults the global exceptions  prior to translating any public to private or private to public resource requests.","Resources take many forms including but not limited to files, fonts, shared libraries, shared devices, and storage. On Microsoft Windows the Registry is an important component and contains system wide configuration information used by most applications. Some resources, such as data files, tend to be local to the individual applications, while e.g. fonts tend to be shared between multiple applications.","Access to files are handled by the IL () intercepting all file operations between the application and the system libraries and operating systems. Examples include, but are not limited to open( ), fopen( ), write( ), read( ), close( ), seek( ), remove( ) and the Windows equivalents. Generally these functions either contain a public file name as part of the arguments, or a file handle to an already established file. The files names are remapped as described above, to an isolated environment, and any further reference to the handle is automatically re-directed to the isolated environment. File operations that return information, are translate back to the public values. By way of example, and not limitation, if the applications ask for \u201ccurrent directory\u201d, the public name, as the application expects is returned, and not the private name within the isolated environment. By way of further example, if the current directory is located on shared storage included the global exceptions , the directory is returned un-translated, as it's subject to the exception handling.","File, paths and other resource names can be specified both as absolute values or relative values. By way of example, and not limitation, an absolute path for a document file may be \u201cC:\\MyDocuments\\myfile.doc\u201d, while a relative reference may be \u201c . . . \\docs\\myfile.doc\u201d. Absolute references are resolved as previously described by consulting the public resources , private resources  and global exceptions . Relative addresses are resolved in a multi-step process: First relative names are converted to absolute names and then the absolute name is converted as previously described. This mechanism ensures fully transparent support of both absolute and relative naming of all resources.","Fonts pose particular problems, as fonts reside both in application-specific directories and global system directories, such as \u201cC:\\Windows\\Fonts\u201d on Windows and \u201c\/usr\/X11R6\/lib\/X11\/fonts\/\u201d and \u201c\/usr\/share\/fonts\/\u201d on Linux. An application may install font both into one or more global font directories as well as application-specific directories. All shared-fonts directories are included in the Global Exceptions  as they should be accessed directly. If during installation additional fonts are installed, they are installed according to the policy chosen by the administrator . Prior to installation, the administrator chooses if application-installed fonts are allowed to be placed in the global fonts directory or if they should be placed in the isolated environment. The rules engine  consults this administrative choice and upon receiving a request to enumerate the font directory will include isolated-environment fonts if so configured. If the application installs its fonts into its own file structure, the fonts are treated as normal files and are not subject to the automatic enumeration as the application knows where to look for its application-specific fonts.","Modern operating systems share components across multiple applications. Such shared libraries also pose a special case. On Windows Dynamic Link Libraries (DLLs) and on Linux\/UNIX shared objects (.so files) are examples of such shared components. On Window shared libraries primarily reside in C:\\Windows and C:\\Windows\\System32, but can sit anywhere. On Linux\/Unix the primary locations are \u2018\/usr\/lib\u2019, \u2018\/usr\/X11\/lib\u2019 and the entire \/usr\/lib\/ directory structure. The loader of the operating system traverses the system PATH to find any requested shared library, but this can be manually or programmatically changed as part of the load process. The PATH is set using environment variables both on Windows and Linux. In order to intercept loading of shares libraries the present invention loads the application in stead of using the system loader directly. This enables interception of library loading done by the loader. If during installation additional shared libraries are installed, they are installed according to the policy chosen by the administrator . Prior to installation, the administrator chooses if application-installed libraries are allowed to be placed in a global directory or if they should be placed in the private and isolated environment. If the libraries are placed into the private and isolated environment, the load PATH is adjusted to search the private location.","As with files, libraries can be loaded with both absolute and relative addresses. The load process handles the resource mapping as described above. In all cases, the loading must follow the same path and address resolution as the system loader provides.","If the application installs its shared libraries into its own file structure, the libraries are treated as normal files and are not subject to an adjusted PATH or load-order as the application knows where to look for its application-specific libraries. In the preferred embodiment, if the application installs new shared libraries, they are installed into the isolated environment","One of the most significant sources of application incompatibilities, and one of the motivators for the present invention, is shared library conflict. By way of example, and not limitation, if a shared library is loaded on the system, and a new application installs an older version of the library, the older version may overwrite the newer version and render other applications non-functional based on having their shared library replaced by an incompatible older version. This is a common problem on both the Windows and Linux platforms. Using the preferred embodiment described above, the application would install the older library into its isolated environment and therefore not affect other applications. The application would load and use the older library without ever being aware that it was provided from the isolated environment, and other applications running on the system would be unaffected by the installation of the older library.","Microsoft Windows uses a special configuration system generally referred to as \u201cthe Registry\u201d. The registry contains configuration, installation and un-installation information for applications on the system. When an application installs on a Windows system, it uses the registry to store values such as \u201chome directory\u201d, \u201crecent files\u201d, etc. The preferred embodiment on Windows systems additionally include interception of all registry information, and ensures that installation and runtime information that would normally go into the registry, in stead is stored and maintained in the IDB. During installation of a Windows application all registry information is thus stored in the IDB and not the registry. When an application requests registry information, the information is provided from the IDB, and not the registry. This ensures complete application isolation from the registry.","The isolated environment contains all application files and shared resources and their respective mappings. These are all preserved persistently on local or remote storage and can be archived, copied and restored as any other set of files. Specifically, the isolated environment directory structure can be copied to a different node, and used directly to start the application on that node.","So far the Interception database has been described as a \u201cdatabase\u201d. Based on the teachings above, it's readily apparent to anyone skilled in the art, that the only requirement is that updates to the resource tables ,  and  be atomic at the record level. This functionality can be readily implemented in a variety of ways, including using Java's ConcurrentHashMap( ) the Windows .NET equivalents, or by custom programming the data structures and locking. Furthermore, preferably concurrent access to the Interception Database translations is provided. In an alternate implementation such a custom interception database is used in stead of a full database.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 10","b":["240","242","243","244","248","250","251","246","243","242"]},"By way of example, and not limitation, consider an environment with the present invention active. An application  calls a write( )  operation. As described in above, the write( ) is intercepted  by the interception layer . Parameters to the write( ) call are translated by the Interception Database  and the rules for the isolated environment  and the file context and parameters of the calling write are adjusted to point to the isolated environment. The write call  is then forwarded to the system libraries  and operating system  as were the case with the present invention inactive. The return value  from the write is returned to the IL  which, using the IDB , maps the result back into the original context and returns the value  to the caller . The application  issuing the write  operating is thus unaware that the write is being intercepted and re-directed to the isolated environment. All translation and isolation is performed outside the application , and before the write operation ever reaches the system libraries  or operating system .","A specific example, using ANSI C, further illustrates the mechanics of the IL  and IDB  translations. Consider an example where a file is opened for writing, a small text is written, and the file is closed using the following code",{"@attributes":{"id":"p-0066","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"\u2003int main(void)",{}]},{"entry":[{},{},"\u2003{",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u2003char const *pStr = \u201csmall text\u201d;",{}]},{"entry":[{},{},"\u2003FILE *fp = fopen(\u201c\/home\/user\/newfile.txt\u201d, \u201cw\u201d)",{}]},{"entry":[{},{},"\u2003if (fp != null)",{}]},{"entry":[{},{},"\u2003\u2003\u2003fwrite(pStr,strlen(pStr),1,fp);",{}]},{"entry":[{},{},"\u2003fclose(fp)",{}]},{"entry":[{},{},"{"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"The call to fopen( ) returns a file pointer, which the fwrite( ) operation uses to write data to the file. The call to fopen( ) includes the file name \u201c\/home\/user\/newfile.txt\u201d as the first parameter. The Interception Layer  intercepts the call to fopen( ) and changes the actual filename to the corresponding location in the isolated environment before passing  the call on to the system library implementation . The following fwrite( ) operation is unaware that the file pointer points to the isolated environment and simply writes the data. Finally, fclose( ) is called to close the file. The file pointer still points to the isolated environment and the close proceeds as a close would without the present invention active.","At times multiple applications share data, libraries and work in combination. By way of example, and not limitation, Microsoft Word may include a Microsoft Excel spreadsheet. In general any number of applications may need to collaborate and share data. So far the approach has been to isolate applications so that, to continue the example, if Word and Excel were installed separately, they would both be isolated and not able to work together. To enable sharing between pre-designated applications, the applications need to be grouped together in an application group and installed inside the same isolated environment.  illustrates by way of example embodiment , an application group  operating within the present invention. The administrator  pre-defines the application group  and the individual applications within the group: App-1 , App-2  and App-n . The administrator  commits the application group to the IDB . The IDB uses the same mechanisms as described above for individual applications, and structures the isolated environment  so that the individual applications share resources and file system. By installing the applications together they automatically use the same isolated environment and sharing is fully automatic without requiring any additional information. The interception layer  intercepts, as previously described, and requires no special configuration; all application group information is contained within the IDB  and the settings for the isolated environment .",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 6","b":["160","162","166","170","164","162","168","166","172","170","164","168","172","174"]},"The administrator  commits all administrative settings to the IDB , which is reflected in the database tables for the isolated environment .","At times it may be desirable to run multiple instances of the same application or application group, but in separate isolated environments. Referring again to  for illustrative purposes. The administrator  defines each instance of the application group using separate application group names. Even though Application Group A , Application Group B , and Application Group C  are identical, they have been pre-defined with their own environment, and thus run in separate isolated environments without any further intervention or configuration.","One of the major problems with application deployment is the actual installation and the associated risks as described previously. Using the present invention, a pre-created isolated environment can be used in place of performing an actual installation. The isolated environment contains all application files, shared libraries, and installation data and can be moved, copied and run from anywhere the present invention is present.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 7","FIG. 7"],"b":["180","181","196","184","182","186","188","196","188","190","192","194"]},"In an alternate embodiment, the environment  is stored on shared storage, and is accessed directly from the shared storage. In this embodiment, the isolated environment is loaded directly from shared storage, and only local data, such as temporary files, are kept locally.","In another embodiment, the environment  is saved to storage and shipped to a remote site. The remote site loads the environment and runs the applications directly from within the environment without any installations. In this embodiment the present invention may be used for disaster recovery.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 8","b":["200","202","204","206","204","4","130","4","132","4","134","136","138"]},"The administrator  provides general configuration information applicable to all isolated environments and applications , unless explicitly changed for a particular isolated environment . Examples of administrator-provided global configuration information  includes, but is not limited to\n\n","Each setting can be changed, i.e. replaced, on an application by application basis, and on an application-group by application basis. As determined by the administrator, examples of administrator-provided application-level configuration information  include, but is not limited to\n\n","The combination of the global configuration information  with the rules engine (FIG. \u2014), makes the configuration and deployment on new isolated environment fully automatic after the initial global configuration has been provided. As described, it may be desirable to change one or more of an application's isolated environment settings. By way of example, and not limitation, if a particular application needs to locally access certain resources only available on a particular server, that one application's isolated environment would be located on that particular server, while all other environments were centrally stored. The ability to \u201cmix and match\u201d environments and deployments ensure full flexibility and ability to deploy multiple applications in a heterogeneous environment with all the benefits of the present invention.","In another embodiment the administrative functions  is done programmatically using an Application Programming Interface (API).",{"@attributes":{"id":"p-0081","num":"0088"},"figref":"FIG. 9","b":["220","222","224","226","228","232","224","226","222","230","238","236","224","226","222","234","236","224","226","232","222","224","226","230","232","234"]},"In the embodiments described herein, an example programming environment was described for which an embodiment of programming according to the invention was taught. It should be appreciated that the present invention can be implemented by one of ordinary skill in the art using different program organizations and structures, different data structures, and of course any desired naming conventions without departing from the teachings herein. In addition, the invention can be ported, or otherwise configured for, use across a wide-range of operating system environments.","Although the description above contains many details, these should not be construed as limiting the scope of the invention but as merely providing illustrations of some of the exemplary embodiments of this invention. Therefore, it will be appreciated that the scope of the present invention fully encompasses other embodiments which may become obvious to those skilled in the art, and that the scope of the present invention is accordingly to be limited by nothing other than the appended claims, in which reference to an element in the singular is not intended to mean \u201cone and only one\u201d unless explicitly so stated, but rather \u201cone or more.\u201d All structural and functional equivalents to the elements of the above-described preferred embodiment that are known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the present claims. Moreover, it is not necessary for a device or method to address each and every problem sought to be solved by the present invention, for it to be encompassed by the present claims. Furthermore, no element, component, or method step in the present disclosure is intended to be dedicated to the public regardless of whether the element, component, or method step is explicitly recited in the claims. No claim element herein is to be construed under the provisions of 35 U.S.C. 112, sixth paragraph, unless the element is expressly recited using the phrase \u201cmeans for.\u201d"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWING(S)","p":["The invention will be more fully understood by reference to the following drawings which are for illustrative purposes only:",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
