---
title: Networked computer environment assurance system and method
abstract: A system and method for configuration management and enforcement of software applications in a computer network. The system comprises of one or more server computers, a configuration rules database and a plurality of client computers. Each client computer has an agent running on it. The agent, after being invoked or on a periodic basis, contacts a server computer to obtain the latest configuration rules from the configuration rules database. The configuration rules are then used by the agent to check the validity of the software applications. The agent also sends log data, back to the server computer, containing details of the status of the computer, any violations, actions taken, time of violations, etc. The present invention also provides a method to check and ensure that the agent is required to be run on all the client computers in order for these computers to communicate with other computers in the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07603452&OS=07603452&RS=07603452
owner: Symantec Corporation
number: 07603452
owner_city: Mountain View
owner_country: US
publication_date: 20030321
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["This application claims the benefit of the earlier filing date of U.S. Provisional Application No. 60\/367,877, entitled \u201cNetworked Computer Environment Assurance System and Method\u201d, filed on Mar. 26, 2002.","The present invention relates to software applications\/programs running on client computers in a computer network. More specifically, it relates to a system and method for \u2018configuration management and enforcement\u2019 of such software application\/programs.","Nowadays, Enterprise Corporate Networks have become the backbone of business organizations. An Enterprise Corporate Network is a computer network that enables the users in the organization to communicate, exchange information and share network resources within the organization and also with other organizations. A typical enterprise network, in general, is based on client-server architecture, where one or more server computers serve requests from a large number of client computers. The client computers run a set of software applications that enable a client computer to communicate with a server (such as FTP, WWW, e-mail), as well as to run standalone programs (such as word processing programs, anti-virus program, multimedia player programs etc.). Nowadays client computers have the ability to simultaneously run multiple sophisticated software applications at a given point of time. These software applications can either run in foreground (for example word processing, e-mail program etc.), or can run in background (such as anti-virus programs, scheduling agent program).","During the past few decades, Enterprise Corporate Networks have grown tremendously in terms of complexity, size and number of users. Current enterprise networks can seamlessly interconnect thousands of computing devices within the organization. The software applications have also experienced a similar growth. Within short intervals of time, many new software applications are being introduced in the market with a new set of features and advancements over their previous versions. The Internet has also significantly accelerated the release schedule of such software applications. New releases, updates and bug-fixtures of software applications are available on the websites of software vendors, which can be downloaded and installed by the users.","The significant growth of enterprise networks and software applications has also presented some problems and issues for the system administrators of the enterprise network. One of the major issues is to ensure that such software applications run in the correct manner. Consider the example of an anti-virus program installed on a client machine in an enterprise network. Here correct operation means that the anti-virus program always runs on the client machine, and the program has the latest virus definition files in order to provide protection from the latest viruses. However, if the user disables the anti-virus program, or if the anti-virus program is not updated with latest virus-definition files, the desired benefits from the anti-virus program may not be available. This may result in considerable loss to an organization in case of a virus attack. Thus, it becomes imperative for an organization to ensure correct operation of software applications on all the computers.","Another major issue is to maintain consistency and uniformity in the network in terms of various configurations and settings of software applications running on computers in the network. For example, inconsistencies in software versions and settings may result in inadvertent formatting errors in shared documents and files. This can lead to reduced efficiency, and loss of time and money for the organization as a whole.","Various approaches exist in the art to address the above issues. In some organizations, it is the responsibility of a system administrator to keep all software applications updated, and to ensure that they work with the correct settings. In such organizations, the system administrator visits each client computer and updates each computer with new settings\/patches of all software applications that need an update. This approach, however, becomes laborious and time consuming when there are a large number of computers in a network. It is difficult for a system administrator to frequently and regularly update all the computers. Further, it is an arduous task to monitor whether all the software applications are running correctly.","There also exist patents that try to address above-mentioned issues, and some of them are discussed below.","U.S. Pat. No. 5,732,275, entitled \u201cMethod And Apparatus For Managing And Automatically Updating Software Programs\u201d, assigned to Apple Computer, Inc., Cupertino, Calif., USA, is aimed at automatically managing, monitoring and updating a software application with a newer version in a completely automated fashion. The patent discloses use of a control module that locates and identifies other versions of an application. The control module then selects a software version on the basis of specified criteria and runs the selected version of the software application. The invention disclosed in the patent allows multiple versions of an application to remain accessible on the computer. The control module manages the launching of a particular version that may be required. Statistical data relating to the launching and operation of the application is collected, and uploaded to a central location on a regular basis.","U.S. Pat. No. 5,919,247, entitled \u201cMethod For The Distribution Of Code And Data Updates\u201d assigned to Marimba, Inc., USA, is aimed at large scale distribution of application code and data. The invention disclosed in the patent allows for automatic updating, personalization, and usage monitoring of applications. According to the disclosed invention, an end-user subscribes to a server to update software applications running on his\/her machine. The server then delivers the requested applications to the user. At a later point of time, the user may again send a subscription request and the server will then send the updated applications. Once downloaded, the applications can be run on the host computer as many times as required without needing to contact the server.","WIPO Publication Number 02\/099682, titled \u201cRemote Management Agent For Application Provisioning And Content Synchronization In An Unattended Operation Environment\u201d, assigned to Sequoia Broadband, Inc., CA, USA, is aimed at enabling a remote computer to recover from abnormal operating conditions in a computer without human intervention. The disclosed system provides a remote management agent which runs in a remote computer. Further, a network operations center is operatively in communication with a data network. The system enables monitoring a predetermined set of environmental values at a remote computer. These values are reported back to the network operations center in case a value exceeds a predetermined value. Further, with the help of the remote management agent, the system allows for software provisioning and content synchronization. Software provisioning pertains to providing updates to already running software or providing for new software according to a predetermined criterion. Content synchronization pertains to maintaining and updating a file storage structure on a database. The system also provides for automatic upgrading when a software version is not up-to-date.","However, all of the mentioned patents and publications suffer from one or more of the following shortcomings. Firstly, downloading newer software versions is solely based on the prerogative of the user. It may still happen that a user may choose not to run these software applications and thereby hinder the normal operation of software upgrading. This may lead to the earlier mentioned problems of inconsistency or incompatibility between different software applications running on the network. Secondly, there is no mechanism to prevent a user from running an incorrect version of a software application. Thirdly, there is no mechanism to identify whether the monitoring and updating agents are running in a correct manner on all the nodes in a network.","In light of the above discussion, it is evident that there exists need for a system and a method that effectively monitors and ensures correct operation of software applications in a network. A need also exists for a system that automatically updates and monitors the software application, without depending on the end-users.","An object of the current invention is to provide a system and method that effectively monitors and ensures correct operation of software applications in a computer network.","Another object of the invention is to provide a system and method that enforces an operation environment on computers in a computer network.","Still another object of the invention is to provide a system and method that blocks the software applications that do not conform to enforced settings.","In order to attain the above-mentioned objectives, the current invention provides a system and method for configuration management and monitoring of applications. The system comprises one or more server computers, a configuration rules database and a plurality of client computers. Each client computer has an agent running on it. The agent, after being invoked, or on a periodic basis, contacts a server computer to obtain the latest configuration rules from the configuration rules database. The configuration rules are then used by the agent to check the correct operation of software application. The agent also sends log data, back to the server computer, containing details of the status of the computer, any violations, actions taken, time of violations, etc. The present invention also provides a method to check and ensure that the agent is required to be run on all the client computers.","The present invention discloses a system and method for \u2018Configuration Management and Enforcement\u2019 of software applications running on computers in a computer network. The computer network may be a Local Area Network (LAN), a Metropolitan Area Network (MAN), a Wide Area Network (WAN), a Virtual Private Network (VPN) or the like. The present invention permits the enforcement of an operation environment on computers within the computer network. Enforcing an operation environment includes ensuring that software applications running on the computers in the network run in a correct manner.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["102","104","106","106","106","108","108","106","108","108"]},"Server computer  is a computing device that stores and maintains configuration rules relating to the operation environment of software applications running on the client computers. Server computer  is connected to a configuration rules database  in order to store configuration rules data. Standard database management systems (DBMS) such as IBM\u00ae DB2\/Common-Server, Sybase\u00ae, Oracle\u00ae and the like can be used for storing the configuration rules. Server computer  can be implemented using an IBM\u00ae Netfinity\u00ae server comprising a RISC-based processor, AIX\u00ae, an operating system and a web server program, such as Netscape Enterprise Server. Server computer  may also include a display supporting a graphical user interface (GUI) for management and administration of the network. Server computer  may additionally include an Application Programming Interface (API) that provides extensions to enable application developers to extend and\/or customize the core functionality thereof through software programs including Common Gateway Interface (CGI) programs, plug-ins, servlets, active server pages (ASP), server side include (SSI) functions or the like.","Configuration rules are rules that describe the operation environment to be enforced on the computers in the computer network. Examples of such configuration rules can include, but are not limited to: (1) checks as to whether the virus definition files are updated for an anti-virus application program; (2) whether the version number of a software application such as Microsoft\u00ae Internet Explorer is the same as recommended by the system administrator; (3) whether the \u2018Auto-save\u2019 feature is turned on while starting Microsoft\u00ae Word; (4) provide that suitable username\/passwords are used by the applications to connect to their servers; (5) that the correct encryption method is used by VPN client programs; and (6) using the correct setting for the host based security products like personal firewall such that without the correct setting, the local personal firewall restricts the network traffic to\/from this computer.","The overall method for configuration management and enforcement is now described, according to the preferred embodiment of the current invention.","Agent , when invoked, attempts to contact server computer  to get the latest configuration rules. Agent  stores a copy of the latest configuration rules on client computer . After obtaining the configuration rules from configuration rules database  via server computer , agent  starts enforcing the rules on client computer  on which it is running. Agent  can perform various checks in order to enforce the configuration rules on the software application. For example, agent  may check configuration settings of the software application, the registry setting of the software application, the processes that run as part of the software application, etc. Agent  also sends log data about the status of client computer , any violations of configuration rules, any actions taken by agent , the time non-compliance with configuration rules occurs, and so on. Agent  periodically contacts server computer  to get the most recent configuration rules to enforce on client computer .","Agent  is said to be running properly after it runs and performs checks to determine whether the configuration rules are being followed by an application on a client computer. Agent  can be programmed to run in such a way that if it is not running correctly, the local computer's functionality is either partially or completely disabled. For example, in the case of an anti-virus application, the configuration rule can be defined as\u2014\u201cif virus definitions files are older than 5 Feb. 200X, block (through agent  or via another firewall type of application) the network access from that client computer  to the network, or disable certain applications like Microsoft\u00ae Word, or disable Operating System (OS) operation like file system access, or terminate certain applications' processes\u201d. In this case, agent  checks the date in the virus-definition file stored in client computer , in order to allow or block the anti-virus application.","Agent  can enforce the operation of the software application (to be enforced), or the computer environment, so that the enforced software application cannot operate properly unless agent  verifies the computer environment according to latest configuration rules. The enforcement of the environment and\/or software application can be done in the form of any one or a combination of the following four methods.","First, at the time of installation of agent  on client computer , agent  renames or encrypts the executable file of the enforced software application, so that the software application cannot be invoked, unless agent  has verified the software application according to latest configuration rules. As soon as agent  verifies the software application, it restores the executable file to its original form. After renaming the original program file, agent  can optionally replace it with an informational program to make this \u201crenaming process\u201d more user friendly. The informational program is a dummy program that runs instead of the enforced software application informing the user that he\/she needs to invoke agent  (or satisfy other conditions defined in the configuration rules) in order to run the requested software application. Whenever agent  is not running (or the defined condition is not met), and a user tries to run the software application, the informational program starts running. The informational program then informs the user that in order to run the software application, agent  needs to run. Further, the informational program can also optionally ask the user if he\/she wants to let the informational program invoke agent . If the user agrees to invoking agent , the informational program tries invoking agent . If agent  is run and correctly executed (i.e. verifies the correctness of the software application), the informational program can either invoke the real software application or exit. In the case of exiting of the informational program, agent  restores the executable file of the original software application, and runs the original software application. In case agent  is not able to run properly, the informational program tells the user to take any necessary measures. In this situation, the user can be asked to contact a system administrator or visit a web site to submit the issue. As soon as agent  exits, it renames or encrypts the real program again as needed. For certain Operating Systems where the program cannot be renamed or encrypted while it is running, agent  terminates the program, before renaming (or encrypting) it.","Secondly, agent  can modify or encrypt the operational environment of the software application to prevent its operation. This can be explained with the help of an example. Consider a software application that cannot run unless the correct settings are known, e.g. a VPN client software's connection configuration file. The settings in this case include the IP address of the enterprise VPN server, the authentication policy, etc. If agent  hides this information, the VPN client would not be able to establish the connection. Agent  restores the correct settings as soon as it runs. Agent  hides the correct settings again as soon as it exits.","Thirdly, the delivery of the correct settings of a software program can be made dependent on agent , instead of default settings of the software installation package. Normally, during installation of a software application, the installation package imparts some default settings. The software application may not run if the correct setting for software application's default installation is not there. The third method takes this capability (of imparting default settings) out of the installation package, and gives this responsibility to agent . In such case, just installing the software application itself does not achieve the desired outcome. The software application starts to work correctly only when agent  delivers the correct setting to the suitable location on client computer . An example can be considered to illustrate this method. Consider the case of a VPN client software. In order for a VPN client to connect to the VPN server, the VPN client needs to know the VPN policy. The setting for this is normally stored in a configuration file. By default, the VPN client does not have the correct file; therefore, it cannot connect to the VPN server unless the correct configuration file is delivered to the VPN client. The VPN server is configured not to send the correct file, even if it has the capability of doing so. This gap is then bridged by agent . Agent , when invoked, gets the correct setting for the VPN client from server computer  or a VPN server. After getting the correct settings, the VPN client software is able to function as desired. As soon as agent  exits, it removes the correct settings.","Fourthly, the correct settings for allowing connection between the client and server can be changed to prevent such connection without the proper operation of agent . For example, for client computer  that already has the correct settings to allow it to connect to the VPN server, the system administrator needs to modify the settings on server computer  to a degree such that client computer  cannot establish the connection unless it gets the new settings by running\/invoking agent . The settings can be modified by means of changing the IP address of the VPN server, the authentication protocol, the user name, the correct password, the encryption algorithm, etc. When agent  is invoked, it can contact server computer  to get the correct settings. In this case also, agent  can run an informational program telling the user that agent  must be run for allowing connection between the client and server.","The above-mentioned methods can be used one at a time or in a combination to achieve the desired enforcement of operational environment on client computer . It may be noted that the current invention is not limited to the above four methods. As long as a method can prevent a program\/application from correctly achieving its desired functionalities, it falls within the scope of the current invention.","To enforce the operation environment and to ensure that all client computers  have agent  running on them, another method can be used. All connected client computers  in the computer network generate network traffic. It can be programmed that all client computers  generate a special traffic pattern at regular time intervals. To derive the existence of agent , the traffic from any specified client computer  can be analyzed. If client computer  does not generate traffic, or generates traffic but does not generate the special traffic pattern, it means there is no agent  running on that client computer . If the same strategy is to be applied to all client computers  in the network, the traffic generated from each client computer  needs to be analyzed to identify all client computers  which are not running agent .","To implement the method discussed above, one needs to collect traffic from all client computers  in the computer network. Achieving this in a highly bridged or a switched network becomes a challenging task. A highly bridged and\/or switched network means that there are one or more bridges and switches separating the network. In such a network, it is not possible to capture all the traffic of one switch port from another switch port.","In order to collect the traffic of all the networked computers in a highly bridged or switched enterprise network, the invention makes use of one or more agents that can be given responsibility to collect the traffic generated by other agents  in their network neighborhood. The collected traffic is submitted to a database. By periodically examining the traffic in the database, the invention can derive the conclusion as to whether agent  for a particular client computer  is running or not. One of the many possible methods that can reveal the presence of agent  running on a particular client computer  is described below, with reference to .","One method that can be used to identify client computer  on which agent  is not running, is now explained with reference to .  shows three client computers ,  and  connected to a LAN. Consider the case when client computer  and client computer  have agent  running on them while client computer  does not have agent  running on it. Agent  running on each client computer is programmed to generate a special traffic pattern at a regular time interval. This traffic is collected and sent to a database , and can be analyzed later by a server . The traffic report in database  shows that client computer  has a Media Access Control (MAC) address of MAC-1 and Internet Protocol (IP) address of IP-1 and that it receives the traffic from (MAC-1, IP-1), (MAC-2, IP-2) and (MAC-3, IP-3). Similarly, the traffic report in database  shows that client computer  has a MAC address of MAC-3 and IP address of IP-3 and that it receives the traffic from (MAC-1, IP-1), (MAC-2, IP-2) and (MAC-3, IP-3). Server  notices in database  that client computer  does not report its IP address or the MAC address. This indicates there is no agent  running on a client computer .","The above example describes a method to make sure agent  is running on each client computer  in the network. After agent  is running, agent  itself can make further checks to ensure the correct operation of the software applications using the methods described above. As already mentioned, the desired way of working of all the software applications should be defined in configuration rules database  and agent  obtains the desired way from server computer  in the form of configuration rules.","In an alternative embodiment of the current invention, a method for enforcing of agent  on all client computers  is described below. This method prevents client computers , not running agent , to communicate with client computers , running valid agents . Agents  running on all client computers  are configured to generate a special traffic pattern at regular time intervals. If the interval is zero, this means that agent  at client computer  generates or shapes the normal network traffic to be of a special pattern all the time. For example, agent  on a client computer  can scramble all the normal network traffic or packets generated from that computer according to some scramble method (such as XORing all the bytes in the packets payload with a fixed byte such as 0xAB). For all client computers  with agent  running, the network traffic generated from them bears the same scramble pattern. Similarly all the valid network traffic received by client computers  is in a scrambled form. This scrambled data is unscrambled by agent  at the receiving client computer. The unscrambling of the packets can be done by agent  with a different or the same method (like XORing the received packets with the same byte). In this manner, only those client computers are capable of communicating with each other that are running valid agents. If a packet is sent from a client computer that is not running a valid agent , then the outgoing packet reaches the receiving client computer in the unscrambled form. Consequently the receiving client computer, running valid agent , will not be able to receive the packet correctly (since it will first unscramble the receiving packet).","Turning now to , it may be noted in the above embodiment that for certain network devices  that don't have the required agent , like networked printers or PDAs, a special bridge, called an enforcer , can be installed that converts the packets from the scrambled state to\/from the unscrambled state. As shown in , enforcer  can be used to bridge a first portion of the computer network containing the scrambled traffic, and a second portion of the computer network containing the normal traffic (like that of the networked printer). Besides the XOR, any symmetric encryption algorithm like Data Encryption Standard (DES), etc. can also be used for the purpose of scrambling\/unscrambling.","Broadly speaking, besides an encryption algorithm, any operation that can change the computer operation environment and restore the environment, can be used in the above embodiment. For example, in the case of IP based networks using Dynamic Host Configuration Protocol (DHCP), a client computer tries to get an IP address from a DHCP server (See http:\/\/www.dhcp-handbook.com\/dhcp_faq.html for more information about DHCP); the agent software running on the client computer can modify the DHCP request packet such that it contains a special pattern in the packet. On the DHCP server side, it checks the DHCP request packets for this special pattern. The DHCP server replies with the correct IP address if and only if the DHCP request packets have that special pattern.","In an alternative embodiment, the following method can be used to check whether all client computers  have agent  running on them. Each agent  running on each client computer  has to contact server computer  to check for updates in configuration rules on a periodic basis. In the suggested embodiment, whenever agent  contacts server computer , server computer  can look for the location of client computer  from where, the request has come. To enable this, if not already present, the information about location of the particular client computer  can be added in the header portion of the packet, which agent  sends to server computer  while checking for updates in configuration rules. This information could be either IP address or a MAC address or both. Any other address, which can uniquely identify the location of client computer , can also be used.","The above embodiment can be explained clearly by means of the situation depicted in .  shows three computers forming a computer network as described earlier. Consider the case when client computer  and client computer  have agent  running on them while client computer  does not have agent  running on it. Agent , running on each client computer, checks for updates in configuration rules with server computer . When agent  running on client computer  contacts server computer , server computer  looks at the information present in header of the packet received from agent  and identifies the IP address and MAC address of client computer  concluding that agent  is running on client computer . Similarly when agent  running on client computer  contacts server computer , server computer  looks at the information present in header of the packet received from agent  and identifies IP address and MAC address of client computer  concluding that agent  is running on client computer . But since there is no agent  running on client computer , server computer  does not get to identify any computer in the network which can have IP address and MAC address corresponding to client computer . With this information, server computer  can find out that client computer  is not running agent , while the other computers are doing so. Server computer  can then take necessary measures to ensure that agent  runs on client computer  also.","In an embodiment, when a non-compliant computer (on which agent  is not running) is detected, the gateway such as the corporate firewall or VPN can be made to block the traffic from the non-compliant computer to communicate with other computers in the network. For example, a Transmission Control Protocol (TCP) Reset packet can be sent to the non-compliant computer to prevent it from using TCP protocol or a fake Address Resolution Protocol (ARP) packet can be sent to prevent it from using any IP protocol.","As described above, it is the task of the agents in the client computers to get the latest version of the configuration-rules file from server . In another embodiment of the current invention, server  can also make periodic checks to make sure that the agents in the network have the updated copy of the configuration rules. One possible way this can be done is as follows. Server  may demand a hashed value of the configuration rules file, stored at the client computers. Server  can then compare these hashed values with the hashed value of latest access rules file, to determine which client computers are having older versions of configurations rules file. Server  may then proceed to update the values on the respective client computers.","While the preferred embodiments of the invention have been illustrated and described, it will be clear that the invention is not limited to these embodiments only. Numerous modifications, changes, variations, substitutions and equivalents will be apparent to those skilled in the art without departing from the spirit and scope of the invention as described in the claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The preferred embodiments of the invention will hereinafter be described in conjunction with the appended drawings provided to illustrate and not to limit the invention, wherein like designations denote like elements, and in which:",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
