---
title: Configuring an application program in a computer system
abstract: A computer system which configures an application program to execute with one or more resources is disclosed. The computer system includes a configuration unit to configure the application program for deployment into a runtime execution environment. The application program is divided into a plurality of bundles and the configuration unit examines the bundles individually to determine a bundle environment for each bundle based on dependencies of that bundle on the one or more resources. The configuration unit selects one or more conventions, which provide templates of configuration for a relevant resource, according to the determined bundle environment, and the configuration unit automatically generates a system configuration from the selected conventions and adds the generated system configuration to the application program, whereby the dependencies of the application program upon the resources are configured based on at least the automatically generated system configuration.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08805804&OS=08805804&RS=08805804
owner: Pivotal Software, Inc.
number: 08805804
owner_city: Palo Alto
owner_country: US
publication_date: 20091030
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION(S)","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","EXAMPLE 1","User-Supplied Component","User-Supplied Manifest","User-Supplied Configuration","System-Generated Configuration"],"p":["The application claims the benefit of U.S. Provisional Application No. 61\/164,037 filed on Mar. 27, 2009. This application also claims the benefit of UK Patent Application No. 0821773.9 filed on Nov. 28, 2008.","1. Technical Field","The present invention relates generally to the field of computers and computer systems. More particularly, the present invention relates to a computer system and to a method for configuring an application program in a computer system.","2. Description of Related Art","Modern computing systems have become highly sophisticated and complex machines, which are relied upon to perform a huge range of tasks in all our everyday lives. These computer systems comprise a very large number of individual components and sub-systems that must all work together correctly. Thus, creating programs to execute on these systems is a difficult and challenging task. In particular, the application programs that run on these modern computing systems have become increasingly complex and are increasingly difficult to develop. This leads to very lengthy development and deployment cycles and\/or leads to errors (e.g. crashes) when the computer systems execute the application programs under a live load and serving real users. It is therefore desired to improve the stability and reliability of such computer systems. Also, it is desired to reduce the workload which is involved in developing new applications to be used by such computer systems.","An application program typically includes a configuration file, which is read by the computer system at the start of execution of the application program. In general terms, the configuration file defines how this application will interact with the various resources provided by the computer system, and defines how the computer system needs to be adapted in order to support the program. That is, the configuration file contains configuration data (often simply called \u201cconfiguration\u201d) which is used to configure the application to execute on a runtime execution environment provided by this particular computer system. Traditionally, the configuration file is written in a text-based format such as ASCII. More recently, the configuration is written in a markup language such as XML and is usually structured to follow a predetermined schema. Also, the configuration is often distributed among many different parts of the application and may be supplied in several different formats even within the same application. That is, configuration is often diverse and distributed rather than being collected together in one separate configuration file. Also, the complex nature of modern computer systems means that a large volume of configuration is often required.","There have already been some attempts to reduce the need for configuration files. One example is Ruby on Rails, which is a high level object oriented programming language with a web-application framework tailored for developing database-backed web applications. Ruby on Rails forces applications to follow predetermined conventions, such as file naming conventions, that in turn reduce the need for file names to be declared in separate configuration files. Whilst acknowledged as being good practice, such naming conventions have limited applicability and are appropriate mostly in closed environments where the application is produced by a single source or vendor and has minimal dependencies on resources that are supplied by third parties. By contrast, many modern application programs are developed for use in open-ended environments that bring together resources from many different sources and vendors. Thus, configuration is still used by most modern application programs.","The exemplary embodiments have been provided with a view to addressing at least some of the difficulties that are encountered in current computer systems, whether those difficulties have been specifically mentioned above or will otherwise be appreciated by the person of ordinary skill in the art from the discussion herein. At least in some of the following exemplary embodiments, it is desired to provide an improved mechanism for configuring an application program in a computer system.","According to the present invention there is provided a computer system, a method and a computer-readable storage medium as set forth in the appended claims. Other, optional, features of the invention will be apparent from the dependent claims, and the description which follows.","The example embodiments of the present invention discussed herein concern the automatic configuration of an application program in a computer system. In particular, the exemplary embodiments of the present invention concern a mechanism to configure an application program in relation to libraries and other resources of the computer system, so that the computer system will execute the application program correctly in combination with the library resources.","There now follows a summary of various aspects and advantages according to embodiments of the invention. This summary is provided as an introduction to assist those skilled in the art to more rapidly assimilate the detailed discussion herein and does not and is not intended in any way to limit the scope of the claims that are appended hereto.","Generally, a computer system is provided which configures an application program to execute with one or more resources such as libraries. The computer system suitably comprises a configuration unit that is arranged to configure the application program ready for deployment into a runtime execution environment, wherein the application program is divided into a plurality of bundles. In use, the configuration unit examines the bundles individually to determine a bundle environment for each bundle based on the dependencies of that bundle on the one or more library resources, the configuration unit selects one or more conventions, which provide fragments or templates of configuration for a relevant library resource, according to the determined bundle environment, and the configuration unit automatically generates a system configuration from the selected conventions and adds the generated system configuration to the application program, whereby the dependencies of the application program upon the relevant library resources are then configured based on at least the automatically generated system configuration.","In one exemplary aspect there is provided a computer system comprising a runtime execution environment arranged to execute an application program with respect to a plurality of resources, wherein the application comprises a plurality of bundles and each of the bundles comprises a metadata which declares one or more dependencies of the application onto the plurality of resources, one or more classes which execute using the plurality of resources and\/or a user configuration to configure the application program with respect to the plurality of resources; a configuration unit arranged to configure the application program ready for deployment into the runtime execution environment, wherein the configuration unit is arranged to determine a bundle environment for each of the bundles based on the metadata, the classes and\/or the user configuration of the respective bundle, select a subset of a plurality of conventions according to the bundle environment of the respective bundle, generate a system configuration according to the subset of the plurality of conventions, and add the system configuration to the respective bundle; and a deployment unit arranged to deploy the application program into the runtime environment, including satisfying the dependencies of the application program with respect to the plurality of resources, wherein the deployment unit is arranged to deploy the application program into the runtime environment according to both the user configuration and the system configuration.","In one exemplary aspect, the conventions are arranged into a plurality of convention sets and each of the convention sets is associated with a corresponding resource of the plurality of resources, and wherein the configuration unit selects one or more of the convention sets according to the resources upon which the bundle depends.","In one exemplary aspect, the convention sets are associated with differing versions of the resources.","In one exemplary aspect, the convention sets are associated with a plurality of triggers which relate to the dependencies of the application program on the resources, and the configuration unit determines the bundle environment according to the triggers which are satisfied for the respective bundle.","In one exemplary aspect, the triggers relate to explicitly declared dependencies upon the resources and\/or to inferred dependencies upon the resources according to the metadata, the classes and\/or the user configuration of the bundle.","In one exemplary aspect, the resources comprise a plurality of third-party libraries.","In one exemplary aspect, the resources are arranged in a plurality of bundles, and the bundles of the resources have a format compatible with the bundles of the application program.","In one exemplary aspect, the computer system further comprises a configuration control unit arranged to selectively deactivate certain of the conventions from use by the configuration unit. For example, the configuration control unit selectively deactivates the conventions according to conflicts detected between the user configuration and the generated system configuration. In this case, the configuration unit automatically deactivates the conventions that gave rise to the conflict, such as by deactivating one of the convention sets. In particular, the configuration unit deactivates a convention set of a resource where the user configuration already includes configuration for that resource. In another example, the configuration control unit selectively deactivates the conventions according to user commands received via a user interface.","In one exemplary aspect, the computer system further comprises a configuration recording unit arranged to record the selected conventions and the corresponding system configuration for each of the bundles into a log file and to report the log file through a user interface. Here, the configuration recording unit suitably records the activated triggers, the corresponding convention sets, and the generated system configuration.","In one exemplary aspect the computer system further comprises a third party interface unit arranged to receive additional conventions into the configuration unit in relation to additional resources added to the plurality of resources. For example, in use, the third party interface couples the computer system to a separate developer system across a network. The developer system supplies the new library resource for the bundle repository, and supplies the corresponding convention set to the configuration unit via the third party interface unit.","Generally, a method is provided of configuring an application program in a computer system. The method suitably comprises, inter alia, the steps of: examining each of a plurality of bundles in the application program in turn, wherein each of the bundles comprises metadata which declares one or more dependencies of the application onto a plurality of resources, one or more classes which execute using the plurality of resources and\/or a user configuration to configure the application program with respect to the plurality of resources; determining a bundle environment for each of the bundles based on the metadata, the classes and\/or the user configuration of the respective bundle; selecting one or more conventions according to the bundle environment of the respective bundle, wherein each of the conventions comprises a template of configuration with respect to a corresponding resource of the plurality of resources; automatically generating a system configuration according to the templates of configuration in the selected conventions; and adding the system configuration to the metadata of the respective bundle.","In one exemplary aspect, a method is provided for deploying an application program into a computer system and\/or of executing an application program on a computer system, wherein the method includes the step of configuring the application program as discussed herein. Here, the method may comprise the steps of: installing the application program onto the computer system as a plurality of bundles; resolving the bundles to satisfy a set of dependencies of the bundles with respect to a plurality of resources of the computer system; configuring the application program with respect to the plurality of resources according to both the user configuration and the system configuration in each of the plurality of bundles; starting the bundles in a runtime execution environment of the computer system; and executing the application program in the runtime execution environment of the computer system in combination with the plurality of resources.","Generally, a computer-readable storage medium is provided having recorded thereon instructions which, when implemented by a computer system, cause the computer system to be arranged as set forth herein and\/or which cause the computer system to perform the method as set forth herein. In one aspect, the computer-readable storage medium comprises a configuration unit which, when executed, configures an application program for deployment into a runtime execution environment of a computer system, wherein the application program is divided into a plurality of bundles and the configuration unit examines the bundles individually to determine a bundle environment for each bundle based on the dependencies of that bundle on the one or more resources, the configuration unit selects one or more conventions, which provide templates of configuration for a relevant resource, according to the determined bundle environment, and the configuration unit automatically generates a system configuration from the selected conventions and adds the generated system configuration to the application program, whereby the dependencies of the application program upon the relevant resources are configured at least based on the automatically generated system configuration.","At least some embodiments of the invention may be constructed, partially or wholly, using dedicated special-purpose hardware. Terms such as \u2018component\u2019, \u2018module\u2019 or \u2018unit\u2019 used herein may include, but are not limited to, a hardware device, such as a Field Programmable Gate Array (FPGA) or Application Specific Integrated Circuit (ASIC), which performs certain tasks. Alternatively, elements of the invention may be configured to reside on an addressable storage medium and be configured to execute on one or more processors. Thus, functional elements of the invention may in some embodiments include, by way of example, components, such as software components, object-oriented software components, class components and task components, processes, functions, attributes, procedures, subroutines, segments of program code, drivers, firmware, microcode, circuitry, data, databases, data structures, tables, arrays, and variables. Further, although the exemplary embodiments have been described with reference to the components, modules and units discussed below, such functional elements may be combined into fewer elements or separated into additional elements.","The exemplary embodiments of the present invention will be discussed in detail in relation to Java, Spring, OSGi and so on. However, the teachings, principles and techniques of the present invention are also applicable in other exemplary embodiments. For example, embodiments of the present invention are also applicable to other virtual machine environments and other middleware platforms, which will also benefit from the teachings herein.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 1","FIG. 1"],"b":["100","10","11","100","200","100","200","30","40","100","200","50"]},"The application program  is typically developed using object-oriented programming languages, such as the popular Java language developed by Sun Microsystems. Java relies upon a virtual machine which converts universal Java bytecode into binary instructions in the instruction set of the host computer system . More recently, Java 2 Standard Edition (J2SE) and Java 2 Enterprise Edition (JEE or J2EE) have been developed to support a very broad range of applications from the smallest portable applets through to large-scale multilayer server applications such as complex controls for processes, manufacturing, production, logistics, and other industrial and commercial applications.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 2","b":["200","200","201","202","203","203","200","100"]},"In the exemplary embodiments, the host computer  also includes a middleware layer (MW) . This middleware layer  serves as an intermediary between the application program  and the underlying layers - with their various different network technologies, machine architectures, operating systems and programming languages. In the illustrated example, the middleware layer  includes a framework layer , such as a Spring framework layer. Increasingly, applications are developed with the assistance of middleware such as the Spring framework. The application  is then deployed onto the host computer system  with the corresponding framework layer , which supports the deployment and execution of the application  on that computer system .","The application  is conveniently formatted as a plurality of bundles . In general terms, a bundle is a packet, module or other subdivision comprising one or more portions of computer code (classes) which form part of an application program. Typically, the code in one bundle  will rely upon code in one or more other bundles  for proper execution of the application program . Thus, the bundles  are semi-independent collections of computer code but which are interdependent upon one another as part of a larger application. In this example, at least some of the bundles  comprise one or more classes  which are grouped into one or more logically related packages. Conveniently, the Spring framework layer  allows the application  to be based mostly on Plain Old Java Objects (POJOs).","Typically, the application program  is released from the development system  (see ) with each of the bundles  in the form of a compressed ZIP or JAR (Java archive) file ready to be deployed on the host computer system . Other examples include WAR (web archive) files and EAR (enterprise archive) files. Here, each bundle  includes a metadata unit , such as a manifest (e.g. the manifest file META-INF\/MANIFEST.MF), that gives metadata about the bundle  and\/or about the classes  contained in that bundle .","In the illustrated example, the framework layer  includes or is coupled to a bundle management layer (BM)  such as an OSGi Module Layer that manages the bundles . Here, the bundle management layer  assists in managing the installation and update of the bundles  in an OSGi environment in a dynamic and scalable fashion.","However, those skilled in the art will appreciate that the illustrated example is merely one of many possibilities and that other specific arrangements will be appropriate in other implementations. For example, another exemplary embodiment is based instead on the Java Enterprise Edition (JEE) environment, which uses bundles (\u201cmodules\u201d) compliant with JSR 277.","As shown in , the application  also comprises a configuration . As one example, the configuration  is written in the XML markup language and is optionally formatted according to a predetermined schema. In the example embodiment, the framework layer  defines beans (e.g. Spring beans) which represent dependencies of the application  upon resources that are provided by the runtime environment  of the host computer system . These Spring beans, the dependencies, and the services needed by the beans are specified by the configuration . Also, those skilled in the art will appreciate that the configuration  is often divided into a plurality of separate sections and is distributed in various different parts of the application. Thus, in practical embodiments, the configuration  may be provided as a collection of separate configuration sections.","The complex nature of modern computer systems means that a large amount of configuration  may be required. Also, the configuration  may be highly complex. Typically, the configuration  is tailored specifically to the requirements of the application  and is bespoke for each application. The configuration  is often written laboriously by hand or is cut-and-pasted from previous applications and then carefully modified for this new application. Both methods are expensive and time-consuming. As a result, many difficulties arise when initially creating the configuration . For example, it takes a lot of time and effort to produce the configuration  and this effort is often duplicated many times when creating new applications. Also, it is difficult for a large team of programmers to coordinate their efforts and produce a coherent and accurate configuration  that applies correctly and consistently across many different parts of the application . Further, it is difficult to later change the configuration , such as when the application  evolves and is deployed to alternate or improved versions of the runtime environment .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 3","b":["203","200","205"]},"As noted above, the runtime environment  includes the exemplary Spring framework layer  which in turn includes the OSGi bundle management layer . Also, this example includes a front-end application server environment (ASE)  such as Tomcat, and a Web support unit  which supports the application . Other units such as a WAR support unit (not shown) are provided, according to the specific needs of the runtime environment as will be familiar to those skilled in the art.","As shown in , in this example the computer system  further includes a framework kernel , an application management unit (APPM) , and a serviceability unit (SERVICE) . The serviceability unit  suitably performs a variety of service tasks including Trace, Logging, First Failure Data Capture (FFDC), Asserts and Aspects as will be familiar to those skilled in the art. Further, the framework layer  comprises a configuration unit (CON) , and a deployment unit (DEP) , which will be discussed in detail below.","As also shown in , the exemplary computer system  further comprises a management console unit (CONSOLE) , a reporting unit (REPORT) , a bundle repository (BR) , and at least one third-party resource  such as a library (LIB), which again will be discussed in detail below.","The bundle repository  conveniently comprises several hundred open source enterprise libraries that are commonly required when developing applications using the Spring framework . The bundle repository  suitably provides these libraries for general use in the form of bundles (i.e. in a form equivalent to the bundles  of the application ). Most conveniently, the libraries are provided as OSGi bundles. The library bundles from the bundle repository  are readily brought into the runtime environment  when needed as a resource by the application . The kernel  provisions the library bundles from the bundle repository  on demand through the bundle management layer . In , the library  is an active resource within the runtime environment  ready to satisfy a dependency of the application . Conveniently, the bundle repository  minimises a memory footprint of the framework layer  within the runtime environment , thus leaving more resources of the computer system  available for use by the application .","As noted above, the libraries  are often provided by third parties and are thus not directly under the control of the provider of the application . In this open environment, the configuration  enables the application  to interact with these third party resources . Although the libraries  are a prime example of such third party resources, there are other resources upon which the application  will depend. For example, the application  will often depend upon resources provided within the execution environment , such as Java 5 or Java 6.","The configuration unit  configures the application  ready for deployment by the deployment unit . The deployment unit then deploys the configured application into the runtime environment  including satisfying the dependencies of the application with the third-party libraries . More particularly, the configuration unit  is arranged to configure the plurality of bundles  into a configured form ready for deployment by the deployment unit . The deployment unit  then deploys the configured application bundles  into the runtime environment , including satisfying the dependencies of the bundles  with the relevant resources .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 4","FIG. 4"],"b":"220"},"Here, the configuration unit  comprises a large plurality of predetermined conventions  which are conveniently arranged into convention sets . Each of these convention sets  is then associated with a respective resource  in the computer system . For example, as illustrated in , a first convention set  is associated with the library resource \u201cFreeMarker\u201d. Another convention set  is associated with the library resource \u201cHibernate\u201d. A further convention set  is associated with \u201cJtaTransactionManager\u201d, and so on.","Each of the conventions  provides a fragment of configuration. That is, each convention  provides a predetermined configuration template. Where the configuration is expressed as textual data, such as XML, then the conventions  suitably provide a short section of XML data.","As shown in , each of the conventions  is conveniently associated with one or more predetermined triggers . These triggers  correspond to conditions that are determined by examining the bundles . When the bundle  matches any of these predetermined triggers , the configuration unit  then selects the relevant convention sets  and generates the system configuration  according to the selected set of conventions .","As shown in , the configuration unit  selects the appropriate configurations  from the convention sets  and applies these selected configurations  to generate a system configuration . This system configuration  is then added to the user configuration  that was supplied with the application  to generate a final full configuration . The application  is then configured based on the full configuration \u2014as if the full configuration  has originally been received with the application . That is, the configuration of the application  now proceeds as normal based on the full configuration .","Looking now at this example embodiment in more detail, the configuration unit  firstly determines a bundle environment for each of the bundles . The bundle environment is determined by examining each bundle individually. In practical embodiments, the application  may comprises many bundles  and many individual classes . It is common for applications to involve, for example, some ten thousand individual classes (including libraries). However, one bundle typically contains relatively few classes, such as a few tens of classes. Thus, examining each bundle  individually is relatively fast and inexpensive.","For example, the configuration unit  firstly examines any explicitly declared dependencies within this bundle . Secondly, the configuration unit  examines (scans) the classes  provided in this bundle . Further, the configuration unit examines any user configuration  that is already provided in this bundle . These triggers  together allow the configuration unit  to determine the bundle environment with respect to this particular bundle .","In more detail, the metadata  of the bundle  may include, for example, Java 5 metadata that determines dependencies of the application  upon specific resources within Java 5. However, any other forms of metadata  may also be examined. For example, in an application  that is instead based on a language such as C#, then annotations in C# may also be used to determine the relevant dependencies of the application . Also, the bundles  conveniently have explicitly declared dependencies. For example, OSGi bundles explicitly import packages. An Import.Package statement in an application bundle  will explicitly declare a dependency on a resource, such as the Hibernate library.","Scanning the classes  gives important clues as to the relevant bundle environment. For example, files with a \u201c.ftl\u201d extension will denote the dependency on the FreeMarker library resource. That is, scanning for the extension .ftl will determine whether or not this bundle needs FreeMarker. In the exemplary embodiments, the configuration unit  then further scans the application classes  to determine which files need FreeMarker and inserts the system configuration  for a dependency upon FreeMarker with a relevant common path for these files. This is an example of customisation wherein the system configuration  is tailored specifically for the components of this particular application .","These aspects of the exemplary embodiments will now be illustrated by the following specific example:",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"package mypackage;"},{"entry":"@Component \/\/ enables component-scanning public class Consumer {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"@Autowired \/\/ autowire the tm field"]},{"entry":[{},"private JtaTransactionManager tm;"]},{"entry":[{},"public void foo( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ do something with tm"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0064","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["Bundle-SymbolicName: mymodule","Import-Library: org.springframework.spring\/\/dependency on spring","Import-Package: javax.transaction\/\/dependency on JTA"]}}}},{"@attributes":{"id":"p-0065","num":"0000"},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":"[none\u2014empty file]"}}}},{"@attributes":{"id":"p-0066","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<beans>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<context:component-scan base-package=\u201cmypackage\u201d\/> \/\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"enable component scan and autowire"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<bean class=\u201cJtaTransactionManager\u201d\/> \/\/ user component"]},{"entry":[{},"<\/beans>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the above example, the import of javax.transaction causes the automatic creation of the system configuration  related to the JtaTransactionManager library resource . Also, the import of Spring and use of @Component on Consumer automatically generates the system configuration  for component scanning and autowiring. Many other specific implementations will be apparent to those skilled in the art based on the many hundreds of libraries and other resources that are available in practical computer systems.",{"@attributes":{"id":"p-0068","num":"0069"},"figref":["FIG. 5","FIG. 5"],"b":"220"},"Firstly, the libraries  are often updated. Thus, many different versions of the same library may exist within the computer system . For example, the bundle repository  may contain both the library Hibernate version 3.1.2 and Hibernate version 3.2. Different applications  will then require different versions of the Hibernate library. In the exemplary embodiments, two different convention sets  are provided in the configuration unit , which are then associated with specific versions of this resource.","Secondly, in the exemplary embodiment, the configuration unit  further comprises a configuration control unit  and a configuration recording unit . Optionally, these units link to the serviceability unit  shown in .","The configuration control unit  is suitably arranged to selectively deactivate one or more of the convention sets . Conveniently, the configuration control unit  responds to user commands through a user interface provided by a user management console in the console unit  of . That is, a user interface allows the user to specifically exclude (deactivate) certain of the convention sets , so that these convention sets will not be applied to the application  when automatically generating the system configuration .","In one embodiment, the configuration control unit  determines a master list of available convention sets . Optionally, the configuration and control unit  further gathers a list of each of the triggers  associated with each of the convention sets . The configuration control unit  then presents these lists through the user interface . In response to user commands, the configuration control unit  then selectively excludes certain convention sets  or certain triggers  from the active system. This user-defined list of exclusions is a powerful mechanism for disabling the automatic activity of the computer system  and thus allows the user complete control over the automatic generation of system configuration .","The configuration recording unit  records the system configuration  that has been automatically generated. In particular, the configuration recording unit  records each of the convention sets  that have been applied to the application , why that convention set  was applied (i.e. which trigger ) and what system configuration  was added to the application by the configuration unit  based on the one or more conventions  in that convention set . The configuration recording unit  suitably produces a log file to record these items. Conveniently, the log file is then available for inspection such as through a user interface provided by the management unit  and\/or the reporting unit  of . Again, the configuration recording unit  provides a powerful mechanism that gives the user intimate feedback on the automatic operations of the computer system .","In another aspect, the configuration control unit  is further arranged to automatically detect collisions between the user configuration  and the system configuration , such as where both configurations attempt to configure a dependency upon the same resource . Here, the collision or duplication is automatically resolved by giving the user configuration  priority over the automatically generated system configuration . That is, the configuration control unit  may automatically exclude one or more convention sets  from the list of available convention sets in response to collision detection, and then re-run the automatic generation of the system configuration  this time without those newly excluded convention sets in order to avoid the detected collision.","In a further exemplary embodiment, the configuration unit  also comprises a third party interface unit . This third party interface unit  is suitably configured as an application programming interface (API) or service provider interface (SPI). The third party interface unit  allows third party suppliers to supply new convention sets  into the configuration unit  with appropriate conventions  and triggers . Thus, a third party supplier of a new resource , or a new version of an existing resource, is now able to update the computer system  to automatically operate in relation to this newly available resource.",{"@attributes":{"id":"p-0076","num":"0077"},"figref":["FIG. 6","FIG. 6"],"b":["110","610","110","620","100","630","110","640","100","110","631","125","632","125","120","633","130","120","125","630"]},"In summary, the exemplary embodiments have described an improved mechanism for configuring an application program within a computer system The industrial application of the exemplary embodiments will be clear from the discussion herein.","Although a few exemplary embodiments have been shown and described, it will be appreciated by those skilled in the art that various changes and modifications might be made without departing from the scope of the invention, as defined in the appended claims.","Attention is directed to all papers and documents which are filed concurrently with or previous to this specification in connection with this application and which are open to public inspection with this specification, and the contents of all such papers and documents are incorporated herein by reference.","All of the features disclosed in this specification (including any accompanying claims, abstract and drawings), and\/or all of the steps of any method or process so disclosed, may be combined in any combination, except combinations where at least some of such features and\/or steps are mutually exclusive.","Each feature disclosed in this specification (including any accompanying claims, abstract and drawings) may be replaced by alternative features serving the same, equivalent or similar purpose, unless expressly stated otherwise. Thus, unless expressly stated otherwise, each feature disclosed is one example only of a generic series of equivalent or similar features.","The invention is not restricted to the details of the foregoing embodiment(s). The invention extends to any novel one, or any novel combination, of the features disclosed in this specification (including any accompanying claims, abstract and drawings), or to any novel one, or any novel combination, of the steps of any method or process so disclosed."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a better understanding of the invention, and to show how exemplary embodiments may be carried into effect, reference will now be made to the accompanying drawings in which:",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
