---
title: Data access programming model for occasionally connected applications
abstract: Portions of a computing environment (such as a user's mesh) may restrict accessing to particular types of access by particular applications. The computer may support applications executing within a virtual environment (such as a web browser) by brokering such access through a token-based system. When an application requests a particular type of access (e.g., writing to a particular data object), the computer may contact an authorization server with the credentials of the application to request the specified access, and may receive and store an authorization token. The computer may then access the computing environment with the authorization token, and may return the results to the application within the virtual environment. Additional features may further support such applications; e.g., a programmatic interface may be provided in a familiar language, such as JavaScript, whereby applications can request access to particular data objects and identify authorized access capabilities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08505084&OS=08505084&RS=08505084
owner: Microsoft Corporation
number: 08505084
owner_city: Redmond
owner_country: US
publication_date: 20090406
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["In the field of computing, applications may be configured to execute in various contexts. An application may execute natively, such as a basic process executing in an operating system, and may be delegated a full set of access rights accorded to the user executing the application. Alternatively, an application may execute within a virtual environment, such as a web application executing in a web browser. However, applications may originate from a variety of sources, many of which may be untrusted, and an incorrectly or maliciously written application might interfere with aspects of the computing environment, such as deleting files in the filesystem, corrupting user profiles, or stealing passwords and other security credentials from the operating system. Applications may also work with particular or sensitive data that might be compromised by other applications. Therefore, virtual environments often implement an isolation policy for various applications, such as restricting access of the application to the computing environment and restricting access to application resources of an application by other applications. Some virtual environments may permit a coarse-grain adjustment of the isolation policy for different applications, e.g., by identifying an application (or a set of applications, e.g., any web application hosted on a particular website) as \u201ctrusted\u201d and authorizing the application for a broader set of access privileges to the computing environment.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","A coarse-grain access model whereby applications may be hosted in virtual environments may feature several disadvantages. For example, a user may wish to authorize the application to access only a portion of the computing environment (e.g., a particular set of files, or only files of a particular type), or only a particular type of access (e.g., only read access), or an authorization to access data objects only in a local context, and a restriction against transmitting such data objects to an application host (e.g., a webserver hosting a web application.) Moreover, it may be desirable to allow applications to interact with the authorization mechanism; e.g., the application may request an authorization from the virtual environment, which may query the user to grant or deny the authorization.","One technique for providing such authorizations to access the computing environment involves an authorization token system, wherein an authorization server related to the computing environment may issue security tokens respectively authorizing a particular application to access a particular portion of the computing environment, and in particular ways (e.g., read\/write capabilities, a limited-time duration, and whether or not the data objects may be shared with the application host.) An authorization requesting component may request such authorizations on behalf of applications hosted in the virtual environment, and may store received authorization tokens in an authorization token store. A computing environment component may then interface with the computing environment, and may, on behalf of an application, perform various operations on secured portions of the computing environment by retrieving the authorization token and using the authorization token to access the computing environment. Additional features may also be incorporated to facilitate the accessing of the computing environment; e.g., a programmatic interface may be provided to allow applications to request authorization tokens, and the virtual environment may provide an authorization request mechanism that interacts with the user to determine user authorizations of various applications.","To the accomplishment of the foregoing and related ends, the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects, advantages, and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.","The claimed subject matter is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident, however, that the claimed subject matter may be practiced without these specific details. In other instances, structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.","In the field of computing, many types of applications executing on a computer may be developed that interact with an application host that provides some functionality for the application. For example, an application host may provide the application to the computer system over a network for local execution; the application host may handle a portion of the processing of the application, or may even execute the logic of the application on behalf of the application while the computer provides an interface to the remotely executing application; and\/or the application host may store some data objects that are used by the application, such as media files rendered by a media viewer application or a database exposed to a user through a data-driven application. The application host often communicates with the computer system over a network, and the application may initiate by first contacting the application host.","Such applications may also execute in various contexts. A natively executing application may operate as a process within the operating system, and may be granted a full set of privileges to access the various data objects comprising the computing environment (e.g., files in the filesystem; executable binaries stored in an assembly cache; application and operating system configuration information stored in a system registry; user profiles stored by the operating system; and security credentials, such as certificates and passwords, stored in a protected access portion of memory.) Alternatively, an application may execute within a virtual environment, such as a web browser. A virtual environment may provide many advantages as compared with native execution of the application. As a first example, an application may not be fully trusted, such as an application received from an untrusted party that may endeavor to perform incorrect or malicious operations on the computer system. The virtual environment may facilitate the execution of such applications by isolating the application from accessing the computing environment, thereby limiting the potential damage that might be caused by the untrusted application. Conversely, the virtual environment may isolate the application from interference by other applications, and may therefore safeguard the application resources utilized by the application. As a second example, an application may perform operations that are differently achieved on different computer systems, and the virtual environment may provide an interface for the application that accepts requests in a less system-dependent manner and adapts such operations to the particular computer system. For example, a web browser may allow applications written in a popular but system-independent computer language, such as JavaScript, to execute appropriately on a computer system in view of its particular capabilities. As a third example, a virtual environment may combine the application with other data objects; e.g., a web browser may present an application to a user not as a standalone application, but embedded in other visual content of a website serving as the application host.","Based on these and other considerations, the virtual environment may (e.g., by default) institute an isolation policy that restricts the application from accessing the computing environment. However, some virtual environments may permit a user to alter the isolation policy with respect to an application or application host. For example, a web browser may allow a user to identify an application or website as \u201ctrusted,\u201d thereby permitting a limited amount of interaction with the computing environment (e.g., an application may receive files in the local filesystem selected by a user), or as \u201cuntrusted,\u201d thereby restricting such accessing. Such broad classifications of rights comprising the isolation policy of the application may be useful, e.g., for simplifying for the user the task of designating trust and rights for the application.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["10","12","14","16","18","18","20","22","22","18","16","24","12","20","18","26","16","32","30","28","30","12","14","28","26","28","26","16","22","20","28","30","26","28","14","26","30","26","12","28","26","24","26"]},"While the isolation of an application within a virtual environment and the broad details of the isolation policy may have some advantages, it may be inadequate in other aspects. As a first example, the user  may wish to authorize an application  executing within the virtual environment  to access a portion of the computing environment . However, instead of delegating a full set of access privileges to the application  (corresponding to the full set of privileges extended to the user ), the user  may wish to specify particular details of the authorization of the application , such as a particular portion of the computing environment , a particular type of access (e.g., read-only access), and\/or a permission or restriction to exchange accessible information with the application host . As a first example, an office application may allow the user  to generate and save documents, and the user  may wish to permit the application to read and write document-type data objects  within the computing environment , but to restrict the application  from accessing any other types of data objects . As a second example, a user  may wish to allow an archiving application associated with online backup service to read a large portion, or even the entirety, of the computing environment  in order to create a backup image, but may restrict write access to any data object  within the computing environment . As a third example, the user  may wish to allow an application  received from an application host  to access privacy-sensitive data objects  in the computing environment , such as medical records or user credentials, but may limit the authorization to local execution by the application  on the computer , and may restrict the application  from transmitting such information to the application host  (or any other destination outside of the computer .) However, a coarse-grain isolation policy, such as allowing the user  to designate the application  or application host  as having a particular level of trust, may be inadequately general, and may not relate to the particulars of the computing environment . Moreover, the application  may be unable to participate in the authorization process; e.g., the application  may be unable to identify its authorized capabilities in an easy manner, and may be unable to interact with the user  to establish and maintain such authorizations; the user  may simply be permitted to specify at trust level within the user interface of the virtual environment .","One technique that may allow a user to authorize applications to perform specific types of accesses of the computing environment involves a token-based model, wherein an application may perform a particular access of a portion of the computing environment (e.g., reading or writing a particular data object) using a security token issued by an authorization server. An application may be permitted to access a protected portion of the computing environment, but only if an authorization token is provided that verifies that the application is permitted to access the portion in the requested manner. These authorization tokens may be generated, e.g., by an authorization server, which may internally store a list of authorizations granted by the user to various applications. For example, the computing environment may comprise a cryptographic public key, and the authorization server may internally store the corresponding cryptographic private key. Upon receiving a request for an authorization token authorizing a particular type of access, the authorization server may verify the requested access according to its authorizations list (e.g., by verifying the identity of the requester and that the requester is permitted to access the specified portion of the computing environment.) Upon verifying the requested access, the authorization server may generate an authorization token, cryptographically sign it with the private key, and return the authorization token in fulfillment of the request. The application may then submit the access request to the computing environment (or to an interface regulating such access), along with the authorization token. Upon receiving the request, the computing environment may verify the authenticity of the authorization token against the cryptographic public key, and may perform the requested accessing if the authorization token is authenticated and indicates an authorized accessing by the requester.","This token-based authorization model may be utilized in many ways. As one example, the user's computer may comprise an authorization token store, where authorization tokens issued for particular applications may be stored; an authorization requesting component that may request such authorization tokens from the authorization server on behalf of such applications and store received tokens in the authorization token store; and a computing environment component that performs such accesses on behalf of applications using the corresponding authorization tokens. This modeling of the access privileges of the applications may present many advantages, such as a fine-grain and robust capability of specifying access authorizations for particular applications and persistence of the authorization tokens (e.g., by storing the authorization tokens in the computing environment, and allowing virtually hosted applications to interact with the user in requesting and establishing such access authorization.) Moreover, a programmatic interface may be provided within the virtual environment to permit developers to configure applications to utilize the security model in a convenient and familiar manner; e.g., a web browser may feature a JavaScript plug-in or API that exposes operations that an application may invoke to request a particular type of authorization, to identify the authorized access privileges of the application, and\/or to apply such authorizations in the accessing of the computing environment.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2","b":["40","12","14","16","18","18","40","20","22","26","28","30","32","28","16","22","20","40","44","20","28","26","44","42","20","48","28","44","46","48","20","22","48","28","44","50","48","20","28","14","42","14","50","48","42","48","46","44","52","20","28","46","48","20","48","52","50","48","42","48","52","20","48","44","20","28","26","14","26"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 3","FIG. 3","FIG. 2"],"b":["60","62","64","64","66","66","44"]},"The techniques discussed herein may be devised with variations in many aspects, and some variations may present additional advantages and\/or reduce disadvantages with respect to other variations of these and other techniques. Moreover, some variations may be implemented in combination, and some combinations may feature additional advantages and\/or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments (e.g., the exemplary system  of ) to confer individual and\/or synergistic advantages upon such embodiments.","A first aspect that may vary among embodiments of these techniques relates to the scenarios in which the techniques may be applied. While these techniques involve the interactive cooperation of an application, a virtual environment, a computing environment, and an authorization server implementing an authorization token scheme, each of these components may vary in many ways. As a first example of this first aspect, the application may comprise many types of applications hosted in a virtual environment, such as a web application executing within a web browser or an application configured for execution on a particular machine and executing within an emulation of the machine. The application might also be configurable in various ways, e.g., for execution in different contexts. In one such embodiment, the application may be configurable to execute either within the virtual environment (e.g., within a web browser) or natively (e.g., as a standalone process presented in a dedicated window of a graphically oriented operating system.) Moreover, the interfacing of the application with the computing environment may be separated from the contextual configuration. This feature may be particularly advantageous because if the application utilizes the same interface to the computing environment, the functionality of the application and its access authorization may be achieved in a similar manner, thus enhancing the consistent processing of the application regardless of its execution context.","As a second example of this first embodiment, the application may also vary in relation to the functionality provided by an application host. In one such embodiment, the application may rely on the application host for data services in addition to the provision of the application resources for installation on the computer, such as database services provided by a database application host for a data-driven client application. In another such embodiment, portions of the application may be performed by the application host; e.g., a computationally powerful application host may perform high-performance data processing on behalf of a client executing on a lower-performance computer, or the application may execute on the computer as a thin client that allocates all processing except input and output operations to the application host. In yet another such embodiment, with regard to the management of the application by the application host, the application may be configurable to execute in an application host connection context, such as a connected context or a disconnected context. For example, the application may be configured for online or offline execution, such as by storing the application resources in a browser application cache. Such an application may be configured, e.g., to detect the connected availability of the application host, and may use local representations of application resources while disconnected and live (remotely hosted) representations of the application resources while connected.","As a third example of this first aspect, the authorization server and the authorization token scheme may be implemented in many ways. In one set of embodiments, many cryptographic algorithms may be suitable for encrypting, decrypting, signing, and verifying such authentication tokens, including asymmetric algorithms (e.g., RSA, DSS, Diffie-Helman, and elliptic curve techniques) and symmetric techniques (e.g., AES\/Rijndael and RC4.) In another set of embodiments, the authorization server may comprise a particular computer or device, including a dedicated computer or device that only is only tasked with the provision of authorization tokens, a service or invokable library operating on the computer, the application host, and\/or the computing environment host, etc. In yet another set of embodiments, the authorization server may encrypt the contents of the authorization token as part of the generation, and such encryption may involve the same encryption algorithm as for the signing or another encryption algorithm, or may issue the authorization token in an unencrypted form, etc. It may be appreciated by those of ordinary skill in the art of cryptography that many token generating and authenticating techniques may be incorporated in embodiments of the techniques discussed herein.","As a fourth example of this first aspect, the computing environment and computing environment host may vary in many aspects. As one such example, the computing environment may exist only on the computer, which may also operate as the computing environment host. Alternatively, the computing environment may be distributed across several computers and devices in an uncoordinated or peer-to-peer manner; e.g., the application may execute within a virtual environment on a first computer, but may access a portion of the computing environment stored on another computer. As another alternative, the computing environment may represent a deployable computing environment that is deployed to a set of computers and devices and centrally managed by a computing environment host. In order to reduce the complex variety and decentralization of the data objects comprising a contemporary computing environment, a deployable representation of the computing environment may be devised, where the data objects comprising the computing environment are organized in a data object hierarchy, which may be hosted by a computing environment host. If the data objects are represented in a uniform manner and managed in a consistent way by a data object system, a set of services may be devised to apply to all data objects of the computing environment. The data object hierarchy may be delivered to various devices to represent the same computing environment (including the same user profiles, applications, data files, etc.), and each device may render the computing environment in a consistent manner but customized based on the capabilities of the device (e.g., a hard keyboard interface for receiving data entry from a keyboard device attached to a workstation, and a touchscreen software keyboard interface for receiving data entry from a cellphone device.) It may also be advantageous to configure at least one server to manage one or more data objects within the representation, and to accept operations sets to be applied to such data objects. A user of the deployable computing environment may therefore interact with the deployable computing environment in a platform- and device-independent manner.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4","b":["70","72","74","72","74","76","80","84","82","78","76","88","76","84","74","72"]},"The various devices illustrated in  may also cooperate by sharing locally stored data with other devices, and by controlling or being controlled by other devices. Hence, the computing environment may therefore be devised and presented as a cloud computing architecture, comprising a device-independent representation (a \u201ccloud\u201d) expressed as a consistent rendering across all devices (\u201cclients\u201d) that form a mesh of cooperating portals (with device-specific properties) to the same computing environment. Specifically with respect to the applications of the computing environment, the deployable computing environment  may include a representation of the application set, the application resources, and the data objects created thereby. Moreover, the computing environment host  may apply services to the various objects comprising the deployable computing environment , and the common format in which the data objects are stored in the deployable computing environment  may facilitate consistent availability and application of the services regardless of the nature of the data objects applied thereto. However, those of ordinary skill in the art may devise many types of computing environments and computing environment hosts that may be incorporated in the techniques discussed herein.","A second aspect that may vary among embodiments of these techniques relates to the semantics of requesting, generating, and utilizing the authorization tokens. As a first example, the authorization token may be requested by providing various pieces of information. As a first example, the request for the authorization token may identify a computing identifier portion, such as a request to access the complete computing environment; a request to access one or more particular data objects represented in the computing environment; all of the data objects represented in the computing environment matching one or more data object types (e.g., only document data objects and media object data objects); one or more event lists represented in the computing environment (e.g., a newsfeed indicating a related set of events arising within the computing environment), at least one device, contact, or user profile represented in the computing environment; etc. Alternatively or additionally, the request for the authorization token may include one or more access type identifiers that identify permissible operations on the portion of the computing environment. In one such embodiment, the request may specify types of operations that the requested accessing may entail, such as reading, writing, appending, truncating, creating, moving, renaming, and removing particular data objects. In another such embodiment, the request may specify a role that the requesting application may wish to adopt with regard to the requested portion of the computing environment. For example, the application may request access to the identified portion of the computing environment in a reader role (entailing read-only access to the referenced data objects and newsfeeds related thereto), in a contributor role (entailing only read and write access to the referenced data objects and newsfeeds related thereto), or as an owner role (entailing full privileges, such as the authority to delegate and revoke rights to other applications, users, computers, and devices.) Alternatively or additionally, the request for the authorization token may include one or more identity identifiers that identify the requester of the authorization token, such as the application, a user of the application, and\/or a computer or device executing the application.","A second example of this second aspect relates to additional features of the semantics of the authorization tokens. For example, the authorization server may provide one authorization token for each application, or may provide a set of authorization tokens for each application that respectively indicate one type of authorized accessing of the computing environment, or may provide one authorization token that indicates the authorization of all applications, etc. Alternatively or additionally, the authorization token may also include other details of the authorization, such as a particular source for the data objects comprising the requested portion of the computing environment (e.g., which server is to be used in a server farm hosting of the computing environment), or security credentials to be used by the application when accessing the data object (e.g., an account and password to use when accessing the computing hosting the data objects.) The authorization token comprising an authorization duration, such as the amount of time for which access is authorized. In this example, the authorization requesting component may be configured to remove the authorization token from the authorization token store after expiration of the authorization duration, and\/or to request a refresh of the authorization token. Alternatively or additionally, the authorization requesting component may provide to the authorization server while requesting the authorization token a reference to a privacy policy document, which may describe a privacy policy of the application (e.g., a pledge by the application host that the accessed data objects will be used only in certain ways.)","As a third example of this second aspect, the mechanism of exchanging the authorization tokens may vary among embodiments of these techniques. As a first example, the application may contact a locally hosted authorization server via an interprocess communication technique, or may contact a remotely hosted authorization server via a remote process communication technique or a network protocol. In one such embodiment, the authorization server may comprise a web service, whereby authorization tokens may be requested by submitting an HTTP request containing various parameters (e.g., the portion of the computing environment for which access is requested, the access type, and\/or credentials such as identity identifiers), such as encoded via as HTTP POST or HTTP GET. Moreover, where the application comprises a web application executing in a web browser of the computer, the authorization token request may specify a return address, and the authorization requesting component may, upon receiving the authorization token, navigate the web browser to the return address, or to any other return address associated with the web application. As a second example, the requesting and authorizing of access may be performed automatically without involving a user of the application and\/or a user of the computing environment. Alternatively, the authorizing may be interactively designed, such that the authorization of access depends on the consent of a user. In one such embodiment, the authorization requesting component may facilitate the process of requesting the user to authorize access to the portion of the computing environment, e.g., by presenting an application access request within the virtual environment to the user of the application, and upon receiving such authorization from the user, proceeding to request the authorization token while including the user authorization as a credential. Those of ordinary skill in the art may devise many techniques for organizing the process of requesting, generating, and using authorization tokens while implementing the techniques discussed herein.","A third aspect that may vary among embodiments of these techniques relates to the architecture of the system and the components with which the system interacts. As a first example, it may be advantageous to configure the computing environment component to execute outside of the virtual environment; for example, this configuration may enable the services provided by the computing environment component to be applied independently of the operation and existence of any particular application or the virtual environment (e.g., the computing environment component may perform operations on the computing environment even if a web browser is not executing.) However, a difficulty may arise in enabling an application executing within the virtual environment to access the computing environment component executing outside of the virtual environment due to the isolation policy of the virtual environment. In order to address this difficulty, the system may include a virtual environment interface that is operably coupled with the computing environment component, but that executes within the virtual environment. The virtual environment interface may receive operations on the computing environment from applications and may submit the operations to the computing environment component. For example, where the application comprises a web application executing within a web browser, the virtual environment component may comprise a browser plug-in that is configured to access the computing environment component on behalf of applications executing within the web browser.","As a second example of this third aspect, various components of the system may comprise a programmatic interface, which may expose to applications one or more operations that may be invoked to request an authorization token and\/or to perform various operations on the computing environment. A programmatic interface may be included, e.g., in the computing environment interface, and applications executing within the virtual environment may invoke the operations to interact with the authorization tokens of the application and\/or the accessing of the computing environment using such tokens. Moreover, the programmatic interface may be implemented based on familiar technologies, such as JavaScript, which may permit developers to access the computing environment through the programmatic interface in a convenient manner and with a reduction of application redesign.","As a third example of this third aspect, the authorization tokens may be requested at various times. In a first such embodiment, the authorization tokens may be requested and stored during an installation of the application, e.g., when the user first requests the installation of the application in the computer. For example, the virtual environment may, upon receiving an application from the application host, or even upon receiving a request to install the application, identify the types of computing environment access that may be involved, and may request the user to authorize particular types of computing environment access. Alternatively or additionally, the authorization tokens may be requested during runtime, e.g., when the application is first executed by the user, and\/or on a just-in-time basis, e.g., when the application seeks to apply a particular operation to the computing environment.","As a fourth example of this third aspect, the authorization tokens may be stored in various ways. As a first example, the authorization token store may be included as a portion of the computing environment, such as files within the filesystem that comprises the computing environment. This storing may be advantageous, e.g., for permitting the authorization tokens to be protected by a similar access control mechanism as the other protected data objects of the computing environment. In addition, a first application may request a delegation of some privileges already delegated to a second application by requesting an authorization access to the second application. Additionally, the computing environment may be configured to store at least one application authorization mapping that associates the application with the authorization token in the computing environment; e.g., the computing environment may include a reference of an application to the respective data objects representing the authorization tokens stored in the computing environment. As a second example, the authorization token store may be stored by the computing environment host and\/or the authorization server, which may promote a centralized administration of the authorization tokens and may promote the security of the authorization token scheme. Those of ordinary skill in the art may devise many architectures within which the techniques described herein may operate.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.","As used in this application, the terms \u201ccomponent,\u201d \u201cmodule,\u201d \u201csystem\u201d, \u201cinterface\u201d, and the like are generally intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a controller and the controller can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","Furthermore, the claimed subject matter may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed subject matter. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 5","FIG. 5"]},"Although not required, embodiments are described in the general context of \u201ccomputer readable instructions\u201d being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media (discussed below). Computer readable instructions may be implemented as program modules, such as functions, objects, Application Programming Interfaces (APIs), data structures, and the like, that perform particular tasks or implement particular abstract data types. Typically, the functionality of the computer readable instructions may be combined or distributed as desired in various environments.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 5","FIG. 5"],"b":["90","92","92","96","98","98","94"]},"In other embodiments, device  may include additional features and\/or functionality. For example, device  may also include additional storage (e.g., removable and\/or non-removable) including, but not limited to, magnetic storage, optical storage, and the like. Such additional storage is illustrated in  by storage . In one embodiment, computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage  may also store other computer readable instructions to implement an operating system, an application program, and the like. Computer readable instructions may be loaded in memory  for execution by processing unit , for example.","The term \u201ccomputer readable media\u201d as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory  and storage  are examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, Digital Versatile Disks (DVDs) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .","Device  may also include communication connection(s)  that allows device  to communicate with other devices. Communication connection(s)  may include, but is not limited to, a modem, a Network Interface Card (NIC), an integrated network interface, a radio frequency transmitter\/receiver, an infrared port, a USB connection, or other interfaces for connecting computing device  to other computing devices. Communication connection(s)  may include a wired connection or a wireless connection. Communication connection(s)  may transmit and\/or receive communication media.","The term \u201ccomputer readable media\u201d may include communication media. Communication media typically embodies computer readable instructions or other data in a \u201cmodulated data signal\u201d such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.","Device  may include input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, infrared cameras, video input devices, and\/or any other input device. Output device(s)  such as one or more displays, speakers, printers, and\/or any other output device may also be included in device . Input device(s)  and output device(s)  may be connected to device  via a wired connection, wireless connection, or any combination thereof. In one embodiment, an input device or an output device from another computing device may be used as input device(s)  or output device(s)  for computing device .","Components of computing device  may be connected by various interconnects, such as a bus. Such interconnects may include a Peripheral Component Interconnect (PCI), such as PCI Express, a Universal Serial Bus (USB), firewire (IEEE 1394), an optical bus structure, and the like. In another embodiment, components of computing device  may be interconnected by a network. For example, memory  may be comprised of multiple physical memory units located in different physical locations interconnected by a network.","Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example, a computing device  accessible via network  may store computer readable instructions to implement one or more embodiments provided herein. Computing device  may access computing device  and download a part or all of the computer readable instructions for execution. Alternatively, computing device  may download pieces of the computer readable instructions, as needed, or some instructions may be executed at computing device  and some at computing device .","Various operations of embodiments are provided herein. In one embodiment, one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media, which if executed by a computing device, will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further, it will be understood that not all operations are necessarily present in each embodiment provided herein.","Moreover, the word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor\u201d. That is, unless specified otherwise, or clear from context, \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is, if X employs A; X employs B; or X employs both A and B, then \u201cX employs A or B\u201d is satisfied under any of the foregoing instances. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims may generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from context to be directed to a singular form.","Also, although the disclosure has been shown and described with respect to one or more implementations, equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components (e.g., elements, resources, etc.), the terms used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., that is functionally equivalent), even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition, while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
