---
title: Cross-platform application programming interfaces for applications
abstract: Concepts and technologies are described herein for cross-platform application programming interfaces for applications. In accordance with the concepts and technologies disclosed herein, the cross-platform APIs support interoperability and extensibility with various application programs using a single language and/or set of APIs. Extensions authored for a particular application program may be used with other application programs that expose the same or a similar set of APIs, even if other object models or APIs associated with the application programs differ from one another. Thus, the APIs support cross-platform, cross-device, and cross-version compatibility of extensions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08881179&OS=08881179&RS=08881179
owner: Microsoft Corporation
number: 08881179
owner_city: Redmond
owner_country: US
publication_date: 20111114
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Application developers wanting to create software add-ons, plug-ins, or other extensions for a particular software package may be confronted with multiple platforms and object models associated with the software. For example, a software developer may distribute the software for use on multiple computing platforms and\/or operating systems. For example, a software developer may create an extension for a PC version of the Microsoft Office family of products from Microsoft Corporation in Redmond, Wash. Users of another version of the Microsoft Office family of products may be unable to use the extension. In particular, because the operating systems and\/or platforms may be distinct from one another, an extension authored for a particular platform may be incompatible with software executed on another platform.","Furthermore, when new versions of a particular software package are developed, some changes made to the software package may result in a loss of compatibility between the extension and the software package. For example, some aspects of a software object model may evolve between versions. As a result, developers may be compelled to create multiple versions of the extension for compatibility for new versions of software.","Some software suites, while related in some aspects, may include distinct application-specific object models. With regard to the Microsoft Office family of products, for example, the Microsoft Word word processing application has a first object model and set of APIs while the Microsoft Excel spreadsheet application has a second object model and set of APIs for use by developers. As such, developers may create various versions of a particular extension, even for related applications of software packages. The various versions of the extensions may use application-specific application programming interfaces (\u201cAPIs\u201d) to interact with the application programs. Thus, even when developing extensions for related software or applications, application developers who have created an extension for one application platform may eventually recode the extension using another application-specific API for compatibility with other applications.","It is with respect to these and other considerations that the disclosure made herein is presented.","Concepts and technologies are described herein for cross-platform application programming interfaces (\u201cAPIs\u201d) for applications. In accordance with the concepts and technologies disclosed herein, the cross-platform APIs support interoperability and extensibility with various application programs using a single set of APIs. In some embodiments, the APIs support JAVASCRIPT for interacting with the application programs. The APIs can allow extensions to function over various platforms including rich clients, web-access clients, server computers, and the like. As such, resistance to new versions of application programs by application developers may be reduced.","Similarly, because the APIs support interactions with one or more application programs using a single language and\/or set of APIs, extensions authored for a particular application program may be used with other application programs that expose the same or a similar set of APIs. As such, the APIs support cross-platform, cross-device, and cross-version compatibility of extensions. The APIs are configured, by design, to abstract away certain differences or distinctions between the manner in which various application programs interact with files, thereby allowing extensions to function with files across multiple application programs.","According to one aspect, a computing device executes application programs that are configured to expose a set of APIs. The APIs can be used to initialize an extension configured to interact with a file associated with the application programs. The file can be any type of file including, but not limited to, word processing documents, spreadsheet documents, calendar files, email files, contact information, databases, presentation documents, project documents and the like. The APIs are configured to determine if a portion of the document is selected, and to perform various operations with respect to the selected portions.","According to another aspect, the APIs support a notion referred to herein as \u201cbinding.\u201d Binding as used herein refers to creating an association or relationship between an extension and a portion of a document such as a table, paragraph, an image, or the like. Data from a selection of the file can be written to the bound section and\/or data from a bound section of the file can be written to a selection of the file. As such, the APIs support selection-based and binding-based access and manipulation of data. As such, an extension or other application calling the binding may function only with an awareness that it is working with a binding. As such, the APIs disclosed herein provide a layer of abstraction via the notion of bindings. This layer of abstraction is created between the calling application and the content application and can facilitate symmetry across content types and\/or applications.","According to some embodiments, the APIs also support coercing data into a recognized data type. The data types supported by the APIs can be consistent across applications, versions, and platforms. Settings associated with the extensions can be stored and retrieved when extensions are initialized or activated. The APIs also support multi-user interactions with application programs, interactions with extensible markup language (\u201cXML\u201d) parts, interactions and\/or operations on custom XML parts such as Office Open XML (\u201cOOXML\u201d) parts, and synchronous and asynchronous operations. The APIs also can support operations that include use of the APIs as well as other application-specific and\/or objet-model-specific APIs that are tailored to core functionality of the application programs.","It should be appreciated that the above-described subject matter may be implemented as a computer-controlled apparatus, a computer process, a computing system, or as an article of manufacture such as a computer-readable storage medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore, the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.","The following detailed description is directed to concepts and technologies for cross-platform application programming interfaces for applications. According to the concepts and technologies described herein, the cross-platform APIs support interoperability and extensibility with various application programs using a single set of APIs. In some embodiments, the APIs support JAVASCRIPT for interacting with the application programs. The APIs can allow extensions to function over various platforms including rich clients, web-access clients, server computers, and the like.","The APIs also can support interactions with one or more application programs using a single language and\/or set of APIs. As such, extensions authored for a particular application program may be used with other application programs that expose the same or a similar set of APIs, even if other object models or APIs associated with the application programs differ from one another. Thus, the APIs support cross-platform, cross-device, and cross-version compatibility of extensions. In some embodiments, the APIs are configured to minimize differences or distinctions between the manner in which various application programs interact with files. Thus, some embodiments of the concepts and technologies disclosed herein allow extensions to function with files across multiple application programs.","While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system, those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like.","In the following detailed description, references are made to the accompanying drawings that form a part hereof, and in which are shown by way of illustration specific embodiments or examples. Referring now to the drawings, in which like numerals represent like elements throughout the several figures, aspects of a computing system, computer-readable storage medium, and computer-implemented methodology for cross-platform application programming interfaces for applications will be presented.","Referring now to , aspects of one operating environment  for the various embodiments presented herein will be described. The operating environment  shown in  includes a computing device . According to various embodiments, the functionality of the computing device  is provided by a personal computer (\u201cPC\u201d) such as a desktop, tablet, or laptop computer system; a server computer; a mobile computing device such as a handheld computer, a tablet computer; or another type of computing device. In some embodiments, the computing device  is configured to operate as part of, or in communication with, a communications network (\u201cnetwork\u201d) , though this is not necessarily the case. The network  can include any type or combination of communications networks. Because the computing device  can operate in a stand-alone computing environment, it should be understood that the embodiment shown in  is illustrative, and should not be construed as being limiting in any way.","The computing device  is configured to execute an operating system  and one or more application programs A-N (hereinafter collectively and\/or generically referred to as \u201capplication programs \u201d). The operating system  is a computer program for controlling the operation of the computing device . The application programs  are executable programs configured to execute on top of the operating system  to provide any type of functionality for users of the computing device  and\/or to further control operation of the computing device . In some embodiments, for example, the application programs  include one or more, or a suite, of application programs. For example, in one contemplated embodiment of the computing device , the application programs  include one or more members of the MICROSOFT OFFICE family of products from Microsoft Corporation in Redmond, Wash. The application programs  also can include any combination of web browsers, customer relationship management software, personal information management software, other application programs, combinations thereof, and the like.","For purposes of illustrating the concepts and technologies disclosed herein, the application programs  will be described as including a member of the MICROSOFT OFFICE family of products as described above. As described herein, the application programs  can create, save, modify, and\/or perform operations on one or more documents or other files (hereinafter collectively and\/or generically referred to as \u201cfiles\u201d) . In the illustrated embodiments, the file  can include a MS WORD document file; an MS EXCEL spreadsheet file; an MS OUTLOOK calendar, mail, note, or contact file; an MS POWERPOINT presentation file; an MS ACCESS database file; and\/or another type of file or document. Because the concepts and technologies disclosed herein can be used with any type of software, it should be understood that these embodiments of the application programs  and the file  are illustrative, and should not be construed as being limiting in any way.","The file  includes one or more portions or sections (\u201csection\u201d) . According to various implementations, the section  includes a selection within and\/or a portion of the file  such as, for example, a table, a string of text, a paragraph, a page, a slide, a worksheet, or other portion of the file . The section  can include a portion of the file  being interacted with by a user and\/or the application programs . The section  can include any portion of, or the entire, file  and can be interacted with using various aspects of the concepts and technologies disclosed herein.","In various implementations of the concepts and technologies disclosed herein, the application programs  executed by the computing device  are configured to expose one or more, or a set of, application programming interfaces (\u201cAPIs\u201d) . The APIs  are exposed by the application programs  to allow users or other software to interact with the application programs . In some embodiments, the APIs  allow interactions with the application programs  by other software such as, for example, plug-ins, add-ons, extensions, or other software (hereinafter collectively and\/or generically referred to as \u201cextensions\u201d) . According to various embodiments, the APIs  are used by application developers to create the extensions  such that the extensions  can interact with the application programs , can support interactions with the application programs  by external resources or computing devices via the network , and\/or can enable other functionality as described herein. As shown in , it should be understood that the extensions  can access one or more of the application programs  via the same set of APIs .","According to implementations of the concepts and technologies disclosed herein, the APIs  exposed by the application programs  are configured to allow developers to create cross-platform, cross-application, and cross-version functionality for the application programs  and\/or the extensions . In one embodiment, the APIs  are configured to recognize commands and\/or functionality across a combination of software applications that are included within or as part of the application programs . For example, as mentioned above, the MICROSOFT OFFICE family of application programs can include, but is not limited to, a member of the MICROSOFT OUTLOOK family of personal information management (\u201cPIM\u201d) software, a member of the MICROSOFT WORD family of word processing software, a member of the MICROSOFT EXCEL family of spreadsheet software, a member of the MICROSOFT POWERPOINT family of presentation software, a member of the MICROSOFT ACCESS family of database software, all from Microsoft Corporation in Redmond Wash. The MICROSOFT OFFICE family of products can include additional or alternative software in some embodiments.","In some implementations, each of the software applications included in the MICROSOFT OFFICE family of products can expose an application-specific API and\/or object model (\u201cOM\u201d) for interacting therewith. Thus, developers can tailor add-ons, extensions, and\/or other software using application-specific APIs. The ability to script or code custom extensions using an application-specific API can result in extensions that are tailored specifically for the core functionality of a particular program. As such, the extensions  can be tightly bound to the OM of a particular application program . The extensions , however, may be so tightly tied to the application program  that developers may create new versions of the extensions  when new versions of the application programs  are released. Similarly, developers wishing to support functionality across more than one of the application programs ; across more than one platform executing the application programs ; and\/or across multiple versions of the application programs  may create multiple versions of the extensions . In one contemplated embodiment, at least two versions of the application programs  are sold by vendors, a first version for use by a first platform executing a member of the WINDOWS family of operating systems from Microsoft Corporation in Redmond, Wash., and a second version for use by a second platform executing an alternative operating system. It should be understood that this embodiment is illustrative, and should not be construed as being limiting in any way.","According to various implementations, the concepts and technologies disclosed herein provide APIs  that support cross-platform, cross-application, and cross-version functionality for extensions . In one embodiment, the APIs  provide a JAVASCRIPT-based environment for interacting with the application programs . The example of JAVASCRIPT is illustrative, as other languages can be used. In one implementation, the APIs  support web extension initialization functionality for the application programs . For example, the APIs  exposed by the application programs  can expose an extension object that enables a developer to implement various delegates without having specific knowledge of the type of application supporting the APIs . In one contemplated embodiment, the delegates include an initialize delegate that gives access to an Context object. The initialize delegate can be defined in a JAVASCRIPT file. In one implementation, wherein the application programs  correspond to a member of the MICROSOFT OFFICE family of products, the delegate is defined in an Office.js file. The Context object provides access to the environment in which an extension  is running, namely, the Application object, the Document, or the Settings object. These and other aspects of the Context object are described in more detail below. It should be understood that this embodiment is illustrative, and should not be construed as being limiting in any way.","A developer can use the Context object to access a full object model of the application programs . A developer also can access document contents of a document or other file  with which the initialized web extension or other extension  is interacting. In one embodiment, a document property of the Context object is used to access the file . Additionally, the initialize function provides a reason parameter that can be used to specify a reason for the initialization. The developer can use the reason parameter to implement reason-specific logic. For example, one type of logic can be implemented when the web extension is inserted, and a second type of logic can be implemented if the web extension pre-exists on the document, for example, if a user opens a document and an extension is saved already. One contemplated example of implementing the web extension initialization functionality of the APIs  is described in more detail below with reference to .","Through the initialization function, developers can obtain access to an application object that represents the application program  being used at the computing device . For example, the application object provides, in one embodiment, name and version properties. The name and version properties can enable a developer to determine what application program of the application programs  is running, to inform what application program  is hosting the extension , a version of the extension , and\/or to access application-specific logic of the extension . The APIs  support at least two approaches to access the file  contents. In particular, the APIs  support a selection-based access approach using a getSelectedDataAsync method, a documentSelectionChanged event, and\/or a setSelectedDataAsync method. This can be achieved from the document object. Thus, the APIs  can support identifying a section  of the file  based upon a selection. The APIs  also support binding-based access through a binding object. As will be explained in more detail below, bindings can be created in a number of ways including, but not limited to, creating a binding from a current selection, prompting a user to make a selection, and\/or by specifying a named object in a document. The selection-based and binding-based access approaches are discussed in more detail below with reference to .","According to some embodiments, the APIs  are configured to support the use of common or generic data types across the application programs . In particular, the APIs  are configured to allow developers to create functionality that is tied to defined data types common across the application programs . In one implementation, wherein the application programs  correspond to a member of the MICROSOFT OFFICE family of products, the APIs support at least five data types including, but not limited to, a text data type, a matrix data type, a table data type, a Hypertext Markup Language (\u201cHTML\u201d) data type, and an Office Open Extensible Markup Language (\u201cOOXML\u201d) data type. Other data types including, but not limited to, an image data type, are possible and are contemplated.","According to various embodiments, the text data type includes a string representation of data. A text object can support the text data type. In some embodiments, the format of the data can be obtained by supplying a parameter on the GET* methods, which can have a ValueFormat parameter and can be specified as formatted or unformatted. According to various embodiments, the text object can support plain text, formatted text, and\/or other text formats such as HTML or OOXML, if desired. According to some implementations, the matrix data type is configured to return data in a selection. The data returned by the matrix data type can be returned as a jagged array. The table data type can be used to provide data in a selection or binding as a table object. The table object is configured to expose the data through two properties, the headers property and the rows property. By enabling operations on data types that are common or generic across the application programs , the APIs  can enable developers to create extensions  that operate with some, all, or none of the application programs . Furthermore, the APIs  allow developers to coerce data obtained from the application programs  into a recognized data type. As such, the APIs  can enable differences in how the various application programs  interact with the data to be abstracted away in another manner.","According to various implementations, the APIs  support \u201cbinding.\u201d As used herein, \u201cbinding\u201d refers to creating a relationship between the extension  and a section  of a document or other file . A file  can include any document being operated on by the application programs , as explained above. Thus, the section  of the file  can include a table within a document, text within a document, a paragraph of a document, an image in a document, or other portion of the file . The APIs  support binding functionality of the extension  to the section  of the file . As such, the functionality of the extension  can be used with more than one of the application programs , even if the application programs  include programs with varied functionality such as spreadsheet programs, presentation programs, word processing programs, email programs, and the like.","The concept of binding is used by the APIs  to enable the extensions  to recognize the section  of the file  based upon a current selection within the document, by an identifier or name assigned to the section , by prompting a user to identify the section , or using other functionality. Operations can be performed on the section , without regard to which of the application programs  is in use. As such, the APIs  support operations on various types of files  and\/or sections  thereof, across application programs , across platforms, and\/or across versions. The APIs  also support synchronous and asynchronous calls, and can be configured to support interactions with custom extensible markup language (\u201cXML\u201d) parts. These and other aspects of the APIs  are described in more detail below.","Additionally, the concept of binding can be used to execute various operations with respect to bound document portions such as the section  of the files  based upon various binding events including, among others, selection of a bound section, determining that a bound selection or bound data has changed, for example using the bindingSelectionChanged or bindingDataChanged events, and\/or other events and\/or methods. The concept of bindings also can be used prompt execution of logic when data is entered into, selected, or copied from a bound section, when a bound section is accessed, referenced, or written to, and\/or upon other occurrences. Some illustrative embodiments of the concept of bindings are set forth below, particularly with reference to . It should be understood that these embodiments are illustrative, and should not be construed as being limiting in any way.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 1","b":["102","104","114","108","100","102","104","114","114"]},"Turning now to , aspects of a method  for initializing a web extension using a cross-platform API will be described in detail. It should be understood that the operations of the methods disclosed herein are not necessarily presented in any particular order and that performance of some or all of the operations in an alternative order(s) is possible and is contemplated. The operations have been presented in the demonstrated order for ease of description and illustration. Operations may be added, omitted, and\/or performed simultaneously, without departing from the scope of the appended claims.","It also should be understood that the illustrated methods can be ended at any time and need not be performed in their respective entireties. Some or all operations of the methods, and\/or substantially equivalent operations, can be performed by execution of computer-readable instructions included on a computer-storage media, as defined herein. The term \u201ccomputer-readable instructions,\u201d and variants thereof, as used in the description and claims, is used expansively herein to include routines, applications, application modules, program modules, programs, components, data structures, algorithms, and the like. Computer-readable instructions can be implemented on various system configurations, including single-processor or multiprocessor systems, minicomputers, mainframe computers, personal computers, hand-held computing devices, microprocessor-based, programmable consumer electronics, combinations thereof, and the like.","Thus, it should be appreciated that the logical operations described herein are implemented (1) as a sequence of computer implemented acts or program modules running on a computing system and\/or (2) as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly, the logical operations described herein are referred to variously as states, operations, structural devices, acts, or modules. These operations, structural devices, acts, and modules may be implemented in software, in firmware, in special purpose digital logic, and any combination thereof.","For purposes of illustrating and describing the concepts of the present disclosure, the methods disclosed herein are described as being performed by the computing device . In particular, the methods are described as being performed by the computing device  via execution of the application programs . As explained above, the application programs  are configured to expose the APIs  to provide the functionality described herein. It should be understood that these embodiments are illustrative, and should not be viewed as being limiting in any way.","The method  begins at operation , wherein the computing device  initializes an extension object. The extension object is configured to enable developers to implement an initialize delegate. In some embodiments, the initialize delegate is defined in a JAVASCRIPT file and gives access to an Context object. Via the Context object, developers and\/or extensions  can access an object model of the application programs .","From operation , the method  proceeds to operation , wherein the computing device  accesses a file  being interacted with by the application programs . As explained above, the file  can include any type of document including, but not limited to, word processing documents, spreadsheet documents, databases, presentation documents, email inboxes, messages, folders, and\/or other data, calendar objects and\/or events, notes, journal entries, contacts, combinations thereof, and the like. The file  can be any document being created, used, consumed, saved, modified, or otherwise being interacted with using the application programs .","In some embodiments, developers gain access to the contents of the file  using the Document object on the Context object accessed in operation . In one contemplated embodiment, the functionality disclosed in operations - can be obtained via execution of a block of JAVASCRIPT code. One example of code for providing this functionality is shown below in Table 1. It should be understood that this embodiment is illustrative, and should not be construed as being limiting in any way.",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<script type=\u201ctext\/javascript\u201d src=\u201cMicrosoftAjax.js\u201d><\/script>"},{"entry":"<script type=\u201ctext\/javascript\u201d src=\u201cOffice.js\u201d><\/script>"},{"entry":"<script type=\u201ctext\/javascript\u201d>"},{"entry":"var _OM;"},{"entry":"Office.initialize = function (reason) {"},{"entry":"\u2003\/\/ Initalize the instance variable for the OM."},{"entry":"\u2003_OM = Office.context.document;"},{"entry":"} <\/script>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"From operation , the method  proceeds to operation , wherein the computing device  determines if a reason parameter is specified. According to various embodiments, the Initialize delegate receives the reason for the initialization. In particular, some embodiments of the initialize function include a reason parameter that specifies a reason for initializing the extension . In some embodiments, for example, the extension  can be initialized because a user has inserted the extension  into a file  from a client ribbon or other menu. In other embodiments, the extension  can be initialized because a document or other file  opened by the application program  includes the extension . The developer can create reason-specific logic to be executed based upon a reason for which the extension  is initialized. In some embodiments, another initialization type is supported in which an extension  is contextually activated. In this embodiment, an extension  can be activated when certain document properties or other contextual properties exist. It should be understood that this embodiment is illustrative, and should not be construed as being limiting in any way.","If the computing device  determines, in operation , that a reason parameter is specified, the method  proceeds to operation , wherein the computing device  implements reason-specific logic based upon the reason parameter. In some embodiments, the reason-specific logic includes a first type of functionality when the extension  is first inserted into the file  and a second type of functionality when the extension  is activated. It should be understood that this embodiment is illustrative, and should not be construed as being limiting in any way. From operation , or from operation  if the computing device  determines that a reason parameter is not specified, the method  proceeds to operation . The method  ends at operation .","Although not described above in detail, the APIs  can include an extension class that includes an initialize event, an Context object that includes properties for getting an application (application {get}:Application), a document (document{get}:Document), a document container (documentContainer{get}:DocumentContainer), and settings (settings{get}:Settings). The APIs  also can include an Initialize delegate (context:Initialize) for specifying context of the initialized extension. As mentioned above, the Reason parameter can specify at least if the extension  is initialized by being inserted into the file  (inserted) or because the extension was already on the file when the document was opened, among other aspects of the context in which the extension  is used or initialized. It should be understood that these embodiments are illustrative, and should not be construed as being limiting in any way.","According to some implementations, a document object returned by the Document property behaves differently for content, compared to taskpane extensions. In particular, for content extensions the document object is never null and never changes for a given run-time instance of the extension . For taskpane extensions, the document object can be null if the host application program  has no file  open. A particular taskpane extension can only have affinity to one file  at a time. The taskpane extension lifetime can be bound to a lifetime of an application window associated with an application program . Thus, when a file  is closed, the taskpane extension can remain active if the application window remains open.","Via the initialization function, developers also can access an application object that represents an application program  in use at a given time. For example, the application object can provide name and version properties, which can be used by developers to identify the application program  that is hosting the extension . In one contemplated embodiment, the application object includes an abstract class that includes properties for locale data (ldisplayLanguage{get}:string), locale UI (contentLanguage{get}:string), mode (mode{get}:ApplicationMode), name (name{get}:string), and version (version{get}:string). The ApplicationMode can include, among others, WebEditor, WebViewer, and Client. It should be understood that this embodiment is illustrative, and should not be construed as being limiting in any way.","As explained above, the document object can enable developers to access contents of a document or other file . In one implementation, developers can access the document contents using a selection-based access mode or a binding-based access mode. The selection-based and binding-based access modes are illustrated and described below, respectively, with reference to . As mentioned above with reference to , the APIs  also support consistent data access across the application programs  by enabling consistent data types and by coercing data into one of the recognized data types.","According to one implementation, the APIs  support a text data type, a matrix data type, and a table data type, among others. In a binding-based data access approach, contents of the file  can be exposed through data types that are common across the application programs . The text data type can include a string representation of the data in the binding. According to various implementations, the text type is simply a string type in JAVASCRIPT. Furthermore, the format of the text can be specified as a parameter (ValueFormat) in the GET* and SET* operations. Contemplated data formats include, but are not limited to, plain text, formatted text HTML, and XML such as, for example, Office Open XML. The matrix data type can be used to provide data in a selection or binding in a tabular format. In one embodiment, the matrix data type is provided by a native jagged JAVASCRIPT Array, though this is not necessarily the case. The table data type can be used to provide data in the selection or binding as a table object. The table object can expose the data through the Headers property (headers{get}:Array) and\/or a Rows property (rows{get}:Array), if desired. It should be understood that these embodiments are illustrative, and should not be construed as being limiting in any way.","\u201cData coercion,\u201d as used herein, refers to reshaping or coercing data into a supported or recognized data type. For example, if a paragraph of a word processing document is selected, the APIs  support reading the selected data as plain text, as HTML text, Office Open XML, or as a table. Thus, the APIs  can be configured to transform data and\/or convert data from or into one of the recognized data types for other operations.","Turning now to , a method  for performing operations using a selection-based access approach enabled by a cross-platform API is illustrated, according to an illustrative embodiment. The method  begins at operation , wherein the computing device  determines if a selection within the application programs  is detected. If the computing device  determines, in operation , that a selection within the document is detected, the method  proceeds to operation , wherein the computing device  reads or writes to the detected selection. One example of code for reading a selection is shown below in Table 2. Two examples of code for writing to a selection are shown below in Tables 3 and 4, for writing a text string and an array, respectively. It should be understood that these embodiments are illustrative, and should not be construed as being limiting in any way.",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var _OM;"]},{"entry":[{},"var _coerceType = \u201ctext\u201d;"]},{"entry":[{},"\u2003\/\/ Initalize the instance variable for the OM."]},{"entry":[{},"Office.initialize = function (reason) {"]},{"entry":[{},"\u2003_OM = Office.context.document;"]},{"entry":[{},"}"]},{"entry":[{},"function alertSelection( ) {"]},{"entry":[{},"\u2003_OM.getSelectedDataAsync("]},{"entry":[{},"\u2003\u2003_coerceType, {\u2003\u2003\u2003\/\/ coercionType"]},{"entry":[{},"\u2003\u2003valueFormat : \u2018unformatted\u2019,\u2003\u2003\/\/ valueFormat"]},{"entry":[{},"\u2003\u2003filterType:\u2018all\u2019 }\u2003\u2003\u2003\/\/ filterType"]},{"entry":[{},"\u2003\u2003function(asyncResult) {\u2003\u2003\u2003\/\/ callback"]},{"entry":[{},"alert((asyncResult.value));"]},{"entry":[{},"\u2003\u2003},"]},{"entry":[{},"\u2003\u2003\u2003);"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var _OM;"]},{"entry":[{},"var _coerceType = \u201ctext\u201d;"]},{"entry":[{},"\u2003\/\/ Initalize the instance variable for the OM."]},{"entry":[{},"Office.initialize = function (reason) {"]},{"entry":[{},"\u2003_OM = Office.context.document;"]},{"entry":[{},"}"]},{"entry":[{},"function setSelection(str) {"]},{"entry":[{},"\u2003_OM.setSelectedDataAsync("]},{"entry":[{},"\u2003\u2003str,\u2003\u2003\u2003\/\/ data"]},{"entry":[{},"function(asyncResult) {\u2003\u2003\/\/ callback"]},{"entry":[{},"\u2003\u2003\u2003\u2003if(asyncResult.status( ) == \u201cfailed\u201d)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003alert(asyncResult.status);"]},{"entry":[{},"\u2003\u2003},"]},{"entry":[{},"\u2003\u2003\u2003);"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function setSelectionArray( ) {"]},{"entry":[{},"\u2003var myArray = [ [\u201cone\u201d, \u201ctwo\u201d, \u201cthree\u201d], [\u201cfour\u201d, \u201cfive\u201d,"]},{"entry":[{},"\u201csix\u201d],"]},{"entry":[{},"\u2003\u2003[\u201cseven\u201d, \u201ceight\u201d, \u201cnine\u201d] ]"]},{"entry":[{},"\u2003_OM.setSelectedDataAsync("]},{"entry":[{},"\u2003\u2003myArray,\u2003\u2003\/\/ data"]},{"entry":[{},"\u2003\u2003function(asyncResult) {\u2003\u2003\/\/ callback"]},{"entry":[{},"\u2003\u2003\u2003\u2003if(asyncResult.status == \u201cfailed\u201d)"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003alert(asyncResult.status);"]},{"entry":[{},"\u2003\u2003},"]},{"entry":[{},"\u2003\u2003\u2003);"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"From operation , the method  proceeds to operation , wherein the computing device  determines if the selection detected in operation  has changed. If the computing device  determines, in operation  that the selection has changed, the method  can return to operation . If the computing device determines, in operation , that a selection is not detected, the method  proceeds to operation . In operation , the computing device  can insert data at an insertion point in the file . From operations  or , the method  proceeds to operation . The method  ends at operation .","Turning now to , a method  for performing operations using a binding-based access approach enabled by a cross-platform API is illustrated, according to an illustrative embodiment. A binding-based access approach as disclosed herein enables extensions  to consistently access a particular section  of a file  through use of an identifier. The method  begins at operation , wherein the computing device  sets bindings for a section or portion of the document. According to various embodiments, the extension  establishes or sets bindings for a section  of a file  by calling the APIs  to associate a selected portion of the file  with a unique identifier. Any unique identifier can be used for associating sections  of a file with a binding.","The established or set binding can be used to access data in the associated section  of the file , also referred to herein as a \u201cbinding.\u201d The concept of bindings disclosed herein also enables developers to subscribe to data and selection change events associated with a particular section  of the file . As such, an extension  can be informed if changes occur in a file  in the bound section , as opposed to only recognizing changes made to an entire file .","According to various embodiments, the document object exposes a Bindings object (bindings{get}:Bindings) that gives access to a collection of bindings associated with a file . The developer can create new bindings and\/or remove existing bindings. In some implementations, the APIs  support at least three types of bindings that can be determined by a type property (type{get}:BindingType). The types of bindings can include, but are not necessarily limited to, a matrix binding type, a text binding type, and a table binding type.","The matrix binding type enables binding to a section  of a file  that includes tabular data without headers. For example, in MS EXCEL or a table in any other application of the MS Office Software Suite, any contiguous selection of cells can be used to establish a matrix binding. It should be understood that this embodiment is illustrative, and should not be construed as being limiting in any way. The table binding type enables binding a section  of a file  that contains a table with headers. For example, any table within an MS EXCEL spreadsheet or an MS WORD document can be the basis of a table binding. A text binding enables binding to a section  of a file  that can be represented as text. For example, in MS WORD, most contiguous selections of text can be the basis of a text binding. In MS EXCEL, a single cell selection can be the basis of a text binding. It should be understood that these embodiments are illustrative, and should not be construed as being limiting in any way.","One example of code for creating a binding for a selection is provided below in Table 5. It should be understood that this embodiment is illustrative, and should not be construed as being limiting in any way.",{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var _OM;"]},{"entry":[{},"var _bindingType = \u2018text\u2019;"]},{"entry":[{},"\u2003\/\/ Initalize the instance variable for the OM."]},{"entry":[{},"Office.initialize = function (reason) {"]},{"entry":[{},"\u2003_OM = context.document;"]},{"entry":[{},"}"]},{"entry":[{},"function bindSelection(id) {"]},{"entry":[{},"\u2003_OM.bindings.addFromSelectionAsync("]},{"entry":[{},"\u2003\u2003_bindingType,\u2003\u2003\/\/ bindingType"]},{"entry":[{},"\u2003\u2003{id:\u2018id\u2019},\u2003\u2003\/\/ id (optional)"]},{"entry":[{},"\u2003\u2003function(asyncResult) {\u2003\u2003\/\/ callback"]},{"entry":[{},"\u2003\u2003\u2003alert(asyncResult.status); },"]},{"entry":[{},"\u2003\u2003);"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"From operation , the method  proceeds to operation , wherein the computing device  reads or writes to the bound section , for example, a binding set in operation  as being associated with a particular section . In some embodiments, data within a current selection within a file  can be written to a bound section . The data within the bound section  also can be written to a current selection in the file , if desired. One example of code for writing to a bound section from a current selection is provided below in Table 6. The Office.select( ) object enables developers to reference bindings in an easy manner. It should be understood that these embodiments are illustrative, and should not be construed as being limiting in any way.",{"@attributes":{"id":"p-0067","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Office.select(\u201cbindings#id\u201d).setDataAsync(myData,"]},{"entry":[{},"function(result) {"]},{"entry":[{},"\u2003window.alert(result.status)"]},{"entry":[{},"});"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"From operation , the method  proceeds to operation . The method  ends at operation .","Although not explicitly shown above in , some embodiments of the APIs  are configured to support specifying a binding via selection of content using a user interface. For example, users can select, via a user interface, a portion of content such as a section  of a file , a table, a string of text, or the like. The user also can specify the selection made via the user interface as a binding for use by the extension . Thus, it should be understood that bindings as disclosed herein can be explicitly created by users via user interfaces or via other functionality, if desired.","Turning now to , a method  for persisting settings enabled by a cross-platform API is illustrated, according to an illustrative embodiment. According to various embodiments, the concepts and technologies disclosed herein enable developers to persist document-level settings for extensions . A settings object can be loaded as part of the Context object discussed above with reference to . As such, the settings object can be available when an extension  is activated. A developer can access the settings object using the Settings object within the Context object. The Settings object can include a get method (get(string settingName):object), a remove setting method (remove(string settingName):void), an asynchronous save settings method (saveAsync(AsyncCallback callback, bool overwriteIfStale):void), and a set settings method (set(object setting, object value):void). The settings object also can include a delegate for recognizing changed settings (settingsChanged:SettingsChangeHandler). Recognizing changed settings can be particularly useful in co-authoring scenarios where two users or developers may be modifying a document at a particular time. While an asynchronous save settings method is described above, it should be understood that the APIs  also can support synchronous operations, if desired.","The method  begins at operation , wherein the computing device  initializes the extension object. The functionality of operation  can be, but is not necessarily, substantially similar to the functionality of operation . From operation , the method  proceeds to operation , wherein the computing device  accesses settings associated with the extension . One example of code for accessing settings of an extension  is set forth below in Table 7. It should be understood that this embodiment is illustrative, and should not be construed as being limiting in any way.",{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<script type=\u201ctext\/javascript\u201d src=\u201cMicrosoftAjax.js\u201d><\/script>"},{"entry":"<script type=\u201ctext\/javascript\u201d src=\u201cOffice.js\u201d><\/script>"},{"entry":"<script type=\u201ctext\/javascript\u201d>"},{"entry":"var _OM;"},{"entry":"var _settings;"},{"entry":"Office.initialize = function (reason) {"},{"entry":"\u2003\/\/ Initalize the instance variable for the OM."},{"entry":"\u2003_OM = context.document;"},{"entry":"\u2003\/\/ Initalize the instance variable for the Settings object."},{"entry":"\u2003_settings = context.settings;"},{"entry":"}"},{"entry":"<\/script>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"While the above description has discussed various embodiments of the APIs  that can be used to effectively abstract away changes between various application programs , it should be understood that this functionality can be used to compliment dedicated APIs and\/or object models associated with the various application programs . In particular, some embodiments of the concepts and technologies disclosed herein allow use of dedicated APIs associated with the various application programs  in addition to, or instead of, interacting with the application programs  via the APIs  that support cross-platform operations as disclosed herein.","While the above description has discussed selections and bindings within the files  as referring to a selection within a particular instance of the application programs , it should be understood that the APIs  also can support multiple users and multiple interactions. As such, a current selection or a binding can be defined based upon a number of users and\/or a number of instances of the application programs . In one contemplated embodiment, the APIs  support operations on a portion of a co-authored document, wherein the portion corresponds to a part of a file  that a largest number of co-authors are currently working. It should be understood that this embodiment is illustrative, and should not be construed as being limiting in any way.","It can be appreciated from the above description, that embodiments of the APIs  can enable a consistent programming model for extending and customizing a range of software program types using a single set of APIs . As such, various application programs  having different and\/or specialized functionality can be interacted with, accessed, and\/or controlled using a single set of APIs . Such embodiments contract with traditional APIs for such application programs , for example, varied APIs and\/or different object models that traditionally are used to access, interact with, and\/or control varied software programs. Thus, various embodiments of the APIs  disclosed herein provide common data types and support bindings to abstract differences and allow extensions for various application programs  using a single code base.","The APIs  also can be designed to support efficient and symmetric execution across various computing environments and\/or platforms, including, but not limited to, platforms having different run-time characteristics such as stand-alone PC applications, client-server applications, mobile applications, other applications, and the like. The APIs  can use asynchronous execution patters to allow for non-intrusive programmability that can impose minimal impact to the normal execution of the software program being extended.","The APIs  also are configured to be resilient and\/or resistant to changes made to the underlying software program. Thus, extensions and\/or other add-ons may continue functioning across various versions of the application programs  without requiring re-coding and the like. In some embodiments, this feature is enabled by not directly exposing functionality and implementation of the software programs. Thus, the APIs  allow for software programs to be versioned or improved without requiring the APIs  to be changed or adapted for each modification.","The APIs  also can be configured such that only portions needed for a particular software program are loaded into memory and\/or over the network . Thus, various embodiments of the APIs  can ensure that computing and network resources can be efficiently and effectively used. This resource management capability of the APIs  can be transparent to the developer. Additionally, as mentioned above, the APIs  can include generic functionality for controlling multiple application programs  and specific functionality for controlling a particular application program . Thus, developers can be given the flexibility to choose between generic codebases and specialized codebases.","The APIs  also can include and\/or support interactions with a user profile API. The user profile API can allow access to various information that can be used, alone or in conjunction with the APIs  disclosed herein to enable functionality across the application programs . The user profile API can allow access to user information such as, for example, an email address associated with a user interacting with the program; a display name and\/or real name of the user; a time zone within which the user is working; a unique identifier associated with the user and\/or machine used to work with the program; a network or physical location (GPS location, IP address, etc.) associated with the user or machine used to access the program; a language and\/or culture associated with the user or machine; authentication information such as a unique identifier, password, userID, token, or other information; and\/or other information associated with the user or machine used to access the program. Because the APIs  can access these and other APIs, extensions  that make use of detailed user information and\/or other information accessible via various APIs can be used to develop cross-platform extensions . It should be understood that this embodiment is illustrative, and should not be construed as being limiting in any way.","In another embodiment, the APIs  include an entity-recognition API for checking a binding or selection for a recognized entity. The entity can include a business, a user, an address, a telephone number, or other data that can be recognized as being associated with, or being, an entity. This entity-recognition API can also be accessed by an extension  to create cross-platform extensions  that recognize entities within bindings or other sections or portions of information. It should be understood that this embodiment is illustrative, and should not be construed as being limiting in any way.","In yet another contemplated embodiment, the APIs  can include an information-sharing API. The information-sharing API can be exposed for indicating if a user, application, or API enables or allows access to partner or entity information sharing features. Partner or entity information sharing features can allow applications and\/or users to access various types of information associated with entities if authorized by users, applications, or other entities. These and other functionality associated with the information-sharing API can be selectively enabled or disabled by users to address perceived privacy concerns. It should be understood that this embodiment is illustrative, and should not be construed as being limiting in any way.","By way of example, an extension  can be configured to access the entity-recognition API and the information-sharing API to search a binding to determine if any entities are recognized. If an entity such as a person, company, or other entity is recognized, the extension  can use the information-sharing API to determine if the application within which the binding is located, or a user associated therewith, authorizes information-sharing features. If so, the extension  can access additional information associated with the recognized entity. It should be appreciated that in the above example, the user profile API also can be accessed to determine if a user profile allows the sharing of information as provided in the example above. It should be understood that this example is illustrative, and should not be construed as being limiting in any way.","As explained above, the APIs  described herein also can interact with application-specific APIs to support and\/or enable extensions  that the cross-platform features described herein and\/or make use of application-specific functionality. By using a combination of cross-platform and application-specific APIs, powerful applications and\/or extensions  can be crafted. In one contemplated embodiment, the APIs  can be used in conjunction with an application-specific API exposed by a member of the MICROSOFT OUTLOOK family of products from Microsoft Corporation in Redmond, Wash. Because many other contemplated application-specific APIs are contemplated with regard to many different applications including, but not limited to, the application programs , it should be understood that this embodiment is illustrative, and should not be construed as being limiting in any way.","In one example, the member of the MICROSOFT OUTLOOK family of products exposes an OUTLOOK object API that allows access to information and\/or content associated with OUTLOOK objects such as information associated with a mail item, information associated with events or appointments, information associated with contacts, information associated with tasks, and the like. In one example, mail item information including, but not limited to, information from message headers or contents such as the TO, FROM, and SUBJECT lines, as well as message contents, signatures, or certificates can be accessed via the OUTLOOK object API. It should be understood that this example is illustrative and should not be construed as being limiting in any way.","In another example of an application-specific API, a member of the MICROSOFT EXCEL family of products can expose an EXCEL object API that allows access to information and\/or content associated with EXCEL objects. The EXCEL objects can include, for example, one or more, or a range of, cells within a workbook or spreadsheet; a spreadsheet; a graph or other representation; a pivot table within a spreadsheet or workbook; other objects; combinations thereof; or the like. It should be understood that this embodiment is illustrative, and should not be construed as being limiting in any way.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 6","FIG. 6"],"b":["600","600","600"]},"The computer architecture  illustrated in  includes a central processing unit  (\u201cCPU\u201d), a system memory , including a random access memory  (\u201cRAM\u201d) and a read-only memory (\u201cROM\u201d) , and a system bus  that couples the memory  to the CPU . A basic input\/output system containing the basic routines that help to transfer information between elements within the computer architecture , such as during startup, is stored in the ROM . The computer architecture  further includes a mass storage device  for storing the operating system  and the application programs . Although not shown in , the mass storage device  also can be configured to store the extension , if desired.","The mass storage device  is connected to the CPU  through a mass storage controller (not shown) connected to the bus . The mass storage device  and its associated computer-readable media provide non-volatile storage for the computer architecture . Although the description of computer-readable media contained herein refers to a mass storage device, such as a hard disk or CD-ROM drive, it should be appreciated by those skilled in the art that computer-readable media can be any available computer storage media or communication media that can be accessed by the computer architecture .","Communication media includes computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics changed or set in a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer-readable media.","By way of example, and not limitation, computer storage media may include volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. For example, computer media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid state memory technology, CD-ROM, digital versatile disks (\u201cDVD\u201d), HD-DVD, BLU-RAY, or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer architecture . For purposes the claims, the phrase \u201ccomputer storage medium\u201d and variations thereof, does not include waves, signals, and\/or other transitory and\/or intangible communication media, per se.","According to various embodiments, the computer architecture  may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer architecture  may connect to the network  through a network interface unit  connected to the bus . It should be appreciated that the network interface unit  also may be utilized to connect to other types of networks and remote computer systems. The computer architecture  also may include an input\/output controller  for receiving and processing input from a number of other devices, including a keyboard, mouse, or electronic stylus (not shown in ). Similarly, the input\/output controller  may provide output to a display screen, a printer, or other type of output device (also not shown in ).","It should be appreciated that the software components described herein may, when loaded into the CPU  and executed, transform the CPU  and the overall computer architecture  from a general-purpose computing system into a special-purpose computing system customized to facilitate the functionality presented herein. The CPU  may be constructed from any number of transistors or other discrete circuit elements, which may individually or collectively assume any number of states. More specifically, the CPU  may operate as a finite-state machine, in response to executable instructions contained within the software modules disclosed herein. These computer-executable instructions may transform the CPU  by specifying how the CPU  transitions between states, thereby transforming the transistors or other discrete hardware elements constituting the CPU .","Encoding the software modules presented herein also may transform the physical structure of the computer-readable media presented herein. The specific transformation of physical structure may depend on various factors, in different implementations of this description. Examples of such factors may include, but are not limited to, the technology used to implement the computer-readable media, whether the computer-readable media is characterized as primary or secondary storage, and the like. For example, if the computer-readable media is implemented as semiconductor-based memory, the software disclosed herein may be encoded on the computer-readable media by transforming the physical state of the semiconductor memory. For example, the software may transform the state of transistors, capacitors, or other discrete circuit elements constituting the semiconductor memory. The software also may transform the physical state of such components in order to store data thereupon.","As another example, the computer-readable media disclosed herein may be implemented using magnetic or optical technology. In such implementations, the software presented herein may transform the physical state of magnetic or optical media, when the software is encoded therein. These transformations may include altering the magnetic characteristics of particular locations within given magnetic media. These transformations also may include altering the physical features or characteristics of particular locations within given optical media, to change the optical characteristics of those locations. Other transformations of physical media are possible without departing from the scope and spirit of the present description, with the foregoing examples provided only to facilitate this discussion.","In light of the above, it should be appreciated that many types of physical transformations take place in the computer architecture  in order to store and execute the software components presented herein. It also should be appreciated that the computer architecture  may include other types of computing devices, including hand-held computers, embedded computer systems, personal digital assistants, and other types of computing devices known to those skilled in the art. It is also contemplated that the computer architecture  may not include all of the components shown in , may include other components that are not explicitly shown in , or may utilize an architecture completely different than that shown in .","Based on the foregoing, it should be appreciated that technologies for cross-platform application programming interfaces for applications have been disclosed herein. Although the subject matter presented herein has been described in language specific to computer structural features, methodological and transformative acts, specific computing machinery, and computer readable media, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features, acts, or media described herein. Rather, the specific features, acts and mediums are disclosed as example forms of implementing the claims.","The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described, and without departing from the true spirit and scope of the present invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
