---
title: Method and system providing document semantic validation and reporting of schema violations
abstract: A method includes receiving a request from a requestor to validate a data assemblage expressed in Javascript Object Notation (JSON); translating the data assemblage expressed in JSON into an extensible markup language (XML) instance; validating the XML instance using syntactic schema and semantic schema specifications; and sending a response to the requestor. For a case where the data assemblage contains invalid data in at least one field the response includes an output array containing information for specifying valid data for the at least one field and a message explaining a reason why the field is invalid. A system for performing the method is also described, as is a computer program product that can be used to execute the method.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08515999&OS=08515999&RS=08515999
owner: International Business Machines Corporation
number: 08515999
owner_city: Armonk
owner_country: US
publication_date: 20110929
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The exemplary embodiments of this invention relate generally to methods, systems and computer program products configured for providing semantic validation of data, such as Javascript Object Notation (JSON) documents, objects and arrays, and for reporting schema violations.","JSON is an open, text-based data exchange format. Reference can be made, for example, to RFC 4627. \u201cThe application\/json Media Type for Javascript Object Notation (JSON), D. Crockford, JSON.org, July 2006.","JSON is a lightweight data-interchange format. JSON is easy for humans to read and write and for machines to parse and generate. It is based on a subset of the JavaScript Programming Language, Standard ECMA-262 3rd Edition\u2014December 1999. JSON is a text format that is completely language independent but uses conventions that are familiar to programmers of the C-family of languages, including C, C++, C#, Java, JavaScript, Perl, Python, and many others. These properties make JSON an attractive data-interchange language.","JSON is built on two structures:","(A) A collection of name\/value pairs. In various languages, this is realized as an object, record, struct, dictionary, hash table, keyed list, or associative array.","(B) An ordered list of values. In most languages, this is realized as an array, vector, list, or sequence.","These are universal data structures that are supported by many modern programming languages.","The Schematron (Schematron.com) differs from other schema languages in that it not based on grammars but instead on finding tree patterns in a parsed document. This approach is said to allow many kinds of structures to be represented which are inconvenient and difficult in grammar-based schema languages. The Schematron is said to allow the development and mixing two kinds of schemas: (a) report elements that allow diagnosing which variant of a language is being processed, and (b) assert elements that allow confirmation that a document conforms to a particular schema.","The Schematron is based on certain actions:","first, find context nodes in the document (typically an element) based on XPath path criteria; and then, check to determine if some other XPath expressions are true, for each of the found context nodes.","Schematron is an example of a rule-based language that allows the specification of semantic constraints. Schematron is based on the tree pattern (XPath).","Extensible markup language (XML) schemas express shared vocabularies and enable machines to carry out human-defined rules. XML schemas provide a means for defining the structure, content and semantics of XML documents.","In a general sense an XML schema is a description of a type of XML document, typically expressed in terms of constraints on the structure and content of documents of that type, above and beyond the basic syntactical constraints imposed by XML itself. These constraints are generally expressed using some combination of grammatical rules governing the order of elements, Boolean predicates that the content must satisfy, data types governing the content of elements and attributes, and more specialized rules such as uniqueness and referential integrity constraints.","Languages have been developed specifically to express XML schemas. The Document Type Definition (DTD) language, which is native to the XML specification, is one such type of language. Two more expressive XML schema languages are XML Schema (XSD) and RELAX.","The mechanism for associating an XML document with a schema varies according to the schema language. The association may be achieved via markup within the XML document itself, or via some external means.","An XML Path Language (XPath) expression uses a path notation, similar to those used in URLs, for addressing parts of an XML document. The expression is evaluated to yield an object of the node-set, Boolean, number, or string type. For example, the expression X\/Y will return a node-set of the <Y> elements contained in the <X> elements, if such elements are declared in the source XML document.","Currently available languages for expressing XML schemas are deficient in certain respects, such as in providing an ability to employ a combination of syntactic and semantic constraints.","In one aspect thereof the exemplary embodiments provide a method to process data. The method comprises receiving a request from a requestor to validate a data assemblage expressed in Javascript Object Notation (JSON); translating the data assemblage expressed in JSON into an extensible markup language (XML) instance; validating the XML instance using syntactic schema and semantic schema specifications; and sending a response to the requestor. For a case where the data assemblage contains invalid data in at least one field the response is comprised of an output array comprising information for specifying valid data for the at least one field and a message explaining a reason why the field is invalid.","In another aspect thereof the exemplary embodiments provide a computer-readable medium that contains computer program instructions, where the execution of the computer program instructions by at least one data processor results in performance of operations that comprise receiving a request from a requestor to validate a data assemblage expressed in Javascript Object Notation (JSON); translating the data assemblage expressed in JSON into an extensible markup language (XML) instance; validating the XML instance using syntactic schema and semantic schema specifications; and sending a response to the requestor, where for a case where the data assemblage contains invalid data in at least one field the response is comprised of an output array comprising information for specifying valid data for the at least one field and a message explaining a reason why the field is invalid.","In yet another aspect thereof the exemplary embodiments provide a data processing system that comprises at least one data processor connected with at least one memory that stores computer program instructions and at least one interface connected with the at least one data processor and configured for conducting bidirectional communications via at least one network. The at least one data processor operates under control of the computer program instructions to receive a request via the interface from a requestor to validate a data assemblage expressed in Javascript Object Notation (JSON); to translate the data assemblage expressed in JSON into an extensible markup language (XML) instance; to validate the XML instance using syntactic schema and semantic schema specifications; and to send a response to the requestor via the interface. For a case where the data assemblage contains invalid data in at least one field the response is comprised of an output array comprising information for specifying valid data for the at least one field and a message explaining a reason why the field is invalid.","The embodiments of this invention provide in one aspect thereof a method for validating and reporting schema violations of JSON documents, objects, or arrays.","The embodiments of this invention enable both syntactic and semantic validation of a JSON document, object, or array with the use of schemas and a Facts XML document, and reporting of the detected violations by merging the retrieved valid data results for each invalid field.","Note that the specifics of a data assemblage that represents a JSON document, object, or array depends on the specifics of the JSON parser implementation, as well on the programming language that is used.","It is pointed out that while the embodiments of this invention will be described in the context of JSON and XML documents, the embodiments of this invention are applicable to any tree-structure-based document such as, but not limited to, HTML and any SGML-based document.","Reference is made to  for showing a high level view of a JSON validation service interface.  illustrates a request  from a Client application  to a Validation Service  implemented by at least one server. The request  is to validate a particular JSON object (validate(JSONObject)). The JSON(Object) can be referred to herein generally as a data assemblage and can comprise a JSON document, a JSON object, or a JSON array, as non-limiting examples of the form the data assemblage can take. The Validation Service  could be developed at least on part as a REST WebService implementing a Validation Service interface.","First, the Client application  sends a JSON document, for example as a JSONObject, to the Validation Service . As was noted above, the specifics of the data assemblage that represents a JSON document, object, or array depends on the specifics of the JSON parser implementation, as well on the programming language that is used. The Validation Service  translates the input JSON(Object) into an extensible markup language (XML) document and uses syntactic schema  and semantic schema  specifications in order to validate the corresponding XML document. As non-limiting examples the syntactic schema  can be specified using XSD and the semantic schema  can be specified using Schematron.","The output  of the Validation Service  is a JSONArray. The JSONArray may be null if the input JSONObject is determined to be valid. However, if any field in the JSONObject is invalid the JSONArray reports schema violations regarding each invalid field. The output  (the JSONArray) contains complete information for the legal (valid) data for each field and natural language messages explaining the reason the field is invalid.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2","b":["11","13"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 3","FIG. 1"],"b":["12","12"]},{"@attributes":{"id":"h-0009","num":"0000"},"b":["3","15"]},{"@attributes":{"id":"h-0010","num":"0000"},"b":["3","14"],"figref":"FIG. 1"},{"@attributes":{"id":"p-0035","num":"0034"},"b":["3","16","18","20","3","3","13","10","13"],"figref":["FIG. 1","FIG. 2"],"br":[{},{}]},"The semantic validation assumes that there is at least one XML document (Facts XML instance ) that contains the facts of which the rule engine C (that as mentioned can be implemented with Schematron) can use to infer if there are inter-dependencies. As an example of inter-dependencies specified in the Facts XML document  (which is tree-pattern-based), assume the example of the input JSON document illustrated in  where city values depend on state values as in the following:",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<State value=\u201dNew York\u201d>"]},{"entry":[{},"\u2002<Cities>"]},{"entry":[{},"\u2002\u2002<City>Albany<\/City>"]},{"entry":[{},"\u2002\u2002<City>Binghamton<\/City>"]},{"entry":[{},"\u2002\u2002<City>New York City<\/City>"]},{"entry":[{},"\u2002<\/Cities>"]},{"entry":[{},"<\/State>"]},{"entry":[{},"<State value=\u201dNevada\u201d>"]},{"entry":[{},"\u2002<Cities>"]},{"entry":[{},"\u2002\u2002<City>Boulder City<\/City>"]},{"entry":[{},"\u2002\u2002<City>Carson City<\/City>"]},{"entry":[{},"\u2002\u2002<City>Las Vegas<\/City>"]},{"entry":[{},"\u2002<\/Cities>"]},{"entry":[{},"<\/State>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"If a field in the JSONObject  is not valid, the valid data for that field should be retrieved. This is the content of the output of both validations: the valid data for the detected invalid field and the reason why the field is invalid. The valid data regarding the syntactic constraints are retrieved from the XSD parsing (B), however the valid data regarding the semantic constraints requires a different approach to derive.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 4","FIG. 3"],"b":["3","22","16","24","22","26","26","26","18","24","28","15"]},"As an example of the implementation using Schematron, consider following Table:","Rule: City Must be in the List of Cities of the Given State",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<sch:rule context=\u201cUserDataValidation\u201d>"},{"entry":"\u2003\u2003<sch:assert test=\u201ccount(\/ValidationData\/InputData\/User\/city)=0 or"},{"entry":"\u2003\u2003\/ValidationData\/InputData\/User\/city=\u201d or"},{"entry":"\u2003\u2003count(\/ValidationData\/Facts\/State[@value="},{"entry":"\u2003\u2003\/ValidationData\/InputData\/User\/state]\/Cities\/city=\/ValidationData\/"},{"entry":"InputData\/User\/city])=1\u201d>"},{"entry":"city#required#dependency:state#\/\/Facts\/State[@value=\u2018<sch:value-of"},{"entry":"select = \u201c\/ValidationData\/InputData\/User\/state\u201d \/>\u2019]\/Cities\/city"},{"entry":"#City not in given state list."},{"entry":"\u2003\u2003<\/sch:assert>"},{"entry":"<\/sch:rule>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Schematron cannot process)(Path expressions in the Assert messages, only during test, in this case, here:",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<sch:assert test=\u201ccount(\/ValidationData\/InputData\/User\/city)=0 or"},{"entry":"\/ValidationData\/InputData\/User\/city=\u201d or"},{"entry":"count(\/ValidationData\/Facts\/State[@value=\/ValidationData\/InputData\/"},{"entry":"User\/state]\/Cities\/city=\/ValidationData\/InputData\/User\/city])=1\u201d >"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"This means: assert that if city was specified and is a non empty value, then the specified city must be in the state's cities list. If not so, Schematron will output the following message:",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"city#required#dependency:state#\/\/Facts\/State[@value=\u2018<sch:value-of"},{"entry":"select=\u201c\/ValidationData\/InputData\/User\/state\u201d \/>\u2019]\/Cities\/city"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"# City not in given state list.","This must conform to the following:","<fieldName>*#<\u2018required\u2019 or \u2018not required\u2019>*#dependency:<field>#<XPath_expression>#<error message>","What this expression means is the following: the city field is required, depends on the state field and the)(Path expression for obtaining the valid data for the city field given the specified state.","The tags with * mean that they are always required to be specified, while the others (dependency, XPath expression and message) depend on the type of constraint.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 5","FIG. 3","FIG. 5","FIG. 1"],"b":["3","3","3","14","3","3","3","3","30","14","32","3","10"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 6","FIG. 3","FIG. 1"],"b":["100","102","104","106","106","100","102","104","106","100","108","10","108","110"]},"Note that in some embodiments the workflow depicted in  may be contained in whole or in part in the system that hosts the client application  and, as such, the interface  may be an internal interface such as a local data bus for example.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 7","FIG. 6"],"b":["106","70","72","74","76"]},"As should be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method, computer program product or as a combination of these. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit\u201d, \u201cmodule\u201d or \u201csystem\u201d. Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible, non-transitory medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the computer, partly on the computer, as a stand-alone software package, partly on the computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","As such, various modifications and adaptations may become apparent to those skilled in the relevant arts in view of the foregoing description, when read in conjunction with the accompanying drawings and the appended claims. As but some examples, the use of other similar or equivalent mathematical expressions may be used by those skilled in the art. However, all such and similar modifications of the teachings of this invention will still fall within the scope of this invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 5","FIG. 3","FIG. 3"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 6","FIG. 3"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 7","FIG. 6"]}]},"DETDESC":[{},{}]}
