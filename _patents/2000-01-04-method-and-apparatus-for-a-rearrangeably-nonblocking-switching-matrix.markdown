---
title: Method and apparatus for a rearrangeably non-blocking switching matrix
abstract: A switching apparatus is disclosed that employs a relatively simple and inexpensive switching matrix, but which avoids interruption of existing connections when connections are added or removed. The switching matrix switches errorlessly by controlling the point in time at which switching occurs. Using such a technique, switching can be performed without disturbing the connections already configured in the switching matrix, and so is referred to herein as being non-blocking. Optionally, the incoming data can be rearranged to provide a larger window of time in which the switching matrix can be switched. In the case of a switch using an optical backplane, this also allows more time for various components of the system (e.g., clock/data recovery units) to re-acquire lock. The switching apparatus includes a switching matrix and control circuitry. The switching matrix has a matrix input, a control input and a number of matrix outputs, and is configured to receive an information stream at the matrix input. The information stream includes a number of portions, while the control circuitry has a control output coupled to the control input. The control circuitry is configured to initially configure the switching matrix to output the information stream at a one of the matrix outputs and to subsequently configure the switching matrix to output the information stream at another of the matrix outputs during a period of time during which the one of the portions is transiting the switching matrix.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06982974&OS=06982974&RS=06982974
owner: Cisco Technology, Inc.
number: 06982974
owner_city: San Jose
owner_country: US
publication_date: 20000104
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Introduction","An Exemplary Network Element","Hardware Architecture","Physical Configurations and Modules","Software Architecture"],"p":["This application is a continuation-in-part of patent Application Ser. No. 09\/232,395, filed Jan. 15, 1999, and entitled \u201cA CONFIGURABLE NETWORK ROUTER,\u201d having H. M. Zadikian, A. N. Saleh, J. C. Adler, Z. Baghdasarian, and V. Parsi as inventors. This application is hereby incorporated by reference, in its entirety and for all purposes.","This application is related to patent application Ser. No. 09\/232,397, filed Jan. 15, 1999, and entitled \u201cA METHOD FOR ROUTING INFORMATION OVER A NETWORK,\u201d having A. N. Saleh, H. M. Zadikian, Z. Baghdasarian, and V. Parsi as inventors; patent application Ser. No. 09\/232,396, filed Jan. 15, 1999 and entitled \u201cMETHOD OF ALLOCATING BANDWIDTH IN AN OPTICAL NETWORK,\u201d having H. M. Zadikian, A. Saleh, J. C. Adler, Z. Baghdasarian, and V. Parsi as inventors; patent application Ser. No. 60\/174,323, filed herewith, and entitled \u201cA RESOURCE MANAGEMENT PROTOCOL FOR A CONFIGURABLE NETWORK ROUTER\u201d having H. M. Zadikian, A. Saleh, J. C. Adler, Z. Baghdasarian and Vahid Parsi as inventors; patent application Ser. No. 09\/477,217, filed herewith, and entitled \u201cFAULT ISOLATION IN A SWITCHING MATRIX,\u201d having R. A. Russell and M. K. Anthony as inventors; patent application Ser. No. 09\/389,302, filed September 2, 1999, and entitled \u201cNETWORK ADDRESSING SCHEME FOR REDUCING PROTOCOL OVERHEAD IN AN OPTICAL NETWORK,\u201d having A. Saleh and S. E. Plote as inventors; patent application Ser. No. 09,478,235, filed herewith, and entitled \u201cA METHOD FOR PATH SELECTION IN A NETWORK,\u201d having A. Saleh as inventor; patent application Ser. No. 09,477,498, filed herewith, and entitled \u201cMETHOD OF PROVIDING NETWORK SERVICES,\u201d having H. M. Zadikian, S. E. Plote, J. C. Adler, D. P. Autry, and A. Saleh as inventors. These related applications are hereby incorporated by reference, in their entirety and for all purposes.","1. Field of the Invention","This invention relates to the field of information networks, and more particularly relates to switching matrices used in routing information through such information networks.","2. Description of the Related Art","Today's networks carry vast amounts of information. High bandwidth applications supported by these networks include streaming video, streaming audio, and large aggregations of voice traffic. In the future, these bandwidth demands are certain to increase. This information must be quickly and efficiently distributed to various destinations without the introduction of errors. Many modern networking topologies employ a switching matrix of some kind to perform this function.","For example, certain networks employ a point-to-point topology in which each node is coupled to another node by one or more connections. The easiest way to interconnect a group of N nodes is by using an N\u00d7N crossbar switch. One advantage is that such a scheme is strictly non-blocking. This means that a connection can be made between any unused input and any unused output, regardless of the current state of the switch. Thus, the switch can be reconfigured at any time without disturbing pre-existing connections. This is an important capability in many applications, such as data networks (e.g., errors causing retransmission of the damaged data and so reducing available bandwidth) and telephony networks (e.g., dropped telephone calls). However, a problem with N\u00d7N crossbar switches is that such a switch grows exponentially as connections are added, meaning that Nswitches are required to build a network having N inputs and N outputs.","Many attempts have been made, some as early as the early 1900's, to reduce the cost of such interconnection networks. It was realized that by using two or more stages of smaller switching elements, or nodes, a less expensive solution could be achieved. Those attempts resulted in a number of multi-stage interconnection network (MIN) architectures. MIN architectures can generally be divided into three classes: blocking, rearrangeably non-blocking, and strictly non-blocking. These MIN architectures are still widely used today.","The first class of multi-stage interconnection networks is the blocking network. This class of networks, which includes Banyan networks, Omega networks, n-Cube networks, and others, is characterized by the property that there is only one path from any input to any output. Because some of the paths share one or more links within the MIN, a high number of permutations cannot be routed when using such networks. Some blocking networks can be made rearrangeably non-blocking (the next class of MIN) by inserting an additional stage at the output.","The second class of MIN architectures is the rearrangeably non-blocking network. Rearrangeably non-blocking networks allow idle pairs of input and output ports to be connected after possibly rearranging some of the existing connections (i.e., reconfiguring the switching matrix). Unfortunately, information carried on some or all of the existing connections may experience errors during the switching matrix's reconfiguration. Benes and some forms of the Clos-type switching matrix are examples of rearrangeably non-blocking networks.","The third class of networks is the strictly non-blocking network. This class of networks allows any idle pair of input and output ports to be connected without having to rearrange any of the existing connections. This is true regardless of the current state of the network (i.e., input-output pairing). No errors are experienced on the existing connections during the switching matrix's reconfiguration in such a MIN.","Each class of MIN provides different advantages. The less \u201cblocking\u201d a network is, generally, the more complex that network will be because more internal connections are required to ensure that paths through the MIN are not blocked. For example, the number of cross-points required in one type of Clos MIN is 6N\u22123N, whereas a crossbar network requires Ncrosspoints. Table 1 lists the number of cross-points required for the two types of networks, for various values of N.",{"@attributes":{"id":"p-0014","num":"0013"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Number of required crosspoints for the Clos and crossbar networks."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"N","Crossbar","Clos Network","Difference"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"32","1024","990","34"]},{"entry":[{},"36","1296","1188","108"]},{"entry":[{},"64","4096","2880","1,216"]},{"entry":[{},"128","16,384","8,305","8,079"]},{"entry":[{},"256","65,536","23,808","41,728"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},"Table 1 makes the size advantages of a rearrangeably non-blocking network (e.g., a Clos-type MIN) over a strictly non-blocking network (e.g., a crossbar switch) readily apparent. It will be noted that the difference between the two networks tends to grow more quickly as N grows beyond 36.","However, in most network applications, some sort of non-blocking matrix is preferred, in order to maintain throughput. This is especially true for telephony applications (e.g., voice circuits). Once established, a voice circuit should not be interrupted until the circuit is terminated, and, in fact, interruptions longer than a few tens of milliseconds are not well-tolerated by modern telephony systems. Thus, traditional blocking or rearrangeably non-blocking networks are not appropriate for such applications, despite their greater simplicity and lower cost.","Embodiments of the present invention overcome conventional limitations by providing a switching matrix and method of operation that are relatively simple and inexpensive, but that avoid interruption of existing connections when connections are added or removed. In one embodiment, a method and apparatus according to the present invention provide a switching matrix that switches errorlessly by controlling the point in time at which switching occurs. Using such a method, switching can be performed without disturbing the connections already configured in the switching matrix, and so is referred to herein as being non-blocking. Optionally, the incoming data can be rearranged to provide a larger window of time in which the switching matrix can be switched. In the case of a switch using an optical backplane, this also allows more time for various components of the system to re-acquire lock (e.g., clock\/data recovery units).","Such a switching arrangement can be used, for example, in a network element to support relatively simple provisioning and relatively fast restoration (on the order of, for example, 50 ms), while providing relatively efficient bandwidth usage (i.e., minimizing excess bandwidth requirements for restoration, on the order of less than 100% redundant capacity and preferably less than 50% redundant capacity). Such a network element is, in one embodiment, based on an architecture that can be easily scaled to accommodate increasing bandwidth requirements.","According to one embodiment of the present invention, a method of operating a switch matrix is disclosed. The method includes configuring the switch matrix to couple a first input to a first output, receiving an information stream at the first input, and reconfiguring the switch matrix during a first time period. The information stream contains a number of portions in a sequence, with one of the portions in a position in the sequence and the first time period corresponding to that position in the sequence. The reconfiguring couples the first input to a second output.","In one aspect of the embodiment, the method also includes re-arranging certain of the portions of the information stream such that the one of the portions is in another position in the sequence. In the case where the first portion contains network protocol overhead, and the information stream is carried by a signal, a method according to the embodiment may include loading the one of the portions with a value, the value enabling the matrix to synchronize with the signal more easily.","In another aspect of the embodiment, the method also includes re-arranging certain of the portions prior to receiving those portions such that the number of the portions are in a set of contiguous positions. In this case, the first time period corresponds instead to the set of contiguous positions. It will be noted that, in this aspect, a number of the portions are in various positions in the sequence, and include the portion previously discussed. This aspect may also include re-arranging those certain portions such that the portions are returned to their original positions.","According to another embodiment of the present invention, a method of operating a switch matrix is described that includes configuring the switch matrix to couple a number of inputs to a number of outputs, receiving a number of information streams at the inputs and reconfiguring the switch matrix during the switching period.","In this embodiment, each one of the information streams includes a number of portions in a sequence and is received at a corresponding one of the inputs. For each one of the information streams, that portion is in a specific position of the sequence, and a time period during which that portion transits the switching matrix is at least minimally concurrent with the time period for each of the other portions of the information streams. The time period of minimal concurrency defines a switching period. For certain of the information streams, the re-arranging performed re-arranges certain of the portions such that the given portion is moved to another position in the sequence of the information streams in order to achieve the minimal concurrency.","According to one aspect of the embodiment, the time period of minimal concurrency is such that, for the each one of the information streams, a leading edge of the given portion has been output from a corresponding output before a trailing edge of the portion is received at a corresponding input. According to another aspect of the embodiment, for certain ones of the information streams, a number of the portions are in various positions in the sequence. In this scenario, the portions include the given portion. In this aspect, the method also includes, again for those certain information streams, re-arranging certain of the portions prior to receiving, such that the portions are in a set of contiguous positions. A group time period during which the portions transit the switching matrix is at least minimally concurrent with the group time period for each of the other information streams is defined therefor.","According to still another embodiment of the present invention, a switching apparatus is disclosed. The switching apparatus includes a switching matrix and control circuitry. The switching matrix has a matrix input, a control input and a number of matrix outputs, and is configured to receive an information stream at the matrix input. The information stream includes a number of portions, while the control circuitry has a control output coupled to the control input. The control circuitry is configured to initially configure the switching matrix to output the information stream at a one of the matrix outputs and to subsequently configure the switching matrix to output the information stream at another of the matrix outputs during a period of time during which the one of the portions is transiting the switching matrix.","According to one aspect of the embodiment of the present invention, the switching apparatus also includes an input resequencing circuit having a resequencer input and a resequencer output, and coupled to the matrix input. In this aspect, the input resequencing circuit is configured to receive the information stream at the resequencer input, to rearrange certain of the portions such that one of the portions is moved from an original position in an original sequence of the portions to another position in the original sequence in order to produce a modified sequence of the portions, and to provide the information stream to the switching matrix at the input resequencer output. This aspect can also include a first output resequencing circuit and a second output resequencing circuit. The first output resequencing circuit is coupled to the one of the matrix outputs. In this aspect, the first output resequencing circuit is configured to move the one of the portions from an original position in the modified sequence to a position in the modified sequence corresponding to the original position in the original sequence, while the second output resequencing circuit, coupled to the another of the matrix outputs, is configured to move the one of the portions from an original position in the modified sequence to a position in the modified sequence corresponding to the original position in the original sequence.","The foregoing is a summary and thus contains, by necessity, simplifications, generalizations and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below.","The following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather, any number of variations may fall within the scope of the invention which is defined in the claims following the description.","In addition, the following detailed description has been divided into sections, subsections, and so on, in order to highlight the various subsystems of the invention described herein; however, those skilled in the art will appreciate that such sections are merely for illustrative focus, and that the invention herein disclosed typically draws its support from multiple sections. Consequently, it is to be understood that the division of the detailed description into separate sections is merely done as an aid to understanding and is in no way intended to be limiting.","A switching matrix according to the present invention is relatively simple and inexpensive, yet avoids interruption of existing connections when connections are added or removed. A method and apparatus according to one embodiment of the present invention provide a switching matrix that switches errorlessly by controlling the point in time at which switching occurs. A matrix rearrangement may be required to provision a new circuit, for example, and if rearrangement is required, it is important that any live channels already carrying traffic not experience errors in the communications being carried. The requirement to avoid disruption in the data on live channels drives the need to provide errorless rearrangement support in router according to an embodiment of the present invention.","Such a switching matrix is therefore switched at a point in the data stream in which no live data is being transmitted. Using such a method, switching can be performed without disturbing the connections already configured in the switching matrix. A switching matrix operated in this manner is therefore referred to herein as being non-blocking. Optionally, the incoming data can be rearranged to provide a larger window of time during which the switching matrix can be switched. A non-blocking switching matrix according to the present invention using such a technique is referred to herein as a rearrangeably non-blocking switching matrix. In the case of a switch using an optical backplane, this also allows more time for various components of the system to re-acquire phase lock (e.g., clock\/data recovery units situated along the signal path).","This switching and relocking can be thought of in terms of a wavefront traveling through the signal path of router such as that described herein. The point at which switching and relocking may occur within the data stream is actually a given number of bit times. This \u201cwindow\u201d in the data stream travels through the router, with live data to either side, and is sequentially encountered by each element along the signal path through the router. During the time between when the beginning of the window and the end of the window is encountered by a given element, the element may switch, relock, or otherwise experience a disruption in the data stream without the disruption of the live data being carried.","To support this technique, the input\/output connections to and from the matrix are preferably maintained during a matrix rearrangement, with only paths internal to the router's switching matrix being altered. To improve signal fidelity, the switching matrix incorporates several clock\/data recovery units (CDRs) in the signal path from matrix input to matrix output. These CDRs are configured in a serial sequence through the matrix. As the window travels through the router (i.e., the serial data signal is disrupted (e.g., due to a switch change)), the CDRs re-acquire lock one at a time, in a serial fashion.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 1","b":["100","100","110","120","130","120","100","150","160","170","180"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 1B","b":["190","195","1","195","1","100","190","191","192","195","1","195","1"]},"Among other benefits, router  solves three growth-related problems often encountered in today's information networks, and particularly in SONET networks:\n\n","Router  is a multi-rack, fully redundant router that, in one embodiment, supports at least 256, 1+1 I\/O ports, and provides 1-plus-1 protection by using multiple copies (e.g., two or more) of group and main matrices operating in 1+1 mode. Failures within one copy of a given matrix do not require a complete switchover to the backup copy. Only the affected paths through the matrix are switched to the backup copy. This greatly improves switching speed and minimizes the impact of such redundancy on other connections. Preferably, the group matrix is a 2:1 reduction stage that selects output signals from one of two line cards (also referred to herein as I\/O modules, due to their functionality) and connects the selected output signals to the main matrix, thus preventing a non-working channel from consuming any ports on the main matrix.","In one embodiment, there are at least three types of processors in a router . The lowest level, level-3, resides on the line card and is responsible for all real time aspects of the processing of the physical protocol (e.g., SONET). In a SONET implementation, every level-3 processor is responsible for a single optical signal (e.g., an OC-48 signal) and, via a protocol processor, performs all required SONET\/SDH section and line termination functions. The fast response time required from the level-3 processor makes a firmware implementation preferable. The firmware, which may be written in the \u201cC\u201d or \u201cC++\u201d programming languages, assembler, or other programming language, is preferably optimized for low latency and resource efficiency. Higher-level processing is implemented on a separate module, the shelf processor module, which is shared by several line cards.","The second level of processors, level-2, reside on a shelf and main matrix processor modules. The software on the shelf processor module is responsible for managing and controlling line cards. Only half the line cards supported are active at any one time in order to support 1+1 protection. A level-2 processor deals with tasks that require a reasonable response time (for example, on the order of milliseconds), but have no direct impact on the data path. In other words, missed events, such as hardware interrupts, do not result in bit errors. Some of the functions handled by the shelf processor include the periodic collection of maintenance data from the line cards, receiving and processing periodic keep-alive messages from those cards, shelf startup and configuration, proxy management, and other related functions.","The third processor level, level-1, resides on a system processor module and provides system-wide management and control services. In one embodiment, there are preferably two fully synchronous copies of the level-1 processor in the system, both of which are simultaneously active and, through a dedicated and redundant high-speed link, keep their run-time and stored databases fully synchronized. One of the two processors is designated the master and is responsible for all level-1 processing. An update message is sent to the second processor whenever a change is made to the database and before that change is effected. A periodic keep-alive mechanism allows either copy of the system controller to detect failures on the other copy.","Router  provides yet another type of processor, referred to herein as a route processor. Such a processor is dedicated to the path\/route discovery and restoration functions. The route processor is responsible for receiving failure indications from the line cards, calculating a new route for failed connections, and sending reconfiguration requests to all affected nodes, including its own.","In one embodiment, router  is a multi-rack communications system capable of terminating at least 8192 signals and cross-connecting at least 4096 OC-48 signals. Such a router can be used, for example, as SONET\/SDH line terminating equipment (LTE) capable of terminating the Section and Line overheads of received OC-48 signals, and cross-connects those signals according to provisioned input-output mappings. Some of the terminated signals can optionally be protected using any of the common protection schemes (1+1, 1:1, and 1:N).","Overhead processing and generation is performed on the line card by a protocol processor. This protocol processor handles all aspects of the SONET protocol, including framing, insertion and extraction of embedded data channels, error checking, AIS detection, pointer processing, clock recovery, multiplexing\/duplexing, and similar duties.","Signal Path",{"@attributes":{"id":"p-0068","num":"0070"},"figref":["FIG. 2","FIG. 1A","FIG. 2"],"b":["200","100","100","210","1","212","1","214","210","1","212","1","210","1","220","1","1","1","220","1","220","1","1","212","1","216","1","214","218","130","212","1","216","1"]},"It will be noted that the variable identifier \u201cN\u201d is used in several instances in  (and subsequent use of other variables, such as \u201cm,\u201d \u201cx,\u201d \u201ck,\u201d and others) to more simply designate the final element (e.g., group matrix (N), line card (N,N), and so on) of a series of related or similar elements (e.g., group matrices ()-(N), line cards (,)-(N,N), and so on). The repeated use of such variable identifiers is not meant to imply a correlation between the sizes of such series of elements. The use of such variable identifiers does not require that each series of elements has the same number of elements as another series delimited by the same variable identifier. Rather, in each instance of use, the variable identified by \u201cN\u201d (or \u201cm,\u201d \u201cx,\u201d \u201ck,\u201d and others) may hold the same or a different value than other instances of the same variable identifier. For example, group matrix (N) may be the tenth group matrix in a series of group matrices, whereas line card (N,N) may be the forty-eighth line card in a series of line cards.","Using signal paths  as an example, data enters the system at one of line cards (,)-(N,N). It is at this point, in a SONET-based system, that the Section and Line overheads are processed and stripped off by a protocol processor (not shown). The extracted SONET\/SDH payload envelope is then synchronized with the system clock and sent to two different copies of a local matrix, depicted as group matrices ()-(N) and ()-(N) in FIG. A. In one embodiment, group matrices ()-(N) and ()-(N) are used mainly as 2:1 reduction stages that select one of two optical signals and pass the selected optical signal to switching matrix . This allows the implementation of a variety of protection schemes (including 1:N, or 0:1) without having to use any additional ports on main matrix . All protect signals are terminated at group matrices ()-(N) and ()-(N). In order to maximize bandwidth, it is preferable that only active signals be passed through to switching matrix .","In one embodiment, switching matrix  is an errorless, rearrangeably non-blocking switching network. In one embodiment, switching matrix  is a 256\u00d7256 switching network that consists of three columns and 16 rows of 16\u00d717 switching elements that allow any of their inputs to be connected to any of their outputs, with the 17th output provided to permit fault detection within switching matrix . A single copy of the matrix may be housed, for example, in a single rack that contains three shelves, one for each column (or stage) of the matrix. Each one of such shelves contains cards housing the 16 switching elements in each stage. The switching element itself includes, for example, a 16\u00d717 crosspoint switch, with optical transceivers, and a microcontroller for controlling the crosspoint switch and providing operational feedback to the level-2 processor. Communications between the two processors may be carried, for example, over an Ethernet connection. The level-2 processor in turn communicates with the level-1 and route processors.","The switching elements in each matrix copy of the exemplary embodiment may be connected using fiber-optic cables, for example. While copper cabling may also be employed, such an option may not offer the speed and number of connections provided by an optical arrangement. After passing through the stages of switching matrix , an optical signal may be routed to an I\/O shelf that (optionally) splits the optical signal into two signals. One of the signals is sent to an active line card, while the other, when available, is sent to a backup card.","Line cards (, )-(N,N) receive optical signals from group matrices ()-(N) and  ()-(N) which are in turn connected to two separate copies of the main matrix. Line cards (,)-(N,N) monitor both signals for errors and, after a user-defined integration period, switch to the backup signal if that signal exhibits better bit error rate (BER) performance than the prior active signal. This scheme, referred to herein as 1-plus-1, allows line cards (,)-(N,N) to select between the two copies of the group matrix without any level-1 or level-2 CPU intervention. This helps to ensure that such a switch can be made in 50 ms or less (per Bellcore's recommendations in GR-253 (GR-253() , Common Generic Criteria, Issue 2 [Bellcore, December 1995], included herein by reference, in its entirety and for all purposes)). The selected signal is then processed by the transmit section of the protocol processor, which inserts all required transport overhead bytes into the outgoing stream.","Regarding the signals described herein, both above and subsequently, those skilled in the art will recognize that a signal may be directly transmitted from a first logic block to a second logic block, or a signal may be modified (e.g., amplified, attenuated, delayed, latched, buffered, inverted, filtered or otherwise converted, etc.) between the logic blocks. Although the signals of the embodiments described herein are characterized as transmitted from one block to the next, other embodiments may include modified signals in place of such directly transmitted signals with the informational and\/or functional aspect of the signal being transmitted between blocks. To some extent, a signal input at a second logic block may be conceptualized as a second signal derived from a first signal output from a first logic block due to physical limitations of the circuitry involved (e.g., there will inevitably be some attenuation and delay). Therefore, as used herein, a second signal derived from a first signal includes the first signal or any modifications to the first signal, whether due to circuit limitations or due to passage through other circuit elements which do not substantively change the informational and\/or final functional aspect of the first signal.","Control Path",{"@attributes":{"id":"p-0075","num":"0077"},"figref":"FIG. 3","b":["300","100","300","2"]},"Groups","At the bottom of the hierarchy is what is referred to herein as a group matrix, or a Group Ethernet Repeater in a system using Ethernet communications, and depicted in  as group matrices ()-(N) and ()-(N). Each one of group matrices ()-(N) and ()-(N), also referred to herein as a hub, a repeater, or concentrator, is a physical layer device and preferably supports a star network topology, such as the IEEE 802.3 10 BASE-T networking standard. The redundant connections from line cards (,)-(NN) in each of groups ()-(N) are connected to two repeaters that reside on two separate copies of the group matrix module. Preferably, each one of line cards (,)-(N,N) supports two network ports (e.g., 10 BASE-T Ethernet ports). The two sets of four signals from each port pass through a relay that selects one of them for connection to the LAN for purposes of redundancy. Groups ()-(N) represent the first layer of the control bus hierarchy. Group matrices ()-(N) and ()-(N) are each controlled by a shelf processor (not shown, for the sake of clarity) and communicate with one of the shelf switches described below via LAN connections.","Shelf Ethernet Switch",{"@attributes":{"id":"p-0079","num":"0081"},"figref":"FIG. 3","b":["100","320","1","321","1","310","1","310","1","310","1","220","1","1","212","1","216","1","220","1","1","212","1","216","1","220","1","1","212","1","216","1","212","1","216","1","320","1","321","1","2","320","1","321","1"]},"Shelf switches ()-(N) and ()-(N) are the next higher level of the control hierarchy in router , and are located on the shelf processor module (exemplified by line racks (()-(N)). Each copy of shelf switches  ()-(N) and ()-(N) interconnects six connections from the three groups in each shelf, another connection from the shelf processor, and one connection from system switch  (and ). Shelf switches ()-(N) and ()-(N) can be implemented, for example, using an 8-port Ethernet configured to handle 10 Mbps Ethernet traffic and a single-port, dual-rate switch (e.g., 10 Mbps\/100 Mbps Ethernet).","System Switch","The next level of the hierarchy is the system switch, of which there are two copies in each router. These are shown as system switches  and  in FIG. . This fully redundant scheme prevents failures on one switch from taking down the entire control bus. In one embodiment, a system switch manages connections from the following sources:\n\n","System switches  and  are located in a management bay. As noted, the fully redundant switches manage connections from various router elements, such as I\/O and matrix bays, level-1 processors, and route processors. Each of level-1 processors  and  and route processors  and  is preferably connected to system switches  and  using 100 Mbps Ethernet connections in a configuration that creates an expandable, efficient, and fully redundant control bus.","I\/O Bay","An I\/O bay can support, for example, a total of 16 slots. Slots may be logically divided into functional groups. In such an embodiment, four such functional groups are defined with three of the groups occupying five slots each. In that embodiment, the other group, which occupies a single slot can be configured to house the shelf processor. Thus, the I\/O bay can contain line cards (exemplary of line cards  (,)-(N-N)) and group matrices (exemplary of group matrices  ()-(N) and  ()(N)) which are controlled by shelf processors (not shown in FIG. ). It will be noted that the various line cards, group matrices, and shelf processors correspond to similar elements from previous figures.","Groups","A group is made up of line cards occupying a number of slots on a shelf. In one implementation, a group is 16 line cards occupying four slots plus a group matrix. Four of the slots hold, for example, the 16 line cards at 4 per slot. The same slot can be used with a wide variety of line cards and in various configurations. This architecture provides flexibility to allow any combination of line cards to be installed in each slot.","The fifth slot in the aforementioned embodiment can be configured to accept a group matrix. Preferably, two group matrix cards are employed, each containing a : optical reduction stage that \u201cselects\u201d working channels before the signals leave the shelf. In a 1+1 protection scheme, the two inputs to the line cards are classified as active and protect channels. The working channel is one of the active and protect channels that is selected based on bit error rate or other criteria, and so implements a redundancy scheme. This prevents the standby line cards from using any bandwidth on switching matrix .","Backplane","The following describes one embodiment of a backplane and some of the interface signals on that backplane. The backplane in the I\/O bay shelf carries a variety of signals between line cards and other modules in the shelf. Each I\/O shelf module is configured to allow an automatic, errorless switch from one power bus to the other.","Shelf processor module backplane signals include reset signals, clock signals, hardware detect signals (e.g., card detect, copy present, and the like), slot ID signals, and slot communication signals (both low and high speed). Line card backplane signals include reset signals, clock signals, communication signals, hardware detect signals, and slot ID signals. Group matrix module backplane signals include reset, clock signals, communication signals (both low and high speed), detection and hardware detect signals, and slot ID signals.","System Modules","Line Card",{"@attributes":{"id":"p-0092","num":"0097"},"figref":["FIG. 4","FIG. 4"],"b":["220","1","1","400"]},"Line card  receives optical signals from other network elements via a line-side optical receiver  and from the local router's system via a system-side optical receiver . Each of these receivers implements an optical-to-electrical (O\/E) conversion function. Line card  transmits optical signals to other network elements using a line-side optical transmitter  and to the group matrices using a system-side optical transmitter . Each of these transmitters implements an electrical-to-optical (E\/O) conversion function. It will be noted that line-side refers to the side of the line card coupled to other network elements and system-side refers to the side of the line card coupled to the group matrices.","Line-side optical receiver  is coupled to a protocol processor  which performs clock recovery multiplexing, demultiplexing, and SONET STE\/LTE processing in both directions. Similarly, system-side optical receiver  is also coupled to protocol processor  to allow protocol processor  to receive optical signals. The processed electrical signals from protocol processor  are coupled to the transmitters  and . The clock recovery functions are combined with demultiplexers and multiplexers to support reception and transmission of the optical data, respectively. The multiplexers serialize output data generated in protocol processor  by performing parallel-to-serial conversion on the parallel data. In contrast, de-multiplexers are used in protocol processor  to perform serial-to-parallel conversion on received data.","In order to add protection channels, line-side optical transmitter  is also coupled to a 1:2 broadcast unit . To receive such optical signals, optical receiver  is also coupled to a 2:1 selector  in order to select the working channel before the optical signals leave the shelf and thus prevent the standby channel (also referred to herein as the protect channel) from using any bandwidth on switching matrix .","Protocol processor  is coupled to a bus . Protocol processor  interfaces the line card to two copies of the matrix in a 1+1 physical protocol. In a SONET implementation, protocol processor  provides both STE\/LTE processing according to published industry standards. Also coupled to bus  are a memory  and a CPU . Memory  should be fast enough for efficient operation of CPU .","CPU  communicates with other of line cards (,)-(NN) over a control bus (not shown) using a transceiver  that is coupled to CPU . Transceiver , is coupled to a transformer  which is coupled to a switch . Switch  is coupled to the control bus. Switch  implements a 1:1 protection scheme for transceiver  and couples CPU  to two independent ports on the backplane (not shown). Each of the two ports connects to one copy of the hub of the group matrix. This allows the software on the line card to switch to the backup link when the software detects failures on the active link.","Preferably, CPU  includes numerous integrated peripherals including embedded SCC channels (e.g., in-band communications) and an Ethernet controller (for example, to support communications with other system modules). In one embodiment, CPU  provides an onboard communications processor module (not shown) that handles time-critical aspects of the protocols supported.","Group Matrix Module","The group matrix module includes two independent blocks: a group matrix and a hub (also referred to herein as a repeater).","Group matrix",{"@attributes":{"id":"p-0101","num":"0106"},"figref":["FIG. 5","FIG. 5"],"b":["500","212","1","216","1","500","510","1","520","1","530","510","1","130","510","1","520","1","545","1","530","100","535","540","530","510","1","520","1"]},"Hub","One or more hubs are also provided to support communication between the group matrices and system switches in router . In an Ethernet communications environment, the hub's functions are carried out primarily by repeater interface controllers (RICs). Each RIC integrates the functions of a repeater, clock and data recovery unit (CDR), Manchester encoder\/decoder, and transceiver. Each RIC has a set of registers that convey status information and allow a number of configuration options to be specified by the user using, for example, a microcontroller.","Shelf Processor Module","The shelf processor module provides, among other elements, a shelf processor and switch that interconnect the LAN segments from the groups and the shelf processor to a port on the shelf switch (Ethernet switch ).","Shelf Processor",{"@attributes":{"id":"p-0105","num":"0110"},"figref":"FIG. 6","b":["600","605","600","605","607","610","607","605","607","600","611","612","605"]},"Shelf CPU  is also connected to a timer , which preferably contains the following three functional blocks:\n\n","Ethernet switch  is coupled to a transceiver  which, via a select , allows Ethernet switch  to connect to two separate Ethernet segments. Select  implements a 1:1 protection scheme that allows shelf processor  to recover from failures on the active segment by simply switching to the other segment. Ethernet switch  is also coupled to one or more group transceivers (exemplified by group transceivers , , , and ). Group transceivers , , , and  connect ports on Ethernet switch  to the groups.","System Switch","One embodiment of a system capable of interconnecting network segments in a switched configuration allows communications between shelf switches, higher-level (e.g., level-1) processors, and shelf-processors. In an Ethernet-based system, the system switch supports both 10 Mbps and 100 Mbps connections. The segments come from the shelf switching in the I\/O shelf and the matrix switches, among others, and allow these elements to communicate.","Management Bay","The management bay can house, for example, the following modules:\n\n","All of the above modules are fully redundant and communicate with the rest of router  over redundant control buses. The placement of individual modules within the rack is not addressed in this document, since there are no architectural preferences, or restrictions, on such choices.","Level-1 Processor\/system Controller",{"@attributes":{"id":"p-0113","num":"0126"},"figref":"FIG. 7","b":["700","700","710","340","341","710","720","710","730","730","740","750","760","760","760","740","710","750"]},"APB  may also be connected to a dual-channel serial communication controller (SCC), which is used to communicate with one or more remote Operations Systems (OS) using, for example, the X.25 protocol. For more OS links and higher link speeds, the user can optionally install one or more WAN Interface Modules in the management bay. Such modules, which preferably handle all real-time aspects of the OS link, including layer-2 of the OSI stack, communicate with the level-1 processor.","Route Processor Module",{"@attributes":{"id":"p-0116","num":"0129"},"figref":["FIG. 8","FIG. 8"],"b":["800","800","800","800","800","800","810","830","840","810","100","850","850","1151","852","853","854","854","100"]},"System Switch",{"@attributes":{"id":"p-0118","num":"0131"},"figref":"FIG. 9","b":["900","900","900","900","910","910","920","1","930","940","1","940","1","950","1","910","960","900"]},"Main Matrix Bay","Switching matrix  is based on a rearrangeably non-blocking switching matrix and can consist, for example, of switch nodes arranged in a staged array. For example, switching matrix  configured as a 256\u00d7256 switching matrix consists of 48 nodes arranged in an array of 16 rows by 3 columns, with each column containing one stage. All 48 nodes in the switch matrix are substantially similar. Each node is preferably a crossbar device, such as a 16\u00d716 crossbar device that allows any of its 16 inputs to be connected to any of its 16 outputs, regardless of the crossbar's current state.","Matrix Shelf Processor Module","The matrix shelf processor module provides local control and management for one of the main-matrix shelves. The matrix shelf processor communicates with the level-1 and route processors over a low speed network connection and with the matrix node cards over a multi-drop, low-speed bus.",{"@attributes":{"id":"p-0122","num":"0135"},"figref":"FIG. 10","b":["1000","600","6","1000","130","1","1000","1010","1010","1020","1010","340","341","1040","1010","1070","1060","1010"]},"Main Matrix",{"@attributes":{"id":"p-0124","num":"0137"},"figref":["FIG. 11","FIG. 11"],"b":["130","130","1100","1","1","16","3","1100","1","1","16","3","1120","1","256","1120","1","256","1130","1","256"]},"Physically, each of the 48 switching nodes of this embodiment occupies a single slot in a matrix rack, such as that described below. The rack described below is arranged with three shelves (one per matrix column) that house the switch node cards (there are 16 such cards in every shelf) and six-shelf-processor cards (two per shelf).","Matrix Rack","A rack is used to hold one or more matrices, and is referred to herein as a matrix rack. In one embodiment, a matrix rack is configured to hold 48 switching nodes (i.e., switching nodes (,)-(,)) in a compact physical configuration. The matrix rack thus can support, for example, switching nodes (,)-(,), which each provide 16 input signals and 16 output signals, and thus provides switching matrix  with 256 input signals and 256 output signals. Matrix shelf processors are configured in redundant pairs to provide fault-tolerant control of switch nodes (,)-(,).","The cross-connect information, i.e., input-to-output mapping, is written into the crosspoint switch by a local microcontroller which receives the information from the local shelf processor over a high-speed connection. The three shelf processors in each rack receive such information from the node controller, which resides in a different rack. This hierarchy can be extended indefinitely. The crosspoint switch receives a high speed serial data from the optical receivers that perform optical-to-electrical conversion on the received optical signals. Data from the crosspoint switch is re-timed to synchronize the data with the system clock of router , using a clock and data recovery (CDR) unit, before being converted back into an optical signal that connects to the next stage of the matrix over fiber-optic cables.","Switch Node Module",{"@attributes":{"id":"p-0130","num":"0143"},"figref":"FIG. 12","b":["1100","1","1","16","3","1200","1200","1210","1240","1200","1240"]},"The block diagram of switch node  in  illustrates the main elements of a switch node using a SONET-based implementation. The core of the switch node  is crosspoint switch , which is a 16\u00d716 crossbar switch (when implementing a 256\u00d7256 matrix). Crosspoint switch  is preferably a 2.5 Gbps 16\u00d716 differential crosspoint switch with full broadcast capability. Any of its input signals can be connected to any, or all, of its output signals. The device is configured through a low-speed port that, through a two-step\/two-stage process, allows changes to be made to switch configuration without disturbing its operation.","Assuming 16 input signals (indicated in  as inputs ()-()), crosspoint switch  is configured to receive optical input signals from optical receivers ()-() at switch input signals ()-(). Crosspoint switch  also provides switch outputs ()-() which serve as the source of output signals for switch node . Microcontroller  communicates with the shelf processor via transceivers  and  over a bus that carries asynchronous data over the backplane (not shown). Incoming signals are routed to one of switch outputs ()-(). Switch outputs ()-() are coupled to CDRs ()-(), which in turn drive optical transmitters ()-(). The outputs from optical transmitters ()-() appear at outputs ()-() as optical signals.",{"@attributes":{"id":"p-0133","num":"0146"},"figref":["FIG. 13","FIG. 13"],"b":["130","130","1300","1","1","6","256","1310","1","1","16","16"]},"It will be noted that line cards (,)-(,) correspond loosely to line cards (,)-(N,N), as depicted in FIG. . It will also be noted that line cards (,)-(,) are each shown as being divided into a receive section and a transmit section as shown in , again in a fashion similar to that depicted in FIG. . Also depicted in  are switch nodes (,)-(,) and a switching matrix control circuit . Switch nodes (,)-(,) correspond to switch nodes (,)-(,) of , and may be implemented as shown in , for example. Switching matrix control circuitry  includes elements such as microcontroller  of FIG.  and matrix shelf processor  of FIG. . More generically, the control function represented by switching matrix control circuitry  is depicted in  as matrix shelf processors ()-(N) and ()-(N). As previously noted, switch nodes (,)-(,) and their related CDRs are divided into three stages, which are depicted in  as matrix first stage , matrix center stage , and matrix third stage . It will be noted that matrix first stage , matrix center stage , and matrix third stage  correspond to the matrix stages represented by switch nodes (,)-(,), switch nodes (,)-(,), and switch nodes (,)-(,). It will also be noted that the transmit side of line cards (,)-(,) each include CDR functionality.",{"@attributes":{"id":"p-0135","num":"0148"},"figref":"FIG. 14","b":["1400","1401","100","1401","1402","1403","1404","1402","100","130","1403","1404","100"]},"A line card  is shown as receiving an input signal  and transmitting an output signal . In accordance with the depiction of signal paths  in , line card  is divided into a line card receive section (LCRS)  and a line card transmit section (LCTS) . This is reflected in  by the notations regarding the line cards having receive and transmittal sides. Line card receive section  receives input signal  at a framer . Framer  generates a framed data signal  using master frame pulse  to generate proper framing of input signal . Framer  includes a programmable delay counter (not shown) that allows the output framing location to be relocated relative to master frame pulse . This allows the framing of input signal  to account for the differing delays that may be caused by differences in cable length.","Framed data signal  is then provided to optical transmitter  for transmission across an optical cable  (as an optical signal ) to matrix . Line card transmit section  receives an optical signal over an optical cable  at an optical receiver . Optical receiver  converts the optical signal into an electrical signal (a signal ), which is in turn provided to a receive CDR . Receive CDR  recovers the clock and data from signal , providing the resulting signal (a signal ) to a framer .","Framer , under the control of a line card transmit section (LCTS) control module , generates output signal  with the proper framing. In order to properly frame the data in signal , LCTS control module  receives master switch pulse , master frame pulse , and master clock  from timing generator , and LCTS framing pulse  from framer . LCTS control module  uses these signals to generate an LCTS reframing signal , which is provided to framer . LCTS reframing signal  is used to control the fast reframing of framer  upon the switching of matrix .","Matrix  includes a matrix stage , a matrix stage , and a matrix stage . Matrix stage  receives the optical signal from line card receive section  (an optical signal ) at an optical receiver , which converts optical signal  into an electrical signal (a signal ). Clock and data information are recovered from signal  by a receive CDR . Receive CDR  passes the recovered signal (a signal ) to a crosspoint switch . Crosspoint switch  is controlled by a control module  via a switching signal . It will be noted that crosspoint switch  is comparable to crosspoint switch  of FIG.  and that optical receiver  is comparable to one of optical receivers ()-(). Similarities between other elements of matrix stage  and switch node  will also be noted. These similarities also hold true for matrix stages  and , as well.","Control module  monitors the output of crosspoint switch  by the use of a monitor stage , which frames to the output of crosspoint switch  (a signal ) and generates a switch framing pulse . Signal  is provided to a transmit CDR  for clock recovery and recovery of the data signal under the control of a fast acquisition control signal  that is generated by control module . Transmit CDR  recovers clock and data information from signal  to recover a signal , which is then provided to an optical transmitter . Optical transmitter  converts signal  from an electrical signal into an optical signal that is transmitted from matrix stage  to matrix stage  over an optical cable .","Optical receiver  of matrix stage  receives the optical signal provided via optical cable  and converts the optical signal into an electrical signal (a signal ) that is, in turn, provided to a receive CDR . Receive CDR  recovers clock and data information from signal  and provides this data to crosspoint switch  as a signal . Crosspoint switch  switches signal  to an output that appears at an output of crosspoint switch  as signal , which is in turn provided to transmit CDR . Transmit CDR  recovers clock and data information, once again, and provides this data to an optical transmitter  as a signal .","A control module  controls the switching of crosspoint switch  and the relocking of receive CDR  and transmit CDR . Control module  provides fast acquisition control signals  and  to receive CDR  and transmit CDR , respectively. Control module  causes crosspoint switch  to switch using a switching signal . A monitor stage  receives signal  from crosspoint switch  and frames to signal  in order to generate a switch framing pulse , which is then provided to control module . Control module  generates the fast acquisition and switching signals using switch framing pulse  in combination with master switch pulse , master frame pulse , and master clock . Optical transmitter  converts signal  into an optical signal that is provided to matrix stage  via an optical cable .","The configuration of matrix  is substantially similar to that of matrix stage . Matrix stage  receives the optical signal transmitted by optical transmitter  over optical cable  at an optical receiver  and converts the optical signal into an electrical signal (a signal ). Signal  is in turn provided to a receive CDR , which recovers clock and data information from signal , and provides the recovered data information to crosspoint switch  as a signal . Crosspoint switch  switches signal  to an output that appears at an output of crosspoint switch  as signal , which is in turn provided to transmit CDR . Transmit CDR  recovers clock and data information, once again, and provides the recovered data information to an optical transmitter  as a signal .","Controlling the switching of crosspoint switch  and the relocking of receive CDR  and transmit CDR  is a control module . Control module  provides fast acquisition control signals  and  to receive CDR  and transmit CDR , respectively. Control module  controls the switching of crosspoint switch  using a switching signal . A monitor stage  receives signal  from crosspoint switch  and frames to signal  in order to generate a switch framing pulse , which is then provided to control module . Control module  generates the fast acquisition and switching signals using switch framing pulse  in combination with master switch pulse , master frame pulse , and master clock . Optical transmitter  converts signal  into an optical signal (an optical signal ) that is provided to LCTS  via optical cable  for transmission as output signal . The operations performed by LCTS  in generating output signal  have been explained previously.","Certain of these signals and their relationships are now described further detail. The signals from timing generator  include:\n\n","As also shown in , the signals within matrix stage  include:\n\n",{"@attributes":{"id":"p-0147","num":"0170"},"figref":"FIG. 14","b":"1426","ul":{"@attributes":{"id":"ul0013","list-style":"none"},"li":{"@attributes":{"id":"ul0013-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0014","list-style":"none"},"li":["1. Signal , which is the framed data output from optical receiver  corresponding to the optical signal transmitted by optical transmitter  and input to receive CDR .","2. Signal , which is the framed data output recovered by receive CDR  and input to crosspoint switch .","3. Signal , which is the framed data output switched by crosspoint switch , and input to transmit CDR  and monitor stage .","4. Signal , which is the framed data output recovered by transmit CDR  and input to optical transmitter .","5. Switch Framing Pulse , which is the signal indicating the start of frame location in signal .","6. Switching signal , which is the signal that provides the switch pulse causing crosspoint switch  to assume a new switch configuration.","7. Fast acquisition control signals  and , which are the signals generated by control module  that causes receive CDR  and transmit CDR  to perform a fast lock action on signals  and , respectively."]}}}},"Signals within matrix stage  include:\n\n","Signals within LCTS  include:\n\n","For purposes of this discussion, it is assumed that the data delay through all optical modules, CDRs and switches is negligible. However, cabling is expected to introduce substantial delays into the data signal. The measurement and management of cable-related data delays is therefore an important issue. This issue can arise, for example, in the following manner. Normally, multiple LCRSs are connected to matrix stage  (these LCRSs are merely represented by LCRS ), and so the lengths of the cables connecting each of the LCRS modules to matrix stage  may be of differing lengths. Such differences in length can cause substantial variations in the delay experienced by the signals carried by these cables. Such delays should therefore be compensated for, and, given their variation, compensated for independently (e.g., via a delay register in the signal's respective framer (e.g., framer )).","In this regard, it will be noted that multiple copies of the single data path shown exist for each of matrix stages , , and , as do multiple copies of the optical cable connecting matrix stages  and  (e.g., optical cable ). All such cables are preferably of matched length. Multiple copies of the cable connecting matrix stage  and  (e.g., optical cable ) are used, with all such cables preferably of matched length. However, in a fashion similar in regard to the LCRS modules, multiple LCTS modules are normally connected to matrix stage  via optical cabling (e.g., optical cable ). These cables may also be of differing lengths. As before, such variation in delay should be accounted for. Preferably, the LCTS modules are designed to accommodate such variation.","Prior to being transferred through router , one embodiment of the present invention rearranges the information present in the incoming data to maximize the amount of time available for relocking. As noted, a certain amount of time is required for the various subsystems in router  to reacquire clock information and phase lock onto the incoming data stream. Because switching is performed during a relocking period, the longer the relocking period can be made, the less onerous the burden on the system's design (in terms of the speed with which relocking must be accomplished in order to avoid errors in the live data passing through router ). By rearranging the incoming data, unused bit times throughout a frame may be made contiguous, thereby increasing the amount of time available for relocking. One scheme for rearranging the data in an incoming SONET frame is now described.",{"@attributes":{"id":"p-0153","num":"0194"},"figref":"FIG. 15","b":["1500","1500","1500","87","1502","1504","1506","1510","1512","1514","1520","1522","1524","1530","1532","1534","1536","1540","1542","1544","1550","1551","1552","1553","1554","1555","1556","1557","1558","1570","1572","1574","1500","1590","1598","1590","1598","1593","1536"]},"In certain embodiments of the present invention, these overhead bytes and payload are rearranged in order to support errorless switching in switching matrix . In one embodiment, the overhead bytes are moved to the beginning of the frame used to transport data through a system such as router . By moving the overhead bytes to the beginning of the frame, the byte times are concatenated in order to support the relock of the CDRs within router  by increasing the time available for relock.","It will be noted that certain of the overhead bytes in  are marked with the letter U. This indicates the bytes so marked are stripped off by protocol processor  and are thus unused in the switching of the data streams represented by SONET frame  while the data is within router . These bytes are preferably the bytes \u201crearranged\u201d to form an extended period of time during which relocking can occur. In fact, because these bytes are stripped off, other bytes are simply moved into their position, overwriting the stripped-off bytes and making room at the beginning of the frame for the relocking operation. One example of such a rearranged frame, referred to herein as an errorless switching frame (ESF), is given below.",{"@attributes":{"id":"p-0156","num":"0197"},"figref":"FIG. 16","b":["1600","100","1600","1610","1620","1502","1504","1500","1630","1640","1530","1500","1650","1532","1500","1660","1534","1500","1670","1536","1500","1680","1688","1590","1598","1500","420","4","1500","1610","1620","1630","1500"]},"Relock bytes  are inserted in place of these first bytes. Relock bytes  preferably consist of data that will create signals rich in transitions. This eases the CDRs' task of re-acquiring phase lock, because each transition is an opportunity for the CDRs' to begin the process of re-acquiring clocking information. One example of a bit pattern rich in transitions is a binary representation of the hexadecimal number \u201c55\u201d, which produces a string of alternating 1's and 0's (with a transition between each bit time).","A1\/A2 bytes  represent A1 byte  and A2 byte  from 48 STS-1 channels in an OC-48 signal. A1\/A2 bytes  may include, for example, 24 bytes of the A1 framing byte and 24 bytes of the A2 framing byte. In-band bytes  may be divided into an in-band signaling high byte , an in-band signaling low byte , and a B1 parity byte . The next four portions of ESF  are pointer and payload bytes from the 48 STS-1 channels supported by the OC-48 SONET frame. H1 bytes  include the H1 pointer bytes from each of the 48 STS-1 channels. In similar fashion, H2 bytes  contain the H2 pointer bytes from those STS-1 channels, H3 bytes  contain the H3 stuff bytes from the 48 STS-1 channels, and H4 bytes  contain the 48 H4 stuff bytes from the 48 STS-1 channels. Payload bytes - contain their respective portions of the payload bytes of the 48 STS-1 channels supported by the OC-48 stream.","In one embodiment, in-band\/parity bytes  are actually a 48-byte column in which three of the bytes are used for in-band signaling high byte , in-band signaling low byte , and B1 parity byte , with the remaining 45 bytes being reserved. While the H1, H2, and H3 bytes of each of the STS-1 channels of the OC-48 stream are defined, in some embodiments, the H4 byte of each channel can be considered to be part of the SONET payload. The various fields in row 1 of ESF  are shown in Table 2.",{"@attributes":{"id":"p-0160","num":"0201"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Detail of an exemplary layout of errorless switching frame 1600."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Row 1","#",{},{}]},{"entry":["Byte","of","Overhead",{}]},{"entry":["Numbers","Bytes","Byte Name","Notes"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1-1056","1056","1056 - RLK bytes","Used to relock CDRs."]},{"entry":[{},{},{},"Relocking pattern"]},{"entry":[{},{},{},"is preferably transition"]},{"entry":[{},{},{},"(edge) rich (e.g., a"]},{"entry":[{},{},{},"pattern of 0x55)"]},{"entry":["1057-","24","24 - A1 bytes","Framing Byte."]},{"entry":["1080",{},{},"A1 pattern = 0xF6"]},{"entry":["1081-","24","24 - A2 bytes","Framing Byte."]},{"entry":["1104",{},{},"A2 pattern = 0x28"]},{"entry":["1105","1","1 - IBH byte","Inband Signaling High-byte"]},{"entry":["1106","1","1 - IBL byte","Inband Signaling Low-byte"]},{"entry":["1107","1","1 - byte B1","B1 Parity Byte"]},{"entry":["1108-","45","45 - Reserved bytes","Fixed pattern = 0x00."]},{"entry":["1152",{},{},"Reserved."]},{"entry":["1153-","48","48 - H1 bytes","Pointer Byte."]},{"entry":["1200",{},{},"H1 = H1 pointer byte"]},{"entry":["1201-","48","48 - H2 bytes","Pointer Byte."]},{"entry":["1248",{},{},"H2 = H2 pointer byte"]},{"entry":["1249-","48","48 - H3 bytes","Pointer Byte."]},{"entry":["1296",{},{},"H3 = H3 pointer action"]},{"entry":[{},{},{},"stuff byte"]},{"entry":["1297-","48","48 - H4 bytes","Payload Byte."]},{"entry":["1344",{},{},"H4 = stuff byte position"]},{"entry":["1345-","2976","2976 - payload bytes","Payload Bytes"]},{"entry":"4320"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"As noted, relock bytes  preferably contained a pattern of 1's and 0's (e.g., a hexadecimal value of \u201c55\u201d). This pattern is used to help the CDRs along the signal path within router  to re-acquire phase lock quickly during the rearrangement of switching matrix  by providing a signal rich in edges (i.e., transitions) on which the PLLs of the CDRs can acquire lock. A1\/A2 bytes  are framing bytes that preferably use a standard SONET format of F and , respectively. A full column of A1 and A2 bytes are preferably used to form A1\/A2 . As noted, in-band signaling high byte  and in-band signaling low byte  are provided to support in-band signaling, and so allow communication on an in-band basis over a network such as network . As will be apparent to one of skill in the art, the above format is merely exemplary. The information illustrated above may be organized in an alternate format, and various pieces of information omitted from ESF frame , or included in ESF frame  from SONET frame .","To help ensure the accurate transmission of data, B1 parity byte  is provided to allow parity checking through a system such as router . B1 parity byte  is preferably calculated using the standard SONET definition, and is preferably calculated across all bytes in ESF , save for relock bytes , and A1\/A2 bytes . Relock bytes  and A1\/A2 bytes  are excluded from this calculation to avoid the detection of false parity errors during the rearrangement of switching matrix . At such a time, the system will not be able to capture relock byte  and A1\/A2 byte . As noted, the undefined bytes following in-band\/parity bytes  are reserved and so are preferably set to a hex value of 0\u00d700. In-band\/parity bytes  and the undefined bytes which follow thus define a 48-byte column.","H1 bytes , H2 byte , and H3 bytes  are pointer bytes into the payload of the original SONET frame. In one embodiment, there are 48 copies of each of these bytes in order to support the 48 STS-1 channels in an OC-48 stream. Preferably, the values carried in H1 byte  and H2 byte  are modified from the standard SONET definition to allow for the different locations of various payload bytes in ESF . In a similar fashion, there are 48 copies of each STS-1 channel's H4 byte that make up H4 bytes , and it is the H4 byte that is used as a stuff position during pointer justifications (although the H4 byte may be considered as a part of the payload). Preferably, scrambling is used on data sent over the signal paths of router . More preferably, all bytes in ESF  are scrambled with the exception of relock bytes  and A1\/A2 bytes . While any acceptable method may be used for this scrambling, a standard SONET scrambling polynomial is preferably used for the scrambling pattern.","While it may be preferable to rearrange incoming data streams to allow for errorless switching, depending on the amount of time required for various elements of router  to reacquire lock, such rearrangement of the incoming data stream is not strictly necessary. In fact, if switching and resynchronization can be performed quickly enough, no rearrangement whatever need be performed. This may depend not only on the speed with which the hardware is capable of re-acquiring lock, but on the amount of contiguous unused data at the beginning of a frame available for use in the switching operation, due either to the underlying protocol employed or the transmission of a special frame that allows for such switching. Thus, given a sufficient period of time (a sufficient number of unused bit times) at the beginning of a frame, no arrangement may be needed to perform errorless switching according to embodiments of the present invention.","Alternatively, the signal paths of a system such as router  may be operated at a speed higher than that of the incoming data stream. In such a case, more byte positions will exist per unit time than exist bytes from the incoming data stream. In such a scenario, a number of system-defined bytes would be inserted before the bytes from the incoming data stream are received. Among other possible uses of these system-defined bytes would be the possibility of provided relocking bytes (e.g., relock bytes ) which could be corrupted (as they might be during the switching of a switching matrix such as switching matrix ) without deleterious effects on the \u201clive\u201d data channels carried over the incoming data stream. These relocking bytes would also serve to support fast re-acquisition of lock by the CDRs within the system.",{"@attributes":{"id":"p-0166","num":"0207"},"figref":"FIG. 17","b":["14","100"]},"In one embodiment, the relocking pattern in the frame is a fixed duration of 8448 bit times. The entire errorless rearrangement function must be accomplished in the 8448 bit times of the relocking pattern to avoid any loss of data. The signals are grouped into the five major blocks that make up the errorless rearrangement path (line card receive sections (LCRS ), the three matrix stages (matrix stages , , and ), and line card transmit sections (LCTS )). The data delay introduced by the cabling is shown in the data path signals shown in the diagram, and appears as the skewing of the data\/relocking pattern.","The fast acquisition control signals within each matrix stage are asserted into their respective CDRs prior to the given CDR's inputs becoming unknown are held for a period of time necessary for the CDR to perform a fast relock function. The fast acquisition control signals should be sequenced carefully to track the location of the \u201c55\u201d portion of the data frame and the state of the signal coming into each respective CDR.",{"@attributes":{"id":"p-0169","num":"0210"},"figref":["FIGS. 18 and 19","FIG. 17","FIGS. 18 and 19"],"b":["100","17"]},{"@attributes":{"id":"p-0170","num":"0211"},"figref":["FIG. 18","FIG. 17"],"ul":{"@attributes":{"id":"ul0019","list-style":"none"},"li":{"@attributes":{"id":"ul0019-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0020","list-style":"none"},"li":["1. The location of switch framing pulse  is measured relative to the master frame pulse (master frame pulse ) (step ). The location of switch framing pulse  is specified in number of clock pulses. Switch framing pulse  should be measured separately for each of the LCRSs in the system. The distance of switch framing pulse  (in clock pulses) from master frame pulse  signal is used to determine the length of each cable from an LCS (e.g., optical cable ) to the first stage of the matrix.","2. The lengths of these cables, as determined by the measurements made in the preceding step, are compensated for by a frame delay counter in each framer of each LCRS (e.g., framer ) (step ). The delay counter is programmed such that all data arriving at matrix stage  (via signal ) is synchronized such that all inputs to matrix stage  arrive substantially simultaneously.","3. The location of switch framing pulse  is then measured relative to master frame pulse  (step ). The location of the pulse on switch framing pulse  is ascertained and stored in control module  (step ). The location of switch framing pulse  relative to master frame pulse  is determined so that fast acquisition control signal , switching signal  and fast acquisition control signal  can begin at the correct location in the frame when a \u201cswitch\u201d operation is indicated by master switch pulse . Fast acquisition control signal , switching signal  and fast acquisition control signal  must rise at the beginning of the relocking pattern being present in signal  and signal .","4. The location of switch framing pulse  is measured relative to master frame pulse  (step ). The location of the pulse on switching framing pulse  is ascertained and stored in control module  (step ). The location of switching framing pulse  relative to master frame pulse  is needed such that fast acquisition control signals  and , and switching signal  can begin at the correct location in the frame when a \u201cswitch\u201d operation is indicated by master switch pulse . Fast acquisition control signals  and , and switching signal  must rise at the beginning of the relocking pattern being present signal  and signal .","5. The location of LCTS framing pulse  is measured relative to master frame pulse  (step ). The location of the pulse on LCTS framing pulse  (as specified in number of clock counts from master frame pulse ) is stored in control module  as a delay count (step ). The delay count is used to offset master frame pulse  such that the master frame pulse  can be used as the LCTS reframing signal , and is synchronized correctly with the relocking pattern in the frame as seen in signal  and signal ."]}}}},{"@attributes":{"id":"p-0171","num":"0217"},"figref":["FIG. 19","FIG. 19","FIG. 17"],"b":"100","ul":{"@attributes":{"id":"ul0021","list-style":"none"},"li":{"@attributes":{"id":"ul0021-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0022","list-style":"none"},"li":["1. The process begins when a global processing element (not shown) determines that an errorless switch rearrangement operation is required (step ) (not shown in FIG. ).","2. The new switch configuration is preloaded into each of the three switch elements (crosspoint switches ,  and ) (step ) (not shown in FIG. ). The new switch configuration information is stored in crosspoint switches , , and , but is not actually applied to the switches until the crosspoint switches are instructed to do so by master switch pulse . The loading of the new configuration information is therefore not time critical.","3. The global processing element issues a pulse on master switch pulse  (step ). In one embodiment, master switch pulse  need only be pulsed once to perform the entire errorless rearrangement operation.","4. Fast acquisition control signal  is asserted to indicate to transmit CDR  that a phase change will occur on its input data signal (signal ) (step ). Fast acquisition control signal  is asserted at the point at which the relocking pattern becomes present on signal , as determined by the location of the framing pulse on switch framing pulse .","5. A pulse on switching signal  is applied to crosspoint switch  indicating that crosspoint switch  should apply the new switch configuration loaded previously (step ). Data output on signal  then undergoes a phase change.","6. Fast acquisition control signal  signal is held for a fixed period of time (e.g., 200 bit times), but in any case for a time sufficient for transmit CDR  to relock to the phase change on signal  (step ).","7. Fast acquisition control signal  signal is deasserted (step ). Signal  is now locked to signal .","8. Fast acquisition control signal  is asserted to receive CDR , indicating to receive CDR  that a phase change will occur on its input data signal (signal ) (step ). Fast acquisition control signal  is asserted at the point at which the relocking pattern becomes present on signal , as determined by the location of the framing pulse on switch framing pulse .","9. Fast acquisition control signal  is held for a fixed period of time (e.g., 400 bit times (200 bit times for relock of transmit CDR  and 200 bit times for relock of receive CDR )), but in any case for a time sufficient for receive CDR  to begin receiving good data and to relock to the phase change on signal  (step ).","10. Fast acquisition control signal  is deasserted (step ). Signal  is now locked to signal  by this operation.","11. A pulse on switching signal  is applied to crosspoint switch  indicating that crosspoint switch  should apply the new switch configuration loaded previously (step ). Signal  then undergoes a phase change.","12. Fast acquisition control signal  is asserted to transmit CDR  and is held for a fixed period of time (e.g., 600 bit times (200 bit times each for transmit CDR  and receive CDR  relock, and 200 bit times for transmit CDR  relock)), but in any case for a time sufficient for transmit CDR  to begin receiving good data and to relock to the phase change on signal  (step ).","13. Fast acquisition control signal  is deasserted (step ). Signal  is now locked to signal  by this operation.","14. Fast acquisition control signal  signal asserted to receive CDR  and is held for a fixed period of time (e.g., 800 bit times (200 bit times for CT, receive CDR  and transmit CDR  relock and 200 bit times for receive CDR  relock)), but in any case for a time sufficient for receive CDR  to begin receiving good data and to relock to the phase change on signal  (step ).","15. Fast acquisition control signal  signal is deasserted (step ). Signal  is now locked to signal  by this operation.","16. A pulse on switching signal  is applied to crosspoint switch  indicating that crosspoint switch  should apply the new switch configuration loaded previously (step ). Signal  then undergoes a phase change.","17. Fast acquisition control signal  is asserted to transmit CDR  and is held for a fixed period of time (e.g., 1000 bit times (200 bit times relock of transmit CDR , receive CDR , transmit CDR , and receive CDR  and 200 bit times for relock of transmit CDR )) necessary for, transmit CDR  to begin receiving good data and to relock to the phase change on signal  (step ).","18. Fast acquisition control signal  is deasserted (step ). Signal  is now locked to signal  by this operation.","19. LCTS reframing signal  is driven low at the appearance of the relocking pattern on signal  (step ). The clock recovered from signal  is ignored at framer .","20. Framer  is held in a frozen state during the period of time that signal  is unknown (step ).","21. Signal  becomes good a period of time (e.g. 1250 bit times) after signal  becomes known good (step ).","22. LCTS reframing signal  signal is driven high at end of the relocking pattern on signal  (step ).","23. Framer  restarts the clocks extracted from signal  (step ).","24. Framer  reframes on the framing pattern of signal  (e.g., \u201cF\u201d) and begins passing data, completing the operation (step )."]}}}},{"@attributes":{"id":"p-0172","num":"0242"},"figref":"FIG. 20","b":["420","420","420","130"],"ul":{"@attributes":{"id":"ul0023","list-style":"none"},"li":{"@attributes":{"id":"ul0023-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0024","list-style":"none"},"li":["1. A reset signal , which acts to set the control logic in a known state;","2. A transmit reframe synchronization signal ;","3. A transmit frame synchronization delay register , loaded via a transmit frame synchronization delay signal ;","4. A transmit reframe enable control register bit (not shown), which is set according to a transmit reframe enable signal ;","5. Control logic employing the above signals and registers;","6. Synchronizers to sequence control signals between clock domains;","7. Gating logic to \u201cfreeze\u201d input transmit clock ;","8. Logic to reinitialize the transmit input framer; and","9. Logic to allow immediate reframing in the presence of bit errors during the fast reframe operation."]}}}},"Transmit reframe synchronization signal  controls the sequencing of the errorless rearrangement operation. Transmit reframe synchronization signal  is \u201cobserved\u201d only if the transmit reframe enable bit is set. When the transmit reframe enable bit is clear, transmit reframe synchronization signal  is ignored (i.e., the transmit reframe enable bit allows for a particular protocol processor\/line card to avoid participation in an errorless rearrangement operation). System level implementation of errorless rearrangement is preferably such that line cards needing to participate in an errorless rearrangement operation are first configured (e.g., by setting the corresponding transmit reframe enable bits), and that a common \u201ctrigger\u201d transmit reframe synchronization pulse is then delivered to all line cards in the system.","Transmit reframe synchronization signal  is received relative to an input receive clock . Input receive clock  is used to handle transmit reframe synchronization because input transmit clock  will become undefined during the course of the errorless rearrangement operation. Input receive clock  is from the same frequency source as the transmit output clock (however, the phase relationship is unknown). Input receive clock  signal should remain active and accurate during the errorless rearrangement. The majority of the control generated by transmit reframe synchronization signal  is done in the domain of input receive clock  and then critical control outputs are synchronized into the clock domain of input transmit clock .","Transmit reframe synchronization signal  is assumed to be asynchronous to input receive clock . A rising edge detection circuit is used to detect the assertion of transmit reframe synchronization signal  (employed in generating a transmit reframe synchronization rising edge detect signal ) and a falling edge detection circuit is used to detect the deassertion of transmit reframe synchronization signal  (employed in generating a transmit reframe synchronization falling edge detect signal ).","The asserting and deasserting edges of transmit reframe synchronization signal  are delayed internally by a count supplied in transmit frame synchronization delay register  via transmit frame synchronization delay signal . Counting using transmit frame synchronization delay register  is performed in the clock domain of input receive clock . When a rising edge is detected on transmit reframe synchronization signal , the indication of assertion is not supplied to the internal control logic until a delay equal to the count stored in transmit frame synchronization delay register  has expired. The count stored in transmit frame synchronization delay register  is specified as the number of periods of input receive clock  to be counted. When a falling edge is detected on transmit reframe synchronization signal , the same transmit frame synchronization delay count is tallied before the deassertion of transmit reframe synchronization signal  is indicated to the internal control logic.","The system timing of transmit reframe synchronization signal  is such that there are guaranteed to be a number of good pulses of input transmit clock  remaining at the input of input transmit clock  (e.g., 20 periods of acceptable clock signal), after the \u201cdelay counted\u201d rising edge detection of transmit reframe synchronization signal  has been supplied to the internal control logic. Similarly, input transmit clock  is guaranteed to be good for a given number of clock periods of input transmit clock  (e.g., 20 periods of acceptable clock signal) before the first framing pattern is received, after the \u201cdelay counted\u201d falling edge detection of transmit reframe synchronization signal  has been supplied to the internal control logic.","To support the errorless rearrangement technique, the input\/output connections to and from the matrix are maintained during a matrix rearrangement. Only paths internal to switching matrix  are altered during the rearrangement. As noted, switching matrix  incorporates several clock\/data recovery units (CDRs) in the signal path from matrix input to matrix output. These CDRs are configured in a serial sequence through the matrix, such that when the serial data signal is disrupted (e.g., due to a switch change), the CDRs reacquire lock one at a time, in a serial fashion. During the period of time that the CDRs are re-acquiring lock, the \u201cclock\u201d into protocol processor  is of unknown frequency and period. The errorless rearrangement support circuitry in protocol processor  is responsible for \u201cblocking\u201d the transmit input clock during the rearrangement (when the clock is not known), turning the clock back on when the clock again becomes clean, and finally, to reframe to the newly received serial data stream immediately and begin passing data. The sequence of events that occur in performing an errorless rearrangement is now described.",{"@attributes":{"id":"p-0179","num":"0258"},"figref":"FIG. 21","b":["420","130","100"],"ul":{"@attributes":{"id":"ul0025","list-style":"none"},"li":{"@attributes":{"id":"ul0025-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0026","list-style":"none"},"li":["1. First, transmit frame synchronization delay register  is configured during system initialization with a value appropriate for the length of optical cable between the line card and the matrix (step ).","2. The transmit reframe enable bit is then written (e.g., with a logic 1) (step ).","3. Transmit reframe synchronization signal  is asserted globally to all line cards in the system (step ). (Only line cards whose transmit reframe enable bits are set will actually perform the quick reframe errorless rearrangement operation.)","4. Receive reframe control circuitry  detects a falling edge on transmit reframe synchronization signal  (step ).","5. Receive reframe control circuitry  counts the number of clocks of input receive clock  indicated by the value held in transmit frame synchronization delay register , then sends a pulse on transmit reframe synchronization falling edge detect signal  (preferably two periods wide) to transmit reframe control circuitry  (step ). A number of good clocks of input transmit clock  (e.g., ) are guaranteed to remain from this point in time.","6. Transmit reframe control circuitry  then synchronizes transmit reframe synchronization falling edge detect signal  to input transmit clock  (step ).","7. Transmit reframe control circuitry  asserts a second clock control signal  (e.g., sets second clock control signal  to a logic 1) on the rising edge of input transmit clock  and provides second clock control signal  to transmit clock control circuitry  (step ).","8. Transmit clock control circuitry  performs a logical \u201cOR\u201d of second clock control signal  and a first clock control signal  to generate clock control signal (not shown) (step ). First clock control signal  is generated by receive reframe control circuitry . The clock control signal is logically ORed with input transmit clock  to inhibit a transmit clock . This operation should inhibit transmit clock  without creating \u201cglitches\u201d.","9. After approximately four clock periods of input receive clock , receive reframe control circuitry  asserts first clock control signal  (e.g., sets first clock control signal  to a logical 1) (step ). This is done to maintain a predetermined value (e.g., a logical 1) on the clock control signal after input transmit clock  becomes indeterminate during the rearrangement period.","10. Multiple bit times pass, during which the matrix switch is rearranged and the CDR's in the matrix path re-acquire lock (step ).","11. Transmit reframe synchronization signal  is deasserted globally to all line cards in the system (step ).","12. Receive reframe control circuitry  performs an edge detection on the rising edge of transmit reframe synchronization signal  (step ).","13. Receive reframe control circuitry  counts the number of clocks of input receive clock  indicated by the value stored in transmit frame synchronization delay register , then sends a transmit control reset signal  (preferably one period wide) to transmit reframe control circuitry  (step ). Input transmit clock  should become \u201cgood\u201d a given number clocks prior to the assertion of transmit control reset signal  (e.g., at least ). Transmit control reset signal  is used to reset transmit reframe control circuitry  to a known state.","14. After a given number of periods of input receive clock  (e.g., one period), receive reframe control circuitry  sends a pulse on transmit reframe synchronization rising edge detect signal  (preferably two clock periods wide) to transmit reframe control circuitry  (step ).","15. Transmit reframe control circuitry  synchronizes transmit reframe synchronization rising edge detect signal  to input transmit clock  (step ).","16. Transmit reframe control circuitry  asserts second clock control signal  (e.g., sets second clock control signal  a logic 1) on the rising edge of input transmit clock  and provides second clock control signal  to transmit clock control circuitry  (step ). (At this time transmit clock  is still off as a result of first clock control signal  being asserted).","17. After approximately four clock periods of input receive clock , receive reframe control circuitry  deasserts first clock control signal  (e.g., sets first clock control signal  to a logic 0) (step ). It will be noted that, even after first clock control signal  is deasserted, transmit clock  remains off due to second clock control signal  being asserted.","18. After approximately four clock periods of input transmit clock , transmit reframe control circuitry  deasserts second clock control signal  (e.g., sets second clock control signal  to a logic 0) on the rising edge of input transmit clock  and sends second clock control signal  to transmit clock control circuitry  (step ). Within transmit clock control circuitry , because both first clock control signal  and second clock control signal  are deasserted (e.g., set to logic 0), transmit clock  starts running again (again, this operation should cause no \u201cglitches\u201d on transmit clock ).","19. Once transmit clock  is running again, transmit reframe control circuitry  asserts the first of two additional control signals, a reframe synchronization signal  (step ). Reframe synchronization signal  is a signal (preferably, two clock periods wide) that indicates to the framer in the transmit section that the framer should start looking for the framing information.","20. Transmit reframe control circuitry  also asserts the second of these additional control signals, a quick reframe signal  (step ). Quick reframe signal , in one embodiment, is asserted (e.g., set to a logic 1) in order to force the given framer to look at only 16-bits of data (instead of the normal 32 bits). Quick reframe signal  also indicates to the given framer that the framer is to accept up to a single bit error in every byte of framing overhead.","21. Once the frame has been found, the transmit framer sends back a reset signal (quick reframe reset signal ; preferably one clock period wide) to transmit reframe control circuitry  in order to reset the quick reframe signal (e.g., back to a logic 0) (step ).","22. Because the frame boundary has been located, the system can begin passing data immediately, within the same frame (step ).","23. The transmit reframe enable bit is then deasserted by deasserting transmit reframe enable signal , completing the errorless switching operation (from the perspective of the given protocol processor) (step )."]}}}},"In one embodiment, router  implements many functions in software to provide flexibility, support for communications protocols, and ease of implementation. The software architecture presented here forms a distributed management, control, and routing layer capable of spanning hundreds or thousands of nodes. The software architecture covers all protocol layers, management and control applications, and inter-node communication protocols and APIs.","The software modules described herein may be received by the various hardware modules of router , for example, from one or more computer readable media. The computer readable media may be permanently, removably or remotely coupled to the given hardware module. The computer readable media may non-exclusively include, for example, any number of the following: magnetic storage media including disk and tape storage media; optical storage media such as compact disk media (e.g., CD-ROM, CD-R, etc.) and digital video disk storage media; nonvolatile memory storage memory including semiconductor-based memory units such as FLASH memory, EEPROM, EPROM, ROM or application specific integrated circuits; volatile storage media including registers, buffers or caches, main memory, RAM, etc.; and data transmission media including computer network, point-to-point telecommunication, and carrier wave transmission media. In a UNIX-based embodiment, the software modules may be embodied in a file which may be a device, a terminal, a local or remote file, a socket, a network connection, a signal, or other expedient of communication or state change. Other new and various types of computer-readable media may be used to store and\/or transmit the software modules discussed herein.","Overall Architecture","The software running the various processors of router  normally includes three major components: operating system, inter-processor and inter-node communications, and management and control applications. The operating system should provide standard facilities for supporting program operation, communications, and system management tasks.","An important aspect of any software architecture is its underlying inter-process communications (IPC) mechanism. IPCs that provide for the isolation of tasks are preferable. Such IPCs use message passing as their preferred communication. Message passing allows for full, but isolated interaction among tasks. To the rest of the system, a task, no matter how complex, is reduced to a simple producer and consumer of messages. Such a software architecture provides a set of well defined services, each accessed through one or more messages. Though sometimes visible to other tasks, in one embodiment, none of a given task's variables and structures should be accessible outside its context. Limiting task interactions to message passing and keeping runtime variables private to each task allows individual software components to evolve independently and in parallel.","In order to keep code generic (i.e., system-and processor-independent), the message-based IPC should also provide a consistent application programming interface (API) that doesn't rely on any system-specific features or attributes. The API should have the same syntax and behavior, regardless of the underlying operating system, processor, or message-passing mechanism used. With certain generating systems, for example, message queues are used to implement the IPC, while on other kernels, pipes might be more appropriate. Preferably, then, the API should provide the following services to the application code:\n\n","The last service, name lookup and registration, makes it possible for communicating entities to reference one another using names rather than task ID's, which are system-dependent.","Resource Manager","A resource manager (RM) is the software module responsible for collecting information about available resources and monitoring their status during normal system operation. A resource is used generically in this document to refer to any manageable hardware element that performs one or more system functions. The RM builds its resource list from unsolicited information received from other modules in the system, and from periodic keep-alive messages exchanged with those modules. The RM, for example, is the first system application notified of card failures, insertions, and removals.","In one embodiment of router , there are two RM versions in the system. The first, which runs on the level-1 processor, is responsible for managing system resources and, in some cases, network-wide resources. The other version, which runs on level-2 processors, is responsible for managing resources in a single shelf. This multi-level hierarchy creates a flexible and expandable system where lower-level resource managers are custom designed for the specific shelf controlled.","The RM maintains information about a given resource in a structure called the Resource Control Block (RCB). The RCB consists of two main sections: a generic section, which is the same for all resources regardless of type, and a resource-specific section that varies according to resource type. All resource managers maintain a hierarchical list of resource control blocks that represents resources under their control. The list is referred to herein as the resource list and reflects the resources' hierarchy and their interdependencies. This allows the RM to determine, relatively quickly, the effect a given resource's failure has on other members of the hierarchy.","The router  preferably runs one or more versions of the Unix operating system on the level-1 processor and the level-2 processors (in the I\/O and matrix shelves). Level-2 processors preferably run a real-time version of the Unix operating system (OS). Other processors (e.g., level-3, route, quad, and matrix-node processors) preferably run a single task that does not require the services of an operating system or kernel. While Unix operating systems are described herein as being preferable, any one or a number of operating systems may be used.","System Controller","The system controller is responsible for overall system management and control. The system controller uses a variety of protocols to communicate with other nodes in the network, including the operating system (OS). Some of the protocols satisfy specific requirements (e.g., in a SONET based system, the transfer of OAM&P message across the SONET\/SDH communications channels DCC), while others implement features, or functions, that are not part of the physical protocol used. To facilitate these functions, every router (one router, two, etc.) in a network is assigned an ID that uniquely identifies the given router within the network. The ID can also serve as a priority metric that determines the node's level within the hierarchy. However, the network can be configured to allow the user to override this by manually assigning priorities to network nodes. The system controller supports a number of tasks that perform management, control, and routing functions, including resource management, OS interfacing, various network protocol servers, and operations, control, and intermediate system services.","Matrix Shelf Processor","The matrix shelf processor is responsible for the overall operation of a single main matrix shelf. The matrix shelf processor communicates with the system controller, the route processor, and the microcontroller on each of the switch nodes, to provide local control and management for the shelf, including matrix configuration, diagnostics, and error reporting. The software on the matrix shelf processor preferably runs under a real-time Unix operating system. The RM on the matrix shelf processor is responsible for managing the hardware resources in its shelf. Like other resource managers in the system, the level-2 manager on this module uses a combination of hardware and software to discover and maintain a list of available shelf resources. A protocol may be implemented to support such messaging.","In one embodiment, fault isolation is implemented by a dedicated task that is responsible for locating failures within the shelf. In a SONET based implementation, the software running on the shelf processor, with help from the microcontroller on the switch node, to determine(s) the quality of any of the input signals.","Line Card Processor","The I\/O Module terminates an input signal from one of the other nodes in the network. For example, in a SONET-based implementation, a single SONET\/SDH OC-48 signal is terminated by an I\/O module, although other signal levels (OC-192, OC-12, and so on) may be supported. In one embodiment, the software consists of two threads, one that runs in the background and is responsible for non-time critical tasks. The other thread, which runs at the interrupt level, is responsible for all real-time aspects of the software, including limited overhead processing, alarm detection and forwarding, and fault detection and recovery. The I\/O module maintains a copy of its firmware and startup code onboard.","While particular embodiments of the present invention have been shown and described, it will be obvious to those skilled in the art that, based upon the teachings herein, changes and modifications may be made without departing from this invention and its broader aspects and, therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore, it is to be understood that the invention is solely defined by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and its numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1B","b":"1"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":"1"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":"1"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 17","b":"14"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 18","b":"14"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 21"},"The use of the same reference symbols in different drawings indicates identical items unless otherwise indicated."]},"DETDESC":[{},{}]}
