---
title: System and method for creating and maintaining data records to improve accuracy thereof
abstract: In a system which receives, from different sources, data having various formats, the received data is selected and combined in accordance with the invention to create accurate records. Specifically, the inventive system organizes the received data into uniform data records having a predetermined format. The data in the uniform data records is converted, if necessary, to conform to a predetermined nomenclature, resulting in normalized data records. The normalized data records are grouped into sets of equivalent records. For each set, the inventive system selects relatively accurate data from the equivalent records in the set to create a final record.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06970880&OS=06970880&RS=06970880
owner: Metro One Telecommunications, Inc.
number: 06970880
owner_city: Beaverton
owner_country: US
publication_date: 20011114
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims priority of provisional application Ser. No. 60\/314,722 filed on Aug. 24, 2001.","The invention relates to a system and method for creating and maintaining data records. More particularly, the invention relates to a system and method for processing data from different sources which is in various formats to create records.","It is a common experience to call a telephone operator at a call center for information assistance. In a typical information assistance call, a customer identifies to the operator the name and address of a party whose telephone number is desired. In response, the operator locates the desired destination number using a computer database and the destination number is provided to the customer.","Typically, the computer database includes data from various data providers. These data providers may be telecommunication companies, such as Pacific Bell, GTE, or AT&T, to name a few. The data usually includes records having listing names, addresses, and telephone numbers of individuals and businesses throughout the United States and other countries. When processing millions of records (e.g., telephone listings) the reliability of the records becomes an issue. For example, a 5% error rate in data, comprising 300,000,000 records, yields 15,000,000 erroneous records. Since each data provider submits similar data, combining data from the various data providers is useful in creating accurate records. However, combining data is not easy because each data provider uses a different data format and the quality of data varies from provider to provider. Often data among the various data providers is inconsistent. For example, data representing a listing Diana Elizabeth Nicholls of 20 West 64TH Street from one data provider may look like Nicholls, Diana E. of 20 W 64th St from another data provider. Even though these listings represent the same person, the differences in format and nomenclature make it difficult for a computer database to determine whether the listings represent the same person or entity, and to combine and compare data. Accordingly, there is a need for a technique for processing data having various formats, which effectively selects and combines the data to create accurate records.","In accordance with the invention, after data (e.g., telephone directory listing data) in various formats is received from different sources (e.g., telecommunications companies), the data is organized into records having a predetermined format. The resulting data in the predetermined format is checked, and converted, if necessary, to conform to a predetermined nomenclature. Once the data in the records are in the predetermined format and in conformance to the predetermined nomenclature, the records are grouped into sets of potentially equivalent records. For example, each set pertains to a listing of a telephone directory. The actually equivalent records are then identified for each set. Data fields in the identified records in the set which are relatively accurate are selected to form a final record concerning the listing to which the set pertains.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["102","102","102"]},"System  may be a computer, for example, a PC type computer, which is capable of communicating with data providers over the Internet, intranet, and other networks. As shown in , system  includes processor , memory , and communications interface . Memory  contains, among others, converter routines A\u2013E, application programming interface (API) routine , normalized database , data masher routines - through -, and output database .","In this instance, the data providers are telecommunication companies such as AT&T, GTE, and Pacific Bell. The source data includes records that are used by an information assistance system. For example, the source data can include names, addresses, and telephone numbers of people in various regions of the country or world.","It should be realized that system  can provide service concurrently to many computers, such as those operated by data providers and information assistance providers.","Operationally, various data providers send large amounts of source data, via a computer network, to system . For example, converter routines A\u2013E within system  convert the source data, from the various data providers, to a predetermined format to form uniform data, in a manner described below. Instructed by converter routines A\u2013E, system  combines source data from the various data providers to create records for use in, for example, the well known information directory assistance service. Additionally, system  provides the capability of adding and deleting records, without having to reprocess all of the uniform data. In general the routines in system  comprise computer-executable code (i.e. processing instructions), which are used to build a database of records, and add and delete one or more records in the database. The routines are stored in memory  generically representing here one or more computer memories such as floppy disks, hard disks, CD-ROMs, Flash RAMs, other ROMs and RAMs, or a combination thereof.","Communications interface , which is conventional, connects system  to data providers' computers, via the Internet, pursuant to the well-known transmission control protocol\/Internet protocol (TCP\/IP). Communications interface , includes multiple data channels for receiving the source data from the various data providers. The received source data is processed according to their corresponding converters routines A\u2013E in a manner described below. Communications interface  also includes a standard interface with various information assistance systems. It should be realized that data from the various data providers can be downloaded into system  via CDROM, floppy disks, tape, and\/or other high and low density storage mediums.","Normalized database  includes a relational database, e.g., Oracle8i, which is capable of creating and running queries, adding rows, creating tables and new users, modifying data, exporting or importing data, storing and reading data in a table format, creating and writing reports and macros, to name only a few functions. To manage the large amount of source data, normalized database  is sectioned into 50 normalized tables corresponding to 50 States in the United States. It should be realized that sectioning the normalized tables into States is for convenience and that database  can be sectioned differently, if sectioned at all. It should also be realized the particular number of normalized tables and States is for illustrative purposes and the number of tables can be increased, for example, to include representation of the provinces of Canada.  illustrates Normalized Table , which maintains source data from the various data providers that are associated with a State.","Like normalized database , output database  includes a relational database, e.g., Oracle8i, which is sectioned into tables corresponding to 50 States in the United States of America. Again, it should be realized that sectioning the tables into States is for convenience and that output database  can be sectioned differently, if at all.  also illustrates a Final Table , which maintains output data that is associated with a State.","It should be realized that databases  and  are illustrated separately, but may be combined into one database or expanded to three or more databases. Normalized database  and output database  reside in memory  and are coupled to the other modules, such as API routine , data masher routines - through -, converter routines A\u2013E, and communications interface , by communication busses within system .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3","b":["102","104","104","116","302","310","104","104","102","104","104","122","302","310","102","104","104"]},"The data providers from time to time send source data arranged in a nonuniform format, such as, city name, telephone number, listing name, address, facsimile numbers, URLs, etc. For example, data provider  may provide source data record  having a telephone number in two telephone number fields , . On the other hand, data provider  may provide source data record  in  having the same telephone number in three separate telephone number fields, namely, field  containing a number plan area (NPA) (also known as an area code), field  containing a three-digit prefix, and field  containing the remaining four digits. In addition, data provider  may provide source data record  having address fields structured with house number and street name in separate fields  and , respectively, while data provider  may provide source data record  having a single address field  with fields having the complete address.","Source data records  and  are processed using the respective converter routines to form the corresponding uniform data records  in  in  both in the uniform format. By way of example, the uniform format in this instance is such that all address information is arranged in a single address field. To that end converter routines A\u2013E arrange all address data in a source data record that is not in a single address field, e.g., fields  and  in record , into a single address field in uniform data record, e.g., field  in record . However, the address information, which has already been arranged in a single address field, such as field  of source data record , it does not have to be changed because it is already consistent with the uniform format and can be directly transferred to field location . In addition, the uniform format in this instance requires that a telephone number in a source data record be arranged in two telephone number fields in a uniform data record, e.g., fields  and  in record , and, e.g., fields  and  in record . To that end, converter routines A\u2013E rearrange the data into two fields, such as in fields  and . If the data provider  provides source data having telephone numbers in two telephone number fields  and , then converter routine A\u2013E will not rearrange the telephone numbers, such as in the case of telephone number fields  and . The resulting uniform data records are stored in Uniform Data location  in .","In addition, converter routines A\u2013E instruct processor  to assign predetermined field identifiers to the uniform data record fields , , , ,  and . The predetermined identifiers indicate the order of which the fields are arranged in Uniform Data location  and in Normalized Data location , after the uniform data is normalized in a manner described below.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 5","b":["106","110","118","120","106","122","122","112","1","112","50","302","310","104","104","106"]},"Additionally, API routine  instructs processor  to add or delete one or more new uniform records and accordingly set one or more status flags in normalized database . For example, instructed by API routine , when processor  receives one or more new uniform records from the converter process, processor  sets the status of a Changed Flag in location  to \u201cYes\u201d. The status \u201cYes\u201d indicates that a new uniform record has been added or deleted. Similarly, when processor  adds or deletes one or more normalized records, processor  sets the status of the Changed Flag to \u201cYes\u201d. API routine  also instructs processor  to communicate to one or more data masher routines - through - the need to either add or delete the record, which is described in detail below.","Each source record from a data provider includes art identifier, which is unique to the source record and is provided by the data provider. Because the data provider may use the same identifiers every time it sends source records to system , processor  assigns its own series of identifiers, namely, primary key indexes, to the source records so that the new source records can be distinguished from the previous source records. In this instance, a primary key index, e.g., a 64-bit value, is used for indexing, updating and searching for source, uniform and normalized data records. The primary key indexes are stored in location .","After a particular data provider sends new source data and it is converted to uniform data, processor  queries normalized database  for the largest primary key index value in location  associated with the particular data provider. Once the largest index value is identified, new uniform data records are stored in uniform data location  in association with new indexes, having sequentially higher values than the identified largest index value. Thus, any data attributed to the particular data provider that has an index value less than or equal to the identified largest index value represents previous data, which may be deleted if so desired.","Instructed by router routine , processor  routes all of the uniform data and normalized data to the appropriate Normalized Table  based upon which State the record is associated with. The data in the State field within the normalized record identifies which State the record is associated with and which one of normalized tables - through - in  to store the normalized data.","Normalizer routine  is used to convert uniform data to normalized data in accordance with a predetermined nomenclature. This stems from the fact that the various data providers \u2013 often provide data of similar type in different nomenclatures. For example, one data provider may provide data representing the State of California as \u201cCa\u201d and a second data provider may provide data representing the State of California as \u201cCalifornia\u201d. Because this data may be used later on in a comparison process, it is converted to conform to the predetermined nomenclature, such as \u201cCA\u201d.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 6","b":["230","232","236","238","230","110","112"]},"Generally, normalizing data involves reading uniform data, checking for conformity among the uniform data and, where necessary., converting the uniform data into the predetermined nomenclature. Normalizer routine  instructs processor  to read the uniform data and separate the uniform data into components, to prepare the uniform data for changes and conversion to normalized data. Processor  may separate an address into components representing a house or building number, street name, street type, apartment number, etc.","Referring back to , uniform data record  has an address 20 WEST 64th Street, which is separated into the following components (A) 20 (B) WEST (C) 64th (D) Street. Although uniform data record  has the same address, it is indicated as 20 w 64TH St., which is similarly separated into components: (A) 20 (B) w (C) 64 TH (D) ST. The separated components may be converted to conform to the predetermined nomenclature, if necessary. The conversion may include substituting words (abbreviations) and correcting words (correcting abbreviations), resulting in normalized data records  and  in , respectively. Thus, for example, the addresses in address fields  and , which conform to the same predetermined nomenclature, are now identical. In this example, the telephone numbers in fields  and  in uniform data record , and those in fields  and  in uniform data record , do not have to be normalized because they already conform to the predetermined nomenclature and are directly transferred to fields  and  in the respective normalized data records.","Additionally, normalizer routine  may instruct processor  to remove extensions from the end of telephone numbers. Extensions can be a phone number (alpha or digit) and anything from 1 to 4 digits, ignoring white space. The telephone number is analyzed and checked if it contains letters that need to be substituted for numbers. If a letter substitution would yield a reasonable telephone number and 1 to 7 letter substitutions would yield 7 total digits, then the substitutions are performed, otherwise the record is considered invalid.","After the telephone numbers are normalized, API routine  can also instruct processor  to perform NPA splits. For example, a telecommunications carrier may change an entire area code, or change the area code for half of telephone numbers in a State to a new area code. In the example where they change the area code of half the telephone numbers in a State, the data provider can send to system  a file of NPAs that are changed. The normalized data records containing the changed area codes are added to Normalized Data location  and eventually reprocessed by processor , in accordance with instructions from a data masher routine.","In addition, the normalized data records are checked for validity. Each normalized data record in Normalized Data location  is associated with a Valid Record Flag in location , which indicates whether a particular normalized data record is valid or invalid. API routine  instructs processor  to query normalized database  to set the Valid Record Flags in location  to either \u201cYes\u201d or \u201cNo.\u201d For example, if a normalized data record has a 13-digit telephone number it is considered invalid and the associated Valid Record Flag is set to \u201cNo.\u201d On the other hand, if the telephone number is 10 digits long, the associated Valid Record Flag is set to \u201cYes.\u201dThus, when data masher routines - through - are processing normalized data records, invalid normalized data records are identified based on the statuses of the Valid Record Flags, and not included in the process.","Additionally, normalizer routine  may check normalized data records for accuracy. For example, telephone numbers and addresses can be checked for accuracy by cross-referencing the data with United States Postal Service (USPS) data. The USPS data is stored in normalized database .","Other examples of normalizing listing names involve normalizer routine  instructing processor  to perform various functions, such as camel-backing the listing, removing odd characters, and removing white space from the extremities of the listing name. Camel-backing is converting data that is in uppercase to lower case, while leaving the first letter in uppercase. It should be realized that normalization standards can change, and, for example, as problems with data are identified, normalizer routine  can be reconfigured to solve the problems and the data can be renormalized. The logic used by normalizer routine  to perform these functions is stored in a table in normalized database . Changing the logic in the table results in reconfiguration of normalizer routine .","Normalizing a city name involves the city name being camel-backed, white space is removed or added, and odd characters are removed or added (e.g., for example \u201c23 Ave\u201d or \u201c23th Ave\u201d are both changed to read \u201c23Ave\u201d). The city name may also be broken apart into its city name and quadrant (if applicable). The quadrant can include N, S, E, W, NE, NW, SE and SW. ZIP codes are analyzed by determining whether the ZIP is 5 digits, or 4 digits.","Secondary normalizer routine  may be used to fix data within the records that were not normalized properly or that were not identified as needing normalization during the initial normalization process by normalizer routine . It should be realized that all data is reviewed for possible normalization, but occasionally a normalization problem is identified that requires renormalization of data. Secondary normalizer routine  includes the logic for instructing processor  to reconfigure the normalization process within normalizer routine  and for performing other tasks, such as querying normalized database .","Sometimes an error in the data is identified by information assistance personnel. After discovering one such error (e.g. an incorrect city abbreviation), the personnel notifies an administrator of system . Referring to , the administrator of system , via a user interface, can enter a reconfiguration scheme into system . Secondary normalizer routine  instructs processor  to reconfigure a configuration table with the reconfiguration scheme, and query the uniform data in Uniform Data location  that need to be renormalized. The routine instructs processor  to send the uniform data to normalizer routine  for renormalization. The uniform data is renormalized, which includes modifying uniform data that was not previously identified as requiring normalization. After the uniform data is renormalized into normalized data, the normalized data is stored in Normalized Data location .","Last Normalized Date  is a location that stores a date and time when a uniform data record was normalized by normalizer routine . Because the configuration of normalizer routine  can change, the date and time also represents the configuration version that normalizer routine  used when that uniform data record was normalized. Associating dates and times with uniform data records allows for secondary normalizer routine  to instruct processor  to query normalized database  for uniform data records based upon a selected date and time. For example, if data was changed on Oct. 23, 2001 at 7:35 AM, then all the uniform data records with a last normalized date before this date and time are normalized a second time. In situations where there is a need to change the normalization process and therefore renormalize all of uniform data, secondary normalizer routine  instructs processor  to query normalized database  to search location  for uniform data records having a last normalized date that predates the current normalized date, and instructs processor  to normalize such uniform data records.","Generally, when processor  normalizes the uniform data, it sets the Changed Flags in location  associated with the resulting normalized records to \u201cYes\u201d, and updates the last normalized date in location  to the current date and time. It is anticipated that a data masher routine, say, routine - later on instructs processor  to search normalized database  for the normalized data records having a Changed Flag set to \u201cYes,\u201d and to further process them in a manner described below.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 7","b":["102","112","1","112","50","122","108","122","114","112","1","112","50"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 8","b":["112","1","112","1","122","602","108","214","214","212","122"]},"At step , processor  determines whether the normalized data records within a set of potentially equivalent normalized data records are actually equivalent. Processor  makes such a determination by assigning a confidence level value to every normalized data record in the set. The confidence level is necessary because, for example, two normalized data records can have the same telephone numbers, states, listing names, zip codes, but different addresses. A field-by-field comparison of these two normalized data records would indicate that these records are different, when, in fact, the only difference between normalized data records is the address.","Confidence level values are assigned to the potentially equivalent normalized data records to determine whether the normalized data records are equivalent. For example, the higher the confidence level the more likely the normalized data records are equivalent and the more likely the fields will be shared to construct a record. Processor  compares each normalized data record within a set to the other normalized data records in the set, on a field-by-field basis, and determines whether the normalized data records are equivalent, based upon their confidence level values. Every time data within two similar fields are found to be identical, the confidence level increases. The greater count of identical fields, the higher the confidence level value. For example if four out of five fields are identical, then the confidence level value is four, which is considered high and, thus it is concluded that equivalent normalized data records exist.","It should be noted that in another embodiment, the field-to-field comparison of normalized data is enhanced by use of a SOUNDEX algorithm, which determines whether corresponding words in normalized data records are sound-equivalent. This stems from my observation that data providers may rely on voice recognition technology to perform source data entry. That is, the source data is entered based on a machine's recognition of a person's utterance thereof. For example, a town named \u201cSunnyvale\u201d may have been incorrectly entered textually by a voice-to-text converter as \u201cSunnyveil\u201d because of their identical pronunciation. Thus, by also using the SOUNDEX algorithm in the field-to-field comparison, the corresponding words from two normalized data records which would otherwise be considered different because of their textual differences may be considered the same when it is determined that they are sound-equivalent.","In addition, if normalized data from the address fields from two normalized data records are compared and it is determined that there is a difference between the data (e.g., \u201cSunnyvale\u201d vs. \u201cSunnyveil\u201d), the aforementioned USPS database may be cross-referenced to determine which normalized data is correct, which improves the accuracy of the record.","Data masher routine - utilizes a threshold level value for determining whether the confidence levels have reached a minimum level of acceptance. The threshold level value is a predetermined value that the confidence level values must equal or exceed for processor  to consider normalized data records equivalent. All the normalized data records within a set of potentially equivalent normalized data records that are determined to have confidence level values that equal or exceed the threshold level value are considered equivalent.","Once equivalent normalized data records are identified, at step  processor  identifies, for each data field, the highest ranked data field of all the corresponding data fields in the equivalent records. In this instance, the highest ranked data field is contributed by the data provider having the highest reliability ranking with respect to such a field. To that end, the data providers are ranked for each data field in terms of their reliability with respect to the field. Such reliability rankings are based upon past ratings of the accuracy of data contributed by the respective providers to the field. The reliability rankings are stored in a table (not shown) in memory . For example, if a particular data provider is known for providing extremely accurate street names, fields with street names from this data provider are assigned a relatively high ranking associated therewith. If this same data provider is known for providing inaccurate city names, fields with city names from this data provider are assigned a relatively low ranking associated therewith.","Specifically, processor  retrieves the reliability rankings from the table, groups the fields and associated ranking values by \u201cfield type,\u201d and selects the highest ranking value and associated normalized data for each \u201cfield type\u201d. The \u201cfield type\u201d refers to the category of the field, e.g., street name and city name. Thus, for example, processor  selects those normalized data in the street name field, the city name field, and other fields contributed by their respective highest ranked data providers. Processor  at step  combines the selected data to create a final record.","The final record is stored in Output Data location , and is assigned a primary key index in location . Each of the normalized data records contributing to the final record is assigned an output index which is the same as the primary key index of the final record, and which is stored in Output Index location . Accordingly, if an incorrect final record is identified in Output Data location , the contributing normalized data records can be readily determined by relating the primary key index of the incorrect final record to their same output index.","When a particular normalized data record is to be deleted, API routine  instructs processor  to query normalized database  to set the associated Changed Flag in location  to \u201cYes\u201d and initiate data masher routine -, removing the deleted normalized data record from consideration. Data masher routine - instructs processor  to perform steps \u2013 without contribution from the deleted normalized data record. This process yields a second final record that has data selected from one or more equivalent normalized data records, with no regard for the deleted normalized data record. This second final record may or may not be same as the previous final record. Processor  then sets the associated Changed Flag to \u201cNo,\u201d and a new primary key index value is assigned to the second final record. The new primary key index and the second final record are stored in locations  and , respectively, in Final Table .","When a particular normalized data record is to be added, API routine  instructs processor  to query normalized database  to set the associated Changed Flag to \u201cYes\u201d, and initiate data masher routine -, taking the newly-added normalized data record into consideration. Processor  then performs steps \u2013 with the newly-added normalized data record included. This process yields a third final record that has data selected from one or more equivalent normalized data records, including the newly-added normalized data record. This third final record may or may not be the same as the previous final record. Data masher routine - then instructs processor  to set the associated Changed Flag to \u201cNo,\u201d and a new primary key index value is assigned to the record. The new primary key index and the third final record are stored in locations  and , respectively, in Final Table .","The above presents various principles and features of the invention through descriptions of various embodiments. It is understood that skilled artisans can make various changes and modifications to the embodiments without departing from the spirit and scope of this invention, which is defined by the following claims."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 4C and 4D"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 4E and 4F"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 8","FIG. 1"]}]},"DETDESC":[{},{}]}
