---
title: Application programming interface techniques for accessing operating system resources
abstract: An operating system includes APIs developed in part to support recent innovations in computer hardware and in part to provide enhanced services to application programs. Among their other features, these APIs provide access to operating system functionality in a manner that is comprehensive, efficient, usable, extendible and, in some cases, reusable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07730500&OS=07730500&RS=07730500
owner: Microsoft Corporation
number: 07730500
owner_city: Redmond
owner_country: US
publication_date: 20041130
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO PRIOR APPLICATIONS","FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. patent application Ser. No. 08\/354,491, filed Dec. 13, 1994, entitled \u201cMethod and System for Accessing Operating System Resources,\u201d by inventors Chee Heng Chew et al., now U.S. Pat. No. 6,826,758, which is hereby incorporated herein by reference.","The field relates to computer software development, and more particularly relates to application program interfaces (APIs) that facilitate use of operating system resources by application programs and computer hardware.","The field of software development has undergone substantial evolution in the 50 years since its inception. An early form of software simply abstracted and represented hardware functions in a \u201chuman readable\u201d form known as assembly language code. Special purpose application programs could then be written in such code to command the computer to perform an organized set of operations.","Assembly language coding has several drawbacks. One is that the code required to carry out a particular function has to be specifically included in each program needing that function: dozens of software developers might write code (or at least copy code) for a single function dozens of times for dozens of programs. A second drawback to assembly language coding is that programmers must understand the computer's internal hardware resources: as hardware is changed, so must the programmers' software programs.","To address these and other difficulties, the software necessary to operate a computer was soon split into two classes: operating system software, and applications software.","Operating system software (sometimes termed simply \u201cthe operating system\u201d) is a set of computer code that performs a variety of functions, including interacting with the computer hardware; insulating the programmer from the specifics of the computer hardware; and providing general functionality (\u201cresources\u201d) that many application programs require.","Applications software (sometimes terms \u201capplications\u201d), in contrast, addresses a particular problem to be solved. Examples of applications software are word processors and accounting programs. Applications software and operating systems communicate using a series of standardized instruction codes passed between the two. The operating system software interprets these standardized instruction codes, and controls the computer's hardware resources in response thereto. Oftentimes, information in the form of data or messages is passed back to the applications software. In this manner, the operating system software\u2014once written\u2014effects most direct control of the hardware, allowing the application software programmer to focus on the particular problem sought to be solved. (Alternatively, application software can still include assembly language code\u2014directly controlling the computer hardware and bypassing the operating system. This may be done for speed or control, or simply to provide functionality not supported by the operating system.)","The relationship between operating system software, applications software and hardware is not always clearly defined. Over the last several decades, each has evolved rapidly. As was noted above, operating systems sometimes evolve to include functions common to several applications. Similarly, operating systems are sometimes modified to include functionality previously provided only in hardware and visa-versa. For example, data compression can be done in software (by an operating system or application) and in hardware (by a specialized chip). Essentially, the three technologies have developed together in response to user demand and advances in technology.","A specific factor driving the evolution of operating system software has been the desire to simplify and speed application software development. Application software development can be a daunting task, sometimes requiring hundreds of man-years of effort for a sophisticated program. For a popular operating system such as Microsoft\u00ae Windows\u2122, applications software developers may write thousands of different applications each year to execute on the Windows operating system. The investment in application development time is large. One incentive to create such programs is to provide good support for the application software through the operating system. This requires building a coherent and usable base for applications developers to work with.","Often, development of application software can be made simpler by making the operating system more complex. That is (as noted above), if a function may be useful to several different application programs, it is better to write it once for inclusion in the operating system, than requiring dozens of software developers to write it dozens of times for inclusion in dozens of different applications. In this manner, if the operating system supports a wide range of common functionality required by a number of applications, significant savings in applications software development costs and time can be achieved.","Another factor driving the continuing evolution of operating system software is the ongoing development of faster and more sophisticated computer hardware\u2014both in the computer's central processing unit (CPU) and in its peripheral devices (e.g. printers). New CPUs typically offer enhanced instruction sets that enable certain new operations to be performed, or enable old operations to be performed more quickly. Corresponding enhancements are usually made to the operating system to afford applications access to these new CPU capabilities.","The relationship between operating systems and hardware has also driven the development of a special class of software: device drivers. Peripheral devices usually do not communicate directly with the operating system. Instead, such devices usually communicate with device driver software, which in turn communicate with the operating system. A device driver thus serves as a software interface between operating system software and peripheral device hardware. The specific requirements of a particular hardware device are often handled by the device driver, making the details transparent to the operating system. A computer system typically employs many different device drivers, e.g. one for the display, one for the printer, one for the mouse, etc.","Often, a new peripheral device can be supported just by writing a new device driver tailored to exploit its hardware; no revision to the operating system is required as long as the operating system recognizes and can communicate with the device driver. Sometimes, however, significant gains in functionality and efficiency can be achieved by upgrading an operating system's facilities for interacting with device drivers (and thus with the peripheral hardware).","It is clear that for a useful and accomplished operating system, the interfaces between the operating system and the computer hardware and application software are as important as efficient internal operation of the operating system itself.","The present invention is directed to improvements in computer operating systems. In particular, the invention concerns certain Applications Program Interfaces (APIs). APIs are mechanisms by which applications software can request services from the operating system, including certain hardware operations and access to various operating system resources. APIs also serve as the means by which messages and information provided by the operating system is relayed back to the applications software for its use. (Device drivers sometimes make use of operating system APIs as well. For expository convenience, the present specification refers to software that makes use of APIs simply as \u201capplications software\u201d\u2014it being understood that this usage encompasses device drivers as well.)","The evolution of APIs tracks that of computers generally. The first operating systems provided only limited collections of APIs, which were actually more in the nature of user (operator) interfaces (e.g. Print Screen) than application interfaces. As the functionality provided by computers via operating systems increased, so did the number of APIs available to access this increased functionality.","Generally, operating systems are developed for use with a specific (CPU). Thereafter, the operating system can be used on any computer that uses that or a compatible CPU, regardless of which manufacturer produced the computer, or minor idiosyncrasies in its design.","Likewise, application programs are generally developed for use with a specific operating system. To the extent that two operating systems support the same API sets, an application program is \u201cportable\u201d and can be executed on either system.","Contemporary operating systems are provided with rich sets of APIs\u2014sometimes numbering in the hundreds of operating system calls and responsive messages\u2014greatly facilitating the task of the application software development.","When implementing an API set for a new operating system or function, the straightforward approach is to write an API for each operating system function or resource that may be required by an application program or hardware device. More commonly, however, operating system APIs are developed in the process of enhancing an existing operating system. In this context, the straightforward approach is to take the predecessor operating system's API set and make use of those APIs whenever possible in the new operating system. The prior APIs can be patched or extended, where necessary, to take advantage of\u2014for example\u2014new hardware capabilities.","The foregoing design philosophies may be characterized largely as rote: i.e. following old ways, with old calls, old formats, and old parameters. Technically superior operating systems distinguish themselves by inventiveness beyond the rote. Invention in the interface can manifest itself in many ways: breaking out of the comfort of the old in favor of a new or unfamiliar approach; devising new operating system functions from the feature set of old CPU hardware; making existing operating system functions available in a more meaningful or efficient manner (with the same hardware); anticipating application program and hardware component needs not yet felt and laying groundwork to facilitate their eventual support, etc.","The APIs detailed in the present application are those for the Microsoft\u00ae Windows 95\u2122 (earlier known as Chicago) operating system. These APIs were developed in part to support recent innovations in computer hardware, and in part to provide enhanced services to application programs.","As those skilled in the art will recognize, the Windows 95 APIs reflect many inventive improvements over those of its predecessor operating systems\u2014not just in terms of raw functionality provided by the improved operating system, but also in the manner the enhanced functionality of the Windows 95 operating system is made available for use by application programs and hardware components. Among their other features, these APIs provide access to the Windows 95 operating system functionality in a manner that is comprehensive, efficient, usable, extendible and, in some cases, reusable.","The foregoing and additional features of the present invention will be more readily apparent from the following detailed description, which proceeds with reference to the accompanying drawings.","In the Microsoft Windows family of operating systems (as in many operating systems from other vendors), the \u201cwindow\u201d is a central feature. To the user, it is the visual feature through which all interaction\u2014both with applications and with the operating system\u2014occurs. On a software level, it is the \u201cobject\u201d through which most control\/communication between the operating system and an application occurs.","Rudimentary to windows are icons. Icons are small bit maps that can be used for a variety of purposes, one of the most familiar of which is to represent Windows application programs that are available for execution. It is not unusual for a dozen or more icons to be displayed in a window.","The Windows 95 operating system includes a variety of new APIs and functions that facilitate display of icons (and other bitmaps) in windows. While such functionality could, to some degree, be achieved in prior versions of the Windows operating system, the APIs of the present invention provide significant advantages, including efficiencies in coding of application programs and faster execution.","In Windows 95, windows are created in generally the same manner as in predecessor versions of the Windows operating system, namely by use of the CreateWindow API. One of the parameters passed during invocation of this function is the window \u201cclass.\u201d In Windows 95, a new class of window has been defined, termed \u201clist view control\u201d (or simply \u201clist view\u201d). To create a list view window, CreateWindow is invoked with a specification of \u201cWC_LISTVIEW\u201d as the window class. (The list view window class is registered in the application's address space when the common controls dynamic-link library (DLL) is loaded.)","By requesting creation of a window of the \u201clist view\u201d class, the application programmer can use a rich set of new controls in displaying, arranging, and manipulating bit maps in the window. (The bit maps can, but need not, be icons.)","After creation, or manipulation, the application programmer can request that the window be presented on the screen by use of standard Windows operating system functions, e.g. the ShowWindow API.","The foregoing will be clearer from the following detailed analysis of the Windows 95 List View Controls, which is taken from documentation provided to software developers to enable them to use these new APIs, macros, and functions.","About List View Controls","A list view control is a window that displays a collection of items, each item consisting of an icon and a label. List views provide several ways of arranging items and displaying individual items. For example, additional information about each item can be displayed in columns to the right of the icon and label.","The application programmer can create a list view control by calling the CreateWindow or CreateWindowEx function, specifying the WC_LISTVIEW window class. This window class is registered when the common controls dynamic-link library (DLL) is loaded. To ensure that this DLL is loaded, the application programmer can use the InitCommonControls function.","An application sends messages to a list view control to add, remove, arrange, and otherwise manipulate items. Each message has a macro that the application programmer can use instead of sending the message explicitly.","Like most common controls, a list view control sends notification messages to its parent window in the form of WM_NOTIFY messages.","Views and Styles","List view controls can display their contents in four different ways, called views. The current view is specified by the control's window style. Additional window styles specify the alignment of items and control-specific aspects of the list view control's functionality. Information about the four views follows.",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"View","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Icon view","Specified by the LVS_ICON"]},{"entry":[{},{},"window style."]},{"entry":[{},{},"Each item appears as a full-sized"]},{"entry":[{},{},"icon with a label below it. The"]},{"entry":[{},{},"user can drag the items to any"]},{"entry":[{},{},"location in the list view window."]},{"entry":[{},"Small icon view","Specified by the LVS_SMALLICON"]},{"entry":[{},{},"window style."]},{"entry":[{},{},"Each item appears as a small icon"]},{"entry":[{},{},"with the label to the right of it."]},{"entry":[{},{},"The user can drag the items to"]},{"entry":[{},{},"any location."]},{"entry":[{},"List view","Specified by the LVS_LIST"]},{"entry":[{},{},"window style."]},{"entry":[{},{},"Each item appears as a small icon"]},{"entry":[{},{},"with a label to the right of it."]},{"entry":[{},{},"Items are arranged in columns"]},{"entry":[{},{},"and cannot be dragged to any"]},{"entry":[{},{},"arbitrary location by the user."]},{"entry":[{},"Report view","Specified by the LVS_REPORT"]},{"entry":[{},{},"window style."]},{"entry":[{},{},"Each item appears on its own line"]},{"entry":[{},{},"with information arranged in"]},{"entry":[{},{},"columns. The leftmost column"]},{"entry":[{},{},"contains the small icon and label,"]},{"entry":[{},{},"and subsequent columns contain"]},{"entry":[{},{},"subitems as specified by the"]},{"entry":[{},{},"application. Unless the"]},{"entry":[{},{},"LVS_NOCOLUMNHEADER window"]},{"entry":[{},{},"style is also specified, each"]},{"entry":[{},{},"column has a header."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The application programmer can change the view type after a list view control is created. To retrieve and change the window style, use the GetWindowLong and SetWindowLong functions. To isolate the window styles that correspond to the current view, use the LVS_TYPEMASK value.","The application programmer can control the way items are arranged in icon or small icon view by specifying one of the following window styles: LVS_ALIGNTOP (the default style), LVS_ALIGNBOTTOM, LVS_ALIGNLEFT, or LVS_ALIGNRIGHT. The application programmer can change the alignment after a list view control is created. To isolate the window styles that specify the alignment of items, use the LVS_ALIGNMASK value.","Additional window styles control other options\u2014for example, whether a user can edit labels in place, whether more than one item can be selected at a time, and so on.","List View Image Lists","The icons for list view items are contained in image lists, which the application programmer creates and assigns to the list view control. One image list contains the full-sized icons used in icon view, and a separate image list contains smaller versions of the same icons for use in other views. The application programmer can also specify a third image list that contains state images, which are displayed next to an item's icon to indicate an application-defined state.","The application programmer assigns an image list to a list view control by using the LVM_SETIMAGELIST message, specifying whether the image list contains large icons, small icons, or state images. The application programmer can use the GetSystemMetrics function to determine appropriate dimensions for large and small icons, and the ImageList_Create function to create the image lists. For more information about image lists, see the discussion in documents CCTL321.DOC, CCTL322.DOC, DOC2.DOC, and WIN32UPD.DOC in the SDK\/DDK documentation published by Microsoft on Oct. 28, 1994 (copy available in the application file).","The application programmer can retrieve the handle of an image list currently assigned to a list view control by using the LVM_GETIMAGELIST message.","The large and small icon image lists typically contain icons for each type of list view item. The application programmer need not create both of these image lists if only one is used\u2014for example, if a list view control is never in icon view. If the application programmer creates both image lists, they must contain the same images in the same order because a single value is used to identify a list view item's icon in both image lists.","The large and small icon image lists can also contain overlay images, which are designed to be superimposed on item icons. A nonzero value in bits  through  of a list view item's state specifies the one-based index of an overlay image (zero indicates no overlay image). Because a 4-bit, one-based index is used, overlay images must be among the first 15 images in the image lists. For more information about list view item states, see the discussion of \u201cItem States\u201d in documents CCTL321.DOC, CCTL322.DOC, DOC2.DOC, and USER323.DOC in the cited SDK\/DDK documentation.","If a state image list is specified, a list view control reserves space to the left of each item's icon for a state image. An application can use state images, such as checked and cleared check boxes, to indicate application-defined item states. A nonzero value in bits  through  specifies the one-based index of a state image (zero indicates no state image). State images are typically not used in icon view.","By default, a list view control destroys the image lists assigned to it when it is destroyed. If a list view control has the LVS_SHAREIMAGELISTS window style, however, the application is responsible for destroying the image lists when they are no longer in use. The application programmer should specify this style if he or she assigns the same image lists to multiple list view controls; otherwise, more than one control might try to destroy the same image list.","Items and SubItems","Each item in a list view control consists of an icon, a label, a current state, and an application-defined value. One or more subitems can also be associated with each item. A subitem is a string that, in report view, can be displayed in a column to the right of an item's icon and label. All items in a list view have the same number of subitems. By using list view messages, the application programmer can add, modify, retrieve information about, and delete items. The application programmer can also find items with specific attributes.","The LV_ITEM structure defines a list view item or subitem. The iItem member is the zero-based index of the item. The iSubItem member is the one-based index of a subitem, or zero if the structure contains information about an item. Additional members specify the item's text, icon, state, and item data. Item data is an application-defined value associated with a list view item.","To add an item to a list view control, use the LVM_INSERTITEM message, specifying the address of an LV_ITEM structure. Before adding multiple items, the application programmer can send the control an LVM_SETITEMCOUNT message, specifying the number of items the control will ultimately contain. This message enables the list view control to reallocate its internal data structures only once rather than every time the application programmer adds an item. The application programmer can determine the number of items in a list view control by using the LVM_GETITEMCOUNT message.","To change the attributes of a list view item, use the LVM_SETITEM message, specifying the address of an LV_ITEM structure. The mask member of this structure specifies the item attributes the application programmer wants to change. To change only the text of an item or subitem, use the LVM_SETITEMTEXT message.","To retrieve information about a list view item, use the LVM_GETITEM message, specifying the address of the LV_ITEM structure to fill in. The mask member specifies the item attributes to retrieve. To retrieve only an item or subitem's text, the application programmer can use the LVM_GETITEMTEXT message.","To delete a list view item, use the LVM_DELETEITEM message. The application programmer can delete all items in a list view control by using the LVM_DELETEALLITEMS message.","Item States","An item's state is a value that specifies the item's availability, indicates user actions, or otherwise reflects the item's status. A list view control changes some state bits, such as when the user selects an item. An application might change other state bits to disable or hide the item, or to specify an overlay image or state image. For more information about overlay images and state images, see \u201cList View Image Lists,\u201d above.","An item's state is specified by the state member of the LV_ITEM structure. When the application programmer specifies or changes an item's state, the stateMask member specifies which state bits the application programmer wants to change. The application programmer can change an item's state by using the LVM_SETITEMSTATE message. The application programmer can specify an item's state when the application programmer creates it or when he or she changes its attributes by using the LMV_SETITEM message. To determine an item's current state, use the LVM_GETITEMSTATE or LVM_GETITEM message.","To set an item's overlay image, the stateMask member of the LV_ITEM structure must include the LVIS_OVERLAYMASK value, and the state member must include the one-based index of the overlay image shifted left 8 bits by using the INDEXTOOVERLAYMASK macro. The index can be zero to specify no overlay image.","To set an item's state image, the stateMask member of the LV_ITEM structure must include the LVIS_STATEIMAGEMASK value, and the state member must include the one-based index of the state image shifted left 12 bits by using the INDEXTOSTATEIMAGEMASK macro. The index can be zero to specify no state image.","Callback Items and the Callback Mask","A callback item is a list view item for which the application\u2014rather than the control\u2014stores the text, icon, or both. Although a list view control can store these attributes, the application programmer may want to use callback items if the application already maintains some of this information. The callback mask specifies which item state bits are maintained by the application, and it applies to the whole control rather than to a specific item. The callback mask is zero by default, meaning that the control tracks all item states. If an application uses callback items or specifies a nonzero callback mask, it must be able to supply list view item attributes on demand.","A list view control requests any information it needs to display an item by sending its owner window an LVN_GETDISPINFO notification message. The specified LV_DISPINFO structure identifies the item or subitem and indicates which attributes the application must supply. If item attributes or state bits that are maintained by the application change, the list view control sends its owner window an LVN_SETDISPINFO notification message. This notification enables the application to update its information.","If the application programmer changes a callback item's attributes, the application programmer can use the LVM_UPDATE message to force the control to repaint the item. This message also arranges the list view control if it has the LVS_AUTOARRANGE style. The application programmer can use the LVM_REDRAWITEMS message to redraw a range of items by invalidating the corresponding portions of the list view's client area.","The application programmer can define a callback item by specifying appropriate values for the pszText and iImage members of the LV_ITEM structure. If the application maintains the item's or subitem's text, specify the LPSTR_TEXTCALLBACK value for the pszText member. If the application keeps track of the icon for the item, specify the I_IMAGECALLBACK value for the iImage member.","To set the callback mask for a list view control, use the LVM_SETCALLBACKMASK message. A one bit in the callback mask means the application maintains the corresponding state bit for each list view item. To get the current callback mask, use the LVM_GETCALLBACKMASK message.","By effectively using callback items and the callback mask, the application programmer can ensure that each item attribute is maintained in only one place. Doing this can simplify the application, but the only space saved is the memory that would otherwise be required to store item labels and subitem text.","The application programmer can save a more significant amount of memory by creating a list view control with the LVS_NOITEMDATA window style. A list view control with this style keeps track of the number of items it contains, but it does not save any information about each item. In effect, every item is a callback item. However, the application programmer must observe the following limitations when using LVS_NOITEMDATA:\n\n","Columns control the way items and their subitems are displayed in report view. Each column has a title and width, and it is associated with a specific subitem (subitem zero is the item's icon and label). The attributes of a column are defined by an LV_COLUMN structure.","To add a column to a list view control, use the LVM_INSERTCOLUMN message. To delete a column, use the LVM_DELETECOLUMN message. The application programmer can retrieve and change the properties of an existing column by using the LVM_GETCOLUMN and LVM_SETCOLUMN messages.","To retrieve or change a column's width, use the LVM_GETCOLUMNWIDTH and LVM_SETCOLUMNWIDTH messages. The application programmer can determine the minimum column width necessary to display all of a string by using the LVM_GETSTRINGWIDTH message.","Unless the LVS_NOCOLUMNHEADER window style is specified, column headers appear in report view. The user can click a column header, causing an LVN_COLUMNCLICK notification message to be sent to the parent window. Typically, the parent window sorts the list view by the specified column when this occurs. The user can also drag the column guides between the headers to size the columns.","Arranging, Sorting, Finding","The application programmer can use list view messages to arrange and sort items and to find items based on their attributes or positions. Arranging repositions items to align on a grid, but the indexes of the items do not change. Sorting changes the sequence of items (and their corresponding indexes) and then repositions them accordingly. The application programmer can arrange items only in icon and small icon views, but the application programmer can sort items in any view.","To arrange items, use the LVM_ARRANGE message. The application programmer can ensure that items are arranged at all times by specifying the LVS_AUTOARRANGE window style.","To sort items, use the LVM_SORTITEMS message. When the application programmer sorts using this message, the application programmer specifies an application-defined callback function that is called to compare the relative order of any two items. By supplying an appropriate comparison function, the application programmer can sort items by their label, by any subitem, or by any other property. Note that sorting items does not reorder the corresponding subitems. Thus, if any subitems are not callback items, the application programmer must regenerate the subitems after sorting.","The application programmer can ensure that a list view control is always sorted by specifying the LVS_SORTASCENDING or LVS_SORTDESCENDING window style. The application programmer cannot supply a comparison function when using these window styles. The list view sorts the items in ascending or descending order by label.","The application programmer can find a list view item with specific properties by using the LVM_FINDITEM message. The application programmer can find a list view item that is in a specified state and bears a specified geometrical relationship to a given item by using the LVM_GETNEXTITEM message. For example, the application programmer can retrieve the next selected item to the right of a specified item.","Item Position","Every list view item has a position and size, which the application programmer can retrieve and set using messages. The application programmer can also determine which item, if any, is at a specified position. The position of list view items is specified in view coordinates, which are client coordinates offset by the scroll position.","To retrieve and set an item's position, use the LVM_GETITEMPOSITION and LVM_SETITEMPOSITION messages. LVM_GETITEMPOSITION works for all views, but LVM_SETITEMPOSITION works only for icon and small icon views.","The application programmer can determine which item, if any, is at a particular location by using the LVM_HITTEST message.","To get the bounding rectangles for a list item or for only its icon or label, use the LVM_GETITEMRECT message.","Scroll Position","Unless the LVS_NOSCROLL window style is specified, a list view control can be scrolled to show more items than can fit in the client area of the control. The application programmer can get a list view's scroll position and related information, scroll a list view by a specified amount, or scroll a list view such that a specified list item is visible.","In icon view or small icon view, the current scroll position is defined by the view origin. The view origin is the set of coordinates, relative to the visible area of the list view, that correspond to the view coordinates (0, 0). To get the current view origin, use the LVM_GETORIGIN message. This message should be used only in icon or small icon view; it returns an error in list or report view.","In list view or report view, the current scroll position is defined by the top index. The top index is the index of the first visible item in the list view control. To get the current top index, use the LVM_GETTOPINDEX message. This message returns a valid result only in list or report view; it returns zero in icon or small icon view.","The application programmer can use the LVM_GETVIEWRECT message to get the bounding rectangle of all items in a list view control, relative to the visible area of the list view.","The LVM_GETCOUNTPERPAGE message returns the number of items that fit in one page of the list view. This message returns a valid result only in list control and report views; in icon and small icon views, it returns, the total number of items.","To scroll a list view control by a specific amount, use the LVM_SCROLL message. Using the LVM_ENSUREVISIBLE message, the application programmer can scroll the list view, if necessary, to ensure that a specified item is visible.","Label Editing","A list view control that has the LVS_EDITLABELS window style enables a user to edit item labels in place. The user begins editing by clicking the label of an item that has the focus. An application can begin editing automatically by using the LVM_EDITLABEL message. The list view control notifies the parent window when editing begins and when it is canceled or completed. When editing is completed, the parent window is responsible for updating the item's label, if appropriate.","When label editing begins, a list view control sends its parent window an LVN_BEGINLABELEDIT notification message. The application programmer can process this message to allow selective editing of specific labels; returning a nonzero value prevents label editing.","When label editing is canceled or completed, a list view control sends its parent window an LVN_ENDLABELEDIT notification message. The iParam parameter is the address of an LV_DISPINFO structure identifying the item and specifying the edited text. The parent window is responsible for updating the item's label, if appropriate, perhaps after validating the edited string. The iItem member is \u22121 if editing is canceled.","During label editing, the application programmer can get the handle of the edit control used for label editing by using the LVM_GETEDITCONTROL message. To limit the amount of text a user can enter, send the edit control an EM_LIMITTEXT message. The application programmer can even subclass the edit control to intercept and discard invalid characters. The edit control is created after the LVN_BEGINLABELEDIT notification message is sent.","List View Colors","An application can retrieve and set three colors for a list view control. To retrieve and set the text color, use the LVM_GETTEXTCOLOR and LVM_SETTEXTCOLOR messages. To retrieve and set the text background color, use the LVM_GETTEXTBKCOLOR and LVM_SETTEXTBKCOLOR messages. To retrieve and set the window background color, use the LVM_GETBKCOLOR and LVM_SETBKCOLOR messages.","Notification Messages","A list view control sends notification messages to its parent window in the form of WM_NOTIFY messages. The following table summarizes the notification messages sent by a list view control.",{"@attributes":{"id":"p-0093","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Notification message","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVN_BEGINDRAG","Signals the start of a drag-"]},{"entry":[{},{},"and-drop operation."]},{"entry":[{},"LVN_BEGINLABELEDIT","Signals the start of in-place"]},{"entry":[{},{},"label editing."]},{"entry":[{},"LVN_BEGINRDRAG","Signals the start of a drag-"]},{"entry":[{},{},"and-drop operation,"]},{"entry":[{},{},"using the right mouse button."]},{"entry":[{},"LVN_COLUMNCLICK","Indicates that the user"]},{"entry":[{},{},"clicked a column header"]},{"entry":[{},{},"in report view."]},{"entry":[{},"LVN_DELETEALLITEMS","Signals the deletion of"]},{"entry":[{},{},"all list view items."]},{"entry":[{},"LVN_DELETEITEM","Signals the deletion of"]},{"entry":[{},{},"a specific item."]},{"entry":[{},"LVN_ENDDRAG","Signals the end of a drag-"]},{"entry":[{},{},"and-drop operation"]},{"entry":[{},{},"that was handled by the"]},{"entry":[{},{},"list view control rather"]},{"entry":[{},{},"than its parent window."]},{"entry":[{},"LVN_ENDLABELEDIT","Signals the end of label"]},{"entry":[{},{},"editing."]},{"entry":[{},"LVN_ENDRDRAG","Signals the end of a drag-"]},{"entry":[{},{},"and-drop operation,"]},{"entry":[{},{},"using the right mouse"]},{"entry":[{},{},"button, that was handled"]},{"entry":[{},{},"by the list view control."]},{"entry":[{},"LVN_GETDISPINFO","Requests information that"]},{"entry":[{},{},"the list view control"]},{"entry":[{},{},"requires to display an item."]},{"entry":[{},"LVN_INSERTITEM","Signals the insertion of"]},{"entry":[{},{},"a new list view item."]},{"entry":[{},"LVN_ITEMCHANGED","Indicates that an item"]},{"entry":[{},{},"has changed."]},{"entry":[{},"LVN_ITEMCHANGING","Indicates that an item"]},{"entry":[{},{},"is in the process of"]},{"entry":[{},{},"changing, and enables"]},{"entry":[{},{},"the parent window to"]},{"entry":[{},{},"accept or deny the change."]},{"entry":[{},"LVN_KEYDOWN","Signals a keyboard event."]},{"entry":[{},"LVN_SETDISPINFO","Notifies a parent window"]},{"entry":[{},{},"that it must update the"]},{"entry":[{},{},"information it maintains"]},{"entry":[{},{},"for an item."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"The following table summarizes the message processing performed by a list view control. Messages specific to list view controls are discussed elsewhere and are, therefore, not included here.",{"@attributes":{"id":"p-0095","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Message","Processing performed"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["WM_CHAR","Searches for a list view"]},{"entry":[{},"item that begins with"]},{"entry":[{},"the specified character"]},{"entry":[{},"and, if found, selects and"]},{"entry":[{},"sets the focus to the item."]},{"entry":[{},"Multiple characters"]},{"entry":[{},"received within a time-out"]},{"entry":[{},"interval are concatenated,"]},{"entry":[{},"and the list view"]},{"entry":[{},"searches for an item"]},{"entry":[{},"that begins with the"]},{"entry":[{},"resulting string."]},{"entry":["WM_COMMAND","Processes the EN_UPDATE and"]},{"entry":[{},"EN_KILLFOCUS edit"]},{"entry":[{},"control notification"]},{"entry":[{},"messages, and forwards"]},{"entry":[{},"all other edit control"]},{"entry":[{},"notifications to the"]},{"entry":[{},"parent window."]},{"entry":["WM_CREATE","Performs additional"]},{"entry":[{},"initialization. If the"]},{"entry":[{},"LVS_SHAREIMAGELISTS"]},{"entry":[{},"window style is"]},{"entry":[{},"not specified, the list"]},{"entry":[{},"view control creates the"]},{"entry":[{},"icon and small icon image"]},{"entry":[{},"lists at this point."]},{"entry":["WM_DESTROY","Frees resources."]},{"entry":["WM_ERASEBKGND","Erases the window"]},{"entry":[{},"background using the"]},{"entry":[{},"current background"]},{"entry":[{},"color for the list view"]},{"entry":[{},"control. If the"]},{"entry":[{},"background color is the"]},{"entry":[{},"CLR_NONE value, the"]},{"entry":[{},"list view control"]},{"entry":[{},"forwards the message"]},{"entry":[{},"to the parent window."]},{"entry":["WM_GETDLGCODE","Returns a combination of the"]},{"entry":[{},"DLGC_WANTTAB and"]},{"entry":[{},"DLGC_WANTARROWS values."]},{"entry":["WM_GETFONT","Returns the handle of"]},{"entry":[{},"the current label font."]},{"entry":["WM_HSCROLL","Scrolls the list view"]},{"entry":[{},"horizontally."]},{"entry":["WM_KEYDOWN","Processes the SPACEBAR,"]},{"entry":[{},"ENTER, and arrow"]},{"entry":[{},"keys, and sends a"]},{"entry":[{},"LVN_KEYDOWN notification"]},{"entry":[{},"message to the parent window."]},{"entry":["WM_KILLFOCUS","Repaints the focused list"]},{"entry":[{},"item, if any, and sends"]},{"entry":[{},"a NM_KILLFOCUS"]},{"entry":[{},"notification message to the"]},{"entry":[{},"parent window."]},{"entry":["WM_LBUTTONDBLCLK","Sends the parent window"]},{"entry":[{},"an NM_DBLCLK"]},{"entry":[{},"notification message."]},{"entry":["WM_LBUTTONDOWN","Processed in different"]},{"entry":[{},"ways depending on"]},{"entry":[{},"whether a click or"]},{"entry":[{},"drag operation is being"]},{"entry":[{},"initiated. To determine"]},{"entry":[{},"which operation is"]},{"entry":[{},"involved, the control"]},{"entry":[{},"enters a modal message"]},{"entry":[{},"loop until either the"]},{"entry":[{},"button is released or the"]},{"entry":[{},"mouse is moved."]},{"entry":[{},"In the case of a click,"]},{"entry":[{},"the control may change"]},{"entry":[{},"which item has the focus"]},{"entry":[{},"and which items are"]},{"entry":[{},"selected, taking into"]},{"entry":[{},"account the cursor"]},{"entry":[{},"position, the state of"]},{"entry":[{},"the SHIFT and CTRL keys,"]},{"entry":[{},"and so on. Then the list"]},{"entry":[{},"view control sends its"]},{"entry":[{},"parent window an"]},{"entry":[{},"NM_CLICK notification"]},{"entry":[{},"message."]},{"entry":[{},"If dragging begins over"]},{"entry":[{},"an item, the control"]},{"entry":[{},"selects and sets the"]},{"entry":[{},"focus to the item. Then it"]},{"entry":[{},"sends an LVN_BEGINDRAG"]},{"entry":[{},"notification message to"]},{"entry":[{},"the parent window. The parent"]},{"entry":[{},"window is responsible"]},{"entry":[{},"for actually carrying out"]},{"entry":[{},"the drag operation."]},{"entry":[{},"If dragging begins"]},{"entry":[{},"over the window"]},{"entry":[{},"background, the control"]},{"entry":[{},"enters another modal"]},{"entry":[{},"message loop, enabling"]},{"entry":[{},"the user to form a"]},{"entry":[{},"rectangle by dragging"]},{"entry":[{},"the mouse. Items within"]},{"entry":[{},"the rectangle are selected."]},{"entry":["WM_NCCREATE","Allocates and initializes"]},{"entry":[{},"an internal data"]},{"entry":[{},"structure, and then"]},{"entry":[{},"calls the DefWindowProc"]},{"entry":[{},"function."]},{"entry":["WM_NCDESTROY","Frees resources allocated"]},{"entry":[{},"by the list view"]},{"entry":[{},"control. Unless the"]},{"entry":[{},"LVS_SHAREIMAGELISTS"]},{"entry":[{},"style is used, this"]},{"entry":[{},"includes deleting the image"]},{"entry":[{},"list and small image list."]},{"entry":["WM_NOTIFY","Processes header control"]},{"entry":[{},"notification messages."]},{"entry":["WM_PAINT","Displays any items in"]},{"entry":[{},"the update region. For"]},{"entry":[{},"callback items, the"]},{"entry":[{},"control first sends an"]},{"entry":[{},"LVN_GETDISPINFO"]},{"entry":[{},"notification message to"]},{"entry":[{},"the owner window"]},{"entry":[{},"to request display"]},{"entry":[{},"information."]},{"entry":["WM_RBUTTONDOWN","Processed the same"]},{"entry":[{},"way as the"]},{"entry":[{},"WM_LBUTTONDOWN"]},{"entry":[{},"message, except that"]},{"entry":[{},"the control sends"]},{"entry":[{},"an NM_RCLICK notification"]},{"entry":[{},"message (instead"]},{"entry":[{},"of NM_CLICK) and an"]},{"entry":[{},"LVN_BEGINRDRAG"]},{"entry":[{},"notification message"]},{"entry":[{},"(instead of LVN_BEGINDRAG)."]},{"entry":["WM_SETFOCUS","Repaints the focused"]},{"entry":[{},"list item, if any, and sends"]},{"entry":[{},"an NM_SETFOCUS"]},{"entry":[{},"notification message to the"]},{"entry":[{},"parent window."]},{"entry":["WM_SETFONT","Saves the specified"]},{"entry":[{},"font handle, forwards the"]},{"entry":[{},"message to the header"]},{"entry":[{},"window, if any, and"]},{"entry":[{},"repaints using the new font."]},{"entry":["WM_SETREDRAW","Turns redrawing on or off."]},{"entry":["WM_TIMER","Begins editing of an"]},{"entry":[{},"item label. If the user"]},{"entry":[{},"clicks the label of the"]},{"entry":[{},"focused item, the list"]},{"entry":[{},"view control sets a"]},{"entry":[{},"timer instead of entering edit"]},{"entry":[{},"mode immediately. The"]},{"entry":[{},"timer makes it possible"]},{"entry":[{},"for the control to not"]},{"entry":[{},"enter edit mode if the user"]},{"entry":[{},"double-clicks the label."]},{"entry":["WM_VSCROLL","Scrolls the list view"]},{"entry":[{},"vertically."]},{"entry":["WM_WINDOWPOSCHANGED","Updates the window scroll"]},{"entry":[{},"bars. If the current"]},{"entry":[{},"view is icon or small"]},{"entry":[{},"icon view and the"]},{"entry":[{},"LVS_AUTOARRANGE style"]},{"entry":[{},"is specified, the"]},{"entry":[{},"list view control also"]},{"entry":[{},"arranges the list items."]},{"entry":["WM_WININICHANGE","Processes changes to"]},{"entry":[{},"system metrics."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"This section contains examples demonstrating how to perform the following tasks:\n\n","To create a list view control, use the CreateWindow or CreateWindowEx function, specifying the WC_LISTVIEW window class. The list view window class is registered in the application's address space when the common controls dynamic-link library (DLL) is loaded. The application programmer can ensure that the DLL is loaded by using the InitCommonControls function.","The following example creates a list view control and then calls application-defined functions that add image lists, columns, and list view items. The window style specifies the control's initial view and other options. This example specifies report view, which enables the user to edit the labels of list view items.",{"@attributes":{"id":"p-0099","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ CreateListView - creates a list view control."},{"entry":"\/\/ Returns the handle of the new control if successful or NULL"},{"entry":"\/\/\u2003\u2002otherwise."},{"entry":"\/\/ hwndParent - handle of the control's parent window"},{"entry":"\/\/ pfData - file containing list view items"},{"entry":"HWND WINAPI CreateListView(HWND hwndParent, FILE *pfData)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HWND hwndLV;"]},{"entry":[{},"\/\/ Force the common controls DLL to be loaded."]},{"entry":[{},"InitCommonControls(\u2009);"]},{"entry":[{},"\/\/ Create the list view window."]},{"entry":[{},"hwndLV = CreateWindow(WC_LISTVIEW, \u201c\u201d,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WS_CHILD | LVS_REPORT | LVS_EDITLABELS,"]},{"entry":[{},"0, 0, CW_USEDEFAULT, CW_USEDEFAULT,"]},{"entry":[{},"hwndParent, NULL, g_hinst, NULL);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (hwndLV == NULL)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return NULL;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Call application-defined functions to initialize the"]},{"entry":[{},"\/\/ image lists, add columns, and add some items."]},{"entry":[{},"if (!InitListViewImageLists(hwndLV) |\u2009|"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"!InitListViewColumns(hwndLV) |\u2009|"]},{"entry":[{},"!InitListViewItems(hwndLV, pfData)) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DestroyWindow(hwndLV);"]},{"entry":[{},"return FALSE;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return hwndLV;","\/\/ return the control's handle"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"A list view control can have up to three image lists associated with it: one for item icons in large icon view, one for item icons in other views, and one for application-defined item states. The following example creates two image lists, adds an icon to each, and assigns them to a list view control by using the LVM_SETIMAGELIST message.",{"@attributes":{"id":"p-0101","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ InitListViewImageList - creates image lists for a list view."},{"entry":"\/\/ Returns TRUE if successful or FALSE otherwise."},{"entry":"\/\/ hwndLV - handle of the list view control"},{"entry":"BOOL WINAPI InitListViewImageLists(HWND hwndLV)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HICON hiconItem;","\/\/ icon for list view items"]},{"entry":[{},"HIMAGELIST himlLarge;","\/\/ image list for icon view"]},{"entry":[{},"HIMAGELIST himlSmall;","\/\/ image list for other views"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Create the large and small icon image lists."]},{"entry":[{},"himlLarge ="]},{"entry":[{},"ImageList_Create(GetSystemMetrics(SM_CXICON),"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"GetSystemMetrics(SM_CYICON), TRUE, 1, 1);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"himlSmall ="]},{"entry":[{},"ImageList_Create(GetSystemMetrics(SM_CXSMICON),"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"GetSystemMetrics(SM_CYSMICON), TRUE, 1, 1);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Add an icon to each image list."]},{"entry":[{},"hiconItem = LoadIcon(g_hinst,"]},{"entry":[{},"MAKEINTRESOURCE(IDI_ITEM));"]},{"entry":[{},"ImageList_AddIcon(himlLarge, hiconItem);"]},{"entry":[{},"ImageList_AddIcon(himlSmall, hiconItem);"]},{"entry":[{},"DeleteObject(hiconItem);"]},{"entry":[{},"\/\/ Assign the image lists to the list view control."]},{"entry":[{},"ListView_SetImageList(hwndLV, himlLarge, LVSIL_NORMAL);"]},{"entry":[{},"ListView_SetImageList(hwndLV, himlSmall, LVSIL_SMALL);"]},{"entry":[{},"return TRUE;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Columns appear only in report view, and they enable multiple pieces of information to be displayed for each list item. The application programmer can add columns to a list view control by using the LVM_INSERTCOLUMN message. Each item in a list view can have, in addition to its item text, any number of strings called subitems. When the application programmer adds a column to a list view, he or she specifies which subitem to display in the column.","Unless a list view has the LVS_NOCOLUMNHEADER window style, each column has a header showing the column name. The user can click the header and can size the columns using the header.","The following example adds several columns to a list view control. The column headings are defined as string resources, which are consecutively numbered starting with IDS_FIRSTCOLUMN (defined in the application's header file). The number of columns is defined in the application's header file as C_COLUMNS.",{"@attributes":{"id":"p-0105","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ InitListViewColumns - adds columns to a list view control."]},{"entry":[{},"\/\/ Returns TRUE if successful or FALSE otherwise."]},{"entry":[{},"\/\/ hwndLV - handle of the list view control"]},{"entry":[{},"BOOL WINAPI InitListViewColumns(HWND hwndLV)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"extern char g_achTemp[256];","\/\/ temporary buffer"]},{"entry":[{},"LV_COLUMN lvc;"]},{"entry":[{},"int iCol;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Initialize the LV_COLUMN structure."]},{"entry":[{},"lvc.mask = LVCF_FMT | LVCF_WIDTH |"]},{"entry":[{},"LVCF_TEXT | LVCF_SUBITEM;"]},{"entry":[{},"lvc.fmt = LVCFMT_LEFT;"]},{"entry":[{},"lvc.cx = 100;"]},{"entry":[{},"lvc.pszText = g_achTemp;"]},{"entry":[{},"\/\/ Add the columns."]},{"entry":[{},"for (iCol = 0; iCol < C_COLUMNS; iCol++) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"lvc.iSubItem = iCol;"]},{"entry":[{},"LoadString(g_hinst, IDS_FIRSTCOLUMN + iCol,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"g_achTemp, sizeof(g_achTemp));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (ListView_InsertColumn(hwndLV,"]},{"entry":[{},"iCol, &lvc) == \u22121)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return FALSE;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return TRUE;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"An application can add items to a list view control by using the LVM_INSERTITEM message. The attributes of a list view item that are specified by an LV_ITEM structure include a state, a label, an icon, and item data. Associated with each item may be one or more subitems, which are strings that appear to the right of an item in report view.","The example in this section adds a list view item for each line in a text file. Semicolons are assumed to separate the item label and the subitem strings that follow it. The example saves each item's label and subitem strings in a structure, which is defined as follows in the application's header file.",{"@attributes":{"id":"p-0108","num":"0115"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#define C_COLUMNS 6"]},{"entry":[{},"typedef struct myitem_tag {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LPSTR aCols[C_COLUMNS];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} MYITEM;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The application then fills in an LV_ITEM structure and adds a list view item by using the LVM_INSERTITEM message. Because the application saves the item label in its own application-defined MYITEM structure, it specifies the LPSTR_TEXTCALLBACK value for the pszText member of the LV_ITEM structure. Specifying this value causes the control to send an LVN_GETDISPINFO notification message to its owner window whenever it needs to display the item. The address of the application-defined structure is saved as item data.",{"@attributes":{"id":"p-0110","num":"0117"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ InitListViewItems - adds a items and subitems to a list view."},{"entry":"\/\/ Returns TRUE if successful or FALSE otherwise."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\/\/ hwndLV - ","handle of the list view control"]},{"entry":["\/\/ pfData - ","text file containing list view items with columns"]},{"entry":["\/\/ ","separated by semicolons"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"BOOL WINAPI InitListViewItems(HWND hwndLV, FILE *pfData)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"extern char g_achTemp[256];","\/\/ temporary buffer"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PSTR pszStart;"]},{"entry":[{},"PSTR pszEnd;"]},{"entry":[{},"int iItem;"]},{"entry":[{},"int iSubItem;"]},{"entry":[{},"LV_ITEM lvi;"]},{"entry":[{},"\/\/ Initialize LV_ITEM members that are common to all items."]},{"entry":[{},"lvi.mask = LVIF_TEXT | LVIF_IMAGE | LVIF_PARAM | LVIF_STATE;"]},{"entry":[{},"lvi.state = 0;"]},{"entry":[{},"lvi.stateMask = 0;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"lvi.pszText = LPSTR_TEXTCALLBACK;","\/\/ app. maintains text"]},{"entry":[{},"lvi.iImage = 0;","\/\/ image list index"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Read each line in the specified file."]},{"entry":[{},"for (iItem = 0;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"fgets(g_achTemp, sizeof(g_achTemp), pfData);"]},{"entry":[{},"iItem++) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Allocate an application-defined structure to store the"]},{"entry":[{},"\/\/ item label and the text of each subitem."]},{"entry":[{},"MYITEM *pItem = LocalAlloc(LPTR, sizeof(MYITEM));"]},{"entry":[{},"\/\/ Copy the first string (the label)."]},{"entry":[{},"pszEnd = strchr(g_achTemp, \u2018;\u2019);"]},{"entry":[{},"*pszEnd = \u2018\\0\u2019;"]},{"entry":[{},"pItem\u2212>aCols[0] = DupString(g_achTemp);"]},{"entry":[{},"\/\/ Copy subsequent strings (subitems)."]},{"entry":[{},"for (iSubItem = 1;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"iSubItem < C_COLOMNS && pszEnd != NULL;"]},{"entry":[{},"iSubItem++) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pszStart = pszEnd + 1;"]},{"entry":[{},"if ((pszEnd = strchr(pszStart, \u2018;\u2019)) != NULL)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"*pszEnd = \u2018\\0\u2019;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pItem->aCols[iSubItem] = DupString(pszStart);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Initialize item-specific LV_ITEM members."]},{"entry":[{},"lvi.iItem = iItem;"]},{"entry":[{},"lvi.iSubItem = 0;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"lvi.lParam = (LPARAM) pItem;","\/\/ item data"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Add the item."]},{"entry":[{},"ListView_InsertItem(hwndLV, &lvi);"]},{"entry":[{},"\/\/ There is no need to set the text of the subitems. They"]},{"entry":[{},"\/\/ default to LPSTR_TEXTCALLBACK."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return TRUE;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/\/ DupString - allocates a copy of a string."},{"entry":"\/\/ lpsz - address of the null-terminated string to copy"},{"entry":"LPSTR DupString(LPSTR lpsz)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int cb = lstrlen(lpsz) + 1;"]},{"entry":[{},"LPSTR lpszNew = LocalAlloc(LMEM_FIXED, cb);"]},{"entry":[{},"if (lpszNew != NULL)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CopyMemory(lpszNew, lpsz, cb);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return lpszNew;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"A list view control notifies its parent window of events by sending a WM_NOTIFY message. The wParam parameter is the identifier of the control, and the lParam parameter is the address of an NMHDR structure (or to a larger structure, which has an NMHDR structure as its first member). The example in this section processes the LVN_GETDISPINFO, LVN_ENDLABELEDIT, and LVN_COLUMNCLICK notification messages.","A list view control sends the LVN_GETDISPINFO notification message to retrieve information about an item or subitem from the parent window. This notification is sent, for example, when an item with the LPSTR_TEXTCALLBACK value needs to be displayed.","A list view control sends the LVN_ENDLABELEDIT notification message when the user completes or cancels editing of an item's label. This notification is only sent if the list view has the LVS_EDITLABELS window style. If editing is being canceled, the parent window typically does nothing. If editing is being completed, the parent window should set the item label to the new text unless the item label is LPSTR_TEXTCALLBACK. In that case, the parent window should simply update the application-defined data it maintains for the list item.","A list view control sends the LVN_COLUMNCLICK notification message if the user clicks a column header in report view. Typically, an application sorts a list view by the specified column when this clicking occurs. To sort, use the LVM_SORTITEMS message, specifying an application-defined comparison function.","The following example shows the portion of the application's window procedure that processes the WM_NOTIFY message.",{"@attributes":{"id":"p-0116","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"case WM_NOTIFY:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Branch depending on the specific notification message."]},{"entry":[{},"switch (((LPNMHDR) lParam)\u2212>code) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Process LVN_GETDISPINFO to supply information about"]},{"entry":[{},"\/\/\u2002\u2003callback items."]},{"entry":[{},"case LVN_GETDISPINFO:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Main_OnGetDispInfo((LV_DISPINFO *) lParam);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Process LVN_ENDLABELEDIT to change item labels after"]},{"entry":[{},"\/\/\u2003\u2002in-place editing."]},{"entry":[{},"case LVN_ENDLABELEDIT:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return Main_OnEndLabelEdit("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(LV_DISPINFO *) lParam"]},{"entry":[{},");"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Process LVN_COLUMNCLICK to sort items by column."]},{"entry":[{},"case LVN_COLUMNCLICK:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#define pnm ((NM_LISTVIEW *) lParam)"]},{"entry":[{},"ListView_SortItems("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pnm\u2212>hdr.hwndFrom,"]},{"entry":[{},"ListViewCompareFunc,"]},{"entry":[{},"(LPARAM) (pnm\u2212>iSubItem)"]},{"entry":[{},");"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#undef pnm"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"break;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The following example shows the application-defined functions that the window procedure uses to process list view notification messages.",{"@attributes":{"id":"p-0118","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Main_OnGetDispInfo - processes the LVN_GETDISPINFO"},{"entry":"\/\/\u2003\u2002notification message."},{"entry":"\/\/ pnmv - value of lParam (points to an LV_DISPINFO structure)"},{"entry":"VOID WINAPI Main_OnGetDispInfo(LV_DISPINFO *pnmv)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Provide the item or subitem's text if requested."]},{"entry":[{},"if (pnmv\u2212>item.mask & LVIF_TEXT) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MYITEM *pItem = (MYITEM *) (pnmv\u2212>item.lParam);"]},{"entry":[{},"lstrcpy(pnmv\u2212>item.pszText,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pItem\u2212>aCols[pnmv\u2212>item.iSubItem]);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/\/ Main_OnEndLabelEdit - processes the LVN_ENDLABELEDIT"},{"entry":"\/\/\u2003\u2002notification message."},{"entry":"\/\/ Returns TRUE if the label is changed or FALSE otherwise."},{"entry":"\/\/ pnmv - value of lParam (points to an LV_DISPINFO structure)"},{"entry":"BOOL Main_OnEndLabelEdit(LV_DISPINFO *pnmv)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MYITEM *pItem;"]},{"entry":[{},"\/\/ The item is \u22121 if editing is being canceled."]},{"entry":[{},"if (pnmv\u2212>item.iItem == \u22121)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return FALSE;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Copy the new text to the application-defined structure,"]},{"entry":[{},"\/\/ a pointer to which is saved as item data."]},{"entry":[{},"pItem = (MYITEM *) (pnmv\u2212>item.lParam);"]},{"entry":[{},"pItem\u2212>aCols[0] = (PSTR) LocalReAlloc("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(HLOCAL) (pItem\u2212>aCols[0]),"]},{"entry":[{},"lstrlen(pnmv\u2212>item.pszText) + 1,"]},{"entry":[{},"LMEM_MOVEABLE"]},{"entry":[{},");"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"lstrcpy(pItem\u2212>aCols[0], pnmv\u2212>item.pszText);"]},{"entry":[{},"\/\/ No need to set the item text, because it is a callback item."]},{"entry":[{},"return TRUE;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/\/ ListViewCompareFunc - sorts the list view control. It is a"},{"entry":"\/\/\u2003\u2002comparison function."},{"entry":"\/\/ Returns a negative value if the first item should precede the"},{"entry":"\/\/\u2003\u2002second item, a positive value if the first item should"},{"entry":"\/\/\u2003\u2002follow the second item, and zero if the items are equivalent."},{"entry":"\/\/ lParam1 and lParam2 - item data for the two items (in this"},{"entry":"\/\/\u2003\u2002case, pointers to application-defined MYITEM structures)"},{"entry":"\/\/ lParamSort - value specified by the LVM_SORTITEMS message"},{"entry":"\/\/\u2003\u2002(in this case, the index of the column to sort)"},{"entry":"int CALLBACK ListViewCompareFunc ("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LPARAM lParam1,"]},{"entry":[{},"LPARAM lParam2,"]},{"entry":[{},"LPARAM lParamSort)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MYITEM *pItem1 = (MYITEM *) lParam1;"]},{"entry":[{},"MYITEM *pItem2 = (MYITEM *) lParam2;"]},{"entry":[{},"\/\/ Compare the specified column."]},{"entry":[{},"int iCmp = lstrcmpi(pItem1\u2212>aCols[lParamSort],"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pItem2\u2212>aCols[lParamSort]);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Return the result if nonzero. Otherwise, compare the"]},{"entry":[{},"\/\/ first column."]},{"entry":[{},"return (iCmp != 0) ? iCmp :"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"lstrcmpi(pItem1\u2212>aCols[0], pItem2\u2212>aCols[0]);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"An application can change the window style of a list view control after it is created by using the GetWindowLong and SetWindowLong functions. The following example changes the style bits that govern the view mode.",{"@attributes":{"id":"p-0120","num":"0127"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Setview - sets a list view's window style to change the view."},{"entry":"\/\/ hwndLV - handle of the list view control"},{"entry":"\/\/ dwView - value specifying a view style"},{"entry":"VOID WINAPI SetView(HWND hwndLV, DWORD dwView)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Get the current window style."]},{"entry":[{},"DWORD dwStyle = GetWindowLong(hwndLV, GWL_STYLE);"]},{"entry":[{},"\/\/ Only set the window style if the view bits have changed."]},{"entry":[{},"if ((dwStyle & LVS_TYPEMASK) != dwView)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"SetWindowLong(hwndLV, GWL_STYLE,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(dwStyle & ~LVS_TYPEMASK) | dwView);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The list view messages, notification messages, and structures can be grouped as follows.","Items and Subitems",{"@attributes":{"id":"p-0122","num":"0000"},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":["LV_ITEM","LVM_DELETEALLITEMS","LVM_DELETEITEM","LVM_GETITEM","LVM_GETITEMCOUNT","LVM_GETITEMSTATE","LVM_GETITEMTEXT","LVM_INSERTITEM","LVM_SETITEM","LVM_SETITEMCOUNT","LVM_SETITEMSTATE","LVM_SETITEMTEXT\n\nCallback Items\n","LV_DISPINFO","LVM_GETCALLBACKMASK","LVM_REDRAWITEMS","LVM_SETCALLBACKMASK","LVM_UPDATE","LVN_GETDISPINFO","LVN_SETDISPINFO\n\nColumns\n","LV_COLUMN","LVM_DELETECOLUMN","LVM_GETCOLUMN","LVM_GETCOLUMNWIDTH","LVM_GETSTRINGWIDTH","LVM_INSERTCOLUMN","LVM_SETCOLUMN","LVM_SETCOLUMNWIDTH","LVN_COLUMNCLICK\n\nArranging, Sorting, and Finding\n","LV_FINDINFO","LVM_ARRANGE","LVM_FINDITEM","LVM_GETNEXTITEM","LVM_SORTITEMS\n\nItem Positions and Scrolling\n","LV_HITTESTINFO","LVM_ENSUREVISIBLE","LVM_GETCOUNTPERPAGE","LVM_GETITEMPOSITION","LVM_GETITEMRECT","LVM_GETORIGIN","LVM_GETTOPINDEX","LVM_GETVIEWRECT","LVM_HITTEST","LVM_SCROLL","LVM_SETITEMPOSITION\n\nColors\n","LVM_GETBKCOLOR","LVM_GETTEXTBKCOLOR","LVM_GETTEXTCOLOR","LVM_SETBKCOLOR","LVM_SETTEXTBKCOLOR","LVM_SETTEXTCOLOR\n\nMiscellaneous\n","LV_KEYDOWN","LVM_CREATEDRAGIMAGE","LVM_EDITLABEL","LVM_GETEDITCONTROL","LVM_GETIMAGELIST","LVM_SETIMAGELIST","LVN_BEGINDRAG","LVN_BEGINLABELEDIT","LVN_BEGINRDRAG","LVN_DELETEALLITEMS","LVN_DELETEITEM","LVN_ENDDRAG","LVN_ENDLABELEDIT","LVN_ENDRDRAG","LVN_INSERTITEM","LVN_ITEMCHANGED","LVN_ITEMCHANGING","LVN_KEYDOWN","NM_LISTVIEW\n\nMessages\n"]}},"An application sends messages to a list view control to alter its appearance, add or change items and columns, and so on. Each message has a corresponding macro, which the application programmer can use instead of sending the message explicitly.","LVM_ARRANGE",{"@attributes":{"id":"p-0124","num":"0199"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_ARRANGE"]},{"entry":[{},"wParam = (WPARAM) (int) code;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL Listview_Arrange (HWND hwnd, UINT code);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Arranges items in icon view. The application programmer can send this message explicitly or by using the ListView_Arrange macro.\n\n",{"@attributes":{"id":"p-0126","num":"0204"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVA_ALIGNBOTTOM","Aligns items along the"]},{"entry":[{},{},"bottom edge of the window."]},{"entry":[{},"LVA_ALIGNLEFT","Aligns items along the"]},{"entry":[{},{},"left edge of the window."]},{"entry":[{},"LVA_ALIGNRIGHT","Aligns items along the"]},{"entry":[{},{},"right edge of the window."]},{"entry":[{},"LVA_ALIGNTOP","Aligns items along the"]},{"entry":[{},{},"top edge of the window."]},{"entry":[{},"LVA_DEFAULT","Aligns items according"]},{"entry":[{},{},"to the list view's current"]},{"entry":[{},{},"alignment styles (the"]},{"entry":[{},{},"default value)."]},{"entry":[{},"LVA_SNAPTOGRID","Snaps all icons to the"]},{"entry":[{},{},"nearest grid position."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":{"@attributes":{"id":"ul0008-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":"The sort flag, if specified, sorts items by text in ascending or descending order. It can be the LVA_SORTASCENDING or LVA_SORTDESCENDING value.\n\nLVM_CREATEDRAGIMAGE\n"}}}},{"@attributes":{"id":"p-0127","num":"0206"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"LVM_CREATEDRAGIMAGE"},{"entry":"wParam = (WPARAM) (int) iItem;"},{"entry":"lParam = (LPARAM) (LPPOINT) lpptUpLeft;"},{"entry":"\/\/ Corresponding macro"},{"entry":"HIMAGELIST ListView_CreateDragImage (HWND hwnd, int iItem,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LPPOINT lpptUpLeft);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Creates a drag image list for the specified item. The application programmer can send this message explicitly or by using the ListView_CreateDragImage macro.\n\n",{"@attributes":{"id":"p-0129","num":"0211"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_DELETEALLITEMS"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_DeleteAllItems(HWND hwnd);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Removes all items from a list view control. The application programmer can send this message explicitly or by using the ListView_DeleteAllItems macro.\n\n",{"@attributes":{"id":"p-0131","num":"0215"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_DELETECOLUMN"]},{"entry":[{},"wParam = (WPARAM) (int) iCol;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_DeleteColumn(HWND hwnd, int iCol);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Removes a column from a list view control. The application programmer can send this message explicitly or by using the ListView_DeleteColumn macro.\n\n",{"@attributes":{"id":"p-0133","num":"0219"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_DELETEITEM"]},{"entry":[{},"wParam = (WPARAM) (int) iItem;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_DeleteItem(HWND hwnd, int iItem);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Removes an item from a list view control. The application programmer can send this message explicitly or by using the ListView_DeleteItem macro.\n\n",{"@attributes":{"id":"p-0135","num":"0223"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_EDITLABEL"]},{"entry":[{},"wParam = (WPARAM) (int) iItem;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"HWND ListView_EditLabel(HWND hwnd, int iItem);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Begins in-place editing of the specified list view item's text. The message implicitly selects and focuses the specified item. The application programmer can send this message explicitly or by using the ListView_EditLabel macro.\n\n","When the user completes or cancels editing, the edit control is destroyed and the handle is no longer valid. The application programmer can safely subclass the edit control, but do not destroy it. To cancel editing, the application programmer can send the list view control a WM_CANCELMODE message.","LVM_ENSUREVISIBLE",{"@attributes":{"id":"p-0138","num":"0228"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"LVM_ENSUREVISIBLE"},{"entry":"wParam = (WPARAM) (int) iItem;"},{"entry":"lParam = (LPARAM) (BOOL) fPartialOk;"},{"entry":"\/\/ Corresponding macro"},{"entry":"BOOL ListView_EnsureVisible(HWND hwnd, int i, BOOL fPartialOK);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Ensures that a list view item is entirely or at least partially visible, scrolling the list view control if necessary. The application programmer can send this message explicitly or by using the ListView_EnsureVisible macro.\n\n",{"@attributes":{"id":"p-0140","num":"0233"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_FINDITEM"]},{"entry":[{},"wParam = (WPARAM) (int) iStart;"]},{"entry":[{},"lParam = (LPARAM) (const LV_FINDINFO FAR *) plvfi;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"int ListView_FindItem(HWND hwnd, int iStart,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"const LV_FINDINFO FAR* plvfi);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Searches for a list view item with specified characteristics. The application programmer can send this message explicitly or by using the ListView_FindItem macro.\n\n",{"@attributes":{"id":"p-0142","num":"0239"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETBKCOLOR"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"COLORREF ListView_GetBkColor(HWND hwnd);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Retrieves the background color of a list view control. The application programmer can send this message explicitly or by using the ListView_GetBkColor macro.\n\n",{"@attributes":{"id":"p-0144","num":"0243"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETCALLBACKMASK"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"UINT ListView_GetCallbackMask(HWND hwnd);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Retrieves the callback mask for a list view control. The application programmer can send this message explicitly or by using the ListView_GetCallbackMask macro.\n\n",{"@attributes":{"id":"p-0146","num":"0247"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETCOLUMN"]},{"entry":[{},"wParam = (WPARAM) (int) iCol;"]},{"entry":[{},"lParam = (LPARAM) (LV_COLUMN FAR *) pcol;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_GetColumn(HWND hwnd, int iCol,"]},{"entry":[{},"LV_COLUMN FAR* pcol);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Retrieves the attributes of a list view control's column. The application programmer can send this message explicitly or by using the ListView_GetColumn macro.\n\n",{"@attributes":{"id":"p-0148","num":"0253"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETCOLUMNWIDTH"]},{"entry":[{},"wParam = (WPARAM) (int) iCol;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"int ListView_GetColumnWidth(HWND hwnd, int iCol);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Retrieves the width of a column in report view or list view. The application programmer can send this message explicitly or by using the ListView_GetColumnWidth macro.\n\n",{"@attributes":{"id":"p-0150","num":"0257"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETCOUNTPERPAGE"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"int ListView_GetCountPerPage(HWND hwnd);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Calculates the number of items that can fit vertically in the visible area of a list view control when in list view or report view. The application programmer can send this message explicitly or by using the ListView_GetCountPerPage macro.\n\n",{"@attributes":{"id":"p-0152","num":"0261"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETEDITCONTROL"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"HWND ListView_GetEditControl(HWND hwnd, int i);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Retrieves the handle of the edit control being used to edit a list view item's text. The application programmer can send this message explicitly or by using the ListView_GetEditControl macro.\n\n","When the user completes or cancels editing, the edit control is destroyed and the handle is no longer valid. The application programmer can safely subclass the edit control, but do not destroy it. To cancel editing, the application programmer can send the list view a WM_CANCELMODE message.","The list view item being edited is the currently focused item\u2014that is, the item in the focused state. To find an item based on its state, use the LVM_GETNEXTITEM message.","LVM_GETIMAGELIST",{"@attributes":{"id":"p-0156","num":"0267"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"LVM_GETIMAGELIST"},{"entry":"wParam = (WPARAM) (int) iImageList;"},{"entry":"lParam = 0;"},{"entry":"\/\/ Corresponding macro"},{"entry":"HIMAGELIST ListView_GetImageList(HWND hwnd, int iImageList);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Retrieves the handle of an image list used for drawing list view items. The application programmer can send this message explicitly or by using the ListView_GetImageList macro.\n\n",{"@attributes":{"id":"p-0158","num":"0272"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVSIL_NORMAL","Image list with large icons"]},{"entry":[{},"LVSIL_SMALL","Image list with small icons"]},{"entry":[{},"LVSIL_STATE","Image list with state images"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0159","num":"0273"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETITEM"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = (LPARAM) (LV_ITEM FAR*) pitem;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_GetItem(HWND hwnd, LV_ITEM FAR* pitem);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Retrieves some or all of a list view item's attributes. The application programmer can send this message explicitly or by using the ListView_GetItem macro.\n\n",{"@attributes":{"id":"p-0161","num":"0281"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETITEMCOUNT"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"int ListView_GetItemCount(HWND hwnd);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Retrieves the number of items in a list view control. The application programmer can send this message explicitly or by using the ListView_GetItemCount macro.\n\n",{"@attributes":{"id":"p-0163","num":"0285"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETITEMPOSITION"]},{"entry":[{},"wParam = (WPARAM) (int) i;"]},{"entry":[{},"lParam = (LPARAM) (POINT FAR *) ppt;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_GetItemPosition(HWND hwnd, int i, POINT FAR*"]},{"entry":[{},"ppt);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Retrieves the position of a list view item. The application programmer can send this message explicitly or by using the ListView_GetItemPosition macro.\n\n","If a list view control has the LVS_NOITEMDATA style, this macro cannot be used in icon or small icon view.","LVM_GETITEMRECT",{"@attributes":{"id":"p-0166","num":"0291"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"LVM_GETITEMRECT"},{"entry":"wParam = (WPARAM) (int) i;"},{"entry":"lParam = (LPARAM) (LPRECT) prc;"},{"entry":"\/\/ Corresponding macro"},{"entry":"BOOL ListView_GetItemRect(HWND hwnd, int i, RECT FAR* prc, int"},{"entry":"code);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Retrieves the bounding rectangle for all or part of an item in the current view. The application programmer can send this message explicitly or by using the ListView_GetItemRect macro.\n\n",{"@attributes":{"id":"p-0168","num":"0297"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVIR_BOUNDS","Returns the bounding"]},{"entry":[{},{},"rectangle of the entire item,"]},{"entry":[{},{},"including the icon and label."]},{"entry":[{},"LVIR_ICON","Returns the bounding rectangle"]},{"entry":[{},{},"of the icon or small icon."]},{"entry":[{},"LVIR_LABEL","Returns the bounding rectangle"]},{"entry":[{},{},"of the item text."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0046","list-style":"none"},"li":{"@attributes":{"id":"ul0046-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0047","list-style":"none"},"li":"This parameter is specified by the left member of the RECT structure pointed to by the prc parameter.\n\nLVM_GETITEMSTATE\n"}}}},{"@attributes":{"id":"p-0169","num":"0299"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"LVM_GETITEMSTATE"},{"entry":"wParam = (WPARAM) (int) i;"},{"entry":"lParam = (LPARAM) (UINT) mask;"},{"entry":"\/\/ Corresponding macro"},{"entry":"UINT WINAPI ListView_GetItemState(HWND hwnd, int i, UINT mask);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Retrieves the state of a list view item. The application programmer can send this message explicitly or by using the ListView_GetItemState macro.\n\n",{"@attributes":{"id":"p-0171","num":"0304"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETITEMTEXT"]},{"entry":[{},"wParam = (WPARAM) (int) iItem;"]},{"entry":[{},"lParam = (LPARAM) (LV_ITEM FAR *) pitem;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"void WINAPI ListView_GetItemText(HWND hwnd, int iItem,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int iSubItem, LPSTR pszText, int cchTextMax);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Retrieves the text of a list view item or subitem.","If the application programmer sends this message explicitly, it returns the length of the retrieved string, and it has the following parameters:","hwnd and iItem",{"@attributes":{"id":"p-0174","num":"0000"},"ul":{"@attributes":{"id":"ul0050","list-style":"none"},"li":{"@attributes":{"id":"ul0050-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0051","list-style":"none"},"li":["Handle of the list view control, and the index of the list view item.\n\npitem\n","Address of an LV_ITEM structure. The iSubItem member specifies the index of a subitem, or it can be zero to get the item label. The pszText member points to a buffer that receives the text, and the cchTextMax member specifies the size of the buffer."]}}}},"The application programmer can send this message implicitly by using the ListView_GetItemText macro. The macro has no return value, and it has the following parameters:","hwnd and iItem",{"@attributes":{"id":"p-0176","num":"0000"},"ul":{"@attributes":{"id":"ul0052","list-style":"none"},"li":{"@attributes":{"id":"ul0052-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0053","list-style":"none"},"li":["Handle of the list view control, and the index of the list view item.\n\niSubItem\n","Index of the subitem, or zero to retrieve the item label.\n\npszText and cchTextMax\n","Address of the buffer that receives the item or subitem text, and the size of the buffer, in bytes.\n\nLVM_GETNEXTITEM\n"]}}}},{"@attributes":{"id":"p-0177","num":"0313"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETNEXTITEM"]},{"entry":[{},"wParam = (WPARAM) (int) iStart;"]},{"entry":[{},"lParam = MAKELPARAM((UINT) flags, 0);"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"int ListView_GetNextItem(HWND hwnd, int iStart, UINT flags);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Searches for a list view item that has the specified properties and that bears the specified relationship to a given item. The application programmer can send this message explicitly or by using the ListView_GetNextItem macro.\n\n",{"@attributes":{"id":"p-0179","num":"0320"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVNI_ABOVE","Searches for an item that is"]},{"entry":[{},{},"above the specified item."]},{"entry":[{},"LVNI_ALL","Searches for a subsequent item"]},{"entry":[{},{},"by index (the default"]},{"entry":[{},{},"value)."]},{"entry":[{},"LVNI_BELOW","Searches for an item that"]},{"entry":[{},{},"is below the specified item."]},{"entry":[{},"LVNI_PREVIOUS","Searches for a previous item"]},{"entry":[{},{},"by index."]},{"entry":[{},"LVNI_TOLEFT","Searches for an item to the"]},{"entry":[{},{},"left of the specified item."]},{"entry":[{},"LVNI_TORIGHT","Searches for an item to the"]},{"entry":[{},{},"right of the specified item."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0056","list-style":"none"},"li":{"@attributes":{"id":"ul0056-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0057","list-style":"none"},"li":"The state can be zero, or it can be one or more of these values:"}}}},{"@attributes":{"id":"p-0180","num":"0322"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVNI_DROPHILITED","The item has the"]},{"entry":[{},{},"LVIS_DROPHILITED state flag set."]},{"entry":[{},"LVNI_FOCUSED","The item has the"]},{"entry":[{},{},"LVIS_FOCUSED state flag set."]},{"entry":[{},"LVNI_HIDDEN","The item has the"]},{"entry":[{},{},"LVIS_HIDDEN state flag set."]},{"entry":[{},"LVNI_MARKED","The item has the"]},{"entry":[{},{},"LVIS_MARKED state flag set."]},{"entry":[{},"LVNI_SELECTED","The item has the"]},{"entry":[{},{},"LVIS_SELECTED state flag set."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0058","list-style":"none"},"li":{"@attributes":{"id":"ul0058-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0059","list-style":"none"},"li":"If an item does not have all of the specified state flags set, the search continues with the next item.\n\nLVM_GETORIGIN\n"}}}},{"@attributes":{"id":"p-0181","num":"0324"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETORIGIN"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = (LPARAM) (LPPOINT) lpptOrg;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_GetOrigin(HWND hwnd, LPPOINT lpptOrg);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Retrieves the current view origin for a list view control. The application programmer can send this message explicitly or by using the ListView_GetOrigin macro.\n\n",{"@attributes":{"id":"p-0183","num":"0329"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETSTRINGWIDTH"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = (LPARAM) (LPCSTR) psz;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"int ListView_GetStringWidth(HWND hwnd, LPCSTR psz);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Determines the minimum column width necessary to display all of a given string. You can send this message explicitly or by using the ListView_GetStringWidth macro.\n\n","The returned width takes into account the current font and column margins of the list view control, but it does not take into account the width of a small icon.","LVM_GETTEXTBKCOLOR",{"@attributes":{"id":"p-0186","num":"0335"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETTEXTBKCOLOR"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"COLORREF ListView_GetTextBkColor(HWND hwnd);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Retrieves the text background color of a list view control. The application programmer can send this message explicitly or by using the ListView_GetTextBkColor macro.\n\n",{"@attributes":{"id":"p-0188","num":"0339"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETTEXTCOLOR"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"COLORREF ListView_GetTextColor(HWND hwnd);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Retrieves the text color of a list view control. The application programmer can send this message explicitly or by using the ListView_GetTextColor macro.\n\n",{"@attributes":{"id":"p-0190","num":"0343"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETTOPINDEX"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"int ListView_GetTopIndex(HWND hwnd);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Retrieves the index of the topmost visible item when in list view or report view. The application programmer can send this message explicitly or by using the ListView_GetTopIndex macro.\n\n",{"@attributes":{"id":"p-0192","num":"0347"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_GETVIEWRECT"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = (LPARAM) (RECT FAR *) prc;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_GetViewRect(HWND hwnd, RECT FAR* prc);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Retrieves the bounding rectangle of all items in the list view control. The list view must be in icon or small icon view. The application programmer can send this message explicitly or by using the ListView_GetViewRect macro.\n\n",{"@attributes":{"id":"p-0194","num":"0352"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"LVM_HITTEST"},{"entry":"wParam = 0;"},{"entry":"lParam = (LPARAM) (LV_HITTESTINFO FAR *) pinfo;"},{"entry":"\/\/ Corresponding macro"},{"entry":"int ListView_HitTest(HWND hwnd, LV_HITTESTINFO FAR* pinfo);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Determines which list view item, if any, is at a specified position. The application programmer can send this message explicitly or by using the ListView_HitTest macro.\n\n",{"@attributes":{"id":"p-0196","num":"0357"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_INSERTCOLUMN"]},{"entry":[{},"wParam = (WPARAM) (int) iCol;"]},{"entry":[{},"lParam = (LPARAM) (const LV_COLUMN FAR *) pcol;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"int Listview_InsertColumn(HWND hwnd, int iCol,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"const LV_COLUMN FAR* pcol);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Inserts a new column in a list view control. The application programmer can send this message explicitly or by using the ListView_InsertColumn macro.\n\n",{"@attributes":{"id":"p-0198","num":"0362"},"tables":{"@attributes":{"id":"TABLE-US-00047","num":"00047"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"LVM_INSERTITEM"},{"entry":"wParam = 0;"},{"entry":"lParam = (LPARAM) (const LV_ITEM FAR *) pitem;"},{"entry":"\/\/ Corresponding macro"},{"entry":"int Listview_InsertItem(HWND hwnd, const LV_ITEM FAR* pitem);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Inserts a new item in a list view control. The application programmer can send this message explicitly or by using the ListView_InsertItem macro.\n\n",{"@attributes":{"id":"p-0200","num":"0367"},"tables":{"@attributes":{"id":"TABLE-US-00048","num":"00048"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_REDRAWITEMS"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = MAKELPARAM((int) iFirst, (int), iLast);"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_RedrawItems(HWND hwnd, int iFirst, int iLast);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Forces a list view control to repaint a range of items. The application programmer can send this message explicitly or by using the ListView_RedrawItems macro.\n\n","The specified items are not actually repainted until the list view window receives a WM_PAINT message. To repaint immediately, call the UpdateWindow function after using this macro.","LVM_SCROLL",{"@attributes":{"id":"p-0203","num":"0373"},"tables":{"@attributes":{"id":"TABLE-US-00049","num":"00049"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_SCROLL"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = MAKELPARAM(( int ) dx, (int) dy);"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_Scroll(HWND hwnd, int dx, int dy);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Scrolls the content of a list view control. The application programmer can send this message explicitly or by using the ListView_Scroll macro.\n\n",{"@attributes":{"id":"p-0205","num":"0378"},"tables":{"@attributes":{"id":"TABLE-US-00050","num":"00050"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_SETBKCOLOR"]},{"entry":[{},"wParam = 0;"]},{"entry":[{},"lParam = (LPARAM) (COLORREF) clrBk;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_SetBkColor(HWND hwnd, COLORREF clrBk);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Sets the background color of the list view control. The application programmer can send this message explicitly or by using the ListView_SetBkColor macro.\n\n",{"@attributes":{"id":"p-0207","num":"0383"},"tables":{"@attributes":{"id":"TABLE-US-00051","num":"00051"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_SETCALLBACKMASK"]},{"entry":[{},"wParam = (WPARAM) (UINT) mask;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_SetCallbackMask(HWND hwnd, UINT mask);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Sets the callback mask for a list view control. The application programmer can send this message explicitly or by using the ListView_SetCallbackMask macro.\n\n",{"@attributes":{"id":"p-0209","num":"0388"},"tables":{"@attributes":{"id":"TABLE-US-00052","num":"00052"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_SETCOLUMN"]},{"entry":[{},"wParam = (WPARAM) (int) iCol;"]},{"entry":[{},"lParam = (LPARAM) (const LV_COLUMN FAR *) pcol;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_SetColumn(HWND hwnd,"]},{"entry":[{},"int iCol, LV_COLUMN FAR* pcol);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Sets the attributes of a list view column. The application programmer can send this message explicitly or by using the ListView_SetColumn macro.\n\n",{"@attributes":{"id":"p-0211","num":"0394"},"tables":{"@attributes":{"id":"TABLE-US-00053","num":"00053"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"LVM_SETCOLUMNWIDTH"},{"entry":"wParam = (WPARAM) (int) iCol;"},{"entry":"lParam = MAKELPARAM((int) cx, 0);"},{"entry":"\/\/ Corresponding macro"},{"entry":"BOOL ListView_SetColumnWidth(HWND hwnd, int iCol, int cx);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Changes the width of a column in report view or list view. The application programmer can send this message explicitly or by using the ListView_SetColumnWidth macro.\n\n",{"@attributes":{"id":"p-0213","num":"0399"},"tables":{"@attributes":{"id":"TABLE-US-00054","num":"00054"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_SETIMAGELIST"]},{"entry":[{},"wParam = (WPARAM) (int) iImageList;"]},{"entry":[{},"lParam = (LPARAM) (HIMAGELIST) himl;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_SetImageList(HWND hwnd,"]},{"entry":[{},"HIMAGELIST himl, int iImageList);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Assigns an image list to a list view control. The application programmer can send this message explicitly or by using the ListView_SetImageList macro.\n\n",{"@attributes":{"id":"p-0215","num":"0405"},"tables":{"@attributes":{"id":"TABLE-US-00055","num":"00055"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVSIL_NORMAL","Image list with large icons"]},{"entry":[{},"LVSIL_SMALL","Image list with small icons"]},{"entry":[{},"LVSIL_STATE","Image list with state images"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0216","num":"0406"},"tables":{"@attributes":{"id":"TABLE-US-00056","num":"00056"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"LVM_SETITEM"},{"entry":"wParam = 0;"},{"entry":"lParam = (LPARAM) (const LV_ITEM FAR *) pitem;"},{"entry":"\/\/ Corresponding macro"},{"entry":"BOOL ListView_SetItem(HWND hwnd, const LV_ITEM FAR* pitem);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Sets some or all of a list view item's attributes. The application programmer can send this message explicitly or by using the ListView_SetItem macro.\n\n",{"@attributes":{"id":"p-0218","num":"0413"},"tables":{"@attributes":{"id":"TABLE-US-00057","num":"00057"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_SETITEMCOUNT"]},{"entry":[{},"wParam = (WPARAM) (int) cItems;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"VOID ListView_SetItemCount(HWND hwnd, int cItems);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Prepares a list view control for adding a large number of items. The application programmer can send this message explicitly or by using the ListView_SetItemCount macro.\n\n","By sending this message before adding a large number of items, the application programmer enables a list view control to reallocate its internal data structures only once rather than every time the application programmer adds an item.","LVM_SETITEMPOSITION",{"@attributes":{"id":"p-0221","num":"0419"},"tables":{"@attributes":{"id":"TABLE-US-00058","num":"00058"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_SETITEMPOSITION"]},{"entry":[{},"wParam = (LPARAM) (int) i;"]},{"entry":[{},"lParam = MAKELPARAM((int) x, (int) y);"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_SetItemPosition(HWND hwnd, int i, int x, int y);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Moves an item to a specified position in a list view control. The control must be in icon or small icon view. The application programmer can send this message explicitly or by using the ListView_SetItemPosition macro.\n\n","If the list view control has the LVS_AUTOARRANGE style, the list view is arranged after the position of the item is set. This macro cannot be used for list views that have the LVS_NOITEMDATA style.",{"@attributes":{"id":"p-0224","num":"0425"},"tables":{"@attributes":{"id":"TABLE-US-00059","num":"00059"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_SETITEMSTATE"]},{"entry":[{},"wParam = (WPARAM) (int) i;"]},{"entry":[{},"lParam = (LPARAM) (LV_ITEM FAR *) pitem;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL WINAPI ListView_SetItemState(HWND hwnd, int i,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UINT state, UINT mask);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Changes the state of an item in a list view control.","If the application programmer sends this message explicitly, it returns TRUE if successful or FALSE otherwise, and it has the following parameters:","hwnd and i",{"@attributes":{"id":"p-0227","num":"0000"},"ul":{"@attributes":{"id":"ul0098","list-style":"none"},"li":{"@attributes":{"id":"ul0098-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0099","list-style":"none"},"li":["Handle of the list view control, and the index of the list view item.\n\npitem\n","Address of an LV_ITEM structure. The stateMask member specifies which state bits to change, and the state member contains the new values for those bits. The other members are ignored."]}}}},"The application programmer can send this message implicitly by using the ListView_SetItemState macro. The macro has no return value, and it has the following parameters:","hwnd and i",{"@attributes":{"id":"p-0229","num":"0000"},"ul":{"@attributes":{"id":"ul0100","list-style":"none"},"li":{"@attributes":{"id":"ul0100-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0101","list-style":"none"},"li":["Handle of the list view control, and the index of the list view item.\n\nstate and mask\n","Value containing the new state bits for the item, and a mask specifying which of the item's current state bits to change.\n\nLVM_SETITEMTEXT\n"]}}}},{"@attributes":{"id":"p-0230","num":"0433"},"tables":{"@attributes":{"id":"TABLE-US-00060","num":"00060"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_SETITEMTEXT"]},{"entry":[{},"wParam = (WPARAM) (int) i;"]},{"entry":[{},"lParam = (LPARAM) (LV_ITEM FAR *) pitem;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"VOID WINAPI ListView_SetItemText(HWND hwnd, int i,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int iSubItem, LPCSTR pszText);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Changes the text of a list view item or subitem.","If the application programmer sends this message explicitly, it returns TRUE if successful or FALSE otherwise, and it has the following parameters:","hwnd and i",{"@attributes":{"id":"p-0233","num":"0000"},"ul":{"@attributes":{"id":"ul0102","list-style":"none"},"li":{"@attributes":{"id":"ul0102-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0103","list-style":"none"},"li":["Handle of the list view control, and the index of the list view item.\n\npitem\n","Address of an LV_ITEM structure. The iSubItem member is the index of the subitem, or it can be zero to set the item label. The pszText member is the address of a null-terminated string containing the new text; the member can also be NULL."]}}}},"The application programmer can send this message implicitly by using the ListView_SetItemText macro. The macro has no return value, and it has the following parameters:","hwnd and i",{"@attributes":{"id":"p-0235","num":"0000"},"ul":{"@attributes":{"id":"ul0104","list-style":"none"},"li":{"@attributes":{"id":"ul0104-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0105","list-style":"none"},"li":["Handle of the list view control, and the index of the list view item.\n\niSubItem\n","Index of the subitem, or zero to set the item label.\n\npszText\n","Address of a null-terminated string containing the new text. This parameter can be NULL.\n\nLVM_SETTEXTBKCOLOR\n"]}}}},{"@attributes":{"id":"p-0236","num":"0442"},"tables":{"@attributes":{"id":"TABLE-US-00061","num":"00061"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"LVM_SETTEXTBKCOLOR"},{"entry":"wParam = 0;"},{"entry":"lParam = (LPARAM) (COLORREF) clrText;"},{"entry":"\/\/ Corresponding macro"},{"entry":"BOOL ListView_SetTextBkColor(HWND hwnd, COLORREF clrText);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Sets the background color of text in a list view control. The application programmer can send this message explicitly or by using the ListView_SetTextBkColor macro.\n\n",{"@attributes":{"id":"p-0238","num":"0447"},"tables":{"@attributes":{"id":"TABLE-US-00062","num":"00062"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"LVM_SETTEXTCOLOR"},{"entry":"wParam = 0;"},{"entry":"lParam = (LPARAM) (COLORREF) clrText;"},{"entry":"\/\/ Corresponding macro"},{"entry":"BOOL ListView_SetTextColor(HWND hwnd, COLORREF clrText);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Sets the text color of a list view control. The application programmer can send this message explicitly or by using the ListView_SetTextColor macro.\n\n",{"@attributes":{"id":"p-0240","num":"0452"},"tables":{"@attributes":{"id":"TABLE-US-00063","num":"00063"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_SORTITEMS"]},{"entry":[{},"wParam = (WPARAM) (LPARAM) lParamSort;"]},{"entry":[{},"lParam = (LPARAM) (PFNLVCOMPARE) pfnCompare;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_SortItems(HWND hwnd,"]},{"entry":[{},"PFNLVCOMPARE pfnCompare,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LPARAM lParamSort);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Sorts list view items using an application-defined comparison function. The index of each item changes to reflect the new sequence. The application programmer can send this message explicitly or by using the ListView_SortItems macro.\n\n","The comparison function has the following form:",{"@attributes":{"id":"p-0243","num":"0459"},"tables":{"@attributes":{"id":"TABLE-US-00064","num":"00064"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"int CALLBACK CompareFunc(LPARAM lParam1, LPARAM lParam2,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LPARAM lParamSort);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The comparison function must return a negative value if the first item should precede the second, a positive value if the first item should follow the second, or zero if the two items are equivalent.","The lParam1 and lParam2 parameters specify the item data for the two items being compared. The lParamSort parameter is the same value passed to the LVM_SORTITEMS message.","LVM_UPDATE",{"@attributes":{"id":"p-0246","num":"0462"},"tables":{"@attributes":{"id":"TABLE-US-00065","num":"00065"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVM_UPDATE"]},{"entry":[{},"wParam = (WPARAM) iItem;"]},{"entry":[{},"lParam = 0;"]},{"entry":[{},"\/\/ Corresponding macro"]},{"entry":[{},"BOOL ListView_Update (HWND hwnd, int iItem);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Updates a list view item. If the list view control has the LVS_AUTOARRANGE style, this macro causes the list view to be arranged. The application programmer can send this message explicitly or by using the ListView_Update macro.\n\n","A list view control sends notification messages, in the form of WM_NOTIFY messages, to its owner window when events occur in the control.","LVN_BEGINDRAG",{"@attributes":{"id":"p-0249","num":"0467"},"tables":{"@attributes":{"id":"TABLE-US-00066","num":"00066"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVN_BEGINDRAG"]},{"entry":[{},"pnmv = (NM_LISTVIEW FAR *) lParam;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notifies a list view control's parent window that a drag-and-drop operation involving the left mouse button is being initiated. This notification message is sent in the form of a WM_NOTIFY message.\n\n",{"@attributes":{"id":"p-0251","num":"0471"},"tables":{"@attributes":{"id":"TABLE-US-00067","num":"00067"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVN_BEGINLABELEDIT"]},{"entry":[{},"pdi = (LV_DISPINFO FAR *) lParam;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notifies a list view control's parent window about the start of label editing for an item. This notification message is sent in the form of a WM_NOTIFY message.\n\n",{"@attributes":{"id":"p-0253","num":"0475"},"tables":{"@attributes":{"id":"TABLE-US-00068","num":"00068"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVN_BEGINRDRAG"]},{"entry":[{},"pnmv = (NM_LISTVIEW FAR *) lParam;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notifies a list view control's parent window that a drag-and-drop operation involving the right mouse button is being initiated. This notification message is sent in the form of a WM_NOTIFY message.\n\n",{"@attributes":{"id":"p-0255","num":"0479"},"tables":{"@attributes":{"id":"TABLE-US-00069","num":"00069"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVN_COLUMNCLICK"]},{"entry":[{},"pnmv = (NM_LISTVIEW FAR *) lParam;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notifies a list view control's parent window that a column was clicked. This notification message is sent in the form of a WM_NOTIFY message.\n\n",{"@attributes":{"id":"p-0257","num":"0483"},"tables":{"@attributes":{"id":"TABLE-US-00070","num":"00070"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"pnmv = (NM_LISTVIEW FAR *) lParam;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notifies a list view control's parent window that all items in the list view were deleted. This notification message is sent in the form of a WM_NOTIFY message.\n\n",{"@attributes":{"id":"p-0259","num":"0487"},"tables":{"@attributes":{"id":"TABLE-US-00071","num":"00071"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVN_DELETEITEM"]},{"entry":[{},"pnmv = (NM_LISTVIEW FAR *) lParam;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notifies a list view control's parent window that an item was deleted. This notification message is sent in the form of a WM_NOTIFY message.\n\n",{"@attributes":{"id":"p-0261","num":"0491"},"tables":{"@attributes":{"id":"TABLE-US-00072","num":"00072"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVN_ENDDRAG"]},{"entry":[{},"pnmv = (NM_LISTVIEW FAR *) lParam;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notifies a list view control's parent window about the end of default processing for a drag-and-drop operation involving the left mouse button. This notification message is sent in the form of a WM_NOTIFY message.\n\n",{"@attributes":{"id":"p-0263","num":"0495"},"tables":{"@attributes":{"id":"TABLE-US-00073","num":"00073"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVN_ENDLABELEDIT"]},{"entry":[{},"pdi = (LV_DISPINFO FAR *) lParam;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notifies a list view control's parent window about the end of label editing for an item. This notification message is sent in the form of a WM_NOTIFY message.\n\n",{"@attributes":{"id":"p-0265","num":"0499"},"tables":{"@attributes":{"id":"TABLE-US-00074","num":"00074"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVN_ENDRDRAG"]},{"entry":[{},"pnmv = (NM_LISTVIEW FAR *) lParam;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notifies a list view control's parent window about the end of default processing for a drag-and-drop operation involving the right mouse button. This notification message is sent in the form of a WM_NOTIFY message.\n\n",{"@attributes":{"id":"p-0267","num":"0503"},"tables":{"@attributes":{"id":"TABLE-US-00075","num":"00075"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVN_GETDISPINFO"]},{"entry":[{},"pnmv = (LV_DISPINFO FAR *) lParam;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Requests that a list view control's parent window provides information needed to display or sort an item. This notification message is sent in the form of a WM_NOTIFY message.\n\n",{"@attributes":{"id":"p-0269","num":"0507"},"tables":{"@attributes":{"id":"TABLE-US-00076","num":"00076"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVN_INSERTITEM"]},{"entry":[{},"pnmv = (NM_LISTVIEW FAR *) lParam;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notifies a list view control's parent window that a new item was inserted. This notification message is sent in the form of a WM_NOTIFY message.\n\n",{"@attributes":{"id":"p-0271","num":"0511"},"tables":{"@attributes":{"id":"TABLE-US-00077","num":"00077"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVN_ITEMCHANGED"]},{"entry":[{},"pnmv = (NM_LISTVIEW FAR *) lParam;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notifies a list view control's parent window that an item has changed. This notification message is sent in the form of a WM_NOTIFY message.\n\n",{"@attributes":{"id":"p-0273","num":"0515"},"tables":{"@attributes":{"id":"TABLE-US-00078","num":"00078"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVN_ITEMCHANGING"]},{"entry":[{},"pnmv = (NM_LISTVIEW FAR *) lParam;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notifies a list view control's parent window that an item is changing. This notification message is sent in the form of a WM_NOTIFY message.\n\n",{"@attributes":{"id":"p-0275","num":"0519"},"tables":{"@attributes":{"id":"TABLE-US-00079","num":"00079"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVN_KEYDOWN"]},{"entry":[{},"pnkd = (LV_KEYDOWN FAR *) lParam;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notifies a list view control's parent window that a key has been pressed. This notification message is sent in the form of a WM_NOTIFY message.\n\n",{"@attributes":{"id":"p-0277","num":"0523"},"tables":{"@attributes":{"id":"TABLE-US-00080","num":"00080"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVN_SETDISPINFO"]},{"entry":[{},"pnmv = (LV_DISPINFO FAR *) lParam;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notifies a list view control's parent window that it must update the information it maintains for an item. This notification message is sent in the form of a WM_NOTIFY message.\n\n","The following structures are used with list view messages and notification messages.","LV_COLUMN",{"@attributes":{"id":"p-0280","num":"0528"},"tables":{"@attributes":{"id":"TABLE-US-00081","num":"00081"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"typedef struct _LV_COLUMN {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UINT mask;","\/\/ see below"]},{"entry":[{},"int fmt;","\/\/ see below"]},{"entry":[{},"int cx;","\/\/ width of the column, in pixels"]},{"entry":[{},"LPSTR pszText;","\/\/ see below"]},{"entry":[{},"int cchTextMax;","\/\/ see below"]},{"entry":[{},"int iSubItem;","\/\/ index of subitem associated with column"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} LV_COLUMN;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Contains information about a column in report view. This structure is also used to receive information about a column.","mask",{"@attributes":{"id":"p-0282","num":"0000"},"ul":{"@attributes":{"id":"ul0144","list-style":"none"},"li":{"@attributes":{"id":"ul0144-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0145","list-style":"none"},"li":"Variable specifying which members contain valid information. It can be LVCF_ALL (meaning all members), zero, or one or more of these values:"}}}},{"@attributes":{"id":"p-0283","num":"0531"},"tables":{"@attributes":{"id":"TABLE-US-00082","num":"00082"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVCF_FMT","The fmt member is valid."]},{"entry":[{},"LVCF_SUBITEM","The iSubItem member is valid."]},{"entry":[{},"LVCF_TEXT","The pszText member is valid."]},{"entry":[{},"LVCF_WIDTH","The cx member is valid."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0146","list-style":"none"},"li":{"@attributes":{"id":"ul0146-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0147","list-style":"none"},"li":["Alignment of the column. It can be one of these values: LVCFMT_LEFT, LVCFMT_RIGHT, or LVCFMT_CENTER.\n\npszText\n","Address of a null-terminated string containing the column heading if the structure contains information about a column. If the structure is receiving information about a column, this member specifies the address of the buffer that receives the column heading.\n\ncchTextMax\n","Size of the buffer pointed to by the pszText member. If the structure is not receiving information about a column, this member is ignored."]}}}},"This structure is used with the LVM_GETCOLUMN, LVM_SETCOLUMN, LVM_INSERTCOLUMN, and LVM_DELETECOLUMN messages.","LV_DISPINFO",{"@attributes":{"id":"p-0285","num":"0536"},"tables":{"@attributes":{"id":"TABLE-US-00083","num":"00083"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"typedef struct tagLV_DISPINFO {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"NMHDR","hdr;","\/\/ required for all WM_NOTIFY messages"]},{"entry":[{},"LV_ITEM","item;","\/\/ see below"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} LV_DISPINFO;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Contains information needed to display an owner-drawn item in a list view control.","item",{"@attributes":{"id":"p-0287","num":"0000"},"ul":{"@attributes":{"id":"ul0148","list-style":"none"},"li":{"@attributes":{"id":"ul0148-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0149","list-style":"none"},"li":"LV_ITEM structure identifying the item or subitem. The structure either contains or receives information about the item. The mask member specifies which item attributes are relevant, and it can be one or more of these values:"}}}},{"@attributes":{"id":"p-0288","num":"0539"},"tables":{"@attributes":{"id":"TABLE-US-00084","num":"00084"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVIF_IMAGE","The iImage member specifies, or"]},{"entry":[{},{},"is to receive, the index of"]},{"entry":[{},{},"the item's icon in the image list."]},{"entry":[{},"LVIF_STATE","The state member specifies, or"]},{"entry":[{},{},"is to receive, the state of the"]},{"entry":[{},{},"item."]},{"entry":[{},"LVIF_TEXT","The pszText member specifies"]},{"entry":[{},{},"the new item text or the"]},{"entry":[{},{},"address of a buffer that is"]},{"entry":[{},{},"to receive the item text."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0150","list-style":"none"},"li":{"@attributes":{"id":"ul0150-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0151","list-style":"none"},"li":"If the structure is receiving item text, the pszText and cchTextMax members specify the address and size of a buffer. The application programmer can either copy text to the buffer or assign the address of a string to the pszText member. In the latter case, the application programmer must not change or delete the string until the corresponding item text is deleted or two additional LVN_GETDISPINFO messages have been sent."}}}},"This structure is used with the LVN_GETDISPINFO and LVN_SETDISPINFO notification messages.","LV_FINDINFO",{"@attributes":{"id":"p-0290","num":"0542"},"tables":{"@attributes":{"id":"TABLE-US-00085","num":"00085"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typedef struct _LV_FINDINFO {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UINT flags;","\/\/see below"]},{"entry":[{},"LPCSTR psz;","\/\/see below"]},{"entry":[{},"LPARAM lParam;","\/\/see below"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} LV_FINDINFO;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Contains information used to search for a list view item.","flags",{"@attributes":{"id":"p-0292","num":"0000"},"ul":{"@attributes":{"id":"ul0152","list-style":"none"},"li":{"@attributes":{"id":"ul0152-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0153","list-style":"none"},"li":"Type of search to perform. It can be one or more of these values:"}}}},{"@attributes":{"id":"p-0293","num":"0545"},"tables":{"@attributes":{"id":"TABLE-US-00086","num":"00086"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVFI_NOCASE","Ignores case in string"]},{"entry":[{},{},"comparisons. This value is"]},{"entry":[{},{},"ignored if the LVFI_STRING"]},{"entry":[{},{},"value is not specified."]},{"entry":[{},"LVFI_PARAM","Searches based on the"]},{"entry":[{},{},"lParam member. The lParam"]},{"entry":[{},{},"member of the matching"]},{"entry":[{},{},"item's LV_ITEM structure"]},{"entry":[{},{},"must match the lParam"]},{"entry":[{},{},"member of this structure."]},{"entry":[{},{},"If this value is specified,"]},{"entry":[{},{},"all other values are ignored."]},{"entry":[{},"LVFI_PARTIAL","Matches if the item text"]},{"entry":[{},{},"begins with the string pointed"]},{"entry":[{},{},"to by the psz member. This"]},{"entry":[{},{},"value implies use of the"]},{"entry":[{},{},"LVFI_STRING value, and it"]},{"entry":[{},{},"cannot be used with the"]},{"entry":[{},{},"LVFI_SUBSTRING value."]},{"entry":[{},"LVFI_STRING","Searches based on item"]},{"entry":[{},{},"text. Unless additional values"]},{"entry":[{},{},"are specified, the item"]},{"entry":[{},{},"text of the matching item must"]},{"entry":[{},{},"exactly match the string"]},{"entry":[{},{},"pointed to by the psz member."]},{"entry":[{},"LVFI_SUBSTRING","Matches if the string pointed"]},{"entry":[{},{},"to by the psz member is"]},{"entry":[{},{},"contained anywhere in the"]},{"entry":[{},{},"item text. This value implies"]},{"entry":[{},{},"use of the LVFI_STRING"]},{"entry":[{},{},"value, and it cannot be used"]},{"entry":[{},{},"with the LVFI_PARTIAL"]},{"entry":[{},{},"value."]},{"entry":[{},"LVFI_WRAP","Continues the search at the"]},{"entry":[{},{},"beginning if no match is"]},{"entry":[{},{},"found."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0154","list-style":"none"},"li":{"@attributes":{"id":"ul0154-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0155","list-style":"none"},"li":["Address of a null-terminated string to compare with item text if the flags member specifies the LVFI_STRING, LVFI_SUBSTRING, or LVFI_PARTIAL value.\n\nlParam\n","Value to compare with the lParam member of a list view item's LV_ITEM structure if the flags member specifies the LVFI_PARAM value."]}}}},"This structure is used with the LVM_FINDITEM message.","LV_HITTESTINFO",{"@attributes":{"id":"p-0295","num":"0549"},"tables":{"@attributes":{"id":"TABLE-US-00087","num":"00087"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typedef struct _LV_HITTESTINFO {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"POINT pt;","\/\/ position to hit test, in client coordinates"]},{"entry":[{},"UINT flags;","\/\/ see below"]},{"entry":[{},"int iItem;","\/\/ receives the index of the matching item"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} LV_HITTESTINFO;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Contains information about a hit test.","flags",{"@attributes":{"id":"p-0297","num":"0000"},"ul":{"@attributes":{"id":"ul0156","list-style":"none"},"li":{"@attributes":{"id":"ul0156-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0157","list-style":"none"},"li":"Variable that receives information about the results of a hit test. It can be one or more of these values:"}}}},{"@attributes":{"id":"p-0298","num":"0552"},"tables":{"@attributes":{"id":"TABLE-US-00088","num":"00088"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVHT_ABOVE","The position is above"]},{"entry":[{},{},"the client area of the"]},{"entry":[{},{},"control."]},{"entry":[{},"LVHT_BELOW","The position is below"]},{"entry":[{},{},"the client area of the"]},{"entry":[{},{},"control."]},{"entry":[{},"LVHT_NOWHERE","The position is inside"]},{"entry":[{},{},"the list view control's"]},{"entry":[{},{},"client window but is"]},{"entry":[{},{},"not over a list item."]},{"entry":[{},"LVHT_ONITEMICON","The position is over"]},{"entry":[{},{},"a list view item's icon."]},{"entry":[{},"LVHT_ONITEMLABEL","The position is over"]},{"entry":[{},{},"a list view item's text."]},{"entry":[{},"LVHT_ONITEMSTATEICON","The position is over"]},{"entry":[{},{},"the state image of a list"]},{"entry":[{},{},"view item."]},{"entry":[{},"LVHT_TOLEFT","The position is to the"]},{"entry":[{},{},"left of the list view"]},{"entry":[{},{},"control's client area."]},{"entry":[{},"LVHT_TORIGHT","The position is to the"]},{"entry":[{},{},"right of the list view"]},{"entry":[{},{},"control's client area."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0158","list-style":"none"},"li":{"@attributes":{"id":"ul0158-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0159","list-style":"none"},"li":["The application programmer can use the LVHT_ABOVE, LVHT_BELOW, LVHT_TOLEFT, and LVHT_TORIGHT values to determine whether to scroll the contents of a list view control. Two of these flags may be combined, for example if the position is above and to the left of the client area.","The application programmer can test for the LVHT_ONITEM value to determine whether a given position is over a list view item. This value is a bitwise OR operation on the LVHT_ONITEMICON, LVHT_ONITEMLABEL, and LVHT_ONITEMSTATEICON values."]}}}},"This structure is used with the LVM_HITTEST message.","LV_ITEM",{"@attributes":{"id":"p-0300","num":"0556"},"tables":{"@attributes":{"id":"TABLE-US-00089","num":"00089"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"typedef struct _LV_ITEM {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UINT","mask;","\/\/ see below"]},{"entry":[{},"int","iItem;","\/\/ item this structure refers to"]},{"entry":[{},"int","iSubItem;","\/\/ subitem this refers to, or zero"]},{"entry":[{},"UINT","state;","\/\/ see below"]},{"entry":[{},"UINT","stateMask;","\/\/ see below"]},{"entry":[{},"LPSTR","pszText;","\/\/ see below"]},{"entry":[{},"int","cchTextMax;","\/\/ see below"]},{"entry":[{},"int","iImage;","\/\/ see below"]},{"entry":[{},"LPARAM","lParam;","\/\/ 32-bit value to associate with item"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} LV_ITEM;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Specifies or receives the attributes of a list view item.","mask",{"@attributes":{"id":"p-0302","num":"0000"},"ul":{"@attributes":{"id":"ul0160","list-style":"none"},"li":{"@attributes":{"id":"ul0160-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0161","list-style":"none"},"li":"Variable specifying which members contain valid data or which members are to be filled in. It can be one or more of these values:"}}}},{"@attributes":{"id":"p-0303","num":"0559"},"tables":{"@attributes":{"id":"TABLE-US-00090","num":"00090"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVIF_TEXT","The pszText member is valid."]},{"entry":[{},"LVIF_IMAGE","The iImage member is valid."]},{"entry":[{},"LVIF_PARAM","The lParam member is valid."]},{"entry":[{},"LVIF_STATE","The state member is valid."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0162","list-style":"none"},"li":{"@attributes":{"id":"ul0162-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0163","list-style":"none"},"li":["Current state of the item, and the valid states of the item. This member can be any valid combination of state flags.\n\npszText\n","Address of a null-terminated string containing the item text if the structure specifies item attributes. If this member is the LPSTR_TEXTCALLBACK value, the item is a callback item. If the structure is receiving item attributes, this member is the address of the buffer that receives the item text.\n\ncchTextMax\n","Size of the buffer pointed to by the pszText member if the structure is receiving item attributes. If the structure specifies item attributes, this member is ignored.\n\niImage\n","Index of the list view item's icon in the large icon and small icon image lists. If this member is the I_IMAGECALLBACK value, the item is a callback item."]}}}},"This structure is used with a number of messages, including LVM_GETITEM, LVM_SETITEM, LVM_INSERTITEM, and LVM_DELETEITEM.","LV_KEYDOWN",{"@attributes":{"id":"p-0305","num":"0565"},"tables":{"@attributes":{"id":"TABLE-US-00091","num":"00091"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"typedef struct tagLV_KEYDOWN {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"NMHDR hdr;","\/\/ required for all WM_NOTIFY messages"]},{"entry":[{},"WORD wVKey;","\/\/ virtual-key code"]},{"entry":[{},"UINT flags;","\/\/ always zero"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} LV_KEYDOWN;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Contains information about a keyboard event in a list view control.","This structure is used with the LVN_KEYDOWN notification message.","NM_LISTVIEW",{"@attributes":{"id":"p-0308","num":"0568"},"tables":{"@attributes":{"id":"TABLE-US-00092","num":"00092"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"typedef struct tagNM_LISTVIEW {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"NMHDR","hdr;","\/\/ required for all"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"WM_NOTIFY messages"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"int","iItem;","\/\/ list view item,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"or \u22121 if not used"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int","iSubItem;","\/\/ subitem, or zero if none"]},{"entry":[{},"UINT","uNewState;","\/\/ see below"]},{"entry":[{},"UINT","uOldState;","\/\/ see below"]},{"entry":[{},"UINT","uChanged;","\/\/ see below"]},{"entry":[{},"POINT","ptAction;","\/\/ see below"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} NM_LISTVIEW;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Contains information about a list view notification message.","uNewState and uOldState",{"@attributes":{"id":"p-0310","num":"0000"},"ul":{"@attributes":{"id":"ul0164","list-style":"none"},"li":{"@attributes":{"id":"ul0164-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0165","list-style":"none"},"li":["New item state, and the old item state. Both members are zero for notification messages that do not use them.\n\nuChanged\n","Item attributes that have changed. This member is zero for notifications that do not use it. Otherwise, it can have the same values as the mask member of the LV_ITEM structure.\n\nptAction\n","Location at which the event occurred. This member is valid only for the LVN_BEGINDRAG and LVN_BEGINRDRAG notification messages."]}}}},"The address of this structure is specified as the lParam parameter of the WM_NOTIFY message for several list view notification messages.","Constants","The tables in the following sections describe window style flags and item state flags used with list view controls.","List View Window Styles","The following window styles are specific to list view controls:",{"@attributes":{"id":"p-0314","num":"0576"},"tables":{"@attributes":{"id":"TABLE-US-00093","num":"00093"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LVS_ALIGNBOTTOM","Specifies that items are"]},{"entry":[{},"aligned along the bottom of"]},{"entry":[{},"the control in icon and"]},{"entry":[{},"small icon view."]},{"entry":["LVS_ALIGNLEFT","Specifies that items are"]},{"entry":[{},"left-aligned in icon and small"]},{"entry":[{},"icon view."]},{"entry":["LVS_ALIGNRIGHT","Specifies that items are"]},{"entry":[{},"right-aligned in icon and"]},{"entry":[{},"small icon view."]},{"entry":["LVS_ALIGNTOP","Specifies that items are"]},{"entry":[{},"aligned with the top of the"]},{"entry":[{},"control in icon and small"]},{"entry":[{},"icon view."]},{"entry":["LVS_AUTOARRANGE","Specifies that icons are"]},{"entry":[{},"automatically kept arranged"]},{"entry":[{},"in icon view and small"]},{"entry":[{},"icon view."]},{"entry":["LVS_BUTTON","Specifies that item icons"]},{"entry":[{},"look like buttons in large"]},{"entry":[{},"icon view."]},{"entry":["LVS_EDITLABELS","Allows item text to be"]},{"entry":[{},"edited in place. The parent"]},{"entry":[{},"window must process the"]},{"entry":[{},"LVN_ENDLABELEDIT"]},{"entry":[{},"notification message."]},{"entry":["LVS_ICON","Specifies icon view."]},{"entry":["LVS_LIST","Specifies list view."]},{"entry":["LVS_NOCOLUMNHEADER","Specifies that a column"]},{"entry":[{},"header is not displayed in"]},{"entry":[{},"report view. By default,"]},{"entry":[{},"columns have headers in"]},{"entry":[{},"report view."]},{"entry":["LVS_NOITEMDATA","Allocates only enough space"]},{"entry":[{},"to store the state of each"]},{"entry":[{},"item, not the label, icon,"]},{"entry":[{},"subitem strings, or"]},{"entry":[{},"application-defined data."]},{"entry":[{},"The parent window must"]},{"entry":[{},"process the LVN_GETDISPINFO"]},{"entry":[{},"notification"]},{"entry":[{},"message to provide this"]},{"entry":[{},"information to the list view"]},{"entry":[{},"control on demand."]},{"entry":["LVS_NOLABELWRAP","Displays item text on a"]},{"entry":[{},"single line in icon view. By"]},{"entry":[{},"default, item text may"]},{"entry":[{},"wrap in icon view."]},{"entry":["LVS_NOSCROLL","Disables scrolling. All"]},{"entry":[{},"items must be within the"]},{"entry":[{},"client area."]},{"entry":["LVS_NOSORTHEADER","Specifies that column"]},{"entry":[{},"headers do not work like"]},{"entry":[{},"buttons. This style is"]},{"entry":[{},"useful if clicking a column"]},{"entry":[{},"header in report view"]},{"entry":[{},"does not carry out an action,"]},{"entry":[{},"such as sorting."]},{"entry":["LVS_OWNERDRAWFIXED","Enables the owner window"]},{"entry":[{},"to paint items in report"]},{"entry":[{},"view. The list view"]},{"entry":[{},"control sends a"]},{"entry":[{},"WM_DRAWITEM message to"]},{"entry":[{},"paint each item; it"]},{"entry":[{},"does not send separate"]},{"entry":[{},"messages for each subitem."]},{"entry":[{},"The itemData member of the"]},{"entry":[{},"DRAWITEMSTRUCT"]},{"entry":[{},"structure contains the item"]},{"entry":[{},"data for the specified"]},{"entry":[{},"list view item."]},{"entry":["LVS_REPORT","Specifies report view."]},{"entry":["LVS_SHAREIMAGELISTS","Specifies that the control"]},{"entry":[{},"does not take ownership of"]},{"entry":[{},"the image lists assigned"]},{"entry":[{},"to it (that is, it does not"]},{"entry":[{},"destroy the image lists"]},{"entry":[{},"when it is destroyed). This"]},{"entry":[{},"style enables the same"]},{"entry":[{},"image lists to be used with"]},{"entry":[{},"multiple list view controls."]},{"entry":["LVS_SINGLESEL","Allows only one item at"]},{"entry":[{},"a time to be selected. By"]},{"entry":[{},"default, multiple items"]},{"entry":[{},"may be selected."]},{"entry":["LVS_SMALLICON","Specifies small icon view."]},{"entry":["LVS_SORTASCENDING","Sorts items based on item"]},{"entry":[{},"text in ascending order."]},{"entry":["LVS_SORTDESCENDING","Sorts items based on item"]},{"entry":[{},"text in descending order."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The application programmer can use the LVS_TYPESTYLEMASK value to isolate the window styles that correspond to the current view: LVS_ICON, LVS_SMALLICON, LVS_LIST, and LVS_REPORT.","The application programmer can use the LVS_ALIGNMASK value to isolate the window styles that specify the alignment of items: LVS_ALIGNLEFT, LVS_ALIGNRIGHT, LVS_ALIGNBOTTOM, and LVS_ALIGNTOP.","List View Item States","An item's state determines its appearance and functionality. The state can be zero, or one or more of these values:",{"@attributes":{"id":"p-0318","num":"0580"},"tables":{"@attributes":{"id":"TABLE-US-00094","num":"00094"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LVIS_CUT","The item is marked for a"]},{"entry":[{},{},"cut or move operation."]},{"entry":[{},"LVIS_DISABLED","The item is disabled, so"]},{"entry":[{},{},"it is drawn using the"]},{"entry":[{},{},"standard disabled style"]},{"entry":[{},{},"and coloring."]},{"entry":[{},"LVIS_DROPHILITED","The item is highlighted"]},{"entry":[{},{},"as a drag-and-drop target."]},{"entry":[{},"LVIS_FOCUSED","The item has the focus,"]},{"entry":[{},{},"so it is surrounded by a"]},{"entry":[{},{},"standard focus rectangle."]},{"entry":[{},{},"Although more than one"]},{"entry":[{},{},"item may be selected, only"]},{"entry":[{},{},"one item can have the"]},{"entry":[{},{},"focus."]},{"entry":[{},"LVIS_HIDDEN","The item is not visible,"]},{"entry":[{},{},"so it cannot be acted on by"]},{"entry":[{},{},"the user."]},{"entry":[{},"LVIS_LINK","The item is a link."]},{"entry":[{},"LVIS_PUSHED","The button-like item"]},{"entry":[{},{},"appears pushed. This value"]},{"entry":[{},{},"has no effect unless"]},{"entry":[{},{},"the LVS_BUTTON window"]},{"entry":[{},{},"style is used."]},{"entry":[{},"LVIS_SELECTED","The item is selected. The"]},{"entry":[{},{},"appearance of a selected"]},{"entry":[{},{},"item depends on whether"]},{"entry":[{},{},"it has the focus and on"]},{"entry":[{},{},"the system colors used"]},{"entry":[{},{},"for selection."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The application programmer can use the LVIS_OVERLAYMASK value to isolate the state bits that contain the one-based index of the overlay image. The application programmer can use the LVIS_STATEIMAGEMASK value to isolate the state bits that contain the one-based index of the state image.","Discussion of Figures",{"@attributes":{"id":"p-0320","num":"0582"},"figref":"FIG. 1","b":["10","12","14","16","18","20","22","24","26"]},"Applications  and the operating system  communicate via the Applications Program Interfaces (APIs) . As noted, these are the special instructions by which the applications  request services of (or through) the operating system . Associated with most APIs are various sets of parameters, through which data relating to the requested service is passed between the application and the operating system. (Although not shown separately, the applications and operating system also communicate via \u201cmessages\u201d and \u201cmacros\u201d (also referred to herein as \u201cAPIs\u201d). Generally speaking, messages relay data between different components of the computer system (including applications programs, the operating system, and various data structures maintained by the operating system such as windows). Macros are generally comparable to API service requests, but pass their parameters using different data structures. Many operating system services can be requested by either an API or by a macro.)","Related to APIs are DDIs. DDIs (Device Driver Interfaces)  are instruction by which the operating system  requests services from a hardware device  through its device driver . For the sake of brevity, DDIs and the responses thereto are also regarded as \u201cAPIs\u201d as used herein.","As noted above and illustrated in , applications  can communicate directly with the hardware  by use of assembly language . (For clarity of illustration, the assembly language instructions in  are shown as applied directly to the hardware. Actually, the instructions are processed by the operating system prior to execution by the hardware.)",{"@attributes":{"id":"p-0324","num":"0586"},"figref":["FIG. 2","FIG. 1"],"b":["12","10","34","36","38"]},"The illustrated computer  includes a central processing unit (CPU)  and a memory system  that communicate through a bus structure . CPU  includes an arithmetic logic unit (ALU)  for performing computations, registers  for temporary storage of data and instructions, and a control unit  for controlling the operation of computer in response to software instructions.","Memory system  generally includes high-speed main memory  in the form of random access memory (RAM) and read only memory (ROM) semiconductor devices. Main memory  stores software such as the operating system , device drivers , and currently running applications . Main memory  also includes video display memory for displaying images through a display device. Memory system  further includes secondary storage  in the form of floppy disks, hard disks, tape, CD-ROM, etc., for long term data storage.","Input devices  and output devices  are typically peripheral devices connected by bus structure  to computer . Input devices  can include a keyboard, modem, pointing device, pen, or other device for providing input data to the computer. Output devices  can include a display device, printer, sound device or other device for providing output data from the computer.","It should be understood that  illustrates the basic elements of a general purpose computer system; the figure is not intended to illustrate a specific architecture. For example, no particular bus structure is shown because different known bus structures can be used to interconnect the elements of the computer system in a number of ways, as desired. CPU  can comprise a discrete ALU , registers  and control unit , or can be a single device in which these parts of the CPU are integrated together, such as in a microprocessor. (The illustrated embodiment employs an Intel 80486 microprocessor, but a variety of other microprocessors can alternatively be used.) Moreover, the number and arrangement of the elements of the computer system can be varied from what is shown and described in ways known in the art (i.e., multiple CPUs, client-server systems, computer networking, etc.).","The APIs  used in the Microsoft Windows 95 operating system are a superset of those used in predecessor Microsoft Windows operating systems (e.g. Microsoft Windows 3.1, Windows for Workgroups, and Windows NT). The use of Microsoft Windows, and particularly the use of Microsoft Windows APIs in writing applications programs and device drivers, is well understood by those skilled in the art, and is abundantly detailed in the published literature, including the following (each published by Microsoft Press, One Microsoft Way, Redmond, Wash. 98052-6399): King, Adrian, \u201cInside Windows 95,\u201d ISBN 1-55615-626-X, 1994; \u201cThe Developer's Guide to Plug 'n Play: The Official Guide to Designing Hardware for Windows,\u201d ISBN 1-55615-642-1, 1994; Catapult, Inc. Staff, \u201cMicrosoft Windows NT Workstation Step by Step,\u201d ISBN 1-55615-695-2, 1994; Jamsa, Chris, \u201cConcise Guide to Windows, 2d ed.\u201d ISBN 1-55615-666-9, 1994; \u201cWindows NT Resource Guide, Vol. 1,\u201d ISBN 1-55615-653-7, 1994; \u201cWindows NT Network Resource Guide, Vol. 2,\u201d ISBN 1-55615-656-1, 1994; \u201cWindows NT Messages, Vol. 3,\u201d ISBN 1-55615-654-5, 1994; \u201cOptimizing Windows NT, Vol. 4,\u201d ISBN 1-55615-655-3, 1994; \u201cMicrosoft Windows NT Resource Kit: The Information & Tools You Need to Become a Windows NT Expert, Version 3.5 for Workstation & Advanced Server Editions, 2d. ed.\u201d (4 vols.) ISBN 1-55615-657-X, 1994; \u201cMicrosoft ODBC 2.0 Programmer's Reference & SDK Guide: For Microsoft Windows & Windows NT,\u201d ISBN 1-55615-658-8, 1994; Custer, Helen, \u201cInside the Windows NT File System,\u201d ISBN 1-55615-660-X, 1994; Nelson, Steve, \u201cField Guide to Windows 3.1,\u201d ISBN 1-55615-640-5, 1994; Catapult Inc. Staff, \u201cMicrosoft Windows NT Step by Step,\u201d ISBN 1-55615-573-5, 1993; Blake, Russ, \u201cOptimizing Windows NT,\u201d ISBN 1-55615-619-7, 1993; Richter, Jeffrey, \u201cAdvanced Windows NT,\u201d ISBN 1-55615-567-0, 1993; Stinson, Craig, \u201cRunning Windows NT,\u201d ISBN 1-55615-572-7, 1993; Groves, James A., \u201cWindows NT Answer Book,\u201d ISBN 1-55615-562-X, 1993; Borland, Russell, \u201cWindows NT Companion,\u201d ISBN 1-55615-554-9, 1993; Microsoft Staff, \u201cMicrosoft LAN Manager for Windows NT,\u201d ISBN 1-55615-543-3, 1993; Microsoft Staff, \u201cMicrosoft Win32 Programmers Reference,\u201d (3 vols.) ISBN 1-55615-517-4, 1993; Petzold, Charles, \u201cProgramming Windows 3.1, 3d. ed.,\u201d ISBN 1-55615-395-3, 1992; \u201cWindows Interface,\u201d ISBN 1-55615-439-9, 1992; Custer, Helen, \u201cInside Windows Network,\u201d ISBN 1-55615-481-X, 1992; Catapult, Inc. Staff, \u201cMicrosoft Windows 3.1, Step by Step,\u201d ISBN 1-55615-501-8, 1992; Petzold, Charles, \u201cProgramming Graphics for Windows,\u201d ISBN 1-55615-395-3, 1992; \u201cMicrosoft Windows 3.1 Programmer's Reference,\u201d (4 vols.) ISBN 1-55615-494-1, 1992; \u201cMicrosoft Windows Multimedia Authoring & Tools Guide,\u201d ISBN 1-55615-391-0, 1991; \u201cMicrosoft Windows Multimedia Programmer's Workbook,\u201d ISBN 1-55615-390-2, 1991; \u201cMicrosoft Windows Multimedia Programmer's Reference,\u201d ISBN 1-55615-389-9, 1991; \u201cThe Windows Interface: An Application Design Guide,\u201d ISBN 1-55615-384-8, 1992. (All volumes without author listings are by Microsoft Corporation Staff.)","Other Applications","The following applications are incorporated herein by reference (only the first named inventor is listed):","Belfiore, Joseph \u201cMethod and System for Transferring Data to Common Destinations Using a Common Destination List,\u201d U.S. Pat. No. 5,694,563, Issued Dec. 2, 1997 and Filed Dec. 13, 1994;","Bogdan, Jeffrey L., \u201cSystem Provided Window Elements Having Adjustable Dimensions,\u201d U.S. Pat. No. 5,977,966, Issued Nov. 2, 1999 and Filed Apr. 28, 1993;","Chew, Chee Heng, \u201cSystem Provided Child Window Controls,\u201d Ser. No. 08\/355,400, Filed Dec. 13, 1994, now U.S. Pat. No. 5,889,522, Issued Mar. 30, 1999;","Chew, Chee Heng, \u201cMethod and System for Combining Prefix and First Character Searching of a List,\u201d U.S. Pat. No. 5,692,173, Issued Nov. 25, 1997 and Filed Dec. 13, 1994;","Ellison-Taylor, Ian M., \u201cMethod and System for Aligning Windows on a Screen,\u201d Ser. No. 08\/161,788, Filed Dec. 3, 1993, now abandoned;","Ellison-Taylor, Ian M., \u201cTaskbar With Start Menu,\u201d Ser. No. 08\/354,916, Filed Dec. 13, 1994, now abandoned;","Glasser, Daniel S., \u201cMethod and System for Controlling User Access to a Resource in a Networked Computing Environment,\u201d Ser. No. 08\/355,409, Filed Dec. 13, 1994, now abandoned;","Guzak, Christopher J., \u201cTree View Control,\u201d Ser. No. 08\/355,408, Filed Dec. 13, 1994, now abandoned;","Guzak, Christopher J., \u201cData Transfer With Expanded Clipboard Formats,\u201d Ser. No. 08\/355,397, Filed Dec. 13, 1994, now abandoned;","Jones, Greg, \u201cMethod and System for Accessing Shell Folder Capabilities by an Application Program,\u201d Ser. No. 08\/356,081, Filed Dec. 13, 1994, now abandoned;","Jones, Greg, \u201cMethod and System for Authenticating Access to Heterogeneous Computing Services,\u201d Serial No. 5,655,077, Issued Aug. 5, 1997 and Filed Dec. 13, 1994;","Kanamori, Atsushi, \u201cMethod and System for Providing a Group of Parallel Resources as a Proxy for a Single Shared Resource,\u201d U.S. Pat. No. 5,754,854, Issued May 19, 1998 and Filed Nov. 14, 1994;","Kanamori, Atsushi, \u201cMethod and System for Threaded Resource Allocation and Reclamation,\u201d U.S. Pat. No. 6,363,410, Issued Mar. 26, 2002 and Filed Dec. 13, 1994;","Lipe, Ralph A., \u201cMethod and Apparatus for Installing Device Drivers on a Computer,\u201d Ser. No. 08\/271,058, Filed Jul. 5, 1994, now abandoned;","Lipe, Ralph A., \u201cComputer System Messaging Architecture,\u201d U.S. Pat. No. 5,784,615, Issued Jul. 21, 1998 and Filed Dec. 13, 1994;","Mabry, Jonathon E., \u201cAutomatic Installation of Printers in a Distributed Environment,\u201d Ser. No. 08\/318,070, Filed Oct. 5, 1994, now abandoned;","Moore, George M., \u201cMethod and System for Providing Substitute Computer Fonts,\u201d Ser. No. 08\/085,482, Filed Jun. 30, 1993, now abandoned;","Nakajima, Satoshi, \u201cShell Extensions for an Operating System,\u201d U.S. Pat. No. 5,831,606, Issued Nov. 3, 1998 and Filed Dec. 13, 1994;","Nixon, Toby L., \u201cMethod and System for Determining Control of a Telephone Communication Among Multiple Application Programs,\u201d Ser. No. 08\/318,989, Filed Oct. 6, 1994, now abandoned;","Oran, Daniel P., \u201cOperating System Provided Notification Area for Displaying Visual Notifications from Application Programs,\u201d U.S. Pat. No. 5,617,526, Issued Apr. 1, 1997 and Filed Dec. 13, 1994;","Parry, William G., \u201cImproved Method and Apparatus for Controlling Power Down of a Hard Disk Drive in a Computer,\u201d U.S. Pat. No. 5,574,920, Issued Nov. 12, 1996 and Filed Oct. 25, 1994;","Patrick, Stuart R., \u201cMethod and Apparatus for Creating and Performing Graphics Operations on Device-Independent Bitmaps,\u201d U.S. Pat. No. 5,734,387, Issued Mar. 31, 1998 and Filed Oct. 24, 1994;","Patrick, Stuart R., \u201cRun-time Code Compiler for Data Block Transfer,\u201d U.S. Pat. No. 5,706,483, Issued Jan. 6, 1998 and Filed Dec. 13, 1994;","Patrick, Stuart R., \u201cMethod and Apparatus for Creating and Transferring a,\u201d U.S. Pat. No. 5,659,336, Issued Aug. 19, 1997 and Filed Oct. 24, 1994;","Patrick, Stuart R., \u201cBitmap Block Transfer Image Conversion,\u201d U.S. Pat. No. 5,644,758, Issued Jul. 1, 1997 and Filed Dec. 13, 1994;","Radko, Ron, \u201cProviding Applications Programs with Unmediated Access to a Contested Hardware Resource,\u201d U.S. Pat. No. 5,901,312, Issued May 4, 1999 and Filed Dec. 13, 1994;","Richman, Darryl, \u201cMethod for Automatically Configuring Devices including a Network Adapter without Manual Intervention and without Prior Configuration Information,\u201d U.S. Pat. No. 5,655,148, Issued Aug. 5, 1997 and Filed Dec. 13, 1994;","Sadovsky, \u201cMethod for Providing Access to Independent Network Resources by Establishing Connection Using an Application Programming Interface Function Call Without Prompting the User for Authentication Data,\u201d U.S. Pat. No. 5,689,638, Issued Nov. 18, 1997 and Filed Dec. 13, 1994;","Smale, Leonard T., \u201cNotification Mechanism for Coordinating Software Extensions,\u201d Ser. No. 08\/354,630, Filed Dec. 13, 1994, now abandoned;","Veghte, William L., \u201cMethod and System for Connecting to Browsing and Accessing Computer Network Resources,\u201d U.S. Pat. No. 5,953,012, Issued Sep. 14, 1999 and Filed Dec. 13, 1994;","Williams, Robert J., \u201cDevice Independent Modem Interface,\u201d U.S. Pat. No. 5,815,682, Issued Sep. 29, 1998 and Filed Dec. 13, 1994;","Williams, Robert J., \u201cMethod and Apparatus for Maintaining Network Communications on a Computer Capable of Connecting to a WAN and a LAN,\u201d U.S. Pat. No. 5,659,685, Issued Aug. 19, 1997 and Filed Dec. 13, 1994;","Forming a part of the present specification is SDK\/DDK documentation made available by Microsoft to third party developers to enable them to utilize the disclosed API technologies (as published by Microsoft on Oct. 28, 1994). Due to its length, such documentation is not printed as part of the patent application but is made of record in the application file of the parent application in CD-ROM form. This documentation includes the following files{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
