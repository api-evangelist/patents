---
title: Method and system for sharing configuration parameters among processes of an electronic device
abstract: An electronic system comprises a memory, a parser, and a device driver. A plurality of applications and a document are stored in a user space of the memory, the document storing configuration parameters. The parser module parses the document to retrieve the parameters in response to invocation from at least one application. The device driver creates data structure for the parameters in the kernel space of the memory, thus to facilitate a plurality of programs to execute different functions of the system by commonly utilizing the parameters through the device driver.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08375398&OS=08375398&RS=08375398
owner: Hon Hai Precision Industry Co., Ltd.
number: 08375398
owner_city: New Taipei
owner_country: TW
publication_date: 20090722
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","DETAILED DESCRIPTION","EXAMPLE 1"],"p":["This application claims the benefit of priority from Chinese Patent Application No. 200810303758.7, filed on Aug. 14, 2008 in the People's Republic of China. The entirety of the above-mentioned patent application is hereby incorporated by reference herein in its entirety.","1. Technical Field","The disclosure relates to electronic devices, and more particularly to an electronic device system capable of sharing configuration parameters among processes.","2. Description of Related Art","The extensible markup language (XML) is commonly utilized to organize various software parameters as a document. An application may invoke functions or relative libraries to analyze XML documents to retrieve parameters. Since the parameters may be proprietary to an application, sharing of the parameters with other applications or with an operating system kernel is difficult.","With reference to , a main memory  comprises a user space and a kernel space. Applications -and a document  of configuration parameters are located in the user space while an operating system kernel is located in the kernel space. When an application accesses the configuration parameters, the application parses the document  to rearrange the configuration parameters in a tree structure, referred to as a configuration tree, such as trees -in , according to an interior structure of the document. Each node of the configuration tree records a parameter value. The application allocates the configuration tree in a private area of the application which is unknown and inaccessible by other programs. This underlies the difficulty of parameters synchronization or sharing among processes.","Sharing of configuration parameters among applications, however, is necessary in some circumstances. In an example of an asymmetric digital subscriber line (ADSL) modem, after a program utilizes point-to point protocol (PPP) or dynamic host configuration protocol (DHCP) to acquire an internet protocol (IP) address, other programs in the modem, such as a network address translation (NAT) program and\/or a firewall program may require retrieval of the IP address. Configuration trees in  hinder configuration parameter sharing or synchronization among programs. Additionally, an operating system kernel  in  may face similar difficulty in accessing configuration trees or configuration parameter documents.","The disclosure may be implemented in various device or systems, such as routers, ADSL devices, cable modems, or set-top boxes (STBs).","With reference to , an electronic device system  comprises a nonvolatile memory , a processor , a main memory , and a communication unit . The communication unit  may comprise communication ports and various components, such as antennas and controllers thereof, a digital signal processor (DSP), an analog-to-digital converter, a tuner in a cable modem, an Ethernet controller, a universal serial bus (USB) controller, and\/or a peripheral component interconnect (PCI) controller. The processor  may be made up of integrated circuits (IC) implementing processes and\/or executing programs. The processor  may be packaged as one IC chip or multiple interconnected IC chips. For example, the processor  may be a central processing unit (CPU) or a combination of a CPU and a communication controller. The communication controller controls communication between components of the electronic device system  and\/or communication between the electronic device system  and an external device. Note that the communication components may be integrated into the communication unit  or the processor .","The main memory  may comprise one or more types of random access memory (RAM), Examples of the nonvolatile memory  may comprise electrically erasable programmable read-only memory (EEPROM) or flash memory. The nonvolatile memory  stores an operating system (OS) and applications of the electronic device system . Programs and data may be stored in the nonvolatile memory  in compressed formats, for decompression and loading to main memory  before execution or retrieval of the programs and data.","With reference to , the electronic device system  may comprise a main memory A. The main memory A may be a virtual memory mapped to an area on the main memory  or the nonvolatile memory . The main memory A comprises a user space and a kernel space. A document  comprises configuration parameters privileged to an application , which is to be shared by other applications.","One application (such as the application in ) in the electronic device system  activates parsing of the document . A kernel  builds a configuration tree (such as a tree ) in the kernel space of the main memory A corresponding to the document  in the user space of the main memory A according to relationships of configuration parameters in the document . Each application which is to read or modify parameters in the tree is required to utilize the kernel  to read or modify. Data structure of configuration parameters is organized as trees in the disclosed embodiments but is not limited thereto, and may alternatively be organized as arrays or linked lists. Each of applications -may read or modify parameters in the tree through the kernel . An exemplary embodiment of electronic device system is detailed with reference to .","In , the electronic device system  comprises a group  of applications A-An, where n is a positive integer greater than one. Examples of the applications A-An may comprise the applications -in . The electronic device system . The electronic device system  further comprises an application programming interface (API) , system calls  provided by the kernel , a device driver , and a device file (or device special file) .","The API  comprises function library including functions for analyzing configuration parameter documents (such as document ), functions for building configuration trees based on the analysis, and functions for reading and modifying parameter values in the configuration tree. Since configuration trees are located in the kernel space, functions in the API  may utilize system calls (such as \u201cioctl\u201d in the Linux operating system) provided by the kernel  to trigger the kernel , whereby the kernel  further triggers the device  to establish, read, or modify configuration trees in a group  thereof. The group  comprises configuration trees T-Tm, wherein m is a positive integer greater than one. For example, configuration trees in the group  can comprise the configuration tree in .","In Unix, Linux, or Unix-similar OSs, a device file represents a device and a device driver thereof, and is stored in a directory \u201c\/dev\u201d, thus to enable interaction with the device driver by an application through standardized input\/output system calls. Here, the device file is named \u201cxmlconf\u201d and represents the group  and configuration trees therein. In , a major number N in the device file  is a number representing the device driver , and a minor number set N comprises multiple minor numbers each representing one of configuration trees T-Tm. Each application in group , functions in the API , and the device driver  can utilize the device file  to specify, and read or write one configuration tree.","An application may open the device file \/dev\/xmlconf to retrieve the major number N and subsequently request the kernel  to locate and utilize the device driver  based on the major number N. The device driver  may locate a specific configuration tree based on a minor number in the device file \/dev\/xmlconf and modify or read parameter values in the specific configuration tree in response to requests from the application.","Device files may comprise, for example, character special file (corresponding to a character device) and block special file (corresponding to a block device). The character special file specifies a character device and that the data exchanged between the character device and an OS is in character units. The block special file specifies a block device and that the data exchanged between the block device and an OS is in block units. A block unit is greater than a character unit. Examples of the character devices may comprise modems and telephony devices. Examples of the block devices may comprise hard disk drives and optical disc drives. The device driver  retrieves and returns parameter values in a node of a configuration tree for each read request, and thus the device file  is preferably a character device. An example of parsing a configuration document to generate a corresponding configuration tree of the document is given in the following:",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 5","FIG. 6"],"b":["12","12","200"],"sub":["\u2014","\u2014","\u2014","\u2014","\u2014","\u2014","\u2014","\u2014"]},"The kernel  or each application in the electronic device system  may initiate the conversion from the document to a configuration tree. For example, the kernel may initiate the conversion upon bootstrap of the electronic device system . Alternatively, an application Ai (wherein i is an positive integer, and 1\u2266i\u2266n) may initiate the conversion up initialization of the application Ai. The kernel  or each of the applications A-An may utilize the API  to convert the document to representative data thereof in a specific intermediate format, and the device driver further establishes a configuration tree corresponding to the document from the representative data.","A process is a program in execution by the processor  and may comprise an executed application, or kernel. With reference to , when a first process in the electronic device system  is to establish a configuration tree, the process invokes a tree-establishing function in the API  (step ). The invocation comprises a filename of the device file  corresponding to the device driver . The tree-establishing function acts as a parser module to parse the document and generate representative data comprising parameter values and parameter relationships recorded in the document in response to the invocation from the process (step ). The attribute \u201cautoScan\u201d and the value thereof in the tag <protocol> may be, for example, represented by \u201cprotocol.autoScan=enable\u201d in the representative data in step . The tree-establishing function further transfers the filename of the device file , the representative data, and other required data to the kernel  through a system call  provided by the OS of the electronic device system  (step ). The kernel  retrieves the device file  based on the filename, subsequently retrieves the device driver  based on the major number N in the device file , and transfers the representative data to the device driver , thus to trigger configuration tree establishment by the device driver  (step ). The device driver  creates a minor number in the minor number set N to correspond to the to-be-established configuration tree (step ). The device driver  accordingly utilizes the representative data to establish a configuration tree Tj representative of the representative data and the document (step ). The variable j is a positive integer, and 1\u2266j\u2266m.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 6","b":["1","12","34","12","700","34","34"],"i":["a","a "]},"After the configuration tree Tj has been established, parameter values in nodes of the configuration tree Tj may be read or modified by other processes. With reference to , when a second process in the electronic device system  is to modify a specific node in the configuration tree Tj (referred to as a target node hereafter), the second process invokes a function in the API  for modifying the configuration tree (step ). The second process may be a process of any of the application A-An or the kernel . The invocation in step  comprises a filename of the device file  corresponding to the device driver , new configuration parameter values, and other data as required. For example, a PPP or DHCP process receives a new IP address of the electronic device system  as a new configuration parameter value from a WAN and accordingly utilizes the new IP address to update an original IP address of the electronic device system  recorded in a target node in the configuration tree Tj. The invocation in step  may comprise the name of the target node and the path from the root of the configuration tree Tj to the target node. The path may comprise names of ancestor nodes of the target node.","The modifying function invoked in step  transfers the filename, the name of the target node, and new configuration parameter values to the kernel  through a system call provided by the OS of the electronic device system  (step ). The kernel  retrieves the device file  based on the filename, subsequently retrieves the device driver  based on the major number N in the device file , and transfer the new configuration parameter values to the device driver , thus to trigger the device driver  to update parameter values in the target node (step ). The device driver  locates the target node in the configuration tree Tj (step ) and utilizes the new configuration parameter values to update parameters values recorded in a target node (step ). In step , the device driver  may retrieve the target node based on the path directing thereto or by searching the entire configuration tree Tj.","In , the IP address of electronic device system  in the configuration tree Tj is generated from an attribute \u2018address=\u201c192.168.1.1\u201d\u2019 in \u201centry1\u201d tags in block B. After the IP address update, a firewall program in the electronic device system  may read the new IP address of the electronic device system  from the configuration tree Tj and utilize the new IP address to perform firewall functions. Similarly, a network address translation (NAT) program in the electronic device system  may read the new IP address of the electronic device system  from the configuration tree Tj and utilize the new IP address to perform NAT functions.","With reference to , when a third process in the electronic device system  is to read a specific node in the configuration tree Tj (referred to as a target node hereafter), the third process invokes a function in the API  for reading the configuration tree (step ). The third process may be a process of the applications A-An or the kernel . The invocation in step  comprises a filename of the device file  corresponding to the device driver  and the name of the target node. The invocation in step  may comprise the path from the root of the configuration tree Tj to the target node. The path may comprise names of ancestor nodes of the target node.","The reading function invoked in step  transfers the filename and the name of the target node to the kernel  through a system call provided by the OS of the electronic device system  (step ). The kernel  retrieves the device file  based on the filename, subsequently retrieves the device driver  based on the major number N in the device file , and transfers the name of the target node to the device driver , thus triggering the device driver  to locate the target node and retrieve parameter values in the target node based on the node name (step ). The device driver  locates the target node in the configuration tree Tj based on the node name of the target node (step ) and returns parameter values therein to the kernel  (step ). The kernel  further returns the parameter values retrieved from the target node to the third process (step ). In step , the device driver  may retrieve the target node based on the path directing thereto or by searching the entire configuration tree Tj.","Utilizing the disclosed method, the application A-An and the kernel  may share and synchronize configuration parameters. The method may be implemented in alternative embodiments. For example, the electronic device system  can comprise a system configuration process. The system configuration process allows a username, currently \u201cadmin\u201d as shown in , to be recorded in the child node \u201cvalue\u201d of the node \u201csysUserName\u201d. The system configuration process provides a user interface to receive setting of the configuration parameters, such as \u201clogLevel\u201d, in the configuration tree in  from a user. Here, each program in the electronic device system  records relative events of the program during execution thereof in a log file. The electronic device system  may transmit the log file to an external server for further analysis. Each program in the electronic device system  determines the complexity of event recording related to the program based on a parameter value in the node \u201clogLevel\u201d. For example, each program in the electronic device system  may determine event types based on a parameter value in the node \u201clogLevel\u201d and records no event except events of the determined types. Values recorded in node \u201csysUserName\u201d and \u201clogLevel\u201d can be set, read, or modified according to the method as described.","The electronic device system  further comprises a user authentication process. The system configuration process provides a user interface to receive setting of an IP address of a remote device capable of remotely accessing the electronic device system , and stores the IP address of the remote device between <TelnetAcl> and <\/TelnetAcl> in block B of the document . After configuration parameters in the block B has been converted to one node in the configuration tree Tj, the system configuration process may add, delete, or modify the IP address in the node. The user authentication process may access and utilize the IP address of the remote device to accordingly provide access control of the electronic device system  to any user from any remote device.","The disclosed method can assist the current system design. The application A-An and the kernel  may share and synchronize configuration parameters utilizing the disclosed method. The disclosed method is preferably implemented in Linux\/Unix-similar OS environments.","It is to be understood, however, that even though numerous characteristics and advantages of the disclosure have been set forth in the foregoing description, together with details of the structure and function of the invention, the disclosure is illustrative only, and changes may be made in detail, especially in matters of shape, size, and arrangement of parts within the principles of the invention to the full extent indicated by the broad general meaning of the terms in which the appended claims are expressed."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 6","FIG. 5"],"b":"1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
