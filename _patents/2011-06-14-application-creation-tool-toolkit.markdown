---
title: Application creation tool toolkit
abstract: Various embodiments of systems and methods for an application creation tool (ACT) toolkit are described herein. The ACT toolkit includes a set of application creation APIs and an application creation service for invoking the set of application creation API. An ACT is in communication with the application creation service of the ACT toolkit. The ACT sends an application creation request to the application creation service for creating a UI application. The ACT can be customized by re-defining the application creation service of the ACT toolkit and establishing a communication between the re-defined application creation service and the ACT. The re-defined application creation service invokes the set of API to create a customized application object for the UI application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08924914&OS=08924914&RS=08924914
owner: SAP SE
number: 08924914
owner_city: Walldorf
owner_country: DE
publication_date: 20110614
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Embodiments generally relate to computer systems, and more particularly to methods and systems for creating applications.","Several tools, such as Visual Composer, by SAP, AG of Walldorf, Germany, are available in market which allow a user to create applications. These tools allow the user to create applications based on pre-defined application creation guidelines. However, such application creation guidelines change from time to time and these tools cannot be customized to create applications which are compliant with the changed guidelines.","Further, a user creating applications may want to customize one or more objects being created for the applications. For example, the user may want to create a customized toolbar for each application created by the tool. In the existing systems, the user has to individually change the toolbar for each created application, which is time consuming and undesirable.","Therefore, there is a need for a system and method that allows a user to customize an application creation tool based on the requirement of the user.","Various embodiments of systems and methods for application creation tool toolkit are described herein.","In one aspect, an application creation tool (ACT) toolkit is provided. The ACT toolkit includes a set of application creation APIs to create a plurality of application objects, and an application creation service to invoke the set of application creation APIs to create an application object from the plurality of application objects for an application.","In a further aspect, input is received to re-define the application creation service. The redefined application creation service invokes the set of application creation APIs to create a customized application object from the plurality of application objects for the application.","In yet another aspect, communication is established between the re-defined application creation service and the ACT. The re-defined application creation service receives an application creation request from the ACT for creating the customized application object for the application, via the established communication.","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques for application creation tool toolkit are described herein. In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100"]},"As shown, the application creation framework  includes an application creation tool (ACT) toolkit . According to one embodiment, the ACT toolkit  includes application creation \u201capplication programming interfaces\u201d (APIs)  and application creation services  for invoking the application creation APIs .","In one embodiment, the application creation APIs  can create application objects which can be used to create the application. The application objects created by the application creation APIs  may be re-usable application objects, i.e., the same application object can be re-used for creating different applications. For example, an application object can be in a re-usable form such that it can be used in a ticket reservation application or a search application.","The application creation APIs  may also retrieve business object model specific objects from a database  for creating different applications. The application creation APIs  also create configurations for binding the created application objects to obtain the application. For example, the configurations may specify the arrangement of the created application objects on the user interface and the linking of the created application objects with the database .","In one embodiment, the application creation APIs  may include a plurality of application creation methods for creating the application objects. The application creation methods may also retrieve a business object model specific objects from the backend system.","The application creation services  invoke the set of application creation APIs  to create the plurality of application objects for the application. In one embodiment, the application creation services  are adaptable, i.e., the application creation services  can be re-defined to invoke the set of application creation objects to create a customized application object.","The application creation framework  further includes an application creation tool (ACT)  which is in communication with the application creation services  of the ACT toolkit . The ACT  presents application creation options to an end user for creating the application. According to one embodiment, the ACT  may include a user interface for presenting the application creation options. In one embodiment, the application creation options include some of the application objects that the application creation APIs  can create and some of the business object model specific objects that can be retrieved from the database .","In one embodiment, the end user selects an application object from the presented application creation options at the ACT. The user selected application object forms an application creation request which the ACT  sends to the application creation services  for creating the application. In one embodiment, the ACT  includes a plurality of application creation service invoking methods for sending the application creation requests to the application creation service. The application creation service invoking methods are defined to invoke the application creation services for creating the user selected application objects.","Finally, the application creation APIs  configure the created application objects to create the application. The created application can then be stored in the database .",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":"202"},"The developed re-defined application creation service is defined to invoke the application creation APIs to create a customized application object from the plurality of application objects which the application creation APIs can create. In one embodiment, the re-defined application creation service invokes the application creation methods of the application creation APIs to create the customized application object.","For example, the application creation APIs of the ACT toolkit may include an application creation method \u201cCreate Toolbar Button.\u201d During a standard implementation, i.e., before re-definition of the application creation service, the application creation services invokes the application creation method \u201cCreate Toolbar Button\u201d to create a \u201csave\u201d button.","Suppose that the customer or partner wants that a \u201cclose\u201d button to be created along with the \u201csave\u201d button when the user selected application object is the toolbar. In this case, the developer develops a re-defined user interface specific service which invokes the application creation method \u201cCreate Toolbar Button\u201d to create the \u201csave\u201d button and the \u201cclose\u201d button.","In one embodiment, the developer develops the re-defined application creation service using the Object Oriented (OO) principles. In this case, the re-defined application creation service inherits the application creation service. The developer then performs modification on the inherited application creation service to obtain the re-defined application creation service.","In the above example, the re-defined application creation service inherits the application creation service which invokes the application creation method \u201cCreate Toolbar Button\u201d. The developer then re-defines the application creation request to create the re-defined application creation request which invokes the \u201cCreate Toolbar Button\u201d to create both the \u201csave\u201d button and the \u201cclose\u201d button.","Finally at block , communication is established between the re-defined application creation service and the ACT. In one embodiment, the communication is established to transfer the user selected application objects at the ACT to the re-defined application creation service in the ACT toolkit.","In one embodiment, the communication is established by re-defining the application creation service invoking methods of the ACT. The re-defines application creation service are defined to invoke the re-defined application creation service.","After establishing the connection, the ACT is customized to create the customized application objects. When the end user executes the ACT, the end user obtains the customized application object for the application based on the re-definition of the application creation service. In the example above, if the end user selects the toolbar button option at the customized ACT for creating an application, the created application includes the \u201csave\u201d button and the \u201cclose\u201d button (i.e., the customized application object).",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":"300"},"The application creation framework  includes an application creation tool (ACT) toolkit . As shown, the ACT toolkit  includes a user interface specific API , a pattern specific API , and a business object model specific API . Further, the ACT toolkit  also includes a user interface specific service  for invoking the user interface specific API , a pattern specific service  for invoking the pattern specific API , and a business object (BO) model specific service  for invoking the business object model specific API .","The user interface specific API  creates user interface specific objects. User interface specific objects may include the application objects that are displayed on the user interface of a application. In one embodiment, the user interface specific objects created by the user interface specific API  are re-usable user interface specific objects. A few exemplary re-usable user interface specific objects are a radio button or a checkbox which are not fixed for a particular application but can be re-used in several different applications. In one embodiment, the user interface specific objects may be the re-usable user interface specific objects provided by Web Dynpro, a development tool provided by SAP AG, of Walldorf, Germany.","The user interface specific API  includes a plurality of application creation methods for creating the user interface specific objects. For example, the user interface specific APIs  may include a method \u201cCreate checkbox\u201d for creating the checkbox for a application. In one embodiment, the user interface specific service  invokes at least one of the application creation methods included in the user specific API  to create user interface specific objects for the application. The user interface specific service  is adaptable and can be re-defined to invoke the user interface specific API  to create a customized application object.","The pattern specific API  are defined to create a plurality of pattern specific objects. The pattern specific objects or patterns are configurable, re-usable user interface units designed to let an end user accomplish a specific but generically defined task, such as searching for business objects.","In one embodiment, the pattern specific objects created by the pattern specific API  are generic pattern specific objects which include a pre-defined arrangement for the user interface specific objects.","A pattern specific object containing the components necessary to implement a complete application may be referred to as an \u201capplication floorplan\u201d. Examples of different pattern specific objects include an object instance (OI) floorplan, an overview page (OVP) floorplan, a guided activity floorplan (GAF), or a quick activity floorplan (QAF). Each of these floorplans provides a predefined pattern which can be used in several different applications. Another example of a re-usable pattern specific object created by the pattern specific API  is a \u201cform\u201d, or a \u201clist.\u201d","The pattern specific API  includes a plurality of application creation methods for creating the plurality of pattern specific objects. For example, the pattern specific API  may include the application creation method for creating an OVP floorplan. This method creates a generic pattern, which arranges the different user interface specific objects in a manner defined by the OVP floorplan. In one embodiment, the pattern specific service  invokes the application creation methods of the pattern specific API  to create the pattern specific objects for the application.","In the example discussed above, the pattern specific service  invokes the method for creating the OVP floorplan to provide the pre-defined generic OVP pattern and arrange the different user interface object in a pre-defined manner defined for the OVP pattern.","In one embodiment, the pattern specific service  invokes the user interface specific service , which invokes the user interface specific API  to create user interface specific objects for the application.","The business object model specific API  handles the communication between the application and the backend system. In one embodiment, the backend system is a database  that stores the business object model related data.","In one embodiment, the business object model is one of the business object models such as Business Object Layer (BOL), Business Object Process Framework (BOPF), and Enterprise Service Framework (ESF). Interfaces for these business object models have implementation of feeder classes, connector classes and transaction handlers which can be used to easily create an application.","These business object models provide a plurality of business object model specific objects. The business object model specific objects may include a business object model specific component, and the business object relations for the business object model specific component. The business object model also includes suggestions about the different pattern specific objects that can be created for each of the object relations of a particular business object model specific component. The business object model specific data is stored in the database .","An example of the business object model specific object may be a main invoice which may have a related secondary invoice (object relations). The business object model may provide suggestions that the pattern specific object to be created for the main invoice is list, and the pattern specific object to be created for the secondary invoice is a form.","The business object model specific API  retrieves the business object model specific objects from the database . In one embodiment, the business object model specific API  includes methods for retrieving the business object model specific objects from the database . In one embodiment, the business object model specific objects being retrieved from the database  is the object relations for a business object model specific component.","Further, as discussed above, the business object models have implementation of feeder class. A feeder class is defined for a particular pattern specific object. For example, the business object model may define a \u201cform feeder class\u201d for a form, a \u201clist feeder class\u201d for a list. Feeder class may define the way a particular pattern type, such as the form or the list, is to be created, and the communication between the user interface and the backend system, such as the database. A feeder class may define the pattern specific object to be created in a default pre-defined manner.","As discussed above, the business object model provides suggestions of the pattern specific objects that can be created for each of the object relations. The generic feeder classes for the different pattern specific objects are pre-defined. In one embodiment, the business object model specific API  connects the user interface specific objects to the database via these pre-defined feeder classes during runtime of the application.","The business object model specific service  invokes the business object model specific API  to retrieve the business object model specific components from the database. In one embodiment, the business object model specific service  assigns the feeder classes to the different pattern specific objects being created for the application.","The application creation framework  further includes an application creation tool (ACT)  which is in communication with the business object model specific service  of the ACT toolkit . The ACT  includes a user interface for presenting the application creation options.","In one embodiment, the application creation options include one or more of the user interface specific objects, one or more of the pattern specific objects, and one or more of the business object model specific components.","As discussed above, the user interface specific API  can create a plurality of user interface specific objects such as buttons, entry boxes, the pattern specific API  can create a plurality of pattern specific objects such as the different floorplans \u201cOVP\u201d, \u201cGA\u201d, \u201cOI\u201d, or \u201cQA\u201d, and the business object model specific API  can retrieve business object model specific objects such as object relations for a particular business object model specific component.","In one embodiment, the ACT  can be customized to present all of the application objects that the APIs , , and  can create, and all of the business object model specific components stored in the database. In another embodiment, the ACT  may present only some of the application objects and business object model specific objects.","In one embodiment, the application creation options are presented to an end user. In one embodiment, the end user executes the ACT  to create the application. Executing the ACT  may include selecting an application object from the application objects presented to the end user. The ACT  may include a set of steps which the end user performs to select the application object from application objects presented to the end user.","In one embodiment, the ACT  may also provide the end user the various pattern specific objects relating to the object relations of the selected business object component for creating the application. As discussed above, the business object model also provides suggestions of the different pattern specific components that can be created for the object relations of the selected business object component. The end user can then select or deselect the object relations and the pattern specific components corresponding to the selected object relation that are then created by the pattern specific API .","In one embodiment, the application creation service invoking methods of the ACT  send the application creation request to the business object model specific service . The business object model specific service  invokes the business object model specific API  for retrieving the selected business object component, in the application creation request, from the database .","Further, the business object model specific service  invokes the pattern specific service  for creating the pattern specific components, in the application creation request, for the application. Finally, the pattern specific service  invokes the user interface specific service  for creating the user interface specific objects, in the application creation request, for the application.","In another embodiment, the application creation service invoking methods of the ACT  may send the application creation requests related to the business object model specific objects to the business object model specific service , the application creation request relating to the pattern specific objects to the pattern specific service , and the application creation request relating to the user interface specific object to the user interface specific service .","Based on the received application creation request, the application creation services , , and  invokes the application creation APIs , , and  for creating the application. In one embodiment, the application creation service invokes the plurality of application creation methods for creating the application.","Finally, the set of application creation APIs configure the created application objects to create the application. As shown, the user interface specific service  is in communication with the database . The user interface specific service  transfers the created application to the database , which stores the created application.","In one embodiment, the ACT  also includes methods for setting the generic feeder class for the different pattern specific objects such as forms, list, etc. During a standard implementation the ACT assigns standard feeder classes to the different pattern specific objects. The relationship between the feeder class and the pattern specific objects is defined at the business object model specific service . For example, the relationship in the business object model specific service  may include relationships such as, a feeder class corresponding to a form is a generic form feeder class, a feeder class corresponding to a list is a list feeder class, etc. As discussed above, the feeder class defines the structure of the different pattern specific objects. Therefore based on the assigned feeder class for a particular pattern specific object, the pattern specific API  creates the different pattern specific objects.","In one embodiment, the ACT  is provided to the customer or consumer along with the ACT toolkit . The customer or consumer provides this ACT  to the end user for creating the application.","In another embodiment, only the ACT toolkit  is provided to the partner or the customer. A developer on the partner or customer end creates the ACT  using the ACT toolkit . In one embodiment, a developer may be a software vendor or any individual group, or other entity capable of developing and customizing application creation tools. In one embodiment, the customer or partner may represent a business entity or any other individual, group, or entity capable of providing the ACT  to the end user to create the application.","As discussed above, the user interface specific API , the pattern specific API , and the business object model specific API  can be used to create application objects which may be used to create different applications.","The developer creates the ACT  based on application creation objects, which the partner or customers wants to provide to the end user for creating the application.","In one embodiment, the developer at the partner or customer end creates the ACT  by creating application creation service invoking methods for the ACT . The created application creation service invoking methods are defined to call the business object model specific service , the pattern specific service , and the user interface specific service . The called application creation service invokes the set of application creation APIs to create application objects. In one embodiment, the ACT  is provided a user interface for presenting the application creation options.","As discussed in an example above, the pattern specific API  can be invoked to create the OI floorplan, the GA floorplan, etc. Consider that the customer or the partner wants to provide only the OI Floorplan option to the end user for creating the UI application. The developer creates the application creation service invoking method, for the ACT , which is defined to invoke the pattern specific service. The called pattern specific service  invoke the pattern specific API  for creating the OI floorplan.","Similarly, the developer or the partner can also obtain ACT  that provides the end user options to choose between one of the OI Floorplan or the GA Floorplan for creation of the application. In this case, the developer creates application creation service invoking methods for calling the pattern specific service. The called pattern specific service  invoke the pattern specific API  for creating the OI floorplan or the GA floorplan, based on the floorplan selected for creating the application by the end user.","In one embodiment, at least one of the user interface specific service , the pattern specific service , or the business object model specific service  can be re-defined by the developer to create a customized application object for the application. As shown, the user interface specific service  is being re-defined to obtain a re-defined user interface (UI) specific service . In one embodiment, the re-defined user interface specific service  inherits the user interface specific service .","As discussed in an example above, the user interface specific service  can invoke the application creation method \u201cCreate Toolbar Button\u201d of the user interface specific API  to create a \u201csave\u201d button, whereas the re-defined user interface specific service  can invoke the user interface specific method \u201cCreate Toolbar Button\u201d to create a \u201csave\u201d button and a close button.","Consider another example for re-defining the business object model specific service . As discussed above, the relationship between the pattern specific objects and the feeder class is defined in the business object model specific service . The feeder class includes methods which define the way the pattern specific objects are to be created. If the partner or customer wants to change the pattern specific object \u201cform\u201d, such that the application has the partner or customer defined form then the developer re-defines the form feeder class to obtain a re-defined form feeder class. The next time the ACT  is executed by the end user, the ACT  assigns the re-defined form feeder class to the form. Based on the re-definition defined in form feeder class, the pattern specific API  creates the form as re-defined by the partner or customer.","The feeder class may also be redefined to add custom fields or actions. For example, the feeder class for the pattern specific component \u201cform\u201d may be re-defined such that a check-box is created within the form. The re-defined form feeder class may also define an action when the checkbox or any of the pre-existing fields, of the form is selected. The feeder class may also be re-defined to change the runtime behavior of the different pattern specific components. For example, the feeder class for the form may be re-defined such that additional input checks are provided to the end user, for providing input to the form, during the run-time of the created application.","Similarly the pattern specific service  can also be redefined by the developer to obtain customized user interface.","In one embodiment, redefining the user interface specific service , the pattern specific service , or the business object model specific service  includes replacing these application creation services with re-defined application creation services, i.e., re-defined user interface specific service , re-defined pattern specific service , and re-defined business object (BO) model specific service . For example, when the business object model is changed from BOL to BOPF there is a change in the metadata from BOL to BOPF. Due to this, the business object model specific service  which has been defined for BOL cannot access the BOPF related data. Therefore, the BOL specific service (business object model specific service ) is replaced with a BOPF specific service (re-defined business object model specific service ). The pattern specific service  and the business object model specific service  may remain un-changed in this case The BOPF specific service (re-defined business object model specific service ) is defined to communicate with the pattern specific service .","In one embodiment, when a lower level application creation service is re-defined, the application creation service above this application creation service is also re-defined, i.e., if the developer is re-defining the pattern specific service  the developer also re-defines the business object model specific service  which is above it. Similarly, if the developer is re-defining the user interface specific service , the developer also redefines the pattern specific service  and the business object model specific service  which are above the user interface specific service .","As discussed above, the ACT  transfers the user selected application objects to the business object model specific service . The business object model specific service  then invokes the pattern specific service  for transferring the user selected application objects to the pattern specific service . The pattern specific service  then invokes the user interface specific service  to transfer the user selected application objects to the user interface specific service .","In case, the user interface specific service  is re-defined to obtain re-defined user interface specific service . The business object model specific service  and the pattern specific service  (i.e., the service layers above the user interface specific service ) of the ACT toolkit  are not configured to communicate with the re-defined user interface specific service . Due to this, the business object model specific service  and the pattern specific service  cannot transfer the application creation data to the re-defined user interface specific service . Therefore, after the developer develops the re-defined user interface specific service , the developer also develops the re-defined business object model specific service  and the re-defined pattern specific service . The re-defined business object model specific service  and the re-defined pattern specific service  are defined to invoke the re-defined user interface specific service  for transferring the user selected application objects to the re-defined user interface specific service .","After the re-definition of the application creation service invoking method of the ACT  when the end user executes the customized ACT, the end user obtains the customized application object for the application based on the re-definition of the user interface specific service .",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 4A-4D","b":["400","400","400"]},"As shown, the ACT  provides four steps , , , and  for creating the application. The ACT  provides a plurality of UI application creation options in the four steps , , , and . Initially at step , the ACT  provides a name  and a description  for the application. As shown, the user provides the application name  as ZZCAPPL and the description  of the application as \u201cDemo Application for EyeCatcher\u201d.","In step  the end user is also provided a user interface application creation option \u201cSelect Floorplan\u201d  to choose a particular floorplan (pattern specific object), for the UI application. The ACT  can provide the end user options to choose a floorplan from the plurality of floorplans that the pattern specific API can create. As shown, the end user selects the overview page floorplan  for creating the UI application.","Next at step , as shown in , the end user selects a BOL component \u201cEPM\u201d , for creating the application. The end user also selects a query name  \u201cAdvQueryOrderby Header.\u201d Query defines an entry point for the application and can be used to search specific business objects within BOL during runtime of the application.","The BOL component  \u201cEPM\u201d selected at step is transferred to the business object model specific API which retrieves the object relations (business object model specific objects) related to the business object component  \u201cEPM\u201d from the database. The business object model specific API then provides the object relations  to the ACT , which is displayed at step  ().","As discussed above, the business object model BOL also provides suggestions of pattern specific objects to be created for each of the object relations  of the selected business object component  \u201cEPM\u201d. As shown, the ACT  provides a plurality of pattern specific objects  \u201cGUIBB Type\u201d corresponding to the plurality of object relations . As shown, the pattern specific objects  include a form \u201cFORM_GL2\u201d, a list \u201cLIST\u201d and search \u201cSEARCH\u201d pattern specific objects for the different object relations  of the selected business object component .","The feeder classes  corresponding to the plurality of pattern specific objects  is also provided. The feeder classes  are standard feeder class for the pattern specific objects  form, list and search. As discussed above, a developer can re-define the feeder class in which case these standard feeder class  will be replaced by the re-defined feeder class,","As shown, the end user is provided the choice to select or deselect a one or more of the object relations  by using the check boxes provided in the \u201cJoin Configurations\u201d  and \u201cCreate\u201d . The pattern specific objects  corresponding to the object relations selected at  and  are the pattern specific objects to be created for the application.","Finally at step  a package  is assigned for the application which is then saved  (). After the end user executes the four steps -, the various pattern specific objects, which are selected at step , and the floorplan  selected at step  are transferred to the pattern specific service, either directly or via the business object model specific service, which invokes the pattern specific API to create and configure these pattern specific objects for the application. The created application is then stored in the database.","The business object model specific API connects the created pattern specific objects with the database via the assigned feeder class.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":["FIG. 5","FIG. 4A-4D"],"b":["400","500","502"]},"As shown the end user performs a search for \u201cGross Amt.\u201d  within the range of 1000 and 3000.","The result of the search is shown in a \u201cResult List\u201d  which provides all the purchase orders within the gross amount of 1000 and 3000. As shown, the result list  includes two purchase orders  and  in the range of 1000 and 3000.","Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components maybe implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable storage medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer readable storage media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 6","b":["600","600","602","622","600","616","622","604","606","604","606","602","606","600","610","612","600","610","1112","600","614","600","620","620","1100","618","600","608","624","624","624","620","624"]},"A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transactional, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transactional data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, a plurality of reports, and any other data source accessible through an established protocol, such as, Open DataBase Connectivity (ODBC), produced by an underlying software system (e.g., ERP system), and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams, broadcast data, and the like. These data sources can include associated data foundations, semantic layers, management systems, security systems and so on.","In the above description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however that the invention can be practiced without one or more of the specific details or with other methods, components, techniques, etc. In other instances, well-known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.","Although the processes illustrated and described herein include series of steps, it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps, as some steps may occur in different orders, some concurrently with other steps apart from that shown and described herein. In addition, not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover, it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.","The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the embodiments of the invention with particularity. The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4A-4D"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 5","FIG. 4A-4D"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
