---
title: Method and system for a non-hierarchical trace system using a hierarchical control interface
abstract: A method and system for tracing components in computer applications is provided in which trace data from components can be logged in real time. A hierarchical control interface  is used in which leaf nodes - represent components  being traced. The hierarchical control interface  includes means for setting trace levels for components  being traced. A non-hierarchical trace system  is used for carrying out the trace processing and includes means  for storing trace level settings received from the hierarchical control interface . The trace system  also includes means  for receiving a call from a component  with trace data; means for checking the trace level settings  for the component ; and means for storing or discarding the trace data accordingly.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08271469&OS=08271469&RS=08271469
owner: International Business Machines Corporation
number: 08271469
owner_city: Armonk
owner_country: US
publication_date: 20111103
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","EXAMPLE 1","EXAMPLE 2","EXAMPLE 3","EXAMPLE 4"],"p":["This is a divisional application of U.S. application Ser. No. 10\/943,054, filed Sep. 16, 2004, entitled \u201cMETHOD AND SYSTEM FOR A NON-HIERARCHICAL TRACE SYSTEM USING A HIERARCHICAL CONTROL INTERFACE,\u201d the entirety of which is incorporated herein by reference.","This invention relates to the field of tracing components of computer applications in a computer system. In particular, this invention relates to tracing data from components in real time in a computer system.","Software tools are used to monitor and analyse the execution of computer applications on a computer system. The form of monitoring may vary from logging occasional messages to logging every step of an computer program for evaluation. This can be very processor intensive for the processor on which the software tool is running. It is also necessary to trace the logging messages to the components of the system being monitored in order to obtain a complete picture of the performance of the system.","It is particularly beneficial, to log messages and trace the messages to components in real time as the system is running in order to take necessary action immediately to address any issues demonstrated by the logging. Run time logging and tracing requires even more processor performance.","A Java logging application programming interface (API) (Java is a trade mark of Sun Corporation) is provided in the Java platform to facilitate software servicing and maintenance at customer sites.","The Java logging API enables a Java program application, servlet, applet, EJB (Enterprise Java Bean), etc to produce messages which are collected as log reports. The log reports can be used for analysis by, for example, end users, system administrators, field service engineers, and software development teams. The log reports capture information such as security failures, configuration errors, performance bottlenecks, and\/or bugs in the application or platform. This is a very user friendly and flexible logging API.","Java Specification Request JSR-47 is a logging API specification provided in the Java package java.util.logging in Java virtual machine (JVM) versions 1.4 onwards. The package java.util.logging has various interfaces and classes of objects including a logger class of objects.","Software components in a system which is being logged send messages to logger objects in the logging API. The logger objects are virtual components that represent the software components in the applications being logged. The messages are either accepted or discarded by the logger object depending on the priority level of the log message. Logger objects are organised in a hierarchical namespace and child logger objects may inherit logging properties from their parents in the namespace. The hierarchical namespace is managed by a log manager.","The Java logging API is easy to interface with other applications such as control consoles and can allow the modification of filtering levels for any part of any branch of its hierarchical structure. However, it is too slow and impractical to trace logging messages through a system in real time.","The Java logging API uses an object-oriented method of controlling objects. A component being traced in a computer system has a record logged and pushed up the hierarchical tree to the root node of the tree which outputs the log record. This form of logging is very effective when logging occasional messages. However, when tracing a large number of log records, the system is very slow as it must check at each node in a branch of the tree hierarchical structure.","The hierarchical system used by the Java logging API has the disadvantage that it is very slow and highly impractical to trace data through it in a real time system. The central processing hit would be intolerably high. The reasons for this include the following:\n\n","It is an aim of the present invention to provide a tracing system and method that implements a hierarchical trace system interface whilst allowing a flat system to handle the tracing.","Enabling a flat, non-hierarchical system to handle the tracing provides the speed essential for a real time tracing system. However, a known hierarchical trace system interface, for example JSR-47, provides a lot of flexibility and user friendliness.","According to a first aspect of the present invention there is provided a method for tracing components in computer applications comprising: providing a non-hierarchical trace system; providing a hierarchical control interface in which leaf nodes represent components being traced; the hierarchical control interface setting trace levels for components being traced, the trace levels being stored in the trace system; the trace system: receiving a call from a component with trace data; checking the trace level for the component; and storing or discarding the trace data accordingly.","In one embodiment, the hierarchical control interface may be a Java logging API such as JSR-47. However, other hierarchical control interfaces may be used.","A user may interface with the hierarchical control interface to set trace levels. Preferably, a trace level set for a higher generation node in the hierarchical control interface is passed to all leaf nodes stemming from the higher generation node. The trace levels may be stored at the nodes of the hierarchical control structure as well as in the trace system.","A leaf node may call the trace system with the trace level for the component it represents. The leaf node may call trace level methods in the trace system and the trace level may be stored to an array.","Each component may have an identifying means by which the stored trace level is checked. The identifying means may have a corresponding textual description identifying the component.","According to a second aspect of the present invention there is provided a system for tracing components in computer applications comprising: a hierarchical control interface in which leaf nodes represent components being traced, the hierarchical control interface including means for setting trace levels for components being traced; a non-hierarchical trace system including means for storing trace level settings received from the hierarchical control interface; the trace system also including: means for receiving a call from a component with trace data; means for checking the trace level settings for the component; and means for storing or discarding the trace data accordingly.","The hierarchical control interface may include means for a user to interface with the hierarchical control interface to set trace levels. The hierarchical control interface may also include means for passing a trace level set for a higher generation node to all leaf nodes stemming from the higher generation node. The hierarchical control interface may include means for storing the trace levels at the nodes.","The hierarchical control interface may include means for a leaf node to call the trace system with the trace level for the component it represents. The trace system may include an interface with trace level methods called by the leaf nodes and an array in which the trace level settings are stored. The trace system may also include an interface with trace methods called by the components being traced.","Each component may have an identifying means by which the stored trace level is checked. The identifying means may have a corresponding textual description identifying the component.","According to a third aspect of the present invention there is provided a computer program product stored on a computer readable storage medium, comprising computer readable program code means for performing the steps of: providing a non-hierarchical trace system; providing a hierarchical control interface in which leaf nodes represent components being traced; the hierarchical control interface setting trace levels for components being traced, the trace levels being stored in the trace system; the trace system: receiving a call from a component with trace data; checking the trace level for the component; and storing or discarding the trace data accordingly.","Embodiments of the present invention will now be described, by way of examples only, with reference to the accompanying drawings.","Referring to , a computer system  is shown as an example of a system on which the present invention may be implemented. A computer system  has a central processing unit  with primary storage in the form of memory  (RAM and ROM). The memory  stores program information ,  and data  acted on or created by the programs. The program information includes the operating system code for the operating system  of the computer system  and application code for applications  running on the computer system . Secondary storage includes optical disk storage  and magnetic disk storage . Data and program information can also be stored and accessed from the secondary storage.","The computer system  includes a network connection means  for interfacing the computer system  to a network such as a local area network (LAN) or the Internet. The computer system  may also have other external source communication means such as a fax modem or telephone connection.","The central processing unit  includes inputs in the form of, as examples, a keyboard , a mouse , voice input , and a scanner  for inputting text, images, graphics or the like. Outputs from the central processing unit  may include a display means , a printer , sound output , video output , etc.","In a distributed system, a computer system  as shown in  may be connected via a network connection  to a server on which applications may be run remotely from the central processing unit  which is then referred to as a client system.","A Java virtual machine (JVM)  can be provided supported by the operating system  of the computer system . A JVM  is a computer program that simulates the operation of components in a computer system.","A computer system  may be monitored in order to evaluate the performance of components within the system . A monitoring tool may be in the form of a software tool which monitors the performance of components in a computer system such as that shown in . The monitoring tool may be local to the computer system  or may operate via a network connection, for example from a server monitoring one or more client computer systems. The components may be software components which send log messages to the monitoring tool which traces the log messages to the components for analysis.","A JVM  supports APIs including a Java logging API for monitoring components of a computer system. Java Specification Request JSR-47 is a logging API specification provided in the Java package java.util.logging in Java virtual machine (JVM) versions 1.4 onwards. The package java.util.logging has various interfaces and classes of objects including: ConsoleHandler, FileHandler, Filter, Formatter, Handler, Level, Logger, LoggingPermission, LogManager, LogRecord, MemoryHandler, SimpleFormatter, SocketHandler, StreamHandler, XMLFormatter.","Components in a system which is being logged send messages to logger objects in the logging API. The logger objects are virtual components that represent the software components in the system being monitored.","The messages are either accepted or discarded by the logger object depending on the logger level designated for that logger object. The logger level is a priority level system ranging from severe for extremely important messages to finest for messages with the greatest detail. Each logger object can be set to accept messages at a required level. Each log message also has an associated log level. The level gives a guide to the importance and urgency of the log message.","Logger objects are organised in a hierarchical namespace and child logger objects may inherit logging properties such as the levels from their parents in the namespace. The logger objects allocate log record objects which are passed to handler objects for publication. Handler objects may filter and format a log record before publishing it to an I\/O stream.","System components send log request messages to logger objects. Each logger object keeps track of a log level that it is interested in and discards log requests below this level. Logger objects are named entities in a hierarchical namespace which is managed by a LogManager.","The described method and system of tracing implement a hierarchical trace system interface such as that of the Java logging API, JSR-47 whilst allowing another, flat trace system to handle the tracing. Each component being monitored is represented by both a name and a number and can have its trace level determined individually. The components are not provided in a hierarchy and therefore logical groups of components can only have a trace function turned on individually.","The trace system maps components to be traced from a flat structure to the hierarchical structure of the known trace system interface. The method of modifying trace levels provided by the known trace system interface is implemented but instead of storing the trace level locally for a branch of the hierarchical structure, the trace level is passed to the leaf nodes descendent from the node in the hierarchical structure corresponding to the component.","Referring to , an arrangement is shown which includes a system  being traced having a plurality of components . A Java virtual machine  supports a logging API  with a hierarchical virtual component structure . A trace system  is provided which maps the components  of the system  being traced to the hierarchical structure  of the logging API .","Log messages sent from the components  of the system  being traced are accepted or discarded according to a logging level and accepted messages are output, for example to a storage means .","A known object-oriented hierarchical logging API  is used as described above, this provides logger objects in the form of a hierarchical namespace. Each logger object has a level of log record that is accepted for that object. This level can be set by a control console . If the log record falls within the acceptable level, the log record is output, for example by storing it to storage means . If the log record falls without the acceptable level, the log record is discarded.","The trace system  uses the hierarchical logging API  as a control system and implements its methods for modifying trace levels. The trace system  maps the components  of the system  being traced by name and number onto the leaf nodes of the hierarchical structure  of the logging API .","A system  being traced will not see the hierarchical logging API , instead it will trace directly to the trace system . However, all the control of the tracing will be handled by the hierarchical logging API  which provides an effective and efficient user interface.","Referring to , a schematic diagram is shown in which a plurality of the components  of the system being traced are shown. Each component  may issue log requests in the form of log messages to the trace system .","The logging API includes a hierarchical structure  of virtual components. The hierarchical structure  has a root node  with branches of nodes. Each branch may have any number of generations of child nodes extending along it (for example, nodes X and Y , ). Each branch is terminated at a leaf node , , , , , . Each leaf node , , , , ,  in the hierarchical structure  of the logging API represents a component  being traced.","Each component  being traced has a designated acceptance level for logging records of messages sent from that component . The acceptance level may be as simple as on\/off for logging records or may include a range of levels of priority corresponding to a level identified in the message. The acceptance level for each component  is provided in the hierarchical structure  at the leaf node , , , , ,  corresponding to the component  being traced.","A control console  is provided which controls the acceptance level states of the components . When a command to change the acceptance level for a component  is sent to the leaf node , , , , , , it stores the acceptance level state so that when the component  is traced, the trace system  knows to look at the leaf node , , , , ,  to find the acceptance level for it.","The trace system  has a trace API of trace methods  that are called by the components . The trace system  also has a trace level API of trace level methods  to set the trace level for a component . The trace level method of the API  are called by the leaf nodes , , , , ,  which represent the components  in the hierarchical structure .","When a user sets the trace level in a node of the hierarchical structure  by using the control console , the trace level is stored on the node itself and is also passed it down to the child nodes and further generations all the way to the leaf nodes. For example referring to , a trace level is set at node X  and passed down to child nodes A, B, C , ,  which are leaf nodes.","When the trace level is received at a node which does not have any child nodes (for example, the leaf nodes , , , , , ) then it calls the trace level API  on the trace system  to set the trace level for the component it represents to the level passed to it from above.","The trace system  has an array  which stores the trace level values received from the leaf nodes of the hierarchical structure. The array  is then directly looked at when components  trace to the trace system .","The trace system  does not know about the hierarchical structure . The hierarchical structure  knows about the trace system  and calls methods on it, but the trace system  does not know what is setting its trace level settings. This means that any control system could be used to set the trace level settings.","The hierarchical structure  stores the values of trace levels that have been set to it. This allows the control console  to interrogate it so that users can know what the values are currently set to. This is a standard feature of the logging API JSR-47 which in the described embodiment is used as the user interface.","In addition, the actual values of the trace level settings that are being checked against when the calls come through from the components  are stored in the array  within the trace system .","In the trace system , the components  are all defined with a textual name and a corresponding number ID. There are methods available that will retrieve the appropriate data when passed the other value.","Each class in a component  knows which component it belongs to. A developer writes in the name of the component it belongs to. When it is created, it uses this component name to look up the number ID by calling a method on the trace system . It stores this component number, and every time it traces to the trace system  it passes this number as part of the data being traced. This component number is then used to look up the trace level for that component  that is stored in the array  in the trace system  set by the hierarchical structure .","The trace acceptance level used in the trace system  for deciding whether or not to trace data for a component  is reflected in the logging API . Therefore, if a known logging API  such as JSR-47 is used, the following changes are needed.","The loggers are the classes that are created to make the hierarchy of components . However, they only work with the logging API  defined within java.util.logging. As the described system has a different way of setting the trace levels (i.e. with a binary method) and the hierarchical structure is not being used to write data to disk, then new classes are written that inherit the methods defined in JSR-47 and change them to suit the described system.","The modified logging API  has a modified logger class in which the get\/setLevel methods and the Log( . . . ) methods pass the trace levels down to its leaf nodes, or if it is itself a leaf node, then stores that data somewhere safe. Also, easy access to the trace level must be provided to allow the trace system  to query leaf nodes about it.","The logger class is also extended to allow for the trace system's  acceptance levels to be supported. The LogManager class is extended to allow the use of custom loggers.","The following are some examples which illustrate the described method and system for tracing components  shown in .","All components  are to be set to be on full trace.","The control console  which can navigate through the hierarchical structure  sets the root node  to be on full trace.","The root node  then passes this down through the hierarchical structure  to all its children (X, Y, Z, , , ) and they pass it down to all their children (A, B, C, D, E, , , , , ), and so on, until all the nodes are set to on.","The leaf nodes (A, B, C, D, E, Z, , , , , , ) then call the trace system  telling it the trace level that has been set for that component . This trace level is stored in the array  for later reference.","Continuing from Example 1, component A  wants to trace some data.","Component A  passes its trace message to the trace system .","The trace system  (knowing the message is from component A) then looks up component A in the array  to see if that trace is to be stored to disk or to be discarded. As component A is set to on, then the trace message is stored to disk.","Continuing from Example 2, the super-component Y is to be disabled.","The control console  traverses the hierarchical structure  to find node Y . Node Y does not exist in the system being traced but it is the logical accumulation of components  D and E. The control console  then sets node Y  to off which then sets both nodes D and E, ,  to off. Nodes D and E, ,  call the trace system  which passes the trace levels for these components to the array .","Continuing from Example 3, component D  wants to trace some data.","The trace system  (knowing that the message is from component D) looks at the array  storing the trace level settings to see if that trace is to be stored to disk or not. As component D  is now set to off, the trace message is not stored to disk.","A flow diagram of the method of tracing data  is shown in . Component N traces some data  and passes the trace message to the trace system . The trace system looks up  component N in the array. It is determined  if the trace message is to be stored or not. This determination may be to ascertain if a trace is on or off. However, the determination  may be based on acceptance levels for tracing in which a priority level of a message must be compared with the acceptance level associated with component N.","If the determination  is positive, the trace message is stored to disk . If the determination  is negative, the trace message is not stored to disk  and is ignored or discarded.","A flow diagram of the method of setting a trace to on or off  is shown in . A command to activate or disable traces for component N  is input from the control console. The control console traverses  the hierarchical structure to node N. The control console sets node N to on\/off .","It is then determined  if there are one or more child nodes stemming from node N. If there are child nodes, the child nodes are also set to on\/off  to conform with node N. The method loops  to determine  if there is a further generations of child nodes which in turn need to be set to conform with node N. When it is determined  that there are no more child nodes, the method ends .","The described method and system enable components of a system being monitored to be traced in real time. A hierarchical tracing system interface is used to control a more powerful flat tracing system.","The present invention is typically implemented as a computer program product, comprising a set of program instructions for controlling a computer or similar device. These instructions can be supplied preloaded into a system or recorded on a storage medium such as a CD-ROM, or made available for downloading over a network such as the Internet or a mobile telephone network.","Improvements and modifications can be made to the foregoing without departing from the scope of the present invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0026","num":"0028"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0027","num":"0029"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0028","num":"0030"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0029","num":"0031"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0030","num":"0032"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
