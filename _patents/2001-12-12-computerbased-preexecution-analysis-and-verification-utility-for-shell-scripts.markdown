---
title: Computer-based pre-execution analysis and verification utility for shell scripts
abstract: A method and apparatus for verifying shell scripts is provided. According to one aspect of the invention, prior to executing a shell script, one or more syntactic verification checks are performed on the shell script that verify conformance of the shell script to a set of syntactic guidelines. In addition, still prior to executing the shell script, one or more semantic verification checks are performed on the shell script that verify conformance of the shell script to a set of semantic guidelines. Still further, the method and apparatus may also include steps for, prior to executing the shell script, performing one or more coding organizational guideline verification checks that verify conformance of the shell script to a set of one or more coding organizational guidelines.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07003765&OS=07003765&RS=07003765
owner: Oracle International Corporation
number: 07003765
owner_city: Redwood Shores
owner_country: US
publication_date: 20011212
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","FUNCTIONAL OVERVIEW","The PAV Utility","The Shell Grammar Module","COMPONENTS OF THE SHELL GRAMMAR MODULE","The Parser and Error Routine Modules","ELEMENTS OF THE GENERAL STRUCTURE OF A SHELL SCRIPT","Basic Structure of a Shell Script","Control Structures","The Guideline Verifier","The Guideline Verifier APIs and Semantic Checking","Support Functions","Automatic Header Generation and Command Line Option","Example Input and Output of the PAV Utility","PLATFORM INDEPENDENCE"],"p":["The present invention relates generally to computer software, and more specifically to a computerized utility for shell script pre-execution analysis and verification.","Shell scripts are often used in various operating systems to automate the execution of functions that are performed by an operating system shell. The shell is the operating system's command interpreter and the set of commands used to communicate with the system. A shell script is a text file that contains a sequence of commands for an operating system, for example a UNIX-based operating system. The term shell script is used because it combines into a single file a sequence of commands that would otherwise have to be entered into the system from a keyboard one at a time.","In general, a shell script is typically created for command sequences for which a user has a repeated need. A sequence of commands that is associated with a shell script can be initiated by simply entering the name of the shell script in a command line. For example, in UNIX, the shell acts as an interpreter that executes each command line within a shell script by line.","A technique for identifying errors in a shell script is through the use of the sh -n command. If there are syntactic errors in a shell script, checking syntactic correctness of a shell script may be performed by using the shell command sh-n.","However, drawback with using the \u201csh-n\u201d command is that even though it reports syntactic errors, a syntactically correct script may still incur errors when executed. For example, a shell script that is syntactically correct may still have semantic problems. This can cause execution failures when the shell scripts are executed. The ramifications of such errors can be unpredictable, including abnormal hang\/termination of the shell script.","Another technique for errors in shell scripts is through manual checking of all the commands in the file to determine whether there could be potential sources of bugs. This method of manual checking including code walk through\/inspections and unit testing is the only means available for detecting such problems before executing a script. In this method all the commands in the file are checked manually to see whether there could be potential sources of bugs. A drawback to this method of error detection is that it requires manual error checking by a human. The potential for error is significant using this method as all the problems may not be identified with manual checking of shell scripts.","Yet another error detection technique for shell scripts is to run the shell script to determine if there are errors. A drawback with running a script to determine whether there are errors is that running a shell script can often change environment variables during execution. Environment variables are special variables which maintain data regarding information such as the users' login directory, terminal type, or mailbox location. For example, when a program is executed in a UNIX environment, UNIX passes the values of all the environment variables to the shell. Therefore, a drawback to this method of error checking is that running the shell scripts often changes the environment variables, and executing the script has an immediate and sometimes deleterious effect on the environment.","Based on the foregoing, it is highly desirable to have a shell script verification mechanism that can perform increased error checking on shell scripts over traditional techniques. Furthermore, it is highly desirable to provide a shell script verification mechanism that can perform advanced error checking without actually executing the script.","A method and apparatus for verifying shell scripts is provided. According to one aspect of the invention, prior to executing a shell script, one or more syntactic verification checks are performed on the shell script that verify conformance of the shell script to a set of syntactic guidelines. In addition, still prior to executing the shell script, one or more semantic verification checks are performed on the shell script that verify conformance of the shell script to a set of semantic guidelines. Still further, the method and apparatus may also include steps for, prior to executing the shell script, performing one or more coding organizational guideline verification checks that verify conformance of the shell script to a set of one or more coding organizational guidelines.","Embodiments of the invention may also be performed through the use of computer-readable mediums and data signal applications.","In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without the specific details. In other instances, structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","The pre-execution analysis and verification utility for shell scripts, hereafter referred to as the PAV utility, is a utility that acts as a shell script verifier and checker. The verification and checking may be performed to ensure that a shell script conforms to certain syntactic and\/or semantic structures and guidelines, as well as certain coding organizational structures and guidelines. Verification for adherence to these structures and guidelines can improve programming practices, readability and maintainability.","A pre-execution analysis and verification (PAV) utility for shell scripts is provided. In one embodiment, the PAV utility verifies that a shell script adheres to one or more syntactic, semantic, and\/or coding organizational guidelines and standards. In certain embodiments, PAV utility parses a shell script and performs static checks to determine whether the script is syntactically correct. The PAV utility may also provide information as to potential errors due to certain coding constructs by performing checks in order to ensure that the script adheres to coding organizational guidelines and\/or standards.","In addition to verification of adherence to syntactic and coding construct guidelines, in certain embodiments, the PAV utility for verifies that a shell script adheres to certain semantic guidelines. For example, the PAV utility may report unused variables, redundant code, non-terminating loops, incorrect usage, undesirable side effects in addition to other semantic errors.","In one embodiment, the PAV utility  comprises a Shell Grammar module  and a Guideline Verifier module . In this example, the shell grammar module  performs syntax verification of a shell script and reports errors if the shell script does not adhere to syntactic guidelines. Alternatively, the Guideline Verifier module  performs semantic and coding guideline verification checks to verify that the shell script conforms to certain semantic guidelines.","In general, a shell script language is defined by a set of grammar rules. Syntactic errors in shell scripts can be avoided by verifying that the script adheres to a set of pre-defined grammar rules and\/or standards. For example, for the \u201cBourne Shell\u201d, a set of rules define a syntax that must be followed to generate a valid Bourne Shell script command. In one embodiment, the PAV utility performs a syntax verification check to verify that a shell script adheres to Bourne shell script syntax standards. In this example pre-execution verification for syntactic correctness is performed by a shell grammar module. First, the shell grammar module sets a flag to indicate that commands are to be read and not executed. Then, the shell script input must be verified against grammar rules for the shell.","In certain embodiments, (as illustrated in ), the shell grammar module  is configured as two modules, a parser module  which is a program that understands the grammar, and an error routines module  which reports errors when parsing fails. In one embodiment, the parser module  verifies an input script against grammar rules for the shell, and if parsing fails, error routines are invoked by an error routine module. In one embodiment, the parser module  is a program which understands the grammar of the shell and is responsible for performing syntax verification. The error routine module  reports if parsing has failed, and identifies the syntactical error responsible for the parsing failure. In one embodiment, parser module  performs the syntactic verification executing a parser module that breaks a stream of input characters from a shell script into various tokens. Each of the tokens then can be further reduced based on the language rules as applied to the shell input (further detailed in  and under the heading below, \u201cElements of the General Structure of a Shell Script\u201d). Error routines  are invoked when the parser is not able to reduce a stream of tokens as per the language's rules.","The basic structure of a shell script is comprised of a simple list of commands which verify grammar for the shell. For example, the basic structure of a shell script can be represented by the example of . As previously described, parser module  verifies the input of a shell script  against the grammar for the shell as illustrated in . The elements of the general structure of a shell script in  represent typical \u201cBourne Shell\u201d grammar which are rules for the shell language. Shell commands can be stored in a file, which can be executed when required. A file containing shell commands is known as a script. In this example,  is a block diagram that represents the general structure of a shell script.","A command-list  is a sequence of one or more simple commands separated or terminated by a new line or semicolon. Reserved words like \u201cdo\u201d and \u201cdone\u201d are only recognized following a new line or semicolon. The command list module  is a pattern that comprises simple lists.","The simple-list component  is a pattern that comprises of a set of commands joined by connections. In one embodiment, the simple list  shell script consists of a list of commands. These command-lists can be broken down into \u201csimple-lists\u201d. The Connections component  contains Patterns like \u2018|\u2019. The shell interprets the words it reads according to a base language. For example, if a line is read in which the first word of the line (or after a control operator) is not a reserved word, then the shell will recognize the line as a simple command. Alternatively, the shell will recognize the line as a complex command or some other special construct. The Command component  could be either a simple command or a shell command.","Redirections components  are used to re-direct where a command reads its input or sends its output. In general, redirections open, close, or duplicate an existing reference to a file. The redirections component  provides an input of the pattern \u2018>\u2019, \u2018>>\u2019, \u2018<\u2019, \u2018<<\u2019, \u2018>&\u2019. The overall format used for redirection is: \u201c[n] redir-op file\u201d.","Where the \u201credir-op\u201d parameter is one of the redirection operators mentioned previously and the [n] parameter is an optional number, as in \u20183\u2019 (not \u2018[3]\u2019), that refers to a file descriptor. The following is an example list of some possible redirection operations.\n\n","Simple commands are straight UNIX commands that exist regardless of the surrounding shell environment. For example, commands such as \u201ccat\u201d or \u201cIs\u201d are simple commands. The Simple Command module  describes a simple command. In certain embodiments, when a simple command is recognized, the shell performs the following actions:\n\n","The components of the Shell Command module  are further described by the Control Structures modules  with components as featured in . The flow of execution for the shell is controlled by the flow control structures \u2013, which are described in further detail below.","In certain cases, a shell function may be considered similar to a shell script since they are both capable of storing commands However, a shell function is stored in memory once it is loaded from a script. Shell functions are declared in the \u201c.profile\u201d or in scripts. Functions can be removed from memory with the unset command. The general syntax for a function is:",{"@attributes":{"id":"p-0035","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function-name( )"]},{"entry":[{},"{"]},{"entry":[{},"commands"]},{"entry":[{},"."]},{"entry":[{},"."]},{"entry":[{},"."]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Like shell scripts functions accept arguments in the same manner. For example:",{"@attributes":{"id":"p-0037","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#"]},{"entry":[{},"findarchive( )"]},{"entry":[{},"{"]},{"entry":[{},"for file in $1\/*.a;do"]},{"entry":[{},"nm $file | egrep \u201c{circumflex over (\u2009)}$1|$2\u201d"]},{"entry":[{},"done"]},{"entry":[{},"}"]},{"entry":[{},"findarchive\/usr\/lib sqrt"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The function \u201cfindarchive\u201d accepts two arguments; the name of a directory where archive files (.a) are kept and the name of a routine to search for in all archive files. The \u201cFOR\u201d loop is used to loop through all the archives in the directory. The \u201cnm\u201d command lists all the archived symbols (routines, functions etc.). The \u201cegrep\u201d command displays all the lines containing a particular symbol and lines beginning with the directory name (the complete pathname of each archive).","The FUNCTION control structure  describes an input of the structure, for example:",{"@attributes":{"id":"p-0040","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<VariableName>( )"]},{"entry":[{},"{"]},{"entry":[{},"<Commands>"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The FOR construct of module  describes a statement FOR which performs a loop executing the commands block for each of the specified items. For each loop, the iterative variable assumes the value of the item that follows in the specified order. The FOR statement can be interrupted with a break or continue statements. The BREAK statement terminates the loop and resumes execution on the statement after the end statement. The CONTINUE statement transfers control to the end statement which will continue the loop. For EXAMPLE:",{"@attributes":{"id":"p-0042","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#"]},{"entry":[{},"for file in *.a"]},{"entry":[{},"do"]},{"entry":[{},"\u2003echo $file"]},{"entry":[{},"\u2003nm $file | grep gamma"]},{"entry":[{},"done"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The WHILE construct of module  describes the statement WHILE which performs a loop executing the commands block while test-command is true. The format of the while statement may be as follows:",{"@attributes":{"id":"p-0044","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"while test-command"]},{"entry":[{},"do"]},{"entry":[{},"\u2003commands"]},{"entry":[{},"done"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The CASE construct implements a multiple branch decision mechanism. The chosen branch is selected based on the comparison between the string expression and each pattern. The CASE construct module  describes an input that follows the pattern:",{"@attributes":{"id":"p-0046","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case<variable>in"]},{"entry":[{},"<pattern1>)<commands>"]},{"entry":[{},"\u2003;;"]},{"entry":[{},"<pattern2>)<commands>"]},{"entry":[{},"\u2003;;"]},{"entry":[{},"<patternN>)<commands>"]},{"entry":[{},"\u2003;;"]},{"entry":[{},"esac"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0047","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#"]},{"entry":[{},"echo \u201cAnswer YES or NO:\u201d"]},{"entry":[{},"read answer"]},{"entry":[{},"case \u201c$answer\u201d in"]},{"entry":[{},"\u2003YES)"]},{"entry":[{},"\u2003echo \u201cAnswer is YES\u201d"]},{"entry":[{},"\u2003;;"]},{"entry":[{},"\u2003NO)"]},{"entry":[{},"\u2003echo \u201cAnswer is NO\u201d"]},{"entry":[{},"\u2003;;"]},{"entry":[{},"\u2003*)"]},{"entry":[{},"\u2003echo \u201cAnswer is neither YES or NO\u201d"]},{"entry":[{},"\u2003;;"]},{"entry":[{},"esac"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The IF construct of module  describes an input of the type:",{"@attributes":{"id":"p-0049","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if <expression> then"]},{"entry":[{},"<Commands>"]},{"entry":[{},"else\/elif"]},{"entry":[{},"<Commands>"]},{"entry":[{},"fi"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"As exemplified, the flow of execution for the shell is controlled by the control structures. In this example, modules \u2013 perform this function.","As illustrated in , the Guideline Verifier  module performs semantic and\/or coding organizational standards and guideline verification on the shell script. In certain embodiments, guideline verifier  may be configured as two modules: a set of application programming interface APIs for guideline verification module and a set of one or more support function modules. As illustrated in , the guideline verifier  may be comprised of a support functions module  and guideline verifier APIs module .","In certain embodiments, the guideline verifier  is comprised of various APIs, which in turn perform semantic checks. For example, the Guideline Verifier module  may include some or all of the following semantic checks:\n\n","In certain embodiments, the guideline verifier module  may also perform coding guideline verification checks. For example, the guideline verifier module  may perform certain coding guideline verification checks which may include, for example:\n\n",{"@attributes":{"id":"p-0054","num":"0075"},"figref":"FIG. 5","b":["501","508"]},"In certain embodiments, the PAV utility identifies semantic errors that may be contained in a shell script.  illustrates various APIs that may be associated with Guideline Verification  for performing semantic checks in the PAV utility.","For example, some or all of the following APIs may be provided for performing semantic checks on a shell script.\n\n","In one embodiment, support functions  are linked to the shell grammar module  and the parser module . For example, the parser module  may evoke IsVariableInitialized support functions (module ) when the parser recognizes a reference to a variable, for example, in response to detecting the pattern $VARNAME. Another example of a support function is for header verification. The header of the PAV utility is a set of comments in a specified format. The header is generally included for maintenance readability reasons and typically includes the following information:\n\n","Another example of support functions is the header routine of the support functions module . The header routine of the support functions module includes functions that are used internally by the IsHeaderPresent API module . Other support functions provide facilities used by the rest of the APIs.","In addition to performing the described checks, certain embodiments of the PAV utility may be configured to optionally perform automatic header generation and for accepting input using via a command line. In one example, as illustrated in , an Automatic Header Generation module  is provided that adds a header at the beginning of a given shell script using the available information. This may reduce the work of the programmers by providing a template in which the header details are filled in automatically. In one embodiment, a Command Line Operation  module (), sets appropriate flags, which allow programmers to manually turn \u201coff \u201dcertain checks. For example, if the header verification is not required, an appropriate option may be used to turn the associated flag \u201coff\u201d. In this manner, the condition may be ignored.","An example input and output of the PAV utility is provided below. The code provides an example of code that was executed against various shell scripts and that has been shown to perform appropriate checks in the specified manner.","Let us take a sample file -FindFiles.sh\n\n","The option A+ generates the header automatically and adds it to the beginning of the shell script by name FindFiles.sh.osh. This provision may reduce the work of the programmers by providing a template in which header details can be filled up by the programmers.","FindFiles.sh.osh has the Header template incorporated",{"@attributes":{"id":"p-0063","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"!\/bin\/sh"},{"entry":"(COPYRIGHT) Copyright\u2009\u00a9 Oracle Corporation. All rights"},{"entry":"reserved"},{"entry":"(\/COPYRIGHT)"},{"entry":"(FILENAME)"},{"entry":"findfiles.sh.osh (\/FILENAME)"},{"entry":"(DESCRIPTION)"},{"entry":"Description here"},{"entry":"(\/DESCRIPTION)"},{"entry":"(USAGE)"},{"entry":"Usage Here"},{"entry":"(\/USAGE)"},{"entry":"(ARGUMENTS)"},{"entry":"Arguments Here"},{"entry":"(\/ARGUMENTS)"},{"entry":"(RETURNS)"},{"entry":"Return Values Here"},{"entry":"(\/RETURNS)"},{"entry":"(IMPORT)"},{"entry":"(\/IMPORT)"},{"entry":"(EXPORT)"},{"entry":"(VARIABLE)"},{"entry":"j"},{"entry":"(\/VARIABLE)"},{"entry":"(\/EXPORT)"},{"entry":"(NOTES)"},{"entry":"Notes Here"},{"entry":"(\/NOTES)"},{"entry":"(MODIFIED)"},{"entry":"Details of Modification Here"},{"entry":"(\/MODIFIED)"},{"entry":"(CREATED)"},{"entry":"Details of Creation Here"},{"entry":"(\/CREATED)"},{"entry":"#########################################################"},{"entry":"#"},{"entry":"findfiles.sh"},{"entry":"echo Shell script to find files containing sh"},{"entry":"echo $PATH"},{"entry":"echo \u201c$PS1\u201d"},{"entry":"j=0;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for i in \u2018find . -type f | grep sh\u2019;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"do"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"j=$j + 1;"]},{"entry":[{},"echo file No. $j is $i;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"done;"},{"entry":"export j;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":{"@attributes":{"id":"ul0015-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0016","list-style":"none"},"li":["Error in the Header","Error in Header in \/etc\/rc0","Line number 53: Warning \u2014Place Holder not present, f","Line number 53: Warning \u2014Place Holder not present, f","Line number 61: Warning \u2014Place Holder not present, f","Line number 62: Warning \u2014Place Holder not present, f","Line number 63: Warning \u2014Place Holder not present, f","Line number 64: Warning \u2014Place Holder not present, f","Line number 72: Warning \u2014Place Holder not present, f","Line number 73: Warning \u2014Place Holder not present, f","Line number 74: Warning \u2014Place Holder not present, f","Line number 75: Warning \u2014Place Holder not present, f","Verifying whether variables are referenced or not . . .","Verifying export information . . .","Warning. Exported variable not included in Header: _INIT_UTS_PLATFORM","Warning. Exported variable not included in Header: _INIT_UTS_ISA","Warning. Exported variable not included in Header: _INIT_UTS_MACHINE","Warning. Exported variable not included in Header: _INIT_UTS_VERSION","Warning. Exported variable not included in Header: _INIT_UTS_RELEASE","Warning. Exported variable not included in Header: _INIT_UTS_NODENAME","Warning. Exported variable not included in Header: _INIT_UTS_SYSNAME","Warning. Exported variable not included in Header: _INIT_PREV_LEVEL","Warning. Exported variable not included in Header: _INIT_RUN_NPREV","Warning. Exported variable not included in Header: _INIT_RUN_LEVEL","Warning. Header does not contain enough information about variables actually exported"]}}}},"In certain embodiments lex and yacc libraries are used in the PAV utility. Lex stands for Lexical Analyzer Generator which helps write programs whose control flow is directed by instances of regular expressions in the input stream. Yacc stands for Yet Another Compiler\u2014Compiler which is a general tool for describing the input to a computer program. Since the PAV utility can be compiled and run in any UNIX environment which has lex and yacc libraries, issues of portability do not arise.","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however be evident that various modifications and changes can be made thereto without departing from the broader spirit and scope of the invention. For example, the reader is to understand that the specific ordering and combination of modules and processes described herein is merely illustrative, and unless specifically indicated otherwise the invention can be performed using different or additional modules or process functions, or a different combination or ordering of modules and process functions. The specification and drawings are, accordingly, to be regarded in an illustrative rather than restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The pre-execution analysis and verification utility of the present invention will now be illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
