---
title: Sending notifications to project members in a project management system
abstract: An embodiment of the present invention is a technique to send notification to members in a project management system. A notification list and information are created for a project. The notification list and information are stored in a repository. A notification request is received from a component in the project management system. The notification request is processed at run-time using the notification list and information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07565643&OS=07565643&RS=07565643
owner: Unisys Corporation
number: 07565643
owner_city: Blue Bell
owner_country: US
publication_date: 20030806
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY OF THE INVENTION","DESCRIPTION"],"p":["This application is a continuation-in-part application of the following patent applications: \u201cCreating Customized Objects For Processes In Project Management\u201d, Ser. No. 10\/306,604, filed on Nov. 26, 2002 now U.S. Pat. No. 7,155,700; \u201cAutomated Process Execution For Project Management\u201d, Ser. No. 10\/306,601, filed on Nov. 26, 2002 now U.S. Pat. No. 7,159,206; \u201cCollaborating Activities Using Customized Objects For Project Management\u201d, Ser. No. 10\/306,602, filed on Nov. 26, 2002 now U.S. Pat. No. 7,174,348. This application claims the benefit of the provisional application entitled \u201cProject Management Using Customized Objects\u201d, Ser. No. 60\/456,376 filed on Mar. 20, 2003, and is related to the following patent applications: Ser. No. 10\/636,924 entitled \u201cGeneration Of Java Language Application Programming Interface For An Object-Oriented Data Store\u201d; Ser. No. 10\/636,959 entitled \u201cCapturing Traceability Information Between Artifacts Produced By A Project Management Software\u201d; Ser. No. 10\/636,955 entitled \u201cInstantiating A Project In A Project Management System\u201d; Ser. No. 10\/636,923 entitled \u201cAutomating Document Reviews In A Project Management System\u201d; Ser. No. 10\/636,961 entitled \u201cImplementing Web-Based Wizards In Distributed Web Applications\u201d; Ser. No. 10\/636,962 entitled \u201cImplementing Complex Client-Side Graphical User Interface Controls In Distributed Web Applications\u201d; Ser. No. 10\/636,951 entitled \u201cSynchronizing Data Between A Data Store And A Project Management Client Tool\u201d; Ser. No. 10\/636,852 entitled \u201cTracking Status Of Task In A Project Management Tool\u201d; Ser. No. 10\/636,953 entitled \u201cCustomizing And Automating Checklists In Project Management\u201d; Ser. No. 10\/636,952 entitled \u201cControlling Access To Projects In A Project Management System\u201d; Ser. No. 10\/636,945 (entitled \u201cCustomizing And Automating Entry And Exit Criteria In A Project Management System\u201d, all filed on the same date and assigned to the same assignee as the present application, the contents of each of which are herein incorporated by reference.","1. Field of the Invention","Embodiments of the invention relate to the field of management software, and more specifically, to project management.","2. Description of Related Art","Project management is becoming more and more complex. In enterprise applications, the sizes of projects are typically quite large, including complex databases and involving a large number of participants. The complex interactions among the various team members, process flows, tools, and databases have created difficulties to project managers. The project manager has to keep track of the progress of the project, communicate with stake holders, during the initiation, planning, executing, controlling, and closing phases of a project. Team members have to use the tools of the trade, exchange ideas, generate and review project documentations and\/or reports, update information, communicate with the project manager regarding progress of their work, etc.","Existing techniques for project management have a number of drawbacks. First, most traditional techniques are not convenient to users or team members because of lack of support and\/or interface to Web-based information sharing. Second, the project information may not be well structured or organized. Users do not have a common format or platform to organize data or information and trace sources of data and information. Third, workflow\/process automation is non-existent.","As the project progresses, status of tasks or phases of the project changes such as task completion, specification changes, checklist completion, etc. Communication of these changes, has to be done in a timely manner. Project team members therefore need to be informed or notified of these events as soon as possible so that they can manage their part of the workflow\/process accordingly. Existing techniques are either manual in nature, relying on individual inquiries to the system or lack the desired level of automation. These techniques are slow, tedious, error-prone, and inefficient.","An embodiment of the present invention is a technique to send notification to members in a project management system. A notification list and information are created for a project. The notification list and information are stored in a repository. A notification request is received from a component in the project management system. The notification request is processed at run-time using the notification list and information.","An embodiment of the present invention is a technique to send notification to members in a project management system. A notification list and information are created for a project. The notification list and information are stored in a repository. A notification request is received from a component in the project management system. The notification request is processed at run-time using the notification list and information.","In the following description, numerous specific details are set forth. However, it is understood that embodiments of the invention may be practiced without these specific details. In other instances, well-known circuits, structures, and techniques have not been shown in order not to obscure the understanding of this description.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1A","b":["10","10","20","20","30","40"],"sub":["I ","K"]},"The project members may include a project manager , a technical leader , a programmer , a scientist , and a consultant . A person may have one or more roles. Each member may be assigned one or more tasks in one or more phases of a project. Each member has access to a project management application to , respectively. The project management application may be located in the computer used by the member.","The network  may be any suitable network that links the project members to . The network  may be an Internet, intranet, extranet, wireless fidelity (Wi-Fi), local area network (LAN), wide area network (WAN), etc. The network  allows project members to communicate with each other and to access the project management application. The server  is connected to the network  and contains a project management system  that provides the tools for users to construct, create, or instantiate a project.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1B","b":["100","100","110","120","130","140","150","155","170","180","180","100"],"sub":["I ","K"]},"The processor  represents a central processing unit of any type of architecture, such as embedded processors, mobile processors, micro-controllers, digital signal processors, superscalar computers, vector processors, single instruction multiple data (SIMD) computers, complex instruction set computers (CISC), reduced instruction set computers (RISC), very long instruction word (VLIW), or hybrid architecture.","The processor bus  provides interface signals to allow the processor  to communicate with other processors or devices, e.g., the MCH . The host bus  may support a uni-processor or multiprocessor configuration. The host bus  may be parallel, sequential, pipelined, asynchronous, synchronous, or any combination thereof.","The MCH  provides control and configuration of memory and input\/output devices such as the system memory  and the ICH . The MCH  may be integrated into a chipset that integrates multiple functionalities such as the isolated execution mode, host-to-peripheral bus interface, memory control. The MCH  interfaces to the peripheral bus . For clarity, not all the peripheral buses are shown. It is contemplated that the system  may also include peripheral buses such as Peripheral Component Interconnect (PCI), accelerated graphics port (AGP), Industry Standard Architecture (ISA) bus, and Universal Serial Bus (USB), etc.","The system memory  stores system code and data. The system memory  is typically implemented with dynamic random access memory (DRAM) or static random access memory (SRAM). The system memory may include program code or code segments implementing one embodiment of the invention. The system memory includes a project management system  or application . Any one of the elements of the project management system  or application  may be implemented by hardware, software, firmware, microcode, or any combination thereof. The system memory  may also include other programs or data which are not shown, such as an operating system. The project management system  or application  may implement all or part of the project management functions. The project management system  or application  may also simulate the project management functions. The project management system  or application  contains instructions that, when executed by the processor , causes the processor to perform the tasks or operations as described in the following.","The ICH  has a number of functionalities that are designed to support I\/O functions. The ICH  may also be integrated into a chipset together or separate from the MCH  to perform I\/O functions. The ICH  may include a number of interface and I\/O functions such as PCI bus interface to interface to the peripheral bus , processor interface, interrupt controller, direct memory access (DMA) controller, power management logic, timer, system management bus (SMBus), universal serial bus (USB) interface, mass storage interface, low pin count (LPC) interface, etc.","The mass storage device  stores archive information such as code, programs, files, data, databases, applications, and operating systems. The mass storage device  may include compact disk (CD) ROM , a digital video\/versatile disc (DVD) , floppy drive , and hard drive , and any other magnetic or optic storage devices such as tape drive, tape library, redundant arrays of inexpensive disks (RAIDs), etc. The mass storage device  provides a mechanism to read machine-accessible media. The machine-accessible media may contain computer readable program code to perform tasks as described in the following.","The I\/O devices to may include any I\/O devices to perform I\/O functions. Examples of I\/O devices to include controller for input devices (e.g., keyboard, mouse, trackball, pointing device), media card (e.g., audio, video, graphics), network card such as Institute of Electrical and Electronics Engineers (IEEE) 802.3, IEEE-1394, IEEE-802.11x, Bluetooth, and any other peripheral controllers.","Elements of one embodiment of the invention may be implemented by hardware, firmware, software or any combination thereof. The term hardware generally refers to an element having a physical structure such as electronic, electromagnetic, optical, electro-optical, mechanical, electro-mechanical parts, etc. The term software generally refers to a logical structure, a method, a procedure, a program, a routine, a process, an algorithm, a formula, a function, an expression, etc. The term firmware generally refers to a logical structure, a method, a procedure, a program, a routine, a process, an algorithm, a formula, a function, an expression, etc that is implemented or embodied in a hardware structure (e.g., flash memory, ROM, EROM). Examples of firmware may include microcode, writable control store, micro-programmed structure. When implemented in software or firmware, the elements of an embodiment of the present invention are essentially the code segments to perform the necessary tasks. The software\/firmware may include the actual code to carry out the operations described in one embodiment of the invention, or code that emulates or simulates the operations. The program or code segments can be stored in a processor or machine accessible medium or transmitted by a computer data signal embodied in a carrier wave, or a signal modulated by a carrier, over a transmission medium. The \u201cprocessor readable or accessible medium\u201d or \u201cmachine readable or accessible medium\u201d may include any medium that can store, transmit, or transfer information. Examples of the processor readable or machine accessible medium include an electronic circuit, a semiconductor memory device, a read only memory (ROM), a flash memory, an erasable ROM (EROM), a floppy diskette, a compact disk (CD) ROM, an optical disk, a hard disk, a fiber optic medium, a radio frequency (RF) link, etc. The computer data signal may include any signal that can propagate over a transmission medium such as electronic network channels, optical fibers, air, electromagnetic, RF links, etc. The code segments may be downloaded via computer networks such as the Internet, Intranet, etc. The machine accessible medium may be embodied in an article of manufacture. The machine accessible medium may include data that, when accessed by a machine, cause the machine to perform the operations described in the following. The machine accessible medium may also include program code embedded therein. The program code may include machine readable code to perform the operations described in the following. The term \u201cdata\u201d here refers to any type of information that is encoded for machine-readable purposes. Therefore, it may include program, code, data, file, etc.","All or part of an embodiment of the invention may be implemented by hardware, software, or firmware, or any combination thereof. The hardware, software, or firmware element may have several modules coupled to one another. A hardware module is coupled to another module by mechanical, electrical, optical, electromagnetic or any physical connections. A software module is coupled to another module by a function, procedure, method, subprogram, or subroutine call, a jump, a link, a parameter, variable, and argument passing, a function return, etc. A software module is coupled to another module to receive variables, parameters, arguments, pointers, etc. and\/or to generate or pass results, updated variables, pointers, etc. A firmware module is coupled to another module by any combination of hardware and software coupling methods above. A hardware, software, or firmware module may be coupled to any one of another hardware, software, or firmware module. A module may also be a software driver or interface to interact with the operating system running on the platform. A module may also be a hardware driver to configure, set up, initialize, send and receive data to and from a hardware device. An apparatus may include any combination of hardware, software, and firmware modules.","One embodiment of the invention may be described as a process which is usually depicted as a flowchart, a flow diagram, a structure diagram, or a block diagram. Although a flowchart may describe the operations as a sequential process, many of the operations can be performed in parallel or concurrently. In addition, the order of the operations may be re-arranged. A process is terminated when its operations are completed. A process may correspond to a method, a program, a procedure, a method of manufacturing or fabrication, etc.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2","b":["25","45","25","45","210","230","260"]},"The client  includes an application accessible to the user or the project team member. The application is typically installed or located at the user's computer system. The client  includes a browser  and a project module . The browser  is a Web-based browser that allows the user to navigate the project management system to carry out tasks for project management. The project module  is a software or an application designed to provide basic tools for management of projects or workflow. The project module  may have any of the following features: creating reports, charts, schedules, calendars; sending and receiving information on project task status and assignment; viewing, editing, and grouping resources; integrating spreadsheets, databases; tracking project progress; etc. In one embodiment, the project module  is the Microsoft Project Central, Project 2000 software package.","The middle tier  may be implemented at the client  or the server  and includes a web-based portal  and an application server . The web-based portal  provides tools to manage links for navigation in a Web-based environment. The web-based portal  includes a portal management widget  and a community sidebar page . The portal management widget  is in essence a Hyper-Text Markup Language (HTML) file that contains HTML code. It is a set of related links that can appear on a user's portal page and provides links to other components, such as project frame set page when used for portal maintenance, and new project web wizard for initial project configuration. The community sidebar page  provides links to the project module database, and to the project frame set page when used for on-going project management. The application server  is an enterprise software that provides application infrastructure for the overall project management system such as CBDD. It serves as an interface layer between the user interface and the system databases and\/or other server components. In one embodiment, the application server  is the WebLogic server which provides basic application server functions and services such as transaction management, security, messaging, database connectivity, resource pooling, etc. Typically, the application server  is fully compliant with the industry standard, such as Java 2 Enterprise Edition (J2EE) version 1.3, and is portable across various hardware and operating systems including UNIX, Linux, Windows, etc. The application server  supports programming standards to build an application infrastructure, including eXtensible Markup Language (XML), Simple Object Access Protocol (SOAP), Web Services Definition Language (WSDL), etc. The CBDD web application  uses the services of the application server  to provide a user interface and application logic for the present invention.","The server  provides functions at the server side. The server  includes a web-based portal taxonomy , a process description file , a template importer , a universal repository (UREP) , a UREP database , a project file , a central project module , and a project database . The web-based portal taxonomy  provides tools to create or publish documents to any topic of the newly generated taxonomy. The taxonomy generation may include generation of elements for various phases in a project such as requirement phase, feasibility phase, design phase, development phase, integration and qualification phase, and support phase. The process description file  includes files that are created by user to describe elements of the project. The template importer  is a utility to import a process template into the UREP  and create the corresponding objects and references needed to represent that process in the UREP . The template importer  is also used to import global data which are not project-related. Examples of global data include module level notifications and global access control functions. In one embodiment, the process template data is expressed as a XML file. The UREP  is a metadata database, a data store, or repository information model that defines the information that can be stored in the repository database . It may also identify the services, tool, and technology models supported by the system. The UREP database  is a metadata database that stores the repository information. Note that the term repository refers to any type of data store, storage, database, etc.","The project file  is a directory that saves generated project files. The project file is used to manage tasks, assignments, and schedules inside the project module . The central project  is a project management software module that is located at the server. The project central database  stores files, information, and data used by the central project . In one embodiment, the central project  is the Microsoft Project Central.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3","b":["300","300","310","320","330","340","350","360","370","380","390","320","322","324","390","392","394"]},"The supertype Object  allows common features, such as name, to be defined once for its subtypes.","The type Process-Project  is a supertype of the Process  and the Project . It allows common features of these types to be defined once. The Process  represents a complete or entire process used to run a project. Usually, a process is defined once and is used for many projects. The Project  models a real-world project that the team is working on. Person  represents a person, a team member, a user, a project member, or an entity who is assigned to carry out a project task. The Role  models similar jobs or roles performed by various project members. Examples of roles are programmer, technician, project manager, draftsman, etc. The Node  represents a phase, a category, or an activity of a project. The Task  represents the actual work items that project members carry out. Examples of tasks are installation of test routines, verification of algorithm correctness, optimization of codes, etc. Tasks typically belong to a particular phase represented by the Node . CheckList  provides for lists of items that are checked off as a project is completed. The CriteriaList  provides for lists of entry and exit criteria that are accomplished before a project transitions from one phase to another phase. The Item  provides a supertype for the CheckList Item  and the CriteriaList Item . It allows common features of these types to be defined once. The CheckList Item  represents the individual checklist items contained in a checklist. The CriteriaList Item  represents the individual criteria contained in a criteria list. The criteria may include entry and exit criteria.","During project development, status of project components may change as result of various events such as task completion, requirements updates, entry\/exit criteria completion, etc. Notifications in the project management system are in the form of email notification. As is known by one skilled in the art, other forms of notification may also be employed. Examples of other forms include voice message transmission, wireless message transmission, etc. In one embodiment, the JavaMail application programming interface (API) is utilized for the construction and sending of notifications.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 4","b":["400","410","420","430","280"]},"The project component  is a component in the project management system that generates a notification request when an event occurs. The project component  may be any one of a checklist component , a document review component , an entry\/exit criteria component , a project instantiation component , and a project tracking component .","The notification service component  provides service to send a notification to subscribed or eligible recipients such as project members and project manager when a notification request is received from the project component . There are in essence two types of notifications: an automatic type and an unconditional type. The automatic notification is for the notifications that are on an automatic notification list (ANL). These notifications have an enable status which can be configured or edited by the user. When it is enabled, the notification is sent at run-time when a request is received. The unconditional notification is for the notifications that are not on the ANL and are sent unconditionally. The unconditional notifications are sent at run-time when a request is received. The notification service component  is a stateless session bean that takes notification requests through its API. If a request is accepted, the caller will use the API to provide the XML data required for the notification. If the input data is valid, that is, it adheres to the DTD format; the notification will be constructed and sent using JavaMail and SMTP to the configured mail server.","The mail server  is a server having mail services capabilities to process electronic mailings (e-mails). The mail server  send an e-mail to the recipients upon receiving a mail message from the notification service component . The repository  contains an automatic notification list (ANL)  and notification information. The notification information includes information or attributes of the notification items on the ANL . The notification service  retrieves the ANL  and the notification information  from the repository  for viewing, editing, or creating. Initially, the ANL  exists as a notification template having default values or descriptors.","The notification design model  has the following basic features: (1) A user interface to provide the user the ability to instantiate a list of automatic notifications and their destinations; (2) Data stored in the repository provides a predefined list, e.g., ANL , containing typical project notifications for automation and skeleton text for all notifications; and (3) A software component that services notifications on the automatic notification list and unconditional notifications.","The advantages of the notification includes the following:","1) The ability of a user to enable or disable certain notifications from the ANL . This list is stored in the repository  and is available at project instantiation time. A user interface is provided to view the list and either \u201cenable\u201d or \u201cdisable\u201d status of each of the notification elements. Enabled messages can be generated at run-time when a request is made to the notification service component.","2) The ability to service notification requests from the checklist functionality, document review functionality, entry\/exit functionality, project instantiation functionality and project tracking functionality. Requests are serviced through the Notification Service API.","3) The ability to parse notification requests received in XML format and to construct the appropriate email for JavaMail Transport. This service is also provided by the notification service component .","4) The availability of stored skeleton text for each notification in the repository.","5) The ability to send notifications using JavaMail Simple Mail Transfer Protocol (SMTP) to the configured mail server.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 5","b":["500","500","510","420","520","530","540"]},"The authorized user  is any user (e.g., project manager, project members) who is authorized to configure the notification. The configure function  configures a notification list and information for a project in a project management system. The notification list and information are stored in the repository . The receive function  receives a notification request from the project component  (shown in ). The processing function  processes the notification request at run-time using the notification list and information.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 6","b":["520","610","620","630","670"]},"The retrieve function  retrieves the notification list and information from the repository . This is typically performed when the user wants to view or edit the ANL. The save function  saves or stores the updated, edited, or modified ANL or information in the repository . The edit function  edits the notification list and information. It allows a user to edit a notification item associated with the project component  on the notification list. It also provides editing an enable status for the notification item. The enable status being enabled or disabled. The edit function  includes an edit item function , and an edit enable status. The edit item function  includes several notification functions. These items include a destination , a source , a project name , a priority , a subject , and a notification message . The edit enable function  allows the user to marked a notification item to be enabled or disabled. The view function  allows the user to view the notification list. Authorized users may view the ANL through the user interface and toggle the checkboxes for notifications. This interface is presented as a JavaServer Page (JSP) within the Web Portal and provides the capability to check or uncheck the Enabled status for each notification. Individual notifications are also viewable through the user interface.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 7","b":"530"},"The receive function  includes a receive from project component function . The receive from project component function  receives the notification request from at least one of the checklist component , the document review component , the exit\/entry criteria component , the project instantiation component , and the project tracking component  as described in .",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 8","b":["540","540","810","820","830","840"]},"As discussed above, there are two types of notification. For automatic notifications, the notification service component  examines the automatic notifications list for the enabled\/disabled status of the notification requested. The notification will be sent to the destinations  specified in the automatic notification list (associated with the notification) if the following conditions are met: (1) The notification is \u201cenabled\u201d, and (2) The XML formatted input required for construction of the notification matches the format specified by the Standard Notification Service Document Type Definition (DTD). If the notification is \u201cdisabled\u201d or the input is not validated, the notification request will not be honored. For unconditional notifications, the notification is sent to the specified destinations if the XML formatted input required for construction of said notification matches the format specified by the Alternate Notification Service Document Type Definition (DTD). If the input is not validated, the notification request will not be honored.","The determine function  determines if the notification request corresponds to one of the enable status notification and an unconditional notification. It includes a check enable status function  which checks if the notification item is marked enabled, and a matching format function  which matches the notification request with a format defined by a notification document type definition . The automatic notification uses the standard format and the unconditional notification uses the alternate format. The start mail session  starts a mail session to prepare for sending the notification. The construct function  constructs a mail message by incorporating the notification information (e.g., destination, notification message) in the mail message. The send function  sends the mail message to the destination using a mail protocol, such as a JavaMail Simple Mail Transfer Protocol (SMTP) to a configured mail server.","While the invention has been described in terms of several embodiments, those of ordinary skill in the art will recognize that the invention is not limited to the embodiments described, but can be practiced with modification and alteration within the spirit and scope of the appended claims. The description is thus to be regarded as illustrative instead of limiting."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention may best be understood by referring to the following description and accompanying drawings that are used to illustrate embodiments of the invention.","In the drawings:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
