---
title: System and method for providing flexible access and retrieval of sequence data from a plurality of biological data repositories
abstract: A system and method for providing flexible access and retrieval of sequence data from a plurality of biological data repositories is described. A plurality of biological data repositories are maintained. Each data repository contains sequence data stored into structured records uniquely identified. Each data repository is interfaced through a queue handler dynamically locating and selecting at least one such biological data repository and launching a search query against each selected biological data repository. Search query parameters are accepted from a user specifying a search request for a sequence set. Results obtained from a search engine are presented as ordered tables of search results.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06920396&OS=06920396&RS=06920396
owner: PhenoGenomics Corporation
number: 06920396
owner_city: Bellevue
owner_country: US
publication_date: 20010920
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates in general to plurality of biological data repositories access and retrieval and, in particular, to a system and method for providing flexible access and retrieval of sequence data from a plurality of biological data repositories.","In the field of bioinformatics, biological data repositories (databases) are used to store sequences of genome information for DNA and protein sequences. Each sequence is a series of capital letters and numerals uniquely identifying a genetic code for DNA nucleotides and amino acids. Internally, each sequence is formed as a structured string organized into primary, secondary, tertiary, and so forth, sets of cloning vectors that can be lengthy and complex.","Worldwide, all known genome sequences are identified and cataloged in three principal public databases. The databases include the GenBank, maintained by the National Center for Biotechnology Information (NCBI); the European Molecular Biology Laboratory (EMBL); and the DNA DataBank of Japan (DDBJ). Each day, the genome sequences maintained in these databases are downloaded and synchronized to provide an up-to-date and consistent repository of collective biological data.","Biological data repositories, such as GenBank, EMBL and DDBJ, are searched on a regular basis as an aid to biotechnical research. As publicly-accessible biological data repositories, each of these databases processes a high volume of queries each day. For example, the GenBank contains over 12 million entries totaling nearly 13 billion base pairs of sequence sets, and receives over 800,000 queries per day from over 120,000 individuals worldwide. The demand for searching availability often exceeds database capacities.","Nevertheless, searching remains a crucial part of on-going research for several reasons. First, individual sequences must be matched and identified, where feasible, to existing DNA and protein sequences to determine the potential characteristics and compositions. Second, identifying a given sequence allows the generation of a probability function predicting behavior and interaction characteristics. Third, biological data repository searching allows the determination of whether a given sequence is novel and, if so, whether the sequence has been the subject of patent or similar protection.","To accommodate the large demand for these public databases, access by each individual user is limited to a fixed maximum number of queries per day. Accordingly, the tools available for accessing these databases have evolved to maximize the limited availability afforded to each user. In particular, with the growth and widespread availability of local and wide area networks, including the Internet, browser-based tools via the World Wide Web (Web) have become available and have significantly displaced older command line-based query tools.","One limitation imposed, in part, by the limited access afforded to public biological data repositories is the disincentivizing of searching multiple sequence sets against one or more of the databases as a single transaction. Rather, each sequence in a set of multiple sequences must be submitted to separate databases as an individual query in serial fashion, one-at-a-time. Furthermore, combined genome sequences must be categorized based on the type of sequence presented, that is, DNA or protein. Single query limitations and type categorizations increase the difficulty attendant to using the public databases.","To alleviate these access constraints, individual users often download and mirror public databases onto a local host for increased search efficiency without the restrictions mandated by the public repositories. However, the same tools used to search local database copies are used on the public repositories and thus provide limited relief from the access restrictions. For instance, these tools lack the necessary mechanisms to process queries for multiple sequences, including mixed sequences containing DNA and protein. These tools also lack the capabilities to process search results on a sequence-by-sequence basis. Other shortcomings exist.","In the prior art, two principal tools for accessing public biological data repositories exist. First, the Ensemble query tool, licensed by EMBL, operates as a browser-based solution for searching one database, one query at a time. The tool directly interfaces to the database engine and operates in a strict request-response manner without intermediate flow control. Sequence results cannot be exported nor can a new database be created based on search results. Control is limited to a serial searching of a single data repository and the results received therefrom are presented for only one sequence request.","Second, the Blast software suite, licensed by NCBI, offers a similar browser-based query tool, but includes a conventional command line interface. Queries can be executed against multiple databases for a single sequence by using the command line interface. However, the user interface is awkward, complex and non-intuitive and requires a high level of expertise to interpret and apply the appropriate flags and parameters as a single command line. As well, both the browser-based and command line interfaces fail to offer any type of meaningful flow control other than a simple serialization of individual queries.","Therefore, there is a need for an approach to providing a capability to search multiple biological data repositories, including public databases, for multiple sequences of biological data for a set of one or more sequences. Preferably, such an approach would provide both pre-processing of queries and post-processing of search results.","There is a further need for providing an intuitive and user-friendly interface to searching data repositories of biological data. Preferably, such an approach would provide a graphical user interface that includes the capability to display substantially unlimited search results sets as generated by a multi-sequence query against multiple databases.","There is a further need for an approach to providing control over the intermediate layer transaction processing of a search query executed against multiple data repositories. Preferably, such an approach would offer load balancing, processing of partial results, and detection of expired searches.","The present invention provides a system and method for receiving and executing arbitrarily complex searches of biological data repositories for one or more sets of genome sequences. A browser-based user interface provided a front end layer for processing search requests and presenting completed search results in an intuitive and user-friendly format. An intermediate set of processing modules, known as servlets, process the search requests and coordinate queries with a database engine. A queue handler executes independently but in coordination with the servlets to monitor the progress and process the results of the search requests. Summary and detailed search results are presented in an organized, preferably tabular, format on the browser-based user interface.","An embodiment of the present invention provides a system and method for transacting a multi-sequence search against a biological data repository. A set of search query parameters specifying a plurality of sequence sets are received. Each sequence set encodes structured biological data values. A search queue is loaded with the search query parameters formatted into a structured database query for each sequence set assigned by search type. A search of the biological data repository is launched for each sequence set. Search results generated responsive to each such structured database query search are retrieved. The search results are forwarded as sequence set information organized and reformatted for each sequence set and search type.","A further embodiment provides a system and method for accessing a plurality of biological data repositories using an extensible database access framework. Search query parameters are accepted for and search results displayed from a search request for multiple sequence sets performed against a plurality of biological data repositories in a user interface layer. The search request and the search results are processed in an intermediate layer. The user interface layer is interfaced by processing the search query parameters into a structured database query and presenting database results as the formatted search results. The structured database query is executed in a database layer. At least one queue handler loading the structured database query is provided. A plurality of biological data repositories are selected. The database results are retrieved. Each biological data repository contains sequence data stored into unstructured records which are each identified by a unique identifier. The structured database query is executed against at least one database engine. The database results are obtained from the selected biological data repositories.","A further embodiment provides a system and method for providing flexible access and retrieval of sequence data from a plurality of biological data repositories. A plurality of biological data repositories are maintained. Each data repository contains sequence data stored into structured records uniquely identified. Each data repository is interfaced through a queue handler dynamically locating and selecting at least one such biological data repository and launching a search query against each selected biological data repository. Search query parameters are accepted from a user specifying a search request for a sequence set. Results obtained from a search engine are presented as ordered tables of search results.","Still other embodiments of the present invention will become readily apparent to those skilled in the art from the following detailed description, wherein is described embodiments of the invention by way of illustrating the best mode contemplated for carrying out the invention. As will be realized, the invention is capable of other and different embodiments and its several details are capable of modifications in various obvious respects, all without departing from the spirit and the scope of the present invention. Accordingly, the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 1","b":["10","28","30","11","16","17","13","11","13","15","32","31","11","12"]},"The server  executes the Web server  and a Blast Node  which functions as an intelligent queue handler, as further described below with reference to FIG. . The server  also includes a storage device  for maintaining a file system persistently storing application and data files, including a relational database (RDB) . The relational database  stores tables and queues relating to search requests and results as transacted by the Blast Node .","The Web server  and Blast Node  together process sequence searches executed against the biological data repositories -. The Web server  interfaces to each individual client  via a Web browser  which provides a graphical and intuitive user interface to individual users. The Blast Node  submits searches to Blast (database) engines - respectively executing on one or more remote servers - interconnected via the internetwork . Each remote server - also includes a storage device - for maintaining a file system persistently storing application and data files, including the biological data repositories -. Other network configurations and topologies and arrangements of clients, local and remote servers, storage devices, and biological data repositories and relational databases are feasible, as would be recognized by one skilled in the art.","In the described embodiment, the individual client  is a personal computer system (or cluster of personal computer systems) capable of running a standard HTML-compatible Web browser, such as Windows, Linux or Solaris. The Web browser  is a standalone Web browser, such as the Internet Explorer, licensed by Microsoft Corporation, Redmond, Wash., or the Navigator, licensed by Netscape Corporation, Santa Clara, Calif. The relational database  is an Oracle-compatible database, such as licensed by Oracle Corporation, Redwood Shores, Calif.; the Apache Tomcat Webserver servlet engine, licensed by The Apache Software Foundation, Forest Hill, Md.; the Java Runtime Environment (JRE), licensed by Sun Microsystems, Inc., Palo Alto, Calif.; and the Blast Program Suite, licensed by the NCBI.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 2","b":["40","1","40","16","17","18"]},"The Web browser  provides an intuitive and user-friendly graphical user interface for submitting search queries, monitoring the status of searches, and for receiving summary, graph and detailed search results, as further described below with reference to , , , and . Through the Web browser , search requests for specifying single or multiple sequences against single or multiple biological data repositories -, in various formats, can be entered, as further described below with reference to FIG. .","The Web server  and Blast node  provide an intermediate layer of processing between the Web browser  and each of the Blast engines -. The Web server  includes a servlet engine  that executes server-side applications for providing support to the user interface and database, as further described below with reference to FIG. . Individual search requests received from the Web browser  are parsed and processed by the servlet engine  into formatted database query commands executable by a Blast engine. The formatted search requests are then enqueued into a search queue  maintained within the relational database . Similarly, search results are retrieved from a search results table  also maintained within the relational database  and presented to the Web browser .","The Blast node  functions as an intelligent queue handler that identifies the characteristics of individual search requests irrespective of originating client and dynamically locates and selects an appropriate biological data repository - against which to execute each search request. The Blast node  launches each search against the Blast engine - corresponding to the selected biological data repository -. Upon detecting the completion (or failure) of a search, the Blast node  parses the output from the Blast engine  and loads the search results into the search results table  in the relational database . In the described embodiment, the results from each search request are output from each Blast engine - as an XML script.","Each Blast engine - executes Blast-compatible searches and outputs search results in XML format. Each search request must be specified as a formatted and parameterized command line providing input sequences, parameters, and search databases. Each command line is built by the servlets executed by the servlet engine  and is submitted to a Blast engine - by the Blast node .","In the described embodiment, both the Web server  and Blast node  include a Java Database Connectivity (JDBC) module for interfacing to the relational database . As well, the servlet engine  retrieves and executes servlets written in the Java programming language, but could also include Active Server Page (ASP) scripts or similar server-based executables.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 3","b":["30","2","30","58","59","60","57","16","16","59","17","16"]},"Each Web browser  accepts sequence sets and displays search results, preferably as content generated from HTML scripts. Each client  (shown in ) includes a communications protocol stack that includes an HTML-compatible protocol layer. As further described and shown below with reference to , a new search can specify new or previously-entered sequence sets, one or more database selections, statistical set information, and various other search descriptive data. As further described and shown below with reference to , a search summary can specify the search results for multiple sequence sets and multiple databases. As further described and shown below with reference to , a search graph can graphically compare search results for multiple sequence sets and multiple databases. Finally, as further described and shown below with reference to , a search detail can specify in separately viewable windows individual sequence information in annotated form accompanied by the query sequence.","In the intermediate layer , two groups of servlets ,  interface each Web browser  to a Blast engine  by way of a Blast node . The servlet engine  (shown in ) executes the servlets , . The first servlet group, user interface servlets , provide server-side support to process incoming search queries received from and to format outgoing search results sent to the Web browsers , including:\n\n","The second servlet group, database servlets , support interaction with the Blast engine  by coordinating and executing external Blast engine operations, including:\n\n","In the described embodiment, the following Java classes are used to provide servlets:\n\n","In the database layer , a Blast node  directly interfaces to the Blast engine . The Blast node  retrieves individual search requests from the search queue  and stores search results into the search results table . A Blast engine  searches a corresponding biological data repository  for the requested sequence sets.","Search requests are launched by users via a Web browser , but are actually assigned and sent to a selected Blast engine  once the Blast node  retrieves the search requests from the search queue . Searches therefore occur in an event-based manner. The Blast node  interacts with each Blast engine , including:\n\n","Although only a single Blast node  is necessary for interfacing to one Blast engine , multiple Blast nodes  can also be utilized, executing either synchronously or asynchronously, on one or more servers  to provide control over concurrent database queries and to balance execution of parallelized queries by a plurality of Blast engines . Each Blast node  would include control logic to prioritize and schedule execution of Blast searches or similar forms of structured database queries.","The user interface servlets , database servlets  and Blast node  interface to the relational database  via JDBC modules (shown in FIG. ). In addition to the search queue  and search results table , the relational database  stores a sequence sets table , search information table  and system information table . The sequences sets table  is used to store historical data regarding previously-entered sequences. The search information table  is used to store statistical and non-sequence search information. Finally, the system information table  is used to store client-particular data.",{"@attributes":{"id":"p-0055","num":"0067"},"figref":"FIG. 4","b":["70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","82","7"]},"In the described embodiment, each individual search request must be specified in the FASTA sequence data format or as plaintext.  is a data structure showing biological data sequence record  stored in the databases , , - of FIG. . Each individual record  includes a header  and sequence data . The header  includes an identifier that uniquely identifies the accompanying sequence data .","In the described embodiment, each record conforms to the FASTA format. By way of illustration, an example of a partial DNA sequence in FASTA format for the HIV virus is as follows:\n\n>gi|15209251|emb|AJ291719.1|HIM291719 Human immunodeficiency virus type 1 complete genome, strain 99FR-MP129 \n\nSimilarly, an example of a protein sequence in FASTA format for the HIV virus is as follows:\n\n>gi|15211841|emb|CAA64159.1| envelope glycoprotein gp120 [Human immunodeficiency virus type 1]\n\nOther forms of sequence record formatting are feasible, as would be recognized by one skilled in the art.\n",{"@attributes":{"id":"p-0058","num":"0070"},"figref":"FIG. 6","b":["100","101","102","103","104","105","106","107","101","108","102"]},{"@attributes":{"id":"p-0059","num":"0071"},"figref":"FIG. 7","b":["110","111","113","114","112","127","128"]},"As displayed, the search details satisfy a minimum e-value , as entered into an e-value text box , and a minimum percent , as entered into a minimum percent text box . The set of matching search results are presented in a table organized by probe identifier (\u201cProbe ID\u201d) .","In addition, the table lists actual search result tallies for select databases -, including a user-created database (\u201c998511220812\u201d) , the NCBI human express sequence database (\u201cest_human\u201d) , the GenBank non-redundant nucleotide database (\u201cnt\u201d) , the GenBank patented nucleotide database (\u201cpatnt\u201d) , the EBI protein database (\u201cswissprot\u201d) , and an annotation for best matching sequence from databases - (\u201cBest Hit Annotation\u201d) .","In particular, each of the tallies listed under the databases - includes a pair of numbers n\/m, where n represents the number of subject sequences matched based on the minimum e-value 126 and minimum percent value 128 and m represents the number of subject sequences matched using the criteria set user , expected results , descriptions , and alignments  (shown in FIG. ). Upon selecting one of these tallies, a search graph screen, as shown and described below with reference to , is generated.",{"@attributes":{"id":"p-0063","num":"0075"},"figref":"FIG. 8","b":["130","131","133","134","134","136","135","7","132","137","138","135","139","136"],"i":["a-b ","a, "]},{"@attributes":{"id":"p-0064","num":"0076"},"figref":"FIG. 9","b":["150","16","30","2"]},"Thus, the system  is initialized (block ) by requesting and opening a home page in the Web browser . The Web browser  connects to the server  and relational database management system  (block ). Upon the selection of a new search page, a new search is selected (block ), as further described below with reference to , and via a Web page, such as shown and described above with reference to  search description is entered (block ), including the entering of a set of sequences and selecting the appropriate biological data repositories against which to search, as further described below with reference to FIG. .","Next, the search is launched (block ), as further described below with reference to FIG. . The launching of the search is actually performed by the Blast node  upon receiving a validated search request by querying the search queue  in the relational database  at regular intervals. The status of the search queue  (shown in ) is shown (block ), as further described below with reference to FIG. .","Upon the completion of the search or at any time, a search summary can be displayed (block ) to view search results, as further described below with reference to , and via a Web page, such as shown and described above with reference to FIG. . If selected, search details are displayed (block ), as further described below with reference to , and via a Web page, such as shown and described above with reference to FIG. . Additional searches can be submitted and the process is repeated (block ). Otherwise, the method terminates.",{"@attributes":{"id":"p-0068","num":"0080"},"figref":"FIG. 10","b":["170","150","9","51","52","35"]},"Thus, the database tables for system information , search information , and search results  (shown in ) are queried (block ). The requested database information is received via the JDBC module  (shown in ) (block ) and a search page is built and served to the Web browser  (block ). The routine then returns.",{"@attributes":{"id":"p-0070","num":"0082"},"figref":"FIG. 11","b":["180","150","9","4"]},"Thus, if a previously-entered sequence set is being submitted (block ), the previously-entered sequence sets are selected and entered (block ). Otherwise, new sequence sets are entered (block ). The appropriate databases  are selected, including the requested biological data repositories and local databases (block ). The statistical search criteria are selected (block ). Additional sequence sets, databases, and statistical search criteria can be indicated (block ). Otherwise, the routine returns.",{"@attributes":{"id":"p-0072","num":"0084"},"figref":"FIG. 12","b":["190","150","9","32","2"]},"Thus, the sequence sets are uploaded (block ) from the Web browser . The composition of each sequence set is checked (block ) for the appropriate sequence type, that is, DNA or protein. The search type is computed (block ) based on the composition of each sequence set. Finally, the search queue  is loaded with the search information (block ). The routine then returns.",{"@attributes":{"id":"p-0074","num":"0086"},"figref":"FIG. 13","b":["200","150","9","17"]},"Thus, search information is obtained from the Blast node  (shown in ) (BLOCK ). A search queue status page is built (block ) and served to the Web browser . The routine then returns.",{"@attributes":{"id":"p-0076","num":"0088"},"figref":"FIG. 14","b":["210","150","9","6"]},"Thus, search information  (shown in ) is obtained from the relational database  (block ). If the search is not done (block ), the routine waits until the search is complete (block ). Otherwise, a search summary page is built (block ) and served to Web browser . The routine then returns.",{"@attributes":{"id":"p-0078","num":"0090"},"figref":"FIG. 15","b":["220","150","9","8"]},"Thus, if a valid search summary has not been selected (block ), an error message is presented to the user (block ). Otherwise, detailed search results are obtained (block ) and a search details page is built (block ), and served to the Web browser . The routine then returns.",{"@attributes":{"id":"p-0080","num":"0092"},"figref":"FIG. 16","b":["230","150","9","43","44","33","17"]},"The Blast node  first begins by initializing (block ) internal data structures and connections to the relational database  (shown in FIG. ). The Blast node  then proceeds to process incoming search requests and completed search results in a continuous processing loop (blocks -).","During each iteration (block ), the Blast node  searches the search queue  (shown in ) for those entries having a status equal to zero (block ). A status of zero indicates that no search results are present. If no entries are found (block ), the Blast node  sleeps for a pre-determined interval (block ). In the described embodiment, an interval of 2,000 milliseconds is used, although other suitable intervals could also be used.","Once found (block ), all search information is gathered from the search queue (block ) and a file structured in the FASTA format is built (block ) to store the input file for the Blast search. The search is then run (block ) by sending each search request as a formatted database query command line containing relevant parameters and databases for execution by a Blast engine  (shown in FIG. ).","The Blast node  waits for the Blast search to finish (block ). Upon completion, the output of the Blast search is received as XML output from the Blast engine . This XML output is parsed (block ) to allow the data to be reformatted to display search results for multiple sequence sets and multiple databases. The search results table  (shown in ) is loaded with the parsed information (block ) and the queue status is set to \u201cDone\u201d (block ) indicating the search has completed. Execution of the routine  continues indefinitely (block ) until the Blast node  is terminated.","While the invention has been particularly shown and described as referenced to the embodiments thereof, those skilled in the art will understand that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":"1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3","b":"2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5","b":"1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 10","b":"9"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11","b":"9"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 12","b":"9"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 13","b":"9"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 14","b":"9"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 15","b":"9"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 16","b":"9"}]},"DETDESC":[{},{}]}
