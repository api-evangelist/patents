---
title: Architecture for the graphical management and analysis of authentication tokens
abstract: An analysis of at least one authentication token for an application is provided. At least one login module within the application is identified. Responsive to a failure to access the application, principal information is retrieved associated with the at least one login module. A recovery action is then generated. The recovery action corresponds to the failure and the principal information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06976076&OS=06976076&RS=06976076
owner: International Business Machines Corporation
number: 06976076
owner_city: Armonk
owner_country: US
publication_date: 20010629
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Technical Field","The present invention relates to an architecture for graphical representation. More particularly, the present invention relates to management and analysis of authentication tokens in Java. Still more particularly, the present invention relates to an architecture for a graphical representation of the management and analysis of authentication tokens in Java.","2. Description of Related Art","With the proliferation of computer business and the ever expanding internets and Internets, vendors are scrambling to meet the security needs of their customers. Vendors are presented with security issues in a broad range of applications. Electronic commerce in business-to-business and home-to-business applications implies a selectable range of security solutions which are difficult to incorporate in a single application. Content distribution of software, reference information, educational material, or entertainment content require new algorithms and protocols to keep ahead of attacks from hackers. Metering of content, service, or both, and the requirement for secure storage of state and value becomes more important with the increasing number of protocols and cryptographic applications. Securing business or personal activity for private e-mail, home banking, and monetary transactions require a wide range of security solutions where the value of the data, and thus the threat, may be quite varied.","The CDSA (Common Data Security Architecture) was conceived by the Intel Corporation 2200 Mission College Blvd. Santa Clara, Calif. 95052 in response to the above mentioned concerns. CDSA describes a pluggable model for cryptographic and certificate services. This architecture is most commonly implemented as a set of DLLs (Dynamically Linked Libraries). A framework DLL is present that controls all access to \u201cplugin\u201d DLLs that actually perform CDSA services (e.g., encryption, signature, digital certificate parsing, and digital certificate validation). The API (Application Programming Interface) to the framework DLL is a published standard.","Normally, all applications built to the CDSA standard will execute successfully on a given CDSA implementation. This means that all CDSA applications have access to all cryptographic services plugged in to the framework DLL.","This framework presents problems when exporting applications which support CDSA implementations. The problems occur when exporting a CDSA implementation to jurisdictions where other CDSA applications are not legally allowed to use the specific cryptographic services of the CDSA implementation, thus it may be impossible to use the CDSA implementation in a vendor's CDSA application product. One problem is that CDSA is implemented in dynamically linked cryptographic libraries, which leaves the encryption APIs open for illegal use. Another problem is that the API to the framework DDL is a published standard.","Currently vendors give up the advantages of the CDSA in order to solve these problems. They statically link cryptographic libraries to their applications. Static libraries are not flexible (e.g., untouched, the application cannot take advantage of new plugin implementations automatically) and which waste space (each application carries along a copy of the static library code and multiple copies are loaded into memory when multiple applications run).","Also, Java Authentication and Authorization Service (JAAS) has recently been developed. JAAS is a new and emerging security model that uses login modules to provide authentication and a modified Java 2 policy to provide authorization. The login modules may perform one of many types of user identity verification such as accessing native system information, certificate databases, or smart cards. After authentication, JAAS creates principals based upon the user's defining qualities such as username, system groups, serial number, domain, and the like. The principals can then be used to define granted permissions, which represent a finer granularity of the Java 2 policy file model.","In a typical present scenario, users execute a Java application or applet under the layer of a controlling security model. When controlled by a security model, Java applications are subject to authentication as well as authorization processes that ultimately decide the success or failure of the applications. All models provide authorization based upon prescribed permissions usually contained within user created policy files. In addition, some security models utilize authentication to verify who is executing the application. For example, a database of certificates, passwords, or Kerberos tickets may be used to authenticate the user. Once authorization has been verified, the application may proceed to execute as long as it does not violate the security policy. As a result, success or failure of the application may be determined by both authentication and authorization rules.","Therefore, it would be advantageous to have a user interface that provides a comprehensive graphical representation of the authentication process. Further, it would be advantageous to offer the ability to dynamically depict active principals, as well as runtime failures in Java applications that are due to inadequate policy failures or login modules.","The present invention provides an analysis of at least one authentication token for an application. At least one login module within the application is identified. Responsive to a failure to access the application, principal information is retrieved associated with the at least one login module. A recovery action is then generated. The recovery action corresponds to the failure and the principal information.","With reference now to the figures,  is a pictorial representation of a distributed data processing system in which the present invention may be implemented. Distributed data processing system  is a network of computers in which the present invention may be implemented. Distributed data processing system  contains a network , which is the medium used to provide communications links between various devices and computers connected together within distributed data processing system . Network  may include permanent connections, such as wire or fiber optic cables, or temporary connections made through telephone connections. In the depicted example, a server  is connected to network  along with storage unit . In addition, clients ,  and  also are connected to network . These clients ,  and  may be, for example, personal computers or network computers. For purposes of this application, a network computer is any computer coupled to a network, which receives a program or other application from another computer coupled to the network.","In the depicted example, server  provides data, such as boot files, operating system images, and applications to clients ,  and . Clients ,  and  are clients to server . Distributed data processing system  may include additional servers, clients, and other devices not shown.","In the depicted example, distributed data processing system  is the Internet, with network  representing a worldwide collection of networks and gateways that use the TCP\/IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, education, and other computer systems that route data and messages. Of course, distributed data processing system  also may be implemented as a number of different types of networks, such as, for example, an intranet, a local area network (LAN), or a wide area network (WAN).  is intended as an example and not as an architectural limitation for the present invention.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 1"],"b":["200","104","200","202","204","206"]},"Also connected to system bus  is memory controller\/cache , which provides an interface to local memory . I\/O bus bridge  is connected to system bus  and provides an interface to I\/O bus . Memory controller\/cache  and I\/O bus bridge  may be integrated as depicted.","Peripheral component interconnect (PCI) bus bridge  connected to I\/O bus  provides an interface to PCI local bus . A number of modems may be connected to PCI bus . Typical PCI bus implementations support four PCI expansion slots or add-in connectors. Communications links to network computers ,  and  in  may be provided through modem  and network adapter  connected to PCI local bus  through add-in boards. Additional PCI bus bridges  and  provide interfaces for additional PCI buses  and , from which additional modems or network adapters may be supported. A memory-mapped graphics adapter  and hard disk  may also be connected to I\/O bus  as depicted either directly or indirectly.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 3A","FIG. 1"],"b":["300","108","110","112","300","302","304","306","308","308","302","306","310","312","314","306","316","318","319","306"]},"Expansion bus interface  provides a connection for a keyboard and mouse adapter , modem , and additional memory . SCSI host bus adapter  provides a connection for hard disk drive , tape drive , and CD-ROM drive . Typical PCI local bus implementations support three or four PCI expansion slots or add-in connectors.","An operating system runs on processor  and is used to coordinate and provide control of various components within data processing system  in . The operating system may be a commercially available operating system such as a UNIX based operating system, AIX for instance, which is available from International Business Machines Corporation. \u201cAIX\u201d is a trademark of International Business Machines Corporation. Other operating systems include Microsoft Windows 2000. Alternatively, the operating system may be another commercially available operating system such as JavaOS For Business\u2122 or OS\/2\u2122, which are also available from IBM. JavaOS is loaded from a server on a network to a network client and supports Java programs and applets. An object oriented programming system, such as Java, may run in conjunction with the operating system and provide calls to the operating system from Java programs or applications executing on data processing system .","\u201cJava\u201d is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive , and may be loaded into main memory  for execution by processor .","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in . Also, the processes of the present invention may be applied to a multiprocessor data processing system.","For example, data processing system , if optionally configured as a network computer, may not include SCSI host bus adapter , hard disk drive , tape drive , and CD-ROM , as noted by dotted line  in , denoting optional inclusion. In that case, the computer, to be properly called a client computer, must include some type of network communication interface, such as LAN adapter , modem , or the like. As another example, data processing system  may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system  comprises some type of network communication interface. As a further example, data processing system  may be a Personal Digital Assistant (PDA) device which is configured with ROM and\/or flash ROM in order to provide nonvolatile memory for storing operating system files and\/or user-generated data. The depicted example in , as well as above-described examples, are not meant to imply architectural limitations.","The present invention provides a method, a system or apparatus, and computer-implemented instructions for graphical management and analysis of authentication tokens on a variety of computer platforms and operating systems. The present invention may be implemented in most computer languages. However, the example user interface could be implemented in Java. Hence, the present invention may operate within a Java runtime environment and operate in conjunction with a Java virtual machine (JVM) yet within the boundaries of a JVM as defined by Java standard specifications. In order to provide a context for the present invention, portions of the operation of a JVM according to Java specifications are herein described.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3B","b":["350","352","354","354","356","354","300","354"]},"At the center of a Java runtime environment is the JVM, which supports all aspects of Java's environment, including its architecture, security features, mobility across networks, and platform independence. The JVM is a virtual computer, i.e. a computer that is specified abstractly. The Java specifications define certain features that every JVM must implement, with some range of design choices that may depend upon the platform on which the JVM is designed to execute. For example, all JVMs must execute Java bytecodes and may use a range of techniques to execute the instructions represented by the bytecodes. A JVM may be implemented completely in software or somewhat in hardware. This flexibility allows different JVMs to be designed for hardware platforms, such as mainframe computers and PDAs.","The JVM is the name of a virtual computer component that actually executes Java programs. Java programs are not run directly by the central processor but instead by the JVM, which is itself a piece of software running on the processor. The JVM allows Java programs to be executed on a different platform as opposed to only the one platform for which the code was compiled. Java programs are compiled for the JVM. In this manner, Java is able to support applications for many types of data processing systems, which may contain a variety of central processing units and operating systems architectures.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 4","FIG. 4"],"b":["402","404","406","408","402","404","406","408","402","404","406","408"]},"Icons , ,  and  in  represent the authentication tokens created by the login modules once the user has been authenticated. This set of icons presents a dynamic view of authenticated principals currently assigned to the Java program. Due to space constraints, it may not be possible to list all the individual principals in main graphical interface . However, by selecting the principal authentication token icon, such as icons , , , or , this may open a new window or frame with the set of contained principals displayed. If a user or administrator chooses a principal icon, a user interface will be displayed which will include a login module principal list dialog which is further illustrated in . If an identical principal exists in two or more principal sets, then, this information may be displayed in the same window. In addition, some login modules may fail in their authentication attempt. In such a case, an appropriate icon may be displayed representing the failure and may replace the one or more of principal icons , ,  or .","Icons  and  in  represent any principals that may have caused the application to fail in its execution. Icons  and  are also depicted as representing a polygon for now. Normally, an application may go through the authentication process and then proceed with normal execution while the security model performs authorization checks. Failure may occur in some instances due to system configuration issues. One example is an incorrect classpath configuration or network difficulties. However, failure frequently occurs due to missing permissions in the security policy files themselves. With a modification to the security model, it may be determined what principal or principals were the cause of the failure. Also, it may be determined which login module, such as login modules , ,  and\/or  the failing principals are associated with. Once this information is known, icon  and\/or  may be placed in main graphical user interface  representing the failing principal and the login module(s) to which the failing belongs. If the user or administrator chooses a failed principal icon, a user interface will display a failed principal dialog which includes information regarding the failed principal as further illustrated in .","If a failure has occurred, the present invention may provide a recovery suggestion. Main graphical interface  may provide suggestions based on the security exception provided, the current protection domain, and the full set of permissions as defined by the security policy. For example, a suggestion may include a statement for user or policy administrator to issue a specific permission for a principal to the policy. Icons  and  may represent one or more recovery suggestions for the failed login module. More than one login module may have recovery option icons depending on the number of possible suggestions by main graphical interface . As with principal icons , ,  and , recovery icons  and  may also be selected to display the actual recovery suggestion in a separate window or frame. If a user or administrator chooses a recovery icon, a user interface will display a failed principal dialog with a principal failure as further illustrated in .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 5","FIG. 5","FIG. 4"],"b":["500","410","412","414","416","402","400"]},"In this example, login module principal dialog display  is a graphical user interface although the present invention is not limited to presenting login module principal dialog display  as a graphical user interface and other means is conveying the information included in login module principal dialog display  may be provided. In this example, Login Module Name  indicates a login module name and is displayed within an upper portion of login module principal list dialog display . Login module principal list dialog display  displays all principal information  associated with login module principal list dialog display . Each principal, whether successful or failing upon attempting access to an application, is displayed in a row, for example, row , along with the principal's associated authentication information. \u201cPrincipal 1\u201d  may indicate that this principal has successfully accessed an application and \u201cPrincipal 3\u201d , in row , may indicate that this principal has failed to successfully access an application. Each principal row contains status column  which indicates whether the principal succeeded or failed to gain access to the application. Column  displays principal names which are attempting to access an application. Column  contains a creation time of a principal. The creation time assists a user or administrator in determining at what point in time a principal has failed. The user or administrator may sort the principal rows within login module principal dialog display  by choosing any of column title blocks ,  or . Additional principal information may be added to the principal rows in login module principal dialog display  to be included in login module principal dialog display  for display to the user.","Within a lower portion of login module principal list dialog display  is \u201cOK\u201d button  in which, upon selection, removes the login module principal list dialog from display to the user or administrator. In addition, within the lower portion of login module principal list dialog display  is \u201cView\u201d button  in which may be selected to display information regarding a successful or failing principal. If a specific principal is chosen in login module principal list dialog display  and \u201cView\u201d button  is subsequently chosen, information regarding this chosen principal a subsequent dialog display displays information regarding the successful or failure of a principal to access and application. For example, if row  is chosen, a dialog display will be displayed to the user or administrator containing information about a successful access to the application by \u201cPrincipal 1\u201d  in row . This successful dialog display is further illustrated in . Alternatively, if row  is chosen, a dialog display will be displayed to the user or administrator containing information about a failed access to the application by \u201cPrincipal 3\u201d . This failed dialog display is further illustrated in .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 6","FIG. 5"],"b":["600","505","500","600","600","600"]},"Successful principal dialog display  includes login module name , which in this example is \u201cLogin 1\u201d. In addition, successful principal dialog display  includes principal name  and principal creation time . Furthermore, successful principal dialog display  includes status  which indicates whether access to an application is successful or has failed. In this example, status  associated with successful principal dialog display  indicates that access to the application has been achieved thereby indicating a successful entry associated with status . A bottom portion of successful principal dialog display  contains \u201cOK\u201d button  in which a user or administrator may choose to close successful principal dialog display  and \u201cNext\u201d button  which a user or administrator may choose to see a next successful principal.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 7","FIG. 5"],"b":["700","515","500","700","700","700","700","705","710","715","720","700","600"]},"In addition, failed principal dialog display  includes \u201cCause of Failure\u201d text box . \u201cCause of Failure\u201d text box  contains information as to why a principal, such as, for example, \u201cPrincipal 3\u201d  did not succeed in granting access for an application. For example, \u201cCause of Failure\u201d text box  may display a JAVA exception that caused the failure of the principal along with an exception stack. An exception stack and exception text may be expressed as:\n\n","Furthermore, failed principal dialog display  includes \u201cSuggested Recovery\u201d text box . If a recovery action can be supplied to remedy the failure of the principal in accessing the application, \u201cSuggested Recovery\u201d text box  will be enabled and contain recovery information  for recovery of the failed principal. For example, recovery information  may include an indication that permission for the principal need to be added to a policy file. If recovery information  is displayed in \u201cSuggested Recovery\u201d text box , a user or administrator may choose \u201cAttempt Recovery\u201d button  to activate the suggested recovery action. If a suggested recovery action is successful this fact will be displayed in \u201cStatus of Recovery\u201d text box . A successful recovery action may be a modification of a policy file. If the suggested recovery action is successful, the failed principal will then be shown as a successful principal and a display similar to successful principal dialog display  in  may appear.","However, if a suggested recovery action is not successful and thereby results in failure this fact will also be displayed in \u201cStatus of Recovery\u201d text box . A failed recovery action may result from the policy file not being modified. A policy file may not be able to be modified if, for example, the policy file is \u201cread only\u201d.","If there is no suggested recovery action displayed in \u201cSuggested Recovery\u201d text box , \u201cAttempt Recovery\u201d button  is inactive and \u201cSuggested Recovery\u201d text box  may contain information that no suggested recovery actions are available. A bottom portion of failed principal dialog display  includes \u201cOK\u201d button  which may be selected by a user or administrator to close failed principal dialog display  and \u201cNext\u201d button  which may be selected by a user or administrator to view a next failed principal.",{"@attributes":{"id":"p-0054","num":"0058"},"figref":["FIG. 8A\u20138B","FIG. 4"],"b":["800","802","804","402","404","406","408","806"]},"Then, a determination is made as to whether or not user input is needed (step ). User input may be, for example, by way of a password, a smart card and the like. At this point user information may be retrieved from an underlying system or server. If user input is not needed (step :NO), then, the operation proceeds to step  in which an attempt to authenticate the user with the associated login module is made. If user input is needed (step :YES), then, a determination is made as to whether or not user input was received (step ). If user input is not received (step :NO), the operation terminates. If user input is received (step :YES), the user input is processed (step ).","Whether user input is not needed (step :NO) or user input is processed (step ), an attempt is then made to authenticate the user with the associated login module (step ). If user authentication is not successful (step :NO), an image is displayed representing the failed principal for the login module (step ) and thereafter the operation continues to step  in which a determination is made as to whether or not more login modules are available for execution. This display of the failed login module may be principals , ,  or  in . If user authentication is successful (step :YES), a principal is appended to an internal principal list associated with the current login module (step ). Then an image is displayed representing the principal (step ).","Next, a determination is made as to whether or not more login modules are available for execution (step ). If more login modules are to be executed (step :YES), the operation returns to step  in which the next configured login module is executed. If more login modules are not to be executed (step :NO), the application is executed (step ). Thereafter, a determination is made as to whether or not there are any authorization failures detected (step ). If there are no authorization failures detected (step :NO), an image is displayed indicating a successful execution of the application (step ) and thereafter the operation terminates. If there are any authorization failures detected (step :YES), then principals and policy domain information associated with the failing or the next failing configured login module is retrieved (step ).","A determination is then made as to whether or not the failure was caused by a principal associated with the login module (step ). If the failure was not caused by the principal associated with the login module (step :NO), no image is displayed indicating that the failure was not associated with the login module (step ) and thereafter the operation terminates. If the failure was caused by a principal associated with the login module (step :YES), an image is displayed indicating a failing principal (step ). This image may be, for example, failing principal images  or  in . Then, authorization failure and failing principal are examined for a possible recovery action (step ). Next, a determination is made as to whether or not a recovery action is possible (step ). If a recovery action is not possible (step :NO), then an image is displayed indicating that recovery is not possible for the login module (step ). If a recovery action is possible (step :YES), then an image is displayed indicating a recovery action (step ). The displayed recovery action may be suggested recovery actions  and  in .","Whether an image is displayed indicating a recovery action (step ) or an image is displayed indicating that recovery is not available for the login module (step ), a determination is then made as to whether or not more login modules are available for examination (step ). If more login modules are available for examination (step :YES), the operation returns to step  in which principals and policy domain information associated with the next configured login module is retrieved. If no more login modules are available for examination (step :NO), the operation terminates.","Therefore, the present invention provides a comprehensive graphical representation of the authentication process. Furthermore, the present invention provides the ability to dynamically depict active principals, as well as runtime failures in Java applications that are due to inadequate policy failures or login modules.","It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media, such as a floppy disk, a hard disk drive, a RAM, CD-ROMs, DVD-ROMs, and transmission-type media, such as digital and analog communications links, wired or wireless communications links using transmission forms, such as, for example, radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 8A\u20138B"}]},"DETDESC":[{},{}]}
