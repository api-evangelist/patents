---
title: Unified tracking data management
abstract: Methods and apparatuses that collect tracking data items into a plurality of data stores for one or more domain in response to resources received from the domains are described. Each tracking data item may be accessible for one of the domains. Relationships of the domains may be identified among the tracking data items across multiple data stores according to the resources received. One or more of the domains may be selected according to the identified relationships to control accessibility of the tracking data items for the domains. The data stores may be updated to prohibit accessing at least a portion of the tracking data items for the selected domains.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08793809&OS=08793809&RS=08793809
owner: Apple Inc.
number: 08793809
owner_city: Cupertino
owner_country: US
publication_date: 20110425
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF INVENTION","BACKGROUND","SUMMARY OF THE DESCRIPTION","DETAILED DESCRIPTION"],"p":["The present invention relates generally to tracking data from websites. More particularly, this invention relates to a unified manner to expose and manage tracking data from websites.","With the increase in the popularity of the web (or World Wide Web), more and more websites are tracking users' browsing activities for legitimate or illegitimate reasons, such as targeted advertisements or privacy theft. Hidden websites may perform usage tracking in the background unknown to a user while the user visits a seemingly unrelated website. As a result, user privacy can be seriously compromised.","Typically, websites rely on local data storage in a device for usage tracking. For example, browser cookie is commonly used as a local storage mechanism for websites to store tracking data. Traditional privacy management tools are largely based on managing commonly used website storage mechanisms such as browser cookies. However, as technologies evolve, the browser continues to support new mechanisms for local storages. Thus, new opportunities for usage tracking are made available for websites to take advantage of. As a result, these traditional privacy management tools may give only a false sense of security without keeping up with the newly introduced mechanisms for usage tracking.","Furthermore, the ever increasing number of third party plugin modules or extensions installed for a browser also contributes to the complexity of managing usage tracking. Usually, these plugins are provided with their own private local storages requiring separate interfaces for external access. Thus, a user may be required to keep track of a constantly changing number of local data stores and\/or interfaces for managing usage tracking or removing usage tracking data.","Therefore, existing approaches for managing usage tracking do not provide a user with an option to control usage tracking in a unified, comprehensive and robust manner.","A unified interface can be provided to identify and manage various parties or websites storing local data with degrees of usage tracking, for example, on a browser application. The interface may include a streamlined presentation to expose all websites or companies that may be tracking a user of a device. For example, a degree of tracking associated with a particular website (or domain) may be indicated by revealing that the particular website has locally stored a variety of types of data which can be used for usage tracking as the browser application visits certain websites. Information on all types of tracking activities targeting a user (or a device) from one single website may be consolidated to reveal possible hidden tracking activities. Counter measures may be provided to allow a user to remove multiple types of tracking data in a single request to minimize the user's management effort.","An embodiment of the present invention includes methods and apparatuses that collect tracking data items into a plurality of data stores for one or more domains in response to resources received from the domains. Each tracking data item may be accessible for one of the domains. Relationships of the domains may be identified among the tracking data items across multiple data stores according to the resources received. One or more of the domains may be selected according to the identified relationships to control accessibility of the tracking data items. The data stores may be updated to prohibit accessing a portion of the tracking data items for the selected domains.","In another embodiment, data items may be stored in one or more data stores according to resources received from a plurality of domains. Each data item may be accessible for one of the domains to allow usage tracking for the domain. Relationships among the domains may be analyzed for one or more statistics of the data items in response to a user request. The statistics may indicate degrees of usage tracking for corresponding domains. The domains may be presented via the user interface in an order sorted according to the degrees of usage tracking.","In yet another embodiment, tracking data items may be stored in one or more data stores locally in a device via resources received from a domain by a browser application. A portion of the tracking data items capable of carrying usage tracking information on the browser application may be identified for the domain. The identified portion of tracking data items may be removed from the data stores to prevent restoration of the usage tracking information in the data stores via future resources received from the domain.","Other features of the present invention will be apparent from the accompanying drawings and from the detailed description that follows.","Methods and apparatuses for managing usage tracking are described herein. In the following description, numerous specific details are set forth to provide thorough explanation of embodiments of the present invention. It will be apparent, however, to one skilled in the art, that embodiments of the present invention may be practiced without these specific details. In other instances, well-known components, structures, and techniques have not been shown in detail in order not to obscure the understanding of this description.","Reference in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification do not necessarily all refer to the same embodiment.","The processes depicted in the figures that follow, are performed by processing logic that comprises hardware (e.g. circuitry, dedicated logic, etc.), software (such as is run on a general-purpose computer system or a dedicated machine), or a combination of both. Although the processes are described below in terms of some sequential operations, it should be appreciated that some of the operations described may be performed in different order. Moreover, some operations may be performed in parallel rather than sequentially.","In one embodiment, a degree of usage tracking invoked by a website or a remote entity targeting a user (or a device used by the user) may be exposed to allow the user to exercise control over the tracking. For example, the website (or domain) may collect user information via tracking data locally stored in the device as the user uses an application, such as a browser, which may access or make connections to the website. Counter measures may be provided for the user to control the degree of usage tracking allowed for the website. In certain embodiments, the degree of usage tracking may be based on local data stored (or synchronized) within multiple devices, such as IPad\u00ae, IPhone\u00ae, Macintosh\u00ae, or other devices.","A website may be revealed with a degree of potential tracking activities intended from the website. The degree of usage tracking may correspond to a variety of information collected and\/or analyzed from locally stored data and\/or records in a device hosting an application such as a browser. For example, the information may indicate which types of data have been stored for the website, how many of different types of data (e.g. breadth of storage) have been stored for the website, how often the website has invoked data tracking (or storage), the amount of data stored for the website, the number of other websites causing the website to indirectly store data items, a history (e.g. how many times, frequency, etc.) of accessing (or visiting) the website as requested by a user, or other applicable measures, etc. The degree of usage tracking may include a scale based an equation or mathematical formula which combines multiple sources of information collected from locally stored data. In one embodiment, the degree of usage tracking associated with a website may represent how aggressive the website has attempted to track a user.","Presentation of degrees of usage tracking may be organized around websites storing data items locally in a device to allow a user to control or manage usage tracking from these websites. For example, the presentation may include descriptions of the websites and\/or relationships between the websites in a sorted order for identifying or selecting which websites are most active in usage tracking. Multiple criteria may be applied individually or in combination for the sorting, such as the number of different storage technologies (or types of data) employed and\/or the number of other embedding websites in storing the data items. Storage technologies for different types of data may include, for example, cookies, local cache, plug-in local storage, or other applicable technologies. In some embodiments, the sorting may identify a top website which could store tracking data over a high percentage (e.g. 80%) of websites a user has visited.","Descriptions on degrees of usage tracking may show certain tracking patterns uncovered from data items stored locally in a device for a website, such as frequency of data storing activities, depth of embedding (e.g. hyperlinking) relationships with other websites, and\/or other applicable evidences or traces of usage tracking. Additional information for the websites discovered with tracking data in a device may be automatically linked to assist usage tracking management, for example, by providing reputation ratings of the websites, filtering the websites with lists (e.g. blacklists) of known trackers, or other applicable third party information.","In one embodiment, counter measures against usage tracking from websites may be provided together with degrees of the usage tracking in a unified manner to allow a user to exercise control over the usage tracking. As a result, the user does not need to perform separate user interface operations for different types of data, different websites, nor different and separate third party programs or management applications. For example, one of the counter measures may be capable of removing from a device tracking data associated with or keyed by selected websites (or all websites identified) across multiple types or storage technologies. Thus, the device can be clear from any possible tracking data previously stored via the selected websites.","In one embodiment, counter measures against usage tracking may be capable of privacy enhancement. For example, a counter measure may include blocking selected websites from accessing local data (e.g. including application specific cache, such as browser cache) in a device to prevent usage tracking by the selected websites. Alternatively or optionally, the counter measure may actively update data settings (e.g. opt out) in a device for a particular website to instruct the particular website not to perform further usage tracking activities on the device.","In certain embodiments, multiple levels (or options) of privacy enhancements may be specified for different counter measures. For example, one level of privacy enhancement against a website may cause an application, such as a browser, to operate in a private mode for loading resources from the website. The application may enter the private mode to disable access to local storage in a device such that no data can be stored or retrieved for usage tracking. A higher level of privacy enhancement against a website may block access (e.g. network connection) to the website to cut off usage tracking activities from the website.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1","b":["100","105","109","107"]},"Servers  may host one or more websites storing resources addressable via network . Client  may retrieve a resource from servers  via a request with an address addressing the resource following a protocol such as HTTP (hypertext transport protocol). In one embodiment, each resource in servers  may be associated with a unique address, e.g. a URL (universal resource locator) based address, including a hostname. Typically, a hostname may be a domain name or label assigned to a host computer (or device) as a combination of the host's local name with its parent domain's name. For example, a URL \u201ca.b.com\u201d may consist of a local hostname \u201ca\u201d and a domain name \u201cb.com\u201d. Multiple resources may be addressed under a common domain. Illustratively, two resources addressed by \u201chttp:\/\/h1.com\/a.htm\u201d and \u201chttp\/\/h1.com\/b.htm\u201d may be of a common domain \u201ch1.com\u201d. A website may represent a domain. In one embodiment, servers  may store resources from multiple domains including domain_  and domain_. Each resource may include text data (e.g. hypertext document, web page etc.), binary data (e.g. images, sound files, video, or other media content etc.), binary executables (e.g. dynamic link libraries), or other applicable data.","Client  may be a browser application or other applications running in a client device to perform transactions with servers . For example, client  may load resources (e.g. web pages or content) from servers  via the transactions. In one embodiment, client  may access data stores  as a result of loading resources from servers  and\/or performing transactions with servers . Data stores  may be based on memory (e.g. DRAM device) or locally coupled mass storage device (e.g. hard drive, flash memory or other applicable storage devices). In one embodiment, client  may send data associated with (or keyed by) a domain_  from data stores  when performing transactions with servers  to retrieve a resource addressed with domain_ . Alternatively, client  may store data (e.g. usage tracking data) for domain_  as a result of loading a resource of domain_  retrieved from servers .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["200","109","201","201","203","105"]},"In one embodiment, system  may include a browser engine  capable of accessing local data storage, such as data stores  of , for remote domains, such as domain_  and domain_  of . Browser engine  may access (e.g. read, write, update etc.) local data storage via storage management module , for example, to store usage tracking data for a domain. Local data storage may include multiple data stores, such as datastore_ , datastore_ , datastore_ , plug-in datastore , or other applicable data stores accessible to browser engine . Each data store may store a separate type of data requiring a separate data interface mechanism. There may be an unbounded number of possible data stores or data types to store local data in a client device. A website may perform discovery transactions with the client device to dynamically discover or identify which types of data stores are available or supported in the client device.","In one embodiment, storage management module  may include data interface mechanisms to access each available data store for browser engine . For example, storage management module  may directly access datastore_ , datastore_  and\/or datastore_ . Access to datastore_  may be based on web cookie specifications of Request For Comments , \u201cHttp State Management Mechanism\u201d, October, 2000, to set or get cookie data as a piece of text. Access to datastore_  may be based on web caching mechanism for storing, sharing and\/or reusing copies of documents retrieved from web servers, such as resources hosted in servers  of , via network interface module . A same origin privacy policy may be implemented within storage management module  to prohibit a website (or a domain) from accessing data stored (or keyed, indexed) via a different domain.","Storage management module  may include API (application programming interface) interfaces  for accessing data stores, such as datastore_  or plug-in datastore , indirectly via supported APIs. Separate API interfaces may be invoked to access different data stores. For example, Web Database Module  may support interface to datastore_  based on APIs for web SQL database as specified in W3C working group note, Nov. 18, 2010. In one embodiment, storage management module  may access plug-in datastore  via plug-in module . A plug-in module (or plug-in, plugin) may be a set of software components (e.g. dynamically linked libraries (DLL) or other executable binaries) that add specific capabilities to a larger software application, such as browser application . For example, browser application  may support plug-ins to enable customizing browser functionality to play video (e.g. Flash Player from Adobe Inc. or QuickTime from Apple Inc., Java from Oracle Inc., Silverlight from Microsoft Inc., etc.), scan for viruses, display new file types, or perform other applicable functions. The set of plug-in modules installed or loaded in system  may change dynamically, depending on, for example, configurations of browser application  or versions of browser engine .","In one embodiment, browser application , e.g. a common standard browser such as Safari from Apple Inc., Internet Explorer from Microsoft Inc., etc. may receive user requests via user interface module  to access a web page or retrieve a resource addressed by a unique identifier, such as a URL. For example, a user request may be based on a URL address entered (e.g. in an address field) or a link selected (e.g. when the user clicks on a hyperlink, a bookmark link, or a history link) on a user interface of browser application . In response, browser application  may forward the request for the resource to browser engine  for loading and\/or rendering the requested resource, for example, via network interface  or via local cache, such as datastore_  to reuse previously fetched copy of the resource, for example, to reduce unnecessary network bandwidth usage.","In some embodiments, while loading a resource, browser engine  may automatically fetch additional resources in a manner unaware to a user of browser application . For example, browser engine  may load a hypertext document, such as an HTML (Hypertext Markup Language) document, addressed by a first address to render a web page requested by the user. The hypertext document may include a link to a resource with a second address, e.g. based on source attribute of a frame element for another HTML document, an image element for an image file, or other applicable hypertext elements. Browser engine  may load the resource of the second address automatically or recursively load other resources linked before completing loading the first resource. In one embodiment, browser engine  may record (or store) a parent child relationship between domains of the first and second addresses for managing tracking data associated with these domains.","In one embodiment, a parent domain may be a first party domain and a child domain may be a third party domain. A first party domain, for example, may correspond to a domain or subdomain presented in an address bar of browser application . Data (e.g. cookies or other tracking data) stored via resources of a first party domain may be first party data. In some embodiments, a domain associated with a web page may be a third party domain if the domain is different from a first party domain indicated in an address bar for the web page. Data stored during loading a resource of a third party domain (or third party resource) may be third party data.","Access to local data, such data stored in datastore_ , datastore_ , datastore_ , plug-in datastore , may be initiated via access to a resource in browser engine . For example, browser engine  may retrieve, via storage management module , data keyed by a domain of an address of a resource for a transaction (e.g. request\/response) to receive the resource of the domain. As a result, the server of the domain may access local data, for example, via HTTP cookie get\/set operations, associated with the domain from client system . Typically, browser engine  may prohibit a domain to access local data keyed (or indexed) by other domains.","Alternatively, browser engine  may perform operations specified in a resource of a domain to access (e.g. read\/write) local data for the domain. For example, an HTML resource of the domain may include script code (e.g. JavaScript code or other script code) for reading or writing usage tracking data for the domain. Browser engine , when loading the HTML resource, may invoke a corresponding script engine, such as Javascript engine or other script engines, to execute the script code to update data for the domain via storage management module . Resources from a domain may cause browser engine  to perform operations to hide usage tracking data, such as storing multiple copies data items in separate data stores for the domain or resurrecting (or duplicating) information stored in one data store to other data stores for the domain.","In some embodiments, a resource may include instructions to invoke a plug in extension, such as plug-in module  which may access its own data store, such as plug-in datastore  to update data for the domain of the resource. Browser engine  and\/or plug-in modules may perform operations as specified in a resource of a domain to conduct transactions with a remote server of the domain, e.g. via network interface module , to access local stores for usage tracking. Thus, a user may browse a web page of one domain, e.g. via browser application , resources of additional domains linked directly or indirectly from the web page may be loaded to store and access usage tracking data for these domains in the background unknown to the user.","In one embodiment, tracking data management module  may be capable of providing a unified user interface via user interface module  to allow a user to manage usage tracking associated with various domains. Tracking activity analyzer module  may automatically enumerate each data store available in a device via storage management module  to identify each domain storing local data in system . For example, tracking data management module  may locate a set of currently installed plug-in modules and\/or data stores associated with, for example, storage management module  or browser application , within system . Alternatively, tracking data management module  may send a request to storage management module  to identify exhaustively each directly or indirectly (e.g. via API interfaces) accessible data store.","In one embodiment, tracking data management module  may collect descriptions on data stored in each data store grouped according to domains. The descriptions may indicate, for example, size, time stamps, associated parent child linking relationship of the domain with other domains and\/or other applicable attributes etc. API interfaces  may allow tracking data management modules  to indirectly query a plug-in data store, such as plug-in datastore , for the descriptions of data stored for the domain. In one embodiment, tracking activity analyzer  may analyze a variety of statistics from the collected descriptions for data stored in multiple data stores for the domain, such as frequency, number of times the domain have been embedded in web pages as a child domain (or third party domain), number of times a web page of the domain embedding other domains as child domains (or third party domains), or other applicable statistics or values. These statistics may be capable of indicating degrees of tracking from the corresponding domain.","In one embodiment, tracking data management module  may present domains sorted in an order based on degrees of usage tracking in a user interface, for example, via user interface module . Optionally, multiple sorting criteria, (e.g. each criteria corresponding to one statistics or attribute of data stored for a domain) may be available for a user to customize presentation of domains tracking usage data. Each domain presented may be associated with at least one data item keyed or indexed by the domain in a data store within system . As a result, summary information on usage tracking may be made available to the user. The summary information may include, for example, which domains may have been tracking usage of the user, how hard each domain has made tracking attempts (e.g. how much data, how many different types of data, etc), or other applicable summary data, etc.","Tracking data management module  may provide a user interface to allow a user to invoke counter measures via tracking data control handler module  for reducing or eliminating usage tracking against exposed domains and\/or future unknown domains. For example, in response to a user request selecting one or more domains, tracking data control handler module  may notify (or indirectly via storage management module ) each data store within system , such as datastore_, datastore_, . . . plug-in datastore , to remove data items associated with the selected domains according to a counter measure. Alternatively, tracking data control handler module  may update storage management module  to prevent the selected domains from accessing local data storage (e.g. each data store or selected data stores) under certain conditions. For example, accessing (e.g. to reading\/writing\/inserting) local data storage may be prohibited from a selected domain when loading a resource of a domain different from the selected domain. Other applicable counter measures may be applicable.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 3","FIG. 2"],"b":["300","200","1","301","1","1","301","1","305","3","1","1","307","1","303","1","1","301","2","309","3","1","303","1","305","3","1","3","2","309","1","3"]},"Separately, web_page_  may embed banner_ , for example, as a hyperlink to a multimedia resource from domain_. Data_item_  may be stored in data_store_  indexed by domain_ as a result of loading web_page_ . Data_item_  indexed by domain_ may be stored in data_store_  as a result of loading banner_  from domain_. Each data store, such as data_store_ , data_store_  or data_store_  may store different types of data items keyed by associated domains. In one embodiment, a user may explicitly request loading of web_page_  and web_page_ . In contrast, loading of banner_  and banner_  may be hidden from the user.","In some embodiments, loading of banner_  of domain_ may initiate usage data collection for domain_. For example, data items keyed under domain_ in a client device may be collected from each data store, such as data_store_ , data_store_  and data_store_ . The collected data may be forwarded to a server of domain_ for usage tracking purpose. Alternatively, data_item_  of domain_ may be generated according to data_item_  of domain_ for usage tracking update. In one embodiment, data_item_  and data_item_  may eventually be sent to domain_ when loading other advertisement contents from domain_ or visiting their websites of domain_. Thus, domain_ may then build up usage tracking data or compile a profile on the user across different websites or domains embedding domain_ (or domain_ has footprints on).",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIGS. 4-5","FIG. 2","FIG. 2"],"b":["400","500","200","400","401","403","203","403"]},"In one embodiment, window  may include information and options for a user to manage usage tracking in a unified manner. For example, listing  may indicate a statistics on how many parties (e.g. 88 websites or domains) have been exposed to store data locally in a device. Possible counter measures may be presented as configuration options . Action button  may be provided to remove all local data stored in the device. Additionally, listing  may include a button for user to access more detailed information on evidences of data tracking collected from local storage of the device.","Turning now to , window  may present details of data tracking information identified from a client device, for example, corresponding to a response associated with an action button, such as Details button  of . In one embodiment, window  may include a list of websites or domains sorted according a degree of usage tracking or other criteria (e.g. alphabetical order). Each website may be accompanied by tracking information such as types of data stored. Additionally, diagram  may include user interface elements for a user to select particular websites, search certain websites (e.g. name or tracking activities), or taking counter measures against usage tracking. For example, a user may be allowed to select a counter measure to remove tracking data associated with selected websites or all websites. Accordingly, each data store may be instructed to remove data associated with the selected websites or be emptied completely.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 6","FIG. 2"],"b":["600","600","200","601","600"]},"At block , the processing logic of process  may identify relationships among the tracking data items across multiple data stores (or types of data). For example, a record may indicate a parent child relationship between a parent domain and a child domain (e.g. as a third party domain) according to a first resource (or a document corresponding to a web page) of the parent domain. The first resource may include a link to automatically retrieving a second resource of a child domain without waiting for a user request.","In one embodiment, at block , the processing logic of process  may select one or more domains to control accessibility of tracking data items stored for the selected domains. For example, the processing logic of process  may determine a degree of usage tracking for a domain according to how many resources have embedded hyperlinks of the domain as a type of third party domain. The processing logic of process  may update data stores to prohibit accessing information contained within at least a portion of the tracking data items associated with the selected domains.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 7","FIG. 2"],"b":["700","700","700","200","701","700"]},"At block , in response to a request received from a user interface, the processing logic of process  may analyze relationships among domains having data items stored in data stores. For example, the analysis may determine a third party domain related to (or allowed by) a first party domain. In one embodiment, the processing logic of process  may identify or derive one or more statistics from the data items. The statistics may include, for example, a total count of third party domains allowed by one particular first party domain, a total count of first party domains allowing a particular third party domain, or other applicable measures. The statistics may indicate degrees of usage tracking for each domain across the data stores.","Subsequently, at block , the processing logic of process  may present at least one of the domains via a user interface to expose usage tracking activities to a user. In some embodiments, the processing logic of process  may sort domains in an order according to the degrees of usage tracking. Alternatively, the user may be allowed to select different criteria, such as statistics of third party domains, to explore various sorting orders among the domains presented.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 8","FIG. 2"],"b":["800","800","200","801","800"]},"At block , in one embodiment, the processing logic of process  may identify a portion of the tracking data capable of carrying usage tracking information, for example, via a browser application, for the domain. The processing logic of process  may recognize option settings, such as turning usage tracking on\/off, within locally stored data items for a particular domain to control usage tracking. In one embodiment, data items may be identified as potential tracking data if not recognizable according to configured options settings. At block , the processing logic of process  may remove identified tracking data items for a domain from each available data store within a device. As a result, the processing logic of process  may prevent restoration of removed usage tracking information for a domain from other data stores back to its original data store (or a separate data store) when loading resources from the domain in the future.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 9","FIG. 2"],"b":["900","900","200","901","900"]},"At block , the processing logic of process  may merge collected descriptions of data items across multiple data stores. The merged descriptions may include summary statistics indicating a degree of data tracking on a device for separate domains. In one embodiment, summary statistics for a domain may be based on counting data items keyed by a common domain across different data stores. At block , the processing logic of process  may present the summary statistics of data tracking to a user of a device. The processing logic of process  may provide options to allow the user to select counter measures to reduce the degree of data tracking on the device in a unified manner without requiring the user to separately manage different data stores and\/or domains. The user may select which counter measures to activate via the presented options. In response, at block , the processing logic of process  may update the data stores for the selected counter measures to reduce the degree of data tracking or to prevent future data tracking on the device.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 10","FIG. 1","FIG. 10"],"b":"1000"},"As shown in , the computer system , which is a form of a data processing system, includes a bus  which is coupled to a microprocessor(s)  and a ROM (Read Only Memory)  and volatile RAM  and a non-volatile memory . The microprocessor  may retrieve the instructions from the memories , ,  and execute the instructions to perform operations described above. The bus  interconnects these various components together and also interconnects these components , , , and  to a display controller and display device  and to peripheral devices such as input\/output (I\/O) devices which may be mice, keyboards, modems, network interfaces, printers and other devices which are well known in the art. Typically, the input\/output devices  are coupled to the system through input\/output controllers . The volatile RAM (Random Access Memory)  is typically implemented as dynamic RAM (DRAM) which requires power continually in order to refresh or maintain the data in the memory.","The mass storage  is typically a magnetic hard drive or a magnetic optical drive or an optical drive or a DVD RAM or a flash memory or other types of memory systems which maintain data (e.g. large amounts of data) even after power is removed from the system. Typically, the mass storage  will also be a random access memory although this is not required. While  shows that the mass storage  is a local device coupled directly to the rest of the components in the data processing system, it will be appreciated that the present invention may utilize a non-volatile memory which is remote from the system, such as a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface or wireless networking interface. The bus  may include one or more buses connected to each other through various bridges, controllers and\/or adapters as is well known in the art.","Portions of what was described above may be implemented with logic circuitry such as a dedicated logic circuit or with a microcontroller or other form of processing core that executes program code instructions. Thus processes taught by the discussion above may be performed with program code such as machine-executable instructions that cause a machine that executes these instructions to perform certain functions. In this context, a \u201cmachine\u201d may be a machine that converts intermediate form (or \u201cabstract\u201d) instructions into processor specific instructions (e.g. an abstract execution environment such as a \u201cvirtual machine\u201d (e.g. a Java Virtual Machine), an interpreter, a Common Language Runtime, a high-level language virtual machine, etc.), and\/or, electronic circuitry disposed on a semiconductor chip (e.g. \u201clogic circuitry\u201d implemented with transistors) designed to execute instructions such as a general-purpose processor and\/or a special-purpose processor. Processes taught by the discussion above may also be performed by (in the alternative to a machine or in combination with a machine) electronic circuitry designed to perform the processes (or a portion thereof) without the execution of program code.","An article of manufacture may be used to store program code. An article of manufacture that stores program code may be embodied as, but is not limited to, one or more memories (e.g. one or more flash memories, random access memories (static, dynamic or other)), optical disks, CD-ROMs, DVD ROMs, EPROMs, EEPROMs, magnetic or optical cards or other type of machine-readable media suitable for storing electronic instructions. Program code may also be downloaded from a remote computer (e.g. a server) to a requesting computer (e.g. a client) by way of data signals embodied in a propagation medium (e.g. via a communication link (e.g. a network connection)).","The preceding detailed descriptions are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the tools used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be kept in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cprocessing\u201d or \u201ccomputing\u201d or \u201ccalculating\u201d or \u201cdetermining\u201d or \u201cdisplaying\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","The present invention also relates to an apparatus for performing the operations described herein. This apparatus may be specially constructed for the required purpose, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), RAMs, EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.","The processes and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct a more specialized apparatus to perform the operations described. The required structure for a variety of these systems will be evident from the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.","The foregoing discussion merely describes some exemplary embodiments of the present invention. One skilled in the art will readily recognize from such discussion, the accompanying drawings and the claims that various modifications can be made without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 4-5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
