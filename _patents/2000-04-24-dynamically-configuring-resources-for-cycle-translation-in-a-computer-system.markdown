---
title: Dynamically configuring resources for cycle translation in a computer system
abstract: A method and system that enables customized computer machines to be more readily developed by removing the function of resource translation out of the hardware abstraction layer (HAL). A machine manufacturer describes a machine in firmware, such as accordance with the Advanced Configuration and Power Interface (ACPI) specification, using ACPI machine language (AML). Operating system components such as a Plug and Play (PnP) manager in the kernel, in conjunction with an ACPI driver, interpret the description information and locate resources (bus bridges) for which translation is needed. For any arbitrary bus architecture or CPU to PCI bridge implementation that can be expressed, e.g., in ACPI firmware, the invention provides a translator external to the HAL. In one implementation, a PnP driver communicates with the ACPI driver and various drivers in driver stacks via I/O request packets (IRPs) to look for resource translators. The ACPI driver analyzes the machine description and returns a translator if found for such a resource. The resource is then configured to output cycles based on the translator.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06970957&OS=06970957&RS=06970957
owner: Microsoft Corporation
number: 06970957
owner_city: Redmond
owner_country: US
publication_date: 20000424
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates generally to computer devices, and more particularly to computer software for facilitating the development of customized computer hardware.","The Hardware Abstraction Layer, or HAL, is a complex part at a low layer of the Windows\u00ae 2000 (or Windows NT\u00ae) operating system that abstracts hardware differences among various system architectures from higher layers of software. The HAL enables higher-level operating system components and drivers to communicate with the system hardware without modification, i.e., the HAL enables a single driver to support the same hardware device on multiple platforms. For example, one of the many tasks performed by the HAL is resource translation, wherein on certain (e.g., non-x86) processors that can only read and write in memory cycles, certain CPU-relative memory cycles are translated to bus-relative cycles (I\/O or other memory address), and vice-versa, so that devices can respond to (decode) the cycle.","A HAL performs many functions, and a reliable HAL is critical to a properly operating computer machine. It is thus an extremely complex piece of software code to develop. Indeed, the contemporary cost to write, test and debug a HAL may be on the order of several millions of dollars. It is impractical for an operating system vendor to write a new HAL for each new machine that is developed, and machine vendors thus need to fit new machines into one of the broad categories covered by one of the several HAL implementations currently available, or write their own HAL for a machine that is not covered. However, because of the cost and complexity reasons, only a few, very large original equipment manufacturers have attempted to write a HAL to attempt to support a new class of machines, with mixed results. As a result, most equipment manufacturers are limited to providing classes of computer systems that are capable of working with an already-existing HAL. In general, however, manufacturers would like to develop customized machines that are not limited by existing HALs, yet without going through the expensive and unpredictable ordeal of writing a customized HAL for each new customized class of machine.","Briefly, the present invention provides a method and system that removes the function of resource translation out of the HAL. This enables customized machines to be more readily developed, as instead of requiring an entire HAL to provide resource translation, the resource translator may be dynamically determined for each particular piece of hardware.","To this end, in one described implementation, a machine manufacturer describes a machine in firmware, such as accordance with the Advanced Configuration and Power Interface (ACPI) specification, using ACPI machine language (AML). Operating system components such as the Windows Driver Model (WDM) Plug and Play (PnP) Manager in the kernel, in conjunction with an ACPI driver, interpret the description information and locate resources for which translation is needed. For any arbitrary bus architecture or CPU to PCI bridge implementation that can be expressed, e.g., in ACPI firmware, the invention provides a translation mechanism that tells a device driver (at the time that the device driver is brought into service) what CPU cycles to issue in order to cause an appropriate I\/O cycle on the bus that contains the driver's device. This is done based on the firmware information, and outside of the HAL, to abstract hardware differences among various system architectures from higher layers of software.","In one implementation, when the ACPI driver is enumerated at system startup, the ACPI driver examines and interprets the AML in the ACPI firmware to build a hierarchical namespace. The kernel (PnP) communicates with the various drivers in driver stacks via I\/O request packets (IRPs) to look for resource possibly needing translation. When such a driver is found, an IRP reaches an ACPI driver in a driver stack, and the ACPI driver looks at the _CRS of the PCI Host bus in the ACPI namespace and sees if any items have a translation value to determine whether the resource requires translation. If so, the ACPI driver uses the IRP to hand back a translator (a table of functions) to the kernel (e.g., the PNP manager therein) to configure the driver to enable the translation, i.e., such that the device driver knows what CPU cycles to issue in order to cause an appropriate I\/O cycle on the bus that contains the driver's device.","Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings, in which:","Copyright Notice","A portion of the disclosure of this patent document may contain material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","Exemplary Operating Environments","FIG.  and the following discussion are intended to provide a brief general description of a suitable computing environment in which the invention may be implemented. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types.","Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer  or the like, including a processing unit , a system memory , and a system (CPU) bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. Other busses may be present, e.g., as described below with reference to FIG. . The system memory includes read-only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  may further include a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD-ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read-only memories (ROMs) and the like may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system  (such as Microsoft Corporation's Windows\u00ae 2000 , formerly Windows NT\u00ae, operating system). The computer  includes a file system  associated with or included within the operating system , such as the Windows NT\u00ae File System (NTFS), one or more application programs , other program modules  and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , personal computers typically include other peripheral output devices (not shown), such as speakers and printers.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in FIG. . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, Intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","While the present invention is primarily described with respect to the Windows\u00ae 2000 operating system and ACPI, those skilled in the art will appreciate that other operating systems and\/or configuration management systems may implement and benefit from the present invention.","Exemplary Bus Architecture","In general, contemporary computer systems contain a collection of busses. For example, as represented in a typical mid-range server of , the processor  and memory  are connected to the CPU bus , as is at least one I\/O Bridge, e.g., -. I\/O Bridges (e.g., , and ) each generate I\/O Busses (e.g., -), which in turn may have I\/O Devices -and other I\/O Bridges e.g.,  connected thereto. Note that in , there is only one processor  and three root I\/O Bridges -shown, however as can be readily appreciated, other machines may have greater or fewer numbers of such components.","When a processor such as the processor  wants to read or write from main memory  or any of the I\/O Devices -, the processor  generates a read or write cycle, respectively, on the CPU Bus . If the processor is one that that addresses both I\/O and memory, (such as a 386-compatible microprocessor manufactured by Intelo Corporation), the cycles on the CPU bus  can be of one of two types, memory or I\/O, (although other \u201cspecial\u201d cycle types exist, not described herein for purposes of simplicity). In addition to a type, cycles contain an address and a byte length. Thus, for example, one cycle may be a four-byte read from memory address 0x7a32c, while another cycle may be a two-byte write to I\/O address 0x802. Note that in processors compatible with the Intel\u00ae i386 processor, I\/O cycles can have addresses between 0 and 0xffff, while memory cycles can have addresses between 0 and 0xffffffff, with some variants going as high as 0x3fffffffff.","A \u201cbus master\u201d is a hardware device or the like that places a cycle on a bus. Frequently, this is the processor , however it can also be any of the I\/O devices -or bridges -or . When a bus master places a cycle on a bus, some other device responds to the cycle, which is referred to as \u201cdecoding the cycle.\u201d Generally, the choice about which device responds is made according to the address in the cycle. For example, in , the main memory  may be programmed to decode all memory cycles from memory address 0 through address 0x7ffffff, such that if the processor  issues a one-byte read from address 0x12000, the main memory  responds with data. However, if the processor  issues a one-byte read from I\/O address 0x200, the main memory  will not respond, although an I\/O device (e.g., ) may be programmed to respond to such a read cycle.","Bridges move cycles from one bus to another bus. For example, the CPU to PCI Bridge  in  may be programmed to decode I\/O range 0x7000 through 0x8fff and memory range 0xE0000000 through 0xE7ffffff on CPU Bus , and pass the cycles onto PCI Bus . In this example, if the CPU  issues a one-byte read from I\/O address 0x7200, the CPU to PCI Bridge will claim the cycle, and issue the same cycle (as a bus master) on PCI Bus . If the I\/O Device  is programmed to decode 0x7200 through 0x72ff, the I\/O device  will respond to this cycle with data. The CPU to PCI Bridge  will then return this data to the processor , completing the original cycle.","Some processors, including most of those not compatible with the Intel i386, can only generate the memory type of cycle. In such processors, all reads and writes from the processor are expressed in terms of memory. However, such machines still contain I\/O devices that decode I\/O cycles, not memory cycles. In such machines, the CPU to PCI bridges are designed to translate certain memory cycles to I\/O cycles, and vice versa, as they pass through the bridge. For example, CPU to PCI Bridge might decode memory cycles 0xEB000000 through 0xEfffffff, passing them through the bridge unchanged. But it would also decode memory cycles 0x100020000 through 0x10002ffff, translating them to I\/O addresses 0 through 0xffff as it placed them on the PCI bus . Note that in the above example, the translation algorithm essentially consists of subtracting 0x100002000 from the address, and changing its type. Thus, in order for a driver to access a device, the driver needs to know what CPU cycles to issue in order to cause an appropriate I\/O cycle on the bus that contains the driver's device.","Illustrative Configuration Management",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3","b":["80","20","1","80"]},"As shown, the application programs  may interface with a kernel , which is a part of the operating system , generally via application programming interface (API) calls or the like. The kernel  can be generally considered as one or more software modules that are responsible for performing many operating system functions. One such function is passing information between the application programs  and the lower level components of the ACPI system , such as the ACPI driver  (described below) and various device drivers (e.g., device driver ). A driver communicates with other drivers and the operating system components (e.g., an I\/O manager), for example in the Windows\u00ae 2000 (and Windows NT\u00ae) operating systems, by passing I\/O request packets, or IRPs.","The kernel  also includes (or is associated with) the Plug and Play (PnP) system code referred to herein as the PnP driver . The PnP driver  comprises one or more software modules, which, among other functions, locates resources including I\/O devices, and if necessary, changes the addresses of those resources via arbitration. In accordance with one aspect of the present invention and as described in more detail below, the PnP driver  also communicates with the driver stack and the ACPI driver  to determine whether bus bridges need translation, and if so, to provide a translator to configure drivers to issue the appropriate cycles to communicate with devices based on the translation. The determination is made external to the HAL based on firmware information. Note that although the PnP driver  and the ACPI driver  are described as separate components, the operation and functionality thereof may be combined into a single component, and\/or distributed among other components. Moreover, it should be noted that while the present invention is described with reference to ACPI and PnP, there is no intent to limit the invention thereto, as those skilled in the art will appreciated that the invention may be implemented in many types of computing environments.","In general, the ACPI driver  is a module that controls the functioning of much of the ACPI system . The ACPI driver  may be supplied as part of the operating system  or as a separate component. In the described system, the ACPI driver  is loaded during system start-up in a tree, (e.g., as shown in FIG. ). The responsibilities of the ACPI driver  include support for plug and play (PnP). The ACPI driver  is responsible for initiating and maintaining the ACPI system , such as by populating an ACPI namespace  (e.g., part of which is represented in FIG.  and described below) at system startup, loading and unloading description blocks from the ACPI namespace  at run time, handling certain generic events triggered by ACPI-compliant hardware, and handing off other events to modules registered to handle those events.","The ACPI driver  makes use of several components when performing the functions of the ACPI system . One component is the ACPI BIOS , which refers to the portion of system firmware that is compatible with the ACPI specification. Generally stated, the ACPI BIOS  is packaged with the machine code that boots the machine (similar to the BIOS present in most conventional computer systems) and implements interfaces for power and configuration operations, such as sleep, wake, and some restart operations. The ACPI BIOS  contains definition blocks used to construct ACPI Tables . Note that although the BIOS  and the ACPI BIOS  are illustrated as separate components in , they may be implemented as one component in the computer system .","The ACPI Tables , generally known as Differentiated Definition Blocks (DDBs), are composed of as few as one, but most likely many, definition blocks that contain data and\/or control methods. Each set of data and\/or control methods defines and provides access to a respective hardware device. The tables include header data structures that contain information about what the block contains, for example, whether it is a Differentiated System Description Table (DSDT) or a Secondary System Descriptor Table (SSDT). Each table (SSDT or DSDT) contains only one Definition Block. One such definition block, known as a Differentiated System Description Table (DSDT) describes the base computer system, that is, the DSDT contains a Differentiated Definition Block (DDB), which describes the root system. The DSDT is like other Data blocks, except that it cannot be unloaded. Other definition blocks may be provided to describe additional ACPI devices.","The definition blocks are written in an interpreted language called ACPI Machine Language (AML), the interpretation of which is performed by an AML interpreter  within the ACPI driver . ACPI registers  are a constrained part of the hardware interface, described (at least in location) by the ACPI Tables . For a more detailed discussion of the ACPI tables , definition blocks, and other functions performed by the ACPI driver , refer to Sections  and  of the publicly-available ACPI Specification Version 1.0 et seq., which are hereby incorporated by reference in their entireties.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5","b":["90","94","90","20","90","92","35","84","94","92","94","90","84","90","94"]},"Shown in  is one illustrative ACPI namespace , containing a namespace root, and illustrative branches under the root, along with other objects. For example, under the root is a processor tree namespace \\_PR. Processor objects, such as the Processor objects CPU and CPU, are defined under the processor tree \\_PR namespace. For more information about processor objects, see Section  of the ACPI Specification.","The \\_SB namespace includes namespace objects that define ACPI-compliant components attached to the system bus. One example of such a namespace object is the PCI bus namespace object. As described in more detail below, hierarchically beneath the PCI device object is an ACPI _CRS (current resource settings) object associated with each bridge. The _CRS object is populated by structures that describe the ranges of I\/O and Memory that pass through a CPU to PCI bridge. As generally shown in , for each device described in the ACPI namespace , the ACPI driver  creates either a filter Device Object (filter DO) or a Physical Device Object (PDO). Note that  is only a partial representation, as ACPI loads itself into every device stack of which it is aware. If the device is capable of being enumerated by an element of another subsystem, such as a Plug-n-Play subsystem, that element of the other subsystem creates a PDO for the device and the ACPI driver  puts a filter DO on top of the PDO. If the ACPI namespace  is the only possible enumeration mechanism, the ACPI driver  creates the PDO. XACPI provides various features to the device stack by means of these device objects. For more information on filter DOs, PDOs and Functional DOs (FDOs), refer to the Microsoft Windows\u00ae 2000 Driver Development Kit, available from the Microsoft Corporation of Redmond, Wash., and incorporated by reference herein.","WINDOWS DRIVER MODEL","In accordance with one aspect of the invention and as generally represented in , an ACPI-compliant implementation of a HAL  is provided that does not enumerate the CPU to PCI bridges in the machine, but instead enumerates the ACPI driver , which is responsible for examining and interpreting the ACPI firmware. Note that this implies that the HAL is not the bus driver for these devices, i.e., the HAL is neither aware of nor is responsible for detecting\/configuring these devices.","In turn, the ACPI driver  enumerates the CPU to PCI bridges that are described in the ACPI firmware, such as the PCI bridge driver , paying special attention to the ACPI _CRS object associated with each of these devices. As mentioned above and as represented in the namespace of , each _CRS object is populated by structures that may describe the ranges of I\/O and Memory that pass through a CPU to PCI bridge.","The device driver, e.g., the net driver  that controls the I\/O Device (e.g., ) in the previous examples needs to know how to address the device. AS described below, the Windows driver model (WDM) will provide for this by passing the base address of the device to the device driver  in an IRP, i.e., as part of IRP_MJ_PNP-IRP_MN_START_DEVICE. The following table, TABLE1, based on the Windows\u00ae 2000. DDK, Setup, Plug & Play, Power Management\u2014Reference\u20142.0 Plug and Play IRPs, describes the IRP_MN_START_DEVICE IRP:",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"IRP_MN_START_DEVICE"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"All proper PnP drivers must handle this IRP."]},{"entry":[{},"When Sent:"]},{"entry":[{},"This IRP is sent by the PnP Manager after it has"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"assigned hardware resources, if any, to the device. The"},{"entry":"device may have been recently enumerated and is being started"},{"entry":"for the first time, or the device may be restarting after"},{"entry":"being stopped for resource rebalancing."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Sometimes the PnP Manager sends an IRP_MN_START_DEVICE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"to a device that is already started, supplying a different"},{"entry":"set of resources than the device is currently using. A"},{"entry":"driver initiates this action by calling"},{"entry":"IoInvalidateDeviceState, and responding to the subsequent"},{"entry":"IRP_MN_QUERY_PNP_DEVICE_STATE request with the"},{"entry":"PNP_RESOURCE_REQUIREMENTS_CHANGED flag set. For"},{"entry":"example, a bus driver might use this mechanism to open a new"},{"entry":"aperture on a PCI-to-PCI bridge."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"The PnP Manager sends this IRP at IRQL PASSIVE_LEVEL in"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"the context of a system thread."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Input:"]},{"entry":[{},"Parameters.StartDevice.AllocatedResources points to a"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"CM_RESOURCE_LIST describing the hardware resources that the"},{"entry":"PnP Manager assigned to the device. This list contains the"},{"entry":"resources in raw form. Use the raw resources to program the"},{"entry":"device."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Parameters.StartDevice.AllocatedResourcesTranslated"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"points to a CM_RESOURCE_LIST describing the hardware"},{"entry":"resources that the PnP Manager assigned to the device. This"},{"entry":"list (described below) contains the resources in translated"},{"entry":"form. Use the translated resources to connect the interrupt"},{"entry":"vector, map I\/O space, and map memory."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The following table, TABLE2, sets forth the CM_RESOURCE_LIST describing the hardware resources that the PnP Manager assigned to the device:",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"CM_RESOURCE_LIST"},{"entry":"typedef struct _CM_RESOURCE_LIST {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ULONG Count;"]},{"entry":[{},"CM_FULL_RESOURCE_DESCRIPTOR List[1];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["}","CM_RESOURCE_LIST, *PCM_RESOURCE_LIST;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"The CM_RESOURCE_LIST structure specifies all of the"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"system hardware resources assigned to a device."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Members"]},{"entry":[{},"Count"]},{"entry":[{},"The number of elements contained in the List array. For"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"WDM drivers, this value is always 1."}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"List"]},{"entry":[{},"An array of CM_FULL_RESOURCE_DESCRIPTOR"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"structures."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The TABLE3 sets forth a CM_FULL_RESOURCE DESCRIPTOR, an array of which may be specified in the RESOURCE_LIST structure (TABLE2):",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"CM_FULL_RESOURCE_DESCRIPTOR"},{"entry":"typedef struct _CM_FULL_RESOURCE_DESCRIPTOR {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"INTERFACE_TYPE InterfaceType;"]},{"entry":[{},"ULONG BusNumber;"]},{"entry":[{},"CM_PARTIAL_RESOURCE_LIST PartialResourceList;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["}","CM_FULL_RESOURCE_DESCRIPTOR,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"*PCM_FULL_RESOURCE_DESCRIPTOR;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"The CM_FULL_RESOURCE_DESCRIPTOR structure"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"specifies a set of system hardware resources of various types, assigned"},{"entry":"to a device that is connected to a specific bus. This"},{"entry":"structure is contained within a CM_RESOURCE_LIST structure."},{"entry":"Members"},{"entry":"InterfaceType"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Specifies the type of bus to which the device is"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"connected. This must be one of the types defined by"},{"entry":"INTERFACE_TYPE, in wdm.h or ntddk.h. (Not used by WDM"},{"entry":"drivers.)"},{"entry":"BusNumber"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"The system-assigned, driver-supplied, zero-based"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"number of the bus to which the device is connected. (Not"},{"entry":"used by WDM drivers.)"},{"entry":"PartialResourceList"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"A CM_PARTIAL_RESOURCE_LIST structure."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"TABLE4 describes the CM_PARTIAL_RESOURCE_LIST structure (set forth in TABLE3):",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"CM_PARTIAL_RESOURCE_LIST"},{"entry":"typedef struct _CM_PARTIAL_RESOURCE_LIST {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"USHORT Version;"]},{"entry":[{},"USHORT Revision;"]},{"entry":[{},"ULONG Count;"]},{"entry":[{},"CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["}","CM_PARTIAL_RESOURCE_LIST,"]},{"entry":[{},"*PCM_PARTIAL_RESOURCE_LIST;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"The CM_PARTIAL_RESOURCE_LIST structure specifies a"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"set of system hardware resources, of various types, assigned to"},{"entry":"a device. This structure is contained within a"},{"entry":"CM_FULL_RESOURCE_DESCRIPTOR structure."},{"entry":"Members"},{"entry":"Version"},{"entry":"The version number of this structure. This value should be"},{"entry":"1."},{"entry":"Revision"},{"entry":"The revision of this structure. This value should be 1."},{"entry":"Count"},{"entry":"The number of elements contained in the PartialDescriptors"},{"entry":"array. For WDM drivers, this value is always 1."},{"entry":"PartialDescriptors"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"An array of CM_PARTIAL_RESOURCE_DESCRIPTOR"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"structures."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Table 5 describes the CM_PARTIAL_RESOURCE_LIST descriptor (of TABLE 4):",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"CM_PARTIAL_RESOURCE_DESCRIPTOR"},{"entry":"typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UCHAR Type;"]},{"entry":[{},"UCHAR ShareDisposition;"]},{"entry":[{},"USHORT Flags;"]},{"entry":[{},"union {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PHYSICAL_ADDRESS Start;"]},{"entry":[{},"ULONG Length;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} Generic;"]},{"entry":[{},"struct {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PHYSICAL_ADDRESS Start;"]},{"entry":[{},"ULONG Length;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} Port;"]},{"entry":[{},"struct {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ULONG Level;"]},{"entry":[{},"ULONG Vector;"]},{"entry":[{},"ULONG Affinity;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} Interrupt;"]},{"entry":[{},"struct {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PHYSICAL_ADDRESS Start;"]},{"entry":[{},"ULONG Length;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} Memory;"]},{"entry":[{},"struct {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ULONG Channel;"]},{"entry":[{},"ULONG Port;"]},{"entry":[{},"ULONG Reserved1;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} Dma;"]},{"entry":[{},"struct {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ULONG Data[3];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} DevicePrivate;"]},{"entry":[{},"struct {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ULONG Start;"]},{"entry":[{},"ULONG Length;"]},{"entry":[{},"ULONG Reserved;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} BusNumber;"]},{"entry":[{},"struct {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ULONG DataSize;"]},{"entry":[{},"ULONG Reserved1;"]},{"entry":[{},"ULONG Reserved2;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} DeviceSpecificData;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} u;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["}","CM_PARTIAL_RESOURCE_DESCRIPTOR,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"*PCM_PARTIAL_RESOURCE_DESCRIPTOR;"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"The CM_PARTIAL_RESOURCE_DESCRIPTOR structure"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"specifies one or more system hardware resources, of a single type,"},{"entry":"assigned to a device. This structure is used to create an"},{"entry":"array within a CM_PARTIAL_RESOURCE_LIST structure."},{"entry":"Members"},{"entry":"Type"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Identifies the resource type. The constant value"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"specified for Type indicates which structure within the u"},{"entry":"union is valid, as indicated in the following table. (These"},{"entry":"flags are used within both CM_PARTIAL_RESOURCE_DESCRIPTOR"},{"entry":"and IO_RESOURCE_DESCRIPTOR structures, except where noted.)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Type Value","u Member Substructure"]},{"entry":[{},"CmResourceTypePort","u.Port"]},{"entry":[{},"CmResourceTypeInterrupt","u.Interrupt"]},{"entry":[{},"CmResourceTypeMemory","u.Memory"]},{"entry":[{},"CmResourceTypeDma","u.Dma"]},{"entry":[{},"CmResourceTypeDevicePrivate","u.DevicePrivate"]},{"entry":[{},"CmResourceTypeBusNumber","u.BusNumber"]},{"entry":[{},"CmResourceTypeDeviceSpecific","u.DeviceSpecificData"]},{"entry":[{},{},"(Not used within"]},{"entry":[{},{},"IO_RESOURCE"]},{"entry":[{},{},"DESCRIPTOR.)"]},{"entry":[{},"CmResourceTypePcCardConfig","u.DevicePrivate"]},{"entry":[{},"CmResourceTypeMfCardConfig","u.DevicePrivate"]},{"entry":[{},"CmResourceTypeConfigData","Reserved for system use."]},{"entry":[{},"CmResourceTypeNonArbitrated","Not used."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"In the first example in the busses section above, the Parameters.StartDevice.AllocatedResources for I\/O Device would contain a single CM_PARTIAL_RESOURCE_DESCRIPTOR with the following data:\n\n","Parameters.StartDevice.AllocatedResourcesTranslated contains the same resource, but from the point of view of the processor . In the first example, the CPU to PCI Bridge just passes cycles through without modifying them. So AllocatedResourcesTranslated contains the same values as AllocatedResources:\n\n","In the second example above, the Parameters.StartDevice.AllocatedResources for I\/O Device contains exactly the same thing, since from the point of view of the device, nothing is different:\n\n","Note however, that Parameters.StartDevice.AllocatedResourcesTranslated contains something very different, as the cycles that the processor must place on the bus to address the device are different from the cycles that the device will ultimately decode:\n\n","Prior to the present invention, in one implementation, translation was statically defined for an entire class of machine and was entirely handled by the HAL, more particularly, in the function HalTranslateBusAddress. In another implementation, the PnP Manager and the WDM bus drivers provide similar services with the WDM interface TRANSLATOR_INTERFACE. Even with this service, the HALs that existed implemented the bus drivers that the PnP Manager queried for this interface, i.e., the code was still in the HAL. TABLE6 describes the TRANSLATOR_INTERFACE:",{"@attributes":{"id":"p-0061","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/"},{"entry":"\/\/ The directions translation can take place in"},{"entry":"\/\/"},{"entry":"typedef enum _RESOURCE_TRANSLATION_DIRECTION {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TranslateChildToParent,"]},{"entry":[{},"TranslateParentToChild"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} RESOURCE_TRANSLATION_DIRECTION;"},{"entry":"\/\/"},{"entry":"\/\/ Translation functions"},{"entry":"\/\/"},{"entry":"typedef"},{"entry":"NTSTATUS"},{"entry":"(*PTRANSLATE_RESOURCE_HANDLER) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN PVOID Context,"]},{"entry":[{},"IN PCM_PARTIAL_RESOURCE_DESCRIPTOR Source,"]},{"entry":[{},"IN RESOURCE_TRANSLATION_DIRECTION Direction,"]},{"entry":[{},"IN ULONG AlternativesCount, OPTIONAL"]},{"entry":[{},"IN IO_RESOURCE_DESCRIPTOR Alternatives[ ], OPTIONAL"]},{"entry":[{},"IN PDEVICE_OBJECT PhysicalDeviceObject,"]},{"entry":[{},"OUT PCM_PARTIAL_RESOURCE_DESCRIPTOR Target"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":"typedef"},{"entry":"NTSTATUS"},{"entry":"(*PTRANSLATE_RESOURCE_REQUIREMENTS_HANDLER) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IN PVOID Context,"]},{"entry":[{},"IN PIO_RESOURCE_DESCRIPTOR Source,"]},{"entry":[{},"IN PDEVICE_OBJECT PhysicalDeviceObject,"]},{"entry":[{},"OUT PULONG TargetCount,"]},{"entry":[{},"OUT PIO_RESOURCE_DESCRIPTOR *Target"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":"\/\/"},{"entry":"\/\/ Translator Interface"},{"entry":"\/\/"},{"entry":"typedef struct _TRANSLATOR_INTERFACE {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"USHORT Size;"]},{"entry":[{},"USHORT Version;"]},{"entry":[{},"PVOID Context;"]},{"entry":[{},"PINTERFACE_REFERENCE InterfaceReference;"]},{"entry":[{},"PINTERFACE_DEREFERENCE InterfaceDereference;"]},{"entry":[{},"PTRANSLATE_RESOURCE_HANDLER TranslateResources;"]},{"entry":[{},"PTRANSLATE_RESOURCE_REQUIREMENTS_HANDLER"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"TranslateResourceRequirements;"},{"entry":"} TRANSLATOR_INTERFACE, *PTRANSLATOR_INTERFACE;"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"As described above, ACPI, among other things, allows the machine to provide a description of itself, packaged inside its own firmware. An ACPI compliant machine describes the CPU to PCI bridges using objects, one of which is represented in the namespace  of FIG. .","In accordance with one aspect of the present invention, the ACPI driver enumerates the CPU to PCI bridges that are described in the ACPI firmware, examining the ACPI _CRS object associated with each of these devices. As represented in the TABLE7 below, (taken from Section 6.4 of the ACPI 1.0 b specification), the _CRS object, which may be in one of the address space descriptors(Type 1, Large name 0x7), used to report resource usage in an address space (like memory and I\/O) via structures, including those in bytes numbered 10 through 25 that describe the ranges of I\/O and memory that pass through a CPU to PCI bridge:",{"@attributes":{"id":"p-0064","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 7"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Offset","Field Name","Definition"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Byte 0","DWORD Address Space","Value = 10000111B (Type = 1,"]},{"entry":[{},"Descriptor","Large item name = 0x7)"]},{"entry":["Byte 1","Length, bits[7:0]","Variable: Value = 23 (minimum)"]},{"entry":["Byte 2","Length, bits[15:8]","Variable: Value = 0 (minimum)"]},{"entry":["Byte 3","Resource Type","Indicates which type of"]},{"entry":[{},{},"resource this descriptor"]},{"entry":[{},{},"describes. Defined values"]},{"entry":[{},{},"are:"]},{"entry":[{},{},"0\u2003\u2003Memory range"]},{"entry":[{},{},"1\u2003\u2003I\/O range"]},{"entry":[{},{},"2\u2003\u2003Bus number range"]},{"entry":[{},{},"3-255\u2003\u2003Reserved"]},{"entry":["Byte 4","General Flags","Flags that are common to all"]},{"entry":[{},{},"resource types:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Bits[7:4] Reserved, must be 0"]},{"entry":[{},"Bit[3]\u2003\u2003_MAF:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"1: The specified max"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"address is fixed."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"0: The specified max"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"address is not fixed and"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"can be changed."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Bit[2]\u2003\u2003_MIF:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"1: The specified min"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"address is fixed."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"0: The specified min"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"address is not fixed and"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"can be changed."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Bit[1]\u2003\u2003_DEC:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"1: This bridge"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"subtractively decodes this"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"address (top level"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"bridges only)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"0: This bridge positively"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"decodes this address."]},{"entry":[{},"Bit[0]"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"1: This device consumes"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"this resource."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"0: This device produces"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"and consumes this resource."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Byte 5","Type Specific Flags","Flags that are specific to"]},{"entry":[{},{},"each resource type. The"]},{"entry":[{},{},"meaning of the flags in this"]},{"entry":[{},{},"field depends on the value of"]},{"entry":[{},{},"the Resource Type field (see"]},{"entry":[{},{},"above)"]},{"entry":["Byte 6","Address space","A set bit in this mask means"]},{"entry":[{},"granularity, _GRA","that this bit is decoded. All"]},{"entry":[{},"bits [7:0]","bits less significant than the"]},{"entry":[{},{},"most significant set bit must"]},{"entry":[{},{},"all be set. (i.e. The value"]},{"entry":[{},{},"of the full Address Space"]},{"entry":[{},{},"Granularity field (all 32"]},{"entry":[{},{},"bits) must be a number (2\u22121)"]},{"entry":["Byte 7","Address space"]},{"entry":[{},"granularity, _GRA"]},{"entry":[{},"bits [15:8]"]},{"entry":["Byte 8","Address space"]},{"entry":[{},"granularity, _GRA"]},{"entry":[{},"bits [23:16]"]},{"entry":["Byte 9","Address space"]},{"entry":[{},"granularity, _GRA"]},{"entry":[{},"bits [31:24]"]},{"entry":["Byte 10","Address range","For bridges that translate"]},{"entry":[{},"minimum, _MIN","addresses, this is the address"]},{"entry":[{},"bits [7:0]","space on the primary side of"]},{"entry":[{},{},"the bridge."]},{"entry":["Byte 11","Address range"]},{"entry":[{},"minimum, _MIN"]},{"entry":[{},"bits [15:8]"]},{"entry":["Byte 12","Address range"]},{"entry":[{},"minimum, _MIN"]},{"entry":[{},"bits [23:16]"]},{"entry":["Byte 13","Address range"]},{"entry":[{},"minimum, _MIN"]},{"entry":[{},"bits [31:24]"]},{"entry":["Byte 14","Address range","For bridges that translate"]},{"entry":[{},"maximum, _MAX","addresses, this is the address"]},{"entry":[{},"bits [7:0]","space on the primary side of"]},{"entry":[{},{},"the bridge."]},{"entry":["Byte 15","Address range"]},{"entry":[{},"maximum, _MAX"]},{"entry":[{},"bits [15:8]"]},{"entry":["Byte 16","Address range"]},{"entry":[{},"maximum, _MAX"]},{"entry":[{},"bits [23:16]"]},{"entry":["Byte 17","Address range"]},{"entry":[{},"maximum, _MAX"]},{"entry":[{},"bits [31:24]"]},{"entry":["Byte 18","Address Translation","For bridges that translate"]},{"entry":[{},"offset, _TRA","addresses across the bridge,"]},{"entry":[{},"bits [7:0]","this is the offset that must"]},{"entry":[{},{},"be added to the address on the"]},{"entry":[{},{},"primary side to obtain the"]},{"entry":[{},{},"address on the secondary side."]},{"entry":[{},{},"Non-bridge devices must list 0"]},{"entry":[{},{},"for all Address Translation"]},{"entry":[{},{},"offset bits."]},{"entry":["Byte 19","Address Translation"]},{"entry":[{},"offset, _TRA"]},{"entry":[{},"bits [15:8]"]},{"entry":["Byte 20","Address Translation"]},{"entry":[{},"offset, _TRA"]},{"entry":[{},"bits [23:16]"]},{"entry":["Byte 21","Address Translation"]},{"entry":[{},"offset, _TRA"]},{"entry":[{},"bits [31:24]"]},{"entry":["Byte 22","Address Length,"]},{"entry":[{},"_LEN,"]},{"entry":[{},"bits [7:0]"]},{"entry":["Byte 23","Address Length,"]},{"entry":[{},"_LEN,"]},{"entry":[{},"bits [15:8]"]},{"entry":["Byte 24","Address Length,"]},{"entry":[{},"_LEN,"]},{"entry":[{},"bits [23:16]"]},{"entry":["Byte 25","Address Length,"]},{"entry":[{},"_LEN,"]},{"entry":[{},"bits [31:24]"]},{"entry":["Byte 26","Resource Source","(Optional) Only present if"]},{"entry":[{},"Index","Resource Source (below) is"]},{"entry":[{},{},"present. This field gives an"]},{"entry":[{},{},"index to the specific resource"]},{"entry":[{},{},"descriptor that this device"]},{"entry":[{},{},"consumes from in the current"]},{"entry":[{},{},"resource template for the"]},{"entry":[{},{},"device object pointed to in"]},{"entry":[{},{},"Resource Source."]},{"entry":["String","Resource Source","(Optional) If present, the"]},{"entry":[{},{},"device that uses this"]},{"entry":[{},{},"descriptor consumes its"]},{"entry":[{},{},"resources from the resources"]},{"entry":[{},{},"produced by the named device"]},{"entry":[{},{},"object. If not present, the"]},{"entry":[{},{},"device consumes its resources"]},{"entry":[{},{},"out of a global pool."]},{"entry":[{},{},"If not present, the device"]},{"entry":[{},{},"consumes this resource from"]},{"entry":[{},{},"its hierarchical parent."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Note that other descriptors that can exist in a _CRS that contain resource translations. Further, note that the format for a _CRS is more complex than represented in TABLE7, as a minimal, non-empty _CRS contains a START and an END descriptor and at least one other descriptor, as described in Section 6.4 of the ACPI spec.","The invention implements the following two functions, which comply with the definition of TRANSLATOR INTERFACE above:","NTSTATUS","TranslateBridgeResources(\n\n","NTSTATUS","TranslateBridgeRequirements(\n\n","The ACPI driver  exports the functions to the PnP Manager by responding to the IRP_MN_QUERY_INTERFACE IRP. The Source arguments in the functions take device resources, like the I\/O range 0x7200 through 0x72ff used in the above examples, and convert them into new resources that the processor  can use to control the device. It does this by examining the _TRA fields in the ACPI structures (as described in TABLE7 above) and applying any implied translations to the WDM resource structures. These functions are thus used to configure a resource (e.g., device driver) at the time that the device driver is brought into service such that the resource will issue appropriate cycles that cause correspondingly appropriate I\/O cycles on the bus that contains the driver's device, i.e., the resource's output will be translated from a processor-relative point of view to an I\/O-bus-relative point of view.","Turning now to an explanation of the operation of the present invention with particular reference to the flow diagrams of ,  represents the general logic performed by the kernel (PnP driver ) at startup to locate resources requiring translators. To this end, at step , for a given resource, the PnP driver  sends an IRP_MN_QUERY_INTERFACE directed to the device. If the device is described in the ACPI namespace, then ACPI creates a device object and attaches it to the Physical Device Object (PDO) for the specific device, whereby the ACPI driver  will receive the IRP, and in response, determine whether the resource has an associated translator. The operation of the ACPI driver  to make this determination is described below with reference to FIG. . If no translation is found by the ACPI driver, step  branches to step  wherein no translation is needed, i.e., the raw (bus-relative) address equals the translated (processor-relative) address, in both directions. Note that at step  arbitration may take place (as generally described below) to determine where to locate such a device, and a start device IRP (IRP_MN_START_DEVICE) will be sent to such a driver at step . Further, note that there may be other translations further up the device tree that need to take place before the start can be sent.","If an associated translation is found, the ACPI driver  returns a table of translator functions to the PnP driver  (step ). The IRP_MN_QUERY_INTERFACE for a translator interface provides the information that will be used to perform the translation, e.g., the table of functions to call to obtain the translation or the translation information itself. For example, as represented in , the translator  is associated with the PCI bus driver . Note that if the initial translation fails, e.g., the, requested address is out of range, then the driver is not started via steps  and .","The process continues to step  where the PnP driver  performs an arbitration process to see where the device can fit within the system address space. To this end, the PnP driver  sends an IRP_MN_QUERY_RESOURCES IRP to the device driver to determine what resources it is presently consuming, and also an IRP_MN_QUERY_RESOURCE_REQUIREMENTS IRP to find out what the device needs. Note that as a general rule, a device will not be reprogrammed to a new location unless necessary. If the arbitration fails, e.g., because the requirements cannot be satisfied, step  branches to step  to bypass the starting of the device.","If arbitration is successful, step  is executed to call the translator (via the table of functions returned by the ACPI driver at step ) and ask for a translation, as also described below with respect to FIG. . If the translation succeeds, e.g., the value was in a range that could be translated, then step  is executed to start the device (IRP_MN_START_DEVICE). Note that there may be other translations further up the device tree that need to take place before the start can be sent.",{"@attributes":{"id":"p-0076","num":"0109"},"figref":["FIG. 8","FIG. 7"],"b":["84","88","800","84","90","802","88"]},"However, if appropriate translation information is found in the _CRS object, and if this IRP is the query IRP (step ), then the ACPI driver  packages the information into PnP IRP structures and returns the translation information to the PnP driver  at step . Note that the receipt of this information by the PnP driver  corresponds to step  of  as described above.","If instead at step  of  this is a translation request, (e.g., made via step  of , and not via a query interface IRP), then step  is further executed to attempt to perform the translation. Also, step  determines whether the type has changed from I\/O to memory or vice-versa, and if so, step  changes the type accordingly. Note that not all translations are I\/O to memory, as some translations are memory address to memory address types. The translation information including the (possibly) changed type are then returned to the PnP driver  via step . In this manner, the PnP driver  obtains the information it needs to configure the resource at the time that the resource is brought into service with the information that tells the resource what CPU cycles to issue in order to cause an appropriate I\/O cycle on the bus that contains the driver's device. Note that the translation may fail, in which event the PnP driver is informed and does not start the driver, as described above.","As can be readily appreciated, the interaction between the PnP driver  and the ACPI driver , along with the analysis of the machine description by the ACPI driver , enables the translation information to be dynamically obtained external to the HAL. Thus, manufactures may build machines with various resources having various translations occurring in their bus bridges without dependence on the HAL, enabling customized machines.","While the invention is susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific form or forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
