---
title: System and method for switching a data partition
abstract: A method of mapping data into a table includes identifying pointers of a source portion and target portion and switching the metadata pointers of the target portion to be those of the source portion. Upon switching the metadata pointers, the data of the source portion is mapped into the target portion of the table. The method of mapping exhibits the advantage of performing the mapping operation by moving metadata and not table content data. The method may be used on any portion of a database including files, tables, partitions, and indexes. In one embodiment, the switching of pointers includes copying the target portion metadata into temporary storage, copying source portion metadata into the target portion metadata, and copying metadata from the temporary storage into the source portion metadata.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07624120&OS=07624120&RS=07624120
owner: Microsoft Corporation
number: 07624120
owner_city: Redmond
owner_country: US
publication_date: 20040629
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","Overview"],"p":["This application claims benefit under 35 U.S.C. \u00a7 119(e) of provisional U.S. Pat. Ser. No. 60\/543,526, filed Feb. 11, 2004, entitled \u201cSystem and Method for Switching a Data Partition\u201d the disclosure of which is incorporated herein by reference.","This invention relates in general to the field of computer databases. More particularly, this invention relates to the use of partitions in a database structure.","Some databases can be viewed as being one or more tables. Typically, the table has one or more indexes to assist the user in finding information stored in the database. For example, if the database is a phone book, the main table may include a name, address, telephone number, and other useful contact information. One possible index on that table may be to reference names such that looking up a name may lead to a telephone number. Other possible indexes such as an index on the address or on the phone number itself, or other information are easily generated. Updates, such as a new telephone subscriber, are often entered into the database. However, the addition may take a significant amount of time based on the processing required to make a row or tuple level entry and consequently update the multiple indexes. The database itself may be partitioned according to some method, such as alphabetically, to produce multiple linked tables. Each of these tables have indexes and pages associated with each partition. An update to the data content of the database, or any row or column level operation, may require the update of the table, the associated indexes, and the pages as well. The update may well have a collateral ripple effect such that a relatively small change on the large database may take a long time to execute. The intensive processing effort it takes for extensive changes or other updates to the databases is undesirable because the processing effort may limit the availability of the database to other users.","One common problem with some databases is the update problem of discarding old data and the introduction of new data. Consider the case of a utility company that has a need to keep a rolling 90 day record of billing for its customers. In this case at the end of every month, the new billing charges should appear as recent charges and the oldest month of billing charges should be dropped or archived. This need for a \u201csliding window\u201d of billing data involves two time intensive updates where the database becomes unavailable for a length of time needed to add a new billing period and drop or archive an old period. Such changes are not insignificant as the database is changed for every customer the utility services. The time period to perform this change may increasing grow as the utility grows in subscription. Additionally, the table may be unavailable during this period of changes. As the time for execution of a rolling change increases, so does the unavailability of the data.","Thus, there is a need for a technique that can allow for an improvement in speed and a reduction in unavailability with respect to the administration of changes to a database. The present invention addresses the aforementioned needs and solves them with additional advantages as expressed herein.","The subject invention realizes a system and method of mapping data into a table with the advantage of moving metadata but not requiring data content movement. In one embodiment, the method includes identifying metadata pointers of a source portion and target portion and switching the metadata pointers of the target portion to be those of the source portion. The target portion is part of the table and the source portion optionally is part of the table or more typically, not part of the same table. Upon switching the metadata pointers, the data of the source portion is mapped to the target portion of the database. The target and source portions of the table can be either populated or blank to accommodate swapping in or swapping out data portions for the table. In one embodiment, the switching of pointers can typically copy the target portion metadata into temporary storage, copy the source portion metadata into the target portion metadata, and copy metadata from the temporary storage into the source portion metadata.","In one embodiment of the invention, a method of changing a portion of a table includes separating a portion of the table such that the separated portion may be accessed off-line from the database, making changes to the separated portion to generate a changed portion and then switching the changed portion back to the table by asserting metadata pointers for mapping the changed portion back to the table. According to an aspect of the invention, no data is required to be moved as the changed portion is rejoined with the table. A further aspect of the invention involves optionally performing a compatibility test before the switching operation as well as optionally locking the source and target portions before performing the switching and unlocking the portions after the switching.","The subject invention provides for switching metadata for a partition that facilitates an ability to speed up loading and removal of tuples or rows from tables. One resulting benefit of the invention is the ability to temporarily move a partition of a table \u201coutside\u201d of a database, perform desired operations, such as maintenance, and then re-join the partitioned table back with the database. In accordance with aspects of the invention, users of partitioned tables can introduce new data and remove old data from a range of partitioned tables very efficiently by switching a populated partition between two tables. No data is moved in this process because the switching occurs at the metadata level and not the data level. This makes the operation both scalable and fast.","According to an aspect of the invention, the switching of a partition can assist loading data into a new partition of an existing partitioned table with minimal disruption in data access in the remaining partitions, loading data into a new partition of an existing partitioned table with performance equal to loading the same data into a new empty table, deleting one or more portions of a partitioned table and minimally impacting access to the rest of the table, backing up a partition as a separate table and performing various maintenance operations on a per partition basis.","In one embodiment, a new table, or portion of a table, and related indexes may be constructed off line while the original, or main part of the database is being used on-line. When the new table and indexes is to be added to the main database, table and index pointers are switched in metadata and the resulting database can now access the new table and index data. In another embodiment, the new table may be a blank set of data which allows switching out an old table and indexes. Under the scenario where the combination of adding a new set of data and switching in a blank set of data occurs, it is an aspect of the invention that the operation of the invention does not actually move data, but only moves metadata, and a \u201csliding window\u201d can be achieved. However, each switch, either the addition of new data or the switching in of blank data may be performed separately according to the need of the database. It should be noted that the added or deleted portion of a table, as well as the main table, may be either a partitioned or non-partitioned table; the invention is scalable to accommodate both.","Some benefits of creating a new table portion off line from the main table is that it is generally easier to build a new table portion first off line than it is to slowly update an existing table. One advantage is that one can pre-sort data before building the new portion and that is more time efficient to build a new portion first and add the new portion to the main database using aspects of the invention. Additionally, the build need not affect the availability of the main table. Additionally, a rollback mechanism need not be employed when updating a table. Rollback mechanisms can be expensive in terms of memory use. However, using aspects of the invention, rollback memory may be saved and used for another purpose.","Exemplary Embodiments of the Invention",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","1","2","3","105","110","115","123","122","123"]},"Data structures, such as tables and indexes may have associated metadata that concerns the respective data structure. For example table metadata  may contain, among other things, pointers P, P, P for physical addresses of table partitions T, T, and T respectively. Likewise, metadata may exist for indexes on the tables. For example, index metadata  can include pointers for the indexes I, I and I of tables T, T, and T respectively.","According to an aspect of the invention, a switch partition can be defined as an operation by which data blocks can be virtually moved quickly and efficiently from a partition of one table to a partition of another table. In prior art technology, the actual data insertion from one partition into another may take minutes and even hours depending upon the size of the data in the partition. But with the switch partition aspect of the present invention, the whole operation of moving data from one table partition into another just takes in the order of seconds and this time is not dependent on the size of the data contained in the partition being moved. This is made possible because while switching partition the actual data is not touched but only the metadata of the partition containing the data is changed.","As implied in , each data object or structure within the table  has a description of the object in some form of metadata. Each of the objects in database like tables and indexes are represented by their metadata which is the information about these objects. Typical information stored in metadata for the table  or in metadata for an index  would be the information about columns, key columns of the index, columns on which the table or the index is partitioned and also physical pointers to the physical location  of the data of the table. According to an aspect of the invention, switching the partitions involves switching the actual physical pointers to these partitions as stored in metadata , . This operation is very fast as no actual data is moved from one physical location to another, yet after the switch is completed, the switched partitions would behave as if it is part of the new table.","If it is desired to add a new table partition to an existing table or a table to the database then the new partition or table may be generated off line and added via an aspect of the present invention. If it also desirable to archive a partition of a table, and simultaneously add a new table partition, an aspect of the present invention can accommodate these two activities. For example, a new table T () may be added to table , to accommodate a new month's worth of database records and an oldest month T () may be rolled out of the table and subsequently from the database for archival purposes. As shown in , the new table T () may be constructed off-line from the database  where table partitions T, T, and T are accessible to users. Note that metadata pointers for the table  and the index  point at the active table partitions T, T and T in the database . An aspect of the present invention allows swapping the pointers of table partitions T () and T () with the result shown in .",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 1"],"b":["100","1","105","4","130","120","2","3","4","1","2","3","125","2","3","4","4","1","105","100","4","100"]},"It should be noted that the example of  may be implemented such that T () and T() may be a table or any table partition. Either or both tables T and T may be populated with data or blank. Thus, the present invention can be used for introducing new data into a table, separating a portion of a table and a database for maintenance or archival purposes, or simultaneous swapping in and out of two partitions in a table. Partitions can also be mapped into other distinct tables.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3","b":["300","310","330","300","350","320"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4","b":["300","310","340","350","350","320","330","300","330","340"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5","b":["510","515","520","525"]},"A verification of the compatibility of the tables can optionally be performed (step ). The tables are preferably \u201ccompatible\u201d if they have compatible attributes such as the same columns and same indexes. It is noted that the compatibility test can vary among implementation and in some embodiments, can be skipped.","The table metadata is then switched (step ) according to aspects of the invention where the metadata pointers now bring the source table partition into the table and the target table partition is switched out. The switch operation swivels the pointers pointing to the real data locations so that the contents of the two partitions (or a table and a partition or two tables) is switched. As a final step, the two tables may be optionally unlocked (step ) to allow access to the tables.","The method of  facilitates the transfer of blocks of data quickly and efficiently. One of skill in the art may readily understand that the invention allows the assigning a table as a partition to an already-existing partitioned table. This implies that the single partition of a non-partitioned table (non-partitioned table only have one partition representing the whole table) can be switched into an already-existing partitioned table. The method of  allows the switching of a partition from one partitioned table to another. Here both tables participating in the switch operation are partitioned and the corresponding partitions of the two tables are switched as a result. The embodiment of the invention of the method of  may reassign a partition to form a single table. This implies that an existing partition of a partitioned table can be switched out to form a non-partitioned table containing a single partition.","A table or partition involved in a switch operation may have one of the two special indexes called either a clustered index or a heap index that contains all the data of the table. The act of switching a particular partition between two tables may be expressed as switching the corresponding partition between all the matching indexes of the table. This is explained in detail as follows.","Since there can be many indexes on Table T and also on Table T, before one can switch the partitions one preferably needs to find an index in Table T that matches with index on Table T. There are some criteria that will match two indexes on two different tables for the switch operation. One criteria is that the list of key columns of the two indexes preferably is the same. This means that the order and the number of key columns is preferably the same and also the type of the key column. Another criteria is that the set operator of non-key columns of the two indexes is preferably the same. This implies that the number and the type of the non-key columns in the two indexes should preferably match. The order of the non-key columns in the two indexes does not matter. Another criteria is that the partition number that needs to be switched between the two indexes preferably resides in the same filegroup.","As an example embodiment of the switch operation, the following function will switch Partition A of Table Twith Partition B of Table T:",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"SwitchTablePartition (Table T, Partition A, Table T, Partition B)"},{"entry":"{"},{"entry":"while (There are more indexes in Table T) \/\/ While Loop #1"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BOOLEAN FoundMatchingIndex = FALSE;"]},{"entry":[{},"Index TI 77  GetNextIndexFromTable (T)"]},{"entry":[{},"while (There are more indexes in Table T) \/\/ While Loop #2"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index TI \u2190 GetNextIndexFromTable (T)"]},{"entry":[{},"If ( ListOfKeys (TI) = ListOfKeys (TI)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"And SetOfNonKey (TI) = SetOfNonKey (TI)"]},{"entry":[{},"And FileGroup(TI) = FileGroup(TI))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"\/\/ We have found the matching index and can switch the"]},{"entry":[{},"corresponding"]},{"entry":[{},"\/\/partitions A of index TIwith partition B of index TI"]},{"entry":[{},"FoundMatchingIndex = TRUE;"]},{"entry":[{},"SwitchPartition (TI, A, TI, B) \/\/ this function is"]},{"entry":[{},"explained later"]},{"entry":[{},"Break; \/\/ Get out of While Loop #2"]},{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]},{"entry":[{},"\/\/ Keep looping to find the next matching index"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}\/\/ While Loop #2"]},{"entry":[{},"If (FoundMatchingIndex = FALSE)"]},{"entry":[{},"{"]},{"entry":[{},"ERROR; \/\/ Matching index could not be found."]},{"entry":[{},"BREAK; \/\/ Get out of While Loop #1"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}\/\/ While Loop #1"},{"entry":"} \/\/ End of SwitchTablePartition function"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"One embodiment which implements the SwitchPartition function that switches the partition A of an index I of table T with partition B of index I of another table T can preferably have metadata which may be changed. Some metadata changes can be physical properties like ROWLOCK, PAGELOCK, PADINDEX, FILLFACTOR of the partition to be switched, the owner of partition to be switched and the physical pointer to actual location of data contained in the partition to be switched.","In one embodiment, the metadata switch operation can be performed by copying the metadata information of partition A as explained above to a temporary storage place, copying the metadata information of partition B to Partition A, and then copying the metadata information of partition A from the temporary storage location to partition B.","In another embodiment, the following function will switch partition A of index Iwith partition B of index I",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"SwitchPartition (Index I, Partition A, Index I, Partition B)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Copy the metadata of index Iat a temporary location to be"]},{"entry":[{},"used later."]},{"entry":[{},"\/\/ Get the physical properties of Index Ilike ROWLOCK,"]},{"entry":[{},"PAGELOCK, \/\/PADINDEX,"]},{"entry":[{},"FILLFACTOR and store them in a temporary location."]},{"entry":[{},"TempProperties = PhyisicalProperties(I, A)"]},{"entry":[{},"\/\/ Get the Owner of Index Iand store it in a temporary location."]},{"entry":[{},"TempOwner = PhyisicalProperties(I, A)"]},{"entry":[{},"\/\/ Get the actual address of Index Iand store it in a temporary"]},{"entry":[{},"location."]},{"entry":[{},"TempAddress = PartitionAddress (I, A)"]},{"entry":[{},"\/\/ Now copy the metadata of index Ito index I. After this operation"]},{"entry":[{},"Partition B of\/\/index I"]},{"entry":[{},"will behave as if it is part of Index I."]},{"entry":[{},"PhyisicalProperties (I, A) = PhyisicalProperties(I, B)"]},{"entry":[{},"PartitionOwner (I, A) = PartitionOwner (I, B)"]},{"entry":[{},"PartitionAddress (I, A) = PartitionAddress (I, B)"]},{"entry":[{},"\/\/Now copy the metadata of index Ito index I. Note that the original"]},{"entry":[{},"metadata of\/\/index I"]},{"entry":[{},"was stored in a temporary location in the first step. After this"]},{"entry":[{},"operation \/\/Partition A index I"]},{"entry":[{},"will behave as if it is part of Index I."]},{"entry":[{},"PhyisicalProperties (I, B) = TempProperties"]},{"entry":[{},"PartitionOwner (I, B) = TempOwner"]},{"entry":[{},"PartitionAddress (I, B) = TempAddess"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"One embodiment of the present invention involves an extension of ALTER TABLE statement will switch a single partition of an existing table, or whole non-partitioned table, to a single partition of existing partitioned or non-partitioned table. According to an aspect of the invention, the ALTER TABLE SWITCH PARTITION supports both partitioned and non-partitioned tables. In one embodiment, execution of this statement does not involve any data movement; it is purely a metadata operation. However, in another embodiment, a combination of metadata movement and table data movement is foreseeable and thus are considered to fall within the scope of this invention. This gives an efficient alternative to inserting or deleting data in partitioned tables. The extension is shown below and syntactically is an alternative for the rest of the ALTER TABLE statement.",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"ALTER TABLE [database_name.[ owner1 ] . | owner1.] table_name1"},{"entry":"SWITCH"},{"entry":"[PARTITION <partition_number1>] TO [database_name.[owner2 ] ."},{"entry":"| owner2. ]"},{"entry":"table_name2 [PARTITION <partition_number2>]"},{"entry":"If table_name1 is partitioned, then the <partition_number1> may be"},{"entry":"specified."},{"entry":"If table_name1 is not partitioned, then the <partition_number1>"},{"entry":"is ignored and it may not need"},{"entry":"to be specified."},{"entry":"Similarly for table_name2, and <partition_number2>."},{"entry":"<partition_number1> and <partition_number2> are integer (tinyint,"},{"entry":"smallint, bigint or int)"},{"entry":"constant expressions. A constant expression is an expression that"},{"entry":"references constants, variables (including UDTs), UDFs, built-in"},{"entry":"functions, but no SQL expression. Typical examples of"},{"entry":"constant expressions in this context are constants and $partition."},{"entry":"<partition_function_name>"},{"entry":"(<argument>[, . . . n])."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"According to aspects of the present invention, two possible scenarios targeted by the ALTER TABLE SWITCH PARTITION extension are the loading of new data into a table and switch out data from a table. In the first scenario, a non-partitioned table can be created that can hold data eventually designated for the new partition. This new table may be populated along with corresponding indexes. One may then declare this table a partition of an existing partitioned table by switching it into the partitioned table. As a result of the switch operation, all data originally loaded into the non-partitioned table will appear in the partitioned table, and the non-partitioned table will be \u201cempty\u201d. In a second scenario, a non-partitioned table may be created that will eventually hold all data of one partition of an existing partitioned table. One can perform a switch operation from the partitioned table. All data originally residing in the switched partition of the partitioned table will now show up in the non-partitioned table, and the source partition of the partitioned table will now empty.","One of skill in the art can observe that the two above described scenarios may be combined to perform special \u201cper partition\u201d operations. For example, the scenarios may be used to re-index a partition. A general scheme to perform such operations is to switch a partition out, perform the desired operation on the table that holds the partition, and switch the partition back in.","As stated above, in one embodiment of the invention, no data is manipulated or touched. That is, there is no scan, rebuild index, verify by scanning data, or similar manipulation performed during the switch operation. The target partition may be empty. Both tables may be pre-defined and may exist, and a check on metadata may be performed. Other embodiments where data can be moved, changed, deleted or otherwise acted upon as a result of the switch are optional but are still within the scope of the invention.","Exemplary Computing Device",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 6"},"Although not required, embodiments of the invention can also be implemented via an operating system, for use by a developer of services for a device or object, and\/or included within application software. Software may be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that various embodiments of the invention may be practiced with other computer configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, appliances, lights, environmental control elements, minicomputers, mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network\/bus or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices and client nodes may in turn behave as server nodes.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6","b":["600","600","600","600"]},"With reference to , an exemplary system for implementing an embodiment of the invention includes a general purpose computing device in the form of a computer system . Components of computer system  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PC) bus (also known as Mezzanine bus).","Computer system  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer system  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, Random Access Memory (RAM), Read Only Memory (ROM), Electrically Erasable Programmable Read Only Memory (EEPROM), flash memory or other memory technology, Compact Disk Read Only Memory (CDROM), compact disc-rewritable (CDRW), digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer system . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer system , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer system  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM, CDRW, DVD, or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer system . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer system  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory (not shown). In addition to monitor , computer systems may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer system  may operate in a networked or distributed environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer system , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks\/buses. Such networking environments are commonplace in homes, offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer system  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer system  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer system , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web-enabled interface for applications and computing devices, making computing activities increasingly Web browser or network-oriented.","For example, MICROSOFT\u00ae's .NET\u2122 platform, available from Microsoft Corporation, includes servers, building-block services, such as Web-based data storage, and downloadable device software. While exemplary embodiments herein are described in connection with software residing on a computing device, one or more portions of an embodiment of the invention may also be implemented via an operating system, application programming interface (API) or a \u201cmiddle man\u201d object between any of a coprocessor, a display device and a requesting object, such that operation may be performed by, supported in or accessed via all of .NET\u2122's languages and services, and in other distributed computing frameworks as well.","As mentioned above, while exemplary embodiments of the invention have been described in connection with various computing devices and network architectures, the underlying concepts may be applied to any computing device or system in which it is desirable to implement a database partition switching scheme. Thus, the methods and systems described in connection with embodiments of the present invention may be applied to a variety of applications and devices. While exemplary programming languages, names and examples are chosen herein as representative of various choices, these languages, names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same, similar or equivalent systems and methods achieved by embodiments of the invention.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs of an embodiment of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","The methods and apparatus of an embodiment of the present invention may also be practiced via communications embodied in the form of program code that is transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via any other form of transmission, wherein, when the program code is received and loaded into and executed by a machine, such as an EPROM, a gate array, a programmable logic device (PLD), a client computer, a video recorder or the like, or a receiving machine having the signal processing capabilities as described in exemplary embodiments above becomes an apparatus for practicing the invention. When implemented on a general-purpose processor, the program code combines with the processor to provide a unique apparatus that operates to invoke the functionality of the discussed embodiments of the invention. Additionally, any storage techniques used in connection with an embodiment may invariably be a combination of hardware and software.","While aspects of the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. Furthermore, it should be emphasized that a variety of computer platforms, including handheld device operating systems and other application specific operating systems are contemplated, especially as the number of wireless networked devices continues to proliferate. Therefore, the claimed invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of various embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating embodiments of the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
