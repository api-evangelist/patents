---
title: Inhibiting automated extraction of data from network pages
abstract: Disclosed are various embodiments for inhibiting or preventing automated data extraction from network pages. A source for a network page having a document structure is obtained. An obfuscated network page is generated from the network page by altering the document structure to inhibit automated extraction of data. The obfuscated network page is configured to have a visual appearance that is the same as that of the network page when rendered by a client for display. The obfuscated network page is sent to the client in response to a request from the client for the network page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08904279&OS=08904279&RS=08904279
owner: Amazon Technologies, Inc.
number: 08904279
owner_city: Seattle
owner_country: US
publication_date: 20111207
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Many software applications are directed to extracting data from network pages in an automated fashion. Such applications may be referred to as scripts, robots, web scrapers, and so on. A web scraper may obtain content from a web site automatically and include the content on another web site, resell the content to others, analyze the content, and\/or perform other tasks. Web scrapers may impose a cost on web site owners by consuming resources, such as network bandwidth and processor time.","The present disclosure relates to inhibiting or preventing automated extraction of data from network sites. Network site owners and content owners may view web scraping as a serious problem. Owners may have little or no control over how the extracted content is used. The scrapers may profit from the extracted content, potentially to the detriment of the owners. The robots exclusion standard establishes a convention that allows network site owners to specify whether automated clients (i.e., robots) are allowed to access and\/or use certain network pages. However, the robots exclusion standard is purely advisory, and nothing enforces compliance. Therefore, malicious web scrapers are likely to ignore it.","Various embodiments of the present disclosure facilitate obfuscation of network pages so as to inhibit scraping of data from the network pages. Web scrapers rely on the document structure of a network page being relatively constant. As a non-limiting example, a description of a product offered for sale in a network page might be in a certain location of network page code and with a certain identifier. A web scraper may automatically examine multiple network pages having a common document structure to ascertain the location of the description in the document structure. Alternatively, a user may manually indicate the location of the description in the document structure to the web scraper, which may then operate in an automated manner. The web scrapers are no longer able to operate in an automated manner if frequent adjustments are made to the document structure of the network pages as will be described.","The changes made to obfuscate the network pages are implemented so as not to alter the visual appearance of the network pages when rendered by a client for display. Accordingly, the end-user experience remains unaffected for a majority of users. In one embodiment, the network page obfuscation may be disabled for visually impaired users so as not to impact screen reading software that relies upon the document structure of network pages. Companies and other entities that rely on scraping may be encouraged to move to a service-based architecture that facilitates access to content by way of an application programming interface (API). Through a service-based architecture, content access may be monitored and controlled, and acceptable use policies may be enforced. In the following discussion, a general description of the system and its components is provided, followed by a discussion of the operation of the same.","With reference to , shown is a networked environment  according to various embodiments. The networked environment  includes one or more computing devices  in data communication with one or more clients  and one or more automated clients  by way of a network . The network  includes, for example, the Internet, intranets, extranets, wide area networks (WANs), local area networks (LANs), wired networks, wireless networks, or other suitable networks, etc., or any combination of two or more such networks.","The computing device  may comprise, for example, a server computer or any other system providing computing capability. Alternatively, a plurality of computing devices  may be employed that are arranged, for example, in one or more server banks or computer banks or other arrangements. For example, a plurality of computing devices  together may comprise a cloud computing resource, a grid computing resource, and\/or any other distributed computing arrangement. Such computing devices  may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience, the computing device  is referred to herein in the singular. Even though the computing device  is referred to in the singular, it is understood that a plurality of computing devices  may be employed in the various arrangements as described above.","Various applications and\/or other functionality may be executed in the computing device  according to various embodiments. Also, various data is stored in a data store  that is accessible to the computing device . The data store  may be representative of a plurality of data stores  as can be appreciated. The data stored in the data store , for example, is associated with the operation of the various applications and\/or functional entities described below.","The components executed on the computing device , for example, include one or more network page generation applications , a network page obfuscation application , a network page server application , one or more content service providers , and other applications, services, processes, systems, engines, or functionality not discussed in detail herein. The network page generation applications  are executed to generate network pages  or portions thereof in response to page requests . As used herein, a network page  may correspond to a web page, mobile application page, or any other form of network content. For example, a network page  may include hypertext markup language (HTML), extensible markup language (XML), cascading style sheets (CSS), extensible style sheet language transformations (XSLT), JavaScript, VBScript, images, animations, videos, audio, and\/or other data. A network page  has a document structure, which, when rendered by a client  for display, has a certain visual appearance. The document structure may correspond to a document object model (DOM) having a plurality of elements.","The network page generation applications  may generate portions of network pages  or components that are used in assembling a network page . Different network page generation applications  may generate different network page components. For example, a network page component may correspond to a particular content item featured in a network page . In various embodiments, the network page generation applications  may be implemented using a service-oriented architecture. Further, one network page generation application  may generate a network page  or portion thereof based at least in part on network page components obtained from other network page generation applications . In one embodiment, network pages  may be static and stored in the data store .","The network page obfuscation application  is executed to transform the network pages  generated by the network page generation application  so as to generate obfuscated network pages . The obfuscated network pages  are versions of the network pages  which are adjusted or altered so as to inhibit automated extraction of data or content. Adjustments may be made to the document structure of the network pages  so that the document structure appears to change in a randomized manner to the automated clients . In other words, the automated clients  are unable to discern a predictable document structure from the obfuscated network pages  and are therefore unable to extract data. Meanwhile, the adjustments are implemented so as not to effect a change to the visual appearance of the network page  as rendered by a client .","Additionally, in some embodiments, the network page obfuscation application  may be configured to alter form elements in an obfuscated network page  to inhibit automated form submission. To this end, a token may be embedded into one or more modified form elements that may be correlated with a period of validity for the form. If a robot submits a form according to the token after the period of validity, the form submission may be rejected. This differs from challenge-response tests such as CAPTCHAs in that automated form submission here is inhibited on the backend. Consequently, the user experience is unaffected and may be undiminished by challenge-response tests which users may find annoying.","The network page server application  is executed to serve up obfuscated network pages  over the network  to clients  and automated clients  as network pages  in response to page requests . In various embodiments, the network page server application  may include a hypertext transfer protocol (HTTP) server. Non-limiting examples of commercially available HTTP servers include Apache\u00ae HTTP Server, Apache\u00ae Tomcat\u00ae, Microsoft\u00ae Internet Information Services (IIS), etc.","The content service providers  may provide an API for accessing various data included in the network pages  in a programmatic way. To this end, the content service providers  may obtain service requests  over the network  and respond with service responses . The service requests  and service responses  may comprise JavaScript object notation (JSON), yet another markup language (YAML), XML, and\/or other data formatting languages. The service requests  and service responses  may be sent by way of HTTP, simple object access protocol (SOAP), representational state transfer (REST), and\/or other data communication protocols. In one embodiment, the service request  includes an account identifier that facilitates access control and usage monitoring.","The data stored in the data store  includes, for example, network page obfuscation configuration data , network page data , bypass identification data , randomization data , user account data , form validity data , network pages , obfuscated network pages , service provider data , and potentially other data. The network page obfuscation configuration data  includes various parameters that control the operation of the network page obfuscation application . For example, it may be designated that some network pages  are to be obfuscated, while others are not to be obfuscated. Also, the network page obfuscation configuration data  may control the types of document structure adjustments that are employed as part of the obfuscation.","The network page data  includes various data used in the generation of network pages , including code, templates, text, content, images, video, audio, animations, and\/or other data. The bypass identification data  includes data used in the identification of clients  for which the obfuscation procedures should be bypassed. Such clients  may include clients  which employ screen reader applications, clients  which employ outdated web browsers, automated clients  which are permitted, and other clients  which provide a type of bypass identifier. In one embodiment, the bypass identification data  includes data to identify user agent strings from the page requests  which correspond to known screen reader applications. Also, it may be desirable to allow certain \u201cfriendly\u201d web robots (e.g., those associated with search engines, etc.) to bypass the obfuscation mechanism. Such automated clients  may be identified by user agent, source network address, and\/or other data. Finally, it may be desirable to bypass the obfuscation mechanism for testing and\/or other purposes by supplying a uniform resource locator (URL) parameter or other indicator.","The randomization data  may include stored randomizations which are used to adjust the document structure of a network page  for obfuscation. User account data  includes data relating to user accounts with the network site. The user account data  may include data that facilitates authentication of clients  and\/or automated clients  by way of username, password, security token, public key encryption, etc. The user account data  may include a setting that, when enabled, identifies the account as being associated with a bypass client  such as a screen reader client , etc. The user account data  may also include data that indicates privileges and\/or restrictions relating to access to content service providers .","The form validity data  includes data that may be used to determine whether a form submission is valid. For example, if a form in a network page  is modified by the network page obfuscation application , a form submission from the network page  may be determined to be valid or invalid according to certain temporal criteria. If, say, five hours or some other time period has elapsed since the network page  was generated, the form submission may be adjudged to be invalid. The form submission may be configured to include a token to indicate validity.","The network pages  and the obfuscated network pages  may be stored or cached by the data store . The service provider data  may include data describing access to content of the network pages  through the content service provider . The service provider data  may be employed to generate a notification or source code comment in the obfuscated network pages  to alert a reader that data scraping is being inhibited and to provide information regarding alternative approaches to accessing the content (e.g., by way of the APIs of the content service providers  and other approaches).","The client  is representative of a plurality of client devices that may be coupled to the network . The client  may comprise, for example, a processor-based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer, a laptop computer, personal digital assistants, cellular telephones, smartphones, set-top boxes, music players, web pads, tablet computer systems, game consoles, electronic book readers, or other devices with like capability. The client  may include a display . The display  may comprise, for example, one or more devices such as cathode ray tubes (CRTs), liquid crystal display (LCD) screens, gas plasma-based flat panel displays, LCD projectors, or other types of display devices, etc.","The client  may be configured to execute various applications such as a browser  and\/or other applications. The browser  may be executed in a client , for example, to originate page requests  and to access and render network pages , such as web pages, or other network content served up by the computing device  and\/or other servers, thereby generating a rendered network page  on the display . In some cases, the user of the client  may be visually impaired and the browser  may correspond to a screen reader client application. The client  may be configured to execute applications beyond browser  such as, for example, mobile applications, email applications, instant message applications, and\/or other applications.","The automated client  is representative of a plurality of client devices that may be coupled to the network . The automated client  may comprise, for example, a processor-based system such as a computer system. Such a computer system may be embodied in the form of a server computer, a cloud computing resource, a desktop computer, a laptop computer, personal digital assistants, cellular telephones, smartphones, set-top boxes, music players, web pads, tablet computer systems, game consoles, electronic book readers, or other devices with like capability.","The automated client  may be configured to execute various applications such as a scraper application  and\/or other applications. The scraper application  may be executed in the automated client  to obtain network pages  from the computing device  and to extract data from the network pages . The extracted data may be stored, analyzed, processed, and\/or forwarded to another system for processing. In some cases, the extracted data, or a derivative thereof, may be served up by another network site. The scraper application  may function by recognizing document structure patterns in various network pages  served up by the computing device . The automated client  may be configured to execute applications beyond the scraper application  such as, for example, browser applications, data processing applications, network page server applications, mobile applications, email applications, instant message applications, and\/or other applications.","Next, a general description of the operation of the various components of the networked environment  is provided. To begin, a network page request  is issued by a client  or an automated client  and sent to the computing device  by way of the network . The network page request  is provided to the network page obfuscation application . The network page obfuscation application  determines whether the network page  corresponding to the request should be obfuscated. If the network page request  pertains to a screen reader application executed in a client , it may be determined that the network page  is not to be obfuscated.","Also, the network page obfuscation application  may determine whether a new randomization is to be applied. In one embodiment, the network page obfuscation application  may be configured to apply a different randomization or obfuscation on each occasion that a network page  is requested. In another embodiment, the network page obfuscation application  may apply the same randomization or obfuscation for an interval or period of time, e.g., for an hour, week, or other time period. It may be desirable to minimize the period of time between randomizations to prevent adaptation by the scraper applications . However, it might not be desirable to change the randomization upon every request due to processing load, benefits associated with data caching, and\/or other reasons.","The network page obfuscation application  obtains the requested network page  and\/or network page components for the network page  from the network page generation application(s) . The network page obfuscation application  alters or adjusts the document structure of the network page  to generate an obfuscated network page  so as to inhibit the automated harvesting of data from the obfuscated network page . However, the alterations or adjustments are selected so as not to change the visual appearance of the rendered network page  in the client . Several non-limiting examples of adjustments or alterations will next be discussed.","The network page obfuscation application  may add one more elements to the document structure which have no discernable effect on the visual appearance of the rendered network page . For example, the network page obfuscation application  may add whitespace or comments to the source files of the network pages  which may affect parsing or interpretation by the scraper application . The network page obfuscation application  may add DIVs, SPANs, or other HTML elements which are configured (e.g., by CSS) to be hidden. The network page obfuscation application  may add single-pixel transparent images, empty tables, empty table rows, empty table cells, etc. to confuse the scraper application  as to the location of its desired data.","If a browser  renders such HTML elements as whitespace or additional lines, the network page obfuscation application  may replace paragraph breaks or line breaks in the network page  with the different HTML elements. Likewise, blank space in the rendered network page  may be replaced with transparent images, transparent text, and\/or other elements. Further, the network page obfuscation application  may rearrange the sequence of various HTML elements, which may be reconfigured to maintain the previous visual appearance. For example, a footer of a network page  may be moved from the end of an HTML file to the beginning of the HTML file with possible reconfiguration to tables, CSS, or other elements to effect the change without impacting the visual appearance of the footer.","The network page obfuscation application  may transform one HTML element into another HTML element, or groups of HTML elements into another HTML element or elements. For example, the network page obfuscation application  may replace a SPAN element with a DIV element, or vice versa. Thus, as a non-limiting example, <DIV id=\u201cID1\u2033>Important Text<\/DIV> may be transformed into <SPAN id=\u201dID2\u2033>Important Text<\/SPAN>. It is noted that DIVs and SPANs have different default characteristics that result in different visual appearances. That is to say, a DIV is considered to be a block HTML element, while a SPAN is considered to be an inline HTML element. However, by way of CSS, a SPAN may be modified to have the visual appearance of a DIV. If, for example, a scraper application  is seeking the \u201cImportant Text\u201d in the ninth DIV of an HTML file for the network page , the scraper application  may be unable to recognize the \u201cImportant Text\u201d once it is enclosed in the SPAN element. Similarly, P elements may be replaced with DIV elements, SPAN elements may be replaced with FONT elements, DIV-based layouts may be replaced with table-based layouts, and so forth.","The network page obfuscation application  may change the class attribute names or identifier names associated with various elements of the network page . For example, a product title in the original network page  may be enclosed within a DIV element having a descriptive identifier which may aid the scraper application : <DIV id=\u201cproductTitle\u201d>Great Product<\/DIV>. To confuse the scraper application , the network page obfuscation application  may replace the descriptive identifier with a randomized identifier such as \u201ceqnnoa32rfQ\u201d or \u201cproductTitle39204920.\u201d In some embodiments, the randomized identifier may be derived from the original identifier by way of a one-way hash function, an encryption function, or another approach. The original identifier may or may not be apparent from the randomized identifier. In many cases, all references to the original identifier, whether in HTML, CSS, JavaScript, etc., will be replaced with the same randomized identifier to preserve the original relationship among the elements.","It is noted that the example modifications described above with respect to the network page obfuscation application  do not require manual attention by the developers of the network pages . The developers can continue to create network pages  having descriptive attribute names and preferred layout mechanisms, and the network page obfuscation application  will operate automatically to generate the apparently random transformations in the obfuscated network pages .","In addition to confusing the scraper applications  due to repeated modifications to the same network page , the network page obfuscation application  may also modify similar network pages  in different ways. For example, network pages  corresponding to product detail pages may be generated by the network page generation application  according to a shared template from the network page data . A scraper application  may be configured to recognize data in the network pages  based at least in part on the commonality of the document structure among the network pages  resulting from the shared template. To counteract this, the network page obfuscation application  may obfuscate network pages  generated from the shared template in a different manner, especially when requested at or near the same time or during a randomization time interval.","The network page obfuscation application  may also be configured to modify forms embedded in network pages . For example, the order of the form input elements in the network page  may be randomized to confuse automated clients  while maintaining the same visual order in the rendered network page . Furthermore, the network page obfuscation application  may rename various form elements in an apparently randomized manner. The form elements, which may be HTML form elements or other form elements, may have names which are encoded for verification to prevent robots from auto-filling the forms. In one example, a text input field may have a name of \u201csearchQuery.\u201d The name may be modified to embed a token that identifies a temporal condition under which the form corresponding to the HTML form element may be accepted for processing. Thus, in this example, a current timestamp (e.g., 1320850304) may be concatenated with the previous name, thereby resulting in \u201csearchQuery1320850304.\u201d The name and token may be transformed, encrypted, or combined differently in other examples.","Based on the presence of the token, the network page generation application , or another application which evaluates the form data, is able to determine whether the form data was submitted soon after the obfuscated network page  was generated or at some time later. Robots are likely to cache the form from the obfuscated network page  and use it repeatedly and potentially much later. Thus, auto-filling may be restricted to a certain time window based upon the token. Alternatively, the token may be regenerated upon each page request  and may correspond to a single-use token that prevents repeated use of the same form name combinations. Tokens may also be associated with information related to the page request  to inhibit later auto-filling, e.g., internet protocol (IP) address of the client , session identifier, referring uniform resource identifier (URI), etc. Information about tokens and their detection and validity may be stored in the form validity data .","In one embodiment, the obfuscated network page  may include an embedded source code comment explaining an approach for automated access to content of the network page  via an application programming interface (API). The owner of the network site may wish to allow controlled access to content of the network site. Since the network page  is obfuscated to inhibit automated data extraction, the source code comment may be provided to encourage operators of automated clients  to obtain the content through the alternative approach. When the operator of the automated client  realizes that the automated scraping is no longer functioning, the operator may look at the source code of the network page  and see the comment. Accordingly, the operator may configure an application of the automated client  to initiate service requests  for content and to obtain service responses  with the content from one or more content service providers .","After the obfuscated network page  is generated, the network page server application  sends the obfuscated network page  to the client  (or to the automated client ) as the requested network page . In some embodiments, the obfuscated network page  may be stored or cached in the data store  for use in responding to future page requests .","In one embodiment, the network page generation application  may include the network page obfuscation application . For example, the source files in the network page data  corresponding to the network pages  may include one or more intermediate elements that each correspond to a respective consistent visual markup effect. The network page obfuscation application  may be configured to transform these intermediate elements into different HTML elements depending on the current randomization. As a non-limiting example, a source file may enclose a paragraph within customized XML such as \u201c<PARA>\u201d and \u201c<\/PARA>.\u201d According to one randomization, the output may be a DIV element configured with CSS in one way. According to another randomization, the output may be a SPAN element configured with CSS in another way. However, the output is configured to be rendered in the same way regardless of whether DIV or SPAN is used. Although customized XML is described in this example, customized functions in PHP, JavaServer Pages, Active Server Pages, etc. may instead be used.","Referring next to , shown is a flowchart that provides one example of the operation of a portion of the network page obfuscation application  according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network page obfuscation application  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the computing device  () according to one or more embodiments.","Beginning with box , the network page obfuscation application  obtains a page request  () for a network page  () from a client  () or an automated client  (). The page request , or a portion thereof, may be forwarded to the network page obfuscation application  by the network page server application  (). In box , the network page obfuscation application  determines whether the obfuscation procedure is to be bypassed. For example, the network page obfuscation application  may compare a user agent field of the page request  with known screen reader or friendly robot user agent strings in the bypass identification data  (). Alternatively, the network page obfuscation application  may determine whether the client  is authenticated as a screen reader or other bypass client  based at least in part on a setting in the user account data  ().","If the obfuscation procedure is to be bypassed, the network page obfuscation application  proceeds from box  to box . In box , the network page obfuscation application  generates or transfers the network page  without obfuscation. In box , the network page obfuscation application  sends the network page  to the client . The sending may be performed by way of the network page server application . Thereafter, the portion of the network page obfuscation application  ends.","If the network page obfuscation application  instead determines that the obfuscation procedure is not to be bypassed, the network page obfuscation application  proceeds from box  to box . In box , the network page obfuscation application  determines whether a new randomization is to be employed. For example, a particular randomization may be used for a certain time interval. If a new randomization is to be employed, the network page obfuscation application  proceeds to box  and generates an obfuscated network page  () using a new randomization. In box , the network page obfuscation application  may store the new randomization in the randomization data  () for future use. The network page obfuscation application  then proceeds to box .","If a new randomization is not to be employed, the network page obfuscation application  instead moves from box  to box . In box , the network page obfuscation application  loads a previous randomization from the randomization data . In box , the network page obfuscation application  generates the obfuscated network page  using the previously stored randomization. The network page obfuscation application  then transitions from box  to box . In box , the network page obfuscation application  sends the obfuscated network page  to the client  (or automated client , as the case may be) in place of the network page  that was requested. Thereafter, the portion of the network page obfuscation application  ends.","Moving on to , shown is a flowchart that provides one example of the operation of a portion of the network page generation application  according to various embodiments. Specifically, the flowchart of  relates to a portion of the network page generation application  that facilitates form submission and processing. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network page generation application  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the computing device  () according to one or more embodiments.","Beginning with box , the network page generation application  obtains a form submission from a client  (), or automated client  () as the case may be. In some embodiments, the form submission may come to the computing device  as a \u201cGET\u201d or \u201cPOST\u201d page request  () to the network page server application  (). In box , the network page generation application  identifies a randomization applied to the form. For example, a token indicating validity may be associated with the randomization. In box , the network page generation application  determines whether the form randomization is valid.","As non-limiting examples, a form randomization for a form submission may be valid only when submitted in a certain time frame after the form was generated, only when submitted once, only when submitted by a client  meeting certain criteria, etc. If the form randomization is not valid, the network page generation application  moves to box  and generates an error, which may be sent to the client  or automated client  by the network page server application . Thereafter, the portion of the network page generation application  ends.","If the form randomization is determined to be valid, the network page generation application  moves from box  to box . In box , the network page generation application  parses parameters from the form submission. In box , the network page generation application  processes form parameters to obtain a form result. In box , the network page generation application  generates a network page  () that relates to the form result. The network page  may then be sent to the client  by network page server application  or may be transformed first by the network page obfuscation application  (). Thereafter, the portion of the network page generation application  ends.","With reference to , shown is a schematic block diagram of the computing device  according to an embodiment of the present disclosure. The computing device  includes at least one processor circuit, for example, having a processor  and a memory , both of which are coupled to a local interface . To this end, the computing device  may comprise, for example, at least one server computer or like device. The local interface  may comprise, for example, a data bus with an accompanying address\/control bus or other bus structure as can be appreciated.","Stored in the memory  are both data and several components that are executable by the processor . In particular, stored in the memory  and executable by the processor  are the network page generation applications , the network page obfuscation application , the network page server application , the content service providers , and potentially other applications. Also stored in the memory  may be a data store  and other data. In addition, an operating system may be stored in the memory  and executable by the processor .","It is understood that there may be other applications that are stored in the memory  and are executable by the processor  as can be appreciated. Where any component discussed herein is implemented in the form of software, any one of a number of programming languages may be employed such as, for example, C, C++, C#, Objective C, Java\u00ae, JavaScript\u00ae, Perl, PHP, Visual Basic\u00ae, Python\u00ae, Ruby, Delphi\u00ae, Flash\u00ae, or other programming languages.","A number of software components are stored in the memory  and are executable by the processor . In this respect, the term \u201cexecutable\u201d means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be, for example, a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory  and run by the processor , source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory  and executed by the processor , or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory  to be executed by the processor , etc. An executable program may be stored in any portion or component of the memory  including, for example, random access memory (RAM), read-only memory (ROM), hard drive, solid-state drive, USB flash drive, memory card, optical disc such as compact disc (CD) or digital versatile disc (DVD), floppy disk, magnetic tape, or other memory components.","The memory  is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus, the memory  may comprise, for example, random access memory (RAM), read-only memory (ROM), hard disk drives, solid-state drives, USB flash drives, memory cards accessed via a memory card reader, floppy disks accessed via an associated floppy disk drive, optical discs accessed via an optical disc drive, magnetic tapes accessed via an appropriate tape drive, and\/or other memory components, or a combination of any two or more of these memory components. In addition, the RAM may comprise, for example, static random access memory (SRAM), dynamic random access memory (DRAM), or magnetic random access memory (MRAM) and other such devices. The ROM may comprise, for example, a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other like memory device.","Also, the processor  may represent multiple processors  and the memory  may represent multiple memories  that operate in parallel processing circuits, respectively. In such a case, the local interface  may be an appropriate network that facilitates communication between any two of the multiple processors , between any processor  and any of the memories , or between any two of the memories , etc. The local interface  may comprise additional systems designed to coordinate this communication, including, for example, performing load balancing. The processor  may be of electrical or of some other available construction.","Although the network page generation applications , the network page obfuscation application , the network page server application , the content service providers , and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above, as an alternative the same may also be embodied in dedicated hardware or a combination of software\/general purpose hardware and dedicated hardware. If embodied in dedicated hardware, each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include, but are not limited to, discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals, application specific integrated circuits having appropriate logic gates, or other components, etc. Such technologies are generally well known by those skilled in the art and, consequently, are not described in detail herein.","The flowcharts of  show the functionality and operation of an implementation of portions of the network page obfuscation application  and the network page generation application . If embodied in software, each block may represent a module, segment, or portion of code that comprises program instructions to implement the specified logical function(s). The program instructions may be embodied in the form of source code that comprises human-readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor  in a computer system or other system. The machine code may be converted from the source code, etc. If embodied in hardware, each block may represent a circuit or a number of interconnected circuits to implement the specified logical function(s).","Although the flowcharts of  show a specific order of execution, it is understood that the order of execution may differ from that which is depicted. For example, the order of execution of two or more blocks may be scrambled relative to the order shown. Also, two or more blocks shown in succession in  may be executed concurrently or with partial concurrence. Further, in some embodiments, one or more of the blocks shown in  may be skipped or omitted. In addition, any number of counters, state variables, warning semaphores, or messages might be added to the logical flow described herein, for purposes of enhanced utility, accounting, performance measurement, or providing troubleshooting aids, etc. It is understood that all such variations are within the scope of the present disclosure.","Also, any logic or application described herein, including the network page generation applications , the network page obfuscation application , the network page server application , and the content service providers , that comprises software or code can be embodied in any non-transitory computer-readable medium for use by or in connection with an instruction execution system such as, for example, a processor  in a computer system or other system. In this sense, the logic may comprise, for example, statements including instructions and declarations that can be fetched from the computer-readable medium and executed by the instruction execution system. In the context of the present disclosure, a \u201ccomputer-readable medium\u201d can be any medium that can contain, store, or maintain the logic or application described herein for use by or in connection with the instruction execution system.","The computer-readable medium can comprise any one of many physical media such as, for example, magnetic, optical, or semiconductor media. More specific examples of a suitable computer-readable medium would include, but are not limited to, magnetic tapes, magnetic floppy diskettes, magnetic hard drives, memory cards, solid-state drives, USB flash drives, or optical discs. Also, the computer-readable medium may be a random access memory (RAM) including, for example, static random access memory (SRAM) and dynamic random access memory (DRAM), or magnetic random access memory (MRAM). In addition, the computer-readable medium may be a read-only memory (ROM), a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other type of memory device.","It should be emphasized that the above-described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above-described embodiment(s) without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Many aspects of the present disclosure can be better understood with reference to the following drawings. The components in the drawings are not necessarily to scale, emphasis instead being placed upon clearly illustrating the principles of the disclosure. Moreover, in the drawings, like reference numerals designate corresponding parts throughout the several views.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 4","FIG. 1"]}]},"DETDESC":[{},{}]}
