---
title: Supporting hardware configuration changes in a UEFI firmware component
abstract: A method and apparatus for providing support for customization of a build configuration of a Unified Extensible Firmware Interface (UEFI) compatible component. The method includes modifying the build configuration of the UEFI compatible component to reflect modifications to a first file. A configuration parameter is received. The configuration parameter is used to create a configuration parameter symbol pointing to the first file. The first file is replaced with a second file, which includes modifications to the first file. The modifications support a functionality desired by a user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08484631&OS=08484631&RS=08484631
owner: Phoenix Technologies Ltd.
number: 08484631
owner_city: Milpitas
owner_country: US
publication_date: 20110330
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","DETAILED DESCRIPTION"],"p":["The disclosure herein relates to providing support for configuring hardware components in a unified extensible firmware interface (UEFI) firmware component.","The Unified Extensible Firmware Interface Forum (the \u201cUEFI Forum\u201d) is an alliance between several leading technology companies to modernize the booting process by use of a new protocol, the Unified Extensible Firmware Interface (UEFI) protocol. The UEFI Forum has published several versions of the UEFI protocol, the latest being version 2.3 on May 9, 2009.","Many microchip manufactures provide their customers with Customer Reference Boards (CRBs) as platforms to allow their customers to evaluate microchips (or \u201cchips\u201d) supplied by the chip manufacturer (also referred to as a \u201csilicon vendor\u201d or SV) for their specific applications. These manufacturer-provided platforms may include other hardware, software, or embedded firmware components, some of which may be tailored to a particular application of the customer. Customers of the microchip manufacturer are entitled to install the platform on one or more systems\/devices (e.g., servers, personal computers, etc.) in order to evaluate the chip for their application. The embedded firmware in CRBs (also known as platform firmware) may include one or more Unified Extensible Firmware Interface (UEFI) component, each performing as a programming interface between the operating system (OS) of the system and the embedded firmware of the platform. The UEFI component also performs the function of platform initialization.","The Platform Initialization Working Group (PIWG) of the UEFI Forum provides specifications that are intended to promote interoperability between firmware components provided by various entities, such as silicon vendors and firmware vendors. These specifications provide a common internal framework for developers of hardware components and platform drivers.","A challenge of using UEFI arises from the large amount of effort required to perform customization of UEFI builds to suit the requirements of Original Equipment Manufacturers (OEMs) and others. Such customization includes revising a firmware product from a first device design to a related or derived design; for example, a board laid-out by the OEM that may incorporate hardware changes with respect to a CRB produced by a Silicon Vendor (SV).","Specifically, customizing source code in UEFI drivers which provide support for hardware components is a challenging task. Prior solutions build UEFI drivers into binary components from a collection of source code files. A utility (such as a ProcessDsc utility) parses a build script file (which may have a .dsc file extension and be referred to as a DSC file) to determine the list of drivers to be built as part of the binary build process. The DSC file contains an entry for each UEFI driver that should be built. This entry defines the path to a file with the .inf file extension (called an INF file). The INF file is one file among a collection of source code and header files that comprise the driver. The INF file contains, among other things, the list of source code files to be built in order to create the driver as a binary component. Typically, code that would need to access a hardware component, such as an Embedded Controller (EC), is written directly into the source code of each file where the support is needed. However, writing the hardware support code directly into the source code may create customization difficulties. In particular, customization difficulty may arise when a customer board uses a different hardware component than was used in the original CRB. Various approaches to address this difficulty have been proposed, each approach having certain drawbacks. Therefore, there is the need for a simpler manner of customizing source code in UEFI drivers.","Approaches for providing support for customization of a build configuration of a UEFI component are disclosed. In the following description, numerous specific details are set forth such as examples of specific components, circuits, and processes to provide a thorough understanding of the present disclosure. Also, in the following description and for purposes of explanation, specific nomenclature is set forth to provide a thorough understanding of the present embodiments. However, it will be apparent to one skilled in the art that these specific details may not be required to practice the present embodiments. In other instances, well-known components are shown in block diagram form to avoid obscuring the present disclosure.","A method in accordance with the present embodiments includes customizing of a build configuration of a Unified Extensible Firmware Interface (UEFI) compatible component. The build configuration of the UEFI compatible component is modified to reflect modifications to a first file. A configuration parameter is received from the user. The configuration parameter is used to create a configuration parameter symbol pointing to the first file. The first file is replaced with a second file, which includes modifications to the first file. The modifications support a functionality desired by a user.","Embodiments described herein simplifies the customization efforts of users by providing support for customization of a build configuration by the users, for example, when using a Unified Extensible Firmware Interface (UEFI) source code written for an original CRB. Users may include customers of a Silicon Vendor (SV), such as Original Device Manufacturers (ODMS) or Original Equipment Manufacturers (OEMs) (herein, both referred to as \u201ccustomers\u201d). The customers may use the UEFI source code as a basis to support their design, which is based on the original CRB, but may differ from it substantially or trivially. For example, there may be hardware changes that are substantial in scope, but nonetheless, relatively limited in variety.","These changes may include hardware port configuration for connection to external electronic devices and\/or the use of memory of differing operational modes, types, sizes, performance, and so on, as compared with that on the CRB. In other situations, Input-Output (I\/O) routing, Interrupt Request (IRQ) and Advanced Programmable Interrupt Controller (APIC) Routing may be selected to suit local needs. Sometimes, the OEM board may use the same complex semiconductor chip (herein referred to as \u201cSilicon\u201d) but entirely different small silicon, from that on the CRB. The Silicon may comprise a chipset, for example, a core logic chipset including a graphic and memory controller chip (e.g., a Northbridge chip) and an I\/O controller chip (e.g., a Southbridge chip). Small silicon may include, non-complex silicon components, such as a Super I\/O device, an Embedded Controller (EC), and so on.","In some embodiments, the support for customization of the build configuration by the customers, as described herein, may be provided for changes corresponding to small silicon. The embodiments can utilize available build parameters from other sources to define a file path pointing to a file, which contains the source code that provides support for accessing small silicon features. The embodiments provide an easy method for customers to replace the default small silicon support source code with a custom code that supports the small silicon included in their customized customer board.","In some embodiments, the build configuration may be used to build a UEFI compatible program for driving a silicon component, such as small silicon. The first file may provide support for accessing features of the silicon component. A configuration parameter symbol may be included in a definition language file of a platform module that supports the silicon component. The configuration parameter symbol may comprise a path to a file which includes the driver name and the silicon component. The first file (i.e., default file) may include a source code file containing a set of default functions required by the platform module. The driver may call any of the functions of the set of functions to access the silicon component features. When building the driver into a binary component, the configuration parameter symbol may be used instead of the source code file name in the information (INF) file. The second file includes modifications in the first file according to changes in the silicon component features and overrides all of the default functions, as the second file will be used in the build instead of the first file.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","100","120","110","120","112"]},"Testing device  includes an operating system (OS) , firmware , and a UEFI compatible firmware component . Operating system  may comprise a set of related programs that control operations of testing device  and allocation of various resources (not shown in , for simplicity) to a host of applications on testing device .","Firmware  may include programs\/data structures that control internal\/external devices (such as CRB ), typically at low levels. Firmware  may reside in Programmable Logic Array (PLA), ROM, or flash memory. UEFI firmware component  functions as a programming interface between OS  and firmware  of testing device  and\/or the embedded firmware of the platforms such as CRB .","In some embodiments, CRB  may be installed in an interface slot of testing device  or otherwise be coupled to testing device , via an external interface, for example, a Universal Serial Bus (USB). In an embodiment, CRB  may include silicon chip , memory , and hardware  as depicted in . Silicon chip  may comprise or correspond to a silicon chip that is provided by the hardware component supplier for evaluation via use in CRB . A customer of hardware component supplier may wish to evaluate silicon chip  using evaluation system  to ensure that silicon chip  is suitable for the customer's needs, e.g., silicon chip  may need to perform in a specified manner to be suitable for use in an application of the customer. Memory  may include non-volatile memory such as Read Only Memory (ROM) or flash memory to include software\/firmware programs to support functions performed by CRB . Hardware  may include or correspond to various logics\/circuits to provide support such as power and communication interfaces for silicon chip  to be able to communicate with testing device . Small silicon  may comprise non-complex silicon components, such as a Super I\/O device, an Embedded Controller (EC), and so on.","The present embodiments simplify customization of source codes that are used in UEFI firmware component  for providing support for small silicon components, such as small silicon .",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","210","220","250","270","260","115","210","270","210","200","200","120","224","220","224"]},"Chipset  may include a graphic and memory controller , such as the known Northbridge chip, and an I\/O controller , such as the known Southbridge chip. Graphic and memory controller  is coupled to CPU  by a Front Side Bus (FSB) , and typically provides an interface between CPU  and the remainder of system . Graphic and memory controller  also provides an interface to memory  and, possibly, to other devices, such as an on-board graphics adapter (not shown in ). Memory  may comprise the main memory of system , and may include Random Access Memory (RAM), Dynamic RAM (DRAM), and the like.","I\/O controller  is coupled to graphic and memory controller  by a Direct Media Interface (DMI) . I\/O controller  may be responsible for controlling many of the input\/output functions of system , such as Universal Serial Bus (USB), sound adapters, Ethernet controllers, and one or more General Purpose Input\/Output (GPIO) port (not shown in ). A bus may comprise a Peripheral Component Interconnect (PCI) bus circuit , to which a disk storage subsystem  (hereinafter \u201cdisk \u201d) or other storage devices for storing an operating system and application programs may be attached. I\/O controller  may also provide a peripheral interface  to couple small silicon . I\/O controller  may also incorporate a timer circuit for generating timer circuit interrupts, typically at periodic intervals.","OS  of , which typically includes a set of programs that control operations of system  and allocation of various resources, may be stored on disk . One or more application programs may run on top of (i.e., be loaded and directed by) OS  and use computer resources made available through OS  to perform application specific tasks desired by a user of system . Disk  may also provide non-volatile storage for system . Although the description of computer-readable media contained herein refers to a mass storage device, such as a hard disk or Compact-Disc-ROM (CD-ROM) drive, it should be appreciated by those skilled in the art that computer-readable media can be any available media that can be accessed by system .","By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non-volatile, removable and non-removable media implemented in a method or technology for storage of information, such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, Erasable Programmable ROM (EPROM), Electrically EPROM (EEPROM), serial EEPROM, Flash memory or other solid state memory technology, CD-ROM, Digital Versatile Disk (DVD), or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices well-known in the art, or any other medium which can be used to store the desired information and which can be accessed by the computer.","A peripheral interface  may connect NV-memory  to I\/O controller . NV-memory  may include ROM or, more typically, a Non-Volatile Random Access Memory (NVRAM), such as flash memory, for storing UEFI platform firmware . The UEFI platform firmware , which is with the UEFI Specification, includes program code containing the basic routines that help in starting up system  and transferring information between elements within system .","System  may comprise any type of computing devices, including embedded computer systems, PCs, laptops, hand-held computers such as tablets, Personal Digital Assistants (PDAs), and the like. System  may not include all of the components shown in , instead, it may include other components that are not explicitly shown in , or may utilize a different architecture from that shown in .","In some embodiments, the UEFI platform firmware  includes a driver for a silicon component (e.g., small silicon ) in CRB . The driver for the small silicon may be included in a silicon module, which may provide UEFI compatible programs for driving the silicon component. A platform module including one or more UEFI compatible program may provide platform services to programs in the silicon module. The platform services may comprise a Pre-EFI module to Pre-EFI module Interface (PPI) and a Driver Execution Environment (DXE) interface for being used by the programs in the silicon module.","Small silicon  is often replaced on customer boards by different hardware components. Therefore, the original source code that provides proper support for CRB  of  must be modified to properly support the customer board. Current strategies for customization of small silicon support code may not be flexible when dealing with new versions of small silicon that may provide additional or different feature sets. As new versions of small silicon  become available for use by future chipset concept CRBs, previous libraries, protocols, and PPIs must be modified to provide functions to access these new feature.","For example, when a customization method of conditionalizing small silicon support code is used, the code that provides the support is simply either included or excluded during the build process. As a result, this method only supports disabling the original code, but does not provide a mechanism to easily add custom code. If the original small silicon component is removed without replacement from a customer board, this solution successfully disables the code that is no longer needed. However, if a customer board uses a different small silicon component from what was used on the original CRB, the original small silicon support source code must be modified to provide support for the newer small silicon. This can involve extensive work, since the original small silicon support code must be located and modified in all source files within all build components, which are often in many different functions, in many different files across many different drivers. Other customization solutions suffer from a variety of shortcomings, such as not being easily extensible, being prone to bugs, not allowing for easy deprecation, requiring external software components, and so on.","The present embodiments address the disadvantages described above, and provide an easy customization method for small silicon support code. The specific support required by small silicon is defined at a driver level with a default set of functions that provide the support, and can be overridden using configuration build parameters (hereinafter \u201cconfiguration parameter\u201d), as described with respect to  and  below.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 3A","FIG. 3A"],"b":["310","312","316"]},"For instance, a driver named PlatformSetup that uses small silicon (such as an Embedded Controller (EC)) support may have a symbol definition  including a configuration parameter symbol . Symbol definition  is included in the module definition (module.def) file  of the platform module . With this example, the default set of functions that provide the support required by PlatformSetup to access the EC are defined in the Ec.c file (i.e., the first file) located in the Dxe directory within the PlatformSetup driver's directory, as shown in symbol definition . All EC specific codes are implemented in the Ec.c file.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 3B","FIG. 3A"],"b":["320","320","1"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 3C","b":["330","316","330","316","330"]},"One benefit of the present embodiment is that the support files (e.g., EC.c) are small and focused on actual needs. Each driver (e.g., PlatformSetup) that requires support for a specific small silicon component (e.g., EC) defines its own configuration parameter used in the INF file  to include the source code file that provides that support. Therefore, these small silicon support files can be focused to include only the support functions required by the driver. This keeps the small silicon support files small and easy to write, because only a small subset of the small silicon's available features needs to be implemented and made available through the default support functions (included in source code file ). Therefore, unneeded feature-support functions are not implemented in the INF is file . As a result, all paths in the small silicon support files can be more easily tested to reduce bugs through exercising of all functions in source code file  of .","Typically, a customer board may contain a different small silicon component from the one on the CRB  of , and may need to override the source code (e.g., the first file, such as EC.c) that provides access to the physical hardware component (e.g., EC). With the present embodiments, the default small silicon support file is included in the build configuration, using a configuration parameter. Therefore, to override the first file (e.g., a default file) and replace it with a modified second file, the customer simply redefines the configuration parameter in a project definition (Project.def) file. The project definition file has a parametric build capability, so that each driver specified in the build configuration may have compile-time configuration parameters that may be specified in the build configuration, thus promoting customer control over various policies that may be embodied in each driver.","Because the entire path to the first file (e.g., small silicon support file) is defined by the configuration parameter, the first file can be copied to any location of customer's choice and modified or be replaced by a second file including some modifications to the first file. This allows the customer to place small silicon support files in project-specific folders making them specific to some projects, or place them in a common directory for use by many projects. Because each driver specifies its own configuration parameter to define the small silicon support file, the customer could choose to use the same small silicon support source file to support several different drivers by simply implementing all functions required by both drivers in a single small silicon support source file, or could use the same source file to support several different projects that all share the same small silicon on different boards.","Moreover, as the code that provides the small silicon support is built as part of the driver itself, there is no need for external components in addition to the driver. This reduces complexity because full-featured libraries and drivers are not required in order to provide support for all possible features. Because external drivers that implement small silicon Application Programming Interfaces (APIs) are not required, the complications required to properly synchronize dispatching of drivers is not a concern. In addition, future designs that require additional support simply extend the set of functions to include the additional support, and obsolete features can simply be removed from the file in newer version of small silicon.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 4","FIG. 3A","FIG. 3C"],"b":["400","400","410","420","316","430","440"]},"One or more embodiments described herein provide that methods, techniques, and actions performed by a computing device are performed programmatically, or as a computer-implemented method. Programmatically means through the use of code or computer-executable instructions. A programmatically performed step may or may not be automatic.","One or more embodiments described herein may be implemented using programmatic modules or components. A programmatic module or component may include a program, a subroutine, a portion of a program, or a software component or a hardware component capable of performing one or more stated tasks or functions. As used herein, a module or component can exist on a hardware component independently of other modules or components. Alternatively, a module or component can be a shared element or process of other modules, programs or machines.","Furthermore, one or more embodiments described herein may be implemented through the use of instructions that are executable by one or more processors. These instructions may be carried on a computer-readable medium, such as disk  of . Numerous machines, such as system  of , may provide examples of processing resources and computer-readable mediums, on which instructions for implementing present embodiments can be carried and\/or executed. In particular, the numerous machines include processor(s) and various forms of memory for holding data and instructions. Computers, terminals, network enabled devices (e.g. mobile devices, such as cell phones) are all examples of machines and devices that utilize processors, memory, and instructions stored on computer-readable mediums. Additionally, embodiments may be implemented in the form of computer-programs or a computer usable carrier medium capable of carrying such a program.","While the present embodiments have been described with reference to specific embodiments thereof, it will be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. For example, features or aspects of any of the embodiments may be applied, at least where practicable, in combination with any other of the embodiments or in place of counterpart features or aspects thereof. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the present embodiments are described herein by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements, as follows.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3C","FIG. 3A"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
