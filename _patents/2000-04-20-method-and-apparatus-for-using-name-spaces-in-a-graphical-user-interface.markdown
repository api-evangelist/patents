---
title: Method and apparatus for using name spaces in a graphical user interface
abstract: Embodiments of the invention provide a mechanism for using name spaces in graphical user interface (GUI) page definitions. A name space designation is assigned to each control mechanism that generates definitional statements for the GUI. In one embodiment, a page control is assigned a name space designation and assigns a name space designation for each of the controls that are used to generate the page. The name space designation can be used to uniquely identify a control. The name attributes including the name space designation may be sent to a client's browser where it may be incorporated by the browser into a name-value pair when transferring data back to the control.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06880129&OS=06880129&RS=06880129
owner: SilverStream Software, LLC
number: 06880129
owner_city: Billerica
owner_country: US
publication_date: 20000420
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of U.S. Provisional Application No. 60\/131,823, filed Apr. 29, 1999.","1. Field of the Invention","This invention relates to generating name spaces in a graphical user interface, and more specifically, to generating name spaces for a Web page definition.","2. Background Art","Computers and computer networks are used to exchange information in many fields such as media, commerce, and telecommunications, for example. Media information may include movies, video, audio CD's, radio, newspapers, books, magazines, and computer games. Commerce information includes electronic banking and bill payment, as well as electronic purchases. Voice telephone transmissions and video conferencing are examples of telecommunication information. The exchange of information between computers typically occurs between a \u201cserver application\u201d that provides information or services, and a \u201cclient application\u201d that receives the provided information and services. A client application executes on a client computer or client. A server application is executed on a server computer or server.","Client applications are able to communicate with server applications executing on the same computer system or on another computer system.","Client applications are able to communicate with server applications executing on the same computer system or on another computer system accessible via a network. Computers can be interconnected via a local area network (LAN), a wide area network (WAN) and\/or the Internet, for example. The Internet is an example of a world wide communications network comprised of various physical networks that interconnect a client computer with a server. The Internet offers a distributed environment wherein a client having access to the Internet can request information from a server that has access to the Internet regardless of the location of either the client or the server.","Before the advent of the Internet, users accessed server applications via a LAN or WAN, for example. The server was either a mainframe, minicomputer or other computer system. A user typically used either a terminal or a personal computer to display the information in a graphical user interface.","With the advent of the Internet, users of client systems are able to access server applications no matter how remotely the two are located as long as the client and server systems have access to the Internet. This has resulted in a desire to develop a computing architecture wherein a client can access a server application via the Internet. A client application referred to as a browser has been developed to generate a graphical user interface (\u201cGUI\u201d) screen (or page) of information using a page definition received from a server.","If a server application is able to generate page definitions that can be read by the browser to generate and display a GUI screen, the Internet can be used to send application data to the user. Further, if a server application can receive data input by a user into a GUI screen and sent by the browser, the Internet can be used to send application data to the server application that can process the data. Thus, it is beneficial to provide tools for the generation of page definitions and process of input data.","A page definition can comprise only text. Alternatively, program logic written in a scripting language can be incorporated into a page's definition. Further, a page definition can reference small programs referred to as applets that can be transmitted to the client for execution via the Internet. Thus, both data and programs can be transmitted to the client from a server.","When a client requests a page definition from the server, the server responds by sending the page definition to the client application. A page definition can be static or dynamic. Static page definitions can be used where, for example, there is no need to modify the definition at runtime. In an interactive application, however, one screen display is dependent on input received from the user in a previous screen. Thus, there is a need when \u201cporting\u201d interactive applications to the Internet to be able to generate dynamic page definitions.","One problem with generating dynamic page definitions has to do with the manner in which data is transmitted in the page definition. Data is transmitted in name-value pairs. The \u201cname\u201d portion of the name-value pair identifies a name for a value or piece of data. The following is an example of a name value pair:\n\n","The \u201cname\u201d portion (e.g., \u201cresponse\u201d) typically specifies a variable in server-side program code (e.g., gateway program) that is used to process the value (e.g., \u201cyes\u201d) in the name-value pair.","It may be desirable to use multiple program modules or instances of object-oriented objects, for example, to generate a page definition. It is possible that the different program modules used to generate a page definition may use the same name for different data. Thus, it is possible that a naming conflict can occur when generating a page definition thereby making it impossible to, for example, determine how to process the data.","The problems associated with generating a page definition can be better understood from a discussion of concepts associated with the Internet.","Internet Concepts","The Internet is comprised of many physical networks. For example, a client computer in a user's home can be connected via one or more networks that comprise the Internet to a server regardless of either's location to gain access to information that is resident on the server. A client's request can be transported via the Internet's networks to the server. A response from the server can be transmitted to the user via the Internet.","The Transport Control Protocol\/Internet Protocol (TCP\/IP) is the basic communications protocol for transmitting information over Internet. A communications protocol typically defines the format for a packet, or bundle, of data that is to be transmitted. A packet usually includes control information (e.g., destination, origin, packet length, etc.), the data to be transmitted and error detection and correction. Other communications protocols, such as Hypertext Transmission Protocol (HTTP) and File Transfer Protocol (FTP), are built on top of TCP\/IP. Resources (e.g., servers, services, program code, and files) are accessible via the Internet and are typically referenced by a universal resource locator (URL) that identifies the resource, the location of the resource and the protocol used to obtain the resource. A URL is a mechanism by which a resource can be identified in a request. HTTP and FTP are mechanisms by which the request is communicated.","One example of a resource that can be requested by specifying a URL is a Hypertext Markup Language (HTML) document that defines a page of graphic content including graphic user interface (GUI) elements. HTML is a structural language that is comprised of HTML elements that are nested within each other.","HTML statements are typically grouped in a text file or document. The HTML statements include certain strings of characters, called tags, that mark regions of the document and assign special meaning to them. These regions are called HTML elements. Each element has a name, or tag. An element can have attributes that specify properties of the element. Blocks or components include unordered list, text boxes, check boxes, radio buttons, for example. Each block has properties such as name, type, and value. The following provides an example of the structure of an HTML document:",{"@attributes":{"id":"P-d0e823","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<HTML>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<HEAD>"]},{"entry":[{},".... element(s) valid in the document head"]},{"entry":[{},"<\/HEAD>"]},{"entry":[{},"<BODY>"]},{"entry":[{},".... element(s) valid in the document body"]},{"entry":[{},"<\/BODY>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/HTML>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Each HTML element is delimited by the pair of characters \u201c<\u201d and \u201c>\u201d. The name of the HTML element is contained within the delimiting characters. The combination of the name and delimiting characters is referred to as a marker, or tag. Each element is identified by its marker. In most cases, each element has a start and ending marker that form an HTML block. The ending marker is identified by the inclusion of an another character, \u201c\/\u201d that follows the \u201c<\u201d character.","HTML is a hierarchical language. With the exception of the HTML element, all other elements are contained within another element's block. The HTML element encompasses the entire document. It identifies the enclosed text as an HTML document. The HEAD element is contained within the HTML element and includes information about the HTML document. The BODY element is contained within the HTML. The BODY element contains all of the text and other information to be displayed. Other HTML elements are described in an HTML reference manual.","An HTML document is transmitted via the HTTP communications protocol to a client that is running a software package referred to as a browser. A browser provides a GUI to display a page of information that is defined using HTML. The browser parses the HTML statements to generate and display the page's GUI elements in the browser's display area. The browser further provides a mechanism for the user to input information and\/or to submit a request which the browser forwards, via the Internet, to the appropriate Internet server using a communications protocol such as HTTP.","Name-Value Pairs","An HTML element definition can include attributes, or properties, associated with data that identify its name (e.g., via a name attribute) and its value (e.g., via a value attribute). For example, in an input element such as a text box, a value attribute can specify an initial value to be placed in the text box. The name attribute can also be used as a label for the contents of the text box when it is returned to the server. The mechanism that is typically used to return data to the server is referred to as a name-value pair.  provides an example of the transfer of data between a client and server using name-value pairs.","Server  includes HTTP server , common gateway interface (\u201cCGI\u201d)  and gateway program . Server  is connected to a client browser  via Internet . Browser  displays a GUI page  that includes GUI elements  and  that can be used, for example, to display and input text. Elements  and  can be generated from a page definition containing HTML statements, for example.","Segment  is a segment of the page definition that contains attribute segments  and . Attribute segments  and  contain name and value attributes that can be used to initially populate elements  and , respectively. The name attributes in attribute segments  and  associate names (i.e., \u201cfname\u201d and \u201clname\u201d) with values (i.e., \u201cJoseph\u201d and \u201cSmith\u201d).","Gateway program  is typically written in a scripting language and can be used to output attribute segments  and . Attribute segments  and  are transmitted to HTTP server  and transmitted via the Internet to client browser .","Upon receipt, client browser  parses the page definition containing attribute segments  and  and displays the associated values (e.g., \u201cJoseph\u201d and \u201cSmith\u201d) in elements  and  of display . The user can update the values contained in elements  and  and submit the updates to client browser . Client browser  sends the values contained in GUI elements  and  to server  via Internet . For example, client browser  can generate a POST request, for example, that includes request segment  that contains name-value pairs  and  in the form of the variable name specified in the \u201cname\u201d attribute, followed by an equals sign (\u201c=\u201d) followed by the value (e.g., name-value pairs  and ).","The POST request identifies gateway program  (using, for example, a universal resource locator or \u201cURL\u201d). When the request is received by HTTP server , the data (e.g., name-value pairs  and ) that is contained in the request is sent to gateway program  using Common Gateway Interface (\u201cCGI\u201d) . Gateway program  uses the variable name portion of name-value pairs  and  to identify the data. Gateway program  can, for example, include variables that correspond to the names in name-value pairs  and . The value portion in name-value pairs  and  can be assigned to these variables in gateway program  and\/or gateway program  can process the data returned from browser .","In this example, there is only one program (e.g., gateway program ) that is generating segment . However, it may be that multiple programs or program code are used to generate segment . It is further possible that the programs or program code that is\/are used to generate segment  may assign the same name to a name attribute. Thus, it is possible that a naming conflict can occur where the same name is used for two or more different values.","Internet Browser and Page Definitions","In addition to name conflicts, problems arise due to the different types of browsers available for use by clients. Browsers are available from various sources. Microsoft's Internet Explorer and Netscape's Navigator and Communicator are examples of browsers. A client can run one of these or another browser to interpret the HTML statements that define a page. Browsers do not interpret HTML statements in a uniform manner. For example, one browser may be able to process a particular HTML statement while another browser may not be able to interpret the HTML statement, or may interpret it differently.","To accommodate the various browsers, a page developer (i.e., a developer of a page definition) creates different definitions that contain different HTML. Where a page definition is created at runtime, the developer must write code to test for the browser type and then generate HTML for the particular browser type. For example, a developer must write conditional code to test for the browser type and output statements to write the HTML to a page definition file (i.e., a Web page definition) that can be processed by a particular browser type.","Page definitions that are used by a browser to generate a display may contain a portion that is common to more than one definition. For example, multiple page definitions may use the same header portions. Each page definition that contains the common portion must be modified to modify the common portion. It would be beneficial to be able make the modification(s) to a common portion once and have the modification(s) propagate to each page definition that uses the common portion.","Embodiments of the invention provide a mechanism for using name spaces in graphical user interface (GUI) page definitions. A name space designation is assigned to each control mechanism that generates definitional statements for the GUI and\/or receives input from a GUI. A dynamic name space designation mechanism ensures that a page's definitional statements generated by different control mechanisms do not conflict. Control mechanisms may generate definitional statements in a page definition that use a unique name to denote different entities.","In an embodiment of the invention, a control mechanism or control is implemented as an object-oriented object. The object-oriented object can be defined using the Java programming language, for example. In an embodiment of the invention, the object is a Java bean. In a design environment, the beans' appearance and behavior can be customized by a GUI or application developer. In an embodiment of the invention, a design tool is used to design a page, screen or other display. When a page design is finalized, a page object class definition is compiled and a class file is generated. Other controls defined for the page are serialized and uploaded to the server, along with any HTML that is specified at design time, to the server. A page designer can therefore generate a page control, serialized controls, and HTML in an embodiment of the invention. In one or more embodiments of the invention, the designer is executed on a client computer and the page designer (e.g., a page control, serialized controls and\/or HTML) are uploaded to a server computer.","At runtime, a page control is assigned a name space designation and assigns a name space designation for each of the controls that are used to generate the page in an embodiment of the invention. A control may contain other controls. In this case, the name space designation of the control is included in each contained control's name space designation.","The name space designation can be used to uniquely identify a control. Each control uses its name space designation when generating name attributes that are included definitional statements for a Web page GUI element, for example. In one or more embodiments of the invention, the name attribute may be used as a data label and include the name space designation. As part of a data label, for example, a name space designation may be used to identify the source of the data associated with the data label. For example, a data label that contains a name space designation may be associated with attributes contained in a page definition (e.g., an HTML page definition) that is sent to a client's browser. If an attribute is returned by the browser, the data label containing the name space designation becomes part of the name-value pair used to transfer the attribute. The name attribute is sent to the browser where it may be incorporated by the browser into a name-value pair when transferring data back to the control.","Since the name portion of a name-value pair (e.g., the label) includes the name space designation of the control that generated the label, the name space designation can be used to identify the control to which the data is to be sent. In an embodiment of the invention, the page control processes each of the name-value pairs by identifying the appropriate control using the name space designation in the name-value pair, and sending the name-value pair to the identified control.","A method and apparatus for using name spaces in a graphical user interface is described. In the following description, numerous specific details are set forth in order to provide a more thorough description of the present invention. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In other instances, well-known features have not been described in detail so as not to obscure the invention.","In an embodiment of the invention, components of a page are modeled as control mechanisms. According to an embodiment of the invention, a control mechanism is implemented as program code such as an object-oriented object. The control mechanism is capable of generating some or all of a GUI definition (e.g., HTML statements that define a Web page). A page design environment can contain representations of control mechanisms that can be included in a page definition. For example, a palette can contain control mechanisms that may be dragged into a graphical representation of a page in the page design environment. A graphical representation of the GUI element associated with the control mechanism is displayed in the page, for example. The properties and behavior of the control mechanism may be modified in the page design environment.","In an embodiment of the invention, a control mechanism, or control, is implemented as a Java bean that may have methods, events and properties. An event is a mechanism for propagating state change notifications between a source object and target, listener objects.","The control mechanism, or control, may generate HTML, or other definition. A different definition may be generated to accommodate differences in capabilities of each browser. There is no need for a Web page designer to take into account different browser types, for example. Since the HTML generation program code is embedded in the control, browser differences can be handled by the control such that it is transparent to the page designer.","Controls are available for different GUI elements (e.g., text\/input boxes or elements, radio buttons, checkbox, text block, list, etc.). In addition, a page control is associated with a Web page. In an embodiment of the invention, a page design process generates a page definition that may specify a page control definition, pre-defined HTML, and controls that are associated with GUI elements of the page.","A page that is incorporated into another page is referred to as a subpage. A subpage has an associated page control (referred to as a subpage control) and none or more controls that generate HTML. The same subpage may be used in more than one page. Therefore, a subpage's definition can be modified once and the changes are reflected in each occurrence of the subpage in another page. In addition to typical GUI elements, embodiments of the invention include HTML editing and container controls. An HTML editing control provides a mechanism for displaying rich content (e.g., database field data) in a Web page. A control that can contain other controls is referred to as a container control. For example, tab-control, data-view and layout region are examples of container controls.","A dynamic name assignment mechanism is used to generate a unique name space designation for a control such that there are no conflicts between instances of the same controls. For example, assume that a subpage that contains a \u201cText\u201d control is contained within a page that also contains a \u201cText\u201d control. A unique name space designation can be assigned to each \u201cText\u201d control to differentiate between them. Otherwise, the HTML code that is generated by the two \u201cText\u201d controls is merged into a Web page definition and may contain two name attributes generated by each \u201cText\u201d instance with the same name. Thus, it will be impossible to determine from the name-value pairs returned by a browser which data value is meant for which \u201cText\u201d control. A unique name space designation assigned to each \u201cText\u201d control is used in naming the attributes such that the names that are generated by each control are unique.","Using embodiments of the invention, a unique name space designation is assigned to each \u201cText\u201d control. The \u201cText\u201d control may use its name space designation to formulate labels for data. In HTML, the labels are specified using a name attribute, for example. A name space designation followed by a \u201c.\u201d is appended to the front of the label that is generated by each \u201cText\u201d control, for example.","The name space designation may also be used to distinguish between the two instances of the \u201cText\u201d control. Since a unique name space designation is associated with a control it can be used to identify the control. As is described below, the name space designation may be used to process events such as a data modification event and\/or a mouse event, for example.",{"@attributes":{"id":"P-00060","num":"00060"},"figref":["FIGS. 4A-4B","FIG. 4A"],"b":["406","410","430","402","408","408","432","408","408","408","408","432","408","408","432","416","418","440","422"]},"Box  contains an excerpt from the definitional statements generated by controls A and B. Segment  contains name and value attributes generated by control A for GUI element . Segment  contains name and value attributes generated by control B for GUI element . Segment  contains name and value attributes for GUI element . As discussed below, an attribute (e.g., the name attribute) contains a data label that includes a name space designation. The value attributes of segment  and  specify a value that can be used by browser  as an initial value for GUI elements  and , for example. The value attribute in segment  may be displayed as the displayed label for GUI element  (e.g., as a button label).","The labels that are generated by controls A, B and  include their name space designations. For example, given a name space designation of \u201cnS1\u201d, control A generates the label \u201cnS1.name\u201d that consists of the name space designation followed by a \u201c.\u201d followed by the remaining portion of the label (i.e. \u201cname\u201d). Similarly, control B uses its name space designation, \u201cnS2\u201d, in combination with the \u201cname\u201d label to generate a label for its name attribute. Control  uses its name space designation, \u201cnS3\u201d, in combination with the \u201cname\u201d label to generate a label for its name attribute. Without the name space designation, controls A, B and  generate the same label (i.e., \u201cname\u201d).","On client , browser  uses the definitional statements to generate GUI elements ,  and . GUI element  is used to submit the contents of display . When GUI element  is selected (e.g., with a mouse button click), the contents of GUI elements  and  are transmitted to server  (e.g., the user initiates a submit operation). Browser  transmits the data associated with GUI elements ,  and  to server  using name-value pairs. Box  contains an example of name-value pairs ,  and  that are generated by browser  for GUI elements ,  and .","The name portion of the name-value pairs ,  and  includes the label generated by controls A, B and , which includes the name space designations (e.g., \u201cnS1\u201d, \u201cnS2\u201d and \u201cnS3\u201d). Name-value pairs ,  and  are transmitted to server . The labels in the name-value pairs ,  and  can be used to direct name-value pairs ,  and  to the appropriate controls (e.g., controls A, B and , respectively) for processing the data.","As is discussed below, name-value pairs ,  and  may be transmitted as events to controls ,  and , respectively, in one or more embodiments of the invention.","To provide a better understanding of using name spaces in a graphical user interface, an overview of object-oriented programming, the Java programming language and program execution are provided below.","Object-Oriented Programming","Object-oriented programming is a method of creating computer programs by combining certain fundamental building blocks, and creating relationships among and between the building blocks. The building blocks in object-oriented programming systems are called \u201cobjects.\u201d An object is a programming unit that groups together a data structure (one or more instance variables) and the operations (methods) that can use or affect that data. Thus, an object consists of data and one or more operations or procedures that can be performed on that data. The joining of data and operations into a unitary building block is called \u201cencapsulation.\u201d","An object can be instructed to perform one of its methods when it receives a \u201cmessage.\u201d A message is a command or instruction sent to the object to execute a certain method. A message consists of a method selection (e.g., method name) and a plurality of arguments. A message tells the receiving object what operations to perform.","One advantage of object-oriented programming is the way in which methods are invoked. When a message is sent to an object, it is not necessary for the message to instruct the object how to perform a certain method. It is only necessary to request that the object execute the method. This greatly simplifies program development.","Object-oriented programming languages are predominantly based on a \u201cclass\u201d scheme. The class-based object-oriented programming scheme is generally described in Lieberman, \u201cUsing Prototypical Objects to Implement Shared Behavior in Object-Oriented Systems,\u201d OOPSLA 86 Proceedings, September 1986, pp. 214-223.","A class defines a type of object that typically includes both variables and methods for the class. An object class is used to create a particular instance of an object. An instance of an object class includes the variables and methods defined for the class. Multiple instances of the same class can be created from an object class. Each instance that is created from the object class is said to be of the same type or class.","To illustrate, an employee object class can include \u201cname\u201d and \u201csalary\u201d instance variables and a \u201cset_salary\u201d method. Instances of the employee object class can be created, or instantiated for each employee in an organization. Each object instance is said to be of type \u201cemployee.\u201d Each employee object instance includes \u201cname\u201d and \u201csalary\u201d instance variables and the \u201cset_salary\u201d method. The values associated with the \u201cname\u201d and \u201csalary\u201d variables in each employee object instance contain the name and salary of an employee in the organization. A message can be sent to an employee's employee object instance to invoke the \u201cset_salary\u201d method to modify the employee's salary (i.e., the value associated with the \u201csalary\u201d variable in the employee's employee object).","A hierarchy of classes can be defined such that an object class definition has one or more subclasses. A subclass inherits its parent's (and grandparent's etc.) definition. Each subclass in the hierarchy may add to or modify the behavior specified by its parent class. Some object-oriented programming languages support multiple inheritance where a subclass may inherit a class definition from more than one parent class. Other programming languages support only single inheritance, where a subclass is limited to inheriting the class definition of only one parent class. The Java programming language also provides a mechanism known as an \u201cinterface\u201d which comprises a set of constant and abstract method declarations. An object class can implement the abstract methods defined in an interface. Both single and multiple inheritance are available to an interface. That is, an interface can inherit an interface definition from more than one parent interface.","An object is a generic term that is used in the object-oriented programming environment to refer to a module that contains related code and variables. A software application can be written using an object-oriented programming language whereby the program's functionality is implemented using objects.","Java Programming Language and Program Execution","Java is an object-oriented programming language with each program comprising one or more object classes and interfaces. Unlike many programming languages in which a program is compiled into machine-dependent, executable program code, classes written in the Java programming language are compiled into machine independent bytecode class files. Each class contains code and data in a platform-independent format called the class file format. A bytecode includes a code that identifies an instruction (an opcode) and none or more operands to be used in executing the instruction. The computer system acting as the execution vehicle contains a program called a virtual machine, which is responsible for executing the code (i.e., bytecode) in Java programming language class files.","Applications may be designed as standalone Java applications, or as Java \u201capplets\u201d which are identified by an applet tag in an HTML (Hypertext Markup Language) document, and loaded by a browser application. The class files associated with an application or applet may be stored on the local computing system, or on a server accessible over a network. Each Java programming language class file is loaded into the Java virtual machine, as needed, by the \u201cclass loader.\u201d","To provide a client with access to class files from a server on a network, a web server application is executed on the server to respond to HTTP (Hypertext Transport Protocol) requests containing URLs (Universal Resource Locators) to HTML documents, also referred to as \u201cweb pages.\u201d When a browser application executing on a client platform receives an HTML document (e.g., as a result of requesting an HTML document by forwarding a URL to the web server), the browser application parses the HTML and automatically initiates the download of the specified bytecode class files when it encounters an applet tag in the HTML document.","The classes of a Java applet are loaded on demand from the network (stored on a server), or from a local file system, when first referenced during the Java applet's execution. The virtual machine locates and loads each class file, parses the class file format, allocates memory for the class's various components, and links the class with other already loaded classes. This process makes the code in the class readily executable by the virtual machine. Native code, e.g., in the form of a dynamic linked library (DLL)  is loaded when a Java programming language class file containing the associated native method is instantiated within the virtual machine.",{"@attributes":{"id":"P-00081","num":"00081"},"figref":"FIG. 2","b":["200","200","201","200","202","202","202"]},"The runtime environment contains a Java virtual machine (JVM)  which is able to execute bytecode class files and execute native operating system (\u201cO\/S\u201d) calls to operating system  when necessary during execution. Java virtual machine  provides a level of abstraction between the machine independence of the bytecode classes and the machine-dependent instruction set of the underlying computer hardware , as well as the platform-dependent calls of operating system .","Class loader and bytecode verifier (\u201cclass loader\u201d)  is responsible for loading bytecode class files  and supporting class libraries  written using the Java programming language into Java virtual machine  as needed. Class loader  also verifies the bytecodes of each class file to maintain proper execution and enforcement of security rules. Within the context of runtime system , either an interpreter  executes the bytecodes directly, or a \u201cjust-in-time\u201d (JIT) compiler  translates the bytecodes into machine code, so that they can be executed by the processor (or processors) in hardware .","Interpreter  reads, interprets and executes a bytecode instruction before continuing on to the next instruction. JIT compiler  can translate multiple bytecode instructions into machine code that are then executed. Compiling the bytecodes prior to execution results in faster execution. If, for example, the same bytecode instruction is executed multiple times in a program's execution, it must be interpreted each time it is executed using interpreter . If JIT compiler  is used to compile the program, the bytecode instruction may be translated once regardless of the number of times it is executed in the program. Further, if the compilation (i.e., output of JIT compiler ) is retained, there is no need to translate each instruction during program execution.","The runtime system  of virtual machine  supports a general stack architecture. The manner in which this general stack architecture is supported by the underlying hardware  is determined by the particular virtual machine implementation, and reflected in the way the bytecodes are interpreted or JIT-compiled. Other elements of the runtime system include thread management (e.g., scheduling) and garbage collection mechanisms.","Embodiment of Computer Execution Environment (Hardware)","An embodiment of the invention can be implemented as computer software in the form of computer readable code executed on a general purpose computer such as computer  illustrated in , or in the form of bytecode class files executable within a Java runtime environment running on such a computer. A keyboard  and mouse  are coupled to a bi-directional system bus . The keyboard and mouse are for introducing user input to the computer system and communicating that user input to processor . Other suitable input devices may be used in addition to, or in place of, the mouse  and keyboard . I\/O (input\/output) unit  coupled to bi-directional system bus  represents such I\/O elements as a printer, A\/V (audio\/video) I\/O, etc.","Computer  includes a video memory , main memory  and mass storage , all coupled to bi-directional system bus  along with keyboard , mouse  and processor . The mass storage  may include both fixed and removable media, such as magnetic, optical or magnetic optical storage systems or any other available mass storage technology. Bus  may contain, for example, thirty-two address lines for addressing video memory  or main memory . The system bus  also includes, for example, a 32-bit data bus for transferring data between and among the components, such as processor , main memory , video memory  and mass storage . Alternatively, multiplex data\/address lines may be used instead of separate data and address lines.","In one embodiment of the invention, the processor  is a microprocessor manufactured by Motorola, such as the 680\u00d70 processor or a microprocessor manufactured by Intel, such as the 80\u00d786, or Pentium processor, or a SPARC microprocessor from Sun Microsystems, Inc. However, any other suitable microprocessor or microcomputer may be utilized. Main memory  is comprised of dynamic random access memory (DRAM). Video memory  is a dual-ported video random access memory. One port of the video memory  is coupled to video amplifier . The video amplifier  is used to drive the cathode ray tube (CRT) raster monitor . Video amplifier  is well known in the art and may be implemented by any suitable apparatus. This circuitry converts pixel data stored in video memory  to a raster signal suitable for use by monitor . Monitor  is a type of monitor suitable for displaying graphic images. Alternatively, the video memory could be used to drive a flat panel or liquid crystal display (LCD), or any other suitable data presentation device.","Computer  may also include a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling via a network link  to a local network . For example, if communication interface  is an integrated services digital network (ISDN) card or a modem, communication interface  provides a data communication connection to the corresponding type of telephone line, which comprises part of network link . If communication interface  is a local area network (LAN) card, communication interface  provides a data communication connection via network link  to a compatible LAN. Communication interface  could also be a cable modem or wireless interface. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals which carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to local server computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals which carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer , are exemplary forms of carrier waves transporting the information.","Computer  can send messages and receive data, including program code, through the network(s), network link , and communication interface . In the Internet example, remote server computer  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface .","The received code may be executed by processor  as it is received, and\/or stored in mass storage , or other non-volatile storage for later execution. In this manner, computer  may obtain application code in the form of a carrier wave. In accordance with an embodiment of the invention, examples of such downloaded applications include a method and apparatus for using name spaces in a graphical user interface described herein.","Application code may be embodied in any form of computer program product. A computer program product comprises a medium configured to store or transport computer readable code or data, or in which computer readable code or data may be embedded. Some examples of computer program products are CD-ROM disks, ROM cards, floppy disks, magnetic tapes, computer hard drives, servers on a network, and carrier waves.","The computer systems described above are for purposes of example only. An embodiment of the invention may be implemented in any type of computer system or programming or processing environment, including embedded devices (e.g., web phones, etc.) and \u201cthin\u201d client processing environments (e.g., network computers (NC's), etc.) that support a virtual machine.","Embodiment of Software Apparatus","An embodiment of the invention includes software apparatus comprising a component or collection of components configured to support using name spaces in a graphical user interface. The components may be implemented as instances of object classes in accordance with known object-oriented programming practices, or the components may be implemented under one or more component model definitions. Several component model definitions are currently available, such as COM, CORBA, and the Java component scheme referred to as Java Beans.","For example, controls can be implemented as instances of object classes implemented in an object-oriented programming language. The object class instances can be components that are implemented under one or more component model definitions.","Each component model provides for encapsulation of related functions and data structures into individual components, similar to what occurs under a standard object-oriented programming (OOP) approach. The particular mechanisms by which the components are managed and interact are defined according to the respective component model. Bridges (e.g., ActiveX) may be constructed which allow components designed under different component model definitions to interact within a single application. Interaction is typically performed through a set of methods implemented by the component. These sets of methods are referred to as \u201cinterfaces\u201d in some component models. The public methods by which OOP object classes interact are often presented in the form of application programming interface (API) definitions.","Page Control","A special type of control mechanism referred to as a page control is associated with a Web page. The page control may generate HTML like other controls. Further, a page control is used to manage the processing of a Web page and the controls that are used to generate a Web page. In an embodiment of the invention, a page control generates a name space designation and sends the name space designation to a control when the control is first requested to generate HTML. The control uses the name space designation when, for example, generating labels for HTML name attributes. Since the name space designation is specified in the label, the label including the name space designation is used by the browser to generate the name portion of a name-value pair.","When data is returned from the browser, the page control examines the label including the name space designation and forwards (or posts) the data to the appropriate control based on the name space designation in the name-value pair. Referring to , the data is posted to the appropriate control via events according to an embodiment of the invention. Name-value pairs ,  and  become input to page control . Page control  parses name-value pairs ,  and  and identifies, using the name space designation portion of name-value pairs ,  and , the controls that should receive the data.","In one embodiment of the invention, page control  may send the data to a control in the form of an event. Data change events ,  and  are sent to controls A, B and , for example. As is discussed below, a portion of control 's response may be to notify page control  (e.g., notification ) that control  controls the GUI element used to submit the page. Page control  retains this information, and sends button-click event  to control  after all of the data has been processed via the data change events.","As a submit input control (e.g., a control that manages the submit button GUI element), control  may include program code that is to be executed in response to a submit or button click operation. When control  receives button click event , it can execute the code associated with the event (e.g., button-click event processing).","When a page is contained within another page (e.g., a subpage), the page control that is associated with the subpage is referred to as a subpage control. Like a page control, a subpage control can be used to manage the controls within its page, generate name space designations, request that a control generate its HTML, forward posted data to the control, and invoke submit processing on a control.","Design and Run Time Processing","In embodiments of the invention, a page design environment is used to design a page. The page is comprised of a plurality of controls including a page control that can be used to generate a Web page definition and process data that is posted to the server from the client.","Page Design","In one or more embodiments of the invention, a page design environment is used to allow a user (e.g., an application developer) to drag and drop GUI elements into a GUI representation of a page. A control (e.g., a Java Bean) is associated with a GUI element and is instantiated when the element is added to the page. In one or more embodiments of the invention, the control includes none or more methods, events and properties. The instantiated control's events, methods and properties can be viewed and modified by the user in the page design environment.","In one or more embodiments of the invention, a control is implemented as a Java bean using the Java programming language and application programming interfaces (APIs). A control bean is capable of running inside a design or builder tool (i.e., within a design environment) as well as at run time. At design time, the control provides design information to the builder tool user (e.g., an application or GUI developer) and allows the user to customize the appearance and behavior of the control. Events may be defined (or modified) that notify other components of a given happening. For example, when an event or happening is detected by a control, it can notify another component by calling a method on a control that has registered as an event listener. Method code of the control may also be defined or modified in the design tool.","Further, a control's properties can be read and written via methods of the control. For example, a \u201cforeground\u201d property that represents the foreground color can be read by calling a \u201cColor getForeground( )\u201d method and modified by calling a \u201csetForeground(Color C)\u201d method. In addition to setting properties of the control, the design tool user can generate or modify program code for one or more of the events.","When a page design is finalized, a class that contains the event handling code (e.g., a page control) is generated. For example, if the control is written using the Java programming language or other object-oriented programming language, its program code is generated and compiled into a class (e.g., a Java class file). If the page design environment runs on the client, the page control class that represents the page design is uploaded to the server. The controls that were included in the page's design are serialized and sent, along with any HTML that is specified at design time, to the server.","A page design can therefore include a page control (containing event handling program code), serialized controls and HTML in an embodiment of the invention.","At run time, the page object that was designed using the builder tool can be instantiated and its methods can be called by other components (e.g., another bean or object instance) or from a scripting environment, for example.","Page Generation","When the page is invoked on the server, the page class is loaded (e.g., a page load event) and instantiated together with the HTML and the de-serialized controls. After the page is loaded, the HTML for the page can be generated by the controls. A page generation engine (e.g., the page control) requests each control to generate the HTML as needed. In addition, a unique dynamic name space designation is generated (e.g., by the page control or a subpage control within another page) for each control. A mapping between the name space designation and its corresponding control is retained. A control may use its name space designation to generate labels for use with HTML name attributes, for example. For example, when generating a label that is assigned to a name attribute in an HTML definitional statement, the control appends the dynamic name space designation to the front of the label.",{"@attributes":{"id":"P-00117","num":"00117"},"figref":"FIG. 5A","b":["502","504","506","504","508","510","506","512","514","516"]},"At runtime, controls are instantiated for the components of the page as illustrated in FIG. B. Page control  corresponds to page . Container control  and subpage control  correspond to container  and subpage , respectively. Header controls  and  correspond to header  and , respectively. Body controls  and  correspond to body  and , respectively.","Name space designations are assigned to the controls as needed prior to the generation of HTML by the controls. Page control  name space designation is \u201cs1\u201d. Page control  can assign its own name space designation, or a name space designation can be assigned by a separate process, for example. The first time that a control is requested to generate HTML, a name space designation is generated for the control. A control's name space designation can be generated by page control  for all controls, or a parent control (e.g., container or subpage control) can generate a name space designation for its child controls.","A name space designation can illustrate a hierarchy of controls. Generally, a control that is child of another control has a name space designation that includes its parent's name space designation. For example, each of controls - include page control 's name space designation. In an embodiment of the invention, a \u201c_\u201d is used to separate the name space designation's used at each level.","Container control  and subpage control  include page control 's name space designation \u201cs1\u201d. Since container  is the first element in page , the name space that is assigned to container is \u201cs1\u201d, followed by \u201c_\u201d followed by \u201c1\u201d to denote that it is the first element in the page. The controls within container  (i.e., header control  and body control  that correspond to header  and ) include container control 's name space designation, followed by a \u201c_\u201d and \u201c1\u201d and \u201c2\u201d, respectively.","Subpage control  corresponds to subpage control , the second element in page . Its name space designation includes page control 's name space designation (i.e., \u201cs1\u201d), followed by \u201c_\u201d followed by \u201c2\u201d (i.e., \u201cs12\u201d). As the first element in subpage , container 's control (i.e. container control ) is given subpage control 's name space designation (i.e., \u201cs1_\u201d followed by \u201c1\u201d. Header control  and body control  have name space designations of \u201cs1211\u201d and \u201cs1212\u201d, respectively.","There are two instances of a header control (e.g., header controls  and ) and two instances of a body control (e.g., body controls  and ). However, each instance of these controls has a unique name space designation. Both header controls may generate a label of \u201cheaderTxt\u201d for a name attribute. However, each header control appends its name space designation before \u201cheaderTxt\u201d in the label. Thus, for example, the labels that are generated by header controls  and  are \u201cs111.headerTxt\u201d and \u201cs1211.headerTxt\u201d, respectively. The name space designation identifies the control that generated the label. Name-value pairs that are submitted using a control-generated label contain information that can be used to identify the control when data is submitted by a browser.","Data Submission","The Web page definition is sent to the browser by the server. The user may return data to the server. For example, the user may enter some data into input elements, for example, in the page and then select a submit operation. A post operation (e.g., an HTTP POST operation) may be used to send the data back to the page control on the server. The page control is invoked on the server to process the contents of the post message. The name portion of a name-value pair that is posted by a browser includes the control-generated labels. Thus, the page control can examine the name-value pairs to determine the appropriate control to receive the data. The page control delivers the data to the control as indicated by the name space designation in the name portion of the name-value pair.","Upon receiving the data, the control processes the data. For example, the control may change its value and may initiate its own event(s). One of the controls will typically be responsible for the HTML element that was used to submit the page or used to cause the HTTP post. The submit control notifies the page control (e.g., by identifying itself as a \u201cpageSubmitProcessor\u201d). After all of the name-value pairs are delivered to the controls, the page control invokes the \u201csubmit\u201d control to perform submit processing, if any. Thus, in an embodiment of the invention, the submit processing can be performed after all of the name-value pairs have been processed by the appropriate controls.",{"@attributes":{"id":"P-00127","num":"00127"},"figref":"FIG. 7","b":["702","714","714","716"]},"If it is determined, at step , that there are more name-value pairs, processing continues at step  to retrieve the name space designation from the name portion of the next name-value pair. At step , the name space designation is used to identify the appropriate control. At step , the name-value pair is posted (e.g., via a data change event) to the control that is identified in step .","A control may respond (e.g., using a return code) to a data posting by indicating that it is to be called to perform submit processing. At step , a determination is made whether the control is a submit control. If so, processing continues at step  to identify the control as a submit control and processing continues at step  to process any remaining name-value pairs. If it is determined, at step , that the control is not a submit control, processing continues at step .","Dynamic Name Space Designations","A name space designation is assigned to an instance of a control (e.g., a page control, subpage control or other control) to avoid name conflicts between controls. Further, a name space designation may be used to uniquely identify a control. The control is assigned a name space designation dynamically, or just-in-time, as it is needed. When a control is initially asked to generate HTML, it is given a name space designation that it uses to generate data labels for name attributes, for example. Since a name space designation is unique, a data label that includes the name space designation is also unique.","In an embodiment of the invention, a position-based name space designation assignment is used to dynamically assign name space designations. A control's position is determined, for example, by its position in a page design relative to the top left-hand corner of the page layout. The page control typically is given the first name space designation for the page (e.g., \u201cS1\u201d). The first control encountered receives a name space design (e.g., \u201c1\u201d) prefixed by the page's name space designation (e.g., \u201cs1\u201d). Reading from left to right and top to bottom, the next controls that are encountered in the page are given the name space designation of \u201c2\u201d and \u201c3\u201d, etc.","When a subpage is encountered, controls within the subpage are given name space designations that include the subpage's name space designation. For example, where the subpage is the fifth control encountered in the page, it is given a name space designation of \u201cs15\u201d (where \u201cs1\u201d is the page's name space designation), for example. The third control that is encountered within the subpage is given a name space designation of \u201cs153\u201d, for example, where \u201cs1\u201d, \u201c5\u201d and \u201c3\u201d specify the page's, subpage's and control's name space designations, respectively. If the third control in the subpage is itself a subpage, the first control that is encountered in the second subpage is given the name space designation of \u201cs1531\u201d, for example.","Page and subpage may contain controls. Further, controls such as container controls may also contain controls. Like page and subpage controls, the controls that are contained within a container control are given a name space designation that includes the container control's name space designation in an embodiment of the invention.","Thus, in one or more embodiments of the invention, a name space designation reflects a control hierarchy (e.g., a subpage within a page or subpage) as well as uniquely identifying a control. It should be apparent that any naming scheme can be used to generate name space designations to uniquely identify a control and identify a control hierarchy according to embodiments of the invention.",{"@attributes":{"id":"P-00136","num":"00136"},"figref":"FIGS. 6A-6B","b":["602","604"]},"At steps  and  a determination is made whether there are any elements defined at the current level. If not, processing continues at step  to determine whether the page is the current level. If so, processing ends at step .","If there are no more elements at the current level and the level is not the page level, processing continues at step  to return to the previous level and the previous level's counter and prefix. Processing continues at step  to process any remaining controls at the current level.","If a control is found at the current level at steps  and , processing continues at step  to assign a name space designation to the control. At step , the current level's element counter is incremented. At step , the counter is added to the level's prefix to yield a name space designation for the control.","At step , a determination is made whether the control begins a new level (e.g., a container or subpage). If not, processing continues at step  to process any remaining controls at the current level. If the control begins a new level, processing continues at step  to make the new level the current level. At step , a level prefix is determined for the new level. The new level's prefix is, for example, the name space designation assigned in step  followed by \u201c_\u201d. The level's element counter is initialized to zero and processing continues at step  to process any controls at the new level.","Shared Name Spaces","In some instances, controls may wish to share items such as, for example, a style definition or script (e.g., a Java script function). A shared or lexical name space name is used to facilitate sharing. A naming convention is adopted for shared name space designations. For example, a shared name space designation can include an Internet domain name of the developer of the shared item. To illustrate, if the Internet domain name is \u201csssw.com,\u201d the shared name space designation might be \u201ccom_sssw_*\u201d where \u201c*\u201d represents the label of the shared item.","Dynamic Name Space Lookup","In the page design environment, a developer may wish to refer to a name space designation (e.g., to refer to a control instance for a specific GUI element). However, in embodiments of the invention, a name space designation is not generated until runtime. In this case, a logical (or design-time) name space designation is used at design time. At run time, the design-time name space is mapped to an actual name space by, for example, the page control.","As an example, a developer may generate script program code that contains a reference to the first text element in the page. Instead of using its actual name space designation in the script, the developer uses a design-time name space designation such as \u201cmyText1.\u201d At run time, program code is added to the script that equates the \u201cpage.myText1\u201d design-time name space designation with the actual name space designation for the control. A program code example is:\n\n","The design-time name space designation may be to a control within a subpage. For example, the design-time name space designation might be page.subpageName.myText1. If, the run time name space designation for the page and subpage is \u201cs1\u201d and \u201cs11\u201d, respectively, the text control's name space designation is \u201cs111\u201d and the following statement is placed in the script code:\n\n","As discussed above, controls other than page and subpage controls can act as a container mechanism for other controls. For example, a container control can be used to contain controls that can generate rows (and their fields) of a table. Such a container control is referred to as a table control. Other examples of container controls include data view and layout region.","In the case of a tabular control, each row of the table can be thought of as a subpage. The table control invokes the same subpage none or more times giving it a different data set (a row's data set) each time. The layout of each subpage can be in a traditional tabular format or another format.","For example, where a tabular format is used to generate a table having three columns and ten rows, the table control can invoke a subpage that contains three controls (one for each column in the row) ten times. Each control within a row can generate HTML that identifies name and value attributes for its columnar data. Each control is given a name space designation that includes the name space designation for the table control and the control's subpage. The control's name space designation can be used to post modifications made to its data by the browser user, for example.","Thus, a method and apparatus for using name spaces in a graphical user interface has been described in conjunction with one or more specific embodiments. The invention is defined by the claims and their full scope of equivalents."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"P-00044","num":"00044"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00045","num":"00045"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00046","num":"00046"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00047","num":"00047"},"figref":"FIGS. 4A-4B"},{"@attributes":{"id":"P-00048","num":"00048"},"figref":"FIGS. 5A-5B"},{"@attributes":{"id":"P-00049","num":"00049"},"figref":"FIGS. 6A-6B"},{"@attributes":{"id":"P-00050","num":"00050"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
