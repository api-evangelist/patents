---
title: Comprehensive application programming interfaces for handling logical volume manager
abstract: Some embodiments of a system and a method to provide comprehensive application programming interfaces to a logical volume manager have been presented. For instance, a processing device running on a server may provide a library having a set of application programming interfaces to interface an application and a logical volume manager (LVM). In response to an error occurring while running the application in operation with the LVM, the processing device may return an error string in a natural language, a piece of programming code associated with the error, and an error code associated with the error using one or more of the set of application programming interfaces.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08132060&OS=08132060&RS=08132060
owner: Red Hat, Inc.
number: 08132060
owner_city: Raleigh
owner_country: US
publication_date: 20091125
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["Embodiments of the present invention relate to logical volume manager (LVM), and more specifically to providing application programming interfaces (APIs) to handle LVM.","Currently, many computing systems provide a mass storage device management module usable by applications in general. The conventional mass storage device management module typically provides functions or APIs to applications to allow the applications to use the underlying mass storage devices, such as a disk drive, in the computing systems and to access data (such as objects) stored in the underlying mass storage devices.","When an error occurs in an application, the functions and\/or the APIs of the conventional mass storage device management module typically returns a simple, generic error string without much detail about the error occurred. This is because the conventional mass storage device management module in general lacks full error reporting capability. As a result, it is difficult to debug an error that occurs because of misuse of the functions and\/or APIs of the conventional mass storage device management module.","Described herein are some embodiments of a method, an apparatus, and a system to provide comprehensive application programming interfaces (APIs) for handling logical volume manager (LVM). A LVM as used herein generally refers to a mass storage device managing module in a computing system. The LVM abstracts physical storage into logical storage entities with specific properties allowing more productive storage use. Examples may include mirroring of physical storage, spare copies (such as snapshots) of physical storage, etc. In one embodiment, a processing device running on a server may provide a library having a set of application programming interfaces to interface an application and a LVM. In response to an error occurring while running the application in operation with the LVM, the processing device may return an error string in a natural language, a piece of programming code associated with the error, and an error code associated with the error using one or more of the set of application programming interfaces. More details of some embodiments of the comprehensive APIs for handling LVM are described below.","In the following description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the detailed descriptions below are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cproviding\u201d or \u201creturning\u201d or \u201cdisplaying\u201d or \u201cwriting\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission, or display devices.","The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine-readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required operations. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 1","FIG. 3"],"b":["100","112","100","100","112"]},"In some embodiments, the software architecture includes a LVM , a LVM library , and an application . Note that there may be multiple applications running on the processing device  in some embodiments. The LVM library  includes a set of APIs usable by the LVM  to interface with the application . Some exemplary APIs are discussed further in details below.","In some embodiments, the LVM library  is designed around three types of basic LVM objects, namely, physical volume (PV), volume group (VG), and logical volume (LV). A VG object can be either a read-only object or a read-write object depending on the mode it has been returned by a function. Create functions return a read-write object, but open functions have the argument mode to define if the object can be modified or not. A LV object is bound to a VG and has the same mode of the VG. Changes to the LV object may be written to disk when the VG gets committed to disk. Likewise, a PV object is bound to a VG, and has the same mode of the VG. Changes to the PV object may be written to disk when the VG gets committed to disk.","The LVM library  may provide functions to list the objects in a system, get and set objects properties (such as names, identifiers, and sizes), as well as create and\/or remove objects and perform more complex operations and transformations. Each object instance is represented by a handle, and handles are passed to and from the functions to perform the operations. As used herein, a handle generally refers to an abstract reference used to refer to an object or a block of memory.","In some embodiments, a central object in the LVM library  is a VG, represented by a VG handle, vg_t. Performing an operation on a PV or LV object first requires obtaining a VG handle. Once the vg_t has been obtained, it can be used to enumerate the handles of PV and LV (represented as pv_t and lv_t, respectively) within that vg_t. Attributes of these objects can then be queried. A VG handle may be obtained with read or write permission. Any attempt to change a property of a pv_t, vg_t, or lv_t without obtaining write permission on the vg_t may fail.","The application  first opening a VG read-only, then later wanting to change a property of an object must first close the VG and re-open with write permission. In some embodiments, the LVM library  provides no mechanism to determine whether the VG has changed on-disk in between these operations. This is the responsibility of the application . One way the application  can ensure the VG has not changed is to save the \u201cvg_seqno\u201d field after opening the VG with read permission. If the application  later needs to modify the VG, it can close the VG and re-open with write permission. The application  may then check whether the original \u201cvg_seqno\u201d obtained with read permission matches the new one obtained with write permission.","In some embodiments, the LVM library  provides a LVM handle as the base handle for opening and creating objects, such as VGs and LVs. In addition, the LVM handle provides a context for error handling information, saving any error number and error message that any function may generate. Details of one embodiment of the creation of a LVM handle are discussed below.","Once all LVM operations have been completed, lvm_quit from the LVM library  may be used to release the LVM handle and any associated resources. A valid LVM handle is returned if there is no error; or NULL is returned if there has been an error, such as a memory allocation problem. To check if an error has occurred, the application  may use the lvm_error function from the LVM library . A LVM handle allocated with lvm_init may be destroyed after all LVM operations are complete or after an unrecoverable error. Destroying the LVM handle frees the memory and other resources associated with the handle. Once destroyed, the LVM handle cannot be used subsequently.","In some embodiments, the LVM library  provides several error reporting functions to better assist users to debug when errors occur. For instance, the LVM library  may provide a function lvm_errno, which returns an error number value associated with the last LVM error. The error number may be used to determine the details of any failure of the last call. Although basic success or fail is returned by every function, either by returning a 0 or \u22121, alternatively, a non-NULL or a NULL value, lvm_errno may be used to get a more specific error code associated with the failure. In this way, lvm_errno may be used after every function call, even after a \u201cget\u201d function call that simply returns a value.","In some embodiments, the LVM library  provides a function lvm_errmsg to return stored error message describing the last LVM error. This function may be used in conjunction with lvm_errno to obtain more specific error information for a function that is known to have failed. The stored error message may be returned in the form of an error string in a natural language. A natural language as used herein generally refers to a language written or spoken by humans for general-purpose communication, as opposed to constructs, such as computer-programming languages, machine-readable or machine-executable languages, or the languages used in the study of formal logic, such as mathematical logic. Some examples of a natural language include English, German, French, etc.","Note that the LVM library  acts as an object model interface between the application  and the LVM . The error reporting interfaces , which include one or more error reporting interfaces or error reporting functions discussed above, provide full error reporting to users of the application . In some embodiments, the error reporting interfaces  are implemented by adding error conditions in code of the LVM library . As such, the error reporting interfaces  is integrated into the LVM library  and can be used on the library level.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 3"],"b":"300"},"Initially, processing logic initializes a handle for a logical object (processing block ). Then processing logic gets the logical object for an application using the handle (processing block ). Processing logic may execute a function in the application to act on the logical object (processing block ). After executing the function, processing logic checks to determine if there has been any error resulted from execution of the function (processing block ). For instance, the function may return \u201c0\u201d if there is no error, or \u201c\u22121\u201d if there is an error. If there is an error, processing logic may report the error using the handle and\/or other error reporting handles (processing block ). In some embodiments, processing logic may use multiple error reporting handles to obtain an error code, an error string in a natural language, and\/or a section of programming code of the function associated with the error. Furthermore, processing logic may display the error code, the error string, and the section of programming code on a display device (e.g., a monitor) using a user interface (e.g., a graphical user interface, a command line interface, etc.). Alternatively, processing logic may write the error code, the error string, and the section of programming code into a file, which may be stored in a computer-readable storage device to be accessed later, or be transmitted to another computing system.","If there is no error, processing logic may release the object from the handle (processing block ). Processing logic may return the handle to the application (processing block ).",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3","b":"300"},"The exemplary computer system  includes a processing device , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM), a static memory  (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device , which communicate with each other via a bus .","Processing device  represents one or more general-purpose processing devices such as a microprocessing device, a central processing unit, or the like. More particularly, the processing device may be complex instruction set computing (CISC) microprocessing device, reduced instruction set computing (RISC) microprocessing device, very long instruction word (VLIW) microprocessing device, or processing device implementing other instruction sets, or processing devices implementing a combination of instruction sets. Processing device  may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processing device (DSP), network processing device, or the like. The processing device  is configured to execute functions or APIs in the LVM library  for performing the operations and steps discussed herein.","The computer system  may further include a network interface device . The computer system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The data storage device  may include a computer-accessible storage medium  (also known as a computer-readable storage medium) on which is stored one or more sets of instructions (e.g., LVM library ) embodying any one or more of the methodologies or functions described herein. The LVM library  may also reside, completely or at least partially, within the main memory  and\/or within the processing device  during execution thereof by the computer system , the main memory  and the processing device  also constituting computer-accessible storage media. The LVM library  may further be transmitted or received over a network  via the network interface device .","While the computer-readable storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201ccomputer-readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201ccomputer-readable storage medium\u201d shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term \u201ccomputer-readable storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, optical and magnetic media, etc.","The LVM library , components and other features described herein (for example, in relation to ) can be implemented as discrete hardware components or integrated into the functionalities of hardware components, such as ASICS, FPGAs, DSPs, or similar devices. In addition, the LVM library  can be implemented as firmware or functional circuitries within hardware devices. Further, the LVM library  can be implemented in any combination of hardware devices and software components.","Thus, some embodiments of the comprehensive APIs for handling LVM have been described. It is to be understood that the above description is intended to be illustrative, and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
