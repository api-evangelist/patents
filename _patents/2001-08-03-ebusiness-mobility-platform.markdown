---
title: E-business mobility platform
abstract: A platform () allows end users to engage in a session with servers such as content providers, corporate systems, commercial services or ASPs. A session object is associated with each session, attributes of which include the channelâ€”thereby allowing changing of a channel during a session. Request/event objects are associated with the session object as requests/notifications arise, and these objects are shared with other modules. Hosted services may be physically resident on the platform or may be accessed transparently via interfaces. A device/channel neutral mark-up language extended from a presentation mark-up language is used as a single common form from which the delivered content is derived. The content from a service is generated by an executable process, normally (but not exclusively) in the extended mark-up language. The derivation of deliverable content is performed via a dynamic and configurable sequence of providers that manipulate the original content in stages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07287093&OS=07287093&RS=07287093
owner: MobileAware Technologies Limited
number: 07287093
owner_city: Dublin
owner_country: IE
publication_date: 20010803
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","PRIOR ART DISCUSSION","SUMMARY OF THE INVENTION"],"p":["The invention relates to provision of applications and\/or content to end users and interaction between end-users and end-user communities in a mobile environment. A mobile environment is one where the end-user is free to change any variable parts of the user context (such as device, location, or communication channel).","In recent years there has been a rapid development of technologies both for the end user to receive content and applications and for hosting of the content and applications. At the user end a wide range of devices including Personal Computers (PCs), handheld computers, Wireless Application Protocol (WAP) phones, Personal Digital Assistants (PDAs) or Digital Television (DTVs) may be used. Content providers and corporate systems also use a number of different technologies including servers communicating using Hypertext Markup Language (HTML), Extensible HTML (XHTML), and other Extensible Markup Language (XML) compliant languages, as popular in the World-Wide Web.","It is believed that there is a shift from software product delivery to software services delivery. This shift has been growing in recent years towards a situation in which there will be a ubiquitous array of thin-client devices (computing devices that play the lesser role in the execution of a service) that are always connected to centralised server-based application services (the major role player).","Current wireless technology is developing in a direction that is parallel but not convergent with this transition. In fact, technologies such as WAP focused mobility at the protocol level and built an environment parallel to contemporary Internet standards. This approach is insufficient to address the requirements of mobile users as it does not enable usability advantages at the levels of the e-business application and Web authoring process.","It is also recognised that the Web authoring process does not capture all of the information available to the author, such as the author's underlying intentions (e.g. an author may use mark-up tags to render two separate paragraphs in the same colour, but the underlying intention is to indicate to the user that these paragraphs are related). To support re-purposing of content, this missing information is invaluable.","It is therefore an objective of the invention to provide a mobility server platform to integrate true mobility, service creation, service delivery and Web authoring in an effective and versatile manner.","Other objectives are to:\n\n","According to the invention, there is provided an e-business mobility platform comprising a request handler interface for interfacing with user devices, a content interface for interfacing with content servers, means in the content interface for retrieving content requested by a user device and for routing the content to the request handler interface for onward routing to the requesting user device characterised in that,\n\n","In one embodiment, the intention tags include tags for linking related blocks of content, and the transformation engine comprises means for maintaining said relationships in the content delivered to a user device.","In another embodiment, the task tags include tags for indicating information that is optional or alternative for a user device having different interfacing capabilities than other devices.","In one embodiment, the transformation engine comprises means for converting the retrieved content to a document object model (DOM), and means for transforming the DOM to a device format.","In one embodiment, the DOM is transformed by parsing tags indicating blocks of content and associating blocks with nodes of the DOM.","In one embodiment, the transformation engine comprises means for combining content by combining DOMs generated from different incoming content streams.","In a further embodiment, the transformation engine comprises means for applying user preferences to the device-format content.","In one embodiment, said preferences are applied by dynamically retrieving preference data from a user database and modifying the content accordingly.","In one embodiment, the transformation engine comprises means for dynamically activating providers in series for a session, said providers being for performing a transformation-related function.","In one embodiment, at least one provider comprises means for caching reusable intermediate data captured from a stream of content being transformed, and at least one other provider comprises means for using cached data.","In another embodiment, a provider comprises means for caching user preference data","In one embodiment, the platform comprises a database system and all functions of the platform comprises means for accessing said database system via accessors each dedicated to a data type.","In one embodiment, the data types include user, group, and device data types.","In one embodiment, the platform comprises a messaging system comprising means for controlling communication within the platform by passing objects representing events between functions.","In a further embodiment, the user device interface comprises means for causing a session manager to generate a session object upon receipt of a user device request, and said session object comprises means for controlling full execution of the session until delivery of the requested content even if the user device changes.","In one embodiment, the session manager comprises means for maintaining a list of sessions for each user and for caching the associated content.","In one embodiment, the device interface comprises a device detection function for detecting device attributes, and the session manager comprises means for using said attributes to create a session object.","In one embodiment, the device detection function comprises means for accessing a hierarchical device database to retrieve device attributes.","Referring to  an e-business mobility platform  comprises N servers , a load balancing system , a device-side interface , and a high-speed network  providing access to content servers. The network  also allows sharing of resources across the servers . There may alternatively be only one server  and associated infrastructure without a load balancing system.","Referring to  the architecture of each server  comprises an interface  for handling incoming requests from user devices. In this specification the term \u201cuser device\u201d is intended to cover non-mobile devices such as desktop PCs and also different software interfaces such as different combinations of fixed or mobile hardware and software used by users to access content or executable applications. The term \u201ccontent\u201d is intended to cover both information for presentation and also executable code. In other words, it covers anything which can be either rendered or executed by the user device.","The interface  comprises a selector  for identifying the requested service. An interface  provides an interface to content servers.","The functionality between the interfaces  and  is, at a high level, a session controller. This controls communication on the basis of a complete session, not on the basis of the particular link being used. Thus, if a user starts a transaction using a browser on a PC, stops using the PC, and then wishes to continue the transaction with a mobile phone the session controller can maintain continuity. Switching from one device to another is simply changing of a session parameter, not terminating the session itself.","The session controller functionality comprises a transformation engine , which converts the content from a task\/intention markup language (TML) to a particular protocol suitable to the requesting device. It achieves this by selecting a sequence of functions to perform the conversion. Among the selected functions are:\n\n","A separate instance  of the transformation engine include additional content into the first instance  of the transformation engine. The engine  may retrieve content from a separate source. In cases where the separate source does not offer TML, the transformation engine  selects a set of functions to create TML from the source, and among the selected functions are:\n\n","The output of the function  is merged with that of the function  by the function .","The server  also comprises accessors  to access persistent (non-temporary) data associated with the delivery of the service and a persistent information controller (PIC)  to connect the accessors  to a database .","Referring to , the server  is shown in another view in which detail of the transformation engine is not shown, but other functions are. The server  comprises a remote context management function  to access a session manager  linked to the request handling interface . The session manager  performs overall session control, including generation\/retrieval of session objects for each received content request. The session manager  is provided to enable executable service processes gain access to the data associated with session objects.","The content-side interface  comprises connectors  and  for access to various sources of content, and a mobility service gateway  for access to infrastructural data. A messaging system  is linked with the transformation engine  so that notification messages (in the form of email, Short Message Service objects or other push formats) can be created for delivery via an external gateway\/server .","Accessors  are provided to obtain data from the underlying communications infrastructure, such as data provided by Open Systems Architecture (OSA) functions, which can be used to influence the content to be delivered and the manner of its delivery. For example, the Quality Of Service (QoS) accessor can be used to determine if the communications channel has sufficient capacity to delivery the content at the required level of quality.","The following describes the server  in more detail.","Persistent Information Controller (PIC) ","The PIC presents a data abstraction to the functions, representing the main forms of data (users, groups, services, devices) their relationships (hierarchy and inter-hierarchy) and security configuration (access control lists). The PIC maps these abstractions to actual data storage in the form of the relational database . The PIC  is structured in a way that it can be modified to re-map some or all of the data to other types of data storage.","Request Handler Interface ","This implements an API to accept requests from end-users in the form of Universal Resource Indicators, together with zero or more end-user defined parameters. This interface triggers the session manager  to create a session object, and the processing of the request is then passed to the service selection function  forming part of the request handler interface . Creation of a session object involves detecting a cookie in the request, and if present, locating the object within a collection of session objects using the cookie as a search key. If a cookie is not present in the request, a new unique cookie is created and a new session object associated with the new cookie. New cookies are delivered to the client along with the response content so that the client can supply the cookie in subsequent requests.","The interface  comprises a device detection function , which utilises a configurable hierarchical device database that is used to recognise the type of device making a request, and for similar devices to inherit shared properties. The device detection function  uses information in the client request to recognise the type of device in use and can obtain further information about the device from details held in the device database.","The interface  can be configured to pass or not pass certain headers from devices to back-end servers and vice versa where the back-end server or device requires this information.","Remote Context Management Function ","The server  allows back-end servers to make remote callbacks to the server  to query\/update session and persistent information via the function . A secure one-time key is used to identify the correct session and provide security.","Transformation Engine ","This parses server responses and generates a representation of content based on session object attributes and transforming the input content. The engine  acts by first identifying the type of the original content (as provided by the hosted service via a connector) and the type of content required by the end user's device (subject to parameterised variations such as user preferences). Then it identifies a set of data\/content manipulation components (providers) and a sequence of use such that by applying the providers in the identified sequence the original content can be constructed and\/or transformed into a form acceptable to the end-user device.","New providers can be programmatically added to the set of available providers to support additional construction or transformation features. This is achieved by adding compliant code to the provider class hierarchy and implementing a common provider interface.","TML represents presentation, intention, and task information for the content delivered by the servers . Most markup languages represent presentation attributes, however, prior art languages do not represent the intention of the content author or the task (based on device information) to be performed during deliver. When authoring the content using TML the author inserts tags to indicate intention, and the following is an example:\n\n","In this TML sample the author has explicitly indicated that the first and third paragraphs are related, by using intention tags. In this case, the author has chosen to use \u201cgroup\u201d tags to indicate that the selected paragraphs form part of a common group. This information can be used programmatically to ensure that the related paragraphs are presented together, regardless of the final content format. In the sample, the author has chosen to colour the related paragraphs in red, but this is a presentation attribute that is insufficient to infer that the paragraphs are indeed related. The group tags clarify that a relationship between the paragraphs was intended. When transforming this content to a different format, such as a device-specific mark-up language, the transformation process applies appropriate layout and\/or presentation features such that the author's intention to group the content is preserved.","The following is an example of representation of task information:\n\n","In this TML sample the author has outlined a decision that will be made at the time when the content is being delivered to the user. The decision here is to omit some content that the author has concluded would not be right for a small browser. This deferred action based on a property of the session context is an example of a task tag.","Since TML is an extension of a popular and well-understood presentation mark-up language, for which the authors have ample tools and experience, and since the tools themselves must be extendable to support the extensible presentation mark-up language, TML can be integrated into existing authoring tools  thus avoiding the need to create new authoring tools or the need for authors to learn a completely new mark-up language. This approach gives the author a familiar environment, enables the author to capture non-presentation properties of the content (intention) and gives the author a degree of control over what happens to the content when it is being re-purposed for different devices.","When the original content is in a TML format, the first provider (the conversion function ) builds an internal (in-memory) object hierarchy representation of the content (a Document Object Model), which is subsequently manipulated using the task\/intention-oriented information to guide the content creation\/transformation process. The transformation function  is an extendable set of TML-to-\u201cother format\u201d programs, which are efficiently implemented as object-oriented processes in the same programming language as used by the server for maximum compatibility. The transformation function  is configured with run-time parameters and custom transformation rules. Custom rules are applied to specific devices. For example, a device that claims to support HTML but does not properly support the <h6> (heading) tag could apply a rule that says \u201creplace all <h6> tags with <b> tags\u201d, which would have a similar presentation effect (i.e. it would embolden the text). Custom rules are normally used to correct deficiencies and\/or take advantage of special features in devices.","Data that passes from one provider to the next in the engine  may be offered by the server  as a candidate for information caching, which can enhance performance. This is achieved by inserting cache providers into the sequence of providers so that the cache providers can access and store intermediate data as it passes from one construction\/transformation provider to the next. Only content that can be re-used may be cached. Cache providers may also retrieve content from storage instead of obtaining it from a construction\/transformation provider earlier in the sequence. Retrieving content from storage would be performed when there is a performance benefit compared to the content being generated by a construction\/transformation provider.","Usage Tracking Function","The server  logs usage information derived from the request handler  in an extensible, industry-standard format to allow usage analysis with widely available tools. Data gathered in the logs through the usage tracking function of the request handler  can be delivered to analysis and monitoring features for off-line processing, or in real-time via the messaging function .","Transformation Engine Output Function ","This function provides for the distribution of messages to end-users based on their subscriptions. End-users subscribe to a message topic indicating which delivery channel they prefer: email\/text, email\/html or Short Message Service (SMS). When a message arrives in the server  it is transformed per subscription to either Email or SMS and delivered to the end-user. The server logs the successful handoff of messages to an end-user. Support for SMS sending in the server is configurable, with an SMS being emitted by the server via a telephone modem or directly to the SMS Messaging Centre.","Messaging Function ","This manages communication within the server . It is an efficient real-time internal distributed notification function that alerts the various components to changing situations. It carries objects representing events (usually associated with sessions) and operates in a publish\/subscribe mode to support asynchronous delivery of data (as notification\/event objects). The messages may be passed through the transformation engine, or directly to the recipients unaltered. The message system also supports the gathering of data for billing, performance logs, monitoring and administration. The message function  is based on a clustered Java Message Service (JMS).","Cookie Management in the Transformation Engine ","For situations where the server  is hosting a service, a mechanism is provided to manage the cookies that may be returned to the server  from this service. Cookie management within the server  addresses the management of session and persistent cookies (unique codes representing contextual data) in this situation. Incoming cookies are appropriately stored depending on their type (HTTP Session or database), while on outgoing requests cookies are sent back by the server  upon a user re-visiting a previously visited site.","The cookies are used by the session manager  to map from cookies to session objects. In this way, requests bearing the same cookie can be associated with the same session. Furthermore, the session manager generates a list of active sessions for a given user, which are presented to the user to enable the user rejoin a session that had previously been suspended. The end-user can rejoin a session on any device, which enables the user to move from one environment to another while still being able to interact with services within a session. This feature supports end-user lifestyle requirements (i.e. freedom to move and change contextual parameters).","Security Module","A security module (not shown) provides security facilities for communications between the platform  and external actors (e.g. end-users). It performs user authentication, certificate creation, certificate verification, digital signatures, single sign-on and message encryption. The security module may optionally provide some or all of its features through separate security solutions from third parties, integrated as hosted services. Security between entities managed by the PIC is handled via access control lists (also maintained by the PIC), which determine what forms of access are permitted between objects that represent the entities. For example, a service entity may be granted read access to one of a user's preference attributes but may not be granted any access to other attributes associated with different services.","Error Handling","An error handling function (not shown) allows an administrator to configure the server  to redirect to an error handling JSP page or alternatively to deliver a textual description of the error to the client. This provides \u201cgraceful\u201d behaviour in error situations.","Administration","An administration console  is a visual interface to an administration API of the server  database  that enables an administrator to manipulate and configure resources such as services, principals (users), devices and various attributes. Through the administration console  an administrator may create, modify and remove resources. This functionality allows an administrator to register services, maintain devices and device characteristics and allocate service\/content packages to end-users and groups.","Additional Features","The server  permits the addition of new functions to support features that may not be readily accessible via connectors (end-providers). These include drivers to access parameters of the communications network, such as Intelligent Network (IN) drivers and Open Systems Architecture (OSA) drivers, which can be used to provide features such as client location tracking, quality of service measurement, communication security parameters etc.","Additional Hosted Service Modules","End-user service providers (content providers) can add their business logic as a module within the server . These are accompanied by a set of executable service processes to handle requests and\/or events associated with the service, and any other information such as appropriate access rights that would be assigned by the administrator via the Administration Console (or programmatically via the Administration API). Users and groups can then be granted access to the service, attributes can be defined for the service and values assigned to the attributes on behalf of users and\/or groups.","Application Programming Interfaces of the Server ","Context Management API","A context management API enables remote access to PIC  data. In one embodiment this API is supplied in the server  in the form of a JSP context manager that can be accessed in JSP code through a context manager (JSPCM) object. Pages expressed in JSP with access to the JSPCM can use PIC data in the generation of content and can also update PIC  data. The JSPCM can also execute remotely from the server , using middleware to communicate securely with the platform . The JSPCM is subject to security rules, in the form of access control lists. An SDK API locates a remote context manager that a server may use to make callbacks to the server .","Authoring API","An authoring API can apply the enhanced markup of the server  to content prior to delivery via the platform . This API also permits access to preview features that may use the server , or operate independently of the platform using a stand-alone version of the transformation engine.","Request API","This API is used by the request handler interface  to forward requests for content to the content providers. Providers may use HTTP or other protocols as carriers for requests for content. Provider proxy sub-modules implement the request API and the API of the provider to facilitate content requests to specific content providers.","Connector API","The interface  comprises connector APIs  and . A connector maps a request within the server  to a request that can be delivered to a separate server. Connectors can create requests in alternative protocols, and can convert data formats where necessary. For example, a Simple Object Access Protocol (SOAP) connector would take a request from the interface  (or from a hosted service) and convert it into a SOAP request that would be passed to a SOAP server, whereupon a SOAP response would be generated that would be received by the SOAP connector and reformatted as text, TML or some other format acceptable to the transformation engine or hosted service. New connectors for alternative protocols or formats can be added to the server  by the addition of executable code that implements the Connector API.","An administration API provides a means of accessing the platform configuration information held in the PIC, and to view\/modify dynamic information such as gathered statistics generated by the server . Access to the API is through a secured channel.","Categorisation of Function Features","Function features fall into several categories:\n\n","There are four types of entity stored within the database . These are Users, Groups, Services and Devices. All of these data are hosted within the same database management system (DBMS). The data are accessed via the accessors , which are objects that interact with the PIC  to manipulate the platform data. Security of this data rests with a security mechanism provided by a database management system. The type of data in detail are:\n\n","The content construction\/transformation processes produce intermediate data. Since it is possible that this data will be the same for some subsequent requests from other users, this data is made available for caching. Intermediate data that is not a candidate for caching, or is not accepted for caching, is disposed.","Session Data","The session with an end-user, comprising more than one related request, requires contextual data to be retained for the duration of the session. Each request following the initial request in a session will be accompanied by a cookie (a unique code) with which the contextual data can be located. This data is stored in a mobility session object.","Executable Service Processes","Every service hosted by server  can be accessed by the end-user via a request adhering to a specific format of URI. Once identified, the request will lead to the execution of a service process whose responsibility is to provide content for the \u201cleaf\u201d provider in the sequence of providers set up by the transformation engine .","Many executable service processes are represented by a Java Server Page (JSP), which is an object derived from a combination of mark-up and embedded program statements. The output of a JSP process in server  is normally a TML document, other formats would be converted to (or included in) a TML document.","It is permitted for executable service processes to be implemented in programming languages, scripts or decision mechanisms other than Java, and to output content other than TML. It is a requirement that all executable service processes will announce the Multimedia Internet Mail Extension (MIME) type of the content and output the actual content in a manner consistent with JSP regardless of the actual implementation language.","Operation of Server ","Operation of the server  is now described with reference to . The server  essentially acts as a broker in which parties belonging to Application Service Provider (ASP), content provider and network operator interact with each other and with end users regardless of the communication and file formats used. Thus, for example, a user may order food from the restaurant, and the restaurant may use the server  to track location of delivery personnel in real time, and it may also use the server  to communicate with service providers who create maps and provide routing information and finally communicate service details (e.g. estimated time of arrival of the delivery personnel) to the end-user regardless of the device and communication channel used by the user.","An incoming request from an end user is directed to the request handler interface . This monitors messages to determine data such as the user identification and details about the device used by the user. The request handler interface  and the session managers  use this data to create a mobility session object and associated data objects and these are made available to other functions in the server . The functions in the server  use direct calls and messaging functions to pass these objects to each other. One such module function is the selector , which automatically maps the request data in the mobility session object to an executable service process.","The session manager  and the PIC  may be regarded as persistent memory of the server  from the perspective of how an event\/request is handled.","The executable session process writes to a session context via the session manager , including data such as the user session status or user's mobile number. This data is important as it allows the platform to handle a wide range of different user devices and associated protocols, as indicated in .","The results of the executable service process called by the selector  are added to the context via the session manager  and\/or delivered to the transformation engine . The engine  will note the type of content being supplied and the type of content required by the user's device and will select a set of providers to manipulate the input content in a sequence of steps. Generally, the executable service processes will generate a response expressed in TML, and a TML transformation provider will form part of the engine  sequence, and this provider will transform TML into one of the supported output formats such as HTML, WML, SMS, Simple Mail Transport Protocol (SMTP), fax or Voice Mark-up Language (VoxML).","Another aspect of the transformation engine  is that it may produce a composite response comprised of more than one sub-response (or page), and will make elements of this composite response available to the client on demand (starting by default with the first element). This form of response is used where the original response from the hosted service is inappropriately large for the client's browsing device. The engine  may add additional inter-page links to enable the client navigate through the set of pages derived from the original response.","It will be appreciated that the invention provides a platform  comprising one or more instances of server , that achieves the objectives set out in the introductory part of this specification. It provides excellent flexibility for connection of end users to servers. For example, it allows ASPs to provide software as a service on per-user basis with flexible licensing and billing arrangements. The platform effectively allows users to fully control their interaction with e-services through a fully personalised interface. The settings for personalisation include function, location, time, device, and other system and application-specific settings from which the user can choose. The platform  also allows ASPs and portals to host multiple corporate or commercial services and applications on the same server. These can be grouped and shared by different user groups. Also, it will be appreciated that the security module provides advanced industry-standard authentication and authorisation for control of access to applications and data. Also, because of the clustered multi-server hardware architecture, the platform  is highly scaleable and there is excellent reliability because of redundant clustering.","At a more fundamental level, the platform provides solutions to the three primary problems concerned with mobility personalisation: (a) presentation personalisation, (b) behaviour personalisation, and (c) activity personalisation. This is set out in more detail below:\n\n","The device-centric modelling capabilities employed by the server  enable publishing of a user-personalised interface services to different devices.","The invention is not limited to the embodiments described but may be varied in construction and detail. For example, the platform may comprise one or any other number of servers, depending on the required capacity."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DETAILED DESCRIPTION OF THE INVENTION","p":["The invention will be more clearly understood from the following description of some embodiments thereof, given by way of example only with reference to the accompanying drawings in which:",{"@attributes":{"id":"p-0028","num":"0032"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0029","num":"0033"},"figref":"FIGS. 2 and 3"}]},"DETDESC":[{},{}]}
