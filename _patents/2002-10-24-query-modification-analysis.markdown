---
title: Query modification analysis
abstract: Methods, systems and articles of manufacture are provided for a query analysis approach used to identify “nondestructive” and “destructive” queries. In one aspect, a “non-destructive” query is one which does not return any additional results relative to results returned by a previously executed query or queries. Conversely, a “destructive” query is one which does return additional results relative to results returned by a previously executed query. If the query is determined to be destructive, the query is executed against the complete data repository (e.g., database or data warehouse). If the query is nondestructive, the query (or some restructured form thereof) is executed against a data subset of the complete data repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06938036&OS=06938036&RS=06938036
owner: International Business Machines Corporation
number: 06938036
owner_city: Armonk
owner_country: US
publication_date: 20021024
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Initial Query","Subsequent Query","EXAMPLE OF ADDING SORTING OF RESULTS","EXAMPLE OF SORTING ON DIFFERENT RESULT FIELDS","EXAMPLE OF REORDERING RESULT FIELDS","EXAMPLE OF REMOVING RESULT FIELDS","EXAMPLE OF ADDING ANDED QUERY CONDITION INVOLVING RESULT FIELD FOUND IN THE INITIAL QUERY RESULTS","EXAMPLE OF MAKING QUERY CONDITION MORE RESTRICTIVE AND FIELD INVOLVED IN CONDITION IS IN INITIAL QUERY RESULTS","EXAMPLE OF RENAMING RESULT FIELDS","EXAMPLE OF CONVERSION OF RESULTS FROM INITIAL QUERY","EXAMPLE OF MAKING QUERY CONDITION LESS RESTRICTIVE","EXAMPLE OF ADDING RESULT FIELDS","EXAMPLE OF ADDING ANDED QUERY CONDITION INVOLVING RESULT FIELD NOT FOUND IN THE INITIAL QUERY RESULTS","EXAMPLE OF ADDING NEW ORED QUERY CONDITION","EXAMPLE OF MAKE QUERY CONDITION MORE RESTRICTIVE AND FIELD INVOLVED IN CONDITION IS NOT IN INITIAL QUERY RESULTS"],"p":["This application is related to U.S. patent application Ser. No. 10\/083,075, filed Feb. 22, 2002 entitled \u201cImproved Application Flexibility Through Database Schema and Query Abstraction\u201d, U.S. patent application Ser. No. 10\/131,984, filed Apr. 25, 2002 entitled \u201cRemote Data Access and Integration of Distributed Data Sources Through Data Schema and Query Abstraction\u201d and U.S. patent application entitled \u201cData Query Differential Analysis\u201d which are hereby incorporated herein in their entirety.","This application is a continuation-in-part of, and claims priority to, Ser. No. 10\/264,124, filed on Oct. 3, 2002 by Dettinger et al., entitled \u201cDATA QUERY DIFFERENTIAL ANALYSIS\u201d.","1. Field of the Invention","The present invention generally relates to data processing and more particularly to processing queries configured to access data in a data repository.","2. Description of the Related Art","Databases are computerized information storage and retrieval systems. A relational database management system is a computer database management system (DBMS) that uses relational techniques for storing and retrieving data. The most prevalent type of database is the relational database, a tabular database in which data is defined so that it can be reorganized and accessed in a number of different ways.","A DBMS is structured to accept commands to store, retrieve and delete data using, for example, high-level query languages such as the Structured Query Language (SQL). The term \u201cquery\u201d denominates a set of commands for retrieving data from a stored database. These queries may come from users, application programs, or remote systems (clients or peers). The query language requires the return of a particular data set in response to a particular query but the method of query execution (\u201cQuery Execution Plan\u201d) employed by the DBMS is not specified by the query. The method of query execution is typically called an execution plan, an access plan, or just \u201cplan\u201d. There are typically many different useful execution plans for any particular query, each of which returns the required data set. For large databases, the execution plan selected by the RDBMS to execute a query must provide the required data return at a reasonable cost in time and hardware resources. In general, the overall optimization process includes four broad stages. These are (1) casting the user query into some internal representation, (2) converting to canonical form, (3) choosing prospective implementation procedures, and (4) generating executable plans and choosing the cheapest of the plans.","Optimization, and execution generally, can be a resource intensive and time-consuming process. Further, the larger the database, the longer the time needed to execute the query. From the end user's standpoint, the undesirable impact of query execution overhead is increased when a plurality of queries is executed. In many data mining and data query scenarios, it is often the case that the end user does not know, at the outset, the precise data they are after. In this scenario, the user typically issues a query, examines the results, modifies the query based on analysis of the results and then runs the modified query. In cases where the data being query is very extensive and complex, this can be a very time and resource intensive process, given the duplicative processing that takes place each time the user submits a new query.","Therefore, there is a need for a more efficient query execution method.","The present invention generally provides methods, systems and articles of manufacture for a query analysis used to identify \u201cnondestructive\u201d and \u201cdestructive\u201d query modifications.","One embodiment provides a method of processing queries, comprising receiving a query; performing a comparative analysis between the query and one or more previously executed queries to determine a difference in scope with respect to results; and executing the query against one of a first data source and a second data source depending upon the difference in scope determined by the comparative analysis, where the second data source is a subset of the first data source.","Another embodiment provides a method of processing queries, comprising receiving a query; performing a comparative analysis between the query and one or more previously executed queries to determine a difference in scope with respect to results; and depending upon the difference in scope determined by the comparative analysis, performing one of: (i) executing the query against a first data source; and (ii) restructuring the query and executing the restructured query against a second data source, where the second data source is a subset of the first data source.","Yet another embodiment of a method of processing queries, comprises receiving a query; performing comparative analysis between a structure of the query and a structure of a plurality of previously executed queries to determine a difference in scope with respect to results; and upon determining that a results scope of the query is less than at least one of the plurality of previously executed queries: (i) restructuring the query; and (ii) executing the restructured query against a first data source, where the first data source contains results returned from execution of the at least one of the plurality of previously executed queries.","Yet another embodiment provides a computer readable medium containing a program which, when executed, performs an operation, comprising: performing a comparative analysis between a query received for execution and one or more previously executed queries to determine a difference in scope with respect to results; and submitting the query for execution against one of a first data source and a second data source depending upon the difference in scope determined by the comparative analysis, where the second data source is a subset of the first data source.","Still another embodiment provides a computer readable medium containing a program which, when executed, performs an operation, comprising performing a comparative analysis between a query received for execution and one or more previously executed queries to determine a difference in scope with respect to results; and depending upon the difference in scope determined by the comparative analysis, performing one of: (i) submitting the query for execution against a first data source; and (ii) restructuring the query and submitting the restructured query for execution against a second data source, where the second data source is a subset of the first data source.","Still another embodiment provides a computer readable medium containing a program which, when executed, performs an operation, comprising performing a comparative analysis between a structure of a query received for execution and a structure of a plurality of previously executed queries to determine a difference in scope with respect to results; and upon determining that a results scope of the query is less than at least one of the plurality of previously executed queries: (i) restructuring the query; and (ii) executing the restructured query against a first data source, where the first data source contains results returned from execution of the at least one of the plurality of previously executed queries.","Still another embodiment provides a computer system, comprising: a data repository, comprising a first data source and a second data source, wherein the second data source is a data subset of the first data source populated with results of previously executing queries; a runtime component; a processor which, when configured with the runtime component, performs an operation. The operation comprises: performing a comparative analysis between a structure of a query received for execution and a structure of a previously executed query to determine a difference in scope with respect to results; upon determining that a results scope of the query is greater than the previously executed query, executing the restructured query against the first data source; and upon determining that the results scope of the query is less than the previously executed query: (i) restructuring the query; and (ii) executing the restructured query against the second data source.","Methods, systems and articles of manufacture are provided for a query analysis approach used to identify \u201cnondestructive\u201d and \u201cdestructive\u201d query modifications. In one aspect, a \u201cnon-destructive\u201d query is one which does not return any additional results relative to results returned by a previously executed query or queries. Conversely, a \u201cdestructive\u201d query is one which does return additional results relative to results returned by a previously executed query. According to one embodiment, the differences between a current query and one or more previous queries are analyzed to determine whether the current query is destructive or nondestructive relative to the one or more previous queries. If the current query is destructive relative to all prior queries, the query is executed against the complete data repository (e.g., database or data warehouse). If the current query is nondestructive with respect to at least one query, the query is executed against a data subset of the complete data repository.","To illustrate aspects of a nondestructive query, consider the following queries:",{"@attributes":{"id":"p-0027","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":"SELECT gender, name, age FROM demographics WHERE age>50"}},{"@attributes":{"id":"p-0028","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":"SELECT name, age FROM demographics WHERE age>50 and gender=\u201cfemale\u201d"}},"In this case, the Subsequent Query differs from Initial Query in that (i) the Subsequent Query eliminates a result field (gender) and (ii) the Subsequent Query includes an ANDed condition involving a field generated by the Initial Query. Both modifications are non-destructive in that neither returns a result not returned by the Initial Query. As such, the Subsequent Query is considered to be non-destructive with respect to the Initial Query. Steps may then be taken to restructure the Subsequent Query so that the restructured Subsequent Query is executed against a results subset of total results of the database.","Although reference is made to SQL in some embodiments, non-SQL query languages are within the scope of the present invention.","One embodiment of the invention is implemented as a program product for use with a computer system. The program(s) of the program product defines functions of the embodiments (including the methods described herein) and can be contained on a variety of signal-bearing media. Illustrative signal-bearing media include, but are not limited to: (i) information permanently stored on non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM disks readable by a CD-ROM drive); (ii) alterable information stored on writable storage media (e.g., floppy disks within a diskette drive or hard-disk drive); and (iii) information conveyed to a computer by a communications medium, such as through a computer or telephone network, including wireless communications. The latter embodiment specifically includes information downloaded from the Internet and other networks. Such signal-bearing media, when carrying computer-readable instructions that direct the functions of the present invention, represent embodiments of the present invention.","In general, the routines executed to implement the embodiments of the invention, may be part of an operating system or a specific application, component, program, module, object, or sequence of instructions. The computer program of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine-readable format and hence executable instructions. Also, programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition, various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However, it should be appreciated that any particular program nomenclature that follows is used merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and\/or implied by such nomenclature.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1","b":["100","100","102","102","104","104","102","104","126","126","126"]},"The client computer  includes a Central Processing Unit (CPU)  connected via a bus  to a memory , storage , an input device , an output device , and a network interface device . The input device  can be any device to give input to the client computer . For example, a keyboard, keypad, light-pen, touch-screen, track-ball, or speech recognition unit, audio\/video player, and the like could be used. The output device  can be any device to give output to the user, e.g., any conventional display screen. Although shown separately from the input device , the output device  and input device  could be combined. For example, a display screen with an integrated touch-screen, a display with an integrated keyboard, or a speech recognition unit combined with a text speech converter could be used.","The network interface device  may be any entry\/exit device configured to allow network communications between the client computer  and the server computer  via the network . For example, the network interface device  may be a network adapter or other network interface card (NIC).","Storage  is preferably a Direct Access Storage Device (DASD). Although it is shown as a single unit, it could be a combination of fixed and\/or removable storage devices, such as fixed disc drives, floppy disc drives, tape drives, removable memory cards, or optical storage. The memory  and storage  could be part of one virtual address space spanning multiple primary and secondary storage devices.","The memory  is preferably a random access memory sufficiently large to hold the necessary programming and data structures of the invention. While the memory  is shown as a single entity, it should be understood that the memory  may in fact comprise a plurality of modules, and that the memory  may exist at multiple levels, from high speed registers and caches to lower speed but larger DRAM chips.","Illustratively, the memory  contains an operating system . Illustrative operating systems, which may be used to advantage, include Linux and Microsoft's Windows\u00ae. More generally, any operating system supporting the functions disclosed herein may be used.","The memory  is also shown containing a UI program  that, when executed on CPU , provides support for navigating between the various servers  and locating network addresses at one or more of the servers . In one embodiment, the UI program  includes a web-based Graphical User Interface (GUI), i.e., a browser, which allows the user to display Hyper Text Markup Language (HTML) information. More generally, however, the UI program  is representative of any user interface (whether or not GUI-based) capable of rendering the information transmitted from the server computer .","The server computer  may be physically arranged in a manner similar to the client computer . Accordingly, the server computer  is shown generally comprising a CPU , a memory , and a storage device , coupled to one another by a bus . Memory  may be a random access memory sufficiently large to hold the necessary programming and data structures that are located on the server computer .","The server computer  is generally under the control of an operating system  shown residing in memory . Examples of the operating system  include IBM OS\/400\u00ae, UNIX, Microsoft Windows\u00ae, and the like. More generally, any operating system capable of supporting the functions described herein may be used. The server computer  includes databases . . . , collectively referred to as database(s) . The databases  are representative of any collection of data regardless of the particular physical representation\/arrangement or schema. By way of illustration, the databases  may be organized according to a relational schema (accessible by SQL queries) or according to an XML schema (accessible by XML queries). However, again, the invention is not limited to a particular schema and contemplates extension to schemas presently unknown.","The server computer  further includes a secondary data source  (where the databases  may be considered a primary data source). Generally, the secondary data source  comprises one or more data structures containing results from a previously executed query or queries. For convenience, these data structures will be referred to herein as temporary tables  but more generally may be any data structure containing previous results and may be relational or non-relational. In one embodiment, the temporary tables  represent cached results from previous queries executed against the databases , and which may be deleted after a period of time. As such, the temporary tables  are results subsets of the databases .","The server computer  further includes a cache  of previously executed queries. Generally, the cache  is representative of any temporary or persistent data structure(s) containing one or more queries previously executed against the databases  and, in one embodiment, one or more queries previously executed against the secondary data source .","Although shown separately, the cached previous queries may be included with the results contained in the temporary tables . Specifically, each temporary table  may contain a previously executed query and its respective results. Where the previously executed queries and their respective results are stored separately (as shown), each previously executed query may be associated with its respective results by pointers, where the pointers cross-reference the respective queries and temporary tables ).","Illustratively, the databases , the secondary data sources  and the cached queries  are shown as part of a database management system (DBMS)  in storage . Illustratively, the DBMS  comprises the \u201cDB2\u201d product offered by the IBM Corporation for the \u201cMVS\u201d, \u201cAIX\u201d, or \u201cOS\/2\u201d operating systems. Generally, those skilled in the art will recognize that the present invention has application to any DBMS software that uses SQL, and may similarly be applied to non-SQL queries. More generally, however, it should be understood that the data to be accessed (i.e., the databases , the temporary tables , and the cached queries ) need not be part of a DBMS at all; there need only be a means to associate a prior query with the results generated by that query. Further, some or all of the data may reside locally on the client computer . However, a networked environment such as the one shown in , may be preferred for its capability of supporting a multi-user, multi-transaction environment.","The memory  further includes an application  and a runtime component , which includes a query analysis algorithm . The application  and runtime component  are software products comprising a plurality of instructions that are resident at various times in various memory and storage devices in the computer system . When read and executed by one or more processors  in the server , the application  and\/or runtime component  cause the computer system  to perform the steps necessary to execute steps or elements embodying the various aspects of the invention. Although shown as separate elements, in one embodiment, the runtime component  may integral with the DBMS . However, by providing the runtime component  separately from the DBMS , it is contemplated that the runtime component  may service a plurality of database management systems capable of executing queries received from the runtime component .","In one embodiment, elements of a query are specified by a user through a graphical user interface (GUI) represented by the UI program . The content of the GUIs may be generated by the application . In a particular embodiment, the GUI content is hypertext markup language (HTML) content which may be rendered on the client computer systems  with the UI program . Accordingly, the memory  includes a Hypertext Transfer Protocol (http) server process  (e.g., a web server) adapted to service requests from the client computer . For example, the process  may respond to requests to access a database(s) , which illustratively resides on the server . Incoming client requests for data from a database  invoke the application . When executed by the processor , the application  causes the server computer  to perform the steps or elements embodying the various aspects of the invention, including accessing the database(s) . In one embodiment, the application  comprises a plurality of servlets configured to build GUI elements, which are then rendered by the UI program .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 1","FIG. 1"],"b":["102","104","152"]},"Referring now to , the relationship between a requesting entity , the runtime component  and the databases  is shown. In general, the requesting entity  may be any entity issuing a request (i.e., query) to access the databases , including the application , the operating system  and, at the highest level, an end user. The run-time component  receives the queries from the requesting entity  and performs an analysis according to the query analysis algorithm . Specifically, the query analysis algorithm  performs a comparative analysis between a current query received from the requesting entity  and one or more previously executed queries (stored in the previous queries cache ). The comparative analysis examines the structure of the current query and the one or more previously executed queries to determine a relative scope of the queries with respect to results. Depending upon the outcome of the comparative analysis, the current query is executed either against the complete data repository  or against one or more temporary tables .","Referring now to , an illustrative run-time environment  shown. Generally, the run-time environment  includes the requesting entity , the runtime component  and a data source (illustratively the DBMS ). Initially, the requesting entity issues an initial query (step ). The term \u201cinitial\u201d is used to indicate a query issued by the requesting entity  when no temporary table  exists. The initial query is received (step ) by the runtime component , cached (data flow arrow ) and then submitted to the DBMS  for execution (step ). Because no temporary table  exists, the initial query is executed against the primary data source, i.e., the database . The results of the execution are stored to the secondary data source , as indicated by the data flow arrow . In particular, the results are stored to a temporary table . Although not shown, the results are also returned to the requesting entity  via the runtime component .","Subsequently, the requesting entity  issues another query (step ). In one embodiment, features may be implemented to explicitly designate the subsequent query as a variation or modification of a previous query (e.g., the initial query). For example, it is a common feature of user interfaces configured for query construction to provide users with a \u201cModified Query\u201d option, whereby the user is presented with the last executed query. Such a feature allows users to iteratively execute and recraft queries until the desired results are returned without having to re-enter the entire query each time. Accordingly, one embodiment of the present invention uses such a feature to advantage. Specifically, when user input indicates a subsequent query as being a modification or variation of a previously executed query, then the comparative analysis described below is performed; otherwise, the analysis is not performed. Of course, persons skilled in the art will recognize that the analysis may simply be performed for each query, regardless of whether a user has indicated the query as being a modified version of a previous query. In another embodiment, the user interface may be configured with a selectable option allowing only non-destructive changes, ensuring the modified query can be used against results of the initial query. Other user-selectable options available through the user interface are contemplated.","Upon receiving and caching the subsequent query (step ), the query analysis algorithm  is invoked (step ) to determine whether the subsequent query is destructive or nondestructive with respect to the initial query (which is stored in the cache ). More generally, the analysis may be performed with respect to any previously executed query or combination of queries. One embodiment of the analysis performed by the query analysis algorithm  is described below with respect to FIG. . If the subsequent query is determined to be destructive, the query is executed against the entire database  (step ). The results of the query execution are stored to the secondary data source  (represented by data flow arrow ). In one embodiment, the results are stored to the temporary table  containing the results of the initial query (and, more generally, the results of all previously executed queries). In another embodiment, the results are stored to a separate temporary table , such that each subsequent query executed against the entire database  causes population of a separate temporary table .","If, however, the subsequent query is determined to be nondestructive, the query is modified according to the schema and data of the temporary table  (step ) and cached (data flow line ). The restructured query is then executed against the secondary data source . In one embodiment, where the subsequent query is determined to be a modification or variation of a previously executed query (e.g., the initial query), the subsequent query is executed against the temporary table  containing only the results of the previously executed query. In any case, the results of execution may then be returned to the requesting entity .","Referring now to , one embodiment of the step  for determining whether the subsequent query it is destructive or nondestructive is shown. At step , the query analysis algorithm  determines the differences between the initial query and the subsequent query. A loop is then entered at step  for each difference determined at step . For each difference, the algorithm  determines whether the difference is destructive (step ). If so, the subsequent query is flagged as being destructive (step ), and the algorithm exits. If no destructive differences are found, the subsequent query is flagged as nondestructive (step ).","A list of exemplary rules for determining whether a query is destructive or nondestructive with respect to a previous query is shown in the following Table. It should be emphasized that the Table is exemplary, not exhaustive. Persons skilled in the art will readily recognize other rules.",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":[{},"Destructive of"]},{"entry":["Type of Change","Non-Destructive"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Add sorting of results","Non-Destructive"]},{"entry":["Sort on different result fields","Non-Destructive"]},{"entry":["Reorder result fields","Non-Destructive"]},{"entry":["Remove result fields","Non-Destructive"]},{"entry":["Add ANDed query condition involving result field","Non-Destructive"]},{"entry":"found in the initial query results"},{"entry":["Make query condition more restrictive AND field","Non-Destructive"]},{"entry":"involved in condition is in initial query results"},{"entry":["Rename result fields","Non-Destructive"]},{"entry":["Conversion of results from initial query","Non-Destructive"]},{"entry":["Make query condition less restrictive","Destructive"]},{"entry":["Add result fields","Destructive"]},{"entry":["Add ANDed query condition involving result field","Destructive"]},{"entry":"NOT found in the initial query results"},{"entry":["Add new ORed query condition","Destructive"]},{"entry":["Make query condition more restrictive AND field","Destructive"]},{"entry":"Involved in condition is NOT in initial query results"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0057","num":"0000"},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":["PREVIOUS QUERY:","SELECT NAME, SALARY FROM EMPTABLE","SUBSEQUENT QUERY:","SELECT NAME, SALARY FROM EMPTABLE ORDER BY SALARY"]}},{"@attributes":{"id":"p-0058","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["PREVIOUS QUERY:","SELECT NAME, SALARY FROM EMPTABLE ORDER BY SALARY","SUBSEQUENT QUERY:","SELECT NAME, SALARY FROM EMPTABLE ORDER BY NAME"]}},{"@attributes":{"id":"p-0059","num":"0000"},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":["PREVIOUS QUERY:","SELECT NAME, SALARY FROM EMPTABLE","SUBSEQUENT QUERY:","SELECT SALARY, NAME FROM EMPTABLE"]}},{"@attributes":{"id":"p-0060","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["PREVIOUS QUERY:","SELECT NAME, SALARY FROM EMPTABLE","SUBSEQUENT QUERY:","SELECT NAME FROM EMPTABLE"]}},{"@attributes":{"id":"p-0061","num":"0000"},"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":["PREVIOUS QUERY:","SELECT NAME, SALARY FROM EMPTABLE","SUBSEQUENT QUERY:","SELECT NAME, SALARY FROM EMPTABLE WHERE SALARY>100000"]}},{"@attributes":{"id":"p-0062","num":"0000"},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":["PREVIOUS QUERY:","SELECT NAME, SALARY FROM EMPTABLE WHERE SALARY>100000","SUBSEQUENT QUERY:","SELECT NAME, SALARY FROM EMPTABLE WHERE SALARY>200000"]}},{"@attributes":{"id":"p-0063","num":"0000"},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":["PREVIOUS QUERY:","SELECT NAME, SALARY FROM EMPTABLE","SUBSEQUENT QUERY:","SELECT NAME AS \u201cFIRST NAME\u201d, SALARY FROM EMPTABLE"]}},{"@attributes":{"id":"p-0064","num":"0000"},"ul":{"@attributes":{"id":"ul0010","list-style":"none"},"li":["PREVIOUS QUERY:","SELECT FIRSTNAME, LASTNAME FROM EMPTABLE","SUBSEQUENT QUERY:","SELECT FIRSTNAME \u2225\u2018,\u2019\u2225 LASTNAME FROM EMPTABLE"]}},{"@attributes":{"id":"p-0065","num":"0000"},"ul":{"@attributes":{"id":"ul0011","list-style":"none"},"li":["PREVIOUS QUERY:","SELECT NAME, SALARY FROM EMPTABLE WHERE SALARY>100000","SUBSEQUENT QUERY:","SELECT NAME, SALARY FROM EMPTABLE WHERE SALARY>50000"]}},{"@attributes":{"id":"p-0066","num":"0000"},"ul":{"@attributes":{"id":"ul0012","list-style":"none"},"li":["PREVIOUS QUERY:","SELECT NAME, SALARY FROM EMPTABLE","SUBSEQUENT QUERY:","SELECT NAME, SALARY, AGE FROM EMPTABLE"]}},{"@attributes":{"id":"p-0067","num":"0000"},"ul":{"@attributes":{"id":"ul0013","list-style":"none"},"li":["PREVIOUS QUERY:","SELECT NAME, SALARY FROM EMPTABLE","SUBSEQUENT QUERY:","SELECT NAME, SALARY FROM EMPTABLE WHERE AGE>40"]}},{"@attributes":{"id":"p-0068","num":"0000"},"ul":{"@attributes":{"id":"ul0014","list-style":"none"},"li":["PREVIOUS QUERY:","SELECT NAME, SALARY FROM EMPTABLE WHERE SALARY>100000","SUBSEQUENT QUERY:","SELECT NAME, SALARY FORM EMPTABLE WHERE SALARY>100000 OR NAME=\u2018SMITH\u2019"]}},{"@attributes":{"id":"p-0069","num":"0000"},"ul":{"@attributes":{"id":"ul0015","list-style":"none"},"li":["PREVIOUS QUERY:","SELECT NAME, SALARY FROM EMPTABLE WHERE AGE>40","SUBSEQUENT QUERY:","SELECT NAME, SALARY FROM EMPTABLE WHERE AGE>50"]}},"As noted above, the comparative analysis implemented by the query analysis algorithm  need not be restricted to the \u201cinitial\u201d query nor to any other single query. Rather, the comparative analysis may be performed between the current\/subsequent query and each of the cached previously executed queries, or some subset of those queries. Accordingly, in some embodiments, the query analysis algorithm  may determine that the current query is nondestructive with respect to more than one previously executed query, where each previously executed query has its own temporary table . In such cases, it is contemplated that the current query may be executed against the temporary table having the least data. In other embodiments, the previously executed queries may be comparatively analyzed with respect to the current query according to the sizes of their respective temporary table. Specifically, analysis may proceed from the previously executed query having the smallest temporary table to the previously executed query having the largest temporary table. Analysis may be completed upon determining a nondestructive relationship between the current query and a previously executed query. In this manner, overhead may be minimized. Persons skilled in the art will recognize other techniques which may be used to reduce overhead.","While the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited features, advantages and objects of the present invention are attained and can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to the embodiments thereof which are illustrated in the appended drawings.","It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
