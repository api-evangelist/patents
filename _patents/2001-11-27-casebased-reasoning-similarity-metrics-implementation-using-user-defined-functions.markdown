---
title: Case-based reasoning similarity metrics implementation using user defined functions
abstract: A database system and a method for case-based reasoning are disclosed. The database system includes an exemplar object within the database configured to accept and store a plurality of exemplar cases, a target object within the database configured to accept and store a target case, and a comparison object within the database for comparing the target case with the plurality of exemplar cases. The method includes comparing the target case with the plurality of exemplar cases within a database to produce similarity metrics and determining the similarity between the target and exemplar cases based on the similarity metrics.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07136852&OS=07136852&RS=07136852
owner: NCR Corp.
number: 07136852
owner_city: Dayton
owner_country: US
publication_date: 20011127
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Case-based reasoning, illustrated in , compares features of known problems and solutions (referred to as \u201cexemplar cases\u201d  or simply \u201cexemplars\u201d) to features of a new problem (referred to as a \u201ctarget case\u201d ). The exemplar cases may be organized into domains, such as exemplar case domains  and . The result of the comparison between each feature of the target case and the corresponding feature of the exemplar case is a similarity metric, representing the degree of matching between the features. The advantage of case-based reasoning is that it is quicker to develop and easier to maintain than other forms of artificial intelligence.","Databases are useful for case-based reasoning because they can store large amounts of data and retrieve it quickly. This is particularly useful for storing vast numbers of exemplars. In an existing case-based reasoning system using a database, illustrated in , data (e.g., a target case and a set of exemplar cases) is extracted from a database  and provided to an external program . The external program  compares the target case to each exemplar case and returns a similarity metric for each comparison to the database system. The database system then selects exemplar cases that best match the target case-based on the similarity metrics. Note that the target case could be retrieved from some source other than the database.","In general, in one aspect, the invention features a database system. The database system includes an exemplar object within the database configured to accept and store a plurality of exemplar cases, a target object within the database configured to accept and store a target case, and a comparison object within the database for comparing the target case with the plurality of exemplar cases.","Implementations of the invention may include one or more of the following. The exemplar object may include an attribute of a schema and the comparison object may include a method of the schema. The exemplar object may include a user defined type which may be implemented using an object relational database. The target object may include an attribute of a schema. The target object schema may include a user defined type which may be implemented using an object relational database. The exemplar object may include a database table and the target object may include a database table. The comparison object may include a macro.","The database system may further include a means of grouping exemplar cases into domains, where the exemplar case may be a member of more than one domain.","The database system may further include a user interface allowing the pruning of domains to exclude from comparison with the target case.","The target case may include a target feature and the exemplar case may include an exemplar feature. A user interface may allow population of the target features. A user interface may allow population of the exemplar feature.","The comparison object may include a user defined function. The user defined function may calculate a similarity metric representing the similarity between the target feature and the exemplar feature. The user defined function may perform mathematical operations to determine the similarity metric. The user defined function, in calculating the similarity metric, may determine the relationships between nodes representing the target feature and the exemplar feature in a hierarchical structure. The target case may include a plurality of target features and each exemplar case may include a corresponding plurality of exemplar features. The user defined function may compare the target case with each of the exemplar cases, and determine an overall match factor for each comparison. The user defined function may determine the overall match factor by computing similarity metrics. The user defined function may compute similarity metrics by comparing each target feature in the target case with the corresponding exemplar feature in an exemplar case and summing the similarity metrics.","The user defined function may determine the similarity metrics by comparing each target feature in the target case with the corresponding exemplar feature in the exemplar case. The user defined function may create a weighted similarity metric by multiplying the similarity metrics by a weight associated with that similarity metric. The user defined function may determine the overall match factor by summing the weighted similarity metrics.","The user defined function may indirectly recognize the similarity between the target and exemplar case. The user defined function may be aware of features which are indicative of a finding and the user defined function may recognize that the target case possesses the feature indicative of the finding exemplified by the exemplar case, even when the exemplar case lacks that feature. The user defined function may be aware of features, the lack of which are indicative of a finding and the user defined function may recognize that the target case lacks a feature, the lack of which is indicative of the finding exemplified by the exemplar case, even when the exemplar case possesses that feature.","In general, in another aspect, the invention features a method for implementing a case-based reasoning system including comparing a target case with a plurality of exemplar cases within a database to produce similarity metrics and determining the similarity between the target and exemplar cases based on the similarity metrics.","Implementations of the invention may include one or more of the following. Comparing may include not spawning a process external to the database. Comparing may include not running an external program. Comparing may include using a user defined function of the database. Comparing may include determining which of the exemplar cases best matches the target case.","In general, in another aspect, the invention features a method for implementing a database function, including accepting a target case for comparison and comparing, within the database, the target case with a plurality of the exemplar cases stored in the database.","In general, in another aspect, the invention features a method for implementing a case-based reasoning system including accepting information representing a target case, accepting weights to apply to a set of respective similarity metrics, accepting the number of closest matching exemplar cases the user wants to review, formulating and executing, within the database, a comparison between the target case and the exemplar cases yielding the similarity metrics for that exemplar case, deriving an overall match factor for each of the exemplar cases from the similarity metrics, weighed by their weights and reporting one or more of the closest matching exemplar cases.","In general, in another aspect, the invention features a database system for accessing a database. The database system includes a massively parallel processing system including one or more nodes, a plurality of CPUs, each of the one or more nodes providing access to one or more CPUs, a plurality of virtual processes each of the one or more CPUs providing access to one or more processes, each process configured to manage data stored in one of a plurality of data-storage facilities. The database system includes a case-based reasoning system. The case-based reasoning system includes an exemplar object within the database configured to accept and store a plurality of exemplar cases such that they are distributed evenly among the data storage facilities. The case-based reasoning system also includes a target object within the database configured to accept and store a target case. The case-based reasoning system also includes a comparison object within the database for comparing the target case with the plurality of exemplar cases.","Other features and advantages will become apparent from the description and claims that follow.","The case-based reasoning system disclosed herein has particular application to large databases that might contain many millions or billions of records managed by a database system , such as a Teradata Active Data Warehousing System available from NCR Corporation.  shows a sample architecture for one node of the database system . The database system node includes one or more processing modules , connected by a network  that manage the storage and retrieval of data in data-storage facilities . Each of the processing modules may be one or more physical processors or each may be a virtual processor, with one or more virtual processors running on one or more physical processors. Persons of ordinary skill will recognize that the \u201cN\u201d used in  is not the same as the \u201cN\u201d used in  or in other Figures described herein. The use of \u201cN\u201d, \u201cM\u201d, \u201cZ\u201d or the like in describing any Figure herein is intended to convey the idea of an arbitrary constant number.","For the case in which one or more virtual processors are running on a single physical processor, the single physical processor swaps between the set of N virtual processors.","For the case in which N virtual processors are running on an M-processor node, the node's operating system schedules the N virtual processors to run on its set of M physical processors. If there are 4 virtual processors and 4 physical processors, then typically each virtual processor would run on its own physical processor. If there are 8 virtual processors and 4 physical processors, the operating system would schedule the 8 virtual processors against the 4 physical processors, in which case swapping of the virtual processors would occur.","Each of the processing modules manages a portion of a database that is stored in a corresponding one of the data-storage facilities . . . N. Each of the data-storage facilities includes one or more disk drives. The database system may include multiple nodes in addition to the illustrated node , connected by extending the network .","The system stores data in one or more tables in the data-storage facilities . The rows of the tables are stored across multiple data-storage facilities to ensure that the system workload is distributed evenly across the processing modules . A parsing engine  organizes the storage of data and the distribution of table rows among the processing modules . The parsing engine  also coordinates the retrieval of data from the data-storage facilities in response to queries received from a user at a mainframe  or a client computer . The database system  usually receives queries in a standard format, such as SQL.","In one example system, the parsing engine  is made up of three components: a session control , a parser , and a dispatcher , as shown in . The session control  provides the logon and logoff function. It accepts a request for authorization to access the database, verifies it, and then either allows or disallows the access.","Once the session control  allows a session to begin, a user may submit a SQL request that is routed to the parser . As illustrated in , the parser  interprets the SQL request (block ), checks it for proper SQL syntax (block ), evaluates it semantically (block ), and consults a data dictionary to ensure that all of the objects specified in the SQL request actually exist and that the user has the authority to perform the request (block ). Finally, the parser  runs an optimizer (block ) that develops the least expensive plan to perform the request.","In one example of a CBR system, illustrated in , a database system  consists of an exemplar object , a target object , and a comparison object . The exemplar object  contains exemplar cases and the target object  contains a target case . The comparison object  compares the exemplar cases with the target case  and determines the exemplar case or cases (e.g., ) that best match the target case .","In one example, the exemplar object  and the target object  may be database tables. The comparison object  may be a set of commands executed in database, possibly as a macro. In another example, using SQL-99 or similar database languages, the exemplar object  and the target object  may be attributes of a User Defined Type (UDT). A UDT is a type of schema, or data grouping. In database programming, a schema is analogous to an object in other programming languages because the schema contains data (properties of the object) and functions that operate on the data (functionality of the object) in a single unit. The comparison object  may be one or more methods of the UDT associated with the target object  or one or more methods of the UDT associated with the exemplar object , or one or more methods of a separate UDT.","A user interface  may be a visual or textual front end to the database system  communicating through an application programming interface (API) to the database system . One example of an API is Open Database Connectivity (ODBC). The user interface  may perform the following tasks:\n\n","Target cases are partitioned into features in order to compare them with exemplar cases, as shown in . The target case  is partitioned into target features that correspond with exemplar features associated with the exemplar case . The target case  and the exemplar case  may have one or more features with null values. This will not affect the functionality of the CBR system. Generally, each target feature (e.g., ) can be compared meaningfully to a corresponding exemplar feature (e.g., ). Examples of features for medical cases are: problem duration, findings, signs and symptoms, age, sex, vital signs, occupation, and family history.","The key to a successful CBR system is to have a set of exemplar cases that adequately cover the domain in which the target case  lies. Examples of domains are: product software problems reported to a help desk, medical cases involving brain attack, and machine malfunctions. In some areas, such as medicine, there can be a very large number of domains with many cases covering each domain. Also, the target case  may have to be compared against a number of domains as part of the classification process. While many of the examples described herein are directed to the field of medicine, these techniques can be used in any field, especially where case-based reasoning is used.","In operation, as illustrated in , the comparison object  compares the target case  (contained in the target object ) to each of the exemplar cases (contained in the exemplar object ) to determine the best matching exemplar case or cases . Based on a selection made through the user interface , the comparison object  may return more than one best matching exemplar case (the additional best matching cases are shown in  with dashed lines). For example, the user may want to know the top M matching exemplar cases.","The processing of the comparison object , illustrated in , compares the target case  with each of the exemplar cases (blocks ) to produce an overall match factor (e.g., ) for each comparison. The comparison object  compares the overall match factors to find the best matching exemplar case or cases (block ).","The processing associated with comparing each exemplar case to the target case, illustrated in , includes comparing the target features to corresponding exemplar features (blocks ) with each comparison producing similarity metrics . The similarity metrics are weighted by corresponding weight factors (blocks ), which may be provided through the user interface . The weighted similarity metrics are then summed to produce the overall match factor  (block ).","In an example of the comparison of target features and corresponding exemplar features illustrated in , a target feature  is compared (block ) to an exemplar feature  to produce a similarity metric . The similarity metric  is a numerical measure of the similarity between the target feature  and the exemplar feature .","In one example system, the processing illustrated in  is accomplished in the context of an object relational (O\/R) database. O\/R databases have the following properties that are helpful in performing the feature comparison process:\n\n","If the database uses a massively parallel processing (MPP) architecture, the CBR system can apply UDFs to database elements in parallel. Unlike traditional implementations of CBR systems, the parallelism of a database using a MPP architecture allows multiple instances of the UDFs to execute concurrently, speeding execution.","The comparison  may be evaluated using only standard SQL supported comparison and mathematical operations. However, more advanced comparisons may be implemented using UDFs. With UDFs, the comparison between the target case and the exemplar cases can be preformed entirely within the database system, as shown in . Consequently, the external software , illustrated in , is not necessary in a database system using UDFs.","In one example, a UDF returns a similarity metric value of \u201c1\u201d\u2014if the target feature  and the exemplar feature  are identical. The UDF below, which is from the medical domain, returns a similarity metric of \u201c1\u201d if the symptoms are identical in the two cases:\n\n","In another example, the similarity metric  is assigned a value of \u201c1\u201d if both the target feature  and the exemplar feature  are within a specified range. If the target feature  or the exemplar feature  fall outside the specified range, the similarity metric  is assigned a value of \u201c0\u201d. For example, assume the target feature  has a value of \u201c5,\u201d exemplar feature  has a value of \u201c3,\u201d and the desired range is from \u201c1\u201d to \u201c8.\u201d In this case, the similarity metric  will be assigned a value of \u201c1\u201d because both the target feature  and the exemplar feature  are within the specified range. The UDF for implementing this range match could be written as follows:\n\n","The user defined comparison functions are not limited to simple matching or mathematical operations. They can perform complex operations on the data, such as image processing. This is illustrated by the pseudocode below, where the target feature  is a MRI scan. The UDF assigns a value of \u201c1\u201d to the similarity metric  if the scan shows the presence of a tumor, otherwise the UDF assigns a value of \u201c0\u201d to the similarity metric. The UDF for implementing this imaging match could be written as follows:\n\n","In another example UDF, the similarity metric  would be related to the ratio of the target feature  to the exemplar feature . For example, if the target feature  and the exemplar feature  were equal, then the similarity metric  would be \u201c1\u201d. If they were not equal, the similarity metric  would have some value less than \u201c1.\u201d The UDF for implementing this ratio match could be written as follows:","RatioMatch (targetSize) real",{"@attributes":{"id":"p-0054","num":"0000"},"ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":{"@attributes":{"id":"ul0017-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0018","list-style":"none"},"li":["(if targetSize>exemplarSize\n        \n        ",")"]}}}},"In another example UDF, the similarity metric  would be the inverse distance between nodes which correspond to the target feature  and the exemplar feature  in a hierarchical structure. In a more specific example, this hierarchical structure would be a simple binary tree where the target feature  and the exemplar feature  correspond to nodes in the tree. An algorithm would be employed within a UDF to walk between the two nodes, thereby finding the distance between them. This is only one example of a hierarchical structures that the could be analyzed using a UDF. Further, other UDFs might calculate other measures of the relationships of elements in a given hierarchical structure. For example, another UDF could calculate the distance between two elements on only one axis.","In another example UDF, the similarity metric  would be equal to \u201c1\u201d if the target value  is a member of a set of values. Otherwise, the similarity metric  would be equal to \u201c0\u201d.","In some domains, target features must be compared not only to the actual exemplar values but to \u201cpossible values\u201d associated with the problem identified in the exemplar case (e.g., ). Matching beyond the actual feature values of the target case  and exemplar cases is known as \u201cindirect matching.\u201d This is illustrated in the following medical case analysis. The patient represented in the target case  smokes. The patient represented by the exemplar case (e.g., ) does not. Normally, in an exact match of social history this would result in a similarity of 0.0 (assuming no other social history items). However, in the exemplar case (e.g., ), the finding is subarachnoid hemorrhage. Smoking is a risk factor for subarachnoid hemorrhage. Therefore, applying the concept of indirect match would result in a similarity of 1.0 for this feature.","Another important element of feature matching is the application of an ontology such as the Unified Medical Language System. An ontology finds matches in the following situations:\n\n","The operation of the CBR system, illustrated in , begins by populating the database system  with exemplar cases (block ). The database system  accepts a target case  (block ) and enters a loop in which it compares the target case with each exemplar case. In the loop, the database system  compares the target case  with the first exemplar case , (block ). The result of the case comparison (block ) is the overall match factor  for the exemplar case (e.g., ) currently being compared with the target case . The overall match factor (e.g., ) is stored, possibly in a temporary table in the database system  (block ). The database system  then determines if there are more exemplar cases to compare with the target case  (block ). If there are more, the next exemplar case (e.g., ) is compared with the target case  (block ), and the resulting overall match factor (e.g., ) is stored (block ). The cycle repeats until all the exemplar cases are exhausted. Finally, the database system  compares all of the stored overall match factors to determine the exemplar case or cases  that best match the target case (block ).","The comparison of a target case  and an exemplar case  (block ), illustrated in , begins by comparing the first feature of the target case  and the corresponding feature of the exemplar case  (block ). The resulting similarity metric  is stored, possibly in a temporary database table (block ). The database system  then determines if the target case  and exemplar case  have more features to compare (block ). If so, the database system  compares the next set of corresponding features from the target case  and the exemplar case  (block ). The database system continues to compare features (block ) and store similarity metrics (block ) until all the corresponding pairs of features from the target case  and the exemplar case  have been compared.","Once there are no more features to compare the database system  weights the similarity metrics by their corresponding weights, which may have been provided through the user interface  (block ). The weighted similarity metrics are summed (block ) producing an overall match factor .","An example of an implementation of a CBR system follows:","Assuming the existence of the user defined functions for calculating similarity metrics created above and the following database tables:",{"@attributes":{"id":"p-0063","num":"0097"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Table Exemplars","(CaseID","integer,"]},{"entry":[{},{},"\u2009Symptoms","char,"]},{"entry":[{},{},"\u2009Diagnosis","char(100),"]},{"entry":[{},{},"\u2009Age","integer,"]},{"entry":[{},{},"\u2009MRI_Scan","DICOM3"]},{"entry":[{},{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0064","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Table SimilarityMetrics","(CaseID","integer,"]},{"entry":[{},{},"\u2009SymptomMatch","integer,"]},{"entry":[{},{},"\u2009AgeMatch","integer,"]},{"entry":[{},{},"\u2009TumorMatch","integer"]},{"entry":[{},{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":[{},{}],"ul":{"@attributes":{"id":"ul0022","list-style":"none"},"li":{"@attributes":{"id":"ul0022-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0023","list-style":"none"},"li":"VALUES (CaseID,\n        \n        "}}}},"The INSERT query executes the similarity calculations for the target case against each of the stored exemplar cases and stores the results in the SimilarityMetrics table. In the example shown, the target case has a symptom of \u201cdizziness\u201d, an age of 50, and shows the presence of a tumor (represented by the value \u201c1\u201d in the XOR expression). For the RangeMatch UDF, a range of \u201c40\u201d to \u201c60\u201d is specified. If there were no tumor present in the target case then the final expression in the INSERT parameter list would be NOT(TumorPresence XOR 0).","The SELECT query calculates an overall similarity match as a percentage (0\u2013100%) for each exemplar case by averaging the individual similarity measures stored in the SymptomMatchtable to produce percentMatch. The results are ordered by percentMatch.","As is readily apparent, the code just described could be modified to include weight factors. In that case, the database might include a table of weight factors and the SELECT statement would include the necessary elements to retrieve the weight factors and to apply them to the similarity metrics. Other modification to this code would be apparent without further elaboration.","The text above described one or more specific embodiments of a broader invention. The invention also is carried out in a variety of alternative embodiments and thus is not limited to those described here. For example, while the invention has been described here in terms of a DBMS that uses a massively parallel processing (MPP) architecture, other types of database systems, including those that use a symmetric multiprocessing (SMP) architecture, are also useful in carrying out the invention. Many other embodiments are also within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
