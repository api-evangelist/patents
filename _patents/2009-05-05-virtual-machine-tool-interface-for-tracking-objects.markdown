---
title: Virtual machine tool interface for tracking objects
abstract: Disclosed is a computer program product to track allocation of a plurality of objects in a heap. A data processing system, during an object allocation, prevents an object from being moved to another place in memory or being deleted. The data processing system prevents such activity concurrently with garbage collection on a second object not currently being allocated. The data processing system notifies a profiler of object information based on the object allocation via a callback function, wherein object information is a one-to-one mapping of the object address. The data processing system revives garbage collector processing of the object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08539452&OS=08539452&RS=08539452
owner: International Business Machines Corporation
number: 08539452
owner_city: Armonk
owner_country: US
publication_date: 20090505
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Field of the Invention","The present invention relates generally to a data processing system and computer program product for debugging and analyzing code executing on a processor. More specifically, the present invention relates to tracking objects and their references to be able to understand what happens with the dynamic memory heap.","2. Description of the Related Art","Most of the programming languages\/run time systems support dynamic memory allocation and reclamation. In object-oriented languages, memory can be reserved and released on a per-object basis, for example, through object allocation and reclamation. In some languages, for example, C++, freeing memory occupied by an object is done explicitly, by calling a special system function. In other object-oriented languages, for example, Java, that support so-called automatic memory management, memory occupied by objects that are not in use anymore is reclaimed automatically by a run time subsystem called a garbage collector. In Java, an object is considered unused and available for reclamation if it is not reachable directly or indirectly from any object graph root. The heap roots can include the set of system classes, Java Native Interface (JNI) globals, references from thread stacks, and other objects used as roots for the purposes of garbage collection. A heap is the area of memory where allocations of memory to objects occur on a dynamic basis.","A memory leak in a program written in a language such as C++, with manual memory management, is a well-known problem that happens when a program does not explicitly free some objects or memory area that is previously reserved. During program execution, allocations without reclamation may repeat over and over again. Accordingly, these allocations may ultimately exhaust all the available memory, thereby causing the program to crash.","In the past, software developers and analysts used Java\u2122 Virtual Machine Profiler Interface (JVMPI) to get various profiling data from the Java Virtual Machine (JVM). Java is a trademark of Sun Microsystems, Inc. For heap profiling, JVMPI has several shortcomings. First, during heap dump (a snapshot of the current heap state), JVMPI creates a shadow copy of the heap, thus doubling the memory requirements. For very large heap sizes, heap dump is not feasible. Moreover, garbage collection is completely suspended during the JVMPI event that notifies a profiler about an object allocation. To identify an object, JVMPI uses an opaque pointer representing an object ID. Starting with the Java version 5.0, JVMPI is deprecated in the favor of new Java Virtual Machine Tool Interface (JVMTI).","As a response to anomalous memory allocation, as well as for other purposes, software developers use Java Virtual Machine Tool Interface (JVMTI) so they may develop debugging, profiling, and monitoring tools for Java\u2122 Virtual Machines or JVMs. For example, JVMTI allows software developers to create software agents that monitor Java programming language applications. An agent registers to be notified about an event of interest by setting a callback function for that event and enabling the event, via calls to the corresponding JVMTI functions. The JVMTI set of functions and events can be extended in the manner described in Java\u2122 Platform Profiling Architecture\u00a9 2004, Sun Microsystems, Inc. Accordingly, new functions and events can be added to the JVMTI.","JVMTI allows a user to attach a tag of type jlong (a 64 bit value) or object tag, to any Java object in the heap. This object tag is continually associated with the Java object, including movements caused by compaction after Garbage Collection (GC). The object tag can be user-supplied, using the JVMTI SetTag function. The object tag can be a mnemonic or other identifier so that an object tag is identifiable with tools that analyze the heap. Accordingly, the JVMTI Heap Iterate function can provide these tag values as a form of object identification when the developer invokes the heap iterate function to reveal the status of active or live objects within the data processing system.","All objects, features, and advantages of the present invention will become apparent in the following detailed written description.","The present invention relates to a computer program product to track allocation of plurality of objects in a heap. A data processing system, during an object allocation, prevents an object from being moved to another place in memory or being deleted. The data processing system prevents such activity concurrently with garbage collection on a second object not currently being allocated. The data processing system notifies a profiler of object information based on the object allocation via a callback function, wherein object information is a one-to-one mapping of the object address. The data processing system revives garbage collector processing of the object. When an object is moved or deleted, the data processing systems may notify a profiler about the old object autotag and a new object autotag.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["100","102","104","106","108","110","100","100","100","100"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 2","FIG. 1"],"b":["200","100","200","202","204","206","208","208","202","206","210","212","214","206","216","218","219","206","214","220","222","224","212","226","228","230"]},"An operating system runs on processor  and is used to coordinate and provide control of various components within data processing system  in . The operating system may be a commercially available operating system such as Windows XP, which is available from Microsoft Corporation. An object-oriented programming system such as Java may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system . \u201cJava\u201d is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented programming system, and applications or programs are located on storage devices, such as hard disk drive , and may be loaded into main memory  for execution by processor .","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash read-only memory (ROM), equivalent nonvolatile memory, or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in . In addition, the processes of the illustrative embodiments may be applied to a multiprocessor data processing system.","For example, data processing system , if optionally configured as a network computer, may not include SCSI host bus adapter , hard disk drive , tape drive , and CD-ROM . In that case, the computer, to be properly called a client computer, includes some type of network communication interface, such as LAN adapter , modem , or the like. As another example, data processing system  may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system  comprises some type of network communication interface. As a further example, data processing system  may be a personal digital assistant (PDA), which is configured with ROM and\/or flash ROM to provide non-volatile memory for storing operating system files and\/or user-generated data.","The depicted example in  and above-described examples are not meant to imply architectural limitations. For example, data processing system  also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system  also may be a kiosk or a Web appliance. The processes of the embodiments can be performed by processor  using computer implemented instructions, which may be located in a memory such as, for example, main memory , memory , or in one or more peripheral devices -.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 3A","b":["300","302","304","304","306","304","316","200","100","304"]},"A profiler is a debugging tool that permits system developers to review the resources that objects use from time to time, such as profiler . Profiler  maintains a repository of object information, including references to live objects in a manner that permits heap dumps. The profiler may use an interface to coordinate and discover object status. The interface can be a JVM Tool Interface (JVMTI), a JVM Profiler Interface (JVMPI), or any other suitable interface. In this example, profiler  relies on JVMTI  to obtain information concerning object allocations, moves and deletes. A class is a description or template for creating instances of objects. The class may include variables, methods, or both. An object is a dynamically created class instance or an array. The allocation of memory and accessing of variables for the object is called instantiation. The manner in which an object is instantiated in written Java code, is to state <Class-name> <object-name>=\u201cnew\u201d<Class-name>. An object can be a class, in which case, the class defines the manner of making an object. Accordingly, the class is a pattern for creating an object of that type. The class can further define the variables that an instantiated object will contain, as well as the methods of the instantiated object. Every object of that type can use variables and methods declared or described in the class.","A heap dump is a snapshot of memory that is allocated. The data of a heap dump shows the hierarchy of objects and the attendant memory utilization of each object, among other things. Because the heap dump is generally larger than most people can thoroughly read, tools to summarize the heap dump and synthesize helpful information are frequently used to help a user locate problem areas that may benefit from some further code development.","Objects and corresponding autotags, explained below, may be sent to the profiler in a buffer, such as buffer . A buffer is a block of memory that receives serial data in a manner that a receiving device or object may serially retrieve and process such data. An object's autotag is an address that indicates the memory location where that object is stored. Alternatively, an autotag can be a one-to-one mapping obtained from an address of the object, in a manner that is unique at a fixed point in time. Such a mapping can be, for example, an address in the object header stripped of some bits, an address rounded on a boundary, an address XORed with a value, etc. The autotags cannot be used for class objects. Instead, the JVMTI uses only object tags for class objects. The object tags can be either stored within the object itself, or in a separate hash table.","The use of an object's address to uniquely distinguish objects is convenient because each non-class object is always assigned a distinct address from any other live object and the JVM does not use any extra space for tag storage. Accordingly, the object's address can form at least part of the autotag corresponding to the object, when the object is a non-class object.","A garbage collector is a JVM component that allows memory occupied by dead objects to be made free for future allocation of objects. The garbage collector may consolidate live objects in memory such that free memory is available in at least one larger contiguous block. In this example, garbage collector , provides information concerning object moves to JVMTI . JVMTI may relay the old address and the new address corresponding to each object so moved. The new address may be used as a subsequently generated object tag. JVMTI  may relay this information to profiler via buffer .","At the center of a Java run-time environment is the JVM, which supports many aspects of Java's environment, including its architecture, security features, mobility across networks and platform independence.","The JVM is a virtual computer, that is, a computer that is specified abstractly. The specification defines certain features that every JVM must implement, with some range of design choices that may depend upon the platform on which the JVM is designed to execute. For example, all JVMs must execute Java bytecodes and may use a range of techniques to execute the instructions represented by the bytecodes. A JVM may be implemented completely in software or somewhat in hardware. This flexibility allows different JVMs to be designed for mainframe computers and PDAs.","The JVM is the name of a virtual computer component that actually executes Java programs. Java programs are not run directly by the central processor but instead by the JVM, which is itself a piece of software running on the processor. The JVM allows Java programs to be executed on a different platform as opposed to only the one platform for which the code was compiled. Java programs are compiled for the JVM. In this manner, Java is able to support applications for many types of data processing systems, which may contain a variety of central processing units and operating systems architectures. To enable a Java application to execute on different types of data processing systems, a compiler typically generates an architecture-neutral file format. The compiled code is executable on many processors, given the presence of the Java run-time system. The Java compiler generates bytecode instructions that are nonspecific to a particular computer architecture. A bytecode is a machine independent code generated by the Java compiler and executed by a Java interpreter. A Java interpreter is part of the JVM that alternately decodes and interprets a bytecode or bytecodes. These bytecode instructions are designed to be easy to interpret on any computer and easily translated on the fly into native machine code. Bytecodes may be translated into native code by a just-in-time compiler or JIT.","A JVM loads class files and executes the bytecodes within them. The class files are loaded by a class loader in the JVM. The class loader loads class files from an application and the class files from the Java application programming interfaces (APIs) which are needed by the application. The execution engine that executes the bytecodes may vary across platforms and implementations.","One type of software-based execution engine is a just-in-time (JIT) compiler. With this type of execution, the bytecodes of a method are compiled to native machine code upon successful fulfillment of some type of criteria for jitting a method. The native machine code for the method is then cached and reused upon the next invocation of the method. The execution engine may also be implemented in hardware and embedded on a chip so that the Java bytecodes are executed natively.","When an application is executed on a JVM that is implemented in software on a platform-specific operating system, a Java application may interact with the host operating system by invoking native methods. A Java method is written in the Java language, compiled to bytecodes, and stored in class files. A native method is written in some other language and compiled to the native machine code of a particular processor. Native methods are stored in a dynamically linked library whose exact form is platform specific.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 3B","b":["350","311","350","304","307","308","310","307","311","307","312","314","308","308"]},"Runtime data areas  contain native method stacks , Java stacks , Program Counter (PC) registers , method area , and heap . These different data areas represent the organization of memory needed by JVM  to execute a program.","Java stacks  are used to store the state of Java method invocations. When a new thread is launched, the JVM creates a new Java stack for the thread. The JVM performs only two operations directly on Java stacks: it pushes and pops frames. A thread's Java stack stores the state of Java method invocations for the thread. The state of a Java method invocation includes its local variables, the parameters with which it was invoked, its return value, if any, and intermediate calculations. Java stacks are composed of stack frames. A stack frame contains the state of a single Java method invocation. When a thread invokes a method, the JVM pushes a new frame onto the Java stack of the thread. When the method completes, the JVM pops the frame for that method and discards it. The JVM does not have any registers for holding intermediate values; any Java instruction that requires or produces an intermediate value uses the stack for holding the intermediate values. In this manner, the Java instruction set is well-defined for a variety of platform architectures.","Program counter (PC) registers  are used to indicate the next instruction to be executed. Each instantiated thread gets its own PC register and Java stack. If the thread is executing a method, the value of the PC register indicates the next instruction to execute. If the thread is executing a native method, then the contents of the PC register are undefined.","Native method stacks  stores the state of invocations of native methods. The state of native method invocations is stored in an implementation-dependent way in native method stacks, registers, or other implementation-dependent memory areas. In some JVM implementations, native method stacks  and Java stacks  are combined.","Method area  contains class data, while heap  contains all instantiated objects. The constant pool is located in method area  in these examples. The JVM specification strictly defines data types and operations. Most JVMs have one method area and one heap, each of which is shared by all threads running inside the JVM, such as JVM . When JVM  loads a class file, it parses information about a type from the binary data contained in the class file. JVM  places this type of information into method area . Each time a class instance or array is created, the memory for the new object is allocated from heap . JVM  includes an instruction that allocates memory space within the memory for heap  but includes no instruction for freeing that space within the memory. Memory management  in the depicted example manages memory space within the memory allocated to heap . Memory management  may include a garbage collector, which automatically reclaims memory used by objects that are no longer referenced. Additionally, a garbage collector also may move objects to reduce heap fragmentation.","The following definitions will be used in the description of the steps used by illustrative embodiments.","A Class is a combination of methods and data that are encapsulated in a file that defines how data are stored and accessed. A class may form a template from which, instances of running code may be created or instantiated.","A client is an executing program that relies on other entities or executing software to access or process data for the client. In some cases, the data to be processed may be a fully qualified class name, and the result returned may be an instance.","A code object or object is code that may be interpreted, JVM compiled, (i.e. bytecodes), or machine language. It may be an example of a class once instantiated for a specific purpose.","Object Instantiator or ObjectInstantiator is a program or class that creates an instance of an object when executed by a processor. The object created by the Object Instantiator conforms to the concept of an object as defined by Object Oriented Programming (OOP), but in general will be an encapsulated representation of actions and data which may or may not inherit from or allow its action and data to be inherited by other objects. The concept of ObjectInstantiator includes object creator or ObjectCreator.","A server is an executing program that acts as a resource to a client. The server may execute on a common computer with the client, or operate on a different computer. The server executes code to provide an output direct to the client, or produce an output or action of the computer or other resources of the server.","A callback function is a pointer to the executable code that is passed as an argument to another function. The callback function can be code, that when executed on a processor, handles an event. Accordingly, a callback function can be used to notify a client that an event has occurred.","In some illustrative examples, data processing system  may be a personal digital assistant (PDA), which is configured with flash memory to provide non-volatile memory for storing operating system files and\/or user-generated data. A bus system may be comprised of one or more buses, such as a system bus, an I\/O bus and a PCI bus. Of course, the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit may include one or more devices used to transmit and receive data, such as a modem or a network adapter. A memory may be, for example, main memory or a cache such as found in north bridge and memory controller hub . A processing unit may include one or more processors or CPUs. The depicted example in  is not meant to imply architectural limitations. For example, data processing system  also may be a tablet computer, laptop computer, or telephone device in addition to taking the form of a PDA.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d, and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","As will be appreciated by one skilled in the art, the present invention may be embodied as a system, method or computer program product. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d, or \u201csystem.\u201d Furthermore, the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.","Any combination of one or more computer usable or computer readable storage device(s) may be utilized. The term \u201ccomputer usable storage device\u201d does not encompass a signal propagation media. The computer-usable or computer-readable storage device may be, for example but not limited to, an electronic, magnetic, optical, or semiconductor system, apparatus, device. More specific examples (a non-exhaustive list) of the computer-readable storage device would include the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a portable compact disc read-only memory (CDROM), an optical storage device or a magnetic storage device. Note that the computer-usable or computer-readable storage device could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured, via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer-usable or computer-readable storage device may be any storage device that can contain or store the program for use by or in connection with the instruction execution system, apparatus, or device.","Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages, including an object-oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","The present invention is described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The aspects of the illustrative embodiments provide a computer implemented method, data processing system, and computer program product for tracking objects using a JVM tool interface. In particular, the JVM tool interface is extended to rely on object autotags to provide unique identifiers for each object. Accordingly, when the garbage collector moves an object, old (before the move) and new object autotags are sent to the profiler. In addition, one or more illustrative embodiments can disable garbage collection from moving or deleting an object while a profiler processes the tracking information for that object's allocation.","In , object allocations, moves and deletes are accomplished by operation of the JVM allocating objects in a heap, and the garbage collector  subsequently moving and deleting objects at appropriate times.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 4A","b":["410","411","430","420","421","430"]},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 4B","b":["451","453"]},{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 4C","FIG. 8","FIG. 9"],"b":["461","463","465"]},{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 5A","FIG. 4C","FIG. 3B"],"b":["531","533","400","533","535","531","535"]},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 5B","b":"501"},"Next, the method releases thread access to the object (step ). The garbage collection process may now move the object. Next, the method determines whether the callback-safe function pointer is set (step ). The callback-safe function pointer may be NULL, and accordingly unset. If so, then processing terminates thereafter. However, if the callback-safe function is set, the method may call the callback-safe function and pass the arguments used by the VM Object Allocation event callback as well as the received argument, for example, callback_safe_function_arg (step ). The arguments used by the VM Object Allocation event callback can be, for example, the JNI environment of the current thread, JNI local reference to the thread allocating the object, JNI local reference to the object that was allocated, JNI local reference to the class of the object, and the size of the object (e.g., in bytes). Processing may terminate thereafter. The interval that during steps  through  is an example of object allocation. Alternatively, object allocation is prior to the callback function returning.","It is appreciated that the allocation event may be further modified to send a notification only for selected objects. The notification can be a call to the callback function. Object selection criteria can be any combination of object attributes, for example, an object's class, size, or the method allocating the object.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 6A","FIG. 3A"],"b":["601","603"]},{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 6B","FIG. 3A"],"b":["611","613","305","615","617","615"]},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 7A","b":["701","703","703","701"]},{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 7B","FIG. 3A"],"b":["711","713","305","715","717","715"]},{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 7C","FIG. 5B"],"b":["731","733","735"]},"It is appreciated that the allocation event may be further modified to selectively mark objects as marked for notification. The profiler can set the return value of the object allocation event callback function to indicate whether an object should be marked for notification. An object allocation event callback function is a function in a profiler, which is called from the JVM when an object has been allocated. The return value of the object allocation event callback function may be the mark, as described above.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 7D","b":["741","743","745"]},{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 8","FIG. 3A","FIG. 4A"],"b":["801","316","430","803","805","805","807","809","803","805"]},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 9","b":["901","903"]},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 10","b":["1001","703","745","1003","1005"]},"The illustrative embodiments permit a user to track objects using a JVM tool interface. Accordingly, by relying on a hash table or other data structures, a heap dump may be produced using fewer data processing resources than is currently possible by the prior art.","It is appreciated that the Java language is described, herein, as an example of a language style known as object oriented programming language. Accordingly, it is a known equivalent to aspects of C++, C#, and other object-oriented languages. Thus, within the scope of the invention are virtual machines in addition to Java Virtual Machines. Accordingly the \u201cobjects\u201d of C++, and C# are also within the meaning of the term \u201cobject\u201d as it is used, herein. Similarly, the term \u201cclass\u201d as used herein, also includes within its meaning the classes as used in other object-oriented programs described in, for example, C++, C#, etc.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The invention can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment, the invention is implemented in software, which includes but is not limited to firmware, resident software, microcode, etc.","Furthermore, the invention can take the form of a computer program product accessible from a computer-usable or computer-readable storage device providing program code for use by or in connection with a computer or any instruction execution system. The term \u201ccomputer usable storage device\u201d does not encompass a signal propagation media. For the purposes of this description, a computer-usable or computer readable storage device can be any tangible apparatus that can contain or store the program for use by or in connection with the instruction execution system, apparatus, or device.","The storage device can be an electronic, magnetic, optical, or semiconductor system (or apparatus or device). Examples of a computer-readable storage device include a semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk-read only memory (CD-ROM), compact disk-read\/write (CD-R\/W) and DVD.","A data processing system suitable for storing and\/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories, which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Input\/output or I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers.","Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7C"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7D"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
