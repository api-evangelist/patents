---
title: Client traffic redirection service
abstract: Disclosed are various embodiments for performing network traffic redirection at the client side. Sending of data to a service at a network address is initiated. Whether the network address is in a predetermined network address range is determined. The network address is translated, when the network address is in the predetermined network address range, to one of multiple other network addresses based at least in part on an availability of the service at the other network address. The data is routed to the other network address.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09032092&OS=09032092&RS=09032092
owner: Amazon Technologies, Inc.
number: 09032092
owner_city: Seattle
owner_country: US
publication_date: 20111228
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Load balancers may be employed to increase the availability of services in enterprise computing environments. Service clients connect to the load balancers, which then route data to and from one of multiple service providers for a particular service. For purposes of failover, multiple load balancers may be used in multiple data centers. In one example, anycast routing may be used to route traffic to multiple load balancers using a single network address. With anycast routing and internet protocol version 4 (IPv4), \u201c\/32\u201d routes may be advertised for each service.","The present disclosure relates to client-side network traffic redirection. Enterprise computing environments may be heavily reliant on load balancers to ensure service availability and provide failover capability. In one example, network traffic for a service may be directed to an anycast address. When the traffic cannot be routed to a first load balancer associated with the anycast address, the network is able to route the traffic to a second load balancer also associated with the anycast address. However, such a configuration may not be scalable for networks with many services since the load balancers may be in different data centers and the anycast addresses may be incapable of aggregation. Consequently, the routing table size in the network may balloon in an unsustainable way.","Various embodiments of the present disclosure provide a client-side alternative for routing network traffic to services. Despite being client-based, the redirection may be completely transparent to the service client application. The service client connects to a service at a predetermined network address (or a predetermined domain name that resolves into a network address). The network address is in a special range of network addresses, which may normally be unroutable by the network. As used herein, the term \u201crange of network addresses\u201d is not limited to merely one subnetwork specifiable by a subnet mask or routing prefix. Thus, in some embodiments, a \u201crange of network addresses\u201d may include multiple subnetworks which may be non-contiguous.","In one embodiment, domain name system (DNS) queries may be used to translate the network address into an actual network address for the service. In another embodiment, a redirection coordination server may provide data to the client to facilitate translation of the network address into the actual network address for the service. A network address translation (NAT) filter in the client routes data destined for the network address to the actual network address. Consequently, the actual network addresses may be aggregable with the networks corresponding to the data centers, thereby reducing the routing table size. In the following discussion, a general description of the system and its components is provided, followed by a discussion of the operation of the same.","With reference to , shown is a computing environment  according to various embodiments. The computing environment  includes one or more clients  that may be in data communication with a plurality of load balancers . . . N, a plurality of service providers , , . . . N, one or more DNS servers , and one or more redirection coordination servers  by way of a network . The clients  may communicate with one or more of the service providers  by way of load balancers . The network  includes, for example, the Internet, intranets, extranets, wide area networks (WANs), local area networks (LANs), wired networks, wireless networks, or other suitable networks, etc., or any combination of two or more such networks.","The computing environment  may include a plurality of computing devices corresponding to the clients , the load balancers , the service providers , the DNS servers , and the redirection coordination servers . The computing devices may comprise, for example, a server computer or any other system providing computing capability. Alternatively, a plurality of computing devices may be employed that are arranged, for example, in one or more server banks or computer banks or other arrangements. For example, a plurality of computing devices together may comprise a cloud computing resource, a grid computing resource, and\/or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. It is understood that the load balancers , service providers , DNS servers , redirection coordination servers , may each be executed in respective computing device(s) with processor circuits having similar or different hardware characteristics.","Various applications and\/or other functionality may be executed in the client  according to various embodiments. The components executed on the client  for example, include one or more service clients , a DNS resolver , a redirection service , a network stack , a NAT filter , and other applications, services, processes, systems, engines, or functionality not discussed in detail herein. The service client  is executed to generate service requests to a service implemented by a plurality of the service providers . To this end, the service client  may open a transmission control protocol\/internet protocol (TCP\/IP) connection, a user datagram protocol (UDP) connection, or otherwise send data to one of the service providers  by way of the network . The service client  may employ hypertext transfer protocol (HTTP), representational state transfer (REST), simple object access protocol (SOAP), and\/or other application-layer architectures and protocols as desired.","The DNS resolver  is executed to perform DNS resolution of domain names and network addresses. The DNS resolver  may perform forward queries and reverse queries. In some embodiments, multiple different DNS resolvers  may be employed by the service clients  and the redirection service . The redirection service  is executed to configure the NAT filter  to route between redirection network addresses for services and actual network addresses of service providers  or load balancers  for the services. In one embodiment, the redirection service  is implemented as a user-space application of the operating system of the client . The network stack , which may support TCP, UDP, IP, and\/or other protocols, includes the NAT filter  to perform the address translation according to configured rules. In one embodiment, the network stack  and the NAT filter  are kernel-space applications of the operating system of the client .","The service providers  are configured to respond to service requests from service clients  for a particular service. One or more of the service providers  may be executed in a server computing device similar to the client . Each load balancer  is configured to route traffic among multiple service providers  for the same service. Each load balancer  may correspond to a general-purpose computing device or a special-purpose computing device in the computing environment . In some cases, multiple service providers  for the same service may be located in one data center, and multiple other service providers  for the same service may be located in another data center.","The DNS servers  are authoritative for the domain names employed in the computing environment . To this end, the DNS servers  are configured to respond to DNS queries from the DNS resolver . In some cases, multiple DNS servers  may be arranged hierarchically to perform recursive DNS lookups within the computing environment . The DNS servers  include zone data  for the domain names in the computing environment . The DNS servers  may correspond to one or more server computing devices. In various embodiments, the DNS servers  may execute commercially available DNS server daemons such as, for example, Berkeley Internet Name Daemon (BIND), Microsoft\u00ae DNS, and\/or other DNS server software.","The redirection coordination servers  are configured to control traffic redirection changes by the redirection services . To this end, the redirection coordination servers  may assess the status of various load balancers  and\/or service providers  and configure or reconfigure the redirection services  to forward service requests for a service to an available load balancer  or service provider . The redirection coordination servers  may maintain state data as redirection data . In one embodiment, the redirection coordination servers  may modify the zone data  to update the records for reverse DNS for service network addresses. In other embodiments, the redirection coordination servers  may provide mapping data to the redirection service  directly, with either a push or pull arrangement. The redirection coordination servers  may correspond to one or more server computing devices.","Next, a general description of the operation of the various components of the computing environment  is provided. To begin, service clients  are deployed on clients  for various services offered in the computing environment . Under the architecture described herein, a developer need not be aware of the network address translation that occurs client-side. To the contrary, the developer may configure the service client  to use a fixed or predetermined generic domain name or network address that can be routed to any of the appropriate service providers  for the service as desired.","A na\u00efve implementation of client-side traffic redirection might push frequent updates for the forward DNS resolution of the network address for the service client . However, such an approach can be problematic, as the DNS was designed to provide redundancy on the order of days, not seconds. The DNS standard calls for a minimum time for retaining records of 60 seconds. Nonetheless, many DNS resolvers  may ignore the time-to-live (TTL) for the records.","By contrast, various embodiments herein add a layer of redirection using client-side NAT. The redirection network addresses used by the service clients  may be in a special range of network addresses. When a NAT filter  in the client  sees data destined to such an address, special processing is invoked. The data is provided to the redirection service  which translates the redirection network address into an actual network address. The actual network address may correspond to a load balancer  or to a service provider . It is noted that the redirection network address may be translated into one of multiple actual network addresses depending on the availability of the service through the particular actual network address.","The redirection service  then configures a translation rule for the NAT filter , so that the NAT filter  is able to forward the data to the network  using the actual network address. Reverse NAT may be performed by the NAT filter  in the opposite direction, i.e., from actual network address to redirection network address, to enable the translation to be transparent from the perspective of the service client . In some embodiments, port address translation (PAT) may be similarly used and facilitated by the NAT filter .","Under one approach, the redirection service  may use reverse DNS in order to transform the redirection network address into the actual network address. For example, the redirection service  may resolve the \u201cin-addr.arpa\u201d domain corresponding to the redirection network address to obtain another domain name and ultimately the actual network address. When a service provider  or load balancer  becomes unavailable, the redirection service  may resolve the redirection network address to a different actual network address. The DNS updating may be prompted at least in part by the redirection coordination server . Also, to facilitate fast failover, the redirection service  may use a DNS resolver  that specifically obeys the TTL parameter or is modified for faster refresh. Likewise, the DNS server  may be specially configured to prevent DNS serial number exhaustion in the zone data .","Under another approach, the redirection service  performs the mapping of redirection network addresses to actual network addresses and configures the NAT filter . Data to facilitate the mapping may be pushed to the redirection service  by the redirection coordination server . Alternatively, data to facilitate the mapping may be pulled from the redirection coordination server  by the redirection service .","The NAT rules may be updated as needed for failover or for configuration changes. It may be determined that the service is unavailable at the particular actual network address. In response, another network address translation may be established in the NAT filter  between the redirection network address and another actual network address to replace the previous network address translation.","In some embodiments, the redirection service  may perform the sole load balancing function for certain services. Some services may not need the full intelligence of a hardware load balancer  and may function acceptably with the random or pseudo-random application of multiple local NAT rules for a redirection network address. The data provided by the redirection coordination server  to the redirection service  may provide context on what NAT rule to apply. For example, the data provided by the redirection coordination server  may indicate proportions of flows to translate to a given redirection network address, translation based at least in part on existing local flow data (e.g., do not translate to an address that is only in \u201cSYN\u201d state, one that has a backlog of packets, etc.), and so on.","Referring next to , shown is a sequence diagram  that provides one example of the operation and interaction of portions of the service client , the DNS resolver , the NAT filter , the redirection service , and the service provider  according to various embodiments. It is understood that the sequence diagram  of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portions of the service client , the DNS resolver , the NAT filter , the redirection service , and the service provider  as described herein.","Beginning with box  of , the service client  generates a DNS lookup  for a domain name of a service provider . The domain name may be predetermined in the service client  and may correspond to the service generally. In box , the DNS resolver  obtains the DNS lookup  and performs the DNS lookup  on the domain name of the service provider . To this end, the DNS resolver  may query a DNS server  () or may resolve the domain name from a cache. In box , the DNS resolver  obtains a redirection network address , which is then returned to the service client . In other embodiments, the redirection network address  may be cached or predetermined by the service client , thereby rendering the DNS lookup  extraneous.","In box , the service client  sends a packet  to the redirection network address . For example, the service client  may initiate sending a datagram to the redirection network address or may open a connection to the redirection network address . The packet  is provided to the network stack  () and is processed by the NAT filter . In box , upon determining that the packet  has a network address in a special range of network addresses, the NAT filter  traps the packet  to the redirection service , which may be a user-space application. In box , the redirection service  generates a DNS reverse lookup  for the redirection network address  corresponding to the destination address of the packet .","The DNS reverse lookup  is passed to the DNS resolver , which performs a DNS lookup on the redirection network address  in box . In box , the DNS resolver  obtains the actual service provider  domain name  (or the actual load balancer  () domain name, as the case may be) from the DNS server  or a cache. In one embodiment, round-robin DNS may be employed, meaning that one of several actual service provider names  may be returned. The actual service provider name  is returned to the redirection service .","In box  of , the redirection service  generates a DNS lookup  for the actual service provider name . In box , the DNS resolver  performs the DNS lookup  on the actual service provider name . In box , the DNS resolver  obtains the actual network address , which is then returned to the redirection service . In box , the redirection service  configures the NAT filter  to translate the redirection network address  into the actual network address , and vice versa. To this end, a NAT rule  is supplied to the NAT filter , and the NAT filter  updates the NAT configuration accordingly in box . In box , the NAT filter  routes the packet  to the service provider  (or load balancer ) at the actual network address . Thereafter, the sequence diagram  ends.","Turning now to , shown is a sequence diagram  that provides another example of the operation and interaction of portions of the service client , the DNS resolver , the NAT filter , the redirection service , and the service provider  according to various embodiments. It is understood that the sequence diagram  of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portions of the service client , the DNS resolver , the NAT filter , the redirection service , and the service provider  as described herein.","Beginning with box , the service client  generates a DNS lookup  for a domain name of a service provider . The domain name may be predetermined in the service client  and may correspond to the service generally. In box , the DNS resolver  obtains the DNS lookup  and performs the DNS lookup  on the domain name of the service provider . To this end, the DNS resolver  may query a DNS server  () or may resolve the domain name from a cache. In box , the DNS resolver obtains a redirection network address , which is then returned to the service client . In other embodiments, the redirection network address  may be cached or predetermined by the service client , thereby rendering the DNS lookup  extraneous.","In box , the service client  sends a packet  to the redirection network address . For example, the service client  may initiate sending a datagram to the redirection network address  or may open a connection to the redirection network address . The packet  is provided to the network stack  () and is processed by the NAT filter . In box , upon determining that the packet  has a network address in a special range of network addresses, the NAT filter  traps the packet  to the redirection service , which may be a user-space application. In box , the redirection service  obtains the actual network address corresponding to the redirection network address  from the redirection coordination server  ().","In box , the redirection service  configures the NAT filter  to translate the redirection network address  into the actual network address obtained from the redirection coordination server , and vice versa. To this end, a NAT rule  is supplied to the NAT filter , and the NAT filter  updates the NAT configuration accordingly in box . In box , the NAT filter  routes the packet  to the service provider  (or load balancer  ()) at the actual network address. Thereafter, the sequence diagram  ends.","Moving on to , shown is a flowchart that provides one example of the operation of a portion of the service client  according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the service client  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the client  () according to one or more embodiments.","Beginning with box , the service client  generates a packet to be sent to a service provider  () for a service. In box , the service client  uses the DNS resolver  () to translate a domain name of the service provider  into a redirection network address in a predetermined redirection network address range. Such an address range may be non-routable by the network  () in some embodiments. In box , the service client  sends the packet to the service provider  through the network stack  () using the redirection network address. Thereafter, the portion of the service client  ends.","Continuing now to , shown is a flowchart that provides one example of the operation of a portion of the NAT filter  according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the NAT filter  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the client  () according to one or more embodiments.","Beginning with box , the NAT filter  obtains a packet to be sent to a destination network address. In box , the NAT filter  determines whether the destination network address is in a predetermined redirection address space. If the destination network address is not in the predetermined redirection address space, the NAT filter  simply forwards the packet to the destination network address via the network  () in box . Thereafter, the portion of the NAT filter  ends.","If, instead, the NAT filter  determines that the destination network address is in the redirection address space, the NAT filter  moves from box  to box . In box , the NAT filter  determines whether a translation rule exists and is valid for the particular destination network address. If a translation rule does not already exist, the NAT filter  continues to box  and traps the packet to the redirection service  (). In box , the NAT filter  obtains a translation rule configuration from the redirection service .","The NAT filter  then proceeds to box . If the NAT filter  instead determines that a translation rule already exists and is valid, the NAT filter  moves from box  to box . In box , the NAT filter  translates the redirection network address into an actual network address that can be routed by the network . In box , the NAT filter  forwards the packet to the actual network address by way of the network . Thereafter, the portion of the NAT filter  ends.","Referring next to , shown is a flowchart that provides one example of the operation of a portion of the redirection service  according to a first embodiment. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the redirection service  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the client  () according to one or more embodiments.","In box , the redirection service  obtains a packet (or information about the packet) from the NAT filter  (). In box , the redirection service  performs a reverse DNS lookup using the DNS resolver  () on the redirection network address included in the packet to obtain an actual service provider  () (or load balancer  ()) domain name. In box , the redirection service  performs a DNS lookup using the DNS resolver  on the actual domain name to obtain an actual network address. In box , the redirection service  configures a translation rule in the NAT filter  to translate between the redirection network address and the actual network address. Thereafter, the portion of the redirection service  ends. The translation rule configured in box  may later be updated to accommodate failover.","Turning now to , shown is a flowchart that provides one example of the operation of a portion of the redirection service  according to a second embodiment. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the redirection service  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the client  () according to one or more embodiments.","In box , the redirection service  obtains a packet (or information about the packet) from the NAT filter  (). In box , the NAT filter  obtains a mapping of the redirection network address to an actual network address from the redirection coordination server  (). In box , the redirection service  configures a translation rule in the NAT filter  to translate between the redirection network address and the actual network address. Thereafter, the portion of the redirection service  ends. The translation rule configured in box  may later be updated to accommodate failover.","With reference to , shown is a schematic block diagram of a computing device  which may be employed in the computing environment  () according to an embodiment of the present disclosure. The computing device  may correspond, for example, to a client  (). The computing device  includes at least one processor circuit, for example, having a processor  and a memory , both of which are coupled to a local interface . To this end, the computing device  may comprise, for example, at least one server computer or like device. The local interface  may comprise, for example, a data bus with an accompanying address\/control bus or other bus structure as can be appreciated.","Stored in the memory  are both data and several components that are executable by the processor . In particular, stored in the memory  and executable by the processor  are the service client , the DNS resolver , the redirection service , the network stack , the NAT filter , and potentially other applications. Also stored in the memory  may be a data store and other data. In addition, an operating system may be stored in the memory  and executable by the processor .","It is understood that there may be other applications that are stored in the memory  and are executable by the processor  as can be appreciated. Where any component discussed herein is implemented in the form of software, any one of a number of programming languages may be employed such as, for example, C, C++, C#, Objective C, Java\u00ae, JavaScript\u00ae, Perl, PHP, Visual Basic\u00ae, Python\u00ae, Ruby, Delphi\u00ae, Flash\u00ae, or other programming languages.","A number of software components are stored in the memory  and are executable by the processor . In this respect, the term \u201cexecutable\u201d means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be, for example, a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory  and run by the processor , source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory  and executed by the processor , or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory  to be executed by the processor , etc. An executable program may be stored in any portion or component of the memory  including, for example, random access memory (RAM), read-only memory (ROM), hard drive, solid-state drive, USB flash drive, memory card, optical disc such as compact disc (CD) or digital versatile disc (DVD), floppy disk, magnetic tape, or other memory components.","The memory  is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus, the memory  may comprise, for example, random access memory (RAM), read-only memory (ROM), hard disk drives, solid-state drives, USB flash drives, memory cards accessed via a memory card reader, floppy disks accessed via an associated floppy disk drive, optical discs accessed via an optical disc drive, magnetic tapes accessed via an appropriate tape drive, and\/or other memory components, or a combination of any two or more of these memory components. In addition, the RAM may comprise, for example, static random access memory (SRAM), dynamic random access memory (DRAM), or magnetic random access memory (MRAM) and other such devices. The ROM may comprise, for example, a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other like memory device.","Also, the processor  may represent multiple processors  and the memory  may represent multiple memories  that operate in parallel processing circuits, respectively. In such a case, the local interface  may be an appropriate network that facilitates communication between any two of the multiple processors , between any processor  and any of the memories , or between any two of the memories , etc. The local interface  may comprise additional systems designed to coordinate this communication, including, for example, performing load balancing. The processor  may be of electrical or of some other available construction.","Although the service client , the DNS resolver , the redirection service , the network stack , the NAT filter , the redirection coordination server  (), and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above, as an alternative the same may also be embodied in dedicated hardware or a combination of software\/general purpose hardware and dedicated hardware. If embodied in dedicated hardware, each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include, but are not limited to, discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals, application specific integrated circuits having appropriate logic gates, or other components, etc. Such technologies are generally well known by those skilled in the art and, consequently, are not described in detail herein.","The sequence diagrams of , B, and  and the flowcharts of  show the functionality and operation of an implementation of portions of the service client , the DNS resolver , the redirection service , the network stack , the NAT filter , and the service provider  (). If embodied in software, each block may represent a module, segment, or portion of code that comprises program instructions to implement the specified logical function(s). The program instructions may be embodied in the form of source code that comprises human-readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor  in a computer system or other system. The machine code may be converted from the source code, etc. If embodied in hardware, each block may represent a circuit or a number of interconnected circuits to implement the specified logical function(s).","Although the sequence diagrams of , B, and  and the flowcharts of  show a specific order of execution, it is understood that the order of execution may differ from that which is depicted. For example, the order of execution of two or more blocks may be scrambled relative to the order shown. Also, two or more blocks shown in succession in  may be executed concurrently or with partial concurrence. Further, in some embodiments, one or more of the blocks shown in  may be skipped or omitted. In addition, any number of counters, state variables, warning semaphores, or messages might be added to the logical flow described herein, for purposes of enhanced utility, accounting, performance measurement, or providing troubleshooting aids, etc. It is understood that all such variations are within the scope of the present disclosure.","Also, any logic or application described herein, including the service client , the DNS resolver , the redirection service , the network stack , the NAT filter , and the redirection coordination server , that comprises software or code can be embodied in any non-transitory computer-readable medium for use by or in connection with an instruction execution system such as, for example, a processor  in a computer system or other system. In this sense, the logic may comprise, for example, statements including instructions and declarations that can be fetched from the computer-readable medium and executed by the instruction execution system. In the context of the present disclosure, a \u201ccomputer-readable medium\u201d can be any medium that can contain, store, or maintain the logic or application described herein for use by or in connection with the instruction execution system.","The computer-readable medium can comprise any one of many physical media such as, for example, magnetic, optical, or semiconductor media. More specific examples of a suitable computer-readable medium would include, but are not limited to, magnetic tapes, magnetic floppy diskettes, magnetic hard drives, memory cards, solid-state drives, USB flash drives, or optical discs. Also, the computer-readable medium may be a random access memory (RAM) including, for example, static random access memory (SRAM) and dynamic random access memory (DRAM), or magnetic random access memory (MRAM). In addition, the computer-readable medium may be a read-only memory (ROM), a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other type of memory device.","It should be emphasized that the above-described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above-described embodiment(s) without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Many aspects of the present disclosure can be better understood with reference to the following drawings. The components in the drawings are not necessarily to scale, emphasis instead being placed upon clearly illustrating the principles of the disclosure. Moreover, in the drawings, like reference numerals designate corresponding parts throughout the several views.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIGS. 2A and 2B","FIG. 1"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIGS. 6A and 6B","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 7","FIG. 1"]}]},"DETDESC":[{},{}]}
