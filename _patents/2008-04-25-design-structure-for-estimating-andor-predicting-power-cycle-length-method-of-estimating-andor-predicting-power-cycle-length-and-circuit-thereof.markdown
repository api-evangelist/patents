---
title: Design structure for estimating and/or predicting power cycle length, method of estimating and/or predicting power cycle length and circuit thereof
abstract: A design structure is embodied in a machine readable medium for designing, manufacturing, or testing a design. The design structure includes a threshold register having a counter, a count register, and a non-volatile storage for storing a state when a value of the count register equals or exceeds a value of the threshold register. Also provided is a method of predicting and/or estimating a power cycle duration in order to save a state in non-volatile memory and a circuit. The method includes setting a threshold value; determining that the threshold value has been equaled or exceeded; and saving the state in the non-volatile memory at a first checkpoint based on the threshold value being equaled or exceeded.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07903493&OS=07903493&RS=07903493
owner: International Business Machines Corporation
number: 07903493
owner_city: Armonk
owner_country: US
publication_date: 20080425
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Circuit of the Present Invention","Exemplary Processes in Accordance with the Invention","Design Structure"],"p":["The present invention relates to a design structure for estimating and\/or predicting power cycle length, a method of estimating and\/or predicting power cycle length and a circuit thereof.","A significant and growing number of low power applications have a usable source of power that is intermittent with little or no power during dormant periods. Many of these power sources have an available power window that is variable over the long term but relatively constant in the short term. This sort of behavior in a power source would be expected in a \u201cheartbeat\u201d situation or where mechanical inertia would come into play (drive shaft coupling, vibration, etc.).","In current applications, data is processed during the usable source of power. This data is processed typically in volatile memory and intermittently saved in non-volatile memory. Volatile memory loses data as soon as the system is turned off; it requires constant power to remain viable. Most types of RAM fall into this category. Nonvolatile memory, on the other hand, does not lose its data when the system or device is turned off. Thus, by using nonvolatile memory, it is possible to ensure that data can be saved in low power applications having a usable source of power that is intermittent with little or no power during dormant periods. A number of types of memory fall into this category including, for example, ROM and Flash memory storage devices.","However, it has been found that saving data in non-volatile memory has a significant energy cost. And, current applications save data constantly in the non-volatile memory as there is no way to predict when there will be a power loss. Thus, by constantly saving data in the non-volatile memory, the application is ensured that data will be saved for loading at power up, but at a cost of further power loss. Due this additional power loss, though, a significant drain is placed on the application thus leading to faster power loss.","Accordingly, there exists a need in the art to overcome the deficiencies and limitations described hereinabove.","In a first aspect of the invention, a structure a circuit for saving and restoring state in an intermittent power environment. The circuit comprises a threshold register having a counter and a non-volatile storage. The value of the threshold register is compared with a count register to determine when to save the state into non-volatile storage.","In an additional aspect of the invention, a method for predicting and\/or estimating a power cycle duration in order to save a state in non-volatile memory. The method comprises setting a threshold value; determining that the threshold value has been equaled or exceeded; and saving the state in the non-volatile memory at a first checkpoint based on the threshold value being equaled or exceeded.","In a further aspect of the invention, a design structure is embodied in a machine readable medium for designing, manufacturing, or testing an integrated circuit. The design structure comprises a threshold register having a counter, a count register, and a non-volatile storage for storing a state when a value of the count register equals or exceeds a value of the threshold register.","The present invention generally relates to a circuit for estimating and\/or predicting power cycle length in low power applications. The invention also relates to a design structure and method for estimating and\/or predicting power cycle length in low power applications. More specifically, the present invention is directed to efficiently harnessing usable power from an intermittent power source by applying power to an application for as long as possible before saving the state (e.g., processed work) in non-volatile memory. In embodiments, the non-volatile memory is assumed to have a significant state saving energy cost and, as such, the present invention will attempt to utilize the volatile memory as long as possible until power loss, at which time the state is saved in the non-volatile memory. A checkpoint save into non-volatile memory is assumed to have a significant energy cost and, by implementing the circuit, method and design structure of the present invention will significantly minimize saves in the non-volatile memory elements.","In embodiments, the assumption is that the size of the window of available power is variable over the long term but relatively constant in the short term. This behavior in a power source would be expected in a \u201cheartbeat\u201d situation or where mechanical inertia would come into play (drive shaft coupling, vibration, etc.). With such applications, for example, the present invention provides a prediction and\/or estimation as to when there will be loss of power and, as such, the appropriate time to save the state in non-volatile memory, thereby decreasing saves in the non-volatile memory and increasing processing efficiency during a power cycle.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["100","110","110","100","115","115","115","115","100"],"i":["a ","a","a "]},"Still referring to , the circuit  further includes a determination component . The determination component  determines whether the power cycle is equal to or greater than the threshold value. As the power cycle approaches the threshold value (e.g., equals the threshold value (checkpoint), as determined by the determination component , the circuit will save the state in the non-volatile memory  (from volatile storage ). As such, the circuit  can use the success\/failure of a checkpoint to determine whether more processing or less processing can be done during the available power window before the state is saved in non-volatile memory  (at a \u201cPING\u201d and \u201cPONG\u201d).","More specifically, at a first power up, for example, the counter will begin to increment for each power pulse. At power loss, the counter will have a certain count related to the detected duration of the power cycle. The value of the counter is, in turn, provided to the threshold register  which sets a threshold value, e.g., a known cycle when power is lost. Thus, during a next power cycle, a state can be saved in non-volatile memory  when the threshold value has been met or exceeded. In subsequent power ups, the counter can be incremented and\/or decremented to readjust the threshold value, as discussed in more detail below. In this way, the circuit  of the invention can \u201clock\u201d into the length of the power pulse by estimating its length assuming the current length will be similar to the previous length, and adjusting as more is known about the source.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["120","120","120"]},"In one illustrative, non-limiting example, if the last state is found to be valid, e.g., saved at \u201c1\u201d, it is possible to load the last saved state in the volatile memory  to continue processing from such state. In a next power up cycle, the counter can be incremented, e.g., until a new \u201clast\u201d and \u201cvalid\u201d is ascertained, e.g., a new checkpoint is found. If a new checkpoint is found, the system will reset, effectively adjusting the threshold to provide for additional processing time prior to power loss. On the other hand, if the state was not properly saved at \u201c1\u201d, e.g., due to power loss, the state can be retrieved from a prior checkpoint, e.g., \u201c0\u201d, and, in the next power cycle the counter can be decremented to readjust the power cycle length and hence reset the threshold. In this manner, only one cycle of processing data is lost due to the power loss, and the use of non-volatile memory can be minimized.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIGS. 2 and 3","FIGS. 2 and 3","FIGS. 2 and 3","FIG. 1"]},"The following is pseudo code to adjust a processing period to power event length, as shown in .",{"@attributes":{"id":"p-0024","num":"0023"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["If Valid(Last) = 0","; If last processing step did not complete"]},{"entry":"successfully"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003THEN","; \u2003THEN"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003Last <= NOT Last","; \u2003Back up to previous checkpoint"]},{"entry":["\u2003\u2003\u2003DECREASE COUNT","; \u2003and decrease processing time (power even"]},{"entry":"getting shorter)"},{"entry":["\u2003\u2003\u2003IF Valid(Last) = 0","; \u2003IF previous checkpoint also invalid"]},{"entry":["\u2003\u2003\u2003\u2003THEN *SYSTEM RESET*","; \u2003\u2003THEN we've lost state and must reset system"]},{"entry":"\u2003\u2003\u2003END IF"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003ELSE","; ELSE (last processing step completed)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003INCREASE COUNT","; \u2003Increase processing time threshold"]},{"entry":"END IF"},{"entry":["RESTORE Context(Last)","; \u2002Restore context from last successful checkpoint"]},{"entry":["Last<=NOT Last","; \u2002Flip pointer to next checkpoint storage"]},{"entry":["Count <= 0","; \u2002Initialize processing timer"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["While count < threshold","; \u2003Do"]},{"entry":["\u2003PROCESS DATA","; \u2003\u2003Processing"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003INCREMENT COUNT","; \u2003increment count"]},{"entry":["END WHILE","; \u2003until threshold exceeded"]},{"entry":["SAVE CONTEXT(Last)","; \u2003checkpoint progress in memory pointed to by"]},{"entry":"last"},{"entry":["SAVE Valid(Last)","; \u2003Validate last checkpoint"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"More specifically, at step , a power cycle begins. At step , a determination is made as to whether the last cycle (e.g., \u201cPONG\u201d) was successfully completed during the previous power cycle, e.g., valid (\u201c0\u201d represents a non-valid). If the last cycle was valid, the threshold is incremented at step . If the last cycle was not valid, at step , the system will back up to the previous checkpoint (e.g., \u201cPING\u201d). At step , a determination is made as to whether the previous checkpoint (e.g., \u201cPING\u201d) is valid. If the previous checkpoint (e.g., \u201cPING\u201d) is not valid, at step , the state is lost and the system will reset, at step .","If the previous checkpoint is not valid at step , the threshold is decreased at step  in order to ensure that the state can be properly saved at a next power loss. After the threshold is decreased or after the threshold has been increased (steps  and ), a new assignment is reset, e.g., a new checkpoint set, at step . At step , the context (previously saved data) is restored (loaded) from the last successful checkpoint and processing continues during the current power cycle. This can be done by utilizing the \u201clast\u201d and \u201cvalid\u201d flags.","At step , the last cycle is complemented (e.g., the pointer is flipped from its current state to another state, \u201c1\u201d to \u201c0\u201d or vice versa). At step , the counter is assigned to \u201c0\u201d, e.g., initialized for the next power cycle. At step , the data is processed during the power cycle. At step , the counter is incremented during the power cycle. At step , a determination is made as to whether the count is greater than the threshold. If the count is less than the threshold, processing continues at step ; however, if the counter is greater than the threshold, the context is saved at step . At step , the last checkpoint is validated.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIG. 3","FIG. 2"]},"Pseudocode for the optional processing until power fail can be written as follows.",{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["If Valid(Last) = 0","; If last processing step did not complete"]},{"entry":"successfully"},{"entry":["\u2003THEN","; \u2003THEN"]},{"entry":["\u2003\u2003Last <= NOT Last","; \u2003\u2003Back up to previous checkpoint"]},{"entry":["\u2003\u2003\u2003DECREASE threshold","; \u2003\u2003and decrease processing time (power even"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"getting shorter) Threshold is the duration"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003IF Valid(Last) = 0","; \u2003\u2003IF previous checkpoint also invalid"]},{"entry":["\u2003\u2003\u2003\u2003THEN *SYSTEM RESET*","; \u2003\u2003\u2003THEN we've lost state and must reset system"]},{"entry":"\u2003\u2003\u2003END IF"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003ELSE","; ELSE (last processing step completed)"]},{"entry":["\u2003\u2003INCREASE threshold","; \u2003Increase processing time threshold"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"END IF"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["RESTORE Context(Last)","; Restore context from last successful checkpoint"]},{"entry":["Last<=NOT Last","; Flip pointer to next checkpoint storage"]},{"entry":["Count <= 0","; Initialize processing timer"]},{"entry":"WHILE Count < Threshold ; Do"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003PROCESS DATA","; Processing"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003INCREMENT COUNT","; \u2003increment count"]},{"entry":["END WHILE","; \u2003until threshold exceeded"]},{"entry":["SAVE CONTEXT(Last)","; \u2002checkpoint progress in memory pointed to by last"]},{"entry":["SAVE Valid(Last)","; \u2002Validate last checkpoint"]},{"entry":["Do Forever","; While power exists Do:"]},{"entry":["\u2003Last<=NOT Last","; \u2003\u2003Pingpong context memory"]},{"entry":["\u2003Valid(Last)<=\u20180\u2019","; \u2003\u2003Clear context valid flag"]},{"entry":["\u2003INCREASE Threshold","; \u2003\u2003Increase save threshold count"]},{"entry":["\u2003WHILE Count < Threshold","; \u2003\u2003\u2003Do Count to Threshold"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003PROCESS DATA","; \u2003Do the data"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003INCREMENT COUNT","; \u2003\u2003\u2003\u2003Increment save counter"]},{"entry":["\u2003END WHILE",";"]},{"entry":["\u2003SAVE CONTEXT(Last)","; \u2003Save context checkpoint"]},{"entry":["\u2003Valid(Last)<=\u20181\u2019","; \u2003Set context checkpoint valid flag"]},{"entry":"END DO"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"More specifically, at step , the last valid context is restored at start up. At step , the system will backup to the previous checkpoint (e.g., \u201cPING\u201d). At step , the counter is assigned to \u201c0\u201d, e.g., initialized for the next power cycle. At step , the data is processed during the power cycle. At step , the counter is incremented during the power cycle. At step , a determination is made as to whether the count is greater than the threshold. If the count is less than the threshold, processing continues at step ; however, if the counter is greater than the threshold, the last context is saved at step .","At step , the system assigns the valid save to \u201c1\u201d (\u201cPONG\u201d). At step , the last cycle is complemented (e.g., the pointer is flipped from its current state to another state, \u201c1\u201d to \u201c0\u201d or vice versa). At step , a new assignment is reset. At step , the threshold is increased. At step , the data is processed during the power cycle. At step , the counter is incremented during the power cycle. At step , a determination is made as to whether the count is greater than the threshold. If the count is less than the threshold, processing continues at step ; however, if the counter is greater than the threshold, the context is saved at step . At step , a new assignment is reset, and the process returns to step .","Additional efficiency can be had with the addition of a timer and a failure latch time. When an unsuccessful number of cycles occur, the processes can set a flag that states that a failure has occurred recently, where recently is defined as a time period measured by current time, e.g., failure latch time. After the current time has moved beyond the set time period the recent error flag is reset. During the time that recently failed the count threshold counter is not incremented. When the recently failed bit is reset then the threshold count counter is allowed to increment.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 4","FIG. 1","FIG. 1","FIG. 1"],"b":["900","900","900","900","920","910","920","920","920","910","980","980","980"]},"Design process  may include using a variety of inputs; for example, inputs from library elements  which may house a set of commonly used elements, circuits, and devices, including models, layouts, and symbolic representations, for a given manufacturing technology (e.g., different technology nodes, 32 nm, 45 nm, 90 nm, etc.), design specifications , characterization data , verification data , design rules , and test data files  (which may include test patterns and other testing information). Design process  may further include, for example, standard circuit design processes such as timing analysis, verification, design rule checking, place and route operations, etc. One of ordinary skill in the art of integrated circuit design can appreciate the extent of possible electronic design automation tools and applications used in design process  without deviating from the scope and spirit of the invention. The design structure of the invention is not limited to any specific design flow.","Design process  preferably translates an embodiment of the invention as shown in, for example, , along with any additional integrated circuit design or data (if applicable), into a second design structure . Design structure  resides on a storage medium in a data format used for the exchange of layout data of integrated circuits and\/or symbolic data format (e.g. information stored in a GDSII (GDS2), GL1, OASIS, map files, or any other suitable format for storing such design structures). Design structure  may comprise information such as, for example, symbolic data, map files, test data files, design content files, manufacturing data, layout parameters, wires, levels of metal, vias, shapes, data for routing through the manufacturing line, and any other data required by a semiconductor manufacturer to produce an embodiment of the invention as shown in, for example, . Design structure  may then proceed to a stage  where, for example, design structure : proceeds to tape-out, is released to manufacturing, is released to a mask house, is sent to another design house, is sent back to the customer, etc.","While the invention has been described in terms of embodiments, those of skill in the art will recognize that the invention can be practiced with modifications and in the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is described in the detailed description which follows, in reference to the noted plurality of drawings by way of non-limiting examples of exemplary embodiments of the present invention.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
