---
title: Method and system for disaster recovery
abstract: A method for disaster recovery includes copying at least a portion of information from a first database to a backup system as backup information. The method also includes storing an incremental change in a second database. The incremental change represents a change to at least a portion of the information in the first database. The method further includes restoring the first database using at least one of the backup information and the incremental change.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06981177&OS=06981177&RS=06981177
owner: Computer Associates Think, Inc.
number: 06981177
owner_city: Islandia
owner_country: US
publication_date: 20030325
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["This application claims priority to co-pending U.S. Provisional Application No. 60\/373,943 entitled \u201cSystem and Method for Disaster Recovery\u201d filed Apr. 19, 2002, which is incorporated herein by reference.","This disclosure relates generally to the field of computing systems, and more particularly to a method and system for disaster recovery.","Disaster recovery systems typically backup computer files to protect against data loss. In a typical disaster recovery system, files are periodically copied to a tape or other backup system. This typically occurs during a set time period, such as during off times at night or on weekends. When a computer system fails, the disaster recovery system may use the latest backup to restore the computer system. This typically involves copying the files from the backup system back to the computer system.","A problem with conventional disaster recovery systems is that they may only restore a computer system to the state that existed at the time of the last backup. Any changes to the files that occurred after the last backup are typically lost.","The present disclosure provides an improved method and system for disaster recovery to substantially reduce or eliminate problems and disadvantages associated with previous systems and methods. In particular, incremental changes to a database are recorded and may be archived as incremental backups, in addition to performing a full backup of the database. The database may then be restored using the full backup, one or more incremental backups, and\/or the current unarchived incremental changes.","In one embodiment, a method for disaster recovery includes copying at least a portion of information from a first database to a backup system as backup information. The method also includes storing an incremental change in a second database. The incremental change represents a change to at least a portion of the information in the first database. The method further includes restoring the first database using at least one of the backup information and the incremental change.","In a particular embodiment, the method further includes copying a second incremental change from the second database to the backup system. In this embodiment, restoring the first database includes using at least one of the backup information, the incremental change stored in the second database, and the second incremental change stored in the backup system.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","100","102","104","106","108","100"]},"In one aspect of operation, a primary database  stores information used by primary server . Database  may, for example, store information used by primary server  to provide on-line web services to clients . Database  may also store registry information, such as configuration information used by an operating system. The information in database  may change over time, such as when information is added, modified, or deleted by a client . Database  in primary server  may also fail or become inoperable, such as when a hardware or power failure occurs.","After primary database  becomes operational again, the information in database  may need to be restored. As a particular example, database  may lose information after it fails, and that information may need to be copied to database  before database  may reenter service. In one embodiment, at least a portion of the information stored in primary database  may routinely be copied to or archived in a backup system . As changes are made to the information in database , the changes may be stored in a secondary database . The changes in secondary database  may or may not be routinely archived in backup system . Primary database  may then be restored using the information in backup system  and\/or secondary database .","Primary server  is coupled to network . In this document, the term \u201ccouple\u201d refers to any direct or indirect communication between two or more components, whether or not those components are in physical contact with one another. Also, the term \u201ccommunication\u201d may refer to communication between physically separate components or between components within a single physical unit. Primary server  is operable to perform one or more of a variety of functions in system . Primary server  could, for example, represent a web server operable to provide on-line web services to clients  over network . Primary server  could also represent a database server operable to store information used by employees of an organization. Primary server  could perform any other and\/or additional functions in system  without departing from the scope of the present disclosure. Primary server  may include any hardware, software, firmware, or combination thereof operable to perform at least one function in system . In the illustrated embodiment, primary server  includes a database  operable to store information used by clients . Other embodiments of primary server  may be used without departing from the scope of the present disclosure.","Secondary server  is coupled to network . Secondary server  stores information used by system  to perform disaster recovery operations. For example, secondary server  may store information used to restore database  in primary server . In this document, the term \u201crestore\u201d refers to returning the information stored in a database to a previous state. The previous state may, for example, have existed at or near the time of a failure of database . The previous state may also have existed at a time preceding the failure of database . In one embodiment, secondary server  may store a full backup of the information in database  of primary server . Secondary server  may also store the changes made to the information in database . After database  fails and becomes operational again, secondary server  may communicate the backup information and the incremental changes to primary server , and primary server  may use the information to restore database . Secondary server  may include any hardware, software, firmware, or combination thereof operable to store and facilitate retrieval of information used to restore at least one primary database . In the illustrated embodiment, secondary server  includes a backup system  and a secondary database . Other embodiments of secondary server  may be used without departing from the scope of the present disclosure.","Network  is coupled to primary server , secondary server , and client . Network  facilities communication between components of system . Network  may, for example, communicate Internet Protocol (IP) packets, frame relay frames, Asynchronous Transfer Mode (ATM) cells, and\/or any other suitable information in any suitable format between network addresses. Network  may include one or more local area networks (LANs), metropolitan area network (MANs), wide area networks (WANs), all or a portion of the global computer network known as the Internet, and\/or any other communications system or systems at one or more locations.","Client  is coupled to network . Client  is operable to allow a user to access and\/or alter the information contained in database  of primary server . For example, client  may submit a database query to primary server  over network , such as a request to retrieve specified information from database . Client  could also submit commands to primary server  instructing primary server  to add, change, or delete information contained in database . Client  may include any hardware, software, firmware, or combination thereof operable to communicate and\/or receive information over network . Client  may, for example, include a desktop computer executing a web browser.","Primary database  is operable to store information used by primary server  to perform one or more functions in system . In this document, the term \u201cdatabase\u201d may refer to a collection of information. The information may reside in a document or other file, in a registry, in a collection of files and\/or registries, and\/or in any other suitable structure or structures. In one embodiment, database  may store information used by primary server  to provide web services to clients  over network . As particular examples, database  may store the names, addresses, and product orders of customers of a business using primary server . Database  may store any other and\/or additional information without departing from the scope of the present disclosure. Database  may include any hardware, software, firmware, or combination thereof operable to store and facilitate retrieval of information. Database  may store information using any of a variety of data structures, arrangements, and\/or compilations. Database  may, for example, include a dynamic random access memory (DRAM), a static random access memory (SRAM), or any other suitable volatile or nonvolatile storage and retrieval device or devices. Although  illustrates primary database  residing in primary server , primary database  could reside at any location or locations accessible by primary server .","Backup system  is operable to store or archive information from primary database  and\/or secondary database . For example, backup system  may receive all or a portion of the information in primary database  and store the information. As a particular example, backup system  may receive information from primary database  during a full backup  of database . When database  fails and becomes operational again, backup system  may communicate the backup information to primary server , and primary server  may use the backup information to restore database . In addition, in one embodiment, backup system  may store or archive at least a portion of the information stored in secondary database . The archival of information from secondary database  to backup system  may be referred to as an incremental backup . Backup system  may include any hardware, software, firmware, or combination thereof operable to store and facilitate retrieval of information. In the illustrated embodiment, backup system  includes a tape backup system. Other embodiments of backup system  may be used without departing from the scope of the present disclosure.","Secondary database  is operable to store information identifying the changes made to the information in database . In one embodiment, secondary database  stores one or more incremental changes . An incremental change  may describe how the information in primary database  has changed since a last full backup . In one embodiment, an incremental change  corresponds to a database operation, such as an operation that writes data to, deletes data from, or modifies data in primary database . In a particular embodiment, an incremental change  may identify a segment of primary database  that has been changed. As particular examples, if information is added to a table in primary database , an incremental change  may identify that table, the information added to the table, and where the information is added in the table. If information is deleted from a table in primary database , an incremental change  may identify that table and what information was deleted from the table. If information is modified in a table in primary database , an incremental change  may identify that table and the new modified information contained in that table. Other information may be contained in incremental change  and\/or stored in secondary database  without departing from the scope of the present disclosure. Although this specification may describe incremental changes  as representing changes to files in primary database , incremental changes  may represent changes to any information in primary database . As a particular example, an incremental change  could represent a change made to a registry in primary database . Secondary database  may include any hardware, software, firmware, or combination thereof operable to store and facilitate retrieval of information. Secondary database  may store information using any of a variety of data structures, arrangements, and\/or compilations. Although  illustrates secondary database  residing in secondary server , secondary database  could reside at any location or locations accessible by secondary server .","In one aspect of operation, system  uses secondary server  to perform disaster recovery when primary database  in primary server  fails. In a particular embodiment, the disaster recovery operation involves two general phases, a backup phase and a recovery phase. The backup phase may include copying at least a portion of the information from primary database  to secondary server  to backup system  and\/or secondary database . The recovery phase may include copying at least a portion of the information from backup system  and\/or secondary database  back to primary database , thereby restoring primary database  to a previous state.","In one embodiment, the backup phase of the disaster recovery operation involves the performance of a full backup  and the storage of incremental changes  in secondary server . The full backup  copies at least a portion of the information from primary database  to backup system  in secondary server . In a particular embodiment, a full backup  involves copying all of the information from primary database  to backup system . In another particular embodiment, a full backup  involves copying a subset of the information in primary database  to backup system . The information involved in the full backup  may be specified by a user, such as a user using client  or an interface to primary server  or secondary server , or in any other suitable manner.","In this embodiment, in addition to the full backup , changes made to the information in primary database  may be recorded as incremental changes  in secondary database . In one embodiment, the incremental changes  are stored in secondary database  until the next full backup  begins. After the next full backup  begins, secondary database  may be reinitialized, such as by deleting any incremental changes  stored in secondary database . In a particular embodiment, the incremental changes  stored in secondary database  may be divided according to time. For example, the incremental changes  may be stored in different files or data stores based on when the incremental changes  occurred, and each file or data store may correspond to a different time period. In this document, the term \u201ceach\u201d refers to each of at least a subset of the identified items.","In this embodiment, the backup information stored in backup system  and the incremental changes  stored in secondary database  may be used to restore primary database  in the event of a database failure. In other words, the previous state of primary database  could be recreated using the backup information stored in backup system  and the incremental changes  stored in secondary database . In particular, primary server  could copy the backup information from backup system  to primary database , which restores primary database  to the state that existed at or near the time of the last full backup . Primary server  could leave primary database  in this state. Primary server  could also receive some or all of the incremental changes  from secondary database  and recreate those incremental changes  in primary database . For example, primary server  could receive an incremental change  representing a deletion of information from a database table, and primary server  could implement the change in primary database  by deleting the identified information from the database table. In this way, primary server  could use the incremental changes  stored in secondary database  to restore primary database  to a state that existed between the time of the last full backup  and the time of the database failure. In a particular embodiment, primary server  recreates the incremental changes  sequentially, starting at the time of the last full backup  and proceeding until the time of the database failure is reached or until a desired time is reached. A user may be allowed to specify whether the primary database  should be restored to the time of the database failure or to another time.","In another embodiment, secondary server  may perform one or more incremental backups  during the backup phase of the disaster recovery operation. In this embodiment, the incremental changes  stored in secondary database  may be copied or archived in backup system , and the archived incremental changes  may but need not be deleted from secondary database . As a particular example, secondary server  could archive incremental changes  in backup system  every fifteen or thirty minutes, although any other suitable time period may be used. In this way, secondary database  may store incremental changes  for a limited time period. In a particular embodiment, the incremental changes  in secondary server  may be stored in different files or data stores depending on when the incremental changes  occurred, and an incremental backup  copies one or more of the files or data stores to backup system .","In this embodiment, the full backup information stored in backup system , the incremental changes  stored in backup system  as incremental backups , and the incremental changes  stored in secondary database  may be used to restore primary database . In this embodiment, primary server  could copy the backup information from backup system  to primary database , which restores primary database  to the state that existed at or near the time of the last full backup . Primary server  could leave primary database  in this state. Primary server  could also receive some or all of the incremental backups  from backup system  and recreate the incremental changes  contained in those incremental backups . This restores primary database  to the state that existed at or near the time of the last incremental backup  received and implemented. Again, primary server  could leave primary database  in this state, or primary server  could receive and implement the incremental changes  stored in secondary database . In a particular embodiment, primary server  recreates the incremental changes  in both backup system  and secondary database  sequentially. Also, a user may be given the option of specifying the time to which primary database  will be restored.","The previous description describes various ways in which information may be stored in secondary server  during the backup phase of the disaster recovery operation. It also describes various ways in which primary database  may be restored during the recovery phase of the disaster recovery operation using the information in secondary server . Any other and\/or additional methods and techniques may be used to store information in secondary server  during the backup phase and\/or restore primary database  during the recovery phase without departing from the scope of the present disclosure. For example, system  could be programmed to always restore primary database  to the state that existed at or near the time of the failure of database . In this embodiment, a user may not be given the option of restoring primary database  to a state that existed before the failure of database .","Although  illustrates one example embodiment of a disaster recovery system , various changes may be made to system  without departing from the scope of the present disclosure. For example, while  illustrates one primary server  and one secondary server , system  may include any suitable number of primary servers  and\/or secondary servers . As a particular example, system  could include multiple primary servers , such as between one and eight primary servers , for each secondary server . Also, while  illustrates secondary server  as including backup system  and secondary database , backup system  and database  could reside on separate platforms. In addition, while  illustrates the use of servers  and , any other suitable computing or communicating device or devices may be used in system .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIGS. 2A and 2B","FIG. 2A","FIG. 2B","FIGS. 2A and 2B"],"b":["110","114","110","102","114","104","110","114"]},"In , the contents of two primary databases and are subdivided using a standard folder system. In a folder system, contents may be divided into a hierarchy of folders. Each folder may contain information, applications, additional folders, files, registries, no contents, and\/or any other contents. Although this specification may describe incremental changes  being made to files in folders  and , incremental changes  may affect any other contents of folders  and  without departing from the scope of the present disclosure.","In the illustrated embodiment, the contents of database are divided into two drive folders and , while the contents of database reside in a single drive folder . In one embodiment, a database  may include multiple physical drives and\/or logical drives. In the illustrated embodiment, database has two physical and\/or logical drives represented by drive folders and , and database has one physical and\/or logical drive represented by drive folder ","Within each drive folder , the contents of a database  may be further subdivided into file system folders . The file system folders  could, for example, represent different categories of information in a database . In the illustrated embodiment, drive folder is divided into three file system folders \u2013. Folder may contain applications that can be executed by primary server . Folder may contain instructions and information that allow users to communicate and share information using an exchange server application. Folder may contain information to be stored temporarily. The contents of file system folders  could include specific files used by applications executed by a primary server , additional folders, database tables, and\/or any other information. Folders \u2013 may be further subdivided using additional layers of folders without departing from the scope of the present disclosure.","In one aspect of the disaster recovery operation, at least a portion of the information in a primary database  may be copied to backup system  during a full backup  and monitored for incremental changes . In one embodiment, all of the information in a primary database  is copied to backup system  and monitored for incremental changes . In another embodiment, a subset of the information in a primary database  is copied to backup system  and monitored for incremental changes . In a particular embodiment, a user may specify which folders \u2013 and\/or files in primary database  are to be copied to backup system  and\/or monitored for incremental changes . This may be useful, for example, when some information in primary database  does not change over time.","In another aspect of the disaster recovery operation, incremental changes  to the information in a primary database  may be stored in secondary database  of secondary server . For example, information may be added, changed, or deleted in primary databases and , and these changes may be recorded in secondary database .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 2B","b":["114","114","118","114","250","252","254","256","258","260","104","118","258","260"]},"Application folder  may represent the folder in which information associated with a disaster recovery application is stored in secondary database . As a particular example, the application folder  may include the incremental changes  made to one or more primary databases , the application files used to restore primary databases , and\/or any other suitable information.","Incremental changes folder  may store the incremental changes  made to one or more primary databases . Incremental changes folder  may, for example, help to keep the incremental changes  separate from other information stored in the application folder .","Each server folder  may store the incremental changes  made by a specific primary server . In the illustrated embodiment, secondary database  includes two server folders and , one for a first primary server  having primary database and one for a second primary server  having primary database . This may allow, for example, a single secondary database  to separate and store incremental changes  for multiple primary servers . Any suitable number of primary servers  may be served by secondary database . In one embodiment, secondary database  may serve between one and eight primary servers .","Timestamp folders  represent different time periods during which an incremental change  may be made. In the illustrated embodiment, each server folder  includes at least two timestamp folders . One timestamp folder  labeled \u201cCURRENT\u201d stores the incremental changes  from a current time period, and at least one other timestamp folder  stores the incremental changes  from a previous time period. Other embodiments using any number of timestamp folders  may be used without departing from the scope of the present disclosure. For example, secondary database  could include a timestamp folder  for each time period that has elapsed since the last full backup .","In the illustrated embodiment, timestamp folders  representing time periods other than the current time period include a timestamp label. In this document, the term \u201ctimestamp\u201d refers to any information or structure operable to at least partially identify or represent a date and\/or a time. In a particular embodiment, each of these timestamp folders  may include a timestamp identifying when secondary server  started or stopped storing incremental changes  in that timestamp folder . For example, in one embodiment, timestamp folders  may store incremental changes  that occurred during different hours of the day, and each timestamp may identify a particular hour of the day. Other labels may be given to timestamp folders  with or without reference to a date and\/or a time without departing from the scope of the present disclosure.","Each drive folder  in secondary database  may correspond to a drive folder  in a primary database . Each file system folder  in secondary database  may correspond to a file system folder  in a primary database .","In one aspect of operation, incremental changes  are stored within files located in drive folders , file system folders , and\/or other folders in secondary database . In a particular embodiment, the files in secondary database  are sparse files. In the following description, the collection of files located in a timestamp folder  may be referred to as a data store.","When a change is made to information in a primary database , the change may be communicated to secondary server  as an incremental change . Secondary server  may identify the primary server  associated with the incremental change . Secondary server  may also identify where the incremental change  was made in that primary server . For example, if the incremental change  affected a file in a drive folder  of primary database , secondary server  may identify that drive folder . If the incremental change  affected a file in a file system folder  of primary database , secondary server  may identify that file system folder  and the drive folder  associated with that file system folder . Secondary server  may further identify the file in primary database  affected by the incremental change .","Secondary server  may use this and\/or other information to access the appropriate folders in secondary database . For example, secondary server  may access the server folder  associated with the identified primary server . Secondary server  may also access the current timestamp folder  contained in that server folder . Secondary server  may further access the drive folder  associated with the identified drive folder  and\/or the file system folder  associated with the identified file system folder . After accessing the appropriate folder in secondary database , secondary server  may store the incremental change  in that folder. For example, secondary server  may store the incremental change  in a file in secondary database  that is associated with the identified file. In one embodiment, secondary server  may store an incremental change  in a file that has the same name as the file in primary database  affected by that incremental change . As a particular example, if the incremental change  affects a file named \u201cpub1.edb\u201d in primary database , secondary server  may store the incremental change  in a file named \u201cpub1.edb\u201d in secondary database . In this way, secondary server  may recreate at least a portion of the folder hierarchy of a primary database  in secondary database .","In a particular embodiment, secondary server  may continue to store incremental change  in the \u201cCURRENT\u201d timestamp folders  of secondary database  until a given time period elapses. After the time period elapses, secondary server  closes and renames the \u201cCURRENT\u201d timestamp folders . For example, secondary server  may label the timestamp folders  using a date and an hour of the day. Secondary server  may also create new \u201cCURRENT\u201d timestamp folders  and begin storing more incremental changes  in the new timestamp folders . While the incremental changes  are being stored in the new timestamp folders , secondary database  may communicate the incremental changes  in the renamed timestamp folders  to backup system  as an incremental backup . After the incremental backup  completes, secondary database  may delete the renamed timestamp folders . Secondary server  may then repeat the process after the next time period elapses by renaming the \u201cCURRENT\u201d timestamp folders  and creating new timestamp folders . In another embodiment, secondary server  may wait until multiple time periods elapse before performing an incremental backup .","Secondary server  has been described as entering the appropriate timestamp folder , drive folder , and\/or file system folder  to store an incremental change . This assumes that folders \u2013 exist and can be accessed by secondary server . In a particular embodiment, at the start of a full backup  for a primary database , the incremental changes  associated with that primary database  may be deleted from secondary database . This may occur, for example, by deleting the contents of the appropriate server folder . As a result, secondary server  may need to create a timestamp folder , a drive folder , and\/or a file system folder  before storing an incremental change . Also, secondary server  may need to create a file in which to store the incremental change  in secondary database . In this embodiment, when secondary server  receives an incremental change , secondary server  may determine whether the appropriate folders \u2013 and file exist in secondary database . If not, secondary server  may create the needed folders \u2013 and\/or the needed file.","In one embodiment, if an incremental change  is not made to the contents of a drive folder  or a file system folder  of primary database , secondary database  may lack a corresponding drive folder  or file system folder . For example, in the illustrated embodiment, drive folder includes file system folders \u2013named \u201cAPPS\u201d and \u201cEXCHANGE SERVER.\u201d These file system folders \u2013correspond to file system folders \u2013of . This indicates that incremental changes  were made to the contents of file system folders \u2013. However, in another embodiment, drive folder could lack file system folder . This might indicate that no incremental changes  were made to the contents of the \u201cAPPS\u201d file system folders during the time period represented by timestamp folder ","The incremental changes  monitored by system  and stored in secondary database  may vary depending on particular needs. In one embodiment, some database operations involving a primary database  need not lead to the creation and storage of incremental changes  in secondary database . As particular examples, a user may open, close, or read information from a file in primary database . These operations do not alter the data in the database file, so no incremental changes  need to be stored in secondary database .","Other database operations may lead to the creation and storage of incremental changes  in secondary database . For example, a user may write data to a file in primary database . When that occurs, secondary server  may determine whether a file with the same name appears in the appropriate folder  or  of secondary database , create the file if it does not exist, and store the newly-written data in that file as an incremental change . The user may also delete a file in primary database . In this instance, secondary server  may mark the corresponding file in secondary database  as deleted. Similarly, the user may delete a subtree in primary database , which deletes the contents of a folder  or  in primary database . When that occurs, secondary server  may delete the contents of the corresponding folder  or  in secondary database  and mark the corresponding folder  or  as deleted. The user may further rename a file in primary database . In that case, secondary server  may rename the corresponding file in secondary database  from the old name to the new name, create a new file in secondary database  having the old name, and mark the new file as deleted. In addition, the user may execute various other commands affecting one or more characteristics of the files in primary database . For example, the user may execute commands such as SetBasicInfo and SetCompression, which alter the information and\/or compression associated with a file in primary database . The user may also execute commands such as SetSecurity and SetSecurityByName, which alter the security characteristics of a file in primary database . The user may further truncate a file in primary database , which may reduce the size of the file. For these operations, secondary server  may store the new file information, file security information, and file length in the corresponding file in secondary database . Beyond that, changes made to a registry in primary database , such as when an operating system adds, updates, or removes configuration information in the registry, may be stored in secondary database . Other incremental changes  may be stored in secondary database  without departing from the scope of the present disclosure.","Although  illustrate example primary and secondary databases  and , various changes may be made to databases  and  without departing from the scope of the present disclosure. For example, folders \u2013 and folders \u2013 are for illustration only. Any other and\/or additional folders may be used in databases  and\/or . Also, any suitable arrangement of information may be used in place of a folder system.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 3","b":["300","300","102","104","300","302","304","306","308","310","300"]},"File system monitor  is operable to monitor and detect incremental changes  to files in one or more file systems \u2013(referred to collectively as file systems ). A file system  may, for example, support the database architecture shown in . In a particular embodiment, file system monitor  may detect write, create, rename, and delete operations that are performed on files or registries in file systems . When file system monitor  detects an incremental change , file system monitor  may inform file system transaction server . For example, if file system monitor  detects an addition of a block of data to a file, file system monitor  may inform file system transaction server  of the name of the affected file, the address where the block of data was written to, and the size of the data block. File system monitor  may include any hardware, software, firmware, or combination thereof operable to detect incremental changes  in one or more file systems . File system monitor  may, for example, include a kernel-mode software driver executed by one or more processors in primary server .","File system transaction server  is operable to receive the incremental changes  identified by file system monitor  and accumulate incremental changes  for a given time period. For example, file system transaction server  may accumulate incremental changes  during five-second windows. File system transaction server  may include any hardware, software, firmware, or combination thereof operable to receive and accumulate incremental changes . File system transaction server  may, for example, include a kernel-mode software driver executed by one or more processors in primary server . In a particular embodiment, file system transaction server  acts as a client process of file system monitor . In another embodiment, accumulation of incremental changes  may not be performed, and file system transaction server  may be omitted from architecture .","Primary service  and secondary service  are operable to facilitate communication between primary server  and secondary server . For example, primary service  may receive accumulated incremental changes  from file system transaction server  and communicate the incremental changes  to secondary service . Secondary service  may receive the incremental changes  from primary service  and write the incremental changes  to a file system . File system  may, for example, support the database architecture shown in . Primary service  and secondary service  may include any hardware, software, firmware, or combination thereof operable to facilitate communication between primary server  and secondary server . Primary service  and secondary service  may, for example, include user-mode applications executed by one or more processors in primary server  and secondary server , respectively.","Console application  is operable to provide an interface to control the disaster recovery operation in system . Console application  may, for example, allow a user to control the disaster recovery operation using script files. As particular examples, a user may rename or delete a data store in secondary database  through the use of appropriate script commands. A user could also cause system  to restore primary database  using an appropriate script command. Other methods of controlling the disaster recovery operation, such as through the use of Application Programming Interfaces (APIs), may be used without departing from the scope of the present disclosure.","In one embodiment, primary service  and\/or secondary service  support the execution of one or more tasks. A task may represent a process run by primary service  and\/or secondary service  that implement some or all of the disaster recovery functionality. For example, one or more replication tasks may be responsible for replicating incremental changes  made to primary database  in secondary database . In a particular embodiment, a user may start, stop, and control the replication task, such as through the use of appropriate script commands entered through console application .","In this embodiment, a taskfile may be used by the replication task to replicate incremental changes  in secondary database . The taskfile may, for example, identify the files, folders \u2013, registries, and\/or registry branches in primary database  that are to be monitored for incremental changes . The taskfile may also identify the files, folders \u2013, registries, and\/or registry branches in primary database  that are to be excluded and not monitored for incremental changes . The taskfile may further identify timeout parameters and other parameters used in the disaster recovery operation. The taskfile may, for example, represent an .INI file that can be edited manually and\/or programmatically using standard APIs.","In one aspect of operation, a user may activate the replication task for a particular primary server . In a particular embodiment, the replication task may be activated before a full backup  begins, thus helping to ensure that any incremental changes  made by that primary server  during the full backup  are captured in system . The primary service  may read the taskfile and identify which files, folders \u2013, registries, and\/or registry branches need to be monitored. Primary service  may also configure the file system transaction server  to monitor those files, folders \u2013, registries, and\/or registry branches. File system transaction server  may then monitor any incremental changes  detected by file system monitor , report incremental changes  made to the monitored files, folders \u2013, registries, and\/or registry branches, and ignore incremental changes  made to the excluded files, folders \u2013, registries, and\/or registry branches. Secondary service  may initialize the secondary database  for storage of incremental changes . For example, secondary service  may create a \u201cCURRENT\u201d timestamp folder  under the appropriate server folder . Primary service  and secondary service  may also establish a communication link, such as a link over network .","The user may also deactivate the replication task. When that occurs, primary service  and secondary service  may stop communicating incremental changes . The user may proceed to delete the current data store, which may delete the current timestamp folder  in secondary database . The user could also rename the current data store, such as by renaming the current timestamp folder  in secondary database  to reflect a date and time. After renaming the current data store, the user may then restart the replication task. This causes system  to again monitor and record incremental changes  in a new current data store, such as a new timestamp folder .",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 3","b":["310","100","100"]},"Although  illustrates an example of a portion of a disaster recovery architecture , various changes may be made to architecture  without departing from the scope of the present disclosure. For example, the functional divisions in  are for illustration only. Various functional components could be combined with one another or removed, depending on particular needs, without departing from the scope of the present disclosure. Also, the functions of the components \u2013 of architecture  may be implemented using any hardware, software, firmware, or combination thereof. This may include, for example, logic stored in any suitable device, such as a random access memory, a read-only memory, an application-specific integrated circuit (ASIC), or a field programmable gate array (FPGA).",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 4","FIG. 1"],"b":["400","400","100","400"]},"System  performs a full backup  of information in a primary database  at step . This may include, for example, primary server  communicating some or all of the information in the primary database  to backup system . Backup system  may reside on secondary server  and\/or another suitable platform.","System  monitors incremental changes  made to the information in the primary database  at step . This may include, for example, primary server  identifying the incremental changes  made to the information in the primary database  and communicating the incremental changes  to secondary server . This may also include secondary server  storing the incremental changes  in secondary database . This may further include secondary server  performing one or more incremental backups  in which secondary server  stores at least some of the incremental changes  from secondary database  in backup system .","Primary database  fails at step . This may include, for example, primary database  suffering a hardware or software error that renders primary database  inoperable. This may also include primary server  suffering a power failure. Other causes of the database failure at step  may occur without departing from the scope of the present disclosure. Primary database  becomes operational again at step . This may include, for example, a technician resolving the hardware or software error, the restoration of power to primary server , and\/or any other suitable corrective action that resolves the database failure.","System  restores primary database  at step . This may include, for example, backup system  communicating the information from the last full backup  to primary server . This may also include backup system  communicating incremental changes  from one or more incremental backups  to primary server . This may further include secondary database  communicating at least one incremental change  to primary server . In addition, this may include primary server  using the information from secondary server  to restore primary database . Primary server  may restore primary database  to a state that existed at or near the time of the database failure, a state that existed before the failure of database , and\/or to any other suitable state.","Although  illustrates one example of a method  for disaster recovery, various changes may be made to method  without departing from the scope of the present disclosure. For example, system  could restore primary database  using information from the last full backup  without using incremental changes . This may occur, for example, when system  is restoring primary database  to a state that existed at the time of the last full backup . Other changes may be made to method  without departing from the scope of the present disclosure.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 5","FIG. 1"],"b":["500","102","500","102","500","102","500"]},"Primary server  identifies information to be monitored in primary database  at step . This may include, for example, activation of the replication task executed by primary service  and\/or secondary service . This may also include the replication task accessing a taskfile that identifies one or more files, folders \u2013, registries, and\/or registry branches in primary database . The files, folders \u2013, registries, and\/or registry branches in the taskfile may, for example, be identified by a user of system .","Primary server  communicates the identified information to backup system  during a full backup  at step . This may include, for example, primary server  communicating any identified files to backup system . This may also include primary server  communicating the contents of any selected folders \u2013 to backup system .","Primary server  detects the occurrence of one or more file events at step . A file event may, for example, represent an addition of new information to an existing or new file in database , a modification of existing information in database , or a deletion of existing information from database . The file events could occur before, during, and\/or after the full backup  performed at step . In one embodiment, file events may be detected by file system monitor .","Primary server  accumulates file events for a given period of time at step . This may include, for example, file system transaction server  receiving multiple file events from file system monitor  in a given period of time, such as during a five-second window. This may also include file system transaction server  combining the file events received during the five-second window into one or a series of messages.","Primary server  communicates the file events to secondary database  as incremental changes  at step . This may include, for example, file system transaction server  communicating the message or series of messages to primary service  and primary service  communicating the messages to secondary service .","Primary server  determines whether the time since the last full backup  exceeds a threshold at step . This may include, for example, primary server  determining whether the time since the last full backup  exceeds a threshold time period established by a user. If the time since the last full backup  does not exceed the threshold, primary server  returns to step  to detect the occurrence of additional file events. Otherwise, primary server  returns to step  to perform another full backup . In particular embodiments, primary server  may perform a full backup  once a day or once a week.","Although  illustrates one example of a method  for file backup at a primary server , various changes may be made to method  without departing from the scope of the present disclosure. For example, primary server  could monitor all of the information in primary database . In this embodiment, primary server  may not need to identify information to be monitored at step . Also, primary server  could communicate file events to secondary server  without accumulating the file events at step . In addition, primary server  could use any suitable method for determining when to perform a full backup , and is not limited to determining whether a time since the last full backup  exceeds a threshold time.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 6","FIG. 1"],"b":["600","104","600","104","600","104","600","600","102","102","104"]},"Secondary server  receives backup information from a primary database  during a full backup  at step . This may include, for example, secondary server  receiving the information from primary server  over network . Secondary server  stores the backup information in backup system  at step . This may include, for example, backup system  recording the backup information from primary database  onto one or more computer-readable media, such as magnetic tape or compact disc. This may also include secondary server  initializing secondary database , such as by deleting any contents of the server folder  associated with the primary server .","Secondary server  receives incremental changes  from primary database  at step . This may include, for example, secondary service  receiving one or more messages containing the incremental changes  from primary service . The incremental changes  may be received before, during, and\/or after the storage of the backup information in backup system  at step . Secondary server  stores the incremental changes  in a current data store at step . This may include, for example, secondary service  storing the incremental changes  in one or more files contained within a \u201cCURRENT\u201d timestamp folder  in secondary database . This may also include secondary service  creating one or more folders \u2013 and\/or one or more files in which to store the incremental changes  in secondary database .","Secondary server  determines whether a trigger event occurs at step . The trigger event may, for example, represent the passing of a given time period or receipt of a command from a user. If a trigger event is not detected, secondary server  returns to step  to receive and store additional incremental changes . If secondary server  detects a trigger event, secondary server  proceeds to perform an incremental backup . Secondary server  closes and renames the current data store at step . This may include, for example, secondary server  renaming the current timestamp folder  in secondary database  to include a label reflecting a date and a time. Secondary server  stores the renamed data store in backup system  during an incremental backup  at step . This may include, for example, secondary database  communicating the information in the renamed timestamp folder  to backup system . Secondary server  creates a new current data store in secondary database  at step . This may include, for example, secondary server  creating a new timestamp folder  in secondary database  having the name \u201cCURRENT.\u201d Secondary server  may create the new data store before, during, and\/or after the incremental backup  that occurs at step . Secondary server  deletes the renamed data store from secondary database  at step . This may include, for example, secondary server  deleting the renamed timestamp folder , and all of the contents of that timestamp folder , from database . Secondary server  returns to step  to receive and store additional incremental changes  in the new data store.","Although  illustrates one example of a method  for file backup at a secondary server , various changes may be made to method  without departing from the scope of the present disclosure. For example, in another embodiment, secondary server  does not perform incremental backups . Also, while method  illustrates secondary server  copying a single data store to backup system  during each incremental backup , secondary server  could copy more data stores to backup system  during an incremental backup. In this embodiment, method  could be modified to create a new data store after a first trigger event and perform an incremental backup  after a second trigger event. Further, method  assumes that backup system  and secondary database  are located on the same platform, such as secondary server . In another embodiment, backup system  and secondary database  may be located on different platforms, and each platform may perform a subset of the illustrated steps.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIG. 7","FIG. 1"],"b":["700","104","700","104","700","104","700","700","102","102","104"]},"Secondary server  identifies a time frame at step . The time frame may represent a time to which primary database  is to be restored. The time frame may, for example, represent a time at or near the time of the failure of primary database , a time before the failure of database , and\/or any other suitable time. Secondary server  may receive the identified time frame from a user, such as a user using client  or console application , or in any other suitable manner.","Secondary server  communicates backup information from the last full backup  to primary database  at step . This may include, for example, backup system  communicating the backup information from the last full backup  to primary server  over network .","Secondary server  determines whether the time that the last full backup  occurred exceeds the identified time at step . This may include, for example, secondary server  comparing the time that the last full backup  began to the identified time received at step . If the time associated with the last full backup  exceeds the identified time, method  ends. Secondary server  need take no further action to restore primary database .","Otherwise, secondary server  selects the earliest incremental backup  at step . Secondary server  determines whether the time associated with the selected incremental backup  exceeds the identified time at step . If so, secondary server  need take no further action to restore primary database , and method  ends. Otherwise, secondary server  communicates the incremental changes  contained in the selected incremental backup  to primary database  at step . This may include, for example, backup system  communicating the incremental changes  in the selected incremental backup  to primary server  over network .","Secondary server  determines whether more incremental backups  remain to be processed in backup system  at step . If additional incremental backups  remain, secondary server  selects the next incremental backup  at step . This may include, for example, secondary server  selecting the next incremental backup  that occurred sequentially after the current incremental backup . Secondary server  then returns to step  to determine whether the incremental changes  in the new selected incremental backup  should be communicated to primary database .","If no incremental backups  remain at step , secondary server  selects the earliest timestamp folder  in secondary database  at step . This may include, for example, secondary server  identifying the timestamp folder  having the earliest timestamp label. This may also include secondary server  identifying the earliest timestamp folder  in the server folder  associated with the primary database .","Secondary server  determines whether a time associated with the selected timestamp folder  exceeds the identified time at step . This may include, for example, secondary server  comparing the timestamp of the selected timestamp folder  to the identified time. If the identified time exceeds the time associated with the selected timestamp folder , method  ends. Otherwise, secondary server  communicates the incremental changes  contained in the selected timestamp folder  to primary database  at step . This may include, for example, secondary server  communicating the incremental changes  to primary server  over network .","Secondary server  determines whether additional timestamp folders  exist in secondary database  at step . If no additional timestamp folders  remain to be processed, method  ends. If additional timestamp folders  remain, secondary server  selects the next timestamp folder  at step . This may include, for example, secondary server  selecting the timestamp folder  having the next sequential timestamp. Secondary server  then returns to step  to process the new selected timestamp folder .","Although  illustrates one example of a method  for file restoration at secondary server , various changes may be made to method  without departing from the scope of the present disclosure. For example, secondary server  could be programmed to automatically restore primary database  to a state that existed at or near the time of failure of database . In this case, secondary server  need not receive a time frame or compare the received time to the times associated with the last full backup , the incremental backups , and the timestamp folders . Also, each incremental change  stored in backup system  and\/or secondary database  could be timestamped to show the time that the incremental change  was made. In this embodiment, secondary server  could compare the timestamp associated with each incremental change  to the time received at step . In this way, secondary server  need not communicate all of the incremental changes  contained in an incremental backup  and\/or a timestamp folder  to primary server . Further, method  assumes that backup system  and secondary database  are located on the same platform, such as secondary server . In another embodiment, backup system  and secondary database  may be located on different platforms, and each platform may perform a subset of the illustrated steps. In addition,  illustrates secondary server  determining whether information should be communicated to primary server  using the identified time. In another embodiment, secondary server  could communicate all appropriate information to primary server , and primary server  determines whether information should be communicated to primary server  using the identified time.",{"@attributes":{"id":"p-0098","num":"0097"},"figref":["FIG. 8","FIG. 1"],"b":["800","102","800","102","800","102","800"]},"Primary server  receives backup information from backup system  at step . This may include, for example, primary server  receiving the information stored during the last full backup  that occurred before the failure of primary database . Primary server  stores the backup information in primary database  at step . This may include, for example, primary server  storing the backup information received from backup system  in the appropriate folders \u2013 in primary database . This restores primary database  to a state that existed at or near the time of the last full backup .","Primary server  receives one or more incremental changes  from backup system  at step . The incremental changes  may, for example, have been stored in backup system  during one or more incremental backups . Primary server  recreates the incremental changes  to the information stored in primary database  at step . This may include, for example, primary server  receiving an incremental change  and performing the same change to the information in primary database . This restores primary database  to a state that existed at or near the time of the last incremental backup .","Primary server  receives one or more incremental changes  from secondary database  at step . This may include, for example, secondary server  communicating the incremental changes  from one or more timestamp folders  to primary server  over network . Primary server  recreates the incremental changes  received from secondary database  in primary database  at step . This restores primary database  to a state that existed at or near the time of the failure of primary database .","Although  illustrates one example of a method  for file restoration at primary server , various changes may be made to method  without departing from the scope of the present disclosure. For example, method  is illustrated as restoring primary database  to a state that existed at or near the time of the database failure. Primary database  could also be restored to a state that existed before the failure of database . In one embodiment, primary server  could restore primary database  using steps \u2013 without using steps \u2013. Primary server  could also restore primary database  using steps \u2013 without using steps \u2013. Other embodiments using a subset of the illustrated steps may be used without departing from the scope of the present disclosure.","While the present disclosure has been described in terms of preferred embodiments and generally associated methods, alterations and permutations of the preferred embodiments and method will be apparent to those skilled in the art. Accordingly, the above description of preferred exemplary embodiments does not define or constrain the present disclosure. Other changes, substitutions, and alterations are also possible without departing from the spirit and scope of the present disclosure, as defined by the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present disclosure, reference is now made to the following descriptions, taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
