---
title: Updating signature algorithms for strong name binding
abstract: The present invention extends to methods, systems, and computer program products for updating signature algorithms used for signing an assembly with a strong name without changing the identity of the assembly. The present invention enables an assembly that has already been given an identity (via strong name signing with an identity public/private key pair) to be resigned with a different public/private key pair without changing the original identity that was based on the identity public/private key pair. This is accomplished by including a counter signature within the assembly that links the original identity of the assembly to the new signature key pair.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08683207&OS=08683207&RS=08683207
owner: Microsoft Corporation
number: 08683207
owner_city: Redmond
owner_country: US
publication_date: 20111219
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["Not Applicable.","1. Background and Relevant Art","Computer systems and related technology affect many aspects of society. Indeed, the computer system's ability to process information has transformed the way we live and work. Computer systems now commonly perform a host of tasks (e.g., word processing, scheduling, accounting, etc.) that prior to the advent of the computer system were performed manually. More recently, computer systems have been coupled to one another and to other electronic devices to form both wired and wireless computer networks over which the computer systems and other electronic devices can transfer electronic data. Accordingly, the performance of many computing tasks are distributed across a number of different computer systems and\/or a number of different computing environments.","Software frameworks, such as Microsoft's .NET framework, are used to execute applications. Such frameworks consist of a runtime and a library. For example, the .NET framework consists of the Common Language Runtime (CLR) and a class library. The library in general implements common functionality that is made accessible to applications via application programming interfaces. When the runtime of a framework executes an application, it determines which portions of the framework's library are used by the application and loads those portions. In the .NET framework, these portions are referred to as assemblies. In this specification, the term assembly, however, is used generally to refer to an identifiable grouping of code that provides functionally that can be utilized by other code. Assembly can be equated with library within this specification. In this sense, a Java Archive (Jar) file can be considered an assembly.","When an application is designed to be executed on a particular framework, the application generally references assemblies available in the framework. When the application is executed on the framework, the referenced assemblies are loaded and executed as well. Because of this, it is desirable to protect the security of an assembly so that it can be ensured that the assembly has not been modified by anyone other than the publisher of the assembly.","One approach for securing an assembly is known as strong name signing and is depicted in computer architecture  in . An assembly  is signed with a strong name, generally at compile time, by the owner of the assembly (e.g. on computer system ). To sign assembly  with a strong name, assembly  is given a unique identity that may comprise an identifier of the assembly (e.g. file name , version ) and a public key of a public\/private key pair. In this specification, this public\/private key pair is referred to as the identity public\/private key pair.","A cryptographic digest of the contents of the assembly is also generated. Then, a digital signature  of this digest is created using the identity private key of the identity public\/private key pair. This digital signature  is stored within the assembly. Accordingly, a strong name comprises a unique identity of the assembly which includes the identity public key, and the digital signature of the digest using the identity private key.","Once signed with a strong name, these assemblies are made available for use by other software components (e.g. other assemblies ,  executed within framework  on computer system ). For example, one company may release a strong named assembly for use within the .NET framework. Whenever another assembly (e.g. assemblies , ) that references the strong named assembly  is built, information about the strong named assembly (as well as any other assemblies referenced by the other assembly) is stored. For example, when an assembly for the .NET framework is built that references strong named assembly , information is added to a manifest (e.g. ) for the built assembly that identifies that the assembly references strong named assembly  (e.g. by including the filename , version , and public key of the referenced assembly ). This information is based on the identity of the strong named assembly.","Subsequently, when assembly  is executed within framework , the loader determines which assemblies to load based on the information in manifest . In other words, the loader will use the stored identity to look for the strong named assembly . Before loading the strong named assembly, framework  will verify the identity of the strong named assembly (e.g. as a means to verify that the assembly has not been tampered with). This verification is done by extracting the identity public key from the identity of the assembly, using the identity public key to decrypt the digital signature of the digest, generating a cryptographic digest of the contents of the assembly, and comparing the decrypted digest to the generated digest. If the digests match, then it is known that the digital signature of the digest was generated using the identity private key, and the assembly will be loaded.","This approach works as long as the identity private key is kept secure and the algorithm used to sign the digest with the identity private key is not known. However, many identity private keys as well as the algorithms used to generate digital signatures with such identity private keys are no longer secure. For example, if a second party obtains a first party's private key, the second party can modify (e.g. add malicious code to) the first party's assemblies and resign them using the first party's private key. The modified assemblies would then appear as if they came from the first party. Of course, this problem could be addressed by the first party resigning the assemblies with a new and\/or stronger identity private key and\/or using a stronger algorithm. This approach, however, would change the identity of the assemblies and would therefore require rebuilding each assembly that references the assemblies (so that the manifest correctly identifies the assemblies). As can be seen, rebuilding each assembly is impractical especially given that many strong named assemblies are shared assemblies used by many applications.","The present invention extends to methods, systems, and computer program products for updating signature algorithms used for signing an assembly with a strong name without changing the identity of the assembly. The present invention enables an assembly that has already been given an identity (via strong name signing with an identity public\/private key pair) to be resigned with a different public\/private key pair without changing the original identity that was based on the identity public\/private key pair.","In one embodiment, an updated signature key is used to sign an assembly with a strong name without modifying the identity of the assembly after the assembly has been released for use within a runtime. In this embodiment, an assembly is received and signed with a strong name using an identity public\/private key pair by: (1) assigning an identity to the assembly, the identity comprising an identifier of the assembly and the identity public key; (2) creating a cryptographic digest of the contents of the assembly; (3) creating a digital signature of the cryptographic digest using the identity private key; (4) storing the identity and the digital signature in the assembly; and (5) releasing the assembly with the assigned strong name.","At some later time, the assembly is signed with an updated strong name using a signature public\/private key pair without modifying the identity of the assembly by: (1) creating an updated digital signature of the cryptographic digest of the assembly using the signature private key; (2) creating a counter signature for the assembly that includes the signature public key and a digital signature of the signature public key using the identity private key; and (3) storing within the assembly the identity, the updated digital signature of the cryptographic digest, and the counter signature. Finally, the assembly is released with the updated strong name.","In another embodiment, the identity of an assembly with an updated strong name is validated. In this embodiment, an assembly is received. The assembly has an identity comprising an identifier of the assembly and an identity public key of an identity public\/private key pair. The assembly also has an updated strong name comprising a digital signature of a cryptographic digest of the contents of the assembly using a signature private key of a signature public\/private key pair. The identity of the assembly is verified by: (1) extracting the identity public key from the identity of the assembly and a counter signature from the assembly, the counter signature comprising the signature public key and a digital signature of the signature public key using the identity private key; (2) using the identity public key to verify that the digital signature of the signature public key was generated using the identity private key; (3) after verifying that the digital signature of the signature public key was generated using the identity private key, decrypting the digital signature of the cryptographic digest of the contents of the assembly using the signature public key; (4) creating a cryptographic digest of the contents of the assembly; (5) comparing the created cryptographic digest to the decrypted cryptographic digest; and (6) validating the identity of the assembly upon determining that the created cryptographic digest is the same as the decrypted cryptographic digest.","This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","Additional features and advantages of the invention will be set forth in the description which follows, and in part will be obvious from the description, or may be learned by the practice of the invention. The features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.","The present invention extends to methods, systems, and computer program products for updating signature algorithms used for signing an assembly with a strong name without changing the identity of the assembly. The present invention enables an assembly that has already been given an identity (via strong name signing with an identity public\/private key pair) to be resigned with a different public\/private key pair without changing the original identity that was based on the identity public\/private key pair.","In one embodiment, an updated signature key is used to sign an assembly with a strong name without modifying the identity of the assembly after the assembly has been released for use within a runtime. In this embodiment, an assembly is received and signed with a strong name using an identity public\/private key pair by: (1) assigning an identity to the assembly, the identity comprising an identifier of the assembly and the identity public key; (2) creating a cryptographic digest of the contents of the assembly; (3) creating a digital signature of the cryptographic digest using the identity private key; (4) storing the identity and the digital signature in the assembly; and (5) releasing the assembly with the assigned strong name.","At some later time, the assembly is signed with an updated strong name using a signature public\/private key pair without modifying the identity of the assembly by: (1) creating an updated digital signature of the cryptographic digest of the assembly using the signature private key; (2) creating a counter signature for the assembly that includes the signature public key and a digital signature of the signature public key using the identity private key; and (3) storing within the assembly the identity, the updated digital signature of the cryptographic digest, and the counter signature. Finally, the assembly is released with the updated strong name.","In another embodiment, the identity of an assembly with an updated strong name is validated. In this embodiment, an assembly is received. The assembly has an identity comprising an identifier of the assembly and an identity public key of an identity public\/private key pair. The assembly also has an updated strong name comprising a digital signature of a cryptographic digest of the contents of the assembly using a signature private key of a signature public\/private key pair. The identity of the assembly is verified by: (1) extracting the identity public key from the identity of the assembly and a counter signature from the assembly, the counter signature comprising the signature public key and a digital signature of the signature public key using the identity private key; (2) using the identity public key to verify that the digital signature of the signature public key was generated using the identity private key; (3) after verifying that the digital signature of the signature public key was generated using the identity private key, decrypting the digital signature of the cryptographic digest of the contents of the assembly using the signature public key; (4) creating a cryptographic digest of the contents of the assembly; (5) comparing the created cryptographic digest to the decrypted cryptographic digest; and (6) validating the identity of the assembly upon determining that the created cryptographic digest is the same as the decrypted cryptographic digest.","Embodiments of the present invention may comprise or utilize a special purpose or general-purpose computer including computer hardware, such as, for example, one or more processors and system memory, as discussed in greater detail below. Embodiments within the scope of the present invention also include physical and other computer-readable media for carrying or storing computer-executable instructions and\/or data structures. Such computer-readable media can be any available media that can be accessed by a general purpose or special purpose computer system. Computer-readable media that store computer-executable instructions are computer storage media (devices). Computer-readable media that carry computer-executable instructions are transmission media. Thus, by way of example, and not limitation, embodiments of the invention can comprise at least two distinctly different kinds of computer-readable media: computer storage media (devices) and transmission media.","Computer storage media (devices) includes RAM, ROM, EEPROM, CD-ROM, solid state drives (\u201cSSDs\u201d) (e.g., based on RAM), Flash memory, phase-change memory (\u201cPCM\u201d), other types of memory, other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store desired program code means in the form of computer-executable instructions or data structures and which can be accessed by a general purpose or special purpose computer.","A \u201cnetwork\u201d is defined as one or more data links that enable the transport of electronic data between computer systems and\/or modules and\/or other electronic devices. When information is transferred or provided over a network or another communications connection (either hardwired, wireless, or a combination of hardwired or wireless) to a computer, the computer properly views the connection as a transmission medium. Transmissions media can include a network and\/or data links which can be used to carry desired program code means in the form of computer-executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer-readable media.","Further, upon reaching various computer system components, program code means in the form of computer-executable instructions or data structures can be transferred automatically from transmission media to computer storage media (devices) (or vice versa). For example, computer-executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module (e.g., a \u201cNIC\u201d), and then eventually transferred to computer system RAM and\/or to less volatile computer storage media (devices) at a computer system. Thus, it should be understood that computer storage media (devices) can be included in computer system components that also (or even primarily) utilize transmission media.","Computer-executable instructions comprise, for example, instructions and data which, when executed at a processor, cause a general purpose computer, special purpose computer, or special purpose processing device to perform a certain function or group of functions. The computer executable instructions may be, for example, binaries, intermediate format instructions such as assembly language, or even source code. Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the described features or acts described above. Rather, the described features and acts are disclosed as example forms of implementing the claims.","Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations, including, personal computers, desktop computers, laptop computers, message processors, hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, mobile telephones, PDAs, pagers, routers, switches, and the like. The invention may also be practiced in distributed system environments where local and remote computer systems, which are linked (either by hardwired data links, wireless data links, or by a combination of hardwired and wireless data links) through a network, both perform tasks. In a distributed system environment, program modules may be located in both local and remote memory storage devices.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["200","200","100","200","101","102","101","104","102","106","111","200","104","101"]},"Each of the depicted computer systems is connected to one another over (or is part of) a network, such as, for example, a Local Area Network (\u201cLAN\u201d), a Wide Area Network (\u201cWAN\u201d), and even the Internet. Accordingly, each of the depicted computer systems as well as any other connected computer systems and their components, can create message related data and exchange message related data (e.g., Internet Protocol (\u201cIP\u201d) datagrams and other higher layer protocols that utilize IP datagrams, such as, Transmission Control Protocol (\u201cTCP\u201d), Hypertext Transfer Protocol (\u201cHTTP\u201d), Simple Mail Transfer Protocol (\u201cSMTP\u201d), etc.) over the network.","In a typical implementation, computer system  represents many different computer systems. In one specific example, computer system  can represent any computer having the .NET framework. In this example, assembly  can be a dynamic link library created by any company (e.g. Microsoft or any other) for use by various applications or components that run on the .NET framework. The reference to the .NET framework in this specification should not be interpreted as limiting the invention to the .NET framework. As one of skill in the art will understand, the techniques of the invention can be applied to any container of code whether it be an assembly, library, or other file, to provide a strong name for uniquely identifying and validating the identity of such containers.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 1"]},"As shown in , this is accomplished using a counter signature.  differs from  in that assembly  in  includes a single digital signature  whereas assembly  in  includes a digital signature and a counter signature ","Digital signature , like digital signature , is generated from the cryptographic digest of the assembly contents . However, digital signature is generated using an updated private key referred to as the signature private key of a signature public\/private key pair.","Counter signature is used to link the identity of assembly  to the new signature public\/private key pair. Counter signature comprises the signature public key and a digital signature of the signature public key using the identity private key. As is more fully explained below, by signing the signature public key with the identity private key, a link is created between the signature public\/private key pair (used to update the strong name of the assembly) and the identity public\/private key pair (which define the identity of the assembly).",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 3","FIG. 1","FIG. 2"],"b":["104","204","104","204","104","204","204"],"i":["a","b","b ","a. "]},"In , signature algorithm  is shown as a box having two inputs and an output. A first input is the data to be signed and is shown as a box whereas the second input is the key used to sign the data and is shown as a key. Also, although signature algorithm  is shown as being used to generate each digital signature, a different signature algorithm could be used to generate any of the digital signatures. For example, a stronger signature algorithm may be used to generate digital signatures and in copy of assembly .","As shown, digital signature  in copy is generated from a cryptographic digest  of assembly contents . Cryptographic digest  is signed by signature algorithm  using identity private key to generate digital signature .","Similarly, digital signature in copy is generated from cryptographic digest  of assembly contents . However, cryptographic digest  is signed by signature algorithm  using signature private key to generate digital signature . Because signature private key is more secure than identity private key , digital signature is stronger than digital signature .","Without counter signature , the identity of copy of assembly  could not be verified using digital signature without rebuilding all assemblies that referenced assembly . This is because framework  would decrypt digital signature using identity public key , and as further described below, compare the decrypted digital signature to a framework generated cryptographic digest of assembly contents . In this scenario, because framework  would be using a different key pair (identity key pair -) than was used to sign digital signature (signature key pair -), this comparison would fail preventing assembly  from being loaded.","Counter signature provides the link between the original identity of assembly  and the new signature key pair -being used to sign assembly  with a strong name. As shown in , counter signature comprises signature public key as well as a digital signature of signature public key . Digital signature is generated by signing signature public key with identity private key using signature algorithm  (or another algorithm).","As can be seen in , the identity of assembly  remains the same in both copies and . Specifically, identity public key is used in both copies in conjunction with filename and version to uniquely identify assembly . In this way, copy of assembly  can be made available to applications (e.g. other assemblies) that have already been built against copy of assembly . In other words, such applications will still be able to identify assembly  because assembly 's identity has not changed even though it has been signed with an updated strong name. The process of validating an assembly with an updated strong name will now be described.","Referring again to , when assembly  is built against assembly , an entry is created in manifest that uniquely identifies assembly . After being built, anytime assembly  is executed, framework  uses manifest to determine which assemblies are referenced by assembly  and therefore need to be loaded. Framework  determines that assembly  should be loaded based on the entry in manifest which identifies assembly  based on filename , version , and identity public key . For this reason, for assembly  to execute, framework  must be able to identify assembly  and validate its identity.","If, however, a copy of assembly  were resigned with a different identity key (e.g. a stronger identity key), the copy would no longer have the same identity as indicated in manifest . Accordingly, framework  would not be able to load the copy of assembly  when assembly  is executed. For this reason, the present invention includes counter signature in a copy of the assembly that is signed with an updated strong name to create an association between the original identity and the new signature key pair.","Referring to , after copy of assembly  is distributed to be used in place of copy , when framework  executes assembly , it accesses manifest to determine which assemblies need to be loaded. Framework  then looks for an assembly having the identity defined within the entry in manifest . Because copy has the same identity as copy , framework  will still locate copy ","Prior to loading copy of assembly , framework  attempts to validate the identity of assembly  using identity public key as defined in manifest . This validation is performed by extracting digital signature from counter signature and decrypting digital signature using identity public key . Because digital signature was generated by signing signature public key with identity private key , this decrypting will yield signature public key ","Because the signature public key included in counter signature matches the signature public key obtained by decrypting digital signature with identity public key , it is known that digital signature was generated using identity private key . In this way, it is verified that signature public key is a valid key for verifying the identity of assembly .","After the validity of signature public key has been established, framework  then uses signature public key to validate the identity of copy in much the same way as identity public key was used previously to validate the identity of copy . Specifically, framework  generates a cryptographic digest  of assembly contents , and decrypts digital signature using signature public key . If the generated cryptographic digest matches the decrypted digital signature , it is known that digital signature was created using signature private key , and therefore, copy is validated.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 4","b":["106","106","104","106","111","106","111","204","104","204","204"],"i":["a","b ","b ","a "]},"To verify the identity of copy , framework  first uses the identity public key (which defines the original identity of assembly ) to decrypt digital signature .  illustrates that signature algorithm  is used to decrypt digital signature , however, as stated above, different signature algorithms can be used. If the result of decrypting digital signature with identity public key is the same as signature public key in counter signature , it is known that digital signature was generated with identity private key ","Signature public key is then used to decrypt digital signature . Framework  also generates a cryptographic digest  of assembly contents . The result of decrypting digital signature is compared to cryptographic digest . If they are equal, it is known that digital signature was created using signature private key thereby validating copy of assembly .","As can be seen, if it is feared that a company's identity private key has been compromised (or that the signing algorithm has been cracked), the company can use a stronger key to sign its assemblies while still using the original identity public key to uniquely identify the assemblies. One benefit of this approach, as described, is that the assemblies that have been built against a strong name assembly do not need to be modified (e.g. rebuilt) when a new strong name is applied to the strong name assembly.","Another feature provided by the present invention is the ability to prevent the loading of an assembly whose strong name has been broken. In other words, if it is known that the identity private key or the algorithm used to sign an assembly with a strong name has been compromised, the present invention allows a notification to be sent out to framework  indicating that any assembly signed with the compromised identity private key should not be loaded unless the assembly has been signed with an updated signature key.","For example, referring to , if it is known that identity private key has been compromised, a notification can be sent informing framework  that any assembly identified by identity public key should not be loaded unless the assembly has an updated strong name. Framework  can implement this functionality by requiring that a counter signature be found in such assemblies as described above. Such notifications can be obtained periodically or on demand, for example, using an update service such as Windows Update.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 5","FIG. 3"],"b":["500","500"]},"Method  includes an act  of receiving an assembly. For example, copy of assembly  can be received by any tool, module, component, etc. that is configured to sign an assembly with a strong name.","Method  includes an act  of signing the assembly with a strong name using an identity public\/private key pair. For example, copy of assembly  can be signed with a strong name using identity public\/private key pair -","Act  includes sub-act of assigning an identity to the assembly, the identity comprising an identifier of the assembly and the identity public key. For example, the identity of assembly  can be file name , version , and identity public key ","Act  includes sub-act of creating a cryptographic digest of the contents of the assembly. For example, cryptographic digest  of assembly contents can be created.","Act  includes sub-act of creating a digital signature of the cryptographic digest using the identity private key. For example, digital signature  can be created by signing cryptographic digest  with identity private key ","Act  includes sub-act of storing the identity and the digital signature in the assembly. For example, filename , version , and identity public key can be stored within copy as the identity of assembly . Digital signature  can also be stored in copy of assembly .","Method  includes act  of releasing the assembly with the assigned strong name. For example, copy of assembly  can be released.","Method  includes an act  of signing the assembly with an updated strong name using a signature public\/private key pair without modifying the identity of the assembly. For example, copy of assembly  can be signed with an updated strong name using signature public\/private key pair -without modifying the identity of assembly .","Act  includes sub-act of creating an updated digital signature of the cryptographic digest of the assembly using the signature private key. For example, digital signature can be created by signing cryptographic digest  using signature private key ","Act  includes sub-act of creating a counter signature for the assembly that includes the signature public key and a digital signature of the signature public key using the identity private key. For example, counter signature can comprise signature public key and digital signature . Digital signature can be generated by signing signature public key with identity private key ","Act  includes sub-act of storing within the assembly the identity, the updated digital signature of the cryptographic digest, and the counter signature. For example, filename , version , and identity public key can be stored within copy as the identity of assembly . Digital signature and counter signature can also be stored in copy of assembly .","Method  includes an act  of releasing the assembly with the updated strong name. For example, copy of assembly  can be released.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 6","FIGS. 2 and 4"],"b":["600","600"]},"Method  includes an act  of receiving an assembly. The assembly has an identity comprising an identifier of the assembly and an identity public key of an identity public\/private key pair. The assembly also has an updated strong name comprising a digital signature of a cryptographic digest of the contents of the assembly using a signature private key of a signature public\/private key pair. For example, copy of assembly  can be received at framework . Copy can include filename , version , and identity public key . Copy can also include digital signature and counter signature ","Method  includes an act  of verifying the identity of the assembly. Act  includes sub-act of extracting the identity public key from the identity of the assembly and a counter signature from the assembly. The counter signature comprises the signature public key and a digital signature of the signature public key using the identity private key. For example, identity public key and counter signature , including digital signature , can be extracted from copy ","Act  includes sub-act of using the identity public key to verify that the digital signature of the signature public key was generated using the identity private key. For example, digital signature can be decrypted using identity public key and compared to signature public key ","Act  includes sub-act of after verifying that the digital signature of the signature public key was generated using the identity private key, decrypting the digital signature of the cryptographic digest of the contents of the assembly using the signature public key. For example, if decrypted digital signature is the same as signature public key , signature public key can be used to decrypt digital signature ","Act  includes sub-act of creating a cryptographic digest of the contents of the assembly. For example, cryptographic digest  can be generated from assembly contents ","Act  includes sub-act of comparing the created cryptographic digest to the decrypted cryptographic digest. For example, decrypted digital signature can be compared to cryptographic digest .","Act  includes sub-act of validating the identity of the assembly upon determining that the created cryptographic digest is the same as the decrypted cryptographic digest. For example, if decrypted digital signature is the same as cryptographic digest , copy of assembly  is validated.","The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope. For example, an implementation that employs the techniques of the invention, but uses a designation other than assembly to define a container of code or a designation other than framework to define an execution environment should not be excluded from the scope of the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order to describe the manner in which the above-recited and other advantages and features of the invention can be obtained, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments thereof which are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered to be limiting of its scope, the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings in which:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
