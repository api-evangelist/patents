---
title: Scalable virtual partitioning of resources
abstract: Resources are partitioned via a virtual partitioning system to distribute the resources over a plurality of resource servers. A virtual partition table can be kept at each of a set of resource managers handling requests for resources in tandem. When a resource is requested, a virtual partition value is calculated algorithmically, and the value is mapped to a resource component via the virtual partition table. The resource component encapsulates information indicating on which of the resource servers the resource resides and can provide a component for performing operations on the resource even though the requestor does not have information about where the resource resides. The resources can be repartitioned by modifying the virtual partition table, thus allowing the addition of additional resource servers to the system while the resources remain available. Additional resource types can be added without reengineering the system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07454516&OS=07454516&RS=07454516
owner: Microsoft Corporation
number: 07454516
owner_city: Redmond
owner_country: US
publication_date: 20000803
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATION DATA","TECHNICAL FIELD","COPYRIGHT AUTHORIZATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","DEFINITIONS","EXEMPLARY IMPLEMENTATION OF THE INVENTION","EXAMPLE OPERATION OF THE INVENTION","ALTERNATIVES"],"p":["This patent application claims priority to U.S. patent application Ser. No. 09\/631,220, filed Aug. 2, 2000, which is hereby incorporated by reference.","The invention relates to partitioning resources provided to a set of client computers accessing the resources via a network.","A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","The tremendous popularity of the World Wide Web has presented a number of challenges to web site administrators. As the number of computer users having access to web browsers increases, web site administrators constantly work to improve the efficiency of their web sites in the face of explosive growth in both the number of users visiting their site and the sheer quantity of information being provided. Many web site administrators have discovered that a single web server computer can not perform the tasks necessary to receive and fulfill requests from users browsing their site, no matter how well the web server computer is optimized.","One way web site administrators address the challenges presented by massive numbers of browsing users is by placing content on a computer separate from the web server by using a facility called \u201cvirtual directories.\u201d The virtual directory feature is supported by MICROSOFT Internet Information Server (IIS), a product available from Microsoft Corporation of Redmond, Wash. One aspect of a virtual directory allows a web site administrator to redirect requests for information (e.g., web pages in \u201chttp:\/\/a.b.com\/products\/\u201d) to a server separate from the web server. The web site administrator configures such a system by creating a virtual directory and specifying the location from which the information is to be drawn for the virtual directory.","The web site administrator can then deploy several web servers on several machines, all drawing content from a content server running on yet another machine. Requests for information can be divided among the several web servers via a routing mechanism. In this way, the web servers can be optimized to field requests for content, and the content server can be optimized to serve content. The content server need not provide full web server functionality, and its computing resources can be devoted to serving content, leading to greater availability of the data.","Still, however, the content is being drawn from a single content server. As the amount of data increases, the single content server becomes overwhelmed. Web site administrators have responded by creating multiple virtual directories and pointing them to multiple different servers. The administrator can then scatter the site's web pages over multiple content servers by placing them in different virtual directories. When a request for a web page comes in to the web site, the software fielding the request at a web server maps the requested page's location (e.g., \u201cproducts\u201d) to virtual directory information, which specifies on which content server the content resides. Web site administrators thus attempt to avoid overload of any single machine by directing only a percentage of the incoming requests for web pages to any one content server.","The described approach of using multiple content servers in conjunction with virtual directories suffers from some drawbacks. First, dividing the content into virtual directories can sometimes result in an artificial division of content that is exposed to the browsing user. Typically, the web site administrator is forced to design the virtual directory structure in anticipation of how much load will be handled by a server. For example, in a system where new users are assigned space for storing information on the web site, the web site administrator might create three virtual directories (\u201cserver1\/\u201d \u201cserver2\/\u201d, and \u201cserver3\/) and assign users with log on names starting with the letters \u201cA-H\u201d to server1\/, users with log on names \u201cI-P\u201d to server2\/, and users with log on names \u201cQ-Z\u201d to server3\/.","Users browsing the site will see the virtual directory (e.g., http:\/\/www.a.b.com\/server3\/smith\/) when browsing the site. However, the fact that the content resides on server3 is unimportant to the browsing user, and including the virtual directory information results in awkward, lengthy references to web pages.","Further, the web site may grow, and the virtual directory feature presents problems when the web site administrator wishes to add an additional content server. For example, she might wish to divide an existing virtual directory (e.g. \u201cserver2\/\u201d) into two separate virtual directories (e.g., \u201cserver2\/\u201d and \u201cserver4\/\u201d) to direct some requests for information to the additional content server.","To add the additional content server and a new virtual directory, current information from the old virtual directory must be copied. However, if the web site is active, additional changes might be made to the directory by browsing users during the copy process. So, the copied information is no longer current. Thus, copying leads to a synchronization problem.","To solve the synchronization problem, the web site administrator may shut down the virtual directory while changes are being made. However, such an approach has the undesirable side effect of disrupting service for a large number of users. Typically, the virtual directory is being divided because it is popular, so shutting it down involves shutting down one of the site's more popular areas. And, if the directory contains a large volume of information, the copy process may take some time. Thus, a popular area of the web site is unavailable for an extended period.","Further, modifying the virtual directory information is not a simple process. Typically, the virtual directory information is stored locally at each of the web servers. Thus, the web site administrator must change the information at each of the servers. As the number of servers grows, such a task can be prohibitively time-consuming.","Further, even if the virtual directory facility is used, it is still possible that a single virtual directory cannot be easily divided. If such a virtual directory is being overwhelmed with requests, the web site administrator is left with no mechanism to efficiently divide the content among separate content servers. Thus, there is a need for a more effective way to divide content among separate content servers.","The invention includes methods and systems relating to various ways of addressing the issues surrounding scenarios involving partitioning resources among multiple servers. For example, a virtual partition system can be designed to determine a partition value algorithmically. Thus, each of the web servers can determine on which partition a resource resides without reference to a central map. Once the partition value is determined, it can then be mapped to a resource component, which provides access to a resource server, regardless of the resource server's technology or the type of resource provided.","Since the partition value can be determined algorithmically, the underlying structure of the partition system need not be exposed to the browsing user. Instead, the resources can be partitioned based on a key (e.g., user name or subject) associated with the resource.","The virtual partitions can be arbitrarily mapped among a number of servers serving the resources. For example, all the virtual partitions might be assigned to a single server, or each virtual partition might be assigned to a different server. The system can thus scale from a single server to many servers.","A set of resource managers can field resource requests at a plurality of web servers and use the virtual partition system in tandem with reference to a local map indicating partition mapping. Although a resource administrator feature is provided to manage the partition mapping across the resource managers, the virtual partition system continues to function even if the resource administrator feature becomes unavailable.","In another feature, the virtual partition system supports repartitioning while allowing access to the resources. Repartitioning can be used to add a new resource server to the web site with minimal impact on browsing users. If there are a large number of possible virtual partition values, only a very small percentage of the resources is locked during repartitioning. Further, the resources can still be read during repartitioning, avoiding disruption to the web site. Resources can be further partitioned by resource type to provide the web site administrator with an additional way to partition the resources. Repartitioning can be accomplished via a single directive by a user, rather than a directive at each machine.","The virtual partition system can employ resource components having a standard set of invokable functions. The functions are suitable for use with a wide variety of resource servers, regardless of the type of resource. For example, a resource server developer can assemble a resource component suitable for providing access to a certain type of resource as long as it makes the standard set of functions available. The resource component may handle resource access itself or serve another component if, for example, state information is to be maintained during access to a resource.","The resource administrator feature also allows an administrating user to alter configuration information used at the resource managers. In this way, the system allows convenient configuration changes across of a large number of servers at once.","Additional features and advantages of the invention will be made apparent from the following detailed description of illustrated embodiments, which proceeds with reference to the accompanying drawings.","The invention is directed to methods and systems related to providing access to resources via multiple resource servers. In one embodiment illustrated herein, the invention is used in conjunction with MICROSOFT Internet Information Service, marketed by Microsoft Corporation of Redmond, Wash. Briefly described, the Internet Information Service software is a versatile service suitable for use in a wide variety of web site scenarios.","The term instantiate includes both creating a programming component of a particular class and obtaining a programming component from a pool of programming components already created.","The term resource server includes a single computer server or a cluster of servers serving resources. Such servers include data servers (e.g., file servers and database servers), application servers, and the like.","Exemplary Operating Environment",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 1"},"With reference to , an exemplary system for implementing the invention includes a conventional computer , including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The processing unit may be any of various commercially available processors, including Intel x86, Pentium and compatible microprocessors from Intel and others, including Cyrix, AMD and Nexgen; Alpha from Digital; MIPS from MIPS Technology, NEC, IDT, Siemens, and others; and the PowerPC from IBM and Motorola. Dual microprocessors and other multi-processor architectures also can be used as the processing unit .","The system bus may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of conventional bus architectures such as PCI, VESA, Microchannel, ISA and EISA, to name a few. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS), containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is stored in ROM .","The computer  further includes a hard disk drive , a magnetic disk drive , e.g., to read from or write to a removable disk , and an optical disk drive , e.g., for reading a CD-ROM disk  or to read from or write to other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of data, data structures, computer-executable instructions, etc. for the computer . Although the description of computer-readable media above refers to a hard disk, a removable magnetic disk and a CD, it should be appreciated by those skilled in the art that other types of media which are readable by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, and the like, may also be used in the exemplary operating environment.","A number of programs may be stored in the drives and RAM , including an operating system , one or more application programs , other programs , and program data . The operating system  in the illustrated computer may be the MICROSOFT WINDOWS NT Server operating system, together with the before mentioned MICROSOFT Transaction Server.","A user may enter commands and information into the computer  through a keyboard  and pointing device, such as a mouse . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, computers typically include other peripheral output devices (not shown), such as speakers and printers.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote client computer . The remote computer  may be a workstation, a terminal computer, another server computer, a router, a peer device or other common network node, and typically includes many or all of the elements described relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, extranets, and the Internet.","When used in a LAN networking environment, the computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem , or is connected to a communications server on the LAN, or has other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In accordance with the practices of persons skilled in the art of computer programming, the present invention is described below with reference to acts and symbolic representations of operations that are performed by the computer , unless indicated otherwise. Such acts and operations are sometimes referred to as being computer-executed. It will be appreciated that the acts and symbolically represented operations include the following: manipulation by the processing unit  of electrical signals representing data bits, which causes a resulting transformation or reduction of the electrical signal representation; the maintenance of data bits at memory locations in the memory system (including the system memory , hard drive , floppy disks , and CD-ROM ) to thereby reconfigure or otherwise alter the computer system's operation; as well as other processing of signals. The memory locations where data bits are maintained are physical locations that have particular electrical, magnetic, or optical properties corresponding to the data bits.","Programming Component Overview",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 2","b":"76","i":"Inside OLE, Second Edition"},"In accordance with COM, the COM object  is represented in the computer system  () by an instance data structure , a virtual function table , and member methods (also called member functions) -. The instance data structure  contains a pointer  to the virtual function table  and data  (also referred to as data members or properties of the programming component). A pointer is a data value that holds a reference to an item. As will be explained in greater detail below, the conventional instance data structure  is modified to accommodate grouping the data members into separate groups. The virtual function table  contains entries - for the member methods -. Each of the entries - contains a reference to the code - that implements the corresponding member methods.","The pointer , the virtual function table , and the member methods - implement an interface of the COM object . By convention, the interfaces of a COM object are illustrated graphically as a plug-in jack as shown for the programming components  in . Also, interfaces conventionally are given names beginning with a capital \u201cI.\u201d In accordance with COM, the COM object  can include multiple interfaces, which are implemented with one or more virtual function tables. The member function of an interface is denoted as \u201cIInterfaceName::MethodName.\u201d Other systems can use a similar approach, even though the grouped methods are not called an interface.","The virtual function table  and member methods - of the COM object  are provided by a programming component server program  (hereafter \u201cobject server DLL\u201d) which is stored in the computer  () as a dynamic link library file (denoted with a \u201c.dll\u201d file name extension). In accordance with COM, the object server DLL  includes code for the virtual function table  and member methods - of the classes that it supports, and also includes a class factory  that generates the instance data structure  for a programming component of the class. In some cases, a COM object can be implemented without a virtual function table.","Other programming components and programs (referred to as a \u201cclient\u201d of the COM object ) access the functionality of the COM object by invoking the member methods through the COM object's interfaces. Typically, however, the COM object is first instantiated (i.e., by causing the class factory to create the instance data structure  of the programming component); and the client obtains an interface pointer to the COM object.","Before the COM object  can be instantiated, the programming component is first installed on the computer . Typically, installation involves installing a group of related programming components called a package. The COM object  is installed by storing the object server DLL file(s)  that provides the programming component in data storage accessible by the computer  (typically the hard drive , shown in ), and registering COM attributes (e.g., class identifier, path and name of the object server DLL file , etc.) of the COM object in one or more data stores storing configuration information. Configuration data stores for the programming component include a registry and a catalog.","A client requests instantiation of the COM object using system-provided services and a set of standard, system-defined component interfaces based on class and interface identifiers assigned to the COM Object's class and interfaces. More specifically, the services are available to client programs as application programming interface (API) functions provided in the COM library, which is a component of the MICROSOFT WINDOWS 2000 operating system in a file named \u201cOLE32.DLL.\u201d Other versions of COM or other programming components services may use another file or another mechanism. Also in COM, classes of COM objects are uniquely associated with class identifiers (\u201cCLSIDs\u201d) and registered by their CLSID in the registry (or the catalog, or both). The registry entry for a COM object class associates the CLSID of the class with information identifying an executable file that provides the class (e.g., a DLL file having a class factory to produce an instance of the class). Class identifiers are 128-bit globally unique identifiers (\u201cGUIDs\u201d) that the programmer creates with a COM service named \u201cCoCreateGUID\u201d (or any of several other APIs and utilities that are used to create universally unique identifiers) and assigns to the respective classes. The interfaces of a component additionally are associated with interface identifiers (\u201cIIDs\u201d).","In particular, the COM library provides an API function, \u201cCoCreateInstance( ),\u201d that the client program can call to request creation of a component using its assigned CLSID and an IID of a desired interface. In response, the \u201cCoCreateInstance( )\u201d API looks up the registry entry of the requested CLSID in the registry to identify the executable file for the class. The \u201cCoCreateInstance( )\u201d API function then loads the class' executable file and uses the class factory in the executable file to create an instance of the COM object . Finally, the \u201cCoCreateInstance( )\u201d API function returns a pointer of the requested interface to the client program. The \u201cCoCreateInstance( )\u201d API function can load the executable file either in the client program's process, or into a server process which can be either local or remote (i.e., on the same computer or a remote computer in a distributed computer network) depending on the attributes registered for the COM object  in the system registry.","Once the client of the COM object  has obtained this first interface pointer of the COM object, the client can obtain pointers of other desired interfaces of the component using the interface identifier associated with the desired interface. COM defines several standard interfaces generally supported by COM objects including the \u201cIUnknown\u201d interface. This interface includes a member function named \u201cQueryInterface( ).\u201d The \u201cQueryInterface( )\u201d function can be called with an interface identifier as an argument, and returns a pointer to the interface associated with that interface identifier. The \u201cIUnknown\u201d interface of each COM object also includes member functions, \u201cAddRef( )\u201d and \u201cRelease( )\u201d, for maintaining a count of client programs holding a reference (e.g., an interface pointer) to the COM object. By convention, the \u201cIUnknown\u201d interface's member functions are included as part of each interface on a COM object. Thus, any interface pointer that the client obtains to an interface of the COM object  can be used to call the QueryInterface function.","Web Farm Overview",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 3","b":["302","332","332"]},"The web site  can accommodate a large number of browsing computers A-F having access to a network . The browsing computers A-F can be of any variety of hardware, including a hand held device F. Typically, requests from the browsing computers A-F are received at a router , which in turn relays the requests to the web servers A-D.","While processing requests by the browsing computers A-F, the web servers A-D have access to resource collections A-C. The resource collections A-C can be, for example, databases or sets of files. Each resource collection A is referred to generally as a resource server. However, in practice, the resource server may be a cluster of servers, including a router (not shown), which routes requests for information among the servers in the cluster. In some cases, multiple resource servers can reside on a single server or cluster of servers.","Although the example shows six browsing computers, four web servers, and three resource servers, the number of computers in an actual system will differ and typically greatly exceeds those shown in the example.","System Architecture Overview","An overview of a web site's system architecture incorporating features of the invention is shown in . One of the web servers  executes logic for a request receiver , which receives requests directed by browsing computers. The request receiver  has access to a resource manager , which utilizes a map\/locks structure  to direct requests for resources to the resource components . The resource components  in turn direct the requests to the resource servers A-C, which can be segregated according to resource type.","Because logic in the resource components  can handle the details related to finding and interacting with the resource servers A-C, logic for the resource manager need not address idiosyncrasies related to particular resource types. The resource components  can be designed to encapsulate information for connecting to the resource servers A-C and manipulating a resource thereon. Thus, new resource types can be added by adding a new resource component without reengineering the architecture, and programs requesting a resource are shielded from the details (e.g., where the resource resides) concerning how to access the resource.","A server computer  executes a resource administrator  for administrating the resource managers on the web servers (e.g., resource manager  on web server ). The resource administrator  can include configuration information for assisting in linking the resource components  to the resource servers A-C, a master copy of a map for distribution to the resource managers (e.g., ), and locks for synchronizing changes made to the map.","Further, the resource administrator  may access resource components  to perform operations on the resource servers A-C, for example during repartitioning operations.","A client computer  executes a resource administrator client , which presents a user interface for interacting with the resource administrator . For example, a web site administrator may change the configuration information or perform repartitioning operations via a user interface presented by the resource administrator client , which then directs appropriate directives to the resource administrator .","Although the various elements of the web site are shown on different computers, it is possible that elements reside on the same computer. For example, the resource administrator  may reside on the same computer as the resource administrator client . Further, two elements can sometimes be implemented as a single element.","Although  shows the invention in an arrangement involving a web server, the services provided by the invention can be used by another system (sometimes called a \u201cconsumer\u201d of the resources). For example, the invention can be implemented in a mail server, FTP server, or any system managing a set of partitioned resources.","Distributed Resource Managers Overview","An example of a resource manager  is shown in . Typically, a set of resource managers is distributed about a number of web servers, each of which can field requests for information from browsing computers.","In the example, the resource manager includes a request handler , to which requests for a resource can be relayed. A virtual partition value calculator  calculates a virtual partition value based on the request using an algorithmically-based calculation. Typically, the calculation is effectively a reductive mapping. For example, a hash function might be performed on an identifier associated with a requested resource. The identifier is sometimes called a \u201ckey,\u201d although it need not be unique to the resource. Such a key might be a user name, a user identifier, a subject name, a virtual location name, a date, a number, a string, or other data.","The request handler  can direct a request for a resource to a resource component (not shown) by mapping the value provided by the virtual partition value calculator  to a reference referring to a resource component via a virtual partition table . The resource component encapsulates information for accessing the particular resource server on which the resource resides. The location of the resource is thus determined, at least in part, by the key.","The virtual partition table  might also include a locking mechanism to allow portions of the table (or the entire table) to be locked when the table is modified. For example, if resources on resource servers are repartitioned, the table might indicate that writes are not permitted to resources about to be relocated during repartitioning. Or, resources might be temporarily made unavailable while a malfunctioning server is replaced. Although the virtual partition table and locks can be implemented as a single data structure, they also can be implemented separately, or some other mechanism can be used for locking.","The resource administrator interface component  provides a mechanism for communicating with a resource administrator. Typically, a two-way communication link is set up between a resource manager  and a resource administrator to allow exchange of directives and messages. For example, when the resource manager is first started, it can retrieve information for building the virtual partition table from the resource administrator. The resource administrator can also provide the information used by the resource components to access the resource servers. Further, configuration changes and repartitioning directives can be received via the administrator interface component .","Although there may be many resource managers  for a single system, they can each receive information from the resource administrator. Thus, configuration changes (e.g., changes in the way connections are made to the resource servers) across the resource managers can be accomplished by performing a single operation at the resource administrator, which propagates the changes to the resource managers.","Resource Server Overview","The resource servers A-C () can serve a wide variety of resources. For example, the resources might include graphics files or user profiles in the form of files. In such a case, a file system provides an identifier for retrieving the resource.","However, the resources can take forms other than files. For example, a database server can serve as a resource server and accept queries to provide a wide variety of resource types. For example, text, XML, HTML, or BLOBs could be provided by a database server. Resource components can encapsulate information that provides details for accessing the resource server (e.g., a name and password). The logic in the resource manager and resource administrator thus operates without regard for the details required to handle a particular resource type and is sometimes called \u201cresource type agnostic.\u201d So, if a new type of resource or resource server becomes available, it can be easily incorporated into the architecture by adding a new class of resource component without modifying the resource manager or resource administrator design.","Resource Components Overview","Examples of resource components , , , and  are shown in , B, C, and D. One type of resource component  includes a standard interface  for receiving requests from the resource manager for a reference (e.g., and interface) to a component operable to fulfill requests for a resource. The component operable to fulfill the request is sometimes called a \u201csession component.\u201d Since the resource component provides references to components, it is sometimes called a \u201ccomponent server.\u201d In some cases, the resource component  may have an additional custom interface  for supporting operations not supported by the standard interface . Further, the resource component, when receiving a request via the standard interface , may return a reference to itself (e.g., the custom interface ). The resource component  can be designed to support another interface (not shown) for accomplishing repartitioning operations.","In some cases, it may be necessary to maintain state information as a resource is provided. In such a case, a special session resource component  can be provided. In this way, subsequent requests for resources can be done in light of state information (e.g., a current position within a set of items) maintained in the session resource component . The session resource component  may be drawn from a pool of pre-created components to facilitate more efficient processing and then recycled back into the pool when the session is completed.","Two other resource components, the transaction repartitioning component  and the logical repartitioning component , can be used to support repartitioning operations in some systems. The transaction repartitioning component  may contain logic for handling repartitioning operations related to locking a collection of resource types at a single unit, such as a single resource server or database. The logical repartitioning component  may contain logic for handing repartitioning operations appropriate for a particular resource type within the collection.","In some cases, it may be desirable to combine component functionality from two or more components into a single component. For example, a single component could offer interfaces similar to those provided by the resource component  and the logical partitioning component .","The various interfaces provided by the resource components may differ according to scenario. An advantage of the above-described arrangement is that a standard interface can be provided by the resource component for requesting access to a resource. Another interface supports repartitioning operations. Preferably, the standard interfaces operate without regard to the type of resource involved. Under such an arrangement, the resource component encapsulates details for dealing with a particular resource type. In this way, a resource manager can be used in a system having a wide variety of resource types, and new resource types can be added after deployment of the system by developing a new resource component without reengineering the rest of the system.","Resource Administrator Overview",{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 7","b":["702","712","712","722"]},"The resource component initialization information  includes information that can be sent to the resource managers when resource components are to be initialized. For example, a particular resource server might require a string having a username and password for a connection. The resource administrator can forward the string to the resource manager, which communicates the string to the resource component responsible for handling requests related to the associated resource server (e.g., when the component is first loaded). The resource manager need not have logic for interpreting the string, but merely passes it along to the resource component, which in turn passes it to the resource server.","The resource types information  includes information relating to each of the resource types. For example, when a resource manager first comes on line, it can be provided a list of the resource types for which it can expect to field requests.","The virtual partition table\/locks information  contains a master copy of the virtual partition table, which relates virtual partition calculation values with resource servers. The table can be provided to resource managers so that the resource managers direct requests to the proper resource server via the resource components. The table includes locks so that repartitioning operations can be performed while avoiding synchronization problems.","The repartitioning order information  includes information indicating dependencies in data and can be used in some systems during repartitioning to ensure data is copied in the proper sequence. The repartitioner  includes logic for performing repartitioning of the virtual partition table, including orchestrating copying between resource servers. The repartitioner  may employ resource components to accomplish repartitioning. If the resource components encapsulate the details related to repartitioning for a particular resource type, the resource administrator can operate without regard to resource types, and new resource types can be incorporated into the architecture without reengineering the resource administrator.","Fielding a Request for a Resource Overview",{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 8","b":["802","812","832"]},"At  operations can then be performed on the session resource component to access a resource at a resource server. For example, various read, write, and display operations can be provided via session resource component functions. Although  describes a scenario in which the virtual partition table indicates a serving resource component, some system can use other information for accessing the particular server on which the resource server resides.","The key used in  can be of any number of formats. For example, a string might specify a particular location within a web site. In some cases, requesting a resource may cause a resource component to request a resource via the resource manager. In other words, a resource component may be a consumer of the services provided by the resource manager.","Repartitioning Overview",{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 9","b":"902"},"At , a bucket of the partition table is locked. Locking involves communicating an indication to the resource managers that write operations are not permitted to resources associated with the bucket. However, reads are permitted, and read access can continue during repartitioning.","Then, at , resources relating to the bucket are copied. Such copying typically also includes verifying the resources were copied correctly. At , the bucket is unlocked. Unlocking involves communicating an indication to the resource managers that writes are permitted to the resources associated with the bucket.","Various other steps not shown are typically also included, such as deleting the copied data from the old resource server and setting up a transaction mechanism to ensure data integrity. Such steps are described in more detail below.","The following describes an exemplary implementation of the invention in a web site environment to support a large set of online communities. The number of communities can grow to a very large number, and the popularity of any particular community can fluctuate. Accordingly, resources supporting the communities may need to be repartitioned to different groups of machines to ensure users visiting the communities experience consistent, quality service. An advantage of the described arrangement is that access to the communities can continue during repartitioning functions. Further, a large number of buckets is used. Therefore, repartitioning involves moving a very small percentage of the resources at any one time, and service to browsing users is disrupted for only very short periods of time.","Communities","Although techniques relating to the invention can be applied to a variety of scenarios, one particularly beneficial application is in the field of online communities. As shown in , a service provider can provide a set of online communities in the form of a community center, which can be visited by any user having a web browser. To capture a user's interest, the communities typically relate to a particular category. A community center can have hundreds of communities covering a wide variety of subject matter.","Each community can offer an online place for people to communicate and share information. For example, as shown in , the community can have general community information , including a description of the community and an indication of the community's members. A message board  can provide a list of messages. Members can read the messages  and respond or expand.","Another community feature provides a list of photo albums . The photo albums  group together photographs  for viewing by members, who can perform a variety of functions on the photographs . Also, a file list  allows community members to perform functions on files .","As the number of communities and the number of people visiting the communities grow, the resources required to support the communities can become immense. Accordingly, the resources are partitioned using various techniques to provide consistent, quality service to persons visiting the communities.","Implementation of Architecture","In the example, resources for the communities include two main categories: resources drawn from SQL database servers (e.g., accessed with MICROSOFT OLE DB), and resources stored as sets of files (e.g., implemented as Universal Naming Convention (UNC) shares accessed by Server\/Session Message Block (SMB)). In other scenarios, other protocols for accessing a resource server could be used (e.g., SOAP, DAV, MAPI, and CIFF).",{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIG. 12","b":["1212","1222","1222","1222","1222","1226","1232"]},"Resources at the online community center include those provided by a set of SQL servers  (e.g., SQLA and SQLB), which include general community information and message boards. A set of photo servers  include a set of server clusters devoted to serving digital photographs related to photo albums. A set of file servers  include a set of server clusters devoted to serving files related to file lists.","A resource administrator  serves as a store for partitioning and resource type information consumed by the resource managers on the web servers A-N. The resource administrator client  provides a user interface for manipulating and monitoring the operation of the resource administrator . Although connections are not shown, the resource administrator  and resource administrator client  may perform operations on the resource servers.","Resource Types","The resource types shown in the online community center are exemplary only and may change over the life of the online community center. For example, at some future date, it may become desirable to add a cluster of audio servers storing audio files related to a community.","In the illustrated implementation, there are two categories of resource types, physical and logical. The physical resource types are a broad category roughly corresponding to a cluster of resources (e.g., database-based and file-based). Logical resource types relate to resource are stored within a resource server of one of the physical resource types. Example logical resource types include photo albums, photographs, message boards, and files. One advantage of dividing the resources as described is that a particular server cluster can be optimized to serve a particular type of resource. For example, operations related to the photo servers  may include specialized techniques for dealing with digital photographs.","Virtual Partition Table","In the illustrated example, the resource managers (e.g., ) include a virtual partition table  as shown in . The virtual partition table  can be implemented as a two dimensional array having a size of the number of resource types in one dimension and the number of possible virtual partition values (e.g., possible index values) in the other dimension. In the example, the number of possible virtual partition values is 12,889, and the virtual partition value is determined by performing a hash function on the community name. Thus, the community name is sometimes called the partition key. Alternative partition keys include information related to a user (e.g., to allow a user to change her profile).","As shown generally in , resources are partitioned by assigning the entries (or \u201cbuckets\u201d) of the virtual partition table  to various resource servers. As shown in the example, there are three resource servers providing resources of type , and the buckets are divided evenly among the three servers. There are two servers providing resources of type , and the buckets are divided evenly between the two servers. There is only one server providing resources of type , and so all buckets are devoted to the one server.","In , an illustration of the virtual partition table  shows an alternative structure. Rather than simply storing a number indicating the content server, the virtual partition table includes a reference to a resource component related to the content server. In this way, each bucket in the virtual partition table  is associated with one of the resource components . The resource components  are components of a class having logic for providing a way to access a resource server serving the appropriate resource type (e.g., by providing a session resource component). As shown, multiple buckets can refer to the same resource component. The reference to the resource component can take the form of an interface to the resource component. Each of the resource components includes at least one standard function, namely a function for handling a request for a resource. As a result of the above-described arrangement, the code shown in  can handle a request for a resource.","Thus, when a resource of a particular type relating to a particular community is desired, the resource manager calls a method of the resource component associated with the community (via a hashing function) and the resource type, to obtain information from the resource component for accessing the resource. Since each of the resource components  referred to by the partition table  includes a standard function, logic for dealing with the virtual partition table  need not be tailored to accommodate a particular resource type. In other words, the resource components  encapsulate the details relating to accessing a particular resource type.","In the illustrated architecture, the information returned by the standard function is a reference (e.g., interface) to a session resource component for providing access to the appropriate resource server. The provided session resource component may include special functions for handling the particular resource type. In some cases, the reference may be to the same resource component linked to the virtual partition table. Examples of resource components are provided in more detail below.","Resource Manager","The resource manager fields requests for resources and uses the virtual partition table to direct the requests to the appropriate resource server via the resource components.","In the example, the code listing shown in  shows the function GetResource provided by the resource manager to be called by a program wishing to obtain access to a particular resource. In the examples shown, the community name is used as the partition key. A hashing function shown in  is performed on the partition key to generate a number for indexing into the partition table (the virtual partition value), and the logic shown in  invokes a function on an appropriate resource component.","When the resource manager is started, it performs the following actions in order to prepare to field resource requests:","1. Register with the resource administrator to allow the resource administrator to send notifications. In this way, configuration changes relating to the resources and virtual partition table can be directed to the resource managers from the resource administrators.","2. Request the list of resource types from the resource administrator. Each resource type can be represented by a class identifier of a resource component that deals with the resources at runtime.","3. Create a multi-dimensional array of pointers, providing one row for each resource type; each row consists of 12,889 buckets (one for each virtual parition).","4. For each resource type, request the list of resource instances. A resource instance is specified by its type and a component specific initialization string (e.g., \u201cSQL:[Server=CPDCSQLA01; Database=WSComm; Login=CommSA; . . . ]\u201d The initialization string can thus map the resource component instantiation to a specific physical resource having a resource server. The string is typically specific to the resource and need not be understood or processed by the resource manager, other than to pass the string to the resource component for use when accessing a resource. A string is used to allow a wide variety of information; however, a different data structure (e.g., array or record) can be used in an alternative architecture.","5. For each resource instance, create a resource component (e.g., via CoCreateInstance) based on the resource type's CLSID and call an initialization function on the created object, passing the initialization string.","6. For each resource type, load the virtual partition table, which maps the virtual partitions to the resource components created above.","Resource Components","As described above, each of the resource components referred to in the virtual partition table supports at least two functions, one for initialization (e.g., via an initialization string) and one for obtaining a session resource component. In some cases (e.g., when state information is not necessary), a resource component may fulfill the request for a session resource component by providing a reference to itself. Operations can then be performed on a resource via the session resource component.","In the illustrated architecture, the two functions are grouped together in a public interface, IRMResource (e.g., derived from IUnknown), which is implemented by each of the resource components referred to in the virtual partition table. For example, a listing for a photo album resource component is shown in . A call to IRMResource::GetResource provides a reference to a session resource component, namely a photo object. A listing of the photo object is shown in . The code for the various functions (e.g., the AddPhoto method) is constructed so that the data may reside on any physical store. The session resource component was pulled from a resource component encapsulating information about the physical store (which was provided to the resource component via the initialization string).","An example way of using resource components is shown in the code listing of . In the example, a program accesses a resource via the resource manager by calling the resource manager's GetResource function, which in turn forwards the call to the appropriate GetResource function of a resource component in the virtual partition table, which returns an interface to a photo resource component (the session resource component).","Functions to be performed on the resource (e.g., viewing, adding or deleting a photo) can be accomplished by directing calls to the provided interface to the session resource component. Although the session resource component may provide custom functionality, the resource component referenced in the virtual partition table need only provide a standard set of functions that take the same parameters, regardless of the resource type. In this way, new resource types can be added to the architecture without redesigning the way the resource manager interacts with the resource components.","An additional interface, IRMResource, is shown in  and includes functions for validating configuration and repartitioning, which is described in more detail below.","Resource Administrator","The resource administrator of the illustrated architecture maintains a master copy of the virtual partition table and orchestrates repartitioning as described in greater detail below. Various data structures defined for use with the resource administrator are shown in , and an interface IRMAdmin is shown in . IRMAdmin is provided for access by resource managers to obtain a list of resource types and the list of resources for a given type. Another interface IRMAdminOps is shown at . IRMAdminOps is provided for access by a resource administrator client to perform various functions, including repartitioning.","Resource Administrator Client","In the illustrated implementation, a resource administrator client provides a graphical user interface and a command line interface for communicating with the resource administrator. An interface IRMAdminOpsSink can provide a communication path from the resource administrator to the resource administrator client.","The interface IRMAdminClient provides a set of functions that the user interface can call to accomplish a wide variety of tasks, such as adding new resource types, and migrating buckets to accomplish repartitioning. Code listings for the IRMAdminClient interface are shown at . The part of the resource administrator client that performs tasks as directed by the user interface is sometimes called the \u201cworker.\u201d","Repartitioning","In the illustrated implementation, repartitioning is initiated by a user who selects a repartitioning command via the resource administrator client. Repartitioning can be used under a variety of scenarios. For example, if a new resource server is being added to share the load of resource requests, repartitioning can be used to direct a percentage of the resource requests to the new resource server. Also, the buckets can be rebalanced among the existing resource servers or an existing resource server might be replaced with another.","A typical repartitioning command specifies that a particular bucket is to be moved to a specified destination resource server. The resource administrator client also provides a way to automate the process of adding a new resource server by translating a single \u201cadd resource server\u201d command into multiple move bucket commands. For example, if a third resource server is being added to a web site, the resource administrator client can generate a move bucket command to move one-third of the buckets to the new resource server. The actual bucket numbers to be moved can be automatically randomly selected.","A method for repartitioning in the illustrated implementation is shown in . At , the list of buckets to be migrated is assembled. Typically, a bucket is denoted by a bucket number and a resource type because there are multiple buckets per bucket number. At , the method starts with the first bucket. At , the bucket is migrated as described in more detail below. If there are more buckets at , the method loops using the next bucket at . Otherwise, the method ends.","Further detail concerning migrating a bucket is shown in . At , the source and destination servers are prepared for the bucket migration. Typically, a transaction repartitioning resource component is created for the source and destination resource servers. In the illustrated implementation, the transaction repartitioning resource component is sometimes called a \u201cphysical\u201d resource component because it roughly corresponds to a physical unit (e.g., one resource server cluster). The transaction repartitioning resource components support the IRMTransaction interface, which includes methods for beginning a transaction, rolling back the transaction, and committing the transaction  includes a call to begin the transaction. For example, if the resource server includes a SQL database, the transaction repartitioning resource component might begin a SQL transaction.","At , a write lock is acquired for the bucket being migrated. The function IRMAdminOps::GetBucketWriteLock of the resource administrator returns a handle which is subsequently used to release the lock. Locks can be set to time out after a certain time period (e.g., an hour). Although the logic of the resource administrator will allow an unlimited number of locks, the resource administrator client typically limits the number of concurrent locks (e.g., a maximum of five concurrent locks). Locks are stored in a table in memory. If the resource administrator crashes, the table is released and the buckets are considered unlocked. The resource manager automatically attempts to reconnect to the resource administrator and reload information relating to the buckets.","The resource administrator propagates the lock to the individual resource managers via the function IRMAdminSink::UpdateWriteLock. Responsive to receiving an indication that a bucket is locked, the resource manager updates the virtual partition table to indicate the bucket is locked. Whenever a resource component is requested from a write-locked bucket, the resource manager will operate as usual, except that the flag (RM_FLAG_WRITE_LOCK (0x0100)) is passed to the component (e.g., either by an init method or via flags). The component is designed so as to not perform any writing operations when it is notified that the write lock is in effect. However, read operations can continue during repartitioning.","At , the method waits for any outstanding tasks to complete any pending write operations. For example, a resource component created before a bucket was write locked may be about to perform a write operation. Although a count of unreleased resource components can be maintained to ensure there are no outstanding components (e.g., by waiting for the count to be zero), waiting a certain time period (e.g., four seconds) is usually sufficient.","At , data relating to the bucket is copied from the source resource server to the destination resource server. Further details of the copy process are provided below. At , the partition map is changed to point to the destination server and propagated to the individual resource managers. At , the write lock acquired at  is released. At , the data on the source resource server relating to the migrated bucket is deleted in reverse dependency order. Dependency order is described in more detail in the description of copying data below. Then, at , repartitioning is finished. Finishing typically includes committing any outstanding transactions by invoking IRMTransaction::Commit on the transaction repartitioning resource components.","Copying resources from the source resource server to the destination resource server can be accomplished by a method such as that shown in . In the illustrated implementation, a resource type can refer to either a physical or logical resource type. A physical resource type roughly corresponds to a physical unit (e.g., a SQL server cluster). A logical resource type specifies a particular type of resource (e.g., a digital photo or a message board). Thus, several logical resource types might be stored within a physical resource type. Each of the logical resource types has a corresponding logical repartitioning resource component that implements an interface IRMRepartitioning having the methods CopyBucket and DeleteBucket.","At , a list of the logical repartitioning resource components relating to the physical resource type is assembled from a repartitioning order table. The repartitioning order table tracks which logical resource types are stored in a physical resource type and ensures dependencies in the data are preserved. At , for each resource component appearing in the list, copy requests are issued in the order the components appear in the list. A resource component is created and IRMRepartitioning::CopyBucket is called, providing the source and destination transaction repartitioning resource components.","At , the resources for the bucket relating to the resource type are copied. The resources involved are those with identifiers having a hash value corresponding to the bucket. To facilitate copying, the hash value can be stored with the data. For example, a field in a database might indicate the hash value. At , if there are more resource components appearing in the list, the method continues at . Otherwise, the method ends. Although the illustrated implementation uses physical and logical resource types, similar results can be achieved without categorizing resources as physical or logical. For example, all resource types could be called \u201cphysical\u201d resource types.","Adding Resource Types","New resource types can be added via the resource administrator client. A class identifier of the resource component to be installed is specified to the resource administrator client, which makes appropriate calls to the resource administrator to register the new resource type.","Command Line Interface","The resource administrator client provides both a graphical user interface and a command line interface. Typically, various directives are scheduled in a queue until a \u201ccommit\u201d command is issued. Various commands are shown in Table 1.",{"@attributes":{"id":"p-0155","num":"0154"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Commands available at command line"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Description","Form","Example"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["reset (cancel)","RESET","RESET"]},{"entry":"scheduled"},{"entry":"operations"},{"entry":["commit (execute)","COMMIT","COMMIT"]},{"entry":"scheduled operations"},{"entry":["Add\/remove a resource","[ADD | REMOVE]","TYPE"]},{"entry":["type (default is add)","TYPE","Photo.RMPhotoAlbum"]},{"entry":[{},"[{clsid} | {progid}]"]},{"entry":["Add\/change\/remove","[ADD | CHANGE |","ADD RESOURCE\/"]},{"entry":["resource server. The","REMOVE]","Type:0 \/InitInfo:"]},{"entry":["change command can","RESOURCE","\u201cServer=Spidey1;"]},{"entry":["take a resource","{resid} [Type:","Database=Dynacomm;"]},{"entry":["server offline.","{Typeid}","User=Desiree;"]},{"entry":[{},"[\/InitInfo:{string}]","Pwd=Panama\u201d"]},{"entry":[{},"[Status:[ACTIVE |"]},{"entry":[{},"OFFLINE] [\/Commit]"]},{"entry":["Migrate buckets; a","MOVE BUCKETS","MOVE BUCKETS"]},{"entry":["number or percentage","TYPE","TYPE 0"]},{"entry":["can be specified for","{typeid}","FROMRESROUCE 1"]},{"entry":["BucketCount","FROMRESOURCE","TO RESOURCE 2\/"]},{"entry":[{},"{resid}","BucketCount: 40%"]},{"entry":[{},"TORESOURCE"]},{"entry":[{},"{resid}"]},{"entry":[{},"[\/BucketCount:"]},{"entry":[{},"{number}]"]},{"entry":[{},"[\/Commit]"]},{"entry":["Query information","SHOW [TYPES |","SHOW"]},{"entry":["about system. Default","RESOURCES |"]},{"entry":["shows all items.","BUCKETS | TASKS]"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Table 2 shows a list of interfaces provided by various elements of the exemplary implementation. In an alternative architecture, the functionality of the interfaces might be provided in another way (e.g., a set of functions or methods not necessarily grouped into an interface).",{"@attributes":{"id":"p-0157","num":"0156"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interfaces provided in the Exemplary Implementation"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Name","Implemented by","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["IRMResource","Resource component","Initialize resource"]},{"entry":[{},{},"components in virtual"]},{"entry":[{},{},"partition table and provide"]},{"entry":[{},{},"reference to session"]},{"entry":[{},{},"resource component upon"]},{"entry":[{},{},"request"]},{"entry":["IRMResourceOps","Resource component","Provides functionality to"]},{"entry":[{},{},"move buckets"]},{"entry":["custom","Session resource","Provides functionality for"]},{"entry":[{},"component","performing operations on"]},{"entry":[{},{},"a resource (e.g.,"]},{"entry":[{},{},"functionality to access a"]},{"entry":[{},{},"UNC resource or"]},{"entry":[{},{},"functionality to access a"]},{"entry":[{},{},"photo album)"]},{"entry":["IRMTransaction","Transaction","Begin, rollback, or"]},{"entry":[{},"repartitioning","commit transaction on"]},{"entry":[{},"(Physical) resource","resource server"]},{"entry":[{},"component"]},{"entry":["IRMRepartitioning","Logical","Copy information related"]},{"entry":[{},"(Repartitioning)","to bucket to another"]},{"entry":[{},"Resource Component","resource server"]},{"entry":["IRMAdminSink","Resource Manager","Includes function"]},{"entry":[{},{},"Update Writelock to make"]},{"entry":[{},{},"sure any subsequent"]},{"entry":[{},{},"requests for components"]},{"entry":[{},{},"are write locked"]},{"entry":["IRMAdminOps","Resource","For use by Resource"]},{"entry":[{},"Administrator","Administrator Client"]},{"entry":["IRMAdminClient","Resource ","Includes command for"]},{"entry":[{},"Administrator","migrating buckets"]},{"entry":[{},"Client"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Fielding a Request for a Resource","The following is provided as an example of operation only. The invention is not limited to the specifics described.","In an exemplary system using the principles outlined above, a browsing user can find her way to photo albums kept for a community dealing with green tea by pointing her web browser to\n\n","In the virtual partition table, a bucket for the virtual partition value and the resource type points to the interface of a component that returns a reference to a session component for dealing with photo albums. The component handles requests to view, add, or delete photos by manipulating data on a particular content server, as was determined by an earlier-supplied initialization string.","Requests for photo albums of another community (e.g., \u201cEchinacea\u201d) are sent to the resource manager, which performs a hash on the community name. Since the bucket relating to photo albums for \u201cEchinacea\u201d points to a resource component referencing another content server, requests for resources are divided between two different servers. The resources for the two communities are thus partitioned. Further, resources of a different type (e.g., message boards) for the same community can be migrated to another content server if desired. Thus, partitioning within a community can also be accomplished.","Repartitioning Example","A web site is configured so that there are at least four resource types as shown in Table 3. Thus, the message boards, general community information, and photo albums are stored on a resource server of type \u201cSQL,\u201d a SQL database.",{"@attributes":{"id":"p-0163","num":"0164"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Resource Types"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["TypeId","Description","Physical?","ClsId"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","SQL1","TRUE","{ . . . }"]},{"entry":["1","MsgBoard","FALSE","{ . . . }"]},{"entry":["2","CommInfo","FALSE","{ . . . }"]},{"entry":["3","PhotoAlbum","FALSE","{ . . . }"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":["1","1"]},"The resource administrator client creates two instances of a transaction repartitioning resource component: one for the source and one for the destination. IRMTransaction::BeginTransaction is called on both components, and the resource administrator client reads the repartitioning Order Table for the resource types MsgBoard, CommInfo, and PhotoAlbum, which are shown in Table 4.",{"@attributes":{"id":"p-0165","num":"0166"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Repartitioning Order"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Physical",{}]},{"entry":["TypeId","CompId"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","2 [CommInfo]"]},{"entry":["0","1 [MsgBoard]"]},{"entry":["0","3 [PhotoAlbum]"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Having described and illustrated the principles of our invention with reference to illustrated embodiments, it will be recognized that the illustrated embodiments can be modified in arrangement and detail without departing from such principles. Although the illustrated architecture involves communities, the principles of the architecture can be applied to a wide variety of scenarios, such as a mail system (e.g., the partition key could be a user name), a file system (e.g., the partition key could be a filename, directory path, or combination of the two), or another collection of resources. It should be understood that the programs, processes, or methods described herein are not related or limited to any particular type of computer apparatus, unless indicated otherwise. Various types of general purpose or specialized computer apparatus may be used with or perform operations in accordance with the teachings described herein. Elements of the illustrated embodiment shown in software may be implemented in hardware and vice versa. In view of the many possible embodiments to which the principles of our invention may be applied, it should be recognized that the detailed embodiments are illustrative only and should not be taken as limiting the scope of our invention. Rather, we claim as our invention all such embodiments as may come within the scope and spirit of the following claims and equivalents thereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIGS. 6A-6D"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 8","FIG. 4"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 9","FIG. 4"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 11","FIG. 10"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 12","FIG. 10"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 13A"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 13B"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 14","FIG. 13B"]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 15A"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 15B"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIGS. 16-17"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 18","FIGS. 16-17"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIGS. 23-24"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIGS. 25","b":["26","27","28","29"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 32","FIG. 31"]}]},"DETDESC":[{},{}]}
