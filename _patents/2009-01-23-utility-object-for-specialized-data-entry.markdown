---
title: Utility object for specialized data entry
abstract: An object is associated with one or more controls in a software application. An object associated with a control determines the operation of the data entry user interface when the data entry user interface is being employed to enter data into the control. More particularly, the object may communicate interface e characteristics to a component that is responsible for providing the user interface to the user. Such a component may be, for example, a shared software module that renders the user interface on a display, receives input data from the user through the user interface, and routes the entered data to a designated destination. Alternately, the object itself may create a user interface having the specified characteristics.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745528&OS=08745528&RS=08745528
owner: Microsoft Corporation
number: 08745528
owner_city: Redmond
owner_country: US
publication_date: 20090123
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["This application is a Divisional of U.S. patent application Ser. No. 10\/427,159, filed Apr. 30, 2003, entitled UTILITY OBJECT FOR SPECIALIZED DATA ENTRY, now U.S. Pat. No. 7,490,296, issued Feb. 10, 2009, which is incorporated herein by reference for all purposes. U.S. Pat No. 7,490,296 claims the benefit of U.S. Provisional Application No. 60\/453,701, filed on Jan. 31, 2003 and U.S. Provisional Application No. 60\/444,444, filed on Feb. 1, 2003, which are both incorporated herein by reference in their entirety for all purposes. This application is related to two co-pending applications, U.S. patent application Ser. No. 12\/358,958 and U.S. patent application Ser. No. 12\/358,965, both co-pending applications filed on the same day as this application, Jan. 23, 2009. Both related co-pending applications are incorporated herein by reference in their entireties for all purposes.","The invention relates generally to an object for invoking or controlling a data entry user interface. Various embodiments of the invention have particular application to the invocation or control of a data entry user interface based upon a control that will receive input data from the user interface, such as an edit control or a rich edit control.","As computers have evolved, a variety of data entry techniques have been developed to enhance the user's experience and to make computers more versatile. For example, typical computer systems, especially computer systems using graphical user interfaces (GUI) for user interaction, such as the Microsoft WINDOWS\u00ae brand operating system, are optimized for accepting user input from one or more discrete input devices. Thus, a computer user may enter text with a keyboard, and control the position of a pointer on a display screen with a pointing device, such as a mouse, having one or more buttons for activating user selections associated with the location of the pointer. Some computing systems even have expanded the input systems available to a user by providing a pen-like stylus that can be used as a multipurpose data input device.","For example, the Microsoft WINDOWS\u00ae brand XP Tablet PC Edition operating system provides a data entry user interface, referred to as the Tablet PC Input Panel, text input panel, or TIP, through which a user can employ a pen or stylus to submit data into a computer. This type of user interface falls into the broader category of a data entry graphical user interfaces, which may be generically referred to as data input panels. A data input panel may provide a writing surface, which converts movement of the stylus across the surface into electronic ink. Some versions of the data input panel can then translate the electronic ink into text, while other types of data input panels can alternately or additionally provide the electronic ink directly to an application running on the computer. A data input panel may also provide a \u201csoft\u201d keyboard surface that displays the characters of a conventional keyboard. If the user employs a stylus to tap on a displayed key, then the computer will receive the character associated with that key as input data.","While the data input panel substantially increases the usefulness of a computer, there are still some inconveniences associated with conventional data input panels. First, many computer users are unfamiliar with data input panels. Thus, a developer creating a software application cannot be certain that a user will know how to manually summon a data input panel to enter data into the application. Instead, the developer must hope that the user will be able to activate and use the data input panel or have an alternate data input method available.","Also, because the data input panel is a graphical user interface, it is typically displayed simultaneously with the application into which the data from the data input panel will be entered. To avoid having the data input panel actually obscure the location into which the data will be entered, the data input panel is usually \u201cdocked\u201d below the application. While positioning the data input panel in this fashion ensures that it will not prevent the user from viewing the destination location for the data, it is sometimes inconvenient for the user to continuously move the stylus back-and-forth between the application (to control the application) and the data input panel (to enter data into the application).","Further, because of the variety of data input techniques offered by a typical data input panel, it is often inconvenient for a user to determine which technique is the most appropriate for entering data into a particular location in an application. For example, an application may contain an edit control for receiving a case-sensitive password. If, however, the user attempts to enter a password into the edit control by writing on a writing surface provided by a data input panel, the user's handwriting may be incorrectly recognized. Further, if the edit control does not display the incorrectly recognized handwriting but rather intentionally hides the incorrectly recognized text, the user may not even realize why his or her password is not being accepted. In this situation, it might be preferable for the user to instead enter data into the edit control using a soft keyboard rather than the writing surface, but the user must realize that the soft keyboard surface is more appropriate for the task and change the data input panel to that display surface himself.","Accordingly, it would be advantageous to be able to display a data input panel near the location at which data from the input panel will be inserted, but without inadvertently obscuring that location. More particularly, it would be advantageous to be able to intelligently display the data input panel at a location that would allow the user to simultaneously focus his or her attention on both the data input panel and the insertion of the data entered through the data input panel to an application. In addition, it would be advantageous to allow an application to designate a variety of characteristics for a data input panel surface that would be the most appropriate for entering data into a control in the application. For example, if an application included an edit control for receiving a case-sensitive password, it would be useful to allow the application to automatically change the surface of a data input panel to a keyboard surface when the user seeks to enter data into that edit control.","Conveniently, various embodiments of the invention provide an object that allows an application to control one or more characteristics of a data input panel, including the position and\/or appearance of the data input panel. According to some embodiments of the invention, the object is associated with one or more edit controls in an application. For example, with some embodiments of the invention, when the input focus of a computer's operating system shifts to an edit control associated with that object, the object will designate the location at which the data input panel will be displayed. With still other embodiments of the invention, when the input focus of the computer's operating system shifts to an edit control associated with the object, the object will designate the surface displayed by the data input panel. For still other embodiments of the invention, when the input focus of the computer's operating system changes to an edit control associated with the object, the object will designate the overall appearance of the data input panel. That is, the object will designate both the location of the data input panel and the surface displayed by the data input panel. With still other embodiments of the invention, an object may additionally or alternately determine how the data input panel will be invoked by the user.","Overview","Aspects of the present invention relate to controlling the behavior of a data entry user interface, such as a data input panel. More particularly, various embodiments of the invention relate to controlling both the location and contents of a data input panel. As will be appreciated by those of ordinary skill in the art, most software applications typically have some type of feature or component for accepting input data from a user. With applications having graphical user interfaces, these features or components are typically referred to as controls. Thus, a control is displayed object that can be manipulated by the user to perform an action. Some other examples of controls include, for example, buttons that can be checked by a user through the use of a pointing device, and scroll bars, which also may be manipulated through a pointing device. A containing window is still another type of control, which allows a user to manipulate the contents of a window. As will be appreciated by those of ordinary skill in the art, the characteristics and behavior of a control are typically specified by the application hosting the control.","Bounded areas into which a user can enter text data with, for example, a keyboard, are commonly referred to as edit controls. As will be appreciated by those of ordinary skill in the art, there are a variety of different types of edit controls. For example, in addition to conventional edit controls that accept character data from a keyboard, the Microsoft Windows\u00ae brand XP operating system allows applications to include a rich edit control. A rich edit control accepts both input text and various types of metadata associated with the inserted text. Also, the Microsoft Windows\u00ae brand XP Tablet PC Edition operating system allows an application to include an ink edit control. An ink edit control is a type of rich-edit control that additionally permits a user to enter data into the control by manipulating a stylus-type pointing device to create electronic ink. With some ink edit controls, the ink may then be converted into text, while other types of ink edit controls may process the electronic ink without translating it into text.","According to various embodiments of the invention, an object is associated with one or more such controls. An object associated with a control in an application will then determine the operation of the data entry user interface when the data entry user interface is being employed to enter data into that control. More particularly, an object according to the invention may communicate interface characteristics to a component that is responsible for providing the user interface to the user. Such a component may be, for example, a shared software module that renders the user interface on a display, receives input data from the user through the user interface, and routes the entered data to a designated destination. Alternately, the object itself may create a user interface having the specified characteristics.","For example, an object associated with a control may determine the appearance of a data entry user interface, such as a data input panel, when the input focus of the computer's operating system shifts to that control. With some embodiments of the invention, the object will cause the data input panel to be displayed close to the boundaries of the control. For example, the object may cause the data input panel to be displayed just below or just above the boundary of an edit control. Additionally, the object may determine the surface initially displayed by the data input panel. For example, if the object is associated with an edit control that receives random characters, such as a password or model number, or hides received characters, then the object may force the data input panel to initially display a keyboard surface rather than a writing surface for entering data into that control.","Still further, the object may be used to determine the technique by which a data entry user interface, such as a data input panel, may be invoked. For example, an object may force a data input panel to be invoked whenever the input focus of the computer's operating system shifts to a control associated with that object. Alternately, the object may cause a target to be displayed when the focus of the computer's operating system changes to a control associated with that object. With various embodiments of the invention, the target will then invoke the data input panel (as specified by the object) when the user passes a stylus over the target, depressing an activation button while a pointer is pointing to the target, or when the user performs some other specified action with respect to the target.","Thus, by setting the property values of the object and calling various methods on the object, an application can determine the characteristics of a data entry user interface, such as a data input panel that will be displayed to a user. Further, by executing methods provided by the object, an application can change the characteristics of the data entry user interface in response to the user's actions, or control how data entered through the user interface will be delivered to the control. Each of these features of the invention will be described in more detail below.","Exemplary Operating Environment","As will be appreciated by those of ordinary\/skill in the art, the object according to various embodiments of the invention can be implemented using hardware, software, firmware, or a combination thereof. For example, various embodiments of the invention can be implemented by functional modules that perform the operations of the object in controlling the operation of a data entry user interface. Each of the modules may be formed solely from analog or digital electronic circuitry. As will be appreciated by those of ordinary skill in the art, however, the modules may also be formed using executable software instructions for controlling programmable electronic circuitry, such as found in conventional programmable computing devices like personal and laptop computers.","More particularly, an object according to various embodiments of the invention may be described in the general context of computer-executable instructions, such as program modules, executed by one or more programmable computing devices. Generally, program modules may include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.","Because various embodiments of the invention may be implemented using programmable computer devices programmed with software, it may be helpful for a better understanding of the invention to briefly discuss the components and operation of a typical programmable computing device (hereafter referred to simply as a computer) on which \u2022 various embodiments of the invention may be employed.  is a functional block diagram of an example of a conventional general-purpose digital computing environment that can be used to implement various aspects of the present invention. In , a computer  includes a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory  includes read only memory (ROM)  and random access memory (RAM) .","A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is stored in the ROM . The computer  also includes a hard disk drive  for reading from and writing to a hard disk (not shown), a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . It will be appreciated by those skilled in the art that other types of computer readable media that can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs), and the like, may also be used in the example operating environment.","A number of program modules can be stored on the hard disk drive , magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules , and program data . A user can enter commands and information into the computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB). Further still, these devices may be coupled directly to the system bus  via an appropriate interface (not shown). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown), such as speakers and printers. In some embodiments, a pen digitizer  and accompanying pen or stylus  are provided in order to digitally capture freehand input, such as ink. Although a direct connection between the pen digitizer  and the serial port is shown, in practice, the pen digitizer  may be coupled to the processing unit  directly, via a parallel port or other interface and the system bus  as known in the art. Furthermore, although the digitizer  is shown apart from the monitor , in many embodiments of the invention, the usable input area of the digitizer  is co-extensive with the display area of the monitor . Further still, the digitizer  may be integrated in the monitor , or may exist as a separate device overlaying or otherwise appended to the monitor .","Application programs  and program modules  may include a parsing module and a recognition module for use in receiving and analyzing ink input via the stylus . The parsing module may be used to analyze received strokes and group the strokes into ink objects (e.g., characters, words, drawings, etc.). The recognition module may be used to analyze ink objects and perform character recognition on alphanumeric ink objects. The recognition information may then be stored as a property of the ink object. Examples of such parsing and recognition modules are available from Microsoft Corporation of Redmond, Wash. in the Tablet PC Platform Software Development Kit (SDK).","The computer  can operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  can be a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet and use both wired and wireless communication protocols.","When used in a LAN networking environment, the computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing a communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device.","It will be appreciated that the network connections shown are illustrative and other techniques for establishing a communications link between the computers can be used. The existence of any of various well-known protocols such as TCP\/IP, Ethernet, FTP, HTTP and the like is presumed, and the system can be operated in a client-server configuration to permit a user to retrieve web pages from a web-based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.","One or more aspects of the invention may be embodied in computer-executable instructions, such as in one or more program modules, executed by one or more computers or other devices. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types when executed by a processor in a computer or other device. The computer executable instructions may be stored on a computer readable medium such as a hard disk, optical disk, removable storage media, solid state memory, RAM, etc. As will be appreciated by one of skill in the art, the functionality of the program modules may be combined or distributed as desired in various embodiments. In addition, the functionality may be embodied in whole or in part in firmware or hardware equivalents such as integrated circuits, field programmable gate arrays (FPGA), and the like.","Behavior of the Data Entry User Interface","Overview","As previously noted, an object according to various embodiments of the invention may be used by an application to control any characteristic of a data entry graphical user interface. For example, an object according to the invention may be used by an application to control both the location and appearance of a user interface, such as a data input panel. The implementation of these particular features according to various environments of the invention will be discussed in detail below.","Positioning of the User Interface","One feature of a utility object according to various embodiments of the invention is the ability to position a data entry graphical user interface, such as a data input panel, anywhere in a work space designated by the application receiving data from the data entry graphical user interface. With some embodiments of the invention, the work space may be any space displayed to a user. Alternately, the work space may be any space in which the data entry graphical user interface can receive input data from a user. For example, if the data entry graphical user interface receives input data through the movement of a stylus across a surface, then the work space may be the space corresponding to the portion of the surface that can detect movement of the stylus.","Thus, a utility object according to some embodiments of the invention may provide an application with the ability to position a data entry graphical user interface close to the control into which data from the user interface will be submitted. For example, if the control is an edit control, a utility object according to the invention can position a data entry user interface close to the edit control, so that the user can simultaneously view both the user interface and the entry of data into the control. This feature is particularly useful when, for example, the user is employing the data entry user interface to enter data into a variety of edit controls spread out over a wide area, such as a form.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 2A","FIG. 2A"],"b":["201","201","201","203","207","209","213","203","207"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 3","FIG. 2A"],"b":["203","207","301","303","303","305","305","301","307","309","311","313"]},"After the user has written electronic ink onto the writing surface , the data input panel  will convert the electronic ink into text after a predetermined period. If, however, the user wishes to speed up the recognition process, the user may activate the send button  using a pointing device. Once text is recognized from the electronic ink, it typically is inserted into an application at an insertion point in a control. In addition to inserting recognized text at an insertion point, the user may insert non-character actions at the insertion point as well, using the control buttons . For example, using the control buttons , a user may move the insertion point forward or backward through existing text, delete, backspace, and create a carriage return.","As will be explained in more detail below, activation of the supplemental interface buttons  and  command the data input panel  to display supplemental soft keyboards containing number and symbols, respectively, while activating the close button  will close the data input panel . The data input panel  also includes surface selection buttons  and . As will also be discussed in detail below, the surface selection buttons allow a user to switch between data input surfaces displayed by the data input panel . In , the writing surface button  is activated, prompting the data input panel  to display the writing surface .","When the user wishes to insert data into an edit control, the user first establishes an insertion point in the edit control using, for example, a pointing device such as a stylus or mouse. Turning now to , for example, a user wishing to insert data into the edit control  establishes an insertion point  within the boundaries of the edit control . Typically, placing an insertion point within an edit control causes the operating system of the computer to shift the input focus to that edit control. That is, the operating system recognizes that future data input by a user will be delivered to that edit control. In response to the edit control  receiving the input focus, the utility object according to various embodiments of the invention instructs a shared component to display the data input panel  for entering data into the edit control . The shared component encapsulates and instantiates a graphical user interface that may be shared among multiple utility objects. As will be discussed in detail below, the characteristics of the shared graphical user interface will vary depending upon the data provided by the object controlling the user interface.","With some embodiments of the invention, the utility object may instruct the shared component to display the data input panel  whenever the user places an insertion point into an edit control. With alternate embodiments of the invention, however, the utility object may instruct the shared component to display the data input panel  only in response to the user placing an insertion point with a stylus. By responding only to an insertion point created with a stylus pointing device, the object prevents the data input panel  from being displayed when the user is employing a different data entry tool, such as a keyboard or mouse. Thus, the data input panel  will be displayed only when needed to actually enter data into a control.","When the utility object determines that the edit control  is receiving input focus, the utility object may instruct the shared component to display the data input panel  at a specific location relative to the edit control . For example, the object can specify a vertical offset between the closest horizontal boundary edge of the data input panel  and the closest horizontal boundary edge of the edit control . Similarly, the object can specify a horizontal offset between the closest vertical boundary edge of the data input panel  and the closest vertical boundary edge of the edit control . With some embodiments in of the invention, the object may even specify a height and width of the data input panel , to ensure that it fits within the prescribed work space while remaining close to the relevant edit control.","In the illustrated embodiment, if space is available within the work space boundary , then the utility object instructs the shared component to display the data input panel  below and shifted toward the right of the boundary of the edit control . For example, the object may direct the shared component to position the upper boundary of the data input panel  the pixel equivalent of 0.25 inches below the lower boundary of the edit control blocks . Similarly, the object may direct the shared component to position the left vertical boundary of the data input panel  the pixel equivalent of 1\/16 of an inch to the right of the left vertical boundary of the edit control .","This position arrangement is particularly convenient when the application is displaying a form with a variety of edit controls. By placing the data input panel  below and slightly shifted toward the right of the edit control , the data input panel  remains close to the edit control , but does not obscure the user's view of text entered into the edit control . This positioning also allows the user to view at least a portion of the edit control  directly below the edit control , so that the user does not forget to enter data into the edit control  as well. Additionally, the edit control  is partially visible so that the user can target the control using the stylus to move the input focus to edit control . Moreover, if the title  associated with a the edit control  is left-justified, then the right-shifted position of the data input panel  will also allow the user to view at least the first letters of the title , and thus will assist the user in remembering what data should be entered into the edit control .","Once the data input panel  is displayed, the user can employ the writing surface of the data input panel  to enter text into the edit control . For example, as illustrated in , the user might handwrite the name \u201cJohn Doe\u201d in electronic ink  onto the writing surface. After a predetermined amount of time, or if the user activates the send button , the data input panel  recognizes text from the ink . Then, as shown in , the data input panel  inserts the recognized text  into the edit control .","With various embodiments of the invention, the object can even compensate for situations where the default position of the data input panel  cannot be used without obscuring the associated edit control. For example, as shown in , the data input panel  is being used to insert text into the edit control . Because the edit control  is just above the boundary  of the work space, the data input panel  cannot be inserted below the edit control . In this situation, the object may instruct the shared component to render the data input panel  at a position above and shifted toward the right of the edit control . More particularly, the object may provide the shared component with a negative vertical offset, thereby placing of these data input panel  above the edit control .","Similarly, if there is insufficient room to display the data input panel  shifted toward the right of an edit control, then the object may instruct the shared component to place the data input panel  shifted toward the left of the edit control. For example, as illustrated in , the edit control  is too close to the vertical portion of the work space boundary  to display the data input panel  shifted toward the right of the edit control . Instead, the object instructs the shared component to place the data input panel  shifted toward the left of the edit control . That is, the object provides the shared component with a negative horizontal offset value. Thus, the data input panel  will not completely obscure the underlying edit control . Also, if an application contains edit controls along the right-hand side of its user interface, then right-justified titles for these edit controls will still be partially visible to a user employing the data input panel  according to these embodiments of the invention. Likewise, if there is insufficient room to display the data input panel  below and shifted toward the left of the edit control, then the object may instruct the shared component to display the data input panel  above and shifted toward the left of the edit control, as illustrated in .","In some instances, a user may wish to employ a data input panel  in order to enter data into a multi-line edit control According to various embodiments of the invention, the data input panel  may be positioned relative to a multi-line edit control in a similar fashion to its position relative to a single line edit control as described above. If the multi-line edit control is too large to allow the data input panel  to be positioned above or below the multi-line edit control, however, then the object may instruct the shared component to position the data input panel  within the edit control itself. For example, if the insertion point  is located in the upper half of the multi-line edit control (or, alternately, in the upper half of the work space), then the object may instruct the shared component to position the data input panel  at the lowermost portion of the multi-line edit control (or at the lowermost available position in the work space). Similarly, if the insertion point  is positioned in the lower half of the multi-line edit control (or, alternately, in the lower half of the work space), then the object may instruct the shared component to position the data input panel  at the uppermost portion of the multi-line edit control (or the uppermost available position in the work space). As will be appreciated by those of ordinary skill in the art, however, it is beneficial to minimize the movement of the data input panel  during use, in order to avoid confusing the user or disrupting the user's work flow. Accordingly, various embodiments of the invention will reposition the data input panel  only when the user relocates the insertion point  from the upper half of the multi-line edit control to the lower half of the multi-line edit control, or vice versa.","It should also be appreciated by those of ordinary skill in the art that, with various embodiments of the invention, the auto positioning features described above may be disregarded or modified. For example, a developer creating a software application to employ an object according to the invention may disable the auto positioning features, and instead provide alternate position information for data entry user interfaces invoked through the application. Thus, a developer may choose to always position the data input panel  directly above or directly below the associated control. Alternately, a developer may prefer a specific location for a data entry user interface when the user is inserting data into a particular control. With this arrangement, the object associated with that particular control may specify exact values for the position and size of the user interface.","With still other embodiments of the invention, the object can ensure that an associated data input panel  moves with an edit control. For example, some edit controls are contained within windows that a user can move by, for example, manipulating a pointing device. Using a method that will be described in more detail below, an application, working through an object, can direct a data input panel  to move with its associated edit control. With this method, the data input panel  is moved directly to a new location designated by the application. Of course, alternate methods may be employed that incrementally move the data input tablet , and thus continuously display movement of the data input panel  through the work space.","Appearance of the User Interface","In addition to specifying the size and position of a data entry graphical user interface, a utility object according to various embodiments of the invention may also specify the appearance of a data entry graphical user interface. Thus, a utility object according to various embodiments of the invention can determine which features the shared component will include in a displayed data input panel .","Returning now to , the data input panel  can provide two different data input surfaces, as previously noted. When the data input panel  displays the writing surface  as shown in that figure, the data input panel  generates electronic ink corresponding to the motion of a stylus across the writing surface . If, on the other hand, the data input panel  displays a keyboard surface, then the data input panel  will generate a character of text corresponding to each key activated on the soft keyboard. As previously noted, a user can toggle back and forth between these surfaces by activating the surface buttons  and . With various embodiments of the invention, however, the utility object can specify that a data input panel  initially display a particular surface when the input focus is shifted to a control.","For example, an application may include an edit control for receiving a random combination of numbers and letters, such as a password or product model number. With this type of data, the writing surface  may not be the most suitable surface for entering the data. Many handwriting recognizers have difficulty recognizing random characters. Further, many password edit controls do not accurately display their data, but instead display only a single character, such as \u201c*\u201d, to prevent a bystander from inadvertently viewing a user's password. Thus, if the user's handwriting is being inaccurately recognized, the user cannot even view the recognition results to determine which character or characters are being incorrectly recognized. With various embodiments of the invention, an object associated with this type of edit control may instruct the shared component to initially display the keyboard surface, as it provides the user with a more reliable technique for entering random numbers and letters.","In addition to specifying the initial display of the writing surface  or the keyboard surface, a utility object may specify the initial or permanent display of any surface that can be displayed by the shared component. For example,  illustrates a data input panel  for use by Asian language users. Instead of the writing surface  with a single area, the writing surface of this data input panel  simultaneously displays multiple writing areas , so that a user can write a single Asian-language character in each area . Thus, if an edit control is configured to receive data in the form of Asian language characters, the utility object associated with that edit control can specify that the shared component initially display the Asian language data input panel . It should be noted that the Asian language writing surface can be included in data input panel  in addition to the Latin language writing surface . Thus, with some embodiments of the invention, a user may toggle between the Asian language writing surface, the Latin language writing surface , and the keyboard surface.","Of course, still other embodiments may employ any number of different specialized surfaces. For example, an edit control in a browser configured to receive universal resource locator addresses may specify the display of a soft keyboard containing keys for the character strings \u201cwww.,\u201d \u201c.com,\u201d \u201c.net,\u201d \u201c.org\u201d and \u201c.gov.\u201d Likewise, a utility object can specify the display of a surface having partitioned writing areas for \u2018Latin language users in order to, for example, assist the data input panel  in better recognizing random characters in a password or part model number. Also, a utility object can specify that a user interface include a surface that collects electronic ink without converting the electronic ink into text. This type of surface may be useful when, for example, capturing a user's original signature.","Invocation of the Data User Interface","In addition to determining the appearance or other properties of a user interface such as a data entry user interface, the utility object according to various embodiments of the invention may also be employed to control how a user interface is invoked. For example, with some embodiments of the invention, based upon status information from the application, a utility object may determine whether the stylus or pen is hovering within a bounding area for a control associated with the utility object. In response, the utility object may instruct may instruct the shared component to display or hide the data entry user interface automatically, according to whether the pen is hovering inside or outside of the bounding area. This bounding area could be contiguous with the exact boundary of the control, or could alternately cover a larger area such that the pen only need come close to the visible control boundary.","Still further, as the pen (or other pointing device) moves into range of the control containing the insertion point, the utility object may instruct the shared component to display the data entry user interface immediately, or alternately, after a small delay. A delay may allow a user to drag the pen (or other pointing device) through or over the control associated with the utility object when targeting other adjacent controls, so that the data entry user interface is only displayed when the user explicitly indicates a desire to access the data entry user interface by momentarily holding the pen inside or above the control associated with the utility object. With alternate embodiments of the invention, the utility object may instruct the shared component to display a data entry user interface only when a pen is in range of the entire display area, such that the data entry user interface is only visible when the pen is in range of the entire screen.","According to still other embodiments of the invention, the utility object may not have the data entry user interface invoked directly. Instead, the utility object may instead activate a target for instantiating the data entry user interface. More particularly, the shared component may be configured to create a target for invoking the data entry user interface. Alternately, another component, such as an application programming interface, may be used to create a target for invoking the data entry user interface. With this arrangement, the utility object may instruct the shared component (or other applicable component) to create a target for invoking the data entry user interface when, for example, the user intends to enter data into certain types of controls associated with the utility object. Thus, by summoning a target, the utility object may allow the user to easily invoke the data entry user interface when desired, without having the data entry user interface continuously displayed.","Further, the utility object (or the application hosting the utility object) may monitor event messages relating to the location of a pen or stylus (or other suitable pointing device) to determine when the pen or stylus (or other pointing device) is moved over or, with some embodiments, proximal to the data entry user interface and display target. In response, the utility object may instruct the shared component (or other appropriate component) to display the data entry user interface only while the pen (or other pointing device) is positioned over or proximal to the target. With some embodiments of the invention, for example, the data entry user interface display target may take the form of a rectangle, circle, or any other geometric shape, and may be positioned above, below, left, right, and\/or overlapping the control containing the insertion point. Again, the target may be displayed immediately or after a delay, and then the data entry user interface may be displayed immediately or after a delay.","Other Features of the User Interface","It should be noted that the data entry user interfaces employed by the various embodiments of the invention may implemented from any desired source. For example, different surfaces for a user interface may be provided by a shared component that renders a user interface in response to instruction from a utility object. Alternately, the utility object may provide one or more surfaces to the shared component. Still further, an application may provide one or more surfaces to a utility object, which can then provide the surfaces to the shared component. With some embodiments of the invention, the shared component may be an executable component, that instantiates the user interface itself. The shared component could alternatively be a non-executable component responsible for sharing data panel state information among multiple utility objects. Still further, some embodiments of the invention may omit a shared component altogether. With these embodiments, the utility object may render the data entry graphical user interface itself.","In addition to specifying the display of interface surfaces, with various embodiments of the invention the utility object may specify that the data entry user interface initially or permanently display any feature. For example, the data input panel  contains supplemental keyboard buttons  and . When the supplemental keyboard button  is activated, the data input panel  displays a supplemental keyboard  containing numbers 0-9, the \u201c,\u201d character and the \u201c.\u201d character, as shown in . Similarly, when the supplemental keyboard button  is activated, the data input panel  displays a supplemental symbol keyboard  that contains keys for a variety of symbols, as shown in . With various embodiments of the invention, a utility object may specify that a data input panel  be capable of displaying or not displaying either of these buttons, or any additional supplemental display that might be convenient to a user.","Further, a utility object according to the invention may simply define the arrangement of components within a data entry user interface. For example, the features of the data input panel  shown in  are reversed from those in the data input panel  shown in . Typically, this arrangement is based upon a user's preference in writing with the right hand or the left hand. This arrangement may also be specified by a utility object, however.","It should be noted that, with some embodiments of the invention, the utility object simply identifies the characteristics of a data entry user interface to the shared component. That is, the object provides predetermined values to the shared component, and the shared component then renders a previously stored user interface according based upon those characteristics. Alternately, the utility object may provide a portion of or the entire interface to the executable component for display to a user, as previously noted. It should also be noted that a utility object according to various embodiments of the invention may not be instantiated separately from its associated control. Instead, an object may be embedded into a control.","Features and Operation of a Utility Object","Overview","While the overall operation of a utility object according to the invention was described above, a more detailed discussion of the characteristics of a utility object according to one or more particular embodiments of the invention will now be provided. A utility object according to some embodiments of the invention includes properties, methods and events. The properties define the characteristics of a data entry user interface controlled by the object, as noted above. Methods allow an application to alter the characteristics of a data entry user interface in response to, for example, actions by a user. Events are then the occurrence of specific actions noted by the object, to which the object may respond.","Properties","A utility object according to various embodiments of the invention may include an AttachedEditWindow property, a Busy property, and a Factoid property. The AttachedEditWindow property identifies the window handle of the edit control box to which the data input panel is attached, thereby ensuring that data from the data input panel is not inadvertently sent to the incorrect edit control. The Busy property, which can be read by an application using the object, identifies whether or not an associated data input panel is currently being inked or recognizing ink. The Factoid property then identifies a factoid, or set of heuristics, that will bias the handwriting recognition of the data input panel to improve its accuracy for a particular control. For example, a factoid associated with an control for receiving a user's age may bias the data input panel to recognize input electronic ink as numbers rather than letters.","The utility object may also include a Height property, a Width property, a HorizontalOffset property, and a VerticalOffset property. As noted above, the HorizontalOffset and VerticalOffset properties can be set by an application to define the position of the data input panel relative to an edit control. The default value of the HorizontalOffset property may be the pixel equivalent of 1\/16 of an inch, while the default value of the VerticalOffset property may be the pixel equivalent of 0.25 inches. Each of these properties may be both read and written by an application. The Height property then provides an application with the height of the text panel user interface. With various embodiments of the invention, the default value of the Height property may be, for example, 157 pixels for a display with 96 dpi, 196.25 pixels for a display with 120 dpi, and 217.51 pixels for a display with 133 dpi, in order to maintain a consistent apparent size of the panel for a variety of display resolutions. Similarly, the Width property then provides an application with the width of the data input panel. With some embodiments of the invention, the default value of the Width property is 570 pixels for a display with 96 dpi, 712.5 pixels for a display with 120 dpi, and 789.7 pixels for a display with 133 dpi, in order to maintain a consistent apparent size of the panel for a variety of display resolutions. While some embodiments of the invention may not allow an application to change the Height or Width properties, still other embodiments of the invention may alternately allow an application to modify one or both properties.","The utility object may further include a Left property, which provides an application with the horizontal location of the left edge of the data input panel, and a Top property that provides an application with the vertical location of the top edge of the data input panel. The utility object may also include a Visible property, which retrieves or sets the visible state of the input panel. Thus, if an application wants to show or hide a data input panel to be displayed, it can change the value of the Visible property. Typically, the default value of this property will not show a data input panel, and will change only when a user shifts focus to its associated edit control by employing the stylus to place an insertion point in that edit control, but the Visible property allows an application to explicitly control whether a panel is visible, independently of whether the user has changed the input focus to the edit control by placing an insertion point inside the edit control with a pen. This default value can also be used to prevent multiple data input panels from being simultaneously displayed. With alternate embodiments of the invention, however, utility objects may allow multiple data input panels to be simultaneously displayed.","In addition to the properties listed above, a utility object may also have a DefaultPanel property and a CurrentPanel property. The DefaultPanel property determines which surface will be displayed in the data input panel by default, while the CurrentPanel property determines which surface is currently displayed in the data input panel. While there are a variety of panel values that may be employed for specialized panels, with the illustrated embodiment of the invention (having a keyboard surface and a writing pad surface) there are four possible panel values.","The first panel value, the Default value, can only be given to the DefaultPanel property and specifies that the data input panel will initially start with the default handwriting surface for the appropriate input language, and then keep any surface selected by a user for the remaining lifetime of the object instance. The second panel value, the Inactive value, can only be assigned to the CurrentPanel property by the object itself and read by an application. This value indicates that the data input panel is unavailable, which may occur if a control associated with another data input panel currently has focus. The third panel value, the Handwriting value, can be assigned to and read from both the CurrentPanel Property and the DefaultPanel property. This panel value forces the shared component to display the handwriting surface for the appropriate input language when the data input panel is displayed. Similarly, the fourth panel value, the Keyboard value, can be assigned to and read from both the CurrentPanel Property and the DefaultPanel property. The Keyboard panel value forces the shared component to display the keyboard surface for the appropriate input language when the data input panel is displayed.","In addition to the properties listed above, it should be appreciated that an object according to various embodiments of the invention may include any desired property for establishing the characteristics of a data entry graphical user interface. For example, an object may contain a property specifying one or more recognition context characteristics for a user interface, such as a particular recognition dictionary, factoid heuristics for biasing recognition of input handwriting, the use of a specific recognition engine, either generally or for recognizing text being inserted into a specific control, or instructions for the user interface to perform background recognition of input handwriting without waiting for a user to stop entering new handwriting. Further, an object may contain a property that causes a user interface to use an assigned recognition timeout value for returning recognized text, a particular electronic ink thickness or color, or to highlight desired keys on a keyboard surface. Properties or methods for an object may further allow an input panel to insert ink directly into a control, or to access ink that has already been inserted into a control. An object may also contain a property that forces a data input panel to display multiple lines on a writing surface, determines whether a user may voluntarily close the data input panel, or inform an application as to the status of a data input panel (i.e., if the panel is in use, if the panel contains electronic ink, etc.).","It should also be noted that one or more properties of the type described above may be embedded in a control itself. For example, an application can designate that data entered onto a rich edit control for receiving social security numbers be recognized using a factoid that biases recognition of handwriting toward the recognition of numbers over letters. For various embodiments of the invention, any such property may be embedded into a specific control rather than used by an associated object. Also, an application can include a control that internally employs a utility object, which may or may not expose the object's application programming interface on its own application programming interface. This type of control, however, will still display the input panel when it received input focus, even though it does employ a separate utility object.","Methods","In addition to the properties listed above, a utility object according to various embodiments of the invention may perform several methods. For example, a utility object may perform the CommitPendingInput method, which requests that the shared component immediately perform handwriting recognition on any pending handwriting, and then send the recognition result to the attached edit control. Because the shared component will typically perform handwriting recognition automatically after some preset timeout period, the CommitPendingInput method may be used by the application to force the input to be recognized and submitted directly. The object may also utilize this method itself when the object detects that the user is moving input focus away from its attached edit control, or when the object detects that the application is being shut down.","The utility object may also include the AutoShow method, which sets or retrieves a Boolean value specifying whether the data input panel appears when a control's input focus is set using a stylus. Thus, the AutoShow method can be used to disable activation of the data input panel when a user sets the focus to the attached control using a pen or stylus. That is, the AutoShow method can be employed to ensure that the data input panel only become visible when the application changes the value of the Visible property. A utility may also perform a MoveTo method, which sets the position of the data input panel to a static screen position, and the Refresh method, which forces the shared component to update the data input panel settings which are also read at initialization","Also, if the application is being employed with an operating system that provides a text service framework, such as the Microsoft WINDOWS\u00ae brand XP Tablet PC Edition operating system, then the utility object may perform the EnableTextServicesFramework method when associated with a rich edit control or an ink edit control (that is, with an edit control that supports the text service framework). As known to those of ordinary skill in the art, a text services framework can associate various metadata with text. For example, if the text were recognized from handwriting or speech, then that text will have alternate recognition selections. If an application supports a text services framework, then when the application receives text, it will also receive and maintain any metadata associated with that text. Accordingly, performing this method instructs the shared component to start the applicable text services framework (such as the Common Text Framework used with Microsoft WINDOWS\u00ae brand XP Tablet PC Edition operating system) on the attached control.\u2022","As well as providing correction functionality, the text services framework can also be used to ensure that recognized input data is accurately matched with its destination edit control. More particularly, when a rich edit control or ink edit control invokes the Common Text Framework, the Common Text Framework creates metadata for subsequently recognized text that associates the recognized text with the control. Thus, even after the input focus has shifted from the control, the Common Text Framework can match recognized text with the control and ensure that the recognized text is inserted into the control.","It should be noted, however, that with the Common Text Framework, the object must send the rich edit control a message instructing the rich edit control to request an OLE interface to the Common Text Framework (that is, the rich edit control must ask for a pointer to a COM interface to access COM features). With some embodiments of the invention, this message is performed with the EnableTextServicesFramework method rather than being performed automatically, because if the object is not attached to a rich edit control, then the message has no meaning, and may even trigger unwanted results. With alternate embodiments of the invention, however, a utility object could inspect a class name of a control or window, and then automatically send the messages based upon the identified class name.","In addition to the methods described above, other methods can be additionally or alternately employed with various embodiments of the invention. Thus, if the application is being executed by an operating system that provides its own data input panel, a utility object may also be able to perform various methods relating to that system data input panel. For example, an object could call methods that determine the current visibility of the system data input panel, set the visibility state of the system data input panel, and control how the data input panel associated with the object interacts with the system data input panel.","Events","In addition to the methods and properties listed above, a utility object according to various embodiments of the invention may monitor for various events. For example, a utility object may monitor for InputFailed events, which occur when input focus changes before object was able to insert user input into its attached control. As will be discussed in detail below, the InputFailed events may be used to alert an application that recognized text was not properly delivered to an edit control. The object may also monitor for -PanelChanged events, which occur when the surface of the data input panel has changes, and PanelMoving events, which occur when the data input panel is moving. It should also be noted that an application can override the left and top coordinate of the user interface by changing the passed-in values during the PanelMoving event (which is fired when the panel re-calculates its position on the screen, as well as when the application calls the MoveTo method). The utility object may also monitor for VisibleChanged events, which occur when the data input panel changes from showing to hidden and vice versa. Additionally, an object according to various embodiments of the invention may include an event that fires before ink strokes are recognized and converted to text. This event allows an application to capture the ink before it is recognized, so that the application may, for example, receive the ink in its original form or provide the ink to another recognition engine","Use with Alternate Application Programming Interfaces","While some embodiments of the invention has been generally described with reference to the Microsoft WINDOWS\u00ae brand XP Tablet PC Edition operating system, it should be appreciated that various embodiments of the invention may be used in a variety of software environments. In particular, utility objects according to the invention may be used in a COM environment. In a COM environment, the utility object can be associated with a Dynamic Linked Library associated with a GUID (that is, the shared component that creates the data entry user interface). When an application is instantiated, the Microsoft WINDOWS\u00ae brand XP Tablet PC Edition operating system, for example, looks in the registry to find the Dynamic Linked Library associated with that application. The operating system then calls the functions that are included in that Dynamic Linked Library, which in turn summons the shared component through the COM interface. Also, in the COM environment, for example, the object may attach to a control through a window handle. Similarly, utility objects according to the invention may be used in a .NET environment, by tying the appearance of the data input panel to a class that wraps an automation object. As previously noted, however, a utility object according to various embodiments of the invention may be employed in any suitable operating environment.","Operation of the Object with an Application","Instantiation of the Object by an Application","The operation of a utility object according to various embodiments of the invention will now be described with reference to , B and . As shown in the example configuration illustrated by , an application  contains three controls ,  and . A utility object  is attached to the control . Similarly, a utility object  is attached to the control , while another utility object  is attached to the control . A second application  includes a control  and a control . A utility object according to various embodiments of the invention is attached to both the control  and the control . Each of the utility objects , , , and  interface with the shared component . That is, each of the objects , , , and  share the use of a single shared component . As described in detail above, the shared component  creates a data entry graphical user interface based upon property values provided by the utility objects , , , and . In the illustrated embodiment, the shared component  creates a data input panel like that shown in , but it should be appreciated that, with alternate embodiments of the invention, the shared component can create other types of user interfaces.","Referring now to , when the user seeks to enter data into the control , the object  determines that the control  is receiving input focus from the operating system. In response, the shared component  receives a summons from the object  in step , which includes the property values defined by the object . Using these values, the shared component  displays a data input panel through which the user can enter data into the control  in step . In the illustrated embodiment, the value of the DefaultPanel property for the object  is Default which, in this example, is initially the writing surface. Thus, the shared component  displays a data input panel including the writing surface .","It should be noted that, when the shared component  determines that the input focus has shifted to a new control, the shared component  stores the identification of that control. Using this identification, the shared component  can associate electronic ink received while that control has input focus with the control. If the input focus subsequently shifts to a new control while electronic ink associated with a previous control is still being recognized, the shared component  determines that the recognized ink cannot be delivered to the proper control. (As previously noted, however, if the Common Text Framework is invoked on the attached control, the data input panel is able to send the results of handwriting to the control even after focus has left the control.) Accordingly, the shared component  issues an InputFailed event to the application, along with the recognized text. This will allow the application to route the recognized text back to the proper control.","When the user wants to enter data into another control, the user shifts the input focus from the control  to the desired control. For example, if the user wishes to enter data into control , the user changes focus to this control by tapping a stylus within the boundary of control  to place an insertion point. In step , the shared component  determines that focus is about to change from the control  to the control . In step , the shared component  determines whether the value of the DefaultPanel property in the object associated with the control that is receiving focus (that is, the value of the DefaultPanel property of the object ) is also Default. If the value of the DefaultPanel property in the upcoming object is not Default, then the shared component  caches the current state of the data input panel. In this example, the value of the DefaultPanel property of the object  is instead Keyboard. Accordingly, in step , the shared component  caches the current value of the DefaultPanel property. If, however, the value of the DefaultPanel property of the object  was Default as well, then no action is taken.","When the object  gains control of the shared component , it forces the shared component  to provide the user with a data input panel that initially displays the keyboard surface. Later, when the user wishes to change the input focus to yet another control, such as control , the shared component  again detects the change in focus and retrieves and restores the value of the DefaultPanel propert (which is still the writing surface) that was previously cached. Thus, the previously-displayed writing pad is restored. The shared component  then returns to step , to determine if the value of the DefaultPanel property is Default. In this case, the DefaultPanel property of the control  also is Default, so the shared component  takes no action and the control  leaves the appearance of the data input panel in its current state. Thus, the Default value simply ensures that the current panel type, whatever it may be, gets cached in response to the shared component  receiving a new panel type, and restored when the input focus changes again.","Used of the Shared Component","As discussed in detail above, each utility object employs a single shared component to control the operation of a user interface. Accordingly, each object communicates with the single shared component, and may receive information in response. For example, with some implementations of the invention, the objects and the shared component may employ a Microsoft WIN32 application programming interface to exchange information across different software processes. Using this application programming interface, an object may pass an event \u201chandle\u201d or other reference to the component with instructions to perform a task, and then identify when the shared component has \u201cset\u201d the event to indicate completion of that task. Alternately or additionally, an object may provide instructions to the shared component that requires the shared component to provide a message with data in reply (such as, for example, the status of the data input panel). Still other communication techniques and methods may be employed to communicate information between the objects and the shared component according to different embodiments of the invention.","One representative relationship between various objects and a shared component that may be used by various embodiments of the invention is illustrated in . As seen in this figure, a software application  may employ a variety of objects . Similarly, another software application  may employ one or more objects . In the illustrated embodiment, for example, the objects  and  may be COM objects created by their respective software applications  and . (An object maintained by a software process is sometimes referred to as an \u201cin-process\u201d object with reference to the software process). Various alternate embodiments of the invention, however, may employ other types of objects in this type of relationship, including software objects that do not employ COM techniques.","Each object  and  communicates with a shared component , which may also be implemented using COM techniques according to some embodiments of the invention. During startup, each object  and  instantiates the shared component . For example, when the objects  and  and the shared component  are implemented using COM techniques, an object  or  may perform a \u201cCoCreate Instance\u201d operation to instantiate the shared component . Because the shared component  may be shared among multiple objects, if the shared component  has already been implemented, then a reference to the existing shared component  is provided to the object in response. Alternately, if the shared component  does not already exist, then the shared component  is created. With the relationship shown in , each object  and  interacts with the shared component  by making method (or function) calls  on the interface of the shared component . The shared component  then returns events  to the objects  and .","While the relationship illustrated in  allows the objects  and  to communicate directly with the shared component , this particular arrangement may occasionally introduce errors. For example, each call from an object  or  to the shared component  is synchronous, and thus should be completed before control is returned to the calling object  or . Accordingly, any events corresponding to a call from an object should be set by the shared component  to confirm completion of that call before control is returned to the calling object  or . Accordingly, if the shared component  fires an event, any delays in the receiving object's handling of that event can make the shared component  completely unresponsive. For example, the application  may display a message box using an interface that receives events from the shared component . Until a user dismisses the message box, the shared component  is unavailable while it waits for a reply to the event to return. Thus, the data input panel could not be employed until the user dismisses the message box.","Also, making this type of cross-process call (going either direction) could trigger reentrant function calls, resulting in unpredictable behavior. For example, when an object  or  calls a method on the shared component , the shared component  may perform a method in response that leads the shared component  to itself make a call to an external outof-process object. Thus, if the shared component  is implemented using COM techniques, it may make calls to the standard AddRef, Release or Querylnterface methods, or to any other method implemented by an external software process. While the shared component  is making such a call to a method on an external software process, a small window of time exists during which other calls into the shared component  might be made by a different object, such as one of the objects  and . As a result of this \u201creentrancy,\u201d the order of calls into the shared component  may not be properly synchronized. Thus, in-bound calls into the shared component  could be interrupted by other in-bound calls into the shared component . This reentrancy may create state problems when calls are not completed appropriately before being interrupted. Still further, events fired by the shared component  may not be deterministic, as events may be received in an unpredictable order due to random environmental factors that affect the speed at which calls are processed.","Accordingly, various embodiments of the invention may employ the arrangement illustrated in . As shown in , the objects  and  do not send calls directly to the shared component . Instead, each object  and  sends calls to a corresponding proxy or \u201cstubby\u201d component . For example, the object A sends calls to the proxy component A, while the object B sends calls to the proxy component B. Similarly, the object C makes calls to the proxy component C, while the object  makes calls to the proxy component D.","With various embodiments of the invention employing this arrangement, the objects  and  may no longer instantiate the shared component  directly. Instead, an object  or  may instantiate a single proxy component , which then is dedicated to the object  or  invoking it. The first proxy component  that is created may then determine if the shared component  exists, and instantiate the shared component  if it does not already exist. Similarly, the last proxy component  to be destroyed may release the shared component  before ceasing to exist. Proxy components  instantiated between the first-created proxy component  and the last-destroyed proxy component  simply discover and use the previously-created shared component . According to various embodiments of the invention, the proxy component  may be a simple object, such as a simple COM object. As also shown in , the proxy components  have a 1-to-1 mapping to the objects  and  on the other side of the multi-process boundary between the applications  and  and the process of the shared component . More particularly, the process boundaries are represented by the dashed lines in , while the 1-to-1 mapping between the objects  and  and the proxy components , and the many-to-1 mapping between the proxy components  and the shared component  are then represented by dashed and dotted lines.",{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIG. 15","b":["1303","1501","1301","1307","1503","1305","1501","1503","1501"]},"Similarly, the shared component  also includes a message destination . The message destination  may, for example, be provided by the data input panel user interface associated with the shared component . With some embodiments of the invention, the message destination  may receive messages from a message queue maintained by the shared component  itself, but with other embodiments of the invention the message destination may receive messages from a message queue maintained by another resource. As will be discussed in further detail below, the message destination  may be used to ensure that method calls used by an application behave in a synchronous manner. That is, the message destination  may be used to ensure that each method call is completed before a response is returned to the caller, or before processing begins on another method call.","When an object  or , such as object C determines that a method call should be made to the shared component , it may define an event that can be used to track the state of the method call. For example, if the object C is operating in a Microsoft WINDOWS\u00ae brand operating system environment, then the object C may create a Win32 event, as discussed in detail above. Next, the object C calls for the desired method from its corresponding proxy component C. In making the call to the proxy component C, the object C passes a handle for the created event (or other identifying reference) to the proxy component C, along with whatever other parameters are appropriate for the method call. The object C also passes a handle (or other identifying reference) identifying its message destination C to the shared component .","In response to receiving the method call, the proxy component C posts a message relaying the method call to the message destination  of the shared component . It also duplicates the event handle, and passes the event handle (or its duplicate) to the shared component , in order to give the shared component  control over the event corresponding to that method call. All of the parameters required to execute the method call are packaged together so that they can be sent to the shared component  as message parameters with the event handle and the call message. Advantageously, this arrangement allows multiple proxy components  to post messages requesting method calls to the message destination  of the shared component  in whatever order that the method calls are received from their corresponding objects  and . Using its message queue, the shared component  may then process calls in the order in which they are received from the objects  and . Further, any interfaces that are passed to a proxy component  may be engaged by the shared component  only after the message calling the method is posted to the message queue in the interface  of the shared component . Thus, the shared component  will not be \u201caware\u201d of the method call before the message is posted to the message queue, thereby avoiding reentrancy and ensuring that the shared component  performs the method call using the appropriate data. Once the message requesting the method has been posted to the interface , the proxy component  returns execution to the calling object  or .","In response to receiving execution control from the proxy component , the object  or!  waits for the called method to be completed. For example, if object  or  is a COM object, then it may issue a CoWaitForEvent to wait for the defined event to be returned (or \u201cset\u201d) by the shared component  before continuing with another function. It should be noted that this process may be employed when the desired method must be performed in a synchronous manner. If, for example, an object  or  simply notifies the shared component  of an occurrence for informational purposes, then the creation of an event and subsequent wait for the event to be set may be omitted.","The shared component  works its way through the messages sent to its message destination , performing each method in the order of its request in the message queue. If, for example, the shared component  is implemented using COM techniques, then the messages may be extracted from the message queue using the GetMessage operation. Accordingly, in the illustrated example, when the shared component  reaches the message posted by the proxy component C, it performs the requested action. Also, if appropriate, after it has performed the requested action, the shared component  posts a corresponding notification message with the results of the performed method to the message destination C of the object C. For example, if the shared component  is implemented using COM techniques, it may employ the PostMessage process to post the notification message to the message destination C. It should be noted that a variety of techniques can be used to post messages to the message destinations  and . For example, if the Microsoft WINDOWS\u00ae brand operating system WIN32 messaging techniques are employed, ATOMs may be used to encode data that cannot be passed in the standard WPARAM and LPARAM parameters to avoid issues with marshalling data created by the cross process nature of COM objects. Posting the notification message to the message destination  (or the message destination ) rather than directly providing the method results to the object  or  may thus prevent re-entrant situations, and ensure that the order of events sent by the singleton to the object  or  corresponds to the order in which method calls were made by the object  or .","Further, the shared component  sets the event with corresponding to the performed method, to indicate that the requested method has been completed. When the shared component  sets the event (given by the event handle that was passed through previously), if frees up the object  or  that defined the event, thereby allowing the object  or  to resume processing from where it called the method. For example, if the object  or  expects returned information from a method call, the object  or  will check the message queue for the expected information upon detecting that the event corresponding to the method call has been set.","It should be noted that, with various embodiments of the invention, an object  or  may omit creating an event. For example, with some types of method calls, an object  or  may simply desire to post information to the shared component , without expecting a reply. In addition, for some embodiments of the invention, an object  or  may make a method call to the shared component  without posting a message to the message destination . For example, some embodiments of the invention may allow an object  or  to inquire to the shared component  regarding the status of the data input panel (e.g., an inquiry as to whether the data input panel is busy). Because this type of method call is quickly processed, thereby reducing the opportunity for reentry, and must be immediately received back by the calling object  or  to be useful, this type of method call may be passed directly to the shared component  without having a corresponding message posted to the message destination  of the shared component .","Conclusion","While the invention has been described with respect to specific examples including presently preferred modes of carrying out the invention, those skilled in the art will appreciate that there are numerous variations and permutations of the above described systems and techniques. For example, while the data entry graphical user interface is controlled by individual software applications through utility objects according to various embodiments of the invention described above, with alternate embodiments of the invention the features of the data input panel may be determined by other sources, such as the location of the insertion point throughout the system.","Thus, the spirit and scope of the invention should be construed broadly as set forth in the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2A","FIGS. 2B-2D"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 4-6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 14 and 15"}]},"DETDESC":[{},{}]}
