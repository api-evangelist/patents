---
title: System for extending the file system API
abstract: A computing system and computer readable medium storing computer instructions are disclosed, which when the computer instructions are executed, enables a computer system to manage data using a file name on a computer system having a graphical user interface and a file system storing files with a file hierarchy. The computer instructions comprise, in part, entering a command from an application to create a file; displaying the file hierarchy; allowing a user to select at least one folder; saving data in a first file having a file name in one selected folder; in each of the other selected folders, creating a shortcut file having the same file name and containing a pointer to the first file; and creating a hidden file in the folder containing the first file, the hidden file containing a list of pointers to the shortcut files.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08046718&OS=08046718&RS=08046718
owner: International Business Machines Corporation
number: 08046718
owner_city: Armonk
owner_country: US
publication_date: 20090220
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The current application is a continuation application of U.S. patent application Ser. No. 10\/520,797, filed under 35 U.S.C. \u00a7371 on Feb. 23, 2006, now U.S. Pat. No. 7,516,420 which claims priority to international patent application PCT\/EP03\/07132, filed Jun. 13, 2003, which claims priority to European Patent Application 02368078.8, filed Jul. 11, 2002, all of which are hereby incorporated herein by reference.","The present invention generally relates to file systems; more particularly, this invention concerns a new function of the file system which facilitates the retrieval of files.","Every operating system includes a file system to manage data files. An application programming interface (hereinafter, \u201cAPI\u201d) is provided by the operating system to develop applications providing an interface to the user to manage his own files. A typical application is a file manager to create, move, copy, delete, and rename files interactively through a user-friendly graphical interface. Other applications such as text or graphical editors also use the API of the operating system to allow the user to manipulate the data he has processed.","The file system assigns to the users a hierarchical organization of their files. In such a tree data structure, the nodes are folders having branches with other folders, the leaves being the files. Each node and file is identified by a name which is a character string having a limited size and that the user is free to assign. The file or folder path is the list of the node names of the system file hierarchy to reach it, the last name being the file or folder name. With the applications using the file system API, the user can first visualize a hierarchical representation of his files. The graphical view is a tree in which the nodes are identified by the folder and file names. The user selects one folder or file by clicking on the name. The structure depending on one node can be either expanded or collapsed.","The applications using the file system API such as the file manager allow the user to create a file. At the file creation, the file manager requests the user to give a name. This name is unique for each file. To retrieve an existing file, the user can navigate, through the graphical representation of the file system hierarchy and select the existing file by clicking on the corresponding node. When the user knows the name of the existing file, retrieval of the file is immediate. To retrieve a file without knowing its name requires knowledge of its path or at least the name of nodes belonging to its path to find it quickly in the file system hierarchy.","Usually, when a file is created, the user faces different possibilities to choose the node in the hierarchy where the file is to be stored. Most of the time, the file has a relationship with its content, the recipient, the product described in the file, and multiple other possibilities. At creation time, the recipient information may appear to be the most relevant information and the user chooses to store it in the file hierarchy containing everything related to recipients (customers for example). Unfortunately, today, one path must be selected and only one. At retrieval time, which may be months later, the relationship the user remembers might not be the recipient but instead the product described and therefore the user will start looking for the file in the hierarchy under products without a chance to find it.","Today, file managers reference a file by its unique combination of path and file name. For example, U.S. Pat. No. 6,055,540, to Sun Microsystems, Inc. discloses a method for creating a class hierarchy. The patent proposes a document classification on top of the usual tree data structure built in the file managers, to perform a more efficient retrieval of documents. With the embodiment described, the user can create a class hierarchy by defining a tree structure of category nodes, the leaves, and a category definition. The method provides also an interface to update the category node structure or definition. The solution of the prior art is helpful to be mapped on an application database such as a software engineering database used by application developers. It is used, for instance, to organize the access to data between developers as the categories of data are created in relation with development. This solution of the prior art requires time and process resources to manage the category nodes. It is used for coordinating a group of users and to organize the data as they are created and updated by this group of users.","The standalone user of a computer managing his own file system does not want to create and manipulate a new data structure over the standard tree data structure proposed by the file manager of the operating system. Neither does the user want to store the files according to a list of categories that need to be shared by a group and need to be managed as with the solution of the prior art.","It is therefore an object of the present invention to provide a system to retrieve a file in the standard tree data structure of the file system.","The second object is to achieve the first object by providing a system including a graphical user interface.","These objects are reached by providing a system and computer readable medium storing computer instructions, which when executed, enables a computer system to manage data using a file name on a computer system having a graphical user interface and a file system storing files with a file hierarchy, the computer instructions comprising:","entering a command from an application to create a file;","displaying the file hierarchy;","allowing a user to select at least one folder;","saving data in a first file having a file name in one selected folder;","in each of the other selected folders, creating a shortcut file having the same file name and containing a pointer to the first file;","creating a hidden file in the folder containing the first file, the hidden file containing a list of pointers to the shortcut files;","using the hidden file during file management operations to keep track of occurrences of the shortcut files in the file hierarchy.","The system for managing data using a file name also comprises systems for opening, deleting, moving, and copying a file created as defined above. To keep the integrity of the file system, all these file management operations are executed while updating the hidden file which always keeps track of the occurrences of the file in the file system.","The objects of the invention are also achieved with the use of a computer readable medium storing computer instructions, which when executed, enables a computer system to implement the features of the method and system described herein. As used herein, computer readable media may include, but are not limited to, both volatile and nonvolatile media, removable and non-removable media, and any available medium that can be accessed by a computer system. By way of example and not limitation, computer readable media comprise include, for example, computer storage media including RAM, ROM, EEPROM, flash memory, or other memory technology, CD-ROM, digital versatile disks (DVD), or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store the desired information and that can be accessed by a computer system.","The objects of the invention are also achieved by a computing system comprising means to execute the program. It is noted that the file management functions, particularly the multipleStore function, can be integrated in the file system and provided to a computing system user as an extension of the API of the operating system.","One advantage of the invention is the use of a virtual link to a real file also called the \u201cshortcut,\u201d \u201calias,\u201d or LINK according to the operating system. This function is available with most of the operating system APIs. This function will be generically called shortcut hereafter in the document.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["140","100","110","120","130"]},"The user may want to later retrieve his file during the execution of an application using the API of the operating system. Using the same example of the FREELANCE GRAPHICS\u00ae graphical editor, the user selects the \u201cOpen\u201d command of the menu of actions. An open window is opened by the application and once again the user will click on the specific icon to request his file system hierarchy to be displayed. The user has to remember the path and the name of the folder \u201cPresentation\u201d to navigate in the hierarchy. If the user does not remember the name of the folder, he will have to navigate in the file system tree and to open folders. Finally, by clicking on the folder \u201cPresentation\u201d the user will display the content and will retrieve his file.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 3","FIG. 3","FIG. 4"],"b":["200","210","300","1","2","3"]},"Later on, to retrieve that file from an application such as FREELANCE GRAPHICS\u00ae graphical editor, the user will select the \u201cOpen\u201d command in the menu of the possible actions, as with the method of the prior art. The application displays the file hierarchy of the user file system. If the user does not remember the folder in which the file has been saved, he has to navigate in the displayed tree. Now, in accordance with the present invention, as the user has created a file under more than one folder, the user has multiplied his chances to remember one of the paths he selected during the creation which had a relationship with the file content. The user has in mind, for example, to save a presentation prepared for a customer, three relationships:","1. Customer=CLIENTA","2. Technology=J2SE","3. Product=Websphere","The user selects one of the folders, and the files contained in the folder are displayed.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4","b":["400","410","410","430","440","450","1","2","3","1","2","3","1","460","1","470","2","3","2","3","480","1","2","3"]},"The retrieval of the file is not part of the invention as being performed by the application using the standard operating system API. When the user of an editor application selects the command \u201copen\u201d in the menu of possible actions, the file system tree representation is displayed. If the user does not remember the name of the file he navigates in the file system tree until he encounters a folder name reminding him of a relationship with the file content. To retrieve the file the user can select any one of the three folders designated during the \u201cSave Multiple\u201d operation and retrieve the file inside the folder by clicking on the file name inside the selected folder. If the user selects the file physically containing the data (path\/fileName in the illustrative example), the operating system API is used to open this file. If the user selects a shortcut file (path\/fileName or path\/fileName) the shortcut function, which is part of the operating system API, is used to open the real file (path\/fileName).","One variation to this preferred embodiment is, at creation of the file with the \u201cSave Multiple\u201d command, to give the user the possibility of assigning a different file name in each different folder. In the example above, the multipleStore function could be: (multipleStore(fileName,path,fileName,path,fileName,path)).","This second embodiment provides greater flexibility for file naming. The move command which is described later in the document in the case of the preferred embodiment, will be easily adapted by the person skilled in the art to this second embodiment which allows different file names. As a matter of fact, if the user wants to move a file created by the \u201cSave Multiple\u201d command to a different folder, the application asks the user if he wants to keep the same file name or not.","The method of the preferred embodiment of the present invention could also apply to save a file which has already been created using a \u201cSave Multiple\u201d command. Assuming that a user has modified such a file, if he activates the \u201csave\u201d command in the menu of the possible actions, the new version of the file is saved in the real file, even if the user has opened a shortcut of the file. The standard shortcut API is used. If the user activates the \u201cSave Multiple\u201d command the shortcutFile is read and the tree file system representation is displayed highlighting the folder of the file and the folders of the shortcut files. The user can validate the save as it is by clicking on the save button; he can also de-select or select other folders by clicking on the corresponding tree nodes before clicking on the save button. Correspondingly, new shortcut files are created, other ones are deleted using the shortcut standard API and at the hidden shortcutFile is updated.","The screen view of  illustrates the graphical user interface of the method of the preferred embodiment to delete a file created using the \u201cSave multiple\u201d command. In the file tree graphical representation () displayed by a file manager application, the user selects the file he wants to delete, here \u201cfilesystem2.gif\u201d (). In the menu of possible actions (), the user selects the delete function ().",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 6","FIG. 4"],"b":["1","2","3"]},"The user has first selected a folder in the file hierarchy which has been displayed by the application and has selected in the folder the file corresponding to the fileName. Then he has activated the \u201cdelete\u201d command () in the menu of the possible actions. The file may have been created using the multipleStore function. A test is performed to check if a hidden file exists in the folder of the first file containing the data. If no hidden file exists (answer No to test ) the file is deleted (). If a hidden file exists (answer Yes to test ), the user is prompted with a warning message such as \u201cDelete file from all folders?\u201d (). The user may decide to remove all the occurrences of the file, the first file, the shortcut files and the hidden shortcutFile (answer Yes to test ). The sequence of operation is, first read the shortcutFile and remove all listed shortcuts from the corresponding folders and delete them. Lastly, the original file and the hidden shortcutFile are deleted. If the user wants to delete only the occurrence of the file under the folder he has selected, (answer No to test ) two cases are possible. If the file selected under the fileName is a shortcut file, (answer Yes to test ), the shortcut file is deleted and this shortcut file address is removed from the hidden shortcutFile (). If the file selected under the fileName is not a shortcut file (answer No to test ) but is the first file. This file is moved in a second folder having a shortcut. The corresponding shortcut is removed, the hidden shortcutFile is updated and moved to the second folder (). In the illustrative example, shortcut pointing to the path folder is removed and shortcut to folder path is kept.","It is noted that the function of deleting all the occurrences of a file may be optional and that, consequently the warning message \u201cdelete file from all folders\u201d is optionally displayed to the user.","Other operations of a file manager such as \u201ccopy file\u201d or \u201cmove file\u201d are also modified by the method of the preferred embodiment when it applies to file created with the \u201cSave Multiple\u201d function. The person skilled in the art can adapt the current commands of the preferred embodiment using the operating system API by adding at the end of the command execution the corresponding update of the shortcutFile.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 7"},"In the preferred embodiment, the method is implemented as an application () providing the functions described in the document: create file, save, copy, move, delete. The application uses the API of the File system (), which is a part of the API of the operating system (). In the file system API, more particularly, the application uses the shortcut API (). The application uses the graphical user interface () provided with the operating system to interface the user. It is noted that the multipleStore function can be implemented as an extension to the system file API."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
