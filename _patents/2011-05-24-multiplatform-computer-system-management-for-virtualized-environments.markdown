---
title: Multi-platform computer system management for virtualized environments
abstract: A virtual machine management system is configured to manage a plurality of computing systems each configured to support virtual machines. The virtual management system is configured to transparently manage the computing systems even in cases where the virtual machines are supported by different hypervisors. In some embodiments, this capability simplifies the management of cloud computing systems including software provided by different virtual machine vendors.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08539484&OS=08539484&RS=08539484
owner: HotLink Corporation
number: 08539484
owner_city: San Jose
owner_country: US
publication_date: 20110524
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims benefit and priority of U.S. Provisional Patent Application Ser. No. 61\/348,445 filed May 26, 2010. The disclosure of this provisional application is hereby incorporated herein by reference.","1. Field of the Invention","The invention is in the field of computer system management and more specifically, the management of virtualized and cloud-based computer system resources.","2. Related Art","Virtualized computing using machine hypervisors such as VMware's vSphere, VMware Workstation, Microsoft's Hyper-V and the open source hypervisors, Xen and KVM, have become a popular way to provide computing resources not only inside the computer data center but also form a key component of cloud-based computer resources. Using machine hypervisors allows many virtualized computer operating system environments (\u201cguests\u201d or virtual machines) to be executed in isolation from each other on a single physical hardware computer system.","As the number of virtualized environments and machine hypervisors increased, new computer system management tools were required in order to maintain the increasingly complex datacenter. The tools are typically supplied by the hypervisor vendor and normally implemented as separate management clients and servers. The client-server communication protocol is typically a mix of public and private APIs that are proprietary to the platform vendor. In this case proprietary is used to mean that an industry or other standards body does not control the APIs, rather than closed vs. open source. Those management tools that support multiple hypervisors do so by replacing the management client and accessing each hypervisor's functionality using its public management API.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},"Management Client  communicates to a management service  executing on the computer  comprising CPU , memory , network I\/O 104 and storage , using the platform's native public APIs  or native private APIs . The management service  communicates to remote hypervisors , ,  each running on their own computer system , ,  respectively. Each computing system , ,  comprises a CPU , memory , storage  and network I\/O 145. The protocol used for communication between the management service  and the hypervisors , ,  is platform specific. Management Client  may directly communicate with hypervisors , ,  for high performance, low latency data streams such as a virtual machine's remote console. Hypervisor  may itself expose a set of public APIs  or private APIs  for use by the management server  or the Management Client . The APIs ,  expose virtualized views of the physical resources of the hypervisor such as CPU , memory , storage  and networking interfaces . The APIs may also expose logical resources such as virtual machines , virtual networking  and configuration data for the various software components that make up the hypervisor platform. Hypervisors , ,  may communicate with the management server  directly, rather than waiting for the management server to poll them for new data.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2","b":"120"},"Management Service  typically comprises a datastore , authentication service , web-based management console . The datastore  stores both permanent configuration information and time-based performance metrics for aggregating and reporting. The data in datastore  may be stored as records in a SQL database, a flat file or other storage layout. The datastore maybe co-located with the management service , or as part of a remote datastore  executing on computing system , itself comprising CPU , memory , network I\/O 253 and storage . The authentication service , may use remote authentication services ","Each hypervisor vendor has adopted its own architecture for implementing its public APIs. Each follows a different and non-compatible route. For example VMware utilizes a SOAP based API, Microsoft uses WMI, Xen uses XML-RPC, Red Hat KVM a client-server API, while the Amazon cloud service currently supports both a SOAP and non-XML REST-based interface. Even with the technology, each has unique API implementation details that make supporting multiple hypervisor platforms a complex and incomplete task, including the use of private or undocumented APIs.","Embodiments of the invention include systems and methods that allow for the efficient management of multiple different computer platforms including virtualized, physical and cloud based resources using the \u201cnative\u201d unmodified management client of choice and its corresponding management server. As used herein, the term \u201cnative\u201d means that if the user wanted to manage VMware's vSphere hypervisor the user would use VMware's management client, as an alternative to or in addition to a third party client. A variety of hypervisors, from different vendors, can be managed from a single utility on a management client. Further, a specific hypervisor may be managed by management clients from different vendors.","In some embodiments, extending the functionality of the existing, platform management client and servers without modifying either is achieved using a combination of automatic data object transformation and native service brokers typically integrated using a message bus or other inter-process communication architecture. In some embodiments, extending the functionality of platform management clients and servers includes using a transform agent to intercept communications between a management server and a hypervisor.","Various embodiments of the invention include a system comprising a first computer system including non-volatile storage and a first hypervisor, the first hypervisor configured to support a plurality of virtual machines on the first computer system and to receive commands according to a first hypervisor protocol; a second computer system including non-volatile storage and a second hypervisor, the second hypervisor configured to support a plurality of virtual machines on the second computer system and to receive commands according to a second hypervisor protocol, the first hypervisor protocol and the second hypervisor protocol having first and second command spaces, respectively; a first management server configured to manage the first hypervisor according to the first hypervisor protocol; and a transform server configured to process a command sent from the first management server to the second computer system, the processing being based on virtual machine data stored on the non-volatile storage the second computer system.","Various embodiments of the invention include a method of managing a virtual machine, the method comprising receiving a command from a virtual machine management server configured to manage a first hypervisor, the command being directed toward a computing system configured to host a plurality of virtual machines; determining that processing of the command is dependent on data stored on the computing system; redirecting the received command to a transformation engine disposed on a transform server, based on the determination that the processing of the command is dependent on the data; and processing the command on the transformation engine using a copy of the data stored on the computing system.","Various embodiments of the invention include a system comprising a first management server including management logic configured to manage a hypervisor according to a first hypervisor protocol, and first metadata storage configured to store metadata characterizing the hypervisor according to the first hypervisor protocol, the hypervisor being configured to support one or more virtual machines; a second management server including management logic configured to manage the hypervisor according to a second hypervisor protocol, and second metadata storage configured to store metadata characterizing the hypervisor according to the second hypervisor protocol, the first hypervisor protocol having a different command space than the second hypervisor protocol; a transformation engine configured to receive the first metadata from a first transform agent, to transform the first metadata to a form that characterizes the hypervisor according to the second hypervisor protocol, and to send the transformed metadata to a second transform agent, the second transform agent being configured to communicate the transformed metadata to a second management server according to a second hypervisor protocol; and a computer system including the hypervisor, the first transform agent, the second transform agent, and virtual machine data. the transform of the first metadata by the transformation engine being based on the virtual machine data. In these embodiments the first transform agent is optionally configured to communicate the first metadata to the transformation engine in real-time, and the transformation engine is configured to transform the first metadata to the second hypervisor protocol in real-time.","A hypervisor, also called virtual machine manager (VMM), is one of many hardware virtualization techniques that allow multiple operating systems, termed guests, to run concurrently on a host computer. It is so named because it is conceptually one level higher than a supervisory program. The hypervisor presents to the guest operating systems a virtual operating platform and manages the execution of the guest operating systems. Multiple instances of a variety of operating systems may share the virtualized hardware resources. Hypervisors are typically installed on server hardware whose only task is to run guest operating systems. Non-hypervisor virtualization systems are used for similar tasks on dedicated server hardware, but also commonly on desktop, portable and even handheld computers.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3"},"Management client  accesses the native management server  using the native management APIs  and .","Management server  stores its view of the complete virtualized environment including details of the various hypervisor host computer systems, the virtual machines and how each is configured in the datastore .","Management server  and hypervisor  are compatible, the server has built-in support for the hypervisor, in this case no data transformation or brokers are required and server  can simply use the APIs , . The hypervisor  stores its configuration data in the hypervisor datastore, .","Hypervisor  represents a platform that is not natively compatible with management server ; in this case, the data reader  reads the hypervisor datastore  and presents the data to the message bus  for further routing and transformation. In some embodiments, data reader  may use APIs  and  to access the hypervisors data where the hypervisor store is available on the hypervisor platform.","Message bus  may include message parser , transformation engine , message router  and data writer .","Native service broker  accesses the transformed data via the message bus , and may need to communicate direct with hypervisor  for high performance, low latency data streams, such as remote console display using a combination of public and private APIs,  and  respectively.","Service brokers ,  represent additional network services that may make use of the multi-platform data available via the bus . An example being the aggregation of performance metrics across the computer environments in the data center without using any additional agents on each environment.","Each of the components comprising the service brokers and bus may be executed on a dedicated computer system, or multiple components may be combined and executed two or more computer systems. Performance requirements outside of the invention may dictate the specific configuration of computers systems and network interconnections.","The native service brokers receive messages from the native management infrastructure (clients or servers) and provide commonality of features across two or more different platforms by using the broker's own implementation for those features any given platform is missing. An example of use is to support a different platform's remote console protocol within the users' management client of choice, specifically, with the VMware management client accessing the remote console of a Xen-based virtual machine, the broker performs a real-time bi-directional translation of Xen's VNC remote console protocol to VMware's MKS display protocol.","Some embodiments may utilize multiple native service brokers on different ports or utilizing different protocols. Some embodiments may use a different native broker for each platform.","Each hypervisor management platform typically relies on a permanent store of meta data that typically describes the configuration of the hypervisor, the number and configuration of any virtual machines and any other platform specific resources such as networking and storage. The meta data may also include time-based performance and usage measurements of the hypervisor, virtual machines, networking or storage resources.","The format and storage of the meta data inside datastore  varies between the platforms, in some it may be expressed as a series of rows and tables in a SQL database, in others a textural representation in a flat text file. Other potential formats may include binary formatted files, object-based databases or other non-SQL database. The meta data is typically locally stored on the physical machine running the hypervisor  or management service , but in some implementations it may be stored on a remote, network accessible store. Storage of the meta data on a storage area network device is commonly considered to be local storage.","Collecting the meta data from the hypervisor or hypervisor management server typically may involve a series of SQL queries against the datastore or the parsing of a binary data file on a remote machine. In some hypervisor platforms the datastore maybe held in the memory of the running hypervisor, which may require using public or private APIs  or  respectively to collect the meta data.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":["311","313","314"]},"Once data reader  has read the platform specific meta data from the hypervisor, it is parsed into an abstract, but platform aware representation by the data parser . The transformation engine  can then translate the meta data into any of the various formats required by the native management servers. An embodiment typically chooses the translation mechanism that is closest to the abstract representation of the data that the message parser  generates. For example an embodiment that used XML to store the abstract representation may very well choose to use Extensible Stylesheet Language Transformations (XSTL) to transform one platforms XML abstract representation into a different platform's representation. The typical transformation cannot normally be a simple syntactic translation, but needs to include dynamic modification to insert session-based information or references to other objects. The original data read by the data reader  typically references identifiers and cross-references other meta data objects, that when transformed into the various other formats need to replaced with each platforms typical representation of the corresponding piece of data. This may include a combination of re-naming or re-typing. If platform  represented a unique hypervisor host with an integer id, while platform  represented its hypervisors hosts with a universal-unique identifier (UUID), then an example of a rename and retyping is converting an identifier from a field name of \u201cid\u201d and type \u201cinteger\u201d to a field name of \u201cuuid\u201d and type \u201cstring\u201d. The corresponding values associated with each of these fields also needs to be stored for the lifetime of the original meta data in a bi-directional lookup table so that when accessing the representation of the any of the objects from any native management client that references to the object representing the corresponding original meta data are readily available.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 5"},"Abstract data  is supplied by the data parser to the transformation engine , comprising an XSLT engine , a mapping definition description  and session data store .","For every message containing meta data that the transformation engine  receives, the XSLT engine uses the mapping definition description  to transform the XML formatted abstract data into a new XML formatted document for the other platforms. The XSLT engine also inserts the corresponding platform specific session data obtained from the session data store into the XML document prior to creating the new document . In some embodiments the transformation engine may create multiple output documents, ,  from a single input document.","Alternative embodiments of the invention include using other formats of representing the data, such as JavaScript Object Notation (JSON), with a corresponding change in the transformation engine.","Some embodiments may implement the abstract data representation as executable code, including both the data and the methods of transformation into an object-orientated representation. The transformation methods may be implemented dynamically, or the embodiment may pre-calculate the transformation mappings needed and compile them into the executable code. The transformation methods typically still have to handle the object specific session data.","In some embodiments, a single network service broker may broker services for multiple hypervisor hosts using a combination of multiple network ports, name-based virtual hosts, network address translation or other common application proxy-ing techniques.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 6","FIG. 6","FIG. 6"],"b":["610","610","610","610","615","615","615","610","615"]},"Each of Management Servers A includes hypervisor management logic (e.g., hardware, firmware and\/or software stored on a computer readable medium) configured to manage at least one type of hypervisor. For example, Manager Client A may include software configured to manage the Xen hypervisor and Manager Client B may include software configured to manage the vSphere, VMware Workstation, Hyper-V, Xen and KVM hypervisors. This software is optionally prior art software each configured to manage one specific brand of hypervisor. In these cases, the management logic configured to communicate using a particular hypervisor protocol compatible with the hypervisor being managed. In some embodiments, more than one type of management software is disposed on a single member of Manager Servers . Manager Clients  are optional in embodiments in which a user enters commands directly into one or more of Management Servers .","A hypervisor protocol includes a set of virtual machine commands that can be used in one or more syntax. A hypervisor protocol is also characterized by a command space. A command space represents the functionality of all the commands in the hypervisor protocol. Two different hypervisor protocols may have different sets of commands but the same command space if their commands are capable of being mapped on a 1-to-1 basis in terms of their functionality. This can occur when commands differ merely in their names, but not their syntax and\/or operation. Hypervisor protocols have different command spaces when the functionality of their commands cannot be mapped on a 1-to-1 basis. A virtual machine command is a command to a hypervisor, the command being configured to control a hypervisor and a state of or operation of a virtual machine supported by the hypervisor. For example, virtual machine commands may be configured to create virtual machines, save virtual machine states, dismount virtual machines, move virtual machines, allocate resources to a virtual machine, power virtual machines on and off, power hypervisors on and off, allocate hypervisor resources, hypervisor configuration, and\/or the like. Virtual machine commands can also operate on groups of hypervisors or virtual machines disposed on different computing devices (hardware). Examples include, virtual machine migration, automatic fault tolerance, resource scheduling, andautomatic positioning,","The system of  further includes a plurality of Computer Systems , individually labeled A, B, etc. Computer Systems  each include a hypervisor configured to support a plurality of virtual machines on the individual member of Computer Systems . Computer Systems  each include a server blade, a member of a cloud computing network, and\/or the like. Computer Systems  are connected to one or more of Managements Servers  via a communication network, such as the internet.","Members of Computer Systems  can include different or the same hypervisors. For example, different members of Computer Systems  can include any mixture of the VMware vSphere, Microsoft Hyper-V, Citrix Xen or Red Hat KVM hypervisors, or other hypervisor. Each of the hypervisors included on Computer Systems  are typically configured to receive commands according to their own specific hypervisor protocol. The different hypervisors may have their own, different, command spaces.","In various embodiments the hypervisor management logic executing on Management Server A may be configured to use the hypervisor protocols used by the hypervisor of none of Computer Systems , used by Computer System A but not B-C, used by Computer Systems A and B but not C and D, or used by Computer Systems A-C but not D.","The system of  further includes a Transform Server . Transform Server  includes a central processing unit (not shown), a Transformation Engine  and an optional Storage . Transformation Engine  is configured to process a virtual machine command sent from one of Management Servers  to one or more of Computer Systems . Transformation Engine  is further configured to process virtual machine commands whose execution is dependent on a state of one or more of Computer Systems . This state is typically represented by virtual machine data stored on the respective member of Computer Systems . For example, a command intended to reconfigure the hardware virtualized by a virtual machine can require the use of data representative of a current configuration of the virtual machine, also, adding additional virtual resources to a hypervisor can require data representative of the hypervisor configuration.","States on which the execution of virtual machine commands are dependent can include the states of one or more members of Computer Systems  as well as the states of virtual machines executing on the one or more members of Computer Systems . For example, a command to move a virtual machine between two members of Computer Systems  may be dependent on the identity of applications running within the virtual machine and what resources are already allocated on the destination Computer System .","When processing of a command is dependent on virtual machine data, the functionality of the command can be dependent on the virtual machine data. As such, commands whose processing is dependent on virtual machine data cannot simply be mapped from one command set to another. The virtual machine data must be used to determine the functionality of the command. Only after this functionality is determined can the command be transformed from a command space of one hypervisor protocol to the command space of another hypervisor protocol. Transformation Engine  is configured to do more than merely translate a command from the command set of one hypervisor to the command set of another hypervisor, Transformation Engine  is configured to transform a command based on virtual machine data such that the functionality of the command is properly represented in the result.","In some embodiments, Transformation Engine  is configured to process commands that are members of different hypervisor protocols. For example, Transform Agent A may be configured to redirect virtual machine commands received using a first virtual machine protocol to Transformation Engine  while Transform Agent B is configured to redirect virtual machine commands received using a second virtual machine protocol. In embodiments wherein both Transform Agent A and Transform Agent B both forward the virtual machine commands directly to Transformation Engine , Transformation Engine  is configured to receive commands of two different virtual machine protocols, and optionally of two different command spaces. As such, Transformation Engine  is configured to receive commands in a command space that is at least a union of the command spaces of the two virtual machine protocols that the Transform Agents A and B are configured to receive.","Storage  is configured to store the virtual machine data used in processing virtual machine commands. Storage  is typically, non-volatile storage such as a hard drive, flash memory, magnetic memory, optical memory, and\/or the like. Typically, the virtual machine data stored in Storage  includes copies of virtual machine data stored on members of Computer Systems . For example, in some embodiments, Storage  includes a copy of virtual machine data stored on Computer System A, a copy of virtual machine data stored on Computer System B and\/or a copy of virtual machine data stored on Computer System C. Storage  is optional in embodiments wherein Transformation Engine  is configured to read and write data directly from members of Computer Systems . Virtual machine data copied from different members of Computer Systems  is optionally stored on different parts of Storage , respectively.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 7","b":["715","715","715","715","535","715","535","715","535"]},"In some embodiments, Transform Agent A is configured to redirect commands received from Management Sever A and Transform Agent B is configured to redirect commands received from Management Server B. Parts of Transform Agents A and B are optionally included in the same logic. Communications from Transform Agents A or B typically include an identifier and\/or address of the specific member of Transform Agents  from which the communication is sent.","In some embodiments, Transform Agents  are configured to redirect all received virtual machine commands to Transformation Engine . In other embodiments, Transform Agents  are configured to determine whether or not processing of a received virtual machine command is dependent on virtual machine data stored on the associated member of Computer Systems . For example, Transform Agent A may be configured to determine if processing of a received virtual machine command is dependent on virtual machine data stored in a Storage . Storage  includes a non-volatile storage such as those discussed elsewhere herein.","In some embodiments, Transform Agent A is configured to determine whether or not processing of a command received from Management Server A is dependent on the virtual machine data stored in Storage . If the command is dependent on this data, then Transform Agent A is configured to redirect the command to Transformation Engine . If the command is not dependent on the virtual machine data, then Transform Agent A is configured to translate the command from the command space of one hypervisor to the command space of another hypervisor. Because processing of the command is not dependent on the virtual machine data, the translation can be performed by a direct mapping of the command from one command space to another, while still maintaining functionality of the command. This translation optionally occurs on Computer System B.","In one example, Management Server  is configured to send virtual machine command to Computer System B, this command is in a command space of a first hypervisor for which Management Server A is configured to manage. Transform Agent  is configured to intercept this command and determine if virtual machine data is required to determine functionality of the command. If the virtual machine data is required then the command is redirected from Transform Agent A to Transformation Engine . If the virtual machine data is not required then Transform Agent  is configured to translate the command to the command space of a hypervisor executing on Computer System A, e.g., a hypervisor VMM . The translated command is then communicated to VMM  for execution.","Prior to redirecting commands to Transformation Engine , Transform Agent A is optionally configured to translate the commands to a generic hypervisor protocol. The generic hypervisor protocol is typically a union of the plurality of commands in hypervisor protocols used by the hypervisors disposed on Computer Systems . As such, the generic hypervisor protocol includes at least one command representative of each of the virtual machine data dependent, commands that the Transform Agents  can be expected to receive from Management Servers . The command space of the generic hypervisor protocol is, likewise, a union of the command spaces of the hypervisor protocols used by Management Servers  and\/or Computer Systems .","Transform Server  is configured to synchronize the virtual machine data stored in Storage  with that stored in Storage . When a data dependent command is processed on Transform Server , any resulting change in the data is stored in both Storage  and Storage . Transform Server  is optionally further configured to synchronize virtual machine data stored in Storage  and\/or Storage  with a master copy of the virtual machine data stored in a remote location, such as a database DBMS .","In some embodiments, Transformation Engine  is configured to transform virtual machine metadata in addition to virtual machine commands. Virtual machine metadata is data that characterizes virtual machine data. For example, virtual machine metadata can include information about data format and\/or data types. Like virtual machine commands, the interpretation of virtual machine metadata can be dependent on the state of a virtual machine. Some metadata operations, therefore, require consideration of virtual machine state and virtual machine data. Virtual machine metadata may, for example, characterize a format in which virtual switch configuration data is expected. How this format is expressed can depend on whether there are any virtual switches defined between virtual machines on Computer System B.","As with virtual machine commands, Management Servers A and B are optionally configured to handle virtual machine metadata according to specific hypervisor protocols. This virtual machine metadata is optionally stored on one or more static storage of Management Servers . In one example, Management Server A is configured to store virtual machine metadata according to a first hypervisor protocol and Management Server B is configured to store virtual machine metadata according to a second hypervisor protocol (optionally having a different command space). The virtual machine metadata, even though expressed in a different protocol, may represent the same hypervisor installed on the same device, e.g., VMM  on Computer System . There can, therefore, be more than one set of virtual machine metadata, in different protocols, that represent the same hypervisor.","If virtual machine metadata representing VMM  is modified, using for example Management Server A, then it is desirable to update\/synchronize any other virtual machine data that may be stored by other Management Servers  and also represent VMM . For example, if Management Server A and Management Server B both store virtual machine metadata characterizing VMM, then it is desirable to keep this characterization synchronized.","The synchronization is optionally performed using Transformation Engine . For example, in some embodiments, Transformation Engine  is configured to receive first virtual machine metadata modified using Management Server A and sent to Computer System B. At Computer System B the modified virtual machine data is redirected to Transform Server  by Transform Agent A. Transform Agent A is optionally configured to first analyze whether or not conversion of the virtual machine metadata from the first protocol (of Management Server A) to the second protocol (of Management Server B) is dependent on the actual virtual machine data that is characterized by the metadata. At Transform Server  the virtual machine metadata is transformed from the first to the second protocols using Transformation Engine  based on virtual machine data stored in Storage  and\/or Storage . The transformed virtual machine metadata is then sent from Transform Server  to Management Server B, optionally via Transform Agent B.","Using the above process, virtual machine metadata can be kept synchronized on two or more Management Servers . In some embodiments different versions of virtual machine metadata that characterizes the same hypervisor using different protocols are stored on DBMS . Synchronization is optionally performed in real-time and\/or using data locking techniques that prevent the data from being improperly manipulated by two different members of Management Servers  at the same time. For example, Transform Agent A is optionally configured to communicate the virtual machine metadata to the Transform Server  in real-time, and the Transformation Engine  is optionally configured to transform the virtual machine metadata between hypervisor protocols in real-time. Transformation Engine  is optionally configured to transform the virtual machine metadata to a plurality of protocols.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 8"},"In a Receive Step , a virtual machine command is received by Transform Agent A from Management Sever A. The received command is in a first hypervisor protocol. The received command is directed at Computer System  and is configured to manage a hypervisor.","In a Determine Step , Transform Agent A is used to determine whether or not the functionality and\/or processing of the command is dependent on virtual machine data stored in Storage . If the functionality is not dependent, then the method precedes though Steps -. If the functionality is dependent, then the method precedes through Steps -. The determination is optionally based on a table of commands that that lists which commands are dependent and which are not.","In a Convert Command Step , the command is translated from the hypervisor protocol of Management Sever  to the hypervisor protocol of VMM .","In an Apply Step , the translated command is applied to VMM . If virtual machine data is changed as a result of the command, then in an optional Update Data Step , the virtual machine data stored at Storage  and\/or  is updated accordingly.","In an optional Convert Command Step , the virtual machine command received in Receive Step  is translated to a command of generic virtual machine protocol. The command space of the generic virtual machine protocol is typically at least a union of the command space of all virtual machine data dependent commands that can be expected to be received from Management Servers  included in the system.","In a Communicate Step , the command, translated or not, is communicated from Transform Agent A to Transformation Engine . In a Process Step  the command processed by Transformation Engine  using the virtual machine data on which its functionality depends. In some embodiments, Process Step  uses a copy of the virtual machine data stored on Storage . In other embodiments, Process Step  uses the virtual machine data stored on Storage  and\/or DBMS . Communicate Step  typically includes communicating the command over a computer network such as the internet.","In an optional Convert Result Step , the results of the processing are optionally converted back to the command protocol of Management Server A. For example, the processing of the command may result in communication back to Management Server . In Convert Result Step  this communication is converted to the proper command protocol for receipt by Management Sever A. In various embodiments, converted or not, the result of the processing is communicated to VMM .","In an optional Update Data Step , virtual machine data stored at Storage , Storage  and\/or DBMS  is updated as a result of the processing of the command.","Several embodiments are specifically illustrated and\/or described herein. However, it will be appreciated that modifications and variations are covered by the above teachings and within the scope of the appended claims without departing from the spirit and intended scope thereof. For example all or part of the Transformation Engine  may be embedded in the transform agent; or all or part of the transform agent may be embedded in the transform server. In some embodiments, a combination of network level proxies and\/or Ethernet aliases are configured to make one or more of management servers  believe they are communicating directly with computer systems  when all commands are, in fact, being handled by Transform Server . Implementation specific architecture is dependent on the precise environment such as network bandwidth and processing power of each of the corresponding computer systems. More than one of Transform Agents  are optionally disposed in a single logical","The embodiments discussed herein are illustrative of the present invention. As these embodiments of the present invention are described with reference to illustrations, various modifications or adaptations of the methods and or specific structures described may become apparent to those skilled in the art. All such modifications, adaptations, or variations that rely upon the teachings of the present invention, and through which these teachings have advanced the art, are considered to be within the spirit and scope of the present invention. Hence, these descriptions and drawings should not be considered in a limiting sense, as it is understood that the present invention is in no way limited to only the embodiments illustrated."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2","b":"120"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
