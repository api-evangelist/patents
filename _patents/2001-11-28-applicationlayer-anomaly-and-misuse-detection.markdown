---
title: Application-layer anomaly and misuse detection
abstract: A method includes passing a request for data received by a first server process executing in a first server to a detection process that includes packing a subset of the data into an analysis format and passing the subset to an analysis process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07143444&OS=07143444&RS=07143444
owner: SRI International
number: 07143444
owner_city: Menlo Park
owner_country: US
publication_date: 20011128
---

{"@attributes":{"id":"description"},"GOVINT":[{},{}],"heading":["REFERENCE TO GOVERNMENT FUNDING","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION "],"p":["This invention was made with Government support under Contract Numbers F30602-98-C-0059 and F30602-99-C-0149, both contract awarded by DARPA. The Government has certain rights in this invention.","This invention relates to application-layer anomaly and misuse detection.","Intrusion detection is a type of security management system for computers and networks. An intrusion detection system (IDS) gathers and analyzes information from various areas within a computer or a network to identify possible security breaches, which include both intrusions (attacks from outside the organization) and misuse (attacks from within the organization). Intrusion detection typically uses vulnerability assessment (sometimes referred to as scanning), which is a technology developed to assess the security of a computer system or network. Intrusion detection functions include: monitoring and analyzing both user and system activities; analyzing system configurations and vulnerabilities; assessing system and file integrity; ability to recognize patterns typical of attacks; analysis of abnormal activity patterns; and tracking user policy violations.","In an aspect, the invention features a method including in a server, hosting an intrusion detection process that provides intrusion detection services and integrating the intrusion detection process with a server process.","Embodiments may have one or more of the following. Integrating may include defining global application programmer interface (API) structures in the intrusion detection process to establish a connection to an application programmer interface (API) of the server process.","The method may also include passing a request for data received by the server to the intrusion detection process.","The intrusion detection process may include packing a subset of the data into an analysis format and passing the subset to an analysis process. The method may also include analyzing the subset in the analysis process. The server may be a web server such as an Apache web server.","The analysis process may reside in the web server or outside of the web server.","Passing may also include delivering the subset in a funneling process via a socket. The funneling process may include accepting incoming connections to which the subset can be transmitting and passing the subset to outgoing connections.","In another aspect, the invention features a method including passing a request for data received by a first server process executing in a first server to a detection process that includes packing a subset of the data into an analysis format and passing the subset to an analysis process.","Embodiments may include one or more of the following. The method may further include analyzing the subset in the analysis process.","Passing may include passing control from the first server through an Application Programming Interface (API) of the first server program. The first server may be a web server. The detection process may reside in the first server. The analysis process may reside in the first server or in a second server.","The analysis format may be an Emerald format and the analysis process may be an Emerald expert analysis process.","The web server may be an Apache web server.","Passing may further include receiving the subset in a piped logs interface of the Apache web server and delivering the subset to a funneling process via a socket.","The funneling process may include accepting incoming connections to which the subset can be transmitted and passing the subset to outgoing connections. The funneling process may further include duplicating the subset for delivery to a second analysis process.","In another aspect, a system includes a web server process having an application programming interface (API) and an intrusion detection process linked to the API.","Embodiments may include one or more of the following. The system may include a link to an external system having an analysis process.","The intrusion detection process may include receiving a request for data, packing a subset of the data into a common analysis format, passing the subset to the analysis process, and analyzing the subset in the analysis process.","The web server process may be an Apache web server process.","The common analysis format may be an Emerald format and the analysis process may be an Emerald analysis process.","Embodiments of the invention may have one or more of the following advantages.","Being part of the application, the application-integrated intrusion detection process can access local variables that are never written to a log file, including intermediate results when interpreting requests.","The Application-integrated intrusion detection process can monitor how long it takes to execute a request, and detect possible denial-of-service (DoS) attacks.","In a Web server, the Application-integrated intrusion detection process can see an entire server request, including headers. The Application-integrated intrusion detection process knows which file within the local file system the request was mapped to, and even without parsing the configuration file of the Web server, the it can determine if this program will be handled as a CGI script.","The Application-integrated intrusion detection process generates fewer false alarms, as it does not have to guess the interpretation and outcomes of malicious requests.","The Application-integrated intrusion detection process is not hampered by encryption since it has access to the de-crypted data from the application.","Network speed is not an issue since the Application-integrated intrusion detection process is part of the application and takes part in the normal cycle when analyzing requests. Thus, the limiting factor is the application speed rather than the network speed.","The Application-integrated intrusion detection process may be pre-emptive. By being part of the application, the Application-integrated intrusion detection process supervises all steps of the request handling cycle and can react at any time.","In the context of HTTP traffic, a session is defined as a single transaction including a request and a response. As the Application-integrated intrusion detection process is part of the application, it automatically gets information about sessions.","Other features and advantages of the invention will be apparent from the description and drawings, and from the claims.","Referring to , an intrusion detection network  includes user systems ,  and . Each of the user systems ,  and  is connected to a network of computers such as the Internet . A server system  and  are linked to the Internet . An example server system is a web server such as an Apache web server (see www. apache.org). In general, the servers  and  each execute a computer program that provides services to other computer programs in the same or other computers, such as user systems ,  and . In a client\/server programming model, each of the server systems  and  executes a program that awaits and fulfills requests from client programs in the same or other computers, such as the user systems ,  and . Fulfillment of a request is generally referred to as a response.","In the World Wide Web (\u201cWeb\u201d), servers  and  are referred to as Web servers. The Web server uses the client\/server model and the Web's Hypertext Transfer Protocol (HTTP) to serve files that form Web pages to Web users on user systems ,  and . Those user systems ,  and  contain HTTP clients that forward the requests to the servers. Popular Web servers are, for example, Microsoft's Internet Information Server (IIS), which comes with the Windows NT server; Netscape FastTrack and Enterprise servers; and Apache, a Web server for UNIX-based operating systems. Other example Web servers include Novell's Web Server for users of its NetWare operating system, and IBM's family of Lotus Domino servers.","In the case of an Apache Web server, the Web server program is Apache web server software. Apache web server software is a freely available Web server computer program that is distributed under an \u201copen source\u201d license. For example, Version 2.0 runs on most UNIX-based operating systems (such as Linux, Solaris, Digital UNIX, and AIX), on other UNIX\/POSIX-derived systems (such as Rhapsody, BeOS, and BS2000\/OSD), on AmigaOS, and on Windows 2000 from Microsoft.","Referring to , and using an Apache Web server as an example, the server system  includes a computer . The computer  is linked to the Internet  using TCP\/IP (Transmission Control Protocol\/Internet Protocol) or another suitable protocol. Computer  contains a processor  and a memory . Memory  stores an operating system (\u201cOS\u201d) , a TCP\/IP protocol stack  for communicating over network , machine-executable instructions executed by processor  to perform the Apache web server process , and machine-executable instructions to perform an application-integrated intrusion detection process . Computer  may also include an input\/output (I\/O) device  for display of a graphical user interface (GUI)  to a user .","The Apache web server process  includes an API (application programmer interface) . In general, an API is a specific method prescribed for one application program by which a programmer writing another application program can make requests of the application having the API. Specifically, the Apache API  allows third-party programmers to add new Apache web server functionality. The application-integrated intrusion detection process  utilizes the Apache API . As is described below, using the Apache API  the application-integrated intrusion detection process  integrates intrusion detection at the application layer, e.g., with the web server process . Being part of the web server application process provides the application intrusion detection process  access local variables that are never written to by a log file, including intermediate results when interpreting results. Further, process  can monitor how long at takes to execute a request and detect possible Denial-of-Service (DOS) attacks.","Referring now to , the application-integrated intrusion detection process  is integrated to the web server process  and includes a data collection process  that interfaces with the Apache API  of the web server process  and an internal library store . The data collection process  feeds an auxiliary communication process , which is linked to a funneling process . The funneling process  is linked to an analysis engine .","In operation, the web server process  passes control through the API  to the data collection process  of the application-integrated intrusion detection process  in a logging phase ( of  below) of an Apache request processing loop. Apache breaks down request handling into a set of phases, which are executed successively for each incoming request. A module can choose to handle any of these phases. When one writes a module for the Apache web server, one defines global API structures in source code that establish a connection to the server code during linking, thus integrating the module with the web server process. In these structures one can define configuration directives, which can be used in a configuration file of the server to customize the module, and a handler function for each phase (also called hooks) of the request processing.","Apache phases are handled by looking at each of a succession of modules, looking to see if each of them has a handler for the phase, and attempting invoking it if so. The handler can typically do one of three things: handle the request, and indicate that it has done so by returning the magic constant OK; decline to handle the request, by returning the magic integer constant DECLINED. In this case, the server behaves in all respects as if the handler simply hadn't been there; or signal an error, by returning one of the HTTP error codes. This terminates normal handling of the request, although an ErrorDocument may be invoked to try to mop up, and it will be logged in any case.","Most phases are terminated by the first module that handles them; however, for logging, \u2018fixups\u2019, and non-access authentication checking, all handlers always run (barring an error). Also, a response phase is unique in that modules may declare multiple handlers for it, via a dispatch table keyed on the MIME type of the requested object. Modules may declare a response-phase handler that can handle any request, by giving it the key *\/* (i.e., a wildcard MIME type specification). However, wildcard handlers are only invoked if the server has already tried and failed to find a more specific response handler for the MIME type of the requested object (either none existed, or they all declined).","At this point, we need to explain the structure of a module. A CGI module is one example module. The Common Gateway Interface (CGI) is a standard way for a Web server to pass a Web user's request to an application program and to receive data back to forward to the user. When the user requests a Web page (for example, by clicking on a highlighted word or entering a Web site address), the server sends back the requested page. However, when a user fills out a form on a Web page and sends it in, it usually needs to be processed by an application program. The Web server typically passes the form information to a small application program that processes the data and may send back a confirmation message. This method or convention for passing data back and forth between the server and the application is called the Common Gateway Interface (CGI). It is part of the Web's Hypertext Transfer Protocol (HTTP).","The CGI module handles both CGI scripts and the ScriptAlias config file command. It's actually a great deal more complicated than most modules, but if we're going to have only one example, it might as well be the one with its fingers in every place.","Let's begin with handlers. In order to handle the CGI scripts, the module declares a response handler for them. Because of ScriptAlias, it also has handlers for the name translation phase (to recognize ScriptAliased URIs), the type-checking phase (any ScriptAliased request is typed as a CGI script).","The module needs to maintain some per (virtual) server information, namely, the ScriptAliases in effect; the module structure therefore contains pointers to a functions which builds these structures, and to another which combines two of them (in case the main server and a virtual server both have ScriptAliases declared).","Finally, this module contains code to handle the ScriptAlias command itself. This particular module only declares one command, but there could be more, so modules have command tables that declare their commands, and describe where they are permitted, and how they are to be invoked.","A final note on the declared types of the arguments of some of these commands: a pool is a pointer to a resource pool structure; these are used by the server to keep track of the memory which has been allocated, files opened, etc., either to service a particular request, or to handle the process of configuring itself. That way, when the request is over (or, for the configuration pool, when the server is restarting), the memory can be freed, and the files closed, en masse, without anyone having to write explicit code to track them all down and dispose of them. Also, a cmd_parms structure contains various information about the config file being read, and other status information, which is sometimes of use to the function which processes a config-file command (such as ScriptAlias). With no further ado, the module itself:",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003\/* Declarations of handlers. *\/"]},{"entry":[{},"\u2003\u2003int translate_scriptalias (request_rec *);"]},{"entry":[{},"\u2003\u2003int type_scriptalias (request_rec *);"]},{"entry":[{},"\u2003\u2003int cgi_handler (request_rec *);"]},{"entry":[{},"\u2003\u2003\/* Subsidiary dispatch table for response-phase handlers,"]},{"entry":[{},"by MIME type *\/"]},{"entry":[{},"\u2003\u2003handler_rec cgi_handlers [ ] = {"]},{"entry":[{},"\u2003\u2003{ \u201capplication\/x-httpd-cgi\u201d, cgi_handler },"]},{"entry":[{},"\u2003\u2003{ NULL }"]},{"entry":[{},"\u2003\u2003};"]},{"entry":[{},"\u2003\u2003\/* Declarations of routines to manipulate the module's"]},{"entry":[{},"configuration"]},{"entry":[{},"\u2003\u2003\u2002\u2009\u2009* info. Note that these are returned, and passed in, as"]},{"entry":[{},"void *'s;"]},{"entry":[{},"\u2003\u2003\u2002\u2009\u2009* the server core keeps track of them, but it doesn't, and"]},{"entry":[{},"can't,"]},{"entry":[{},"\u2003\u2003\u2002\u2009\u2009* know their internal structure."]},{"entry":[{},"\u2003\u2003*\/"]},{"entry":[{},"\u2003\u2003void *make_cgi_server_config (pool *);"]},{"entry":[{},"\u2003\u2003void *merge_cgi_server_config (pool *, void *, void *);"]},{"entry":[{},"\u2003\u2003\/* Declarations of routines to handle config_file commands"]},{"entry":[{},"*\/"]},{"entry":[{},"\u2003\u2003extern char *script_alias (cmd_parms *, void"]},{"entry":[{},"*per_dir_config, char *fake,char *real);"]},{"entry":[{},"\u2003\u2003command_rec cgi_cmds[ ] = {"]},{"entry":[{},"\u2003\u2003{ \u201cScriptAlias\u201d, script_alias, NULL, RSRC_CONF, TAKE2,"]},{"entry":[{},"\u2003\u2003\u2003\u201ca fakename and a realname\u201d},"]},{"entry":[{},"\u2003\u2003{ NULL }"]},{"entry":[{},"\u2003\u2003};"]},{"entry":[{},"\u2003\u2003module cgi_module = {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"STANDARD_MODULE_STUFF,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"NULL,","\/* initializer *\/"]},{"entry":[{},"NULL,","\/* dir config creator *\/"]},{"entry":[{},"NULL,","\/* dir merger \u2212\u2212\u2212 default is"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"to override *\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"make_cgi_server_config,","\/* server config *\/"]},{"entry":[{},"merge_cgi_server_config,","\/* merge server config *\/"]},{"entry":[{},"cgi_cmds,","\/* command table *\/"]},{"entry":[{},"cgi_handlers,","\/* handlers *\/"]},{"entry":[{},"translate_scriptalias,","\/* filename translation *\/"]},{"entry":[{},"NULL,","\/* check_user_id *\/"]},{"entry":[{},"NULL,","\/* check auth *\/"]},{"entry":[{},"NULL,","\/* check access *\/"]},{"entry":[{},"type_scriptalias,","\/* type_checker *\/"]},{"entry":[{},"NULL,","\/* fixups *\/"]},{"entry":[{},"NULL,","\/* logger *\/"]},{"entry":[{},"NULL","\/* header parser *\/"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\u2003};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The sole argument to handlers is a requestrec structure. This structure describes a particular request that has been made to the server, on behalf of a client. In most cases, each connection to the client generates only one request_rec structure.","Referring to , an Apache request processing loop  is shown. A main transaction path is shown as a solid line while a path taken when a handler returns an error is shown with dashed lines. The request processing loop  is divided into ten phases. If no handler is registered for a phase or every handler declines the request, a default handler in the server core is called.","In a post-read-request phase , handlers get called before actual processing of the request starts. A proxy module for example uses this hook to identify proxy requests and to prevent other modules from processing it. In a URL translation phase  the file or script is determined to which the current request refers. In a header parser phase  the HTTP header information is parsed and stored in the internal data structures to make them available to the following phases.","In an access control phase , a module can check if the client is allowed to access the requested document. In an authentication phase , if an authentication is necessary for the requested document, a module can ask for user name and password in this phase.","In an authorization phase , if an authentication has been performed, a module can check if it was valid. In a MIME-type-checking phase  a preliminary guess of the requested document's MIME type is determined. The decision may be based on the document's file extension, the name of its file, or the document's location in the document tree. A fixups phase  may, for example, be used to generate additional HTTP header lines for the response. In a response phase , the response handler (content handler) may adjust the HTTP response header and the MIME type to suit its needs and will provide the data that is sent to the client. In a logging phase , the processed request is logged.","Referring again to , the data collection process  takes relevant data of the request and packs it into a format that the analysis engine  can understand.","Being integrated with the web server process , relevant data may include local variables that are never written to a log file, including intermediate results when interpreting requests. It may also include how long it takes to execute a request and detect possible denial-of-service (DoS) attacks. Relevant data may also include data involving the entire request, including headers. For example, relevant data may identify the file within the local file system that the request is mapped to and may include a determination whether the program will be handled as a CGI (common gateway interface).","The common format may be an Emerald format as designed by SRI International, Inc. of Palo Alto, Calif., and incorporated by reference herein (see www.sri.com).","An exemplary Emerald input record format is:",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ptype[bsm_event"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"human_time:","string,","\u2018Header timestamp as a string."]},{"entry":[{},"header_event_type:","int,","\u2018Header event numerical ID"]},{"entry":[{},"header_time:","int,","\u2018Header time as a numeric value."]},{"entry":[{},"header_command:","string,","\u2018Header event ID as a string"]},{"entry":[{},{},{},"(event name)"]},{"entry":[{},"header_size:","int,","\u2018Header byte count"]},{"entry":[{},"msequenceNumber:","int,","\u2018Sequence token number"]},{"entry":[{},"path_List:","string,","\u2018Paths from one or several path"]},{"entry":[{},{},{},"tokens"]},{"entry":[{},"subject_auid:","int,","\u2018Subject audit ID"]},{"entry":[{},"subject_euid:","int,","\u2018Subject effective user ID"]},{"entry":[{},"subject_ruid:","int,","\u2018Subject real user ID"]},{"entry":[{},"subject_pid:","int,","\u2018Subject process ID"]},{"entry":[{},"subject_sid:","int,","\u2018Subject audit session ID"]},{"entry":[{},"subject_machine_ID:","string,","\u2018Subject machine ID"]},{"entry":[{},"in_addr_address:","string,","\u2018In_addr Internet address"]},{"entry":[{},"in_addr_hostname:","string,","\u2018In_addr Internet hostname"]},{"entry":[{},"attr_uidList:","int,","\u2018Attribute owner UID"]},{"entry":[{},"val_List:","int,","\u2018Argument value"]},{"entry":[{},"return_return_value:","int,","\u2018Return process value"]},{"entry":[{},"return_error_number:","int,","\u2018Return process error"]},{"entry":[{},"textList:","string,","\u2018Text strings from one or several"]},{"entry":[{},{},{},"text tokens"]},{"entry":[{},"exec_args:","string,","\u2018Exec arguments"]},{"entry":[{},"exec_env_txt:","string,","\u2018Exec environment"]},{"entry":[{},"sock1_sock_type:","int,","\u2018Socket type"]},{"entry":[{},"sock1_remote_port:","int,","\u2018Socket remote port"]},{"entry":[{},"sock1_remote_iaddr:","string,","\u2018Socket remote IP address"]},{"entry":[{},"sock1_local_port:","int,","\u2018Socket local port"]},{"entry":[{},"sock1_local_iaddr:","string,","\u2018Socket local IP address"]},{"entry":[{},"sock2_sock_type:","int,","\u2018Socket type for second socket"]},{"entry":[{},{},{},"token"]},{"entry":[{},"sock2_remote_port:","int,","\u2018Socket remote port for second"]},{"entry":[{},{},{},"socket token"]},{"entry":[{},"synthetic_parentCMD:","string,","\u2018Synthetic parent command"]},{"entry":[{},"synthetic_parentIP:","string,","\u2018Synthetic parent IP address"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"]"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"More specifically, the above format represents a Solaris BSM EMERALD template used to drive an eXpert-BSM analysis. These fields represent a subset of the available fields produced in the Solaris BSM audit record structure. Before analyzing audit records, eXpert-BSM's event preprocessing service, ebsmgen, first transforms the content of each audit record into an internal message structure. These messages include two important synthetic fields, called synthetic_parentCmd and synthetic_parentIP. Although audit records provide detailed information regarding each system call, they do not identify the command (process image name) under which the system call was invoked. The synthetic_parentcmd field tracks this important attribute by observing exec calls. Second, although Solaris audit records are structured to include information regarding source IP information for transactions not performed from the console, this information is unreliable across audit event types and OS versions. By tracking the source IP information and always reporting it in synthetic_parentIP, ebsmgen provides consistently correct IP information for all audit records.","The following represents an example BSM EMERALD Transaction.\n\n","Specifically, the above format illustrates an example in etd exec syscall record, which is initiating the FTP daemon. Each message is passed on from the preprocessor to the event handling interface of the expert system, where it is asserted as a fact according to a fact type definition known as a ptype in P-BEST.","An Emerald (Event Monitoring Enabling Responses to Anomalous Live Disturbances) environment is a distributed scalable tool suite for tracking malicious activity. Emerald is a highly distributed, building-block approach to network surveillance, attack isolation, and automated response. The approach uses highly distributed, independently tunable, surveillance and response monitors that are deployable polymorphically at various abstract layers in a large network. These monitors contribute to a streamlined event-analysis system that combines signature analysis with statistical profiling to provide localized real-time protection of the most widely used network services on the Internet.","Referring again to , through a reliable piped logs interface of Apache, the packed and formatted data is passed to the auxiliary communications process . The auxiliary communications process  hands the packed and formatted data to the funneling process  through a socket. Apache can be configured to generate logs in any format. In addition, on most Unix architectures, Apache can send log files to a pipe, allowing for log rotation, hit filtering, real-time splitting of multiple virtual hosts (vhosts) into separate logs, and asynchronous DNS resolving on the fly. The Apache reliable log interface sends the log information directly to a program. The term \u201creliable\u201d signifies that Apache does some checking on the opened channel, such as making sure the connection is still accepting data.","The funneling process  communicates with the analysis engine  that is typically located in an external host and not in the web server . The funneling process , in an Emerald framework, accepts incoming connections where Emerald messages can be transmitted, and passes the information to outgoing connections. The funneling process  can duplicate incoming information (having two different analysis engines for the same application) or multiplex several incoming flows into one outgoing connection (comparing the results of a network-based monitor with an application integrated module for discrepancies). The funneling process  takes into account problems that might appear in interprocess communication, such as lost connections or necessary buffering. An example analysis engine  is the Emerald expert from SRI International, Inc., incorporated by reference herein (see www.sri.com). The Emerald expert analysis engine is a highly targetable signature-analysis engine based on the expert system shell P-BEST (Production-Based Expert System Toolset). Under Emerald's expert architecture, event-stream-specific rule set are encapsulated within resource objects that are then instantiated within an Emerald monitor. The objects can then be distributed to an appropriate observation point in the computing environment. This enables a spectrum of configurations from lightweight distributed expert signature engines to heavy-duty centralized host-layer expert engines, such as those constructed for use in expert's predecessors, NIDES (Next-Generation Intrusion Detection Expert System), and MIDAS (Multics Intrusion Detection Alerting System). In a given environment, P-BEST-based experts may be independently distributed to analyze the activity of multiple network services (e.g., FTP, SMTP, HTTP) or network elements (e.g., a router or firewall). As each Emerald expert is deployed to its target, it is instantiated with an appropriate resource object (e.g., an FTP resource object for FTP monitoring), while the expert code base remains independent of the analysis target.","Referring to , the application-integrated intrusion detection process  includes receiving () control in a logging stage of a request cycle from a web server process. The process  extracts () relevant data of a request and packs () the relevant data in a common format. The process  passes () the packed data to an auxiliary process. The process  transfers () the packed data from the auxiliary process to a funneling process. The process  sends () the packed data from the funneling process to an analysis process.","A number of embodiments of the invention have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention. For example, the analysis process may reside within the first server. In other embodiments, the funneling process may replicate the subset and pass the replicated subsets to multiple analysis processes located at diverse positions throughout a network. Accordingly, other embodiments are within the scope of the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
