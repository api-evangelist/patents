---
title: Systems and methods of directory entry encodings
abstract: In general, the invention relates to supporting multiple different character encodings in the same file system. In one embodiment, a method is provided for filename lookup that supports multiple character encodings. The method comprises storing filename data in a first character encoding into an indexed data structure. The method further comprises receiving filename data in a second encoding. The method also comprises looking up filename data in the indexed data structure using the second encoding.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08060521&OS=08060521&RS=08060521
owner: EMC Corporation
number: 08060521
owner_city: Hopkinton
owner_country: US
publication_date: 20101115
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY INFORMATION","LIMITED COPYRIGHT AUTHORIZATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["This application is a continuation of and claims benefit of priority under 35 U.S.C. \u00a7120 to U.S. patent application Ser. No. 12\/794,492, filed Jun. 4, 2010, which is a continuation of U.S. patent application Ser. No. 12\/562,000, filed Sep. 17, 2009, now issued as U.S. Pat. No. 7,739,288 on Jun. 15, 2010, which is a continuation of U.S. patent application Ser. No. 11\/645,216, filed Dec. 22, 2006, now issued as U.S. Pat. No. 7,593,938 on Sep. 22, 2009, and entitled \u201cSystems and Methods of Directory Entry Encodings,\u201d all of which are hereby incorporated by reference in their entirety herein.","A portion of disclosure of this patent document includes material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyrights whatsoever.","The invention relates generally to directory entry encodings, and specifically, relates to supporting multiple different character encodings in the same file system.","The increase in the amount of data stored on digital computing systems has resulted in complex storage systems. One method for organizing data has been to store them in electronic files. These files are then grouped into directories with some directories including other directories and\/or files. Typically, files and directories are assigned unique identifiers within the file system. In most systems, files and directories are arranged in order to optimize the lookup of a unique identifier given the particular path or name of the file or directory.","In some circumstances, it may be desirable to provide a file system that may be accessed by client processes using multiple different character encodings. It can be problematic to provide a file system that supports access to filenames created with multiple different character encodings. Because of the foregoing challenges and limitations, there is a need to provide a file system that supports access to files named with multiple different character encodings.","The embodiments disclosed herein generally relate to providing a system that supports access to files named in multiple different character encodings. For purposes of this summary, certain aspects, advantages, and other features of the invention are described herein. It is to be understood that not necessarily all such advantages may be achieved in accordance with any particular embodiment of the invention. Thus, for example, those skilled in the art will recognize that the invention may be embodied or carried out in a manner that achieves one advantage or group of advantages as taught herein without necessarily achieving other advantages which may be taught or suggested herein.","In one embodiment, a system for filename lookup that supports multiple character encodings is provided. The system includes a module configured to store filename data in a first character encoding into an indexed data structure; to receive filename data in a second encoding; and to lookup filename data in the indexed data structure using the second encoding.","In another embodiment, a file system with filename lookup that supports multiple character encodings is provided. The file system includes an indexed data structure indexed by a value based on a first character encoding, said indexed data structure comprising a plurality of entries corresponding to respective filenames in the file system, said entries comprising an encoding tag identifying a respective second character encoding and a filename stored in the respective second character encoding.","In another embodiment, a method for filename lookup that supports multiple character encodings is provided. The method includes converting a filename from an encoding of a requester to a hashed value based on a standard encoding; navigating to entries within an indexed data structure that correspond to the hashed value; for the entries that correspond to the hashed value, comparing filename data stored in the entries to the filename; and determining the best match filename, if any, between the filenames stored in the entries and the filename.","These and other features will now be described with reference to the drawings summarized above. The drawings and the associated descriptions are provided to illustrate the embodiments of the invention and not to limit the scope of the invention. Throughout the drawings, reference numbers may be re-used to indicate correspondence between referenced elements. In addition, the first digit of each reference number generally indicates the figure in which the element first appears.","Systems and methods which represent one embodiment of an example application of the invention will now be described with reference to the drawings. Variations to the systems and methods which represent other embodiments will also be described. The present invention is not limited by the type of environment in which the systems and methods are used, however, and the systems and methods may be used in other environments, such as, for example, other file systems, virtual file systems, distributed systems, the Internet, the Worldwide Web, a private network for a hospital, a broadcast network for a government agency, and an internal network for a corporate enterprise, and intranet, a local area network (LAN), a wide area network (WAN), a wired network, a wireless network, and so forth. It is also recognized that in other embodiments, the systems and methods may be implemented as a single module and\/or implemented in conjunction with a variety of other modules and the like. Moreover, the specific implementations described herein are set forth in order to illustrate, and not to limit, the invention. The scope of the invention is defined by the claims.","Embodiments of a file system suitable for accommodating, as described herein, the methods and systems for supporting multiple different character encodings are disclosed in U.S. patent application Ser. No. 10\/007,003, titled, \u201cSYSTEMS AND METHODS FOR PROVIDING A DISTRIBUTED FILE SYSTEM UTILIZING METADATA TO TRACK INFORMATION ABOUT DATA STORED THROUGHOUT THE SYSTEM,\u201d filed Nov. 9, 2001 which claims priority to Application No. 60\/309,803 filed Aug. 3, 2001; U.S. Pat. No. 7,146,524 entitled \u201cSYSTEMS AND METHODS FOR PROVIDING A DISTRIBUTED FILE SYSTEM INCORPORATING A VIRTUAL HOT SPARE,\u201d filed Oct. 25, 2002, and issued on Dec. 5, 2006; and U.S. patent application Ser. No. 10\/714,326 entitled \u201cSYSTEMS AND METHODS FOR RESTRIPING FILES IN A DISTRIBUTED FILE SYSTEM,\u201d filed Nov. 14, 2003, which claims priority to Application No. 60\/426,464, filed Nov. 14, 2002, all of which are hereby incorporated herein by reference in their entirety.","I. Overview","When a file is stored on a computer system, the user typically assigns the file a name using a character set, also known as an encoding. One well-known character encoding is the American Standard Code for Information Interchange (\u201cASCII\u201d) encoding. ASCII characters are defined by a seven-bit binary number. Many file system users use character encodings beyond the normal seven-bit ASCII range. Over the years, many different methods have been developed to encode various languages. Although there have been attempts to standardize these encodings through Unicode, there remain for various technical, historical, and social reasons a very wide array of encoding standards still actively in use. Traditionally, most languages had one or more different character sets that were used on different operating systems, or simply by different customers, to represent characters important for that language. For example, in Japan, both the EUC-JP and SHIFT-JIS character sets are reasonably common. These character sets cover many of the same characters but use different byte representations for these characters. As one example, HIRAGANA letter KA is represented with the bytes [164 171] in EUC-JP, the bytes [130 169] in SHIFT-JIS, and the bytes [227 129 139] in the UTF-8 encoding of Unicode. Supporting multiple character encodings in a single file system can be problematic.","Although the embodiments herein are not specific to a distributed file system, the features of the described embodiments may be implemented in a distributed system. In general, a distributed file system includes one or more nodes. In one embodiment, a user of a client device is connected to a file system comprised of one or more physical nodes (for example, storage devices). In this embodiment, the data on each of the physical nodes is arranged according to inodes which store metadata corresponding to the respective files and directories within the file system. Typically, when a client device desires to access a specific file stored on the file system, the client device requests the file by its name and\/or some other mutable identifier. The system then performs a lookup in order to identify the inode that corresponds to the requested file.","As used herein, a file is a collection of data that, in some embodiments, is stored in one or more units and is related to a file identifier or a filename. A directory, similar to a file, is a collection of data that, in some embodiments, is stored in one or more units and is related to a directory identifier or a directory name. A directory, however, is a specialized collection of data relating to elements in a file system. In one embodiment, a file system is organized in a tree-like structure. Directories are organized like the branches of trees. Directories may begin with a root directory and\/or may include other branching directories. Files resemble the leaves or the fruit of the tree. Files, typically, do not include other elements of the file system, such as files and directories. In other words, files do not typically branch. However, in other embodiments, the files may branch.","The embodiments disclosed herein may be implemented using a file system that includes directories represented by a map data structure, and each map data structure may include ten, hundreds, or billions of entries. In some directory implementations, a B-tree based directory structure may improve directory lookup performance. B-tree based data structures allow the presence or absence of a filename in a directory to be determined by searching only a small portion of the entries in the directory. In particular, lookup in a B-tree based directory is O(log n) rather than O(n), where n is the number of entries in the directory.","In one embodiment, a tree-based directory may be indexed with a fixed-size hash of the filename. The hash is computed by a fixed mathematical operation over the bytes that make up the filename. In some file systems, the exact bytes of the filename may be stored in their respective tree entry. This may be problematic, however, for different file system users that are operating in environments using different conventions for encoding filenames. For example, the Windows operating system expects all filenames to be represented as Unicode strings. Unicode defines a set of mappings for how to interpret multi-byte values as corresponding to specific logical characters in most of the world's languages. On the other hand, many users of the Network File System (NFS) protocol work in environments which use different mapping tables to convert bytes to specific characters. As one example, many Japanese environments may for various reasons use a standard, such as EUC-JP, that is designed specifically to encode characters of interest when writing in Japanese. It is desirable to implement a directory structure that allows the lookup of names in one or more encodings used by customers of the file system. Furthermore, it is also desirable to implement a file system that allows a user accessing a file system with one encoding to be able to logically interpret filenames created by another user in a different encoding and access these files.","In one embodiment, a B-tree based encoding-preserving directory provides a file system with the support for multiple different character encodings. In some file systems, filenames are assumed to be in a certain encoding. In the illustrated embodiments, however, filenames are stored as submitted by the user, even though the encoding may be different. In one embodiment, the filenames are stored in the directory using the actual bytes provided by the client process, and the names are paired with respective numeric tags indicating the encoding used by the client. In one embodiment, this encoding tag is normally not visible to file system users and is generally inferred based on configurable settings for the particular access mechanism or client process (such as, for example, NFS, CIFS, FTP, HTTP, WebDAV and so forth) used to access the file system. In one embodiment, the name is converted from the accessor's encoding to Unicode, the converted name is regularized, and then the regularized version is hashed to generate a key for the B-tree. To lookup a name, the name being looked up is converted to Unicode, the converted name is regularized, the regularized name is hashed, and the resulting hash index is used to look for entries in the B-tree with the same hash value. If there is at least one corresponding entry, the names of the entries with that hash are converted to the encoding of the requesting client and string comparisons are performed with the client's filename. If there is a match, the lookup is a success. If there is no match, the lookup is a failure. Filenames and\/or directories may be created, opened, and listed using the lookup operation.","II. System Architecture",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["102","104","106","102","102","104","104","106"]},"In the illustrated embodiment, file system computer  comprises a processor , a storage device  for the file system data, and a multiple encoding module  and other file system modules . Storage device  comprises inodes  and B-trees . These data structures are components of the multiple encoding file system. In the illustrated embodiment, inodes  are metadata structures used to locate, monitor, and\/or manipulate files and directories within the file system. An inode is a data structure that describes a file or directory and may be stored in a variety of locations, including on long term storage and\/or in system memory. An in-memory inode may include a copy of data stored in long term storage plus additional data used by the system, including fields associated with the data structure. Although the illustrated embodiment describes a file system that includes inodes to locate, monitor, and\/or manipulate file and directory data within the file system, in other embodiments other data structures may be used. In some embodiments, files and directories may be located, monitored, and\/or manipulated without the use of data structures such as inodes.","In one embodiment, the storage device  also stores a mapping data structure for the inodes that corresponds to a directory in a file system. In the illustrated embodiment, the mapping data structure is implemented using a B-tree structure. Thus, data storage device  stores B-trees . It will be appreciated by one skilled in the art that other data structures may be used, such as, for example, B+trees, Patricia tries, red-black trees, and\/or flat-file directories. In some embodiments, the data structures are ordered data structures and, in other embodiment, the data structures are unordered. Furthermore, in some embodiments, the data structures support efficient lookup, such as O(log n) efficiency, and, in other embodiments, the data structures support less efficient lookup, such as O(n) efficiency. Different combinations of order and efficiency are also possible. Thus, the data structures may, for example, be ordered and support either efficient lookup or less efficient lookup. Moreover, the data structures may be unordered and support either efficient lookup or less efficient lookup. Some data structures may even be ordered in varying degrees and\/or support lookup in varying degrees of efficiencies. It will be appreciated by one skilled in the art that many suitable data structures may be used to embody features described herein.","Data structures are collections of associated data elements, such as a group or a set of variables or parameters. In one embodiment, a structure may be implemented as a C-language \u201cstruct.\u201d One skilled in the art will appreciate that many suitable data structures may be used.","In one embodiment, the file system computer  may be implemented using a variety of computer systems such as, for example, a computer, a server, a smart storage unit, a mobile telephone, a handheld device, an embedded device, and so forth. In one embodiment, the computer may be a general purpose computer using one or more microprocessors, such as, for example, a Pentium\u00ae processor, a Pentium\u00ae II processor, a Pentium\u00ae Pro processor, a Pentium\u00ae IV processor, a Pentium\u00ae D processor, a Pentium\u00ae Core\u2122 processor, an xx86 processor, an 8051 processor, a MIPS processor, a Power PC processor, a SPARC processor, an Alpha processor, and so forth. The computer may run a variety of operating systems that perform standard operating system functions such opening, reading, writing, and closing a file. It is recognized that other operating systems may be used, such as, for example, Microsoft\u00ae Windows\u00ae 3.X, Microsoft\u00ae Windows 98, Microsoft\u00ae Windows\u00ae 2000, Microsoft\u00ae Windows\u00ae NT, Microsoft\u00ae Windows\u00ae CE, Microsoft\u00ae Windows\u00ae ME, Microsoft\u00ae WindowsR XP, Palm Pilot OS, Apple\u00ae MacOS\u00ae, Disk Operating System (DOS), UNIX, IRIX, Solaris, SunOS, FreeBSD, Linux\u00ae, or IBM\u00ae OS\/2\u00ae operating systems.","File system modules include program instructions for operating and executing the file system. Multiple encoding module  includes the instructions relevant to supporting access to files named with multiple different character encodings. The other file system modules  include instructions for other functions of the file system. Although in the illustrated embodiment, there are multiple file system modules, in other embodiments there may be a single module, where the modules may be arranged in various suitable organizations. Furthermore, although in the illustrated embodiment, the file system modules are illustrated residing outside of data storage device . In other embodiments, one or more of the file system modules may be stored in whole or in part on data storage device  with the inodes  and B-trees .","In general, the word module, as used herein, refers to logic embodied in hardware or firmware, or to a collection of software instructions, possibly having entry and exit points, written in a programming language, such as, for example, C or C++. A software module may be compiled and linked into an executable program, installed in a dynamic link library, or may be written in an interpreted programming language such as, for example, BASIC, Perl, or Python. It will be appreciated that software modules may be callable from other modules or from themselves, and\/or may be invoked in response to detected events or interrupts. Software instructions may be embedded in firmware, such as an EPROM. It will be further appreciated that hardware modules may be comprised of connected logic units, such as gates and flip-flops, and\/or may be comprised of programmable units, such as programmable gate arrays or processors. The modules described herein are preferably implemented as software modules, but may be represented in hardware or firmware. Moreover, although in some embodiments a module may be separately compiled, in other embodiments a module may represent a subset of instructions of a separately compiled program, and may not have an interface available to other logical program units.","III. B-Tree Data Structures",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIGS. 2A","FIG. 2A"],"b":["2","2"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 2A","FIG. 2A"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2B","b":["230","232","242","232","232","230","232","232","232","232","232","230","232","230","230","232"],"i":["a ","b","c","d","e","c "]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 2C","b":["242","230","230","242","243","242","243"],"i":["a ","b"]},"There are six data elements  corresponding to the six leaf nodes . The data elements  comprise an encoding tag identifying the encoding of the process that requested or created the filename; a string of byte values corresponding to the native bytes of the requesting process; and a reference or address data for locating the file data associated with the respective filename. In one embodiment, the reference is a logical inode number (LIN), which identifies the inode corresponding to the respective filename.","The leaf node  identified by the index (or key) value of 1500,0 corresponds to the filename \u201c\u00e4\\\u201d. The data element for this filename includes information regarding this filename and its associated inode. First, the data element includes an identifier for the encoding of the process that created the file. For the filename \u201c\u00e4\\\u201d, the encoding of the requesting process is EUC-JP. Second, the data element also includes the original byte values of the filename when the file was created, as requested by the creating process. In other words, the file system stores the original bytes of the filename as requested by the user process. Although, as discussed in further detail below, the original byte values are converted by an algorithm for indexing the filenames in the file system, the filenames themselves are stored in their original form. Thus, the data element stores the byte values [143 171 163] and [92], which are the respective byte values for \u201c\u00e4\u201d and \u201c\\\u201d in the character encoding EUC-JP. Third, the data element stores a logical inode number (LIN), which is a unique identifier for the inode corresponding to the filename associated with the respective data element .","Thus, the respective data elements  store the following data. The data element corresponding to the index (or key) value 1500,1 includes an identifier indicating that the filename was created by a process using the UTF-8 character encoding; stores the byte values [97], [204 136], and [92], which represent respectively the characters \u201ca\u201d, \u201c\u2245\u201d, and \u201c\\\u201d in the UTF-8 character encoding; and stores the LIN . The data element corresponding to the index (or key) value 1500,2 includes an identifier indicating that the filename was created by a process using the Latin-1 character encoding; stores the byte values [228] and [165], which represent respectively the characters \u201c\u00e4\u201d, and \u201c\u00a5\u201d in the Latin-1 character encoding; and stores the LIN . The data element corresponding to the index (or key) value 1500,3 includes an identifier indicating that the filename was created by a process using the UTF-8 character encoding; stores the byte values [65], [204 136], and [92], which represent respectively the characters \u201cA\u201d, \u201c\u2245\u201d, and \u201c\\\u201d in the UTF-8 character encoding; and stores the LIN . The data element corresponding to the index (or key) value 1500,4 includes an identifier indicating that the filename was created by a process using the UTF-8 character encoding; stores the byte values [69] and [76], which represent respectively the characters \u201cE\u201d, and \u201cL\u201d in the UTF-8 character encoding; and stores the LIN . The data element corresponding to the index (or key) value 1500,5 includes an identifier indicating that the filename was created by a process using the EUC-JP character encoding; stores the byte values [97], [150], and [92], which represent respectively the characters \u201ca\u201d, \u201c[Invalid]\u201d and \u201c\\\u201d in the UTF-8 character encoding; and stores the LIN 687.","IV. Methods",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIGS. 3A","FIG. 3A"],"b":["3","3","302","160","304","160","306","160","308","160","160","310","160"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 3B","FIG. 4C"],"b":["332","160","334","160","334","160","160","160"]},"In state , the multiple encoding module  attempts to lookup the filename in the directory's B-tree. This operation is described in greater detail below with reference to . If, as determined in state , there is an entry corresponding to the file that sufficiently matches, then the multiple encoding module  returns the LIN (or other reference) of the file of the sufficiently exact match, in state . If there is no sufficient match, then the multiple encoding module  does not return a LIN (or other reference). In some embodiments, the multiple encoding module  may return a message indicating that no sufficiently exact match for the filename was found in the file system.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 3C","b":["360","160","361","160","362","370","160","364","366","368","364","160","366","160","160","368","160"]},"In other embodiments, untranslatable characters may be handled differently. For example, an escaping sequence (such as the ASCII string \u201c\\136\u201d) may be used, in some embodiments, to note characters in such a way that the escaping can be reversed. Additionally and\/or alternatively, a filename with an untranslatable character may be escaped, in some embodiments, in some arbitrary but unique manner. For example, a random filename may be returned and then remembered. Future lookup operations may check a table (such as a table of remembered, random filenames) in addition to the \u201creal\u201d entries. In some embodiments, the returned filename may be a combination of a hash\/collision value with a random string, which may allow for the normal lookup operation (by returning a hash\/collision value) while also avoiding the problem of name collision (by providing a random string).",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIGS. 4A","FIG. 4A","FIGS. 4B and 4C"],"b":["4","4","4","4","402","160","404","160","406","160","408","406","410","424","410","424","160","412","160","416","160","414"]},"If, as determined in state , the relevant entry matches the filename exactly, then the multiple encoding module  returns the relevant entry in state . If the relevant entry does not match the filename exactly, then the multiple encoding module  proceeds to state . If, as determined in state , an inexact match is wanted then the multiple encoding module  determines whether the relevant entry is a better match than in a previous entry(ies), and the multiple encoding module  remembers the best match, in state . If an inexact match is not wanted then the multiple encoding module  proceeds to the end of the operations repeated for the entry(ies) corresponding to the hash values. After the entry(ies) corresponding to the hash value have been evaluated, the multiple encoding module  determines whether an inexact match was found. If an inexact match was found, as determined in state , then the multiple encoding module  returns the best matching entry, in state . If no inexact match was found the multiple encoding module  returns a message indicating that no entry was found, in state .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4B","FIG. 4C"],"b":["432","160","160","160","434","160","436","160"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 4C","b":["438","160"]},"In state , these lowercase characters are converted to uppercase. Because a file system may have Unicode users (in particular, Windows users) that need to lookup filenames in a case insensitive manner\u2014for example, such that \u201ccat\u201d is the same as \u201cCAT\u201d\u2014lowercase characters are automatically converted to uppercase characters.","In state , certain special characters or character strings are normalized. Some character encodings permit a character to be represented by two characters combined together. For example, there is a Unicode character \u201c\u00e4\u201d, and this character may also be represented by the characters \u201ca\u201d and \u201c{umlaut over ( )}\u201d combined. In one embodiment, the multiple encoding module  may convert the combinable characters into a single character. Thus, the character string \u201ca\u201d and \u201c{umlaut over ( )}\u201d may be converted to \u201c\u00e4\u201d.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 4D","FIGS. 4A"],"b":["160","4","4"]},"In state , the multiple encoding module  performs the lookup described above with reference to , B, and C. If the filename is found, as determined in state , then the multiple encoding module  returns the matching entry, in state . If the filename is not found, then the multiple encoding module  determines whether an untranslatable character is present in the filename, in state . If there is no untranslatable character(s), then the multiple encoding module  returns no entry, in state . If there is an untranslatable character, then the multiple encoding module  performs, in state , a brute force search for the filename in the directory's indexed data structure. In the illustrated embodiment, the multiple encoding module traverses the leaf nodes , comparing the filenames in the respective data elements  with the requested filename. This operation is described in more detail below with reference to . If the filename is found, as determined in state , then the multiple encoding module  returns the matching entry. Otherwise, the multiple encoding module returns no entry, in state .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 4E","b":["160","482","496","482","496","160","484","160","488","160","486"]},"If, as determined in state , the relevant entry matches the filename exactly, then the multiple encoding module  returns the relevant entry in state . If the relevant entry does not match the filename exactly, then the multiple encoding module  proceeds to state . If, as determined in state , an inexact match is wanted then the multiple encoding module  determines whether the relevant entry is a better match than in a previous entry(ies), and the multiple encoding module  remembers the best match, in state . If an inexact match is not wanted then the multiple encoding module  proceeds to the end of the operations repeated for the entries in the directory. After the entries in the directory have been evaluated, the multiple encoding module  determines whether an inexact match was found, in state . If an inexact match was found, as determined in state , then the multiple encoding module  returns the entries of the best match, in state . If no inexact match was found the multiple encoding module  returns a message indicating that no entry was found, in state .","The following exemplary pseudo code further illustrates embodiments of some of the methods described above:",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/**"},{"entry":"* Make a string suitable for normalizing from a filename\/encoding"},{"entry":"*\/"},{"entry":"Regularize(filename, encoding)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If encoding is not UTF8"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"filenameout = filename converted to UTF8"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"filenameout = filename"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"For each utf-8 multibyte character in filenameout"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If character is in regularization set"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"replace character with character it maps to"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Perform Unicode normalization on filenameout"]},{"entry":[{},"Convert filenameout to upper case"]},{"entry":[{},"If filenameout contains the wildcard character"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return (filenameout, true)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return (filenameout, false)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"----------------------------------------------"},{"entry":"\/**"},{"entry":"* Hash a filename\/encoding"},{"entry":"*\/"},{"entry":"Hash(filename, encoding)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(hashstring, wildcard) = Regularize(filename, encoding)"]},{"entry":[{},"hash = output of hash algorithm on hashstring"]},{"entry":[{},"return (hash, wildcard)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"----------------------------------------------"},{"entry":"\/**"},{"entry":"* Perform a filesystem lookup"},{"entry":"*\/"},{"entry":"Lookup(dir, filename)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dowildcard = false"]},{"entry":[{},"bestdirent = NULL"]},{"entry":[{},"bestmatch = INFINITY"]},{"entry":[{},"encoding = encoding setting of process issuing lookup"]},{"entry":[{},"(hash, wildcard) = Hash(filename, encoding)"]},{"entry":[{},"hashrange = [hash, hash]"]},{"entry":[{},"Find the btree root from dir's inode"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"back:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"For each dirent in btree with key in range hashrange"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If dirent.encoding != encoding"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"compare_name = dirent.fname converted to encoding"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"compare_name = dirent.fname"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If compare_name bytewise identical to filename"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return dirent"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else if process wants inexact lookup(case insensitive, etc)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"match = inexact_compare(compare_name, filename)"]},{"entry":[{},"If (match < bestmatch)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"bestmatch = match"]},{"entry":[{},"bestdirent = dirent"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If bestmatch != INFINITY"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return bestdirent"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"If (willdcard and hashrange == [hash, hash])"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"hashrange = [0, MAXHASH]"]},{"entry":[{},"goto back"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Return ENOENT"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"V. Filenames",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIGS. 5A-1","FIG. 5A-1"],"b":["5","2","5","5","5","5","5","502","504","506","508","510","512"]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 5A-2","FIG. 5A-1","FIGS. 5A-1","FIG. 3A"],"b":["514","516","518","520","522","524","5","2","160"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 5B","FIG. 2C"],"b":["526","528","530","532","534","536"]},{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 5C","FIGS. 5A-1"],"b":["538","540","542","544","546","548","5"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 5D","b":["550","552","554","556","558","560"]},{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 5E","FIGS. 5A-1","FIG. 5E"],"b":["562","564","566","568","570","572","5","5","5"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 5F","FIG. 5F"],"b":["574","576","578","580","582","584"]},"VI. Other Embodiments","Although the above-mentioned embodiments describe particular data structures and elements, it is recognized that a variety of data structures with various fields and data sets may be used. In addition, other embodiments of the flow charts may be used.","Furthermore, although the illustrated embodiments have described wildcard handling for untranslatable characters, and other special handling for round-trip problems (for example, yen and backslash), there are other special cases that are easily solved by the embodiments described herein, or trivial variations. For example, a translated name may become too long because of a system limit (such as 255 bytes per name). These and other anomalous edge cases that can be handled by the disclosed embodiments or simple adaptations thereof.","As discussed above, the features of embodiments disclosed herein may be combined with other systems, modules, and so forth. For example, the modules described herein may be combined, in some embodiments, with a module that provides a parallel set of file system interfaces that allow processes written for these interfaces to get the exact byte-string\/encoding pairs from the file system. This kind of module may be desirable for backup to tape or for a remote file system. Furthermore, in the embodiments described above, the encoding tags are normally not visible to file system users and are generally inferred based on configurable settings for the particular access mechanism or client process. In other embodiments, the encoding may be provided directly (or indirectly) by the file system users. In some embodiments, respective encodings may be provided on a per filename basis. In other embodiments, the respective encodings may be specified for a particular set of file system operations. It will be appreciated by one skilled in the art that there are many suitable ways to receive or to discern respective character encodings of file system users.","While certain embodiments of the invention have been described, these embodiments have been presented by way of example only, and are not intended to limit the scope of the present invention. Accordingly, the breadth and scope of the present invention should be defined in accordance with the following claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 2A","b":["2","2"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 3A","b":["3","3"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 4A","b":["4","4","4","4"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 5A-1","b":["5","2","5","5","5","5","5"]}]},"DETDESC":[{},{}]}
