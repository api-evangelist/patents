---
title: System and method for adding local resources for use by a mobile agent object
abstract: System and method for importing service objects to a host computing environment. In one embodiment, a method includes the steps of executing a mobile agent object, (called a delivery-mobile agent object) in a mobile-agent runtime environment in a host computing environment and then installing a service object to be executable in the mobile-agent runtime environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08533736&OS=08533736&RS=08533736
owner: Topia Technology
number: 08533736
owner_city: Tacoma
owner_country: US
publication_date: 20090409
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["This application is a continuation of U.S. Pat. No. 7,523,456 entitled \u201cSystem and method for adding local resources for use by a mobile agent object\u201d filed Jul. 25, 2003, which is hereby incorporated by reference as if fully set forth herein.","The advent of computer networks has proliferated the use of distributed-computing environments. A distributed-computing environment is a type of computing wherein several computer platforms, i.e., different computers, coupled by a network, perform separate but related tasks, (called a process), that are directed in concert toward a single achievement. One example of such a process is the retrieval of all files in a network having the same pattern of letters in the file name. By taking advantage of the computing power of several computers at once, tasks require less time for completion. Use of a processor close to resources to be processed reduces total computing resource requirements.","One method known in the art for practicing a distributed-computing environment is called \u201cremote programming.\u201d In remote programming, a first executing program, called a client process, executing on a first computer system, sends to a second process, called a server process executing on the second computer system, a list of instructions. The instructions are then carried out on the second computer system by the server process, effectuating the goal of the client process. The instructions that the server process is designed to carry out must have some degree of generality, i.e., the instructions must allow some degree of local decision-making with respect to details.","U.S. Pat. No. 6,016,393 to White et al., entitled, \u201cSystem and Method for Distributed Computation Based upon the Movement, Execution, and Interaction of Processes in a Network\u201d, which is hereby incorporated by reference, disclosed a system that improved upon the concept of remote programming by utilizing processes called mobile agents (sometimes referred to as mobile objects or agent objects). The system described by White et al., provides the ability for an object (the mobile agent object), existing on a first (\u201chost\u201d) computer system, to transplant itself to a second (\u201cremote host\u201d) computer system while preserving its current execution state. The operation of a mobile agent object is described briefly below.","The instructions of the mobile agent object, its preserved execution state, and other objects owned by the mobile agent object are packaged, or \u201cencoded\u201d, to generate a string of data that is configured so that the string of data can be transported by all standard means of communication over a computer network. Once transported to the remote host, the string of data is decoded to generate a computer process, still called the mobile agent object, within the remote host system. The decoded mobile agent object includes those objects encoded as described above and remains in its preserved execution state. The remote host computer system resumes execution of the mobile agent object which is now operating in the remote host environment.","While now operating in the new environment, the instructions of the mobile agent object are executed by the remote host to perform operations of any complexity, including defining, creating, and manipulating data objects and interacting with other remote host computer objects. These interactions may be handled through processes called services. A typical mobile agent object may discover and use services and log the calls to and usage of such services. A system and method directed to the discovery and monitoring of services is disclosed in co-pending U.S. Pat. No. 7,614,059, entitled \u201cSYSTEM AND METHOD FOR THE DISCOVERY OF AND USAGE OF LOCAL RESOURCES BY A MOBILE AGENT OBJECT,\u201d filed on Jul. 11, 2003, which is assigned to Topia Technology and which is incorporated by reference.","When a mobile agent object is operating in a remote host environment, specific services may be needed but not available within the area of execution of the mobile-agent object called the mobile-agent runtime environment. In such a case, the mobile agent object may be programmed to skip over attempting to use the particular service. In other cases, the mobile agent object may not be programmed with the capacity to determine whether the service is available, thus causing delays and possibly even irretrievable loops. Still other mobile agent objects may be programmed to request the delivery of the service from the original host system for use in the new mobile agent runtime environment.","If the service is requested from the original host system, the purpose of the mobile agent object is defeated in that the mobile agent object is intended to be implanted in a remote host computing environment to eliminate unnecessary communications over the network when data and information are required from the host computing environment. Since the mobile agent object needs to request a service object to be delivered from its original host computing environment to be used in the new mobile-agent runtime environment in the host computer system, communication over the network still occurs and there is no time and computing efficiency realized over the situation where the original host requests the needed data and information directly without using the mobile agent object.","Therefore, a method and system for adding needed services by taking advantage of the mobile agent mechanism wherein communication over the network is minimized is desirable.","According to an embodiment of the invention, a system and method is presented for a mobile agent runtime environment to dynamically extend its capabilities. More specifically, the capabilities of a particular mobile-agent runtime environment are extended by the delivery, via a mobile agent object, of needed service modules that originate from a remote source. In one embodiment of the invention, a method includes the steps of executing a mobile agent object, (called a delivery-mobile agent object) in a mobile-agent runtime environment in a host computing environment and then installing a service object to be executable in the mobile-agent runtime environment.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 1","FIG. 1"],"b":["100","150","125","100","150","125","125","100","150"]},"The original host  includes a CPU  coupled to a bus  that facilitates communication between the CPU  and other components of the original host . Other components of the original host  include a Network Interface Component  (NIC) and a memory . The memory may include magnetic or optical disks, Random-Access memory (RAM), Read-Only memory (ROM), Basic Input\/Output Systems (BIOS), or any other commonly known memory system used in computer architecture. In the original host , a mobile-agent runtime environment  and a mobile-agent injector program  are resident within the memory . Although shown as separate memory components, the mobile-agent runtime environment  and a mobile-agent injector program  may reside in a single memory component or in any combination of memory components that are coupled with the bus . The NIC  facilitates communications between the original host  and other computers, such as the remote host , via the internet .","The remote host  is similar to the original host  and includes a CPU , a bus , a NIC , and a host platform memory  which includes a mobile-agent runtime environment . These components are organized and coupled as described above with respect to the original host .","The above-described distributed-computing environment may host one or more mobile agent objects (not shown) that are present in one of the mobile-agent runtime environments  or  of one of the computers  or . The mobile-agent runtime environment  and  is a portion of the memory dedicated to allowing a mobile agent object the ability to perform operations that it was programmed to carry out. The nature of the mobile agent object, the manner in which the mobile agent object is transported between computers, and the parameters of the mobile agent object's abilities are discussed in detail in White et al. (which has been incorporated by reference) and will not be discussed further herein.","Mobile agent objects may be instantiated in a mobile-agent runtime environment  or  in several ways, two of which are briefly described here. In a first way, the mobile agent object is locally created in the original host  and then locally injected into the mobile-agent runtime environment  by the mobile-agent injector program . In a second way, the mobile agent object moves from the mobile-agent runtime environment  of the original host  to the mobile-agent runtime environment  of the remote host  over the internet  by its own accord, i.e., according to its programmed instructions. Both of these instantiation processes are well known in the prior art.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2","b":["154","160","154","160","200","220","110"]},"When a delivery mobile agent object  is instantiated in a new environment, such as the mobile-agent runtime environment  of the host platform memory, the delivery mobile agent object may be programmed to discover the services that are available in the mobile-agent runtime environment  in order to determine what service objects  are available. The discovery of service objects is described in co-pending U.S. Pat. No. 7,614,059, entitled \u201cSYSTEM AND METHOD FOR THE DISCOVERY OF AND USAGE OF LOCAL RESOURCES BY A MOBILE AGENT OBJECT,\u201d mentioned above. By discovering services that are available, the delivery-mobile-agent object may determine what service objects do not exist in the mobile-agent runtime environment . As such, the delivery mobile agent object  may then install the needed service objects  in the mobile-agent runtime environment .","In an alternative embodiment, the delivery mobile agent object  is programmed to install one or more specific service objects  without having to discover the current service objects  in the mobile-agent runtime environment . This may be the case because a different mobile agent object (not shown) previously discovered the service objects  that are available and then relaying this information for the programming of the delivery-mobile-agent-object .","Still referring to , the mobile-agent runtime environment  is provided within the host platform memory  wherein a delivery-mobile-agent-object  may execute its instructions. As described above, the host platform memory  resides within a host computing environment on the remote host  accessible via the network (Internet  of ) by the sender of the delivery-mobile-agent-objec-t , i.e., the original host . The mobile-agent runtime environment  also includes a number of service objects  that export an application programming interface (API) which are not shown in . Each API provides a communication channel to the CPU  of the remote host  that enables each service object  the computing capabilities for performing its particular operations. Each service object  is also associated, through a binding relationship , with a one or more related service modules  that realize the functionality of one or more service objects . Each service object  may have more than one binding relationship  with a plurality of service modules , and each service module  may have more than one binding relationship  with several service objects . Service objects  and service modules  act in conjunction to carry out operations when its service is requested by any process or object, such as delivery mobile agent object .","For example, a particular service object  may be called by any number of processes or objects, such as the delivery-mobile-agent-object . When called, the service object  initiates a CPU  request on its dedicated API. The CPU  handles all API traffic according to a known timing protocol. As such, when the CPU  decides that this particular API of the service object  is to be granted permission for execution, the CPU  carries out the instructions associated with the service object  which may be, for example, to list all service objects  available within the mobile-agent runtime environment .","One particular type of service object  is called a service delivery service object . A service-delivery service object  is a realization of a service object  which defines an API that allows the delivery-mobile-agent-object  the ability to install, remove, and verify both service objects  and service modules . Furthermore, the service-delivery service object  exports one or more APIs that allow the delivery-mobile-agent-object  the ability to create binding relationships  between a particular kind of service module , called a service-delivery service module , and the service-delivery service object . The service-delivery service module  is a realization of a service module  that implements the functionality of the service-delivery service object . The operation and interaction between the above-described objects and components is described in greater detail below with respect to .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3","b":["200","200","200","200","301","302","303","304","200"]},"The native-service module  is a realization of a service module  that is incorporated within the delivery-mobile-agent-object  and that implements an API (not shown) as defined by the related service-object byte code  contained within the delivery-mobile-agent-o-bject . The native-service module  contains code that executes in the host platform memory ( in ) and may be compressed while resident in the delivery-mobile-agent-object . When a delivery-mobile-agent-object  is first instantiated in a mobile-agent runtime environment , the native-service module  is executed in the host platform memory  and, as such, becomes \u201cnative\u201d to the mobile-agent runtime environment  that is within the host platform memory .","The service-object byte code  is a realization of a service object  that is incorporated within the delivery-mobile-agent-object  and that defines an API whose implementation is intended to extend the functionality of the mobile-agent runtime environment  where the delivery-mobile-agent-object  is currently executing. The service-object byte code  is operable to create binding relationships (not shown) between service objects  and service modules  that are stored in the native-service module .","The installation instructions  are a set of instructions integral to the delivery-mobile-agent-object  which direct the service delivery service object  to carry out the installation of its service objects  and service modules .","The service-module runtime data  is used by the native-service module  during runtime. The data contained in the service-module runtime data  is dependent upon the intent and implementation of the native-service module . That is, the service-module runtime data is directly related to the service objects  that are stored for installation in the native-service module . The installation method is described further below with respect to .",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4","b":["100","150","200","401","200","160","154","200","220","215","220","215","302","301"]},"Next, the delivery-mobile agent object  obtains the service-delivery service object  at step . The delivery-mobile-agent-object , already resident in the mobile-agent runtime environment , obtains the service-delivery service object  in order to gain the use of an API to utilize the CPU  of the host system .","Next, at step , the delivery-mobile-agent-object uses the API of the service-delivery service object  to install its native-service module , its service-object byte code , and its service-module runtime data  into the mobile-agent runtime environment  according to the computer-executable instructions included in the installation instructions .","Next, at step , the delivery-mobile agent object  uses the API of the service-delivery service object  to create binding relationships  to map the installed native service module  to the associated service object byte code . That is, the newly installed service objects  that came from the service-object byte code  and the newly installed service modules  that came from the native-service module  are mapped with various binding relationships according to the installation instructions. Finally, at step , the delivery-mobile agent object  may be ejected from the mobile-agent runtime environment , thus, completing the installation method. Now, the newly installed service object may be called by any process or object that is executing in the mobile-agent runtime environment.","The preceding discussion is presented to enable a person skilled in the art to make and use the invention. The general principles described herein may be applied to embodiments and applications other than those detailed above without departing from the spirit and scope of the present invention. The present invention is not intended to be limited to the embodiments shown, but is to be accorded the widest scope consistent with the principles and features disclosed or suggested herein."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same become better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
