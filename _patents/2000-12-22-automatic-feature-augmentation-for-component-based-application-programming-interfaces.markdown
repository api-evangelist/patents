---
title: Automatic feature augmentation for component based application programming interfaces
abstract: Automatically augmenting functionality in an application programming interface (“API”) is provided by receiving from an application a request for functionality to be fulfilled by a first component implementing at least a portion of the functionality within the application programming interface. The first component is queried for the requested functionality. If an indication that the first component does not implement the requested functionality is received, the a search for an augmentation component that implements the requested functionality is initiated. If an augmentation component supplying the required functionality is found, the augmentation component is loaded to fulfill the request for functionality in place of the first component and used to respond to the request for functionality. Augmentation components provide a subset of the API's required functionality, thereby removing a limitation from API components (i.e., functionality completeness). Augmentation components may also be used to provide new functionality for the API to all existing components (i.e., functionality enhancement).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06848110&OS=06848110&RS=06848110
owner: International Business Machines Corporation
number: 06848110
owner_city: Armonk
owner_country: US
publication_date: 20001222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This invention relates generally to enterprise integration of software application programs using application programming interfaces, and more specifically to automatically augmenting features for component based application programming interfaces.","Enterprise application development allows for the building of software applications having a unified model that present a coherent and consistent interface across a diverse set of backend data storage systems. Enterprise application development environments typically support \u201ccodeless\u201d, as well as programmatic, development. Codeless development typically utilizes a forms-based platform for the development of applications. Programmatic development typically utilizes an application program interface (\u201cAPI\u201d) for the development of applications. Enterprise applications can be developed using either approach or a combination of approaches.","Enterprise applications developed today have access to diverse sets of data, but only through the use of a native product API or through a common API that is coded to the least common denominator functionality available among the diverse data sets.","APIs define a set of routines usable by an application program to invoke the functionality implemented within the components supporting the API. Example native APIs include the Lotus Notes API for accessing Lotus Notes databases, the IBM DB databases. Example common APIs include the Lotus Connector API and Microsoft's ActiveX Data Objects, both provide a high-level, component based, interface for enterprise application developers.","The Lotus Connector V3.0 API presents a common set of application program calls using a set of \u201cconnectors\u201d (components) written to interface with specific data sets. The Lotus Connector API architecture is optimized to support high speed operations with enterprise-scale functionality. Lotus Connector API's provides performance relating to both quantity of data and speed of data movement, as a result, Lotus Connector API support libraries are tuned for performance. The Lotus Connector API allows use of product-specific capabilities, allowing developers of connectors to support the specific capabilities of external products. For example, the Lotus Notes Connector supports response hierarchies, file attachments, and other Notes-specific functionality, while the Oracle Connector supports the Oracle array transfer feature. The Lotus Connector API is platform-independent and is available on multiple server based platforms. The Lotus Connector API is also independent of the data format being accessed, allowing access not only to standard database formatted information (e.g., Lotus Notes databases and relational databases), but data from other sources such Enterprise Resource Planning (\u201cERP\u201d) systems, directories, transaction systems, and other data providers. The Lotus Connector API avoids, when reasonable, dependence on programming language specific constructs in order to allow the use of the Lotus Connector API from programming languages other than C (e.g., LotusScript and Java).","Microsoft's ActiveX Data Objects (\u201cADO\u201d) is a single, common application interface for accessing data based upon Object Linking and Embedding Data Base (\u201cOLE DB\u201d). OLE DB is a set of interfaces designed to provide access to all data, regardless of type, format or location by effectively \u201ccomponentizing\u201d database and related data processing functionality. The OLE DB architecture provides for components such as direct data access interfaces, query engines, optimizers, business rules and transaction managers. The fundamental paradigm of ADO and OLE DB is to work at the rowset or table level. OLE DB employs open database connectivity (\u201cODBC\u201d) for providing universal data access to SQL-relational data.","Once a common API is defined it is difficult to change the definition of the API without requiring all existing enterprise applications to be re-written. This is an expensive and time consuming process. Currently, components for enterprise APIs must be written to support the entire set of desired functionality, or some requests for functionality will fail. Additionally, based upon the component nature of existing enterprise APIs, common solutions can not be shared across existing components.","Thus, an effective technique for solving the problems of supplying and sharing functionality in application programming interfaces is required. Accordingly, the present invention provides for automatically augmenting functionality in an application programming interface by receiving from an application a request for functionality to be fulfilled by a first component implementing at least a portion of the functionality within the application programming interface. The first component is queried for the requested functionality. If an indication that the first component does not implement the requested functionality is received, then a search for an augmentation component that implements the requested functionality is initiated. If an augmentation component supplying the required functionality is found, the augmentation component is loaded to fulfill the request for functionality in place of the first component and is used to respond to the request for functionality.","Augmentation components provide a subset of the API's required functionality, thereby removing a limitation from API components (i.e., functionality completeness). For example an augmentation component may provide data definition management functionality for a database component.","Augmentation components may also be used to provide new functionality for the API to all existing components (i.e., functionality enhancement). For example, a functionality enhancement that provides thread management for non-thread safe components or functionality that returns a count of data items retrieved from a query, may be implemented as an augmentation component.","Augmentation components fits between the API and its component, providing functionality completeness or functionality enhancement. The application is not aware that the augmentation component is loaded, the application simply requests the support of the API and the API loads the augmentation module, certain subsequent API calls for a subset of functionality are then completed by the augmentation component.","A description of preferred embodiments of the invention follows.",{"@attributes":{"id":"P-00021","num":"00021"},"figref":"FIG. 1","b":["102","104","106","110","120","50","100","120","110","150","50"]},{"@attributes":{"id":"P-00022","num":"00022"},"figref":["FIG. 2","FIG. 2"],"b":["1","102","104","106","100","110","120","102","104","106","100","110","120","206","206","208","206","210","212","206","206","214","50","102","104","106","100","110","120","50"]},"Enterprise API Augmentation Program  uses Enterprise API Augmentation Data  to provide automatically augmented features for component based application programming interfaces according to an embodiment of the present invention. A memory  stores computer software instructions (e.g., Enterprise API Augmentation Program ) and data structures (Enterprise API Augmentation Data ) used to implement an embodiment of the present invention for automatically augmenting functionality in an application programming interface. A disk storage device  is provided for non-volatile storage on computers (, , , , , ) to store, for example API Augmentation Program  and Enterprise API Augmentation Data . A processor  executes instructions and accesses data stored in memory , allowing the networked computers (, , , , , ) to provide automatically augmented features for component based application programming interfaces according to an embodiment of the present invention.",{"@attributes":{"id":"P-00024","num":"00024"},"figref":"FIG. 3","i":"a ","b":["250","270","260","260","270","270","260","260","260","270","260"]},{"@attributes":{"id":"P-00025","num":"00025"},"figref":"FIG. 3","i":"b ","b":["250","260","270","260","275","275","270","270","260","260","275","275","275","275","150"]},{"@attributes":{"id":"P-00026","num":"00026"},"figref":["FIG. 4","FIG. 4"],"b":["330","332","334","352","354","356","358","302","304","306","308","310","312","314","340","302","304","306","308","310","312","314"]},"Enterprise applications, for example IBM Websphere Application , Lotus Enterprise Integrator (\u201cLEI\u201d) Application  and Domino Enterprise Connection Services (\u201cDECS\u201d) Application  allow users to implement enterprise-wide computer solutions. IBM Websphere Application  is a general purpose Java application server that can be used to build a wide array of eBusiness applications. Websphere provides a robust Java execution environment that can be utilized by Lotus Domino. DECS Application  provides an easy-to-use forms-based interface that lets users integrate connectivity to external data from Lotus Domino applications. With DECS, users work with a non-programmatic template application to make external source data an integrated part of any Lotus Domino application. LEI Application  is a multi-tasking data distribution server with an administrative application designed to support enterprise scale data integration and transfer volumes. It provides high performance, and scalable exchange of data via Lotus Domino Connectors.","Enterprise data is stored in various formats on data storage devices (, , , ). In one preferred embodiment, Lotus Notes data  is accessed by a Lotus Notes Component . The Lotus Notes Component  understands how to read and write data in Lotus Notes format and provides an API for programmatic access to that data. The DB Component  accesses data formatted as DB database records on data storage device . Correspondingly, XML and flat file data is stored on data storage device  and accessed by XML Component  and Flat File Component . These components provide an API for programmatic access to the data formats that they respectively support. The Oracle Component  accesses data formatted as Oracle database records on data storage device .","Enterprise data may be accessed using an Enterprise API . Enterprise API  functions by using underlying components (, , , , ) to provide features and access the variety of data stored on data storage devices (, , , ). An example Enterprise API  is the Lotus Connector V3.0 API. Enterprise API  requires components to be written to provide some predetermined functionality. The Enterprise  API defines required entry points and the components implement the set of entry points. In the prior art, a component would not function properly if it did not support the entire set of common functionality defined by the Enterprise API . Additionally, any required changes to support newly defined functionality of the Enterprise API  would require rewriting all existing components. The present invention provides for adding functionality to an existing component to complete its (missing) functionality such that it supports the predefined Enterprise API entry points. This is referred to as \u201cfunctionality completeness augmentation\u201d. The present invention also provides for adding new functionality to all existing components, thereby avoiding the process of upgrading each one. This is referred to as \u201cfunctionality enhancement augmentation\u201d.","Functionality completeness augmentation using Enterprise API Augmentation Program  and Enterprise API Augmentation Data  loads an augmentation component when the Enterprise API  gets a request for functionality from a component identified as missing one or more features required by Enterprise API . Feature availability is tracked through the use of a \u201cfeature flag\u201d, a feature flag identifies whether or not a component supports a specific feature. Enterprise API Augmentation Program  automatically catalogs all augmentation modules in Enterprise API Catalog , listing components corresponding to each feature flag. When an augmentation component is found that supports the feature requested, the augmentation component is loaded in order to provide the feature requested. For example, Oracle Component  is used by enterprise API  to access Oracle data stored on data storage device . In this example, assume that Oracle Component  lacks the features to provide certain data management functionality (e.g., \u201ccount of\u201d database records). The Data Management Component  is an augmentation component supporting data management for Oracle data. When an application (, , ) requests services using Enterprise API  it may be determined that Oracle Component  does not support data management, but based upon Enterprise API Catalog  entries, it is determined that Data Management Component  does support data management for Oracle. In this case Enterprise API Augmentation Program  loads Data Management Component  for Enterprise API  to satisfy the functionality request made.","Functionality enhancement augmentation provides enhanced functionality across all components accessible through Enterprise API  by loading an augmentation component to respond to all requests for a specific common functionality missing from the components. For example, Thread Management Component  provides thread management for non-thread safe components. Enterprise API Augmentation Program  loads Thread Management Component  for Enterprise API  to satisfy the need for a common thread management implementation. This allows all components to share a commonly required functionality in an efficient way. Augmenting Enterprise API  with a common thread management implementation relieves individual component writers from the burden of providing a new implementation when the definition of Enterprise API  changes to require thread safe operations.","Functionality offered by components can change over time as new versions of the components are written and installed. Using Enterprise API Augmentation Program  new functionality provided by components is automatically recognized and cataloged, thus allowing native implementations of functionality to override augmentation implementations. Components may be rewritten to include new functionality and this new functionality will be automatically called. Function availability can be determined by using an application function call asking \u201cdo you support this functionality\u201d. If the function call receives an affirmative response, it is determined that the component does implement the requested functionality. No response, or a negative response provides a determination that the component does not implement the requested functionality. Components not implementing a specific functionality are augmented as previously described.",{"@attributes":{"id":"P-00033","num":"00033"},"figref":"FIG. 5","b":["502","345","308","504","514"]},"If it is determined that the component does not implement the functionality, a search for an augmentation component (e.g., Data Management Component ) is initiated (Step ). The search for augmentation components may occur on multiple locations, including on the server executing the enterprise API (e.g., Enterprise API Server ), on any number of backend servers (e.g., Backend Server , Database Server ), or on Web sites of various component vendors (e.g., www.oracle.com). For example, a Uniform Resource Locator (URL) can be used to direct the search for networks that use URLs to address resources. If an appropriate augmentation component is not found (Step ), a \u201cnot found\u201d flag is set (Step ) such that the requestor is notified of the unavailability of the requested functionality. Otherwise, if an appropriate augmentation component is found (Step ), the augmentation component is dynamically loaded (Step ). The augmentation component is then used to respond to the request for functionality (Step ), thus automatically augmenting features for component based application programming interfaces.","While this invention has been particularly shown and described with references to preferred embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims.","Applications have been described as enterprise applications, typically running on a client-server architecture. The present invention applies to augmenting APIs in any computer architecture including client-server, peer to peer and standalone applications. Additionally, the application need not be an enterprise application, the present invention applies to all applications accessing functionality through an application programming interface. For example, in a client-server architecture a memory  in a server computer stores computer software instructions (e.g., Enterprise API Augmentation Program ) and data structures (Enterprise API Augmentation Data ) used to implement an embodiment of the present invention. In a peer to peer architecture Enterprise API Augmentation Program  and Enterprise API Augmentation Data  may be stored in a memory  on various computers within the peer to peer network. In a standalone architecture a memory  in the standalone computer stores computer software instructions (e.g., Enterprise API Augmentation Program ) and data structures (Enterprise API Augmentation Data ) used to implement an embodiment of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular description of preferred embodiments of the invention, as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, emphasis instead being placed upon illustrating the principles of the invention.",{"@attributes":{"id":"P-00014","num":"00014"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00015","num":"00015"},"figref":"FIG. 2","b":"1"},{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 3","i":"a "},{"@attributes":{"id":"P-00017","num":"00017"},"figref":"FIG. 3","i":"b "},{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
