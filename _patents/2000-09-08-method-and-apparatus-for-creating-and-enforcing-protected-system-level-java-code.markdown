---
title: Method and apparatus for creating and enforcing protected system level Java code
abstract: According to the preferred embodiments, an object oriented mechanism and method allow creating system level Java code that is protected, and therefore cannot be accessed or extended by unauthorized users or programs. Several new tests are performed during loading, linking, and initialization of a class that assure that the class is as the operating system expects. In addition, one or more runtime tests may be performed to prevent programs from getting into the Java system level code via a runtime “back door.” By providing additional tests when classes are loaded and when certain types of methods and functions are invoked at runtime, the Java system level code is protected from unauthorized access and use.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06918126&OS=06918126&RS=06918126
owner: International Business Machines Corporation
number: 06918126
owner_city: Armonk
owner_country: US
publication_date: 20000908
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","DISCLOSURE OF INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION","Object Oriented Technology v. Procedural Technology","Prior Art Apparatus for Protecting System Level Code","Prior Art Method for Loading and Using Java Classes"],"p":["1. Technical Field","This invention generally relates to the data processing field. More specifically, this invention relates to system level code, such as operating system code, in a computer system.","2. Background Art","Since the dawn of the computer age, computer systems have evolved into extremely sophisticated devices, and computer systems may be found in many different all settings. Computer systems typically include a combination of hardware, such as semiconductors and circuit boards, and software, also known as computer programs. As advances in semiconductor processing and computer architecture push the performance of the computer hardware higher, more sophisticated computer software has evolved to take advantage of the higher performance of the hardware, resulting in computer systems today that are much more powerful than just a few years ago.","Computer systems typically include operating system software that controls the basic function of the computer, and one or more software application programs that run under the control of the operating system to perform desired tasks. For example, a typical IBM Personal Computer may run the OS\/2 operating system, and under the control of the OS\/2 operating system, a user may execute an application program, such as a word processor. As the capabilities of computer systems have increased, the application software programs designed for high performance computer systems have become extremely powerful. Additionally, software development costs have continued to rise because more powerful and complex programs take more time, and hence more money, to produce.","One way in which the performance of application software programs has been improved while the associated development costs have been reduced is by using object oriented programming concepts. The goal of using object oriented programming is to create small, reusable sections of program code known as \u201cobjects\u201d that can be quickly and easily combined and re-used to create new programs. This is similar to the idea of using the same set of building blocks again and again to create many different structures. The modular and re-usable aspects of objects typically will speed development of new programs, thereby reducing the costs associated with the development cycle. In addition, by creating and re-using a comprehensive set of well-tested objects, a more stable, uniform, and consistent approach to developing new computer programs can be achieved.","The Java programming language developed by Sun Microsystems is one modem object oriented programming language that has become very popular in recent years. Java offers many features and advantages that makes it a desirable programming language to use. First, Java is specifically designed to create small application programs, commonly called \u201capplets,\u201d that can reside on the network in centralized servers, and which are delivered to the client machine only when needed. Second, Java is completely platform independent. A Java program can be written once and can then run on any type of platform that contains a Java Virtual Machine (JVM). The JVM model is supported by most computer vendors, thereby allowing a software vendor to have access to hardware and software systems produced by many different companies. Finally, Java is an object oriented language, meaning that software written in Java can take advantage of the benefits of object oriented programming techniques.","Due to the platform independent nature of programs written in Java, initial efforts were made to program applications and applets using Java. However, more recent efforts have recognized that Java could be used to write system level code (such as operating system code) that is platform dependent. The problem with writing system level code in Java is that the Java programming language currently does not support running code in a protected mode, which is required for most system level code. Without an apparatus and method for generating system level Java code that is protected, a clever programmer could find a way to access system level Java code in unauthorized and inappropriate ways.","According to the preferred embodiments, an object oriented mechanism and method allow creating system level Java code that is protected, and therefore cannot be accessed or extended by unauthorized users or programs. Several new tests are performed during loading, linking, and initialization of a class that assure that the class is as the operating system expects. In addition, one or more runtime tests may be performed to prevent programs from getting into the Java system level code via a runtime \u201cback door.\u201d By providing additional tests when classes are loaded and when certain types of methods and functions are invoked at runtime, the Java system level code is protected from unauthorized access and use.","The present invention relates to object oriented programming techniques. For those individuals who are not generally familiar with object oriented programming, the Overview section below presents many of the concepts that will help to understand the invention.","1. Overview","Object oriented programming is a method of implementation in which programs are organized as cooperative collections of objects, each of which represents an instance of some class, and whose classes are all members of a hierarchy of classes united via inheritance and implementation relationships. Object oriented programming differs from standard procedural programming in that it uses objects, not algorithms, as the fundamental building blocks for creating computer programs. This difference stems from the fact that the design focus of object oriented programming technology is wholly different than that of procedural programming technology.","The focus of procedural-based design is on the overall process that solves the problem; whereas, the focus of object oriented design is on how the problem can be broken down into a set of autonomous entities that can work together to provide a solution. The autonomous entities of object oriented technology are, of course, objects. Said another way, object oriented technology is significantly different from procedural technology because problems are broken down into sets of cooperating objects instead of into hierarchies of nested computer programs or procedures.","Thus, a pure object oriented program is made up of code entities called objects. Each object is an identifiable, encapsulated piece of code that provides one or more services when requested by a client. Conceptually, an object has two parts, an external object interface and internal object data. In particular, all data is encapsulated by the object interface such that other objects must communicate with that object through its object interface. The only way to retrieve, process or otherwise operate on the encapsulated data is through the methods defined on the object. This protects the internal data portion of the object from outside tampering. Additionally, because outside objects have no access to the internal implementation of an object, that internal implementation can change without affecting other aspects of the program.","In this way, the object system isolates the requestor of services (client objects) from the providers of services (server objects) by a well defined encapsulating interface. Thus, in the classic object model, a client object sends request messages (e.g., method calls) to server objects to perform any necessary or desired function. The message identifies a particular server object and specifies what method is to be performed by the server object, and also supplies any required parameters. The server object receives and interprets the message, and can then determine what service to perform.","Another central concept in object oriented programming is the class. A class is a template that defines a type of object. A class outlines the makeup of objects that belong to that class. By defining a class, objects can be created that belong to the class without having to rewrite the entire definition for each new object as it is created. This feature of object oriented programming promotes the reusability of existing definitions and promotes efficient use of program code.","There are many computer languages that presently support object oriented programming techniques. For example, Smalltalk, Object Pascal, C++ and Java are all examples of programming languages that support object oriented programming to one degree or another.","Referring to , a computer system  in accordance with the prior art is an AS\/400 computer system manufactured and marketed by the IBM Corporation. Computer system  comprises a processor  connected to a main memory , a mass storage interface , a terminal interface , and a network interface . These system components are interconnected through the use of a system bus . Mass storage interface  is used to connect mass storage devices (such as a direct access storage device ) to computer system . One specific type of direct access storage device is a floppy disk drive, which may store data to and read data from a floppy diskette .","Main memory  contains data , an operating system , and one or more programs stored at a specific memory location. In , a first program A is stored at location X, and a second program B is stored at location Y. Operating system  includes a state\/domain checker  that enforces protections in system level code by assuring that the current process state is compatible with the domain of the program being called. Each of programs A and B have corresponding domain indicators A and B, respectively, that indicate the domain of the program. These indicators are typically stored at a predetermined offset from the beginning of the storage location of the program. In the specific example of , we assume that X domain indicator A specifies that the program stored at location X is a private domain program, while Y domain indicator B indicates that the program stored at location Y is a public domain program. A private domain program is a program or program portion, such as operating system code, that can only be accessed in a specific and defined way. Generally, a private domain program can only be accessed by a program running in system state. A private domain program typically defines one or more system programming interfaces (SPIs) that may be called by other portions of the operating system. A public domain program, in contrast, typically defines one or more application programming interfaces (APIs) that may be called by any other program. In the prior art AS\/400 computer system, the state of a process (or thread) is determined by one or more bits in a system processor register, which is referred to in  as a process state indicator . If the process state indicator for a program indicates it is running in system state, it may access private domain programs. If the process state indicator indicates that the program is not running in system state, it may not access private domain programs, but may still access public domain programs. Note that this method for protecting system level code requires bits in a processor register, which means that this protection scheme is partially hardware-based. Before operating system  grants access to a program (such as program A), the operating system  checks the domain indicator (B) of the program to determine the program's domain. If the program is a public domain program, operating system  grants access to the program. However, if the program is a-private domain program (such as program A), operating system  checks the process state indicator  for the caller process and only grants access if the caller process is running in system state mode.","Data  represents any data that serves as input to or output from any program in computer system . Operating system  is a multitasking operating system known in the industry as OS\/400.","Processor  executes program instructions stored in main memory . Main memory  stores programs and data that processor  may access. When computer system  starts up, processor  initially executes the program instructions that make up operating system . Operating system  is a sophisticated program that manages the resources of computer system . Some of these resources are processor , main memory , mass storage interface , terminal interface , network interface , and system bus . In addition, operating system  enforces protections so that only programs running in a system state can access private domain programs.","Terminal interface  is used to directly connect one or more terminals  to computer system . Terminal  may be a simple display device, such as a monitor, or may be a fully programmable workstation, and is used to allow system administrators and users to communicate with computer system . Network interface  allows computer system  to send and receive data to and from any computer system  that is coupled to the network  to which the computer system may be connected.","By maintaining the domain table  and by checking the system state of each process that tries to access a private domain program by checking its process state indicator  in the appropriate processor register, the operating system  of the prior art achieves the desired protection to assure that only programs running in system state may access private domain programs.","One prior art method for loading and using Java classes for the apparatus  of  is shown as method  in FIG. . Method  is run when a class is needed. First, method  checks to see if the Java Virtual Machine (JVM) has an internal representation of the needed class (step ). If so (step =YES), the class is already available, and need not be loaded, so method  is done loading the class (step ). At runtime, the class is then used (step ). If, however, the JVM does not have an internal representation of the needed class (step =NO), method  gets the needed class from a class loader (step ). The detailed operation of the prior art class loader is shown in FIG..","Step  of  is expanded into a series of steps in  that are performed when a class needs to be loaded. As is known in the art, class loading may be broken down into defined phases, such as loading, linking, and initialization. The linking phase may include verification, preparation, and resolution phases. These phases are shown by the text notations on the left side of FIG. . The loading phase includes the steps of retrieving a persistent class definition (step ) and checking class syntax (step ). Retrieving a persistent class definition in step  represents retrieving the class file from a persistent store. Checking the class syntax in step  typically checks to make sure the class file does not contain any syntax errors, which refers to statements that are not recognized by the Java programming language. Next we go to the linking phase, which includes steps -. During the verification part of linking, the semantics of the class file are checked (step ) to make sure the class code is only performing operations allowed by the Java programming language. Next, we go to the preparation phase, which allocates static storage for the class (step ), and creates any data structures required by the class (step ). For example, if the class file defines a static array, step  creates the array for the class. Next we move on to the resolution phase, which checks references to other classes (step ). In the prior art, the resolution phase in step  may be performed when a class is loaded, or may instead performed when a method on the class is invoked at runtime. Thus, while step  is shown as a part of the class linking phase, it could also be performed after class loading, linking, and initialization by waiting until runtime and resolving only those classes that are referenced at runtime.","Typically, prior art JVMs perform class resolution at runtime rather than when classes are being loaded, because step  typically needs to be performed recursively to load all classes that a particular class references, and so on for classes that each referenced class references, and so forth. As a result, an attempt to resolve a class may result in a great number of classes being loaded. Due to the probability that not all classes will actually be needed when the program runs, the resolution phase is typically performed at runtime. In other words, when a class is referenced at runtime, it is then resolved. While this may slightly decrease the runtime performance of the system by having to load the required classes at runtime, it usually decreases the overall time required to load and run classes because not all of the classes referenced will be invoked at runtime.","Once the linking phase is complete, the initialization phase is performed by running class initializer methods on the class that needs to be loaded and on any superclasses of the class that needs to be loaded (step ). Initialization is performed to put the class in a known initial state. At this point, the class has been loaded, linked, and initialized, so prior art method  for loading a class is done.","The prior art method  for accessing a needed class by a JVM has no way to distinguish between classes that represent system level code that needs to be protected and classes that represent other code that may be freely accessed. In addition, the prior art method  for loading a class has no way to distinguish between classes that represent system level code that needs to be protected and classes that represent other code. For this reason, the prior art apparatus and methods cannot be used to protect system level code written in Java In short, any user could directly access system level code by appropriately extending or implementing interfaces of system level classes. This free access to system level code is not acceptable, so the use of system level code written in Java has been limited.","2. Detailed Description","The preferred embodiments provide an enhancement over the prior art by implementing system level protections that cannot be violated by a programmer that wants to gain unauthorized access to system level code. System classes are created that include state data that uniquely identifies each protected class. A new class loader performs multiple checks when a class is loaded to assure that only authorized classes or programs are allowed to access protected classes. In addition, runtime checks are performed to assure that only authorized programs are allowed to access protected classes. These checks provide the protection required to allow implementing system level code in Java classes.","Referring to , a computer system  in accordance with the preferred embodiments is an AS\/400 computer system. Computer system  comprises a processor  connected to a main memory , a mass storage interface , a terminal interface , and a network interface . These system components are interconnected through the use of a system bus . Mass storage interface  is used to connect mass storage devices (such as a direct access storage device ) to computer system . One specific type of direct access storage device is a floppy disk drive, which may store data to and read data from a floppy diskette .","Note that many of the designated items of  correspond to designated items in FIG. . These designated items in  that have corresponding designated items in  may be the same as their prior art counterparts in FIG. . However, the preferred embodiments also extend to implementations of these designated items in  that are different than those used in the prior art as shown in FIG. .","Main memory  in accordance with the preferred embodiments contains data , an operating system , a Java Virtual Machine (JVM) , and one or more class files . Computer system  utilizes well known virtual addressing mechanisms that allow the programs of computer system  to behave as if they only have access to a large, single storage entity instead of access to multiple, smaller storage entities such as main memory  and DASD device . Therefore, while data , operating system , JVM , and class files  are shown to reside in main memory , those skilled in the art will recognize that these items are not necessarily all completely contained in main memory  at the same time. It should also be noted that the term \u201cmemory\u201d is used herein to generically refer to the entire virtual memory of computer system .","Data  represents any data that serves as input to or output from any program in computer system . Operating system  is a multitasking operating system known in the industry as OS\/400. However, one skilled in the art will appreciate that the present invention may be employed using any suitable operating system.","JVM  includes a state\/domain checker  that checks to assure that only authorized classes and programs are allowed to access protected system level Java classes. In the preferred embodiments, state\/domain checker  performs a plurality of checks when each class is loaded, and also provides a plurality of checks at runtime when certain methods or functions are invoked, as described in more detail below. Note that in the preferred embodiments, the state\/domain checker  is located within the JVM  rather than within the operating system, as is known in the prior art. However, the state\/domain checker could also be located within the operating system or elsewhere within main memory  within the scope of the preferred embodiments.","The JVM  also includes a catalog of allowed classes . This catalog of allowed classes is generated when the JVM is built, and includes all protected classes. While catalog of allowed classes  is shown to reside in main memory , this catalog  in memory is preferably copied from a persistent data store.","Each class file  includes state data that indicates its corresponding state  and domain . In the preferred embodiments, the state  for a class indicates that the class is protected if the class implements a SystemState interface. This interface is an abstract interface with no internal implementation, but essentially serves as a flag to signal to the state\/domain checker  whether the class is protected or not. Similarly, the domain  for a class indicates that the class is protected if the class implements a PrivateDomain interface. This interface is also an abstract interface with no internal implementation that serves as a flag to signal to the state\/domain checker  whether the class is protected or not. Thus, a \u201cprotected class\u201d as used herein is a class that implements one or both of the SystemState and PrivateDomain interfaces. In accordance with prior art AS\/400 terminology, a program is in a system state if it is allowed to directly access operating system functions. A program is a private domain program if it resides at an address that other programs that are not system state cannot access. The preferred embodiments extend these concepts of private domain and system state to the Java realm, defining special abstract interfaces that may be implemented to indicate the appropriate state  and domain  for the corresponding class . Note that other ways of indicating that a class is a system state class or private domain class may be used within the scope of the preferred embodiments.","Processor  may be constructed from one or more microprocessors and\/or integrated circuits. Processor  executes program instructions stored in main memory . Main memory  stores programs and data that processor  may access. When computer system  starts up, processor  initially executes the program instructions that make up operating system . Operating system  is a sophisticated program that manages the resources of computer system . Some of these resources are processor , main memory , mass storage interface , terminal interface , network interface , and system bus .","Although computer system  is shown to contain only a single processor and a single system bus, those skilled in the art will appreciate that the present invention may be practiced using a computer system that has multiple processors and\/or multiple buses. In addition, the interfaces that are used in the preferred embodiment each include separate, fully programmed microprocessors that are used to off-load compute-intensive processing from processor . However, those skilled in the art will appreciate that the present invention applies equally to computer systems that simply use I\/O adapters to perform similar functions.","Terminal interface  is used to directly connect one or more terminals  to computer system . Terminal  may be a simple display device, such as a monitor, or may be a fully programmable workstation, and is used to allow system administrators and users to communicate with computer system ","Network interface  allows computer system  to send and receive data to and from any computer system  that is coupled to the network  to which the computer system may be connected. This network  may be a local area network (LAN), a wide area network (WAN), the Internet, or any other suitable network. Many different network protocols can be used to implement a network. These protocols are specialized computer programs that allow. computers to communicate across a network. TCP\/IP (Transmission Control Protocol\/Intemet Protocol) is an example of a suitable network protocol.","At this point, it is important to note that while the present invention has been and will continue to be described in the context of a fully functional computer system, those skilled in the art will appreciate that the present invention is capable of being distributed as a program product in a variety of forms, and that the present invention applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of suitable signal bearing media include: recordable type media such as floppy disks (e.g.,  of ) and CD ROM, and transmission type media such as digital and analog communications links.","Referring now to , a method  shows the steps to load and use system level Java classes in accordance with the preferred embodiments. Note that method  is similar in some ways to method  of , but includes a call to a new class loader in step , and performs runtime checks before using a class in step . Method  is performed when a class is needed If the JVM already has an internal representation of the needed class (step =YES), the JVM does not need to load the class, so the loading of the class is done (step ). If, however, the JVM does not have an internal representation of the class (step =NO), method  gets the needed class from a new class loader (step ), the details of which are described below with reference to FIG. . Once method  is done loading the class (step ), method  performs runtime checks before using the class (step ) to assure that only authorized code can call the protected Java classes.","The function of the new class loader in accordance with the preferred embodiments is shown as method  of FIG. . Note that several of the steps in method  correspond to method steps in method  of FIG. . In the preferred embodiments, these similar steps may correspond to the prior art steps in , or may alternatively correspond to new steps that incorporate new and different functions. Steps  and  are performed during the loading phase, and suitably correspond to steps  and  as described above with reference to FIG. . In the verification phase of , a single step  is used to check semantics. In method  of , the verification phase includes two steps, a check semantics step  and a separate step where a check of the class being loaded is performed (step ). The check semantics step  suitably corresponds to step  in  as described above. However, the additional check  is performed to assure that, if the class is identified as a protected class, it appears in a catalog of allowable classes supplied with the JVM. Details of check  are described below with reference to FIG. .","The preparation stage of  includes a step  to allocate static storage and a step  to create data structures required by the class, similar to steps  and  in FIG. . However, in addition, the preparation phase includes a second check (step ) that is performed to assure that if the superclass of the class being prepared is a protected class, the class being prepared is a protected class as well. Details of check  are described below with reference to FIG. .","The resolution phase checks references to other classes (step ), similar to what was done in step  of FIG. . As with the prior art method, the resolution phase of method  may be performed when a class is loaded, but is preferably performed at runtime when a method on a class is first invoked. In the preferred embodiments, the resolution phase (whether performed when a class is loaded by the JVM or at runtime) includes an additional check (step ) that is performed to assure that only system state classes are allowed to reference private domain classes. Details of check  are described below with reference to FIG. . The initialization step  is then performed, which is preferably similar to the corresponding step  in FIG. .","Check  performed at step  of  is expanded into a method  containing several steps, as shown in FIG. . The class being verified is checked to see if it implements the PrivateDomain interface or the SystemState interface (step ). If not (step =NO), check  is done because the class being verified is not a protected class. However, if the class being verified implements PrivateDomain or SystemState (step =YES), this means that the class being verified is a protected class, and further checks are required to see if the class being verified is a class that was provided with the JVM in the system level code. If the class being verified is included in a catalog of allowed classes (step =YES), this means that the class being verified, which is a protected class, is a system level Java class that was supplied with the JVM, which is what we expect for normal operation. However, if the class being verified is not included in the catalog of allowed classes (step =NO), a Java exception is thrown (step ). Note that this exception is thrown when a class appears to be protected by implementing either or both of PrivateDomain and SystemState, but is not included in the catalog of allowed classes. The only way this can happen is for a programmer to define a class that implements PrivateDomain or SystemState, thereby attempting to gain access to the system level Java code. However, this user-defined class will not be in the catalog of allowed classes, so check  shown as method  of  will throw a Java exception in step  to prevent the class from being used.","Check  performed at step  of  is expanded into a method , as shown in FIG. . The class being prepared is checked to see if it has a superclass (step ). If not (step =NO), check  is done because check  is only concerned with superclasses. If the class being prepared has a superclass (step =YES), check  then checks to see if the superclass implements the PrivateDomain or SystemState interfaces (step ). If not (step =NO), check  is done. If so (step =YES), method  then determines whether the class being prepared implements at least the same protected interfaces as the superclass (step ). If so (step =YES), check  is done. If not (step =NO), a Java exception is thrown (step ). Note that step  does not check for an exact match between the interface of the class being prepared and its superclass. Step  simply determines whether the class being prepare implements any and all protected interfaces that the superclass implements. Thus, if the superclass implements the PrivateDomain interface, the class being prepared must implement the PrivateDomain interface, but it may implement the SystemState interface as well. If the superclass implements the SystemState interface, the class being prepared must implement the SystemState interface, but it may implement the PrivateDomain interface as well. If the superclass implements both the PrivateDomain and SystemState interfaces, the class being prepared must implement both the PrivateDomain and SystemState interfaces as well. Check  as shown as method  of  checks to see if a programmer has subclassed from a protected class without implementing the same protected interfaces as the superclass. Again, this may occur when a programmer attempts to gain access to system level Java code through inheritance by subclassing from a system level Java class.","Check  performed at step  of  is expanded into a method , as shown in FIG. . During resolution, all classes that are referenced by the class being loaded are checked. For our discussion herein, the referenced classes are the classes being \u201cresolved to.\u201d The class being resolved to is checked to see if it implements the PrivateDomain interface (step ). If not (step =NO), check  is done. If so (step =YES), check  determines whether the referencing class implements the. SystemState-interface (step ). If so (step =YES), check  is done. If the referencing class does not implement the SystemState interface (step =NO), a Java exception is thrown (step ). Check  thus assures that any class that has a reference to a class that implements PrivateDomain must implement SystemState. In other words, only a system state class can access a private domain class.","Referring again to , in addition to the checks performed when loading the class during step , method  also performs runtime checks (step ) to verify that system level Java classes are not accessed by unauthorized code. Examples of two suitable runtime checks are shown as method  in FIG. . The first of these checks deals with invoking methods that may reference a dynamically-defined class. Certain reflection methods are defined in Java that can take a class as a parameter, and perform functions on that class without knowing until run-time which class to access. A clever programmer might attempt to access system level code via this \u201cback door\u201d by passing a system level class as a parameter to a Java reflection method, so a runtime check is needed to prevent the user from accessing a system level class by passing the class as a parameter when invoking a method that may reference a dynamically-defined class. Thus, at runtime, if a call is made to a method that allows referencing a dynamically-defined class (step =YES), checks are needed to assure that the calling program is not attempting to gain unauthorized access to system level code. Method  checks to see if the class of the method being referenced implements the PrivateDomain interface (step ). If not (step =NO), the class is not a protected class, so no further action is needed. If the class of the method being referenced implements PrivateDomain (step =YES), method  then checks to see if the class that is calling the method (referred to as the \u201creferencing class\u201d) implements the SystemState interface (step ). If so (step =YES), the referencing class is authorized to access the method, and normal operation continues. If the referencing class does not implement the SystemState class (step =NO), a Java exception is thrown (step ). As stated above, one particular case where a class may be dynamically defined is by calling the defineClass method in class java.lang.ClassLoader.  lists the defined Java reflection methods that can access a dynamically-defined class. Note that other methods may be developed in the future that allow accessing classes that are defined at run-time, and the preferred embodiments expressly extends to any such method. The check in steps , ,  and  checks to see if the referenced class is a private domain class, and if so, makes sure that the referencing class is a system state class and is therefore authorized to access the private domain class.","Another runtime check is performed in steps , , , and . If the method call is not to a method that may access a dynamically defined class (step =NO), method  then determines whether the call is to a Java Native Interface (JNI) function from a program external to the JVM (step ). Java defines JNI functions to allow non-Java languages, such as C++, to perform functions defined in Java. Examples of some JNI functions defined in the Java programming language are shown in FIG. . If the call is to a JNI function (step =YES), method  checks to see if the class of the object being referenced implements the PrivateDomain interface (step ). If not (step =NO), no further action is required, because the method is  not on a protected class. If so (step =YES), method  checks to see if the JVM is running in a system state mode (step ). In the case of the AS\/400, the system state of the JVM could be checked by reading the hardware process state indicator (see  in FIG. ), which indicates that state for each process that is currently running, which would include the process executing the JVM. If the JVM is running in system state (step =YES), then it is authorized to reference a private domain object or class, so no further action is required. However, if the JVM is not running in system state (step =NO), a Java error is returned as the JNI return value (step ), signaling to the program that invoked the JNI function that the JNI function could not be performed as requested.","Runtime checks  are necessary to slam shut some potential back doors by which a programmer might be able to gain access to system level Java code. By providing runtime checks , a programmer's efforts to access system level code via Java reflection methods or JNI functions will not be successful. While the system will run without these runtime checks, the preferred embodiments includes these runtime checks to provide a more robust system that allows system level code in Java classes but protects those classes from many different types of unauthorized access.","The apparatus and method of the preferred embodiments requires a different JVM build process than is presently used in the prior art. Referring to , a prior art JVM build process  begins by creating JVM source code (step ). The JVM source code is then compiled to produce an executable JVM (step ). Installable media is then created for the executable code (step ). Examples of installable media include: a floppy diskette; a CD ROM; a magnetic tape; an Internet connection; and an image on a network hard disk drive. Broadly speaking, the term \u201cinstallable media\u201d includes any and all media from which the executable code may be installed. Note that in the prior art, Java is typically not used for system level code because of the lack of protections, so the prior art build process  is typically for applications written in Java, not system level code.","Referring now to , a build process  in accordance with the preferred embodiments takes additional steps over the prior art to build in adequate protections so that Java classes may be defined and used as system level code. Steps  and  are preferably the same steps as steps  and  in method  of FIG. . However, in addition, steps - are also performed in the build process of the preferred embodiments. Java source code is created for the operating system (step ). The classes that the programmer would like to make private domain are defined to implement PrivateDomain. Likewise, those classes that the programmer would like to make system state are defined to implement the SystemState interface. Note that classes may be both private domain and system state. The programming of the classes thus defines which classes are private domain classes and which classes are system state classes (step ). As explained above, a class is marked as private domain by implementing the PrivateDomain abstract class, and a class is marked as system state by implementing the SystemState abstract class. The Java source code is then compiled, producing class files (step ). In the prior art, class files typically have a \u201c.class\u201d suffix or file extension. Next, a catalog of allowable classes is created that includes all private domain classes and system state classes (step ). The final step is to create installable media (step ). Note, however, that this installable media is more than JVM executable code in the prior art build process (see step  of FIG. ). The installable media includes the JVM executable code, the catalog of allowed classes created in step , and the class files created in step . By including all of these in the installable media, the class files can define system level classes that are loaded and executed by the JVM with the appropriate checks when classes are loaded and also at runtime. In addition, the catalog of allowable classes is provided, shown as  in , which is used in step  of check  shown in FIG. .","The preferred embodiments presented herein provide a significant advantage over the prior art by allowing system level Java code to be created and protected from unauthorized access. By providing protection for system level Java code, the Java programming language may now branch out into operating system applications as well as platform-independent applications.","The embodiments and examples set forth herein were presented in order to best explain the present invention and its practical application and to thereby enable those skilled in the art to make and use the invention. However, those skilled in the art will recognize that the foregoing description and examples have been presented for the purposes of illustration and example only. The description as set forth is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching without departing from the spirit and scope of the forthcoming claims. For example, while the preferred embodiments are described as having practical application to Java class in a JVM, the preferred embodiments are not limited to any particular object oriented language."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The preferred exemplary embodiments of the present invention will hereinafter be described in conjunction with the appended drawings, where like designations denote like elements, and:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3","FIG. 2"],"b":"220"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 6","FIG. 5"],"b":"520"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 7","FIG. 6"],"b":["1","632"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 8","FIG.6"],"b":["2","652"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 9","FIG. 6"],"b":["3","662"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 10","FIG. 5"],"b":"540"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
