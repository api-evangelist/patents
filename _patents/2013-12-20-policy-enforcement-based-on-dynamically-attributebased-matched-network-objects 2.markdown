---
title: Policy enforcement based on dynamically attribute-based matched network objects
abstract: A policy that includes an address group is received. The policy is compiled into a set of one or more rules. The compiling is performed at least in part by determining members of the address group. The compiling can further include substituting one or more IP addresses of the members for the address group. At least one rule included in the set of rules is enforced.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09537891&OS=09537891&RS=09537891
owner: Palo Alto Networks, Inc.
number: 09537891
owner_city: Santa Clara
owner_country: US
publication_date: 20131220
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO OTHER APPLICATIONS","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application is a continuation-in-part of co-pending U.S. patent application Ser. No. 13\/246,472 entitled POLICY ENFORCEMENT WITH DYNAMIC ADDRESS OBJECT filed Sep. 27, 2011, which is incorporated herein by reference for all purposes. This application is also a continuation-in-part of co-pending U.S. patent application Ser. No. 13\/528,748 entitled POLICY ENFORCEMENT IN A VIRTUALIZED ENVIRONMENT filed Jun. 20, 2012, which is also incorporated herein by reference for all purposes.","Increasingly, businesses and other entities are using virtualized computing resources (whether running on purchased or leased computer hardware). Virtualized environments are generally very dynamic\u2014virtual machines can easily be spun up, shut down, and moved. As one example, instead of maintaining a set of dedicated physical machines to serve web pages, a business may run at least some virtualized webservers. In such a scenario, if additional demand is experienced, additional virtualized webservers can quickly be brought online to handle the increased traffic. Unfortunately, virtualized environments can pose problems for firewall rules which tend to rely on static information, such as static IP addresses.","The invention can be implemented in numerous ways, including as a process; an apparatus; a system; a composition of matter; a computer program product embodied on a computer readable storage medium; and\/or a processor, such as a processor configured to execute instructions stored on and\/or provided by a memory coupled to the processor. In this specification, these implementations, or any other form that the invention may take, may be referred to as techniques. In general, the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise, a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein, the term \u2018processor\u2019 refers to one or more devices, circuits, and\/or processing cores configured to process data, such as computer program instructions.","A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments, but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives, modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity, technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["126","110","118","110","118","126","112","116","106","108","116","110","116","110"]},"Communications between nodes inside network  (e.g., servers  and , and virtual servers -) and resources outside of enterprise network  (e.g., laptop  or malicious site ) pass (via one or more networks ) through data appliance , which is placed at the perimeter of enterprise network . Such communications may take place using any appropriate communication protocol such as Hypertext Transfer Protocol (HTTP), Secure Sockets Layer (SSL), Common Internet File System (CIFS), and File Transfer Protocol (FTP). In the example shown in , data appliance  is a firewall and is configured to enforce policies (also referred to herein as \u201crules\u201d) with respect to the communications it receives. Other types of devices can also be configured to provide the functionality described herein as being performed by data appliance . Examples include routers, gateways, intrusion detection systems, intrusion prevention systems, and other appropriate devices (whether physical or virtualized).","Other network topologies can also be used in conjunction with the techniques described herein. Examples of such topologies include networks having multiple data appliances, networks where nodes are located across multiple data centers, and networks in which data appliance  is configured to enforce policies with respect to traffic that stays within enterprise network  instead of or in addition to outside traffic (i.e., traffic that flows through network ).","As will be described in more detail below, policies enforced by data appliance  can be configured to apply to individual items and can also be configured to apply to groups. Further, group membership can be manually enumerated, and can also be dynamically generated based on match criteria. One example of a policy is as follows: allow access to all webservers (including physical webserver  and virtual webserver ) via HTTPS to anyone (i.e., ACME employees, as well as an arbitrary member of the public using laptop , may all communicate with webserver  and virtual webserver , using HTTPS). Another example of a policy is as follows: allow access to virtual webserver  via SSH by members of the Engineering group, but deny access via SSH to anyone else. Yet another example of a policy is as follows: allow virtual machines that are running the Ubuntu Linux operating system to communicate with known-malicious website  (e.g., because they are hardened research images), deny all other nodes in network  access to website . In addition to allowing or denying access, other types of actions can also be specified in conjunction with a policy, such as a requirement that certain types of access be logged. Further, instead of or in addition to access\/security policies, other types of policies can also be specified, as applicable (e.g., governing traffic shaping, quality of service, and routing of traffic).","As shown in , data appliance  includes a tag repository . The tag repository stores information pertaining to nodes in network , including arbitrary user-provided labels, and system attributes (collectively referred to herein as \u201ctags\u201d). As one example, suppose webserver  has associated with it in tag repository  the following labels: \u201cwebserver,\u201d \u201cphysical,\u201d and \u201cproduction.\u201d The first tag indicates that the purpose of server  is that it is a webserver (instead of, e.g., a \u201cmailserver\u201d or \u201cLinux workstation\u201d). The second tag indicates that server  is a single physical machine (instead of, e.g., a \u201cvirtual\u201d one). The third tag indicates that server  is in production use (instead of, e.g., \u201ctesting\u201d). Various attributes of server  are also stored in tag repository , such as its IP address(es), its operating system\/version, which applications it runs (e.g., \u201cApache\u201d or \u201cIIS\u201d), and a unique identifier. As will be described in more detail below, each of the aforementioned tags can be used as \u201cmatch criteria,\u201d for address group membership, and to enforce policies with respect to group members. In some embodiments, the data structure used to store tags in tag repository  includes the following: the tag text, an optional comment for the tag, and an optional color associated with the tag. Further, as will be discussed throughout, a given node can have multiple tags and can belong to multiple address groups, including overlapping address groups.","As a physical, production server, information pertaining to server  as stored in tag repository  is unlikely to change often. For example, server  is unlikely to stop being \u201cphysical,\u201d is unlikely to become a \u201cmailserver,\u201d and is unlikely to be switched to \u201ctesting\u201d from \u201cproduction.\u201d Similarly, as a webserver it is unlikely to cease running \u201cApache\u201d in favor of a different application, and while its IP address(es) could change, this will likely be a very rare event. Accordingly, in some embodiments, an administrator manually provides at least some of the information pertaining to server  to tag repository  and is responsible for keeping the information in tag repository  current (e.g., via a graphical interface or command line interface). In contrast to server , various information pertaining to virtualized servers may frequently change. If desired, an administrator can manually address such changes (e.g., by making edits to the contents of tag repository ). In various embodiments, additional infrastructure is provided to streamline the collection and maintenance of such information. For example, also included in the environment shown in  are agent  and log server , both of which are configured to collect virtual machine information (hereinafter \u201cVM information\u201d) from hosts, such as host , and to provide the information to data appliance .","Virtual machine information can be collected in a variety of ways. As a first example, in some embodiments, when a new virtual machine is provisioned, the host sends agent  (e.g., in conjunction with a startup script) virtual machine information that can include both attributes of the newly provisioned system, as well as any tags (e.g., specified in the script). This can be accomplished using an HTTP Representational State Transfer (REST) call that includes the IP address of the newly provisioned machine, and a set of tags. As a second example, agent  can use an application programming interface (API) provided by the host operating system on host  to extract information from the host about the virtual machines running on it (e.g., virtual machines  and ). As another example, suppose host  lacks such an API. Host  can be configured to log information (including information pertaining to its virtual machines (e.g., ) to a log server . Log server  can be configured to provide the information to agent , which in turn provides the information to data appliance . Log server  can also provide the information directly to data appliance  directly, as applicable. The collected VM information is stored in VM information repository  and is also used to populate tag repository  as applicable. In some embodiments, agent , log server , and\/or other infrastructure are configured to collect information pertaining to physical servers in addition to or instead of collecting information pertaining to virtual servers.","As shown in , agent  is physically separate from data appliance . The functionality of agent  can also be incorporated into data appliance  (or another device) and standalone agent  (and\/or log server ) omitted as applicable. In some embodiments, appliance  makes available an API usable by hosts  and\/or  to provide appliance  with tags (e.g., directly into tag repository ). Further, while VM information repository  and tag repository  are shown as separate repositories in , the information contained within those respective repositories can be combined into a single repository (or partitioned into more than two repositories) and the techniques described herein adapted as applicable.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2A","FIG. 2A","FIG. 2A","FIG. 2A"],"b":["202","206","112","116","120","102","202","208","210","212","214","150","102"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2B","b":["102","250","106","116","116","252","254","256","102","250","116","250","102","116","108","250","116","106","108","116","250","102","250","102","112","112","250","102"]},"Creating Address Groups","Suppose an administrator of appliance  (hereinafter referred to as \u201cAlice\u201d) is responsible for maintaining policies in appliance  that govern communications involving all of Acme's webservers. As mentioned above, Acme maintains one dedicated production webserver , but when demand requires it, additional virtualized webservers (e.g., virtual webserver ) are provisioned. Alice can manually configure policies applicable to server  (e.g., by referring to its specific IP address(es) in particular policies ), and whenever virtualized webservers are needed, she can manually configure policies applicable to those virtualized webservers as well. Using the techniques described herein, however, Alice can also create an \u201caddress group,\u201d which, as will be described in more detail below, will allow her to specify policies applicable to a set of items, based on match criteria, without requiring her to know specific details about the set membership.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3","b":["300","102"]},"In interface , Alice supplies a name for her new group (\u201cProductionWebservers\u201d) in region . She supplies a description of the group in region . In region , the current list of group members is shown. Since Alice has just started creating this group, no group members are present. To add members to the group, Alice interacts with region . In the embodiment shown, Alice can add group members in a variety of ways.","As shown in , Alice has entered a Boolean expression, \u201cproduction & webserver,\u201d indicating that she would like to add all devices that have both a tag of \u201cproduction\u201d and a tag of \u201cwebserver.\u201d Suppose that at the time Alice is creating her group, webserver  is online and operating normally. Virtual webserver  is not needed (because demand on webserver  is low), and so it is not currently executing. Accordingly, when Alice selects \u201cAdd\u201d box , only webserver  will appear in region  (as a current member of the group). In the event virtual webserver  is later provisioned, it will automatically be included in the \u201cProductionWebservers\u201d group. Similarly, if other production webservers (whether physical or virtual) are brought online in network , they will automatically be added to Alice's group. In addition to specifying Boolean expressions in region , Alice can also explicitly add particular nodes (e.g., by providing an IP address, range of IP addresses, fully qualified domain name, or other appropriate identifier of the particular node(s)). Alice can also create nested groups by including an identity of an existing group in region . Once Alice has finished editing her new group, she clicks \u201cOK\u201d button  and her group is saved (e.g., into group definitions  of ).","In some embodiments, interface  makes available various tools to help Alice determine how to define the members of the group she is creating. For example, if Alice clicks on \u201cTag list\u201d button , a filterable list of all tags in tag repository  is shown to Alice and she can select which tags she would like to be populated into region  by interacting with the list and adding any applicable Boolean operators. As another example, if Alice clicks on \u201cAsset list\u201d button , a filterable list of all nodes in network  (also referred to herein as \u201cobjects\u201d) is shown to Alice and she can similarly identify particular network nodes she would like to be included. Appliance  can also make available other interfaces to assist Alice in creating and maintaining groups. For example, appliance  can make available (e.g., via a \u201cView\/Modify\u201d interface) a listing of all groups included in definitions , and, if desired by Alice, detailed information about the membership of a given group (e.g., current number of members, current member identity, historical member identity, why a particular member was included (e.g., in the case of a Boolean expression), etc.).","The following are additional examples of groups that can be created using interface . Alice can create a group called \u201cEngineering\u201d which maps to the portion(s) of the enterprise network assigned to the Engineering department. One way Alice can populate the group is to provide the range of IP addresses assigned to the Engineering department. Alice can use other identifiers, such as fully qualified domain names and netmasks, instead of or in addition to IP addresses\/ranges of IP addresses. Another example group is one that includes any virtual machine images running on host machine . One way Alice can populate this group is by including in region  the unique tag added by host machine  to tag repository  whenever starting virtual machines (e.g., tag=\u201cRunsOnHost2\u201d). Yet another example group is hierarchical: Alice can make groups for various operating system variants (e.g., \u201cWindows 7\u201d and \u201cWindows 8\u201d). Alice can then make a \u201cWindows\u201d group by \u201cOR\u201ding each of the variant groups together. In some embodiments, some groups are created by default by appliance  and need not be configured by Alice. As one example, groups defined based on system attributes, such as the \u201cWindows 8\u201d group, can be included in group definitions  by the manufacturer or other appropriate entity.","Dynamic Policies",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 4A","FIG. 4A"],"b":["402","142","102","300"]},"Policies, such as policy , are compiled () and, at runtime, used in enforcement by data appliance . Specifically, during compilation, the address group object (\u201cProductionWebservers\u201d) will be replaced with the IP address of each member of that group, based on the information stored in tag repository  (and VM information repository  as applicable). As will be described in more detail below, when group membership changes (whether the adding or subtracting of members, or changes to members), any applicable firewall rules will be updated.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 4B","b":["110","116","402","110","110","404"]},"Suppose the load on webserver  increases, causing virtual webserver  to be provisioned. As part of the provisioning process, tags associated with webserver  are entered into tag repository . In response, appliance  detects a change to the ProductionWebservers group, and that a new rule needs to be compiled.  shows policy  as recompiled after virtual server  is provisioned. Specifically, the IP address of virtual server  now has an entry  (in addition to the existing entry  for webserver ) indicating that HTTPS traffic to it is permitted. When webserver  (or any new server) is brought online, typically several policies will be implicated (e.g., allowing access to the server to anyone via SSH, allowing other kinds of access to the server via anyone in the Engineering department, etc.). Appliance  is configured to automatically recompile or otherwise refresh any additional such rules, as needed.","Now suppose virtual webserver , which is shown in  as being hosted by host , is migrated to host  as indicated by line . One reason for the migration is if host  has a hardware or other failure. The IP address of virtual webserver  changes as a result of the migration (i.e., from 10.5.125.27 to 10.2.25.2).  shows policy  as recompiled after virtual webserver  is migrated. Specifically, the IP address in  has been changed () to reflect the current IP address of virtual webserver  after migration.","Enforcing Policies",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 5","b":["102","102","502","504","102","510","102","102","506","508","102","512","512","104","120","102"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 6","FIG. 6","FIG. 3"],"b":["102","602","602","312","300"]},"At , the policy is compiled into one or more rules. As previously explained, appliance  uses various information (e.g., stored in repository , repository , policy repository , and\/or group definitions ) to compile rules () enforceable by data appliance . One example of the processing performed at  is seen in , where a policy that includes the address object \u201cProductionWebservers\u201d () is compiled into one that uses the IP address of each of the group members (in , a single IP address). Note that while  depicts a policy in which the address object appears in the \u201cDestination\u201d portion of the policy, address objects can also\/instead be used in the \u201cSource\u201d portion.","Finally, at , the compiled rule is enforced. As one example, at , rule  is enforced with respect to physical webserver . As another example, once virtual webserver  comes online, a similar rule () will also be enforced with respect to virtual webserver . If virtual webserver  migrates, is decommissioned, or if another virtual webserver is brought online, appropriate rules can be recompiled, or added\/removed, as applicable.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 7","FIG. 7","FIG. 2B"],"b":["102","702","116","106","102","250","116","106","108","104","106","104","108","120","116","102","104","106","104","102","202","144","150","108","108","120","104","102","116","144","150","104","120","102"]},"At , a determination is made as to whether any firewall rules need to be recompiled based on the changed information, and those rules are recompiled (). As one example, when virtual machine  migrates from host  to host , rule  will need to be recompiled (as rule ) so that policy  continues to be satisfied. As another example, other attributes of a system might change (e.g., upgrading the operating system), but, if such attributes are not used as filters (e.g., in any address groups), there will be no need to recompile any rules.","Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding, the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Various embodiments of the invention are disclosed in the following detailed description and the accompanying drawings.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4D"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
