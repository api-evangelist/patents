---
title: Methods and systems for data service development
abstract: Development of data services can be enhanced through the use of methods and systems that automate aspects of the build process. Particularly, software can be used to automatically generate test cases and incorporate test results into documentation as part of the build process based on an updated Application Programming Interface (API) specification to generate up-to-date and accurate Software Development Kit (SDK) artifacts. A method can comprise accessing data defining an API for a data service, such as Web Application Description Language (WADL) or Web Service Description Language (WSDL) data. The method can further comprise identifying a test case for a service call that can be made via the API based on the data defining the API, and generating test code, the test code configured to evaluate the test case by making the service call. The test code can be used for evaluating the test case(s) in order to ensure requests and/or responses are consistent with the API definition.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949792&OS=08949792&RS=08949792
owner: Adobe Systems Incorporated
number: 08949792
owner_city: San Jose
owner_country: US
publication_date: 20090818
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The disclosure below generally relates to development of network-based computing resources, particularly to development of data services.","Web services and web applications include software systems that support machine-to-machine interaction over a network. For example, a web service or web application may comprise one or more application programming interfaces (APIs) that can be accessed over a network and executed on a remote system hosting the requested service or application. Typically, available functionality is specified in an API and corresponding documentation for use in invoking the web service. For instance, some web services may be defined using the Web Application Description Language (WADL), which is an XML-based format that describes services in a machine-processable way and\/or the Web Service Description Language (WSDL), which is an XML format for describing web services, such as by defining ports and messages.","Development of a web service or web application can raise logistical challenges. For example, the web service\/application may be developed to include a software development kit (SDK) for clients that includes detailed reference documentation, client libraries for invoking the web service\/application in target languages, and sample applications\/code. A change to the underlying API can result in a new \u201cbuild\u201d that entails updating the code that provides the functionality of the service\/application, updating the documentation, updating the client libraries, and updating\/revising other artifacts. Additionally, testing may be performed to ensure that the service\/application as updated actually performs as intended.","Development of network-based computing resources can be enhanced through the use of methods and systems that automate aspects of the build process. Particularly, one or more software tools can be used to automatically generate test cases and incorporate test results into documentation as part of the build process based on an updated API specification to generate up-to-date and accurate SDK artifacts.","Embodiments of a method can comprise accessing data defining an application programming interface for a data service, such as WADL or WSDL defining some or all aspects of a web service. The method can further comprise identifying a test case for a service call that can be made via the application programming interface based on the data defining the application programming interface, and generating test code, the test code configured to evaluate the test case by making the service call. The test code can be used for evaluating the test case(s), and the method can comprise storing test results in a computer-readable medium.","In some embodiments, a method can comprise generating, based on the data defining the application programming interface, at least one client library comprising code for making the service call. The test code to evaluate the test case can be generated so that, when executed, functionality provided via the client library is used to make the service call. Evaluating the test case can comprise determining if, when used, the code of the client library makes a request that meets requirements for a request as specified in the data defining the application programming interface.","For example, an HTTP GET request generated by the library can be evaluated to ensure the request is not inconsistent with the API specifications. Additionally or alternatively, evaluating the test case can comprise determining if the data service provides output that meets requirements for a response as specified in the data defining the application programming interface. In some embodiments, a documentation template can be identified and used to produce a reference document by inserting at least a portion of the code of the client library into the documentation template.","In some embodiments, a method comprises storing a wiretrace, the wiretrace comprising data sent to the data service and received from the data service while the test case is evaluated. As an example, the wiretrace can include HTTP requests and responses captured prior to any encryption used in communicating with the service. At least some of the wiretrace can be included in documentation in addition to or instead of code. The client libraries, documentation, and\/or other artifacts can be included in a software development kit (SDK) that may enhance the development experience for developers of client applications for accessing the data service.","Embodiments include computing systems and computer-readable media comprising program code for providing aspects of the present subject matter. These illustrative embodiments are mentioned not to limit or define the limits of the present subject matter, but to provide examples to aid understanding thereof. Illustrative embodiments are discussed in the Detailed Description, and further description is provided there. Advantages offered by various embodiments may be further understood by examining this specification and\/or by practicing one or more embodiments of the claimed subject matter.","Reference will now be made in detail to various and alternative exemplary embodiments and to the accompanying drawings. Each example is provided by way of explanation, and not as a limitation. It will be apparent to those skilled in the art that modifications and variations can be made. For instance, features illustrated or described as part of one embodiment may be used on another embodiment to yield a still further embodiment. Thus, it is intended that this disclosure includes modifications and variations as come within the scope of the appended claims and their equivalents.","In the following detailed description, numerous specific details are set forth to provide a thorough understanding of the claimed subject matter. However, it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure the claimed subject matter.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","102","102","104","104","106","106","110","108","112"]},"The data service may, for example, comprise a web service provided by one or more server-side applications  whose functionality is invoked via application programming interface (API) . For instance, the web service may be implemented as a representational state transfer (REST) architecture in which the clients provide calls to remote methods via HTTP requests that can include one or more (and typically several) parameters using a format specified in documentation for API . In response, server-side application(s)  can return responses using a structure\/format also specified in documentation for API  or elsewhere. Although a single API is illustrated for the sake of simplicity, a data service may implement any number of APIs.","In this example, client platforms A and B utilize respective client applications  and runtime libraries  to invoke the web service. As an example, client application A and runtime library A may represent an implementation based on the Ruby programming language, while client application B and library B may represent an implementation based on the ActionScript programming language. This example depicts libraries  at clients . For example, the libraries  may be maintained separately (e.g., dynamically linked at runtime). However, in some embodiments, libraries  may or may not reach clients -for example, a library  may be incorporated into a client application  at the time of development and thus may not be separately provided to a client.","The entity or entities that provide the web service may utilize one or more service development platforms  to execute one or more applications, programs, or components collectively illustrated as build system  to create and maintain the server-side application(s)  that provide the web service functionality. This is conceptually illustrated by dotted line . Service development platform  may comprise the same server or a different server that actually executes server-side application(s) . In some embodiments, the web service provider may specify the functionality of the web service via WADL or WSDL as noted above. Build system  can be used to automatically generate suitable code for providing server-side application(s)  based on the WADL, WSDL, or other specification data.","In accordance with one or more aspects of the present subject matter, build system  can also be used to generate code to test aspects of server-side application(s) . Thus, connection  is illustrated to represent build system  invoking the functionality of server-side application  via API  by running test code. In practice, build system  may perform tests using a separate test build of the web service rather than the \u201cproduction\u201d version (if any).","To facilitate the development process, build system  may also be configured to provide software development kit (SDK) artifacts  for use by developers. This is conceptually illustrated by dashed lines  leading to developer platform , although developer platform  may use network  to actually receive the artifacts. Developer platform  represents one or more computing devices configured using suitable development application(s) . For example, a development application  may comprise an integrated development environment (IDE) such as the Eclipse\u00ae development application. As another example, development application  may comprise a web authoring tool such as Adobe\u00ae Dreamweaver\u00ae or Fireworks\u00ae used to develop a client application  implemented as a web page or plugin.","In this example, as illustrated by dashed lines , developer platform  is used to provide both client applications A and B. In practice, many different client-side developers may rely on SDK artifacts provided by web service developers to develop different types of client applications. For example, in another embodiment client application A is a standalone application for accessing the web service and is developed by a first developer while client application B is a web page or plugin for accessing the web service and is developed by a second developer.","SDK artifacts  can include runtime libraries  for one or more languages to facilitate the development process for distribution with client applications  for use at runtime and\/or for use by developers writing standalone client applications . Additionally, API documentation can be included to define the web service in terms of input and output parameters and syntax. Finally, additional reference documentation can be provided that includes sample code and sample input\/output data (\u201cwiretraces\u201d below).","The sample code and wiretraces may be of particular use to client-side developers since, ideally, the sample code and wiretraces represent a solid example of how to invoke functionality of the data service. For example, a developer may be able to use a segment of sample code and make minor or no adjustments rather than completely write code from scratch. This ease of development facilitated by a robust SDK may be an important factor in the success of the web service.","However, as a project evolves, conventionally-managed sample code and wiretraces may not always keep up with updates to the service and thus may not always be truly compatible with the latest version of a data service. For example, after a change to the API documentation and sample code may no longer properly illustrate how to use the web service. This issue can be multiplied when a web service is intended for use with multiple different client-side programming language\u2014each client library may require adjustment, for example. Embodiments configured in accordance with the present subject matter, on the other hand, may advantageously provide up-to-date artifacts such as sample code and wiretraces as part of the build process as noted further below.","The computer platforms of  may comprise computing devices with one or more processors configured by software tangibly embodied in computer-readable media (e.g., memory) accessible to the processor(s).  provides an example of a computing platform  configured to provide a build system but a similar hardware architecture can be used for any or all of client platforms , server platform , and developer platform .","Computing platform  comprises one or more processors  connected via a bus  to a memory . Additionally, bus  is connected to I\/O interface  and graphics processor . Graphics processor  drives one or more displays  that can be used to view output of computing platform . \/ interface  provides connections to networking components  (e.g., local area and\/or wide-area connections), I\/O devices  (e.g., mouse, keyboard, speakers, and other input and output devices), and storage  (e.g., computer-readable media such as disk drives).","Memory  represents local and\/or remotely-accessible storage such as RAM. In this example, a build system is embodied in memory and comprises a plurality of components. Particularly, the build system includes code generator module(s) , test code generator module(s) , documentation generator module(s) , test code execution module(s) , version control module(s) , and data . Data  can include both data used to drive the build process (e.g., WSDL, WADL, and\/or other specification data) as well as output code, test case results, and executable files.","Memory  may include additional components and applications such as an operating system and the like. In this example, the build system is depicted as locally hosted with respect to I\/O devices  and display . However, in some embodiments, the build system is hosted on one or more servers interfaced to workstations that handle input\/output tasks.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIG. 2"],"b":"300"},"Block  represents a code generation step. For example, block  can include use of the WADL, WSDL, or other API specification data  to generate source or executable code for actually providing the web service functionally as is known in the art. However, in accordance with the present subject matter, the API specification data  can be used in conjunction with one or more templates  to generate output  that includes source code for generating client libraries and code for generating test cases. The test cases can be used to ensure that the client libraries provide proper requests to the service and\/or to ensure that the service responds in a manner consistent with the API specification.","As a particular example, portions of the API specification relating to input parameters and input structures may be changed by adjustments to a portion of a WADL file in some embodiments. Version control module  may detect the change and trigger a new build process by using code generator module  to parse the API specification in order to generate a set of request and response-based source code classes included in output  for use by clients in handling network connections, marshalling parameters, and validating returned data. The classes can be generated based on adjusting templates  to match the API specification .","For instance, different classes may be generated for interacting with different client-side languages to be supported by the web service by reference to corresponding templates . As an example, a respective set of classes may be generated for each of Java, Actionscript, Ruby, PHP, C++, and\/or other languages to be supported by the web service. The generated classes may assume the presence of base abstractions  provided manually, such as basic classes for receiving\/defining requests, responses, etc. in each language.","In accordance with the present subject matter, output  further includes test code for automatically evaluating the functionality of the web service and libraries based on the WADL, WSDL, or other API specification data. For instance, test code generator(s)  can evaluate calls to the web service as defined in API specification data  to identify which parameters are required and which parameters are optional for particular service calls to the web service and generate code for making the calls via the generated libraries.","As one example, as will be noted below, if five parameters are required, the test code can include six test cases, with one (valid) test case providing all five parameters and five (invalid) test cases each omitting a respective one of the parameters to ensure that the valid request is honored and the invalid requests are treated properly. The test code can also include appropriate source code for initializing test fixtures (e.g., a dummy account to test login activity) and removing the test fixtures once the test is complete. More complex permutations of test parameters can be generated in some embodiments. For example, if a call requires either of two parameters, a test case can be included to determine if the call fails if both parameters are provided and to determine if the call works when either parameter is used without the other.","The source code classes and test code output  can be used during build step  to generate SDK artifacts , , and  that track the most recent changes and\/or additions to the API. For example, the source code classes of output  can be used along with base abstractions  to compile a respective client library  for each supported language by a suitable compiler included in or accessible to the build system. API documentation  can be generated by documentation generator module  based on the API specification data to include a description of each service call along with required parameters, formatting information, and the like. Documentation generator module  may use concept source documents  and code samples  to package reference documentation  for inclusion in the SDK as well.","Build step  can also include execution of the test code included in source and test code output . For instance, test execution module  may compile the client libraries and use the test code to invoke the latest version of the web service via the libraries. Test execution module  can evaluate the test results and store test output and results for use by the web service development team.","In accordance with aspects of the present subject matter, test execution module  can be configured in some embodiments to generate wiretraces for inclusion in reference documents  by document generation module . For example, as each test case is performed, test execution module  can track data provided to the web service and data returned from the web service when a particular call is made to the service. Document generation module  can identify a tag or other indicator corresponding to the call in conceptual documents  and dynamically insert the wiretraces at the appropriate location.","Document generation module  may additionally be configured to insert updated sample code in reference documents . For example, a tag or other indicator corresponding to a particular call to the web service can be identified in the conceptual documents  and snippets from the client libraries that were used to invoke the test cases can be included for easy reference by developers. This insertion may be contingent upon a test execution module  identifying that the test result was successful. Accordingly, the development team can be confident that reference documents  contain up-to-date test code that actually can be used in conjunction with the web service. In some embodiments, publication of the SDK artifacts (e.g., to a web site or other distribution portal) can be contingent upon passing all tests to ensure that the published SDK is valid against the service it was tested against.","Document generation module may also update API documents . For example, concept docs  may include a framework for generating API documentation, such as a series of headers, basic descriptive text, and navigational structure with tagged placeholders for inserting API information. Using the API specification data, document generation module can create suitable API information for insertion. For example, for each service call, a tables or other logical structure with a row corresponding to each input parameter for that service call can be generated. The table may include space for a technical writer to insert text; however, API documentation  may simply comprise a listing of available service calls and parameters, with more detailed documentation included in reference docs .","Block  represents publishing the SDK artifacts for distribution. For example, version control module  can include a file transfer protocol (FTP) application to upload the SDK artifacts to a server at a suitable location. For example, version control module  may place updated SDK artifacts for each supported language in a folder corresponding to the language and nested in a folder corresponding to the presently-active version of the web service. If the build process also includes generation of code for providing the web service, version control module  may also upload suitable code for providing the latest version of the web service.","In some embodiments, a new build is triggered by detecting a change in API specification . However, the change may affect only part of the web service. For instance, a change may be specified for only one supported language, or only a subset of service calls may be adjusted. Revision data  can be used to control build step  to avoid re-building and\/or re-testing unchanged components. For example, if a change affects only one of several supported languages, then only the SDK artifacts for that language can be updated. Similarly, of only certain service calls are updated, then SDK artifacts for those service calls can be generated while SDK artifacts pertaining to unchanged calls can simply be re-used in the latest version.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 4","b":["400","402","404"]},"In some embodiments, for each call, a test case is generated to test invoking the service call for each permutation of fewer than all parameters and a test case is generated to test invoking the call with all required parameters. Thus, block  can include identifying the service calls to be tested and, for each call, identifying required and optional parameters and determining permutations of the parameters to test. At block , code for running each test case is generated and at block  the code is stored for use by the build system.","For instance, if five parameters are identified as \u201crequired\u201d for a service call, then six test cases for that call will be generated\u2014five test cases, each missing one of the required parameters, and one test case providing all the with one of each required parameter absent and a test case is generated to invoke the call. Test cases can also be generated to test the functionality of optional parameters\u2014for instance, for each optional parameter, a test case for invoking the call using the required parameters plus the optional parameter can be generated.","Generating code for running each test case can also include generating code for setting up and removing \u201ctest fixtures\u201d in some embodiments. A \u201ctest fixture\u201d refers to supporting infrastructure for running a test. As an example, to test a login service call, a user account with the web service should be put in place prior to running the test so that a username and password (and\/or other info) included in the test will actually invoke the service. When the test is completed, the user account should be removed. As another example, invoking a service call to remove or edit a file at the web service assumes the existence of the file.","Suitable templates can be prepared by developers for use in setting up and removing test fixtures and can be made available to the build system. For example, a developer may provide a template that includes a class or method for setting up a dummy account, populating a file store, or otherwise establishing test data for a service to work with. The usernames and passwords can be generated to be unique or almost unique, such as by including large random numbers as components of the names. When generating test cases, the build system can reference the template in order to reference a usable username, file, or other parameter.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 5","b":["500","502","504"]},"For example, one or more executable files including test code and fixture setup\/removal code can be run by a test orchestrator such as test execution module  of . For instance, each test case for each service call can be executed in turn by invoking the functionality of the client library (libraries) under test and passing appropriate parameters from the test code, with each test case executed between suitable fixture setup and removal.","Block  represents capturing wiretraces during each test case. For example, test execution module  may monitor serialized input, such as HTTP GET requests or other data provided by the executing test code to the web service. Data returned from the web service can be recorded and stored at block  in a suitable location indexed to the test case and serialized input from the test code. In some embodiments, recording of data sent to and from the web service is enabled via code included in the client libraries. This can allow access to data for transactions that could not be reached using normal wiretrace components\u2014for example, transactions make take place over an SSL channel. By recording from the actual client-side components, the wiretrace data can be captured prior to encryption or after decryption.","Once the test case is complete, then the test fixtures for that case can be removed. For instance, if a test case required use of a user account with a login name and password, the user account can be deleted once the test case is complete.","Once the returned data is available, the data can be compared against the required response as specified in the API documentation. For example, if the response uses a particular XML format, then the response can be validated to ensure it adheres to a schema specified in the API documentation. The request(s) provided by the client library (libraries) under test can also be checked to ensure the behavior of the client library is not inconsistent with the API specification.","For example, the test code may pass all required parameters for a particular service call to the client library, but the client library may not include all the required parameters in a request. This error condition can be determined by evaluating the request provided by the client library against the API specification for the service call in question. As another example, the syntax used by the client library can be evaluated to ensure the syntax matches that specified in the API, and any result handlers of the client library can be checked to ensure the client library has the proper infrastructure to receive all data provided by the data service in response to the request. Other test conditions can be evaluated\u2014for example, the API may specify a certain range for parameters, order of parameters, and the like. Types and restrictions of API parameters (both input parameters and output parameters) can be specified in a standard notation such as an XML schema document.","The test execution module can provide reports or other suitable output for use by a development team in assessing test results. For example, if a library does not provide properly-formed requests and\/or the data service does not provide expected output for a particular test case, an exception message can be provided identifying the service call, client library, and other test case information. The build process may be suspended or discontinued if an error is found to avoid generation of an incomplete SDK.","In some embodiments, the test fixtures can be set up prior to running a plurality of test cases and then removed once all test cases are complete. However, setting up test fixtures and removing test fixtures on a case-by-case basis as noted in the example above may benefit the testing process by reducing the possibility of one test case influencing the results of another test case.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 6","b":["600","602","604"]},"Block  represents inserting test code and wiretraces into respective portions of the SDK documentation and at block  the updated documentation is stored. For example, syntax for invoking a particular service call via an HTTP GET request can be provided along with examples of output in one or more formats can be inserted into respective locations in an HTML page for the service call as noted below. The conceptual documents may include headers and descriptive text along with tags that identify where code snippets and wiretraces are to be embedded. During the document generation process, the corresponding code snippets and wiretraces can be accessed and inserted inline based on locating the tags.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIGS. 7A-7B","FIG. 7A","FIG. 7B"],"b":["700","700","702","706","710","704","708","712","714","716","718"]},"For example, page A can represent documentation for a \u201cFetchArticles\u201d service call. In this example, portion  include as brief description of the FetchArticles service call while portions  and  represent headers for identifying examples of output. In this example, portion  represents an http request inserted into the documentation based on an http request sent during testing.","For instance, API documentation for an initial build of the service may specify the listed URL (http:\/\/services.example.org) and syntax (\/Fetch\/Articles) for invoking the service, along with two required parameters: a query (\u201corange\u201d) in this example, and a login (usuername@example.org).","Based on these required parameters, code for invoking the FetchArticles service may have been generated and executed during the build process. In this example, the testing resulted in XML and JSON output that was captured as a wiretrace and is inserted into the documentation at  and .",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 7B","FIG. 7A"],"b":["700","714","704"]},"In this example, the output format was also changed to rename \u201cSummary\u201d in the returned data to \u201cBrief Summary.\u201d This change has propagated through the build process to the test cases and resulting wiretraces and is automatically represented in the documentation.","In some embodiments, the documentation can also include source code used to generate the example request. For instance, as was noted above, the build process can include generating client libraries for invoking the data service and the testing process can include validating the functionality of the client libraries. As an example, a Java and Ruby client library may have been generated by the build system, compiled, and tested to ensure that the respective libraries generate a proper http GET request for invoking the FetchArticles service.","The respective portions of the libraries used to generate the GET request can be included at appropriate points in the documentation. For example, pages A and B may include an additional field titled \u201cJava Code\u201d and \u201cRuby Code\u201d with the portions of the Java and Ruby libraries used to generate the GET request beneath the corresponding fields. Rather than using the code exactly as generated in the test case, portions of code based on the code for the test case can be used\u2014for example, particular parameter values (e.g., user names, queries) and code related to producing wiretraces can be omitted.","The examples above are not meant to be limiting, and embodiments of a software development kit build system can support any number or type of programming language. The build infrastructure noted above may be extensible to a new programming language by supplying appropriate base abstractions, templates, and updating conversion coding for parsing the API specification and writing client libraries in the new language.","General Considerations","Some portions of the detailed description were presented in terms of algorithms or symbolic representations of operations on data bits or binary digital signals stored within a computing system memory, such as a computer memory. These algorithmic descriptions or representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art.","An algorithm is here and generally is considered to be a self-consistent sequence of operations or similar processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these and similar terms are to be associated with appropriate physical quantities and are merely convenient labels.","Unless specifically stated otherwise, as apparent from the foregoing discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a computing platform, such as one or more computers and\/or a similar electronic computing device or devices, that manipulate or transform data represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the computing platform.","A computing device can include any suitable arrangement of components that provide a result conditioned on one or more inputs. Suitable computing devices include multipurpose microprocessor-based computer systems accessing stored software that programs or configures the computing system from a general-purpose computing apparatus to a specialized computing apparatus implementing one or more embodiments of the present subject matter. Any suitable programming, scripting, or other type of language or combinations of languages may be used to implement the teachings contained herein in software to be used in programming or configuring a computing device.","Embodiments of the methods disclosed herein may be performed in the operation of such computing devices. The order of the blocks presented in the examples above can be varied\u2014for example, blocks can be re-ordered, combined, and\/or broken into sub-blocks. Certain blocks or processes can be performed in parallel.","As noted above, a computing device may access one or more computer-readable media that tangibly embody computer-readable instructions which, when executed by at least one computer, cause the at least one computer to implement one or more embodiments of the present subject matter. When software is utilized, the software may comprise one or more components, processes, and\/or applications. Additionally or alternatively to software, the computing device(s) may comprise circuitry that renders the device(s) operative to implement one or more of the methods of the present subject matter.","Examples of computing devices include, but are not limited to, servers, personal computers, personal digital assistants (PDAs), cellular telephones, televisions, television set-top boxes, and portable music players. Computing devices may be integrated into other devices, e.g. \u201csmart\u201d appliances, automobiles, kiosks, and the like.","The inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components. For instance, processes discussed herein may be implemented using a single computing device or multiple computing devices working in combination. Databases and applications may be implemented on a single system or distributed across multiple systems. Distributed components may operate sequentially or in parallel.","When data is obtained or accessed as between a first and second computer system or components thereof, the actual data may travel between the systems directly or indirectly. For example, if a first computer accesses data from a second computer, the access may involve one or more intermediary computers, proxies, and the like. The actual data may move between the first and second computers, or the first computer may provide a pointer or metafile that the second computer uses to access the actual data from a computer other than the first computer, for instance. Data may be \u201cpulled\u201d via a request, or \u201cpushed\u201d without a request in various embodiments.","The technology referenced herein also makes reference to communicating data between components or systems. It should be appreciated that such communications may occur over any suitable number or type of networks or links, including, but not limited to, a dial-in network, a local area network (LAN), wide area network (WAN), public switched telephone network (PSTN), the Internet, an intranet or any combination of hard-wired and\/or wireless communication links.","Any suitable tangible computer-readable medium or media may be used to implement or practice the presently-disclosed subject matter, including, but not limited to, diskettes, drives, magnetic-based storage media, optical storage media, including disks (including CD-ROMS, DVD-ROMS, and variants thereof), flash, RAM, ROM, and other memory devices.","The use of \u201cadapted to\u201d or \u201cconfigured to\u201d herein is meant as open and inclusive language that does not foreclose devices adapted to or configured to perform additional tasks or steps. Additionally, the use of \u201cbased on\u201d is meant to be open and inclusive, in that a process, step, calculation, or other action \u201cbased on\u201d one or more recited conditions or values may, in practice, be based on additional conditions or values beyond those recited. Headings, lists, and numbering included herein are for ease of explanation only and are not meant to be limiting.","While the present subject matter has been described in detail with respect to specific embodiments thereof, it will be appreciated that those skilled in the art, upon attaining an understanding of the foregoing may readily produce alterations to, variations of, and equivalents to such embodiments. Accordingly, it should be understood that the present disclosure has been presented for purposes of example rather than limitation, and does not preclude inclusion of such modifications, variations and\/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A full and enabling disclosure is set forth more particularly in the remainder of the specification. The specification makes reference to the following appended figures.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 7A-7B"}]},"DETDESC":[{},{}]}
