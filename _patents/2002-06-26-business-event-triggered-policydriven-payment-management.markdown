---
title: Business event triggered, policy-driven payment management
abstract: Techniques are disclosed for using business events as triggers to drive payment processing for electronic commerce. As the business logic of a merchant's e-commerce software application reaches various stages that impact payment considerations, it issues a corresponding event notification. According to preferred embodiments, these event notifications are processed by a policy engine, which locates policy information or rules previously configured for that event. Actions are then carried out, based on the configured policy. The merchant e-commerce application is therefore shielded from the details of the underlying payment processing. New payment types can be provided, and existing payment types can be modified if necessary, by adding/modifying policies; the merchant's e-commerce application does not need to change. This event-driven model allows application developers to focus on creating software for the merchant's key business requirements, and makes it easier to maintain the software.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07558758&OS=07558758&RS=07558758
owner: International Business Machines Corporation
number: 07558758
owner_city: Armonk
owner_country: US
publication_date: 20020626
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates to automated payment processing, and deals more particularly with methods, systems, and computer program products for using business events and configured policy to carry out payment processing for a variety of payment methods.","2. Description of the Related Art","The popularity of electronic commerce (\u201ce-commerce\u201d), or buying goods and services over a network such as the Internet, continues to increase at a tremendous pace. Estimates are consumer electronic commerce transactions will grow from under $10 billion in 1998 to over $100 billion by 2003.","A particular merchant may participate in electronic commerce only with consumers (i.e., in business-to-consumer or \u201cB2C\u201d transactions), or only with other businesses (i.e., in business-to-business or \u201cB2B\u201d transactions). Or, a merchant may participate in electronic commerce for both B2C and B2B transactions.","Getting paid for their goods and services is essential to the merchants involved in electronic commerce, and customers expect the payment process to be easy-to-use, flexible, and reliable. In business-to-consumer transactions, in particular, customers expect merchants to offer the same wide range of payment choices that are found in conventional brick-and-mortar stores and that are offered for mail-order or telephone-order sales.","Many different payment choices are possible for electronic commerce transactions. Credit cards are one popular payment method or \u201cpayment instrument\u201d. Additional choices include debit cards, stored-value cards, gift certificate acceptance, loyalty systems, automated clearing house (\u201cACH\u201d) transactions, wire transfer, and electronic fluids transfer. These payment methods are well known, and have been used for many years in conventional buyer\/seller transactions. Several newer payment methods have been developed in recent years, specifically for electronic commerce. These include electronic checks, electronic cash, and electronic wallets (also referred to as \u201ce-checks\u201d, \u201ce-cash\u201d, and \u201ce-wallets\u201d, respectively).","E-check payments are designed to mimic traditional paper check payments. E-cash similarly, is designed to mimic payment by cash. Typically, e-check payments are carried out by transferring funds from a user's bank account in response to the user making an e-check payment request. For e-cash transactions, a user transfers money from a bank account (or card account) into a separate electronic account, and then makes payments against the funds represented by this account. E-wallets \u201chold\u201d information of the type held by a real wallet, including credit card numbers, expiration dates, billing addresses, and other types of account numbers and information. Using an e-wallet makes the payment process simpler and faster for the user, as the wallet software automatically performs certain payment steps. For example, rather than requiring the user to type in a rather long credit card number and its expiration date when paying with a credit card, the e-wallet software supplies this information automatically, once the user selects which credit card to use for a particular transaction.","Developing software that supports a selection of payment methods for e-commerce is a very complex undertaking, as the logic for processing each payment method may be influenced by a variety of factors, and different payment methods typically each have their own nuances that must be accommodated. For example, a billing address is typically required when processing a credit card payment, but not when processing an ACH transaction. As another example, even though credit cards and gift certificates may both use expiration dates, the meaning of the date is somewhat different for each payment method. Furthermore, each of the payment methods may be offered by a number of different providers, and different providers may have different procedures that must be followed. The payment processing can also be affected by the type of item being ordered. For example, for purchases of services or intangible goods (also known as \u201csoft goods\u201d), the timing at which the buyer's credit card can be charged may be different than if tangible goods (also known as \u201chard goods\u201d) are being sold. In addition, different procedures may apply to a particular payment method depending on the laws and regulations of a country or region in which a purchase is made. For example, in the United States, a credit card cannot be charged for hard goods until those goods have shipped to the buyer, whereas in some other countries, this is not the case.","Accommodating the wide range of pertinent factors involved in payment processing for multiple payment methods within a merchant's e-commerce software tends to make that software overly complex and difficult to maintain, and diverts the developer's attention from addressing the merchant's core business needs.","Accordingly, what is needed are improved techniques for processing electronic commerce payments (or automated payment processing used for other forms of buyer\/seller transactions).","An object of the present invention is to provide improved techniques for carrying out electronic commerce payment processing.","Another object of the present invention is to provide these improved techniques by using configured policy that is driven by business events.","Another object of the present invention to provide improved automated payment processing.","It is a further object of the present invention to provide improved techniques for delivering merchant-neutral payment software functionality.","Yet another object of the present invention is to enable merchant electronic commerce software to be less complex and more independent of nuances associated with various payment instruments.","Still another object of the present invention is to enable merchant electronic commerce software to be created by a third party and offered for sale to a large variety of merchants with varying payment needs in a way that allows new payment types to be incorporated without requiring new versions of the commerce software to be delivered.","Other objects and advantages of the present invention will be set forth in part in the description and in the drawings which follow and, in part, will be obvious from the description or may be learned by practice of the invention.","To achieve the foregoing objects, and in accordance with the purpose of the invention as broadly described herein, the present invention provides systems, methods, and computer program products for policy-driven payment processing. In one aspect, an embodiment of the present invention comprises processing payments by: receiving a business event notification signifying that a payment processing unit has reached a particular business stage; programmatically determining a payment-processing policy to be applied to this payment processing unit; and programmatically determining zero or more actions to be carried out for this payment processing unit, according to the programmatically-determined policy and a current state of the payment processing unit. This technique may further comprise carrying out the programmatically-determined actions, and may also further comprise revising the current state of the payment processing unit to reflect a result of the actions carried out.","More than one payment transaction, and more than one payment method, may be applied to a particular payment processing unit. In this embodiment, each of the payment transactions may represent a different payment method. The actions carried out for the payment processing unit preferably move payment for the payment processing unit toward completion.","A plurality of payment-processing policies are preferably provided, and the selected policy is selected from this plurality.","In another aspect, an embodiment of the present invention comprises providing a policy-driven payment processing system by: providing a plurality of payment-processing policies, each of the policies specifying how payment transactions for a payment method should be carried out; selecting, by a merchant that will use the policy-driven payment processing system, one or more of the provided policies; receiving business event notifications representing payment processing units; programmatically determining the selected policy that corresponds to each of the payment processing units represented by the received notifications; and applying each of the programmatically-determined policies to the corresponding payment processing units, thereby moving payment for the payment processing unit toward completion. This embodiment may further comprise overriding the programmatically-determined selection of policy upon receipt of a first of the business event notifications that represents a payment processing unit, thereby selecting a different policy to be used in the application of the policy. The overriding may consider one or more factors such as: an amount of the payment processing unit; and an identification of a customer for whom the payment processing unit is to be processed; and so forth.","The present invention will now be described with reference to the following drawings, in which like reference numbers denote the same element throughout.","To be competitive, online merchants' e-commerce software must typically offer multiple payment methods to their customers; otherwise, with a few clicks of their mouse, the customers may find a different merchant. In addition, this e-commerce software must keep pace with newly-developed payment methods. However, as discussed above, writing merchant e-commerce software applications so that they address the wide variety of factors that are pertinent to the different payment methods not only significantly increases the complexity of the software (which in turn leads to increased development and support costs), it also distracts the software developer's attention from the merchant's core business issues. The complexity of this task increases exponentially when the merchant software is being created as a product to be marketed to a wide variety of merchants, where the unknown and changing payment needs of future customers must also be met.","Suppose, for example, that a customer places an order for $300 worth of goods from an online merchant. If the customer chooses to pay with a credit card, then the merchant's e-commerce software may request that checks be performed to ensure that this customer has an account with that credit card company, that the provided account number is valid, and that the customer has $300 in credit available on that account. The credit card company, in response to receiving the request, typically places a reservation for the $300 amount on the customer's account but does not yet charge the customer. The actual charge, and the deposit of the $300 into the merchant's account, is not typically processed until notification by the merchant once the goods have shipped. On the other hand, if the customer chooses to pay using an ACH transaction, then no reservation of funds is required (or possible), and thus the funds are typically deposited prior to shipping the goods. (In fact, the deposit of the $300 may be a prerequisite to shipping the goods.) The policy engine disclosed herein allows the merchant to signal that the goods are about to be shipped, and the policy engine then uses the configured policy to decide what that means in a particular instance.","This scenario is representative of the different processing that must be performed based on the type of payment instrument being used. And as mentioned earlier, other factors (such as the laws governing a particular payment) may also affect how payment transactions are carried out. When an order ships in more than one release, or the customer cancels part of an existing order for which a payment reservation has already been made, or adds items to an order after it has been placed, or changes payment information, or uses more than one payment instrument for a single order, the complexity of the payment processing may increase significantly.","An example of this more complex processing, suppose that a customer orders $800 worth of products from a merchant, and that a reservation for this amount is placed on his credit card account. Before the goods are shipped, the customer changes his mind and cancels items costing $200 from his order. The merchant then has a reservation for too much money, and must either cancel the existing reservation and submit a new reservation for $600 or request reduction of the existing reservation by $200; fees assessed by the credit card company may influence how a particular merchant wishes to proceed in this scenario. In a country where the merchant is allowed to collect the finds in advance of shipping the goods, the customer's cancellation means that a refund of already-deposited funds must be generated. Similarly, processing for refunds can vary widely, and typically depends on the type of payment instrument used for the original payment. For example, if a gift certificate was used, then the merchant may want to issue a new gift certificate; if a credit card was used, then the refund typically must be issued to that credit card account (unless the account is closed); and so forth.","The present invention defines novel techniques for payment processing, whereby business events are used as triggers to drive the payment process. As the business logic of the merchant's e-commerce software application reaches various stages that impact payment considerations, it issues a corresponding event notification. According to preferred embodiments, these notifications are received and processed by a policy engine, which locates policy information or rules previously configured by the merchant for that event. Payment actions are then carried out, based on the configured policy. (Optionally, policies may specify actions that do not specifically pertain to making payments, such as actions that may be used for coordinating, synchronizing, or management purposes.) The merchant e-commerce application is therefore shielded from the details of the underlying payment processing. New payment types can be provided, and the processing for existing payment types can be modified if necessary, by adding\/modifying policies; the merchant's e-commerce application does not need to change. This business-event-driven model allows the merchant's application developers to focus on creating software for the merchant's key business requirements.","It should be noted that while preferred embodiments of the present invention are described as interacting with merchant e-commerce software applications, the techniques disclosed herein may also be used advantageously for automated processing of payments in more traditional environments, such as mail-order or telephone-order sales. Thus, the e-commerce environment is described for purposes of illustration but not of limitation. Furthermore, the techniques disclosed herein may be applied to payment processing needs other than payment for orders. Examples include payment of bills and payment of fees, including recurring payments therefor.","In preferred embodiments, payment-method-specific policies are pre-supplied that are adapted to responding to a number of familiar business events. Exemplary order-processing business events, and sample policies for those business events, are described herein. The exemplary order-processing business events are referred to herein as \u201corder capture\u201d, \u201crelease to fulfillment\u201d, and \u201cfulfillment\u201d. As used herein, the term \u201corder capture\u201d represents the event of obtaining information about a customer's payment, the term \u201crelease to fulfillment\u201d represents the event of preparing to ship goods (or to provide services) to the customer, and the term \u201cfulfillment\u201d represents the event of having shipped goods (or provided services) to the customer. (For ease of reference, subsequent discussions refer only to goods and shipment of goods; however, this is intended to encompass the provision of services. The point at which a service is considered to have been \u201cdelivered\u201d or provided to a customer may depend on the type of service. It will be obvious to one of ordinary skill in the art how the discussions of shipment of goods may be adapted to the provision of services.) Different and\/or additional business events may also be supported by an implementation of the present invention. For example, the inventive techniques disclosed herein may be used for processing payments for other types of bills, payments of various types of fees, and so forth. (The term \u201cpayment processing unit\u201d may be used generally to describe the business transactions for which payments are being processed, where the payment processing unit corresponds to the order, bill, fee, etc.) In general, the order capture business event signifies the point in processing when information on an order is recorded, and payment instruments are validated. The release to fulfillment business event signifies that suitable payment activities are completed that are required to reserve payment against a group of order items that are ready to be included in suitable releases. The fulfillment business event signifies the point in processing when it is appropriate to deal with payment activities that may be necessary after goods have been sent out from a fulfillment center for each release. (Note that the actual payment actions to be carried out and the input states and desired next states associated with validating, reserving, and finalizing payment are completely specified by the policy, according to preferred embodiments of the present invention.)","Use of one or more of the pre-supplied policies may be configured by a particular merchant in order to select the payment-processing behavior associated with that policy. Optionally, an implementation of the present invention may be adapted to allow merchants to define additional policies and\/or to modify how pre-supplied policies operate, once the teachings disclosed herein are known, and implementations providing this optional capability are within the scope of the present invention. For example, a merchant might copy a pre-supplied policy and then adjust that policy to meet its needs; the adjusted policy can then be configured as active for this merchant.","According to preferred embodiments, each payment-method-specific policy addresses each of the business events (i.e., responds to corresponding event notifications). A particular payment method may have more than one policy. For example, a policy may be provided for one brand of credit card, while a different policy is provided for a different credit card brand. Or, multiple policies might be provided for a payment method such as gift certificates, in order to define different processing approaches for that payment method. More flexibility can therefore be provided to merchants, who have only to select the policy that meets their needs for a particular payment method.","Referring now to , a high-level illustration is provided showing how an embodiment of the present invention operates to process a customer's payment. According to preferred embodiments, a merchant first selects which policies it wishes to use. This is represented in  by a merchant's system administrator  (or other personnel or automated processing) using a configuration interface  to select one or more policies  from a policy database or other repository. (Note that preferred embodiments are described herein in terms of a multi-merchant system, where individual merchants then select the policies they wish to use. Alternatively, the present invention may be used advantageously in a single-merchant system. In this case, the policies  may be limited to those which are deemed useful by this merchant, and the configuration process for that merchant comprises selecting which policy to apply to which payment option. It will be obvious to one of skill in the art how the processing described herein applies to the deviant case of supporting a single merchant.)","When in operation, the policy-driven payment processing is invoked when a customer  transmits an order  to a merchant's e-commerce software , and while processing the payment for this order, the merchant's software  generates a business event notification . This business event notification  is received by the policy engine , which then accesses  the appropriate policy to determine which action(s) should be carried out for this point in the processing of the payment. In preferred embodiments, the appropriate policy is determined by: which merchant generated the event notification; the type of payment instrument being used for this payment; and which policy this merchant selected for processing payments that use this payment instrument. Which action(s) is\/are appropriate for a particular invocation of that policy is then determined by a number of factors, including: the business event represented by the event notification; and the current state of this particular payment, including values of one or more variables which pertain to the payment.","Upon determining one or more actions specified by the policy, the policy engine  calls  a generic payment system  to perform the specified actions. During the generic payment system's processing, it carries out the actions. For example, the generic payment system creates actual payment messages, and interacts with back-end components such as credit card companies and acquiring banks to perform credit checks, transfer funds, and so forth. (A detailed discussion of how the generic payment system operates is beyond the scope of the present invention.)","After triggering the specified payment actions, the policy engine  may return a response  to the calling merchant software , which in turn may return a response  to the client software operating on customer 's computing device.","As the payment processing continues, one or more subsequent business event notifications  may be generated by the merchant software . These subsequent business event notifications drive the progression of the payment processing (and may be, but are not necessarily, in response to end-user interactions with customer ).","The policy-driven payment processing of the present invention is preferably implemented as a layer of software that maps business events to payment actions, based on configured policy. The merchant's e-commerce software can then be written with reference to selected business events, and does not need to account for the details of how different payment types are affected by factors such as by the country or geography whose laws govern the payment, the different types of risks that may be inherent in different types of payment instruments, and so forth. Instead, those details are accounted for by selecting appropriate policies, based on how the policy impacts the processing for particular payment instruments.","Preferred embodiments of the present invention carry out policy-driven payment processing using a state transitions model, whereby a payment progresses toward completion based on the applicable policy's definition for the payment's current state, values of pertinent variables, and the particular business event for which a notification is generated. The application programming interface (\u201cAPI\u201d) to the policy engine therefore supports a plurality of payment-related events, and the merchant's e-commerce software generates notifications for those events at appropriate points during processing.","As a configured policy operates to direct the payment processing software, a customer's payment moves from one payment processing state to another. According to preferred embodiments, the payment processing states are set by the generic payment system as it processes a payment transaction.","The policy inherently deals with the risk models of various payment instruments. For example, the funds to pay for an order may be captured earlier or later in the payment cycle, in accordance with the policy selected by the merchant. The type of action to be taken during the various phases can also be chosen by selecting a particular policy, and these actions may vary from one payment instrument to another or among policies for a single payment instrument.","As stated earlier, preferred embodiments are described herein, by way of illustration, in terms of the following business events: order capture, release to fulfillment, and fulfillment. Several representative payment processing actions and payment processing states are also used herein to describe operation of preferred embodiments, by way of illustration. These representative actions are: \u201ccreate payment\u201d, \u201capprove payment\u201d, \u201cmodify payment approval\u201d, \u201cdeposit payment\u201d, and \u201creverse payment deposit\u201d. The representative payment states are: \u201cpayment approved\u201d, \u201cpayment declined\u201d, \u201cpayment deposited\u201d, \u201cpayment void\u201d, \u201cpayment approval has expired\u201d, \u201cpayment is pending\u201d, and \u201cnull\u201d. (A \u201cnull\u201d payment state indicates that a payment object has not yet been created.)","As the generic payment system processes the actions called for by a policy, the current payment state may change. For example, a payment approval might expire or a pending payment might complete, according to the generic payment system's processing. The policy accounts for these state changes upon receiving the next business event notification. The policy engine may learn the current state by querying the generic payment system, by accessing a payment object which stores the current state, etc.","According to preferred embodiments, a \u201cvalidation\u201d phase is carried out responsive to receiving an order capture event notification, a \u201creservation\u201d phase is carried out responsive to receiving a release to fulfillment event notification, and a \u201cfinalization\u201d phase is carried out responsive to receiving a fulfillment event notification. Individual policies control what actions are taken in each of these phases, as will now be described with reference to the example policies in  and -. In the state transitions model used in preferred embodiments, a separate table or set of transitions is defined for each of these three phases, and a policy comprises one of these state transition tables for each of the phases. (Tables are used for illustrative purposes; other ways of expressing this information are also within the scope of the present invention.)","The first example policy, which is represented in tabular form by , is representative of credit card payment processing in North America. This policy calls for authorization of a customer's credit card to be performed immediately upon receiving the order capture event notification. According to this policy, the authorization must complete successfully before goods are shipped, and the payment will be captured only after the goods ship. The manner in which this information is represented in the tables of  will now be described.","Column headings in the policy tables of  (as well as ) refer to a \u201crequested amount\u201d and a \u201ccurrent payment amount\u201d. At each phase of processing, the policy system is asked to process payments for a certain amount. Payment actions required according to cells in the policy table may perform further processing of payments already in progress. For example, if the action required in the finalization phase is the capture of a credit card, that capture is acting on a previous authorization. (The term \u201ccapture\u201d in this case refers to a deposit action and the term \u201cauthorization\u201d refers to an approval.) The amount of the requested deposit will typically be the same as the amount of the approval, but in some cases the amounts will be different. In addition, a change of payment information or the addition or removal of order items might cause a particular phase of processing to be repeated. In this case, generic payment objects may already exist for this order, for amounts that are no longer accurate. Thus, the discussions herein use the term \u201crequested amount\u201d to refer to the amount of payment being processed in the current phase, and the term \u201ccurrent payment amount\u201d refers to the amount of an existing payment object (if any). According to preferred embodiments, the policy encodes actions required to deal with all such changes introduced into the system.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 2","FIG. 8"],"b":["830","260"]},"The processing in  will be described in terms of seven different entry states, each of which corresponds to a row of the transition tables, and three different conditions, each of which corresponds to a column of these tables. The seven entry states were discussed previously as \u201crepresentative payment states\u201d.","The payment's current state upon entry may be \u201cpayment approved\u201d, corresponding to the first row  of table . If the payment is already approved, and the approval amount matches the amount for a particular release (i.e., shipment), then there is no further validation required at this point. This is represented in table  by the \u201c---\u201d notation in column . The payment's current state therefore remains set to \u201cpayment approved\u201d. Columns  and  account for situations in which the requested amount (i.e., the amount of the payment being validated for this request) is greater than or less than, respectively, the current payment amount (i.e., the amount of the approval). Thus, when the payment is already approved (row ), but the order amount to be validated is greater than the amount already approved (column ), then this policy specifies that a \u201cmodify payment approval\u201d action will be triggered, using as its amount the amount of the payment for this validation (i.e., the requested amount, shown in the table as \u201cRA\u201d). Similarly, if the amount to be validated is less than the amount of the approval (column ), this policy specifies that the modify payment approval action is to be triggered to replace the already-approved payment with an approval for the amount being validated. Assuming that the modify payment approval action completes successfully, the payment's current state remains set to \u201cpayment approved\u201d. (Or, one of the other states may be used, as determined by the generic payment system software as it carries out the modify payment approval action.)","Contrast the credit card processing called for by the policy in table  of  to the processing specified in table  of . Table , along with tables  and  of , represent a second example policy. This policy might be selected for processing ACH transactions in North America, where the governing laws allow ACH transactions to complete before goods are shipped. Accordingly, this policy calls for the deposit of funds to be completed during the reservation phase, rather than waiting until the finalization phase.","Table  of  shows that, regardless of the payment's current state when an order capture event notification is received for this policy, no processing is required in the validation phase. See row . Instead, the current state transitions to a \u201cnull\u201d state, as shown at  (and the payment will then be processed further during the reservation phase, upon receiving a release to fulfillment event notification).","Returning to the discussion of the credit card policy in table , and how it controls processing in the validation phase, suppose that the payment's current state upon entry is \u201cpayment declined\u201d. For example, a payment authorization process may have been attempted previously, when the customer did not have sufficient available credit for this order. This state corresponds to row . For this case, all three columns of table  indicate that the appropriate action under these circumstances is to trigger an \u201capprove payment\u201d action, using as its amount the amount of the validation request (shown in the table as \u201cRA\u201d). Assuming that the approve payment action completes successfully, the payment's current state is changed to \u201cpayment approved\u201d.","Alternatively, the payment's current state upon entering the validation processing might be \u201cpayment deposited\u201d. This state corresponds to row . When the payment is already deposited, nothing else is required in the validation phase, and thus all three columns of table  indicate that no action is required before transitioning to the \u201cpayment approved\u201d state.","The payment's current state upon entering the validation processing may be \u201cpayment void\u201d, represented by row . \u201cPayment void\u201d is used, in preferred embodiments, when a payment was previously approved but was subsequently reversed. If the amount being validated is greater than the amount that was found to be void (column ), then the policy specifies that an \u201capprove payment\u201d action will be triggered, using as it's amount the value \u201cRA\u201d. Cases where the validation amount and the amount found to be void are equal (column ) or where the amount found to be void is greater than the validation amount (column ) are considered unreachable, as indicated by the \u201c\/\u201d notation in the table. (That is, the current payment amount or \u201cCPA\u201d for a void payment should be zero, and therefore the validation amount will always be greater; this case is represented by column ). Thus, assuming that the approve payment action in column  completes successfully, the payment's current state is changed to \u201cpayment approved\u201d.","Row  represents a current payment state, when performing the validation processing, of \u201cpayment approval has expired\u201d. In all cases, a modify payment approval action is triggered, using as its amount the amount (\u201cRA\u201d) to be validated for this request. Upon successful completion of this action, the payment's current state is changed to \u201cpayment approved\u201d.","The \u201cpayment is pending\u201d state is represented by row . This state may result because the authorization process was attempted when the credit card processing system was unavailable. In all cases, this policy specifies that the caller should be informed that the validation phase needs to be retried again later. Retry actions may then be carried out, whereby validation processing is repeated (and the underlying generic payment system may reset the payment state during this processing). A failure condition may be generated as an alternative to the retry actions, or after retry attempts have failed. The retry process may be performed in an automated manner, or may be under control of a person.","Finally, row  represents the \u201cnull\u201d state. Since no payment object exists, the requested amount will always be greater than the current payment amount (which will have been initialized to a zero or null value). Therefore, column  applies. A new payment object is created by triggering the \u201ccreate payment\u201d action, and the \u201capprove payment\u201d action is then triggered. If this approve payment action completes successfully, the payment's current state is changed to \u201cpayment approved\u201d.","Once the merchant's e-commerce software determines that the customer's order, or some part thereof, is ready for shipment, it generates a release to fulfillment event notification. The logic for handling the release to fulfillment event (see the description of Block  of , below) applies the payment reservation policy (i.e., the payment reservation phase of the policy) selected by the merchant. For credit card payments when the policy in  is active, this event notification is processed as specified by table  of , which represents the reservation phase. By comparing table  to table  of , it can be seen that the entry states and relationships between the requested amount and current payment amount are handled in an identical manner to that which has been described for the validation phase.","Returning again to the ACH transaction policy example, table  of  specifies how the reservation phase processing is to be carried out. If payment has already been approved (row ) in the requested amount (column ), then a \u201cdeposit payment\u201d action is invoked for this amount, after which the current payment state transitions to \u201cpayment deposited\u201d. (See the desired state at .) However, if the amount already approved is different from the amount being released for shipment (columns  and ), then a modify payment approval action is triggered for the requested amount, followed by a \u201cdeposit payment\u201d action for this amount. Note that this processing is identical to the reservation phase processing for credit card payments specified in row  of table , except for the addition of the deposit payment action (and the different state transition that results from successful completion thereof).","If payment was previously declined (row ), then an \u201capprove payment\u201d action is triggered (columns , , and ) for the requested amount, followed by a \u201cdeposit payment\u201d action for this amount. The current payment state then transitions to \u201cpayment deposited\u201d.","If payment for the requested amount has already been deposited, as represented by the intersection of row  and column , then the policy specifies that no further payment processing is required at this point, and the payment state remains set to \u201cpayment deposited\u201d. If payment has been deposited, but the amount is less than the amount of goods being released for shipment (column ), then a new payment object is created by triggering the \u201ccreate payment\u201d action. The amount used for this payment object is the difference between the amount to be released and the already-deposited amount, shown in table  as \u201cRA-CPA\u201d. An \u201capprove payment\u201d action for this amount is then triggered, followed by a \u201cdeposit payment\u201d action for this same amount. Assuming these actions complete successfully, the payment's current state will be changed to \u201cpayment deposited\u201d. If the amount being released is less than the amount that has already been deposited (column ), then no payment action is possible since, for this example policy, the theoretical ACH payment system does not allow transactions to be reversed or refunds to be issued. (Preferably, the payment is marked in some way to allow a human to find the payment and initiate refunds for these unusual cases. Alternatively, an automated refund processing mechanism might be used.)","The ACH transaction processing for a payment in the \u201cpayment void\u201d state, represented by row , has 2 unreachable states as indicated by columns  and . Refer to the discussion of row , above, which applies equally to these unreachable states. When the requested amount is greater than the amount represented by the voided payment, then column  applies and an \u201capprove payment\u201d action and a \u201cdeposit payment\u201d action are triggered for the requested amount.","The payment approval has expired state (row ) does not apply (and is therefore unreachable) for ACH transactions.","If the current payment is in \u201cpayment is pending\u201d state (row ), then in all cases, this policy specifies that the caller should be informed that the reservation process needs to be retried again later.","Finally, row  represents the \u201cnull\u201d state. Since no payment object exists, the requested amount will always be greater than the current payment amount. Therefore, column  applies. A new payment object is created by triggering the \u201ccreate payment\u201d action, and the \u201capprove payment\u201d and \u201cdeposit payment\u201d actions are then triggered, in sequence, for the amount to be released.","A fulfillment event notification is generated by the merchant's e-commerce software when it determines that goods have been shipped. The logic for handling the fulfillment event (see the description of Block  of , below) applies the payment finalization policy (that is, the transitions specified in the finalization phase for the policy) selected by the merchant. Returning again to the example credit card policy, table  of  represents the finalization phase for this credit card policy. By comparing table  to table  of , it can be seen that the entry states and relationships between the requested amount and current payment amount are handled in an identical manner to that which has been described for the reservation phase, except that the specified payment actions during the finalization phrase are followed by triggering the \u201cdeposit payment\u201d action. That is, because the goods have now been shipped, it is appropriate to deposit the funds for those goods into the merchant's account. (Typically, this will be carried out by generating a notification to the credit card company to charge the funds to the customer and credit them to the merchant.) This processing also applies to the cell represented by the intersection of row  and column , which specifies the processing to be carried out when a payment for the correct amount had already been approved.","Table  of  specifies how the finalization phase processing is to be carried out for the ACH transaction policy example. In the example, the processing is identical to that of the reservation phase; see the description of table  of . (According to this policy for ACH transactions, funds are to be deposited as soon as allowed, which in this case is before goods are shipped. After the goods are shipped, the actions carried out in the finalization phase serve as a final check that funds were really deposited, and perhaps may have been adjusted for changed amounts.) Following successful completion of the actions in this table, the payment state for the current payment is set to \u201cpayment deposited\u201d.","Flow charts depicting logic that may be used when implementing preferred embodiments of the present invention are provided in . These flow charts represent logic that is invoked responsive to receiving the order capture, release to fulfillment, and fulfillment event notifications, respectively.","The logic in  serves to record payment information for a particular order, and to create and process a payment validation request for that order. In preferred embodiments, Block  creates a new payment container object. This object will be used to manage all of the payment activity that is required to collect the total payment for this order. For example, the object will be used to track the current state of the payment(s); the amount of payment approvals and deposits; and how much of the order has been released for shipment.","As discussed earlier, more than one payment instrument may be used for a single order. In addition, more than one payment may be made using each payment instrument. For example, a customer might have a gift certificate that she wishes to use, but the amount of the certificate is less than the total payment required for the order. In that case, she might choose to use a credit card to pay the remaining balance (and the policy for gift certificates must be designed to ensure that the policy-driven payment processing will result in applying the gift certificate to the order first, before applying the credit card), and might use this credit card more than once when making the remaining payments. In preferred embodiments, the set of payment instruments to be used for a particular order is preferably indicated as a parameter on the order capture event notification. Block  creates an object, referred to herein as a \u201cpayment instructions\u201d object, for each payment method that will be used for this order. In preferred embodiments, these payment instructions objects record how much of the payment for a particular order is to be made using the corresponding payment instrument, along with zero or more data values that are specific to that type of payment instrument. (For example, a payment instructions object for a credit card payment records information such as the credit card number, expiration date, account holder's name and billing address, etc. A payment instructions object for an ACH transaction records information such as the routing number of the transmitting financial institution.) Typically, the customer indicates how much of the total order payment is to be made using each of the payment instruments; alternatively, this may be calculated programmatically (e.g., upon determining the order in which each instrument is to be considered, and the payment amount available from each instrument). The payment container object created in Block  maintains an awareness of the payment instructions objects created in Block  (for example, by storing an array of pointers to them).","A \u201cvalidation record\u201d object is created and initialized in Block . In preferred embodiments, this validation record object tracks a payment's progress through the validation phase and is used for recording the result of attempting to validate each of the payment instructions.","Block  then looks up and applies the validation policy that has been configured (i.e., selected) by the merchant for each of the payment instructions that will be used for this order. A generic payment system is invoked during this processing, as required, to create actual payment messages. For example, payment messages may be exchanged with an acquiring bank to process authorization and capture messages for credit card transactions. (As stated earlier with reference to , details of the generic payment system are beyond the scope of the present invention.) In an optional enhancement, an implementation of the present invention may provide for overriding the selection of policy for particular payments (e.g., for a particular order or other payment processing unit.) This overriding may consider one or more factors such as: the amount of the payment transaction (and\/or of the order); an identification of the customer on whose behalf the payment is being made (for example, whether this customer belongs to a \u201cpreferred customer\u201d group, or as another example, whether this customer's payment warrants different treatment for other reasons); and so forth. It will be obvious to one of ordinary skill in the art how the logic of the flow charts in  can be adapted to support this optional enhancement. (It should be noted that, according to preferred embodiments, the overriding must occur for the first business event, so that the newly-selected policy then applies for all business events pertaining to that payment. Policies are not changed once the first business event for a payment has begun to be processed.)","In an alternative embodiment, an implementation of the present invention may be adapted for allowing run-time selection of one or more policies to be used, rather than configuring the entire set of policies prior to operation of the payment-processing code. (As one example, an interface might be provided whereby a systems administrator or other person would be presented with a request to choose an applicable policy, and means for responding to this request, when an exception condition is encountered.)","As each policy is applied, the validation record object is revised (Block ) to record the corresponding allocation information. In preferred embodiments, this allocation information comprises a record of which particular payment objects were involved in the validation, and the amounts allocated to each for validation. For example, if the order was paid for by gift certificate and credit card, and both policies required validation actions, then the validation record would have an entry which points to a payment object for the gift certificate and another entry which points to a payment object for the credit card payment. (While the flow chart shows Block  as completing before Block  begins, is it to be understood that in an actual implementation, the processing of these two blocks is preferably interleaved, such that each payment instruction is validated and the result of that validation is recorded before moving on to the next payment instruction.)","Finally, Block  evaluates the validation results for all of the payment instructions to be used for this order, yielding the validation status of the order as a whole. If and only if the validation for all payment methods was successful, then the validation status of the order is set to successful. If an error of some type is generated when validating one or more of the payment instructions, then the validation status of the order is set to that error status (or, when multiple errors have been generated, the validation status of the order is preferably set to the most severe error status). By way of example,  indicates that potential validation status values for an order are \u201csuccess\u201d, \u201cfinancial error\u201d, \u201cinput error\u201d, \u201csecurity error\u201d, \u201cpending\u201d, and \u201cfailed\u201d. The validation status is then returned to the invoking logic.","Note that the validation status values shown in  are related to, but do not directly correspond to, the payment states used in the policies. One of the purposes of the policy engine is to interpret the results of payment actions that are carried out in the generic payment system and translate those results to a smaller set of return values that divides up the possible results according to actions required by the merchant system.","The logic in  handles a payment reservation request for all or part of the payment for an order, upon receiving a release to fulfillment event notification. This process begins, in preferred embodiments, by looking up (Block ) this order's validation record object (created during the processing of ) to find any existing payment objects that may be applied to this reservation request. Block  then creates a new \u201creservation record\u201d object, and in Block , the amount of this reservation (passed as an input parameter to the processing of , in preferred embodiments) is assigned to one or more payment instructions objects, in order to complete the reservation. As stated above with reference to Block , these payment instructions objects record, inter alia, how much of the payment for a particular order is to be made using the corresponding payment instruction. Thus, the processing of Block  comprises comparing those recorded amounts to the amount of this payment reservation request. Typically, when multiple payment instructions are to be used for a single order, it will be necessary to determine the order in which those instructions should be applied. This ordering information is preferably determined by evaluating the applicable policies (but alternatively may be specified by the customer, for example as a configuration option, or perhaps coded into an implementation of the present invention). In the former case, the processing of Block  is preferably interleaved with the processing of Blocks  and .","The processing in Blocks  and  comprises looking up and applying the reservation policy (see, e.g., tables  of  of ), for each payment instructions object that is to be used for this payment reservation, and then recording the reservation allocations in the reservation record object created in Block . In preferred embodiments, the recorded reservation allocations comprise a dollar amount (in any currency) and a payment object identifier. Note that the amount recorded does not have to be the total amount of the particular payment object, although in most policies (and in the simplest implementation) this will be the case: it is possible to create more complicated policies that will essentially \u201crecord a lien\u201d against a portion of an existing object. For example, suppose $300 was validated by doing a payment approval, followed by a reservation request for only $100 (with a desired state of \u201cpayment approved\u201d). The example policies described herein call for the $300 amount to be changed into $100. Alternatively, a more complex policy might call for $100 of the $300 to be claimed, without any actual payment actions being invoked. Then, if a request to reserve $200 is subsequently received, the remaining $200 will be claimed. (This type of advanced policy and function allows a merchant to create the minimum number of protocol messages to back-end systems, which can reduce the merchant's overall fees.)","Block  then evaluates the results of the payment actions that have been taken (as indicated by the applicable policies) during the process of performing this reservation request, and combines those results to determine the reservation status for the payment instructions objects for which a payment is being reserved on this invocation. If the reservation status for all the pertinent payment instructions objects is successful (i.e., indicating that the payment has been reserved), then the reservation status is set to a value such as \u201creserved\u201d. If one or more pending or failure conditions were encountered, however, then the reservation status is set to a value such as \u201cpending\u201d or \u201cnot reserved\u201d, respectively. This result is then returned to the invoking software.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 10","FIG. 10","FIG. 10"],"b":["1000","1010","1020"]},"In Block , the finalization policy associated with each of the payment instructions objects is looked up and applied. (See, e.g., tables  of  of ).","The results of the payment actions that have been taken when applying the finalization policies are then combined (Block ), and the combined result represents the finalization status of the payment instructions objects that correspond to this finalized payment. If the finalization status for all of these payment instructions objects is successful (i.e., indicating that the payment has been finalized), then the finalization status to be returned for this request is a value such as \u201csuccess\u201d. If one or more pending or failure conditions were encountered, however, then the finalization status to be returned is a value such as \u201cpending\u201d or \u201cfailed\u201d, respectively. The processing of  then ends.","Multiple calls can be made for the same business event when processing a particular order, for example as multiple releases are prepared for shipment and then shipped. According to preferred embodiments, the merchant's e-commerce software is not required to manage the details of which payment transactions will be applied to which releases to fulfillment, nor to the finalization, and so forth. Instead, these details are handled by the policy engine, which correlates releases to payments via the reservation and finalization records. The merchant's software simply invokes the business events at the proper time.","As has been demonstrated, the present invention discloses advantageous techniques for supporting payment processing of multiple payment methods for e-commerce transactions. Configured payment policies are defined, and a merchant's e-commerce software invokes the logic of a particular policy by triggering event notifications based on the business state of a transaction. This approach enables the merchant's software developers to concentrate their efforts on the merchant's core business needs, and makes it easier to maintain the merchant's e-commerce software. Instead of accommodating details of various payment instructions within the merchant's e-commerce software, the merchant just selects the policies that will carry out the desired processing.","In the prior art, payment software solutions have been developed which can be leveraged as callable utilities from merchant e-commerce applications. One prior art payment software solution is the WebSphere\u00ae Payment Manager product from International Business Machines Corporation (\u201cIBM\u00ae\u201d). This payment software product will be referred to hereinafter as the \u201cpayment management component\u201d, and is representative of the previously-described payment engine and generic payment system. (\u201cWebSphere\u201d and \u201cIBM\u201d are registered trademarks of International Business Machines Corporation in the United States, other countries, or both.)","The payment management component provides an API which has a number of payment-related commands that can be invoked by merchant e-commerce applications. The payment management component adheres to an architecture referred to as the \u201cWebSphere Commerce Payments Framework\u201d, which also defines requirements for pluggable software modules called \u201ccassettes\u201d. A cassette contains software to support a particular payment method. A merchant using the payment management component then \u201cplugs in\u201d a cassette for each type of payment method to be offered to the merchant's customers. For example, one cassette might support a credit card processor, while another cassette supports a different credit card processor and yet another cassette supports stored-value cards. (Refer to \u201cIBM WebSphere Commerce Payments Programmer's Guide and Reference\u201d and \u201cIBM WebSphere Commerce Payments for Multiplatforms: Cassette Kit Programmer's Guide\u201d, both of which are available from any IBM branch location as well as on the Internet at http:\/\/www.ibm.com, for detailed information about the payment architecture as well as the payment management component and the cassettes it uses.)","The existing payment management component product shields merchant e-commerce applications from a great deal of payment processing detail. It uses a generic API where merchant code calls particular command-processing logic within a selected payment cassette. The existing payment management component product does not provide a business event driven-model and does not use configured policy as disclosed herein.","While the payment management component does generate \u201cevent notifications\u201d, these are notifications sent using HyperText Transfer Protocol (\u201cHTTP\u201d) POST messages to a Uniform Resource Locator (\u201cURL\u201d) of an external merchant software process (i.e, a process that is external to the payment manager component). For example, when a buyer's payment instruction is approved, an event notification may be sent to a product distribution application to notify that application to release the ordered goods for shipment. The existing payment management component product leverages profiles that specify how commands and their parameters should be processed for particular cassettes; that is, a profile maps command parameter names to the appropriate source of values for those parameters, on a per-cassette basis. These profiles are not to be confused with the policies used by the present invention.","The existing payment management component contains support for a single payment method (i.e., payment instruction) per order (including multiple payments made against this payment method), but does not contain support for multiple payment methods per order. In contrast, an implementation of the present invention easily and flexibly supports multiple payment methods per order.","Use of the present invention also simplifies the process of allowing merchant e-commerce software to interact with new payment-processing cassettes of the type used by the payment management component. That is, in the prior art when a new payment cassette is introduced, changes to the merchant's code may be necessary or desirable in order to interact with the protocol embodied in the cassette. The present invention removes this dependency. (The techniques disclosed herein are especially advantageous when the merchant e-commerce software is itself a commercially-marketed product: in that case, the merchants do not typically have access to the source code for the e-commerce software, and thus cannot make changes. Instead, in the prior art the merchant must either obtain a new version of the product, or forego use of the new payment protocols.) Preferred embodiments of the present invention may be implemented in the IBM WebSphere Commerce Payments Framework environment. (Alternatively, the novel concepts disclosed herein may be implemented in other systems or other environments without deviating from the scope of the present invention.) When implemented within the WebSphere Commerce Payments Framework, an embodiment of the present invention preferably resides between the merchant e-commerce software and the WebSphere Commerce Payments Framework's payment engine.","For an illustration of this configuration, see . As shown therein, a customer  interacts, through a network such as the Internet , with an embodiment of the present invention, shown as having an HTTP server  and a WebSphere application server  for handling HTTP requests and responses. Policy engine  interacts with a policy database , and upon determining actions to be carried out according to a policy, sends messages through application server  and HTTP server  to the HTTP server  of the payment management component  to pay for products from a merchant . (Order-related messages may also pass directly from Internet  to the payment manager component's HTTP server .) The payment management component  also has an HTTP server  and a WebSphere application server  for handling HTTP requests and responses. The application server  forwards requests to a user interface servlet  and a payment servlet  (which is also referred to as the \u201ccashier\u201d software for the payment management component). Payment transactions sent to the payment servlet  may be forwarded to the payment engine , or handled directly by the payment servlet. A payments database  may be accessed and updated while processing payment transactions. One or more payment cassettes , which interact with a remote payment system  (such as a credit card processing system), may be invoked to carry out the actions which the policy engine  requests from the payment management component  based on the actions specified in the policies.","As will be appreciated by one of skill in the art, embodiments of the present invention may be provided as methods, systems, or computer program products. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment, or an embodiment combining software and hardware aspects. Furthermore, the present invention may take the form of a computer program product which is embodied on one or more computer-readable storage media (including, but not limited to, disk storage, CD-ROM, optical storage, and so forth) having computer-readable program code embodied therein.","The present invention has been described with reference to flowchart illustrations and\/or flow diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or flow diagrams, and combinations of blocks in the flowchart illustrations and\/or flows in the flow diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, embedded processor, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions specified in the flowchart and\/or flow diagram block(s) or flow(s).","These computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instruction means which implement the function specified in the flowchart and\/or flow diagram block(s) or flow(s).","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer-implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions specified in the flowchart and\/or flow diagram block(s) or flow(s). Furthermore, the instructions may be executed by more than one computer or data processing apparatus.","While preferred embodiments of the present invention have been described, additional variations and modifications in those embodiments may occur to those skilled in the art once they learn of the basic inventive concepts. Therefore, it is intended that the appended claims shall be construed to include all such variations and modifications as fall within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 2-4"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 5-7"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 8-10"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
