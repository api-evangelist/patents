---
title: Method, system, and device for to-do-list based navigation
abstract: A method, system, and device for to-do-list based navigation includes identifying a selection of tasks to be completed from the to-do-list. The selected tasks may be prioritized or ordered based on navigation data and context data associated with each of the selected tasks to develop a trip plan for completing the selected tasks. The context data may include attributes, such as constraint data, associated with one or more of the selected tasks. In some embodiments, a status update for the current task may be periodically or occasionally communicated to one or more mobile computing devices to inform a user of the mobile computing device of the status of completion of the current task.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09488479&OS=09488479&RS=09488479
owner: Intel Corporation
number: 09488479
owner_city: Santa Clara
owner_country: US
publication_date: 20111227
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION OF THE DRAWINGS"],"p":["In-vehicle navigation systems provide visual navigation to a driver of the vehicle based on a destination location. To do so, a typical in-vehicle navigation system includes a global positioning system (GPS) navigation device to determine a current location of the vehicle. Additionally, the in-vehicle navigation system maintains a roadmap database stored on the system. The roadmap may be displayed to the driver of the vehicle and the current location of the vehicle may be visually indicated on the roadmap. The in-vehicle navigation system may use the roadmap database to calculate a path from the current location to the destination location and provide additional navigation during the trip.","To-do-lists are created and maintained by individuals to keep track of various tasks the individual desires to complete. In the past, to-do-lists were physically maintained by the individual using a physical media such as paper, notes, dry erase boards, and the like. However, nowadays, many consumer devices include functionality for the creation and maintenance of personal, digital to-do-lists. The digital to-do-lists allow the user to manually track his\/her progress of completing the tasks from the listed to-do-list.","While the concepts of the present disclosure are susceptible to various modifications and alternative forms, specific exemplary embodiments thereof have been shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that there is no intent to limit the concepts of the present disclosure to the particular forms disclosed, but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the invention as defined by the appended claims.","In the following description, numerous specific details such as logic implementations, opcodes, means to specify operands, resource partitioning\/sharing\/duplication implementations, types and interrelationships of system components, and logic partitioning\/integration choices are set forth in order to provide a more thorough understanding of the present disclosure. It will be appreciated, however, by one skilled in the art that embodiments of the disclosure may be practiced without such specific details. In other instances, control structures, gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the invention. Those of ordinary skill in the art, with the included descriptions, will be able to implement appropriate functionality without undue experimentation.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","Embodiments of the invention may be implemented in hardware, firmware, software, or any combination thereof. Embodiments of the invention implemented in a computer system may include one or more bus-based interconnects between components and\/or one or more point-to-point interconnects between components. Embodiments of the invention may also be implemented as instructions carried by or stored on a transitory or non-transitory machine-readable medium, which may be read and executed by one or more processors. A machine-readable medium may be embodied as any device, mechanism, or physical structure for storing or transmitting information in a form readable by a machine (e.g., a computing device). For example, a machine-readable medium may be embodied as read only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; mini- or micro-SD cards, memory sticks, electrical signals, and others.","In the drawings, specific arrangements or orderings of schematic elements, such as those representing devices, modules, instruction blocks and data elements, may be shown for ease of description. However, it should be understood by those skilled in the art that the specific ordering or arrangement of the schematic elements in the drawings is not meant to imply that a particular order or sequence of processing, or separation of processes, is required. Further, the inclusion of a schematic element in a drawing is not meant to imply that such element is required in all embodiments or that the features represented by such element may not be included in or combined with other elements in some embodiments.","In general, schematic elements used to represent instruction blocks may be implemented using any suitable form of machine-readable instruction, such as software or firmware applications, programs, functions, modules, routines, processes, procedures, plug-ins, applets, widgets, code fragments and\/or others, and that each such instruction may be implemented using any suitable programming language, library, application programming interface (API), and\/or other software development tools. For example, some embodiments may be implemented using Java, C++, and\/or other programming languages. Similarly, schematic elements used to represent data or information may be implemented using any suitable electronic arrangement or structure, such as a register, data store, table, record, array, index, hash, map, tree, list, graph, file (of any file type), folder, directory, database, and\/or others.","Further, in the drawings, where connecting elements, such as solid or dashed lines or arrows, are used to illustrate a connection, relationship or association between or among two or more other schematic elements, the absence of any such connecting elements is not meant to imply that no connection, relationship or association can exist. In other words, some connections, relationships or associations between elements may not be shown in the drawings so as not to obscure the disclosure. In addition, for ease of illustration, a single connecting element may be used to represent multiple connections, relationships or associations between elements. For example, where a connecting element represents a communication of signals, data or instructions, it should be understood by those skilled in the art that such element may represent one or multiple signal paths (e.g., a bus), as may be needed, to effect the communication.","Referring now to , a system  for providing to-do-list based navigation includes an in-vehicle computing system  incorporated or otherwise located in a vehicle  and one or more mobile computing devices . Additionally, in some embodiments, the system  may include a to-do-list server  with which the in-vehicle computing system  and\/or the mobile computing devices  may communicate over a network . In use, as discussed in more detail below, the in-vehicle computing system  provides navigation to a driver of the vehicle  based on one or more tasks selected from a to-do-list maintained by the in-vehicle computing system . That is, rather than being based solely on a desired destination location, the navigation provided by the in-vehicle computing system  is based on the selected tasks that are to be completed. As such, the in-vehicle computing system  may prioritize or otherwise order the tasks based on the destination location of the tasks, context data associated with the tasks, and\/or other criteria. The prioritization of tasks may be determined so as to reduce the overall drive time required to complete the selected tasks, reduce the total distance traveled for completing the tasks, and\/or satisfy certain constraints of the context data (e.g., the context data may indicate that the task must be completed by a certain date or within a certain time period).","While the in-vehicle computing system  maintains a \u201cmaster\u201d to-do-list, the individual tasks that are included in the master to-do-list may be entered via the in-vehicle computing system  or via the mobile computing devices . That is, each of the mobile computing devices  may maintain a local to-do-list including tasks that may be periodically or responsively synchronized with the to-do-list maintained by the in-vehicle computing system  either directly, over the network , or via the to-do-list server  as discussed in more detail below. Additionally, during use, the in-vehicle computing system  may communicate with one or more of the mobile computing devices  to provide status updates regarding the progress of completion of a current task, to negotiate a rendezvous point, and\/or to facilitate other functionality as discussed in more detail below.","The in-vehicle computing system  may be embodied as any type of vehicle computing system capable of performing the functions described herein. For example, the in-vehicle computing system  may be embodied as an in-vehicle navigation system, a stand-alone navigation system, an in-vehicle infotainment system, or a portion thereof. In the illustrative embodiment of , the in-vehicle computing system  includes a processor , an I\/O subsystem , a memory , communication circuitry , navigation circuitry , data storage , and one or more peripheral devices . In some embodiments, several of the foregoing components may be incorporated on a motherboard of the in-vehicle computing system , while other components may be communicatively coupled to the motherboard via, for example, a peripheral port. Furthermore, it should be appreciated that the in-vehicle computing system  may include other components, sub-components, and devices commonly found in a computer and\/or navigation system, which are not illustrated in  for clarity of the description.","The processor  of the in-vehicle computing system  may be embodied as any type of processor capable of executing software\/firmware, such as a microprocessor, digital signal processor, microcontroller, or the like. The processor  is illustratively embodied as a single core processor having a processor core . However, in other embodiments, the processor  may be embodied as a multi-core processor having multiple processor cores . Additionally, the in-vehicle computing system  may include additional processors  having one or more processor cores .","The I\/O subsystem  of the in-vehicle computing system  may be embodied as circuitry and\/or components to facilitate input\/output operations with the processor  and\/or other components of the in-vehicle computing system . In some embodiments, the I\/O subsystem  may be embodied as a memory controller hub (MCH or \u201cnorthbridge\u201d), an input\/output controller hub (ICH or \u201csouthbridge\u201d), and a firmware device. In such embodiments, the firmware device of the I\/O subsystem  may be embodied as a memory device for storing Basic Input\/Output System (BIOS) data and\/or instructions and\/or other information (e.g., a BIOS driver used during booting of the in-vehicle computing system ). However, in other embodiments, I\/O subsystems having other configurations may be used. For example, in some embodiments, the I\/O subsystem  may be embodied as a platform controller hub (PCH). In such embodiments, the memory controller hub (MCH) may be incorporated in or otherwise associated with the processor , and the processor  may communicate directly with the memory  (as shown by the hashed line in ). Additionally, in other embodiments, the I\/O subsystem  may form a portion of a system-on-a-chip (SoC) and be incorporated, along with the processor  and other components of the in-vehicle computing system , on a single integrated circuit chip.","The processor  is communicatively coupled to the I\/O subsystem  via a number of signal paths. These signal paths (and other signal paths illustrated in ) may be embodied as any type of signal paths capable of facilitating communication between the components of the in-vehicle computing system . For example, the signal paths may be embodied as any number of wires, cables, light guides, printed circuit board traces, via, bus, intervening devices, point-to-point interconnects, and\/or the like.","The memory  of the in-vehicle computing system  may be embodied as or otherwise include one or more memory devices or data storage locations including, for example, dynamic random access memory devices (DRAM), synchronous dynamic random access memory devices (SDRAM), double-data rate synchronous dynamic random access memory device (DDR SDRAM), mask read-only memory (ROM) devices, erasable programmable ROM (EPROM), electrically erasable programmable ROM (EEPROM) devices, flash memory devices, and\/or other volatile and\/or non-volatile memory devices. The memory  is communicatively coupled to the I\/O subsystem  via a number of signal paths. Although only a single memory device  is illustrated in , the in-vehicle computing system  may include additional memory devices in other embodiments. Various data and software may be stored in the memory device . For example, one or more operating systems, applications, programs, libraries, and drivers that make up the software stack executed by the processor  may reside in memory  during execution.","A master to-do-list  is stored and maintained in the data storage device . As discussed above, the master to-do-list  comprises a plurality of tasks that are to be completed by a driver or a passenger of the vehicle . The tasks may be embodied as any type of activity that may be completed by the driver or a passenger of the vehicle . Typically, such tasks include a destination location, which may be embodied as a specific or general location. For example, the tasks may include \u201cpick up child at the Town High School,\u201d \u201cpick up milk from the store\u201d. \u201cdrop off laundry at cleaners,\u201d and\/or other tasks. Each task may include additional context data associated with the task. Such context data may define one or more attributes associated with the task itself or the destination location. For example, the context data may include constraint data that identifies a due date by which an associated task must be completed (e.g., \u201cpick up laundry by Wednesday\u201d), a time window in which the associated task must be completed (e.g., \u201cdrop off laundry at cleaners between 1:00 PM and 3:00 PM\u201d), or other constraints or requirements associated with the task (e.g., the context data may identify the requirement to return home after a visit to the store to allow the driver to place the store goods in a refrigerator). Additionally or alternatively, the context data may define constraint data associated with the destination location (e.g. \u201center school parking lot from the north entrance only\u201d). The context data may be manually entered with the task itself by the user\/drive and\/or inferred or learned over time by the in-vehicle computing system . For example, if a task does not specify a particular destination (e.g., \u201cpick up milk at store\u201d), the in-vehicle computing system  may infer or otherwise identify a particular store location based on past visits, the location of the store relative to the driver's home or destination locations of other tasks, etc.","The communication circuitry  of the in-vehicle computing system  may include any number of devices and circuitry for enabling communications between the in-vehicle computing system  and the mobile computing devices . The communication circuitry  and the mobile computing devices  may use any suitable communication protocol to directly communicate data between each other such as, for example, Bluetooth\u00ae, Wi-Fi\u00ae (i.e., the IEEE 802.11 standard), and\/or other communication protocols or standards. Additionally, in some embodiments, the communication circuitry  may include devices and circuitry for enabling communications between the in-vehicle computing system  and the mobile computing devices  and\/or the to-do-list server  over the network . The communication circuitry  may use any suitable communication protocol to communicate over the network  such as, for example, a wireless local area network communication protocol (e.g., Wi-Fi\u00ae), a cellular data server (e.g., Wideband Code Division Multiple Access (W-CDMA)), and\/or a mobile satellite communication protocol.","The network  may be embodied as any number of various wired and\/or wireless data and\/or voice communication networks. For example, the network  may be embodied as, or otherwise includes, a local area network (LAN), a wide area network (WAN), or a publicly-accessible, global network such as the Internet. The in-vehicle computing system , the mobile computing devices , and\/or the to-do-list server  may use any suitable communication protocol to communicate with each other over the network  depending on, for example, the particular type of network(s) . For example, in some embodiments, the network  may include one or more cellular networks to facilitate certain communications between the mobile computing devices  and\/or between the mobile computing devices  and the in-vehicle computing system . In such embodiments, the cellular networks may use any suitable cellular communication technology to facilitate such communications such as, for example, Global System for Mobile Communications (GSM), General packet Radio Service (GPRS), Code Division Multiple Access (CDMA), and\/or other cellular communication protocols, standards, or technologies.","The navigation circuitry  may be embodied as any type of circuitry and\/or devices for facilitating navigation of the vehicle . For example, in one embodiment, the navigation circuitry  is embodied as, or otherwise includes, a global positioning system (GPS) engine for detecting or otherwise determining a current location of the vehicle . Additionally, the navigation circuitry  may maintain a roadmap database in, for example, the data storage . During use, the navigation circuitry  may retrieve relevant roadmaps from the roadmap database and present (e.g., display or verbally present) the roadmap, along with indicia of the location of the vehicle , to a driver of the vehicle . Of course, the navigation circuitry  may also perform additional navigation functions that are performed by typical navigation systems.","The data storage  may be embodied as any type of device or devices configured for the short-term or long-term storage of data such as, for example, memory devices and circuits, memory cards, hard disk drives, solid-state drives, or other data storage devices. As discussed above, the in-vehicle computing system  maintains and utilizes a \u201cmaster\u201d to-do-list , which may be stored in the data storage . Additionally, as discussed above, context data associated with each of the individual tasks comprising the master to-do-list  may be stored in a context database  of the data storage  in relation to the corresponding tasks. Further, the navigation circuitry  may maintain one or more roadmap databases in the data storage .","The peripheral devices  of the in-vehicle computing system  may include any number of additional input\/output devices, interface devices, and\/or other peripheral devices. For example, the peripheral devices  may include a display for displaying the to-do-lists and navigation data (e.g., roadmaps) and receiving input from the driver of the vehicle  (e.g., via a touch-screen display), an in-vehicle keyboard or other data input device, external speakers, and\/or other peripheral devices. The peripheral devices  are communicatively coupled to the I\/O subsystem  via a number of signal paths thereby allowing the I\/O subsystem  and\/or processor  to receive inputs from and send outputs to the peripheral devices .","In some embodiments, the in-vehicle computing system  may also include one or more sensors  configured to sense various environmental conditions. For example, in one embodiment, the sensors  include one or more seat sensors configured to sense when a passenger is sitting in a passenger seat. Additionally, the sensors  may include other sensors for detecting, for example, whether the vehicle is turned on, the speed of the vehicle, atmospheric conditions (e.g., is it raining or snowing), outside temperature (e.g., to determine whether returning home after a grocery trip is necessary), and\/or other sensors for generating data useful to the in-vehicle computing system .","As discussed above, the system  may include one or more mobile computing devices , each of which stores a local to-do-list  as discussed in more detail below. Each mobile computing device  may be embodied as any type of mobile computing device such as a smart phone, a mobile internet device, a computing tablet, a laptop, a handheld computer, a personal digital assistant, a telephony device, or other mobile computing device. The mobile computing devices  may include devices, circuitry, and features commonly found in such devices. For example, as shown in , an illustrative mobile computing device  includes a processor , an I\/O subsystem , a memory , communication circuitry , a data storage device , and one or more peripheral devices . Of course, the mobile computing devices  may include additional circuits, devices, modules, and structures typically found in mobile computing devices, which are not illustrated in  for clarity of the description.","The processor  of the mobile computing device  may be embodied as any type of processor capable of executing software\/firmware, such as a microprocessor, digital signal processor, microcontroller, or the like. The processor  is illustratively embodied as a single core processor having a processor core . However, in other embodiments, the processor  may be embodied as a multi-core processor having multiple processor cores . Additionally, the mobile computing device  may include additional processors  having one or more processor cores .","The I\/O subsystem  of the mobile computing device  may be embodied as circuitry and\/or components to facilitate input\/output operations with the processor  and\/or other components of the mobile computing device . In some embodiments, the I\/O subsystem  may be embodied as a memory controller hub (MCH or \u201cnorthbridge\u201d), an input\/output controller hub (ICH or \u201csouthbridge\u201d), and a firmware device. However, in other embodiments, I\/O subsystems having other configurations may be used. For example, in some embodiments, the I\/O subsystem  may form a portion of a system-on-a-chip (SoC) and be incorporated, along with the processor  and other components of the mobile computing device , on a single integrated circuit chip.","The processor  is communicatively coupled to the I\/O subsystem  via a number of signal paths, which may be embodied as any type of signal paths capable of facilitating communication between the components of the mobile computing device . For example, the signal paths may be embodied as any number of wires, cables, light guides, printed circuit board traces, via, bus, intervening devices, point-to-point interconnects, and\/or the like.","The memory  of the mobile computing device  may be embodied as, or otherwise include, one or more memory devices or data storage locations including, for example, dynamic random access memory devices (DRAM), synchronous dynamic random access memory devices (SDRAM), double-data rate synchronous dynamic random access memory device (DDR SDRAM), mask read-only memory (ROM) devices, erasable programmable ROM (EPROM), electrically erasable programmable ROM (EEPROM) devices, flash memory devices, and\/or other volatile and\/or non-volatile memory devices. The memory  is communicatively coupled to the I\/O subsystem  via a number of signal paths. Various data and software may be stored in the memory . For example, one or more operating systems, mobile applications, programs, libraries, and drivers may reside in memory  during execution.","The communication circuitry  of the mobile computing device  may be embodied as any number of devices and circuitry for enabling communications between the mobile computing device  and other mobile computing devices , the in-vehicle computing system , and\/or the to-do-list server . As such, the communication circuitry  may include cellular communication circuitry for voice and data communications (e.g., for communicating with other mobile computing devices  via a cellular network), wired communication circuitry for communicating data over the network , and\/or wireless communication circuitry for local data communications (e.g., for communicating with the in-vehicle computing system ). As discussed above, the mobile computing device  may use any suitable communication protocol to communicate with the in-vehicle computing system  such as, for example, Bluetooth\u00ae, Wi-Fi\u00ae(i.e., the IEEE 802.11 standard), and\/or other communication protocols or standards.","The data storage device(s)  may be embodied as any type of device or devices configured for the short-term or long-term storage of data such as, for example, memory devices and circuits, memory cards, hard disk drives, solid-state drives, or other data storage devices. As discussed above, the mobile computing device  stores a local to-do-list  in the data storage , which includes to-do tasks that are periodically or responsively synchronized with the master to-do-list  maintained by the in-vehicle computing system . For example, as discussed in more detail below, when the mobile computing device  is within proximity to the in-vehicle computing system , the mobile computing device  may communicate with the in-vehicle computing system  to update or otherwise synchronize the local to-do-list  to the master to-do-list . The tasks stored in the local to-do-list  may be entered via the mobile computing device , retrieved from the master to-do-list , and\/or retrieved from a master to-do-list  stored on a to-do-list server  as discussed in more detail below.","The peripheral devices  of the mobile computing device  may include any number of peripheral or interface devices. For example, the peripheral devices  may include a display, a keyboard, a mouse, external speakers, and\/or other peripheral devices depending on the type of mobile computing device (e.g., smart phone, computer tablet, laptop computer, etc.). The peripheral devices  are communicatively coupled to the I\/O subsystem  via a number of signal paths thereby allowing the I\/O subsystem  and\/or processor  to receive inputs from and send outputs to the peripheral devices .","Referring back to , the to-do-list server  may be embodied as any type of data server capable of performing the functions described herein. As such, the to-do-list server may include various hardware and software components typically found in a server for communicating, storing, maintaining, and transferring data over a network. The illustrative to-do-list server  includes a web service engine  to provide a web portal to the in-vehicle computing system  and\/or the mobile computing devices  for various web services such backing up, retrieving, and updating the to-do-list data stored on each device. As such, the to-do-list server  also includes a data storage , which may be embodied as any type of long-term storage device such as one or more hard disk drives, sold-state devices, non-volatile memory, and\/or other data storage devices typically found in network-based data servers. In some embodiments, the data storage  stores a local master to-do-list . The master to-do-list  may be a substantial copy of the master to-do-list  stored on the data storage  of the in-vehicle computing system. In such embodiments, the master to-do-list  is periodically or responsively synchronized with the master to-do-list  and\/or the local to-do-lists  stored on the mobile computing devices . It should be appreciated that although the master to-do-list  maintained by the in-vehicle computing system  is typically the most current master list, the master to-do-list  provides a back-up master list for the in-vehicle computing system , which is also available to the mobile computing devices  at times when the communication with the in-vehicle computing system  is not available (e.g., the mobile computing device  is not near the vehicle , the vehicle  is turned off, etc.).","Referring now to , during operation, the in-vehicle computing system  establishes a software environment  for maintaining the master to-do-list  and providing to-do-list-based navigation. The illustrative software environment  includes a to-do-list maintenance module , a user interface module , a trip planner module , a navigation module , a task status update module , and the master to-do-list  and associated context data . Each of the modules , , , ,  may be embodied as or otherwise include stand-alone software applications, software\/firmware modules, and\/or hardware.","The to-do-list maintenance module  manages, maintains, and synchronizes the master to-do-list  and associated context data . Additionally, in some embodiments, the to-do-list maintenance module  may be configured to prioritize the tasks (e.g., order the tasks) included in the master to-do-list  based on the associated context data  (e.g., required dates of completion) and\/or other criteria. Of course, as discussed in more detail below, the user of the in-vehicle computing system  may select any tasks from the master to-do-list  for completion at any particular time, including selecting tasks out of the prioritized order (e.g., the user may desire to complete a task early).","The to-do-list maintenance module  interfaces with the user interface module  to provide a user interface of the master to-do-list  to a user (e.g., a driver or passenger of the vehicle ) of the in-vehicle computing system . The user interface may be embodied as a graphical user interface, an audio user interface, or any other type of user interface. The user may interact with the user interface to update tasks of the master to-do-list , add new tasks to the master to-do-list , and\/or select tasks for completion as discussed in more detail below.","The to-do-list maintenance module  also interfaces with the trip planner module  to generate a trip plan for a selected number of tasks of the master to-do-list . That is, as discussed in more detail below, the trip planner module  is configured to determine an order of priority for completion of a group of user-selected tasks based on the context data  associated with each task and navigation data related to each task, which is retrieved or provided from the navigation module . As discussed above, each task typically includes a specific or general destination location, which may be used by the trip planner module  to prioritize the tasks and by the navigation module  to generate the proposed directions, trip times, etc. In those cases wherein a task is associated with only a general destination location (e.g. \u201cpick up milk from the store\u201d), the trip planner module  may be configured to infer or otherwise assign a specific destination based one or more criteria such as frequency of visits to the destination location (i.e., does the user like that particular store or location), the location of the destination relative to the current location of the vehicle , the user's home, location of the destinations of other selected tasks, offers made by merchants (e.g., coupons), and so forth.","As discussed above, the context data associated with a particular task may define one or more attributes of the task itself or the destination associated with the task. For example, the context data may include constraint data that identifies a due date by which an associated task must be completed, a time window in which the associated task must be completed, or other constraints or requirements associated with the task. Additionally or alternatively, the context data may define constraint data associated with the designation location associated with each task. The trip planner module  is configured to prioritize or order the selected tasks so as to satisfy the context data or otherwise ensure the task priority is consistent with such context data. Additionally, in some embodiments, the trip planner module  may further attempt to achieve defined goals in prioritizing the selected tasks. For example, the trip planner module  may be configured to order the tasks so as to reduce the overall drive time required to complete the selected tasks, reduce the overall drive distance required to complete the selected tasks, and\/or achieve similar or other goals. To do so, the trip planner module  may interface with the navigation module  to retrieve map and\/or trip data from the navigation module .","In some embodiments, the trip planner module  may also include a rendezvous co-planner module . In such embodiments, the rendezvous co-planner module  is configured to communicate with a corresponding rendezvous co-planner module of a mobile computing device  to determine a destination location at which the user of the in-vehicle computing system  (i.e., the driver of the vehicle ) and the user of the mobile computing device  may meet. To do so, as discussed in more detail below, the rendezvous co-planner module  may communicate with the corresponding rendezvous co-planner module of the mobile computing device  to determine a current location of the user of the mobile computing device and subsequently determine a suitable rendezvous location based on the current location of the user of the mobile computing device, the current location of the vehicle , and\/or the context data . For example, the context data  may define constraint data associated with the current location of the user of the mobile computing device  that may be accounted for in determining the rendezvous location (e.g., a one-way street or entrance). After the rendezvous co-planner module  determines the rendezvous location, the module  may communicate the rendezvous location to the trip planner  for prioritization with any remaining tasks.","The navigation module  stores navigation data such as roadmaps and generates proposed directions or paths from an origination location to a destination location. As discussed above, each task typically includes a destination location (either specific or general). The navigation module  is configured to generate directions from an origination location, which may be a destination location of the last completed task or a current location of the vehicle , to the destination location associated with each task. Such directions are used by the trip planner module  to prioritize the tasks as discussed above.","The task status update module  is configured to provide updates as to the completion of a current task or set of tasks to the one or more users of the mobile computing devices . The task updates may include any type of data useful to a user of the mobile computing device  to determine or otherwise infer completion of one or more tasks. For example, such updates may include communicating the current location of the vehicle , whether the task has been completed, estimated time of arrival to a destination location based on navigation data from the navigation module , and so forth. In some embodiments, the task status update module  may include an inference engine  configured to infer whether a task has been completed. To do so, the inference engine  may use any suitable data to determine the completion of a task. For example, in some embodiments, the inference engine  may determine that a task has been completed by determining whether a particular mobile computing device  (e.g., a phone of a child) is within a reference proximity to the in-vehicle computing system , whether a passenger seat is occupied by a passenger via the sensor , whether a purchase has been made (e.g., based on a digital receipt), and\/or any other data useful in making such determinations.","Referring now to , similar to the in-vehicle computing system , each mobile computing device  may establish a software environment  for maintaining the local to-do-list . The illustrative software environment  includes a to-do-list maintenance module , a user interface module , a rendezvous co-planner module , a status update module , and the local to-do-list . Each of the modules , , , and  may be embodied as, or otherwise include, stand-alone software applications, software\/firmware modules, and\/or hardware.","Similar to the to-do-list maintenance module  of the in-vehicle computing system , the to-do-list maintenance module  manages, updates, and synchronizes the local to-do-list  with the master to-do-list  maintained by the in-vehicle computing system. The to-do-list maintenance module  interfaces with the user interface module  to allow a user of the mobile computing device  to add or update a new task on the mobile computing device . As such, when the mobile computing device  is in proximity to the in-vehicle computing system, the to-do-list maintenance module  may communicate with the to-do-list maintenance module  to synchronize or otherwise update the master to-do-list  with the local to-do-list . Alternatively, the mobile computing device  may communicate with the to-do-list server  to synchronize the master to-do-list  with the local to-do-list , which may subsequently be used to synchronize or otherwise update the master to-do-list  managed by the in-vehicle computing system via the network .","The rendezvous co-planner module  is substantially similar to the rendezvous co-planner module  of the in-vehicle computing system . The rendezvous co-planner module  is configured to communicate with the rendezvous co-planner module  of the in-vehicle computing system  to determine a destination location at which the user of the mobile computing device  and the driver of the vehicle  may meet. To do so, the rendezvous co-planner module  may communicate various data to the in-vehicle computing system , such as the current location of the user of the mobile computing device , usable by the rendezvous co-planner module  to determine a suitable rendezvous location.","The task status update module  of the mobile computing device  is configured to update the status of tasks contained in the local to-do-list  based on data received from the in-vehicle computing system  and\/or determine a status of completion of a task of the local to-do-list . As discussed above, the in-vehicle computing system  may communicate updates to the mobile computing device  regarding the completion of a particular task. In response, the status update module  is configured to update the corresponding task on the mobile computing device . Such updates may include completion of the task, acceptance of the task by another user, or an update of the progress of completion of the task.","In some embodiments, the status update module  may include a local inference engine . Similar to the inference engine  of the in-vehicle computing system , the inference engine  may be configured to infer whether a task has been completed. To do so, the inference engine  may use any suitable data to determine the completion of the task including, for example, the location of the mobile computing device , whether a purchase has been made, and so forth. Any inference of task completion may be communicated to the in-vehicle computing system  and\/or the to-do-list server  as a task status update as discussed above.","Referring now to , one illustrative embodiment of a method  for to-do-list based navigation that may be executed by the in-vehicle computing system  is shown. The method  begins with block  in which the in-vehicle computing system  presents the current tasks contained in the master to-do-list . The tasks may be presented to the user of the in-vehicle computing system  (e.g., the driver or passenger of the vehicle ) by displaying the tasks on an in-vehicle display, such as the navigation display, by audibly \u201cspeaking\u201d the tasks through an audio interface of the in-vehicle computing system , or the like. The in-vehicle computing system  may be configured to present automatically the current tasks upon vehicle startup or in response to selection of a button, icon, or similar input device.","In blocks , , and , the in-vehicle computing system  monitors for selection of one of a number of different actions by a user of the system . For example, in block , the in-vehicle computing system  determines whether a user has requested to enter a new task. The user may enter, for example, a new task by selecting a corresponding button or icon on a graphical user interface displayed to the user or by verbally speaking the new task into an audible user interface. The user may enter the new task to be completed along with any corresponding data, such as a destination location, and context data, which may define one or more attributes of the task or destination location. After the user has entered the new task into the in-vehicle computing system , the new task is incorporated into the master to-do-list  and stored in the data storage  in block . Additionally, any context data entered by the user, or determined by the in-vehicle computing system, is stored in the context database  in association with the newly entered task.","In some embodiments, the in-vehicle computing system  may prioritize the tasks contained in the master to-do-list  in block  after the addition of any new task. As discussed above, the in-vehicle computing system  may utilize the context data or other criteria to prioritize the tasks. For example, the tasks may be prioritized based on a required date of completion, an \u201curgent\u201d signifier attached to the task, or other criteria. After the in-vehicle computing system  has prioritized the tasks, the tasks of the updated master to-do-list  are presented to the user in block . In this way, the user of the in-vehicle computing system  may directly add additional tasks to the master to-do-list , update tasks of the master to-do-list , and\/or otherwise manage (e.g., delete or remove) tasks of the master to-do-list .","Referring back to block , the in-vehicle computing system  may also determine whether the master to-do-list  should be synchronized with a local to-do-list  of a mobile computing device  in block . If so, the master to-do-list  and the local to-do-list  are synchronized in block . To do so, the in-vehicle computing system  may execute a method  for synchronizing the master to-do-list  and the local to-do-list  as shown in . The method  begins with block  in which the in-vehicle computing system  determines whether the mobile computing device is locally present (e.g., in or near the vehicle ). The in-vehicle computing system  may determine the mobile computing device  is locally present based on short-range communications (e.g., Bluetooth\u00ae) from the mobile computing device . That is, the mobile computing device  may be configured to attempt communications with the in-vehicle computing system  when the mobile computing device  is near. If so, communication between the in-vehicle computing system  and the mobile computing device  is established in block  via \u201chandshaking\u201d or other communication set-up procedure.","The tasks of the local to-do-list  may be synchronized or otherwise updated to the master to-do-list  automatically or selectively. For example, in some embodiments, the user of the mobile computing device  may select those tasks of the local to-do-list  to synchronize with the master to-do-list . Alternatively, the tasks to be synchronized may be selected from a user interface of the in-vehicle computing system . Regardless, in block , the selected tasks are synchronized between the local to-do-list  and the master to-do-list . Typically, such synchronization may include updating the master to-do-list with new tasks of the local to-do-list , which were entered on the mobile computing device . However, tasks located in the local to-do-list  may also be updated based on the status of tasks of the master to-do-list  (e.g., if the task shows completed in the master to-do-list ).","Referring back to block , if the mobile computing device is not locally present, the in-vehicle computing system  determines whether to remotely synchronize with the mobile computing device  (or the to-do-list server ) over the network . To do so, a user of the in-vehicle computing system  may select an option to synchronize remotely the master to-do-list  and the local to-do-list . If so, the mobile computing device(s)  to be synchronized is determined in block . For example, the user of the in-vehicle computing system  may select one or more mobile computing devices  or the to-do-list server  from a list displayed on a graphical user interface of the in-vehicle computing system  or by speaking a keyword associated with the devices  or server  into an audible user interface of the in-vehicle computing system .","In block , the in-vehicle computing system  establishes communications with the mobile computing device  or the to-do-list server  over the network . In block , the tasks of the local to-do-list  or the master to-do-list  may be selected as discussed above with regard to block . Subsequently, in block , the selected tasks are synchronized between the local to-do-list  or master to-do-list  and the master to-do-list .","Referring back to , after the master to-do-list  is synchronized in block , the in-vehicle computing system  may prioritize the tasks contained in the master to-do-list  in block . As discussed above, the in-vehicle computing system  may utilize the context data or other criteria to prioritize the tasks. Subsequently, in block , the tasks of the updated master to-do-list  are presented to the user as discussed above with regard to block .","Referring back to block , the in-vehicle computing system  may also determine whether the user of the in-vehicle computing system  desires to begin one or more tasks of the master to-do-list . If so, in block , the in-vehicle computing system  generates a trip plan to accomplish the selected tasks of the master to-do-list  based on navigation data and the context data  associated with each task. To do so, the in-vehicle computing system  may execute a method  for generating a trip plan for completing the selected tasks. As shown in , the method  begins with block  in which the tasks to be completed are identified. For example, the user of the in-vehicle computing system  may select a subset of tasks from the master to-do-list  to complete in a given driving session. As discussed above, the tasks of the master to-do-list  may be presented to the user in a prioritized order.","In block , the in-vehicle computing system  retrieves navigation data associated with each of the selected tasks in block . The in-vehicle computing system  may retrieve such navigation data from the navigation module  as discussed above. The in-vehicle computing system  may also determine a destination location for any task that does not include a specific destination. For example, a task may simply read as \u201cpick child up from school\u201d or \u201cpick up milk from grocery store.\u201d If so, the in-vehicle computing system  determines the specific destination for such tasks in block . To do so, the in-vehicle computing system  may be configured to learn the appropriate destination over time or infer the destination based on the context data or other data. Alternatively, the user of the in-vehicle computing system may simply enter the specific destination or otherwise correct the destination determined by the in-vehicle computing system .","In block , the in-vehicle computing system  retrieves the context data associated with each task and prioritizes the selected tasks based on the navigation and the retrieved context data in block . As discussed above, the context data may define one or more attributes associated with the task itself or the destination location, which may be used by the in-vehicle computing system  to determine an order of the tasks. Such prioritizing or ordering of tasks may be done so as to achieve some defined goal such as reducing the overall drive time, drive distance, or the like. Of course, in some embodiments, the user may reorder the tasks as desired.","In block , the in-vehicle computing system  begins navigation of the next task. To do so, in some embodiments, the in-vehicle computing system  may present a road map to the user with indicia of the vehicle's current local and destination associated with the first task. Such road map data may be retrieved or otherwise provided by the navigation module . Additionally or alternatively, the in-vehicle computing system  may provide audible navigation to the user to guide the user to the destination location. As the current task is being completed, the in-vehicle computing system  determines the status of the current task in block . As discussed above, the in-vehicle computing system  may determine the completion status of the task based on any one or more criteria such as the location of the vehicle  relative to the destination location, estimated arrival time to the destination location, the proximity to a particular mobile computing device  (e.g., a child's phone), the presence of a passenger in the vehicle based on sensor data from the sensor , the generation of a digital receipt, and\/or other data.","The in-vehicle computing system  determines whether the current task has been completed in block  based on the completion or update status of the current task determined in block . If so, the in-vehicle computing system  determines whether any additional tasks remain in the selected subset of tasks to be completed during the current driving session. If additional tasks remain, the method  loops back to block  wherein the next task is initiated. If not, the method  exits.","Referring back to block , if the current task is not completed, the method  advances to block  in which the in-vehicle computing system  determines whether to update one or more users of the mobile computing devices  of the status of the current task. The in-vehicle computing system  may determine whether to update the mobile computing devices  based on the context data associated with the current task (e.g., the task may be identified as a task whose status should be communicated) or via selection by the user of the in-vehicle computing device. If not, the method  loops back to block  in which the in-vehicle computing system  resumes monitoring the status of the current task as discussed above.","However, if the in-vehicle computing system  determines that one or more mobile computing devices  should be updated with the status of the current task, the method  advances to block  in which the mobile computing devices  to be updated is determined. As discussed above, the particular mobile computing devices  to be updated may be included in the context data of the current task or simply entered by the user of the in-vehicle computing system .","In block , the in-vehicle computing system  establishes communications with the mobile computing device(s)  and communicates the status of the current task to the mobile computing device . The method  subsequently loops back to block  in which the in-vehicle computing system  resumes monitoring the status of the current task as discussed above. In this way, each of the selected tasks may be completed based on the navigation data and the context data associated with each task.","Referring back to block  of , in some embodiments, one of the selected tasks may require rendezvousing with a user of a mobile computing device  (e.g., to pickup the user). If so, the in-vehicle computing system  may execute a method  for coordinating a rendezvous with the user of a mobile computing device  as illustrated in . The method  begins with block  in which the in-vehicle computing system  determines whether to rendezvous with the user of the mobile computing device . If so, the method  advances to block  in which the in-vehicle computing system  establishes communication with the mobile computing device  (e.g., over the network ). In block , the in-vehicle computing system  determines the current location of the user of the mobile computing device . For example, the mobile computing device  may determine its current location and communicate such location to the in-vehicle computing system .","In block , the in-vehicle computing system  retrieves navigation data associated with the current location of the user of the mobile computing device  from the navigation module . For example, the in-vehicle computing system  may access a roadmap of the area of the current location of the mobile computing device . Additionally, in block , the in-vehicle computing system  retrieves context data associated with the current location of the user of the mobile computing device . Such context data may define attributes about the current location of the mobile computing device , which may be used to determine the rendezvous location. For example, the context data may provide constraint data informing that a particular parking lot entrance is one-way or that a particular street is one-way during a particular time of day.","In block , the in-vehicle computing system  determines a rendezvous location and time at which to meet the user of the mobile computing device  based on the navigation data, the retrieved context data, and the current location of the mobile computing device . In some embodiments, the in-vehicle computing system  may attempt to achieve one or more goals in determining the rendezvous location such as, for example, reducing the traveling distance from the user of the mobile computing device , reducing the time until rendezvous, reducing driving time or distance, and\/or the like. Subsequently, in block , the in-vehicle computing system  communicates the determined rendezvous location and\/or meeting\/pickup time to the mobile computing device  via the network . In some embodiments, the user of the mobile computing device  may accept, deny, or modify the determined rendezvous location and\/or time.","Referring back to , after the selected tasks have been completed, the in-vehicle computing system  updates the tasks of the master to-do-list  and presents the updated list of tasks to the user of the vehicle  in block . In this way, the user may select tasks from the master to-do-list  to be completed for a given driving session and receive to-do-list based navigation to complete the selected tasks, which are updated during and after each driving session.","It should be appreciated that although the in-vehicle computing system  has been described above in regard as being a component of, attached to, or otherwise incorporated in the vehicle , the in-vehicle computing system  may be embodied as a mobile computing system carried by a driver or passenger of the vehicle  in other embodiments. For example, the in-vehicle computing system  may be embodied as a smart phone, computing tablet, notebook computer, mobile internet device, laptop computer, or other mobile computing device. Similarly, the navigation circuitry  and navigation module  may be embodied as a stand-alone device (e.g., a mobile navigation device) to which the in-vehicle computing system  may communicate to retrieve navigation data as discussed above.","While the disclosure has been illustrated and described in detail in the drawings and foregoing description, such an illustration and description is to be considered as exemplary and not restrictive in character, it being understood that only illustrative embodiments have been shown and described and that all changes and modifications that come within the spirit of the disclosure are desired to be protected."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention described herein is illustrated by way of example and not by way of limitation in the accompanying figures. For simplicity and clarity of illustration, elements illustrated in the figures are not necessarily drawn to scale. For example, the dimensions of some elements may be exaggerated relative to other elements for clarity. Further, where considered appropriate, reference labels have been repeated among the figures to indicate corresponding or analogous elements.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
