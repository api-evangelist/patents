---
title: PDF plugin to view any page
abstract: Configurations for dynamically previewing web content in a portable document format (PDF) for display in a web client are provided. In a first process of the web client, a request is transmitted to a second process of the web client for generating a PDF document for web content in a first window in the web client. In the second process, the PDF document is generated for the web content in response to receiving the request from the first process and then transmitted to the first process. In the first process, a string identifier is generated for referencing the PDF document from the second process. A request is transmitted to a third process for displaying the PDF document referenced by the string identifier in a second window of the web client. In the third process, the PDF document is displayed in the second window of the web client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08700990&OS=08700990&RS=08700990
owner: Google Inc.
number: 08700990
owner_city: Mountain View
owner_country: US
publication_date: 20110920
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["In a given web client (e.g., a web browser), web content can be displayed in the web client. For example, web content can include a mixture of text and graphics (e.g., images or photos, etc.). The web client can provide for printing the web content to a specified output device (e.g., printer).","The subject technology provides for dynamically previewing web content in a portable document format (PDF) for display in a web client including multiple processes. In a first process of the web client, the subject technology transmits a request to a second process of the web client for generating a PDF document for web content in a first window in the web client. In the second process of the web client, the subject technology generates the PDF document for the web content in response to receiving the request from the first process. The subject technology then transmits the generated PDF document to the first process. In the first process of the web client, the generated PDF document is received from the second process. A string identifier is generated for referencing the PDF document. A second request is transmitted to a third process for displaying the PDF document referenced by the string identifier in a second window of the web client. In the third process of the web client, the subject technology displays the PDF document in the second window of the web client in response to receiving the second request.","The subject technology further provides a system for dynamically previewing web content in a portable document format (PDF) for display in a web client including multiple processes. The system includes memory, one or more processors, and one or more modules stored in memory and configured for execution by the one or more processors. The system includes a browser user interface (UI) module configured to transmit a request for generating a PDF document for web content in a first window in the web client. The system also include a renderer module configured to render the web content to a display context in response to the request from the browser UI module. The system includes a PDF document module configured as the display context for rendering the web content by the renderer module. The system includes a PDF storage module configured to store the generated PDF document and identify the generated PDF document with a unique string identifier. Additionally, the system includes a print preview module configured to display the PDF document identified by the unique string identifier from the PDF storage module in a second window in the web client.","Yet another aspect of the subject technology provides, in a first process of a web client, transmitting a request to a second process of the web client for generating a PDF document for web content in a first window in the web client. In the second process of the web client, the subject technology generates the PDF document for the web content in response to receiving the request from the first process. The generated PDF document is then transmitted to the first process. In the first process of the web client, the subject technology generates a string identifier for referencing the PDF document received from the first process. A second request is transmitted to a third process for displaying the PDF document referenced by the string identifier in a second window of the web client. In the third process of the web client, the subject technology displays the PDF document in the second window of the web client in response to receiving the second request. The PDF document can include several pages. Next, the subject technology receives input for selecting a subset of the several pages of the PDF document. The selected subset of the several pages of the PDF document are then displayed in the second window of the web client.","It is understood that other configurations of the subject technology will become readily apparent to those skilled in the art from the following detailed description, wherein various configurations of the subject technology are shown and described by way of illustration. As will be realized, the subject technology is capable of other and different configurations and its several details are capable of modification in various other respects, all without departing from the scope of the subject technology. Accordingly, the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.","The detailed description set forth below is intended as a description of various configurations of the subject technology and is not intended to represent the only configurations in which the subject technology may be practiced. The appended drawings are incorporated herein and constitute a part of the detailed description. The detailed description includes specific details for the purpose of providing a thorough understanding of the subject technology. However, it will be clear and apparent to those skilled in the art that the subject technology is not limited to the specific details set forth herein and may be practiced without these specific details. In some instances, well-known structures and components are shown in block diagram form in order to avoid obscuring the concepts of the subject technology.","In a typical web client (e.g., browser), previewing web content displayed in a web client for print output (i.e., a print preview) is limited to a small number of possible user interactions. For instance, the preview for print output is displayed in a modal dialog window that prevents interaction in a main application window of the web client. The preview is often generated in a proprietary format that is not accessible outside of the web client. Moreover, for a web client that executes in a single process, generating the preview is susceptible to security issues because untrusted or malicious code could execute upon loading the web content and potentially compromise the web client (e.g., by installing malware). As used herein, the term \u201cprocess\u201d when utilized in connection with the web client refers to an instance of an operating system (OS) process (e.g., a computer program that is executing). In some configurations, an OS process can include multiple threads that execute instructions concurrently.","To remedy the aforementioned issues, a web client with a multi-process architecture can be provided. For instance, the web client may include a browser process and a renderer process in which the browser process is responsible for operations for controls and a user interface for the web client, and the renderer process is responsible for operations for rendering the web content for display. By providing multiple processes that execute different functionalities, the web client can improve the robustness and security of the web client.","Some configurations can utilize the multi-process architecture of the web client to generate a preview of a print output in a window (e.g., a tab or tabbed window) of the web client for interacting with the preview. In a first process (i.e., the browser process) of the web client, a request is transmitted to a second process (i.e., the renderer process) of the web client for generating a Portable Document Format (PDF) document for web content in a first window of the web client. In the second process of the web client, the PDF document for the web content is generated in response to receiving the request from the first process. The second process of the web client then transmits the generated PDF document to the first process of the web client.","Subsequently, in the first process of the web client, the PDF document is received from the second process, and a string identifier referencing the PDF document is generated. In particular, the string identifier could be a hyperlink with the location of the PDF document. The first process of the web client transmits a second request to a third process (e.g., a second renderer process) for displaying the PDF document referenced by the string identifier. The second request in some configurations can include JavaScript code that instructs a second renderer process to display the PDF document in a second window of the web client (i.e., a new tabbed window). In the third process (i.e., the second renderer process) of the web client, the PDF document is then displayed in the second window of the web client in response to receiving the second request from the second process (i.e., the browser process).","In some configurations, the web client can include controls for dynamically re-rendering the displayed PDF document in the second window. For instance, one such control or set of controls (e.g., radio button, text box, etc.) could enable the user to select a range of pages within the PDF document (if the PDF document includes several pages) that upon selection causes the web client to dynamically re-render the PDF document with only the selected range of pages displayed in the second window. Some configurations could also provide controls for selecting the orientation of the PDF document (e.g., landscape, portrait, etc.) and dynamically re-render the PDF document based on the selected orientation. Yet one other set of controls could dynamically re-render the document in color or black and white based on the selection.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":"100"},"In a first process of the web client, the process  begins at  by transmitting a request to a second process of the web client for generating a PDF document for web content in a first window (e.g., a tab) in the web client. In some configurations, the request can be triggered by receiving a command (e.g., from user input) for previewing a print output of web content displayed in the web client. The first process can be a browser process in the web client and the second process can be a first renderer process in the web client. Additionally, the first renderer process can communicate with the browser process utilizing a respective named pipe. For instance, a named pipe can be system-persistent and exist beyond the life of the processes. Moreover, the respective name pipe can be used asynchronously to ensure that neither process is blocked waiting for the other process.","In the second process of the web client, the process  at  generates the PDF document for the web content in response to receiving the request from the first process. At , the process  transmits the generated PDF document to the first process via the aforementioned name piped or similar inter-process communication channel.","In the first process of the web client, the process  then receives the generated PDF document from the second process. The process  at  generates a string identifier for referencing the PDF document received from the second process. In one example, the string identifier for referencing the PDF document is a hyperlink of a location of the PDF document (e.g., indicating the path of the PDF document in a file system). The PDF can be locally stored in local storage in some configurations. The local storage can include, but is not limited to, different types of machine readable media such as a solid state drive (SSD), flash memory, a hard disk, etc.","The process at  transmits a second request to a third process for displaying the PDF document referenced by the string identifier in a second window (e.g., a tab) of the web client. In some configurations, the third process is a second renderer process in the web client. Thus, it should be understood that, in some configurations, a respective renderer process is assigned to each window (e.g., each tab window) of the web client. In the example process  of , the second process is a first renderer process and the third process is a second renderer process. By having a different renderer process assigned to each window, the web client can isolate the web content to a corresponding renderer process. In an instance where a particular renderer process is compromised (e.g., corrupted or crashes), the integrity of any other renderer process and\/or the browser process in the web client is not affected.","Next, in the third process of the web client, the process  at  displays the PDF document in the second window of the web client in response to receiving the second request. Moreover, the PDF document displayed in the second window of the web client can include several pages in one example. The process  can display the PDF document according to one or more predetermined settings discerned from a set of features or capabilities of a designated output device (e.g., printer). The process  then ends.","As mentioned above, the web client can include controls for dynamically re-rendering the displayed PDF document in the second window. For instance, one such control or set of controls (e.g., radio button, text box, etc.) could enable the user to select a range of pages within the PDF document (if the PDF document includes several pages) that upon selection causes the web client to dynamically re-render the PDF document with only the selected range of pages displayed in the second window. Some configurations could also provide controls for selecting the orientation of the PDF document (e.g., landscape, portrait, etc.) and dynamically re-render the PDF document based on the selected orientation. Yet one other set of controls could dynamically re-render the document in color or black and white based on the selection. The processes described below in connection with  describe different operations for providing the aforementioned options for dynamically re-rendering the PDF document (e.g., without requiring a manual refresh of the PDF document in the web client).",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","100","200","100","130"]},"The process  begins at  by receiving input for selecting a subset of the several pages of the PDF document in the second window of the web client. In one example, the input for the selection of one or more different pages is received from a text input box. The process  then at  displays the selected subset (e.g., a range, one or more specified pages, etc.) of the several pages of the PDF document in the second window of the web client. The process  can display the selected subset without requiring a manual refresh of the second window of the web client. Consequently, the process  can be understood as dynamically re-rendering the PDF document to display the selected subset of pages. The process  then ends.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 1"],"b":["300","300","100","300","100","130"]},"The process  starts at  by receiving input for modifying an orientation of the PDF document in the second window of the web client. In one example, the orientation of the PDF document is in a portrait mode. When the PDF document is displayed in portrait mode, the height of a display area is greater than the width. The process  then at  displays the PDF document in a second orientation according to the received input in the second window of the web client. For instance, the second orientation of the PDF document can be a landscape mode in which the width of the display area is greater than the height. The process  can display the PDF document in the second orientation without requiring a manual refresh of the second window of the web client. Consequently, the process  can be understood as dynamically re-rendering the PDF document to display the PDF document in the second orientation. The process  then ends.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 4","FIG. 1"],"b":["400","400","100","400","100","130"]},"The process  starts at  by receiving input for modifying a color mode of the PDF document in the second window of the web client. In one example, the PDF document can be displayed according to a predetermined color mode based on the detected features or capabilities of a designated output device or peripheral (e.g., physical printer, networked printer, virtual printer, etc.). For instance, the color mode of the PDF document can be monochromatic (e.g., black-and-white, grayscale, etc.). The process  at  then displays the PDF document in a second color mode according to the received input in the second window of the web client. The second color mode of the PDF document can be an RGB color mode in one example. The process  therefore can display the PDF document in the second color mode without requiring a manual refresh of the second window of the web client. As result, the process  can be understood as dynamically re-rendering the PDF document to display the PDF document in the second color mode. The process  then ends.","In some configurations, the subject technology can provide a graphical user interface for configurations of the subject technology described above in  above. For instance, the graphical user interface can include one or more controls for dynamically re-rendering the displayed PDF document in the second window according to different input received for different options in the graphical user interface.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 5","FIG. 1"],"b":["500","500","500","100","500"]},"As illustrated in , the GUI  includes different sets of controls , , ,  and  corresponding to different options. Each set of controls includes one or more graphical elements for manipulating options associated with a displayed PDF document. A graphical element can include, but is not limited to, a button, check box, radio button, slider, list box, drop-down list, menu, combo box, icon, text box, scroll bar, etc. For instance, the set of controls  includes graphical elements for printing the displayed PDF document. The set of controls  includes graphical elements for setting a destination output device (e.g., printer). The set of controls  includes graphical elements for setting a number of pages from the PDF document for display, a number of copies, and whether a print output is two-sided (e.g., duplex printing). The set of controls  includes graphical elements for selecting an orientation (e.g., portrait or landscape) of the displayed PDF. The set of controls  includes graphical elements for setting a color mode of the displayed PDF.","The GUI  also includes a display area  for displaying a PDF document according to the options from the sets of controls -. In one example, the sets of controls - and the display area  are included in a single window or display area of the GUI . Based on input received by one or more sets of controls, the GUI  allows each of the sets of controls - to dynamically re-render the displayed PDF in the display area  (e.g., according to the example processes described above in ). For instance, the set of controls  can receive input to change the orientation of the displayed PDF from a portrait mode to a landscape mode. After receiving the input, the GUI  updates the display area  with the PDF in landscape mode.","Although the above description of  includes different example graphical elements in the GUI , some implementations can include other graphical elements in the GUI  and still be within the scope of the subject technology. Further, the GUI  is not required to include all of the aforementioned sets of controls. In some instances, the GUI  can omit one or more of the aforementioned sets of controls.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 6","FIG. 6","FIGS. 1-4","FIG. 5"],"b":["605","605","605"]},"As shown in , the system  includes several modules for providing different functionality. The system  is configured to include a browser user interface (UI) module , a print preview module , a renderer module , a PDF document module , and a PDF storage module . The browser UI module  is configured to transmit a request for generating a PDF document for web content in a first window in the web client. The renderer module  is configured to render the web content to a display context in response to the request from the browser UI module . In one example, the display context can include one or more different properties that specify how text and graphics from the web content are displayed. The PDF document module  is configured as the display context for rendering the web content by the renderer module . The PDF storage module  is configured to store the generated PDF document and identify the generated PDF document with a unique string identifier. The print preview module  is configured to display the PDF document identified by the unique string identifier from the PDF storage module in a second window in the web client.","Further, the print preview module  can implement the processes described in connection with  and respond to input for different options described in the GUI  of . In an instance in which the PDF document includes several pages, the print preview module  is further configured to display a subset of the several pages of the PDF document in the second window in the web client. Moreover, in an instance in which the PDF document is initially displayed in the second window in a portrait orientation, the print preview module  is further configured to display the PDF document in a landscape orientation in the second window. Additionally, in an instance in which the PDF document is initially displayed in a monochromatic color mode in the second window, the print preview module  is further configured to display the PDF document in an RGB color mode in the second window.","As further shown in , each of the aforementioned modules can be configured to communicate between each other. For instance, different data, messages, API calls and returns can be passed between the different modules in the system .","Many of the above-described features and applications are implemented as software processes that are specified as a set of instructions recorded on a machine readable storage medium (also referred to as computer readable medium). When these instructions are executed by one or more processing unit(s) (e.g., one or more processors, cores of processors, or other processing units), they cause the processing unit(s) to perform the actions indicated in the instructions. Examples of machine readable media include, but are not limited to, CD-ROMs, flash drives, RAM chips, hard drives, EPROMs, etc. The machine readable media does not include carrier waves and electronic signals passing wirelessly or over wired connections.","In this specification, the term \u201csoftware\u201d is meant to include firmware residing in read-only memory and\/or applications stored in magnetic storage, which can be read into memory for processing by a processor. Also, in some implementations, multiple software components can be implemented as sub-parts of a larger program while remaining distinct software components. In some implementations, multiple software subject components can also be implemented as separate programs. Finally, any combination of separate programs that together implement a software component(s) described here is within the scope of the subject technology. In some implementations, the software programs, when installed to operate on one or more systems, define one or more specific machine implementations that execute and perform the operations of the software programs.","A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.","Some configurations are implemented as software processes that include one or more application programming interfaces (APIs) in an environment with calling program code interacting with other program code being called through the one or more interfaces. Various function calls, messages or other types of invocations, which can include various kinds of parameters, can be transferred via the APIs between the calling program and the code being called. In addition, an API can provide the calling program code the ability to use data types or classes defined in the API and implemented in the called program code.","One or more APIs may be used in some configurations. An API is an interface implemented by a program code component or hardware component (\u201cAPI implementing component\u201d) that allows a different program code component or hardware component (\u201cAPI calling component\u201d) to access and use one or more functions, methods, procedures, data structures, classes, and\/or other services provided by the API implementing component. An API can define one or more parameters that are passed between the API calling component and the API implementing component.","An API allows a developer of an API calling component (that could be a third party developer) to utilize specified features provided by an API implementing component. There may be one API calling component or there may be more than one such component. An API can be a source code interface that a computing system or program library provides to support requests for services from an application. An operating system (OS) can have multiple APIs to allow applications running on the OS to call one or more of those APIs, and a service (such as a program library) can have multiple APIs to allow an application that uses the service to call one or more of those APIs. An API can be specified in terms of a programming language that can be interpreted or compiled when an application is built.","In some configurations the API implementing component may provide more than one API, each providing a different view of or with different aspects that access different aspects of the functionality implemented by the API implementing component. For example, one API of an API implementing component can provide a first set of functions and can be exposed to third party developers, and another API of the API implementing component can be hidden (not exposed) and provide a subset of the first set of functions and also provide another set of functions, such as testing or debugging functions which are not in the first set of functions. In other configurations the API implementing component may itself call one or more other components via an underlying API and thus be both an API calling component and an API implementing component.","An API defines the language and parameters that API calling components use when accessing and using specified features of the API implementing component. For example, an API calling component accesses the specified features of the API implementing component through one or more API calls or invocations (embodied for example by function or method calls) exposed by the API and passes data and control information using parameters via the API calls or invocations. The API implementing component may return a value through the API in response to an API call from an API calling component. While the API defines the syntax and result of an API call (e.g., how to invoke the API call and what the API call does), the API may not reveal how the API call accomplishes the function specified by the API call. Various API calls are transferred via the one or more application programming interfaces between the calling (API calling component) and an API implementing component. Transferring the API calls may include issuing, initiating, invoking, calling, receiving, returning, or responding to the function calls or messages. In other words, transferring can describe actions by either of the API calling component or the API implementing component. The function calls or other invocations of the API may send or receive one or more parameters through a parameter list or other structure. A parameter can be a constant, key, data structure, object, object class, variable, data type, pointer, array, list or a pointer to a function or method or another way to reference a data or other item to be passed via the API.","Furthermore, data types or classes may be provided by the API and implemented by the API implementing component. The API calling component therefore can declare variables, use pointers to, use or instantiate constant values of such types or classes by using definitions provided in the API.","Generally, an API can be used to access a service or data provided by the API implementing component or to initiate performance of an operation or computation provided by the API implementing component. By way of example, the API implementing component and the API calling component may each be any one of an operating system, a library, a device driver, an API, an application program, or other module (it should be understood that the API implementing component and the API calling component may be the same or different type of module from each other). API implementing components may in some cases be embodied at least in part in firmware, microcode, or other hardware logic. In some configurations, an API may allow a client program to use the services provided by a Software Development Kit (SDK) library. In other configurations an application or other client program may use an API provided by an Application Framework. In these configurations the application or client program may incorporate calls to functions or methods provided by the SDK and provided by the API or use data types or objects defined in the SDK and provided by the API. An Application Framework may in these configurations provide a main event loop for a program that responds to various events defined by the Framework. The API allows the application to specify the events and the responses to the events using the Application Framework. In some implementations, an API call can report to an application the capabilities or state of a hardware device, including those related to aspects such as input capabilities and state, output capabilities and state, processing capability, power state, storage capacity and state, communications capability, etc., and the API may be implemented in part by firmware, microcode, or other low level logic that executes in part on the hardware component.","The API calling component may be a local component (i.e., on the same data processing system as the API implementing component) or a remote component (i.e., on a different data processing system from the API-implementing component) that communicates with the API-implementing component through the API over a network. It should be understood that an API implementing component may also act as an API calling component (i.e., it may make API calls to an API exposed by a different API implementing component) and an API calling component may also act as an API implementing component by implementing an API that is exposed to a different API calling component.","The API can allow multiple API calling components written in different programming languages to communicate with the API implementing component (thus the API may include features for translating calls and returns between the API implementing component and the API calling component). The API however can be implemented in terms of a specific programming language. An API calling component can, in one configuration, call APIs from different providers such as a set of APIs from an OS provider and another set of APIs from a plug-in provider and another set of APIs from another provider (e.g. the provider of a software library) or creator of the another set of APIs.","The following description describes an example API architecture in which the processes described above in  and the graphical user interface in  can be implemented.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 7","FIG. 7"],"b":["700","715","710","710","705","710","705","710","715","710","715","710","705"]},"It will be appreciated that the API implementing component  can include additional functions, methods, classes, data structures, and\/or other features that are not specified through the API  and are not available to the API calling component . It should be understood that the API calling component  can be on the same system as the API implementing component  or can be located remotely and accesses the API implementing component  using the API  over a network. While  illustrates a single API calling component  interacting with the API , it should be understood that other API calling components, which can be written in different languages (or the same language) than the API calling component , can use the API .","The API implementing component , the API , and the API calling component  can be stored in a machine-readable medium, which includes any mechanism for storing information in a form readable by a machine (e.g., a computer or other data processing system). For example, a machine-readable medium includes magnetic disks, optical disks, random access memory, read only memory, flash memory devices, etc.","The following description describes an example system in which aspects of the subject technology can be implemented.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 8","b":["800","800","800","805","810","815","820","825","830","835","840"]},"The bus  collectively represents all system, peripheral, and chipset buses that communicatively connect the numerous internal devices of the system . For instance, the bus  communicatively connects the processing unit(s)  with the read-only memory , the system memory , and the storage device .","From these various memory units, the processing unit(s)  retrieves instructions to execute and data to process in order to execute the processes of the subject technology. The processing unit(s) can be a single processor or a multi-core processor in different implementations.","The read-only-memory (ROM)  stores static data and instructions that are needed by the processing unit(s)  and other modules of the system . The storage device , on the other hand, is a read-and-write memory device. This device is a non-volatile memory unit that stores instructions and data even when the system  is off. Some implementations of the subject technology use a mass-storage device (such as a magnetic or optical disk and its corresponding disk drive) as the storage device .","Other implementations use a removable storage device (such as a flash drive, a floppy disk, and its corresponding disk drive) as the storage device . Like the storage device , the system memory  is a read-and-write memory device. However, unlike storage device , the system memory  is a volatile read-and-write memory, such a random access memory. The system memory  stores some of the instructions and data that the processor needs at runtime. In some implementations, the subject technology's processes are stored in the system memory , the storage device , and\/or the read-only memory . For example, the various memory units include instructions for processing multimedia items in accordance with some implementations. From these various memory units, the processing unit(s)  retrieves instructions to execute and data to process in order to execute the processes of some implementations.","The bus  also connects to the optional input and output interfaces  and . The optional input interface  enables the user to communicate information and select commands to the system. The optional input interface  can interface with alphanumeric keyboards and pointing devices (also called \u201ccursor control devices\u201d). The optional output interface  can provide display images generated by the system . The optional output interface  can interface with printers and display devices, such as cathode ray tubes (CRT) or liquid crystal displays (LCD). Some implementations can interface with devices such as a touchscreen that functions as both input and output devices.","Finally, as shown in , bus  also couples system  to a network interface  through a network adapter (not shown). In this manner, the computer can be a part of a network of computers (such as a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), or an Intranet, or an interconnected network of networks, such as the Internet. Any or all components of system  can be used in conjunction with the subject technology.","These functions described above can be implemented in digital electronic circuitry, in computer software, firmware or hardware. The techniques can be implemented using one or more computer program products. Programmable processors and computers can be included in or packaged as mobile devices. The processes and logic flows can be performed by one or more programmable processors and by one or more programmable logic circuitry. General and special purpose computing devices and storage devices can be interconnected through communication networks.","Some implementations include electronic components, such as microprocessors, storage and memory that store computer program instructions in a machine-readable or computer-readable medium (alternatively referred to as computer-readable storage media, machine-readable media, or machine-readable storage media). Some examples of such computer-readable media include RAM, ROM, read-only compact discs (CD-ROM), recordable compact discs (CD-R), rewritable compact discs (CD-RW), read-only digital versatile discs (e.g., DVD-ROM, dual-layer DVD-ROM), a variety of recordable\/rewritable DVDs (e.g., DVD-RAM, DVD-RW, DVD+RW, etc.), flash memory (e.g., SD cards, mini-SD cards, micro-SD cards, etc.), magnetic and\/or solid state hard drives, read-only and recordable Blu-Ray\u00ae discs, ultra density optical discs, any other optical or magnetic media, and floppy disks. The computer-readable media can store a computer program that is executable by at least one processing unit and includes sets of instructions for performing various operations. Examples of computer programs or computer code include machine code, such as is produced by a compiler, and files including higher-level code that are executed by a computer, an electronic component, or a microprocessor using an interpreter.","While the above discussion primarily refers to microprocessor or multi-core processors that execute software, some implementations are performed by one or more integrated circuits, such as application specific integrated circuits (ASICs) or field programmable gate arrays (FPGAs). In some implementations, such integrated circuits execute instructions that are stored on the circuit itself.","As used in this specification and any claims of this application, the terms \u201ccomputer\u201d, \u201cserver\u201d, \u201cprocessor\u201d, and \u201cmemory\u201d all refer to electronic or other technological devices. These terms exclude people or groups of people. For the purposes of the specification, the terms display or displaying means displaying on an electronic device. As used in this specification and any claims of this application, the terms \u201ccomputer readable medium\u201d and \u201ccomputer readable media\u201d are entirely restricted to tangible, physical objects that store information in a form that is readable by a computer. These terms exclude any wireless signals, wired download signals, and any other ephemeral signals.","To provide for interaction with a user, implementations of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.","Configurations of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (\u201cLAN\u201d) and a wide area network (\u201cWAN\u201d), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some configurations, a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server.","It is understood that any specific order or hierarchy of steps in the processes disclosed is an illustration of example approaches. Based upon design preferences, it is understood that the specific order or hierarchy of steps in the processes can be rearranged, or that all illustrated steps be performed. Some of the steps can be performed simultaneously. For example, in certain circumstances, multitasking and parallel processing can be advantageous. Moreover, the separation of various system components in the configurations described above should not be understood as requiring such separation in all configurations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.","The previous description is provided to enable any person skilled in the art to practice the various aspects described herein. Various modifications to these aspects will be readily apparent to those skilled in the art, and the generic principles defined herein can be applied to other aspects. Thus, the claims are not intended to be limited to the aspects shown herein, but is to be accorded the full scope consistent with the language claims, wherein reference to an element in the singular is not intended to mean \u201cone and only one\u201d unless specifically so stated, but rather \u201cone or more.\u201d Unless specifically stated otherwise, the term \u201csome\u201d refers to one or more. Pronouns in the masculine (e.g., his) include the feminine and neuter gender (e.g., her and its) and vice versa. Headings and subheadings, if any, are used for convenience only and do not limit the subject technology.","A phrase such as an \u201caspect\u201d does not imply that such aspect is essential to the subject technology or that such aspect applies to all configurations of the subject technology. A disclosure relating to an aspect can apply to all configurations, or one or more configurations. A phrase such as an aspect can refer to one or more aspects and vice versa. A phrase such as a \u201cconfiguration\u201d does not imply that such configuration is essential to the subject technology or that such configuration applies to all configurations of the subject technology. A disclosure relating to a configuration can apply to all configurations, or one or more configurations. A phrase such as a configuration can refer to one or more configurations and vice versa.","The word \u201cexample\u201d is used herein to mean \u201cserving as an example or illustration.\u201d Any aspect or design described herein as \u201cexample\u201d is not necessarily to be construed as preferred or advantageous over other aspects or designs.","All structural and functional equivalents to the elements of the various aspects described throughout this disclosure that are known or later come to be known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the claims. Moreover, nothing disclosed herein is intended to be dedicated to the public regardless of whether such disclosure is explicitly recited in the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features of the subject technology are set forth in the appended claims. However, for purpose of explanation, several configurations of the subject technology are set forth in the following figures.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
