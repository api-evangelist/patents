---
title: Stream class driver for computer operating system
abstract: A stream class driver for use in a computer operating system functions together with a minidriver. The minidriver is associated with a particular design for an adapter, which is a hardware device that generates or receives streaming data. The stream class driver deals with common operating system tasks such as direct memory access, scatter/gather memory use and Plug n Play. The stream class driver is independent of the hardware design and can therefore function with any type of streaming device or external buses such as USB or IEEE 1394. the minidriver functionality is limited to only those functions required by the unique aspects of the hardware and for the minimum requirements of operation, thereby minimizing the complexity and burden of designing minidrivers for hardware devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07093266&OS=07093266&RS=07093266
owner: Microsoft Corporation
number: 07093266
owner_city: Redmond
owner_country: US
publication_date: 20040927
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present application is a continuation application of U.S. patent application Ser. No. 09\/819,085 filed Jul. 27, 2001 now U.S. Pat. No. 6,845,508, entitled \u201cStream Class Driver for Computer Operating System\u201d which is incorporated herein by reference.","1. The Field of the Invention","The present invention pertains in general to computer software operating systems, and more particular to a river for a class of devices which generate or receive streaming data.","2. The Relevant Technology","A rapidly growing area of interest in the field of computer technology is that of \u201cmultimedia\u201d. This term generally refers to the concurrent use of video and audio in a computer system for a wide range of applications including business and entertainment.","The primary applications which have led to the tremendous success of personal computers have been based on the power of these computers to process numbers in complex ways such as through spreadsheets, graphics, word processing and data bases. However, in such applications, the application program works with a discrete data file and typically works with only a small part of such a data file at any one time. Multimedia applications add a major new aspect to the processing of data by personal computer. This is the requirement to manage and process a continuous stream of data as opposed to discrete data files which are typically processed by an application program. The stream of data associated with a multimedia application is generally far too large to be loaded in memory, and in many cases the data is continuous with no predetermined end of the data. A further feature of multimedia streaming data is that it is sequential in nature and frequently is time dependent, that is, it must not only be processed in a specific sequential order, it must also be processed to produce precisely times sequential events.","An example of multimedia streaming data is the output which is produced by a DVD (Digital Versatile Disk) apparatus. The contemporary DVD apparatus produces data using the MPEG-2 video and audio format. This output actually comprises three separate data streams which are video, audio and subpicture. Each of these streams requires separate processing, but the results of the processing must be time synchronized and generated at a predetermined absolute rate to obtain the desired results. Video and audio signals must be properly synchronized and timed to generate a viable multimedia presentation.","A standardized computer platform, including hardware and software, must be able to work a large number of independently produced multimedia adapters, such as DVD players, video cameras, audio sources and ROM discs. Each of these products requires a separate, complex driver which functions to interface application programs through the computer operating system to the specific hardware in order to process the multimedia streaming data to produce continuous outputs. However, to accommodate the massive amounts of data and the extensive, complex processing of this data required for a successful multimedia application, the driver must be highly efficient, well designed and capable of performing a wide range of functions within the operating system and functions required by the application program. With the growing complexity of operating systems and the greater demands of application programs, it is very difficult for each independent producer of a hardware device, particularly for multimedia, to produce an efficient, current and effective driver for that product. Thus, there exists a need to reduce the burden of producing drivers for multimedia products.","In other areas of computer system operation, such as for pointing devices, for example, a mouse, it has been proposed to have a hardware independent driver associated with the operating system and have a hardware dependent driver provided by the hardware manufacturer for each particular device. See U.S. Pat. No. 5,465,364 entitled \u201cMethod and System for Providing Device Driver Support Which is Independent of Changeable Characteristics of Devices and Operating Systems.\u201d Pointing Devices, however, do not have the same problems that are encountered with multimedia applications. The data rate for pointing devices is extremely low, the data processing is not particularly complex and the pointing device is extremely low, the data processing is not particularly complex and the pointing device is generally a support aspect of an application program, in contrast to being an aspect that is a principle part of a multimedia application.","In view of the substantial problems encountered in the use of multimedia applications on personal computes, and the insatiable consumer demand for greater bandwidth and data processing sophistication, there is a need for a multimedia driver configuration which can efficiently handle the volume and complexity of streaming data while at the same time minimizing the burden and difficulty of driver design for the independent developers and manufacturers of multimedia products.","The present invention is a method of operation, and corresponding computer program units, for a stream class driver which is used in conjunction with a minidriver. The minidriver is associated with a hardware adapter which generates or receives streaming data. The operation of the stream class driver product begins with receiving of initialization data from the minidriver followed by registration of the initialization data for later use by the stream class driver. After registration, the stream class driver creates a device object for the adapter. The stream class driver then sends a command to the minidriver to initialize the adapter. Next, the stream class driver requests that the minidriver provide adapter stream information for all of the data streams handled by the adapter. The minidriver provides this information and the stream class driver registers the received adapter stream information. The stream class driver may then provide a command to the minidriver to turn off power to the adapter and then pages out the minidriver and subsequently awaits a data stream request.","Upon receipt of a data stream request, the stream class driver pages in the minidriver to active memory. A command is generated to the minidriver to turn on power to the adapter. The stream class driver provides a data stream open command and stream structure data to the minidriver as needed to open the data stream requested by an application program. Next, the stream class driver provides a stream read or a stream write command to the minidriver. Properties and control information in a predefined data format related to the stream request are transmitted from the stream class driver to the minidriver. Upon receipt of a data stream termination command initiated by an application program, the stream class driver provides a stream close command to the minidriver. Finally, the stream class driver provides an uninitialization command to the minidriver for uninitializing the adapter.","In a further aspect of the present invention, the stream class driver can open additional data streams for either reading or writing streaming data concurrently with the first data stream.","The present invention includes a stream class driver for use in a computer operating system. The purpose of this stream class driver is to make the writing of hardware drivers (minidrivers) for streaming devices much simpler. The functions performed by the minidriver are limited to those functions which are unique or necessary for the associated hardware, while the stream class driver performs all of the functions which are not dependent upon the particular hardware implemented.","Terminology","The principal terms used in describing the functions, data structures, commands and other aspects of the present invention are defined as follows:","1. AC-3: An audio standard for delivering digital audio developed by Dolby Laboratories.","2. ActiveMovie: A cross-platform API developed by Microsoft Corporation for developers of multimedia applications that provide a user-mode connection and stream architecture to support high quality digital video, high fidelity audio, and special effects, now termed \u201cDirect Show.\u201d","3. Adapter: a hardware device for generating, handling or consuming streaming data.","4. API: Application Programming Interface\u2014A set of routines that an applications program uses to request and carry out lower-level services performed by a computer operating system.","5. CSA: Connection and Streaming Architecture\u2014A functional specification produced by Microsoft Corporation defining an architecture and interface for application programs using streaming data and synchronization tasks. This is kernel-mode streaming in WDM.","6. DLL: Dynamic Link Library\u2014An API routine that user mode applications access through ordinary procedure calls.","7. DMA: Direct Memory Access.","8. Driver: Kernel Mode used to either control a hardware device or to emulate a hardware device.","9. EISA: Extended Industry Standard Architecture, a 32-bit bus configuration developed as an extension of ISA.","10. Filter: An entity which performs a specified function and includes a collection of related connection points called pins.","11. GUID: Globally Unique Identifier. A quantity which is unique and includes a current date\/time and a sequence number and which is used to allow any party to create an identifier which will not overlap other identifiers similarly created.","12. IEEE 1394: A standardized serial bus for high speed data transfer.","13. IOCTL: I\/O control.","14. IRP: I\/O Request Packet\u2014Data structures that drivers use to communicate with each other.","15. IRQ: Interrupt Request\u2014A method by which a device can request to be serviced by the device's software driver.","16. ISA: Industry Standard Architecture\u2014legacy bus configuration for original personal computer design.","17. ISO: International Standards Organization.","18. ISR: Interrupt Service Routine.","19. Kernel Mode: The processor mode which allows full, unprotected access to the system. A driver or thread running in kernel mode has access to system memory and hardware.","20. Minidriver: A hardware specific DLL that uses a class driver to accomplish most actions through functional calls and provides only device-specific controls.","21. MPEG: Moving Pictures Expert Group\u2014A standard for compression and transmission of digital video.","22. PCI: Peripheral Component Interconnect\u2014A high-performance, 32-bit or 64-bit bus designed to be used with devices that have high bandwidth requirements such as the display subsystem.","23. Pin: A set of properties which describe a potential connection point to a filter.","24. PIO: Programmed input\/output, which is much like a complement to DMA.","25. Plug and Play (PnP): An enumerator standard for automatically detecting and recognizing installed hardware, as defined by Microsoft Corporation.","26. SRB: Stream Request Block.","27. USB: Universal Serial Bus\u2014A bidirectional, isochronous, dynamically attachable serial interface for adding peripheral devices such as game controllers, serial and parallel ports, and input device on a single bus.","28. User Mode: The nonprivileged processor Mode in which application code executes.","29. VxD: Virtual Device Driver\u2014A device driver that runs at the privileged ring  protected Mode of the microprocessor.","30. WDM: Windows 32 Driver Model\u2014a 32 bit driver model based on the Windows NT driver model that is designed to provide a common architecture of I\/O services and binary-compatible device drivers for both Windows NT and Windows operating system for specific classes of drivers.","31. Windows NT Driver Model: The layered device driver model used under the Windows NT operating system (see \u201cInside Windows NT\u201d by Helen Custer (Microsoft Press 1993)).","32. Windows NT: Refers to the Microsoft Corporation Windows NT Version 4.0 operating system, including any add-on capabilities and any later versions of the operating system.","Operational Description","The operating environment of the present invention is illustrated in . This drawing shows selected hardware and software within a personal computer system which is preferably a system using an Intel Corporation x86 microprocessor and a Microsoft Corporation operating system, such as Windows NT. The present invention is used within the illustrated environment for supporting a multimedia application, such as an application program . The present invention is directed to a stream class driver , which is preferably included within an operating system . The application program  interacts with the operating system  through an application programming interface (API) . The operating system  includes the conventional features and operating aspects, not illustrated, which are well-known in the industry. A system bus driver is a part of the operating system  and is used to provide communication through a bus , such as PCI bus used with personal computers.","The upper edge of a stream class driver  of the present invention is accessed through a CSA interface , which is defined in \u201cWindows Driver Model Connection and Streaming Architecture Design Notes and Reference\u201d, published by Microsoft Corporation. This document, which is incorporated herein by reference, is a part of the \u201cMEMPHIS\u201d designated operating system documentation entitled Windows 98 Developer's Release Device Driver Kit (DDK).","CSA interface 32 is further defined in U.S. patent application Ser. No. 08\/825,957, filed Apr. 4, 1997, entitled \u201cMethod and Computer Program Product for Reducing Inter-Buffer Data Transfers Between Separate Processing Components\u201d, which is incorporated herein by reference.","The class driver  can be embodied in a computer readable medium such as magnetic disk, optical disk or magnetic tape.","The lower edge connection the stream class driver  is defined by a stream class driver\/minidriver interface , which is specified in detail herein and in the attached appendices.","A minidriver  communicates through the interface  with the stream class driver . Minidriver  is a unique design corresponding to the hardware adapter . The adapter  is preferably a device that generates or consumes steaming data, such as used in a multimedia application. An example of the adapter  is a DVD player which produced digital audio and video streams for a motion picture.","Minidriver  is a hardware-specific DLL that uses the class driver  to accomplish most actions through function calls, and provides only device-specific controls. The minidriver  registers each adapter, such as , with the class driver , and the class driver  creates a device object to represent each adapter  that it registered. This process is described in more detail below. Minidriver  uses the class driver's device object to make system calls.","The adapter  is connected to transmit and receive commands and to transmit and receive data through the bus . In a typical implementation, the application program  is a multimedia application that uses streaming data provided by the adapter  through the bus .","Operating system aspect  includes the minidriver , which is unique to the adapter , but when implemented with a particular computer system becomes a part of the operating system  of that computer.","The internal interface  between the class driver  and the minidriver  is primarily a set of function calls between these drivers. The class driver  controls the request flow, calling the minidriver  when access to the adapter  hardware is necessary. The class driver  is responsible for multiprocessor and interrupt synchronization. Once both the class driver  and the minidriver  are initialized, the minidriver  is passive and is called only by the class driver . Most of the function calls from the minidriver  to the class driver  are low-level service requests.","The detailed description for the specific embodiment of the present invention presented herein includes the description in the appendices that follow. These are:","Appendix I Stream Class Driver Functions (Stream Class Drive )","Appendix II Minidriver Functions (Minidriver )","Appendix III Stream Request Block (Interface  SRB)","Appendix IV SRB Command Codes for the Adapter (Interface  Device Code)","Appendix V Stream Specific Command Codes (Interface  Stream Command Code)","These appendices describe in detail the functions, data structures and commands for the interface .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 2","FIG. 2"],"b":["24","36","20","24","22","36"]},"The operating system  functional operation begins at a start point . Next, step  is performed to power up the system and perform the conventional self tests which are well known in the personal computer industry.","After the system has been powered up and the operating system initialization process is performed, step  is executed in which an enumerator, such as Plug n Play detects the attached adapter . When the adapter has been detected, the Plug n Play enumerator, in step , loads into memory the minidriver  for the detected adapter . In step , the Plug n Play initiates the minidriver  DriverEntry routine, as describe in Appendix II.","Further referring to , the next functional step carried out is performed by the minidriver  in step . In this step the minidriver  calls the class driver  function StreamClassRegisterAdapter. (See Appendix I) The minidriver  further collects and passes the data structure termed HW_INITIALIZATION_DATA. This data structure is described in detail in Appendix II.","From step , control is transferred to step , which is performed by the stream class driver . Within step , the initialization data provided in the HW_INITIZLIZATION_DATA structure is registered, that is, it is recorded in memory for use by the class driver . Next, in step , the stream class driver  creates a device object corresponding to the adapter . The minidriver  will not create a device object, but instead will share the class driver  device object as needed. Only one device object is created per adapter.","In step , the stream class driver  calls the minidriver  to initialize the adapter . This is done by calling the minidriver's function HWReceivePacket with the command SRB_INITIALIZE_DEVICE. (See Appendix IV).","In step , the minidriver  initializes the adapter  hardware by performing the required setup and loading in the adapter any code required for operation of the hardware.","In step , control is returned to the streaming class driver  which calls the minidriver  for stream information. This is done with the command SRB_GET_STREAM_INFO (Appendix IV), which is sent to the minidriver function HWReceivePacket.","Upon receipt of the SRB_GET_STREAM_INFO command, the minidriver  in step  builds a hardware stream descriptor for all streams that are supported by the adaptor . This information is returned to the class driver . In step , the streaming class driver  registers the hardware stream descriptor in memory for future use.","Next, in step , the stream class driver  generates a power off command which is transmitted to the minidriver  for the adapter . (See Appendix IV) In general, the operating system , with driver , will turn off power to the adapter  whenever it is not being used, especially for battery powered computers.","The minidriver  receives the power off command in step  and turns off power to the adapter . In many systems, particularly portable computer systems, the adapter  is a device which uses a relatively substantial amount of electrical power. By disabling the adapter  when not in use, system power will be conserved.","Control is returned to the stream class driver  in step  wherein the driver  pages out the minidriver  program so that it is no longer stored in active memory, thus freeing resources for use by the application program , operating system  or other active applications. The device object is preferably closed, by closing its file handle, prior to paging out the minidriver . Finally, the class driver  enters state  to wait for a stream request which requires use of the adapter .","Upon completion of the steps shown in , the computer system multimedia subsystem has been initialized and set to be ready to use the adapter  for streaming data when needed.","Referring to , there is shown a series of interrelated operations carried out by the operating system , class driver  and minidriver  after the multimedia subsystem has been initialized as shown in . These operations are carried out to initiate and terminate a data stream request. A stream request  is generated by the operating system  in response to the application program . The data stream request is provided to the stream class driver  which responds in step  to page in the minidriver . This step loads the minidriver  into active memory. If the device object has been closed, it is opened prior to paging in the minidriver. If the minidriver  has not been paged out, step  is not needed.","In step , the stream driver  sends a power on command to the minidriver  for the adapter . This command is received by the minidriver  and in step  it turns on power to the adapter  by transmitting appropriate commands to the adapter  through the bus . Steps  and  are not needed if power has not been terminated to the adapter .","In step , the driver  calls the minidriver function HWReceivePacket with the command SRB_OPEN_STREAM (Appendix IV) and further provides a data structure HW_STREAM_OBJECT. (See Appendix III) This data structure provides the information needed by the adapter  and minidriver  to service a stream command which will be received from the application program .","Upon receipt of the stream open command, the minidriver  performs step  to activate the adapter  and open the specified stream. For the described example wherein the adapter  is a DVD, the specified stream could be the video stream. For other streams, such as audio, a new stream request  would need to be generated through the operating system  by the application program .","When the step  has been confirmed, the class driver  sends either a stream read (SRB_READ_DATA) or a stream write (SRB_WRITE_DATA) command to the minidriver function ReceiveDataPacket, as specified in the HW_STREAM_OBJECT for the selected stream. The minidriver  receives and stores the read or write command at step .","In step , the class driver  sets properties and other control information for the selected stream by passing the appropriate stream request block (SRB) to the minidriver's ReceiveControlPacket function as specified in the HW_STREAM_OBJECT for the selected stream.","At step , the minidriver  sets the properties and control information received for the selected data stream so that the data stream transfer proceeds as requested by the application program . At this point, the minidriver  is responsible for the streaming data request until it notifies the class driver  that the request has been completed.","In state , the class driver  waits for receipt of a stream termination command while the streaming data transfer proceeds between adapter  and application program .","When the application program  has completed use of the specified data stream, a stream termination  command is generated by the operating system  and transferred to the class driver  at step . In this step, the stream class driver  calls the minidriver  and sends a stream close command, SRB_CLOSE_STREAM, to the minidriver's HWReceivePacket function. In response to this command, the minidriver  at step  closes the specified stream. The transfer of data for the current stream is completed at an end state . After step , the class driver  may, optionally, close the device object, page out the minidriver , and turn power off to the adapter .","When the operating system  detects at step  that the adapter  has been disabled by the user, physically removed, or the system is being shut down, control is transferred to the driver  at step  in which the driver  calls the minidriver  and sends an uninitialization command SRB_UNINITIALIZE_DEVICE. In step  the minidriver  performs the actions needed to uninitialize the adapt  . The actions required are dependent upon the particular design of the adapter , and will vary from one manufacturer to the next. After the adapter  has been uninitialize, the minidriver  operation terminates at the end state .","While a streaming data request is being processed, the streaming adapter  may generate interrupts. When an interrupt is detected, the class driver  will call the minidriver  interrupt service routine, as described in Appendix II. All of the minidriver  functions are synchronized with the adapter  ISR. This is done to make the minidriver  nonreentrant. Nonreentrancy is accomplished by masking off the IRQ of the adapter  (and all lower priority IRQs) when code is being executed in any of the minidriver  routines. When a thread is executing in the minidriver , no calls will be made to any other function within the minidriver , including the ISR. This nonreentrancy holds true even on multiprocessor systems, making the minidriver  very easy to write.","Due to routine synchronization and request serialization, the minidriver  is multiprocessor safe and nonreentrant for low-to-medium-end hardware. The processing described above has correct file operation synchronization. For example, stream and adapter  opens are correctly serialized without having the minidriver  implement mutexes, semaphores, or events. All low-level buffer management is handled by the class driver . This includes allocation of DMA adapter object, as necessary, mapping of buffers and building scatter\/gather list of for DMA, and locking and flushing buffers appropriately in DMA versus PIO cases. All IOCTL parameter validation is performed by the class driver . All requests are timed by the class driver  with a watchdog timer.","A particular advantage for the class driver  of the present invention is that it can work with a wide variety of streaming hardware devices such as MPEG, video capture, USB audio and video and IEEE 1394 audio and video.","In summary, a driver configuration for streaming data includes a stream class driver for performing system operations which are independent of the streaming data adapter and a minidriver which performs a minimum set of functions that are dependent upon the specific hardware design implemented for the adapter. As a result, the minidriver design is greatly simplified and can be more easily implemented for each of a large number of streaming class devices.","Although one embodiment of the invention has been illustrated in the accompanying drawings and described in the foregoing Detailed Description, it will be understood that the invention is not limited to the embodiment disclosed, but is capable of numerous rearrangements, modifications and substitutions without departing from the scope of the invention. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention and the advantages thereof, reference is now made to the following description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
