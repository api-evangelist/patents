---
title: Nested categorization using factorization
abstract: A system for information item categorization in which each non-leaf node in a hierarchical organization of nodes represents a category, and each leaf node represents an information item. A number P is associated with each node. For non-leaf nodes, the associated number P is selected from a subset of relatively prime elements chosen from an appropriate Unique Factorization Domain (UFD), such as a set of relatively prime numbers which are a subset of the familiar set of integers. For leaf nodes, P is set to 1. A number M is also associated with each node. For each root node, M is set to the value of P for that node. For each non-root node, M is set to the product of the M's of all parent nodes of the node and the P of that node.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08412743&OS=08412743&RS=08412743
owner: SAP AG
number: 08412743
owner_city: Walldorf
owner_country: DE
publication_date: 20090115
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["The present application is a Continuation under 35 U.S.C. 120 of commonly assigned prior U.S. application Ser. No. 11\/281,313, filed Nov. 17, 2005 now U.S. Pat. No. 7,487,143 in the name of Nishanth Sastry, now allowed.","The present invention relates generally to software systems for storage and retrieval of information, and more specifically to a system and computer program product for nested categorization using factorization.","As it is generally known, many situations call for computer software to organize information into categories. For example,  shows a simplified screen shot  illustrating a software generated user interface, provided through a Web Browser application, enabling a user to browse a set of project information objects. In the example of , the user has indicated to the system that he or she desires to browse the project categories within the Database API (Application Programming Interface) category, which is contained within the higher level category of Database Environment. In the example categorization of , a project can be classified by database environment, intended audience, operating system, programming language, translations, or user interface.  illustrates that categories may be nested in such systems, as in the nesting of the Database API category within the Database Environment category, and the various sub-categories within Database API.","Many other, different views of project categorization may be generated using a system such as that shown in . For example, a user may want to filter one or more categories to which a project might belong, e.g. view all projects that use JDBC or XML-based database APIs, and that are written in Java (Programming Language category). Those skilled in the art will recognize that many other examples of information categorization exist on the World Wide Web (WWW) and elsewhere. These examples include various employment databases, which may allow for filtering of available jobs by employer and location, online shopping Web sites, which may allow for filtering by product, brand, and\/or product features, electronic mail (e-mail) systems, which may allow categorization of a single piece of e-mail into several different folders, and others.","As further illustrated by , a useful metaphor for existing software categorizers has been to view each category as a folder. In such systems, each folder in a hierarchy of folders can itself contain sub-folders representing sub-categories. A folder at any level can contain information items, such as projects, e-mail messages, shopping items, etc. Additionally, any information item can appear in more than one folder, and any folder can be a sub-folder under any number of other folders. However, a folder cannot be a sub-folder of another folder that is its ancestor, i.e. cycles are not permitted.","One technical challenge in implementing information item categorizations is the nested nature of the categories. For example, a categorizer for a job database should be equally able to find all jobs within a coarser category, such as those located in Massachusetts, as it is to find all jobs within a sub-category, such as all jobs located in Westford, Mass.","In more general terms, the problem to be solved involves categories forming a directed acyclic graph, with the leaf nodes being the items to be retrieved, and the non-leaf nodes representing the categories. The graph includes an edge from node a to node b if either i) node b is a sub-category of node a or ii) node b is a leaf item under category a. For any query, the system must be able to retrieve all leaf nodes reachable from a given collection of non-leaf nodes.","Using the above formulation, a straightforward implementation would be to calculate a reachability matrix as the transitive closure of the adjacency matrix of the graph. For example, such a reachability matrix may have a 1 for entry [i] if there is at least one path from node i to node j, and zero otherwise. Such an approach may be sufficient for fairly static applications, such as online shopping, in which the items or their classifications do not change frequently. However, for more dynamic applications, in which items are re-categorized more frequently, as in a categorization of a user's e-mail messages, this approach does not work as well, since the transitive closure calculation is expensive in terms of resources used.","An alternative approach using relational databases might store links to actual items as direct descendents of non-leaf nodes. For example, in a database corresponding to the interface shown in , the following records could be stored (for clarity only leaf-item containments are listed): (projectid-n, database-environment), (projectid-n, database-api), (projectid-n, JDBC). Thus the reachability matrix is stored as relational records, and the system copies only the identifier to avoid duplication of other information. Handling of leaf-node changes using such an approach is relatively easy, but non-leaf nodes are more difficult to change. For example, if the JDBC category got re-parented under a different super-category, the system would have to remove the records (projectid-n, database-environment), (projectid-n, database-api). Also, as the number of filters specified increases, the query to the categorization system gets more and more complex (more joins), and performance suffers as a result.","In the specific area of e-mail message categorization, Google's Gmail\u2122 offers another, alternative approach. In the Gmail system, each piece of e-mail can have one or more \u201clabels\u201d attached to it, thus allowing the same mail item to appear in multiple views. However, a significant shortcoming of the system is that labels cannot be nested. Given that limitation, operations discussed above are relatively simple and efficient in this model.","For the above reasons and others it would be desirable to have a new system for information item categorization that allows for nested categorizations and optionally allows a single category or item to be contained in multiple parent categories, that can handle dynamic categorization changes, and that is simpler and more efficient than previous solutions. The new system should be generally applicable to a variety of applications, and specifically applicable to categorization of e-mail messages.","In order to address the above described and other shortcomings of previous solutions, a system and computer program product for information item categorization are disclosed. In the disclosed system, each non-leaf node in a hierarchical organization of nodes represents a category, and each leaf node represents an information item. A number P is associated with each node. For non-leaf nodes, the associated number P is selected from a set of relatively prime elements of an appropriate Unique Factorization Domain (UFD). For leaf nodes, P is set to 1. A number M is also associated with each node. For each root node, M is set to the value of P for that node. For each non-root node, M is set to the product of the M's of all parent nodes of the node and the P of that node. For example, the calculation of M may be accomplished in a recursive manner. As a result, the value of M for any node contains as factors the Ps of all its ancestor nodes in the tree or acyclic graph making up the node hierarchy.","Queries to find items located under a given node N are accomplished in the disclosed system by identifying those leaf nodes having an associated value M that is completely divisible by the value of P associated with N. Accordingly, pseudo-SQL to find all items under a node N at any level is:","SELECT * from LEAF_ITEMS_TBL L where N.P completely divides L.M","The disclosed system operates to re-parent a node N from parent node P to parent node P by simply removing the factors of its old parents (by dividing them out), and adding the factors of the new parent (by multiplying with the new factor). This is accomplished by multiplying node N and all its childrens' M's with the following difference factor:\n\n=(2\u00b7)\/(1\u00b7)\n","Thus there is disclosed a new system for information item categorization that allows for nested categorizations, that can handle dynamic categorization changes, and that is simpler and more efficient than previous solutions. The new system is generally applicable to a variety of applications, and specifically applicable to categorization of e-mail messages.","As shown in , an illustrative embodiment of the disclosed system operates using a number of software components executing on at least one computer system, shown for purposes of illustration as the computer system . The computer system  may, for example, include at least one processor, program storage, such as memory, for storing program code executable on the processor, and one or more input\/output devices and\/or interfaces, such as data communication and\/or peripheral devices and\/or interfaces. The computer system  may further be embodied as one or more physically distributed computer systems, such as one or more client and server computer systems, that are communicably connected by a data communication system, such as a Local Area Network (LAN), the Internet, or the like. The computer system  may further include appropriate operating system software.","In the embodiment of , a user  issues commands  through a graphical user interface . The user interface  may, for example, be generated using application software such as a browser application program or the like operating to provide views of content including one or more Web pages, an electronic mail (e-mail) application program, or any other specific computer program executing on the computer system . The commands  received through the user interface  are processed, at least in part, using the information item categorizer software , which operates to organize the information items  into a hierarchical set of categories. The categories provided through the information item categorizer , together with the information items , are organized as a hierarchical structure of nodes, wherein each information item is represented by a leaf node and each category is represented by a non-leaf node in the structure. The node structure provided by the information item categorizer  may form, for example, a tree of nodes, a directed acyclic graph of nodes, or some other specific type of structure including leaf and non-leaf nodes, but that includes no cycles.","The commands  may include user requests for information items contained in, or located under one or more categories. The commands  may further include requests to move information items and\/or categories within the node structure. Such operations are referred to herein for purposes of explanation as \u201cre-parenting\u201d of nodes. The results of the commands  may be provided through the user interface , which may visually display information items and\/or categories as folder display objects, or in any other appropriate manner for a particular embodiment. The information items  may consist of or represent any specific kind of information that can be stored in a computer system, such as content, data, program code, etc.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 3","FIG. 1"],"b":["30","16"]},"For further example, the number P may be selected for each node at step  from a set of prime numbers. Alternatively, the number P can be selected for each node from any set containing only numbers which are relatively prime to each other. The numbers in such a set of relative primes should meet the condition that the greatest common divisor of any pair within the set is 1. For example the set {32, 65 and 9} are not primes, but are relatively prime to each other.","In another alternative embodiment, P may be selected from a set of probable prime numbers, and then verified to be relatively prime to previously selected numbers. For example, one definition of a probable prime number in such an embodiment might be a number satisfying Fermat's little theorem (or some other primality test) for some nontrivial base. Any appropriate technique may used to verify the relative primality of P with regard to the previously selected numbers. This approach eliminates the need for generating or managing actual prime numbers. Probable primes are often much easier to generate than actual primes, and the probability that two of them will have a common factor is almost negligible. For example, the standard Java library class java.math.BigInteger includes a fast method to calculate probable primes with a probability of less than 2^(\u2212100) that they are not prime.","At step , the disclosed system operates to associate a number M with each node in the node hierarchy, such that for non-root nodes, M is the product of the M's of all parent nodes and the P of the current node, and such that M is equal to P for all root nodes.","After step , requests to find information items directly under or under one or more categories can be processed at step . As noted above, a query to find items located under a given category is processed in the disclosed system by identifying those information items represented by leaf nodes having an associated value M that is completely divisible by the value of P associated with the node N representing the given category. Accordingly, and as noted above, pseudo-SQL to find all items under a node N at any level is:","SELECT * from LEAF_ITEMS_TBL L where N.P completely divides L.M","For example, in the case where P is selected for each non-leaf node from a set of prime numbers, the select statement above will retrieve only the information items within the category being searched because N.P is a prime number or the like, and the only way a leaf node L can have a value L.M that has N.P as a factor is if L is a descendent reachable from N. Thus non-descendent items are not retrieved because the selected values for P are sufficiently guaranteed to not divide each other. Other examples of operation with regard to retrieving information items using embodiments of the disclosed system are also provided below.","At step , the disclosed system operates to re-parent nodes representing information items and\/or categories, as also further described below.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["40","42","44","46","48","50","52","54","56","40"],"sub":["1 ","2 ","3 ","4 ","1 ","2 ","3 ","4 ","1 ","2 ","3 ","4 ","1 ","2 ","3 ","4 "]},"For example, in order to find all information items contained within category Calone, the disclosed system operates to identify information item nodes having values of M equal to the M value of C, which in this case is 2. Accordingly, the disclosed system determines that information item nodes Iand Iare contained in category C, since they both have M values of 2. In order to find all information items under category C(either within Cor within a category below Cin the node hierarchy), the disclosed system operates to identify information item nodes having values of M that are divisible by the value P value of C, which in this case is 3. Accordingly, the disclosed system determines that information item nodes Iand Ihave values of M that are completely divisible by 3 (42 and 3 respectively), and those information item nodes are therefore under category node C.","In order to find all information item nodes under both category node Cand category node C, the disclosed system operates to find all information item nodes having values of M that are divisible by the product of the P values for nodes Cand C, in this case 2*3=6. Accordingly, the disclosed system determines that information item node Ihas an M value of 42 that is divisible by 6, and is therefore under both category node Cand category node C. In this way the disclosed system can determine which information items are under multiple specified categories.","In order to find all information item nodes directly under both category Cand C, the disclosed system operates to find all information item nodes having values of M that are equal to product of the P value for node Cand the P value for C, in this case 2*3=6. Accordingly, the disclosed system determines that no information item nodes have M equal to 6, and therefore no information item nodes are contained within both Cand C.","While the aspect of the disclosed system described in the preceding paragraph processes queries looking for nodes directly under node Cand directly under node Cand having no other parent nodes, the disclosed system is not limited to processing such types of queries. Those skilled in the art will recognize that the disclosed system is capable of processing queries for nodes having at least nodes Cand Cas parents through use of a separate table with (node-id, parent-node-id) as columns. Such a table can be searched quickly for all node-ids with Cin the parent-node-id column and then this result set can be filtered again for nodes with Cas parent-node-id.","In order to process a request that category node Cbe moved under category C, the disclosed system operates to determine a first value by multiplying the M value of Cby the M value of C, in this case 42*5=210. Then a second value is determined that is the product of M for Cand M for C, in this case 2*3=6. Then the first value is divided by the second value to determine a new value for M of C, in this case 210\/6=35. This process is then repeated each sub-tree of C.","The above example illustrates how the disclosed system operates to re-parent a node N from parent node P to parent node P by removing the factors of its old parents (by dividing them out), and adding the factors of the new parent (by multiplying with the new factor). As illustrated above with reference to , this may be accomplished by multiplying node N and all its children's' M's with the following difference factor:\n\n=(2)\/(1)\n","As noted above, the disclosed system is able to process complex queries with multiple categories specified as filters, by replacing the value of P in the previously set forth SELECT statement pseudo-code with the product of the Ps of all the category nodes specified. This aspect of the disclosed system is now further explained with reference to an example of a hypothetical categorization of messages within a person's Inbox structure, provided in an e-mail application program or the like, and shown in the node hierarchy of . As in , the value pairs in parenthesis shown within the nodes of  denote the P and M values of the nodes containing them. Accordingly, node  representing a category of e-mail messages received from a manager has P=2 and M=2, node  representing a category of human resources e-mail messages has P=3 and M=3, node  representing a category of e-mail messages from the manager and listing the person in a To: field has P=7 and M=14, node  representing a category of e-mail messages received from the manager and listing the person in the CC: field has P=11 and M=22, node  representing a category of e-mail messages relating to company policy has P=5 and M=15, node  representing a category of e-mail messages that are pay statements has P=13 and M=39, node  representing a category of e-mail messages relating to security policy has P=17 and M=255, node  representing a category of e-mail messages relating to corporate matters has P=23 and M=23, and an example message  is contained both within the category for node  and the category for node .","Thus the message  is a leaf-node of the node hierarchy shown in , and is classified under the category of e-mails from the manager and having the person listed in the To: field category (node ), and also under the company security policy category (node ). In accordance with an embodiment of the present invention, the message  would therefore have a value for M equal to the product of the M of node  times the M of node : 14*255=3570. The e-mail message  would accordingly be provided in and\/or displayed as part of the result set when the disclosed system is used to filter on e-mails from the manager (node ), because 3570 is divisible by 2, or when the disclosed system is used to filter on human resources e-mails (node ), because 3570 is divisible by 3, or when the disclosed system is used to filter on company policy e-mails (node ), because 3570 is divisible by 5, etc.","A complex filter could be used to search for all e-mails from the manager (node ) and that are also categorized under company policy (node ). In such a case, the product of the Ps of the two nodes  and  would be used as the divisor. Such an operation may be represented by the pseudo-code select statement referred to above and modified to look like the following:","SELECT * from LEAF_ITEMS_TBL L where 5*2 completely divides L.C","Those skilled in the art will recognize that unlike the traditional relational representation, adding more and more categories to filter by advantageously does not degrade performance by making the join operations more complex.","An example of re-parenting a node within the node hierarchy of  is now provided. The disclosed system first receives a command from the user requesting that security policy e-mails (node ) be moved under corporate matters (node ). The disclosed system operates to process this request by multiplying the M's of the security policy node (node ), and of each node under the security policy node (node  in this case) by a difference factor value of 23\/15. As a result, the security policy node (node ) would have (P,M)=(17,391) and the e-mail message  which previously had M=3570 would now have M=5474.","If the user were to issue a command requesting that the corporate matters node (node ) be added as a new parent to a node, without removing any old parent nodes, the disclosed system would process the request by multiplying the M value of the node to which the new parent node is being added by the M value of that node (23 in this case), without dividing by the M value of the existing parent (15 in the previous example). To process a user request to remove a parent node, the disclosed system operates to divide out the M value of the parent node being removed from the M value of the child node (and all nodes in all the sub-trees rooted at the child-node) from which the parent is being removed. For example, to remove security policy node (node ) as a parent from the e-mail message , the disclosed system would divide out the M value of node  (255) from the M value of the e-mail message .","It may be desirable to prevent removal of a higher level categorization of a given node without removing descendant sub-categories of that higher level categorizations for that same node. For example, removing the company policy node (node ) as a parent node of the message  could be accomplished by dividing the M of message  by the M of node  (15). However, this would only remove the message  from the company policy category (node ), but still leave the message  under the company policy\/security policy sub category (node ). To prevent such an event, the disclosed system may be embodied to allow only a direct parent node to be removed, and to accordingly prohibit removal of non-direct ancestors of any node. Similarly, it may be desirable to prevent adding a descendant node of a given node as a new parent of that given node. This can be accomplished by checking that a new parent node is not contained in a category represented by the given node to which it is to be added, for example using the techniques described herein.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 6","FIG. 6","FIG. 6","FIG. 6","FIG. 6"],"b":["80","6","82","4","86","3","88","6","5","84","4","86","4","2","90","1","92","6","82","82","80","5","84","4","86","3","88","2","90","1","92","4","86","3","88"]},"The Figures include block diagram and flowchart illustrations of methods, apparatus(s) and computer program products according to an embodiment of the invention. It will be understood that each block of the Figures, and combinations of these blocks, can be implemented by computer program instructions. These computer program instructions may be loaded onto a computer or other programmable data processing apparatus to produce a machine, such that the instructions which execute on the computer or other programmable data processing apparatus create means for implementing the functions specified in the block or blocks. These computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instruction means which implement the function specified in the block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions specified in the block or blocks.","Those skilled in the art should readily appreciate that programs defining the functions of the present invention can be delivered to a computer in many forms; including, but not limited to: (a) information permanently stored on non-writable storage media (e.g. read only memory devices within a computer such as ROM or CD-ROM disks readable by a computer I\/O attachment); (b) information alterably stored on writable storage media (e.g. floppy disks and hard drives); or (c) information conveyed to a computer through communication media for example using wireless, baseband signaling or broadband signaling techniques, including carrier wave signaling techniques, such as over computer or telephone networks via a modem.","While the invention is described through the above exemplary embodiments, it will be understood by those of ordinary skill in the art that modification to and variation of the illustrated embodiments may be made without departing from the inventive concepts herein disclosed. Moreover, while the preferred embodiments are described in connection with various illustrative program command structures, one skilled in the art will recognize that they may be embodied using a variety of specific command structures."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order to facilitate a fuller understanding of the present invention, reference is now made to the appended drawings. These drawings should not be construed as limiting the present invention, but are intended to be exemplary only.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
