---
title: Systems and methods for parsing flexible audio codec topologies
abstract: Systems and methods for parsing flexible audio codec topologies are described. In one aspect, codec topology information is obtained from an audio codec. The codec topology information includes a list of processing node connections and configuration default data for respective processing nodes associated with the audio codec. The codec topology information is evaluated to identify valid audio codec topologies based on set of valid connection path criteria.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07756594&OS=07756594&RS=07756594
owner: Microsoft Corporation
number: 07756594
owner_city: Redmond
owner_country: US
publication_date: 20040614
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"p":["The technical field pertains to audio compressors\/decompressors (codecs).","Since the Sound Blaster 1.0 (circa 1990) and the Windows Sound System (circa 1995) there has not been an open standard for PC audio hardware. This led to a proliferation of different hardware register sets and drivers to support those hardware interfaces. The commonality in most of these hardware designs was the capability to perform data transfers from main memory to the digital-to-analog converter (DAC) for rendering and from analog-to-digital converter (ADC) to main memory for capturing. If there is a standardized data transfer engine that a common software component can interface with, there is still a need to identify and manipulate the features of the digital audio converters in an intelligent manner. Techniques to determine and organize this information for any digital audio converter unit and present it to an operating system are desired, since they would provide for a single driver for audio solutions that conform to a general algorithm.","Systems and methods for parsing flexible audio codec topologies are described. In one aspect, codec topology information is obtained from an audio codec. The codec topology information includes a list of processing nodes, processing node connections, and configuration default data for respective processing nodes associated with the audio codec. The codec topology information is evaluated to identify valid audio codec topologies based on set of valid connection path criteria.","An Exemplary Uniform Architecture for an Audio Class Driver",{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 1","FIG. 3","FIG. 1"],"b":["100","100","100","102","104","106","108","110","1","110","108","110","110","1","110","110"]},"Audio class driver(s)  identify basic logical audio device topologies presented by installed audio codec(s)  from one or more different respective manufacturers. For purposes of discussion, an audio codec  topology provides data\/signal routing information, in other words, possible connections of elements within a codec. A topology provides information that represents an audio codec's physical connections to external devices. These connections typically carry analog output signals that drive speakers and analog input signals from microphones. A topology might also represent analog line-in and line-out jacks, and possibly even digital input and output connectors.","Audio class driver(s)  identifies and provides valid ones of the identified audio codec topologies to an OS, thereby allowing the OS and applications operating thereunder to take advantage of an audio codec's topology configuration for basic and advanced audio device functionality. Valid topologies are shown as valid audio codec topologies , wherein each topology  represents a substantially best render or capture connection path provided by the audio codec . For instance, respective ones of valid audio codec topologies , for example, end with a processing node that has a physical connection, does not loop, have an input\/output connection point that is not a shared codec resource with another audio path, are compatible with system vendor motherboard design settings (i.e., excludes vendor specific audio processing units), and take user policy settings into consideration. For purposes of discussion, a connection point represents a physical connection to a jack, plug, etc., or a logical connection to computer-program instructions executable by a processor, wherein when executed the instructions direct data flow from one component to another.","With respect to a loop, a connection path\/topology is considered to loop if the topology has a same processing node that's already in another connection path. Each render connection path of valid audio codec topologies  starts from a DAC\/Digital Out connection point, continuing to an associated output connection point. Each capture connection path of valid audio codec topologies  starts from an ADC\/Digital In connection point, continuing to an associated input connection point.","This audio class driver  parsing to identify valid audio codec topologies  is useful because an audio codec may present many (e.g., tens of thousands) of topologies, many of which may represent invalid connection paths. An invalid audio codec topology includes, for example, a topology path that terminates with a processing node that does not have a physical connection; a topology that infinitely loops without exiting the codec, topologies that share a limited resource such as a same input or output connection point\u2014possibly resulting in unreliable operation if associated devices contend for the shared resource at the same time, a topology contrary to system motherboard configurations, a topology contrary to a user's preferences, and\/or so on.","To identify valid audio codec topologies  for any number of independent audio codec(s)  from different respective manufacturers, audio class driver(s) include a respective audio codec topology parsing functionality, for instance, topology parsing module . As described below, topology parsing module  uses a set of priority-based criteria to evaluate valid audio codec topologies  and therefrom, generate a set of mixer and\/or wave topology object(s)  from ones of the valid audio codec topologies having a most significant priority (i.e., high priority mappings , which are described in greater detail below). These topology objects  allow an OS, and applications operating thereunder, to interface with respective ones of logical devices associated with the prioritized valid audio codec topologies for basic audio support.","For instance, topology port objects  represent substantially optimal audio connection paths in view of the processing node connection list of codec topology information . Topology port objects  are used to initialize audio codec(s)  with third-party application commands on startup, to get and set properties in audio codec(s) , to provide power management of audio codec(s) , etc. In this manner, audio class driver(s)  enable an OS to provide a reliable and consistent out-of-box audio experience to application users. The systems and methods for parsing flexible audio codec topologies also substantially eliminate dependence of a computing system's basic audio capabilities on IHV proprietary device drivers, which may be very inconsistent in terms of quality and reliability from vendor to vendor.","Exemplary Procedure for Parsing Audio Codec Topology",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["200","200","202","102","104","110","204","132","102","106","128","120","118","102","110"]},"At block , topology parsing module , for example during initialization operations, uses bus driver interface  to send a command  to each audio codec  being managed by the audio class driver(s) . In this scenario, command  requests codec topology information  including, for example, a connection list from each of the managed audio codec(s)  and target use of the jack on the device. The connection list identifies the processing node connections that make up respective ones of the audio codec connection paths\/topologies implemented by the audio codec . Processing node connections specify one or more audio render and capture node connection in paths. Each connection path indicates the particular processing nodes being used in the connection path, and the respective order of connection.","For example, a codec's number 1, 4, and 6 connection points (processing nodes) may be specified as a logical audio device ending in a connection point for audio output\u2014an audio render path. In another example, the codec's number 6, 9, 12, 17, and 28 connection points may be specified as a logical audio device ending in a connection point for audio input\u2014audio capture path architecture. Connection point numbers, order of connection point connections, and respective connection path functions (e.g., render or capture path(s)) are a function of audio codec  implementation.","In one implementation, topology information  includes, for example, for at least a subset of the audio codec(s) , a processing node (connection point) connection list and configuration default information from audio jack default configuration information (last processing nodes in a connection path). In this implementation, such configuration default information includes at least a subset of the following:\n\n","At block , topology parsing module  retrieves policy information . Policy information  includes, for example, user audio policy settings and original equipment manufacturer (OEM) policy settings. In one implementation, audio class driver(s)  obtain user policy , for example, from an audio device property page corresponding to an audio codec . User policy , for example, is a set of device profiles that specify how a user expects an underlying codec to be used. And the information contained in each device profile is equivalent to the information that's contained in jack configuration information of each last processing node in a connection path. So each time a user changes to a new device profile, the described systems and methods for parsing flexible audio codec topologies is invoked to generate new topologies.","OEM policy  is used to identify audio codec connection path(s) that may conflict and override values provided by audio codec(s) . For instance, if a connection path conflicts with user or OEM policy, topology parsing module  eliminates\/filters the connection path such that it will not be included in the valid audio codec topologies . Audio class driver(s)  obtain OEM policy , for example, through an ACPI BIOS. An exemplary ACPI BIOS is shown and described below in reference to BIOS  of .","At block , topology parsing module  parses the received codec topology information  in view of policy information  and the above described set of valid connection path criteria to identify valid audio codec topologies . In one implementation, operations of block  are as follows. Topology parsing module  collects all DAC\/ADC resource processing nodes. Topology parsing module  creates separate resource lists for DAC (including SPDIF Out) and ADC (including SPDIF In). This prepares for the next step\u2014enumerating all the paths. Based on each processing node's connection and configuration default register information (provided by respective portions of codec topology information ), topology parsing module  enumerates all the possible render and capture paths. For instance, starting from resource processing nodes (DAC or ADC nodes), topology parsing module  recursively enumerates all the possible audio data paths that could reach a last connection point in a connection path.","During the enumerating process, topology parsing module  applies several qualifying criteria dynamically to eliminate paths that are either invalid or unsupported. As indicated above, invalid paths include, for example: paths that have any loop, paths that do not end with a render or capture processing node, paths starting with DACs (SPDIF OUT) but not ending with audio processing units used as output devices, and\/or paths starting with ADCs (SPDIF IN) but not ending with audio processing units used as input devices, paths ending with no physical audio processing units. At this point, topology parsing module  builds a table indicating processing nodes and respective connection paths within which the processing node participates. For purposes of discussion and illustration, this table is shown as a respective portion of valid audio codec topologies .","At block , topology parsing module  prioritizes each valid audio codec topology  as a function of jack grouping information default value of a connection point at the end of a connection point connection path corresponding to the valid audio codec topology . For purposes of illustration, codec topology information  includes the jack grouping information default value of a connection point at the end of a connection path. More particularly, groups of calculated valid audio codec topologies  may have more than a single association. To produce a single valid set or group of audio codec topologies , topology parsing module  first gathers default jack grouping and sequence information from configuration default registers for each connection point audio processing unit identified in valid audio codec topologies . TABLE 1 shows an exemplary jack grouping sequence list.",{"@attributes":{"id":"p-0025","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"EXEMPLARY JACK GROUPING AND SEQUENCE LIST"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Assoc(2)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Sequence 0 -> ConnectionPointAudio processing unit 0x10"]},{"entry":[{},"Sequence 0 -> ConnectionPointAudio processing unit 0x08"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["126","100"]},"At this point, topology parsing module  identifies all non-conflicting I\/O processing nodes and path combinations within each association identified in the association list. The identified nodes and path combinations are represented in a respective node path mapping combination portion of association data . Topology parsing module  enumerates all association resource mappings represented in the node path mapping combinations. An association resource mapping is a set of non-conflicting resource allocations across all processing nodes of all associations identified in the node path mapping combinations. Such association resource mappings are also represented with a respective portion of association data .","To prioritize the valid audio codec topologies , topology processing module  assigns a weighted association value to each topology identified in the association resource mappings portion of association data . To this end, the association value of the corresponding connection path is used as a weighted priority, and each priorities are calculated as follows:\n\npriority=2,\n\nwherein N represents a maximum association default value identified among all of the valid audio codec topologies , and k represents the association default value of the particular association group being prioritized. For example, if the logical audio device has a corresponding association default value equal to three (3) and the maximum association default value is 6, and then the weighted association value for the topology is equal to eight (8), which is equal to 2.\n","Operations of block  further calculate a respective priority sum  representing a sum of weighted association values corresponding to each valid audio codec topology  in a respective group. Thus, each group of audio codec resource allocation for association is associated with a respective priority sum . As indicated below, the group with the largest priority sum  is selected as the group of valid audio codec topologies  to expose to an operating system via topology port object(s) . For purposes of discussion and illustration, the group of topologies determined to have the most significant priority is shown as high priority mapping(s) .","At block , topology parsing module  converts highest priority mappings  (i.e., the group of valid audio codec topologies  having the most significant priority sum ) to wave and\/or topology port object(s) . To this end, topology parsing module  determines whether respective ones of the represented connection paths should be converted to a wave port object or a topology port object . At block , audio class driver(s)  provide respective ones of the wave and\/or topology port object(s)  to the operating system. As described above, application(s) executing under the OS can use the wave and\/or topology port objects  to interface with application targeted logical audio devices identified by respective ones of the valid audio codec topologies .","An Exemplary Operating Environment",{"@attributes":{"id":"p-0030","num":"0037"},"figref":["FIG. 3","FIG. 1","FIGS. 1 and 2","FIGS. 1 and 2"],"b":["300","100","200","300","300","300","300"]},"The methods and systems described herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well-known computing systems, environments, and\/or configurations that may be suitable for use include, but are not limited to, personal computers, server computers, multiprocessor systems, microprocessor-based systems, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and so on. Compact or subset versions of the framework may also be implemented in clients of limited resources, such as handheld computers, or other computing devices. The invention is practiced in a distributed computing environment where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary system for parsing flexible audio codec topologies includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, processing unit(s) , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  is an exemplary implementation of internal bus  () and may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example and not limitation, such architectures may include Industry Standard architecture (ISA) bus, Micro Channel architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus or PCI Express bus.","A computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer .","Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism, and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation, communication media includes wired media such as a wired network or a direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer-readable media.","System memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . In this implementation BIOS  stores default audio codec register values, which are shown in  as a respective portion of policy information . This policy information is used by audio class driver(s)  to determine valid audio codec topology configurations, thereby facilitating generation of topology port objects .","RAM  typically includes data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example and not limitation,  illustrates operating system , application programs , other program modules , and program data . In one implementation, operating system  comprises audio class driver(s) , and application programs  includes audio controller bus driver , audio controller , audio codec(s) , etc. Application programs  may also include one or more computer-program applications that operate under operating system  that will use wave and\/or port topology objects  of  to interface with audio device(s)  coupled to respective ones of the audio codec(s) . Exemplary such audio devices include, speakers, microphones, headphones, and\/or so on.","Program data  includes, for example, valid audio codec topologies , topology port object(s) , parameters for respective ones of command(s) , codec topology information , policy information  (e.g., user and OEM policy data), association data , priority sum(s) , high priority mapping(s) , intermediate calculations and\/or data to generate topology port object(s) , etc.","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer-readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that they are at least different copies.","A user may enter commands and information such as user audio policy data (a portion of policy information ) into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone (audio capture) audio device, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port, a universal serial bus (USB), IEEE 1394 AV\/C bus, PCI bus, and\/or the like.","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as audio device(s)  and a printer , which may be connected through an output peripheral interface . In this implementation, respective ones of input peripheral interface(s)  and output peripheral interface(s)  encapsulate operations of audio codec(s)  of .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and as a function of its particular implementation, may include many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example and not limitation,  illustrates remote application programs  as residing on memory device . The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Although the systems and methods for parsing flexible audio codec topologies have been described in language specific to structural features and\/or methodological operations or actions, it is understood that the implementations defined in the appended claims are not necessarily limited to the specific features or actions described. Accordingly, the specific features and actions are disclosed as exemplary forms of implementing the claimed subject matter."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the figures, the left-most digit of a component reference number identifies the particular figure in which the component first appears.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
