---
title: Operating system independent agent
abstract: Described is a computing platform comprising a host processing system to host an operating system, a communication adapter to transmit data to or and receive data from a data transmission medium, and a non-volatile storage. The computing platform may also comprise an agent executable independently of the operating system to enable read-only or read/write access to at least a portion of the non-volatile storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07707586&OS=07707586&RS=07707586
owner: Intel Corporation
number: 07707586
owner_city: Santa Clara
owner_country: US
publication_date: 20040908
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["1. Field","The subject matter disclosed herein relates to systems for use in managing computing assets. In particular, the subject matter disclosed herein relates to the use of processes capable of executing on a computing platform independently of an operating system hosted on the computing platform.","2. Information","Enterprises typically deploy computer assets that are coupled by data links in local area networks (LANs) and wide area networks (WANs). These computer assets typically host a software build which includes an operating system and one or more application programs such as word processing programs, electronic mail programs and spreadsheet programs. To manage these computer assets, an enterprise typically employs asset management applications that can determine hardware or software configuration information and maintain up-to-date inventory of the computer assets. The enterprise may also employ network security applications to enable discovery and patching of security vulnerabilities, and operating system recovery tools to recover system configurations in the event of a system crash.","Reference throughout this specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of the phrase \u201cin one embodiment\u201d or \u201can embodiment\u201d in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in one or more embodiments.","\u201cMachine-readable\u201d instructions as referred to herein relates to expressions which may be understood by one or more machines for performing one or more logical operations. For example, machine-readable instructions may comprise instructions which are interpretable by a processor compiler for executing one or more operations on one or more data objects. However, this is merely an example of machine-readable instructions and embodiments of the present invention are not limited in this respect.","A \u201cstorage medium\u201d as referred to herein relates to media capable of maintaining expressions which are perceivable by one or more machines. For example, a storage medium may comprise one or more storage devices for storing machine-readable instructions or data. Such storage devices may comprise storage media such as, for example, optical, magnetic or semiconductor storage media. However, these are merely examples of a storage medium and embodiments of the present invention are not limited in these respects.","A \u201cnon-volatile storage\u201d as referred to herein relates to a storage medium capable of maintaining expressions of information when power is removed from the storage medium. Such a non-volatile storage may comprise storage media such as, for example, writable optical media, magnetic media (e.g., hard disk memory) or semiconductor media (e.g., flash memory). However, these are merely examples of a non-volatile storage and embodiments of the present invention are not limited in this respect. Devices communicating with a non-volatile storage may be capable of having \u201cread access\u201d to a portion of the non-volatile storage to retrieve information or having \u201cwrite access\u201d to store information in a portion of the non-volatile storage.","\u201cLogic\u201d as referred to herein relates to structure for performing one or more logical operations. For example, logic may comprise circuitry which provides one or more output signals based upon one or more input signals. Such circuitry may comprise a finite state machine which receives a digital input and provides a digital output, or circuitry which provides one or more analog output signals in response to one or more analog input signals. Such circuitry may be provided in an application specific integrated circuit (ASIC) or field programmable gate array (FPGA). Also, logic may comprise machine-readable instructions stored in a storage medium in combination with processing circuitry to execute such machine-readable instructions. However, these are merely examples of structures which may provide logic and embodiments of the present invention are not limited in this respect.","A \u201cprocessing system\u201d as discussed herein relates to a combination of hardware and software resources for accomplishing computational tasks. For example, a processing system may comprise a system memory and processing circuitry (e.g., a central processing unit (CPU) or microcontroller) to execute machine-readable instructions for processing data according to a predefined instruction set. However, this is merely an example of a processing system and embodiments of the present invention are not limited in this respect. A \u201chost processing system\u201d as referred to herein relates to a processing system which may be adapted to communicate with a \u201cperipheral device.\u201d For example, a peripheral device may provide inputs to or receive outputs from an application process hosted on the host processing system. However, these are merely examples of a host processing system and a peripheral device, and embodiments of the present invention are not limited in this respect.","An \u201capplication program\u201d as referred to herein relates to one or more procedures that may be executed according to machine-readable instructions to complete one or more tasks. Such an application program may be designed to provide a result according to predefined user requirements. Application programs may include, for example, electronic spreadsheets, word processing programs, asset management programs and agents, system management programs and agents, user interfaces and communication related application programs. However, these are merely examples of application programs and embodiments of the present invention are not limited in these respects.","An \u201coperating system\u201d as referred to herein relates to one or more executable procedures for facilitating communication between application programs and processing resources of a processing system. Such an operating system may allocate processing resources to application programs and provide an application programming interface (API) comprising callable software procedures for execution on the processing resources in support of application programs. However, these are merely examples of an operating system and embodiments of the present invention are not limited in these respects.","An \u201cagent\u201d as referred to herein relates to a process associated with a processing system to execute one or more defined tasks. Such tasks may include, for example, gathering information, detecting events or conditions associated with the processing system, executing procedures in response to detection of an event or condition, or enabling secure access to one or more portions of a computing platform. An agent may be hosted on a computing platform in association with a first node on a data network such that the agent may communicate through the data network with a process hosted in association with a second node on the data network. However, these are merely examples of an agent and embodiments of the present invention are not limited in these respects.","A \u201cdata transmission medium\u201d as referred to herein relates to any media suitable for transmitting data. A data transmission medium may include any one of several mediums including, for example transmission cabling (e.g., coaxial, twisted wire pair or fiber optic cabling), wireless transmission media or power lines. However, these are merely examples of a data transmission medium and embodiments of the present invention are not limited in this respect.","A \u201ccommunication adapter\u201d as referred to herein relates to a device which may be coupled to a data transmission medium to transmit data to or receive data from other devices coupled to the data transmission medium. For example, a communication adapter may comprise a network adapter designed to transmit data to or receive data from devices coupled to a network such as a local area network. Such a network adapter may communicate with the other devices according to any one of several data communication formats such as, for example, communication formats according versions of IEEE Std. 802.3, IEEE Std. 802.11, IEEE Std. 802.16, Universal Serial Bus, Firewire, asynchronous transfer mode (ATM), synchronous optical network (SONET) or synchronous digital hierarchy (SDH) standards. In alternative embodiments, a communication adapter may comprise any one of other I\/O devices such as, for example, an adapter to a data storage system. However, these are merely examples of a communication adapter and embodiments of the present invention are not limited in these respects.","Briefly, an embodiment of the present invention relates to a computing platform comprising a host processing system for hosting an operating system, a communication adapter for transmitting data to or and receive data from a data transmission medium, and a non-volatile storage. The computing platform may also comprise an agent executable independently of the operating system which enables read access or write access to at least a portion of the non-volatile storage by an external process in response to requests. However, this is merely an example embodiment of the present invention and other embodiments are not limited in these respects.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1A","b":["10","12","16","14","10","12","14","16"]},"The computing platform  may also comprise a communication adapter  that is capable of transmitting data to or receiving data from a data transmission medium (e.g., wireless transmission medium, or coaxial, fiber optic or unshielded twisted wire pair cabling) according to any one of several data transmission protocols (e.g., versions of Fibre channel, IEEE Std. 802.3, IEEE Std. 802.11, IEEE Std. 802.16, Synchronous Optical NETwork\/Synchronous Digital Hierarchy (SONET\/SDH), Universal Serial Bus or Firewire). The communication adapter  may be coupled to the core logic  by a multiplexed data bus  such as a peripheral components interconnect (PCI) data bus. The core logic  may arbitrate read and write access transactions to the system memory  among other entities in the computing platform  such as the CPU  and the communication adapter . For example, the core logic  may enable byte, word or page addressable memory transactions, or direct memory access (DMA) transactions between the system memory  and other entities in the computing platform .","The computing platform  may comprise a non-volatile storage (NVS)  which is capable of storing information in addressable locations when power is removed from the computing platform . The NVS  may comprise any one of several types of non-volatile memory devices such as, for example, flash memory devices, polymer memory devices, magnetic memory devices or optical memory devices. According to an embodiment, the NVS  may be read or write accessible by entities or processes hosted or executed on the CPU , or entities or processes communicating with the computing platform  through the communication adapter . In an alternative embodiment, the communication adapter  may contain an embedded non-volatile memory (not shown) that is accessible by application programs.","According to an embodiment, the CPU  and system memory  may host an operating system and application programs which are executable under the control of the operating system. The application programs may be constructed to interact with an API defined by the operating system. In addition to processes and application programs under the control of the operating system, other processes may be maintained and executed independently of the operating system hosted on computing platform . The operating system independent processes may access portions of a non-volatile storage (e.g., NVS  or other non-volatile storage device (not shown) embedded in the communication adapter ) regardless of the state of the operating system (e.g., running, in a reduced power state or disabled due to system crash). Such access by operating system independent processes may entail accessing the non-volatile storage to determine hardware or software configuration information independently of whether the operating system is running. A network security application may access the non-volatile storage to discover and patch security vulnerabilities. Operating system recovery tools may access the non-volatile storage to access hardware or software configuration information to restore applications in the event of an operating system crash.","The computing platform  may comprise a power management system including one or more processes hosted on the CPU  and system memory  to communicate with one or more subsystems of the computing platform . For example, the power management system may place the subsystems in a reduced power state in response to detecting one or more events or conditions. The power management system may cause the subsystems to subsequently resume to a full power state in response to other events. The power management system may be formed according to the Advanced Configuration and Power Interface (ACPI) as illustrated in the ACPI Specification, Rev. 1.0b, Feb. 2, 1999 (hereinafter the \u201cACPI Specification\u201d). However, this is merely an example of a power management system used in conjunction with a computing platform and embodiments of the present invention are not limited in these respects.","According to an embodiment, a process under the control of the operating system or remotely executing and communicating with the computing platform  through the communication adapter  may be provided write or read access rights to portions of the non-volatile storage. For example, such a process may store or retrieve hardware or software configuration information as part of an asset management application, network security application or operating system recovery tool.","According to an embodiment, the communication adapter  may communicate with an external node  over a data transmission medium . The external node  may host processes that are capable of interacting with application programs hosted on the CPU  or other processes hosted on the computing platform . Also, by sending commands to the communication adapter , the external node may have read or write access to a portion of the non-volatile storage.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1B","b":["10","34","32","10","36","38","36","38","32"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1C","b":["10","42","40","44","42","44","47"]},"For providing the services to subscriber platforms , the distribution node  may comprise equipment to communicate with network elements downstream of the distribution node  such as, for example, a DSLAM, cable modem termination system (CMTS) or a wireless transmission base station (not shown). A subscriber platform  (e.g., personal computer, set-top box, hand held wireless device, broadband modem, etc.) may be coupled to the distribution node  by any one of several types of data links  capable of transmitting data to provide services to the subscriber platforms  such as, for example, DSL links, wireless links, coaxial cabling or Ethernet over unshielded twisted wire pair. In other embodiments, a subscriber platform may comprise additional telephony equipment (e.g., private branch exchange system) coupled to multiple devices for receiving ATM services. However, these are merely examples of how a subscriber platform may be coupled to a distribution node and embodiments of the present invention are not limited in these respects. According to an embodiment, entities coupled to the service network  may communicate with an operating system independent agent hosted on any of the subscriber platforms  through a communication adapter to store or retrieve information from a non-volatile storage maintained in the subscriber platform .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 2","FIG. 1"],"b":["100","116","10","112","118","118","118","118","112","120","122"]},"According to an embodiment, an OS independent agent  may control read and\/or write access to one or more portions of a non-volatile storage  by either processes executed in the domain of the OS  or by processes executed independently of the Os . The features of the OS independent agent  may be embodied in machine-readable instructions stored on a storage medium which may be executed independently of the OS . In one embodiment, the CPU  may support multi-threaded processing (e.g., using multi-threading on a single processing core or multi-threading on multiple processing cores) and the OS independent agent  may be executed on a processing thread of the CPU  independently of a different processing thread which is executing the OS  and other processes in the domain of the OS . Alternatively, the OS independent agent  may be executed independently of the CPU  on a microprocessor or microcontroller (not shown), such as a MIPS or ARM processing core, which is embedded in the communication adapter  (). However, these are merely examples of how an agent may be hosted on a computing platform independently of an operating system and embodiments of the present invention are not limited in these respects.","According to an embodiment, the OS independent agent  may comprise a storage manager  to control allocation of portions of the non-volatile storage  to application programs or other processes according to allocation control data (ACD) . The non-volatile storage  may comprise one or more non-volatile memory devices (e.g., flash memory devices) that maintain firmware for a platform basic input\/output system (BIOS) or private data storage. The OS independent agent  may control all allocation and read and write access to at least a predetermined physical portion of the non-volatile storage  (either contiguous or non-contiguous) which is available for allocation for use by instances of application programs or other processes. In one embodiment, the ACD  may comprise one or more data structures residing in a dedicated portion of the non-volatile storage  that is accessible through the OS independent agent  to the exclusion of other processes. Particular instances of an application program or other process may request an allocation of a portion of the dedicated portion of the non-volatile storage . For each instance of an application program, the ACD  may maintain a record associated with the instance including an identifier, size of total allocation available to the instance and size of current allocation to the instance. In one embodiment, the identifier in the record may be based upon a Universally Unique Identifier (UUID) according to , Internet Draft, published by the Internet Engineering Task Force (IETF), January 2004. As more than one instance of an application program may exist at any particular time, a record in the ACD  may be associated with a particular instance of an application program to receive an allocation of the non-volatile storage . A corresponding handle or identifier may uniquely distinguish a record in the ACD  for a particular instance of an application program from different instances of the same application program and instances of other application programs.","The storage manager  may allocate additional portions of the non-volatile storage  to a requesting application program or process up to a maximum size according to the record in the ACD  associated with the requesting application program or process. In one alternative embodiment, ACD  may indicate a maximum allocation size for all application programs or processes having a cumulative potential total memory allocation that exceeds the storage available on the dedicated portion of the non-volatile storage . It should be noted, however, that not all applications or processes may request an allocation of the non-volatile storage  as specified in the records of the ACD .","A manufacturer that assembles the components of the computing platform  may be different from a software vender that develops and provides the application programs that are to be hosted on the computing platform . Nevertheless, these parties may agree (e.g., by contractual arrangement) that the storage manager  is to maintain \u201cpartner\u201d entries in the ACD  corresponding with application programs developed by the software vender. These partner entries may be distinguished from other \u201cnon-partner\u201d records in the ACD  that correspond with application programs or process that are not provided by a software vendor having such an arrangement with the manufacturer. Such non-partner processes or application programs may include processes or application programs from venders that do not have a contractual relationship with the vendor of the storage manager . In one embodiment, the manufacturer may pre-load entries in the ACD  associated with partner processes or application programs when the computing platform  is manufactured. Entries in the ACD  associated with non-partner processes or application programs may be added to the ACD  after the computing platform  is deployed. Entries associated with non-partner processes or application programs may be subsequently created by, for example, application programs executing on the computing platform  or a remote process communicating with the computing platform  via the communication adapter , having first registered with the OS independent agent  as described below. Such creation of non-partner entries may be performed by a system management application under the control of a system manager in an enterprise information technology environment.","According to an embodiment, the storage manager  may implement different policies for allocation of the dedicated portion of non-volatile storage  based upon whether an allocation request is received from an instance of either a partner or non-partner application program. For example, the storage manager  may reserve a portion of the non-volatile storage  for allocation exclusively to instances of partner application programs. The storage manager  may then reserve the remaining portion of the non-volatile storage  to instances of either partner application programs or non-partner application programs.","According to an embodiment, a process or instances of an application program may request an allocation of a portion of the non-volatile storage  to store information such as, for example, hardware configuration information (e.g., information descriptive of the existence or status of a CPU, core logic chipset, system memory, hard drive, communication adapter(s) or other peripheral devices) and software configuration information (e.g., information descriptive of the existence or status of an operating system, application programs being hosted on the host including versions of application programs and security patch levels associated with the application programs).","According to an embodiment, application program instances or processes executing on the CPU  (e.g., application program instance ) may issue commands to the OS independent agent  through a command interface . The access driver  may transmit commands from the application program instances or processes to the OS independent agent  through the command interface  using predefined buffers in system memory  () which are outside the domain of the OS . In an embodiment in which the OS independent agent  is executed by a microcontroller independently of the CPU  (e.g., embedded in the communication adapter ), for example, the command interface  may be implemented in a memory mapped I\/O interface (e.g., according to the PCI local bus specification).","Remote application program instances or processes (e.g., application program instances or processes executing external to the processing platform ) may also issue commands to the OS independent agent  encapsulated as in-band messages received at the communication adapter . After being received at the communication adapter , the encapsulated commands may be stored in a predefined buffer in the system memory to be retrieved by the OS independent agent . Alternatively, in an embodiment in which the OS independent agent  is executed on a microcontroller on the communication adapter  independently of the CPU , the remote applications or processes may transmit commands to the OS independent agent  in out-of-band messages. In other embodiments, the application program  may transmit commands to the OS independent agent  hosted on the microcontroller encapsulated in outbound packets transmitted to the communication adapter . The communication adapter  may recognize the outbound packets as commands to be provided to the OS independent agent  hosted on the microcontroller and provide the encapsulated commands accordingly. In one example, the communication adapter  may comprise an auxiliary bus to transmit portions of the outbound packets to the microcontroller for processing as described in U.S. Pat. No. 6,385,211.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 2"],"b":["216","116","202","118","116","114","204","206","118","118","116","114","112","20"]},"According to an embodiment, the application program instance  may register its existence with a storage manager  to obtain a handle (or unique identifier) to be used in communicating with the storage manager . This registration process may occur according to a predefined protocol in which the application program instance  provides identification information such as a vendor name, application name, enterprise name and UUID. The storage manager  may then generate the handle using, for example, a hash algorithm (e.g., SHA-1) based upon the information provided by the requesting application program instance . The handle may then be used in future communications between the application program instance  and the storage manager .","Following the registration process with the storage manager , the application program instance  may request an allocation of an allocatable portion of the non-volatile storage  by transmitting an Allocate Block command to the OS independent agent  using the handle generated in the aforementioned registration process. In addition to including the handle, the Allocate Block command may include information such as a size of memory allocation of the non-volatile storage  requested. Upon receipt of the Allocate Block command, the storage manager  may associate the handle (in the received Allocate Block command) with information in ACD  for determining whether the request may be fulfilled.","According to an embodiment, following the allocation of a portion of the non-volatile storage  to the application program instance , the application program instance  may provide additional commands to the storage manager  for granting read-only or read\/write access rights for the allocated portion of non-volatile storage  to other processes or application programs. The storage manager  may then control access to the allocated portion of the non-volatile storage  accordingly. In the presently illustrated embodiment, for example, the application program instance  may provide a command to the storage manager  for granting read-only or read\/write access rights to either of the application program instances  or . In one example, the application program instance  may also periodically update hardware and\/or software configuration information in the allocated portion of the non-volatile storage  by transmitting Write Block commands to the storage manager . Either of the application program instances  or  may then access the updated configuration information by transmitting a Read Block request to the storage manager .","In another example, the application program instance  may comprise a management console application executed externally and transmit commands to the storage manager  through the communication adapter  (). The management console application may enable remote management of the computing platform  in an enterprise information technology environment. Also, the management console application may have write access to a portion of the non-volatile storage allocated to application program instance  and provide updates (e.g., security patches) to a version of the associated application program currently being hosted on the computing platform .","In another example, the application program instance  may comprise an OS recovery application enabling restoration of a system state of a computing platform in the event of a system crash. Operating independently of the operating system , the storage manager  may enable the application program instance  to read the updated configuration information in the allocated portion of non-volatile storage  regardless of whether the operating system  is executing. If the OS independent agent  is executing independently of the CPU  (e.g., on a microcontroller or microprocessor embedded in the communication adapter ), the storage manager  may also enable the application program instance  or  to remotely read the updated configuration information regardless of whether the computing platform  is in a full power state. Alternatively, application program instance  or  may write information (e.g., updated configuration information, patches, etc.) to an allocated portion of the non-volatile storage  when the computing platform  is in a reduced power state. Upon restoration of the computing platform  to a full power state (e.g., including a reset procedure), the application program  may retrieve the stored information from the allocated portion of the non-volatile storage  (e.g., as part of a power up script).","To control the allocation of the allocatable portion of non-volatile storage , the storage manager  may maintain one or more data structures of the ACD  in a memory (e.g., a portion of non-volatile storage  that is not to be allocated to application program instances but used to store the data structures used to manage the non-volatile storage ). An application registration list (ARL) may maintain a list of each currently registered instance as identified by the handle generated for the instance in the registration process. A factory partner allocation control list (FPACL) may maintain a record of each application program associating the application program with its factory application identifier and a maximum total allocation permitted for the application program. A partner allocation control list (PACL) may maintain a record of each registered application program instance associated with a partner application program that has allocated a portion of the non-volatile storage  (e.g., as identified in the FPACL). Similarly, non-partner allocation control list (NACL) may maintain a record of each application program instance which is not associated with a partner application program that has allocated a portion of the non-volatile storage . A record in the PACL or NACL may associate the handle of a registered application program instance with a maximum allocation and the current allocation for that application program instance. An allocated block list (ABL) may identify blocks of the non-volatile storage  which are allocated to each of the registered instances. The record in the ABL may associate information with the allocated block such as a block handle, size and base address in the non-volatile storage .",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 4","b":["224","202","228","302","228"]},"At diamond , the storage manager  may determine whether the requesting application program instance is associated with a partner or non-partner application program (e.g., associated with either a partner vendor or non-partner vendor). For example, diamond  may compare the handle of the received Allocate Block command with entries in the PACL to find a match with a partner application instance (e.g., having already received an allocation of storage as indicated in the PACL). If no match is found with entries in the PACL, diamond  may compare the handle of the received Allocate Block command with entries in the FPACL to associate the handle with a partner application program.","In the illustrated embodiment, the entries in the FPACL establish a predefined maximum size of storage to be allocated to any one partner application program instance and global data establishes a predefined maximum size of storage to be allocated to any one non-partner application program instance. Accordingly, depending on whether the Allocate Block command is from a partner or non-partner instance application program instance, diamonds  and  may determine whether the amount of storage requested would exceed the maximum permitted for the application program instance. If the Allocate Block command is from a partner application program instance, for example, diamond  may determine whether the requested allocation added to the current storage allocated to the partner application program instance (e.g., as indicated in a corresponding record of the PACL) would exceed the maximum permitted for any one partner application program instance. Similarly, if the Allocate Block command is from a non-partner application program instance, diamond  may determine whether the requested allocation added to the current storage allocated to the non-partner application program instance (e.g., as indicated in a corresponding record of the NACL) would exceed the maximum permitted for any one non-partner application program instance. In any case, if the requested allocation would exceed the maximum permitted for the requesting application program instance, the request would be rejected at block  with the rejection indicated in a reply message returned to the requesting application program instance .","If allocation of the requested amount of storage space would not exceed the maximum amount permitted for a requesting partner instance, diamond  may determine whether there is sufficient space in non-volatile storage  reserved for partner application program instances to be allocated to the requesting application program instance. If so, block  may allocate the requested storage block, and update the corresponding record in the PACL to indicate the current allocation size, with the success indicated in a reply message returned to the requesting application program instance .","Diamond  may determine whether there is sufficient space in the portion of non-volatile storage  available for allocation to non-partner application program instances if there is not sufficient space in the portion of non-volatile storage  reserved for partner application program instances to accommodate an allocation request from a partner application program instance. Diamond  may also determine whether there is sufficient space in the portion of non-volatile storage available for allocation to non-partner application program instances for any request from a non-partner application program instance as determined at diamond . Upon Diamond  determining that there is sufficient space to grant the request, block  may allocate the requested space, update the corresponding record in either the PACL or NACL, to indicate the current allocation size, with the success indicated in a reply message returned to the requesting application program instance . Otherwise, the request may be rejected at block  with the rejection indicated in a reply message returned to the requesting application program instance .","An application program instance having received an allocation of a block of storage may conditionally share access to an allocated block with other application program instances or processes. If shared access is desired, the application program instance may initiate subsequent commands to the storage manager  for granting read-only or read\/write access rights to the allocated block to other application program instances or processes. Upon receiving these commands, the storage manager  may define \u201cpermission groups\u201d associated with an allocated block identifying other program instances or processes having either read-only or read\/write access rights to the allocated block. The storage manager  may maintain a permissions group list (PGL) data structure having a record for each allocated block including a block handle, information to identify one or more permission groups and information specifying the type of rights granted to the application instances or processes in the identified group. Separately, for each permission group, the storage manager may maintain a group member list (GML) data structure listing each instance or process which is a member of the permission group (e.g., identified by the handle associated with the instance or process).",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 5","FIGS. 2 and 3"],"b":["404","406","404","402","408","410","404","402","438","434","436","428","406","430","438","434","436","402","404"]},"While there has been illustrated and described what are presently considered to be example embodiments of the present invention, it will be understood by those skilled in the art that various other modifications may be made, and equivalents may be substituted, without departing from the true scope of the invention. Additionally, many modifications may be made to adapt a particular situation to the teachings of the present invention without departing from the central inventive concept described herein. Therefore, it is intended that the present invention not be limited to the particular embodiments disclosed, but that the invention include all embodiments falling within the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":["Non-limiting and non-exhaustive embodiments of the present invention will be described with reference to the following figures, wherein like reference numerals refer to like parts throughout the various figures unless otherwise specified.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 1B","FIG. 1A"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 1C","FIG. 1A"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 5","FIG. 2"]}]},"DETDESC":[{},{}]}
