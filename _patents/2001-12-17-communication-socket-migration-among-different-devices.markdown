---
title: Communication socket migration among different devices
abstract: A socket migration architecture for migrating a communication socket among host devices comprises a plurality of migrateable sockets each operating in conjunction with one of a plurality of applications on a plurality of host devices. Each of the applications may utilize a respective migrateable socket to establish peer-to-peer communications with at least one other application. Upon establishment of such communications, the migrateable sockets may form an association link between migrateable sockets operating on different host devices. When a first application and respective first migrateable socket are migrated from a first host device to a second host device, at least one association link established prior to the migration may be used to re-established peer-to-peer communications as part of the migration event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06920501&OS=06920501&RS=06920501
owner: NTT Docomo, Inc.
number: 06920501
owner_city: Tokyo
owner_country: JP
publication_date: 20011217
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE PRESENT INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS OF THE INVENTION"],"p":["The present invention relates generally to communication between devices on a network, and more particularly, to methods and systems for migrating a communication socket from a first device to a second device over the network.","Personal electronic devices such as personal computers, personal digital assistants (PDA), wireless telephones and pagers have become prevalent in recent years. These devices may communicate over wireless and\/or wireline networks using various capabilities related to data, audio and video communication. The networks provide interconnection of these devices with information sources as well as other similar devices. Commonly, the networks include communication over the Internet.","Devices communicate with each other over the network with a communication protocol. Communication protocols function as an intermediary between applications operating on the devices and the network. Exemplary communication protocols include User Datagram Protocol (UDP) and transmission control protocol (TCP) to encapsulate messages generated by applications. In addition, a network protocol such as, Internet protocol (IP) may encapsulate the communication protocol to identify the device on the network.","The network protocol utilizes a host address of each of the devices as identification to establish peer-to-peer communications between devices. In addition, a port address of each of the devices is identified by the communication protocol. The port address includes a port number identifying the nature of use of the port, such as, for example, port  is usually for Hypertext Transfer Protocol (HTTP) traffic. Within a port, one or more sockets may be activated by applications operating on those devices. A socket is active as a TCP socket or a UDP socket when an application operating on a device is communicatively connected by TCP or UDP with an active socket (a TCP or UDP socket) of another application operating on another device. A passive socket is one that is not currently connected with a socket of another device. Each port may have a number of active sockets corresponding to open connections on the port along with a passive socket awaiting a connection. Peer-to-peer communication between active sockets (TCP or UDP sockets) of two devices is established based on the host address and the port address of each corresponding device.","Due to the inherent mobility of many of these devices, migration of an application among different devices is possible. Migration allows an application to move from one device (a source device) to another device (a target device) while maintaining the state of the application. For example, a user working with a server-based calendar application on his desktop personal computer to plan a business trip may migrate the application to his PDA to continue working when he leaves his desk. In these situations, the application may be transferred over the network from the source device to the target device.","When such a migration occurs, active sockets of the source device, as well as active sockets of other devices communicating with source device, are closed by the respective applications prior to migration. When the active sockets are closed, peer-to-peer communications with other devices on the network is lost. Following successful migration, sockets on the target device as well as sockets on devices previously communicating with the migrated application must be reopened and peer-to-peer communications reestablished. Since the host address changes when the application is migrated, the peer-to-peer communications must be completely reestablished. This may require significant specialized programming of the applications involved in the migration to re-open the sockets and re-establish peer-to-peer communications.","Prior art solutions to avoid having to completely reestablish peer-to-peer communications involve modifying the communication protocol. The communication protocol is modified to include application related information. The application related information avoids dependence on the host address to reestablish peer-to-peer communications. As such, when an application is migrated from one device to another, the peer-to-peer communications may also be migrated. Implementation of such a solution requires the modification of standard communication protocols such as transmission control protocol (TCP) or user datagram protocol (UDP) to include the additional information. Examples of this approach are described in publications entitled \u201cMulti-homed TCP\u201d by C. Huitema (Internet Draft, May 1995) and \u201cTCP Connection Migration\u201d by H. Balakrishnan and A. C. Snoeren (Internet Draft, November 2000).","A significant issue regarding modification of the standard communication protocol is deployment. All applications operating on all devices on the network must use the exact same communication protocol to communicate. As such, all the devices must be similarly modified to maintain communication compatibility. In addition, changes to the standard communication protocol may also require modification of the operating system of devices upon which the modified communication protocol is utilized.","Aside from the issues associated with deployment, most existing standard communication protocols have been developed by standards committees to provide uniformity among applications. For example, the TCP protocol is defined in a specification entitled \u201cTransmission Control Protocol, Darpa Internet Program, Protocol Specification\u201d RFC-793 (September 1981). Similarly, the UDP protocol is defined in a specification entitled \u201cUser Datagram Protocol\u201d RFC 768 (Aug. 28, 2001). It may be difficult to convince these committees to accept and implement such modified standards. Without implementation of the modified standards, maintaining uniformity as well as promoting widespread acceptance and use may prove unattainable.","The present invention discloses a socket migration architecture to support migration of a communication socket among heterogeneous devices. Peer-to-peer communication between devices on a network may be established with communication sockets using standard communication protocols. Using the standard communication protocols, association links may be established between the devices. Following a migration event, an association link may be utilized to re-establish peer-to-peer communications. Re-establishment of peer-to-peer communications by the socket migration architecture does not entail a complete re-establishment due to the association links. As such, significant specialized coding otherwise required to completely re-establish the link is not required. In addition, since standard communication protocols are used, modification and deployment of modified communication protocols is unnecessary.","The socket migration architecture of one embodiment is operated in a communication system comprising at least one source host, at least one corresponding host and at least one target host in operable communication over a network. The socket migration architecture includes applications and migrateable sockets that may be operating on any of the hosts within the communication system. A first application operating on the source host may use a first migrateable socket to establish peer-to-peer communications over the network with a second migrateable socket operating with a second application on the corresponding host. The first and second migrateable sockets may create an association link using a communication protocol to exchange identifying information. The identifying information may identify the host on which the application is currently operating. When the first application is migrated to the target device, the first migrateable socket may also be migrated. Migration of the first migrateable socket avoids having to completely reestablish peer-to-peer communications by utilizing the association link between the first and second migrateable sockets to re-establish communications.","In one embodiment, each of the first and second migrateable sockets includes a respective first and second roam socket module and a respective first and second active socket module. The first and second roam socket modules may operate on a first layer that is the fifth, sixth or seventh layer of the well-known OSI model and the first and second active sockets may operate on a second layer that is the fourth layer of the OSI model. The first and second active sockets may operate with a communication protocol to communicate over the network and provide peer-to-peer communications. The first and second roam socket modules may be associated when the association link is created. When migration from the source host to the target host occurs, the first roam socket module may be migrated to the target host. Following migration, peer-to-peer communication may be re-established between the corresponding host and the target host with the first and second roam socket modules as a function of the association link. Peer-to-peer communication over the network may be re-established with the communication protocol by opening a third active socket with the second roam socket module and fourth active socket with the first roam socket module.","In another embodiment, the socket migration architecture includes synchronization buffers independently operating with each of the first and second migrateable sockets. In this embodiment, during a migration event, an input datastream independently received by each of the first and second roam socket modules over the network is buffered by respective synchronization buffers. Both the first migrateable socket and the buffered input datastream received thereby are migrated from the source host to the corresponding host. Upon reestablishment of peer-to-peer communication using the first and second migrateable sockets, the corresponding buffered input datastreams are independently read by the first and second migrateable sockets.","In yet another embodiment, the socket migration architecture includes association tables independently operating with each of the migrateable sockets. In addition, an address translation table operating with the second roam socket module is included in the migration architecture operating on the corresponding host. The respective association tables may be used to store identifying information when association links are created during peer-to-peer communication over the network utilizing the communication protocol. In this embodiment, a migration event includes migration of both the first migrateable socket and the association table operating in conjunction therewith. The first migrateable socket may utilize the corresponding association table to reestablish peer-to-peer communication between the target host and the corresponding host. The address translation table may be updated to map the migration from the host device to the target device and provide a cross-reference for future peer-to-peer communication.","Another interesting feature of the socket migration architecture involves freezing the input\/output data between an application and the migrateable socket operating therewith. Freezing may occur during a migration event to expedite the migration process and maintain coordinated communication between host devices.","Yet another interesting feature of the socket migration architecture involves the ability to create association links with multiple host devices using the association tables. As such, following migration, peer-to-peer communications may be seamlessly reestablished with multiple applications operating on each of multiple host devices.","Still another interesting feature of the socket migration architecture involves communication during a migration event. Interruption of the peer-to-peer communications during a migration event is almost transparent and seamless for the applications involved in the event. As such, coordinated operation between the applications is maintained following the migration event and data loss is minimized.","Further objects and advantages of the present invention will be apparent from the following description, reference being made to the accompanying drawings wherein preferred embodiments of the present invention are clearly shown.","The presently preferred embodiments describe a socket migration architecture capable of migrating a communication socket associated with an application when the application is migrated among different devices. The socket migration architecture may be utilized with standard communication protocols to provide socket migration capability. Application developers of both the application being migrated and applications in communication therewith may utilize the socket migration architecture to avoid additional coding that would otherwise be needed to reestablish communication following migration. In addition, the socket migration architecture provides a temporary interruption of communication during the migration that is almost transparent to the operation of the applications involved in the event.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["10","12","12","14","16","18","20","10","22","24","10","16","18","20"]},"The network  may include the Internet, a public and\/or private intranet, an extranet, and\/or any other form of network configuration to enable transfer of data and commands. Communication within the network  may be performed with a communication medium that includes wireline based communication systems and\/or wireless based communication systems. The communication medium may be for example, a communication channel, radio waves, microwave, wire transmissions, fiber optic transmissions, or any other communication medium capable of transmitting data, audio and\/or video.","The source host , the corresponding host  and the target host  may be any type of computing device or similar hardware capable of providing a connection for communicating over the network . For example, the source host , the corresponding host  and the target host  may be a wireless device, such as, a wireless phone, a personal digital assistant (PDA) or any other device capable of wireless communication. In addition, the source host , the corresponding host  and the target host  may be a wireline device, such as, for example, a personal computer, a server computer or any other device capable of wireline communication over the network . In other embodiments, devices may include both wireline and wireless communication capability. Although only three host devices are illustrated in , any number of host devices may be communicating on the network  and using the socket migration architecture .","In the illustrated embodiment, the source host , the corresponding host  and the target host  may each include the socket migration architecture . Data communicated over the network  by the hosts , ,  may be generated by, and directed to, applications  operating on the hosts , , .","Applications  in the form of software, firmware or some other form of computer code may include an operating system and\/or any other applications the hosts , ,  are capable of running. As used herein, the term \u201capplication\u201d may refer to an executable program and\/or any accompanying data files operated with an executable program. For example, a user may activate a host , ,  such as a wireless phone. When the wireless phone is activated, an application  is launched to provide the functions available from the wireless phone such as dialing and receiving phones calls. In addition, the user may initiate other applications  such as, interactive messaging, an Internet browser, email services, stock market information services, music services or any other functionality operable with the host , , .","In the presently preferred embodiments of the socket migration architecture , the applications  are capable of being migrated. Migration of an application  involves moving an instance of the operating application from a source device to a target device. The descriptive nomenclature used for the \u201csource\u201d host  and the \u201ctarget\u201d host  is used to further illustrate the migration concept. In addition, the \u201ccorresponding\u201d host  is so identified to indicate peer-to-peer communication with the source host  prior to a migration event, and with the target host  following a migration event.","Each of the applications  preferably utilize migrateable sockets  to establish communications over the network  with other applications . The migrateable sockets  operate within the hosts , ,  to provide an interface between the applications  and the network . The migrateable sockets  may utilize the ports, sockets and any other conventional communication related components within the hosts , ,  to communicate over the network . The operation of the migrateable sockets  may be based on the operation of applications  operating within the hosts , , .","The applications  may communicate with each other over the network  creating peer-to-peer communications. The peer-to-peer communications are created with \u201cpeer\u201d migrateable sockets . As used herein, the term \u201cpeer\u201d migrateable sockets  refers to migrateable sockets  associated with applications  operating on different hosts , ,  that have formed peer-to-peer communications. For example, the source host  may launch an application  that is a client application such as an email application. The client application may initiate communication with an application  on the corresponding host  that is a server application, such as an email server application.","The peer migrateable sockets  may form an association link between the applications . The association link is based on identifying information exchanged between migrateable sockets . The number of applications  linked by peer migrateable sockets  may be two or more depending on the applications  and the communication protocol. The identifying information provides the identity of the host , ,  upon which the applications  are currently operating. The identifying information may be a hostname and port number pairs or any other type of device or resource specific information capable of identifying a host , ,  within the communication system .","In the presently preferred embodiments, a respective migrateable socket  operates in conjunction with an application  launched on a respective host , , . As such, the migrateable socket  may be migrated along with the application  from one heterogeneous host device to another. As described later in detail, migration of a peer migrateable socket  does not extinguish the association link between applications ; rather, peer-to-peer communication between the applications may be temporarily suspended. Once the migration is complete, the peer migrateable sockets  reestablish the previous peer-to-peer communication between the applications  based on the association link. Maintaining the association link between the applications  following migration may maintain continuity and expedite resumption of operation of the instance of the application  that was migrated.","During operation of the communication system , applications  may be launched on the source host  and the corresponding host . The applications  may utilize associated peer migrateable sockets  to form an association link between the applications . For example, the source host  may be a desktop computer launching a video on-demand application and the corresponding host  may be a server computer running a video streaming server application.","Upon migration of an application  operating on the source host  to the target host , the migrateable socket  associated with the application  may also be migrated as illustrate by arrows  in FIG. . If, for example, a user attending the video on-demand via the source host  had to travel to another location, the video on-demand application and associated migrateable socket  may be migrated to the user's PDA (the target host ). Migration of the migrateable socket  suspends communication between the applications  operating on the source host  and the corresponding host , and resumes communication between the same applications  operating on the corresponding host  and the target host  following the migration event.","Through the use of the socket migration architecture , the communication between the applications  may be seamlessly reestablished following migration. In addition, migration by the migrateable sockets  is almost transparent to both the migrating application  and the application  operating on the corresponding host . As such, the socket migration architecture  provides application programmers a fairly simple implementation that avoids significant coding of the applications  that would otherwise be necessary to create new peer-to-peer communications following the migration event.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 2","FIG. 1"],"b":["10","12","12","14","16","18","20","10","12"]},"The socket migration architecture  of this embodiment includes applications  and migrateable sockets  as in the previous embodiments. In addition, the socket migration architecture  includes synchronization buffers . The synchronization buffers  may be any storage medium capable of storing sequentially received data. As described later in detail, the synchronization buffers  cooperatively operate with peer migrateable sockets  during operation of the socket migration architecture  to store data transmitted between applications  over the network .","In the illustrated embodiment, the socket migration architecture  includes a first application operating on the source host  with a first migrateable socket and a first synchronization buffer . In addition, the socket migration architecture  includes a second application operating on the corresponding host  with a second migrateable socket and a second synchronization buffer . The first and second applications , may establish peer-to-peer communications and create an association link with the first and second migrateable sockets , . Identifying information on which the association link is based is exchanged between the first and second migrateable sockets , over the network .","In this embodiment, the association link established by the first and second migrateable sockets , between the first and second applications , is established with a transmission control protocol (TCP) connection. The TCP connection is a virtual pipeline opened over the network  between peer migrateable sockets  (first and second migrateable sockets , ). The TCP connection provides a communication channel through which the first and second applications , may transmit and receive data. The TCP connection may include two socket peers, which are the first and second migrateable sockets , . In other embodiments, any other communication protocols with reliable, stream-oriented characteristics forming a connection between peers may be utilized.","TCP is an industry standard communication protocol in which each TCP socket peer is associated with a port on a host device. The TCP communication protocol may encapsulate a message protocol, such as, for example hypertext transfer protocol (HTTP) to provide connection management and reliable delivery of the message protocol. The message protocol and the TCP communication protocol may be further encapsulated by a network protocol to identify the devices upon which each TCP socket peer resides. An exemplary network protocol is the Internet protocol (IP). The network protocol may provide identification of the host on which the TCP socket peer is operating. For example, the IP network protocol forms a header for the TCP protocol which includes a host IP address. The standard communication protocol of TCP fails to provide provisions for changing the host IP address and the port address of a TCP socket peer once the TCP connection has been established between two peers. Standard communication protocols such as TCP operate on a transport layer of an OSI model and network protocols such as IP operate on a network layer. As known in the art, the OSI model is an abstract model of networking that identifies seven layers.","In the presently preferred embodiments, each of the migrateable sockets  may include an active socket  and a roam socket module . The active socket  may be a conventional TCP socket peer operating in the fourth layer (L) of the OSI model. The active socket  may operate to send and receive datastreams flowing through the TCP connection formed between peer migrateable sockets . TCP socket peers may operate in conjunction with an application  to transmit an output datastream over the network  based on data supplied by the corresponding application . In addition, TCP socket peers may receive an input datastream from the network  directed to the corresponding application . Operation of the active socket  as a TCP socket peer includes buffering of input and output datastreams, sliding window flow control, full duplex operation, round trip time estimation and other well-known features of the TCP communication protocol.","The active socket  may establish a TCP connection with a peer TCP socket using three-way handshaking with a host address and a port address of the host , ,  on which the application  is currently operating. As known in the art, conventional establishment of a TCP connection involves initiation of contact between a client application and a server application with a server socket. The client application or the server application may open a server socket to initiate contact. Initiation of contact is performed with a three-way handshake directed to the server socket. The three-way handshake is part of the standard TCP communication protocol and is transparent to both the client and the server applications. In response to the initiation of contact via the server socket, a socket may be opened and a TCP connection between the sockets of the client application and the server application is formed. In the embodiments described herein, any of the applications  may operate as server applications or client applications with sockets that may be the active sockets . In addition, any application  operating as a server application may include a server socket.","In one embodiment, the active sockets  are Java TCP sockets instantiated with a Java TCP socket Application Programming Interface (API). Java is a well-known object-oriented programming language that may be operated on any device capable of supporting a Java virtual machine (VM). As known in the art, Java APIs are a large collection of ready-made software components providing a wide range of functionality within Java based applications. In this embodiment, the active sockets  may be Java TCP sockets instantiated with java.net.socket. In other embodiments, the active sockets may be instantiated with UNIX C or any other programming language.","Each of the roam socket modules  may be associated with one of the active sockets  to provide migration capability. In the presently preferred embodiments, the roam socket modules  provide an abstract TCP connection between two TCP socket peers, where each of the two TCP socket peers is an active socket  within a peer migrateable socket . Accordingly, each of the roam socket modules  associated with the TCP socket peers may be described as \u201cpeer\u201d roam socket modules .","Establishment of the abstract TCP connection is provided through establishment of the association link. In one embodiment, the association link may be created by the exchange of object references between peer roam socket modules . The object reference of each of the roam socket modules  includes identifying information. In other embodiments, an execution state of the peer roam socket modules  may be exchanged over the TCP connection. In still other embodiments, a host address and a port address of the host device on which each of the peer roam socket modules  is operating may be exchanged over the TCP connection. In addition, in other embodiments, any other information may be exchanged between peer roam socket modules  that provides identification of the communication path between applications operating on hosts , ,  in the network .","The abstract TCP connection allows migration of the migrateable socket  between the hosts , ,  while maintaining an abstract connection between peers. In other words, one of the peer migrateable sockets  may change hosts , ,  (e.g. host address\/port address) while maintaining an abstract TCP connection with a peer migrateable socket  instantiated on another device. As such, associated TCP connection(s) may be effectively migrated along with the applications .","Operation of the roam socket module  may be in layers five\u2014L (the session layer), six\u2014L (the presentation layer) and\/or seven\u2014L (the application layer) of the OSI model. As such, the roam socket module  does not modify the TCP communication protocol utilized by the associated active socket  operating in level four. Instead, the roam socket module  is built on top of the active socket  to encapsulate and direct the overall operation of the active socket .","In the embodiment illustrated in , the first migrateable socket may include a first active socket and a first roam socket module . In addition, the second migrateable socket may include a second active socket and a second roam socket module . The first and second roam socket modules , may direct the opening and closing of the respective first and second active sockets , . In addition, the first and second roam socket modules , may control the flow of input data and output data between the respective first and second applications , and the respective first and second migrateable sockets , . Further, the first and second roam sockets modules , may communicate over the network  using the first and second active sockets , ","For example, in the illustrated embodiment, the first and second applications , may use the respective first and second roam modules , to open the respective first and second active sockets , . The first and second active sockets , may become TCP socket peers by establishing a TCP connection. The first and second roam socket modules , may create an association link using the TCP connection established between the TCP socket peers (first and second active sockets , ). Identifying information on which the association link is based may be exchanged between the first and second roam modules , . For purposes of fully describing the functionality and components, this exemplary TCP connection will be used in the discussion that follows. It should be realized, however, that any other applications operating on host devices in the communication system  may form a TCP connection.","The roam socket module  may also operate to avoid data loss (e.g. packet loss) during migration of an application  and associated TCP data connection. Data loss during migration is avoided by cooperative operation of the migrateable sockets  and the synchronization buffers  operable therewith. If, for example, the first application is about to migrate, the first roam socket module may direct the first active socket to close. During the standard close process for a TCP connection, the first active socket may send a close message to the TCP socket peer (for example second active socket ), flush data buffered in the first active socket and await an end-of-file indication from the TCP socket peer. Upon receiving the end-of-file indication, the first active socket , as well as the TCP socket peer may delete the TCP connection and close.","In addition to directing the active sockets  forming the TCP connection to close, each of the roam socket modules  may also freeze the flow of input\/output (I\/O) data to\/from an application  operating therewith. In effect, the frozen applications  are suspended from reading and writing data to the migrateable sockets  during the migration event. In one embodiment, read and write calls between an application  and a migrateable socket  operating therewith are directed through the roam socket module  as input data and output data, respectively. When the application  is frozen, the roam socket module  may block the flow of input and output data until the migration is complete.","In the presently preferred embodiments, the speed and efficiency of the migration event may be increased by freezing the input and output data prior to completion of the close of the TCP connection. Accordingly, preparation for the migration event is not delayed while the input datastream containing the data flushed from the TCP socket peer is transmitted over the network . In addition, delay while awaiting processing to reach the end of file message, as well as during transmittal over the network  of acknowledgement of receipt of the flushed data may be avoided.","The reliability of data transfer with the TCP communication protocol by the active sockets  is not compromised by the socket migration architecture . The active sockets  receive the input datastream containing the flushed data until the end of file indication is reached. In addition, acknowledgment of receipt occurs prior to closing the TCP socket peers using the standard TCP communication protocol.","Since the flow of input\/output data may be frozen prior to closing the active socket , the input datastream provided by the peer TCP socket during closing is not directed to the application . Instead, the roam socket module  may direct the input datastream to the synchronization buffer . As such, any input datastream received by the migrateable socket  over the TCP connection while the application  is frozen may be reliably captured within the synchronization buffer . Effectively, through the capture of this data, the migration event is fast and efficient while maintaining transparency of the migration to both the migrated application  as well as the application  communicating with the migrated application  over the network .","Migration of the application  among the hosts , ,  includes migration of the roam socket module  and the synchronization buffer  operating in conjunction therewith. For example, in the embodiment illustrated in , the first application , the first roam socket module and the first synchronization buffer may be encoded and migrated over the network  from the source host  to the target host  as illustrated by arrow . Migration is further illustrated in  by the dotted boxes representing the first application , the first roam socket module and the first synchronization buffer in the target host . Following migration, the first application , the first roam socket module and the first synchronization buffer may be decoded and a server socket  may be instantiated to reestablish the TCP connection.","In one embodiment, Java applications are used. In this embodiment, the running state of the first roam socket module and the first synchronization buffer are serialized, transmitted, de-serialized, and the server socket  is instantiated. The server socket  of this embodiment may be a standard Java TCP server socket instantiated with java.net.ServerSocket. In other embodiments, other programming languages may be used to instantiate the server socket . As known in the art, serialization\/deserialization of Java sockets is not possible. In one embodiment, methods for serialization and de-serialization of the execution state of the first roam socket module (or any other roam socket module ) provide socket specific serialization and de-serialization. In other embodiments, file compression techniques, table based encoding and decoding or any other form of data manipulation and transfer may be utilized for encoding\/decoding and transmission over the network .","Following migration and instantiation of the server socket , the migrated first roam socket module may function as an abstract TCP connection by directing the server socket  to reinitiate communication over the network . The server socket  is directed to reinitiate communication with a peer roam socket module  operating on another host , , . In the illustrated embodiment, the roam socket module  that was a peer prior to the exemplary migration event was the second roam socket module . The migrated first roam socket module may utilize the association created with the association link to reestablish communication using the server socket . In other words, the identifying information is provided to the server socket  to contact the second roam socket module operating on the corresponding host .","In one embodiment, the server socket  instantiated by the first roam socket module is a Java server socket instantiated with java.net.ServerSocket. The Java server socket may initiate communication by transmitting a port address and a host address to the corresponding host  on which the second roam socket module and associated second application are operating. In this embodiment, transmission may be performed with Java remote method call (RMI). Identification of the corresponding host  on which the second roam socket module is operating is provided by the object reference of the second roam socket module . The object reference was provided by the association link established prior to the migration event. In other embodiments, other methods and mechanisms may be used for identification of the corresponding host  as well as transmission to initiate communication.","Upon contacting the corresponding host  with the server socket , a third active socket on the corresponding host  may be opened. The third active socket and the server socket  may provide a communication path between the first roam socket module and the second roam socket module . The communication path allows the first roam socket module to transmit identifying information to the second roam socket module . The second roam socket module may provide the identifying information to the third active socket . The third active socket may utilize the identifying information to communicate with the server socket  using standard TCP three-way handshaking and initiate reestablishment of the TCP connection. During the handshaking, a fourth active socket may be opened on the target host  to reestablish the TCP connection between the target host  and the corresponding host  as in conventional TCP communication protocol. Once the TCP connection is reestablished, the association link is also reestablished through exchange of current identifying information between the peer roam socket modules .","Prior to transferring input datastreams from the reestablished TCP connection to the first and second applications , , the flushed data buffered in the first and second synchronization buffers , is provided to the respective applications , . The flushed data is extracted by respective first and second roam socket modules , and provided as input data to the respective first and second applications , . As such, the first and second applications , are provided data in transmission sequence order without loss of data.","During operation, when an application  is launched on a host , , , the roam socket module  creates the active socket . In one embodiment where the roam socket module  is a Java application, the active socket  is a Java TCP socket. In this embodiment, the APIs of the roam socket module  includes a wrapper class to extend java.net.socket operating the active socket . In addition, the roam socket module  includes a wrapper class to extend java.net.ServerSocket when the server socket  is instantiated following migration. The wrapper classes of this embodiment preferably include a method interface similar to the corresponding classes being wrapped so that implementation of the wrapper classes by application developers may be simplified.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 3","FIG. 2"],"b":["10","22","16","20","24"],"i":["a ","a. "]},"The operation begins at block  when migration of the first application from the source host  to the target host  is initiated. At block , the I\/O data flow of the first application on the source host  is frozen by the first roam socket module . The first roam socket module initiates closing of the first active socket at block . At block , the first active socket sends a close message to the peer active socket  operating on the corresponding host  (second active socket ). Data is flushed from the first active socket at block . At block  a peer roam socket module  operating on the corresponding host  (second roam socket module ) freezes the I\/O data flow of an application  operating on the corresponding host  (second application ) based on the close message. In addition, at block  flushing of the peer active socket  on the corresponding host (second active socket ) is initiated based on the close message.","At block , the peer active sockets  on the source host  and the corresponding host  (first and second active sockets , , respectively) receive respective input datastreams containing flushed data. The flushed data is read by the peer roam socket modules  on the source host  and the corresponding host  (first and second roam socket modules , , respectively) at block . At block , the flushed data is stored in a respective synchronization buffer  within the source host  and the corresponding host  (first and second synchronization buffers , , respectively).","The peer active sockets  on the source host  and the corresponding host  (first and second active sockets , , respectively) close and delete the TCP connection at block . At block , the first application , the first roam socket module and the first synchronization buffer operating on the host source  are migrated to the target host  as illustrated by arrow  in FIG. . The first application , the first roam socket module and the first synchronization buffer are instantiated on the target host  at block .","Referring now to , at block , the first roam socket module creates the server socket  on the target host  on a system allocated port address. The server socket  is directed by the first roam socket module to transmit an initiate communication message over the network  at block . The message is received by corresponding host  based on the identifying information provided by the first roam socket module at block .","At block , an active socket  (third active socket of ) is opened on the corresponding host  by the second roam socket module . The third active socket initiates three-way handshaking with the server socket  on the target host  at block . At block , an active socket  is opened on the target host  (fourth active socket of FIG. ). The TCP connection is established between the fourth active socket on the target host  and the third active socket on the corresponding host  at block . At block , the association link is updated by exchanging identifying information between the first and second roam socket modules , operating on the target host  and the corresponding host .",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 5","FIG. 5"],"b":["12","10","12","16","18","20","14","10","22","24","24","32","34","10","40","24","16","18","20","12"]},"In the illustrated embodiment, the socket migration architecture  operating within the source host  may form an association link with the corresponding host . In these embodiments, the source host  includes a first application , a first association table and a first migrateable socket . The first migrateable socket includes a first active socket and a first roam socket module . In addition, the corresponding host  includes a second application , a second association table and a second migrateable socket . The second migrateable socket similarly includes a second active socket and a second roam socket module ","The association link may be formed by associating the first migrateable socket with the second migrateable socket via peer-to-peer communication over the network  using a communication protocol. In this embodiment, the communication protocol is a user datagram protocol (UDP) communicated over the network  with the first and second active sockets , . Similar to the TCP communication protocol, the UDP communication protocol is an industry standard communication protocol that operates with the active sockets  in the fourth layer (the transport layer) of the OSI model. The first and second active sockets , operate as UDP socket peers using UDP encapsulated by IP to identify the port address and the host address of the host devices , ,  on which the peers are operating. An exemplary utilization of UDP is with voice or multimedia information transmission, however, UDP may be used anywhere data packets are transmitted over the network .","Unlike TCP, however, UDP is connectionless. A UDP socket can send and receive data packets (called datagrams) from other UDP sockets without an explicit TCP-like connection establishment. Given that UDP does not require any connection setup with other UDP sockets, a UDP socket specifies peer UDP socket addresses in the form of host address and port address pairs for each outgoing data packet. Exemplary UDP sockets include a Java UDP socket instantiated with a connect( ) method in the Java UDP class java.net.DatagramSocket, and a UNIX UPD socket instantiated with a connect( ) system call in B SD UNIX.","Although UDP is connectionless, migration of the migrateable sockets  along with the associated applications  is preferable. Migration of the migrateable sockets  may provide transparency of migration events to the application developers as well as the applications  themselves. Similar to the previous embodiments involving TCP, the roam socket modules  of this embodiment operate on top of the active sockets  in the fifth, sixth or seventh layer (the session, presentation or application layer, respectively) of the OSI model thereby avoiding changes to the standard UDP communication protocol and operating systems of the host devices.","In one embodiment, the roam socket modules  are instantiated with Java applications. In this embodiment, the Java application method for the roam socket modules  may be a wrapper class which extends java.net.DatagramSocket. The wrapper class may be designed to have a similar method interface to java.net.DatagramSocket. As such, application developers may more easily apply the wrapper class when implementing migratability into applications being developed.","The roam socket modules  utilize the peer active sockets  for peer-to-peer communication with peer roam socket modules . In addition, the roam socket modules  provide socket-layer association between UDP socket peers (first and second active sockets , ).","The association link between UDP socket peers of the presently preferred embodiments provides for multiple associations. In addition, the association links do not involve any actual connection establishment such as TCP-like connection handshaking between two TCP socket peers. Instead, the association links simply mean that UDP sockets may receive and send packets from\/to associated UDP socket peers. As such, the roam socket modules  of these embodiments may create an abstract UDP association between associated UDP socket peers (active sockets ) such that any socket peer(s) can change host\/port attachment while maintaining an abstract UDP association with any number of peer(s). The abstract association created between applications  is created with identifying information as in the previous embodiments.","The abstract association may provide a virtual connection. The virtual connection may be created without any explicit connection setup. Instead, the association link may be triggered by an exchange of messages between peer roam socket modules .","An exchange of messages provides identifying information that may be utilized following a migration event. The identifying information provided to form the association link is preferably stored in the association tables . Each of the association tables  operate in conjunction with a roam socket module  on a host device , , . In one embodiment, the identifying information stored in the association table  includes addresses. The addresses identify the location of host devices , ,  in the network  upon which previously associated roam socket modules  are operating. For example, the first and second association tables , may each include the host address of the corresponding host  and the source host , respectively, where the first and second roam socket modules , have been previously associated.","In the presently preferred embodiments, a roam socket module  desiring to request an association link may wait for a data packet (datagram) from a roam socket module  to which the desired request will be made. Upon receipt of such a data packet, an association request may be transmitted. Upon receiving such an association request message, the roam socket module  may determine whether to accept or reject the request. The determination may be based on, for example, the application , the user operating the application  or any other factors. Acceptance or rejection of the request may be provided in an association acknowledgment message transmitted to the requesting roam socket module . If accepted, message exchanges containing identifying information may be initiated to establish the association link.","Since UDP is an unreliable communication protocol, the request and\/or the request acknowledgement messages may be dropped within the network . To allow the association between roam socket modules  to remain as asynchronous as possible, time-out mechanisms are preferably not used for retransmission of requests. Instead, additional packets of data being received when an association acknowledgment message is expected triggers retransmission. In other embodiments, other forms of error checking may be utilized including time-out mechanisms.","In the illustrated embodiment, the association link may be formed between the first roam socket module and the second roam socket module . In other embodiments, however, additional association links may be created with other migrateable sockets  operating as UDP sockets. The migrateable sockets  of these embodiments provide functionality that changes the traditional definition of socket peer association among UDP sockets as defined, for example, in Java and BSD UNIX. The change allows a UDP socket to be associated with more than one UDP socket peer. Accordingly, the migrateable sockets  allow migration support for applications such as, for example, a Chat Room, where one UDP socket may be associated with multiple UDP socket peers. In addition, the socket migration architecture  provides the functionality to track migration events and update the current location within the communication system  when an application  and migrateable socket  operating therewith migrate from host device to host device.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 6","b":["10","24","12","5","22","24","18","14","22","24","16","10","18","16","14","22"],"i":["b ","b ","a ","a "]},"Referring to , the operation begins at block  when a datapacket is transmitted over the network  from the second roam socket module to the first roam socket module using the second and first active sockets , , respectively. At block , the first roam socket module responds to the data packet with an association request message transmitted to the second roam socket module . Upon receiving the association request message, the second roam socket module may determine if association is desirable at block . If not, an association acknowledgement request message rejecting the request is transmitted to the first roam socket module at block . At block , the association operation ends.","If the association is desirable, the second roam socket module may transmit an acknowledgement request message to the first roam socket module accepting the request at block . At block , the first roam socket module determines if additional data packets from the second roam socket module are received instead of the acknowledgement request message. If yes, the operation returns to block  and transmits another association request message. If the acknowledgement request message is received instead of additional data packets, the first and second roam modules , exchange messages containing identifying information to set up the association link at block .","Referring once again to , when an application  is migrated, the roam socket module  and the association table  operating with the application  may also be migrated. As known in the art, UDP does not guarantee reliability. As such, data packets may be lost during a UDP socket migration. The roam socket modules  also may not implement transmission reliability. In addition, freezing and flushing of the active sockets  as in the previously discussed embodiments utilizing the TCP communication protocol is unnecessary.","In embodiments using the UDP communication protocol, during a migration event, the running state of a roam socket module  may be encoded and migrate with along with the application  operating in conjunction therewith. In addition, the association table  operating in conjunction with the roam socket module  may also be encoded and migrated. In one embodiment, encoding involves serialization that may be performed with a java.io.serializable interface. In other embodiments, other forms of encoding may be utilized.","Following migration, the migrated roam socket module  may create an active socket  for communication over the network . In addition, the migrated roam socket module  may reestablish communication with previously associated peer roam socket modules  as a function of the identifying information in the migrated association table . The migrated roam socket module  may send a re-association message and a corresponding re-association acknowledgement message may be sent in reply. The re-association message may include identifying information such as, for example, a host address and a port address for the host device on which the roam socket module  is currently operating. As a function of the re-association and re-association acknowledgement messages, the association link may be updated to reflect the migration event.","In addition to updating the association tables , an address translation table  operating in conjunction with each of the peer roam socket modules  may also be updated. The address translation table  provides a table for translating between identifying information associated with the application  prior to the migration event and identifying information associated with the application  following the migration event. In one embodiment, the address translation table  provides a cross-reference of the host address and port address of migrated roam socket modules . As such, any data packet sent to the prior host device may be translated as a function of the address translation table  and transmitted to the correct host device in the network .","Through the use of the association table  and the address translation table , reestablishment of communications is almost transparent to the migrated application . In addition, application developers designing migrateable applications may implement the socket migration architecture  for UDP communications to avoid the significant coding that would otherwise be required in both the migrated application  as well as the applications  communicating with the migrated application  prior to the migration event. Further, the address translation table  shields the applications  from tracking the migration events. As such, design by application developers, as well as operation of the applications  may be simplified.","As in the previously described association operation, the re-association message and\/or the re-association acknowledgement message may be dropped by the UDP communication protocol. In one embodiment, the use of a timeout mechanisms is similarly avoided by monitoring to confirm that the re-association acknowledgement message is received prior to any other data packets. Where data packets are received prior to the re-association acknowledgement message, the migrated roam socket module  may retransmit the re-association message. In other embodiments, other forms of transmission confirmation may be utilized. The association tables  also provide the ability to form association links between any number of applications  to re-establish peer-to-peer communication following a migration event.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 7","b":["10","22","12","5","22","22","6","22","16","20","22"],"i":["a ","b ","a "]},"Referring to , the operation begins at block  when the first application along with the first roam socket module and the first association table are encoded and migrated from the source host  to the target host  as illustrated by arrow  in FIG. . At block , the first application , the first roam socket module and the first association table are decoded and instantiated on the target host . The first roam socket module opens an active socket  (third active socket in ) at a system allocated port at block . At block , the first roam socket module accesses the first association table . The first association table is accessed to obtain identifying information for peer roam socket modules  (second roam socket module ) previously associated with the first roam socket module ","The first roam socket module sends a re-association message to one of the peer roam socket modules  (second roam socket module ) identified in the first association table at block . At block , the first roam socket module monitors the third active socket for communication over the network . In addition, at block , the first association table is checked to determine if additional peer roam socket modules  exist that have not yet been sent a re-association message. If yes, the operation returns to block . If no, monitoring continues at block ","At block  a re-association message is received by one of the peer roam socket modules  (second roam socket module ). The association table  (second association table ) operating in conjunction with the second roam socket module is updated based on the re-association message at block . The association table  is updated with identifying information (such as a host address and port address) to reflect that the first roam socket module is now operating on the target host . At block  the address translation table  is updated. The address translation table  is updated to provide mapping indicating the first roam socket module has been migrated from the source host  to the target host . The second roam socket module transmits a re-association acknowledgment message to the first roam socket module at block .","At block , the re-association acknowledgement message from the second roam socket module is received at the target host  by the first roam socket module . At block , the first roam socket module determines if the message is the re-association acknowledgment message from the second roam socket module . If no, the operation returns to block  and transmits another re-association message. If it is determined that a re-association acknowledgement message is received, the first and second roam modules , exchange messages at block .","The previously discussed embodiments of the socket migration architecture  provide migration capability for communication sockets operating in conjunction with applications  capable of migration among heterogeneous host devices. The socket migration architecture  provides an abstract association link between applications  that allows the continuation of peer-to-peer communications established prior to a migration event. The temporary suspension of peer-to-peer communications during migration may be almost transparent to the applications  involved in the migration. As such, interruption in communication between the applications  is minimized and continuity in the coordinated operation of applications  engaged in peer-to-peer communications is maintained.","The socket migration architecture  utilizes existing communication protocols without modification to the protocols or the operating systems supporting the protocols. As such, the socket migration architecture  may be relatively easy to deploy. In addition, the socket migration architecture  includes features to maintain, and even enhance, the operational characteristics and features of the communication protocols. Accordingly, application developers may implement the socket migration architecture  to avoid significant coding that would otherwise be required within migrateable applications.","While the present invention has been described with reference to specific exemplary embodiments, it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention as set forth in the claims. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":"1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3","b":"2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4","b":"3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6","b":"5"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7","b":"5"}]},"DETDESC":[{},{}]}
