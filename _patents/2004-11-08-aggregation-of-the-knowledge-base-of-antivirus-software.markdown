---
title: Aggregation of the knowledge base of antivirus software
abstract: In accordance with this invention, a system, method, and computer-readable medium that aggregates the knowledge base of a plurality of antivirus software applications are provided. User mode applications, such as antivirus software applications, gain access to file system operations through a common information model, which obviates the need for antivirus software vendors to create kernel mode filters. When file system operations are available to antivirus software applications, the present invention may cause each antivirus software application installed on a computing device to perform a scan to determine if the data is malware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07765400&OS=07765400&RS=07765400
owner: Microsoft Corporation
number: 07765400
owner_city: Redmond
owner_country: US
publication_date: 20041108
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to computing devices and, more particularly, to protection of computing devices against malware.","As more and more computers and other computing devices are interconnected through various networks, such as the Internet, computer security has become increasingly more important, particularly from invasions or attacks delivered over a network or over an information stream. As those skilled in the art will recognize, these attacks come in many different forms, including, but certainly not limited to, computer viruses, computer worms, system component replacements, denial of service attacks, even misuse\/abuse of legitimate computer system features, all of which exploit one or more computer system vulnerabilities for illegitimate purposes. While those skilled in the art will realize that the various computer attacks are technically distinct from one another, for purposes of the present invention and for simplicity in description, all malicious computer programs that spread on computer networks, such as the Internet, will be generally referred to hereinafter as computer malware or, more simply, malware.","When a computer system is attacked or \u201cinfected\u201d by computer malware, the adverse results are varied, including disabling system devices; erasing or corrupting firmware, applications, or data files; transmitting potentially sensitive data to another location on the network; shutting down the computer system; or causing the computer system to crash. Yet another pernicious aspect of many, though not all, computer malware is that an infected computer system is used to infect other systems.","A traditional defense against computer malware and, particularly, against computer viruses and worms, is commercially available antivirus software applications. Generally described, an antivirus software application scans data, looking for identifiable patterns associated with computer malware. Upon detecting a pattern associated with computer malware, the antivirus software application may respond by quarantining the malware or deleting the malware. Unfortunately, antivirus software applications typically work best with known, identifiable computer malware. Frequently, this is done by matching patterns within data to what is referred to as a \u201csignature\u201d of the malware.","Typically, most operations performed by existing antivirus software applications occur when an operating system is in \u201cuser mode.\u201d As is known to those skilled in the art and others, computer programs such as antivirus software applications may execute in either \u201ckernel mode\u201d or \u201cuser mode.\u201d \u201cKernel mode\u201d refers to processing that occurs at the most privileged and protected level of the operating system. Kernel mode programs reside in protected memory at all times and provide basic operating system services. \u201cUser mode\u201d refers to processing that occurs at the application layer where access to kernel mode data is not available. Previously a vendor of an antivirus software application that needed to access information and features available from kernel mode needed to build a kernel mode filter that interfaced with an operating system. Unfortunately, each antivirus software vendor was required to develop a unique filter to access features available from kernel mode, such as the input\/output (hereinafter referred to as \u201cI\/O\u201d), scheduled to occur on a computing device. Moreover, if each antivirus software application has a corresponding kernel mode filter to perform essentially the same task, a computing device suffers the performance burden of having duplicative code executing in several disparate filters all loaded in the kernel. Still another disadvantage of existing technologies is that the user mode interface is inconsistent, non-uniform, and prone to errors. Accordingly, a need exists for a mechanism by which I\/O scheduled to occur on a computing device is available to antivirus software applications without requiring an antivirus software vendor to implement a kernel mode filter.","Numerous software vendors market antivirus software applications and maintain an ever-growing database of malware signatures. In fact, one of the most important assets of antivirus software vendors is the knowledge base of signatures collected from known malware. However, commercially available antivirus software applications are not always compatible with each other. For example, in some instances, when two different antivirus software applications are installed on a computing device, data conflicts are known to occur. As a result, users are unable to install multiple antivirus software applications on a computing device and receive the benefit of each application's knowledge base. Accordingly, a need exists for a mechanism to aggregate the knowledge base of a plurality of antivirus software applications installed on the same computing device.","The present invention addresses the above identified needs by providing a mechanism for aggregating the knowledge base of a plurality of antivirus software applications to determine if data associated with a computing device is malware. One aspect of the present invention is a method that permits antivirus software applications to access data associated with I\/O requests through a common information model. The common information model obviates the need for antivirus software vendors to create kernel mode filters by providing the features that are typically available from kernel mode filters. Then the common information model may cause the antivirus software applications to scan data associated with a computing device to determine if the data is malware. When malware is detected, any attempt to read, store, or execute the malware is prevented.","Another aspect of the present invention is a method that determines if a file associated with a computing device was previously identified as malware or previously established to be safe. This aspect of the present invention includes associating a variable with a file when one or more antivirus software applications scans the file. The variable indicates whether the file is malware and may be recalled at a later time. For example, the variable may be recalled when a user attempts to execute the file. If the variable indicates that the file is malware, any attempt to execute the file by the user fails. Conversely, if the variable indicates that the file is not malware, an attempt to execute the file will succeed without requiring antivirus software applications to perform duplicative scans of the file.","Another aspect of the present invention is a highly efficient method for allowing antivirus software applications to access file data. This aspect of the present invention includes creating a file mapping section object that will be used to perform a scan by one or more antivirus software applications. Then a user mode application that interfaces with antivirus applications is provided with data that may be used to access the file mapping section object. Finally, a view of the file that may be accessed by antivirus software applications is generated. This aspect of the present invention provides a basic set of file system operations to antivirus software applications that improves the speed in which scanning is performed.","In yet another embodiment of the present invention, a computing device is provided that aggregates the knowledge base of a plurality of antivirus software applications. The computing device includes a security service application, one or more antivirus software applications, and a generalized security filter that includes a scan cache and a data mapping module. The generalized security filter and the security service application collectively function to provide a common information model to the antivirus software applications. The common information model allows antivirus software applications to access I\/O requests scheduled to occur on the computing device. When an I\/O request is intercepted, the antivirus software applications may interact with the common information model to schedule a scan. When scans occur, the security service application is aware of the different antivirus software applications installed on the computing device and is able to prevent data conflicts.","In still another embodiment, a computer-readable medium is provided with contents, i.e., a program that causes a computing device to operate in accordance with the methods described herein.","In accordance with this invention, a system, method, and computer-readable medium that aggregate the knowledge base of a plurality of antivirus software applications is provided. User mode applications such as antivirus software applications are provided with access to file system operations such as I\/O requests through a common information model, which obviates the need for antivirus software vendors to create kernel mode filters. When an I\/O request is intercepted, the present invention may cause each antivirus software application installed on a computing device to perform a scan to determine if data associated with the request is malware. Although the present invention will be described in the context of antivirus software applications, those skilled in the relevant art and others will appreciate that the present invention is also applicable to other areas of software development. Accordingly, the described embodiments of the present invention should be construed as illustrative in nature and not as limiting.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 1","FIG. 1"],"b":["100","100"]},"The computing device  illustrated in  includes a hardware platform , an operating system , and an application platform . For ease of illustration and because they are not important to an understanding of the present invention,  does not show the components typically included in the hardware platform , such as a central processing unit, memory, hard drive, etc. Also, for similar reasons,  does not show any components of the operating system  or the application platform .","As shown in , the components of computing device  are layered with the hardware platform  on the bottom layer and the application platform  on the top layer. The layering of  illustrates that, preferably, the present invention is embodied in a hierarchical environment. Each layer included in the computing device  is dependent on systems in lower layers. More specifically, the application platform  runs on top of the operating system  and is not able to directly access components of the hardware platform . Instead, any access to the hardware platform  by the application platform  is managed by the operating system . As known to those skilled in the art and others, the operating system  provides an application programming interface (\u201cAPI\u201d) to the application platform  that defines the services available to the application platform .",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2"},"As known to those skilled in the art and others, I\/O requests made in a computing device are handled by a component of the operating system  () known as an I\/O system. In order to protect a computing device against malware, antivirus software applications are notified when I\/O requests are received. With reference now to , the known process of providing antivirus software applications with access to data associated with an I\/O request will be described. The computing device  illustrated in  includes an I\/O system , a local or remote I\/O device , a user application , antivirus filters -, and antivirus software applications\/drivers - residing in either user or kernel mode. When a request to perform I\/O is generated from a user application, such as the user application , the I\/O system  receives the request. As illustrated in , user applications operate in user mode and generate I\/O requests that are satisfied by the I\/O system  in kernel mode. Prior to a request being satisfied, the antivirus filters , , and  may be notified that an I\/O request is scheduled to be satisfied. In response, the antivirus filters , , and , may each notify their respective antivirus software applications\/drivers , , and  that data associated with the I\/O request should be scanned. If data associated with the I\/O request is malware, the antivirus software application\/driver may be configured to prevent the I\/O request from being satisfied. Conversely, if an I\/O request does not involve malware, the I\/O system  causes the I\/O request to be satisfied. For example, the I\/O system  may cause data to be written to I\/O device  that, in some systems, is a local hardware device such as a hard drive, floppy disk, flash memory, tape drive, compact disk (\u201cCD\u201d), etc. Alternatively, the I\/O device  may be a remote hardware device connected to the computing device  through a network connection.","Unfortunately, the prior art process illustrated in  of providing antivirus software applications access to data associated with an I\/O request has the disadvantage of requiring antivirus software vendors to each develop a kernel mode filter. As illustrated in , antivirus filters , , and  may only be used in conjunction with specific antivirus software applications. Moreover, since each antivirus software application maintains a kernel mode filter to perform essentially the same task, the computer system suffers the performance burden of having duplicative code simultaneously loaded in memory.","Unfortunately, the prior art process illustrated in  of providing antivirus software applications access to data associated with an I\/O request also has the disadvantage of potentially hindering the removal of malware from a computing device. When two or more antivirus software applications are installed on the same computing devices, data conflicts are known to occur. For example, two antivirus software applications may determine that a file stored on a computing device is infected with malware. The first antivirus software application may attempt to \u201cdisinfect\u201d the file by deleting file data. However, the second antivirus software application will typically be notified when the first antivirus software application makes the attempt to delete the file data. In this instance, the second antivirus software application may be configured to prevent any access to the infected file. Also, the first antivirus software application may be configured to prevent other applications, such as the second antivirus software application, from accessing the infected file. Obviously, in this situation, malware cannot be deleted by either the first antivirus software application or the second antivirus software application.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIG. 3","FIG. 2","FIG. 3","FIG. 3","FIG. 3","FIG. 3"],"b":["300","300","300","302","304","306","308","310","312","314","316","318","320","314","316","318","320","314","316","308","310","312","302","308","310","312","300","300"]},"As mentioned above, some of the software implemented routines of the present invention are located in the generalized security filter . In general terms describing one embodiment of the present invention, the generalized security filter  intercepts I\/O requests made from user applications, such as user application . In response, the generalized security filter  performs routines designed to prevent the spread or execution of malware in the computing device . More specifically, the generalized security filter  communicates with the security service application  (described below) to cause the antivirus software applications to analyze a file associated with the request and determine whether the file contains malware. If malware is detected, the generalized security filter  is operative to communicate with the I\/O system  and prevents a request from being satisfied.","As illustrated in , the generalized security filter  includes a scan cache  that improves the speed in which the present invention analyzes I\/O requests intercepted from the I\/O system . For example, as known to those skilled in the art and others, user applications will frequently make successive I\/O requests directed to the same file. In this instance, the present invention may intercept a first I\/O request and cause the antivirus software applications , , and  to scan the file and validate that the file is not infected with malware. In instances when the file is not infected, successive I\/O requests do not trigger a scan of the file. Instead, the scan cache  tracks the status of files with regard to whether the files are infected with malware so that unnecessary scans are not performed. Files are categorized as being (1) known malware, (2) known safe, or (3) unknown. Since scanning a file is a resource-intensive process, preventing unnecessary scans improves the speed of the present invention. As will be described in further detail below, the scan cache  may be used in conjunction with other systems that track the state of files in addition to a system designed to prevent the spread or execution of malware. For example, some software applications allow users to \u201cback up\u201d or save data to a secondary hardware device. In this instance, the software application tracks the state of each file on a computing device with regard to whether the secondary hardware device has the most recent version of the file. The scan cache  may be used in conjunction with this type of system to track the state of files on a computing device.","The generalized security filter  includes a data mapping module  that improves the reliability and speed in which antivirus software applications , , and  are able to scan a file. Typically, when modern antivirus software applications intercept a file open operation, a second file handle is opened that is used to read file data. However, as known to those skilled in the art and others, a file may be \u201clocked\u201d to prevent multiple applications from simultaneously accessing the file. An antivirus software application may not be able to read the data in this instance when another application \u201clocked\u201d the file. Further, opening a new handle may prevent another application from opening the file, which has caused application failure in the prior art. However, the data mapping module  provides applications, such as antivirus software applications , , and , with access to file data without requiring the creation of a second file handle. Instead, the data mapping module  provides applications with access to a low-level object from which file data may be read. Access to the low-level object is available regardless of whether another application has \u201clocked\u201d the file. Also, creation of the second file handle requires substantial computational resources. Thus, allowing antivirus software applications to read file data using a low-level object improves the speed in which the antivirus software applications are able to perform scans for malware. As will be described in further detail below, the data mapping module  may be used in conjunction with other systems that read file data. For example, some software applications encrypt a file before the file is stored on a hardware device and decrypt the file when retrieval from the hardware device occurs. In this instance, the data mapping module  may be used to provide an efficient way for an encryption application to access data in the file.","As illustrated in , the computing device  includes a security service application  that, among other things, acts as an interface to antivirus software applications installed on the computing device . The security service application  allows antivirus software applications to register and create a scanning profile. The scanning profile identifies the I\/O requests that an antivirus application finds \u201cinteresting.\u201d For example, a scanning profile may indicate that an antivirus software application will perform a scan when an I\/O request is directed to a file that has an \u201cunknown\u201d state with regard to being infected with malware. Alternatively, a scanning profile may be defined so that an antivirus software application performs a scan when certain types of I\/O requests are generated. In any event, antivirus software applications register with the security service application  and create a profile that defines the circumstances in which a scan will be performed. The security service application  is responsible for scheduling scans between the different registered antivirus software applications.","Implementations of the present invention are not limited to the exemplary computing device  shown in . For example,  and the accompanying text describe antivirus software applications , , and  that execute in user mode. However, the software implemented routines of the present invention may be configured to communicate with antivirus software filters that execute in kernel mode. Also, the computing device  is shown as receiving I\/O requests from the user application . However, as known to those skilled in the art and others, I\/O requests may be received from other sources, such as protocols used for communication between remote computing devices. Moreover, the I\/O device  is illustrated as being a hardware device that is a component of the computing device . However, the I\/O device  may be a remote hardware device connected to the computing device  through a network connection. Alternatively, the I\/O request may not be directed to a hardware device. Instead, an I\/O request may be directed to an object that is capable of being accessed using a create file command, including, but not limited to, pipes, communication resources, disk devices, consoles, mail slots, etc. Thus, the components of the computing device  illustrated in  should be construed as exemplary and not limiting.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 4","FIGS. 1-3","FIG. 4"],"b":["400","400","400","400","400"]},"At decision block , the method  remains idle and waits for an I\/O request that is typically received by a kernel mode component of an operating system, such as the I\/O system  (). As will be appreciated by those skilled in the art, I\/O requests may be generated through a variety of different mechanisms. For example, a user of a word processing program may cause an \u201copen file\u201d command to be issued from a drop-down menu or other graphically based input system. To satisfy the \u201copen file\u201d command, the word processing program may issue an API call that requires obtaining file data from a memory device. By way of another example, a user of a Web browser program may issue a command to download a file from a remote computer. To satisfy the command, the Web browser program may issue an API call to store a data stream on a hardware device, such as the I\/O device  (). When an I\/O request is generated, the I\/O system  interacts with hardware devices to satisfy the request. However, the method  intercepts I\/O requests before they are satisfied by the I\/O system  to prevent the execution and\/or spread of malware.","At decision block , the method  determines whether the I\/O request received at block  is a command that causes a new file to be created. One type of I\/O request that may be intercepted at block  causes a new file to be created. This type of request cannot expose a computing device to malware. As described below at block , a command that causes a new file to be created is handled differently than other I\/O requests received by the method . A command that causes a new file to be created may be generated using any one of a number of different commands available from modem operating systems. For example, in the context of a Windows\u00ae operating system, a new file may be created using APIs specifically designed to create a new file, such as the \u201cCreateFile\u201d API. Alternatively, a new file may be created in certain circumstances using other APIs, such as the open, overwrite, and supersede APIs. If the request received at block  is a command that causes a new file to be created, the method  proceeds to block  described below. Alternatively, if the request is not a command that causes a new file to be created, the method  proceeds to block .","At decision block , the method  determines whether the I\/O request intercepted at block  has the potential to expose a computing device to malware. As known to those skilled in the art and others, certain I\/O requests may not have the potential to expose a computing device to malware. For example, if an I\/O request is an \u201copen file\u201d command and the specified file does not contain any data, satisfying the command cannot expose a computing device to malware. Similarly, the I\/O request received at block  may be a command to open or close a directory. In this instance, the I\/O request cannot expose a computing device to malware. It will be appreciated by those skilled in the art and others that other types of I\/O requests do not have the potential to expose a computing device to malware. Therefore, the examples described above should be construed as exemplary and not limiting. If the request received at block  does not have the potential to expose a computing device to malware, the method  proceeds to block  described below. Alternatively, if the request received at block  does have the potential to expose a computing device to malware, the method  proceeds to block .","At block , the method  queries a database, such as the scan cache , and identifies the state of the file that is the object of the I\/O request received at block . As described in further detail below, when one or more antivirus software applications scans a file for malware, a variable is associated with the file. The variable represents one of three possible states, including (1) known malware, (2) known good, or (3) unknown.","For illustrative purposes and by way of example only, the contents of a sample scan cache  is shown in . As illustrated, the scan cache  consists of three columns, each of which contains multiple entries. The columns are identified as FILEINDX , FIRST BIT , and SECOND BIT . The FILEINDX  field contains a value that may be used to uniquely identify a file. As known to those skilled in the art and others, memory devices are typically partitioned into logical units referred to as volumes. Each volume has a central location where information about files on the volume is stored. For example, the Windows\u00ae NT File System (\u201cNTFS\u201d) maintains a master file table (\u201cMFT\u201d) that contains a record for each file on a volume. When a file is created, a new record for the file is stored in the MFT and a predetermined amount of space is allocated to store file attributes. For example, each file is assigned a unique file index that represents the file's location in the MFT. As described in further detail below, when a file is scanned by one or more antivirus software applications in accordance with present invention, the index value associated with the file in the MFT is entered in the FILEINDX  field of the scan cache . The FIRST BIT , and SECOND BIT  fields each store a value that collectively identifies the state of the file. For example, both the FIRST BIT  and SECOND BIT  fields contain a value that is either a \u201c0\u201d or a \u201c1.\u201d In one embodiment of the present invention, if the FIRST BIT  field contains a \u201c1\u201d and the SECOND BIT  field also contains a \u201c0,\u201d then the state of the file is \u201cknown malware.\u201d Alternatively, if the FIRST BIT  field contains a \u201c0\u201d and the SECOND BIT  field contains a \u201c1,\u201d then the state of the file is \u201cknown good.\u201d Also, if the FIRST BIT  field contains a \u201c0\u201d and the SECOND BIT  field contains a \u201c0,\u201d then the state of the file is \u201cunknown.\u201d Although  illustrates a scan cache  that has specific attributes, those skilled in the art will appreciate that the scan cache  may operate with more or fewer than all of the listed attributes.","Conventional techniques for tracking the state of a file are error-prone and resource intensive when compared to the scan cache . For example, one known technique for tracking whether a file is infected with malware uses a hash table. When an I\/O request is intercepted, the hash table is searched using a string-based file name as the hash key. However, file names do not always uniquely identify a file. For example, a file may be associated with two or more file names when a user creates a \u201clink\u201d to reference the file. In this instance, a hash table may contain multiple entries for the same file. As a result, antivirus software applications may perform unnecessary scans when a file is referenced by two or more file names. As described above, the scan cache  uses a unique file index obtained from the MFT to identify a file that prevents duplicative scans from occurring. Also, computing a hash key or searching for a string-based file name is resource intensive when compared to querying bits from a bitmap. For example, hash tables typically consume enough memory that entries in a hash table are eventually removed to accommodate new files. However, entries in the scan cache  require a sufficiently small amount of memory that the entries will not be removed to accommodate new entries.","As mentioned above, the scan cache  may be used in conjunction with other systems to track the state of one or more files. By way of example only, the scan cache  may be implemented in conjunction with (1) \u201cbackup\u201d applications to track the state of files with regard to their storage on a secondary hardware device, (2) encryption\/decryption applications to track whether files are encrypted, (3) and content filtering applications to track whether files contain inappropriate content. As known to those skilled in the art and others, bits for storing additional data may be added to the scan cache  to accommodate the needs of these types of systems.","Returning to , at decision block  the method  determines if the state associated with a file is \u201cknown good\u201d or free from a malware infection. In an exemplary embodiment of the present invention, the determination regarding whether a file is \u201cknown good\u201d is made by analyzing data contained in a database, such as bit information contained in the scan cache . Since querying a database and analyzing information associated with a file index may be performed using techniques generally known in the art, description of the technique used by the present invention is not provided here. If a file is identified as \u201cknown good\u201d the method  proceeds to block  described below. Alternatively, if the file is associated with a different state than \u201cknown good\u201d the method  proceeds to block .","At decision block  the method  determines if the state associated with the file is \u201cknown malware.\u201d Similar to the instance where the file is identified as being \u201cknown good,\u201d the determination of whether a file is \u201cknown malware\u201d is made by analyzing data contained in a database, such as bit information contained in the scan cache . If the file state is identified as \u201cknown malware\u201d the method  proceeds to block  described below. Alternatively, if the file is associated with an unknown state the method  proceeds to block .","At block  the method  provides antivirus software applications executing in user mode with access to file data. If block  is reached, the state associated with the file is \u201cunknown\u201d and the method  will cause one or more antivirus software applications to scan the file that is the object of the I\/O request intercepted at block . The present invention provides antivirus software applications with an efficient way to access file data so that a scan for malware may be performed quickly. One embodiment of a method for providing antivirus software applications with access to file data is described below with reference to .","At block , the method  selects an antivirus software application that will perform a scan of the file that is the object of the I\/O request received at block . As described previously with reference to , aspects of the present invention allow antivirus software applications to register and create a scanning profile. The scanning profile defines I\/O requests that are \u201cinteresting\u201d to an antivirus software application. The method  checks the scanning profile of antivirus software applications installed on a computing device and sequentially selects the antivirus software applications that are \u201cinterested\u201d in the intercepted I\/O request.","At block , the method  causes the selected antivirus software application to scan data and determine if the file that is the object of the I\/O request received at block  is infected with malware. As described above, antivirus software applications typically match patterns of data to a malware \u201csignature\u201d when determining if an infection exists. However, increasingly, antivirus software applications are using proactive malware detection techniques. For example, some antivirus applications emulate program behavior by causing data to \u201cexecute\u201d inside a virtual operating environment. If the misuse\/abuse of resources in the virtual operating environment is detected, then an antivirus software application determines that a file is infected with malware. In any event, at block , the selected antivirus software application obtains file data and performs actions to determine if file data is infected with malware. As described in further detail below with reference to , file data may be obtained using a common information model that is available to registered antivirus software applications.","In addition to making a determination whether a malware infection exists, an antivirus software application may perform corrective action at block . As known to those skilled in the art and others, modern antivirus software applications may be able to delete data identified as malware or otherwise correct a malware infection. In the event that malware is detected at block , then the selected antivirus software application is allowed to take corrective action. Since only one antivirus software application may be selected at a time, any corrective action taken at block  is performed without the possibility of data conflicts. Stated differently, the method  schedules the corrective action taken by antivirus software application to occur sequentially, which means that data views are coherent with respect to other antivirus software applications.","At decision block , the method  determines if any additional antivirus software applications will be selected. As described previously, the method  may be used to aggregate the knowledge base of a plurality of antivirus software applications to detect the presence of malware. If additional antivirus software applications will not be selected, the method  proceeds to block  discussed below. Conversely, if additional antivirus software applications will be selected, the method  proceeds back to block  and blocks  through  repeat until all of the antivirus software applications \u201cinterested\u201d in the I\/O request intercepted at block  are able to perform a scan.","At block , the state of a file is stored in a database, such as the scan cache . As described above, in certain instances, the method  may cause antivirus software applications to scan file data and make a determination whether a file is infected with malware. In one exemplary embodiment of the present invention, if one or more antivirus software applications detects the presence of malware and is unable to correct the infection, the file is marked as \u201cknown malware\u201d in the scan cache . In this embodiment, if none of the antivirus software applications detects the presence of malware, the file is marked as \u201cknown good\u201d in the scan cache . It will be appreciated by those skilled in the art and others that there are other possible embodiments for making a determination that a file is infected with malware. For example, the method  may require that a majority of antivirus software applications installed on a computing device detect malware before a file is identified as \u201cknown malware\u201d in the scan cache . More generally, the method  may be implemented with a system that calculates a weighted value for the result set generated by the antivirus software applications. In this instance, if the weighted value is over a threshold amount, then the file is marked as \u201cknown malware\u201d in the scan cache . Since systems that calculate weighted values based on input received from an application are generally known in the art, further description of these systems is not provided here.","As described above at block , the I\/O request intercepted at block  may be a command that causes a new file to be created. In this instance, the command can be satisfied without exposing a computing device to malware. At block , the state of the file that is the subject of the command is identified as \u201cknown good\u201d in the scan cache . As described above at block , in one embodiment of the present invention, a unique file index value is obtained from the MFT and used to identify files in the scan cache . However, when a file is deleted from a computing device, the MFT may reassign the file index value associated with the deleted file to a new file. The present invention does not change the state of a file as recorded in the scan cache  when a file is deleted. Instead, when a command that causes a new file to be created is received, the method simply overwrites the state of the deleted file with the state of the file that is the object of the command.","As described above, the method  causes the state of a file to be stored in a database such as the scan cache . In some instances, additional administrative procedures may be performed at block  to enable the scan cache  to accommodate growth in the file system. For example, in one embodiment of the present invention, when an I\/O request is directed to a previously unidentified file that does not maintain an entry in the scan cache , a larger scan cache is created. The contents of the smaller scan cache  are copied to the larger scan cache along with the state of the previously unidentified file. An optimization of this embodiment causes the memory allocated to the scan cache  to grow by a predetermined percentage above the minimum required to accommodate the previously unidentified file for additional files that are yet to be the object of an I\/O request.","At decision block , the method  determines if the state associated with a file is \u201cknown malware.\u201d The method  reaches block  when a command that causes a new file to be created is intercepted or a file with a state that is \u201cunknown\u201d is scanned by one or more antivirus software applications. In either instance, the state associated with the file is stored in a database such as the scan cache . Thus, determining if a file is infected with malware at decision block  is made by recalling previously stored data. If the file state is identified as malware, the method  proceeds to block  described below. Alternatively, if the file is not identified as malware the method  proceeds to block .","At block , the method  returns program execution back to a component of the operating system such as the I\/O system  (). As described previously, the method  intercepts I\/O requests before they are satisfied to prevent the execution and\/or spread of malware. If block  is reached, the I\/O request intercepted at block  is either not capable of infecting a computing device with malware or involves data that was scanned and identified as not being malware by antivirus software applications installed on a computing device. In either instance, satisfying the I\/O request will not result in the execution and\/or spread of malware. Thus, after program execution is returned to the I\/O system , the I\/O request is satisfied in accordance with the prior art. Then, the method  proceeds to block , where it terminates.","At block , the method  returns program execution back to a component of the operating system such as the I\/O system . However, if block  is reached, the I\/O request intercepted at block  may result in the execution and\/or spread of malware. Thus, after program execution is returned to the I\/O system , the I\/O request fails and the computer user is informed of the malware infection. Then the method  proceeds to block , where it terminates.","Implementations of the present invention are not limited to the exemplary method  shown in . For example, the method  is illustrated as having a discrete beginning and end. However, in actual embodiments of the present invention, I\/O requests are intercepted in a continuous process. When sufficient information exists to believe that an I\/O request will result in the execution and\/or spread of malware, then the method  causes the I\/O request to fail. Also, the present invention is not limited to the examples provided above. For example, the method  was primarily described in the context of scanning file data. However, those skilled in the art will appreciate that the method  may be used to scan other units of data without departing from the scope of the present invention.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 6","FIG. 4","FIGS. 1-5","FIG. 6"],"b":["600","400","600","600"]},"At decision block , the access method  remains idle until a scan request is received. As described previously, the security service application  () acts as an interface to antivirus software applications installed on the computing device . An antivirus software application may create a scanning profile that defines the circumstances in which the antivirus software application will perform a scan. At block , the security service application  () receives a scan request from an antivirus software application. Since communicating a request between two user mode applications may be implemented using techniques generally known in the art, further description of these techniques is not provided here.","At block , a section object of the file that will be scanned by one or more antivirus software applications is created. As known to those skilled in the art and others, section objects allow kernel and user mode applications to share data. In one exemplary embodiment of the present invention, the security service application  makes a request to the generalized security filter  to create a section object of the file that will be scanned. As illustrated in , before the file mapping section object is created, the operating system  changes from user mode to kernel mode. More specifically, the operating system  changes from user mode to kernel mode after the security service application , which executes in user mode, makes the request to the generalized security filter  which executes in kernel mode. When the change to kernel mode is complete, the generalized security filter  responds to the request by identifying the file that will be scanned and invoking a function that causes the file mapping section object to be created.","At block , information necessary to access the file that will be scanned is made available to a user-mode application. More specifically, the file mapping section object created at block  is inserted by the generalized security filter  into the object table of the security service application . As known to those skilled in the art and others, modern operating systems typically execute programs inside a predetermined domain. For example, in some operating systems, a program is only able to access objects referenced in a data structure unique to the program known as an object table. By inserting the section object created at block  into the object table associated with the security service application , the section object created at block  is made available to the security service application . As illustrated in , after the file mapping section object is inserted into the object table of the security service application , the operating system  changes from kernel mode to user mode.","At decision block , the access method  remains idle and waits for an antivirus software application to request file data. As described previously, when an I\/O operation is intercepted, one or more antivirus software applications may interact with a common information model to schedule a scan. In order to complete the scan, an antivirus software application may need to perform basic file system operations. For example, typically, an antivirus software application will \u201cread\u201d file data and compare the data to known malware signatures. In accordance with the present invention, an antivirus software application is able to perform basic file system operations using a common information model available to applications registered with the security service application . In one embodiment of the present invention, the common information model is available to registered applications in the form of a set of APIs. In any event, at decision block , the access method  remains idle and waits for an antivirus software to request file data.","At decision block , the access method  determines if a view of the file that will be scanned needs to be mapped into the memory space of the security service application . To accomplish efficient use of the security service application's  virtual address space, especially as multiple scans of unique files may be occurring simultaneously, a \u201cview\u201d of a file may be mapped into the memory space of the application that allows an application to access portions of file data. Since all file data may not be loaded in the memory space of an application at one time, new views are mapped when data not available from the current view is requested. If the data requested at block  is not available from a view mapped in the memory space of the security service application , then the access  method determines that a new view needs to be mapped and proceeds to block . Conversely, if the data requested at block  is accessible from a view mapped into the memory space of the security service application , then the access method  proceeds to block  described below.","At block , a view of the section object created at block  is mapped, allowing a user-mode application, such as the security service application , to satisfy requests for file data. The security service application  obtains data provided by the generalized security filter  that identifies the file that will be scanned. If a view is already mapped in the memory space of the security service application  the access method  makes an API call to the operating system  that causes the current view to be removed. Then, the security service application  makes another API call to the operating system  that causes a new view to be mapped. In response, the operating system  maps a view for the file from which the requested data may be accessed. In the context of Windows\u00ae operating systems, files may be mapped in and out of an application's memory space using the \u201cMapViewOfFile( )\u201d and \u201cUnMapViewOfFile( )\u201d APIs. However, the example provided herein should be construed as exemplary and not limiting.","At block , the data requested at block  is communicated to the antivirus software application where the request originated. When the necessary view is mapped (at block ) into the memory space of the security service application , systems are able to transmit the data to the requesting antivirus software application using methods generally known in the art.","At decision block , the access method  determines if the antivirus software application that generated the scan request received at block  has completed accessing file data. As described previously, the security service application  serves as an interface by providing a basic set of file system operations to antivirus software applications installed on a computing device. When an antivirus software application finishes scanning a file, the application communicates to the security service application  that the scan is complete and the access method  proceeds to block , where it terminates. Conversely, if the antivirus software application has not finished scanning the file and continues accessing file data, then the access method  proceeds back to blocks  through  until the antivirus software application has finished scanning the file.","The access method  may be used in conjunction with other systems to provide a very fast way to perform basic file system operations. By way of example only, the access method  may be implemented in conjunction with (1) encryption\/decryption applications to read and write data to a file, and (2) content filtering applications to read file data and determine if the file data contains inappropriate material. However, since the access method  may be used by any type of application to perform basic file system operations, the examples provided herein should be construed as exemplary and not limiting.","While the preferred embodiment of the invention has been illustrated and described, it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing aspects and many of the attendant advantages of this invention will become more readily appreciated as the same become better understood by reference to the following detailed description, when taken in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 6","FIG. 4"]}]},"DETDESC":[{},{}]}
