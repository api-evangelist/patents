---
title: Mechanism for facilitating customization of multipurpose interconnect agents at computing devices
abstract: A mechanism is described for facilitating customization of multipurpose interconnect agents at computing devices according to one embodiment of the invention. A method of embodiments of the invention includes enhancing a multipurpose interconnect agent by associating a customization block to the multipurpose interconnect agent at a computing system. Enhancing may include customization of one or more functionalities of the multipurpose interconnect agent. The method may further include customizing, via the customization block, the one or more functionalities of the enhanced multipurpose interconnect agent, wherein customizing includes enabling integration of two or more processor interconnects carrying data packets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09361257&OS=09361257&RS=09361257
owner: Intel Corporation
number: 09361257
owner_city: Santa Clara
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This patent application is a U.S. National Phase Application under 35 U.S.C. \u00a7371 of International Application No. PCT\/US2011\/054424, filed Sep. 30, 2011, entitled MECHANISM FOR FACILITATING CUSTOMIZATION OF MULTIPURPOSE INTERCONNECT AGENTS AT COMPUTING DEVICES.","The field relates generally to computing devices and, more particularly, to employing a mechanism for facilitating customization of multipurpose interconnect agents at computing devices.","A multipurpose interconnect agent refers to an entity that has functions of a memory agent and an interconnect agent that can help manage interactions to compute subsystems and across combination of such memory and interconnect subsystems. Current interconnection of computing processors and their relevant components, protocols, etc., is managed through software applications or other specialized ASICs. A multipurpose interconnect agent can interact with and manage memory and multiple different interconnects that can be crucial for large system scalability and performance as it helps achieve better resource-sharing, communication efficiency, high bandwidth, low latency, etc., whilst being fully customizable. Today's ASIC designs or software approaches cannot always achieve the full potential of such configurations due to certain limitations, such as due to lack of customization options (e.g., different protocol standards, interconnect network traffic management, performance optimization, etc.) that cannot be dealt with easily on an ASIC design, whilst software would typically lack the performance of a hardware design.","Embodiments of the invention provide a mechanism for facilitating customization of multipurpose interconnect agents at computing devices according to one embodiment of the invention. A method of embodiments of the invention includes enhancing a multipurpose interconnect agent by associating a customization block to the multipurpose interconnect agent at a computing system. Enhancing may include customization of one or more functionalities of the multipurpose interconnect agent. The method may further include customizing, via the customization block, the one or more functionalities of the enhanced multipurpose interconnect agent, wherein customizing includes enabling integration of two or more processor interconnects carrying data packets.","In one embodiment, embodiments of the present invention provide improves network and interconnect manageability and controllability, protect customers' new and past investments, and add innovative and novel specific solution for customers interconnect network to improve scalability and flexibility, etc.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","108","100"]},"In one embodiment, the customization mechanism  facilitates customization of various components, features, functionalities, etc., of interconnect agents, such as multipurpose interconnect agents (e.g., Home Agent\u00ae by Intel\u00ae Corporation), to offer users additional advantages of employing and using such multipurpose interconnect agents. For example, a user may customize certain components or functionalities of a multipurpose interconnect agent by employing it as an intellectual protocol (\u201cIP\u201d) cluster or block (e.g., a logic block that can carry all or a subset of multipurpose interconnect agent functionalities, etc.) and that may consist of standardized Application Programming Interfaces (referred to as \u201cAPI\u201d or simply \u201cinterface\u201d) and interface signals for better interconnection and use of the IP block's various components. Implementation of this IP cluster or block may allow interfacing to a plurality of interconnects and protocols (e.g., QPI, Peripheral Component Interconnect (\u201cPCI\u201d), PCI-Express (\u201cPCIe\u201d), PCI-Extended (\u201cPCI-X\u201d), Intel QuickPath Interconnect (referred to as \u201cQPI\u201d or \u201cQuickPath\u201d), etc.) resulting in higher processor productivity and increased overall efficiency of the multipurpose interconnect agent and therefore the computing system . Further, an IP cluster or block may be programmable through the aforementioned APIs to allow any components it integrates to program it for specific functions of interest or allow users to directly program its features and functions if, for example, a manufacturer or integrator chooses to expose the IP block API directly to a user (e.g., programmer, software developer, system administrator, etc.).","In one embodiment, the customization mechanism  may be provided as a customizable IP block associated with or within an existing multipurpose interconnect agent at the computing system. Customization mechanism  can help resolve key design hurdles an original equipment manufacturer (\u201cOEM\u201d) or an original design manufacture (\u201cODM\u201d) may face in custom designs for development of specialized node controllers (\u201cNCs\u201d), input\/output (\u201cI\/O\u201d) controllers, and other customer solutions (e.g., accelerators, special external memory controllers, etc.). This technique allows the user to use the various components of the customization mechanism  in order to aid in designing of NCs as well as for various forms of fabric, accelerator, and other implementations (such as those that can take advantage of QPI to provide the OEM\/ODM\/customer some specific functions and differentiations in certain areas. Further, the customization mechanism  allows for new functionalities to be harnessed through the use of, for example, QPI, etc., by allowing it to act as a cross-interconnect and cross-fabric agent to provide a secured, fast exchange function between two or more interconnect protocols, such as QPI to and from PCIe and between any future interconnects and multiprotocol link interfaces and, for example, PCIe and vice versa, etc. In one embodiment, the customization mechanism  serves as a scalable interconnect architecture across multiple multipurpose interconnect agent components, including providing the ability to connect to several different fabrics and not just be limited to Central Processing Unit (\u201cCPU\u201d)-to-CPU.","The customization mechanism  can help enable OEMs\/ODMs to architect and design their NCs and other aforementioned components to be able to offer, for example, associated directory features, fast memory, data transfers, Reliability Availability Serviceability (\u201cRAS\u201d), etc. This way, not only customer investments are protected, but also having the ability to customize and use new features on an multipurpose interconnect agent on the customer side can significantly reduce the typical development and manufacturing time of multipurpose interconnect agents. For example, the customization mechanism  can extend the current reach and functionalities of the existing multipurpose interconnect agents and can be used to generate secured domains and priority domains in cluster or cloud configurations. In this case, for example, using the customization mechanism , various packets, at the underlying multipurpose interconnect agent, can be processed in accordance with the specified classifications and can then be assigned to specific routes\/domains to facilitate generation of secured routes\/domains and\/or prioritized routes\/domains as well as prevention of viral packet propagation. This technique is used to maintain compatibility with different protocol standards with repackaging and\/or rearrangement. Further, it can be used to detect whether the transmission (of data, packets, communication, etc.) can be fast forwarded and\/or sped-up when no complex re-packaging or re-arrangement is needed for the transmission to occur from one cluster to another cluster via an interconnect work and this customization mechanism .","The computing device  may employ an multipurpose interconnect agent, as aforementioned, such as Intel's Home Agent, and further include an operating system  serving as an interface between any hardware or physical resources of the computer device  and a user. Computing device  further includes one or more processors , memory devices , network devices, drivers, or the like, as well as input\/output sources, such as touchscreens, touch panels, touch pads, virtual or regular keyboards, virtual or regular mice, etc. It is to be noted that terms like \u201cmachine\u201d, \u201cdevice\u201d, \u201ccomputing device\u201d, \u201ccomputer\u201d, \u201ccomputing system\u201d, and the like, are used interchangeably and synonymously throughout this document.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 3"],"b":["108","202","222","202","202"]},"In one embodiment, the inter-exchange logic  facilitates integration of interconnects and support of different protocols. For example, the inter-exchange logic  facilitates QPI to PCIe and PCIe to QPI and other aforementioned combinations. Logic  provides the ability to integrate and support multiple interconnects and cross-voltage\/frequency boundary transactions which lends significant multipurpose interconnect agent implementation flexibility. This functionality can be particularly important to large-scale computing systems and cloud computing. In one embodiment, this interconnect interface  having the inter-exchange logic  along with other components - can be added to an existing multipurpose interconnect agent as the customization mechanism  to enhance the multipurpose interconnect agent with customizing features of the customization mechanism . Further, reception and processing of coherent memory read\/write, non-snoop read\/write can be supported for QPI to\/from PCIe traffic, etc., along with access and control of memory, RSL blocks, registers, standard buffers, and data path are provided.","In one embodiment, bypass logic  is provided to accelerate the transmission by processing of certain categories of packages through a fast path by bypassing complex conflict detection and resolution logic, such as a non-coherent data package. The bypass logic  can also be used to quickly check package identification (\u201cID\u201d) and security classification (as necessitated), process and re-format the data (e.g., as necessitated to provide multi-protocol support), check the routing table and fast forward to the egress buffer logic to schedule a delivery to the assigned destinations. This functionality provided by the bypass logic  can be used to offer value in additional areas, such as relating to processing and QoS for telecommunication or communication and storage equipment, security appliances (or securing server cluster communications across large cluster installations), etc.","The customization mechanism  further provides snoop directory management  to interface to the snoop directory structure of the multipurpose interconnect agent and manage the snoop directory; for example, allowing the control and conflict logic  to notify the directory of remote sockets about the status of cache lines in other computing devices, such as host computing device  of . The customization mechanism  further includes a memory access transaction management  (\u201ctransaction management\u201d) to check memory addresses and decide which memory channel is going to be the recipient of a pending transaction. The transaction management  further provides reads\/writes, partial reads\/writes, different priority reads\/writes, non-snoop reads\/writes, and memory channel load balance functions, etc., and may directly manage the high-level transaction control and data flow to and from a memory controller.","The customization mechanism  includes an integration and compatibility logic  (\u201creuse logic\u201d) to provide, if necessary, reuse of, compatibility with, and\/or integration of some of the existing and\/or default functionalities and components of a conventional multipurpose interconnect agent that is being enhanced and customized using the customization mechanism . This feature further simplifies and the use and employment of customization mechanism  without having to incur additional design and manufacturing costs and complications, or the like.","In one embodiment, the customization mechanism  includes a control and conflict logic  that may be used to facilitate and enable the use of other components -, - of the customization mechanism  as well as provides its own unique functions. For example, the control and conflict logic  may facilitate and enable the interconnect interface  and its inter-exchange logic  to process packages being transmitted between various interconnects, such as QPI, PCIe, etc., as aforementioned. Moreover, the control and conflict logic  may hold a large data buffer that is to be used to temporarily store all packages in transit states and can be used to decode (e.g., using an embedded coder\/decoder) the package information, check destination address, perform memory mapping and channel arrangement, detect and resolve possible coherent conflicts, and the like. Additional features and\/or components of the customization mechanism  may further include (1) a cross voltage and frequency domain control, (2) control and interfacing to native Double Data Rate (\u201cDDR\u201d) and non-volatile memory (\u201cNVM\u201d), (3) creation and management of hierarchical memory structures within a single computing device, such as computing device  of , including, for example, two levels of memory (e.g., with one level being faster in memory access times than the other level), and handling of transaction scheduling and control of the hierarchical memory model, (4) RAS features and error report logic, such as mirroring, lockstep, retry, MCA report, CMCI triggering, etc., and (5) management of a coherent directory of a local region or global coherent transaction performance optimization.","It is contemplated that any number and type of components may be added to and removed from the customization mechanism  to facilitate the workings and operability of the customization mechanism  for multipurpose interconnect agents at computing devices. For brevity, clarity, ease of understanding and to focus on the customization mechanism , many of the default or known components of various devices, such as computing devices, cameras, etc., are not shown or discussed here.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIG. 2","FIG. 2"],"b":["302","306","308","310","306","310","312","316","322","326","342","344","332","340","352","354","356","360","358","362","376","364","366","368","370","374","372","322","326","302","304"]},"As discussed with reference to , the snoop directory management of the customization mechanism may provide an interface and mechanism to snoop the directory . Similarly other components of the customization mechanism works to provide the enhanced multipurpose interconnect agent  that is customized (or customizable) to perform a number of additional and novel features as referenced in . As further discussed with reference to , the control and conflict logic  may play an umbrella role to control, enable, and facilitate various functionalities of the customization mechanism, resulting in the enhanced multipurpose interconnect agent .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 4A","FIG. 1"],"b":["400","400","108"]},"Method  begins with employing of a customization mechanism at a computing system, while maintaining compatibility with a local multipurpose interconnect agent and its standard components at block . At block , in one embodiment, the employed and available customization mechanism is used to facilitate customization of various functionalities of the multipurpose interconnect agent, such as enabling interconnect exchange between receiving and transmitting of packages between multiple interconnects that are independent of each other. At block , for example, snoop directory management is performed. At block , for example, transmission and reception of the packages is accelerated by bypassing various selected and\/or detected complexities associated with the transmission and\/or reception processes.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 4B","FIG. 1"],"b":["420","420","108"]},"Method  begins with block  a control command indicating a memory transaction request is received at the customization mechanism. At block , the control command is stored at an ingress buffer and is quickly processed by forwarding the control command to either the control and conflict logic or the bypass logic of the customization mechanism. At block , data is received through an interconnect\/fabric interface of the customization mechanism and is then processed based on the received control command. If the command is not received, the data based on a transaction ID or other index method is stored in a data buffer for further processing. At block , a request is written based on the data processed using the control and conflict logic which schedules its corresponding memory transactions based on, for example, the transaction type, priority, and other relevant transaction information. When, for example, the memory channel buffer is available, this write may be quickly processed and the relevant data sent to the designated memory channel and its controller for writing data to memory (e.g., Dynamic Random Access Memory (\u201cDRAM\u201d), non-volatile memory, etc.) or another fabric.","At block , a write completion is scheduled and sent to an egress buffer and then returned to an original write transaction initiator. At block , a read transaction that schedules a memory read to, for example, allocate resources to a data buffer or an egress buffer is processed by the control and conflict logic of the customization mechanism. The read may be scheduled and implemented based on various architecture requirements, such as conflict detection, conflict resolution, memory channel arrangement, read request sending to the memory channel, and subsequent receipt of the return data with error checking from memory. Further, the read is scheduled to allocate the resource to the data buffer or the egress buffer. At block , the return data is dispatched to the corresponding request.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 4C","FIG. 1"],"b":["440","440"]},"Method  begins with receiving, at the customization mechanism, a request for a linked node at block . At block , a determination is made as to whether a virus is detected in the request. If a virus is detected, at block , this request and other future request or transactions from this particular node are blocked to avoid any potential virus-related problems. The infected node may be responded with an LT lock flow, 1's may be returned to read requests, while write requests are dropped with completion. Further, for diagnosis purposes, the customization mechanism may selectively record the type of requests, frequency, and other relevant information in one or more security registers. At block , if the virus is not detected, the process with another determination as to whether a secured tag or ID or node ID match with a specific packet key. At block , if the tag or ID does not match the key and\/or is not verified, then the request transaction goes into an LT lock flow, and the read returns 1's as an error (e.g., PCIe error, etc.), while the write is dropped from the flow and a completion is sent back to the requester. At block , if the tag or ID does match the key, and the transaction meets other additional access criteria as specified in configuration registers, it can access the secured domain.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 4D","FIG. 1"],"b":["460","460"]},"Method  begins with block  with the customization mechanism receiving a data transaction request from a linked node. At block , the control and conflict logic of the customization mechanism recommends and performs format changes to the transaction data or data package. Further, the decoder at the control and conflict logic can find if the data corresponds to a non-snoop transaction and whether the destination node link is free or busy with other transactions. At block , a routine table is checked and a route to destination is selected or decided. At block , the request is forwarded on to a scheduler, and the building of a new data package is requested, if necessary, and sent to the egress buffer. At block , egress buffer resource is allocated by the scheduler and new format of the data package is built at the control and conflict logic. At block , the new or newly-formatted data package is transferred to the egress buffer, while the data transaction is sent out based on protocol requirements at block .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 5","FIG. 1","FIG. 1"],"b":["500","100","501","502","503","504","506","507","508"]},"The one or more processors  execute instructions in order to perform whatever software routines the computing system implements. The instructions frequently involve some sort of operation performed upon data. Both data and instructions are stored in system memory  and cache . Cache  is typically designed to have shorter latency times than system memory . For example, cache  might be integrated onto the same silicon chip(s) as the processor(s) and\/or constructed with faster static RAM (SRAM) cells whilst system memory  might be constructed with slower dynamic RAM (DRAM) cells. By tending to store more frequently used instructions and data in the cache  as opposed to the system memory , the overall performance efficiency of the computing system improves.","System memory  is deliberately made available to other components within the computing system. For example, the data received from various interfaces to the computing system (e.g., keyboard and mouse, printer port, Local Area Network (LAN) port, modem port, etc.) or retrieved from an internal storage element of the computer system (e.g., hard disk drive) are often temporarily queued into system memory  prior to their being operated upon by one or more of the processor(s)  in the implementation of a software program. Similarly, data that a software program determines should be sent from the computing system to an outside entity through one of the computing system interfaces, or stored into an internal storage element, is often temporarily queued in system memory  prior to its being transmitted or stored.","The chipset  (e.g., ICH) may be responsible for ensuring that such data is properly passed between the system memory  and its appropriate corresponding computing system interface (and internal storage device if the computing system is so designed). The chipset  (e.g., MCH) is responsible for managing the various contending requests for system memory  accesses amongst the processor(s) , interfaces and internal storage elements that may proximately arise in time with respect to one another.","One or more I\/O devices  are also implemented in a typical computing system. I\/O devices generally are responsible for transferring data to and\/or from the computing system (e.g., a networking adapter); or, for large scale non-volatile storage within the computing system (e.g., hard disk drive). The ICH of the chipset  has bi-directional point-to-point links between itself and the observed I\/O devices .","Portions of various embodiments of the present invention may be provided as a computer program product, which may include a computer-readable medium having stored thereon computer program instructions, which may be used to program a computer (or other electronic devices) to perform a process according to the embodiments of the present invention. The machine-readable medium may include, but is not limited to, optical disks, compact disk read-only memory (CD-ROM), and magneto-optical disks, ROM, RAM, erasable programmable read-only memory (EPROM), electrically EPROM (EEPROM), magnet or optical cards, flash memory, or other type of media\/machine-readable medium suitable for storing electronic instructions, such as solid state storage devices, fast and reliable DRAM sub-systems, etc.","The techniques shown in the figures can be implemented using code and data stored and executed on one or more electronic devices (e.g., an end station, a network element). Such electronic devices store and communicate (internally and\/or with other electronic devices over a network) code and data using computer-readable media, such as non-transitory computer-readable storage media (e.g., magnetic disks; optical disks; random access memory; read only memory; flash memory devices; phase-change memory) and transitory computer-readable transmission media (e.g., electrical, optical, acoustical or other form of propagated signals\u2014such as carrier waves, infrared signals, digital signals). In addition, such electronic devices typically include a set of one or more processors coupled to one or more other components, such as one or more storage devices (non-transitory machine-readable storage media), user input\/output devices (e.g., a keyboard, a touchscreen, and\/or a display), and network connections. The coupling of the set of processors and other components is typically through one or more busses and bridges (also termed as bus controllers). Thus, the storage device of a given electronic device typically stores code and\/or data for execution on the set of one or more processors of that electronic device. Of course, one or more parts of an embodiment of the invention may be implemented using different combinations of software, firmware, and\/or hardware.","In the foregoing specification, the invention has been described with reference to specific exemplary embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The Specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the present invention are illustrated by way of example and not by way of limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4D"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
