---
title: Motion control systems and methods
abstract: A motion event system for transmitting events between a motion program and a motion device. The motion event system comprises a driver component, a motion component, and a motion event component. The driver component is associated with the motion device. The motion component allows communication between the motion program and the at least one driver component. The motion event component configures at least one of the driver component and the motion component to recognize events to be transmitted between the motion program and the motion device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07137107&OS=07137107&RS=07137107
owner: Roy-G-Biv Corporation
number: 07137107
owner_city: Bingen
owner_country: US
publication_date: 20040429
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","I. Motion Event Systems","1. CSystemMonitorObj::Subscribe Function","2. CSystemMonitorObj:: Unsubscribe Function","3. CSystemMonitorObj::Initialize Function","4. CSystemMonitorObj::CleanUp Function","1. MOTION_CNC_EVENT_SUBSCRIBE API","2. MOTION_CNC_EVENT_UNSUBSCRIBE API","3. MOTION_CNC_EVENT_PAUSE API","II. Variable Support System","1. MotionaVariableObj Object","2. MotionaVariableMappingObj Object","3. Driver Component Implementation"],"p":["This application claims priority of U.S. Provisional Patent Application Ser. Nos. 60\/466,588 filed Apr. 29, 2003, and 60\/467,667 filed May 2, 2003, the contents of which are incorporated herein by reference.","The present invention relates to motion control systems and, in particular, to systems that allow the automation of motion tasks associated with Industrial and Consumer Automation processes.","A motion control application is software that defines a sequence of motion steps required to perform a motion task. A motion controller is hardware and software that, in combination with a motion control device, is capable of converting motion commands into physical movement of an object. The term motion controller will be used herein to include the motion control device.","Typically, the motion commands executed by a motion controller are proprietary. The combination of a motion control software application and one or more motion controllers will be referred to herein as a motion control system.","In many cases, motion control software applications are specifically written for one or more proprietary motion controller. Therefore, if one or more new motion controllers are to be used in place of one or more original motion controllers, a motion control software application written for the original motion controller(s) must be rewritten to accommodate the new motion controller(s). A motion control software application written for one or more proprietary controllers is referred to as hardware dependent.","In general, hardware dependence is undesirable because the owner of the motion control system must either commit to the vendors of the proprietary controllers or discard the motion control application when a new motion controller is used.","The need exists for systems and methods that may be used to facilitate the writing of motion control applications that are hardware independent.","The present invention may be embodied as a motion event system for transmitting events between a motion program and a motion device. The motion event system comprises a driver component, a motion component, and a motion event component. The driver component is associated with the motion device. The motion component allows communication between the motion program and the at least one driver component. The motion event component configures at least one of the driver component and the motion component to recognize events to be transmitted between the motion program and the motion device.","The present invention relates to systems for handling events generated in the context of a motion system. Such events will be referred to as motion events. In addition, a common source of events in a motion system is a change in data associated with a variable. The present invention also relates to a variable support system for accessing and mapping proprietary variables associated with motion controllers.","The following discussion will thus describe both a motion event system for handling motion events and a variable support system for accessing data values associated with motion variables. While a significant benefit can be obtained by combining the motion event system and variable support system as described herein, each of these systems can operate independently, and the Applicant reserves the right to pursue separate claims directed towards each of the motion event system and the variable support system.","Referring initially to  of the drawing, depicted at  therein is an example motion event system  comprising a motion event component . The example motion event component  routes events among the other components (custom driver, standard driver, or stream) of the system  as will be described in further detail below.","As shown in , the motion event system  further comprises an automation layer  and a C++ framework layer . The automation layer  allows access to the motion component  by a client (not shown) written in any automation aware language such as Visual Basic, VBA, VBScript, Java, and NET languages. The client may be a component, application, or other software using the motion services provided by the motion event system . The C++ framework layer  implements a very thin wrapper designed to facilitate access to COM interfaces.","The example motion event system  further comprises a motion component  and a driver component . The example motion component  implements a set of OLE interfaces designed for use in the context of motion control systems. The example driver component  implements the driver logic for a given motion platform and may be either custom or standard.","Optionally, the system  may further comprise a driver proxy component . The driver proxy component  acts as a proxy between a first set of driver original interface requirements and a second set of slim driver interfaces. When the driver component  is standard, the standard driver component  performs the functions both of the driver proxy component  and of a custom driver component .","Referring now to  of the drawing, depicted therein is a scenario map depicting the operation of the system  when making a normal method call. When making a normal call to the motion component , the thread of control is routed from the caller to the custom driver component  implementing the service requested and the following steps are performed:\n\n","Referring now to  of the drawing, the process of driver event subscription will now be described. To receive events, a client must first \u2018subscribe\u2019 to a set of one or more events. Subscribing is the process of notifying the motion event system  of the events in which the client has interest. Once subscribed, the event conditions defined by the subscription dictate what triggers the event that then notifies the client of the event.  illustrates how event subscription works.","As shown in , the following steps occur when subscribing to an event:\n\n","Optionally, the motion component  may implement the event subscription\/monitoring functionality, which adds a higher degree of reusability because each of the driver components  would not be required to implement any subscription\/monitoring logic. Also, because the automation layer  and C++ framework layer  are provided merely as programming conveniences, the client setting up the subscription may optionally communicate directly to the motion component , bypassing both the automation layer  and C++ framework layer .","Referring now to , the process of driver level event triggering will now be described. An event is generated by either a driver component  or stream, which will also be referred to as the event source. When an event occurs, the event source routes the event to subscribed clients the motion event component . As shown in , the following steps are performed when an event is generated:\n\n","As an alternate to the design above, the functionality of the motion event component  may be provided by the motion component , in which case a separate motion event component  would not be used. However, using a separate motion event component  allows a decoupling of the event source and the event receiver, which may be beneficial when the components of the system  are distributed across a network. For example with the motion event component , the motion component  may actually be located on a different computer connected via a network (Ethernet, wireless, or other network system).","Optionally a motion stream (not shown) residing below the driver component  may fire events. For example, data transmission events may be fired by the stream when data is received from or sent to the stream target system. In this case, the event source would be the motion stream instead of the motion driver . In addition, as generally discussed above, the motion component  may actually implement the event subscription\/monitoring\/trigger functionality, which would add a higher degree of reusability because each driver would not be required to implement any subscription\/monitoring logic. Further, because the automation layer  and C++ framework layer  are provided merely as programming conveniences, the motion event component  may communicate directly with the client application thus bypassing the automation layer  and C++ framework layer .","Referring now to  of the drawing, the optional process of event subscription at the motion component level will now be described. To maximize code re-use across driver implementations, event subscription and monitoring may be implemented at the motion component  level instead of at the driver component level.  illustrates the steps that occur when event subscription is handled at the motion component level:\n\n","Optionally, because the automation layer  and C++ framework layer  are provided merely as programming conveniences, the client setting up the subscription may also talk directly to the motion component , thus bypassing both the automation layer  and C++ framework layer .","Referring now to , the process of event monitoring at the component level will now be described. If motion component event monitoring is used and an event occurs, the motion component  becomes the event source. Upon detecting an event, the motion component  routes the event to subscribed clients through the motion event component . The steps that occur when the motion component  routes events are as follows:\n\n","Optionally, because the automation layer  and C++ framework layer  are used as programming conveniences, the motion event component  may bypass the automation layer  and C++ framework layer  and communicate directly with the client application.","Any number of conditions may trigger an event. The following section lists several example event triggers.","Low Level Data Transmission is one example of an event that may be monitored using the motion event monitoring system . Very low level events may be used in the motion stream to notify other components when raw data is sent or received to and from the target motion device or machine.","Another example of an event that may be monitored using the event monitoring system  is a Motion Action. Certain motion actions may trigger events. For example the completion of a move, hitting a limit switch, or accelerating up to a given velocity may all trigger events that notify the client of the event condition.","The event monitoring system  may be used to monitor events triggered by changing data values. More specifically, a controller may define variables that are associated with or contain data values; as the data values associated with these variables change, one or more events may be triggered. For example, the motion driver  may poll for variables having data values and, upon seeing a change in value or state of a data value, the driver  may fire an event to other components notifying them of the change. This model implemented by the motion event monitoring system  follows a publish\/subscribe model where the driver  \u201cpublishes\u201d data changes to \u201csubscribing\u201d components such as the automation layer  or any client software using the system .","A. Example C++ Functions","The following discussion describes C++ functions that may be used by the motion event system  to support event notifications on data and API changes. The example system  uses an object, referred to as CSystemMonitorObj, to implement an internal thread to monitor variables and other API's. Using this example object, once each API changes, registered call back functions are called, thereby notifying the target of the data changes.","The CSystemMonitorObj object uses the following functions to support event notifications: Subscribe, Unsubscribe, Initialize, and CleanUp. The Subscribe function adds a new function call-back to be called on data changes. The Unsubscribe function removes a function from the call-back set. The Initialize function creates a connection to the motion event component . The CleanUp function shuts-down any connections to the motion event component . Each of these functions will be discussed separately below.","The \u201cSubscribe\u201d function is used to add a new variable or API to the subscription list and employs the following syntax, parameters, and return value:",{"@attributes":{"id":"p-0049","num":"0068"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","HRESULT Subscribe(","DWORD\u2003dwType,"]},{"entry":[{},{},"DWORD\u2003dwTypeInfo,"]},{"entry":[{},{},"LPFNMotionEVENT pfnCallBack,"]},{"entry":[{},{},"LPVOID pvParam,"]},{"entry":[{},{},"LPDWORD pdwCookie );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters","DWORD dwType - this parameter specifies the type of data"]},{"entry":[{},"where the following types are currently supported:"]},{"entry":[{},"MOTION_CNC_MONITOR_TYPE_VARIABLE -"]},{"entry":[{},"variable monitor type, were the dwTypeInfo points to a"]},{"entry":[{},"string containing the variable name. Note when monitoring"]},{"entry":[{},"this type, only mapped Motion variables are supported."]},{"entry":[{},"DWORD dwTypeInfo - contains extra information"]},{"entry":[{},"describing the type of data to be monitored."]},{"entry":[{},"LPFNMOTIONEVENT pfnCallBack - callback function"]},{"entry":[{},"called when the data monitored changes. This function has"]},{"entry":[{},"the following prototype."]},{"entry":[{},"HRESULT (*LPFNMOTIONEVENT)( DWORD dwType,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DWORD dwTypeInfo,"]},{"entry":[{},"LPVOID pvParam,"]},{"entry":[{},"MOTION_PARAM_DATA"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"rgData,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DWORD dwCount );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LPVOID pvParam - extra parameter passed to the callback"]},{"entry":[{},"upon invocation."]},{"entry":[{},"LPDWORD pdwCookie - pointer to a DWORD where the"]},{"entry":[{},"cookie (value associated with the connection) is copied."]},{"entry":["Return","HRESULT - NOERROR on success, or error code on"]},{"entry":["Value","failure."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The Unsubscribe function Removes a variable or API from the subscription list and employs the following syntax, parameters, and return value:",{"@attributes":{"id":"p-0051","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","HRESULT Unsubscribe( DWORD dwCookie );"]},{"entry":["Parameters","DWORD dwCookie-value corresponding to the"]},{"entry":[{},"connection (previously returned by the Subscribe"]},{"entry":[{},"function)."]},{"entry":["Return Value","HRESULT-NOERROR on success, or error code on"]},{"entry":[{},"failure."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The \u201cInitialize\u201d function creates a connection to the motion event component  and employs the following syntax, parameters, and return value:",{"@attributes":{"id":"p-0053","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","HRESULT Initialize( DWORD dwFlags );"]},{"entry":["Parameters","DWORD dwFlags-reserved for future use, should be"]},{"entry":[{},"set to zero."]},{"entry":["Return Value","HRESULT-NOERROR on success, or error code on"]},{"entry":[{},"failure."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The \u201cCleanUp\u201d function releases the connection to the motion event component  and employs the following syntax and return value:",{"@attributes":{"id":"p-0055","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","HRESULT CleanUp( void );"]},{"entry":["Return Value","HRESULT-NOERROR on success, or error code on"]},{"entry":[{},"failure."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The following C++ functions are examples of functions that may be used by the motion event system  to support event notifications that may be implemented in the automation layer . The functions described below apply to direct events supported using standard connection points as well as \u201clazy events\u201d, which are loosely coupled events implemented using COM+ events.","B. Internal SystemAPI Definitions","The event functionality described above is implemented internally to the event management system  using a set of SystemAPI or SystemSPI functions. The term \u201cSystemAPI\u201d refers to an application programming interface exposed by the system . The term \u201cSystemSPI\u201d refers to a service provider interface defined by the system .","When event functionality is implemented at the level of the motion component , the SystemAPI definitions are used. When event functionality is implemented at the level of the driver component , the events are passed down to the driver component  and handled by the SystemSPI definitions.","All data passed to the SystemAPI is passed in the form of a function index called the SystemAPI index and an array of parameters (RgData) that use a Standard Motion Parameter Data Type that will be described in further detail below.","In the following discussion, portions of the SystemAPI and SystemSPI provided to handle event management will be defined.","The MOTION_CNC_EVENT_SUBSCRIBE API is a SystemAPI that is used to subscribe to a given event condition. In the present example, only variables are supported by the event notification. The present invention may be implemented using events that include motion conditions, raw data transmission conditions, or other state change information occurring either in the motion event system  or on the target device or machine. The following Index Value and RgData Values are used to implement this API:",{"@attributes":{"id":"p-0062","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Index",{}]},{"entry":["Value","2890"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["RgData[0]","(in, number) type of event to monitor. Current types supported"]},{"entry":[{},"are:"]},{"entry":[{},"XMC_CNC_MONITOR_TYPE_VARIABLE-variable"]},{"entry":[{},"monitor type, were the RgData[1] points to a string containing"]},{"entry":[{},"the variable name. Note when monitoring this type, only"]},{"entry":[{},"mapped XMC variables are supported."]},{"entry":["RgData[1]","(in, number or string depending on RgData[0])-actual type"]},{"entry":[{},"information describing the event condition to be monitored."]},{"entry":[{},"For example when RgData[0] ="]},{"entry":[{},"XMC_CNC_MONITOR_TYPE_VARIABLE, this field"]},{"entry":[{},"contains the actual variable name to monitor."]},{"entry":["RgData[2]","(in, number) number of event conditions to monitor. For each"]},{"entry":[{},"count of event conditions to monitor, there are two elements"]},{"entry":[{},"in the RgData array that follow (one for the event condition"]},{"entry":[{},"type and one for the actual event condition value)."]},{"entry":["RgData[2","(in, number) event condition type where the following types"]},{"entry":["+","are supported:"]},{"entry":["(1 * n)]","XMC_CNC_EVENTCONDITION_DATA_CHANGE-any"]},{"entry":[{},"data changes in the data type above will trigger the event."]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_EQUAL"]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_LESSTHAN"]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA"]},{"entry":[{},"GREATERTHAN"]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_AND"]},{"entry":[{},"XMC_CNC_EVENTCONDITION_DATA_OR"]},{"entry":[{},"Each of the conditions above are used in a combined manner."]},{"entry":[{},"Where the logical condition (=, <, >) are applied for each type"]},{"entry":[{},"respectively."]},{"entry":[{},"For example, in an array that contains the following items:"]},{"entry":[{},"rgData[2] = 4 (4 condition values)"]},{"entry":[{},"rgData[3] = XMC_CNC_EVENTCONDITION_EQUAL"]},{"entry":[{},"rgData[4] = 3.0"]},{"entry":[{},"rgData[5] = XMC_CNC_EVENTCONDITION"]},{"entry":[{},"LESSTHAN"]},{"entry":[{},"rgData[6] = 3.0"]},{"entry":[{},"rgData[7] = XMC_CNC_EVENTCONDITION_OR"]},{"entry":[{},"rgData[8] = 1.0"]},{"entry":[{},"rgData[9] = XMC_CNC_EVENTCONDITION"]},{"entry":[{},"GREATERTHAN"]},{"entry":[{},"rgData[10] = 5.0"]},{"entry":[{},"the array would be evaluated using the following logic:"]},{"entry":[{},"If (DATA <= 3.0 OR DATA > 5.0) then Trigger Event"]},{"entry":["RgData[0]","(out, number) the cookie (unique identifier) associated with"]},{"entry":[{},"the subscription is returned to the client."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MOTION_CNC_EVENT_UNSUBSCRIBE API is a SystemAPI that is used to unsubscribe to a given event condition, thus removing the condition from the monitoring list for the specific client making the unsubscribe request. The event condition will still be monitored if other clients are currently subscribed to the condition. The following Index Value and RgData Values are used to implement this API:",{"@attributes":{"id":"p-0064","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Index Value","2891"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"RgData[0]","(in, number) cookie (unique identifier) associated"]},{"entry":[{},{},"with the subscription. This value is returned to the"]},{"entry":[{},{},"client when calling the subscription SystemAPI"]},{"entry":[{},{},"above."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The MOTION_CNC_EVENT_PAUSE API allows monitoring of the given event condition to be paused for the given client but does not remove it from the subscription list. The following Index Value and RgData Values are used to implement this API:",{"@attributes":{"id":"p-0066","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Index Value","2892"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"RgData[0]","(in, number) cookie value (unique identifier)"]},{"entry":[{},{},"associated with the subscription."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The Standard Motion Parameter Data Type discussed briefly above will now be discussed in further detail. The structure of the Standard Motion Parameter Data Type is referred to as MOTION_PARAM_DATA. Many methods on the Motion C++ classes use the standard Motion parameters set to describe data used to control, query or set each axis. The standard parameters are in the following format:\n\nObj->method(MOTION_PARAM_DATA ParamData,WORDCount);\n","Each element in the rgParamData array corresponds to an axis in the system, with the first element in the array corresponding to the first axis of motion. For example, if the first axis of motion is the \u2018X\u2019 axis, then \u2018X\u2019 axis would correspond to the first element in the array.","The MOTION_PARAM_DATA structure can contain either a numerical or a string value and is defined as follows:",{"@attributes":{"id":"p-0070","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct tagMOTION_PARAM_DATA"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LNG_PARAM_DATATYPE adt;"]},{"entry":[{},"union"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"double df;"]},{"entry":[{},"LPTSTR psz;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"};"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}MOTION_PARAM_DATA;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The \u2018adt\u2019 member of the MOTION_PARAM_DATA structure describes the data contained within the MOTION_PARAM_DATA structure. The values are described below:",{"@attributes":{"id":"p-0072","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["LNG_PARAM_DATATYPE","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["LNG_ADT_NUMBER","Use this value when passing a"]},{"entry":[{},"numerical value via the \u2018adt\u2019 member"]},{"entry":[{},"of the MOTION_PARAM_DATA"]},{"entry":[{},"structure."]},{"entry":["LNG_ADT_STAT_STRING","Use this value when passing a static"]},{"entry":[{},"string value via the \u2018psz\u2019 member of"]},{"entry":[{},"the MOTION_PARAM_DATA"]},{"entry":[{},"structure. Static strings do not need"]},{"entry":[{},"to be freed from memory."]},{"entry":["LNG_ADT_MEM_STRING","Use this value when passing a string"]},{"entry":[{},"value via the \u2018psz\u2019 member of the"]},{"entry":[{},"MOTION_PARAM_DATA structure."]},{"entry":[{},"LNG_ADT_MEM_STRING denotes"]},{"entry":[{},"that the string must be freed from"]},{"entry":[{},"memory during cleanup."]},{"entry":["LNG_ADT_NOP","This value is used to ignore items"]},{"entry":[{},"within the MOTION_PARAM_DATA"]},{"entry":[{},"array. For example, if you need to"]},{"entry":[{},"command move-at-velocity for only"]},{"entry":[{},"the third axis of a three axis machine,"]},{"entry":[{},"you would send an"]},{"entry":[{},"MOTION_PARAM_DATA array to"]},{"entry":[{},"CSystemMotionObj::MoveAtVelocity"]},{"entry":[{},"where the first 2 elements would be"]},{"entry":[{},"of type LNG_ADT_NOP and the third"]},{"entry":[{},"element would be of type"]},{"entry":[{},"LNG_ADT_NUMBER. The motion"]},{"entry":[{},"component 40 would then issue the"]},{"entry":[{},"move-at-velocity command only to"]},{"entry":[{},"the third axis, ignoring the first two."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The system  handles Boolean types in the following manner. When querying and setting boolean TRUE\/FALSE values, any non-zero value is considered TRUE and any zero value is considered FALSE. For example, if the df field of an MOTION_PARAM_DATA array element is non zero and it is sent to CSystemMotionObj::LimEnableSW, the software limits for the specified axis will be enabled.","Typically, the variables associated with a motion system change as the motion system changes state. Events generated by motion systems are often associated with these changing variables. Referring now to , depicted therein is a variable support system  for facilitating access to and mapping of motion variables. The system  is of particular significance when used in conjunction with the motion event handling system  described above, but also has application to motion systems that do not incorporate the motion event handling system .","Referring now to , that figure illustrates that the example variable support system  comprises the automation layer , framework layer , motion component , and driver components  as generally described above. In addition, as depicted in , the variable support system  comprises client software , a user , and a driver administrator component . The motion event component  is not shown in  for clarity but may also be used by the system .","The objects forming the variable support system  will be described in further detail below after a discussion of an object model associated with the variable support system .","A. Example Object Model","Referring now to  of the drawing, depicted therein is an object model  illustrating the relationships among a plurality of objects associated with the example variable support system . As shown in , the object model  illustrates that the example object model  comprises the following variable support objects:\n\n",{"@attributes":{"id":"p-0078","num":"0101"},"figref":"FIG. 9"},"The MotionaVariableObj object , MotionaVariableMappingObj object , MotionaVariableMappingEnum object , and MotionaVariableMappingItem object  each expose methods, and the methods exposed by each of the objects  and  will be described separately below.","The MotionaVariableObj  supports or exposes the following methods: ReadItem, Read, WriteItem, Write, GetNames, and GetAttributes. The ReadItem method reads a single variable (or array element) and returns the data read. The Read method reads a set of items. The WriteItem methods writes a set of items. The GetNames method returns the list of variable names currently mapped either by the motion component  or by the user . The GetAttributes method returns the attributes for a given variable. Each of these methods will be separately described in further detail below.","The MotionVariableObj.ReadItem method employs the following syntax, parameters, and return value to read a variable item and return the data read:",{"@attributes":{"id":"p-0082","num":"0105"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","Function ReadItem( strName As String ) As Variant"]},{"entry":["Parameters","strName As String - string containing the name of the"]},{"entry":[{},"variable to be read."]},{"entry":["Return Value","Variant - data read from the variable."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MotionaVariableObj.Read method employs the following syntax and parameters to read a variable item or array and return the data read in the parameter passed:",{"@attributes":{"id":"p-0084","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","Sub Read( strName as String, ByVal rgData( ) As Variant )"]},{"entry":["Parameters","strName As String - name of variable to read."]},{"entry":[{},"rgData( ) as Variant - array of data items read."]},{"entry":["Return Value","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MotionaVariableObj.WriteItem method employs the following syntax and parameters to write a variable item to the controller of a given motion device:",{"@attributes":{"id":"p-0086","num":"0109"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","Sub WriteItem( strName As String, varData As Variant )"]},{"entry":["Parameters","strName As String - string containing the name of the"]},{"entry":[{},"variable to be read."]},{"entry":[{},"varData As Variant - data to be written."]},{"entry":["Return Value","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MotionaVariableObj.Write method employs the following syntax and parameters to write a variable item or array to the controller of a given motion device:",{"@attributes":{"id":"p-0088","num":"0111"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","Sub Write( strName as String, rgData( ) As Variant )"]},{"entry":["Parameters","strName As String - name of variable to read."]},{"entry":[{},"rgData( ) as Variant - array of data items to be written."]},{"entry":["Return Value","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MotionaVariableObj.GetNames method employs the following syntax and parameters to get the variable names for a given domain (this method supports both variables mapped in the motion component  and variables mapped by the user  using a variable mapping API):",{"@attributes":{"id":"p-0090","num":"0113"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","Sub GetNames( strDomain As String,"]},{"entry":[{},"\u2003\u2003strName as String,"]},{"entry":[{},"\u2003\u2003rgData( ) As Variant )"]},{"entry":["Parameters","strDomain as String - name of domain (if any) from which"]},{"entry":[{},"variables are to be read."]},{"entry":[{},"strName As String - name of first variable to retrieve."]},{"entry":[{},"rgData( ) as Variant - array of data items to be written."]},{"entry":["Return Value","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MotionaVariableObj.GetAttributes method uses the following syntax and parameters to get the attributes for a given variable:",{"@attributes":{"id":"p-0092","num":"0115"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","Sub GetAttributes( strName as String,"]},{"entry":[{},"rgData( ) As Variant )"]},{"entry":["Parameters","strName As String - name of first variable to retrieve."]},{"entry":[{},"\u2003\u2003strAttrib as String - attributes for the variable."]},{"entry":["Return Value","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MotionaVariableMappingObj object  supports or exposes the following methods: AddMapping, RemoveMapping, RemoveAll, GetMappingList, LoadMappings, and SaveMappings. The AddMapping method adds a new mapping to the list. The RemoveMapping method removes a mapping from the list. The RemoveAll method removes all mappings from the list. The GetMappingList method retrieves the mapping enumerator. The LoadMappings method loads a persisted mapping set. The SaveMappings method saves a mapping set to persisted storage. Each of these methods will be separately described in further detail below.","The MotionaVariableMappingObj.AddMapping method employs the following syntax and parameters to add a new mapping to the mapping list:",{"@attributes":{"id":"p-0095","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","Sub AddMapping( strName As String, strMap As String )"]},{"entry":["Parameters","strName As String - string containing the name of the"]},{"entry":[{},"variable to be mapped."]},{"entry":[{},"strMap As String - string containing the mapping"]},{"entry":[{},"information for the variable."]},{"entry":["Return Value","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The mapping format for a variable is as follows:\n\nDOMAIN:VARNAME:VARPATH:VARWRITEFMT\n\nwhere \u201cDOMAIN\u201d refers to the domain name on the controller, \u201cVARNAME\u201d the variable name on the controller to be read, \u201cVARPATH\u201d is the variable path (for arrays and structures) of the variable, and \u201cVARWRITEFMT\u201d is the variable write format used when writing data to the variable. A semicolon \u2018:\u2019 separates each of the items in the mapping. If the item is empty, the semicolons must still appear. Several example mappings are as follows:\n\n\u201c1 MULTI_SETUP:(0):(0){14}\u201d\n\n\u201c_TOOL_DATA_TABLE:(0)(1).tool_length:(1)(1)[{14}]\u201d\n","The MotionaVariableMappingObj.RemoveMapping method employs the following syntax and parameters to remove a mapping from the mapping list:",{"@attributes":{"id":"p-0098","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","Sub RemoveMapping( strName As String )"]},{"entry":["Parameters","strName As String - string containing the name of the"]},{"entry":[{},"variable to be removed from the mapping list."]},{"entry":["Return Value","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MotionaVariableMappingObj.RemoveAll method employs the following syntax to remove all mappings from the mapping list:",{"@attributes":{"id":"p-0100","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Syntax","Sub RemoveAll( )"]},{"entry":[{},"Parameters","None."]},{"entry":[{},"Return Value","None."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The MotionaVariableMappingObj.LoadMappings method employs the following syntax and parameters to load a set of mappings from a file:\n\n","When using the MotionaVariableMappingObj.LoadMappings method to load mappings from a file, all existing mappings are deleted.","The MotionaVariableMappingObj.SaveMappings method employs the following syntax and parameters to save a set of mappings to file.",{"@attributes":{"id":"p-0104","num":"0130"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","Sub SaveMappings( strFile As String )"]},{"entry":["Parameters","strFile as String - name of file from which the mappings are"]},{"entry":[{},"to be saved."]},{"entry":["Return Value","None."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MotionVariableMappingObj.GetMappingList method employs the following syntax, parameters, and return value to Retrieve a variable mapping enumerator.",{"@attributes":{"id":"p-0106","num":"0132"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Syntax","Function GetMappingList( strDomain as String ) As Object"]},{"entry":["Parameters","strDomain as String - name of the domain for which the"]},{"entry":[{},"enumerator is to enumerate. When empty all variables are"]},{"entry":[{},"enumerated. Currently the following domains are supported:"]},{"entry":[{},"XMC - all variables mapped in the XMC Motion"]},{"entry":[{},"Administrator."]},{"entry":[{},"user 124 - all user 124 mapped variables using the"]},{"entry":[{},"Mapping API."]},{"entry":["Return Value","Variable Enumerator."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The function index and parameter signature for each function used by the variable support objects  will now be described in further detail. In particular, the parameter signature and function indices used by the various driver component  functions to implement the new variable support will now be discussed.","The MOTION_CNC_VARIABLE_READ function employs the following Index value and RgData values to read a mapped variable:",{"@attributes":{"id":"p-0109","num":"0135"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index Value","2870"]},{"entry":["RgData[0]","(in, string) mapped variable name."]},{"entry":["RgData[1]","(in, out, number) max elements to read in, number read"]},{"entry":[{},"out."]},{"entry":["RgData[2 . . . ]","(out) data read"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MOTION_CNC_VARIABLE_READ function employs the following Index value and RgData values to write a mapped variable:",{"@attributes":{"id":"p-0111","num":"0137"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index Value","2871"]},{"entry":[{},"RgData[0]","(in, string) mapped variable name."]},{"entry":[{},"RgData[1 . . . ]","(in) data to write."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The MOTION_CNC_VARIABLE_LIST_GET function employs the following Index value and RgData values to get the list of mapped values:",{"@attributes":{"id":"p-0113","num":"0139"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index Value","2872"]},{"entry":["RgData[0]","(in, string) domain (XMC, USER, empty)"]},{"entry":[{},"XMC - all XMC variables mapped in Motion Admin."]},{"entry":[{},"USER - all user 124 variables mapped with Mapping"]},{"entry":[{},"API."]},{"entry":[{},"empty - all variables (XMC + USER)."]},{"entry":["RgData[1]","NOT USED - (in, string) first variable to start the list."]},{"entry":["RgData[2]","(in, out, number) max variables to query in, actual"]},{"entry":[{},"number queried out."]},{"entry":["RgData[3 . . . ]","(out, string) list of variable names."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MOTION_CNC_VARIABLE_ATTRIB_GET function employs the following Index value and RgData values to get the attributes describing a given mapped variable:",{"@attributes":{"id":"p-0115","num":"0141"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index Value","2873"]},{"entry":[{},"RgData[0]","(in, string) mapped variable name."]},{"entry":[{},"RgData[1]","(out, string) attributes of the variable."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The MOTION_CNC_VARIABLE_ADDMAPPING function employs the following Index value and RgData values to add a user  defined variable mapping.",{"@attributes":{"id":"p-0117","num":"0143"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index Value","2850"]},{"entry":["RgData[0]","(in, string) variable name to be mapped."]},{"entry":["RgData[1]","(in, string) variable mapping using the following format:"]},{"entry":[{},"DOMAIN:VARNAME:VARPATH:VARWRITEFMT"]},{"entry":[{},"DOMAIN - controller domain."]},{"entry":[{},"VARNAME - variable name on controller."]},{"entry":[{},"VARPATH - variable path (used for arrays and structures)."]},{"entry":[{},"VARWRITEFMT - format of the variable data written to"]},{"entry":[{},"HW."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MOTION_CNC_VARIABLE_REMOVEMAPPING function employs the following Index value and RgData values to remove a specific variable mapping:",{"@attributes":{"id":"p-0119","num":"0145"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index Value","2851"]},{"entry":[{},"RgData[0]","(in, string) mapped variable name."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The MOTION_CNC_VARIABLE_REMOVEALLMAPPINGS function employs the following Index value and RgData values to remove all variable mappings:",{"@attributes":{"id":"p-0121","num":"0147"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index Value","2852"]},{"entry":[{},"No params"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The MOTION_CNC_VARIABLE_MAPPINGCOUNT_GET function employs the following Index value and RgData values to get the number of variable mappings:",{"@attributes":{"id":"p-0123","num":"0149"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index Value","2853"]},{"entry":[{},"RgData[0]","(out, number) number of variable mappings."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The MOTION_CNC_VARIABLE_MAPPING_GETAT function employs the following Index value and RgData values to get the variable mapping settings:",{"@attributes":{"id":"p-0125","num":"0151"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index Value","2854"]},{"entry":["RgData[0]","(in, number) variable mapping index to query."]},{"entry":["RgData[1]","(out, string) variable name at the index specified."]},{"entry":["RgData[2]","(out, string) variable mapping at the index specified."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MOTION_CNC_VARIABLE_MAPPING_SETAT function employs the following Index value and RgData values to change the settings of a variable mapping:",{"@attributes":{"id":"p-0127","num":"0153"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index Value","2855"]},{"entry":["RgData[0]","(in, number) variable mapping index."]},{"entry":["RgData[1]","(in, string) variable name for the mapping at the index"]},{"entry":[{},"(Cannot change from the original name, only used for"]},{"entry":[{},"verification.)"]},{"entry":["RgData[2]","(in, string) new variable mapping for the variable."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MOTION_CNC_VARIABLE_LOAD_MAPPINGS function employs the following Index value and RgData values to load a set of variable mappings:",{"@attributes":{"id":"p-0129","num":"0155"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index Value","2857"]},{"entry":[{},"RgData[0]","(in, string) name of the file to load."]},{"entry":[{},"RgData[1]","(in, number, optional) flags for the load operation."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The MOTION_CNC_VARIABLE_SAVE_MAPPINGS function employs the following Index value and RgData values to save all variable mappings:",{"@attributes":{"id":"p-0131","num":"0157"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index Value","2856"]},{"entry":["RgData[0]","(in, string) name of the file where the mapping info is"]},{"entry":[{},"saved."]},{"entry":["RgData[1]","(in, number, optional) flags for the load operation."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MOTION_CNC_VARIABLE_VALIDATE_MAPPINGS function employs the following Index value to validate all variable mappings:",{"@attributes":{"id":"p-0133","num":"0159"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index Value","2858"]},{"entry":[{},"No params"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The MOTION_CNC_SYSTEM_CONNECT function employs the following Index value and RgData values to connect to the controller:",{"@attributes":{"id":"p-0135","num":"0161"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index Value","502"]},{"entry":[{},"RgData[0]","(in, number) channel (1.0, 2.0 or 3.0)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The MOTION_CNC_SYSTEM_DISCONNECT function employs the following Index value and RgData values to disconnect from the controller:",{"@attributes":{"id":"p-0137","num":"0163"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Index Value","503"]},{"entry":[{},"RgData[0]","(in, number) channel (1.0, 2.0 or 3.0)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The MOTION_CNC_DIRECT_VARIABLE_READ function employs the following Index value and RgData values to directly read from a variable on the controller:",{"@attributes":{"id":"p-0139","num":"0165"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index Value","2803"]},{"entry":["RgData[0]","(in, number) channel (1.0, 2.0 or 3.0)"]},{"entry":["RgData[1]","(in, string) domain name"]},{"entry":["RgData[2]","(in, string) variable name"]},{"entry":["RgData[3]","(in, string) variable path"]},{"entry":["RgData[4]","(in, number) data format"]},{"entry":[{},"MOTION_VARFMT_STRING_DATA_AND_TYPE"]},{"entry":[{},"(0x00000003)"]},{"entry":[{},"MOTION_VARFMT_STRING_DATA (0x00000001)"]},{"entry":[{},"MOTION_VARFMT_VARIANT (0x00000004)"]},{"entry":["RgData[5 . . . ]","(out) Data read from controller."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MOTION_CNC_DIRECT_VARIABLE_WRITE function employs the following Index value and RgData values to directly write to a variable on the controller:",{"@attributes":{"id":"p-0141","num":"0167"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index Value","2823"]},{"entry":["RgData[0]","(in, number) channel (1.0, 2.0 or 3.0)"]},{"entry":["RgData[1]","(in, string) domain name"]},{"entry":["RgData[2]","(in, string) variable name"]},{"entry":["RgData[3]","(in, string) variable path"]},{"entry":["RgData[4]","(in, number) data format"]},{"entry":[{},"MOTION_VARFMT_STRING_DATA_AND_TYPE"]},{"entry":[{},"(0x00000003)"]},{"entry":[{},"MOTION_VARFMT_STRING_DATA (0x00000001)"]},{"entry":[{},"MOTION_VARFMT_VARIANT (0x00000004)"]},{"entry":["RgData[5]","Number of items to write."]},{"entry":["RgData[6]","Data write format for VARIANT type, otherwise the full"]},{"entry":[{},"string containing data write format and comma delimited"]},{"entry":[{},"data."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MOTION_CNC_DIRECT_VARIABLE_LIST_GET function employs the following Index value and RgData values to get the list of all variables directly from the controller:",{"@attributes":{"id":"p-0143","num":"0169"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index Value","2798"]},{"entry":["RgData[0]","(in, number) channel (1.0, 2.0 or 3.0)"]},{"entry":["RgData[1]","(in, string) domain name"]},{"entry":["RgData[2]","(in, string) variable name"]},{"entry":["RgData[3]","(in, number) data format"]},{"entry":[{},"MOTION_VARFMT_STRING_DATA_AND_TYPE"]},{"entry":[{},"(0x00000003)"]},{"entry":[{},"MOTION_VARFMT_STRING_DATA (0x00000001)"]},{"entry":[{},"MOTION_VARFMT_VARIANT (0x00000004)"]},{"entry":["RgData[4]","(in, number) Number of items to query."]},{"entry":["RgData[5 . . . ]","(out, string) List of variable names."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The MOTION_CNC_DIRECT_VARIABLE_ATTRIB_GET function employs the following Index value and RgData values to get the attributes of a variable directly from the controller:",{"@attributes":{"id":"p-0145","num":"0171"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Index Value","2799"]},{"entry":["RgData[0]","(in, number) channel (1.0, 2.0 or 3.0)"]},{"entry":["RgData[1]","(in, string) domain name"]},{"entry":["RgData[2]","(in, string) variable name"]},{"entry":["RgData[3]","NOT USED - (in, string) variable name"]},{"entry":["RgData[4]","NOT USED - (in, number) data format"]},{"entry":[{},"MOTION_VARFMT_STRING_DATA_AND_TYPE"]},{"entry":[{},"(0x00000003)"]},{"entry":[{},"MOTION_VARFMT_STRING_DATA (0x00000001)"]},{"entry":[{},"MOTION_VARFMT_VARIANT (0x00000004)"]},{"entry":["RgData[5]","(out, string) String containing the attributes."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Currently, various methods of implementing variables are used within control technologies. Typically each vendor has a proprietary manner of specifying each variable and how it is accessed. The variable support system  may use what will be referred to herein as Independent Variables to facilitate access to any variable no matter how the variable is actually implemented by the control vendor. The Independent Variables may be independent of the particular hardware or software system used. The following discussion will describe an example design for controller neutral variables, including a description of all software modules involved.","Referring for a moment back to , the objects depicted therein are used (some optionally) when setting up and using controller independent variable mappings. Each of the objects depicted in  will now be described in further detail.","The client software  is any software that uses the services of the motion component  to setup or use controller independent variable mappings. The client may access the motion component  via the automation layer , the framework layer , or directly where the client software  communicated directly with the motion component .","The example automation layer  is provided for programming environments that support Microsoft OLE Automation. Several examples of such programming environments are Microsoft Visual Basic, applications that are VBA (Visual Basic for Applications) aware, the Visual Basic Scripting environment typically used in Internet\/Web based HTML pages, and the new Microsoft .NET environment.","The framework layer  is provided for programming environments that use the C++ programming language. Microsoft's Visual Studio 6.0 is an example of such an environment.","The motion component  services all client requests for mapped variable configuration and usage. The motion component  may be accessed directly, such as by the framework layer , or indirectly, such as through the automation layer . When requested, the motion component  routes the request to the active driver component  and may be used with a plurality of driver components  in a multi control environment.","The driver component  implements the specific variable mapping for a specific controller technology. Each variable mapping is setup either programmatically or via the driver administrator component .","The driver administrator component  is a user  application that allows the user  to visually configure each variable mapping for each controller dependent driver component . All configurations made in the driver administrator component  can be done without any new software programming.","The user  is the a person who configured the variable mappings and\/or a person who runs or otherwise uses client software that internally uses mapped variables.","Several examples of use cases will now be described to illustrate how the variable mapping model implemented by the system  may be used. In the examples discussed below, each driver component  is responsible for storing and performing any variable transformations between controller neutral and controller specific data.","Each variable mapping for each controller dependent driver component  may be mapped and\/or otherwise configured in any one of several ways. The examples depicted in  describe how an end-user  would configure the variable mappings without any additional software programming. Such mappings are configured via a driver administrator  that allows the driver component(s)  to be configured.","Referring initially to , depicted therein is an example of a situation in which the user  configures variable mappings with an administrator component the driver administrator component . When the user  configures variable mappings with the driver administrator , the following steps take place:\n\n","Referring now to , depicted therein is an example of configuring variable mappings programmatically using either the motion component  or the driver administrator component .  illustrates that the following steps are performed when configuring the motion component  programmatically:\n\n","As an alternative, the motion component  may store the mapping information for each driver component  in a mapping database, thus relieving each driver component  from having to perform any mapping logic. When a variable is then requested, the motion component  would look-up the variable mapping and send the mapped controller dependent information associated with the variable to the target driver component . The driver component  would then operate on the controller dependent information in a conventional manner.","Referring now to , depicted therein is an example of the system  using variable mappings. When using variable mappings, the controller independent variable name, type and structure are always used by the client software , thus allowing for controller independent use. When the same variable name, type, and structure are configured across several controller dependent technologies, the variable mapping taking place between the controller independent variable information and the controller dependent variable creates the controller independent variable environment.",{"@attributes":{"id":"p-0161","num":"0193"},"figref":"FIG. 12","b":"120","ul":{"@attributes":{"id":"ul0018","list-style":"none"},"li":{"@attributes":{"id":"ul0018-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0019","list-style":"none"},"li":["1. First the client software  programmatically requests an operation to occur on the variable (i.e. read, write, query attributes, etc).","2. The client software may communicate with the motion component  direct or via the framework layer  layers (which in-turn then communicates with the motion component ).","3. Upon receiving the variable request, the motion component  routes the information directly to the driver component  (or driver components  in a multi controller environment).","4. Upon receiving the variable request each driver component  transforms the controller independent variable information into the controller specific variable information and then performs the variable operation(s) using the controller specific information. Upon receiving any controller specific data from the request (i.e. a read operation), the controller specific data received is then retransformed back into the controller neutral format and returned to the motion component .","5. The driver component  communicates the request to the target controller, for which it is designed, using the controller specific variable name, format and structure."]}}}},"Referring now to , described therein is a variable support system  that is constructed and operates in a manner that is generally similar system  described above. However, in the system , all mapping logic and storage is performed by the motion component , making each driver component  easier and simpler to implement. The system  may be referred to as a \u2018shared\u2019 model for the mapping because the variable mapping services are implemented by the motion component  and shared among all driver components .","Like the system , the variable mapping\/configuration model implemented by the system  may be implemented in several ways.  and the following discussion describes how a user  can configure the variable mappings without any additional software programming. Such mappings are configured via the driver administrator component . When the user  configures variable mappings using the driver administrator component , the following steps are performed:\n\n",{"@attributes":{"id":"p-0164","num":"0204"},"figref":"FIG. 14","b":"40","ul":{"@attributes":{"id":"ul0022","list-style":"none"},"li":{"@attributes":{"id":"ul0022-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0023","list-style":"none"},"li":["1. First the client software  programmatically sends the variable mapping information directly to the motion component  through the framework layer . The motion component  is directed to configure the variable mapping for a specific driver component .","2. If the framework layer or layers  are used, the framework layer(s) relay the information for the variable mapping directly to the motion component .","3. Upon receiving the request, the motion component  saves the information for later use when the mapped variable is requested."]}}}},"When using the variable mappings, the client software  may use the controller independent variable name, type, and structure to allow for controller independent use. As will be described below with reference to , when the same variable name, type and structure are configured across several controller dependent technologies, the variable mapping taking place between the controller independent variable information and the controller dependent variable creates the controller independent variable environment.  shows that the following steps are performed when using mapped variables:\n\n","The controller neutral model of supporting variables may be applied to a number of different technologies in a number of different environments. Several example environments will be described below.","Industrial Automation, which refers to the automation of factory or workplace processes, uses variable based information extensively. In the following discussion, the application of the variable support systems will be briefly described in the context of the following Industrial Automation technologies: General Motion Control, CNC Motion Control, Robotic Control, Cell Control, and PLC Control.","General Motion Controllers (both software and hardware) are used for various motion based applications in a wide range of industries. For example, in the semiconductor industries, General Motion Controllers drive many of the pick-n-place and vision inspection machines. Each of the General Motion Control technologies is implemented with proprietary vendor specific technologies and most expose variables in some proprietary format. The control neutral model would allow for variables from any General Motion Control technology, regardless of vendor or implementation. The client software  thus is provided with a consistent system for accessing variable information from each target controller platform.","Computer Numeric Controls (CNC) are used by a wide range of machines in the metal fabrication industries. Each CNC controller supports a variant of the RS274 (G&M Code) language that usually makes the language supported a proprietary version of the original standard. Because the RS274 standard does not address variables, variables are typically handled as a proprietary extension to the RS274 standard, which the extension only works on the control technology for which it is implemented. The control neutral variable model of the present invention greatly improves upon the proprietary technologies by normalizing all variables across the various proprietary control technologies. A variable support system constructed in accordance with the present invention allow improved integration and information flow in enterprise wide systems such as data collection, analysis, and resource planning systems.","Robotic Controllers are similar to general motion controllers in that each Robotic Controller typically employs a proprietary technologies defined by the vendor of the particular Controller. A controller neutral variable support system implemented using the principles of the present invention improves upon proprietary systems by defining a generic system for accessing, manipulating, and configuring variable based information on Robotic Controllers.","A Cell Controller is a system (typically a Personal Computer) that directs the functionality of several controlled machines. The controlled machines, whether from the same vendor or from various vendors, each can implement a different manner of accessing, configuring, and using variables. A controller neutral variable support system of the present invention can simplify the process of implementing a Cell Controller that encompasses a variety of controlled machines using different control technologies.","PLC Controllers typically use variables (or tags) to access virtually all portions of their address space. A controller neutral variable support system of the present invention yields an advantage when applied to PLC Controllers because each PLC vendor typically implements their tags and variables in different proprietary ways.","In addition to Industrial Automation, the principles of the present invention may be used in what is referred to as Consumer Automation. Although the Consumer Automation industry is not yet mature, it is anticipated that the Consumer Automation industry will, like the Industrial Automation industry, face problems with proprietary controllers. A controller neutral variable support system of the present invention will in the future provide many of the same benefits in the Consumer Automation industry as are currently provided in the Industrial Automation industry."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 14","FIG. 13"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 15","FIG. 13"]}]},"DETDESC":[{},{}]}
