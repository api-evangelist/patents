---
title: Pluggable state meta-data processors based on meta information modeling in a service oriented architecture
abstract: A method and system for managing service state data of a service in a service-oriented architecture by establishing a pluggable meta-data processor comprising: establishing a platform independent, extensible meta-data information model to define meta-data about service state data; establishing an extensible meta-data definition comprising an extensible set of service state data attributes; configuring one or more extensible semantic processors; configuring a controller meta-data processor; and defining contracts among the semantic processors.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07693973&OS=07693973&RS=07693973
owner: International Business Machines Corporation
number: 07693973
owner_city: Armonk
owner_country: US
publication_date: 20030828
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This invention relates to computer systems information communications. The invention particularly is directed to service oriented state data and meta data. Today there is no built in support in a service-oriented architecture (like web services) to inform a client of its state changes. This is an important feature for a service-oriented architecture as most computing systems are asynchronous in nature and the client needs to acquire such a change of the state through some asynchronous mechanisms.","In a service oriented component model java services and\/or web services), the state of a component is held by the service through its instance variables and\/or session state variables and\/or persistence storage media and\/or using external resources. The service exposes its state information through various custom application programming interfaces (APIs). This interface model is not flexible and extensible, therefore each client has to program code to fit-in specific APIs and to understand the semantics as defined through the APIs. The clients are not flexible enough to query state data based on its exposed information model (data schema). The granularity and flexibility of these APIs vary with different implementation.","Therefore, what is needed is a framework to define mechanisms that enable a service to extend its state with change notification semantics a flexible service state exposure model through various queries on the state of the service using the exposed state information model (schema).","These and other improvements are set forth in the following detailed description. For a better understanding of the invention with advantages and features, refer to the description and to the drawings.","Disclosed herein in an exemplary embodiment is a method for managing service state data of a service in a service-oriented architecture by establishing a pluggable meta-data processor comprising: establishing a platform independent, extensible meta-data information model to define meta-data about service state data; establishing an extensible meta-data definition comprising an extensible set of service state data attributes; configuring one or more extensible semantic processors; configuring a controller meta-data processor; and defining contracts among the semantic processors.","Also disclosed herein in another exemplary embodiment is a system for managing service state data of a service in a service-oriented architecture by establishing a pluggable meta-data processor comprising: a means for establishing a platform independent, extensible meta-data information model to define meta-data about service state data; a means for establishing an extensible meta-data definition comprising an extensible set of service state data attributes; a means for configuring one or more extensible semantic processors; a means for configuring a controller meta-data processor; and a means for defining contracts among the semantic processors.","Further disclosed herein in yet another exemplary embodiment is a storage medium encoded with a machine-readable computer program code, the code including instructions for causing a computer to implement a method for managing service state data of a service in a service-oriented architecture by establishing a pluggable meta-data processor, the method comprising: establishing a platform independent, extensible meta-data information model to define meta-data about service state data; establishing an extensible meta-data definition comprising an extensible set of service state data attributes; configuring one or more extensible semantic processors; configuring a controller meta-data processor; and defining contracts among the semantic processors.","Our detailed description explains the preferred embodiments of our invention, together with advantages and features, by way of example with reference to the drawings.","Referring to  and , disclosed herein in an exemplary embodiment, is a method and apparatus for managing the state data of a service in a service-oriented architecture. More particularly, a framework to define mechanisms that enable a service  to extend its state with change notification semantics. In an exemplary embodiment, a service  may reside in a computer  configured to communicate with various system elements and media  including another computer with a client . Moreover, the client could reside in the same computer  as the service .","The framework enables a service  component with various extensible data query support on service state data , automatic notifying capability on service state data  change and data transform flexibility on service state data . This framework is flexible as clients  can write any query expressions on the service state data ; for example, a high level view of the state data , or it may be a granular (fine-grain) view on the state data . Advantageously, this framework is extensible as new type of service state can be plugged in to the service oriented architecture. In an exemplary embodiment, these features are achieved through pluggable processors , ,  utilizing the extensible meta-data framework related to state data qualifiers, constraints and access mechanism.","It will be appreciated that as used herein, architecture is intended to mean both the process and the specifying of the overall structure, logical components, and the logical interrelationships of a computer, its operating system, a network, or other conception. An architecture can be a reference model, such as the Open Systems Interconnection (OSI) reference model, intended as a model for specific product architectures or it can be a specific product architecture, such as that for a particular processor or operating system.","Computer architecture can be divided into five fundamental components: input\/output, storage, communication, control, and processing. In practice, each of these components (sometimes called subsystems) is sometimes said to have an architecture, so, as usual, context contributes to usage and meaning.","By comparison, the term design connotes thinking that has less scope than architecture. An architecture is a design, but most designs are not architectures. A single component or a new function has a design that has to fit within the overall architecture.","A similar term, framework, may be thought of as the structural part of an architecture but as used herein may also include processes. A framework may include both the process and the specifying of the overall structure, logical components, and the logical interrelationships of a system, processor and the like.","A tool set may be thought of as a collection of tools or functions to create artifacts (e.g., effects, code, schema, data, and the like)-from a set of inputs with the assistance of a user intervention.","A component is a physical or non-physical abstraction element that provides\/facilitates a selected set of functionalities\/capabilities of the architecture and\/or framework.","Another beneficial feature of this framework is the support of data transformation for the client . There are different types of clients, based on the heterogeneous nature of the transport, presentation media, QoS and formatting requirements. These clients  access the service  for its state data  and expect the results formulated\/configured in a manner appropriate for their consumption. In an exemplary embodiment, a framework for transformation of the service state data  for the client(s)  based on their requirements is provided. These requirements may include transformation of the service state data  to a format that they can understand and utilize; for example, a stock quote service state data from a stock quote service may be converted into Wireless Markup Language (WML) format for a mobile device display or into Voice Extensible Markup Language (XML) form at for a voice enabled device.","It is noteworthy to appreciate that a service-oriented architecture and the framework of an exemplary embodiment disclosed herein facilitate and provide the following:\n\n","An exemplary embodiment addresses the above requirements for a service-oriented architecture with a set of meta-data information and pluggable\/adaptable interfaces and tooling. Advantageously the meta-data framework is extensible to support state data qualifiers (security, transaction enable\/disable, transaction scope and the like), constraints (availability, time constraints, time to live, mutability, cardinality, etc) and access mechanisms (push, pull and custom access mechanisms).","Referring now to  and , an illustration of the components involved in the framework of an exemplary embodiment are depicted. An exemplary illustration of a process and communication between a service  and a client  are depicted. A service  e.g., Java Service\/Web service, State Address Provider service, and the like, has some state information\/data  such as an address, and would like to enable its clients  to query  this state using some query language including, but not limited to, XQuey, ISQL, XSL EJBOL and the like. For example the client  may query the zip code from the address. Moreover, as depicted in , a service , e.g., Java service, web service, State Address Provider service, has some state information, in this instance an Address and would like to send notifications  of a state change, e.g., address change, to the various clients  that are\/may be interested in listening to the state data changes.","Gateway for a Service Oriented State","Turning now to , a simplified block diagram of the framework of an exemplary embodiment is depicted. In an exemplary embodiment the framework includes and describes a Gateway for a Service Oriented State(GSOS)  and its features. A GSOS  is responsible for managing the service state data  in a service-oriented architecture. Service state data  may be a logical, or physical abstraction, state and\/or state data  in logical sense could be just a pointer, or a physical construct, such as a real address. This service state data  abstraction and meta-data information may be created using the tools optionally provided along with this framework in another exemplary embodiment. This framework employing the GSOS of an exemplary embodiment includes, but is not limited to, these components and functionalities:\n\n","The meta-data definition of an exemplary embodiment is an extensible set of state data constraints, qualifiers and data access mechanisms. The meta-data definition is an information model associated with the state data  and provides more semantic information on the service's  state. This meta-data definition may be an extension to the state data  schema through annotations on the schema or can be a more general-purpose language such as Resource Description Framework (RDF), DARPA Agent Markup Language(DAML), and others). In an exemplary embodiment the GSOS  employs an XML model to define this meta-data information.","An Extensible Meta-data Processor","An extensible meta-data processor  (See also ) includes a rule engine to process the meta-data associated with the state data  of a service  . This rule engine is complex in nature by providing expert decision based on the meta-data. These decisions include when to notify a state change, interpret the semantics of the query and retrieve the state from an external resource (e.g., SQL, Simple Network Management Protocol (SNMP) server, Common Information Model Object Manager (CIMOM), web services) or from the service , make a decision on the transaction requirements and security constraints, to make decisions on the validity and availability of the state data  to make the decision about which query processor to use based on user and\/or client query criteria. It will be appreciated that as described herein the extensible meta-data processor  is described as a part of or imbedded with the GSOS . However the meta-data processor  may also be pluggable with the GSOS providing the appropriate interfaces. It will be appreciated that the framework provides an extension capability based on meta-data language extensibility to support custom scenarios.","Interface Framework to Define the Interaction between a Service and GSOS","In an exemplary embodiment, the GSOS  provides a standard interface to define the interactions between the service  and GSOS . In an exemplary embodiment three types of interface are employed:\n\n","In an exemplary embodiment, the GSOS  also provides interface to a number of pluggable processors to facilitate and support service state data Queries, Client notification and transformations. It will be appreciated that while in an exemplary embodiment three such pluggable processors are depicted and described, any number of pluggable processors and interfaces are conceivable without loss of generality. Moreover, it should be further appreciated that it is also conceivable to employ multiple processors of similar types. For example, multiple query interfaces  and processors  may be utilized to facilitate the needs of the framework , and\/or client , and the like.","Query","The query interface  enables the GSOS  to support any query language and processor  of a client's  choice. The user\/client  creates a query based on the schema associated with the state. GSOS  is responsible for applying the query on the state data  based on the meta-data information and it presents the Query results on service state data  to the query processor  in a canonical schema format understandable to the processor . In addition GSOS  also provides caching mechanisms to support faster query process. In an illustrative implementation of an exemplary embodiment of a GSOS  and the query interface  supports an in-memory XML Document Object Model (DOM) programming interface.","Notification","The GSOS  supports pluggable notification processors  with a notification processor interface  based on selected notification requirements. These requirements include service state aggregation, queuing, periodic delivery, and asynchronous behaviors. GSOS , based on the service state meta-data information automatically sends the state change information to this processor  with the current and old value of the state data .","Transformation","Based on a client's  request, the GSOS  framework transforms the results of a query or change notification to a format as prescribed by the client . The GSOS  includes a transform processor interface  to facilitate plug-in of any transformation processor  of choice.","Service Oriented State Data and State Meta-Data Generation Using Meta Information Modeling","Disclosed herein in another exemplary embodiment is a method and apparatus for generating service state data and extensible meta-data information based on the state data schema for a service-oriented architecture. This framework, uses a meta information model on the top of the state meta-data to provide more flexibility in modeling, versioning and compatibility. This enables the service component to be used with the framework utilizing the Gateway for Service Oriented State (GSOS) disclosed earlier, for various extensible data query support on service state data, automatic notifying capability on service state data change and data transform flexibility on service state data.","Referring now to , a framework denoted here as as an other exemplary embodiment and expansion of that described earlier, utilizing a service oriented state generator  hereinafter also denoted SSDG is depicted. In a service oriented component (e.g., java services and\/or web services, enterprise, and the like), the state of a component is held by the service  through its instance variables and\/or session state variables and\/or persistence storage media and\/or using external resources. The Gateway for Service Oriented State (GSOS)  and framework , provides a flexible service state exposure model through various queries on the state of the service  using an exposed state information model (data schema). This framework including the GSOS  is configured to be flexible and permits clients  to formulate query expressions on the service state data . This framework also provides a means to define mechanisms to enable a service  to extend its state with change notification semantics. This extensible framework depends on the state data and its meta-data information.","In an exemplary embodiment, a tool set shown generally as  (a service state generator framework) is defined to support creation of state data  with the necessary meta-data. Once again, this generated state data may be a logical or physical mapping to a service state data . This tool set  can operate on any data schema  (e.g., XML Schema, Document Type Definition (DTD), Regular Language Description For XML-Next Generation (RELAX-NG) Schema). This service state generator  provides the maximum flexibility by using a meta-model  for modeling the state meta-data. The use of this modeling metaphor helps in defining a meta-data language with versioning, compatibility, a standard for tools to work on the state-data and a standard for code generation.","In an exemplary embodiment the tool set  and state data generator  provides numerous advantages and features for generation of service state data  utilizing various meta data and schema. For example, the tool set  and state data generator  generates state data, state data logical mapping and\/or physical mapping, meta-data associated with the state data, and includes meta-data model  associated with the meta-data. The tool set  generates the necessary interfaces and code to support the state data and its usage in a service . In addition, this tool set  facilitates creation of the state data in the framework as a logical grouping or as a direct physical representation with the necessary interfaces to support the meta-data requirements like serializes and deserializers, data push and pull mechanisms etc.","The tool set  and SSDG  works in conjunction with state data schema  and a meta-data language. The meta-data language is a common language for describing the meta-data through meta data models  (meta-data about meta-data) to facilitate and ensure compatibility with previous versions. This can be any existing XML languages or a derivative thereof. Moreover, the tool kit  facilitates extension to support new meta-data features. This toolset  works with state data schema ; these state schema  may be associated with the WSDL (Web Service Description Language) through port type (interface) extensibility or by including external schema definitions. The state data schema  may be, but are not limited to, XML schema, RELAX-NG, Reverse Description Framework (RDF), and the like.","Other inputs to the SSDG  may include custom templates , meta-data attributes  and meta-information models etc.\n\n","The tool set  and SSDG  provides a Graphical User Interface (GUI) based and\/or a command line solution to generate the state data  of a service  and to create the necessary meta-data and mapping information associated with that state data . Moreover, use GUI features like custom dialogs with user, drag and drop of meta-data information, flexible context menus and flexible ways to create state data relationships (workflows).","The tool set  and SSDG  includes a capability to obtain user (service developer) feedbacks on meta-data generation for a service state data ; based on the attributes , e.g., qualifiers, constraints and data access mechanisms associated with the state data.\n\n","The tool set  and SSDG  is developed and configured as a pluggable framework so that it can be used as an eclipse plug in or can be included with other user interfaces frameworks. User e.g., developer for the service , may define an extensible set of meta-data information and generate pluggable extension mechanisms for meta-data attributes , e.g., data qualifiers, constraints and access mechanisms based on the service  needs. Provides meta-data model  extensibility through pluggable frameworks. This enables a service developer to support custom meta-data attributes .","The tool set  provides a set of validation facilities to validate the meta-data based on meta-data model  and data schema . Moreover, the tool set  also provides some runtime validation on the access mechanisms. As an example, a user can validate data access using SQL queries and CIM against the utilities supplied.","The tool set  enables a state workflow model for developing a service state collaboration and state relationship.","State Meta-Data Processors Based on Meta Information Modeling in a Service Oriented Architecture","Disclosed herein in yet another exemplary embodiment is a method and apparatus for embedded\/pluggable state meta-data processors based on a meta information model in a service-oriented architecture. This framework provides one ore more processors generated from a meta model for Gateway for Service Oriented State (GSOS) framework as described above, with an extended set of capabilities by utilizing the extensible meta-information model framework also described herein, in order to process the meta-data related to state data qualifiers, constraints and access mechanisms. These processors are defined and can be executed in a service specific controller engine, which provides process flow and orchestration capabilities.","Referring now to , in a service oriented architecture, the Gateway for Service Oriented State (GSOS) framework ((), provides a flexible service state exposure model through various queries on the state of the service using the exposed state information model (e.g., state data schema). This GSOS framework also facilitates defining mechanisms to enable a service  to extend its state with change notification semantics. Another feature of the abovementioned frameworks , is the support of data transformation for the client  in a manner appropriate for their consumption. These extensible frameworks depend on the state data and its meta-data and a meta-data information model  (meta-data about meta-data). This meta-data provides state data qualifiers (security, transaction and notifiability etc), constraints (mutability, time to live) and access mechanisms (database connection, connection to CIMOM, SNMP etc). These meta-data are modeled using the meta information models  and this enables the application developer to create new meta models and\/or extend the existing meta-models with new service defined semantics.","In yet another exemplary embodiment a framework for processing meta-data and its associated semantics through embedded\/pluggable and extensible meta-data processors  is described. Once again, it will be appreciated that the framework for the meta-data processor  may be implemented in conjunction with the GSOS  and framework , as well as the tool set  and SSDG and framework . The meta-data processor as described herein in an exemplary embodiment may be considered embedded with the GSOS  or as pluggable thereto. Described herein in another exemplary embodiment is a framework to use some workflow models (custom or pre-existing) to control the invocation flow and processing logics of the meta-data processors . In short, this permits definition of a meta information driven architecture, with platform independent models (PIM) for the state meta-data and with platform specific models (PSM) for semantic processors to process the meta-data associated with the state data.","Advantageously, the framework of an exemplary embodiment includes a model driven architecture with platform independent models to define the meta-data for the state data and platform dependent models for specific (semantic) processing of this state meta-data based on the meta-data model . The separation of platform dependent and independent models enables an application developer to create flexible state data processing rules for any type of (EJBs, Java beans, NET services etc) service component.","Moreover, any number of generic semantic processors may be created and utilized to manage the state meta-data processing. Such a configuration permits a service developer to write specific extensions for semantics processing. One advantage facilitated by such generic semantics processing capability is that it permits flexibility for model extensions and application processing extensions. Another capability of the semantic processors  is facilitates association of work flow mechanism (custom or preexisting orchestration engines).","As shown in the , as described above the Gateway for Service Oriented State (GSOS) is composed of a number of components. These components include, but are not limited to, meta-data processors  (generated by meta-model tools and\/or by the service developer and its extensions), interfaces to connect to the GSOS, an internal meta-data representation  and interfaces to connect to external systems and processors , ,  (query, notification and transformation). In an exemplary embodiment as disclosed herein relates to meta-data processor(s)  and their relation to meta-data  , meta-data information model , and a processor execution flow model. Moreover, a framework for service specific controller processor (a service specific meta-data processor), which is responsible for managing the meta-data processing based on service specific requirements including introspection on meta-data  and meta-data processor  flow orchestration.","The major components of this process framework and meta-data processor  includes, but are not limited to, a meta-data information model , meta-data information , semantic information processors , controller meta-data processors , as well as interfaces , ,  for these processors , , and syntax, semantics and work flow information  for these processors , .","Meta-data Information Model","Once again, meta-data information model  is employed to define meta-data about state meta-data. In an exemplary embodiment, this model  is platform independent (PI) and platform extensible (PE) model with information including:","Meta-data syntax for state meta-data validation, versioning and consistency check; Meta-data semantics for,\n\n","This is a flexible information model and may be expressed in any model language (e.g., XML Metadata Interchange (XMI), Meta Object Facility (MOF), Unified Modeling Language (UML) and the like) and can be used by the Service Oriented State Data Generator SSDG  and tool set  to create a meta-data and generic semantic processors  to handle those meta-data .","As an example, we can define the semantic information on the transaction requirements on the state data through a meta-data model . The meta-data model  contains the platform independent model of the transaction attributes including transaction type, isolation level, locking etc. A service  developer can work with the tool set  as described previously herein with respect to the Service Oriented State Data Generator SSDG  (shown in ) to generate platform specific models including a meta-data processor  for transaction management and transactional deployment and runtime configuration information for that specific platform.","Meta-data Information","For each service state data  (logical or physical mapping), there is a meta-data mapping associated with the service state data  with details on its constraints, qualifiers and state data access mechanisms. These meta-data  are instances of the meta-information model  and forms the core data for the GSOS  to work with. This mapping information enables the design of a flexible state management framework. In an exemplary embodiment, tools are utilized to create these service state meta-data . These meta-data are associated with a meta-model for versioning, validation, consistency and process semantics.","Semantic Information Processors Based on Meta-Model to Process Meta Data","These semantic information processors  are created from the platform specific modeling artifacts, which are derived from the platform independent meta model. These processors  provide service  developers an interface to define rule engines to process the semantics associated with the meta-data . In other words, these processors  enforce the constraints on the state data specified by the meta-data . These processors may be built in platform specific and\/or container specific processors to handle meta-data constraints, qualifiers and data access mechanisms. Once example of such a processor can be a transaction processor to process the transactional requirements on a state data access. These platform specific processors  may be configured to work in conjunction with a platform specific transaction coordinator to execute the transactional requirements on the state-data. These processors are configured to follow some specific contracts (interfaces and process flow) to conform to the meta-data model  as defined earlier. These are pluggable and extensible processors based on the model version and service specific requirements.","In an exemplary embodiment, the Semantic Information Meta-data processors  are configured to be platform dependent where each service extensible processor  relates to selected meta-model semantics with a rule engine to execute the meta-data semantics. Each semantic processor  follows a well defined contract model dictated by the control processor  for interoperability between semantic processors . Advantageously, the semantic meta-data processor  may employ a standard programming model to access and discover meta-data. In addition these processors may be employed to validate the meta-data using a meta-data model .","Controller Meta-data Processors","The controller processors  are service specific meta-data processors (acting as controller) , that define the contracts between the semantic processors  and control the flow of data between the semantic processors  based on the state meta data information. The service  developer, based on the rules defined in the meta-data and meta-data model  can develop these processors  and contracts. A tool set may be used to develop the basic skeleton of this processor . This processor provides a state meta-data and state data repository. This repository can be physical representation (caching) for improved performance or can be a logical representation with external storage in the service  or elsewhere (databases). In an exemplary embodiment, the functionalities provided by this processor  include, but are not limited to, validation of the meta-data with meta-data model , introspection on the meta-data to identify and select an appropriate processor execution engine, control of the semantic processor(s)  execution flow using an appropriate orchestration engine, providing contract definition among various semantic meta-data processors , and providing flow mechanisms between semantic meta-data processors . The control processor may also provide a meta-data or state data repository.","Interfaces And Process Flow","All the meta-data processors ,  should follow some defined contract information and of course, would need to follow well-defined interface requirements. In an exemplary embodiment a state less model of meta-data processors is defined. These contracts are used for managing interfaces such as, life cycle management, state management, and processing contracts (data flow, validation, versioning etc). The contracts also facilitate management of process flow by coordinate work flow with a workflow engine, and implementing workflow requirements.","To reiterate, these meta-data processors  provides a pluggable and extensible framework for managing the state data through its meta-data semantics. This state data can be local to the service or can be stored elsewhere or can be held in any external resource. These meta-data processors  provides a common view of the data to the client by providing abstract models (meta models) whereby hiding the internal platform specific details.","The disclosed invention can be embodied in the form of computer, controller, or processor implemented processes and apparatuses for practicing those processes. The present invention can also be embodied in the form of computer program code containing instructions embodied in tangible media  (), such as floppy diskettes, CD-ROMs, hard drives, or any other computer-readable storage medium, wherein, when the computer program code is loaded into and executed by a computer, controller, or processor , the computer, controller, or processor  becomes an apparatus for practicing the invention. The present invention may also be embodied in the form of computer program code as a data signal , for example, whether stored in a storage medium, loaded into and\/or executed by a computer, controller, or processor , or transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via electromagnetic radiation, wherein, when the computer program code is loaded into and executed by a computer, the computer becomes an apparatus for practicing the invention. When implemented on a general-purpose processor,  the computer program code segments configure the processor to create specific logic circuits.","It will be appreciated that the use of first and second or other similar nomenclature for denoting similar items is not intended to specify or imply any particular order unless otherwise stated.","While the invention has been described with reference to an exemplary embodiment, it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition, many modifications may be made to adapt a particular situation or material to the teachings of the invention without departing from the essential scope thereof. Therefore, it is intended that the invention not be limited to the particular embodiment disclosed as the best mode contemplated for carrying out this invention, but that the invention will include all embodiments falling within the scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will now be described, by way of an example, with references to the accompanying drawings, wherein like elements are numbered alike in the several figures in which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
