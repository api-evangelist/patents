---
title: System, method and computer program product for transmitting a group of data elements
abstract: In accordance with embodiments, there are provided mechanisms and methods for transmitting a group of data elements. These mechanisms and methods for grouping a plurality of data elements can enable more efficient data transmission, improved synchronization and data management, etc.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09195681&OS=09195681&RS=09195681
owner: salesforce.com, inc.
number: 09195681
owner_city: San Francisco
owner_country: US
publication_date: 20110112
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","COPYRIGHT NOTICE","FIELD OF THE INVENTION","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Patent Application 61\/320,184, entitled \u201cSync API,\u201d by Hopkins et al., filed Apr. 1, 2010, the entire contents of which are incorporated herein by reference.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","One or more implementations relate generally to data transmission, and more particularly to grouping data elements for transmission.","The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly, a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches, which in and of themselves may also be inventions.","Data transmission is a common practice of conventional systems. For example, data may be sent between a first system and a second system in order to synchronize the systems. Unfortunately, conventional data transmission techniques have been associated with various limitations.","Just by way of example, traditional methods of synchronizing a calendar meeting between systems may require multiple calls back and forth between the systems, where each call deals with a portion of the meeting (e.g., meeting time, recurrence pattern, attendees, etc.). Additionally, if any errors are encountered during the synchronization, it may be difficult to determine where the error took place and all calls involved with the event may have to be rolled back. Accordingly, it is desirable to provide techniques that improve data transmission between systems.","In accordance with embodiments, there are provided mechanisms and methods for transmitting a group of data elements. These mechanisms and methods for transmitting a group of data elements can enable more efficient data transmission, improved synchronization and data management, etc.","In an embodiment and by way of example, a method for transmitting a group of data elements is provided. In one embodiment, a plurality of data elements is identified. Additionally, the plurality of data elements is grouped. Further, the group of data elements is transmitted, utilizing an application programming interface (API).","While one or more implementations and techniques are described with reference to an embodiment in which transmitting a group of data elements is implemented in a system having an application server providing a front end for an on-demand database system capable of supporting multiple tenants, the one or more implementations and techniques are not limited to multi-tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures, i.e., ORACLE\u00ae, DB2\u00ae by IBM and the like without departing from the scope of the embodiments claimed.","Any of the above embodiments may be used alone or together with one another in any combination. The one or more implementations encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments may have been motivated by various deficiencies with the prior art, which may be discussed or alluded to in one or more places in the specification, the embodiments do not necessarily address any of these deficiencies. In other words, different embodiments may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification, and some embodiments may not address any of these deficiencies.","General Overview","Systems and methods are provided for transmitting a group of data elements.","As used herein, the term multi-tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example, a given application server may simultaneously process requests for a great number of customers, and a given database table may store rows for a potentially much greater number of customers.","Next, mechanisms and methods for transmitting a group of data elements will be described with reference to example embodiments.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","102"]},"Additionally, in one embodiment, the plurality of data elements may include one or more interrelationships between the objects. For example, the plurality of data elements may include an organizational structure of a plurality of objects (e.g., a nesting of objects, etc.). In another example, the plurality of data elements may include a description of one or more objects. For example, the plurality of data elements may include an indication that one or more of the objects are attendees of a meeting, an indication that the meeting is to be held at a particular location, etc. In another embodiment, the plurality of data elements may include one or more instances of metadata.","Further, in yet another embodiment, the plurality of data elements may include one or more actions to be performed. For example, the plurality of data elements may include one or more actions to be performed at a system (e.g., a computer, a server, a client, a multi-tenant on-demand database system, a database, etc.) that receives the data elements. In another example, the plurality of data elements may include one or more instructions to perform one or more of inserting an object, updating an object, deleting an object, matching an object, requesting an object, etc.","Further still, in another embodiment, the plurality of data elements may be associated with an event. For example, the plurality of data elements may be associated with a meeting, an opportunity (e.g., a deal, etc.), etc. Also, in one embodiment, the plurality of data elements may be associated with a record. In yet another embodiment, the plurality of data elements may be dependent upon each other. For example, the plurality of data elements may include one or more of objects, interrelationships between those objects, actions to be performed on those objects, etc.","In still another embodiment, the plurality of data elements may include data that is to be replicated between two systems. For example, the plurality of data elements may be sent from one system to be replicated at another system. In another example, the plurality of data elements may be utilized by applications at each of the systems (e.g., personal information manager software, electronic mail message software, scheduling software, etc.). Further, in another embodiment, the plurality of data elements may be identified at one of the systems (e.g., at a client, at a multi-tenant on-demand database system, etc.)","Additionally, it should be noted that, as described above, such multi-tenant on-demand database system may include any service that relies on a database system that is accessible over a network, in which various elements of hardware and software of the database system may be shared by one or more customers (e.g. tenants). For instance, a given application server may simultaneously process requests for a great number of customers, and a given database table may store rows for a potentially much greater number of customers. Various examples of such a multi-tenant on-demand database system will be set forth in the context of different embodiments that will be described during reference to subsequent figures.","Furthermore, as shown in operation , the plurality of data elements is grouped. In one embodiment, the plurality of data elements may be grouped as a single data structure. For example, the plurality of data elements may be bundled, combined, etc. within a single object, a single request item, a single application programming interface (API) package, etc.","Also, as shown in operation , the group of data elements is transmitted, utilizing an application programming interface (API). In one embodiment, the group of data elements may be transmitted using a single transaction. For example, the group of data elements may be transmitted using a single API call. In another embodiment, the group may be transmitted from one system to another system. For example, the group of data elements may be transmitted from a client computer to a multi-tenant on-demand database system, from a multi-tenant on-demand database system to a client computer, etc.","Additionally, in one embodiment, one or more operations may be performed at a recipient of the group of data elements. For example, one or more actions included within the group of data elements may be performed at the recipient of the group of data elements (e.g., at a system that received the group of data elements, etc.). More specifically, in another example, based on the plurality of data elements, one or more of the plurality of data elements may be inserted at the recipient, updated at the recipient, deleted at the recipient, etc. In yet another example, a search may be performed for one or more of the plurality of data elements at the recipient.","Further, in another embodiment, the recipient of the group of data elements may send a response to the sender of the plurality of data elements. For example, the recipient may send the results of performing the one or more operations at the recipient to the sender. In another embodiment, the response may include a plurality of additional data elements which are grouped and transmitted via a single transaction utilizing the API.","In this way, the plurality of data elements may be sent in a single bulk operation to a recipient. Additionally, interdependencies between the data elements may be sent through one bulk call instead of through multiple separate API calls. Further, the replication of data elements between systems may be performed in a single call without having multiple calls between the systems.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","200"]},"As shown, the exemplary data element grouping  includes a plurality of commands A-N. In one embodiment, the commands A-N may be associated with one or more entities. For example, the commands A-N may be associated with one or more contacts. In another embodiment, the commands A-N may each be associated with an action that is to be performed. For example, each of the commands A-N may instruct the recipient of the data element grouping  to insert an entity into its records, update an entity already in its records, delete an entity from its records, search for an entity meeting predefined criteria (via one or more queries, etc.), etc.","In another embodiment, each of the commands A-N may be contained with the data associated with the command. For example, the command may include a command to insert a contact into a system, and the contact may be contained with the insert commend within the data element grouping . Additionally, in one embodiment, the exemplary data element grouping  may comprise an object. For example, the exemplary data element grouping  may comprise a standard API data structure (e.g., a SObject, etc.), and the commands A-N may be encapsulated within the data structure.","In another embodiment, one or more data elements in the data element grouping  may be placed in a queue. For example, an API may receive the data element grouping  and may put one or more of the commands A-N into an unresolved items queue. Additionally, see, for example, U.S. patent application Ser. No. 12\/949,723, filed Nov. 18, 2010, which is hereby incorporated by reference in its entirety, and which describes exemplary association queues.","In this way, multiple commands A-N may be sent as a batch to a system in one API call via the data element grouping , thereby avoiding multiple transactional calls.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 3","FIGS. 1-2"],"b":["300","300","300"]},"As shown, the event grouping  includes event information . In one embodiment, the event information  may include any information about the event, including a time of the event, a location of the event, etc. Associated with the event information  is a command . In one embodiment, the command  may instruct a recipient system to insert the associated event information , update the associated event information , remove the associated event information , etc.","Additionally, the event grouping  includes data  and  describing associated individuals and associated commands  and . In one embodiment, the data  and  may describe individuals associated with the event (e.g., participants in the event, individuals who cannot make the event, etc.). In another embodiment, the may include an email address of each individual, a first and\/or last name of each individual, etc. Additionally, in yet another embodiment, commands  and  may include commands to be performed on associated data  and  describing associated individuals, respectively.","Further, in one embodiment, the system receiving the event grouping  may perform matching within the system based on the data  and  describing the associated individuals. For example, the system may first insert the event information  if the command  is an insert command, and may then match the data  and  describing associated individuals against data already in the system (e.g., in one or more databases, etc.). Additionally, the system may then resolve any multiple matches between system data and the data  and  and may perform commands  and  based on the match results.","In this way, all data associated with an event may be input to the system in one call utilizing the event grouping , and may therefore avoid any cross call transactions. Additionally, fault tolerance may be improved. For example, if the event is created at the server using event information  and command , but an error occurs (e.g., due to a system error, database crash, etc.) before data  and  describing associated individuals is inserted into the system, all data associated with the event grouping  may be rolled back, thereby avoiding confusion as to where to manually roll back and recover. Additionally, a system that sent the event grouping  may then simply resend the event grouping  to retry synchronizing the event with the receiving system.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 4","FIGS. 1-3"],"b":["400","400","400"]},"As shown, the custom object grouping  includes custom objects , , and . In one embodiment, each of the custom objects , , and  may be distinct from each other. Additionally, the custom object grouping  includes objects A-C are associated with custom object , as well as objects A and B, which are associated with custom object . In one embodiment, objects A-C may be nested within custom object , and objects A and B may be nested within custom object . In this way, a single API call for custom object grouping  may transmit all custom objects , , and  to a destination system.","Additionally, in one embodiment, the custom object grouping  may include a single event model. For example, the single event model may be broken up into two basic concepts with respect to a replication client. The first important idea is for the system platform to allow what is known as a \u201cnested update,\u201d or \u201chierarchical update,\u201d to an event. For instance, DML operations pushed via the API may be allowed to send chunks of modifications in one request item. This request item may contain different object types, (e.g., attendee state changes in addition to event body changes, etc.). Additionally, this idea may be extended further, and may allow for a client to create a pattern and apply any exception or deleted instance state in one request. In another embodiment, this entire chunk of work can be run in a single transaction (e.g., an oracle transaction, etc.), and may allow for a graceful client side error recovery.","Further, in one embodiment, a new system on-demand programming language (e.g., APEX, etc.) package may be created that defines a single new entry point into the system, (e.g., called \u201ccommand,\u201d etc.). In another embodiment, the command entry point may takes a collection of APEX objects that are defined and that represent different types of data operations (e.g., createCommand, updateCommand, deleteCommand, retrieveCommand, etc.). Table 1 illustrates examples of general forms of command objects. Of course, it should be noted that the command objects shown in Table 1 are set forth for illustrative purposes only, and thus should not be construed as limiting in any manner.",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"SObject"},{"entry":"standard sobject as defined by WSDL's"},{"entry":"AssociationControl"},{"entry":"used for create commands that involve serverside matching (sfoMatch)"},{"entry":"may be setup per sfdc profile on the platform, default rules per entity per"},{"entry":"profile"},{"entry":"ChildRelationShipControl"},{"entry":"may define a relationship to use to the parent object, can be defaulted to an"},{"entry":"existing master detail relationship if none is specified"},{"entry":"every nested command element may contain exactly one or null"},{"entry":"top level commands may be null"},{"entry":"may be used to re-parent an existing child record in an update command"},{"entry":"commands"},{"entry":"recursive definition for controlling detail or child object state"},{"entry":"command objects included here may be run in the context for the direct"},{"entry":"parent (e.g., master-detail, etc.)"},{"entry":"sequence of commands may be deterministic, (e.g., they may be run in the"},{"entry":"order they appear, etc.)"},{"entry":"child commands that have children themselves may be run to the bottom"},{"entry":"of the stack before the next command at the same level is processed"},{"entry":"(pattern exception update -> apply attendee state changes)"},{"entry":"each top level command may be considered its own unit of work and may"},{"entry":"run in its own transaction"},{"entry":"the first fatal error encountered in a command stack may roll back the"},{"entry":"commands transaction and that error is returned"},{"entry":"any workflow or APEX trigger actions that fire may also run in the"},{"entry":"command items transaction or workflow and triggers may be disabled"},{"entry":"for the command stack"},{"entry":"*special*"},{"entry":"pattern instances may be modified by originaldatetime for update and"},{"entry":"delete (no concept of create)"},{"entry":"creating attendees may be done through a nested createCommand with the"},{"entry":"appropriate AssociationControl options specified"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Additionally, in one embodiment, each command item may return a CommandResponse object. Table 2 illustrates examples of general forms of CommandResponse objects. Of course, it should be noted that the CommandResponse objects shown in Table 2 are set forth for illustrative purposes only, and thus should not be construed as limiting in any manner.",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"ErrorCode - standard notion"},{"entry":"ErrorDescription - standard"},{"entry":"AssociationQueue response - did a create result in an association queue"},{"entry":"work item"},{"entry":"commandResponses - collection of responses gathered from child"},{"entry":"command items."},{"entry":"These may directly mirror the command items passed up to the new verb"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In another embodiment, a pattern may be created in the system with the command API. In one embodiment, the client application may determine that a pattern should be pushed to the system. Additionally, the client may construct a new createCommand object that represents the pattern master. The sobject value may be a standard system partner WSDL event object. Further, the client may add Outlook attendees directly to the pattern master createCommand item collection using only the information available in Outlook, which may include the name, response status and email address.","Further still, in another embodiment, this attendee state may be wrapped in a createCommand item, which may contain the relationship information to the pattern and any associationQ settings desired. Also, a hosted configuration system for how attendees are resolved, how failed to resolve attendees are treated, etc. may be provided. In addition, the client may then add any instance exceptions to the pattern master createCommand by creating updateCommand items that correspond to all the pattern exceptions that exist on the client. Since updates to instances identified by the instance original datetime may be allowed, this may succeed (in the given context the pattern id from the top level is known).","Furthermore, in yet another embodiment, deleted instances of the client pattern may be handled in a similar way to updates. For example, the instance may be identified by only the original datetime of the instance, though the client may be allowed to provide the actual system id if it is known (though this may not be required).","Further still, in one embodiment, a file based APEX API may be created that may allows a system outlook sync client to match events and contacts in Outlook to records in the system. A user's calendar in Outlook may match their system calendar. Syncing may be bi-directional. Additionally, in another embodiment, the API internal namespace may be \u201csyncapi\u201d and all APEX files may be stored in \u201c\/apex\/syncapi\/<version>\/.\u201d Further, this API may be meant to be consumed by the system outlook client only. Because the client is external, the API may be accessed by anyone who knows the endpoint URL, but these endpoints may not be published, and the API may not be documented externally. Additionally, a client id may be required as part of every API call.","Also, in another embodiment, web service definition language (WSDL) generation may be automatically done by the ApexClassWsdlGenerator class. Additionally, in order to include the right definitions, a hook may be added to the ApexClassWsdlGenerator which may determine which object definitions to use, and a new SyncApiWsdlGenerator may set the hooks correctly. Further, the separate wsdl generator class may requires a separate extension of ApexClassWsdlServlet, called SyncApiWsdlServlet, which in turn may demands a new entry in resin.conf: \u201c<servlet-mapping url-pattern=\u2018\/services\/wsdl\/class\/syncapi\/*\u2019 servlet-class=\u2018common.apex.soap.servlet.SyncApi WsdlServlet\u2019\/>.\u201d","In another embodiment, a sync API may include a collection of file based APEX classes that may allows a client to do the following: 1. Find recurring events in the system that match a set of criteria passed up by the client via the match( ) call; 2. Perform create, update, and delete operations on recurring events and their occurrences via the command( ) call. It may include one piece of the solution to the problem of \u201cHow do I keep my Outlook and system calendars in sync with each other?\u201d Additionally, in one embodiment, the sync API may handle recurring events.","Table 3 illustrates an exemplary transaction flow between a client and the sync API. Of course, it should be noted that the transaction flow shown in Table 3 are set forth for illustrative purposes only, and thus should not be construed as limiting in any manner.",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Client","Sync API"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"match(BaseCommand[ ])"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"--------------------------------------------------->"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"MatchCommandResult[ ]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<---------------------------------------------------"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"command(BaseCommand[ ])"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"--------------------------------------------------->"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CommandDMLResult[ ]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<---------------------------------------------------"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In one embodiment, the match( ) function may be designed to match non-system events in Outlook with corresponding events in the system. Additionally, it may be used to enable the client to add system event IDs to Outlook events. In another embodiment, match( ) may query for recurring event pattern masters, and for events the user owns.","Further, in another embodiment, the command( ) function may be the mechanism by which the client can create event data in the system. In yet another embodiment, the command( ) function may use a silo data structure. Within a given silo, the top level command may describe an operation on the pattern master, and the detail commands may be used for operations on instances of the parent pattern. Also, in one embodiment, match( ) may only be called on pattern masters, and pattern instances may be matched in order to process detail commands. This may be done using the OriginalInstanceDate column on core.activity. In another embodiment, detail commands may include a value for OriginalInstanceDate so that the corresponding pattern occurrence may be found in the system. Further still, in one embodiment, the following CRUD operations may be supported: Pattern Master\u2014CREATE, UPDATE, DELETE; Pattern Instance\u2014UPDATE, DELETE.","In one embodiment, the sync API may implement its own FLS and CRUD checks (e.g., because APEX may not perform these checks itself, etc.). In another embodiment, FLS may be checked on all calls to the Sync API, on all fields that are being read or updated. Additionally, if the who and\/or what fields are populated on an even row, a CRUD check may be performed on these fields before any create, update, or delete of an event row. In yet another embodiment, OriginalInstanceDate may not be passed up on recurrence objects and may be passed up on occurrences. Additionally, IsException may not be passed up. It may not be evaluated on a match call, and may not be an updaeable field. Further, recurrence pattern fields (e.g., recurrenceType, etc.) may only be passed up on recurrence objects. They may be used for match and to create and update rows if they are sent up.","Also, in one embodiment, 3 levels of error handling may be performed. For example, error handing may include responding to failing a single second level command, a silo, or the whole transaction (all silos). In the case of a single command failure, a second level command may be failed if the original instance cannot be found. This may happen due to activity history tracking. In another embodiment, if a silo fails, all operations on both the pattern master and any occurrences already operated on may be rolled back. For example, this may be done using save points. In another embodiment, a silo may also fail if there is a fatal programmer error (e.g., fields not populated or populated incorrectly) or if every operation in the silo cannot be completed for any reason except for failure to find an occurrence. Possible reasons for failing a silo include FLS restrictions, lack of CRUD on a who or what, or other errors. In another embodiment, partial updates to silos may not be supported (e.g., either the whole thing works or the whole thing fails, etc.).","In still another embodiment, a whole transaction (all silos) may fail if there is a condition which a) can be detected early and b) prevents completion of any transactions. In this case, rather than return a CommandDMLResult array, an exception may be thrown that may bubble up to the client. Possible causes may include: lack of the Edit Event permission, database failure, too many silos passed into one of the endpoints, invalid clientId, etc.","Additionally, in one embodiment, in order to support group events (GEs) and group recurring events (GREs), a BaseCommand data structure may need to be updated to accommodate attendees. For example, the client may need to be able to match attendees in outlook to contacts and leads in the system.","Once the attendees are matched, the client may need to be able to perform CUD operations on EventAttendee rows. Table 4 illustrates an exemplary BaseCommand data structure update. Of course, it should be noted that the update shown in Table 4 is set forth for illustrative purposes only, and thus should not be construed as limiting in any manner.",{"@attributes":{"id":"p-0066","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BaseCommand {"]},{"entry":[{},"\u2003\u2003web service CommandTypeEnum commandType;"]},{"entry":[{},"\u2003\u2003web service SObject primarySObject;"]},{"entry":[{},"\u2003\u2003web service BaseCommand[ ] detailCommands;"]},{"entry":[{},"\u2003\u2003web service String[ ] fieldsToNull;"]},{"entry":[{},"\u2003\u2003web service String clientGuid;"]},{"entry":[{},"\u2003\u2003\/\/New members to support attendees"]},{"entry":[{},"\u2003\u2003web service AttendeeObject attendee;"]},{"entry":[{},"\u2003\u2003web service BaseCommand[ ] attendeeCommands;"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0068","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Single Event"]},{"entry":[{},"Required Fields:"]},{"entry":[{},"\u2003commandType"]},{"entry":[{},"\u2003primarySObject"]},{"entry":[{},"Optional Fields:"]},{"entry":[{},"\u2003fieldsToNull"]},{"entry":[{},"\u2003clientGuid"]},{"entry":[{},"May be Null:"]},{"entry":[{},"\u2003detailCommands"]},{"entry":[{},"\u2003attendee"]},{"entry":[{},"\u2003attendeeCommands"]},{"entry":[{},"Group Event"]},{"entry":[{},"Required Fields:"]},{"entry":[{},"\u2003commandType"]},{"entry":[{},"\u2003primarySObject"]},{"entry":[{},"\u2003attendeeCommands"]},{"entry":[{},"Optional Fields:"]},{"entry":[{},"\u2003fieldsToNull"]},{"entry":[{},"\u2003clientGuid"]},{"entry":[{},"May be Null:"]},{"entry":[{},"\u2003detailCommands"]},{"entry":[{},"\u2003attendee"]},{"entry":[{},"Recurring Event"]},{"entry":[{},"Required Fields:"]},{"entry":[{},"\u2003commandType"]},{"entry":[{},"\u2003primarySObject"]},{"entry":[{},"Optional Fields:"]},{"entry":[{},"\u2003fieldsToNull"]},{"entry":[{},"\u2003clientGuid"]},{"entry":[{},"\u2003detailCommands"]},{"entry":[{},"May be Null:"]},{"entry":[{},"\u2003attendee"]},{"entry":[{},"\u2003attendeeCommands"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Further, in one embodiment, the primarySObject on a top level Recurring Event Command object may be the pattern master. Table 6 illustrates an exemplary group recurring event object. Of course, it should be noted that the object shown in Table 6 is set forth for illustrative purposes only, and thus should not be construed as limiting in any manner.",{"@attributes":{"id":"p-0070","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Group Recurring Event"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Required Fields:"]},{"entry":[{},"\u2003commandType"]},{"entry":[{},"\u2003primarySObject"]},{"entry":[{},"\u2003attendeeCommands"]},{"entry":[{},"Optional Fields:"]},{"entry":[{},"\u2003fieldsToNull"]},{"entry":[{},"\u2003clientGuid"]},{"entry":[{},"\u2003detailCommands"]},{"entry":[{},"May be Null:"]},{"entry":[{},"\u2003attendee"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Further still, in another embodiment, a detail command may represent an operation on an occurrence of a pattern. If the occurrence has attendees, those may be represented in the attendeeCommands list. A detail command must be parented by a top level command. A detail command may not contain detail commands. Table 7 illustrates an exemplary detail command object. Of course, it should be noted that the object shown in Table 7 is set forth for illustrative purposes only, and thus should not be construed as limiting in any manner.",{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 7"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Required Fields:"]},{"entry":[{},"\u2003commandType"]},{"entry":[{},"\u2003primarySObject"]},{"entry":[{},"Optional Fields:"]},{"entry":[{},"\u2003fieldsToNull"]},{"entry":[{},"\u2003clientGuid"]},{"entry":[{},"\u2003attendeeCommands"]},{"entry":[{},"May be Null:"]},{"entry":[{},"\u2003detailCommands"]},{"entry":[{},"\u2003attendee"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Also, in yet another embodiment, an attendee command may represent an operation on an AttendeeObject. An attendee command may be parented by either a top level or a detail command. A detail command may not contain detail commands. Table 8 illustrates an exemplary attendee command object. Of course, it should be noted that the object shown in Table 8 is set forth for illustrative purposes only, and thus should not be construed as limiting in any manner.",{"@attributes":{"id":"p-0074","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 8"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Required Fields:"]},{"entry":[{},"\u2003commandType"]},{"entry":[{},"\u2003attendee"]},{"entry":[{},"Optional Fields:"]},{"entry":[{},"\u2003clientGuid"]},{"entry":[{},"May be Null:"]},{"entry":[{},"\u2003detailCommands"]},{"entry":[{},"\u2003primarySObject"]},{"entry":[{},"\u2003fieldsToNull"]},{"entry":[{},"\u2003attendeeCommands"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 6","b":["610","610","612","614","616","617","618","620","622","624","626","628","610"]},"Environment  is an environment in which an on-demand database system exists. User system  may be any machine or system that is used by a user to access a database user system. For example, any of user systems  can be a handheld computing device, a mobile phone, a laptop computer, a work station, and\/or a network of computing devices. As illustrated in  (and in more detail in ) user systems  might interact via a network  with an on-demand database system, which is system .","An on-demand database system, such as system , is a database system that is made available to outside users that do not need to necessarily be concerned with building and\/or maintaining the database system, but instead may be available for their use when the users need the database system (e.g., on the demand of the users). Some on-demand database systems may store information from one or more tenants stored into tables of a common database image to form a multi-tenant database system (MTS). Accordingly, \u201con-demand database system \u201d and \u201csystem \u201d will be used interchangeably herein. A database image may include one or more database objects. A relational database management system (RDMS) or the equivalent may execute storage and retrieval of information against the database object(s). Application platform  may be a framework that allows the applications of system  to run, such as the hardware and\/or software, e.g., the operating system. In an embodiment, on-demand database system  may include an application platform  that enables creation, managing and executing one or more applications developed by the provider of the on-demand database system, users accessing the on-demand database system via user systems , or third party application developers accessing the on-demand database system via user systems .","The users of user systems  may differ in their respective capacities, and the capacity of a particular user system  might be entirely determined by permissions (permission levels) for the current user. For example, where a salesperson is using a particular user system  to interact with system , that user system has the capacities allotted to that salesperson. However, while an administrator is using that user system to interact with system , that user system has the capacities allotted to that administrator. In systems with a hierarchical role model, users at one permission level may have access to applications, data, and database information accessible by a lower permission level user, but may not have access to certain applications, database information, and data accessible by a user at a higher permission level. Thus, different users will have different capabilities with regard to accessing and modifying application and database information, depending on a user's security or permission level.","Network  is any network or combination of networks of devices that communicate with one another. For example, network  can be any one or any combination of a LAN (local area network), WAN (wide area network), telephone network, wireless network, point-to-point network, star network, token ring network, hub network, or other appropriate configuration. As the most common type of computer network in current use is a TCP\/IP (Transfer Control Protocol and Internet Protocol) network, such as the global internetwork of networks often referred to as the \u201cInternet\u201d with a capital \u201cI,\u201d that network will be used in many of the examples herein. However, it should be understood that the networks that the one or more implementations might use are not so limited, although TCP\/IP is a frequently implemented protocol.","User systems  might communicate with system  using TCP\/IP and, at a higher network level, use other common Internet protocols to communicate, such as HTTP, FTP, AFS, WAP, etc. In an example where HTTP is used, user system  might include an HTTP client commonly referred to as a \u201cbrowser\u201d for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system  and network , but other techniques might be used as well or instead. In some implementations, the interface between system  and network  includes load sharing functionality, such as round-robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server, each of the plurality of servers has access to the MTS' data; however, other alternative configurations may be used instead.","In one embodiment, system , shown in , implements a web-based customer relationship management (CRM) system. For example, in one embodiment, system  includes application servers configured to implement and execute CRM software applications as well as provide related data, code, forms, webpages and other information to and from user systems  and to store to, and retrieve from, a database system related data, objects, and Webpage content. With a multi-tenant system, data for multiple tenants may be stored in the same physical database object, however, tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant's data, unless such data is expressly shared. In certain embodiments, system  implements applications other than, or in addition to, a CRM application. For example, system  may provide tenant access to multiple hosted (standard and custom) applications, including a CRM application. User (or third party developer) applications, which may or may not include CRM, may be supported by the application platform , which manages creation, storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .","One arrangement for elements of system  is shown in , including a network interface , application platform , tenant data storage  for tenant data , system data storage  for system data  accessible to system  and possibly multiple tenants, program code  for implementing various functions of system , and a process space  for executing MTS system processes and tenant-specific processes, such as running applications as part of an application hosting service. Additional processes that may execute on system  include database indexing processes.","Several elements in the system shown in  include conventional, well-known elements that are explained only briefly here. For example, each user system  could include a desktop personal computer, workstation, laptop, PDA, cell phone, or any wireless access protocol (WAP) enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system  typically runs an HTTP client, e.g., a browsing program, such as Microsoft's Internet Explorer browser, Netscape's Navigator browser, Opera's browser, or a WAP-enabled browser in the case of a cell phone, PDA or other wireless device, or the like, allowing a user (e.g., subscriber of the multi-tenant database system) of user system  to access, process and view information, pages and applications available to it from system  over network . Each user system  also typically includes one or more user interface devices, such as a keyboard, a mouse, trackball, touch pad, touch screen, pen or the like, for interacting with a graphical user interface (GUI) provided by the browser on a display (e.g., a monitor screen, LCD display, etc.) in conjunction with pages, forms, applications and other information provided by system  or other systems or servers. For example, the user interface device can be used to access data and applications hosted by system , and to perform searches on stored data, and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above, embodiments are suitable for use with the Internet, which refers to a specific global internetwork of networks. However, it should be understood that other networks can be used instead of the Internet, such as an intranet, an extranet, a virtual private network (VPN), a non-TCP\/IP based network, any LAN or WAN or the like.","According to one embodiment, each user system  and all of its components are operator configurable using applications, such as a browser, including computer code run using a central processing unit such as an Intel Pentium\u00ae processor or the like. Similarly, system  (and additional instances of an MTS, where more than one is present) and all of their components might be operator configurable using application(s) including computer code to run using a central processing unit such as processor system , which may include an Intel Pentium\u00ae processor or the like, and\/or multiple processor units. A computer program product embodiment includes a machine-readable storage medium (media) having instructions stored thereon\/in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system  to intercommunicate and to process webpages, applications and other data and media content as described herein are preferably downloaded and stored on a hard disk, but the entire program code, or portions thereof, may also be stored in any other volatile or non-volatile memory medium or device as is well known, such as a ROM or RAM, or provided on any media capable of storing program code, such as any type of rotating media including floppy disks, optical discs, digital versatile disk (DVD), compact disk (CD), microdrive, and magneto-optical disks, and magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and\/or data. Additionally, the entire program code, or portions thereof, may be transmitted and downloaded from a software source over a transmission medium, e.g., over the Internet, or from another server, as is well known, or transmitted over any other conventional network connection as is well known (e.g., extranet, VPN, LAN, etc.) using any communication medium and protocols (e.g., TCP\/IP, HTTP, HTTPS, Ethernet, etc.) as are well known. It will also be appreciated that computer code for implementing embodiments can be implemented in any programming language that can be executed on a client system and\/or server or server system such as, for example, C, C++, HTML, any other markup language, Java\u2122, JavaScript, ActiveX, any other scripting language, such as VBScript, and many other programming languages as are well known may be used. (Java\u2122 is a trademark of Sun Microsystems, Inc.).","According to one embodiment, each system  is configured to provide webpages, forms, applications, data and media content to user (client) systems  to support the access by user systems  as tenants of system . As such, system  provides security mechanisms to keep each tenant's data separate unless the data is shared. If more than one MTS is used, they may be located in close proximity to one another (e.g., in a server farm located in a single building or campus), or they may be distributed at locations remote from one another (e.g., one or more servers located in city A and one or more servers located in city B). As used herein, each MTS could include one or more logically and\/or physically connected servers distributed locally or across one or more geographic locations. Additionally, the term \u201cserver\u201d is meant to include a computer system, including processing hardware and process space(s), and an associated storage system and database application (e.g., OODBMS or RDBMS) as is well known in the art. It should also be understood that \u201cserver system\u201d and \u201cserver\u201d are often used interchangeably herein. Similarly, the database object described herein can be implemented as single databases, a distributed database, a collection of distributed databases, a database with redundant online or offline backups or other redundancies, etc., and might include a distributed database or storage network and associated processing intelligence.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 7","FIG. 7","FIG. 7","FIG. 7","FIG. 7"],"b":["610","616","612","612","612","612","612","614","616","616","622","623","624","625","730","732","734","736","738","700","700","702","704","710","712","714","716","610"],"sub":["1","N"]},"User system , network , system , tenant data storage , and system data storage  were discussed above in . Regarding user system , processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices, short term, and\/or long term memory. Input system C may be any combination of input devices, such as one or more keyboards, mice, trackballs, scanners, cameras, and\/or interfaces to networks. Output system D may be any combination of output devices, such as one or more monitors, printers, and\/or interfaces to networks. As shown by , system  may include a network interface  (of ) implemented as a set of HTTP application servers , an application platform , tenant data storage , and system data storage . Also shown is system process space , including individual tenant process spaces  and a tenant management process space . Each application server  may be configured to tenant data storage  and the tenant data  therein, and system data storage  and the system data  therein to serve requests of user systems . The tenant data  might be divided into individual tenant storage areas , which can be either a physical arrangement and\/or a logical arrangement of data. Within each tenant storage area , user storage  and application metadata  might be similarly allocated for each user. For example, a copy of a user's most recently used (MRU) items might be stored to user storage . Similarly, a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI  provides a user interface and an API  provides an application programmer interface to system  resident processes to users and\/or developers at user systems . The tenant data and the system data may be stored in various databases, such as one or more Oracle\u2122 databases.","Application platform  includes an application setup mechanism  that supports application developers' creation and management of applications, which may be saved as metadata into tenant data storage  by save routines  for execution by subscribers as one or more tenant process spaces  managed by tenant management process  for example. Invocations to such applications may be coded using PL\/SOQL  that provides a programming language style interface extension to API . A detailed description of some PL\/SOQL language embodiments is discussed in commonly owned co-pending U.S. Provisional Patent Application 60\/828,192 entitled, PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS, by Craig Weissman, filed Oct. 4, 2006, which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes, which manages retrieving application metadata  for the subscriber making the invocation and executing the metadata as an application in a virtual machine.","Each application server  may be communicably coupled to database systems, e.g., having access to system data  and tenant data , via a different network connection. For example, one application server might be coupled via the network  (e.g., the Internet), another application server might be coupled via a direct network link, and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol (TCP\/IP) are typical protocols for communicating between application servers  and the database system. However, it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.","In certain embodiments, each application server  is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason, there is preferably no server affinity for a user and\/or organization to a specific application server . In one embodiment, therefore, an interface system implementing a load balancing function (e.g., an F5 Big-IP load balancer) is communicably coupled between the application servers  and the user systems  to distribute requests to the application servers . In one embodiment, the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms, such as round robin and observed response time, also can be used. For example, in certain embodiments, three consecutive requests from the same user could hit three different application servers , and three requests from different users could hit the same application server . In this manner, system  is multi-tenant, wherein system  handles storage of, and access to, different objects, data and applications across disparate users and organizations.","As an example of storage, one tenant might be a company that employs a sales force where each salesperson uses system  to manage their sales process. Thus, a user might maintain contact data, leads data, customer follow-up data, performance data, goals and progress data, etc., all applicable to that user's personal sales process (e.g., in tenant data storage ). In an example of a MTS arrangement, since all of the data and the applications to access, view, modify, report, transmit, calculate, etc., can be maintained and accessed by a user system having nothing more than network access, the user can manage his or her sales efforts and cycles from any of many different user systems. For example, if a salesperson is visiting a customer and the customer has Internet access in their lobby, the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.","While each user's data might be separate from other users' data regardless of the employers of each user, some data might be organization-wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus, there might be some data structures managed by system  that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors, the MTS should have security protocols that keep data, applications, and application use separate. Also, because many tenants may opt for access to an MTS rather than maintain their own system, redundancy, up-time, and backup are additional functions that may be implemented in the MTS. In addition to user-specific data and tenant specific data, system  might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports, news, postings, and the like that are sharable among tenants.","In certain embodiments, user systems  (which may be client systems) communicate with application servers  to request and update system-level and tenant-level data from system  that may require sending one or more queries to tenant data storage  and\/or system data storage . System  (e.g., an application server  in system ) automatically generates one or more SQL statements (e.g., one or more SQL queries) that are designed to access the desired information. System data storage  may generate query plans to access the requested data from the database.","Each database can generally be viewed as a collection of objects, such as a set of logical tables, containing data fitted into predefined categories. A \u201ctable\u201d is one representation of a data object, and may be used herein to simplify the conceptual description of objects and custom objects. It should be understood that \u201ctable\u201d and \u201cobject\u201d may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example, a CRM database may include a table that describes a customer with fields for basic contact information such as name, address, phone number, fax number, etc. Another table might describe a purchase order, including fields for information such as customer, product, sale price, date, etc. In some multi-tenant database systems, standard entity tables might be provided for use by all tenants. For CRM database applications, such standard entities might include tables for Account, Contact, Lead, and Opportunity data, each containing pre-defined fields. It should be understood that the word \u201centity\u201d may also be used interchangeably herein with \u201cobject\u201d and \u201ctable\u201d.","In some multi-tenant database systems, tenants may be allowed to create and store custom objects, or they may be allowed to customize standard entities or objects, for example by creating custom fields for standard objects, including custom index fields. U.S. patent application Ser. No. 10\/817,161, filed Apr. 2, 2004, entitled \u201cCustom Entities and Fields in a Multi-Tenant Database System\u201d, and which is hereby incorporated herein by reference, teaches systems and methods for creating custom objects as well as customizing standard objects in a multi-tenant database system. In certain embodiments, for example, all custom entity data rows are stored in a single multi-tenant physical table, which may contain multiple logical tables per organization. It is transparent to customers that their multiple \u201ctables\u201d are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.","While one or more implementations have been described by way of example and in terms of the specific embodiments, it is to be understood that one or more implementations are not limited to the disclosed embodiments. To the contrary, it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore, the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the following drawings like reference numbers are used to refer to like elements. Although the following figures depict various examples, the one or more implementations are not limited to the examples depicted in the figures.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 7","FIG. 4"]}]},"DETDESC":[{},{}]}
