---
title: Base rolling engine for data transfer and synchronization system
abstract: A base rolling engine for collapsing data packages stored in a data transfer and synchronization system. A first data package is provided. The first data package has a first transaction including an identification number, an action, and a plurality of fields. Each field has an attribute representing change information. A second data package is also provided. The second data package has a second transaction made subsequent to the first transaction. The second transaction has an identification number, an action, and a field with an attribute. The base rolling engine determines whether the identification number of the second transaction corresponds to the identification number of the first transaction. The base rolling engine also determines whether the field of the second transaction corresponds to one of the fields of the first transaction. When the identification numbers of the first and second transactions correspond to one another, and the field of the second transaction corresponds to one of the fields of the first transaction, the first and second data packages are combined. A combined data package is thus defined having a combined transaction with the identification number. The combined data package replaces the second data package, and the first data package is deleted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07035878&OS=07035878&RS=07035878
owner: fusionOne, Inc.
number: 07035878
owner_city: San Jose
owner_country: US
publication_date: 20000817
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["REFERENCE TO EARLIER FILED APPLICATIONS","COPYRIGHT NOTICE","FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This is a continuation-in-part of the following co-pending applications: U.S. application Ser. No. 09\/490,550, filed Jan. 25, 2000, U.S. application Ser. No. 091491,675 and U.S. application Ser. No. 09\/491,694, filed Jan. 26, 2000, all entitled \u201cData Transfer and Synchronization System.\u201d","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the U.S. Patent and Trademark Office file or records, but otherwise reserves all copyright rights whatsoever.","The invention relates to the transference of data between two systems independent of the form in which the data is kept on the respective systems, and in particular to providing an efficient means of communicating data between systems and devices.","The growth of computing-related devices has not been limited to personal computers or work stations. The number of personal computing devices has grown substantially in both type and format. Small, hand-held computers carry a multitude of contact, personal, document, and other information and are sophisticated enough to allow a user to fax, send e-mails, and communicate in other ways wirelessly. Even advanced cellular phones carry enough memory and processing power to store contact information, surf the web, and provide text messaging. Along with the growth in the sophistication of these devices, the need to transfer information between them has grown significantly as well.","With a multitude of different device types on the market, keeping information synchronized among the different devices has become increasingly problematic. For example, an individual keeps a calendar of information on a personal computer in his or her office using a particular personal information manager application. This individual would generally like to have the same information available in a cellular phone, hand-held organizer, and perhaps a home personal computer. The individual may additionally have a notebook computer which requires synchronizing file data such as presentations or working documents between the notebook and the office computer.","Until now, synchronization between both documents and personal information managers has occurred through direct connection between the devices, and generally directly between applications such as a personal information manager in one device and a personal information manager in another device or using an intermediary sync-mapping program. One example of this is the prevalent use of the 3Com Palm\u00ae OS-based organizer, such as the 3Com Palm\u00ae series of computing devices, which uses its own calendaring system, yet lets users synchronize the data therein with a variety of different personal information manager software packages, such as Symantec's ACT!\u2122, Microsoft's Outlook\u00ae, and other systems. In this example, an intermediary synchronization program such as Puma Technology, Inc.'s Intellisync\u00ae is required. Intellisync\u00ae is an application program which runs on both the hand-held device and the computer which stores the information data and maps data systems between non-uniform data records. In other cases, direct transfer between applications such as transfer between Microsoft's Outlook\u00ae computer-based client and Microsoft's Windows CE \u201cPocket OutlooK\u201d application, is possible. Nevertheless, in both cases, synchronization occurs through direct connection between a personal computer and the personal computing device. While this connection is generally via a cable directly connecting, for example, Palm\u00ae device in a cradle to the personal computer, the connection may be wireless as well.","One component of these synchronization systems is that the synchronization process must be able to delineate between when changes are made to specific databases and must make a decision about whether to replace the changed field. Normally, this is measured by a change in one database, and no-change in a second database. In some cases, both databases will have changed between syncs. In this case, the sync operation must determine which of the two changes which has been a made is to \u201cwin\u201d and replace the other during the sync. Generally, this determinant of whether a conflict exists allows some means for letting the user resolve the conflict.","In a technical sense, synchronization in this manner is generally accomplished by the copying of full records between systems. At some level, a user is generally required to map data fields from one application to another and specify which data fields are assigned to which corresponding field in a different device. Less mapping is required where developers more robustly support various platforms of applications.","In many instances, the data to be synchronized is generally in the form of text data such as records of addresses, contact information, calendar information, notes and other types of contact information. In certain instances, data to be synchronized will be binary format of executable files or word processor-specific documents. In many cases where document synchronization is required, the synchronization routine simply determines whether or not the documents in question have changed, and uses a time-based representation to determine which of the two files is newer, and replaces the older file with the newer file to achieve synchronization, as long as the older of the two files was in fact not changed. This is the model used in the familiar \u201cBriefcase\u201d function in Microsoft Windows-based systems. If both files have changed, then the synchronization routine presents the option of conflict resolution to the user. Such synchronization schemes are generally relatively inefficient since they require full band-width of the document or binary file to be transferred via the synchronization link. In addition, at some level the synchronization programs require interaction by the user to map certain fields between different programs.","One of the difficulties in providing synchronization between different computing devices is that the applications and platforms are somewhat diverse. Nevertheless, all synchronization programs generally require certain functions in order to be viable for widespread usage. In particular, synchronization programs must work with popular applications on various platforms. Sync applications must allow for conflicts resolution when changes are made to the same information on different devices between syncing events. They must provide synchronization for all types of formats of data, whether it be text data in the form of contacts, e-mails, calendar information, memos or other documents, or binary data in the form of documents or programs in particular types of formats.","In a broader sense, applications which efficiently synchronize data between disparate types of devices can provide advantages in applications beyond synchronizing individual, personal information between, for example, a personal information manager hardware device such as a Palm\u00ae computing device, and a personal computer. The same objectives which are prevalent in developing data transfer between personal information management (PIM) devices and desktop systems lend themselves to furthering applications requiring data transfer between other types of devices, on differing platforms. These objectives include speed, low bandwidth, accuracy, and platform independence.","For example, current e-mail systems use a system which is somewhat akin to the synchronization methods used for disparate devices in that an entire message or file is transferred as a whole between different systems. When a user replies to an e-mail, generally the entire text of the original message is returned to the sender, who now has two copies of the e-mail text he\/she originally sent out. The same is true if an e-mail attachment is modified and returned. All of the text which is the same between both systems is essentially duplicated on the originator's system.","The present invention relates to a base rolling engine for collapsing data packages stored in a data transfer and synchronization system. A first data package is provided. The first data package has a first transaction including an identification number, an action, and a plurality of fields. Each field has an attribute representing change information. A second data package is also provided. The second data package has a second transaction made subsequent to the first transaction. The second transaction has an identification number, an action, and a field with an attribute. The base rolling engine determines whether the identification number of the second transaction corresponds to the identification number of the first transaction. The base rolling engine also determines whether the field of the second transaction corresponds to one of the fields of the first transaction. When the identification numbers of the first and second transactions correspond to one another, and the field of the second transaction corresponds to one of the fields of the first transaction, the first and second data packages are combined. A combined data package is thus defined having a combined transaction with the identification number. The second data package is replaced with the combined data package.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["110","110"]},"In , System A includes a functional block  representing a differencing transmitter. System B includes a functional block  representing a differencing receiver. The differencing transmitter , upon receipt of a control signal enabling operation of the transmitter, examines a specified data structure of information which is to be transmitted to system B. Differencing transmitter  extracts such information from System A and converts the information extracted into difference information \u0394. Difference information \u0394 comprises only the changes to System B's data which have occurred on System B and instructions for implementing those changes. Hence, if the data to be transferred is a change to a file which exists on system B, difference information \u0394 comprises only the differences in such file and where such differences occur. If the data does not exist at all on System B, the difference information \u0394 will be the entire file. Difference information \u0394 received by differencing receiver  at System B is reconstructed at System B, and the changes reflected therein are updated on System B. For example, if System A and System B are two computers and an update for certain binary files on System A is required, the differencing transmitter on System A will extract the differences in the file known to exist on System B and any new files, and transmit only those differences (an instructions for where to insert those differences) to the differencing receiver . Differencing receiver  will interpret the difference information (\u0394) and reconstruct the binary files on System B. In this manner, the information on System B is updated without the need to transfer the entire binary files between the Systems.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 2"],"b":["104","104","104"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3","b":["102","300","300","300","300","300"]},"Once again, the storage server  is coupled by a direct connection  to both System A and System B. Storage server  may be a server specifically adapted to receive differencing information \u0394 from the receiver  and provide it to the transmitter . In one embodiment, server  includes specific functional routines for enabling this transfer. Alternatively, server  comprises standard information server types which respond to standard Internet communication protocols such as file transfer protocol (FTP), or hypertext transfer protocol (HTTP).",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4","b":["300","110","104","104","300","300"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5","b":["104","102","104","100","300","300","102","300","300","300"],"sub":["2 ","4 "]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 6","b":["300","300","104","104","300"],"i":["a ","a "]},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 7","FIG. 6","FIG. 7"],"b":["700","700","300","300","700","702","704","708","710","712","702","712","300","300","300","300"],"sub":["1","2","1","2 ","1","2 "]},"In the following description, an embodiment wherein the differencing receiver, transmitter, and synchronizer are described will be discussed with respect to its use in synchronizing contact information, calendar information, and binary file information between a plurality of different devices in the context of data synchronization. It will be readily understood that the system of the present invention is not limited to synchronization applications, or applications dependent upon specific types of data, such as contact information or scheduling information. In particular, it will be readily understood that the transmission of data comprising only the differences in data between two systems via routines which extract the data and reassemble data on the various systems, represents a significant advancement in the efficient transmission of data. The present invention allows for optimization in terms of a reduction in the bandwidth utilized to transmit data between two systems, since only changes to data are transferred. This consequently increases the speed at which such transactions can take place since the data which needs to be transmitted is substantially smaller than it would be were entire files transferred between the systems.","Generally, the system comprises client software which provides the functions of the differencing transmitter , differencing receiver , and differencing synchronizer  in the form of a device engine. The device engine includes at least one component particular to the type of device on which the device engine runs, which enables extraction of information from the device and conversion of the information to difference information, and transmission of the difference information to the storage server. This allows the replication of information across all systems coupled to the system of the present invention. Although the storage servers  utilized in the system of the present invention may be any type of storage server, such as an Internet server or an FTP server, and may be provided from any source, such as any Internet service provider (ISP), particular aspects of a storage server which may be useful and which may be customized to optimize transfer of information between systems coupled as part of the present invention will be described below. Synchronization of devices utilizing the synchronization system of the present invention is possible as long as an Internet connection between the devices is available. The Internet connection between the devices or between the devices and a server, need not exist at the same point in time, and new devices may be added to the system of the present invention at any point in time without the loss of information. The system provides totally transparent access to information and the device engine on each device provides an operating system independent extension which allows seamless integration of the personal information services in accordance with the present invention. In addition, only those changes to the information which are required to be forwarded to other systems on the system of the present invention are transmitted to enable exceptionally fast response times. In a still further aspect of the invention, information which is transferred in this manner is encrypted to ensure security over the public portions of the Internet.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 8"},"In , two types of device engines are shown. One type is situated on the various devices and outputs change data to the server; and the other type is embodied on the server and receives device-generated change information from the device. An alternative exemplary embodiment includes a hybrid of the two, that is, a portion of the device engine is on the device and a portion on the server.","As shown in , any number and type of devices - may be utilized in accordance with the system of the present invention. A telephone  may comprise a cellular phone or a standard POTS-connected telephone. Telephone  may include contact information and, as is supported with a newer generation of cellular telephones, appointments and task data stored in a data structure . The application  which utilizes the application data  comprising such information is all stored in the telephone unit . Likewise; a personal digital assistant such as a Palm\u00ae computing device  includes application  and application data  which may include information such as contacts, appointments and tasks, and may also include file information such as documents which are created and stored on the PDA . Device  is represented as a Windows personal computer running an operating system such as Microsoft Windows 95, 98, NT or 2000. Applications  which may be running on device  include the Windows operating system itself, Microsoft Outlook, Symantec's ACT Personal Information Manager, Goldmine Software's Goldmine, Lotus Organizer, Microsoft's Internet Explorer web browser, Netscape's Communicator Suite, Qualcomm's Eudora e-mail, and various other programs, each of which has its own set of application data  which is required to be synchronized not only with devices outside the system , but also between devices and applications within the system itself. Finally, a dedicated web browser client  is shown which couples via the Internet to web portal applications  which have their own set of application data . Unlike devices  which store the application and application data substantially in their own hardware, web portal applications are provided on a separate server and provided to browser  via an Internet connection. Nevertheless, the web portal application stored on the portal application provider includes a set of application data  which a user may wish to synchronize. For example, a large web portal such as Yahoo! and Snap.com provide services such as free e-mail and contact storage to their users. A user may wish to synchronize this with applications running on their cellular phone, PDA, or Windows devices.","In order to access the specific application data of each of the systems shown in , a device engine is associated with each type of device. A cellular device engine  communicates and incorporates itself with the application data  of the cellular phone. Likewise, a PDA device engine  is provided, which may be based on either the Palm\u00ae operating system, Windows CE operating system, or other PDA-type operating systems as necessary. A Windows-based device engine  includes a mechanism, discussed below, for extracting application data  from supported Windows applications , and a web services device engine  incorporates to extract application data  from web portal applications .","As shown in , some device engines are provided entirely on the device (and are referred to herein as desktop device engines), while others include components a the back end server (which may comprise storage server  or a specialized server, as shown in ) This is illustrated generally by lines , , , and  in FIG. . Also, in , elements above dashed line  are provided by an administrator or service provider of the system of the present invention. Each of the device engines , ,  and  is configured relative to the type of device on which it resides. For example, the Cell phone device engine  includes one or more components arranged on the phone while others are on server . Conversely, device engine  resides entirely on the windows device .","Data from each of the devices is coupled via an Internet connection  with a storage server . As noted above, storage server  may be a generic storage server or it may be a storage server specifically adapted for use with the system of the present invention as discussed below. One or more of the storage servers  are used to communicate transactions amongst the collection of systems , , , . It should be readily recognized that any number of different types of systems , , ,  may be provided in accordance with the present invention and incorporated into the system. However, for brevity, not all the different types of commercially available computing devices which are currently in use or in development, in which the system of the present invention may be incorporated, are listed.","In its simplest embodiment, the storage server  is simply a dumb storage server and each of the device engines transmits only difference information thereto to be stored in a particular location accessible by other device engines in the system. In one embodiment, each device engine implements all processing required to keep all the systems fully synchronized. Only one device engine needs to be coupled to the storage server  at one particular point in time. This permits synchronization of multiple systems in a disconnected fashion. Each device engine will download all transactions encapsulating changes that have occurred since the last synchronization from the server and apply them to the particular device.","The change or difference information (\u0394) is provided in one or more data packages, the structure of which is described herein. Each data package describes changes to any and all transfer information across all device engines, including but not limited to application data, files, folders, application settings, and the like. Each device engine can control the download of data packages that include classes of information that apply to the specified local device , ,  or  attached to that specific device engine. For example, device engine  will only need to work with changes to information describing contact names and phone numbers in application data , while device engine  will be required to work with changes to e-mail, changes to document files, notes, as well as contact and address information since the application data  is much more extensive than application data .","Each device engine includes compression\/decompression and encryption\/decryption components which allow encryption and\/or compression of the data packages transmitted across Internet connection . It should be recognized that compression and encryption of the data packages may be optionally provided. It is not required in accordance with the present invention. Each device engine performs mapping and translation steps necessary for applying the data packages to the local format required for that type of information in the application data stores -. The device engine also includes components which allow it to track ambiguous updates in cases where users have changed data to a particular data field on two different systems simultaneously since the last update. In this case, the device engine includes a mechanism for drawing this to the attention of the user and allowing the user to resolve the conflict.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 9A","FIG. 9A","FIG. 9","FIGS. 1-7"],"b":["810","850","850","860","104"]},"A device engine exists for each and every device that makes up a user's personal information network of devices in the system. As shown in , each device engine  includes an application object . The application object is specific to each particular application  and provides a standard interface between the device engine and the balance of the data transmission system of the invention, and the application . Details of the application object will be described in further detail below. The application object is a pluggable architecture which supports a wide variety of vendor-unique applications. The job of the application object is to map data from the application into a temporary or \u201cuniversal\u201d data structure by connecting to the application via any number of standard interfaces to gain access to the applications data. The data structure of the application object puts the data in a generic or \u201cuniversal data\u201d format which may be used by the device engine components to generate data packages for provision to the storage server.","Also provided is an application object store (AOS)  which includes a copy of the device's data at a point just after the previous data extraction and synchronization occurred. Application object store  is a mirrored interface which stores a snapshot of the previous state of the data from the application object  in the device engine. The size of the AOS will depend on the data being collected by each device engine.","The generic output of the application object is provided to a delta module . Delta module  is a differencing engine which calculates differences in data between the output of the application object  and the copy of the data which is provided in an application object store (AOS) . The actual differencing and patch routine can comprise a routine such as XDelta or YDelta. The delta module  will be referred to herein alternatively in certain portions of the description as \u201cCStructuredDelta.\u201d In addition, the difference information is alternatively referred to herein as a \u201cchange log.\u201d Each change log (or set of difference information) is a self describing series of sync transactions. As described below, the change log may be encrypted and compressed before output to the network.","Hence, during a sync, the Application Object will, using a mechanism discussed below, extract the data of each application in the device and convert it to a universal data format. The delta module will then generate a difference set by comparing the output of the Application Object and the AOS. This difference information is forwarded to the encryption and compression routines for output to the storage server  in the form of a data package. Alternatively, the data from one application can be used to synchronize to data in another application in, for example, a windows environment, as shown by arrow  in FIG. .","It should be specifically noted that the application object may interface directly unstructured binary data or with structured application data. The differencing routine supports both uses of the delta module  in comparison generation.","In some cases, operation of the application object and delta module is simplified by the fact that some applications, such as PDA's, have the ability to output changes to its data. In such cases, the delta module  need only provide the data into the data package, since comparison to an AOS is not required\u2014the application already includes a mechanism for tracking changes made to its own data. However, in many cases the applications provide, at most, a standard interface to access the data, such as Microsoft's OBDC interface, the Microsoft standard Application Programming Interface (API), or other similar standard interfaces.","Device engine  further includes a versioning module which applies a version number per object in the data package. As explained further below, each object in the data package is assigned a universally unique ID (UUID). Hence, unlike many prior synchronization systems, the system of the present invention does not sync data solely by comparing time stamps of two sets of data. Versioning module  allows each device engine to check the state of the last synchronization against data packs which have been provided to the storage server to determine which data packages to apply. This allows the device engine to sync itself independently of the number of times another device engine uploads changes to the storage server. In other words, a first device engine does not care how many times a second device engine uploads data packages to the server.","An events module  controls synchronization initialization events. Items such as when to sync, how to sync, trigger the delta module  to perform a synchronization operation.","A user interface  is provided to allow additional functional features to a system user of the particular device to which the device engine  is coupled. The user interface is coupled to a conflict resolution module , a filtering module , and a field mapping module . Each of the modules provides the functionality both necessary for all synchronization programs, and which users have come to expect.","Filtering module  allows filtering for types of content based on, for example, a field level content search. The field mapping module  allows for the user to re-map certain interpretations of items which were provided in the document stream. For example, if the device engine  is operating on a personal computer, and a synchronization is occurring between the personal computer and a notebook computer, and the user has a \u201cmy documents\u201d directory on the personal computer which he wishes to map to a different directory on the notebook computer, the field mapping module  allows for this re-mapping to occur. It should be recognized that the field mapping module allows for changes in directing the output of the data package. The field mapping module  is not necessary to map particular data fields of, for example, contact information from one application, such as Microsoft Outlook, to a different application, such as Symantec's ACT, as is the traditional use of field mapping and synchronizing applications.","Delta module  is further coupled to a compression module  and an encryption module . It should be recognized that the compression encryption modules need not be enabled. Any type of compression module , such as the popular PK Zip or Winzip modules, or those available from HiFn Corporation may be utilized in accordance with the invention. Moreover, any type of encryption algorithms, such as MD5, RCH 6, Two Fish, or Blowfish, or any other symmetric encryption algorithm, may be utilized. In one embodiment of the invention, encryption without compression is used. In a second embodiment of the invention, compression without encryption is used. In a third embodiment of the invention, neither compression or encryption is used, and in a fourth embodiment of the invention, both compression and encryption are used.","Versioning module  also allows the device engine  to support multiple users with distinct synchronization profiles. This allows multiple users accessing the same machine to each synchronize their own data set using the same device engine. For example, if the application  on a particular device comprises Microsoft Outlook on a personal computer, coupled to a Microsoft Exchange server, and Outlook is configured to have multiple user profiles, versioning module  will track the data applied through the device engine when a sync request occurs. This allows two users of the same Outlook client software which access different data sets, either in the client computer or on a separate server, to utilize the same device engine and the system of the present invention via the same machine. In a further embodiment, a particular device engine supports the use of foreign devices accessing the system via the same connection. Palm\u00ae devices, for example, use a cradle to connect to a computer and\/or Internet connection. If a particular user wishes to allow another user to use his Palm\u00ae pilot cradle connection to synchronize the other user's Palm\u00ae pilot, the device engine can generate data packages to update the local application object store for the foreign device. The application object store can therefore be used as a temporary storage for cases allowing synchronization of foreign devices.","The output of the device engine  comprises a data package which is output to storage server . As noted above, only one device engine need be connected to the storage server  at a given time. The data package can be stored on the storage server  until a request is made to a particular location of the storage server by another device engine. Likewise, delta engine  can query alternative locations on the storage server for access to synchronized data within the system of the present invention. Access to areas of the storage server is controlled by a management server (MS) described more fully below. In one embodiment, each sync operation requires that the device engine for each device login to the management server to authenticate the device and provide the device engine with the location of the individual device's data packages on the storage server.","Data packages may be advantageously provided to the device engine from the storage server in a streaming format, allowing processing to occur using a minimum of bandwidth and storage in the devices. The device engine  and particularly the delta module  interpret data packages based on the versioning information and the mirrored data present in the application object store . When data is returned to the delta module  from the storage server , the delta module returns differenced data to the application object  for the particular application which then translates the delta information into the particular interface utilized for application . Once a device engine has been fully applied all data packages from an input stream, it generates a series of data packages that describe the changes made on the local system. The device engine uses the local application object store  to keep track of the last synchronized version of each application's actual data, which is then used for the next data comparison by the delta module on the next sync request. Generated data packages can include operations and encode changes generated from resolving ambiguous cases as described above.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 9B","b":["900","975","900","850","1410","982","984","982","980","1"]},"Since the Palms\u00ae Device includes a mechanism for transmitting changes to its data directly, data may be transmitted using HTTP request and response via the firewall  to the sync server  where differencing and updating of data in the AOS can occur, after which changes can be downloaded to the Palm\u00ae ","The synchronization server is an application handles concurrent synchronization of user's data. Each Sync Server includes plug-in support for multiple devices to be synchronized using the same sync server executable. Each device type has it's own device name that identifies which AO\/AOS components will be used during the sync.","The sync server uses the concept of a universal data record in its internal sync differencing engine and when sending data to and retrieving from external entities such as the AOS and AO. Hence, in the Palm\u00ae application, the job of a server AO is simply to take the device-specific format of its record and convert into a universal record format.","The Sync Server has a plug-in architecture so that 3rd party application partners can easily add their services into the server. Currently, if the server is operated in a Microsoft Windows NT Server, the sync server discovers the sync components via the Windows NT registry. In alternative embodiments, this function is performed in a Component Manger which operates on each sync server to manage processing by each of the AO and AOS on the server. Each AO and AOS are implemented as a stand-alone DLL that the Sync Server loads at initialization time, or when adding a new component via the Component Manager.","Each sync server is shown as dedicated to a single application. However, a sync server may handle multiple device types.","In the embodiment of , it should be noted that, depending on the device type, there are different configurations for the AOS and AO's. For example, the Palm\u00ae's AO data store  resides on the Palm\u00ae device itself and a separate AOS data store  exists for this configuration (an Oracle database). In the case of Portal, the AOS and AO use the data store .","Device engines can generate additional data packages intended to resolve synchronization problems in other systems. For example, interfacing with the conflict resolution module , if the user makes a change to a particular data store on an application object on his Palm\u00ae pilot, then makes an additional change to a personal information manager (PIM) application on his personal computer, the user can specify that the change made on the personal computer will \u201cwin\u201d when the conflict is detected by the \u0394 engine and the versioning information between the two devices. This is essentially a definition that one particular set of data is correct and should replace the second set of data.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 10","FIG. 10"],"b":["1040","1021","1022","1023","1042","1024","1025","1026","1027","1028","1044","1029","1030","1031"]},"Each particular application , ,  has an associated application object , , . Each of the respective application objects provides data back to delta module  in a generic format which is usable by the delta module in accordance with the foregoing description of the apparatus shown in FIG. A. From , it will be additionally seen how the delta module  may be utilized to synchronize data between applications running on the same particular server. The device engine hence does an intra-system sync such as, for example, between the contact information  from Netscape and the contact information  from Outlook.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 10"},"In order to provide security and identification of particular users in an Internet-implemented synchronization system, a management server may be provided in the system of the present invention. The management server is a centralized server which controls behavior and characteristics of the entire network of device engines across all users.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 14","FIG. 14","FIGS. 15-17"],"b":["1410","1450","1410","1415","1420","1420","1425","1430"]},"Each device engine is uniquely identified and tracked by the management server. This allows for tailoring behavior between the management server and specific types of storage systems and device engine components. All device engine components are tagged and version stamped for management via the management server.","Device actions can request updated copies of individual device engine components, permitting self-update and configuration of device engine systems. This permits minimal download designs for device engines that are on low bandwidth connections enabling the device engines to download additional required components at a later time.","In a further aspect of the system, a value added component may be provided where the management server can support client's advertising mechanisms, enabling the display of banner or similar advertising on a device engine system without the need for a web browser. Cycling of advertisements, statistic collection, and the like, are managed via management server protocols. Online purchase and subscription mechanisms are also supported using the management server protocol.","The management server further supports the accounting, sign-up registration, device edition, storage server selection, and similar functions for each user in the system. In one embodiment, the management server may retain password and encryption information for a given user account. In a second embodiment, such information is not retained. The second embodiment provides the advantage that users may feel more secure if the maintainer of the management server is not in possession of the password to access data in the user's account.","Further information with respect to the management server and the data flow from the management server to other components of the system of the present invention will become apparent with respect to the discussion of the process flow and data flow diagrams in .",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 17"},"As shown in , following a welcome request , a user is allowed to sign out which enables an add user module , and subsequently enables an add device module . If sign-up is not requested, information may be provided via module .","As indicated in , the add user module  adds user records to the user in device database . Additionally, the add device module  adds users and devices to the user device database . A device list , and a device engine download and update database , provide selection data for the add device module . The account authentication module  receives input both directly from a user log-in from the welcome screen at  and from the add device module .","Once an account is authenticated and confirmed, the administrator of the system of the present invention having a private data store at  may choose to provide a web desktop  which allows access to a user's records such as file , e-mail , calendar , contacts , notes , and tasks . The information will be culled from a provider database  which will be synched in accordance with the system of the present invention as previously described. In essence, the provider database  accesses data from the device engines , which include, as discussed above, the storage server, each individual device engine , and a settings database .","Other portions of the management server include the locking modules for beginning a sync , continuing a sync , and ending a sync , and for updating user information including modifying a user , adding devices , removing devices , and modifying devices .","Shown in  is an exemplary storage server . While storage server  may include a generic storage model accessible through any number of standard Internet protocols, in accordance with the present invention, a flexible storage architecture is provided that permits various standard implementations of the system of the present invention. This allows deployment of network services without installation of new server applications and can be responsible for communicating change information between multiple device engines in a consistent fashion.","One or more storage servers  may be used to communicate transaction amongst a collection of devices. Each user's personal information network is represented by a unique account within its own data package storage section. The storage server  maintains persistent store collection of data packages which is, at a minimum, enough data packages to be capable of synchronizing the most out-of-date system in a user's given information network or add information to new devices which are provided in the network. Additional data packages can be maintained to permit rollback of previous versions of information. The storage server can automatically dispose of older data package storage and can support aging of an inactive accounts.","Each storage server  may be implemented using a variety of implementations including a standard FTP server for any operating system platform. The storage server can be implemented using HTTP protocols for increased efficiency and firewall avoidance. The storage server may be implemented using techniques for local storage such as database access or single file storage of a user's entire file system tree. The storage server  may utilize the stored foreign protocol model for moving copies of data packages to other storage servers in the system. In one embodiment, the storage server can allow tunneling of information using an alternative protocol to other storage servers in cases where firewall prevents originating protocol. For example, a storage server can relay an FTP traffic inside an HTTP protocol. Storage servers may include their own locking semantics to arbitrate multiple device engine access to the same server without the need for a separate management server. Each device engine can access only a specific user's data package storage area even though the storage server  may maintain a larger number of data packages across a large number of users. This allows for increased scaling when the storage server is implemented using file system techniques.","In one aspect, the storage server is implemented using standard FTP or HTTP connections for each operation. HTTP is composed of request response pairs. All requests are supposed to be posting commands. Parameters can be set in the form known as \u201capplication\/X-WWW-form-URLENCODED\u201d. The encoding is specified as in RFC1866. Functions for the storage server include testing if the storage server can reach other users which will retrieve a simple text string, a \u201cget\u201d command which transfers the contents of a file as in a binary stream of byes; a put command as a binary stream of data to the storage server, a directory listing command, a remove command, a rename command, an exist command, and the like.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 15","FIG. 16","FIG. 15"],"b":"15"},"Each device has its own triggering mechanism for initiating synchronization. Some devices, such as Windows clients and Palm\u00ae pilots are triggered manually when the user presses a \u201csync\u201d button. Other devices, such as a cellular telephone, may be triggered automatically after another device completes a sync. Regular, time-based triggers are supported as well. A web-based application portal will sync when a user logs into the website security authorization mechanism, and may optionally sync on a log-out of the user or on the session time-out, but only if the user has changed data during the session. For each sync, the triggering event specifies which application types are to sync for the device. This enables a triggering event to trigger only a sync for a particular application type. The management server can specify that no sync is needed for a particular type of application to minimize traffic to the storage server. Syncs may be triggered via an HTTP request to the server. This request holds information about which device to sync and the user log-in information is bounced to the management server for authorization and validation. Syncs may be triggered by sending an HTTP request to the server and passing the authentication information in the data portion of the request to the management server. Each device may include a servlet that is responsible for retrieving the request and ensuring its proper format before passing the synchronization request on to the server.","The device name and device class uniquely identify a particular device type that is being synchronized, and is contained in the management server. Each user has one or more device entries in the management server authorization records and each device name is unique for this user's space. For example, if a user has five devices with his or her own personal identification number, there will be five authorization records. There may be two Windows devices, two different Palm\u00ae devices and a web service portal, each having their own personal identification number.","As shown in , the pull synchronization process starts at an idle state  when the triggering event, described above, triggers a synchronization request. The synchronization request is confirmed at  and if the request is verified, a connection is made to the storage server at step . Once a connection is established, the connection to the management server is made at step  to authenticate the user identification via the management server. If authentication is successful, the management server may initiate a management server lock on the storage server so that no conflicting device engines may couple to the same data at the same time. A failure at any of the steps - will return the system to its idle state . Once the engine server lock is acquired, the storage server will be checked to determine whether a new version of the data exists on the storage server at step . If no new version exists, the synchronization process ends.","If a new version of the data exists, the device engine will retrieve the difference information at step  \u201co get \u0394.\u201d","Once a \u0394 is retrieved, conflicts are resolved at step . The resolve conflicts step allows a user to resolve conflicts to multiple types of data which have been changed on both the server portion of the device and in the local data.","Once the conflicts have been resolved at step , the \u0394's are applied at step . The apply \u0394 step  allows for filters and mappings to be accounted for on the local device engine side of the system. As shown at steps , , , and , the \u0394 may include updates at the item level , application level , device level , or network level . In each of the aforementioned steps, a loop back to the \u0394 retrieval step  is provided. When no further \u0394's are available, the management server lock is released at step .",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 16","b":["1505","1510","1515","1520","1525","1530","1535"]},"Once the \u0394's for a given application have been created, the method of the present invention continues at step , which enables a connection to a storage server. Upon connection to the storage server, a further connection to management server  will occur to authenticate the user in the system. Failure at any of the aforementioned points will result in returning to idle state . Upon authentication, a management server lock is enabled to ensure that multiple device engines do not connect to the same data at the same time.","Once a lock is acquired at step , \u0394's are uploaded to the system. As shown, this may include uploading an item \u0394 , an application \u0394 , uploading a device \u0394 , or a network \u0394 . Once \u0394's have been uploaded to the server, management lock server  is released, and the connection to the storage server is terminated at step .","It should be recognized that such a push synchronization need not occur directly to a server, but may occur directly to a second device engine in accordance with the depiction of the multiple embodiments of the invention in .","Once information is provided into the universal data format, the device engine organizes the format into a data package. Each data package thus includes a description of changes to any and all information for particular application, and a collection of data packages describes changes across all device engines including all different types of data. With encoding and compression, data packages can become very compact to minimize bandwidth and storage requirements across the system of the present invention.","In one particular aspect of the present invention, encoding of the data packages may be provided in a streaming format to allow processing by the device engines with minimal storage and memory configuration at the device engine level.","The device engine can read the stream and determine which records from which applications it needs to update the particular information present on the system on which it resides.","Data packages can be provided in a binary data format. This allows data packages to encode changes to non-application data at a bite level. Hence, if a single bit on a system changes, the system of the present invention allows synchronization of that bit on another system. Changes are described as a sequence of bite-level change operations. One such encoding is using a sequence of insert and copy operations. Insert and copy operations generally define a particular \u201cinsertion\u201d of a number of bites from a source file, then how many bites of a changed source file must be inserted to a particular file, then how many bites to insert from a particular new file, with a differencing engine taking the bites in the stream and inserting them into the new file to create the new version of the file.","As will be readily understood by one of average skill in the art, this allows a user to, for example, change a binary file such as a word processing document or other type of attachment, and synchronize such an attachment at the binary level. Specifically, if one forwards an e-mail of a word document to a second individual, the second individual modifies it and wishes to return this document with modifications to the first individual, because the first individual has the original file on his system, if both systems are enabled in the system of the present invention, the second system need only send the changes or the difference information back to the first system in order for the first system to reconstruct the document on the second system using this change data to create the document as intended by the second user.","Multiple caching of both the generation and application of data packages can be utilized to deal with communication issues in accordance with the system of the present invention. It should be further recognized that data packages can be merged into larger meta-data packages. Such meta-data information, such as the organization of multiple device packages, may be encoded into a larger system package. Each system package is essentially an encoded sequence of data packages.",{"@attributes":{"id":"p-0110","num":"0109"},"figref":["FIG. 12","FIGS. 11 and 12"],"b":"13"},"Particular examples of item fields  which may be included for any given item  are shown in FIG. . These exemplary item objects may, for example, be from an allocation such as Microsoft Outlook. Outlook allows for note items , e-mail items , task items , calendar items , bookmark items , file items , channel items , folder items , and contact items , all of which have fields such as those represented in FIG. .","The data format also contains folder information  which allows the classification of items and consequently their associated item fields into particular categories.","Application objects  include information on the types of applications from which information in the stream is included. Device objects  include information on the origin type of device which the information is originating from. Network objects  include information on a user level to define that the information in the data stream is coming from a particular user.","As detailed above, each application object supports a folder store interface that permits management of collections of information on a folder level, and permits management of folder hierarchies of information. The application object also includes an item interface that permits management of individual information entries such as records or files or components of information entries such as fields within records. Each application object further supports an interface for detection of a vendor application.","A DataPack essentially contains a sequence of transactions describing changes to information. This information can span two basic types: structured or application data, and unstructured or binary file data. Transactions are encoded using an efficient streaming format with tags to represent the actual content objects. This technique permits the continuous extension of the DataPack format as new content is supported.","The general architecture of the package provides for transactions, application data, file data, files, objects and identifiers to be carried in the data package. Generally, transactions, application data, file data, and files have previously been described.","The first portion of the data package will be the data package identifier. Each transaction has a basic architecture of objects and operations. Each piece of content is referred to as an object and is uniquely represented with a Universally Unique Identifier (UUID). Objects typically are represented by a dynamically generated UUID, but more common objects are represented by static UUIDs. Each UUID preferably has a unique 128 bit value which may be assigned by the system provider.","Transactions are broken down into manageable blocks in the form of individual files. These files are then optionally compressed and encrypted and prefixed with appropriate headers. Transactions are grouped into specific files based on the following rules:\n\n","A DataPack file is identified using specific rules based on the file name. The file name is of the form \u201cUUID.VER\u201d where UUID is the identifier for the specific object and VER is the transaction version number. The version number is of the form \u201cD0001\u201d with additional digits used for large version numbers. The \u201cD000\u201d value is preferably reserved for the base version for the object.","The UUID for the user account is generated by the Management Server (MS). The MS also maintains a current table of UUID values and version numbers that provides the root structure for understanding the DataPack files within a user account. The MS also provides necessary locking semantics needed to maintain consistency when multiple device engines attempt to synchronize.","All DataPacks are prefixed with a standardized header that provides basic content information regarding the DataPack. Compression and encryption headers follow the DataPack header if needed.","The data package header information will include version signature, applied versioning information, content type, \u0394 engine type, compression type, encryption type, applied size, encrypted size, compressed size, raw data size, and other data useful for the device engine in decrypting the data stream to provide the data into a format usable for the application.","The header may optimally have the format:",{"@attributes":{"id":"p-0124","num":"0126"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Type","Bytes"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Version","4"]},{"entry":[{},"Signature","4"]},{"entry":[{},"AppliedVersion","8"]},{"entry":[{},"ContentType","4"]},{"entry":[{},"DeltaType","4"]},{"entry":[{},"CompressionType","4"]},{"entry":[{},"EncryptionType","4"]},{"entry":[{},"AppliedSize","4"]},{"entry":[{},"EncryptedSize","4"]},{"entry":[{},"CompressedSize","4"]},{"entry":[{},"RawSize","4"]},{"entry":[{},"Reserved","TBD"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The following ContentType values are permissible:",{"@attributes":{"id":"p-0126","num":"0128"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DP_CONTENT_RAW","Raw"]},{"entry":[{},"DP_CONTENT_COMPRESSED","Compressed"]},{"entry":[{},"DP_CONTENT_ENCRYPTED","Encrypted"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The DeltaType encodes the type of binary file differencing used. The following DeltaType values are permissible using DataPackageDeltaType:",{"@attributes":{"id":"p-0128","num":"0130"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PackageDeltaTypeUninitialized","Uninitialized"]},{"entry":[{},"PackageDeltaTypeRawData","Raw binary data"]},{"entry":[{},"PackageDeltaTypeDeltaXDelta","Xdelta binary"]},{"entry":[{},{},"difference"]},{"entry":[{},"PackageDeltaTypeDeltaBDiff","Bdiff binary"]},{"entry":[{},{},"difference"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The compression type specifies whether the DataPack has been compressed. A DataPack compression header follows the DataPack header if a compression type is specified. The following CompressionType values are permissible using Data PackageCompressionType:",{"@attributes":{"id":"p-0130","num":"0132"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PackageCompressionTypeUninitialized","Uninitialized"]},{"entry":[{},"PackageCompressionTypeNone","None"]},{"entry":[{},"PackageCompressionTypePK","PKZip format"]},{"entry":[{},"PackageCompressionTypeLZS","LZS format"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The encryption type specifies whether the DataPack has been encrypted. A DataPack encryption header follows the DataPack header if an encryption type is specified. The following EncryptionType values are permissible using DataPackageEncryptionType:",{"@attributes":{"id":"p-0132","num":"0134"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"PackageEncryptionTypeUninitialized","Uninitialized"]},{"entry":[{},"PackageEncryptionTypeNone","None"]},{"entry":[{},"PackageEncryptionTypeXORTest","XOR masked data"]},{"entry":[{},"PackageEncryptionTypeBlowFish","Blowfish"]},{"entry":[{},"PackageEncryptionTypeTwoFish","Twofish"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"All DataPack compression headers are encoded using the following format:",{"@attributes":{"id":"p-0134","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Size",{}]},{"entry":["Field","(bytes)","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Size","4","Size of data including this header"]},{"entry":["Version","4","Version (1)"]},{"entry":["Signature","4","Signature (4271)"]},{"entry":["HeaderType","4","Headertype"]},{"entry":[{},{},"(HeaderTypeCompression)"]},{"entry":["Reserved","12","Reserved"]},{"entry":["DecompressedSize","4","Decompressed size"]},{"entry":["Reserved","50","Reserved"]},{"entry":["Reserved","12","Reserved"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The following HeaderType values are permissible using DataPackageHeaderType:",{"@attributes":{"id":"p-0136","num":"0138"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HeaderTypeUninitialized","Uninitialized"]},{"entry":[{},"HeaderTypeEncryption","Encryption header"]},{"entry":[{},"HeaderTypeCompression","Compression"]},{"entry":[{},{},"header"]},{"entry":[{},"HeaderTypeRaw","Raw header"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"All DataPack encryption headers are encoded using the following format:",{"@attributes":{"id":"p-0138","num":"0140"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},{},"Size",{}]},{"entry":[{},"Field","(bytes)","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Size","4","Size of data including this"]},{"entry":[{},{},{},"header"]},{"entry":[{},"Version","4","Version (6)"]},{"entry":[{},"Signature","4","Signature (4270)"]},{"entry":[{},"HeaderType","4","Headertype"]},{"entry":[{},{},{},"(HeaderTypeEncryption)"]},{"entry":[{},"Reserved","12","Reserved"]},{"entry":[{},"DecryptedSize","4","Decrypted size"]},{"entry":[{},"InitValue","16","TBD"]},{"entry":[{},"KeyLength","4","TBD"]},{"entry":[{},"ClearTextKeyBits","4","TBD"]},{"entry":[{},"Salt","4","TBD"]},{"entry":[{},"PadBytes","4","TBD"]},{"entry":[{},"HMAC","20","TBD"]},{"entry":[{},"Reserved","12","Reserved"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"The following Operation values are permissible using the Operation class:",{"@attributes":{"id":"p-0140","num":"0142"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"clNop","None"]},{"entry":[{},"clAdd","Add"]},{"entry":[{},"clDelete","Delete"]},{"entry":[{},"clChange","Change"]},{"entry":[{},"clMove","Move"]},{"entry":[{},"clRename","Rename"]},{"entry":[{},"clForceChange","Force change without"]},{"entry":[{},{},"conflict"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The following FieldDataType values are permissible using clDataType:",{"@attributes":{"id":"p-0142","num":"0144"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"clInvalidType","TBD"]},{"entry":[{},"clstring","Unicode String bytes with a 32-bit"]},{"entry":[{},{},"length prefix"]},{"entry":[{},"clString8","Unicode String bytes with an 8-bit"]},{"entry":[{},{},"length prefix"]},{"entry":[{},"clString16","Unicode String bytes with a 16-bit"]},{"entry":[{},{},"length prefix"]},{"entry":[{},"clEmpty String","TBD"]},{"entry":[{},"clBlob","32-bit length followed by a byte stream"]},{"entry":[{},"clBlob8","8-bit length followed by a byte stream"]},{"entry":[{},"clBlobl6","16-bit length followed by a byte stream"]},{"entry":[{},"clEmptyBlob","TBD"]},{"entry":[{},"clByte","8-bit value"]},{"entry":[{},"clShort","16-bit value"]},{"entry":[{},"clDword","32-bit value"]},{"entry":[{},"clQword","64-bit value"]},{"entry":[{},"clDate","DATE type (double)"]},{"entry":[{},"clDouble","8 byte real"]},{"entry":[{},"clFloat","4 byte real"]},{"entry":[{},"clUuid","16 byte uuid"]},{"entry":[{},"clZero","Zero value"]},{"entry":[{},"clOne","One value"]},{"entry":[{},"clUnspecified","Unspecified value"]},{"entry":[{},"clDefault","Default value"]},{"entry":[{},"clCollection","Collection with 32-bit length"]},{"entry":[{},"clCollection8","Collection with 8-bit length"]},{"entry":[{},"clCollection 16","Collection with 16-bit length"]},{"entry":[{},"clEmptyCollection","Collection with no length"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Data package objects are organized into a hierarchy as follows:\n\n","An account is the root structure, which identifies information about the users account. It may have exemplary field tags (eFieldTag_[NAME]) such as Name, Password, UserName and Version. The FieldTag ItemType value is specified as ItemType_PIN using enumItemType.","A device is a system identified as part of an account. Examples include PCs, handhelds, Web sites, and so on. It may have tags (eFieldTag_[Name]) such as: \u201cname\u201d and \u201ctype\u201d and item type values (eDevice_[Name]) such as Portal, Palm, Windows, CellPhone.","A data class is a grouping of similar information types. Many data classes may be represented for a particular account. The data class may contain field tags (eFieldTag_[Name]) such as: Name; ItemType; SubType; IsManaged; Provider; Filter and Version.","The following ItemType values are permissible using enumDataClass (eDataClass_[Name]):",{"@attributes":{"id":"p-0148","num":"0157"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Tag","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"UNKNOWN","Unknown"]},{"entry":[{},"CONTACT","Contact\/address book"]},{"entry":[{},"EMAIL","Electronic mail"]},{"entry":[{},"CALENDAR","Calendar"]},{"entry":[{},"TASK","Task\/to do"]},{"entry":[{},"NOTE","Note\/memo"]},{"entry":[{},"JOURNAL","Journal"]},{"entry":[{},"BROWSER","Web browser favorites, cookies, etc."]},{"entry":[{},"FILESET","Collection of files"]},{"entry":[{},"PIN","Account information"]},{"entry":[{},"DEVICE","Device information"]},{"entry":[{},"FILEBODY","Contents of file"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"A Provider is the application that maintains specific information within a data class. There can be more than one provider for a particular data class. Field tags include: Name, AppObjID, Password, Username and Version. Examples of provider tags permissible for the provider (eProvider[Name]) include: Portal, Palm\u00ae, MicrosoftOutlook\u00ae, Lotus Organizer, Microsoft Internet Explorer, Microsoft Windows, and so on.","Data stores are the containers for storing information within a provider. There can be more than one data store for a particular provider. Folders represent structural organization of information within a data store. Data stores are not required to support folders. Tags (eFieldTag_[Name]) supported for each data store include: Name, ItemType, IsManaged and OriginalPath. Item types permissible for the data store include: unknown; Folder; MAPI; Database and Store_File.","Folders represent structural organization of information within a data store. Data stores are not required to support folders. A folder is represented by a UUID and may contain any of the following field tags (eFieldTag_[Name]): Name; ItemType; IsManaged; FileAttributes; CreationDate; ModificationDate; AccessDate; SpecialFolderType.","The eFieldTag_ItemType value is specified as eItemType_FOLDER using enumItemType.","Items are individual informational components consisting of the actual user data. They may contain field tags such as: Name, ItemType, IsManaged, and Version.","File items typically have the following additional field tags (eFieldTag_[Name]):\n\n","Item types may take the format (eItemType_[Name]) and may include: extended; folder; attachment; contact; distlist; email; calendar; task; call; note; post; journal; form; script; rule; favorites; subscription; common_favorites; desktop; common_desktop; startmenu; common_startmenu; channels; cookies; programs; common_programs; startup; common_startup; sendto; recent; internet_cache; history; mapped drives; printers; docs; doctemplates; fonts; window_settings; app_data_folder; app_settings; fileset; pin; device; data_store; file; provider; and data_class; internal.","A field is based on one of a set of base type definitions. All field tag information is encoded using the following format:",{"@attributes":{"id":"p-0157","num":"0174"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},{},"Size",{}]},{"entry":[{},"Field","(bits)","Comment"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FieldTag","16","Unique tag"]},{"entry":[{},{},{},"number"]},{"entry":[{},"FieldType","6","Field base type"]},{"entry":[{},"FieldSubType","10","Field sub-type"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"A number of Field types are possible, including: unknown; long; dword; date; string; binary; float; double; collection; uniqueid; qword; uuid; file; invalid. LONG is a four byte value encoded in big-endian format. FieldType DWORD is a four byte value encoded in big-endian format. FieldType String is a sequence of Unicode characters followed by a single NULL byte. Interfaces are provided with an MBCS value. FieldType Binary is a sequence of bytes. FieldType UniqueID is a sequence of bytes as defined by the Universally Unique Identifier (UUID) standard. AO interfaces are provided with a Locally Unique Identifier (LUID) value FieldType QWORD is an eight byte value encoded in big-endian format. FieldType File is a UUID that references a separate DataPack containing the file body data. AO interfaces are provided with a sequence of Unicode characters followed by a single NULL byte that describes the full path name for the file.","Any number of filed sub types are possible. Each of the sub-types includes all of the possible data types from all of the supported user applications. As should be well understood, the possibilities in the number of sub-types is quite large, and dynamic as each new application supported by the system of the present invention is added. Examples of sub-types include:",{"@attributes":{"id":"p-0160","num":"0177"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["SubFieid Description","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Base","No sub-type specified"]},{"entry":["EmailAddress","Email address"]},{"entry":["EmailAddressList","Email address list"]},{"entry":["SearchKey","Search key"]},{"entry":["CategoryList","Category list"]},{"entry":["StringList","String list"]},{"entry":["DistributionList","Distribution list"]},{"entry":["Gender","Gender (enumGender)"]},{"entry":["TimeZone","Time zone (enumTimeZone)"]},{"entry":["Boolean","Boolean (TBD)"]},{"entry":["NonZeroBool","Boolean with non-zero value (enumNonZeroBool)"]},{"entry":["Priority","Priority"]},{"entry":["Sensitivity","Sensitivity (enumSensitivity)"]},{"entry":["Importance","Importance (enumImportance)"]},{"entry":["SelectedMailingAddr","Selected mailing address"]},{"entry":[{},"(enumSelectedMailingAddr)"]},{"entry":["TaskStatus","Task status (enumTaskStatus)"]},{"entry":["FlagStatus","Flag status (enumFlagStatus)"]},{"entry":["RecurrenceType","Recurrence type (enumRecurrenceType)"]},{"entry":["DayOfWeek","Day of week (enumDayOfWeek)"]},{"entry":["DayOfMonth","Day of month (1 through 31)"]},{"entry":["InstanceOfMonth","Instance of month (enumInstanceOfMonth)"]},{"entry":["MonthOfYear","Month of year (enumMonthOfYear)"]},{"entry":["BusyStatus","Busy status (enumBusyStatus)"]},{"entry":["AttachmentType","Attachment type (enumAttachmentType)"]},{"entry":["MailBodyType","Mail body type (enumMailBodyType)"]},{"entry":["RGB","RGB color value"]},{"entry":["ManagedState","Managed state (enusManagedState)"]},{"entry":["FaoId","FAO ID for provider"]},{"entry":["SpecialFolderType","Special folder type (enumSpecialFolderType)"]},{"entry":["ResponseState","Response state (TBD)"]},{"entry":["ResponseStatus","Response status (TBD)"]},{"entry":["JournalStatus","Journal status"]},{"entry":["PageStyle","Page style"]},{"entry":["PageNumberMethod","Page number method"]},{"entry":["DelegationState","Delegation state"]},{"entry":["MeetingStatus","Meeting status"]},{"entry":["MeetingInvitation","Meeting invitation"]},{"entry":["CalendarType","Calendar type"]},{"entry":["DateOnly","Date only"]},{"entry":["TimeOnly","Time only"]},{"entry":["PhoneNumber","Phone number"]},{"entry":["URL","URL"]},{"entry":["FilePath","File path"]},{"entry":["PopMessageID","POP message ID"]},{"entry":["MIMEType","MIME type"]},{"entry":["INVALID","All values must be below this"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0161","num":"0178"},"figref":["FIG. 18","FIG. 7. A","FIG. 7"],"b":["700","7","700","300","300","700","710","702","700"],"sub":["1","2"]},"In , client software is installed on both home PC  and office PC  and is configured to operate in conjunction with an operating system such as Microsoft Windows. The client software, when executed, interacts with the various applications on the user's PC. The user interacts with the client software and configures the software such that the applications are prioritized. Data is then extracted from the various applications, organized in a format independent of the particular application and device from which the data originated, and incorporated into a data package. With exemplary embodiments of the present invention, various classes of data are manipulated in this fashion, including contacts, bookmarks, and calendar events.","In one example, the program Microsoft Outlook is installed on home PC  of FIG. . In this example, ten contacts are programmed in Outlook. The user instructs the client software to synchronize the contacts using Outlook. The client software accesses Outlook, extracts the ten contacts, and assembles the contacts into a DataPack CONT.D000, where the UUID \u201cCONT\u201d identifies contact information as the specific object, and \u201cD000\u201d signifies that this DataPack is version \u201c0.\u201d The contacts are combined in DataPack CONT.D000 as a collection of ten transactions, each of which is assigned a unique ID # 1, 2, . . . 10. For instance, ID2 represents a contact for John Smith. In this example, each transaction 1, 2, . . . 10 has an associated action, \u201cAdd.\u201d DataPack CONT.D000 is then uploaded to the network  and stored on storage server .","Later, office PC  connects to the network and identifies DataPack CONT.D000. In particular, such identification includes office PC  sending a signal to a management server , in this example, informing management server  that office PC  has not downloaded any DataPacks for the particular data class, contacts in this example. The management server  responds by sending a signal to office PC  indicating that a data package of change information for contacts has been stored on the server , since the last time office PC  connected to network . Office PC , in response, sends a signal to management server  requesting the data package. The most recent data package(s) stored on server , are identified, in this example, version 0 of the contact data, CONT.D000. This DataPack CONT.D000 is then downloaded to office PC . The change information in that data package, \u201cAdds\u201d of contacts in this case, is then applied to the pertinent application in office PC . In this example, the client software on the office PC is configured to synchronize contacts using a Lotus Notes application. Thus, the ten Adds from CONT.D000 are applied to the contacts in Lotus Notes, so that the contact information in home PC  and office PC  is synchronized. The office PC  then sends a signal back to management server  indicating that office PC  has applied version #0 of the contacts data package(s). This information is preferably maintained in a registry  by management server  for each and every device that couples to the network to download and upload change information.","Subsequently, the user of office PC  updates the contacts in Lotus Notes and adds one or more contacts. In this example, 20 contacts are added. Thus, the Lotus Notes application uploads a second data package to network , the data package including the 20 contacts and each having the associated action, \u201cAdd.\u201d This data package represents, of course, more recent change information than the information in CONT.D000. The data package uploaded by office PC  is identified by a unique filename, in this example, CONT.D001. In addition, office PC  sends a signal to management server  confirming that CONT.D001 has been uploaded to network . The registry  is updated to indicate that office PC  is current with, that is, has already applied the change information in, CONT.D001.","Home PC  subsequently connects to data network , and the client software on home PC  communicates with management server  coupled to network . In particular, home PC sends a signal to management server  identifying CONT.D000 as the most recent version of change information the last time home PC  coupled to data network . The management server  queries the storage servers for any more recent data packages of changes to contact information. The management server  identifies such data package(s), CONT.D001 in this example, and sends a signal to home PC  informing home PC that such data package(s) exist. The client software on home PC  then requests the new data package(s), and management server  then downloads the data package(s) to home PC . The change information therein, in this case the 20 contacts from CONT.D001 to be added, is then applied to the contact information maintained by Microsoft Outlook on home PC . The communication of the change information to Microsoft Outlook and subsequent updates to the contacts in Outlook are coordinated by the client software on home PC . Thus, the contact information in home PC  and work PC  is again synchronized.","Other transactions, in addition to \u201cAdd,\u201d are provided with exemplary embodiments of the present invention. One of these is the transaction, \u201cModify.\u201d Using the present example, after CONT.D001 is uploaded to network , the contact information for a person sometimes change. For instance, John Smith may call the user on the telephone and tells the user that John has changed his phone number. The user then accesses office PC , changes the phone number for John Smith in the user's contacts.","The user then activates, for example, a \u201csynchronize\u201d button displayed on the computer screen by the client software, so a new data package or the change log, CONT.D002, is created and uploaded to network  and stored on one of storage servers , . A signal is sent by office PC  to management server  informing management server  that data package CONT.D002 has been uploaded. Data package CONT.D002 differs from data packages CONT.D000 and CONT.D001, in that the action, \u201cModify\u201d is used instead of \u201cAdd.\u201d The Modify command and the associated change information is correlated with the particular user. In particular, the Modify instruction is associated with the pertinent ID, in this case ID #2 representing John Smith. In addition, data package CONT.D002 includes the field to be modified, in this example, \u201cPhone,\u201d and the new information, in this example, John Smith's new phone number.","Subsequently, when home PC  connects to network , using techniques described above, the data package CONT.D002 is downloaded to home PC , and the client software recognizes that, for ID #2, the information within the field \u201cPhone\u201d has been updated. The next time home PC couples to network , home PC  sends a signal to management server indicating that home PC  has received CONT.D002. The modification is then made to this contact information via Microsoft Outlook. The home PC  then sends a confirmation signal to management server , confirming that home PC  has received and applied the change information in version #2 of the contacts data packages. The pertinent information in the registry for home PC  is then updated. If no subsequent data packages with change information for contacts have been stored on the storage servers, then no data packages are downloaded to home PC .","As changes are made for various classes of data, data packages accumulate on the storage servers , and consume storage space. As the number of stored data packages increases, the amount of available storage space on the storage servers decreases. In the example above, data package CONT.D000 occupies 2 kilobytes (\u201cK\u201d), CONT.D001 occupies 1 K, and CONT.D002 occupies 0.5 K. Thus, a total of 3.5 K of storage space on the storage servers is occupied by these three files. In situations where storage space is limited, for example, to 25 megabytes (\u201cM\u201d), a restriction sometimes imposed on a user's account, the amount of available storage space continues to decrease as information is updated, until storage space is no longer available for the user on the storage servers. The user may then become frustrated and generally dissatisfied with the entire data transfer and synchronization system because he can no longer store change logs.","Those both skilled and unskilled in the art will appreciate the user's frustration in the following scenario. In this example, a user has 2000 e-mails in his \u201cIn Box\u201d of Microsoft Outlook on his home PC . The user desires to synchronize all of his other devices, such as office PC , with home PC . Thus, a data package MAIL.D000 is created by the client software on home PC  and uploaded to network  for storage. The data package includes all 2000 e-mails, each having an associated ID# and an associated action \u201cAdd.\u201d In this example, the data package MAIL.D000 occupies approximately 10 M of memory, for a user who has a total of 25 M allotted to his account. Recognizing this, the user issues a delete command to delete 1500 of the 2000 messages, in order to reduce the amount of occupied space. A new data package MAIL.D001 is then created, containing 1500 \u201cDelete\u201d actions, each associated with a particular one of the e-mail ID#'s in data package MAIL.D000. The new data package MAIL.D001 occupies an additional 1 M of memory, resulting in the occupation of even more storage space on the servers. Consequently, while the user in all events expects the amount of occupied storage space to be reduced from 10 M to about \u00bc of this value, or 2.5 M, the amount actually increases to 11 M.","It is therefore desirable to collapse data packages stored on the storage servers whenever possible. Collapsing the data packages, as provided in accordance with exemplary embodiments of the present invention, generally entails combining the data packages for a particular class of data, with superfluous information being deleted. Using the example above, data packages MAIL.D000 and MAIL. D001 are combined such that the \u201cDelete\u201d actions in MAIL.D001 replace the \u201cAdds\u201d for the same ID#s in previous data package MAIL.D000, to define a new data package MAIL.D001. In an alternative example, the \u201cDelete\u201d command only applies to one or more fields in a given transaction. This new data package preferably overwrites the original MAIL.D001, that is, the one with only \u201cDelete\u201d actions. Data package MAIL.D000 is no longer relevant and, therefore, is deleted. After \u201crolling the base\u201d in this fashion, only the new MAIL.D001 data package remains on the storage server, and the amount of occupied storage space is thus reduced from 10 M to approximately 2.5 M, as the user had expected.","In , a base rolling engine , constructed in accordance with an exemplary embodiment of the present invention, is provided to achieve the desired collapsing of data packages. The base rolling engine  is desirably situated within one of the device engines  coupled to network . In one exemplary embodiment, the activation of base rolling engine  is controlled by the user, while in another exemplary embodiment, the base rolling engine is activated automatically by the data transfer and synchronization system. In embodiments where the base rolling engine is manually activated, the user accesses his account via one of his devices such as home PC , and issues a command to compact his data. In one example, this command is executed by the user simply moving a pointer over a \u201cRoll the Base\u201d button displayed as part of a graphical interface on the user's display screen, and clicking on this button using a controlling device such as a mouse or trackball.",{"@attributes":{"id":"p-0174","num":"0191"},"figref":"FIG. 19","b":["300","300"],"sub":["1","2"]},"In , there are two data packages, a base version D000 and a subsequent version D001. Both versions include the items described above and one or more fields. In particular, base version D000 has an ID of 2, an Action \u201cAdd\u201d and three fields: \u201cFirstName,\u201d which has the attribute \u201cJohn,\u201d \u201cLastName,\u201d having the attribute \u201cSmith,\u201d and \u201cWeb Page,\u201d having an associated URL, \u201chttp::\/\/ . . . \u201d Version D002 also has an ID of 2, but a change action of \u201cModify\u201d rather than \u201cAdd.\u201d Version D001 only has one field, \u201cFirstName\u201d which has the attribute \u201cScott.\u201d","In , when the user issues a command to \u201croll the base,\u201d the base rolling engine determines whether version D000 and D002 have one or more of the same ID#s. In this example, because both D000 and D002 have the same ID#2, the two data packages are collapsed into one file. Specifically, a new version D002 is created, replacing the original D002 data package. The Parent ID and ID# of 2 remain the same, and the change information from D002 is applied to version D000. Specifically, the field \u201cFirstName\u201d that both D000 and D002 have in common is identified, and assigned the more recent attribute, \u201cScott\u201d from data package D002. The Action remains \u201cAdd,\u201d and the fields \u201cLastName\u201d and \u201cWeb Page\u201d remain as \u201cSmith\u201d and URL, \u201chttp:\/\/ . . . ,\u201d respectively, from version D000. Thus, in this example, the new D002 is essentially the same as D000, except that the field \u201cFirstName\u201d has been replaced with the attribute \u201cScott.\u201d The modification contained in original data package D002 has actually been made to data package D000, resulting in new data package D0002. The data package D000 is then deleted.","In another exemplary embodiment, shown in , three devices are capable of coupling to data network , namely Device A, Device B, and Device C. In one example, Device A is a palmtop computer, Device B is a home PC, and Device C is an office PC. In other examples, various other devices as described above are used for Devices A, B and C. In , although at least 15 different change logs for contact information have been uploaded to the data network, Devices A, B and C each have different versions of contacts. The contacts in Device A have only been updated to include changes in CONT.D003, Device B is updated to incorporate CONT.D010, and the Device C has been updated to CONT.D015. In this example, D0XX represents sequential versions of contact information; the first change log in the sequence is CONT.D000, and the 15th change log in the sequence is CONT.D015. All of these change logs are stored on storage servers coupled to the data network.","In , although the versions of contact information among the various devices are spread apart, that is, not in sequence, the 15 data packages stored on the storage servers are collapsed according to exemplary embodiments of the present invention. First, a plurality of bases versions are defined. In this example, the first base data package is defined by collapsing sequential data packages, as described above, starting with CONT.D000 through the version of Device A, in this example, CONT.D003. The second base data package is defined starting with version CONT.D003 of Device A, and collapsing sequential change logs through the version of Device B, in this example, CONT.D010. The third base data package is similarly defined by collapsing sequential data packages between CONT.D010 and CONT.D015. This results in three sequential base data packages, which replace data packages CONT.D013, D014, and D015. Device A is then updated to include changes to contact information up to and including new CONT.D013, Device B to CONT.D014, and Device C to version D015.","Throughout the process of defining the new base data packages, management server  maintains in the registry for each device the most current version # of contact information stored in that device. In the example above, before the collapsing operating, Device A is at version 3, Device B at version 10, and Device C at version 15. The base rolling engine is in communication with management server , so that when the data packages are collapsed, the base rolling engine requests and receives device information for the particular user from management server . This includes information identifying all of the devices registered by the user, and what is the most current version of the data class stored in each device.","Thus, after the collapsing operation, when Device B is to be synchronized, management server recognizes that Device B is at version 14, so only data package CONT.D015 needs to be downloaded to Device B. Similarly, when Device A couples to the network to be synchronized, the change information in CONT.D014 is first applied, then CONT.D015. These updates are all achieved using the techniques described above.","Performing one or two updates during the time a device couples to the network is computationally less complex and, therefore, faster than performing an entire sequence of updates. This is due to the fact that for every file that is downloaded, a communications channel must be established, the file downloaded, and then the channel closed. There is high overhead associated with this opening and closing connections. The more times this iteration is performed, the more time is monopolized, resulting in higher costs. In the example above, without rolling the base as described to bring Device A current to version #13 information, 12 updates would need to be performed to update Device A from version #3 to version #15. Using the example above, with 12 files, a connection must be opened, file downloaded, and connection closed, 12 times. With 3 files, this iteration need only be performed 3 times. Fewer data packages are sent from the network to Device A and, therefore, less data. This, in turn, results in less processing by Device A and improved efficiency.","The aforementioned exemplary embodiments of the present invention provide a user-centric model of communication to deliver personal information via network services. This model accommodates devices that are disconnected from the network, such as the Internet, at various times. Personal information can continue to exist locally rather than imposing a server-centric model on existing information.","In accordance with the foregoing, a store and forward information broadcast is utilized. Changes to existing information are replicated to an Internet storage server and changes are then retrieved by other devices on the network at device-specific times. In this manner, direct client communication is accomplished without requiring one-to-one communication. While one communication is supported by the system of the present invention, it need not be required.","Although the present invention has been presented in the form of an Internet store and forward broadcast for the purposes of synchronizing personal information amongst various types of devices, it will be readily recognized that synchronization need not be accomplished as the only application for the aforementioned system. In particular, the system can be utilized to efficiently broadcast changes to information in so-called \u201cpush\u201d type information applications where only portions of the data need to be changed on a client application. For example, in a system where information such as changes in a stock price need to be broadcast to a plurality of users, a client application implementing the aforementioned technology can be updated by only changing specific portions of the data in the client application relative to that particular stock price. This can be done using a smaller bandwidth than has previously been determined with other devices.","It should be understood that the exemplary embodiments described above are only illustrative of the principles of the present invention. Additional variations will be apparent to those skilled in the art and, therefore, can be made without departing from the scope and spirit of the invention. Thus, the invention is not limited to the particular details described above. Rather, it is intended that the claims below cover all such variations and modifications as are within the scope and spirit of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":["The invention will be described with respect to various exemplary embodiments thereof. Other features and advantages of the invention will become apparent with reference to the specification and drawings in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 1-7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 20"}]},"DETDESC":[{},{}]}
