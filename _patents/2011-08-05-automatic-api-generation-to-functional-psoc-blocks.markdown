---
title: Automatic API generation to functional PSoC blocks
abstract: A method of generating an application programming interface (API) for an electronic circuit. A graphical user interface is displayed through which a user can initiate generation of the API. A component is selected from a plurality of components for placement in said electronic circuit. The component represents an implementable function in the electronic circuit. The component is configured using the graphical user interface. The data pertaining to the selected component and the configuration of the component is stored. The graphical user interface is utilized to access the stored data. The interface is initiated to invoke a processing of said data which causes a generation of the application programming interface. The application interface is for controlling the function of the component in said electronic circuit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08935623&OS=08935623&RS=08935623
owner: Cypress Semiconductor Corporation
number: 08935623
owner_city: San Jose
owner_country: US
publication_date: 20110805
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. patent application Ser. No. 12\/009,088, filed Jan. 15, 2008 now abandoned, which is a continuation of U.S. patent application Ser. No. 09\/994,599, filed Nov. 19, 2001, now U.S. Pat. No. 7,337,407, issued Feb. 26, 2008, which are hereby incorporated herein by reference in its entirety.","The present invention relates to providing APIs (application programming interfaces) for programmed electronic circuits. More specifically, the present invention provides a software application which automatically generates APIs relative to components in a programmed electronic device.","A circuit designer determines the various functions that are necessary for proper operation of a programmable electronic device being created. Once the designer has determined the required functions, the functions are organized and placed in accordance with available resource constraints regarding the electronic device and the system into which the electronic device will be implemented.","A circuit designer further needs to determine the various interconnections between the functions and configure the input\/output pins. Subsequently, the designer needs to configure the functions within the programmable electronic device. Conventionally performed manually, configuration includes placing the functions within the programmable electronic device, mapping the functions for connections, configuring multifunction input\/output ports or pins which typically contain multiple registers that require programming. The programming of the registers configure the pin type and drive characteristics of the input\/output pins.","Designers commonly use data sheets to describe the electronic circuit they designed and have configured. Subsequent to the configuration of the programmable electronic device, API's (application programming interfaces) are needed in order to interact with the electronic device to instruct the electronic device to perform its embedded functions. The programmer needs to know all of the registers and other technical information required to instruct the programmable electronic device to invoke the embedded functions, e.g., start timing, stop timing, etc. Manual programming is tedious and prone to programming errors and difficult to debug, the process of correcting errors within the programming.","Therefore, it would be advantageous to provide a method which provides an user friendly interface for circuit designing, configuration, and programming. It would be further advantageous to provide such a method that assists in the reduction of programming errors. It would be further advantageous to provide such a method which frees designers and programmers from remembering registers and other technical information, such as pin configurations, that invoke the embedded functions within a programmable electronic device.","Thus, the present invention provides a method which provides an user friendly interface for circuit designing, configuration, and programming. The present invention further provides such a method and which assists in the reduction of programming errors. The present invention further provides such a method which frees designers and programmers from remembering registers and other technical information, such as pin configurations, that invoke the embedded functions within a programmable electronic device.","Embodiments of the present invention provide a convenient user-friendly graphical user interface for designing, configuring, and programming electronic circuits and devices. Embodiments further provide for a method which provides a reduction in programming errors. Embodiments provide for such a method which does not require circuit designer to memorize registers and other technical information that invoke the embedded functions of programmable electronic circuits or devices.","These and other objects and advantages of the present invention will no doubt become obvious to those of ordinary skill in the art after having read the following detailed description of the preferred embodiments which are illustrated in the various drawing figures.","A method to generate APIs (application programming interface) for an electronic circuit is described. In a method embodiment, a graphical user interface is displayed through which a user can initiate generation of the API. A component is selected from a plurality of components for placement in said electronic circuit. The component represents an implementable function in the electronic circuit. The component is configured using the graphical user interface. The data pertaining to the selected component and the configuration of the component is stored. The graphical user interface is utilized to access the stored data. The interface is initiated to invoke a processing of said data which causes a generation of the application programming interface. The application interface is for controlling the function of the component in said electronic circuit.","A method of generating an interface for programming electronic devices is described. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be obvious, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-know structures and devices are shown in block diagram form in order to avoid obscuring the present invention.","Notation and Nomenclature","Some portions of the detailed descriptions, which follow, are presented in terms of procedures, steps, logic blocks, processing, and other symbolic representations of operations on data bits that can be performed on computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. A procedure, computer executed step, logic block, process, etc., is here, and generally, conceived to be a self-consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated in a computer system. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions, it is appreciated that throughout the present invention, discussions utilizing terms such as \u201cstoring\u201d or \u201cconfiguring\u201d or \u201cinitiating\u201d or \u201cproviding\u201d or \u201cselecting\u201d or \u201cgenerating\u201d or \u201caccessing\u201d or \u201cutilizing\u201d or \u201cinvoking\u201d or \u201csetting\u201d or \u201cplacing\u201d or \u201cdisplaying\u201d or the like, refer to the action and processes of a computer system or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","The present invention is discussed primarily in the context of programming an electrical device, such as a micro-controller or a system on a chip. However, it is appreciated that the present invention may be used to program other electronic devices that have the capability of being programmed. It is further appreciated that, in one embodiment, the programming of an electrical device is performed on a desktop or laptop computer system. It is also appreciated that the present invention can be used with other types of computer systems, e.g., mainframe computers, and portable computer devices, e.g., handheld computers (PDAs), that can provide programming of electronic devices.","It is further appreciated that the acronym, PSoC, and the term, programmable system on a chip, which the acronym represents, will be used interchangeably to represent the present invention, Programmable System on a Chip\u2122 Designer, throughout the following disclosure. It is also appreciated that PSoC Designer is a software application which provides a graphical user interface to facilitate the programming of electronic devices, such as micro-controllers, integrated circuits, and the like, such as one which is described in co-pending U.S. patent application Ser. No. 09\/989,570, now U.S. Pat. No. 6,966,039, filed on Nov. 19, 2001 entitled \u201cMETHOD FOR FACILITATING MICROCONTROLLER PROGRAMMING,\u201d by Bartz et al., assigned to the assignee of the present invention and incorporated herein by reference in its entirety.","Exemplary Computer System","With reference to , portions of the present invention are comprised of computer-readable and computer executable instructions which reside, for example, in computer-readable media of an electronic system such as a computer system.  illustrates an exemplary computer system  upon which embodiments of the present invention may be practiced. It should be appreciated that computer system  of  is an exemplary representation of a number of different computer systems and electronic devices in which the present invention can operate, including but not limited to desktop computer systems and\/or laptop computer systems.","Computer system  includes an address\/data bus  for communicating information, a processor  coupled with bus  for processing information and instructions, a non-volatile memory (ROM\u2014read only memory)  coupled with bus  for storing static information and instructions for processor , and a volatile memory (RAM\u2014random access memory)  coupled with bus  for storing information and instructions for the processor . Computer system  also includes data storage device  such as a magnetic or optical disk and disk drive coupled with bus  for storing information and instructions. Data storage device  can include one or more removable magnetic or optical storage media, e.g., diskettes, tapes, SD (secure digital) cards, MMC (multi-media cards), which are computer readable memories. Memory units of computer system  include volatile memory , non-volatile memory , and data storage device .","Electronic device  of  can further include an optional signal generating device , e.g., a wired or wireless network interface card (NIC) coupled with bus  for interfacing with other computer systems and\/or other electronic devices. Electronic device  can also include an optional alphanumeric input device  which includes alphanumeric and function keys coupled with bus  for communicating information and command selections to processor . An optional display device  can be coupled with bus  for displaying information to a computer user. Display device  may be a liquid crystal display (LCD), a cathode ray tube (CRT), a flat panel display such as an FED (field emission display), an electronic paper display, or nearly any other display device suitable for creating and generating graphic images and alphanumeric characters recognizable to a user.","Electronic device  also includes an optional cursor control or directing device  coupled with bus  for communicating user input information and command selections to processor . Cursor control device  allows the user to dynamically signal the two dimensional movement of a visible symbol (cursor) on a display screen of display device . Many implementations of cursor control device  are known in the art, including but not limited to, a trackball, mouse, optical mouse, touch pad, touch screen, joystick, or special keys on alphanumeric input device  capable of signaling movement of a given direction or manner of displacement. Alternatively, it is appreciated that a cursor can be directed and\/or activated via input from alphanumeric input device  using special keys and\/or key sequence commands.","Automatic API Generation to Functional PSoC Blocks",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2","b":["275","275","275","290","290","30","273","273"],"i":["a ","b ","a ","b"]},"It is appreciated that in one embodiment, client computer systems and and server computer  have an instancing of PSoC (programmable system on a chip) Designer disposed therein. It is appreciated that, in another embodiment of the present invention, PSoC Designer can be disposed in computer system and in the server computer . Accordingly, if a company creates a new component\/user module\/device, or if an existing component\/user module\/device is modified by that particular company, the information regarding that specific component\/user module\/device can be made available to that company's clients for updating. In one embodiment, that updated information can be acquired by the client via the Internet. In one embodiment, the data can be configured to be readable by a handheld device, e.g., a PDA (personal digital assistant), such that a PDA can be used to acquire updated or new information, and then transferred to the computer system upon which PSoC Designer is disposed, e.g., computer system  of . Once the new or updated information is acquired by the client, the information can be stored in a data storage device, data storage device  of .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIG. 1","FIG. 3"],"b":["300","300","300","301","310","311","311","104","311","312","313","314"]},"The first subsystem is device editor, e.g., device editor  of , A, B, and . Device editor is utilized for selecting user modules, placing user modules, setting user parameters, selecting pin values, as described in , and for generating user project files, e.g., user project files  of .","The second subsystem is application editor, e.g., application editor  of . Application editor is for programming the desired functionality into the device, subsequent to the completion of the configuration process. Subsystem application editor is where all source-code programming occurs. Programming included in subsystem application editor source-code programming are, but not limited to, editing or modifying files, creating or adding files, removing or deleting files, compiling\/assembling files, and building the project. Building the project links all of the programmed functionality of the source files, including device configuration, and loads it into a .rom file, which is the file that a user downloads for debugging and\/or device programming.","The third subsystem is debugger, e.g., debugger  of . Debugger provides the in-circuit emulation that allows a user to test the project in a hardware environment while viewing and debugging device activity in a software environment.","Still referring to , it is appreciated that the resulting graphical user interface that is displayed to a user is dependent upon which of the subsystems has been selected by a user. In one embodiment,  depicts the graphical user interface that is displayed to a user when the subsystem device editor  is selected. It is appreciated that alternative graphical user interfaces are generated which correspond to the subsystem selected by a user.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 4","FIG. 5","FIGS. 5","FIG. 4"],"b":["500","500","403","6","6","7","500","404","500","408","404","408"]},"Still referring to , in one embodiment, steps to configure a programmable electronic device, e.g., a micro-controller, include creating a new project based upon a selected part. It is appreciated that the data for the selected part can, in one embodiment, be drawn from PSoC device data . Subsequent to creating a new project, user modules are selected to be included in the project. It is appreciated that the data for the selected user modules can, in one embodiment, be drawn from PSoC user module data . User modules can include, but are not limited to UARTs (universal asynchronous receiver transmitters), counters, amplifiers, timers, digital to analog converters, and analog to digital converters. The selected user modules are then placed on the part. The placement of each of the user modules on the part triggers a dynamic update of the user project data, e.g., user project data . Parameters for each of the placed user modules are then set, which further triggers a dynamic update of user project data . Pin values are then selected for connection to the appropriate user modules. Subsequent to pin value selection, the user project files, e.g., user project files , are generated and the user project data, e.g., user project data , is saved.","Still referring to , GUI , through which a user observes and inputs their changes, e.g., user inputs , is driven by PSoC device data  and PSoC user module , in one embodiment of the present invention. It is appreciated that user project data  contains sufficient information, such that, in one embodiment, when that information is combined with PSoC device data  and PSoC user module data , user source files can be produced. In one embodiment, user source files can include, but are not limited to, initialization data and routines that realize the configuration when an embedded application is started. Also included in user source files are, in one embodiment, API functions that a user can utilize to control access to the user modules. Further included in user source files is a boot.file which contains a interrupt vector table. It is appreciated that the interrupt vector table is determined by the placement of the user modules.","It is noted that embodiment of the present invention are drawn to providing an automatic generation of the above mentioned application programming interfaces (APIs) for controlling the embedded functions within an electronic circuit or device, e.g., a programmable electronic device such as a microcontroller. In one embodiment, the generated API is predicated upon, but not limited to, the intended functionality of the electronic circuit or device being developed, the functions contained within the electronic device, the placement and configuration of the functions, the function connections with other functions and with the electronic device, and the resources of the electronic device and the resources of the system into which the electronic device is to be implemented.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 5","FIG. 3","FIG. 3"],"b":["500","312","500"]},"Still referring to , device editor  is shown in a user module selection view, and to the left is user module window , which displays, in this embodiment, the user modules or components which are available to be utilized in the current project. In one embodiment, user modules\/components can include, but are not limited to, ADCs, DACs, timers, PWMs, and so on. It is through this view that the user modules\/components for the current project are selected.","To the right of user module window  are user module information windows and . In this embodiment, user module information window shows a schematic diagram of a selected module, e.g., an ADCINC121, and user module information window shows the data of the selected module. In user module information window , shown is the specific technical information related to the selected user module\/component. Additionally, as can be seen along the bottom of window , there are multiple select tabs which, when selected, generate data relative to that subject. For example, if a user selects specs from the tabs, PSoC Designer will display data regarding the specifications of the selected module. It is appreciated that in the event any of the data related to the selected module, in this example, ADCINC121 is changed, that updated information is displayed in user module information windows and , respectively.","Referring still to , to the right of window and above window is resource manager window , in one embodiment. Resource manager window  displays the available resources, e.g., RAM, ROM, and digital blocks. Window  also displays the amount of those resources which are being used\/consumed by the selected module. Above window and window  is user module selection window . Window  displays those modules that are being utilized in the current project. Window  indicates seven user modules are being utilized in the current project. It is appreciated that a project can have a fewer number of modules or a greater number of modules. The number of modules is dependent upon the requirements of a particular project. It is further appreciated that as each module is selected, a graphic representing the selected module is dynamically placed in user module selection window . It is appreciated that the data regarding the selected user modules\/components is stored, e.g., in user module data  of .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 6A","FIG. 5"],"b":["500","501"]},"In this embodiment, user module selection window  is analogous to window  of , and is analogously disposed. Beneath window , in this embodiment, is placer view window . Placer view window  shows the placement of the modules within the current project.","Still referring to , module ADCINC121, highlighted within window  and indicated by arrow , is shown to be placed in blocks DBA00 and DBA01, respectively, as indicated by the checkered pattern surrounding blocks DBA00 and DBA01, and by arrow . Additionally, the parameters for the selected user module\/component, ADCINC121 are shown in the bottom portion of window . A displayed question mark indicates unconfigured parameters for that module\/component. It is appreciated that for the blocks in placer view window  that have modules placed therein, each has the corresponding module identification, e.g., blocks DBA00 and DBA01 indicate that module ADCINC121 is thusly placed.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 6B","FIG. 6A","FIG. 4"],"b":["545","504","556","504","505","404"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 7","b":["500","501","501","506","506"]},"Still referring to , each of the pins are configurable by, in one embodiment, selecting the appropriate pin in a pin-out view window, e.g., pin-out view window . Configuring the pins can also be achieved by selecting the desired pin from the port and drive portion of window . In either instance, when a pin is selected, a pop-up menu is generated that shows the options available for the selected pin. Additionally, once the options relative to the pin are chosen, the results are dynamically displayed in the port and drive configuration portion of window  and graphically represent in placer view . Further, subsequent to the options chosen for the selected pin number, connection information is also dynamically displayed within placer view window . It is appreciated that the data regarding pin placement, connection, and configuration is stored, e.g., in user project data  of .","Subsequent to completing the selection, placing, and configuration of the user modules\/components in the microcontroller, a user needs to generate the APIs (application programming interface) for controlling the user modules of the current project.  is a screen shot depicting the ease with which a user can initiate the generation of the API.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 8","FIG. 1"],"b":["500","810","810","150","402","404","406"]},"It is appreciated that generate button  does not have to be selected in a device editor, e.g., device editor  of , to generate the APIs. It is known by the application editor subsystem, e.g., application editor  of , that the most current\/up-to-date APIs have not been generated, and application editor  will, in one embodiment, initiate API generation when the project is built, e.g., selecting build button  of .","The APIs are, in one embodiment, in the form of .asm (editable assembly language source file), .h (editable assembly language include\/header file), and .inc (editable c-language include file) files. It is appreciated that these files are editable, such that a user can alter the contents. In one embodiment, these files can be used to perform common functions that are required to interact with the user module (e.g., how to start the timer, how to stop the timer, how to interact with the timer, etc.). Further, the generation processes receive setting information from a parameterization block are slightly altered thereby such that the proper 5 settings are realized. These files provide the device-interface and interrupt-activity framework for source programming. The API and ISR files can be accessed in a source tree, e.g., source tree window  of . In addition, PSoC Designer has further created a data sheet based upon the configurations from device editor  of , A, B, and .","By using the automatically generated APIs, a user need not be aware of all of the low level registers and other low level technical information required to instruct the user module to invoke its function. The user simply needs to interact with the APIs which are written in a higher level of abstraction.","It is appreciated that generate application button  in  can be activated from within any of the three device editor window views, e.g., the selection view as shown in , the placement view as shown in , and the pin-out view as shown in .",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 9","b":["900","901","810","902","901","903"]},"Still referring to , shown in source-file editing window  are assorted files, e.g., files , , , , and  that were generated when generate application button  was selected. The top most file within window  is a boot.asm file, e.g., boot.asm , which is updated from its default name, boot.tpl. Each project receives it own particular boot.asm. When Boot.asm is updated, it reflects the current project configurations and which also includes a jump table for interrupt handlers.","Directly below boot.asm  is a main.asm, e.g., main.asm . Main.asm is also present in each project, and resolves the external reference from the boot sequence. When initially created upon new project creation, the \u201c_main\u201d function contains a simple forever loop.","Beneath main.asm  are ADCINC121.inc , Counter161.inc , and Counter161.h , respectively. Each was retrieved from source tree window  for viewing and editing. By retrieving a source file, it is convenient to edit the generated APIs for customization of the functions they perform, and how the function is performed. It is appreciated that the .asm, .h, and .inc files are named to reflect the user module\/component for which they are associated.","It is appreciated that for a user to compile and build the source code, they need to simply click on build button , also of .","The operating platform upon which embodiments of the present invention can be practiced is, in one embodiment, a Microsoft Windows based operating platform commercially available from Microsoft Corporation of Redmond, Wash. However, it is appreciated that other operating platforms may be used to practice embodiments of the present invention.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 10","FIG. 1","FIG. 10"],"b":["1000","1000","103","102","800","1000"]},"In step  of , a graphical user interface is displayed, such as device editor  of , through which a user can initiate the generation of the API (application programming interface), in one embodiment of the present invention.","In step  of , a component is, in one embodiment, selected from a number of available components, such as those graphically presented in user module window  of . It is appreciated that the component represents an implementable function in said electronic circuit being designed.","In step  of , the selected component, from , is configured, in one embodiment, by using the graphical user interface. The process of configuring the selected component\/user module comprises placing the component within operation blocks of the electronic circuit being designed, as shown and described in placer view window  of .","Configuring the component further comprises, in one embodiment, determining pin placement, pin types and drive characteristics, as shown in pin-view window , user module window , and placer view  of .","In step  of , the data regarding the current project is seamlessly stored. In one embodiment, the data relating to the electronic device being designed is stored in PSoC device data  and user project data  of . In one embodiment, the data relating to the selected component is stored in PSoC user module data  and user project data  of . In one embodiment, the data relating to the configuration of the component is stored in user project data  of .","In step  of , the interface is utilized to access the stored data. The interface accesses the data stored in PSoC device , PSoC user module data , and user project data .","In step  of , the interface is initiated to invoke a processing of the stored data which causes a generation of the application programming interface, as described in . The generated application programming interfaces, as shown in , are for controlling the function of the component in the electronic circuit.","The foregoing descriptions of specific embodiments of the present invention have been presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed, and obviously many modifications and variations are possible in light of the above teaching. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the Claims appended hereto and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and form a part of this specification, illustrate embodiments of the invention and, together with the description, serve to explain the principles of the invention:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 6B","FIG. 6A"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
