---
title: Generating floating desktop representation of extracted model object
abstract: Embodiments relate to systems and methods for generating a floating desktop representation of an extracted model object. Aspects relate to object-based modeling using modeling objects that can be extracted from spreadsheet cells, database entries, or other sources. A modeling client can host modeling logic and an application programming interface (API) to create, access, manipulate, and import/export modeling objects used in modeling applications, such as engineering, medical, financial, and other modeling platforms. In aspects, the source data can be accepted into the modeling client from consumer or business-level applications, whose cell, database, or other data content can be extracted and encapsulated in object-oriented format, such as extensible markup language (XML) format. An icon or other desktop representation can be generated to present the extracted model object for selection and use in the local environment of the modeling client. The extracted model object can also be exchanged with other applications or platforms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09105006&OS=09105006&RS=09105006
owner: Red Hat, Inc.
number: 09105006
owner_city: Raleigh
owner_country: US
publication_date: 20090529
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND OF RELATED ART","DESCRIPTION OF EMBODIMENTS"],"p":["The present teachings relate to systems and methods for generating a floating desktop representation of extracted model object, and more particularly to platforms and techniques for dedicated modeling of technical, medical, financial, and other systems which are configured to extract spreadsheet cells, database entries, or other data along with associated functions, to generate a floating icon or other desktop representation of that model object.","A spectrum of modeling platforms and options exist today for engineers, managers, developers and other professionals. In the case of engineering, medical, technical, financial, and other advanced modeling resources, a range of platforms are available for users interested in setting up, running and maintaining financial modeling systems. For example, organizations interested in relatively sophisticated modeling applications, such as geophysical models for detecting oil reserves or other geologic features or equity market analysis based on Black-Sholes option pricing models, a company or other organization may choose to install advanced modeling software on mainframe-class computers to run those classes of models and obtain various projections, reports, and other results. Such mainframe platform and related installations, however, can involve costs on the order of millions of dollars or more, and may require the full time attention of highly skilled professionals, including programmers and managers with advanced training. As a consequence, putting a mainframe-based ERP modeling operation into place may not be practical or possible for many organizations or users.","On the other end of the spectrum, managers, engineers and others may employ widely available entry-level applications to capture operational data and attempt to develop predictive models for engineering, financial, medial, and other applications. That class of applications can include, for example, consumer or business-level spreadsheet, database, or data visualization programs for technical, financial, and other purposes. For instance, a manager of a manufacturing facility may use a commercially available spreadsheet application to enter production numbers, schedules, and other details of that site. However, attempting to extract useful modeling outputs from those classes of applications can be difficult or impossible. For one, spreadsheet, database, and other widely available applications are typically built to produce reports based on already existing data, but not to generate modeling outputs or objects that represent predictive outputs or scenarios. For another, existing spreadsheet, database, and other applications typically involve limitations on cell size, number of dimensions, overall storage capacity, and other program parameters which, in the case of large-scale modeling operations, may be insufficient to operate on the data sets necessary to produce and run meaningful models.","For another, the data structures and outputs of existing spreadsheet, database and other entry-level or commonly available applications are typically arranged in proprietary format, rather than a widely interoperable object-based or other universal format. As still another drawback, the cells, rows, columns, and other data elements within commonly available spreadsheets, databases, and other entry-level programs can not be extracted as separate units and exported to other modeling or analytic tools. In short, the use of spreadsheet, database, and other consumer or business-level applications to conduct modeling operations involves significant shortcomings, due in part to the fact that those classes of platforms are not designed to reliable handle modeling functionality.","At present, therefore, a manager, developer, engineer, or other professional or user with modeling requirements is faced with a choice between installing a large and expensive mainframe-based ERP solution with its attendant infrastructure, a spreadsheet or database-based entry level solution with its attendant limitations on power and data handling, or a combination of those two types of platforms. It may be desirable to provide object-based or object-compatible modeling platforms capable of generating modeling objects which encapsulate various modeling features, and which are exportable to other external modeling tools.","Embodiments of the present teachings relate to systems and methods for a floating desktop representation of an extracted model object. More particularly, embodiments relate to platforms and techniques that can access, extract, and generate modeling objects in a native object-based or object-compatible format, and generate an icon or other representation of those objects on a local desktop or other user interface. The modeling objects produced via a modeling client or other modeling tool according to the present teachings can encapsulate both source data describing a physical, medical, technical, financial, or other process or phenomena, and modeling attributes that relate the source data to predictive scenarios, specific models, and other features. In embodiments, the modeling objects can be extracted or \u201clifted\u201d from data sources such as spreadsheet or database programs, and an icon or other representation of those objects can be placed on the desktop or other user interface of a local modeling client. These and other embodiments described herein address the various noted shortcomings in known modeling technology, and provide a user or operator with enhanced modeling power on a desktop or other client, while allowing seamless generation, local storage, and communication of model objects to backend mainframe platforms, data centers, middleware servers, other modeling clients, and\/or other local or remote modeling, storage, or data processing resources.","Reference will now be made in detail to exemplary embodiments of the present teachings, which are illustrated in the accompanying drawings. Where possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","102","202","112","102","112","202"]},"Mainframe platform  can include modules, logic, and functionality to perform an array of computation and data storage tasks, including data warehousing, data mining, statistical analyses, financial planning, inventory management, customer resource management, engineering design, and other applications. In implementations as shown, mainframe platform  can host or communicate with a variety or resources including, merely illustratively, a mainframe data store , and logic or applications including an analytic module . Mainframe platform  can contain, host, support, or interface to other data processing hardware, software, and other resources. In embodiments, modeling client  can likewise communicate with other local or remote resources, such as a middleware server  hosting or interfacing to a set of data stores for online analytical processing (OLAP) or other functions. Modeling client  can also communicate or interface with other local or remote servers, services, data stores, or other resources.","In embodiments as shown, modeling client  can operate under an operating system , such as a distribution of the Linux\u2122, Unix\u2122, or other open source or proprietary operating system. Modeling client  can present a user interface , such as a graphical user interface or command line interface, operating under operating system  to receive commands and inputs from a user, and operate modeling client . Modeling client  can communicate with storage resources including a modeling store , such as a local or remote database or data store. Modeling store  can store a set of modeling objects , in which data, functions, procedures, attributes, and\/or other information related to one or more modeling object  can be encapsulated and stored. In embodiments, modeling object  can be encoded in extensible markup language (XML) format. In embodiments, modeling object  can be encoded in other object-based or object-compatible formats or data structures. Modeling client  can communicate with mainframe platform  via a modeling application programming interface (API) . Modeling application programming interface (API)  can include, for instance, defined function calls or calls to other routines, calculations, or features, as well as data structures and parameters associated with modeling operations. For example, modeling application programming interface (API)  can include a function call to invoke a Monte Carlo simulation model based on a set of supplied data, such as an identified set of dimensions extracted from a spreadsheet or database. Other functions, routines, resources, and features can be called, invoked, or instantiated via modeling application programming interface (API) . According to embodiments in various regards, one or more local or remote modeling packages, modules, or other supporting applications can be instantiated via modeling module  and modeling application programming interface (API)  to manipulate source data and resulting one or more modeling object .","In embodiments, a user of modeling client  can access, modify, or add data modeling objects to a set of data modeling object  via a modeling module  hosted in modeling client . Set of data modeling objects  can include data objects that the user of modeling client  has directly entered, or, in aspects, which the user of modeling client has imported or extracted from sources such as consumer or business-level spreadsheet, database, and\/or other applications or platforms. Modeling module  can itself be or include applications, software modules or hardware modules, or other logic or resources to operate on set of modeling objects . Modeling module  can, merely illustratively, include or access logic or modules for invoking and manipulating a variety of scientific, technical, engineering, medical, financial, manufacturing, or other modeling operations. For instance, modeling module  can be or include applications or logic for performing Monte Carlo simulations, finite element analyses, Black-Scholes option pricing or other market analyses, epidemiological projections, geophysical models or simulations, or other simulations, models, trend mappings, projections, or other predictive processes. In embodiments in one regard, after invoking modeling module  and performing any modeling task, the user of modeling client  can locally store and\/or export one or more modeling object  to external platforms or resources.","In embodiments as shown, the user of modeling client  can for instance export or communicate one or more modeling object  to mainframe platform  via modeling application programming interface (API) , for storage and use at a local or remote location from within that platform. In aspects, mainframe platform  can receive modeling object  directly, without a necessity for translation, re-formatting, or invoking any spreadsheet, database, or other application from which data encapsulated in one or mode modeling object  originated. In aspects, mainframe platform  can operate on one or more modeling object , and transmit or return that data or other results to modeling client  via modeling application programming interface (API) . Thus, according to aspects of the present teachings, modeling objects can be exchanged directly and programmatically between modeling client , mainframe platform  or other larger-scale or remote platforms, including for instance middleware server  or other comparatively large-scale or higher-capacity modeling or analytic tools.","In terms of operating on source data and generating one or more modeling object  for local storage and\/or exchange with mainframe platform  or other platforms, and as shown for instance in , according to various embodiments, a user of modeling client  can invoke modeling module  to manipulate a set of source data  to identify, configure, and\/or extract the functional objects, attributes, or other features of a set of data to produce a modeling output. In embodiments as shown, modeling module  can access a set of source data , from which data, attributes, and\/or other metadata can be extracted to generate one or more modeling object . In aspects, set of source data  can be generated, hosted, or stored by or in a local application , such as a spreadsheet, database, accounting, word processing, presentation, or other application or software. In aspects, set of source data  can comprise data previously or newly generated in the form of an object-based modeling object, such as a modeling object entered, imported, or specified by the user of modeling client . In aspects, set of source data  can comprise data originally stored or generated in a consumer or business-level spreadsheet, database, and\/or other application or software. In aspects, set of source data  can be initially formatted or encoded in a non-object oriented format, such as in a cellular array or in a relational database format. In aspects, set of source data  can be initially formatted or encoded in an object-oriented format, such as extensible markup language (XML) format. In aspects, a user of modeling client  can highlight, select, or otherwise specify all or a portion of set of source data  to generate one or more extracted functional object . For instance, a user can highlight a column of set of source data  to identify and extract data as well as functional relationships of interest, to the user, as a unified object. Thus, purely illustratively and as shown, a user may wish to obtain a view on a current month's sales figures including gross sales, tax, production or delivery costs, and cost basis, as well as other parameters related to sales activity. In aspects as shown, a user can, for instance, highlight those functional relationships by dragging a cursor or otherwise selecting a set of cells to group together, and form one or more extracted functional object . In aspects, selection can include the extraction of set of data elements , such as values stored in spreadsheet cells or database entries. In aspects, once a set of data elements  are selected, the functional, computational, or other modeling parameters associated with that data can be stored or associated with one or more extracted functional object . For instance, modeling module  can store associated routines, computations, processes, or other attributes or functional specifications for one or more extracted functional object  in set of attributes , which can be stored or associated with one or more extracted functional object . In aspects, set of attributes  can include the identification of or linkage to any routines, interfaces, or other functional or computational resources that will be associated with one or more extracted functional object.","According to various embodiments, analytic module  of mainframe platform , or other resource or platform receiving one or more extracted functional object  from modeling client  can thereby obtain both data values derived or obtained from set of source data , as well as functional or procedural resources and relationships associated with that data. One or more extracted functional object  along with any associated set of attributes  can be encoded or stored in one or more modeling object , which can thereby be transparently exported to mainframe platform , middleware server , or other platforms or destinations for further modeling operations.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 3","FIG. 3"],"b":["102","112","202","208","102","124","126","118","118","124","104","106","124","128","112","124","120","108","102","102","102","102","102"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4","b":["402","404","102","120","406","120","104","110","106","408","110","410","110","120","110","106","104"]},"In , modeling application programming interface (API)  can be invoked by modeling module , by mainframe platform , or other resources to transfer one or mode modeling object  to mainframe platform . In embodiments, one or more modeling object  can for instance be communicated to mainframe platform  via a secure connection or channel, such as a secure socket layer (SSL) connection, via a channel encrypted using a public\/private key infrastructure, or other channel or connection. In , one or more model object  can be received in modeling module  from mainframe platform  or other resource, as appropriate. For example, an updated version of one or more model object  reflecting new data, new modeling results, or other information can be received in modeling module . In , the resulting new, updated, or modified one or more model object  can be stored to set of modeling objects  in model store , as appropriate. In embodiments, one or more model objects  can in addition or instead be stored to mainframe data store , to middleware server , to another modeling client or other client, or other site or destination. In , modeling module  can convert one or more model objects  to spreadsheet, database, or other format, and export any converted data as a set of cell-formatted information, or data encoded in other formats. For instance, modeling module  can convert or translate one or more model objects to cell data values or database entries, and export that data to client-level applications on modeling client  or other local or remote devices or storage. In , processing can repeat, return to a prior processing point, jump to a further processing point, or end.","According to various embodiments of the present teachings, and as for example generally illustrated in , in addition to or instead of generating one or more model object to transmit that object to another local or remote destination for consumption by a separate modeling platform, in implementations modeling module  can generate modeling objects for output to the desktop or other native or local interface of modeling client . In embodiments as shown, a user of modeling client  can manipulate a local application , such as a database, spreadsheet, word processing, presentation, or other application, and\/or modeling module  to access, view, and operate on set of source data , for instance to identify, highlight, and extract an extracted functional object , such as a portion of a column of a spreadsheet or database, including constituent data and functional attributes. The attributes or other metadata of extracted functional object  can be stored in set of attributes , or encoded in other fashion for association with the selected data. In embodiments in various regards, once extracted functional object  is extracted, modeling module can capture and store, or lock down, the data content of that object along with any attributes or other metadata. Moreover, according to various embodiments, modeling module  can generate an icon or other representation of the model object, and store that association between extracted functional object , set of attributes , and the local icon or other representation to generate a selectable local model object .","In aspects, local model object  can comprise an icon, snapshot, gadget, or other reduced or compact representation of the underlying extracted functional object  and any associated set of attributes, for instance, via a selectable icon presented on user interface  of modeling client . In embodiments as shown, therefore, local model object  can reside on the desktop or other user interface , for independent access and use by local application , modeling module , and\/or other software, services, or logic. In aspects in various regards, any one or more selected portion of data from set of source data  can thereby be extracted or lifted from its original storage or associated application, and become directly available for independent access by modeling or other applications. It may be noted that while local model object  is illustrated as residing on a desktop or other user interface  of modeling client , in embodiments, local model object  can also or instead be transmitted to other local or remote platforms, such as mainframe platform , middleware servers, other modeling or other clients, or other destinations.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6","b":["132","602","604","134","606","134","114","608","120","136","114","132","610","132","102","104","612","120","132","132","130","102","132","130","102"]},"In , modeling module  or other logic can retrieve and\/or instantiate local model object  upon selection or activation of the associated icon or other representation of local model object . For instance, a user may highlight or click the associated icon or other representation of local model object  to activate that object and related processes. In , local model object  can be manipulated or updated via local application , modeling module , or other application or software. For instance, new data values for variables embedded in local model object  can be imported, or new predictive modeling runs can be executed. In , updated local model object  can be stored to local data storage of modeling client , such as model store  or other local storage, as appropriate. In , local model object  can be transmitted to mainframe platform  or other local or remote platform or other destination, as appropriate. In , processing can repeat, return to a prior processing point, jump to a further processing point, or end.","The foregoing description is illustrative, and variations in configuration and implementation may occur to persons skilled in the art. For example, while embodiments have been described wherein one or more model object  is accessed and manipulated via one modeling client , in embodiments, one or more users can use multiple modeling clients, or networks including modeling clients or other resources, to operate on model object data. For further example, while embodiments have been described in which modeling client  may interact with one mainframe platform  and\/or one middleware server , in embodiments, one or more modeling client  can interact with mainframe platforms, data centers, middleware servers, and\/or other resources, in various combinations. Yet further, while embodiments have been described in which a modeling client  interacts with a mainframe platform  and\/or middleware server , in embodiments, rather than interact with large-scale enterprise platforms or middleware servers, modeling client  can interact with other local or remote modeling clients, networks of those clients, or, in embodiments, can operate to perform modeling operations on a stand-alone basis, without necessarily communicating with other modeling platforms. Other resources described as singular or integrated can in embodiments be plural or distributed, and resources described as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate embodiments of the present teachings and together with the description, serve to explain the principles of the present teachings. In the figures:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
