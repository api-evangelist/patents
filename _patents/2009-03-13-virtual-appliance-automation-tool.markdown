---
title: Virtual appliance automation tool
abstract: A method and apparatus are provided for creating a virtual machine installer for use in a multi-tier computer system. The method includes the steps of providing a plurality of interactive applications operating together to achieve a predetermined enterprise objective, providing a plurality of substantially identical virtual appliances, modifying the plurality of virtual appliances by installing a respective interactive application into each of the plurality of virtual appliances (VAs), generating a catalog of the modified virtual appliances, and saving the modified virtual appliances and the catalog on a medium.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08560649&OS=08560649&RS=08560649
owner: Aspect Software, Inc.
number: 08560649
owner_city: Chelmsford
owner_country: US
publication_date: 20090313
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF AN ILLUSTRATED EMBODIMENT"],"p":["The field of the invention relates to computers and more particularly to the programming of computers.","Computer systems have become a virtual necessity for the operation of any relatively large organization. For financial, membership or even asset information, there is no other device capable of tracking the activities of geographically diverse organizational operations administered by different people, possibly using different languages.","A computer system used by an organization will typically be provided with a number of databases to administer and track organizational activities. For example, one database may be provided for financial information (e.g., accounts receivable, accounts payable, etc.), another database may be provided to track progress towards organizational objectives (e.g., manufactured product, raw materials, etc.) and still another database may be provided to track organization membership (e.g., human resources, etc.). Consequently, organizations today require multi-tiered applications to manage the different tasks the organization needs to perform.","The most common solution for deploying a multi-tiered server-side product is to build what is typically referred to as an \u201capplication installer.\u201d The application installers are customer installer applications that install products on top of machines that are typically set up by the IT departments of the organizations. However, the use of application installers in the industry often lead to unpredictable results when using the installed products. Because all organizations have systems with different IT security, network and machine setup standards, and generally different systems than the software developer, it is common that software products developed by a company and successfully tested in-house do not properly function once they are deployed at a customer site.","An additional problem is that traditional multi-tiered application installers that run on multiple machines ask for deployment information on each and every machine on which the software is installed. Repeatedly asking for the same information is often very error-prone, and can lead to mis-configured deployments if consistent information is not entered.","One solution to these problems is to deliver applications to a customer pre-installed on a Virtual Appliance (VA). A Virtual Appliance is a virtual computer that has a multi-tiered application installed and configured on it. A virtual appliance differs from an application installer in that it is provided with its own operating system environment. A single multi-tiered application may be deployed in one or more VAs. A single physical machine may host one or more VAs. The idea behind delivering a product installed on a VA is that a customer will be running the application in an environment that is exactly the same as the environment in which the product was tested. Eliminating these environmental differences should eliminate problems that are specific to an environment in which the product was tested.","However, creating VAs is complicated, time-consuming and involves many steps. With the short timeframe companies have for development of multi-tiered applications in today's industry, there exists a need in the art for a way to automate the production of production-quality VAs.","A method and apparatus are providing for creating Virtual Appliances for use in a multi-tier computer system. The method includes the steps of providing a plurality of interactive servers operating together to achieve a predetermined enterprise objective, providing a configuration file that defines an environment and interface requirements for the plurality of interactive servers; providing a plurality of substantially identical virtual appliances, modifying the plurality of virtual appliances by installing a respective interactive server functionality in the defined environment and with the defined interface requirements into each of the plurality of virtual appliances, generating a catalog of the modified virtual appliances, and saving the modified virtual appliances and the catalog on a medium.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 1","FIG. 1"],"b":["10","10","10","10","12"]},"System  provides an interface that collects information about the specific environment of deployment. This collected information will ultimately be used by a VA so that it may be properly configured for use with the target system. Processing features within the system  process the collected information to produce an interface profile that allows a software system with a number of servers to be properly configured and deployed with a minimum of or no user interaction.","The system  will be described in the context of use with an automatic call distribution system . While use within an automatic call distributor may simplify installation of upgrades and modifications, it should be understood that the system  can also be used in virtually any other multi-tier computer system. As used herein, a multi-tier computer system is a computer system with a multitude of inter-dependent servers.","In general, the automatic call distribution system  of  may be used by an organization to route calls between clients ,  and agents ,  of the organization. In this regard, a customer ,  may place a call to the organization using a respective telephone ,  of the client , . The call may be routed through the public switch telephone network () to an automatic call distributor (ACD)  of the organization.","The ACD  may detect the call and determine the identity of the caller and\/or purpose of the call using any of a number of PSTN features (e.g., ANI, DNIS, etc.). Upon identifying the caller and\/or purpose of the call, the system  may select an agent ,  best suited to handle the call and route the call to a respective telephone ,  of the selected agent , . As the call is delivered to the selected agent, a host  of the call distribution system  may use the determined identity of the client ,  to deliver client records to a respective terminal ,  of the selected agent ,  at the same instant that the call arrives.","Alternatively, the client ,  may send an e-mail to the organization using a personal computer ,  of the client , . The e-mail may be routed through the Internet  to a host  of the organization. The host  may identify the client ,  via a source URL and\/or a purpose of the call from the \u201cRe:\u201d line of the e-mail and route the call accordingly.","In each case, the agent ,  may converse with the client ,  retrieve information from a database  and\/or enter into transactions with the client , . In each case, a record of the transaction may be created and saved in the database .","In order to provide the functionality required, the call distribution system  may require a number of servers , , , . A first server (e.g., ) may be a routing server that selects agents for handling calls. A second server (e.g., ) may be a web hosting server. Another server (e.g., ) may be a operational database server. Still other servers (e.g., ) may be a reporting database server, a recording database server, or agent portal servers.","Turning now to the system , an explanation will be provided as to how the software system  may be used in its numerous embodiments. The software system  includes at least three components. The three components may include a Virtual Appliance Automation Tool (VAAT) , a deployment wizard (DW)  and an image installer (II) . These three components work together to successfully install a multi-tiered application, using a VA, onto a target system.","The VAAT  is the tool that builds production VAs that are preloaded with multi-tier applications, and is the primary component described herein.","In general, the software installation system  is provided by a software developer for use by the organization in automatically installing software within the system . The VAAT  may reside on a host  operated by the software developer while the deployment wizard  and image installer  may exist in the form of CDs or files transferred between the host  of the software developer and host  of the organization.","The deployment wizard  is an automated tool that may be used to collect information about the interrelation and environment of the servers , , , . Information about the servers , , ,  is collected into a deployment configuration file  configured under the appropriate format (e.g., xml).","As used herein, a deployment configuration file  is a portable data structure that contains, inter alia, a comprehensive set of interface protocols for at least some servers of the multi-tier computer system. In this case, a set of interface protocols define who and how a server interacts with the other servers, not just for any system, but for the specific multi-tier system in which the server will operate. More specifically, the interface protocols are collected from the multi-tier system in which the servers will be installed.","Each of the sets of interface protocols is incorporated into a respective virtual appliance for the installation of the server into the multi-tier system. By incorporating the interface protocols into the respective virtual appliances, the servers can be individually installed with the respective virtual appliance, automatically, without regard to local security, network settings and machine setup standards.","The deployment configuration file  is accessed by the Virtual Appliance Automation Tool  either directly (e.g., through a CD) or through the Internet  in the case where the configuration file  resides on the organization's host server . The information within the deployment configuration file  can be used by the Virtual Appliance Automation Tool  to create one or more VAs ,  that may have the same or similar functionality of a respective server , , ,  that the VA ,  will replace. Once created by the VAAT , the VA , , and deployment configuration file  if necessary, may be loaded onto a medium, such as a CD or DVD, that is transported to and placed into a media drive of the system . Once loaded, the VAs ,  are used by the image installer  to automatically install and activate the VAs ,  on the system .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 2","FIG. 2"],"b":["105","150","110","120","130","125"]},"The automation program  is a program that coordinates the process of building VAs, according to the present embodiment. The automation program  uses the parameters specified in configuration file  and invokes the proper host scripts  to interact with a virtualization program  and create the desired VAs. Host scripts  are scripts that the automation program invokes to create VAs.","Temporary VAs  are VAs that are in the process of being built, according to the exemplary embodiment. Automation program  can communicate directly with the temporary VA while it is being built. Since VAs must have their own operating environment, they must be built on their own operating systems (OS's). Consequently, the temporary VA will have its own set of scripts, labeled in  as VA scripts . In an embodiment, automation program  uses host scripts  to invoke VA scripts , when appropriate.","Virtualization software  is a virtualization program. An example of a virtualization program is Microsoft's VMware, but the use of other virtualization software is within the scope of the invention. Virtualization software  may have its own Application Programming Interfaces (APIs) to allow the use of functions native to it. In some embodiments, the external scripts  may make calls to virtualization software 's APIs to perform certain functions. For example, calls to the APIs  may be made to perform functions such as registering, starting, stopping and\/or unregistering a temporary VA .","The VAAT may use a production configuration file  to provide information about the VAs to be created. The configuration file  is a file that contains information used by the automation program  for functions that the VAAT is to perform. In an embodiment, this file may include information such as the destination directory for built VAs, a list of VAs to build, and\/or the path to a deployment configuration file  (see ), if it exists. Other information may include, for example, the name of the VA to be built, the path to the base VA\u2014the base VA being the base operating system without any other software installed on it\u2014and\/or the list of installers to be invoked on the VA. Each installer may further include, for example, information such as the local path to the install and\/or the command line that to be used to invoke the installer silently. When the installer is invoked silently, it means that the installer is run and the application is installed without input from a user; in other words, the application is automatically installed on the base VA.","Once a temporary VA  has been fully built, the automation program  may also compress the built VAs  and then distribute the VAs  onto different media so that they may be shipped, if desired.  shows the VAs distributed on DVDs .","In the exemplary embodiment, the automation program  analyzes the size of the compressed VAs to determine how many VAs can fit on a single DVD . In an embodiment, the automation program  first combines several built VAs into a single file, then compresses that single file to a size that can be transferred to a desired media, such as a DVD, before transferring the compressed file to the desired media. If multiple DVDs are required, the automation program  may first distribute the built VAs into different directories, with each directory representing a single DVD . If desired, the automation program  may create an index file that describes which DVD each VA is on. This index may be used later by a different program, such as an image installer, to find the correct DVDs when installing the VAs. Although DVDs are shown as the desired media in , one of ordinary skill in the art would appreciate that DVDs are not the only media that may be used, and other media is within the scope and spirit of the invention.","The VAAT may be run with or without a graphical user interface (GUI). If a GUI is not used, command line arguments are used to run the VAAT. For example, a particular configuration file, such as an XML configuration file, can be specified for use to a VAAT by using a predetermined command line option. The information in the XML configuration file describes the VAs to be built, according to an embodiment. In another embodiment, an entire directory is specified by the user on the command line. The directory contains a plurality of configuration files as created by the user, optionally using a deployment wizard to create these configuration files. In this embodiment, a VAAT can create one VA for each configuration file it finds in the specified directory.","A user may also use a GUI to give instructions to a VAAT. For example, in an embodiment, a user may use the GUI may allow the user to specify: which VAs to create; to save; the configuration file to be used; a list of VAs to be created; to read a list of VAs, and\/or to start the build process for the VA. The user may also use the GUI to alter a deployment configuration file to adjust the attributes of the built VA, in some embodiments. The user may be given the option to cancel an automation when being run from within a GUI, in another embodiment.","VAAT may also be programmed to provide feedback to the user during the automation process. For example, in an embodiment, the user may be sent an email by the VAAT providing information. In an embodiment, the user is provided with status and progress reports as VAs are being created. In another embodiment, the user is notified if any problems occur during creation of the VAs.","Production VA Mode","The process for creating VAs can be referred to as \u201cProduction VA Mode\u201d.  is a flowchart demonstrating the process for creating VAs according to an embodiment of the invention.","There are multiple ways to invoke the Production VA Mode. For example, one can invoke Production VA Mode by running the VAAT without any command line arguments. In another embodiment, the Production VA Mode can be enabled by running the VAAT with a single command line argument that specifies a configuration file. In yet another embodiment, a directory is specified by the user on the command line. The directory contains a set of configuration files as created by the user, for example using a deployment wizard. In this embodiment, the VAAT can create one VA for each configuration file it finds in the said directory.","The process for creating Production VAs as shown in  starts at step , where preparation for creation of the VA is performed. Step  may include, for example, determining the location of key third party tools used by the VAAT, cleaning out any temporary directories, if needed, in case there are any in-process VAs from a previous run, and\/or creating the output directory in which all created VAs will be placed.","The next step  is to create a temporary directory that will contain the VA that is being created. At step , the base VA is copied to the temporary directory. The base VA is, for example, a VA with no installed programs that is compatible with the desired operating system.","At step , the VA descriptor file, which is a text file that contains information describing the VA, is altered to contain information about the VA. Examples of information in the VA descriptor file may include, for example, the VAs name, memory size and CPU count. At step , the VA is registered with the virtualization software so it can be detected by the software and consequently so the build process can be started. At step , the VA is started in the virtualization software. At step , the machine name inside the VA is changed. This prevents the VA that is being built from having a generic name.","At step , one or more installers, as desired by the user, are run inside the VA. These installers install the desired programs onto the production VA. At step , the VA is stopped. Stopping the VA may require the use of the virtualization software's APIs. Any unneeded virtualization file properties are removed at step . At step , any unneeded temporary files, such as temporary log files, are removed. At step , the VA is unregistered with the virtualization software.","At step , the files comprising the built VA are combined and compressed. In an embodiment, all the VA files are combined into a single compressed file. An example of a compressed file is one in TAR format. However, other compressed files are within the scope of the invention. In the present embodiment, at step , the compressed file is split into chunks to allow internal processes to distribute VAs across internal networks easier. In an embodiment, the desired chunk size is 500 megabytes.","At step , the completed, compressed and split VA is copied to the output directory. At step , the size of the VA is calculated to determine which DVD folder to put the VA in. If an index file is being used, the index file is updated to reflect where the file is being placed. Finally, at step , the VA is copied to the output directory and any temporary copies can be deleted.","Build Test VA Mode","In another embodiment, a process similar to creating production VAs as illustrated in  can be used to create test VAs for internal testing. This process is referred to as \u201cBuild test VA mode\u201d and is shown in . A test VA is a VA that has nothing more than the base operating system and any basic prerequisites that are needed to run tests. Test VAs are often not distributed to clients, but rather used internally to test production VAs to be built.","Like the production VA mode, there are multiple ways to invoke the Build Test VA Mode. In an embodiment, a user invokes Production VA Mode by running the VAAT without any command line arguments. In another embodiment, the Production VA Mode can be invoked by running the VAAT with a single command line argument that specifies a configuration.","The Build Test VA Mode is similar to the Production VA Mode. The process for creating Test VAs as shown in  starts at step , where preparation for creation of the test VA is completed. Step  may include, for example, determining the location of key third party tools used by the VAAT, cleaning out any temporary directories, if needed, in case there are any in-process VAs from a previous run, and creating the output directory in which all created test VAs will be placed.","The next step  is to create a temporary directory to hold the test VA that's being created. At step , the base VA is copied to the temporary directory. The base virtual machine is, for example, a clean virtual machine with the operating system. The test VA to be built may have a VA descriptor file, which is a text file that contains information describing a particular test VA. At step , the VA descriptor file is altered so it contains information about the test VA, for example the test VAs name, memory size and CPU count. At step , the test VA is registered with the virtualization software so it can be \u201cseen\u201d by the virtualization software and subsequently started. At step , the VA is started in the virtualization software. At step , the contents of the VAs hosts file is altered, but only if specified to do so by the user.","At step , the machine name and network settings inside the test VA are altered. At step , any folder can be optionally copied to the test VA. This step is performed if the user wishes to execute a script on the test VA.","At step , the user can optionally execute a script, batch file (or anything that can be run from the command line) on the test VA. At step , the test VA is stopped. Stopping the test VA may require the use of the virtualization software's APIs. Any unneeded virtualization file properties are removed at step . At step , any temporary files, such as temporary log files, that are unwanted are removed. At step , a snapshot of the newly-built test VA is created. This is useful if the user wishes to regularly load the clean image after performing some testing on the test VA.","At step , the test VA is unregistered with the virtualization software. At step , the test VA is copied to the network directory. Once the test VA is created, it is usually copied to a network drive. This is typically the drive on the host machine that will run the VA.","Testing VAs","In order to make testing VAATs easier, an automated process for testing installers can be also performed by the VAAT in another embodiment. This is referred to as Test VA mode.  is a flowchart demonstrating the process for testing VAs according to an embodiment of the invention.","There are multiple ways to invoke the Test VA Mode. For example, one can invoke Test VA Mode by running the VAAT with a specific command line argument.","The process for testing VAs is shown in . For each VA that is to be tested, the VA must be stopped if it is already running. This is shown at step . The next step is to revert to the VAs snapshot with the assumption that the snapshot contains a clean image of the machine, as shown in step . Once the VA is reverted, one or more silent installs can be run, as shown in step .","This process saves the developer time and effort associated with manually stopping the VA, reverting the VA, finding the latest built installer, and manually running through the installer GUI. When the silent install or installs complete, the developer can examine the installed VA to validate any changes or fix any bugs made to the installer.","External Interfaces","The external interface of the VAAT consists of its user interface and\/or its command line options. The command line interface is run by making arguments in the command line to control which mode the tool is started in and whether it is running silently or not. Examples of specific command line arguments, according to embodiments of the invention, are using \u201c-c\u201d for going to Test VA Creation Mode, \u201c-t\u201d for Testing VA mode, or no command line option for Production VA Mode.","An embodiment of a Graphics User Interface (GUI) for the VAAT when running in production VA mode is depicted in .",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 6"},"The bottom half of the interface shown in  shows the list of VAs to be built, and the output directory where all build VAs will be placed according to an embodiment. The VA Automation is started by pressing the \u201cBuild VMs\u201d button.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 8"},"In an embodiment, the \u201cCancel\u201d button can be activated at any time to cancel the current automation. Sometimes, however, the cancellation may not always happen immediately. The VA Automation tool may cancel the operation as soon as the currently executing step is completed, and will not proceed to the next step in the process. Consequently, since some steps take several minutes to run, a cancellation attempt may also take several minutes to complete.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 9","FIG. 6"]},"To build test VAs, the user may need to supply additional information, including the VA machine name, the path to the base VA image, and other information. For example, the user may need to specify whether to copy a folder to the VM or not, and, if so, the folder to copy, the Administrator user name that is configured inside the VA, and\/or the Administrator password that is configured inside the VA.","Other information may need to be specified, such as whether to run an optional command inside the VA, the network settings, the Hosts File entries, and\/or whether to transfer the built VA to a network location.","When all VAs that are to be built are specified, the \u201cBuild VMs\u201d button should be selected to start the process. The Status dialog box that was shown in  is also used when creating test VAs.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 13"},"The bottom half of  lists the VAs that are to be tested and the \u201cTest VMs\u201d button should be activated when the user is ready to begin a test. The \u201cStatus\u201d and \u201cInstallers\u201d dialogs shown above are both reused in this mode.","A specific embodiment of a virtual machine installer according to the present invention has been described for the purpose of illustrating the manner in which the invention is made and used. It should be understood that the implementation of other variations and modifications of the invention and its various aspects will be apparent to one skilled in the art, and that the invention is not limited by the specific embodiments described. Therefore, it is contemplated to cover the present invention and any and all modifications, variations, or equivalents that fall within the true spirit and scope of the basic underlying principles disclosed and claimed herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
