---
title: Systems and methods that employ an extensible architecture to define configuration functionality
abstract: The subject invention relates to systems and methods that generate modules profiles for industrial control modules (e.g., I/O, scanners, adapters . . . ). A module profile generally includes a set of components, interfaces and/or plug-ins that determine possible configurations for a module. Such entities are packaged in an XML based format to provide a dynamic module profile, wherein a definition type can be dynamically changed. Development and/or configuration of a module can be achieved through an industrial software development environment via a graphical hierarchical representation of configuration options defined in the module profile. In addition, the module profile provides for separately installable/release independent utilization via XML and COM based interfaces, wherein an end-user does not have to wait for a new software release in order to add a new module.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07861223&OS=07861223&RS=07861223
owner: Rockwell Automation Technologies, Inc.
number: 07861223
owner_city: Mayfield Heights
owner_country: US
publication_date: 20040927
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The subject invention relates to industrial control systems and, more particularly, to systems and methods that utilize a dynamic module profile to modify and extend configuration functionality of an industrial control module.","Industrial controllers are special purpose processing devices used for controlling (e.g., automated and semi-automated) industrial processes, machines, manufacturing equipment, plants, and the like. A typical controller executes a control program or routine in order to measure one or more process variables or inputs representative of the status of a controlled process and\/or effectuate outputs associated with control of the process. Such inputs and outputs can be binary, (e.g., \u201c1\u201d or \u201c0,\u201d \u201con\u201d or \u201coff,\u201d . . . ), and\/or analog, assuming a continuous range of values. A typical control routine can be created in a controller configuration environment that has various tools and interfaces whereby a developer can construct and implement a control strategy using industrial and conventional programming languages or graphical representations of control functionality. Such control routine can be downloaded from the configuration system into one or more controllers for implementation of the control strategy in controlling a process or machine.","Measured inputs received from a controlled process and outputs transmitted to the process can pass through one or more input\/output (I\/O) modules in a control system. Such modules can serve in the capacity of an electrical interface between the controller and the controlled process and can be located local or remote from the controller. Inputs and outputs can be recorded in memory. The input values can be asynchronously or synchronously read from the controlled process by one or more input modules and output values can be written directly to memory by a processor for subsequent communication to the process by specialized communications circuitry. An output module can interface directly with a controlled process by providing an output from memory to an actuator such as a motor, drive, valve, solenoid, and the like.","During execution of the control routine, values of the inputs and outputs exchanged with the controlled process can pass through memory. The values of inputs in memory can be asynchronously or synchronously updated from the controlled process by dedicated and\/or common scanning circuitry. Such scanning circuitry can communicate with input and\/or output modules over a bus on a backplane or network. The scanning circuitry can also asynchronously or synchronously write values of the outputs in memory to the controlled process. The output values from the memory can be communicated to one or more output modules for interfacing with the process. Thus, a controller processor can simply access the memory rather than needing to communicate directly with the controlled process.","In distributed control systems, controller hardware configuration can be facilitated by separating the industrial controller into a number of control elements, each of which performs a different function. Particular control modules needed for the control task can then be connected together on a common backplane within a rack and\/or through a network or other communications medium. The control modules can include processors, power supplies, network communication modules, and I\/O modules exchanging input and output signals directly with the controlled process. Data can be exchanged between modules using a backplane communications bus, which can be serial or parallel, or via a network. In addition to performing I\/O operations based solely on network communications, smart modules exist which can execute autonomous logical or other control programs or routines. Various control modules of a distributed industrial control system can be spatially distributed along a common communication link in several locations. Certain I\/O modules can thus be located proximate to a portion of the control equipment, and away from the remainder of the controller. Data can be communicated with these remote modules over a common communication link, or network, wherein all modules on the network communicate via a standard communications protocol.","In a typical distributed control system, one or more I\/O modules are provided for interfacing with a process. The outputs derive their control or output values in the form of a message from a master or peer device over a network or a backplane. For example, an output module can receive an output value from a processor via a communications network or a backplane communications bus. The desired output value is generally sent to the output module in a message. The output module receiving such a message will provide a corresponding output (analog or digital) to the controlled process. Input modules measure a value of a process variable and report the input values to another device over a network or backplane. The input values can be used by a processor for performing control computations.","Conventionally, many industrial control modules are programmed with \u201chard-coded\u201d (e.g., C, C++ . . . ) instructions that define module parameters and configuration options. As a consequence, additions and\/or changes to configuration functionality are limited by pre-defined structures established via the code and, in order to change or introduce functionality, the core code is modified and recompiled. Such inflexibility can restrict development productivity and limit the ability to engage third-party developers. Therefore, there is a need to increase module code flexibility to improve development efforts.","The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is intended neither to identify key or critical elements of the invention nor to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.","The subject invention provides systems and methods that generate module profiles for industrial control modules. Such profiles typically include a plurality of definition types, components, interfaces and\/or extensions (e.g., plug-ins) for a module (or module family) within an XML based package. The output of this module profile, which includes the definition type and configuration data, can be loaded on a module. An end-user can dynamically change a module's definition type without having to delete and\/or re-create the software module instance. Changing a module's definition type can result in any number of changes to the software representation of the physical module including adding, deleting or altering connections, data types, and data values. The module profile provides for separately installable\/release independent utilization via XML and COM based interfaces, wherein an end-user does not have to wait for a new software release to add a new module type. Such flexibility can improve development productivity and the ability to engage third-party developers. Thus, the subject invention provides for novel improvements over conventional system that typically utilize \u201chard-coded\u201d (e.g., C, C++ . . . ) instructions to define module parameters and configuration options, require recompiling altered code in order to change a module's configuration functionality since these systems are limited by pre-defined structures established via the code and require new software releases to add new modules.","In one aspect of the subject invention, a system that generates profiles for an industrial control module is provided. The system comprises a profile generator that obtains information associated with a particular industrial control module from an input specification and employs this information to construct a module profile (e.g., a model of the physical module). The output of the module profile (e.g., a definition type and configuration data) can be loaded on the module and utilized to specify and\/or configure parameters. The profile generator can include an assembler that facilitates determining what objects are available, and how to package various components, interfaces, extensions (e.g., plug-ins), etc. for a particular module. In addition, the profile manager includes a behavior manager that can be utilized to define multiple behaviors for entities that support more than one behavior and a packaging component that facilitate generating an XML package of selected components, interfaces, extensions, etc. After packaging the components, interfaces, extensions, etc. into a module profile, definition types and configurations parameters associated with the module profile can be utilized by an end-user to configure the module, such as a type redefinition. Such configuration can be achieved through a tree structure of hierarchical options, wherein the end-user can select options, set attributes, modify values, disable functionality, etc.","To the accomplishment of the foregoing and related ends, the invention, then, comprises the features hereinafter fully described. The following description and the annexed drawings set forth in detail certain illustrative aspects of the invention. However, these aspects are indicative of but a few of the various ways in which the principles of the invention can be employed. Other aspects, advantages and novel features of the invention will become apparent from the following detailed description of the invention when considered in conjunction with the drawings.","As utilized in this application, terms \u201ccomponent,\u201d \u201csystem,\u201d \u201ccontroller,\u201d \u201cmodule,\u201d \u201cdevice,\u201d \u201cmanager,\u201d and variants thereof are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a server and the server can be a component. One or more components can reside within a process and\/or thread of execution and a component can be localized on one computer and\/or distributed between two or more computers.","The subject invention relates to systems and methods that generate module profiles that define a set of configurations for a module and\/or a family of modules. In addition, the module profile can include a set of module type definitions that are available to the end-user without requiring the profile developer to write and\/or recompile core code. The end-user can utilize the output of a module profile to variously configure a module within the scope defined by the module profile. The dynamic nature of the output enables the end-user to dynamically change a module's definition type without having to re-create the module instance.","The present invention is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It may be evident, however, that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to facilitate describing the present invention.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","100","110","120"]},"The generated module profile (e.g., markup language based) can define the scope of and facilitate configuring module (e.g., I\/O, scanners, adapters, bridges . . . ) parameters, definition types, and options. In addition, the module profile output can be dynamic such that an end-user configuring the module can seamlessly add and\/or change functionality without any need to re-instantiate the object model. For example, an end-user can re-configure the I\/O module by changing its definition type and thus affecting the object model by adding or deleting a connection (e.g., a periodic data transfer to\/from the I\/O module), while preserving remaining configuration. In another example, the end-user can change a data type (e.g., from integer to floating point) associated with the I\/O module via the object model without being required to re-create the object model. Additions and\/or changes can be achieved by dynamically changing a module definition type and include, but are not limited to, changes in data types, changes to configuration data values, and changes to the connection structure. Additions, deletions, and transformations of objects and data can take place. Such change results in a definition type metamorphosis since the definition type is transformed from one type to another type on-the-fly and without deletion and re-creation of the object model within the control system. This novel feature provides for improvements over conventional techniques where, in order for an end-user to add and\/or change functionality, an existing module instance is deleted and subsequently re-created to be of the desired definition type. Furthermore, this feature provides the ability of a profile developer to specify the set of type definitions and module behaviors in XML without requiring code to be rewritten.","The profile generator  creates an internal object model of the module, which can be dynamically re-configured, as needed, to change definition types to any type supported by the profile and, thus, mitigate any need for object deletion and re-creation. For example, if the module definition type change does not affect portions of the object model, the unchanged object(s) do not change and existing data is preserved, but if the definition type change does affect the object model, then the object model can be morphed on-the-fly based on the module profile and new objects are populated with default values. The subject invention also provides a provision (e.g., via plug-in software components) to allow translation of data from the original object type to a new replacement object of a different type. This provides the ability to specify and\/or configure parameters, wherein the internal object can be morphed to any definition type defined in the module profile.","Since different module types offer unique capabilities, the profile generator  can be utilized to generate a specific module profile for a particular module type, wherein this profile can encompass virtually all components (e.g., DLLs, COM objects, XML files . . . ), interfaces, extensions, etc. deemed relevant to the module by a developer of the module profile. Thus, the definition type and\/or configuration data loaded on the module can be based on the process, plant, machine, manufacture, etc. that an associated controller and\/or the module is monitoring and\/or controlling. A developer can add desired functionality by creating plug-ins that re-use and\/or replace existing interfaces. Thus, if the base validation functionality does not support sufficient error checking, such functionality can be added through a validation plug-in. It is to be appreciated that this example is illustrative and not limitative. In general, both the core code and a plug-in can translate data such that one set of selections can be translated to another set of selections.","As described in detail below, the input component  can be a user interface (UI), an application programming interface (API), a software development environment, an industrial control development tool, etc. Thus, the user can interact with the input component  to generate the module profile. For example, the profile developer can determine what components, interfaces, plug-ins, etc. to include with the profile. In one aspect of the invention, this is achieved through various utilities and tools associated with the input component . In another aspect of the invention, the user utilizes the input component  to provide a module specification to the profile generator , wherein the profile generator  automatically creates the module profile based on the module specification.","In addition, the subject invention provides for separately installable\/release independent utilization via XML and COM based interfaces. Thus, an end-user does not have to wait for a new software release of the base control system software in order to add a new module. For example, the end-user can purchase and install I\/O support independent of the base control system software version. This provides for a novel improvement over conventional systems that require a new software release to add new modules. It also facilitates the ability of third parties to integrate new I\/O devices into the system.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["200","120","110","110","210","220","230","110","120"]},"The assembler  facilitates determining which components, interfaces, extensions\/plug-ins, etc. to include with a module profile, what objects can exist, and how to assemble such components, interfaces, extensions\/plug-ins, etc. in the module profile. In general, a collection of standard components and interfaces and various user defined plug-ins can be available for incorporation into a module profile, and the assembler  can facilitate selecting the components, interfaces, extensions, which can be the complete set or a subset thereof, for the particular module profile along with its associated definition type.","It is to be appreciated that respective constituents (e.g., components, interfaces, plug-ins . . . ) of a module profile can be associated with static and\/or variable (e.g., as defined by the profile developer) behavior. The behavior manager  can be utilized to determine and define suitable behavior. Examples of behaviors include validating data before applying the data, warning a user prior to performing critical operations, coordinating data with external changes, etc. The packaging component  can facilitate assembling the set of components, interfaces, plug-ins, etc. into a module profile (e.g., XML). The components, interfaces and\/or plug-ins included in a module profile essentially define the configuration scope (e.g., the possible definition types) for a module. Thus, an end-user can configure an instance of the module within the bounds defined by the associated module profile.","As noted above, the module profile can be assembled into a package and the end-user can change module functionality (e.g., its definition type . . . ) based on the package without having to replace the software module instance. It is to be appreciated that such package can be based on a markup language such as XML, for example. XML provides a structure and organization for the module profile and can specify changes in the underlying object model for the module. In addition, XML can be utilized to define module types, tags, ranges, data types, definition types, minimum values, maximum values, enumerations, etc. Conventional systems typically utilize hard coded (e.g., C++) instructions and, thus, new code must be generated and compiled in order to add and\/or change module configuration functionality. The nature of the module profile of the subject invention mitigates any need for new code to add and\/or change module configuration functionality and, therefore, provides for a novel improvement over conventional systems that can reduce cost associated with development, derivation and updates for a module profile.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3","b":["300","305","310","315","305","310","320","325","330","335","320","325","330","335"]},"The profile generator  comprises an assembler component , a behavior manager component , and a packaging component . The assembler  can facilitate grouping the set of components, interfaces, extensions, plug-ins, etc. for packaging within a module profile. The behavior manager  can define behavior for the selected components, interfaces, extensions, plug-ins, etc. For example, in many instances one or more components, interfaces, extensions, plug-ins, etc. can behave differently depending on the contents of the XML description. The behavior manager  can set suitable behavior based on input provided by the developer . The packaging component  can package the selected components, interfaces, extensions, plug-ins, etc. into a module profile.","The module profile can be generated in essentially any language, including standard and proprietary languages. In one instance, a markup language can be utilized. Suitable markup languages include Extensible Markup Language (XML), Standard Generalized Markup Language (SGML), and Hyper Text Markup Language (HTML), for example. By utilizing a markup language, the profile generator  can generate internal object models for the one or more modules . Such object models can vary dynamically to reflect a change in definition type. This provides the ability to specify and\/or configure I\/O parameters with an internal object, wherein the internal object can be morphed to any of the definition types supported by the object model.","The profile generator  can be utilized to generate a module profile that defines a set of definition types and configuration data. The output of the module profile can be utilized to dynamically change the physical module's definition type and configuration data without user intervention. It is to be appreciated that an initial default configuration can be employed or the end-user can be required to set up the module prior to module operation. As noted above, the configuration of a module can be dynamically changed by the end-user to change the definition type as well as other configuration without any need to regenerate the instance of the module. As depicted, the end-user  is provided with an end-user user interface (UI) , which enables the end-user a mechanism to effectuate configuration of the modules . In one aspect of the subject invention, the module profile defines a set of definition type transformations, as well as other configuration, wherein the end-user can dynamically switch between definition types of the object at essentially any time through a definition type morphing approach, which mitigates re-creating the software module instance. Generated module profiles can be stored in a profile store  for subsequent use.","It is to be appreciated that the developer UI  and the end-user UI  can be industrial control development environments, human interface, application programming interfaces (APIs), graphical user interfaces (GUIs), command line interfaces, software development studios, and the like. As such, the UIs  and  can provide regions and\/or means to alter and\/or manipulate graphical objects (e.g., icons, structures, text boxes, etc.). In addition, input regions can provide for entry of parameters, arguments, etc. that can be utilized to effectuate such entities. Moreover, one or more presentation regions can be provided to dynamically present interfaces to the developer and\/or end-user to provide a preview of any alteration, manipulation and\/or change. The UIs  and  can include basic text and\/or graphic regions that incorporate dialogue boxes, static controls, drop-down-menus, list boxes, pop-up menus, edit controls, combo boxes, radio buttons, check boxes, push buttons, and graphic boxes, for example. In addition, utilities such as vertical and\/or horizontal scroll bars that facilitate navigation and toolbar buttons to determine whether a region will be viewable, hidden, minimized, etc. can be employed.","The developer and\/or end-user can interact with at least the aforementioned regions to select and provide information via various devices such as a mouse, a roller ball, a keypad, a keyboard, a pen and\/or voice activation, for example. Typically, a mechanism such as a push button or an enter key on the keyboard\/keypad can be employed subsequent to entering textual and\/or voice information in order to invoke a response. However, it is to be appreciated that the invention is not so limited. For example, merely highlighting a check box can elicit an action. In another example, a command line interface can be employed to prompt (e.g., via a text message on a display and an audio tone) the developer and\/or end-user to perform an action or provide information via alpha-numeric input corresponding to an option provided in the prompt or an answer to a question posed in the prompt.","Moreover, the end-user UI  can be associated with a set of re-useable standard human interface (HI) components (e.g., as specified by an XML description) that facilitate setting a definition type and configuring controller and module data, for example, by providing display and editing capabilities. These components can be generated by assembling an aggregate component from a set of standardized HI controls. It is to be appreciated that the HI components and controls can be of a generalized nature or industry specific.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 4","b":["400","400"]},"The selection tree  comprises a parent element  with associated attributes . The attribute can include information such as a name of the element, for example. The parent element  is depicted with two branches, wherein one branch leads to a child element  and the other branch leads to child element . The child elements  and  are associated with respective attributes  and . The child element  also includes two branches. One of the branches leads to grandchild element  with associated attribute , and the other branch leads to grandchild element  with associated attribute . The child element  includes one branch to a grandchild element  with associated attribute .","By way of example, the parent element  can be considered a root of the selection tree . The children leaves  and  from the root  can provide legal configuration options for direct and rack, respectively. For example, the grandchildren leaves  and  from the direct leaf  can be associated with diagnostics configuration. For example, selecting leaf  can enable diagnostics, whereas selecting leaf  can enable no diagnostics (disable diagnostics). For rack configuration, diagnostics can be enabled by default. The leaf  can provide a means for the end-user to turn off diagnostics via selecting no diagnostics. In addition, any or all of the attributes ,  and  associated with the configuration options , , and  can be utilized to store unique identifiers\/identifications.","The selection tree  can be utilized to present configuration options to an end-user. Such presentation can be graphical, for example, within a user interface such as the UI  or the UI . In addition, the tree  can be displayed as depicted and\/or in one or more different formats (e.g., a grid, a list, nested drop down menus, pop-up windows . . . ) representative of the tree . In general, the end-user can begin configuring (e.g., walk through) the module at any level of the profile hierarchy tree and can switch between such levels as desired and permitted. Typically, configuring a particular element\/attribute within the tree  affects one or more other options within the tree , whereby setting a particular option (e.g., from a list of acceptable options) can result in additional (e.g., nested) options, discontinuation of previously presented options, setting other options to a default, or have no affect at all on available options. In general, options at one level of the tree define the options at the next level of the tree. In addition, the options available to the user define the bounds of the parameters and configuration of the module.","The end-user can reset configuration of any or all elements within the tree to a default configuration and\/or any previous state of configuration. Thus, the end-user is never completely locked out or blocked from changing a configuration option. For example, if the end-user desires to set a field to a particular value, but the desired value is not available as an option due to a previous setting, the end-user can back out or change the previous setting such that the desired value can be set.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 5","FIG. 4"],"b":["500","500","400"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6","b":["600","600","610","620","630","640","620","630","610","650","650","610","650"]},"The system  further includes a module profile bank  that is utilized to store module profiles as described herein. The module profile bank  can be located in configuration software installed on a workstation, desktop computer, laptop, hand held, and the like. In one aspect of the subject invention, the module profile bank  can be part of a project database, wherein a project, in general, defines controller and I\/O data for one controller (e.g., the controller ) and its associated I\/O modules (e.g., the modules ) within a rack. Where the control system includes multiple controllers (with respective I\/O modules), multiple projects can be generated, for example, one project for each controller and its associated I\/O modules, and stored in the project database. Controller and I\/O data for the controller  can be loaded to the controller , wherein the controller  can subsequently load the I\/O data to the respective I\/O modules .","It is to be appreciated that a project can be created before or after any physical hardware (e.g., the controller  and the I\/O modules ) is set up. In addition, an object model can be configured prior to installing a corresponding I\/O module from the I\/O modules . After such hardware is set up and operating, I\/O data can be loaded to the I\/O modules  through the controller , as described above, or directly from the object model. Furthermore, information associated with the I\/O modules  can be obtained directly from the I\/O modules . Such information can include a CIP key, a catalog number, a description, revisions supported, port type, etc. Moreover, an extensible messaging facility to communicate with the I\/O modules is provided. The messaging facility is driven by an XML description of a set of communication transactions applicable to one or more module types.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIGS. 7-9"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 7","b":["700","710","720","730","740"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 8","b":"800"},"At reference , a plurality of configuration entities are selected to include in a module profile. These entities include one or more components (e.g., DLLs, COM objects, XML files . . . ), interfaces, plug-ins (e.g., extensions to the base functionality), etc. Such entities can be obtained from a collection of standard components and interfaces and user specified extensions. At , the entities are assembled together. Such assembly can include determining which components, interfaces, plug-ins, etc. to include with a module profile, what objects are available, and how to assemble such components, interfaces, plug-ins, etc. in the module profile. At reference numeral , a behavior can be defined for entities with definable behavior (via XML and\/or plug-ins). In addition, entity behavior can be generated in the form of plug-in software modules that morph the module object model and associated configuration data when a definition type of the module is changed. At , the selected entities are packaged in an XML based module profile. It is to be appreciated that the XML and plug-ins specify an internal object model of the module, and the object model can provide the ability to specify and\/or configure parameters. In addition, the object model can dynamically change according to its definition type.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 9","b":["900","910","920"]},"At reference numeral , the end-user employs a user interface (as described herein) to change module configuration, for example, to change the definition type of the module to another definition type supported by the module profile. This change can be facilitated through a graphical display of the module profile. For example, the module profile can be represented through a hierarchical tree structure. This tree structure can be presented to the end-user and provide the end-user with the options defined by the module profile. As described above, changes can be made to the definition type without having to re-create the software module residing within the project database. By way of example, a current definition type can morph to another definition type when invoked by the end-user. It is to be appreciated that the end-user can change the definition type as often and as many times as desired without having to re-create the module residing with the project database. At , the new configuration, including new I\/O configuration data, is utilized by the module to facilitate monitoring and\/or controlling processes, plants, controllers, machines, and the like.","What has been described above includes examples of the present invention. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention, but one of ordinary skill in the art may recognize that many further combinations and permutations of the present invention are possible. Accordingly, the present invention is intended to embrace all such alterations, modifications, and variations that fall within the spirit and scope of the appended claims.","In particular and in regard to the various functions performed by the above described components, devices, circuits, systems and the like, the terms (including a reference to a \u201cmeans\u201d) used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., a functional equivalent), even though not structurally equivalent to the disclosed structure, which performs the function in the herein illustrated exemplary aspects of the invention. In this regard, it will also be recognized that the invention includes a system as well as a computer-readable medium having computer-executable instructions for performing the acts and\/or events of the various methods of the invention. In addition, while a particular feature of the invention may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
