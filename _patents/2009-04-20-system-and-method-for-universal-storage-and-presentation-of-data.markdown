---
title: System and method for universal storage and presentation of data
abstract: A method includes receiving, on an electronic device, one or more logical entities from a storage system having a universe of data. The one or more logical entities encapsulate data from the universe of data on the storage system. Each of the one or more logical entities belong to one of a plurality of logical-entity types defined by a universal representation format. The method additionally includes, for each of the one or more logical entities, rendering a representation of the logical entity on a spatial interface, the spatial interface comprising a plurality of spatial components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08442966&OS=08442966&RS=08442966
owner: 
number: 08442966
owner_city: 
owner_country: 
publication_date: 20090420
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF DRAWINGS"],"p":["This patent application claims priority from, and incorporates by reference for any purpose the entire disclosure of, U.S. Provisional Patent Application No. 61\/046,233, filed Apr. 18, 2008.","1. Technical Field","This patent application relates generally to data organization and presentation, and more particularly, but not by way of limitation, to systems and methods for universal presentation of data.","2. History of Related Art","Traditionally, the Internet was viewed as a type of collaboration mechanism for exchanging existing content among individual computers. In the same way, data sharing occurred among applications rather than as atomic units of data that reside on the Internet. More recently, cloud computing has been developed in attempts to address some of these problems.","Cloud computing focuses on transforming the concept of computing from a desktop-centric environment, where data is stored and managed locally, to a data-cloud environment that enables data access from any location. Instead of being constrained by limitations regarding where data is located on a network, a data cloud allows any piece of data to be accessible anywhere on any connected device. However, with both web and desktop applications, there are problems with how this cloud-like data is presented and managed by prior art user interfaces. Prior art methods of displaying cloud-like data can generally be classified into one of two categories. One can structure the data very generically inside of web pages that are managed by a containing application, such as hyper-text documents that are managed by a web browser, or one can provide a hard-coded representation of the data using, for example, widgets, as in desktop applications.","Due to structuring of the cloud-like data in terms of either generic representations or inflexible widgets, a user interface has no understanding of the underlying nature of the content. The means of manipulating and accessing data is only relevant to a specific type of data that the user interface supports. There is no way to have the user interface, regardless of how capable the data platform is, use the data outside of the interface or even for the data to be understood outside of a context in which it resides. Moreover, any additional piece of data can only be used in the context of the limited mechanisms provided by the interface.","In one embodiment, a method includes maintaining, via at least one computer, a universe of data, the universe of data being accessible as a plurality of logical entities that each belong to one of a plurality of logical-entity types. The plurality of logical-entity types are defined by a universal representation format. The method also includes transmitting one or more of the plurality of logical entities to an interface application for rendering on a user interface according to the universal representation format, the interface application being configured according to the universal representation format. Additionally, the method includes receiving, from the interface application, at least one manipulation for at least one logical entity in the one or more logical entities and updating, via the at least one computer, the maintained universe of data and the at least one logical entity in the one or more logical entities responsive to the receiving step.","In another embodiment, a system includes a data store that stores a universe of data and a computing device. The computing device executes instructions to maintain the universe of data, the universe of data being accessible as a plurality of logical entities that each belong to one of a plurality of logical-entity types, the plurality of logical-entity types being defined by a universal representation format. The computing device additionally executes instructions to transmit one or more of the plurality of logical entities to an interface application for rendering on a user interface according to the universal representation format, the interface application being configured according to the universal representation format. Furthermore, the computing device executes instructions to receive, from the interface application, at least one manipulation for at least one logical entity in the one or more logical entities and to update the maintained universe of data and the at least one logical entity in the one or more logical entities responsive to the receipt of the at least one manipulation.","In yet another embodiment, a method includes receiving, on an electronic device, one or more logical entities from a storage system having a universe of data. The one or more logical entities encapsulate data from the universe of data on the storage system. Each of the one or more logical entities belong to one of a plurality of logical-entity types defined by a universal representation format. The method additionally includes, for each of the one or more logical entities, rendering a representation of the logical entity on a spatial interface, the spatial interface comprising a plurality of spatial components.","In still another embodiment, a system comprises an electronic device. The electronic device executes instructions to receive one or more logical entities from a storage system having a universe of data. The one or more logical entities encapsulate data from the universe of data on the storage system. Each of the one or more logical entities belong to one of a plurality of logical-entity types defined by a universal representation format. Additionally, the electronic device executes instructions, for each of the one or more logical entities, to render a representation of the logical entity on a spatial interface, the spatial interface comprising a plurality of spatial components.","Various embodiments of the invention utilize a system and method for universally displaying data that offer numerous advantages over the prior art. One of ordinary skill in the art will recognize that data may be valuable for many purposes. For example, a digital photograph may be utilized by email, social networking, and instant-messaging services. In various embodiments, it is advantageous to develop a universal representation format for centrally storing data and to utilize the universal representation format to spatially arrange data in a spatial interface with a plurality of spatial components. The universal representation format may be usable, for example, in a cloud-computing environment. The spatial interface, via the spatial components, may access and present the data according to the universal representation format and provide a mechanism for the data to be explored and manipulated by a user.","As used herein, the term universal representation format refers to a data model that provides for a single representation of data that is independent of any specific use or purpose for the data being represented. Additionally, as used herein, the term spatial component refers to a user-interface component that is configured to display data according to the universal representation format. Further, the term spatial interface as used herein refers to a user interface that utilizes a plurality of spatial components to display data according to the universal representation format.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1A","b":["100","100","102","108","102","104","106","104","104","104","106","104","104"]},"A spatial interface application  of the spatial interface system  requests and receives one or more objects from the object handler  and renders object content for the received objects on a display . The object content includes properties for the one or more objects, which will be discussed further below. The display  may be operationally coupled, for example, to a computer, smartphone, personal digital assistant (PDA) and the like.","The object handler  maintains information on the universal representation format and, consequently, is aware of a plurality of object types permitted by the universal representation format, each of which is defined by a plurality of properties. The object handler  manages a universe of objects that each belong to one of the plurality of object types. Via the universe of objects, the object handler  maintains an object-oriented representation of the data store  in conformance with the universal representation format. In this manner, the spatial interface application  is able to request and receive objects from the object handler  using, for example, an application programming interface (API).",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 1B","FIG. 1B"],"b":["102","108","102","114","118","120","108","118","120","102","116","114"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["102","206","106","206","206","208","210","212","202","204","104","208","210","202","212","204","214","206","212"]},"Still referring to , in a typical embodiment, the data store  stores the universe of data, for example, in a relational database. Database tables, such as, for example, the database table , house the universe of data that the object handler  maps to one of the plurality of object types defined by the universal representation format. In various embodiments, a separate database table, such as, for example, the database table , may be utilized to represent each of the plurality of object types, with rows corresponding to objects and the columns corresponding to properties. For example, according to the universal representation format, the object  has object content that includes the identification property , the text property , and the links property . Accordingly, the identification property  and the text property  are shown mapped to corresponding fields in the database table .","Still referring to , the links property , however, belongs to a distinct class of property, referred to herein as a relation property, that is handled differently by the object handler . In a typical embodiment, the data for the relation property is gathered from a links table  that is distinct from database tables such as the database table  described above. As illustrated, the links table  has a row for each object that includes an identification for each object, such as the identification property , and a link and reference to each object that is deemed related to the object  such as, for example, the object . Although storage is discussed herein relative to tables in a relational database, it is contemplated that many other storage methodologies may be used without departing from the spirit and scope of the invention.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3A","FIG. 1"],"b":["300","110","302","110","106","110","106","302","304","304","110","302"]},"From step , execution proceeds to step . At step , the spatial interface application  determines a layout of the object viewers on a spatial interface. The spatial interface application  retrieves object viewers, for example, from the stack of object viewers and individually places the object viewers in the layout. The process of determining the layout will be described in more detail below. From step , execution proceeds to step . At step , the spatial interface renders the spatial interface on a display, such as the display  of . After step , the process  ends.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 3B","FIG. 3A"],"b":["350","352","350","352","352","352","356","1","356","2","358","352","360","362","364","1","364","2","364","3","358","366"]},"Still referring to , as illustrated, the top-level object viewer  includes object content , the primitive property viewers () and () include primitive properties such as, for example, primitive property , and the relation property viewer  includes the relation property . Additionally, object viewers (), (), and () include, for example, object content . It should be noted that the relation property  includes object content . It should further be noted that the object content  includes primitive property  and the relation property . Therefore, the top-level object viewer  utilizes the primitive property viewers () and () and the relation property viewer  in order to display the object content .","In a typical embodiment, the primitive property viewers () and () are utilized in the spatial interface to display primitive data within the top-level object viewer . Primitive data, in contrast to an object, is basic data such as text, numbers, dates, and the like that can be easily stored and accessed without the use of special abstractions. While the primitive property viewers () and () do not typically embed other spatial components, the relation property viewer  is utilized to represent relationships with other objects and, therefore, the object viewers (), (), and () are shown to be embedded within the relation property viewer . Therefore, the object viewers (), (), and () are considered to be in an embedded context. In that way, objects identified with the object viewers (), (), and () may be indicated to be related to the object identified with the top-level object viewer .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 4","b":["112","400","400","402","406","410","414","416","1","416","2","420","422","426","400","402","406","410","414","420","426","404","408","412","418","424","428"]},"The exemplary spatial interface  additionally includes spatial stacks  and . The spatial stack  includes an in-focus object viewer  on top of the spatial stack  and two out-of-focus object viewers () and () beneath. Similarly, the spatial stack  includes an in-focus object viewer  on top of the spatial stack  and one out-of-focus object viewer  beneath. The in-focus object viewer  and the in-focus object viewer  are considered in-focus as a result of being on top of spatial stacks  and , respectively. The out-of-focus object viewers (), (), and  are considered out-of-focus by virtue of not being on top of spatial stacks  or . In various embodiments, a spatial interface such as the exemplary spatial interface  allows a user to navigate within spatial stacks  and , for example, to change which object viewer is in-focus or out-of-focus. Additionally, in various embodiments, a spatial interface such as the exemplary spatial interface  allows a user to add object viewers to the spatial stacks  and . In a typical embodiment, the object viewers in a spatial stack represent a history of a user's viewing. Various embodiments of spatial stacks will be discussed in further detail relative to .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 5A","FIG. 5A","FIG. 1","FIG. 3A"],"b":["500","502","502","504","1","504","2","506","508","510","500","510","106","110","500"]},"In various embodiments, spatial components, including object viewers and property viewers, may exist in various content states, a content state being used to determine the extent to which a spatial component's content is exposed on the spatial interface. Typically, a content state begins with an object viewer and is propagated to embedded property viewers. The content state, however, is treated differently depending on whether an object viewer is in a particular content state or a property viewer is in the particular content state.","For example, a spatial interface may support passive, preview, and activated content states. Correspondingly, object viewers may, for example, be configured to support passive, preview, or activated content states. A passive content state may be considered a state in which minimum content that is necessary to differentiate the object being represented by the object viewer is displayed, that is, displaying the minimum necessary to distinguish one object from any other object of that type. An object viewer may be in a passive content state, for example, when the object viewer is in the embedded context. A preview content state may be considered a state in which, for example, a representative property from an object such as a text name or a photograph thumbnail is displayed. An activated content state may be considered a state in which all properties are displayed such as, for example, when an object viewer is a top-level object viewer on the spatial interface. In a typical embodiment, content that is displayed in a particular content state is defined by the object viewer and therefore is object-viewer-specific.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5B","b":["550","552","552","558","1","558","2","560","554","560","556","554"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 6","FIG. 1"],"b":["600","602","604","610","606","604","600","606","604","602","606","602","606","602","604","110","106","106","104"]},"Also shown in , in a similar manner, the object viewer  may be dragged onto the relation property viewer . Initially, the object viewer  is in the top-level context. Upon being dropped onto the relation property viewer , the object viewer  becomes related to the object viewer  and appears in the embedded context. The spatial interface application  then communicates the change to the object handler . The object handler subsequently performs a corresponding update on the links table  in the data store . One of ordinary skill in the art will recognize that object viewers such as the object viewer  may similarly be moved from the embedded context to the top-level context using a reverse procedure to that described above. Additionally, in various embodiments, object viewers such as the object viewer  may be temporarily be moved for purposes of providing a user a preview and an option to make the move permanent.","In various embodiments, object viewers such as the object viewer  may be designated to be static so that the object viewer  cannot accept new properties. One of ordinary skill in the art will recognize an object viewer such as object viewer  may be designated static as a performance optimization. In other embodiments, object viewers such as the object viewer  may be given an option according to a predetermined algorithm whether to accept a new property viewer such as the property viewer .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 7","FIG. 7","FIG. 6"],"b":["700","700","704","702","702","712","710","702","706","702","708","702","702","104","708","702"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 8","b":["800","110","800","800","800"]},"At step , the spatial interface application  initializes a layout by accessing a generalized layout guide for placement of spatial components. The flow  generally begins with the spatial interface application having a stack of spatial components for placement in the container. The generalized layout guide facilitates the placement of spatial components in the container by moving across the container in a predetermined direction as spatial components are placed. For example, in some embodiments, the generalized layout guide starts in the center of the layout and moves outward. In other embodiments, for example, the generalized layout guide moves left-to-right and top-to-bottom. One of ordinary skill in the art will recognize that not all layouts are identical. However, the generalized layout guide maintains consistency across layouts through the direction of movement. At step , if the stack of spatial components is not empty, the spatial interface application proceeds to step  and removes the next spatial component from the stack.","At step , the spatial interface application  places the spatial component in the layout based on information provided in the generalized layout guide and cached information regarding, for example, an object type. In various embodiments, the cached information is developed from previous iterations of the flow . The cached information includes, for example, historical size and placement information based on a type (e.g. object type) and context (e.g., embedded context) of the spatial component being placed. The size information includes, for example, height and width of a space that has previously been allocated for a spatial component of the same type for the same context. Placement is based on a best-fit analysis considering factors such as the size information and available space in the container. In some embodiments, the object viewers are strategically positioned in the stack according to priority so that, in the flow , the spatial interface application  places object viewers with a high priority first.","At step , if the spatial component being placed is successfully placed in the layout, layout information is passed to the container and the flow  returns to step  for a determination of whether any spatial components remain in the stack. If the spatial component being placed is not successfully placed in the layout at step , at step , the spatial interface application  attempts to place the spatial component in the layout based on actual size information for the spatial component being placed rather than the cached information. At step , if there is a second failure, the spatial interface application  returns the spatial component to the container without layout information at step  and the flow  returns to step  for a determination of whether any spatial components remain in the stack. Alternatively, if there is not a second failure, layout information is passed to the container and the flow  returns directly to step . The process flow  continues until the stack of spatial components is empty, in which case the flow  ends at step .","One of ordinary skill in the art will recognize numerous applications for the principles disclosed herein. For example, a spatial interface may be utilized as an internet portal, a social networking interface, or a media service interface for providing movies, photos, music, and the like. Many other applications are also contemplated and will be apparent to one of ordinary skill in the art.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 9","b":["102","108","900","918","902","918","900","904","918","902"]},"The main memory  also may be used for storing temporary variables or other intermediate information during execution of the instructions to be executed by the processor . The computer  further includes a read only memory (ROM)  or other static storage device coupled to the bus  for storing static information and instructions for the processor . A computer readable storage device , such as a magnetic disk or optical disk, is coupled to the bus  for storing information and instructions for the processor . The computer  may be coupled via the bus  to a display , such as a liquid crystal display (LCD) or a cathode ray tube (CRT), for displaying information to a user. An input device , including, for example, alphanumeric and other keys, is coupled to the bus  for communicating information and command selections to the processor . Another type of user input device is a cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direct information and command selections to the processor  and for controlling cursor movement on the display . The cursor control  typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allow the device to specify positions in a plane. In various embodiments, the input device  may also be combined with the display  in the form of a touch screen.","The term \u201ccomputer readable instructions\u201d as used above refers to any instructions that may be performed by the processor  and\/or other component of the computer . Similarly, the term \u201ccomputer readable medium\u201d refers to any storage medium that may be used to store the computer readable instructions. Such a medium may take many forms, including, but not limited to, non volatile media, volatile media, and transmission media. Non-volatile media include, for example, optical or magnetic disks, such as the computer readable storage device . Volatile media include dynamic memory, such as the main memory . Transmission media include coaxial cables, copper wire and fiber optics, including wires of the bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio frequency (RF) and infrared (IR) data communications. Common forms of computer readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, any other magnetic medium, a CD ROM, DVD, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, an EPROM, a FLASH EPROM, any other memory chip or cartridge, a carrier wave, or any other medium from which a computer can read.","Various forms of the computer readable media may be involved in carrying one or more sequences of one or more instructions to the processor  for execution. For example, the instructions may initially be borne on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to the computer  can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector coupled to the bus  can receive the data carried in the infrared signal and place the data on the bus . The bus  carries the data to the main memory , from which the processor  retrieves and executes the instructions. The instructions received by the main memory  may optionally be stored on the computer readable storage device  either before or after execution by the processor .","The computer  may also include a communication interface  coupled to the bus . The communication interface  provides a two-way data communication coupling between the computer  and a network, such as the network  of . For example, the communication interface  may be an integrated services digital network (ISDN) card or a modem used to provide a data communication connection to a corresponding type of telephone line. As another example, the communication interface  may be a local area network (LAN) card used to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, the communication interface  sends and receives electrical, electromagnetic, optical, or other signals that carry digital data streams representing various types of information. The computer readable storage device  can further include instructions for carrying out various processes for image processing as described herein when executed by the processor . The computer readable storage device  can further include a database for storing data relative to same.","Although various embodiments of the method and apparatus of the present invention have been illustrated in the accompanying Drawings and described in the foregoing Detailed Description, it will be understood that the invention is not limited to the embodiments disclosed, but is capable of numerous rearrangements, modifications and substitutions without departing from the spirit of the invention as set forth herein."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A more complete understanding of the method and apparatus of the present invention may be obtained by reference to the following Detailed Description when taken in conjunction with the accompanying Drawings wherein:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
