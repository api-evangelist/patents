---
title: Fluent API patterns for managing object persistence
abstract: Fluent API Patterns promote balance in managing object persistence. Code which obtains an object-relational mapper session contains API Patterns that manipulate persistence ignorant objects using calls to a fluent interface. When the developer's code executes, it may manipulate an object state, a property state, and/or a persistent relationship of the persistence ignorant object. The code may implement API Patterns such as find-change-save, current-value-original-value, nested-property, incremental-graph-load, incremental-graph-filtered-load, property-modification, dictionary, and/or other API Patterns. Additional examples of API Patterns include an API Pattern to read current, original, and database values for all properties of an entity; an API Pattern to set current and/or original values from another object; and an API Pattern to create a cloned object containing current, original, and/or database values. In any or all of these situations, the API Pattern calls to the fluent interface may be written in a strongly typed language.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08595175&OS=08595175&RS=08595175
owner: Microsoft Corporation
number: 08595175
owner_city: Redmond
owner_country: US
publication_date: 20110711
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","COPYRIGHT AUTHORIZATION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Additional Examples","CONCLUSION"],"p":["This application is related to the following applications: U.S. patent application Ser. No. 13\/166,825 filed 23 Jun. 2011 entitled \u201cConventions for Inferring Data Models\u201d as well as the following applications co-filed with the present application: U.S. patent application Ser. No. 13,179,914 filed Jul. 11, 2011, U.S. patent application Ser. No. 13\/179,598 filed Jul. 11, 2011, and U.S. patent application Ser. No. 13\/179,629 filed Jul. 11, 2011.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","Objects and other items which are created or modified during execution of some piece of software can persist beyond the end of that execution if they are stored in a non-volatile medium, such as a flash memory or a hard drive. Object persistence is sometimes a topic of interest in persistent operating systems, or in software that utilizes object databases or object-relational mapping, for example. Although object-relational mapping software is used as a primary example herein, objects, persistence, fluency, API patterns, and other aspects of the discussion are sometimes relevant to other kinds of software, such as persistent operating systems that utilize objects.","An object-relational mapping can be used to convert data between an object model of an object-oriented program and a relational database. The mapping is performed, at least in part, by a tool known as an object-relational mapper. The acronym ORM is used herein to denote the mapping tool, the mapping itself, or both.","An ORM is useful because data in the object model is organized in non-scalar items, whereas data in the relational database is organized in scalar items. Integers, floating point values, and strings are examples of scalar values; structs, records, and object instances are examples of non-scalar values. An object model includes objects (class instances) which are frequently non-scalar values. In addition to multiple associated data values, an object may have associated methods, such as methods to set or get the data values or perform other operations. Many familiar database systems, including many structured query language database management systems, store and manipulate only scalar values, which are organized within tables. An ORM helps convert object values into groups of scalar values for persistent storage in the database, and convert those scalar values back into objects upon retrieval from the database. Thus, an ORM helps translate a logical representation of objects into a form that can be stored persistently in a relational database, without losing track of object properties and inter-relationships.","In the course of developing a product which uses object-relational mapping, a developer can benefit both from the use of a persistence framework to access non-volatile storage and from the use of objects which are independent of the persistence framework. In particular, developers may be assisted by a balance between separating persistence concerns from domain objects in a business logic layer, on the one hand, and managing persistence in the same object classes when working in a persistence layer, on the other hand. Some embodiments described herein help provide such a balance, by supporting use of fluent API Patterns for managing object persistence.","Some embodiments provide API-Pattern-based tools and techniques for using persistable objects. For example, in some approaches a developer writes code that (when run) obtains a session from an object-relational mapper (ORM) and also writes code containing an API pattern which (when run) manipulates a mapped persistence ignorant object using calls to a fluent interface. For convenience, a session is sometimes called an \u201cORM session\u201d, a \u201cunit of work\u201d, a \u201ccontext\u201d, or a \u201ccontext instance\u201d. When the developer's code executes, it may manipulate an object state, a property state, and\/or a persistent relationship of the persistence ignorant object.","Several examples of API Patterns follow, beginning with labeled API Patterns, namely, API Patterns which are given a label herein for convenient reference. The code may implement a find-change-save API Pattern to find or verify that the object's state is unchanged, then change the object's state to indicate deletion, and then save the session. The label of the find-change-save API Pattern is \u201cfind-change-save\u201d. The code may implement a current-value-original-value API Pattern to access and manipulate both a current value and an original value of an object. The label of this API Pattern is \u201ccurrent-value-original-value\u201d, and so on with other labeled API Patterns. The code may implement a nested-property API Pattern to access and manipulate a non-scalar property that depends on the containing object for persistence.","Sometimes multiple persistable objects are defined in a session and are related to one another by references, forming a graph. \u201cGraph\u201d is used here in a broad sense, to include lists, trees, sets, and other data structures which are built using objects (as nodes) and object references (as links). The code may implement an incremental-graph-load API Pattern to incrementally load portions of a graph into volatile memory. In some of these cases the code may load portions of a graph based on a filtering predicate, according to an incremental-graph-filtered-load API Pattern. The code may implement a property-modification API Pattern to check whether a property is marked as modified and\/or to mark a property as modified. The code may implement a dictionary API Pattern to set current and\/or original values of the object from a dictionary.","Other API Patterns are not labeled but are also discussed. Some examples include an API Pattern to read current, original, and database values for all properties of an entity; an API Pattern to set current and\/or original values from another object; and an API Pattern to create a cloned object containing current, original, and\/or database values. In any or all of the situations described above (with labeled or with unlabeled API Patterns), the developer's code may be written in a strongly typed language.","The examples given are merely illustrative. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter. Rather, this Summary is provided to introduce\u2014in a simplified form\u2014some concepts that are further described below in the Detailed Description. The innovation is defined with claims, and to the extent this Summary conflicts with the claims, the claims should prevail.","Overview","Persistence Ignorance support is sometimes a desirable characteristic of object persistence systems, such as Object\/Relational Mappers (ORMs). Persistence ignorance involves removing from business logic\/subject domain classes any dependency to a persistence framework. Such dependency removal (or equivalently, avoidance of dependency) allows for layered architectures in which business logic can be developed without paying significant attention to the implementation of persistence. As a result, developers may benefit by gaining flexibility, simplicity and maintainability for business logic code.","On the other hand, persistence aware objects usually offer a simpler programming surface for aspects that are closely related to persistence, by allowing for direct manipulation in the object instances of aspects such as (i) a persistence state of an object (e.g., whether the object is to be added, updated, deleted from the database), (ii) original value(s) of properties and whether a property should be considered modified, (iii) control of persistent relationships with other objects (e.g., whether an object on the other side of a reference has been loaded into volatile memory).","Some familiar approaches which offer control for persistence ignorant objects contain complex Application Program Interfaces (APIs) that concentrate a large number of concepts in very few abstractions. A challenge is present, in that although it is often desirable to separate persistence concerns from domain objects while developing the business logic layer, those aspects naturally belong to the same object instances when working at the persistence layer. Another shortcoming of some familiar approaches is that their sophisticated programming interfaces for change tracking and relationship management usually do not provide strong typing. Without strong typing, it is difficult if not impossible to obtain the benefits of compile-time checking of the persistence logic code.","Some embodiments described herein help meet the foregoing challenge, and reduce or overcome familiar shortcomings. API Patterns described in this document provide most of the same simplicity in manipulating change tracking and relationship that persistence aware objects often provide, while preserving for developers some very useful capabilities for working with persistence ignorant objects. In particular, some embodiments provide and\/or utilize a fluent API pattern for change tracking and relationship management of persistence ignorant objects. In some, application programming interfaces look and behave like the ones under DbContext.Entry, i.e., with fluent interfaces that provide simple and strongly typed access to object persistence information associated with objects, without requiring the objects themselves to be aware of persistence. Some achieve this by taking advantage of lambda expressions, type inference and generics support.","Some embodiments described herein may be viewed in a broader context. For instance, concepts such as APIs generally, API patterns generally, object-relational mapping, interface fluency, objects, and\/or persistence may be relevant to a particular embodiment. However, it does not follow from the availability of a broad context that exclusive rights are being sought herein for abstract ideas; they are not. Rather, the present disclosure is focused on providing appropriately specific embodiments. Other media, systems, and methods involving APIs generally, API patterns generally, object-relational mapping, interface fluency, objects, and\/or persistence, for example, are outside the present scope. Accordingly, vagueness and accompanying proof problems are also avoided under a proper understanding of the present disclosure.","Reference will now be made to exemplary embodiments such as those illustrated in the drawings, and specific language will be used herein to describe the same. But alterations and further modifications of the features illustrated herein, and additional applications of the principles illustrated herein, which would occur to one skilled in the relevant art(s) and having possession of this disclosure, should be considered within the scope of the claims.","The meaning of terms is clarified in this disclosure, so the claims should be read with careful attention to these clarifications. Specific examples are given, but those of skill in the relevant art(s) will understand that other examples may also fall within the meaning of the terms used, and within the scope of one or more claims. Terms do not necessarily have the same meaning here that they have in general usage, in the usage of a particular industry, or in a particular dictionary or set of dictionaries. Reference numerals may be used with various phrasings, to help show the breadth of a term. Omission of a reference numeral from a given piece of text does not necessarily mean that the content of a Figure is not being discussed by the text. The inventors assert and exercise their right to their own lexicography. Terms may be defined, either explicitly or implicitly, here in the Detailed Description and\/or elsewhere in the application file.","As used herein, a \u201ccomputer system\u201d may include, for example, one or more servers, motherboards, processing nodes, personal computers (portable or not), personal digital assistants, cell or mobile phones, other mobile devices having at least a processor and a memory, and\/or other device(s) providing one or more processors controlled at least in part by instructions. The instructions may be in the form of firmware or other software in memory and\/or specialized circuitry. In particular, although it may occur that many embodiments run on workstation or laptop computers, other embodiments may run on other computing devices, and any one or more such devices may be part of a given embodiment.","A \u201cmultithreaded\u201d computer system is a computer system which supports multiple execution threads. The term \u201cthread\u201d should be understood to include any code capable of or subject to scheduling (and possibly to synchronization), and may also be known by another name, such as \u201ctask,\u201d \u201cprocess,\u201d or \u201ccoroutine,\u201d for example. The threads may run in parallel, in sequence, or in a combination of parallel execution (e.g., multiprocessing) and sequential execution (e.g., time-sliced). Multithreaded environments have been designed in various configurations. Execution threads may run in parallel, or threads may be organized for parallel execution but actually take turns executing in sequence. Multithreading may be implemented, for example, by running different threads on different cores in a multiprocessing environment, by time-slicing different threads on a single processor core, or by some combination of time-sliced and multi-processor threading. Thread context switches may be initiated, for example, by a kernel's thread scheduler, by user-space signals, or by a combination of user-space and kernel operations. Threads may take turns operating on shared data, or each thread may operate on its own data, for example.","A \u201clogical processor\u201d or \u201cprocessor\u201d is a single independent hardware thread-processing unit, such as a core in a simultaneous multithreading implementation. As another example, a hyperthreaded quad core chip running two threads per core has eight logical processors. Processors may be general purpose, or they may be tailored for specific uses such as graphics processing, signal processing, floating-point arithmetic processing, encryption, I\/O processing, and so on.","A \u201cmultiprocessor\u201d computer system is a computer system which has multiple logical processors. Multiprocessor environments occur in various configurations. In a given configuration, all of the processors may be functionally equal, whereas in another configuration some processors may differ from other processors by virtue of having different hardware capabilities, different software assignments, or both. Depending on the configuration, processors may be tightly coupled to each other on a single bus, or they may be loosely coupled. In some configurations the processors share a central memory, in some they each have their own local memory, and in some configurations both shared and local memories are present.","\u201cKernels\u201d include operating systems, hypervisors, virtual machines, BIOS code, and similar hardware interface software.","\u201cCode\u201d means processor instructions, data (which includes constants, variables, and data structures), or both instructions and data.","\u201cProgram\u201d is used broadly herein, to include applications, kernels, drivers, interrupt handlers, libraries, and other code written by programmers (who are also referred to as developers).","A \u201cgraph\u201d is a structure having nodes connected (or designed to be connectable during program execution) by links. Trees, linked lists, hash tables, and many other familiar data structures are examples of graphs. Links may be implemented using pointers or other references, and nodes may be implemented using structs or objects, for example.","A \u201csession\u201d or \u201cORM session\u201d (sometimes referred to as a \u201cdata context\u201d, \u201cdata context instance\u201d, or \u201cunit of work\u201d) can be described as a primary entry point to an object-relational mapper. The session manages a connection to a relational database. Using this connection the session allows data to be queried from the database and materialized into objects. The session keeps track of modifications to these objects, allows for adding new objects and deleting existing objects, and orchestrates the writing of these changes back to the database. The session may also provide mechanisms to examine the objects that are being tracked and the relationships between them and to manipulate these objects, their state, and their relationships.","\u201cAutomatically\u201d means by use of automation (e.g., general purpose computing hardware configured by software for specific operations discussed herein), as opposed to without automation. In particular, steps performed \u201cautomatically\u201d are not performed by hand on paper or in a person's mind; they are performed with a machine. However, \u201cautomatically\u201d does not necessarily mean \u201cimmediately\u201d.","Throughout this document, use of the optional plural \u201c(s)\u201d or \u201c(es)\u201d means that one or more of the indicated feature is present. For example, \u201cAPI Pattern(s)\u201d means \u201cone or more API Patterns\u201d or equivalently \u201cat least one API Pattern\u201d.","Throughout this document, unless expressly stated otherwise any reference to a step in a process presumes that the step may be performed directly by a party of interest and\/or performed indirectly by the party through intervening mechanisms and\/or intervening entities, and still lie within the scope of the step. That is, direct performance of the step by the party of interest is not required unless direct performance is an expressly stated requirement. For example, a step involving action by a party of interest such as accessing, ascertaining, calling, causing, chaining, changing, checking, configuring, creating, executing, filtering, finding, forming, inspecting, loading, manipulating, marking, modifying, obtaining, reading, receiving, saving, setting, specifying, verifying, writing (or accesses, ascertains, calls, causes, etc.) with regard to a destination or other subject may involve intervening action such as forwarding, copying, uploading, downloading, encoding, decoding, compressing, decompressing, encrypting, decrypting, authenticating, invoking, and so on by some other party, yet still be understood as being performed directly by the party of interest.","Whenever reference is made to data or instructions, it is understood that these items configure a computer-readable memory thereby transforming it to a particular article, as opposed to simply existing on paper, in a person's mind, or as a signal on a wire, for example.","Operating Environments","With reference to , an operating environment  for an embodiment may include a computer system . The computer system  may be a multiprocessor computer system, or not. An operating environment may include one or more machines in a given computer system, which may be clustered, client-server networked, and\/or peer-to-peer networked. An individual machine is a computer system, and a group of cooperating machines is also a computer system. A given computer system  may be configured for end-users, e.g., with applications, for administrators, as a server, as a distributed processing node, and\/or in other ways.","Human users  may interact with the computer system  by using displays, keyboards, and other peripherals . System administrators, database administrators, developers, engineers, and end-users are each a particular type of user . Automated agents acting on behalf of one or more people may also be users . Storage devices and\/or networking devices may be considered peripheral equipment in some embodiments. Other computer systems not shown in  may interact with the computer system  or with another system embodiment using one or more connections to a network  via network interface equipment, for example.","The computer system  includes at least one logical processor . The computer system , like other suitable systems, also includes one or more computer-readable storage media . Media  may be of different physical types. The media  may be volatile memory, non-volatile memory, fixed in place media, removable media, magnetic media, and\/or optical media, as opposed to media such as a wire that merely propagates a signal. In particular, a configured medium  such as a CD, DVD, memory stick, or other removable non-volatile memory medium may become functionally part of the computer system when inserted or otherwise installed, making its content accessible for use by processor . The removable configured medium  is an example of a computer-readable storage medium . Some other examples of computer-readable storage media  include built-in RAM, ROM, hard disks, and other storage devices which are not readily removable by users .","The medium  is configured with instructions  that are executable by a processor ; \u201cexecutable\u201d is used in a broad sense herein to include machine code, interpretable code, and code that runs on a virtual machine, for example. The medium  is also configured with data  which is created, modified, referenced, and\/or otherwise used by execution of the instructions . The instructions  and the data  configure the medium  in which they reside; when that memory is a functional part of a given computer system, the instructions  and data  also configure that computer system. In some embodiments, a portion of the data  is representative of real-world items such as product characteristics, inventories, physical measurements, settings, images, readings, targets, volumes, and so forth. Such data is also transformed as discussed herein, e.g., by creation, deployment, display, execution, loading, mapping, modification, setting and\/or other operations.","Developer code  with objects , a fluent interface  to a persistence management framework, tools  such as an IDE  and an object-relational mapper , other software, an ORM session , and other items shown in the Figures and\/or discussed in the text may reside partially or entirely within one or more media , thereby configuring those media. A database  and associated schema  (considered in some approaches to be part of the database) may be present on one or more machines in the system . Graphs  having objects  as nodes may also be present, in non-volatile and\/or volatile storage media on one or more machines. In addition to processors  and memory , an operating environment may also include other hardware such as displays, buses, power supplies, and accelerators, for instance.","In some embodiments, the ORM session  takes the form of a Microsoft\u00ae DbContext class (or equivalently herein, class instance), which provides the main entry point for working with the Object\/Relational Mapper  in Microsoft's Entity Framework technology (version 4.1), for example (mark of Microsoft Corporation). The ORM session  implements a familiar Unit of Work pattern and also includes elements of a familiar Repository pattern.","As indicated, a given operating environment  may include an Integrated Development Environment (IDE)  which provides a developer with a set of coordinated software development tools. In particular, some of the suitable operating environments for some embodiments include or help create a Microsoft\u00ae Visual Studio\u00ae development environment (marks of Microsoft Corporation) configured to support program development. Some suitable operating environments include Java\u00ae environments (mark of Oracle America, Inc.), and some include environments which utilize languages such as C++ or C# (\u201cC-Sharp\u201d), but teachings herein are applicable with a wide variety of programming languages, programming models, and programs, as well as with endeavors outside the field of software development per se that use ORM applications (i.e., applications with code  utilizing an ORM session ).","Items are shown in outline form in  to emphasize that they are not necessarily part of the illustrated operating environment, but may interoperate with items in the operating environment as discussed herein. It does not follow that items not in outline form are necessarily required, in any Figure or any embodiment.","To further illustrate the operating environment of some embodiments, several aspects of a more comprehensive solution will now be discussed, with the understanding that not every feature or capability discussed is necessarily present in a given embodiment.","User Classes","As part of creating an application an application developer  creates an object model containing data classes for objects , and a data context (session ). For example, a simple data model might consist of two entity types\u2014one representing products and the other representing categories to which products belong. Using C# developer code  as an example (the programming language is not dispositive), the classes might look like this:",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class Product"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003public int Id { get; set; }"]},{"entry":[{},"\u2003\u2003public string Name { get; set; }"]},{"entry":[{},"\u2003\u2003public Category Category { get; set; }"]},{"entry":[{},"}"]},{"entry":[{},"public class Category"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003public string Id { get; set; }"]},{"entry":[{},"\u2003\u2003public ICollection<Product> Products { get; set; }"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The exact nature of the classes is not important. These are simple classes that do not derive from any special base type, implement any interfaces, or have any required attributes, and that use simple automatic properties. These classes represent the object model for the application.","In an Entity Framework environment, the application developer also writes a data context (ORM session ) that derives from the provided DbContext base class. For example:",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class MyContext : DbContext"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003public DbSet<Product> Products { get; set; }"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This developer code  is sufficient to create the data access part of an application. Also, the application developer can avoid adding any other configuration to non-code files. For example, adding a connection string to the application configuration file can be skipped.","Initialization of the ORM Session DbSet Properties","When an instance of the ORM session  (e.g. MyContext) is created it is scanned for all DbSet properties that have public set methods to assign values. Each of these methods is called automatically to set the property to an instance of the implicated collection or other group. This removes the burden from the application developer of creating and setting DbSet instances for their session and allows the context to be written with simple automatically identified properties. The application developer can disable automatic initialization of sets for some or all sets if the application needs to use some special form of initialization.","Discovering the Database Connection","The first time that an instance of the ORM session (e.g. MyContext) is used a connection to an underlying database  is created. If no configuration is supplied then a convention is used to create the connection. A default convention uses the name of the context as the database name and connects to an instance of SQL Server\u00ae Express edition or another database management solution running on the local machine (mark of Microsoft Corporation). This convention can be changed to create connections to any other type of database for which an Entity Framework provider is available, on any machine, for example. The convention can be overridden by the application developer in a number of ways, such as allowing a connection from the application's configuration file to be used.","Discovering the Data Model","The first time that an instance of the ORM session (e.g. MyContext) is used, the data model for that ORM session  is discovered automatically. The data model used can be an Entity Data Model (EDM) as supported by the Microsoft\u00ae Entity Framework, or another form of data model could be used. If the connection created contains a data model specification already, then the data model specified is used and data model discovery ends.","If the connection does not contain a data model specification, then the DbSet properties of the ORM session  are used as the basis for discovering an object model which is then in turn used to create a data model. The generic type of each DbSet property is used to define an entity type of the object model. For example, using MyContext defined above, the type Product is discovered as an entity type in the model. Discovery mechanisms are then used to discover the remainder of the object model and create a data model from it. Known mechanisms may be used such that all types, properties, and relationships of the model are discovered. For example, using the object model above, Category is also discovered as an entity type through its reachability from Product. In this example, the object model discovered and the data model created from it therefore include the Product and Category entity types, the relationship between these types, and the properties of these types.","The application developer may be allowed to make changes to the data model before it is finalized. This allows application developers to use as much of the automatic mechanism as possible and only make changes where their goals are different from the defaults. Notably, a developer is not called on to configure everything manually merely because some aspect of their model does not match the defaults.","Caching the Data Model","In some cases, the data model created by the above steps is cached in an application-domain-wide cache, keyed by the type of the application's data context. This cache is checked each time that an instance of the ORM session is created, and if a data model is found in the cache then it is used instead of going through the entire discovery process again. This caching helps ensure that applications run fast enough while using the steps described above. An application developer can create and cache the data model manually if the default model discovery and caching does not meet the developer's goals.","Initializing the Database","The application developer can set a database initializer to be run the first time an instance of an ORM session is used with a given model and connection in the application domain (Common Language Runtime application domains and app-domains are examples of an application domain). In some embodiments, the default initializer automatically creates the database and schema if it does not already exist. However, different initializers can be configured to allow actions such as: creating the database and\/or schema automatically; tweaking the database by configuring options such as indexes; migrating an existing database and schema to match the data model; or seeding the database with data. In general, custom initializers may perform any actions the application developer indicates, to get the database into a state where it can be used by the application. Database initialization can also be disabled if it is not appropriate for the application.","With a solution along the lines described above, an application developer merely writes simple classes for the data model and ORM session, and then uses an instance of that session in order to create a fully functional application backed by a relational database. In addition, the developer can easily intercede at any point in the development process to add customizations as appropriate for their application. Such ease and flexibility can provide significant benefits in the creation of data applications.","Systems",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["202","202","202","204","206","208","210","212","214","216","202"]},"API Patterns  provide sequencing, subject matter, and\/or other constraints as discussed herein, thereby structuring actions  on objects . Possible actions  may include, for example, calls  to object persistence framework interface(s)  in a session , object state verifications , and object state changes . Interface  calls  and other actions  can read and\/or write an object's persistence state , an object's property(ies) , an object's persistence relationship(s)  with other objects, and\/or an object's values, namely, its original value(s) , current value(s) , and\/or database value(s) .","With reference to , some embodiments provide a computer system  with a logical processor  and a memory medium  configured by circuitry, firmware, and\/or software to transform an operating environment by API Pattern-based persistence management as described herein.","Some embodiments include a computer system with a logical processor , a memory  in operable communication with the logical processor, and an object-relational mapping session  residing in the memory. A mapped persistence ignorant object  also resides in the memory, and has at least one state  as part of the session . A fluent interface  to the persistence framework of the session  also resides in the memory. A developer code  residing in the memory contains an API Pattern . Upon execution, the developer code  manipulates the mapped persistence ignorant object  using calls  to the fluent interface . The calls  are not constrained merely by the fluent interface , but are also structured in (i.e., in conformance with) the API Pattern .","In some embodiments, the API Pattern  is a find-delete-save API Pattern , namely, an API Pattern which specifies a verification  that the object's state  is unchanged, a post-verification change  to the object's state  to indicate deletion, and a post-change action  to save the session  to non-volatile storage.","In some embodiments, the API Pattern  is a current-value-original-value API Pattern , namely, an API Pattern which specifies an action  on a current value  of the object  and also specifies an action  on a corresponding original value  of the object.","In some embodiments, the object  is a containing object in that the object  contains a non-scalar property  which depends on the object  for persistence. In some of these, the API Pattern  is a nested-property API Pattern , namely, an API Pattern which specifies an action  on the non-scalar property.","In some embodiments, multiple persistable objects  reside in the memory  and are related to one another by references, thereby forming a graph . In some of these, the API Pattern is an incremental-graph-load API Pattern , namely, an API Pattern which specifies incrementally loading portions of the graph  (and hence object  node(s) of the graph) into volatile memory .","In some embodiments, multiple persistable objects  reside in the memory  and are related to one another by references, thereby forming a graph , as above. In some of these, however, the API Pattern is an incremental-graph-filtered-load API Pattern , namely, an API Pattern which specifies incrementally loading portions of the graph  into volatile memory  based on a filtering predicate. The filtering predicate may filter objects in or out of the group of objects to load, based on object state , property(ies) , relationship(s) , and\/or value(s) , , .","In some embodiments, the API Pattern  is a property-modification API Pattern , namely, an API Pattern which specifies at least one of the following actions  on a property  of the object : checking whether the property is marked as modified, marking the property as modified.","In some embodiments, the API Pattern  is a dictionary API Pattern , namely, an API Pattern which specifies at least one of the following actions  on the object : setting a current value  of the object from a dictionary, setting an original value  of the object from a dictionary.","In some embodiments peripherals  such as human user I\/O devices (screen, keyboard, mouse, tablet, microphone, speaker, motion sensor, etc.) will be present in operable communication with one or more processors  and memory. However, an embodiment may also be deeply embedded in a system, such that no human user  interacts directly with the embodiment. Software processes may be users .","In some embodiments, the system includes multiple computers connected by a network. Networking interface equipment can provide access to networks , using components such as a packet-switched network interface card, a wireless transceiver, or a telephone network interface, for example, will be present in a computer system. However, an embodiment may also communicate through direct memory access, removable nonvolatile media, or other information storage-retrieval and\/or transmission approaches, or an embodiment in a computer system may operate without communicating with other computer systems.","Some embodiments operate in a \u201ccloud\u201d computing environment and\/or a \u201ccloud\u201d storage environment in which computing services are not owned but are provided on demand. For example, databases  may be stored on multiple devices\/systems  in a networked cloud, the object-relational mapper  may be stored on yet another device within the cloud, and the application code  under development may configure the display on yet other cloud device(s)\/system(s) .","Processes",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 3","FIG. 3"],"b":["300","300"]},"Examples are provided herein to help illustrate aspects of the technology, but the examples given within this document do not describe all possible embodiments. Embodiments are not limited to the specific implementations, arrangements, displays, features, approaches, or scenarios provided herein. A given embodiment may include additional or different features, mechanisms, and\/or data structures, for instance, and may otherwise depart from the examples provided herein.","During a session obtaining step , an embodiment obtains an ORM session  from an object-relational mapper  or other known source, using known mechanisms, for example.","During a code receiving step , an embodiment receives code , e.g., through an IDE  and\/or using mechanisms controlled by a developer  such as an editor or filesystem. In some cases, the code  is strongly typed, that is, the code is amenable to automated type checking prior to its execution.","During a code executing step , an embodiment executes code  or a portion thereof. Familiar code execution mechanisms may be used.","During an object manipulating step , an embodiment manipulates one or more aspects of an object , such as aspect(s) - shown in , using call(s)  and API pattern(s). In a given situation, API Pattern(s) , other API patterns, fluent interface(s) , other interfaces, and\/or familiar ORM mechanisms may be used, in a manner consistent with the descriptions of object manipulation herein.","During an object state finding step  (which may be viewed in some cases as a verifying step ), an embodiment finds (e.g., examines or confirms) an object's state . API Patterns , fluent interface  calls , and familiar ORM mechanisms may be used, in a manner consistent with the descriptions of object manipulation herein.","During an object state changing step , an embodiment changes an object's state . API Patterns , fluent interface  calls , and familiar ORM mechanisms may be used, in a manner consistent with the descriptions of object manipulation herein.","During a session saving step , an embodiment saves a copy of an ORM session  and associated data  to a non-volatile storage medium. Familiar ORM mechanisms may be used, in a manner consistent with the descriptions of object manipulation herein.","During an object value accessing step , also referred to as object value reading step , an embodiment reads an object's value, namely an original value , a current value , or a database value . API Patterns , fluent interface  calls , and familiar ORM mechanisms may be used, in a manner consistent with the descriptions of object manipulation herein.","During an incremental loading step , an embodiment loads into a volatile memory destination a proper subset of a graph  containing object(s) . Loading  may read object(s)  from non-volatile memory or from a remote networked location, for example. API Patterns , fluent interface  calls , and familiar ORM mechanisms may be used, in a manner consistent with the descriptions of object manipulation herein.","During a filtering step , a filter predicate (also denoted ) is applied to limit which object(s) of the graph  are loaded into the destination during step . Filtering  may be implemented by not retrieving filtered-out objects at all from non-volatile storage, or by not transferring them from a volatile buffer to the volatile destination, for example.","During an object property checking step , an embodiment checks an object's property state to see whether the property  has been marked as modified since the last save to non-volatile memory. API Patterns , fluent interface  calls , and familiar ORM mechanisms may be used, in a manner consistent with the descriptions of object manipulation herein.","During an object property marking step , an embodiment marks an object's property state to indicate that the property  has been modified since the last save to non-volatile memory. API Patterns , fluent interface  calls , and familiar ORM mechanisms may be used, in a manner consistent with the descriptions of object manipulation herein.","During an object clone creating step , also referred to as object cloning , an embodiment makes a clone object which contains a copy of the aspects - of another object . API Patterns , fluent interface  calls , and familiar ORM mechanisms may be used, in a manner consistent with the descriptions of object manipulation herein.","During an object value setting step , also referred to as object value writing step , an embodiment writes an object's value, namely an original value , a current value , or a database value . In particular, an embodiment may set  object value(s) - using values read from a dictionary  and\/or from another object . API Patterns , fluent interface  calls , and familiar ORM mechanisms may be used, in a manner consistent with the descriptions of object manipulation herein.","During an ascertaining step , a user (or an embodiment operating on behalf of a user) ascertains a result  of execution  of code, e.g., by viewing log information, or by otherwise inspecting  aspect(s) - of an object  in an IDE , monitor, or other tool , using windows, logs, breakpoints, and\/or other mechanisms, for example.","During a method chaining step , a user (or an embodiment operating on behalf of a user) chains together calls  in code . Method chaining passes a result of one call directly into a subsequent call within a single line or statement of code, rather than discarding the call result or ending the line or statement by saving the first call's result in a named variable, for example. In method chaining  which is done in or with an embodiment, API Patterns , fluent interface  calls , and familiar ORM mechanisms may be used, in a manner consistent with the descriptions of object manipulation herein.","During a code writing step , a user (or an embodiment operating on behalf of a user) writes software code, such as a portion of application code , using a programming language, an IDE  or other editing tool , and\/or other mechanisms, for example.","During a memory configuring step , a memory medium  is configured by an API Pattern , by a manipulation  of object persistence, or otherwise in connection with object  persistence management as discussed herein.","The foregoing steps and their interrelationships are discussed in greater detail below, in connection with various embodiments.","Some embodiments provide a process for managing object persistence, which is described now from a computer process perspective. In some embodiments, the process includes obtaining  an ORM session  from an object-relational mapper , and receiving  in a memory a code  which contains calls  to a fluent interface  in an API Pattern . The code is executed  with at least one processor . In the course of executing the code, the process automatically manipulates  a persistence ignorant object  within the ORM session , in a manner consistent with the API Pattern . Some embodiments receive  a code which contains calls  to a fluent interface written in a strongly typed language.","In some embodiments, executing  the code manipulates  at least one of the following: a state  of the persistence ignorant object , a property  state (e.g., whether marked  as modified) of the persistence ignorant object , a persistent relationship  of the persistence ignorant object .","In some embodiments, executing  the code  includes manipulating  a persistence ignorant object  in at least some specified number of the API Pattern constituents listed below. The specified number is any integer ranging from one to eleven if all eleven constituents are considered of interest, and a corresponding smaller integer (the number of constituents) if a proper subset\u2014a smaller number\u2014of constituents is considered, which occurs in some embodiments. A given embodiment need not be capable of performing all constituents that are considered of interest; it need only be capable of the specified number of those constituents.","API Pattern constituents which may be of interest include:\n\n","We turn now to discussion of embodiments a developer may perform for managing object persistence. Some embodiments include writing  in a piece of software a portion of code  for obtaining  an ORM session  from an object-relational mapper , and writing  in the software another portion of code  which contains an API Pattern  that includes calls  to a fluent interface  for manipulating a mapped persistence ignorant object . The process also includes causing execution  of the codes by a computer system , and ascertaining  a result of the execution by inspecting  the object.","Some embodiments include writing  code which contains a specified number (from one to the number of API Patterns of interest) of labeled API Patterns. For example, some embodiments include writing  code which contains fluent interface calls in at least three of the seven API Patterns -. In some embodiments, writing  code includes method chaining  calls of the fluent interface .","In some embodiments, inspecting  the object includes reading a single value, while in other embodiments inspection  involves reading multiple values, e.g., reading both a current value  of the object and a corresponding original value  of the object.","Configured Media","Some embodiments include a configured computer-readable storage medium . Medium  may include disks (magnetic, optical, or otherwise), RAM, EEPROMS or other ROMs, and\/or other configurable memory devices, as opposed to wires and other propagated signal media. The storage medium which is configured may be in particular a removable storage medium  such as a CD, DVD, or flash memory. A general-purpose memory, which may be removable or not, and may be volatile or not, can be configured into an embodiment using items such as API Patterns in code and fluent interfaces to persistence frameworks, in the form of data  and instructions , read from a removable medium  and\/or another source such as a network connection, to form a configured medium. The configured medium  is capable of causing a computer system to perform process steps for transforming data through object persistence management as disclosed herein.  thus help illustrate configured storage media embodiments and process embodiments, as well as system and process embodiments. In particular, any of the process steps illustrated in , or otherwise taught herein, may be used to help configure a storage medium to form a configured medium embodiment.","Additional details and design considerations are provided below. As with the other examples herein, the features described may be used individually and\/or in combination, or not at all, in a given embodiment.","Those of skill will understand that implementation details may pertain to specific code, such as specific APIs and specific sample programs, and thus need not appear in every embodiment. Those of skill will also understand that program identifiers and some other terminology used in discussing details are implementation-specific and thus need not pertain to every embodiment. Nonetheless, although they are not necessarily required to be present here, these details are provided because they may help some readers by providing technological context and\/or by illustrating some of the many possible implementations and developer utilizations of the API Patterns and associated technologies discussed herein.","The following discussion is derived in part from Entity Framework documentation. Entity Framework includes software implemented by Microsoft Corporation. Aspects of the Entity Framework software and\/or documentation are consistent with or otherwise illustrate aspects of the embodiments described herein. However, it will be understood that Entity Framework documentation and\/or implementation choices do not necessarily constrain the scope of such embodiments, and likewise that Entity Framework and\/or its documentation may well contain features that lie outside the scope of such embodiments. Nor is any released or development version of Entity Framework necessarily consistent with the documentation below. It will also be understood that the discussion below is provided in part as an aid to readers who are not necessarily of ordinary skill in the art, and thus may contain and\/or omit details whose recitation below is not strictly required to support the present disclosure.","Fluent API Patterns for Managing Object Persistence","From a developer's point of view, some embodiments provide tools and techniques for using persistable objects . For example, in some approaches the developer writes  code that (when run) obtains an ORM session  from an object-relational mapper and then writes  code containing an API Pattern  which (when run) manipulates  a mapped persistence ignorant object using calls to a fluent interface . A DbContext instance is an example of an ORM session . An ORM session may also be called a \u201cunit of work\u201d or a \u201ccontext\u201d. An Entity Framework entity is an example of a persistence ignorant object .","In particular, when the developer's code executes, it may manipulate  an object state, a property state, and\/or a persistent relationship of the persistence ignorant object.","As a specific example, upon execution the code  may find that the object's state is unchanged, then change to object's state to indicate deletion, and then save the session. An example of this is given below under the heading \u201cManipulating persistence state\u201d.","As another specific example, the code may access  and manipulate  both a current value and an original value of an object. An example of this is given below under \u201cManipulating current and original values of properties\u201d.","As another specific example, the code may access  and manipulate  a non-scalar property that depends on the containing object for persistence. An example of this is given under \u201cManipulating nested properties\u201d.","As another specific example, suppose multiple persistable objects  are defined and are related to one another by references, forming a graph . \u201cGraph\u201d is used in a broad sense, to include lists, trees, sets, and other data structures which are built using objects and object references. The code may incrementally load  portions of a graph into volatile memory. An example of this is given under \u201cManipulating relationships\u201d. As illustrated by a second example in that same section, in some of these cases the code may load portions of a graph based on a filtering predicate .","Other specific examples given below include checking  whether a property is marked as modified; marking  a property as modified; reading  current, original, and database values for all properties of an entity; setting  current or original values from another object; setting  current or original values from a dictionary; setting  current or original values from a dictionary using Property; and creating  a cloned object containing current, original, or database values.","In any or all of the situations described above, the developer's code  may be written in a strongly typed language.","Additional Background","A familiar criterion in an Object\/Relational Mapper is that persistable objects be persistence ignorant, meaning that they don't have any dependency with the persistence framework, i.e., they do not derive from a class or implement an interface defined by the persistence framework, and need not present any specific pattern in order to be used with the persistence framework.","For example, a simple data model might consist of two entity types\u2014one representing products and the other representing categories to which products belong. Using C# code as an example, the classes might look like this:",{"@attributes":{"id":"p-0129","num":"0139"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class Product"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003public int Id { get; set; }"]},{"entry":[{},"\u2003\u2003public string Name { get; set; }"]},{"entry":[{},"\u2003\u2003public decimal Price { get; set; }"]},{"entry":[{},"\u2003\u2003public Category Category { get; set; }"]},{"entry":[{},"}"]},{"entry":[{},"public class Category"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003public string Id { get; set; }"]},{"entry":[{},"\u2003\u2003public ICollection<Product> Products { get; set; }"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"These classes represent the object model for the application.","When using Entity Framework, an application developer can also write a context class (session ) that derives from the provided DbContext base class. DbContext provides a starting point for querying and manipulating persistable objects in Entity Framework. For example:",{"@attributes":{"id":"p-0132","num":"0142"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class CatalogContext: DbContext"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003public DbSet<Product> Products { get; set; }"]},{"entry":[{},"\u2003\u2003public DbSet<Category> Categories { get; set; }"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Entity \u201centries\u201d","DbContext provides Entry<T>( ) and Entry( ) methods that return instances of DbEntityEntry<T> and (non-generic) DbEntityEntry instances representing the \u201cunit of tracking\u201d for an entity instance inside the persistence framework. This \u201centry\u201d abstraction provides a starting point into a fluent interface  for manipulating object state, property state and persistent relationships. The \u201centry\u201d of a persistable object provides equivalent functionality to the one often found in methods and properties in a persistence aware object, but can be applied to persistence ignorant objects.","Manipulating Persistence State","In order to change the state of a Product with Id equal to productId to \u201cdeleted\u201d and save, it is possible to write the following C# code, which includes an example of a find-delete-save API Pattern :",{"@attributes":{"id":"p-0137","num":"0147"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"using(var context = new CatalogContext( ))"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003var product = context.Products.Find(productId);"]},{"entry":[{},"\u2003\u2003Debug.Assert(context.Entry(product).EntityState =="]},{"entry":[{},"\u2003\u2003EntityState.Unchanged);"]},{"entry":[{},"\u2003\u2003context.Entry(product).EntityState = EntityState.Deleted;"]},{"entry":[{},"\u2003\u2003context.SaveChanges( );"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Manipulating Current and Original Values of Properties","In a similar way, it is possible to use this \u201centity entry\u201d abstraction to have access to and manipulate  the current and original values for an entity, as occurs for instance in this code with an example of a current-value-original-value API Pattern :",{"@attributes":{"id":"p-0140","num":"0150"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"using(var context = new CatalogContext( ))"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003var product = context.Products.Find(productId);"]},{"entry":[{},"\u2003\u2003context.Entry(product).Property(p =>"]},{"entry":[{},"\u2003\u2003p.ProductName).CurrentValue = \u201cSoda\u201d;"]},{"entry":[{},"\u2003\u2003Debug.Assert(context.Entry(product).Property(p =>"]},{"entry":[{},"p.ProductName).OriginalValue == \u201cWater\u201d);"]},{"entry":[{},"\u2003\u2003Debug.Assert(context.Entry(product).EntityState =="]},{"entry":[{},"\u2003\u2003EntityState.Modified);"]},{"entry":[{},"\u2003\u2003context.SaveChanges( );"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notice that manipulating  the current value using this API Pattern will inform the persistence framework of the change (i.e. EntityState will reflect that the state  is modified immediately after the change), while setting the value directly on the object property would require comparing a snapshot of the original object obtained from the database against the current value of the property, which is generally an expensive operation that is deferred to happen only at the very end in SaveChanges.","Also notice that overloads of the Property method in DbEntityEntry<T> are generic and through the lambda expression \u201cp=>p.ProductName\u201d used to denote access to the property called ProductName, they can automatically infer the right type for the OriginalValue and CurrentValue properties:",{"@attributes":{"id":"p-0143","num":"0153"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003public DbPropertyEntry<TEntity, TProperty>"},{"entry":"Property<TProperty>(Expression<Func<TEntity, TProperty>> property);"},{"entry":"\u2003\u2003public DbPropertyEntry<TEntity, TProperty>"},{"entry":"Property<TProperty>(string propertyName);"},{"entry":"\u2003\u2003public DbPropertyEntry Property(string propertyName);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Manipulating Nested Properties","Many object persistence frameworks support the concept of non-scalar properties that depend of the containing object for persistence. In Entity Framework these are called Complex properties, and can also be used with entity entries, as illustrated with this example of a nested-property API Pattern :",{"@attributes":{"id":"p-0146","num":"0156"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"using(var context = new CustomerContext( ))"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003var customer = context.Customers.Find(customerId);"]},{"entry":[{},"\u2003\u2003context.Entry(customer).Property(p =>"]},{"entry":[{},"p.Address.Street).CurrentValue = \u201c40th St\u201d;"]},{"entry":[{},"\u2003\u2003context.Entry(customer).ComplexProperty(p =>"]},{"entry":[{},"p.Address).Property(a => a.ZipCode).CurrentValue = \u201c98052\u201d;"]},{"entry":[{},"\u2003\u2003context.SaveChanges( );"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Notice it is possible to refer to a nested property directly with a lambda that represents nested access or by drilling in one level at a time with the ComplexProperty method.","Manipulating Relationships","It is possible in some embodiments to access and manipulate  entries representing relationships with other persistable objects in similar way. In object graphs , relationships are often represented by object references and object collections. In a persistable graph, one aspect of relationships may be that those references or collections (or the actual data contained in those related objects) can be brought into volatile working memory incrementally; loading the whole graph into volatile memory in open operation is often undesirable because the graph itself can be very large.","The following code illustrates this approach, with an example of an incremental-graph-load API Pattern :",{"@attributes":{"id":"p-0151","num":"0161"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"using(var context = new CatalogContext( ))"},{"entry":"{"},{"entry":"\u2003var product = context.Products.Find(productId);"},{"entry":"\u2003var reference = context.Entry(product).Reference(p => p.Category);"},{"entry":"\u2003if (!reference.IsLoaded)"},{"entry":"\u2003\u2003reference.Load( );\u2003Debug.Assert(reference.CurrentValue != null);"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Another familiar goal involving relationships is to load them partially based on a filtering predicate . This can be accomplished by obtaining a composable query corresponding to the relationship for a given instance, as for instance in this example using an incremental-graph-filtered-load API Pattern :",{"@attributes":{"id":"p-0153","num":"0163"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"using(var context = new CatalogContext( ))"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003var category = context.Categories.Find(categoryId);"]},{"entry":[{},"\u2003\u2003var products ="]},{"entry":[{},"\u2003\u2003\u2003\u2003from p in context.Entry(category).Collection(c =>"]},{"entry":[{},"\u2003\u2003\u2003\u2003c.Products).Query( )"]},{"entry":[{},"\u2003\u2003\u2003\u2003where p.ProductName.StartsWith(s)"]},{"entry":[{},"\u2003\u2003\u2003\u2003select p;"]},{"entry":[{},"\u2003\u2003return p.ToList( );"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Working with Property Values in Entity Framework","The Entity Framework keeps track of two values for each property of a tracked entity. The current value  is, as the name indicates, the current value of the property in the entity. The original value  is the value that the property had when the entity was queried from the database or attached to the session.","There are two general mechanisms in Entity Framework for working with property values:\n\n","Getting and Setting the Current or Original Value of an Individual Property","The example below shows how the current value of a property can be read and then set to a new value:",{"@attributes":{"id":"p-0159","num":"0171"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"using (var context = new UnicornsContext( ))"},{"entry":"{"},{"entry":"\u2003var unicorn = context.Unicorns.Find(3);"},{"entry":"\u2003\/\/ Read the current value of the Name property"},{"entry":"\u2003string currentName1 = context.Entry(unicorn).Property(u =>"},{"entry":"u.Name).CurrentValue;"},{"entry":"\u2003\/\/ Set the Name property to a new value"},{"entry":"\u2003context.Entry(unicorn).Property(u => u.Name).CurrentValue ="},{"entry":"\u2003\u201cFranky\u201d;"},{"entry":"\u2003\/\/ Read the current value of the Name property using a"},{"entry":"\u2003\/\/ string for the property name"},{"entry":"\u2003object currentName2 = context.Entry(unicorn).Property(\u201cName\u201d).-"},{"entry":"\u2003CurrentValue;"},{"entry":"\u2003\/\/ Set the Name property to a new value using a"},{"entry":"\u2003\/\/ string for the property name"},{"entry":"\u2003context.Entry(unicorn).Property(\u201cName\u201d).CurrentValue = \u201cSqueaky\u201d;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"One would use the OriginalValue property instead of the CurrentValue property to read or set the original value. Note that the returned value is typed as \u201cobject\u201d when a string is used to specify the property name. On the other hand, the returned value is strongly typed if a lambda expression is used. Setting the property value like this will only mark the property as modified if the new value is different from the old value. When a property value is set in this way the change is automatically detected.","Getting and Setting the Current Value of an Unmapped Property","The current value of a property that is not mapped to the database can also be read. For example:",{"@attributes":{"id":"p-0163","num":"0175"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"using (var context = new UnicornsContext( ))"},{"entry":"{"},{"entry":"\u2003var lady = context.LadiesInWaiting.Find(1, \u201cThe EF Castle\u201d);"},{"entry":"\u2003\/\/ Read the current value of an unmapped property"},{"entry":"\u2003var name1 = context.Entry(lady).Property(p => p.Name).CurrentValue;"},{"entry":"\u2003\/\/ Use a string to specify the property name"},{"entry":"\u2003var name2 = context.Entry(lady).Property(\u201cName\u201d).CurrentValue;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The current value can also be set if the property exposes a setter. Reading the values of unmapped properties is useful when performing Entity Framework validation of unmapped properties. For the same reason, current values can be read and set for properties of entities that are not currently being tracked by the session. For example:",{"@attributes":{"id":"p-0165","num":"0177"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"using (var context = new UnicornsContext( ))"},{"entry":"{"},{"entry":"\u2003\/\/ Create an entity that is not being tracked"},{"entry":"\u2003var unicorn = new Unicorn { Name = \u201cFranky\u201d };"},{"entry":"\u2003\/\/ Read and set the current value of Name as before"},{"entry":"\u2003var currentName1 = context.Entry(unicorn).Property(u =>"},{"entry":"u.Name).CurrentValue;"},{"entry":"\u2003context.Entry(unicorn).Property(u => u.Name).CurrentValue ="},{"entry":"\u2003\u201cFranky\u201d;"},{"entry":"\u2003var currentName2 = context.Entry(unicorn).Property(\u201cName\u201d).-"},{"entry":"\u2003CurrentValue;"},{"entry":"\u2003context.Entry(unicorn).Property(\u201cName\u201d).CurrentValue = \u201cSqueaky\u201d;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Note that original values are not available for unmapped properties or for properties of entities that are not being tracked by the session .","Checking Whether a Property is Marked as Modified","The example below shows how to check whether or not an individual property is marked  as modified:",{"@attributes":{"id":"p-0169","num":"0181"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"using (var context = new UnicornsContext( ))"},{"entry":"{"},{"entry":"\u2003var unicorn = context.Unicorns.Find(1);"},{"entry":"\u2003var namelsModified1 = context.Entry(unicorn).Property(u =>"},{"entry":"u.Name).IsModified;"},{"entry":"\u2003\/\/ Use a string for the property name"},{"entry":"\u2003var namelsModified2 = context.Entry(unicorn).Property(\u201cName\u201d)."},{"entry":"\u2003IsModified;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The values of modified properties are sent as updates to the database when SaveChanges is called.","Marking a Property as Modified","The example below shows how to force an individual property to be marked  as modified:",{"@attributes":{"id":"p-0173","num":"0185"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"using (var context = new UnicornsContext( ))"},{"entry":"{"},{"entry":"\u2003var unicorn = context.Unicorns.Find(1);"},{"entry":"\u2003context.Entry(unicorn).Property(u => u.Name).IsModified = true;"},{"entry":"\u2003\/\/ Use a string for the property name"},{"entry":"\u2003context.Entry(unicorn).Property(\u201cName\u201d).IsModified = true;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Marking a property as modified forces an update to be sent to the database  for the property when SaveChanges is called even if the current value  of the property is the same as its original value . Some approaches support resetting an individual property to be not modified after it has been marked as modified.","Reading Current, Original, and Database Values for all Properties of an Entity","The example below shows how to read the current values , the original values , and the values  actually in the database for all mapped properties of an entity.",{"@attributes":{"id":"p-0177","num":"0189"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"using (var context = new UnicornsContext( ))"},{"entry":"{"},{"entry":"\u2003var unicorn = context.Unicorns.Find(1);"},{"entry":"\u2003\/\/ Make a modification to Name in the tracked entity"},{"entry":"\u2003unicorn.Name = \u201cFranky\u201d;"},{"entry":"\u2003\/\/ Make a modification to Name in the database"},{"entry":"\u2003context.Database.SqlCommand(\u201cupdate Unicorns set Name = \u2018Squeaky\u2019"},{"entry":"where Id = 1\u201d);"},{"entry":"\u2003\/\/ Print out current, original, and database values"},{"entry":"\u2003Console.WriteLine(\u201cCurrent values:\u201d);"},{"entry":"\u2003PrintValues(context.Entry(unicorn).CurrentValues);"},{"entry":"\u2003Console.WriteLine(\u201c\\nOriginal values:\u201d);"},{"entry":"\u2003PrintValues(context.Entry(unicorn).OriginalValues);"},{"entry":"\u2003Console.WriteLine(\u201c\\nDatabase values:\u201d);"},{"entry":"\u2003PrintValues(context.Entry(unicorn).GetDatabaseValues( ));"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"PrintValues is defined like so:",{"@attributes":{"id":"p-0179","num":"0191"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public static void PrintValues(DbPropertyValues values)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003foreach (var propertyName in values.PropertyNames)"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003Console.WriteLine(\u201cProperty {0} has value {1}\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003propertyName, values[propertyName]);"]},{"entry":[{},"\u2003}"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"With a sample data set, running the code above will print out:","Current values:","Property Id has value 1","Property Name has value Franky","Property Version has value System.Byte[ ]","Property PrincessId has value 1","Original values:","Property Id has value 1","Property Name has value Binky","Property Version has value System.Byte[ ]","Property PrincessId has value 1","Database values:","Property Id has value 1","Property Name has value Squeaky","Property Version has value System.Byte[ ]","Property PrincessId has value 1","Notice how the current values are, as expected, the values that the properties of the entity currently contain\u2014in this case the value of Name is Franky. In contrast to the current values, the original values are the values that were read from the database when the entity was queried\u2014the original value of Name is Binky. Finally, the database values are the values as they are currently stored in the database. The database value of Name is Squeaky because we sent a raw command to the database to update it after we performed the query. Getting the database values is useful when the values in the database may have changed since the entity was queried such as when a concurrent edit to the database has been made by another user.","Setting Current or Original Values from Another Object","The current or original values of a tracked entity (tracked object ) can be updated by copying values from another object . For example:",{"@attributes":{"id":"p-0184","num":"0196"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"using (var context = new UnicornsContext( ))"},{"entry":"{"},{"entry":"\u2003var princess = context.Princesses.Find(1);"},{"entry":"\u2003var rapunzel = new Princess { Id = 1, Name = \u201cRapunzel\u201d };"},{"entry":"\u2003var rosannella = new PrincessDto { Id = 1, Name = \u201cRosannella\u201d };"},{"entry":"\u2003\/\/ Change the current and original values by copying the values"},{"entry":"\u2003\/\/ from other objects"},{"entry":"\u2003var entry = context.Entry(princess);"},{"entry":"\u2003entry.CurrentValues.SetValues(rapunzel);"},{"entry":"\u2003entry.OriginalValues.SetValues(rosannella);"},{"entry":"\u2003\/\/ Print out current and original values"},{"entry":"\u2003Console.WriteLine(\u201cCurrent values:\u201d);"},{"entry":"\u2003PrintValues(entry.CurrentValues);"},{"entry":"\u2003Console.WriteLine(\u201c\\nOriginal values:\u201d);"},{"entry":"\u2003PrintValues(entry.OriginalValues);"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"This code uses the following DTO class:",{"@attributes":{"id":"p-0186","num":"0198"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public class PrincessDto"]},{"entry":[{},"{"]},{"entry":[{},"\u2003public int Id { get; set; }"]},{"entry":[{},"\u2003public string Name { get; set; }"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Using a sample data set, running the code above will print out:","Current values:","Property Id has value 1","Property Name has value Rapunzel","Original values:","Property Id has value 1","Property Name has Value Rosannella","This API Pattern may be used, for example, when updating an entity with values obtained from a service call or a client in an n-tier application. Note that the object used does not have to be of the same type as the entity so long as it has properties whose names match those of the entity. In the example above, an instance of PrincessDTO is used to update the original values. Note that only properties that are set to different values when copied from the other object will be marked as modified in this implementation.","Setting current or original values from a dictionary The current or original values of a tracked entity can be updated by copying values from a dictionary  or some other data structure. For example:",{"@attributes":{"id":"p-0190","num":"0202"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"using (var context = new UnicornsContext( ))"]},{"entry":[{},"{"]},{"entry":[{},"\u2003var lady = context.LadiesInWaiting.Find(1, \u201cThe EF Castle\u201d);"]},{"entry":[{},"\u2003var newValues = new Dictionary<string, object>"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003{ \u201cFirstName\u201d, \u201cCalypso\u201d },"]},{"entry":[{},"\u2003\u2003{ \u201cTitle\u201d, \u201c Prima donna\u201d },"]},{"entry":[{},"\u2003};"]},{"entry":[{},"\u2003var currentValues = context.Entry(lady).CurrentValues;"]},{"entry":[{},"\u2003foreach (var propertyName in newValues.Keys)"]},{"entry":[{},"\u2003{"]},{"entry":[{},"\u2003\u2003currentValues[propertyName] = newValues[propertyName];"]},{"entry":[{},"\u2003}"]},{"entry":[{},"\u2003PrintValues(currentValues);"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"One would use the OriginalValues property instead of the CurrentValues property to set original values.","Setting current or original values from a dictionary using Property","An alternative to using CurrentValues or OriginalValues as shown above is to use the Property method to set the value of each property. This can be used to set the values of complex properties. For example:",{"@attributes":{"id":"p-0194","num":"0206"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"using (var context = new UnicornsContext( ))"},{"entry":"{"},{"entry":"\u2003var castle = context.Castles.Find(\u201cThe EF Castle\u201d);"},{"entry":"\u2003var newValues = new Dictionary<string, object>"},{"entry":"\u2003{"},{"entry":"\u2003\u2003{ \u201cName\u201d, \u201cThe EF Castle\u201d },"},{"entry":"\u2003\u2003{ \u201cLocation.City\u201d, \u201cRedmond\u201d },"},{"entry":"\u2003\u2003{ \u201cLocation.Kingdom\u201d, \u201cBuilding 18\u201d },"},{"entry":"\u2003\u2003{ \u201cLocation.ImaginaryWorld.Name\u201d, \u201cMagic Astoria World\u201d },"},{"entry":"\u2003\u2003{ \u201cLocation.ImaginaryWorld.Creator\u201d, \u201cADO.NET\u201d },"},{"entry":"\u2003};"},{"entry":"\u2003var entry = context.Entry(castle);"},{"entry":"\u2003foreach (var propertyName in newValues.Keys)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003entry.Property(propertyName).CurrentValue ="},{"entry":"\u2003\u2003newValues[propertyName];"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In the example above complex properties are accessed using dotted names.","Creating a Cloned Object Containing Current, Original, or Database Values","The DbPropertyValues object returned from CurrentValues, OriginalValues, or GetDatabaseValues can be used to create  a clone of the entity. This clone will contain the property values from the DbPropertyValues object used to create it. For example:",{"@attributes":{"id":"p-0198","num":"0210"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"using (var context = new UnicornsContext( ))"]},{"entry":[{},"{"]},{"entry":[{},"\u2003var unicorn = context.Unicorns.Find(1);"]},{"entry":[{},"\u2003var clonedUnicorn = context.Entry(unicorn)."]},{"entry":[{},"\u2003GetDatabaseValues( ).ToObject( );"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Note that the object returned is not the entity and is not being tracked by the session, in this implementation. The returned object also does not have any relationships set to other objects. The cloned object can be useful for resolving issues related to concurrent updates to the database, especially where a UI that involves data binding to objects of a certain type is being used.","Getting and Setting the Current or Original Values of Complex Properties","The value of an entire complex object can be read and set using the Property method just as it can be for a primitive property. In addition, in this implementation you can drill down into the complex object and read or set properties of that object, or even a nested object.","Here are some examples:",{"@attributes":{"id":"p-0203","num":"0215"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"using (var context = new UnicornsContext( ))"},{"entry":"{"},{"entry":"\u2003var castle = context.Castles.Find(\u201cThe EF Castle\u201d);"},{"entry":"\u2003\/\/ Get the Location complex object"},{"entry":"\u2003var location = context.Entry(castle)"},{"entry":"\u2003\u2003\u2003\u2003.Property(c => c.Location)"},{"entry":"\u2003\u2003\u2003\u2003.CurrentValue;"},{"entry":"\u2003\/\/ Get the nested ImaginaryWorld complex object using chained calls"},{"entry":"\u2003var world1 = context.Entry(castle)"},{"entry":"\u2003\u2003\u2003\u2003.ComplexProperty(c => c.Location)"},{"entry":"\u2003\u2003\u2003\u2003.Property(I => I.ImaginaryWorld)"},{"entry":"\u2003\u2003\u2003\u2003.CurrentValue;"},{"entry":"\u2003\/\/ Get the nested ImaginaryWorld complex object using a single lambda"},{"entry":"expression"},{"entry":"\u2003var world2 = context.Entry(castle)"},{"entry":"\u2003\u2003\u2003\u2003.Property(c => c.Location.ImaginaryWorld)"},{"entry":"\u2003\u2003\u2003\u2003.CurrentValue;"},{"entry":"\u2003\/\/ Get the nested ImaginaryWorld complex object using a dotted string"},{"entry":"\u2003var world3 = context.Entry(castle)"},{"entry":"\u2003\u2003\u2003\u2003.Property(\u201cLocation.ImaginaryWorld\u201d)"},{"entry":"\u2003\u2003\u2003\u2003.CurrentValue;"},{"entry":"\u2003\/\/ Get the value of the Creator property on the nested complex object"},{"entry":"\u2003\/\/ using chained calls"},{"entry":"\u2003var creator1 = context.Entry(castle)"},{"entry":"\u2003\u2003\u2003\u2003.ComplexProperty(c => c.Location)"},{"entry":"\u2003\u2003\u2003\u2003.ComplexProperty(I => I.ImaginaryWorld)"},{"entry":"\u2003\u2003\u2003\u2003.Property(w => w.Creator)"},{"entry":"\u2003\u2003\u2003\u2003.CurrentValue;"},{"entry":"\u2003\/\/ Get the value of the Creator property on the nested complex object"},{"entry":"\u2003\/\/ using a single lambda expression"},{"entry":"\u2003var creator2 = context.Entry(castle)"},{"entry":"\u2003\u2003\u2003\u2003.Property(c => c.Location.ImaginaryWorld.Creator)"},{"entry":"\u2003\u2003\u2003\u2003.CurrentValue;"},{"entry":"\u2003\/\/ Get the value of the Creator property on the nested complex object"},{"entry":"\u2003\/\/ using a dotted string"},{"entry":"\u2003var creator3 = context.Entry(castle)"},{"entry":"\u2003\u2003\u2003\u2003.Property(\u201cLocation.ImaginaryWorld.Creator\u201d)"},{"entry":"\u2003\u2003\u2003\u2003.CurrentValue;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"One would use the OriginalValue property instead of the CurrentValue property to get or set an original value. Note that either the Property or the ComplexProperty method can be used to access a complex property. However, the ComplexProperty method would be used to drill down into the complex object with additional Property or ComplexProperty calls.","Using DbPropertyValues to Access Complex Properties","When you use CurrentValues, OriginalValues, or GetDatabaseValues to get all the current, original, or database values for an entity, the values of any complex properties are returned as nested DbPropertyValues objects. These nested objects can then be used to get values of the complex object. For example, the following method will print out the values of all properties, including values of any complex properties and nested complex properties.",{"@attributes":{"id":"p-0207","num":"0219"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public static void WritePropertyValues(string parentPropertyName,"},{"entry":"DbPropertyValues propertyValues)"},{"entry":"{"},{"entry":"\u2003foreach (var propertyName in propertyValues.PropertyNames)"},{"entry":"\u2003{"},{"entry":"\u2003\u2003var nestedValues = propertyValues[propertyName] as"},{"entry":"\u2003\u2003DbPropertyValues;"},{"entry":"\u2003\u2003if (nestedValues != null)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003WritePropertyValues(parentPropertyName + propertyName + \u201c.\u201d,"},{"entry":"nestedValues);"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003else"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003Console.WriteLine(\u201cProperty {0}{1} has value {2}\u201d,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003parentPropertyName, propertyName,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003propertyValues[propertyName]);"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"To print out all current property values the method would be called like this:",{"@attributes":{"id":"p-0209","num":"0221"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"using (var context = new UnicornsContext( ))"]},{"entry":[{},"{"]},{"entry":[{},"\u2003var castle = context.Castles.Find(\u201cThe EF Castle\u201d);"]},{"entry":[{},"\u2003WritePropertyValues(\u201c\u201d, context.Entry(castle).CurrentValues);"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Using a sample data set, running the code above will print out:","Property Name has value The EF Castle","Property Location.City has value Redmond","Property Location.Kingdom has value Rainier","Property Location lmaginaryWorld.Name has value Magic Unicorn World","Property Location lmaginaryWorld.Creator has value ADO.NET","Although particular embodiments are expressly illustrated and described herein as processes, as configured media, or as systems, it will be appreciated that discussion of one type of embodiment also generally extends to other embodiment types. For instance, the descriptions of processes in connection with  also help describe configured media, and help describe the operation of systems and manufactures like those discussed in connection with other Figures. It does not follow that limitations from one embodiment are necessarily read into another. In particular, processes are not necessarily limited to the data structures and arrangements presented while discussing systems or manufactures such as configured memories.","Not every item shown in the Figures need be present in every embodiment. Conversely, an embodiment may contain item(s) not shown expressly in the Figures. Although some possibilities are illustrated here in text and drawings by specific examples, embodiments may depart from these examples. For instance, specific features of an example may be omitted, renamed, grouped differently, repeated, instantiated in hardware and\/or software differently, or be a mix of features appearing in two or more of the examples. Functionality shown at one location may also be provided at a different location in some embodiments.","Reference has been made to the figures throughout by reference numerals. Any apparent inconsistencies in the phrasing associated with a given reference numeral, in the figures or in the text, should be understood as simply broadening the scope of what is referenced by that numeral.","As used herein, terms such as \u201ca\u201d and \u201cthe\u201d are inclusive of one or more of the indicated item or step. In particular, in the claims a reference to an item generally means at least one such item is present and a reference to a step means at least one instance of the step is performed.","Headings are for convenience only; information on a given topic may be found outside the section whose heading indicates that topic.","All claims and the abstract, as filed, are part of the specification.","While exemplary embodiments have been shown in the drawings and described above, it will be apparent to those of ordinary skill in the art that numerous modifications can be made without departing from the principles and concepts set forth in the claims, and that such modifications need not encompass an entire abstract concept. Although the subject matter is described in language specific to structural features and\/or procedural acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above the claims. It is not necessary for every means or aspect identified in a given definition or example to be present or to be utilized in every embodiment. Rather, the specific features and acts described are disclosed as examples for consideration when implementing the claims.","All changes which fall short of enveloping an entire abstract idea but come within the meaning and range of equivalency of the claims are to be embraced within their scope to the full extent permitted by law."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["A more particular description will be given with reference to the attached drawings. These drawings only illustrate selected aspects and thus do not fully determine coverage or scope.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
