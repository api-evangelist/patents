---
title: Efficient search for storage objects in a network
abstract: A system and method related to efficiently searching for an object in a network including a plurality of realms, e.g., a plurality of local area networks (LANs). The method may ensure that nodes within a LAN are able to locate objects within that LAN using only computing resources on the local LAN. Thus, expensive WAN transfers may be avoided where possible. The system may also scale to many nodes. Nodes may not be required to know about every other node in the system. Mechanisms for re-distributing object location information among nodes as nodes are added to and removed from the system are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07680950&OS=07680950&RS=07680950
owner: Symantec Operating Corporation
number: 07680950
owner_city: Mountain View
owner_country: US
publication_date: 20031107
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","This invention relates to computer networks and, more particularly, to a system and method for efficiently locating an object, e.g., a storage object, in a computer network.","2. Description of the Related Art","Computer networks are important for many different applications. One important type of networking is referred to as peer-to-peer or P2P networking. As used herein, a peer-to-peer network is generally used to describe a decentralized network of peer nodes where each node may have similar capabilities and\/or responsibilities. Participating peer nodes in a P2P network may communicate directly with each other. Work may be done and information may be shared through interaction among the peers. In addition, in a P2P network, a given peer node may be equally capable of serving as either a client or a server for another peer node.","A peer-to-peer network may be created to fulfill some specific need, or it may be created as a general-purpose network. Some P2P networks are created to deliver one type of service and thus typically run one application. For example, Napster was created to enable users to share music files. Other P2P networks are intended as general purpose networks which may support a large variety of applications. Any of various kinds of distributed applications may execute on a P2P network. Exemplary peer-to-peer applications include file sharing, messaging applications, distributed data storage, distributed processing, etc.","Although P2P networks offer certain advantages over conventional client-server architectures, prior P2P networks have suffered from scaling problems. One important obstacle to scaling has been the lack of an efficient search mechanism to locate objects stored on various nodes in the P2P network. It is often necessary for various nodes in a P2P network to locate objects stored on other nodes.","P2P networks can include a plurality of local area networks (LANs) that are joined together by wide area network (WAN) connections. Accesses across a WAN connection are typically expensive and have significantly higher latencies than accesses across a LAN connection. Prior search mechanisms that have been developed for P2P networks have not ensured that nodes within a LAN are able to locate objects within that LAN using only computing resources on the local LAN. Without this assurance, the overall system tends to have very high latencies and squanders limited expensive WAN bandwidth. Also, in large systems with many nodes, scaling would suffer if every node needed to know how to reach every other node in order to locate the various objects.","Various embodiments of a system and method related to searching for an object in a network are disclosed. The network may include a plurality of realms, e.g., a plurality of local area networks (LANs).","According to one embodiment, a first node in a first LAN may select a second node in the first LAN to store location information for a first object located on the first node. The first node may send the location information for the first object to the second node, and the second node may store the location information for the first object. The location information stored for the first object may specify that the first object is located on the first node.","The first node may also select a second LAN to store location information for the first object. The first node may send the location information for the first object to the second LAN, and a third node in the second LAN may store the location information for the first object.","In one embodiment, a fourth node in the first LAN may subsequently perform a search operation to locate the first object. In performing the search operation, the fourth node may determine the second node to query for location information for the first object and may query the second node for the location information. In response, the second node may return the location information for the first object to the fourth node. The fourth node may then utilize the location information to access the first object on the first node.","In one embodiment, a fourth node in a third LAN may subsequently perform a search operation to locate the first object. In performing the search operation, the fourth node may first attempt to lookup the location information for the first object from a node in the third LAN. Thus, the fourth node may determine a fifth node in the third LAN to query for location information for the first object and may query the fifth node for the location information. In response, the fourth node may receive an indication from the fifth node that the fifth node does not have location information for the first object. The fourth node may then determine the second LAN as a remote LAN to query for location information for the first object and may send a query for the location information to the second LAN. The third node in the second LAN may receive the query and may send the location information for the first object to the fourth node in response. The fourth node may then utilize the location information to access the first object on the first node.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and are described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","100","110","110","110","110","110"]},"As shown, nodes A-E may be coupled through a network . In various embodiments, the network  may include any type of network or combination of networks. For example, the network  may include any type or combination of local area network (LAN), a wide area network (WAN), an Intranet, the Internet, etc. Exemplary local area networks include Ethernet networks, Fiber Distributed Data Interface (FDDI) networks, and token ring networks. Also, each node  may be coupled to the network  using any type of wired or wireless connection medium. For example, wired mediums may include a modem connected to plain old telephone service (POTS), Ethernet, fiber channel, etc. Wireless connection mediums may include a satellite link, a modem link through a cellular service, a wireless link such as Wi-Fi\u2122, a wireless connection using a wireless communication protocol such as IEEE 802.11 (wireless Ethernet), Bluetooth, etc.","In one embodiment, the nodes  may form a peer-to-peer network. For example, the system  may comprise a decentralized network of nodes  where each node  may have similar capabilities and\/or responsibilities. As described below, each node  may communicate directly with at least a subset of the other nodes . In one embodiment, messages may be propagated through the system  in a decentralized manner. For example, in one embodiment each node  in the system  may effectively act as a message router.","In another embodiment, the nodes  in the system  may be organized or may communicate using a centralized networking methodology, or the system  may utilize a combination of centralized and decentralized networking methodologies. For example, some functions of the system  may be performed by using various nodes  as centralized servers, whereas other functions of the system  may be performed in a peer-to-peer manner.","In one embodiment, each node  may have an identifier (ID). The ID of a node  may comprise any kind of information usable to identify the node , such as numeric or textual information. In one embodiment, a node ID may comprise a 128-bit Universally Unique ID (UUID). Universally Unique IDs or UUIDs may be allocated based on known art that ensures that the UUIDs are unique.","Referring now to , a diagram of one embodiment of a node  in the system  is illustrated. Generally speaking, a node  may include any of various hardware and software components. In the illustrated embodiment, the node  includes a processor  coupled to a memory , which is in turn coupled to a storage . The node  may also include a network connection  through which the node  couples to the network . The network connection  may include any type of hardware for coupling the node  to the network , e.g., depending on the type of node  and type of network .","The processor  may be configured to execute instructions and to operate on data stored within the memory . In one embodiment, the processor  may operate in conjunction with the memory  in a paged mode, such that frequently used pages of memory may be paged in and out of the memory  from the storage  according to conventional techniques. It is noted that the processor  is representative of any type of processor. For example, in one embodiment, the processor  may be compatible with the x86 architecture, while in another embodiment the processor  may be compatible with the SPARC\u2122 family of processors. Also, in one embodiment the node  may include multiple processors .","The memory  may be configured to store instructions and\/or data. In one embodiment, the memory  may include one or more forms of random access memory (RAM) such as dynamic RAM (DRAM) or synchronous DRAM (SDRAM). However, in other embodiments, the memory  may include any other type of memory instead or in addition.","The storage  may be configured to store instructions and\/or data, e.g., may be configured to store instructions and\/or data in a persistent or non-volatile manner. In one embodiment, the storage  may include non-volatile memory, such as magnetic media, e.g., one or more hard drives, or optical storage. In one embodiment, the storage  may include a mass storage device or system. For example, in one embodiment, the storage  may be implemented as one or more hard disks configured independently or as a disk storage system. In one embodiment, the disk storage system may be an example of a redundant array of inexpensive disks (RAID) system. In an alternative embodiment, the disk storage system may be a disk array, or Just a Bunch Of Disks (JBOD), (used to refer to disks that are not configured according to RAID). In yet other embodiments, the storage  may include tape drives, optical storage devices or RAM disks, for example.","As shown in , in one embodiment the storage  may store one or more storage objects . As used herein, the term \u201cstorage object\u201d may comprise any kind of data structure or entity used to store or represent data or information. In one embodiment, each storage object  may comprise a file. The storage objects  may include data or information of any kind, where the data is organized or structured in any way. In various embodiments, the storage objects  may be utilized within the system  in any application or to perform any function. Any number of storage objects  may be stored in the storage  of a given node .","In another embodiment, one or more of the storage objects  associated with the node  may be stored in the memory  instead of or in addition to the storage . For example, various storage objects  or portions of storage objects  may be transferred in and out of memory  from storage  as necessary, e.g., as required by other software executing on the node .","In one embodiment, each storage object  may have an identifier (ID). The ID of a storage object  may comprise any kind of information usable to identify the storage object , such as numeric or textual information. In one embodiment, a storage object ID may comprise a 128-bit Universally Unique ID (UUID).","In , another embodiment of a node  in the system  is illustrated. In this embodiment, the memory  may store lower level network software . The lower level network software  (also referred to as link layer software) may be executable by the processor  to interact with or control the network connection , e.g., to send and receive data via the network connection . The lower level network software  may also be responsible for discovering or setting up communication links from the node  to other nodes . The memory  may also store topology and routing (T&R) layer software  which utilizes the lower level network software . Memory  may also store client application software  which utilizes the T&R layer software .","The T&R layer software  may be executable by the processor  to create and manage data structures allowing client application software  to communicate with other nodes  on the system , e.g., to communicate with other client application software  executing on other nodes . In one embodiment, the client application software  may utilize the T&R layer software  to send messages to other nodes . Similarly, the T&R layer software  may pass messages received from other nodes  to the client application software , e.g., messages which originate from client application software  executing on other nodes . The T&R layer software  may also be involved in forwarding messages routed through the local node , where the messages originate from another node  and are addressed to another node  in the system .","In one embodiment the functionality of the T&R layer software  may be modularized into builder functionality and router functionality. For example, a builder component or engine  may be responsible for creating and managing data structures or routing information  representing topology of the system . A router component or message routing engine  may utilize the data structures or routing information  to send or forward messages to other nodes  in the system . The builder  and router  may interface with each other as necessary. For example, in the event of a network failure that invalidates existing routing information, the router  may request the builder  to recover or rebuild routing information  so that the router  can send or forward a message using a different route.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":["140","100","110","100","110","142","110","100","142","110","131","110","110","110","100","110","110","131","142","110"]},"The resulting set of connected nodes  is referred to herein as a link mesh . In , each hexagon represents a node , and each line represents a link  between two nodes . It is noted that  is exemplary only, and in various embodiments, any number of nodes  may be connected by the link mesh , and each node  may establish links  to any number of neighbor nodes .","In one embodiment, nodes  in the system  may be organized or divided into multiple realms. As used herein, a realm refers to a group of nodes  that communicate with each other in a low-latency, reliable manner and\/or physically reside in the same geographic region. In one embodiment, each realm may comprise a local area network (LAN). As used herein, a LAN may include a network that connects nodes within a geographically limited area. For example, one embodiment of a LAN may connect nodes within a 1 km radius. LANs are often used to connect nodes within a building or within adjacent buildings. Because of the limited geographic area of a LAN, network signal protocols that permit fast data transfer rates may be utilized. Thus, communication among nodes  within a LAN (or within a realm) may be relatively efficient. An exemplary LAN may include an Ethernet network, Fiber Distributed Data Interface (FDDI) network, token ring network, etc. A LAN may also connect one or more nodes via wireless connections, such as wireless Ethernet or other types of wireless connections.","In one embodiment, each realm or LAN may have an identifier (ID). The ID of a realm may comprise any kind of information usable to identify the realm, such as numeric or textual information. In one embodiment, a realm ID may comprise a 128-bit Universally Unique ID (UUID).","For any given node  in a given realm, links may be built from the node  to other nodes  in the same realm and\/or to nodes  in other realms (remote realms). The term \u201cnear neighbors\u201d may be used to refer to nodes  to which the given node  is connected in the same realm. The term \u201cremote neighbors\u201d may be used to refer to nodes  to which the given node  is connected in remote realms. As described below, as various messages are sent from a given node  in a given realm to other nodes , the messages may be sent to near neighbors and\/or remote neighbors. In one embodiment, send operations may be restricted to the local realm where possible. This may be useful, for example, to avoid the overhead of a wide area network (WAN) transfer. In one embodiment, an application programming interface (API) for sending a message may allow the client application software  executing on a node  to specify whether or how to restrict the send operation in this manner.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 5","b":["100","104","104","110","110","104","110","110","104","110","110","110","104","114"]},"As used herein, a \u201cwide area network (WAN) connection\u201d may comprise a network connection between two nodes in different realms or LANs . As shown in , WAN connections  may be utilized to interconnect the various realms, e.g., LANs , within the system . A WAN connection may allow two nodes  that are separated by a relatively long distance to communicate with each other. For example, in one embodiment a WAN connection  may connect two nodes  that are separated by 1 km or more. (WAN connections  may also be used to interconnect two nodes  in different realms or LANs, where the two nodes  are separated by a distance of less than 1 km.) In one embodiment, the data transfer rate via a WAN connection  may be relatively slower than the data transfer rate via a LAN connection . In various embodiments, a WAN connection  may be implemented in various ways. A typical WAN connection may be implemented using bridges, routers, telephony equipment, or other devices.","It is noted that  illustrates a simple exemplary system . In various embodiments, the system  may include any number of realms or LANs , and each realm or LAN  may include any number of nodes . Also, although  illustrates an example in which a single node from each realm is connected to a single node of each of the other realms, in various embodiments, various numbers of WAN connections  may be utilized to interconnect two realms or LANs. For example, a first node in a first realm may be connected to both a second node and a third node in a second realm. As another example, a first node in a first realm may be connected to a second node in a second realm, as well as a third node in the first realm being connected to a fourth node in the second realm.","As described above with reference to , in one embodiment various nodes  in the system  may store storage objects .  illustrates a system  similar to the system illustrated in , in which various storage objects  are stored by nodes . For example, node A stores the storage objects , Obj A, Obj B, and Obj C; node B stores the storage objects , Obj D and Obj E; etc.","In many applications, it may be necessary for nodes  to determine the location of various storage objects  located or stored on other nodes. For example, a first node  may need to determine the location of a first storage object , i.e., may need to determine which node  in the system  stores the first storage object . This may be necessary, for example, if the first node  (or client application software  executing on the first node ) needs to access the first storage object , e.g., to read data from and\/or write data to the first storage object .","In one embodiment, location information may be stored on one or more nodes  in the system . In the example of , each node  stores location information . The location information on each node  may include information that maps IDs of one or more storage objects  to the respective nodes  on which the storage objects  are stored. Thus, when a first node  needs to locate a first storage object , the first node  may access the location information  stored on one or more nodes  to determine the location of the first storage object . The location information  on each node  may be stored in the memory  and\/or the storage  of the respective node .","It is noted that  illustrate simple systems for exemplary purposes. In various embodiments, any number of realms or LANs may be present in the system , and each realm may include any number of nodes. Also, nodes within a realm may be networked together in any of various ways, and realms may be interconnected in any of various ways. With respect to , in various embodiments, each node  may store any number of storage objects . In one embodiment, some nodes  may not store any storage objects . For example, in , node G does not store any storage objects . A node  that does not store any storage objects  may still access or utilize storage objects  stored on other nodes  and may also store location information  regarding locations of storage objects  stored on other nodes . In one embodiment, one or more nodes may act as lookup servers operable to store lookup information  but may not themselves store and\/or may not access storage objects .","Also, in one embodiment some nodes  may not store location information . For example, in one embodiment, only a subset of the nodes  in the system  may be responsible for storing location information  that can be accessed to lookup locations of storage objects  in response to lookup queries received from other nodes. A node  that does not store location information  may still store one or more storage objects .","For a system that utilizes a large number of storage objects  and\/or includes a large number of nodes , it may be inefficient to store location information on every node such that the location information on every node maps every storage object  to its respective location. Thus, the location information  on each node  may map only a subset of the storage objects  to their locations. When a first node  needs to determine the location of a first storage object , the first node  may determine a second node  whose location information  specifies the location of the first storage object , e.g., specifies a third node  on which the first storage object  is located or stored. The first node  may then communicate with the second node  to determine the location of the first storage object . For example, the first node  may send a message to the second node  requesting the second node  to look up and return the location of the first storage object .","In various embodiments, any of various techniques may be utilized to determine which nodes  store location information  for which storage objects . Exemplary techniques for making this determination are described below.","In one embodiment, a hierarchical technique may be utilized such that a first node  first determines a second node  within its own realm or LAN  to check for the location of a storage object . If the location information  on the second node  does not specify the location of the particular storage object , then the first node  may determine a third node  within a remote realm or LAN  to check for the location of the storage object .","In one embodiment, this hierarchical lookup technique may be implemented in such a way that for storage objects within a given realm, nodes within that realm do not have to communicate with nodes outside the realm to determine the locations of those storage objects, but rather can communicate with one or more nodes within the realm to determine the locations of those storage objects. As discussed above, in one embodiment communication within a realm or LAN may be faster than communication between different realms or LANs, e.g., because communication over a LAN connection  may be faster than communication over a WAN connection . Thus, efficiency of the system may be increased by enabling lookup operations for storage objects within a realm to be performed within that realm.","Suppose that a first storage object  is newly created or stored on a first node  in a first realm (e.g., a first LAN). The first node may need to store location information for the first storage object in such a way as to enable the hierarchical lookup technique described above.  is a flowchart diagram illustrating one embodiment of a method for storing location information for the first storage object. It is noted that  illustrates one exemplary embodiment, and various alternative embodiments are contemplated.","In , the first node  in the first realm may select a second node , also referred to as the location node, in the first realm to store location information for the first storage object  located on the first node . In various embodiments, any technique may be used to select which node in the first realm should store the location information for the first storage object. The technique used to select the location node is preferably a deterministic technique such that regardless of which specific node the first node  is, the first node  will select the same location node. In other words, no matter which node performs the mapping of the storage object to the location node, the same location node may be selected.","In one embodiment, the second node, i.e., the location node, may be selected based on information regarding the first storage object. For example, in one embodiment the first storage object may have an ID, e.g., a UUID such as described above, and the second node may be selected based on a relation between this ID and IDs of nodes in the first realm, as described in more detail below.","In , the first node  may send the location information for the first storage object  to the second node . For example, the first node  may send a message to the second node  requesting the second node  to store the location information for the first storage object  in the second node 's location information . The location information for the first storage object  may comprise information indicating that the first storage object  is located or stored on the first node . For example, in one embodiment the location information for the first storage object  may associate an ID of the first storage object  with an ID of the first node .","In , the second node may store the location information for the first storage object that was received from the first node. For example, the second node may add information to its location information  to indicate that the first storage object is located on the first node. After storing the location information for the first storage object, the second node may be operable to lookup or retrieve the location information for the first storage object from the second node's location information . For example, the second node may lookup the location information for the first storage object in response to a query from another node, as described below.","In , the first node may select a second realm (e.g., a second LAN) to store location information for the first storage object. In various embodiments, any technique may be used to determine which remote realm to choose as the second realm. The technique used to select the second realm is preferably a deterministic technique such that regardless of which specific node the first node is and regardless of which realm the first node is in, the first node will select the same realm as the second realm. In other words, no matter which node performs the mapping of the storage object to the second realm, the same realm may be selected as the second realm.","In one embodiment, the second realm may be selected based on information regarding the first storage object. For example, in one embodiment the second realm may be selected based on a relation between an ID of the first storage object and IDs of realms in the system , as described in more detail below.","In , the first node may send the location information for the first storage object to the second realm, i.e., to a node within the second realm. In , a third node within the second realm may store the location information for the first storage object. For example, the third node may add information to its location information  to indicate that the first storage object is located on the first node. After storing the location information for the first storage object, the third node may be operable to lookup or retrieve the location information for the first storage object from the third node's location information . For example, the third node may lookup the location information for the first storage object in response to a query from another node, as described below.","In various embodiments, the first node may send the location information for the first storage object to any node within the second realm. In one embodiment the first node may be operable to determine which third node within the second realm should store the location information for the first storage object and may send the location information directly to the third node (or may send a message addressed to the third node to another node in the second realm, which then forwards the message to the third node).","In another embodiment, the first node may not determine which third node within the second realm should store the location information for the first storage object. Instead, the first node may send the location information to a node within the second realm that is designated as a realm representative. The realm representative node may then determine which third node within the second realm should store the location information for the first storage object and may forward the location information to the third node. In various embodiments, any technique may be used to select which node in the second realm should store the location information for the first storage object. In one embodiment, the third node may be selected based on information regarding the first storage object. For example, in one embodiment the third node may be selected based on based on a relation between an ID of the first storage object and IDs of nodes in the second realm, as described in more detail below. The embodiment in which the first node sends the location information to a realm representative node and the realm representative node determines the third node may be advantageous in that the first node is not required to have knowledge of node IDs for nodes within the second realm.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 8","FIG. 6","FIG. 7","FIG. 6","FIG. 8"],"b":["100","110","110","104","110","110","104","109","110","110","107","110"]},"Node A also selected the LAN B as the second realm to store the location information for Obj A. As shown, node D was selected as the third node within LAN B to store the location information for Obj A in its location information D. The location information for Obj A indicates that Obj A is stored on node A. In one embodiment, the location information may also indicate the node A is in the LAN A, e.g., the location information may include an ID of the first realm (an ID of the LAN A).","Referring now to the flowchart of , suppose that a fourth node in the first realm needs to determine the location of the first storage object, e.g., because the fourth node needs to access the first storage object. As shown in , the fourth node may determine the second node to query for location information for the first storage object. In various embodiments, any technique may be used to determine that the second node is the appropriate node to query. In one embodiment, the technique used by the fourth node to determine the second node may be the same as the technique used by the first node to select the second node. For example, in one embodiment the second node may be selected in each case based on a relation between the ID of the first storage object and IDs of nodes in the first realm, as described in more detail below.","In , the fourth node may query the second node for location information for the first storage object. For example, the fourth node may send a message to the second node identifying the first storage object (e.g., by including the ID of the first storage object in the message) and requesting the second node to lookup and return the location information for the first storage object.","In response, the second node may access its location information  to lookup the location information for the first storage object. In , the second node may return the location information for the first storage object to the fourth node. As described above, the location information for the first storage object may specify that the first storage object is located on the first node. For example, the second node may return a message to the fourth node indicating the ID of the first node. The fourth node may then utilize the location information to access the first storage object on the first node.","Referring again to , in this example any of nodes A-C may act as the fourth node within the first realm (LAN A). For example, if node A or node B is the fourth node, then a message may be sent to node C, and node C may return the location information for the first storage object , Obj A, as described above. If node C is the fourth node then it may not be necessary to send a message to itself. For example, when needing to determine the location of the first storage object  Obj A, node C may determine that it itself has the location information for Obj A and may simply access the location information C. Also, in one embodiment, if node A is the fourth node, node A may first determine whether Obj A is stored locally on node A and find that that is the case, making it unnecessary to send a message to node C to determine the location of Obj A.","Referring now to the flowchart of , suppose that the fourth node is in a third realm different than the first realm or the second realm, and again the fourth node needs to determine the location of the first storage object. As described above, the fourth node may thus first attempt to query a node within its local realm to find the location information for the first storage object. Thus, in , the fourth node may determine a fifth node in the third realm to query for location information for the first storage object, similarly as described above with respect to  of . For example, in one embodiment the fifth node may be selected based on a relation between the ID of the first storage object and IDs of nodes in the third realm.","In , the fourth node may query the fifth node for location information for the first storage object, similarly as described above with respect to  of . In response, the fifth node may access its location information  to lookup the location information for the first storage object. However, in this case the fifth node may find that it does not have location information for the first storage object. The fifth node may thus send a reply to the fourth node indicating that this is the case. In , the fourth node may receive the reply from the fifth node indicating that the fifth node does not have location information for the first storage object.","Since the fourth node could not find the location information for the first storage object in its local realm, the fourth node may next attempt to find the location information in a remote realm. In , the fourth node may determine the second realm as a remote realm to query for location information for the first storage object. In various embodiments, any technique may be used to determine that the second realm is the appropriate realm to query. In one embodiment, the technique used by the fourth node to determine the second realm may be the same as the technique used by the first node to select the second realm in  of . For example, in one embodiment the second realm may be selected in each case based on a relation between the ID of the first storage object and IDs of IDs of realms in the system , as described in more detail below.","In , the fourth node may send a query for location information for the first storage object to the second realm. In various embodiments, the fourth node may send the query for the location information to any node within the second realm. The query may be received either directly or indirectly by the third node in the second realm. For example, in one embodiment the fourth node may be operable to determine which third node within the second realm stores the location information for the first storage object and may send the location information directly to the third node (or may send a message addressed to the third node to another node in the second realm, which then forwards the message to the third node).","In another embodiment, the fourth node may not determine which third node within the second realm stores the location information for the first storage object. Instead, the fourth node may send the query for the location information to a node within the second realm that is designated as a realm representative. The realm representative node may then determine which third node within the second realm stores the location information for the first storage object and may forward the query for the location information to the third node.","In various embodiments, any technique may be used to determine which node in the second realm stores the location information for the first storage object. In one embodiment, the technique used may be the same as the technique used when selecting the third node as the node to store the location information received from the first node. For example, in one embodiment the third node may be selected in each case based on a relation between the ID of the first storage object and IDs of nodes in the second realm, as described in more detail below. The embodiment in which the fourth node sends the query for the location information to a realm representative node in the second realm and the realm representative node determines the third node may be advantageous in that the fourth node is not required to have knowledge of node IDs for nodes within the second realm.","In response to the query for the location information, the third node may access its location information  to lookup the location information for the first storage object. In , the third node may return the location information for the first storage object to the fourth node. As described above, the location information for the first storage object may specify that the first storage object is located on the first node. For example, the third node may return a message to the fourth node indicating the ID of the first realm and the ID of the first node. The fourth node may then utilize the location information to access the first storage object on the first node.","Referring again to , in this example the third realm may be the LAN C, and any of nodes H-J may act as the fourth node within the third realm. For example, suppose that node I acts as the fourth node. Node I may determine any of nodes H-J as the fifth node within the third realm. For example, suppose that node I determines node J as the fifth node. Thus, node I may query node J for location information for the first storage object (Obj A). Node J may attempt to find the location information in its location information J and may return a reply to node I indicating that the location information was not found. Node I may then determine that LAN B is the appropriate remote realm to query for the location information for Obj A and may send the query to a node within LAN B. Node D may receive the query (either directly or indirectly as described above) and may return the location information for Obj A, as described above.","In various embodiments, the location information  discussed above may be structured or stored in any desired way. Any of various data structures or algorithms may be used to store the location information . In one embodiment, the location information  on a given node  may be implemented as a table comprising a plurality of table entries, where each table entry specifies location information for a particular storage object . For example, in , the location information C and D on nodes C and D may each comprise a table entry specifying that the storage object  Obj A is stored on node A. In one embodiment, the location information table on each node  may be implemented as a hash table. For example, hash table entries for each storage object  may be keyed on the ID of the storage object . In other embodiments, location information  may be stored or structured in any other desired way.","As described above, the location information  stored by a given node may include location information specifying locations of storage objects located within the node's own realm (referred to as local location information), as well as location information specifying locations of storage objects located within remote realms (referred to as remote location information). In one embodiment, the local location information and the remote location information may be stored separately. For example, the location information  on a given node may include both a first hash table (referred to as a local hash table) comprising entries specifying locations of storage objects located within the node's own realm and a second hash table (referred to as a global hash table) specifying locations of storage objects located within any realm in the system .","The first hash table stored on a given node may effectively comprise a portion of a larger distributed hash table that is distributed over all the nodes in the node's realm (or distributed over all the nodes in the realm that store location information). Thus, for each realm, nodes in the realm may be configured to collectively store a distributed hash table specifying location information for storage objects stored on nodes within that realm.","The second hash table stored on a given node may effectively comprise a portion of a larger distributed hash table that is distributed over all the nodes in the system (or distributed over all the nodes in the system that store location information). Thus, nodes throughout the system may be configured to collectively store a global distributed hash table specifying location information for storage objects stored on nodes throughout the system.","In another embodiment, the local location information and the remote location information maintained by a given node may be stored together. For example, the local location information and the remote location information may be stored in a single table. Each table entry may simply indicate a mapping of a storage object ID to location information for the respective storage object, regardless of whether the storage object is located in the local realm or a remote realm.","Referring again to  of , any technique may be used to select which node in the local realm (i.e., the second node) should store the location information for the first storage object, as noted. In one embodiment, the first storage object may have an ID implemented as a Universally Unique ID (UUID). Each node in the local realm may also have an ID implemented as a UUID. In one embodiment, the second node may be selected based on a relation between the first storage object's UUID and UUIDs of nodes in the local realm. As one example, the node whose UUID is the highest UUID less than the UUID of the first storage object may be selected as the second node. (Each node in the local realm may know the UUIDs of the other nodes in the local realm.) If the first storage object's UUID is less than the UUID of all nodes in the realm, the node with the highest UUID may be selected as the second node. As another example, the node whose UUID is the lowest UUID greater than the UUID of the first storage object may be selected as the second node, where the node with the lowest UUID is selected as the second node if the first storage object's UUID is greater than the UUID of all nodes in the realm.","With respect to  of  in which the fourth node determines which node in the local realm is the second node to query for location information of the first storage object, in one embodiment this determination may be performed in the same way, e.g., by selecting the node whose UUID is the highest UUID less than the UUID of the first storage object.","With respect to the selection of which third node to select in the second realm to store the location information for the first storage object, this selection may be performed in a similar manner. For example, the node in the second realm whose UUID is the highest UUID less than the UUID of the first storage object may be selected as the second node. Similarly, with respect to  when the third node is again determined during the query process, the third node may be determined using the same technique.","In one embodiment, new nodes may be added to or come online in various realms as the system is active. In one embodiment, location information may be transferred from other nodes to a new node when the new node joins a realm. For example, suppose that a new node is added to the first realm described above with reference to . The second node to store location information for the first storage object may have been selected as described above as the node having the highest UUID less than the UUID of the first storage object. If the UUID of the new node is higher than the UUID of the second node and less than the UUID of the first storage object, then the second node may communicate with the new node to transfer location information for the first storage object from the second node to the new node. Nodes that need to lookup the location of the first storage object may query the new node for the location information.","Similarly, nodes may be removed from the system or may fail as the system is active. In this case, location information previously stored by these nodes may be re-located to other nodes. For example, each node which previously stored location information on a node that is subsequently removed from the system may store the location information on a new node, e.g., by selecting the new node based on its UUID, as described above.","With respect to  of  in which the first node selects a second realm to store location information for the first storage object, in one embodiment this selection may be made based on a relation between the UUID of the first storage object and UUIDs of realms in the system. In one embodiment, the UUID of the first storage object may first be transformed, for example by changing its endianness, e.g., by swapping the most significant and least significant longs in the UUID. The transformed UUID may then be compared to the realm UUIDs. (The first node may know the realm UUIDs for all the realms, or the first node may communicate with a realm representative node in its local realm, where the realm representative node knows the realm UUIDs for all the realms.) The realm having the highest UUID less than the transformed UUID may be selected as the second realm. If the first storage object's transformed UUID is less than the UUID of all realms in the system, the realm with the highest UUID may be selected as the second realm.","With respect  in which the fourth node determines which realm is the second realm to query for location information of the first storage object, in one embodiment this determination may be performed in the same way, e.g., by selecting the realm whose UUID is the highest UUID less than the transformed UUID of the first storage object.","In one embodiment, new realms may also be added to or come online in the system as the system is active. When a new realm is added, the UUID of the new realm may affect the determination of which remote realms store location information for various objects, in a manner similar to that described above. Thus, when the new realm is added, one or more nodes in one or more other realms may transfer remote location information to the new realm accordingly.","It is noted that the selection techniques described above are exemplary only. In other embodiments any other desired selection technique may be utilized to select nodes or realms. Also, as described above, in one embodiment some nodes may not store location information. UUIDs for nodes that do not store location information may be excluded from consideration in the node selection technique. In one embodiment, one or more realms in the system may also be excluded from storing location information for remote storage objects. In this embodiment, the UUIDs of these realms may be excluded from consideration in the realm selection technique.","In one embodiment, storage objects may have a limited lifetime, and various storage objects may be deleted or destroyed at times. In one embodiment, when a storage object is deleted, the node that stored the storage object may communicate with the nodes that store location information for the storage object to cause them to discard the location information.","It is noted that the method described above represent exemplary embodiments only, and numerous alternative embodiments are contemplated. As one example, in one embodiment when a first storage object is created on a first node, the first node may select multiple remote realms to which to send the first storage object's location information. In each remote realm, a node may be selected to store the location information. Thus, when another node needs to lookup the location of the first storage object, the node may determine the closest of these multiple realms and may send the lookup query to the closest realm, which may increase efficiency of the lookup operation in some cases. Having the lookup information for the first storage object stored in multiple remote realms may also benefit the system by increasing the availability of the location information. For example, if one remote realm becomes inaccessible, location information for the first storage object may still be obtained from another realm.","In other embodiments, it may be desirable to avoid the overhead of storing location information for each storage object in multiple remote realms. In one embodiment, in the event that a search for location information fails, a broadcast operation to find the storage object may be performed. The system may be designed so that the broadcasting does not affect scaling and performance of the system. First it is noted that in one embodiment, it is not necessary to search for or locate a storage object every time the storage object is accessed. For example, once a node determines the location of a storage object the first time, it may not be necessary to perform subsequent lookup operations for subsequent accesses. Also, it is only necessary to do the broadcast search when a failure causes the location information for the given storage object to be lost or when the node having the location information cannot be accessed. Also, in one embodiment nodes in the system may maintain routing information in such a way that a full broadcast over nodes in the system is not required. Routes toward the storage object may be remembered so that nodes that have not experienced failures do not need to broadcast, but instead just send a search request on the route towards the storage object.","Although the above description refers to storage objects, it is noted that various embodiments of the system and methods described above may be utilized to search for objects or software entities of any kind. As used herein, the term object may comprise a portion of data.","In one embodiment, the system and methods may be utilized by client application software  that executes on nodes  to implement distributed data storage such that data is distributed across various nodes  in the system . The search mechanisms described above may be utilized by the client software  to efficiently locate various storage objects or files.","It is noted that various embodiments may further include receiving, sending or storing instructions and\/or data implemented in accordance with the foregoing description upon a carrier medium. Generally speaking, a carrier medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD-ROM, volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc. as well as transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the invention can be obtained when the following detailed description is considered in conjunction with the following drawings, in which:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
