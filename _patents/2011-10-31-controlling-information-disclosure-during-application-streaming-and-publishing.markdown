---
title: Controlling information disclosure during application streaming and publishing
abstract: Various aspects as described herein are directed to systems, method, apparatuses, and software for intercepting requests to copy content, paste content, clip content, cut content, or perform a print screen operation, and either allowing the requested operation to occur or preventing the operation depending upon whether the content is sourced from a streamed application or a non-streamed application, and/or depending upon a streamed application-based policy. This may be performed by, for instance, hooking an appropriate function call to the operating system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08997172&OS=08997172&RS=08997172
owner: Citrix Systems, Inc.
number: 08997172
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20111031
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority to, and is a non-provisional of, U.S. Provisional Patent Application Ser. No. 61\/411,106, filed Nov. 8, 2010, entitled, \u201cPreventing Information Disclosure During Application Streaming and Publishing,\u201d hereby incorporated by reference as to its entirety.","When information is streamed from one computer to another, there can be instances where information content is lost, such as when the user or a software application initiates a copy, cut, or paste operation on the content. In the case of hosted applications and locally-executing applications, policies are sometimes implemented to prevent the use these types of copying\/pasting functions when they are not appropriate. However, it is believed that policies do not exist that specifically address the use of a clipboard in connection with content displayed by a streamed application that executes on a user's local desktop, as opposed to a non-streamed application or a hosted application. Furthermore, it is believed that there are currently no policies directed towards preventing screen capture of a screen specifically when it contains such streamed application content, even if the content is not protected by digital management rights (DRM).","Various aspects as described herein are directed to systems, method, apparatuses, and software for intercepting requests to copy content, paste content, clip content, cut content, or perform a print screen operation, and either allowing the requested operation to occur or preventing the operation depending upon whether the content is sourced from a streamed application or a non-streamed application, and\/or depending upon a policy. This may be performed by, for instance, hooking an appropriate function call to the operating system.","For example, some aspects are directed to a system, method, apparatus, or software for detecting, by a computing device, a request to obtain a copy of content displayed by a software application on a display of the computing device; determining, by the computing device, whether the software application is a streamed application; and selectively either copying or not copying, by the computing device, the content depending upon whether the application is determined to be a streamed application.","Further aspects are directed to, for example, a system, method, apparatus, or software for intercepting a request directed to a software application for digital rights management (DRM) status of content displayed by the software application executing on a computing device; determining, by the computing device, whether the software application is a streamed application; and depending upon whether the software application is determined to be a streamed application, either (1) allowing the software application to respond to the request with a DRM status of the content, or (2) responding to the request that the content is DRM protected.","Still further aspects are directed to, for example, a system, method, apparatus, or software for intercepting a request directed to the operating system to paste the copy of the content; responsive to the intercepted request to paste, determining whether the global variable contains the first value or the second value; and selectively either allowing the operating system to perform a paste operation or preventing the paste operation, depending upon whether the global variable contains the first value or the second value.","These and other aspects will be described in greater detail herein with reference to examples set forth in the various drawings.","In the following description of the various embodiments, reference is made to the accompanying drawings, which form a part hereof, and in which is shown by way of illustration various embodiments in which one or more aspects of the disclosure may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present disclosure.","Various connections between elements are discussed in the following description. These connections are general and, unless specified otherwise, may be direct and\/or indirect, wired and\/or wireless, and this specification is not intended to be limiting in this respect.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1A","b":["101","102","102","102","106","106","106","102","106","104"]},"The computing environment  may include one or more appliances installed between the server(s)  and client machine(s) . The appliance may mange client\/server connections, and in some cases may load balance client connections amongst a plurality of backend servers.","The one or more client machines  may be a single client machine  or a group of client machines , while the one or more server(s)  may be a single server  or a group of servers . A given one of the client machines  may communicate with a single one of the servers  or with more than one of the servers . Likewise, a given one of the servers  may communicate with a single one of the client machines  or with more than one of the client machines . The client machine(s)  may referred to herein by any of the following terms: client machine(s) ; client(s); client computer(s); client device(s); client computing device(s); local machine; remote machine(s); client node(s); endpoint(s); endpoint node(s); or a second machine(s). The server(s)  may be referred to herein by any of the following terms: server(s), local machine(s); remote machine; server farm(s), host computing device(s), or first machine(s).","Any of the client machines  may include a virtual machine, for example a virtual machine managed by a hypervisor developed by XenSolutions, Citrix Systems, IBM, VMware, or any other hypervisor. The virtual machine may be managed by, for example, a hypervisor executing on the server  or a hypervisor executing on the client machine .","The client machine(s)  may execute computer-executable instructions in the form of, e.g., a software application; a virtual machine; a hypervisor; a web browser; a web-based client; a client-server application; a thin-client computing client; an ActiveX control; a Java applet; software related to voice over internet protocol (VoIP) communications such as a soft IP telephone; an application for streaming video and\/or audio; an application for facilitating real-time-data communications; an HTTP client; an FTP client; an Oscar client; a Telnet client; a streamed application; and\/or any other set of executable instructions. The client machine(s)  may further display human-readable output generated by a software application remotely executing on a server  or other remotely located machine. In these embodiments, the client device  may display the application output in an application window, a browser, or other output window.","As used herein, a desktop may include a graphical environment or space in which one or more applications may be hosted and\/or executed. A desktop may include a graphical shell providing a user interface for an instance of an operating system in which local and\/or remote applications can be integrated. Applications, as used herein, include programs that execute after an instance of an operating system (and, optionally, also the desktop) has been loaded. Each instance of the operating system may be physical (e.g., one operating system per device) or virtual (e.g., many instances of an OS running on a single device). Each application may be executed on a local device (e.g., the client machine(s) ), or executed (\u201cremoted\u201d) on a remotely located device such as server(s) ).","The server(s)  may execute, for instance, a remote presentation client, or other client or program, that uses a thin-client or remote-display protocol to capture display output generated by an application executing on server(s) . Server(s)  may transmit the application display output to a remote client . The thin-client or remote-display protocol may include one or more of: the Independent Computing Architecture (ICA) protocol manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla.; or the Remote Desktop Protocol (RDP) manufactured by the Microsoft Corporation of Redmond, Wash.","The server(s)  may be logically grouped together into a server farm, if desired. In such a case, some or all of the logically-grouped servers  in the server farm may be geographically dispersed or located proximate to each other. Geographically dispersed servers  within a server farm may communicate using, for instance, a WAN, MAN, or LAN. The servers  may be, e.g., on different continents, in different regions of a continent, in different countries, in different states, in different cities, on different campuses, and\/or in different rooms. The server farm may be administered as a single entity or as a plurality of entities.","The server(s)  may each execute a substantially similar type of operating system platform (e.g., WINDOWS NT, manufactured by Microsoft Corp. of Redmond, Wash., UNIX, LINUX, or SNOW LEOPARD), or different types of operating systems. For instance, some of the servers  may execute a first type of operating system platform, and others of the servers  may execute a second type of operating system platform, where the first and second types of operating system platforms may be different platforms.","The server(s)  may be any server type(s), such as but not limited to: a file server; an application server; a web server; a proxy server; an appliance; a network appliance; a gateway; an application gateway; a gateway server; a virtualization server; a deployment server; an SSL VPN server; a firewall; a web server; an application server or as a master application server; a server executing an active directory; a server executing an application acceleration program that provides firewall functionality, application functionality, or load balancing functionality; and\/or a RADIUS server that includes a remote authentication dial-in user service. Where one or more of the server(s)  may be or otherwise include an appliance, those one or more appliances may be an appliance manufactured by, for example, any one of the following manufacturers: the Citrix Application Networking Group; Silver Peak Systems, Inc; Riverbed Technology, Inc.; F5 Networks, Inc.; or Juniper Networks, Inc.","In operation, a first one of the servers  (e.g., server A) may receive a request from one of the client machines  and may forward that request to a second one of the servers  (e.g., server B). The second one of the servers  may then respond to the request. The first server may acquire an enumeration of applications available to the requesting client machine  and\/or address information associated with one of the servers  that hosts an application identified within the enumeration of applications. The first server may then present a response to the client's request using a web interface, and communicate with the requesting client  to provide the requesting client  with access to the identified application. In doing so, the first server may, for instance, communicate directly with the requesting client  to provide the requesting client  with access to the identified application.","The server(s)  may execute one or more of the following applications, by way of example: a thin-client application using a thin-client protocol to transmit application display data to a client; a remote display presentation application; any portion of the CITRIX ACCESS SUITE by Citrix Systems, Inc. like the METAFRAME or CITRIX PRESENTATION SERVER or XenApp or XenDesktop; MICROSOFT WINDOWS Terminal Services manufactured by the Microsoft Corporation; or an ICA client, developed by Citrix Systems, Inc. In some embodiments, a server  may include an application server such as: an email server that provides email services such as MICROSOFT EXCHANGE manufactured by the Microsoft Corporation; a web or Internet server; a desktop sharing server; a collaboration server; or any other type of application server. In some embodiments, a server  may execute any one of the following types of hosted servers applications: GOTOMEETING provided by Citrix Online Division, Inc.; WEBEX provided by WebEx, Inc. of Santa Clara, Calif.; or Microsoft Office LIVE MEETING provided by Microsoft Corporation.","Client machines  may be or otherwise include, for example, a client node that seeks access to resources provided by one or more of the server(s) . The server(s)  may, for instance, provide client(s)  and\/or client nodes with access to hosted resources. The server(s)  may function as a master node such that it communicates with one or more client(s)  and\/or server(s) . The master node may identify and provide address information associated with one or more of the server(s)  hosting a requested application, to one or more of the client(s)  and\/or server(s) . The master node may include, for instance, a server farm of a set of the servers , one or more of the client(s) , a cluster of the client nodes , and\/or an appliance.","One or more of the client(s)  and\/or one or more of the server(s)  may transmit data over the network  installed between machines and appliances within the computing environment . The network  may comprise one or more networks and\/or sub-networks, and may be installed between any combination of the client(s) , server(s) , computing machines, and\/or appliances included within the computing environment . The network  may be or otherwise include one or more of, for example: a local-area network (LAN); a metropolitan area network (MAN); a wide area network (WAN); a primary network  comprised of multiple sub-networks  located between the client machines  and the servers ; a primary public network  with a private sub-network ; a primary private network  with a public sub-network ; a primary private network  with a private sub-network ; a point to point network; a broadcast network; a telecommunications network; a data communication network; a computer network; an ATM (Asynchronous Transfer Mode) network; a SONET (Synchronous Optical Network) network; a SDH (Synchronous Digital Hierarchy) network; a wireless network; a wireline network; and\/or a network  that includes a wireless link where the wireless link may be an infrared channel or satellite band. The network topology of the network  may differ within different embodiments. The topology or topologies of the network  that may be utilized may include, for example: a bus network topology; a star network topology; a ring network topology; a repeater-based network topology; and\/or a tiered-star network topology. The network  may further be or otherwise include mobile telephone networks that use a protocol to communicate among mobile devices, where the protocol may include one or more of the following, for example: AMPS; TDMA; CDMA; GSM; GPRS UMTS; and\/or any other protocol able to transmit data among mobile devices.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 1B","FIG. 1A"],"b":["100","102","104","106","100","150","121","122","128","123","124","124","116","118","128","120","123","126","127","123","130","130","100","100","100"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 1C","FIG. 1A","FIG. 1C"],"b":["100","102","104","106","100","150","170","130","170","121","121","130","122","140","121","103","122"],"i":"b"},"The main processor  may include one or more of the following component configurations, for example: logic circuits that respond to and process instructions fetched from the main memory unit ; a microprocessor unit, such as: those manufactured by Intel Corporation; those manufactured by Motorola Corporation; those manufactured by Transmeta Corporation of Santa Clara, Calif.; the RS\/6000 processor such as those manufactured by International Business Machines; a processor such as those manufactured by Advanced Micro Devices; and\/or any other combination of logic circuits. The main processor  may be implemented as any one or more of the following, for example: a microprocessor, a microcontroller, a central processing unit with a single processing core, a central processing unit with two processing cores, and\/or a central processing unit with more than one processing core. While  illustrates an example computing device  that includes a single main processor , in other embodiments the computing device  may include any number of a plurality of processors.","Regardless of how many processors are included, the computing device  may store or access executable firmware or other executable instructions that, when executed, direct one or more of the processors (e.g., main processor ) to execute instructions that may be partially or fully stored in the main memory , the cache , and\/or an I\/O device \/such as a magnetic or optical drive. The executable instructions may apply to one or more pieces of data. In some embodiments, the instructions may execute simultaneously, or substantially simultaneously, on more than one of the processors (where multiple processor are provided). The computing device  may store or access executable firmware or other executable instructions that, when executed, direct the one or more processors to each execute a section of a group of instructions. For example, each processor may be instructed to execute a portion of a program or a particular module within a program.","In some embodiments, the main processor  (or each of multiple processors) may include one or more processing cores. For example, the main processor  may have two cores, four cores, eight cores, etc. Moreover, the main processor  (or each of multiple processors) may comprise one or more parallel processing cores. The processing cores may, for example, access available memory as a global address space. Memory within the computing device  may be segmented and assigned to a particular core within the main processor . One or more processing cores or processors in the computing device  may access local memory, and memory within the computing device  may be shared amongst one or more of the processors and\/or processing cores, while other memory may be accessed by particular one of the processors or subsets of the processors. Where the computing device  includes more than one processor, the multiple processors may be packaged together as a single integrated circuit (IC). The multiple processors may be linked together by an internal high speed bus, which may be referred to as an element interconnect bus.","The one or more processors may execute a single instruction simultaneously on multiple pieces of data (SIMD). Where multiple processors are used, they may execute multiple instructions simultaneously on multiple pieces of data (MIMD). The computing device  may include any number of SIMD and\/or MIMD processors, as desired.","The computing device  may further include, for example, a graphics processor and\/or a graphics processing unit. The graphics processing unit may include any combination of firmware, software, and\/or hardware. The graphics processing unit may input graphics data and\/or graphics instructions, render a graphic from the inputted data and instructions, and\/or output the rendered graphic. The graphics processing unit may be included within or outside the main processor , as desired. where the computing device  include multiple processors, at least one of the processors may be dedicated to processing and rendering graphics.","The main processor  may communicate with the cache memory  via, e.g., a secondary bus also known as a backside bus, and\/or via the system bus . The system bus  may, in some embodiments, also be used by the processing unit to communicate with more than one type of I\/O device -. The system bus  may include one or more of the following types of buses, for example: a VESA VL bus; an ISA bus; an EISA bus; a MicroChannel Architecture (MCA) bus; a PCI bus; a PCI-X bus; a PCI-Express bus; and\/or a NuBus. One or more of the I\/O devices  may include a video display (e.g., a display device ) that communicates with the main processor  via, for instance, one or more of the following connections: HyperTransport, Rapid I\/O, and\/or InfiniBand. In some embodiments, a first one of the I\/O devices (e.g., I\/O device ) may communicate with the main processor  using a local interconnect bus, while a second one of the I\/O devices (e.g., I\/O device ) may communicate with the main processor  using a direct connection via an I\/O port of the main processor .","The main memory , the cache , and\/or any other tangible and\/or non-transitory computer-readable media may be embodied as one or more memories, such as static random access memory (SRAM), Burst SRAM or SynchBurst SRAM (BSRAM); Dynamic random access memory (DRAM); Fast Page Mode DRAM (FPM DRAM); Enhanced DRAM (EDRAM), Extended Data Output RAM (EDO RAM); Extended Data Output DRAM (EDO DRAM); Burst Extended Data Output DRAM (BEDO DRAM); Enhanced DRAM (EDRAM); synchronous DRAM (SDRAM); JEDEC SRAM; PC100 SDRAM; Double Data Rate SDRAM (DDR SDRAM); Enhanced SDRAM (ESDRAM); SyncLink DRAM (SLDRAM); Direct Rambus DRAM (DRDRAM); Ferroelectric RAM (FRAM); and\/or any other type of memory. In some embodiments, processing unit  may access the main memory  via: the system bus ; the memory port ; and\/or any other connection, bus, or port that allows the main processor  to access the respective memory or other storage device.","One or more installation devices  (see, e.g., ) may also be provided, such as the following types of installation devices: a CD-ROM drive, a CD-R\/RW drive, a DVD-ROM drive, tape drives of various formats, USB device, a bootable medium, a bootable CD, a bootable CD for GNU\/Linux distribution such as KNOPPIX\u00ae, a hard-drive or any other device suitable for installing applications or other types of software. An example of such an application may include a client agent  or any portion thereof The computing device  may include a storage device  for storing computer-readable information (executable instructions and\/or non-executable data) that may include, e.g., one or more hard disk drives, optical drives, tape drives, memories, redundant arrays of independent disks, and\/or any other one or more types of tangible and\/or non-transitory computer-readable media. The storage device  may be configured to store an operating system, software, programs applications, data and\/or at least a portion of the client agent . In some embodiments, the installation device  may be used as the storage device  and\/or to supplement the storage device .","The computing device  may include a network interface  to interface to a network such as a Local Area Network (LAN), Wide Area Network (WAN), an intranet, and\/or the Internet through any of a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, T1, T3, 56k b, X.25, SNA, DECNET), broadband connections (e.g., ISDN, Frame Relay, ATM, Gigabit Ethernet, Ethernet-over-SONET), wireless connections, universal serial bus (USB) ports, Ethernet ports, and\/or some combination of any or all of the above. Connections may also be established using a variety of communication protocols (e.g., TCP\/IP, IPX, SPX, NetBIOS, Ethernet, ARCNET, SONET, SDH, Fiber Distributed Data Interface (FDDI), RS232, RS485, IEEE 802.11, IEEE 802.11a, IEEE 802.11b, IEEE 802.11g, CDMA, GSM, WiMax and direct asynchronous connections). The network interface  may be able to communicate with one or more other computing devices via any type and\/or form of gateway or tunneling protocol, such as Secure Socket Layer (SSL) or Transport Layer Security (TLS), or the Citrix Gateway Protocol manufactured by Citrix Systems, Inc. Versions of the network interface  may comprise one or more of: a built-in network adapter; a network interface card; a PCMCIA network card; a card bus network adapter; a wireless network adapter; a USB network adapter; a modem; or any other device suitable for interfacing the computing device  to a network capable of communicating and performing the various acts described herein.","In some embodiments, I\/O devices A-N may include one or more of: a keyboard ; a pointing device ; mice; trackpads; an optical pen; trackballs; microphones; drawing tablets; video displays; speakers; inkjet printers; laser printers; and dye-sublimation printers; or any other input\/output device able to perform the various acts described herein. An I\/O controller  may, in some embodiments, connect to multiple I\/O devices A-N to control the one or more I\/O devices. Some embodiments of the I\/O devices A-N may be configured to provide storage or an installation medium . In some embodiments, one or more of I\/O devices A-N may provide a USB interface for receiving USB storage devices such as the USB Flash Drive line of devices (e.g., those manufactured by Twintech Industry, Inc.) In some embodiments, an I\/O device  may include or otherwise provide a bridge between the system bus  and an external communication bus, such as: a USB bus; an Apple Desktop Bus; an RS-232 serial connection; a SCSI bus; a FireWire bus; a FireWire 800 bus; an Ethernet bus; an AppleTalk bus; a Gigabit Ethernet bus; an Asynchronous Transfer Mode bus; a HIPPI bus; a Super HIPPI bus; a SerialPlus bus; a SO\/LAMP bus; a FibreChannel bus; and\/or a Serial Attached small computer system interface bus.","The computing device  may be configured to connect to one or more display devices A-N that may all be the same type of display, or that may be of different types. Examples of the display devices A-N that may be supported may include: one or multiple I\/O devices A-N; the I\/O controller ; a combination of I\/O device(s) A-N and the I\/O controller ; any combination of hardware and software able to support a display device A-N; any type and\/or form of video adapter, video card, driver, and\/or library to interface, communicate, connect or otherwise use the display devices A-N. The computing device  may be configured to use the one or more display devices A-N, and these configurations may include: having multiple connectors to interface to multiple display devices A-N; having multiple video adapters, with each video adapter connected to one or more of the display devices A-N; having an operating system configured to support multiple displays A-N; using circuits and software included within the computing device  to connect to and use multiple display devices A-N; and\/or executing software on the main computing device  and multiple secondary computing devices to enable the main computing device  to use a secondary computing device's display as a display device A-N for the main computing device . In some embodiments, the computing device  may include multiple display devices A-N provided by one or more secondary computing devices and connected to the main computing device  via a network.","The computing device  may execute any one or more operating systems, such as but not limited to: versions of the MICROSOFT WINDOWS operating systems such as WINDOWS 3.x, WINDOWS 95, WINDOWS 98, WINDOWS 2000, WINDOWS NT 3.51, WINDOWS NT 4.0, WINDOWS CE, WINDOWS XP, WINDOWS VISTA, and WINDOWS 7; the different releases of the Unix and Linux operating systems; any version of the MAC OS manufactured by Apple Computer; OS\/2, manufactured by International Business Machines; any embedded operating system; any real-time operating system; any open source operating system; any proprietary operating system; any operating systems for mobile computing devices; and\/or any other operating system. Where the computing device  executes multiple operating systems, the computing machine  may execute, for example, PARALLELS or another virtualization platform that may execute or manage a virtual machine executing a first operating system, while the computing machine  may execute a second operating system different from the first operating system.","The computing device  may be embodied, for example, in one or more of the following devices: a computing workstation; a desktop computer; a laptop or notebook computer; a server; a handheld computer such as a tablet computer; a mobile telephone; a portable telecommunication device; a media playing device; a gaming system; a mobile computing device; a netbook; a device of the IPOD, IPHONE, or IPAD family of devices manufactured by Apple Computer; any one of the PLAYSTATION family of devices manufactured by the Sony Corporation; any one of the Nintendo family of devices manufactured by Nintendo Co; any one of the XBOX family of devices manufactured by the Microsoft Corporation; or any other type and\/or form of computing, telecommunications or media device that is capable of communication and that has sufficient processor power and memory capacity to perform the acts described herein. In some embodiments the computing machine  may include a mobile device, such as any one of the following mobile devices: a JAVA-enabled cellular telephone or personal digital assistant (PDA), such as the i55sr, i58sr, i85s, i88s, i90c, i95cl, or the im1100, all of which are manufactured by Motorola Corp; the 6035 or the 7135, manufactured by Kyocera; the i300 or i330, manufactured by Samsung Electronics Co., Ltd; the TREO 180, 270, 600, 650, 680, 700p, 700w, or 750 smart phone manufactured by Palm, Inc; any computing device that has different processors, operating systems, and input devices consistent with the device; or any other mobile computing device configured to perform the acts described herein. In still other embodiments, the computing device  may include any one of the following devices: any one series of Blackberry, or other handheld device manufactured by Research In Motion Limited; the iPhone manufactured by Apple Computer; Palm Pre; a Pocket PC; a Pocket PC Phone; or any other handheld mobile device.","The computing device  may, as desired, have multiple different processors, operating systems, and\/or input\/output devices. For example, the computing device  may be embodied as a TREO 180, 270, 600, 650, 680, 700p, 700w, or 750 smart phone manufactured by Palm, Inc. In some embodiments, the TREO smart phone may be operated under the control of the PalmOS operating system and may include a stylus input device as well as a five-way navigator device.","In some embodiments, the computing device  may be or otherwise include a mobile device, such as a JAVA-enabled cellular telephone or personal digital assistant (PDA), such as the i55sr, i58sr, i85s, i88s, i90c, i95cl, or the im1100, all of which are manufactured by Motorola Corp. of Schaumburg, Ill., the 6035 or the 7135, manufactured by Kyocera of Kyoto, Japan, or the i300 or i330, manufactured by Samsung Electronics Co., Ltd., of Seoul, Korea. In some embodiments, the computing device  may include a mobile device manufactured by Nokia of Finland, or by Sony Ericsson Mobile Communications AB of Lund, Sweden.","In some embodiments, the computing device  may be or otherwise include a Blackberry handheld or smart phone, such as the devices manufactured by Research In Motion Limited, including the Blackberry 7100 series, 8700 series, 7700 series, 7200 series, the Blackberry 7520, or the Blackberry Pearl 8100. In some embodiments, the computing device  may include a smart phone, Pocket PC, Pocket PC Phone, or other handheld mobile device supporting Microsoft Windows Mobile Software. Moreover, the computing device  may include any workstation, desktop computer, laptop or notebook computer, server, handheld computer, mobile telephone, any other computer, or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.","In some embodiments, the computing device  may be or otherwise include a digital audio player, such as the Apple IPOD, IPOD Touch, IPOD NANO, and IPOD SHUFFLE lines of devices, manufactured by Apple Computer of Cupertino, Calif. In some embodiments, the digital audio player may function as both a portable media player and as a mass storage device. In some embodiments, the computing device  may include a digital audio player, such as the DigitalAudioPlayer Select MP3 players, manufactured by Samsung Electronics America, of Ridgefield Park, N.J., or the Motorola m500 or m25 Digital Audio Players, manufactured by Motorola Inc. of Schaumburg, Ill. In some embodiments, the computing device  may include a portable media player, such as the Zen Vision W, the Zen Vision series, the Zen Portable Media Center devices, or the Digital MP3 line of MP3 players, manufactured by Creative Technologies Ltd. In some embodiments, the computing device  may include a portable media player or digital audio player supporting file formats including, but not limited to, MP3, WAV, M4A\/AAC, WMA Protected AAC, AIFF, Audible audiobook, Apple Lossless audio file formats and .mov, .m4v, and .mp4 MPEG-4 (H.264\/MPEG-4 AVC) video file formats.","In some embodiments, the computing device  may comprise a combination of devices, such as a mobile phone combined with a digital audio player or portable media player. In some embodiments, the computing device  may include a Motorola RAZR or Motorola ROKR line of combination digital audio players and mobile phones. In some embodiments, the computing device  may include an iPhone smartphone, manufactured by Apple Computer of Cupertino, Calif.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 2A","b":["201","204","206","208","216","212","216","208","201","214","216","208","202","216","208","232","232","208","232","226","228","232","228","220","224","232","228","230"]},"The virtualization environment described may include, for example, a Type  hypervisor , and\/or a hypervisor that executes within an operating system  executing on the computing device . A Type  hypervisor, in some embodiments, may execute within an operating system  environment and virtual machines may execute at a level above the hypervisor. In various embodiments, the Type  hypervisor may execute within the context of a user's operating system such that the Type  hypervisor interacts with the user's operating system.","In some embodiments, the virtualization environment may include a computing device . The computing device  can be any computing device, and in some embodiments, the computing device  can be any computer, device or computing machine described herein. While  illustrates by way of example a single computing device , in some embodiments the modules, programs, virtual machines, and commands stored and executed by the computing device  can be executed by more than one computing device . In still other embodiments, the computing device  can be a server farm.","In some embodiments, the computing device  can include a hardware layer  that includes one or more pieces of hardware that communicates with the computing machine . In some embodiments, the hardware layer  can include any hardware included in the computing device . In some embodiments, the hardware layer  can include one or more physical disks , one or more physical devices , one or more physical processors  and memory .","The hardware layer , in some embodiments, can include one or more physical disks . A physical disk  can be any hard disk, while in some embodiments a physical disk  can be any hard disk described herein. In some embodiments, the hardware layer  can include one physical disk . In some embodiments, the hardware layer  can include more than one physical disk . The computing device , in some embodiments, can communicate with an external hard disk that is included in the hardware layer  as a physical disk .","In some embodiments, the hardware layer  can include a processor . The processor , in some embodiments, can be any processor. The processor  can include one or more processing cores. In other embodiments the computing device  can include one or more processors . In some embodiments, the computing device  can include one or more different processors, e.g. a processing unit, a graphics processing unit, or a physics engine.","Physical devices , in some embodiments, can be any device included in the computing device . In some embodiments, physical devices  can be any combination of devices included in the computing device  and external devices that communicate with the computing device . The computing device , in some embodiments, can include one or more physical devices . A physical device  can be or otherwise include any of the following, for example: a network interface card; a video card; a keyboard; a mouse; an input device; a monitor; a display device; speakers; an optical drive; a storage device; a universal serial bus connection; any device connected to the computing device ; any device communicating with the computing device ; a printer; a scanner; and\/or any other device or device described herein.","The hardware layer  can further include physical memory  that can include any type of memory. In some embodiments, the physical memory  can include any memory type described herein. The physical memory  can store data, and in some embodiments can store one or more programs, or set of executable instructions.  illustrates one embodiment where firmware  is stored within the physical memory  of the computing device . Programs or executable instructions stored in the physical memory  can be executed by the one or more processors  of the computing device .","Firmware , in some embodiments, can be any combination of executable instructions and hardware that controls hardware communicating with or included within the computing device . In some embodiments, the firmware  can control one or more pieces of hardware within the hardware layer . Firmware , in various embodiments, can be executed by one or more processors  within the computing device . In some embodiments, the firmware  can be boot firmware such as the basic input\/output system (BIOS.) Additional firmware  executing on the computing device  can interface with the BIOS.","In some embodiments, the computing device  can include an operating system  executed by one or more physical processors . In some embodiments, the operating system  is a user operating system that can directly access the hardware devices in the hardware layer . The operating system  can be any operating system and in some embodiments, the operating system  can be any operating system described herein.  illustrates one example embodiment where the hypervisor  executes within the context of the operating system  executing on the computing device . In this particular embodiment, the operating system  can be referred to as a host operating system , while the other operating systems in the example may be referred to as guest operating systems. Guest operating systems can include, e.g., the guest operating systems A-B executing on the virtual machines , and\/or the control program .","In some embodiments, the computing device  can include a hypervisor . A hypervisor , in some embodiments, can be a program that is executed by processors  on the computing device  to manage any number of virtual machines. The hypervisor  can be referred to as a virtual machine monitor, or platform virtualization software. In some embodiments, a hypervisor  can be any combination of executable instructions and hardware that monitors virtual machines executing on a computing machine. While  illustrates a virtualization environment that includes a Type  hypervisor , the computing device  can execute any other type of hypervisor. For example, the computing device  can execute a virtualization environment that includes a Type  hypervisor .","In some embodiments, the computing device  can execute one or more hypervisors . These one or more hypervisors  can be the same type of hypervisor or a different hypervisor type, as desired.","The hypervisor , in some embodiments, can provide virtual resources to operating systems  or control programs  executing on virtual machines  in any manner that simulates the operating systems  or control programs  having direct access to system resources. System resources can include: physical devices; physical disks; physical processors; physical memory  and any other component included in the computing device  hardware layer . In these embodiments, the hypervisor  may be used to emulate virtual hardware, partition physical hardware, virtualize physical hardware, or execute virtual machines that provide access to computing environments.","In some embodiments, the hypervisor  may control processor scheduling and memory partitioning for a virtual machine  executing on the computing device . Hypervisor  may include those manufactured by VMWare, Inc., of Palo Alto, Calif.; the XEN hypervisor, an open source product whose development is overseen by the open source Xen.org community; HyperV, VirtualServer or virtual PC hypervisors provided by Microsoft, or others. In some embodiments, a computing device  executes a hypervisor  that creates a virtual machine platform on which guest operating systems may execute. In these example embodiments, the computing device  can be referred to as a host server. An example of such a computing device is the XEN SERVER provided by Citrix Systems, Inc., of Fort Lauderdale, Fla.","In some embodiments, the hypervisor  can create a virtual machine A-B (generally ) in which an operating system  executes. In one of these embodiments, for example, the hypervisor  loads a virtual machine image to create a virtual machine . In another of these embodiments, the hypervisor  executes an operating system  within the virtual machine . In still others of these embodiments, the virtual machine  may execute an operating system .","In some embodiments, the hypervisor  controls the execution of at least one virtual machine . In further embodiments, the hypervisor  presents at least one virtual machine  with an abstraction of at least one hardware resource provided by the computing device . The abstraction can further be referred to as a virtualization or virtual view of the hardware, memory processor and other system resources available on the computing device . Hardware or hardware resources, in some embodiments, can be any hardware resource available within the hardware layer . In some embodiments, the hypervisor  controls the manner in which virtual machines  access the physical processors  available in the computing device . Controlling access to the physical processors  can include determining whether a virtual machine  should have access to a processor , and how physical processor capabilities are presented to the virtual machine .","In some embodiments, the computing device  can host or execute one or more virtual machines . A virtual machine  can be called a domain, a guest and\/or a DOMAIN U. A virtual machine  may include a set of executable instructions that, when executed by a processor , may imitate the operation of a physical computer such that the virtual machine  can execute programs and processes much like a physical computing device. While  illustrates an embodiment where a computing device  hosts three virtual machines , in other embodiments the computing device  can host any number of virtual machines . The hypervisor , in some embodiments, provides each virtual machine  with a unique virtual view of the physical hardware, memory, processor and other system resources available to that virtual machine . In some embodiments, the unique virtual view can be based on any of the following: virtual machine permissions; application of a policy engine to one or more virtual machine identifiers; the user accessing a virtual machine; the applications executing on a virtual machine; networks accessed by a virtual machine; or any other similar criteria. The hypervisor , in some embodiments, provides each virtual machine  with a substantially similar virtual view of the physical hardware, memory, processor and other system resources available to the virtual machines .","Each virtual machine  may include a virtual disk A-C (generally ) and a virtual processor A-C (generally .) The virtual disk , in some embodiments, is a virtualized view of one or more physical disks  of the computing device , or a portion of one or more physical disks  of the computing device . The virtualized view of the physical disks  can be generated, provided and managed by the hypervisor . In some embodiments, the hypervisor  provides each virtual machine  with a unique view of the physical disks . Thus, in these example embodiments, the virtual disk  included in each virtual machine  can be unique when compared with the other virtual disks .","A virtual processor  may be a virtualized view of one or more physical processors  of the computing device . In some embodiments, the virtualized view of the physical processors  can be generated, provided and managed by the hypervisor . In some embodiments, the virtual processor  has substantially all of the same characteristics of at least one physical processor . In some embodiments, the virtual processor  provides a modified view of the physical processors  such that at least some of the characteristics of the virtual processor  are different than the characteristics of the corresponding physical processor .","A control program  may execute at least one application for managing and configuring the guest operating systems executing on the virtual machines  and in some embodiments the computing device . In some embodiments, the control program  can be called a control operating system, a control domain, domain  or dom . The control program , in some embodiments, can be DOMAIN o or DOM of the XEN hypervisor. The control program  can execute an administrative application or program that can further display a user interface which administrators can use to access the functionality of each virtual machine  and\/or to manage the virtual machines . In some embodiments, the user interface generated by the administrative program can be used to terminate the execution of virtual machines , allocate resources to virtual machines , assign permissions to virtual machines , or manage security credentials associated with virtual machines . The control program , in some embodiments, can start new virtual machines  or terminate execution of executing virtual machines . In some embodiments, the control program  can directly access hardware and\/or resources within the hardware layer . In still another embodiment, the control program  can interface with programs and applications executing on the computing device  and outside of the context of a virtual machine . Similarly, the control program  can interface with programs and applications executing within the context of a virtual machine .","In some embodiments, the hypervisor  can execute the control program  within a virtual machine . The hypervisor  can create and start the virtual machine . In embodiments where the hypervisor  executes the control program  within a virtual machine , that virtual machine  can be referred to as the control virtual machine . In some embodiments, the control program  executes within a virtual machine  that is authorized to directly access physical resources on the computing device .","In some embodiments, a control program  on a first computing device  may exchange data with a control program B on a second different computing device . In these embodiments, the first computing device A may be located physically remote from the second computing device B. The control programs A-B may exchange data via a communication link between a hypervisor  executing on the first computing device  and a hypervisor  executing on the second computing device . Through this communication link, the two computing devices  may be able to exchange data regarding processors and other physical resources available in a pool of resources. Further, through this connection between the two hypervisors , the hypervisors  may be able to manage a pool of resources, e.g. the resources available on the first computing device  and the second computing device , distributed across one or more of the computing devices . The hypervisors  can further virtualize these resources and make them available to virtual machines  executing on the computing devices . In another instance of this embodiment, a single hypervisor  can manage and control virtual machines  executing on both computing devices .","In some embodiments, the control program  interacts with one or more guest operating systems A-B (generally .) The control program  can communicate with the guest operating systems  through a hypervisor . Through the hypervisor , the guest operating system  can request access to physical disks , physical processors , memory , physical devices  and any other component in the hardware layer . In some embodiments, the guest operating systems  can communicate with the control program  via a communication channel established by the hypervisor , such as, for example, via a plurality of shared memory pages made available by the hypervisor .","In some embodiments, the control program  includes a network back-end driver for communicating directly with networking hardware provided by the computing device . In some of these embodiments, the network back-end driver processes at least one virtual machine request from at least one guest operating system . In further embodiments, the control program  includes a block back-end driver for communicating with a storage element on the computing device . In some of these embodiments, the block back-end driver reads and writes data from the storage element based upon at least one request received from a guest operating system .","In some embodiments, the control program  includes a tools stack . In some embodiments, a tools stack  provides functionality for interacting with the hypervisor , communicating with other control programs  (for example, on a second computing device B), or managing virtual machines  on the computing device . In some embodiments, the tools stack  includes customized applications for providing improved management functionality to an administrator of a virtual machine farm. In some embodiments, at least one of the tools stack  and the control program  include a management API that provides an interface for remotely configuring and controlling virtual machines  running on a computing device . In some embodiments, the control program  communicates with the hypervisor  through the tools stack .","In some embodiments, the hypervisor  executes a guest operating system  within a virtual machine  created by the hypervisor . In some embodiments, the guest operating system  provides a user of the computing device  with access to resources within a computing environment. In some embodiments, a resource may include a program, an application, a document, a file, a plurality of applications, a plurality of files, an executable program file, a desktop environment, a computing environment, and\/or other resource made available to a user of the computing device . In yet further embodiments, the resource may be delivered to the computing device  via a plurality of access methods including, but not limited to, conventional installation directly on the computing device , delivery to the computing device  via a method for application streaming, delivery to the computing device  of output data generated by an execution of the resource on a second computing device \u2032 and communicated to the computing device  via a presentation layer protocol, delivery to the computing device  of output data generated by an execution of the resource via a virtual machine executing on a second computing device \u2032, or execution from a removable storage device connected to the computing device , such as a USB device, or via a virtual machine executing on the computing device  and generating output data. In some embodiments, the computing device  transmits output data generated by the execution of the resource to another computing device \u2032.","In some embodiments, the guest operating system , in conjunction with the virtual machine on which it executes, forms a fully-virtualized virtual machine that is not aware that it is a virtual machine; such a machine may be referred to as a \u201cDomain U HVM (Hardware Virtual Machine) virtual machine\u201d. In some embodiments, a fully-virtualized machine includes software emulating a Basic Input\/Output System (BIOS) in order to execute an operating system within the fully-virtualized machine. In still further embodiments, a fully-virtualized machine may include a driver that provides functionality by communicating with the hypervisor . In such example embodiments, the driver may be typically aware that it executes within a virtualized environment.","In some embodiments, the guest operating system , in conjunction with the virtual machine on which it executes, forms a para-virtualized virtual machine, which is aware that it is a virtual machine; such a machine may be referred to as a \u201cDomain U PV virtual machine\u201d. In another embodiment, a para-virtualized machine includes additional drivers that a fully-virtualized machine does not include. In some embodiments, the para-virtualized machine includes the network back-end driver and the block back-end driver included in a control program , as described above.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 2B","FIG. 2A","FIG. 2B"],"b":["1","202","201","210","232","202","232","232","214"]},"The example virtualization environment of  includes a Type  hypervisor . Type  hypervisors , in some embodiments, execute on \u201cbare metal,\u201d such that the hypervisor  has direct access to all applications and processes executing on the computing device , all resources on the computing device  and all hardware on the computing device  or communicating with the computing device . While a Type  hypervisor  may access system resources through a host operating system , a Type  hypervisor  may directly access all system resources. The Type  hypervisor  may be able to execute directly on one or more physical processors of the computing device , and can include program data stored in the physical memory .","In a virtualization environment that employs a Type  hypervisor  configuration, the host operating system may be executed by one or more virtual machines . Thus, a user of the computing device  may be able to designate one or more virtual machines  as the user's personal machine. This virtual machine can imitate the host operating system by allowing a user to interact with the computing device  in substantially the same manner that the user would interact with the computing device  via a host operating system .","Virtual machines  can be unsecure virtual machines B and secure virtual machine C. While  illustrates a secure and unsecure virtual machine, sometimes they can be referred to as privileged and unprivileged virtual machines. In some embodiments, a virtual machine's security can be determined based on a comparison of the virtual machine to other virtual machines executing within the same virtualization environment. For example, were a first virtual machine to have access to a pool of resources, and a second virtual machine not to have access to the same pool of resources; the second virtual machine could be considered an unsecure virtual machine B while the first virtual machine could be considered a secure virtual machine A. In some embodiments, the ability of a virtual machine  to access one or more system resources may be configured using a configuration interface generated by either the control program  or the hypervisor . In some embodiments, the level of access afforded to a virtual machine  can be the result of a review of any of the following sets of criteria: the user accessing the virtual machine; one or more applications executing on the virtual machine; the virtual machine identifier; a risk level assigned to the virtual machine based on one or more factors; or any other similar criteria.","In some embodiments, unsecure virtual machines B may be prevented from accessing resources, hardware, memory locations, and programs that secure virtual machines A may access. For example, a secure virtual machine C may be able to access one or more company resources, while the unsecure virtual machine B cannot access any company resources.","As will be discussed in connection with various example embodiments, a computing device, such as one of the client devices , may be configured to selectively allow or block attempts to make copies of contents displayed by applications executing on the computing device, depending upon whether the content is being displayed by a streamed or non-streamed software application that is executing on the computing device, and further based on predetermined policy. Attempts to make copies may include, for example, invoking a copy command, a cut command, a paste command, a print screen command, a snip tool command, and\/or any other command or tool configured to obtain content from a source (such as a displayed window or displayed screen portion) and\/or to generate a copy of the obtained content such as at a location different than the source from which the content was obtained. As will be seen, where the source is a streamed application, the computing device may be configured to selectively allow or block attempts to make copies based on predetermined policy.","A streamed application, as used herein, refers to an application that may be provided by a first computing device (e.g., a server such as one or more of the server(s) ) and partially or fully sent to a local client device (e.g., one or more client device(s) ) for local execution at the client device. This is distinguishable from a hosted application, in which the application is executing on the server rather than the client device (even though thin-client-based interaction with the application may be performed remotely by the client device). A streamed application may be packaged in such a way that the streamed application can be locally delivered to and executed at the client device within a virtualization environment such as a \u201csandbox.\u201d The virtualization environment may provide a set of resources for the streamed application to use, such as described by way of example with reference to . The virtualization environment may be implemented by a locally-executed client application that may also be provided by the server or from another location. Citrix Systems Inc. of Ft. Lauderdale, Fla., for example, provides a XenApp\u00ae on-demand application delivery product in which client software called Citrix Receiver\u00ae provides the virtualization environment at the client device.","Streamed applications can be a useful way to allow a client device to implement the functionality of the application without necessarily locally storing the entire application. For instance, in some cases, only a portion of a streamed application might be initially downloaded from the server to the client device, that initial portion typically providing the most commonly used functionality. For example, where the streamed application is a word processor application, the initial portion may provide functionality for basic text entry, editing, and saving functions, but not necessary functionality for advanced functions such as equation editing or advanced publishing capabilities. If such additional functions are requested by the user of the client device, those additional functions might then be requested from the server in real time and downloaded to the client device.","In many cases, for a given application such as a word processor application or a spreadsheet application, the essential application may be nearly the same to the user regardless of whether or not the application is a streamed application. Therefore, it may be difficult for the client device to know whether a given application executing on the client device is a streamed application or a non-streamed application. However, there may be one or more detectable differences between streamed and non-streamed applications. For instance, the client-side virtualization environment in which a streamed application executes may include or invoke one or more specialized components to interact with the operating system. Also, where the streamed applications are pre-packaged at the server side in preparation for streaming, the packaging process itself may involve modifications to the applications themselves, such as adding, modifying, and\/or removing components of the application. Therefore it may be expected that one or more components would be executing or otherwise referred to by a streamed application that would not normally be executing or otherwise referred to by a non-streamed application. By way of example, in the case of the XenApp\u00ae on-demand application delivery product provided by Citrix Systems, Inc., a client-installed library named radehook.dll is used by streamed applications, but typically not by non-streamed applications. Therefore, one way that the client computing device may determine whether a currently-running application is a streamed application is to determine whether the radehook.dll (or any other appropriate component used by a streamed application but not a non-streamed application) is executing or otherwise active (e.g., referenced by the streamed application).","Other ways to detect whether a currently-running application is a streamed application may also be implemented. For example, a global list of streamed applications may be maintained at the client device, such as by a kernel device driver. The process identifier of a streamed application may be maintained in the device driver (e.g., in the case of Citrix XenAPP\u00ae on-demand application delivery, this might be in the device driver ctxpidmon.sys). Thus, to determine whether an application is streamed or not, the application may be queried, such as by hook software as described further below, for the current process identifier for that application. Then, the kernel device driver may be queried (again, by the hook) to determine whether he current process identifier identified by the application is one that is also being tracked by the kernel device driver. If there is a match, then the application would be considered a streamed application. If not, then the application would be considered a non-streamed application.","Now that the client device can detect whether an application is a streamed application, the client device may be able to use this information to control various functions at the client device. For example, the client device may be able to control whether a copy can be made of content displayed by a streamed application. Depending upon the operating system, there may be various ways that a user or a piece of software can attempt to make a copy of such content. Most operating systems provide basic cut, copy, and paste tools, as well as screen capture tools. For example, various versions of Microsoft Windows\u00ae operating systems provide, in addition to cut, copy, and paste functions, a Snipping Tool that allows a user to capture a copy of an object or other user-selected portion of the screen. Apple Computer also provides, in various versions of its computer and mobile operating systems (e.g., Tiger, Lion, OS 4, OS 5) cut, copy, and paste functions in addition to various other similar tools. In many computers, a Print Screen (or other similarly named) button or keyboard-shortcut function may be provided to allow a user to easily invoke a screen capture function.","Regardless of the particular content copying tool used, it may be desirable to control such copying of content (and\/or the use of the copied content) based on whether the application from which the content is copied is a streamed application and\/or based on other policies. For example, this may be accomplished by providing a piece of software, referred to herein as a software hook, that may execute in the background looking for key events indicating an attempt to copy, paste, and\/or otherwise making a copy (or utilizing that copy) of content displayed by an application. The software hook may do this by, for instance, managing the appropriate application programming interfaces (APIs) for getting and\/or setting clipboard data. The software hook may be implemented by, for instance, the virtualization environment running locally on the client device. Various examples of how such content copying control might be performed are discussed next with regard to .",{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 3","b":["102","301","124"]},"Once the cut or copy command is detected, at step , the software hook may determine whether the cut or copy command is to cut or copy content displayed by a streamed application. As previously discussed, this determination may be made based on any of a variety of factors. For instance, as shown by way of example in , step  may involve sub-steps , , and . At step , the software hook may determine whether an expected software or data module (e.g., the radehook.dll library, in the case of Citrix Receiver\u00ae streamed applications) associated with streamed applications is being used or is otherwise active. If so, then at step , the software hook determines that the application is in fact a streamed application. If not, then at step , the software hook determines that the application is not a streamed application. Of course,  is merely an example, and the software hook may perform step  to determine whether the application is a streamed application in any way desired.","Another example of how the software hook may determine whether an application is streamed or non-streamed is shown in the flow chart of . In this example, at step , the software hook may query the application to obtain the current process identifier associated with that application. Then, at step , the software hook may query the kernel device driver to determine whether the current process identifier identified by the application is one that is also being tracked by the kernel device driver. If at step  it is determined by the software hook that there is a match, then the application would be considered a streamed application at step . If not, then the application would be considered a non-streamed application at step . Again,  is merely an example, and the software hook may perform step  to determine whether the application is a streamed application in any way desired.","Returning to , if the application is not determined to be a streamed application, then the process may move to step , at which point a global variable (e.g., a flag) may be set to a value indicating that the content being cut or copied is sourced from a non-streamed application. For example, the value of the global variable representing this state may be the value zero. The process may then move to step , in which the software hook may return control of the attempted copy or cut to the operating system, so that the content may be copied or cut and placed on the clipboard or other storage region in the usual manner. As will be described later, the global variable may be later used during an attempted paste operation to determine whether the content in the clipboard is allowed to be pasted in a particular context.","If the application is determined to be a streamed application, then the process may move to step , in which the software hook may determine whether a pre-existing policy allows for the content to be cut or copied. The policy may include one or more rules indicating whether the content may be cut or copied depending upon, e.g., which streamed application is providing the source content to be cut or copied, the identity of the user currently attempting the cutting or copying (or currently logged in to the client device), the identity of the physical computer acting as the client device, the time of day, the date, the location of the client device, and\/or the type of source content (e.g., text, graphics, etc.).","For instance, according to the policy, a first user may be allowed to copy content from a streamed application, but a second user may not. Or, the policy may allow content to be copied from a streamed version of Microsoft Word\u00ae, but not from a streamed version of the Microsoft PowerPoint\u00ae application. The policy may include one or more rules that may be combined, such as with Boolean combiners (e.g., the policy might include the following: content may be copied or cut IF the user is \u201cuser 1\u201d AND if the streamed application is NOT the Microsoft PowerPoint\u00ae application). The policy may be stored as data locally at the client device and\/or at the server.","If policy allows the source content to be cut or copied, then the process may move to step , at which point the global variable may be set to a value indicating that the content being cut or copied is sourced from a streamed application. For example, the value of the global variable representing this state may be the value one. Of course, such values may be reversed, and in any event these values are merely examples. Where multiple applications are streamed simultaneously to (executing simultaneously on) the same client device, the hook may be loaded into each of the applications, and each of the instances of the hook may be able to share and update the value of the global variable. Thus, when a copy or cut operation from a source application is successfully made, the global variable may be updated in steps  and  in accordance with whether that source application is a streamed application.","The process may then move to step , to allow the operating system to complete the cut or copy operation and place a copy of the source content into the clipboard or other storage region. If policy does not allow the source content to be cut or copied, then the process may move from step  to step , in which the software hook may block the operating system from completing the cut or copy operation. For instance, the software hook may return control to the operating system in such a manner that the operating system has no knowledge that a cut or copy operation was requested (e.g., by setting the value of some operating system or application variable).",{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 4","b":"401"},"Once the paste command is detected, at step , the software hook may determine whether the content stored in the clipboard or other storage region was sourced from a streamed application. In the present example, this may be accomplished by examining the value of the global variable that may have been previously set in step  or step . If the value of the global variable application indicates that the content was not sourced from a streamed application, then the process may move to step , at which point the software hook may return control of the attempted paste to the operating system, so that the content may be pasted in the usual manner.","If the value of the global variable application indicates that the content was sourced from a streamed application, then the process may move to step , in which the software hook may determine whether the pre-existing policy allows for the content to be pasted. Again, the policy may include one or more rules indicating whether the content may be cut or copied depending upon, e.g., which streamed application is providing the source content to be pasted, the identity of the user currently attempting the pasting (or currently logged in to the client device), the identity of the physical computer acting as the client device, the time of day, the date, the location of the client device, and\/or the type of source content (e.g., text, graphics, etc.).","For instance, according to the policy, a first user may be allowed to paste content from a streamed application, but a second user may not. Or, the policy may allow content to be pasted from a streamed version of Microsoft Word\u00ae, but not from a streamed version of the Microsoft PowerPoint\u00ae application. For instance, the policy might include the following: content may be pasted IF the user is \u201cuser 1\u201d AND if the streamed application is NOT the Microsoft PowerPoint\u00ae application.","If policy allows the content in the clipboard or other storage region to be pasted, then the process may move to step , so as to allow the operating system to complete the paste operation in the usual manner.","If policy does not allow the content to be pasted, then the process may move from step  to step , in which the software hook may block the operating system from completing the paste operation. For instance, the software hook may return control to the operating system in such a manner that the operating system has no knowledge that a paste operation was requested (e.g., by setting the value of some operating system or application variable).",{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 5","b":"501"},"Once the snipping tool command is detected, at step , the software hook may determine whether the snipping tool command is to copy content displayed by a streamed application. As previously discussed, this determination may be made based on any of a variety of factors. For instance, step  may be performed as shown in  or .","If the application is not determined at step  to be a streamed application, then the process may move to step , at which point the global variable may be set to the value indicating that the content being copied is sourced from a non-streamed application (to allow the paste intercept of routine of, e.g., , to determine whether the copied content was sourced from a streamed application). The process may then move to step , in which the software hook may return control of the attempted snipping tool command to the operating system, so that the content may be copied and placed on the clipboard or other storage region in the usual manner, in accordance with the operation of the snipping tool.","If the application is determined at step  to be a streamed application, then the process may move to step , in which the software hook may determine whether the policy allows for the content to be copied by the snipping tool. Again, the policy may include one or more rules indicating whether the content may be copied by the snipping tool depending upon, e.g., which streamed application is providing the source content to be copied, the identity of the user currently attempting the copying (or currently logged in to the client device), the identity of the physical computer acting as the client device, the time of day, the date, the location of the client device, and\/or the type of source content (e.g., text, graphics, etc.).","For instance, according to the policy, a first user may be allowed to use the snipping tool to copy content from a streamed application, but a second user may not. Or, the policy may allow content to be copied by the snipping tool from a streamed version of Microsoft Word\u00ae, but not from a streamed version of the Microsoft PowerPoint\u00ae application. The policy may include one or more rules that may be combined, such as with Boolean combiners (e.g., the policy might include the following: content may be copied by the snipping tool IF the user is \u201cuser 1\u201d AND if the streamed application is NOT the Microsoft PowerPoint\u00ae application).","If policy allows the source content to be copied using the snipping tool, then the process may move to step , at which point the global variable may be set to the value indicating that the content being copied is sourced from a streamed application. As previously mentioned, where multiple applications are streamed simultaneously to (executing simultaneously on) the same client device, the hook may be loaded into each of the applications, and each of the instances of the hook may be able to share and update the value of the global variable. Thus, when a snipping tool operation from a source application is successfully performed, the global variable may be updated in steps  and  in accordance with whether that source application is a streamed application.","The process may then move to step , to allow the operating system to complete the snipping tool operation. If policy does not allow the source content to be copied by the snipping tool, then the process may move from step  to step , in which the software hook may perform some function designed to prevent the snipping tool from copying the content. For example, in versions of Microsoft Windows\u00ae operating system, the snipping tool is already configured to check whether the content from the source application window is protected by digital management rights (DRM). Normally, the snipping tool requests the DRM status from the source application, and traditionally the source application returns information indicating whether the content being displayed is DRM protected. In this example, the software hook may leverage the existing DRM-checking functionality by intercepting the DRM status request from the snipping tool and returning a response indicating that the source content is DRM protected (regardless of whether the content is actually DRM protected). Thus, the software hook may pretend to be the application to which the DRM status request was directed. This may be done by, e.g., hooking the DRMIsWindowProtected function of the MSDRM library of the Microsoft Windows\u00ae operating system.","In response to the software hook indicating that the content is DRM-protected, the snipping tool would automatically refuse to copy the requested source content. In the case of the application being a non-streamed application, at step , the software hook may allow the application (streamed or non-streamed) to respond to the DRM status request on its own, in accordance with whether the source content is actually DRM-protected.",{"@attributes":{"id":"p-0118","num":"0117"},"figref":"FIG. 6","b":"601"},"Once the print screen command is detected, at step , the software hook may determine whether the display includes content displayed by a streamed application. As previously discussed, this determination may be made based on any of a variety of factors. For instance, step  may be performed as shown in  or .","If it is determined at step  that the screen does not include content from a streamed application, then the process may move to step , in which the software hook may return control of the attempted print screen command to the operating system, so that the screen may be printed in the usual manner.","If it is determined at step  that the screen includes content from a streamed application, then the process may move to step , in which the software hook may determine whether the policy allows for the content to be printed using the print screen command. Again, the policy may include one or more rules indicating whether the content may be printed using the print screen command depending upon, e.g., which streamed application is providing the source content to be printed, the identity of the user currently attempting the print screen command (or currently logged in to the client device), the identity of the physical computer acting as the client device, the time of day, the date, the location of the client device, and\/or the type of source content (e.g., text, graphics, etc.).","For instance, according to the policy, a first user may be allowed to use the print screen command to print a screen containing content from a streamed application, but a second user may not. Or, the policy may allow use of the print screen command to print a screen containing content from a streamed version of Microsoft Word\u00ae, but not from a streamed version of the Microsoft PowerPoint\u00ae application. The policy may include one or more rules that may be combined, such as with Boolean combiners (e.g., the policy might include the following: the screen may be printed using the print screen command IF the user is \u201cuser 1\u201d AND if the screen does NOT contain content from a streamed Microsoft PowerPoint\u00ae application).","If policy allows the source content to be printed using the print screen command, then the process may move to step , to allow the operating system to complete the print screen operation.","If policy does not allow the source content to be printed using the print screen command, then the process may move from step  to step , in which the software hook may prevent the print screen command from being acted upon. For instance, the software hook may return control to the operating system in such a manner that the operating system has no knowledge that a print screen operation was requested (e.g., by setting the value of some operating system or application variable).","While various example embodiments have been illustrated and described herein, it is not intended that these embodiments illustrate and describe all possible aspects. Rather, the words used in the specification are words of description rather than limitation, and it is understood that various changes may be made without departing from the spirit and scope of the present disclosure.","Moreover, variations on the disclosed embodiments are envisioned. For example, while operating systems such as the Microsoft Windows\u00ae family of operating systems have been referred to in various embodiments, these embodiments may also be used in conjunction with other types of operating systems. Also, while various examples of policy rules have been disclosed, other policy rules are possible. For instance, a cut\/copy\/paste\/snip\/print-screen policy may additionally or alternatively be provided for determining whether these operations may be successfully completed in connection with content from non-streamed application. Moreover, any of the policy rules, such as those listed in connection with the various disclosed embodiments, may be combined into a single policy as desired."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The following figures depict certain illustrative embodiments of the methods and systems described herein, in which like reference numerals refer to like elements. These depicted embodiments are to be understood as illustrative of the disclosed methods and systems and not as limiting in any way.","The following figures depict certain embodiments, in which like reference numerals refer to like elements. These depicted embodiments are to be understood as illustrative of the disclosure and not as limiting in any way.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 1B","FIG. 1C"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
