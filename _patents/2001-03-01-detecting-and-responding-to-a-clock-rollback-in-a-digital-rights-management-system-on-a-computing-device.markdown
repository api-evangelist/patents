---
title: Detecting and responding to a clock rollback in a digital rights management system on a computing device
abstract: A rollback of a clock on a computing device is detected and responded to. A current time from the clock and a stored time from a secure store are obtained and compared to determine whether the obtained current time is earlier than the obtained stored time. If so, a predetermined course of action is taken based on the determination.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07134144&OS=07134144&RS=07134144
owner: Microsoft Corporation
number: 07134144
owner_city: Redmond
owner_country: US
publication_date: 20010301
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Appendix","EXAMPLES"],"p":["This application is related to U.S. patent application Ser. No. 09\/290,363, filed Apr. 12, 1999 and entitled \u201cENFORCEMENT ARCHITECTURE AND METHOD FOR DIGITAL RIGHTS MANAGEMENT\u201d, and U.S. Provisional Application No. 60\/126,614, filed Mar. 27, 1999 and entitled \u201cENFORCEMENT ARCHITECTURE AND METHOD FOR DIGITAL RIGHTS MANAGEMENT\u201d, each of which is hereby incorporated by reference in its entirety.","This application is related to and is filed concurrently with U.S. patent application Ser. No. 09\/797,017, entitled \u201cSPECIFYING RIGHTS IN A DIGITAL RIGHTS LICENSE ACCORDING TO EVENTS\u201d and hereby incorporated by reference in its entirety.","The present invention relates to an architecture for enforcing rights in digital content. More specifically, the present invention relates to such an enforcement architecture that allows access to encrypted digital content only in accordance with parameters specified by license rights acquired by a user of the digital content. Even more specifically, the present invention relates to an event detection mechanism for detecting a change in a system value counter to that which is expected, such as for example a rolled-back clock, where the changing system value is referred to in the course of evaluating license rights.","Digital rights management and enforcement is highly desirable in connection with digital content such as digital audio, digital video, digital text, digital data, digital multimedia, etc., where such digital content is to be distributed to users. Typical modes of distribution include tangible devices such as a magnetic (floppy) disk, a magnetic tape, an optical (compact) disk (CD), etc., and intangible media such as an electronic bulletin board, an electronic network, the Internet, etc. Upon being received by the user, such user renders or \u2018plays\u2019 the digital content with the aid of an appropriate rendering device such as a media player on a personal computer or the like.","Typically, a content owner or rights-owner, such as an author, a publisher, a broadcaster, etc. (hereinafter \u201ccontent owner\u201d), wishes to distribute such digital content to a user or recipient in exchange for a license fee or some other consideration. Such content owner, given the choice, would likely wish to restrict what the user can do with such distributed digital content. For example, the content owner would like to restrict the user from copying and re-distributing such content to a second user, at least in a manner that denies the content owner a license fee from such second user.","In addition, the content owner may wish to provide the user with the flexibility to purchase different types of use licenses at different license fees, while at the same time holding the user to the terms of whatever type of license is in fact purchased. For example, the content owner may wish to allow distributed digital content to be played only a limited number of times, only for a certain total time, only on a certain type of machine, only on a certain type of media player, only by a certain type of user, etc.","However, after distribution has occurred, such content owner has very little if any control over the digital content. This is especially problematic in view of the fact that practically every new or recent personal computer includes the software and hardware necessary to make an exact digital copy of such digital content, and to download such exact digital copy to a write-able magnetic or optical disk, or to send such exact digital copy over a network such as the Internet to any destination.","Of course, as part of the legitimate transaction where the license fee was obtained, the content owner may require the user of the digital content to promise not to re-distribute such digital content. However, such a promise is easily made and easily broken. A content owner may attempt to prevent such re-distribution through any of several known security devices, usually involving encryption and decryption. However, there is likely very little that prevents a mildly determined user from decrypting encrypted digital content, saving such digital content in an un-encrypted form, and then re-distributing same.","A need exists, then, for providing an enforcement architecture and method that allows the controlled rendering or playing of arbitrary forms of digital content, where such control is flexible and definable by the content owner of such digital content. A need also exists for providing a controlled rendering environment on a computing device such as a personal computer, where the rendering environment includes at least a portion of such enforcement architecture. Such controlled rendering environment allows that the digital content will only be rendered as specified by the content owner, even though the digital content is to be rendered on a computing device which is not under the control of the content owner.","Further, a need exists for a trusted component running on the computing device, where the trusted component enforces the rights of the content owner on such computing device in connection with a piece of digital content, even against attempts by the user of such computing device to access such digital content in ways not permitted by the content owner. As but one example, such a trusted software component prevents a user of the computing device from making a copy of such digital content, except as otherwise allowed for by the content owner thereof.","The aforementioned needs are satisfied at least in part by an enforcement architecture and method for digital rights management, where the architecture and method enforce rights in protected (secure) digital content available on a medium such as the Internet, an optical disk, etc. For purposes of making content available, the architecture includes a content server from which the digital content is accessible over the Internet or the like in an encrypted form. The content server may also supply the encrypted digital content for recording on an optical disk or the like, wherein the encrypted digital content may be distributed on the optical disk itself. At the content server, the digital content is encrypted using an encryption key, and public\/private key techniques are employed to bind the digital content with a digital license at the user's computing device or client machine.","When a user attempts to render the digital content on a computing device, the rendering application invokes a Digital Rights Management (DRM) system on such user's computing device. If the user is attempting to render the digital content for the first time, the DRM system either directs the user to a license server to obtain a license to render such digital content in the manner sought, or transparently obtains such license from such license server without any action necessary on the part of the user. The license includes:","a decryption key (KD) that decrypts the encrypted digital content;","a description of the rights (play, copy, etc.) conferred by the license and related conditions (begin date, expiration date, number of plays, etc.), where such description is in a digitally readable form; and","a digital signature that ensures the integrity of the license.","The user should not be able to decrypt and render the encrypted digital content without obtaining such a license from the license server. The obtained license is stored in a license store in the user's computing device.","Importantly, the license server only issues a license to a DRM system that is \u2018trusted\u2019 (i.e., that can authenticate itself). To implement \u2018trust\u2019, the DRM system is equipped with a \u2018black box\u2019 that performs decryption and encryption functions for such DRM system. The black box includes a public\/private key pair, a version number and a unique signature, all as provided by an approved certifying authority. The public key is made available to the license server for purposes of encrypting portions of the issued license, thereby binding such license to such black box. The private key is available to the black box only, and not to the user or anyone else, for purposes of decrypting information encrypted with the corresponding public key. The DRM system is initially provided with a black box with a public\/private key pair, and the user is prompted to download from a black box server an updated secure black box when the user first requests a license. The black box server provides the updated black box, along with a unique public\/private key pair. Such updated black box is written in unique executable code that will run only on the user's computing device, and is re-updated on a regular basis.","When a user requests a license, the client machine sends the black box public key, version number, and signature to the license server, and such license server issues a license only if the version number is current and the signature is valid. A license request also includes an identification of the digital content for which a license is requested and a key ID that identifies the decryption key associated with the requested digital content. The license server uses the black box public key to encrypt the decryption key, and the decryption key to encrypt the license terms, then downloads the encrypted decryption key and encrypted license terms to the user's computing device along with a license signature.","Once the downloaded license has been stored in the DRM system license store, the user can render the digital content according to the rights conferred by the license and specified in the license terms. When a request is made to render the digital content, the black box is caused to decrypt the decryption key and license terms, and a DRM system license evaluator evaluates such license terms. The black box decrypts the encrypted digital content only if the license evaluation results in a decision that the requestor is allowed to play such content. The decrypted content is provided to the rendering application for rendering.","In the present invention, a rollback of a clock on a computing device is detected and responded to. A current time from the clock and a stored time from a secure store are obtained and compared to determine whether the obtained current time is earlier than the obtained stored time. If so, a predetermined course of action is taken based on the determination.","Referring to the drawings in details, wherein like numerals are used to indicate like elements throughout, there is shown in  an enforcement architecture  in accordance with one embodiment of the present invention. Overall, the enforcement architecture  allows an owner of digital content  to specify license rules that must be satisfied before such digital content  is allowed to be rendered on a user's computing device . Such license rules are embodied within a digital license  that the user\/user's computing device  (hereinafter, such terms are interchangeable unless circumstances require otherwise) must obtain from the content owner or an agent thereof. The digital content  is distributed in an encrypted form, and may be distributed freely and widely. Preferably, the decrypting key (KD) for decrypting the digital content  is included with the license .","Computer Environment",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 12"},"As shown in , an exemplary general purpose computing system includes a conventional personal computer  or the like, including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read-only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM .","The personal computer  may further include a hard disk drive  for reading from and writing to a hard disk (not shown), a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD-ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules and other data for the personal computer .","Although the exemplary environment described herein employs a hard disk, a removable magnetic disk , and a removable optical disk , it should be appreciated that other types of computer readable media which can store data that is accessible by a computer may also be used in the exemplary operating environment. Such other types of media include a magnetic cassette, a flash memory card, a digital video disk, a Bernoulli cartridge, a random access memory (RAM), a read-only memory (ROM), and the like.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules  and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite disk, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port, or universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , a personal computer typically includes other peripheral output devices (not shown), such as speakers and printers. The exemplary system of  also includes a host adapter , a Small Computer System Interface (SCSI) bus , and an external storage device  connected to the SCSI bus .","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Architecture","Referring again to , in one embodiment of the present invention, the architecture  includes an authoring tool , a content-key database , a content server , a license server , and a black box server , as well as the aforementioned user's computing device .","Architecture\u2014Authoring Tool ","The authoring tool  is employed by a content owner to package a piece of digital content  into a form that is amenable for use in connection with the architecture  of the present invention. In particular, the content owner provides the authoring tool  with the digital content , instructions and\/or rules that are to accompany the digital content , and instructions and\/or rules as to how the digital content  is to be packaged. The authoring tool  then produces a digital content package having the digital content  encrypted according to an encryption\/decryption key, and the instructions and\/or rules that accompany the digital content .","In one embodiment of the present invention, the authoring tool  is instructed to serially produce several different digital content  packages , each having the same digital content  encrypted according to a different encryption\/decryption key. As should be understood, having several different packages with the same digital content  may be useful for tracking the distribution of such packages \/content  (hereinafter simply \u201cdigital content \u201d, unless circumstances require otherwise). Such distribution tracking is not ordinarily necessary, but may be used by an investigative authority in cases where the digital content  has been illegally sold or broadcast.","In one embodiment of the present invention, the encryption\/decryption key that encrypts the digital content  is a symmetric key, in that the encryption key is also the decryption key (KD). As will be discussed below in more detail, such decryption key (KD) is delivered to a user's computing device  in a hidden form as part of a license  for such digital content . Preferably, each piece of digital content  is provided with a content ID (or each package is provided with a package ID), each decryption key (KD) has a key ID, and the authoring tool  causes the decryption key (KD), key ID, and content ID (or package ID) for each piece of digital content  (or each package ) to be stored in the content-key database . In addition, license data regarding the types of licenses  to be issued for the digital content  and the terms and conditions for each type of license  may be stored in the content-key database , or else in another database (not shown). Preferably, the license data can be modified by the content owner at a later time as circumstances and market conditions may require.","In use, the authoring tool  is supplied with information including, among other things:","the digital content  to be packaged;","the type and parameters of watermarking and\/or fingerprinting to be employed, if any;","the type and parameters of data compression to be employed, if any;","the type and parameters of encryption to be employed;","the type and parameters of serialization to be employed, if any; and","the instructions and\/or rules that are to accompany the digital content .","As is known, a watermark is a hidden, computer-readable signal that is added to the digital content  as an identifier. A fingerprint is a watermark that is different for each instance. As should be understood, an instance is a version of the digital content  that is unique. Multiple copies of any instance may be made, and any copy is of a particular instance. When a specific instance of digital content  is illegally sold or broadcast, an investigative authority can perhaps identify suspects according to the watermark\/fingerprint added to such digital content .","Data compression may be performed according to any appropriate compression algorithm without departing from the spirit and scope of the present invention. For example, the .mp3 or .wav compression algorithm may be employed. Of course, the digital content  may already be in a compressed state, in which case no additional compression is necessary.","The instructions and\/or rules that are to accompany the digital content  may include practically any appropriate instructions, rules, or other information without departing from the spirit and scope of the present invention. As will be discussed below, such accompanying instructions\/rules\/information are primarily employed by the user and the user's computing device  to obtain a license  to render the digital content . Accordingly, such accompanying instructions\/rules\/information may include an appropriately formatted license acquisition script or the like, as will be described in more detail below. In addition, or in the alternative, such accompanying instructions\/rules\/information may include \u2018preview\u2019 information designed to provide a user with a preview of the digital content .","With the supplied information, the authoring tool  then produces one or more packages corresponding to the digital content . Each package may then be stored on the content server  for distribution to the world.","In one embodiment of the present invention, and referring now to , the authoring tool  is a dynamic authoring tool  that receives input parameters which can be specified and operated on. Accordingly, such authoring tool  can rapidly produce multiple variations of package for multiple pieces of digital content . Preferably, the input parameters are embodied in the form of a dictionary , as shown, where the dictionary  includes such parameters as:","the name of the input file having the digital content ;","the type of encoding that is to take place","the encryption\/decryption key (KD) to be employed,","the accompanying instructions\/rules\/information (\u2018header information\u2019) to be packaged with the digital content  in the package ","the type of muxing that is to occur; and","the name of the output file to which the package based on the digital content  is to be written.","As should be understood, such dictionary  is easily and quickly modifiable by an operator of the authoring tool  (human or machine), and therefore the type of authoring performed by the authoring tool  is likewise easily and quickly modifiable in a dynamic manner. In one embodiment of the present invention, the authoring tool  includes an operator interface (not shown) displayable on a computer screen to a human operator. Accordingly, such operator may modify the dictionary  by way of the interface, and further may be appropriately aided and\/or restricted in modifying the dictionary  by way of the interface.","In the authoring tool , and as seen in , a source filter receives the name of the input file having the digital content  from the dictionary , and retrieves such digital content  from such input file and places the digital content  into a memory such as a RAM or the like. An encoding filter then performs encoding on the digital content  in the memory to transfer the file from the input format to the output format according to the type of encoding specified in the dictionary  (i.e., .wav to .asp, .mp3 to asp, etc.), and places the encoded digital content  in the memory . As shown, the digital content  to be packaged (music, e.g.) is received in a compressed format such as the .wav or .mp3 format, and is transformed into a format such as the .asp (active streaming protocol) format. Of course, other input and output formats may be employed without departing from the spirit and scope of the present invention.","Thereafter, an encryption filter encrypts the encoded digital content  in the memory according to the encryption\/decryption key (KD) specified in the dictionary , and places the encrypted digital content  in the memory . A header filter then adds the header information specified in the dictionary  to the encrypted digital content  in the memory ","As should be understood, depending on the situation, the package may include multiple streams of temporally aligned digital content  (one stream being shown in ), where such multiple streams are multiplexed (i.e., \u2018muxed\u2019). Accordingly, a mux filter performs muxing on the header information and encrypted digital content  in the memory according to the type of muxing specified in the dictionary , and places the result in the memory . A file writer filter then retrieves the result from the memory and writes such result to the output file specified in the dictionary  as the package ","It should be noted that in certain circumstances, the type of encoding to be performed will not normally change. Since the type of muxing typically is based on the type of encoding, it is likewise the case that the type of muxing will not normally change, either. If this is in fact the case, the dictionary  need not include parameters on the type of encoding and\/or the type of muxing. Instead, it is only necessary that the type of encoding be \u2018hardwired\u2019 into the encoding filter and\/or that the type of muxing be \u2018hardwired\u2019 into the mux filter. Of course, as circumstance require, the authoring tool  may not include all of the aforementioned filters, or may include other filters, and any included filter may be hardwired or may perform its function according to parameters specified in the dictionary , all without departing from the spirit and scope of the present invention.","Preferably, the authoring tool  is implemented on an appropriate computer, processor, or other computing machine by way of appropriate software. The structure and operation of such machine and such software should be apparent based on the disclosure herein and therefore do not require any detailed discussion in the present disclosure.","Architecture\u2014Content Server ","Referring again to , in one embodiment of the present invention, the content server  distributes or otherwise makes available for retrieval the packages produced by the authoring tool . Such packages may be distributed as requested by the content server  by way of any appropriate distribution channel without departing from the spirit and scope of the present invention. For example, such distribution channel may be the Internet or another network, an electronic bulletin board, electronic mail, or the like. In addition, the content server  may be employed to copy the packages onto magnetic or optical disks or other storage devices, and such storage devices may then be distributed.","It will be appreciated that the content server  distributes packages without regard to any trust or security issues. As discussed below, such issues are dealt with in connection with the license server  and the relationship between such license server  and the user's computing device . In one embodiment of the present invention, the content server  freely releases and distributes packages having digital content  to any distributee requesting same. However, the content server  may also release and distribute such packages in a restricted manner without departing from the spirit and scope of the present invention. For example, the content server  may first require payment of a pre-determined distribution fee prior to distribution, or may require that a distribute identify itself, or may indeed make a determination of whether distribution is to occur based on an identification of the distributee.","In addition, the content server  may be employed to perform inventory management by controlling the authoring tool  to generate a number of different packages in advance to meet an anticipated demand. For example, the server could generate 100 packages based on the same digital content , and serve each package 10 times. As supplies of packages dwindle to 20, for example, the content server  may then direct the authoring tool  to generate 80 additional packages , again for example.","Preferably, the content server  in the architecture  has a unique public\/private key pair (PU-CS, PR-CS) that is employed as part of the process of evaluating a license  and obtaining a decryption key (KD) for decrypting corresponding digital content , as will be explained in more detail below. As is known, a public\/private key pair is an asymmetric key, in that what is encrypted in one of the keys in the key pair can only be decrypted by the other of the keys in the key pair. In a public\/private key pair encryption system, the public key may be made known to the world, but the private key should always be held in confidence by the owner of such private key. Accordingly, if the content server  encrypts data with its private key (PR-CS), it can send the encrypted data out into the world with its public key (PU-CS) for decryption purposes. Correspondingly, if an external device wants to send data to the content server  so that only such content server  can decrypt such data, such external device must first obtain the public key of the content server  (PU-CS) and then must encrypt the data with such public key. Accordingly, the content server  (and only the content server ) can then employ its private key (PR-CS) to decrypt such encrypted data.","As with the authoring tool , the content server  is implemented on an appropriate computer, processor, or other computing machine by way of appropriate software. The structure and operation of such machine and such software should be apparent based on the disclosure herein and therefore do not require any detailed discussion in the present disclosure. Moreover, in one embodiment of the present invention, the authoring tool  and the content server  may reside on a single computer, processor, or other computing machine, each in a separate work space. It should be recognized, moreover, that the content server  may in certain circumstances include the authoring tool  and\/or perform the functions of the authoring tool , as discussed above.","Structure of Digital Content Package ","Referring now to , in one embodiment of the present invention, the digital content package as distributed by the content server  includes:","the digital content  encrypted with the encryption\/decryption key (KD), as was discussed above (i.e., (KD(CONTENT)));","the content ID (or package ID) of such digital content  (or package );","the key ID of the decryption key (KD);","license acquisition information, preferably in an un-encrypted form; and","the key KD encrypting the content server  public key (PU-CS), signed by the content server  private key (PR-CS) (i.e., (KD (PU-CS) S (PR-CS))).","With regard to (KD (PU-CS) S (PR-CS)), it is to be understood that such item is to be used in connection with validating the digital content  and\/or package , as will be explained below. Unlike a certificate with a digital signature (see below), the key (PU-CS) is not necessary to get at (KD (PU-CS)). Instead, the key (PU-CS) is obtained merely by applying the decryption key (KD). Once so obtained, such key (PU-CS) may be employed to test the validity of the signature (S (PR-CS)).","It should also be understood that for such package to be constructed by the authoring tool , such authoring tool  must already possess the license acquisition information and (KD (PU-CS) S (PR-CS)), presumably as header information supplied by the dictionary . Moreover, the authoring tool  and the content server  must presumably interact to construct (KD (PU-CS) S (PR-CS)). Such interaction may for example include the steps of:","the content server  sending (PU-CS) to the authoring tool ;","the authoring tool  encrypting (PU-CS) with (KD) to produce (KD (PU-CS));","the authoring tool  sending (KD (PU-CS)) to the content server ;","the content server  signing (KD (PU-CS)) with (PR-CS) to produce (KD (PU-CS) S (PR-CS)); and","the content server  sending (KD (PU-CS) S (PR-CS)) to the authoring tool .","Architecture\u2014License Server ","Referring again to , in one embodiment of the present invention, the license server  performs the functions of receiving a request for a license  from a user's computing device  in connection with a piece of digital content , determining whether the user's computing device  can be trusted to honor an issued license , negotiating such a license , constructing such license , and transmitting such license  to the user's computing device . Preferably, such transmitted license  includes the decryption key (KD) for decrypting the digital content . Such license server  and such functions will be explained in more detail below. Preferably, and like the content server , the license server  in the architecture  has a unique public\/private key pair (PU-LS, PR-LS) that is employed as part of the process of evaluating a license  and obtaining a decryption key (KD) for decrypting corresponding digital content , as will be explained in more detail below.","As with the authoring tool  and the content server , the license server  is implemented on an appropriate computer, processor, or other computing machine by way of appropriate software. The structure and operation of such machine and such software should be apparent based on the disclosure herein and therefore do not require any detailed discussion in the present disclosure. Moreover, in one embodiment of the present invention the authoring tool  and\/or the content server  may reside on a single computer, processor, or other computing machine together with the license server , each in a separate work space.","In one embodiment of the present invention, prior to issuance of a license , the license server  and the content server  enter into an agency agreement or the like, wherein the license server  in effect agrees to be the licensing authority for at least a portion of the digital content  distributed by the content server . As should be understood, one content server  may enter into an agency agreement or the like with several license servers , and\/or one license server  may enter into an agency agreement or the like with several content servers , all without departing from the spirit and scope of the present invention.","Preferably, the license server  can show to the world that it does in fact have the authority to issue a license  for digital content  distributed by the content server . To do so, it is preferable that the license server  send to the content server  the license server  public key (PU-LS), and that the content server  then send to the license server  a digital certificate containing PU-LS as the contents signed by the content server  private key (CERT (PU-LS) S (PR-CS)). As should be understood, the contents (PU-LS) in such certificate can only be accessed with the content server  public key (PU-CS). As should also be understood, in general, a digital signature of underlying data is an encrypted form of such data, and will not match such data when decrypted if such data has been adulterated or otherwise modified.","As a licensing authority in connection with a piece of digital content , and as part of the licensing function, the license server  must have access to the decryption key (KD) for such digital content . Accordingly, it is preferable that license server  have access to the content-key database  that has the decryption key (KD), key ID, and content ID (or package ID) for such digital content  (or package ).","Architecture\u2014Black Box Server ","Still referring to , in one embodiment of the present invention, the black box server  performs the functions of installing and\/or upgrading a new black box  in a user's computing device . As will be explained in more detail below, the black box  performs encryption and decryption functions for the user's computing device . As will also be explained in more detail below, the black box  is intended to be secure and protected from attack. Such security and protection is provided, at least in part, by upgrading the black box  to a new version as necessary by way of the black box server , as will be explained in more detail below.","As with the authoring tool , the content server , and the license server , the black box server  is implemented on an appropriate computer, processor, or other computing machine by way of appropriate software. The structure and operation of such machine and such software should be apparent based on the disclosure herein and therefore do not require any detailed discussion in the present disclosure. Moreover, in one embodiment of the present invention the license server , the authoring tool , and\/or the content server  may reside on a single computer, processor, or other computing machine together with the black box server , each in a separate work space. Note, though, that for security purposes, it may be wise to have the black box server  on a separate machine.","Architecture\u2014User's Computing Device ","Referring now to , in one embodiment of the present invention, the user's computing device  is a personal computer or the like, having elements including a keyboard, a mouse, a screen, a processor, RAM, ROM, a hard drive, a floppy drive, a CD player, and\/or the like. However, the user's computing device  may also be a dedicated viewing device such as a television or monitor, a dedicated audio device such as a stereo or other music player, a dedicated printer, or the like, among other things, all without departing from the spirit and scope of the present invention.","The content owner for a piece of digital content  must trust that the user's computing device  will abide by the rules specified by such content owner, i.e. that the digital content  will not be rendered unless the user obtains a license  that permits the rendering in the manner sought. Preferably, then, the user's computing device  must provide a trusted component or mechanism  that can satisfy to the content owner that such computing device  will not render the digital content  except according to the license rules embodied in the license  associated with the digital content  and obtained by the user.","Here, the trusted mechanism  is a Digital Rights Management (DRM) system  that is enabled when a user requests that a piece of digital content  be rendered, that determines whether the user has a license  to render the digital content  in the manner sought, that effectuates obtaining such a license  if necessary, that determines whether the user has the right to play the digital content  according to the license , and that decrypts the digital content  for rendering purposes if in fact the user has such right according to such license . The contents and function of the DRM system  on the user's computing device  and in connection with the architecture  are described below.","DRM System ","The DRM system  performs four main functions with the architecture  disclosed herein: (1) content acquisition, (2) license acquisition, (3) content rendering, and (4) black box  installation\/update. Preferably, any of the functions can be performed at any time, although it is recognized that some of the functions already require that digital content  be acquired.","DRM System \u2014Content Acquisition","Acquisition of digital content  by a user and\/or the user's computing device  is typically a relatively straight-forward matter and generally involves placing a file having encrypted digital content  on the user's computing device . Of course, to work with the architecture  and the DRM system  disclosed herein, it is necessary that the encrypted digital content  be in a form that is amenable to such architecture  and DRM system , such as the digital package as will be described below.","As should be understood, the digital content  may be obtained in any manner from a content server , either directly or indirectly, without departing from the spirit and scope of the present invention. For example, such digital content  may be downloaded from a network such as the Internet, located on an obtained optical or magnetic disk or the like, received as part of an E-mail message or the like, or downloaded from an electronic bulletin board or the like.","Such digital content , once obtained, is preferably stored in a manner such that the obtained digital content  is accessible by a rendering application  (to be described below) running on the computing device , and by the DRM system . For example, the digital content  may be placed as a file on a hard drive (not shown) of the user's computing device , or on a network server (not shown) accessible to the computing device . In the case where the digital content  is obtained on an optical or magnetic disk or the like, it may only be necessary that such disk be present in an appropriate drive (not shown) coupled to the user's computing device .","In the present invention, it is not envisioned that any special tools are necessary to acquire digital content , either from the content server  as a direct distribution source or from some intermediary as an indirect distribution source. That is, it is preferable that digital content  be as easily acquired as any other data file. However, the DRM system  and\/or the rendering application  may include an interface (not shown) designed to assist the user in obtaining digital content . For example, the interface may include a web browser especially designed to search for digital content , links to pre-defined Internet web sites that are known to be sources of digital content , and the like.","DRM System \u2014Content Rendering, Part 1","Referring now to , in one embodiment of the present invention, assuming the encrypted digital content  has been distributed to and received by a user and placed by the user on the computing device  in the form of a stored file, the user will attempt to render the digital content  by executing some variation on a render command (step ). For example, such render command may be embodied as a request to \u2018play\u2019 or \u2018open\u2019 the digital content . In some computing environments, such as for example the \u201cMICROSOFT WINDOWS\u201d operating system, distributed by MICROSOFT Corporation of Redmond, Wash. such play or open command may be as simple as \u2018clicking\u2019 on an icon representative of the digital content . Of course, other embodiments of such render command may be employed without departing from the spirit and scope of the present invention. In general, such render command may be considered to be executed whenever a user directs that a file having digital content  be opened, run, executed, and\/or the like.","Importantly, and in addition, such render command may be embodied as a request to copy the digital content  to another form, such as to a printed form, a visual form, an audio form, etc. As should be understood, the same digital content  may be rendered in one form, such as on a computer screen, and then in another form, such as a printed document. In the present invention, each type of rendering is performed only if the user has the right to do so, as will be explained below.","In one embodiment of the present invention, the digital content  is in the form of a digital file having a file name ending with an extension, and the computing device  can determine based on such extension to start a particular kind of rendering application . For example, if the file name extension indicates that the digital content  is a text file, the rendering application  is some form of word processor such as the \u201cMICROSOFT WORD\u201d, distributed by MICROSOFT Corporation of Redmond, Wash. Likewise, if the file name extension indicates that the digital content  is an audio, video, and\/or multimedia file, the rendering application  is some form of multimedia player, such as \u201cMICROSOFT MEDIA PLAYER\u201d, also distributed by MICROSOFT Corporation of Redmond, Wash.","Of course, other methods of determining a rendering application may be employed without departing from the spirit and scope of the present invention. As but one example, the digital content  may contain meta-data in an un-encrypted form (i.e., the aforementioned header information), where the meta-data includes information on the type of rendering application  necessary to render such digital content .","Preferably, such rendering application  examines the digital content  associated with the file name and determines whether such digital content  is encrypted in a rights-protected form (steps , ). If not protected, the digital content  may be rendered without further ado (step ). If protected, the rendering application  determines from the encrypted digital content  that the DRM system  is necessary to play such digital content . Accordingly, such rendering application  directs the user's computing device  to run the DRM system  thereon (step ). Such rendering application  then calls such DRM system  to decrypt the digital content  (step ). As will be discussed in more detail below, the DRM system  in fact decrypts the digital content  only if the user has a valid license  for such digital content  and the right to play the digital content  according to the license rules in the valid license . Preferably, once the DRM system  has been called by the rendering application , such DRM system  assumes control from the rendering application , at least for purposes of determining whether the user has a right to play such digital content  (step ).","DRM System  Components","In one embodiment of the present invention, and referring again to , the DRM system  includes a license evaluator , the black box , a license store , and a state store .","DRM System  Components\u2014License Evaluator ","The license evaluator  locates one or more licenses  that correspond to the requested digital content , determines whether such licenses  are valid, reviews the license rules in such valid licenses , and determines based on the reviewed license rules whether the requesting user has the right to render the requested digital content  in the manner sought, among other things. As should be understood, the license evaluator  is a trusted component in the DRM system . In the present disclosure, to be \u2018trusted\u2019 means that the license server  (or any other trusting element) is satisfied that the trusted element will carry out the wishes of the owner of the digital content  according to the rights description in the license , and that a user cannot easily alter such trusted element for any purpose, nefarious or otherwise.","The license evaluator  has to be trusted in order to ensure that such license evaluator  will in fact evaluate a license  properly, and to ensure that such license evaluator  has not been adulterated or otherwise modified by a user for the purpose of bypassing actual evaluation of a license . Accordingly, the license evaluator  is run in a protected or shrouded environment such that the user is denied access to such license evaluator . Other protective measures may of course be employed in connection with the license evaluator  without departing from the spirit and scope of the present invention.","DRM System  Components\u2014Black Box ","Primarily, and as was discussed above, the black box  performs encryption and decryption functions in the DRM system . In particular, the black box  works in conjunction with the license evaluator  to decrypt and encrypt certain information as part of the license evaluation function. In addition, once the license evaluator  determines that a user does in fact have the right to render the requested digital content  in the manner sought, the black box  is provided with a decryption key (KD) for such digital content , and performs the function of decrypting such digital content  based on such decryption key (KD).","The black box  is also a trusted component in the DRM system . In particular, the license server  must trust that the black box  will perform the decryption function only in accordance with the license rules in the license , and also trust that such black box  will not operate should it become adulterated or otherwise modified by a user for the nefarious purpose of bypassing actual evaluation of a license . Accordingly, the black box  is also run in a protected or shrouded environment such that the user is denied access to such black box . Again, other protective measures may be employed in connection with the black box  without departing from the spirit and scope of the present invention. Preferably, and like the content server  and license server , the black box  in the DRM system  has a unique public\/private key pair (PU-BB, PR-BB) that is employed as part of the process of evaluating the license  and obtaining a decryption key (KD) for decrypting the digital content , as will be described in more detail below.","DRM System  Components\u2014License Store ","The license store  stores licenses  received by the DRM system  for corresponding digital content . The license store  itself need not be trusted since the license store  merely stores licenses , each of which already has trust components built thereinto, as will be described below. In one embodiment of the present invention, the license store  is merely a sub-directory of a drive such as a hard disk drive or a network drive. However, the license store  may be embodied in any other form without departing from the spirit and scope of the present invention, so long as such license store  performs the function of storing licenses  in a location relatively convenient to the DRM system .","RM System  Components\u2014State Store ","The state store  performs the function of maintaining state information corresponding to licenses  presently or formerly in the license store . Such state information is created by the DRM system  and stored in the state store  as necessary. For example, if a particular license  only allows a pre-determined number of renderings of a piece of corresponding digital content , the state store  maintains state information on how many renderings have in fact taken place in connection with such license . The state store  continues to maintain state information on licenses  that are no longer in the license store  to avoid the situation where it would otherwise be advantageous to delete a license  from the license store  and then obtain an identical license  in an attempt to delete the corresponding state information from the state store .","The state store  also has to be trusted in order to ensure that the information stored therein is not reset to a state more favorable to a user. Accordingly, the state store  is likewise run in a protected or shrouded environment such that the user is denied access to such state store . Once again, other protective measures may of course be employed in connection with the state store  without departing from the spirit and scope of the present invention. For example, the state store  may be stored by the DRM system  on the computing device  in an encrypted form.","DRM SYSTEM \u2014Content Rendering, Part 2","Referring again to , and again discussing content rendering in one embodiment of the present invention, once the DRM system  has assumed control from the calling rendering application , such DRM system  then begins the process of determining whether the user has a right to render the requested digital content  in the manner sought. In particular, the DRM system  either locates a valid, enabling license  in the license store (steps , ) or attempts to acquire a valid, enabling license  from the license server  (i.e. performs the license acquisition function as discussed below and as shown in ).","As a first step, and referring now to , the license evaluator  of such DRM system  checks the license store  for the presence of one or more received licenses  that correspond to the digital content  (step ). Typically, the license  is in the form of a digital file, as will be discussed below, although it will be recognized that the license  may also be in other forms without departing from the spirit and scope of the present invention. Typically, the user will receive the digital content  without such license , although it will likewise be recognized that the digital content  may be received with a corresponding license  without departing from the spirit and scope of the present invention.","As was discussed above in connection with , each piece of digital content  is in a package with a content ID (or package ID) identifying such digital content  (or package ), and a key ID identifying the decryption key (KD) that will decrypt the encrypted digital content . Preferably, the content ID (or package ID) and the key ID are in an un-encrypted form. Accordingly, and in particular, based on the content ID of the digital content , the license evaluator  looks for any license  in the license store  that contains an identification of applicability to such content ID. Note that multiple such licenses  may be found, especially if the owner of the digital content  has specified several different kinds of licenses  for such digital content , and the user has obtained multiple ones of such licenses . If in fact the license evaluator  does not find in the license store  any license  corresponding to the requested digital content , the DRM system  may then perform the function of license acquisition (step  of ), to be described below.","Assume now that the DRM system  has been requested to render a piece of digital content , and one or more licenses  corresponding thereto are present in the license store . In one embodiment of the present invention, then, the license evaluator  of the DRM system  proceeds to determine for each such license  whether such license  itself is valid (steps  and  of ). Preferably, and in particular, each license  includes a digital signature  based on the content  of the license . As should be understood, the digital signature  will not match the license  if the content  has been adulterated or otherwise modified. Thus, the license evaluator  can determine based on the digital signature  whether the content  is in the form that it was received from the license server  (i.e., is valid). If no valid license  is found in the license store , the DRM system  may then perform the license acquisition function described below to obtain such a valid license .","Assuming that one or more valid licenses  are found, for each valid license , the license evaluator  of the DRM system  next determines whether such valid license  gives the user the right to render the corresponding digital content  in the manner desired (i.e., is enabling) (steps  and ). In particular, the license evaluator  determines whether the requesting user has the right to play the requested digital content  based on the rights description in each license  and based on what the user is attempting to do with the digital content . For example, such rights description may allow the user to render the digital content  into a sound, but not into a decrypted digital copy.","As should be understood, the rights description in each license  specifies whether the user has rights to play the digital content  based on any of several factors, including who the user is, where the user is located, what type of computing device  the user is using, what rendering application  is calling the DRM system , the date, the time, etc. In addition, the rights description may limit the license  to a pre-determined number of plays, or pre-determined play time, for example. In such case, the DRM system  must refer to any state information with regard to the license , (i.e., how many times the digital content  has been rendered, the total amount of time the digital content  has been rendered, etc.), where such state information is stored in the state store  of the DRM system  on the user's computing device .","Accordingly, the license evaluator  of the DRM system  reviews the rights description of each valid license  to determine whether such valid license  confers the rights sought to the user. In doing so, the license evaluator  may have to refer to other data local to the user's computing device  to perform a determination of whether the user has the rights sought. As seen in , such data may include an identification  of the user's computing device (machine)  and particular aspects thereof, an identification  of the user and particular aspects thereof, an identification of the rendering application  and particular aspects thereof, a system clock , and the like. If no valid license  is found that provides the user with the right to render the digital content  in the manner sought, the DRM system  may then perform the license acquisition function described below to obtain such a license , if in fact such a license  is obtainable.","Of course, in some instances the user cannot obtain the right to render the digital content  in the manner requested, because the content owner of such digital content  has in effect directed that such right not be granted. For example, the content owner of such digital content  may have directed that no license  be granted to allow a user to print a text document, or to copy a multimedia presentation into an un-encrypted form. In one embodiment of the present invention, the digital content  includes data on what rights are available upon purchase of a license , and types of licenses  available. However, it will be recognized that the content owner of a piece of digital content  may at any time change the rights currently available for such digital content  by changing the licenses  available for such digital content .","DRM SYSTEM \u2014License Acquisition","Referring now to , if in fact the license evaluator  does not find in the license store  any valid, enabling license  corresponding to the requested digital content , the DRM system  may then perform the function of license acquisition. As shown in , each piece of digital content  is packaged with information in an un-encrypted form regarding how to obtain a license  for rendering such digital content  (i.e., license acquisition information).","In one embodiment of the present invention, such license acquisition information may include (among other things) types of licenses  available, and one or more Internet web sites or other site information at which one or more appropriate license servers  may be accessed, where each such license server  is in fact capable of issuing a license  corresponding to the digital content . Of course, the license  may be obtained in other manners without departing from the spirit and scope of the present invention. For example, the license  may be obtained from a license server  at an electronic bulletin board, or even in person or via regular mail in the form of a file on a magnetic or optical disk or the like.","Assuming that the location for obtaining a license  is in fact a license server  on a network, the license evaluator  then establishes a network connection to such license server  based on the web site or other site information, and then sends a request for a license  from such connected license server  (steps , ). In particular, once the DRM system  has contacted the license server , such DRM system  transmits appropriate license request information  to such license server . In one embodiment of the present invention, such license  request information  may include:","the public key of the black box  of the DRM system  (PU-BB);","the version number of the black box  of the DRM system ;","a certificate with a digital signature from a certifying authority certifying the black box  (where the certificate may in fact include the aforementioned public key and version number of the black box );","the content ID (or package ID) that identifies the digital content  (or package );","the key ID that identifies the decryption key (KD) for decrypting the digital content ;","the type of license  requested (if in fact multiple types are available);","the type of rendering application  that requested rendering of the digital content ;","and\/or the like, among other things. Of course, greater or lessor amounts of license  request information  may be transmitted to the license server  by the DRM system  without departing from the spirit and scope of the present invention. For example, information on the type of rendering application  may not be necessary, while additional information about the user and\/or the user's computing device  may be necessary.","Once the license server  has received the license  request information  from the DRM system , the license server  may then perform several checks for trust\/authentication and for other purposes. In one embodiment of the present invention, such license server  checks the certificate with the digital signature of the certifying authority to determine whether such has been adulterated or otherwise modified (steps , ). If so, the license server  refuses to grant any license  based on the request information . The license server  may also maintain a list of known \u2018bad\u2019 users and\/or user's computing devices , and may refuse to grant any license  based on a request from any such bad user and\/or bad user's computing device  on the list. Such \u2018bad\u2019 list may be compiled in any appropriate manner without departing from the spirit and scope of the present invention.","Based on the received request and the information associated therewith, and particularly based on the content ID (or package ID) in the license request information, the license server  can interrogate the content-key database  () and locate a record corresponding to the digital content  (or package ) that is the basis of the request. As was discussed above, such record contains the decryption key (KD), key ID, and content ID for such digital content . In addition, such record may contain license data regarding the types of licenses  to be issued for the digital content  and the terms and conditions for each type of license . Alternatively, such record may include a pointer, link, or reference to a location having such additional information.","As mentioned above, multiple types of licenses  may be available. For example, for a relatively small license fee, a license  allowing a limited number of renderings may be available. For a relatively greater license fee, a license  allowing unlimited renderings until an expiration date may be available. For a still greater license fee, a license  allowing unlimited renderings without any expiration date may be available. Practically any type of license  having any kind of license terms may be devised and issued by the license server  without departing from the spirit and scope of the present invention.","In one embodiment of the present invention, the request for a license  is accomplished with the aid of a web page or the like as transmitted from the license server  to the user's computing device . Preferably, such web page includes information on all types of licenses  available from the license server  for the digital content  that is the basis of the license  request.","In one embodiment of the present invention, prior to issuing a license , the license server  checks the version number of the black box  to determine whether such black box  is relatively current (steps , ). As should be understood, the black box  is intended to be secure and protected from attacks from a user with nefarious purposes (i.e., to improperly render digital content  without a license , or outside the terms of a corresponding license ). However, it is to be recognized that no system and no software device is in fact totally secure from such an attack.","As should also be understood, if the black box  is relatively current, i.e., has been obtained or updated relatively recently, it is less likely that such black box  has been successfully attacked by such a nefarious user. Preferably, and as a matter of trust, if the license server  receives a license request with request information  including a black box  version number that is not relatively current, such license server  refuses to issue the requested license  until the corresponding black box  is upgraded to a current version, as will be described below. Put simply, the license server  will not trust such black box  unless such black box  is relatively current.","In the context of the black box  of the present invention, the term \u2018current\u2019 or \u2018relatively current\u2019 may have any appropriate meaning without departing from the spirit and scope of the present invention, consistent with the function of providing trust in the black box  based on the age or use thereof. For example, \u2018current\u2019 may be defined according to age (i.e., less than one month old). As an alternative example, \u2018current\u2019 may be defined based on a number of times that the black box  has decrypted digital content  (i.e., less than 200 instances of decryption). Moreover, \u2018current\u2019 may be based on policy as set by each license server , where one license server  may define \u2018current\u2019 differently from another license server , and a license server  may further define \u2018current\u2019 differently depending on the digital content  for which a license  is requested, or depending on the type of license  requested, among other things.","Assuming that the license server  is satisfied from the version number of a black box  or other indicia thereof that such black box  is current, the license server  then proceeds to negotiate terms and conditions for the license  with the user (step ). Alternatively, the license server  negotiates the license  with the user, then satisfies itself from the version number of the black box  that such black box  is current (i.e., performs step , then step ). Of course, the amount of negotiation varies depending on the type of license  to be issued, and other factors. For example, if the license server  is merely issuing a paid-up unlimited use license , very little need be negotiated. On the other hand, if the license  is to be based on such items as varying values, sliding scales, break points, and other details, such items and details may need to be worked out between the license server  and the user before the license  can be issued.","As should be understood, depending on the circumstances, the license negotiation may require that the user provide further information to the license server  (for example, information on the user, the user's computing device , etc.). Importantly, the license negotiation may also require that the user and the license server  determine a mutually acceptable payment instrument (a credit account, a debit account, a mailed check, etc.) and\/or payment method (paid-up immediately, spread over a period of time, etc.), among other things.","Once all the terms of the license  have been negotiated and agreed to by both the license server  and user (step ), a digital license  is generated by the license server  (step ), where such generated license  is based at least in part on the license request, the black box  public key (PU-BB), and the decryption key (KD) for the digital content  that is the basis of the request as obtained from the content-key database . In one embodiment of the present invention, and as seen in , the generated license  includes:","the content ID of the digital content  to which the license  applies;","a Digital Rights License (DRL)  (i.e., the rights description or actual terms and conditions of the license  written in a predetermined form that the license evaluator  can interrogate), perhaps encrypted with the decryption key (KD) (i.e., KD (DRL));","the decryption key (KD) for the digital content  encrypted with the black box  public key (PU-BB) as receive in the license request (i.e.,(PU-BB (KD));","a digital signature from the license server  (without any attached certificate) based on (KD (DRL)) and (PU-BB (KD)) and encrypted with the license server  private key (i.e., (S (PR-LS))); and","the certificate that the license server  obtained previously from the content server , such certificate indicating that the license server  has the authority from the content server  to issue the license  (i.e., (CERT (PU-LS) S (PR-CS))).","As should be understood, the aforementioned elements and perhaps others are packaged into a digital file or some other appropriate form. As should also be understood, if the DRL  or (PU-BB (KD)) in the license  should become adulterated or otherwise modified, the digital signature (S (PR-LS)) in the license  will not match and therefore will not validate such license . For this reason, the DRL  need not necessarily be in an encrypted form (i.e., (KD(DRL)) as mentioned above), although such encrypted form may in some instances be desirable and therefore may be employed without departing from the spirit and scope of the present invention.","Once the digital license  has been prepared, such license  is then issued to the requestor (i.e., the DRM system  on the user's computing device ) (step  of ). Preferably, the license  is transmitted over the same path through which the request therefor was made (i.e., the Internet or another network), although another path may be employed without departing from the spirit and scope of the present invention. Upon receipt, the requesting DRM system  preferably automatically places the received digital license  in the license store  (step ).","It is to be understood that a user's computing device  may on occasion malfunction, and licenses  stored in the license store  of the DRM system  on such user's computing device  may become irretrievably lost. Accordingly, it is preferable that the license server  maintain a database  of issued licenses  (), and that such license server  provide a user with a copy or re-issue (hereinafter \u2018re-issue\u2019) of an issued license  if the user is in fact entitled to such re-issue. In the aforementioned case where licenses  are irretrievably lost, it is also likely the case that state information stored in the state store  and corresponding to such licenses  is also lost. Such lost state information should be taken into account when re-issuing a license . For example, a fixed number of renderings license  might legitimately be re-issued in a pro-rated form after a relatively short period of time, and not re-issued at all after a relatively longer period of time.","DRM System \u2014Installation\/Upgrade of Black Box ","As was discussed above, as part of the function of acquiring a license , the license server  may deny a request for a license  from a user if the user's computing device  has a DRM system  with a black box  that is not relatively current, i.e., has a relatively old version number. In such case, it is preferable that the black box  of such DRM system  be upgraded so that the license acquisition function can then proceed. Of course, the black box  may be upgraded at other times without departing from the spirit and scope of the present invention.","Preferably, as part of the process of installing the DRM system  on a user's computing device , a non-unique \u2018lite\u2019 version of a black box  is provided. Such \u2018lite\u2019 black box  is then upgraded to a unique regular version prior to rendering a piece of digital content . As should be understood, if each black box  in each DRM system  is unique, a security breach into one black box  cannot easily be replicated with any other black box .","Referring now to , the DRM system  obtains the unique black box  by requesting same from a black box server  or the like (as was discussed above and as shown in ) (step ). Typically, such request is made by way of the Internet, although other means of access may be employed without departing from the spirit and scope of the present invention. For example, the connection to a black box server  may be a direct connection, either locally or remotely. An upgrade from one unique non-lite black box  to another unique non-lite black box  may also be requested by the DRM system  at any time, such as for example a time when a license server  deems the black box  not current, as was discussed above.","Thereafter, the black box server  generates a new unique black box  (step ). As seen in , each new black box  is provided with a version number and a certificate with a digital signature from a certifying authority. As was discussed above in connection with the license acquisition function, the version number of the black box  indicates the relative age and\/or use thereof. The certificate with the digital signature from the certifying authority, also discussed above in connection with the license acquisition function, is a proffer or vouching mechanism from the certifying authority that a license server  should trust the black box . Of course, the license server  must trust the certifying authority to issue such a certificate for a black box  that is in fact trustworthy. It may be the case, in fact, that the license server  does not trust a particular certifying authority, and refuses to honor any certificate issued by such certifying authority. Trust may not occur, for example, if a particular certifying authority is found to be engaging in a pattern of improperly issuing certificates.","Preferably, and as was discussed above, the black box server  includes a new unique public\/private key pair (PU-BB, PR-BB) with the newly generated unique black box  (step  of ). Preferably, the private key for the black box  (PR-BB) is accessible only to such black box , and is hidden from and inaccessible by the remainder of the world, including the computing device  having the DRM system  with such black box , and the user thereof.","Most any hiding scheme may be employed without departing from the spirit and scope of the present invention, so long as such hiding scheme in fact performs the function of hiding the private key (PR-BB) from the world. As but one example, the private key (PR-BB) may be split into several sub-components, and each sub-component may be encrypted uniquely and stored in a different location. In such a situation, it is preferable that such sub-components are never assembled in full to produce the entire private key (PR-BB).","In one embodiment of the present invention, such private key (PR-BB) is encrypted according to code-based encryption techniques. In particular, in such embodiment, the actual software code of the black box  (or other software code) is employed as encrypting key(s). Accordingly, if the code of the black box  (or the other software code) becomes adulterated or otherwise modified, for example by a user with nefarious purposes, such private key (PR-BB) cannot be decrypted.","Although each new black box  is delivered with a new public\/private key pair (PU-BB, PR-BB), such new black box  is also preferably given access to old public\/private key pairs from old black boxes  previously delivered to the DRM system  on the user's computing device  (step ). Accordingly, the upgraded black box  can still employ the old key pairs to access older digital content  and older corresponding licenses  that were generated according to such old key pairs, as will be discussed in more detail below.","Preferably, the upgraded black box  delivered by the black box server  is tightly tied to or associated with the user's computing device . Accordingly, the upgraded black box  cannot be operably transferred among multiple computing devices  for nefarious purposes or otherwise. In one embodiment of the present invention, as part of the request for the black box  (step ) the DRM system  provides hardware information unique to such DRM system  and\/or unique to the user's computing device  to the black box server , and the black box server  generates a black box  for the DRM system  based in part on such provided hardware information. Such generated upgraded black box  is then delivered to and installed in the DRM system  on the user's computing device  (steps , ). If the upgraded black box  is then somehow transferred to another computing device , the transferred black box  recognizes that it is not intended for such other computing device , and does not allow any requested rendering to proceed on such other computing device .","Once the new black box  is installed in the DRM system , such DRM system  can proceed with a license acquisition function or with any other function.","DRM System \u2014Content Rendering, Part 3","Referring now to , and assuming, now, that the license evaluator  has found at least one valid license  and that at least one of such valid licenses  provides the user with the rights necessary to render the corresponding digital content  in the manner sought (i.e., is enabling), the license evaluator  then selects one of such licenses  for further use (step ). Specifically, to render the requested digital content , the license evaluator  and the black box  in combination obtain the decryption key (KD) from such license , and the black box  employs such decryption key (KD) to decrypt the digital content . In one embodiment of the present invention, and as was discussed above, the decryption key (KD) as obtained from the license  is encrypted with the black box  public key (PU-BB(KD)), and the black box  decrypts such encrypted decryption key with its private key (PR-BB) to produce the decryption key (KD) (steps , ). However, other methods of obtaining the decryption key (KD) for the digital content  may be employed without departing from the spirit and scope of the present invention.","Once the black box  has the decryption key (KD) for the digital content  and permission from the license evaluator  to render the digital content , control may be returned to the rendering application  (steps , ). In one embodiment of the present invention, the rendering application  then calls the DRM system \/black box  and directs at least a portion of the encrypted digital content  to the black box  for decryption according to the decryption key (KD) (step ). The black box  decrypts the digital content  based upon the decryption key (KD) for the digital content , and then the black box  returns the decrypted digital content  to the rendering application  for actual rendering (steps , ). The rendering application  may either send a portion of the encrypted digital content  or the entire digital content  to the black box  for decryption based on the decryption key (KD) for such digital content  without departing from the spirit and scope of the present invention.","Preferably, when the rendering application  sends digital content  to the black box  for decryption, the black box  and\/or the DRM system  authenticates such rendering application  to ensure that it is in fact the same rendering application  that initially requested the DRM system  to run (step ). Otherwise, the potential exists that rendering approval may be obtained improperly by basing the rendering request on one type of rendering application  and in fact rendering with another type of rendering application . Assuming the authentication is successful and the digital content  is decrypted by the black box , the rendering application  may then render the decrypted digital content  (steps , ).","Sequence of Key Transactions","Referring now to , in one embodiment of the present invention, a sequence of key transactions is performed to obtain the decryption key (KD) and evaluate a license  for a requested piece of digital content  (i.e., to perform steps \u2013 of ). Mainly, in such sequence, the DRM system  obtains the decryption key (KD) from the license , uses information obtained from the license  and the digital content  to authenticate or ensure the validity of both, and then determines whether the license  in fact provides the right to render the digital content  in the manner sought. If so, the digital content  may be rendered.","Bearing in mind that each license  for the digital content , as seen in , includes:","the content ID of the digital content  to which the license  applies;","the Digital Rights License (DRL) , perhaps encrypted with the decryption key (KD) (i.e., KD (DRL));","the decryption key (KD) for the digital content  encrypted with the black box  public key (PU-BB) (i.e.,(PU-BB (KD));","the digital signature from the license server  based on (KD (DRL)) and (PU-BB (KD)) and encrypted with the license server  private key (i.e., (S (PR-LS))); and","the certificate that the license server  obtained previously from the content server  (i.e., (CERT (PU-LS) S (PR-CS))),","and also bearing in mind that the package having the digital content , as seen in , includes:","the content ID of such digital content ;","the digital content  encrypted by KD (i.e., (KD(CONTENT)));","a license acquisition script that is not encrypted; and","the key KD encrypting the content server  public key (PU-CS), signed by the content server  private key (PR-CS) (i.e., (KD (PU-CS) S (PR-CS))),","in one embodiment of the present invention, the specific sequence of key transactions that are performed with regard to a specific one of the licenses  for the digital content  is as follows:","1. Based on (PU-BB (KD)) from the license , the black box  of the DRM system  on the user's computing device  applies its private key (PR-BB) to obtain (KD) (step ). (PR-BB (PU-BB (KD))=(KD)). Note, importantly, that the black box  could then proceed to employ KD to decrypt the digital content  without any further ado. However, and also importantly, the license server  trusts the black box  not to do so. Such trust was established at the time such license server  issued the license  based on the certificate from the certifying authority vouching for the trustworthiness of such black box . Accordingly, despite the black box  obtaining the decryption key (KD) as an initial step rather than a final step, the DRM system  continues to perform all license  validation and evaluation functions, as described below.","2. Based on (KD (PU-CS) S (PR-CS)) from the digital content , the black box  applies the newly obtained decryption key (KD) to obtain (PU-CS) (step ). (KD (KD (PU-CS))=(PU-CS)). Additionally, the black box  can apply (PU-CS) as against the signature (S (PR-CS)) to satisfy itself that such signature and such digital content \/package is valid (step ). If not valid, the process is halted and access to the digital content  is denied.","3. Based on (CERT (PU-LS) S (PR-CS)) from the license , the black box  applies the newly obtained content server  public key (PU-CS) to satisfy itself that the certificate is valid (step ), signifying that the license server  that issued the license  had the authority from the content server  to do so, and then examines the certificate contents to obtain (PU-LS) (step ). If not valid, the process is halted and access to the digital content  based on the license  is denied.","4. Based on (S (PR-LS)) from the license , the black box  applies the newly obtained license server  public key (PU-LS) to satisfy itself that the license  is valid (step ). If not valid, the process is halted and access to the digital content  based on the license  is denied.","5. Assuming all validation steps are successful, and that the DRL  in the license  is in fact encrypted with the decryption key (KD), the license evaluator  then applies the already-obtained decryption key (KD) to (KD(DRL)) as obtained from the license  to obtain the license terms from the license  (i.e., the DRL ) (step ). Of course, if the DRL  in the license  is not in fact encrypted with the decryption key (KD), step  may be omitted. The license evaluator  then evaluates\/interrogates the DRL  and determines whether the user's computing device  has the right based on the DRL  in the license  to render the corresponding digital content  in the manner sought (i.e., whether the DRL  is enabling) (step ). If the license evaluator  determines that such right does not exist, the process is halted and access to the digital content  based on the license  is denied.","6. Finally, assuming evaluation of the license  results in a positive determination that the user's computing device  has the right based on the DRL  terms to render the corresponding digital content  in the manner sought, the license evaluator  informs the black box  that such black box  can render the corresponding digital content  according to the decryption key (KD). The black box  thereafter applies the decryption key (KD) to decrypt the digital content  from the package (i.e., (KD(KD(CONTENT))=(CONTENT)) (step ).","It is important to note that the above-specified series of steps represents an alternating or \u2018ping-ponging\u2019 between the license  and the digital content . Such ping-ponging ensures that the digital content  is tightly bound to the license , in that the validation and evaluation process can only occur if both the digital content  and license  are present in a properly issued and valid form. In addition, since the same decryption key (KD) is needed to get the content server  public key (PU-CS) from the license  and the digital content  from the package in a decrypted form (and perhaps the license terms (DRL ) from the license  in a decrypted form), such items are also tightly bound. Signature validation also ensures that the digital content  and the license  are in the same form as issued from the content server  and the license server , respectively. Accordingly, it is difficult if not impossible to decrypt the digital content  by bypassing the license server , and also difficult if not impossible to alter and then decrypt the digital content  or the license .","In one embodiment of the present invention, signature verification, and especially signature verification of the license , is alternately performed as follows. Rather than having a signature encrypted by the private key of the license server  (PR-LS), as is seen in , each license  has a signature encrypted by a private root key (PR-R) (not shown), where the black box  of each DRM system  includes a public root key (PU-R) (also not shown) corresponding to the private root key (PR-R). The private root key (PR-R) is known only to a root entity, and a license server  can only issue licenses  if such license server  has arranged with the root entity to issue licenses .","In particular, in such embodiment:","1. the license server  provides its public key (PU-LS) to the root entity;","2. the root entity returns the license server public key (PU-LS) to such license server  encrypted with the private root key (PR-R) (i.e., (CERT (PU-LS) S (PR-R))); and","3. the license server  then issues a license  with a signature encrypted with the license server private key (S (PR-LS)), and also attaches to the license the certificate from the root entity (CERT (PU-LS) S (PR-R)).","For a DRM system  to validate such issued license , then, the DRM system :","1. applies the public root key (PU-R) to the attached certificate (CERT (PU-LS) S (PR-R)) to obtain the license server public key (PU-LS); and","2. applies the obtained license server public key (PU-LS) to the signature of the license  (S (PR-LS).","Importantly, it should be recognized that just as the root entity gave the license server  permission to issue licenses  by providing the certificate (CERT (PU-LS) S (PR-R)) to such license server , such license server  can provide a similar certificate to a second license server  (i.e., (CERT (PU-LS) S (PR-LS)), thereby allowing the second license server to also issue licenses . As should now be evident, a license  issued by the second license server would include a first certificate (CERT (PU-LS) S (PR-R)) and a second certificate (CERT (PU-LS) S (PR-LS)). Likewise, such license  is validated by following the chain through the first and second certificates. Of course, additional links in the chain may be added and traversed.","One advantage of the aforementioned signature verification process is that the root entity may periodically change the private root key (PR-R), thereby likewise periodically requiring each license server  to obtain a new certificate (CERT (PU-LS) S (PR-R)). Importantly, as a requirement for obtaining such new certificate, each license server may be required to upgrade itself. As with the black box , if a license server  is relatively current, i.e., has been upgraded relatively recently, it is less likely that license server  has been successfully attacked. Accordingly, as a matter of trust, each license server  is preferably required to be upgraded periodically via an appropriate upgrade trigger mechanism such as the signature verification process. Of course, other upgrade mechanisms may be employed without departing from the spirit and scope of the present invention.","Of course, if the private root key (PR-R) is changed, then the public root key (PU-R) in each DRM system  must also be changed. Such change may for example take place during a normal black box  upgrade, or in fact may require that a black box  upgrade take place. Although a changed public root key (PU-R) may potentially interfere with signature validation for an older license  issued based on an older private root key (PR-R), such interference may be minimized by requiring that an upgraded black box  remember all old public root keys (PU-R). Alternatively, such interference may be minimized by requiring signature verification for a license  only once, for example the first time such license  is evaluated by the license evaluator  of a DRM system . In such case, state information on whether signature verification has taken place should be compiled, and such state information should be stored in the state store  of the DRM system .","Digital Rights License ","In the present invention, the license evaluator  evaluates a Digital Rights License (DRL)  as the rights description or terms of a license  to determine if such DRL  allows rendering of a corresponding piece of digital content  in the manner sought. In one embodiment of the present invention, the DRL  may be written by a licensor (i.e., the content owner) in any DRL language.","As should be understood, there are a multitude of ways to specify a DRL . Accordingly, a high degree of flexibility must be allowed for in any DRL language. However, it is impractical to specify all aspects of a DRL  in a particular license language, and it is highly unlikely that the author of such a language can appreciate all possible licensing aspects that a particular digital licensor may desire. Moreover, a highly sophisticated license language may be unnecessary and even a hindrance for a licensor providing a relatively simple DRL . Nevertheless, a licensor should not be unnecessarily restricted in how to specify a DRL . At the same time, the license evaluator  should always be able to get answers from a DRL  regarding a number of specific license questions.","In the present invention, and referring now to , a DRL  can be specified in any license language, but includes a language identifier or tag . The license evaluator  evaluating the license , then, performs the preliminary step of reviewing the language tag  to identify such language, and then selects an appropriate license language engine  for accessing the license  in such identified language. As should be understood, such license language engine  must be present and accessible to the license evaluator . If not present, the language tag  and\/or the DRL  preferably includes a location  (typically a web site) for obtaining such language engine .","Typically, the language engine  is in the form of an executable file or set of files that reside in a memory of the user's computing device , such as a hard drive. The language engine  assists the license evaluator  to directly interrogate the DRL , the license evaluator  interrogates the DRL  indirectly via the language engine  acting as an intermediary, or the like. When executed, the language engine  runs in a work space in a memory of the user's computing device , such as RAM. However, any other form of language engine  may be employed without departing from the spirit and scope of the present invention.","Preferably, any language engine  and any DRL language supports at least a number of specific license questions that the license evaluator  expects to be answered by any DRL , as will be discussed below. Accordingly, the license evaluator  is not tied to any particular DRL language; a DRL  may be written in any appropriate DRL language; and a DRL  specified in a new license language can be employed by an existing license evaluator  by having such license evaluator  obtain a corresponding new language engine .","DRL Languages","Two examples of DRL languages, as embodied in respective DRLs , are provided below. The first, \u2018simple\u2019 DRL  is written in a DRL language that specifies license attributes, while the second \u2018script\u2019 DRL  is written in a DRL language that can perform functions according to the script specified in the DRL . While written in a DRL language, the meaning of each line of code should be apparent based on the linguistics thereof and\/or on the attribute description chart that follows:","Simple DRL :","<LICENSE>","<DATA>","<NAME>Beastie Boy's Play<\/NAME>","<ID>39384<\/ID>","<DESCRIPTION>Play the song 3 times<\/DESCRIPTION>","<TERMS><\/TERMS>","<VALIDITY>","<NOTBEFORE>19980102 23:20:14Z<\/NOTBEFORE>","<NOTAFTER>19980102 23:20:14Z<\/NOTAFTER>","<\/VALIDITY>","<ISSUEDDATE>19980102 23:20:14Z<\/ISSUEDDATE>","<LICENSORSITE>http:\/\/www.foo.com<\/LICENSORSITE>","<CONTENT>","<NAME>Beastie Boy's<\/NAME>","<ID>392<\/ID>","<KEYID>39292<\/KEYID>","<TYPE>MS Encrypted ASF 2.0<\/TTYPE>","<\/CONTENT>","<OWNER>","<ID>939KDKD393KD<\/ID>","<NAME>Universal<\/NAME>","<PUBLICKEY><\/PUBLICKEY>","<\/OWNER>","<LICENSEE>","<NAME>Arnold<\/NAME>","<ID>939KDKD393KD<\/ID>","<PUBLICKEY><\/PUBLICKEY>","<\/LICENSEE>","<PRINCIPAL TYPE==AND=>","<PRINCIPAL TYPE==OR=>","<PRINCIPAL>","<TYPE>x86Computer<\/TYPE>","<ID>3939292939d9e939<\/ID>","<NAME>Personal Computer<\/NAME>","<AUTHTYPE>Intel Authenticated Boot PC SHA-1DSA512<\/AUTHTYPE>","<AUTHDATA>29293939<\/AUTHDATA>","<\/PRINCIPAL>","<PRINCIPAL>","<TYPE>Application<\/TYPE>","<ID>2939495939292<\/ID>","<NAME>Window=s Media Player<\/NAME>","<AUTHTYPE>Authenticode SHA-1<\/AUTHTYPE>","<AUTH DATA>93939<\/AUTH DATA>","<\/PRINCIPAL>","<\/PRINCIPAL>","<PRINCIPAL>","<TYPE>Person<\/TYPE>","<ID>39299482010<\/ID>","<NAME>Arnold Blinn<\/NAME>","<AUTHTYPE>Authenticate user<\/AUTHTYPE>","<AUTHDATA>\\\\redmond\\arnoldb<\/AUTHDATA>","<\/PRINCIPAL>","<\/PRINCIPAL>","<DRLTYPE>Simple<\/DRLTYPE>[the language tag ]","<DRLDATA>","<START>19980102 23:20:14Z<\/START>","<END>19980102 23:20:14Z<\/END>","<COUNT>3<\/COUNT>","<ACTION>PLAY<\/ACTION>","<\/DRLDATA>","<ENABLINGBITS>aaaabbbbccccdddd<\/ENABLINGBITS>","<\/DATA>","<SIGNATURE>","<SIGNERNAME>Universal<\/SIGNERNAME>","<SIGNERID>9382ABK3939DKD<\/SIGNERID>","<HASHALGORITHMID>M D5<\/HASHALGORITHM ID>","<SIGNALGORITHMID>RSA 128<\/SIGNALGORITHMID>","<SIGNATURE>xxxyyyxxxyyyxxxyyy<\/SIGNATURE>","<SIGNERPUBLICKEY><\/SIGNERPUBLICKEY>","<CONTENTSIGNEDSIGNERPUBLICKEY><\/CONTENTSIGNEDSI GNERPUBLICKEY>","<\/SIGNATURE>","<\/LICENSE>","Script DRL :","<LICENSE>","<DATA>","<NAME>Beastie Boy's Play<\/NAME>","<ID>39384<\/ID>","<DESCRIPTION>Play the song unlimited<\/DESCRIPTION>","<TERMS><\/TERMS>","<VALIDITY>","<NOTBEFORE>19980102 23:20:14Z<\/NOTBEFORE>","<NOTAFTER>19980102 23:20:14Z<\/NOTAFTER>","<\/VALIDITY>","<ISSUEDDATE>19980102 23:20:14Z<\/ISSUEDDATE>","<LICENSORSITE>http:\/\/www.foo.com<\/LICENSORSITE>","<CONTENT>","<NAME>Beastie Boy's<\/NAME","<ID>392<\/ID>","<KEYID>39292 \/KEYID>","<TYPE>MS Encrypted ASF 2.0<\/TTYPE>","<\/CONTENT>","<OWNER>","<ID>939KDKD393KD<\/ID>","<NAME>Universal<\/NAME>","<PUBLICKEY><\/PUBLICKEY>","<\/OWNER>","<LICENSEE>","<NAME>Arnold<\/NAME>","<ID>939KDKD393KD<\/ID>","<PUBLICKEY><\/PUBLICKEY>","<\/LICENSEE>","<DRLTYPE>Script<\/DRLTYPE> [the language tag ]","<DRLDATA>","function on_enable(action, args) as boolean","result=False","if action=\u201cPLAY\u201d then","result=True","end if","on_action=False","end function",". . .","<\/DRLDATA>","<\/DATA>","<SIGNATURE>","<SIGNERNAME>Universal<\/SIGNERNAME>","<SIGNERID>9382<\/SIGNERID>","<SIGNERPUBLICKEY><\/SIGNERPUBLICKEY>","<HASHID>MD5<\/HASHID>","<SIGNID>RSA 128<\/SIGNID>","<SIGNATURE>xxxyyyxxxyyyxxxyyy<\/SIGNATURE>","<CONTENTSIGNEDSIGNERPUBLICKEY><\/CONTENTSIGNEDSI GNERPUBLICKEY>","<\/SIGNATURE>","<\/LICENSE>","In the two DRLs  specified above, the attributes listed have the following descriptions and data types:",{"@attributes":{"id":"p-0330","num":"0329"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Attribute","Description","Data Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Id","ID of the license","GUID"]},{"entry":["Name","Name of the license","String"]},{"entry":["Content Id","ID of the content","GUID"]},{"entry":["Content Key Id","ID for the encryption key of the","GUID"]},{"entry":[{},"content"]},{"entry":["Content Name","Name of the content","String"]},{"entry":["Content Type","Type of the content","String"]},{"entry":["Owner Id","ID of the owner of the content","GUID"]},{"entry":["Owner Name","Name of the owner of the content","String"]},{"entry":["Owner Public Key","Public key for owner of content.","String"]},{"entry":[{},"This is a base-64 encoded public"]},{"entry":[{},"key for the owner of the content."]},{"entry":["Licensee Id","Id of the person getting license. It","GUID"]},{"entry":[{},"may be null."]},{"entry":["Licensee Name","Name of the person getting license.","String"]},{"entry":[{},"It may be null."]},{"entry":["Licensee Public Key","Public key of the licensee. This is","String"]},{"entry":[{},"the base-64 encoded public key of"]},{"entry":[{},"the licensee. It may be null."]},{"entry":["Description","Simple human readable description","String"]},{"entry":[{},"of the license"]},{"entry":["Terms","Legal terms of the license. This","String"]},{"entry":[{},"may be a pointer to a web page"]},{"entry":[{},"containing legal prose."]},{"entry":["Validity Not After","Validity period of license expiration","Date"]},{"entry":["Validity Not Before","Validity period of license start","Date"]},{"entry":["Issued Date","Date the license was issued","Date"]},{"entry":["DRL Type","Type of the DRL. Example include","String"]},{"entry":[{},"\u201cSIMPLE\u201d or \u201cSCRIPT\u201d"]},{"entry":["DRL Data","Data specific to the DRL","String"]},{"entry":["Enabling Bits","These are the bits that enable","String"]},{"entry":[{},"access to the actual content. The"]},{"entry":[{},"interpretation of these bits is up to"]},{"entry":[{},"the application, but typically this will"]},{"entry":[{},"be the private key for decryption of"]},{"entry":[{},"the content. This data will be base-"]},{"entry":[{},"64 encoded. Note that these bits"]},{"entry":[{},"are encrypted using the public key"]},{"entry":[{},"of the individual machine."]},{"entry":["Signer Id","ID of person signing license","GUID"]},{"entry":["Signer Name","Name of person signing license","String"]},{"entry":["Signer Public Key","Public key for person signing","String"]},{"entry":[{},"license. This is the base-64 encode"]},{"entry":[{},"public key for the signer."]},{"entry":["Content Signed","Public key for person signing the","String"]},{"entry":["Signer Public Key","license that has been signed by the"]},{"entry":[{},"content server private key. The"]},{"entry":[{},"public key to verify this signature"]},{"entry":[{},"will be encrypted in the content."]},{"entry":[{},"This is base-64 encoded."]},{"entry":["Hash Alg Id","Algorithm used to generate hash.","String"]},{"entry":[{},"This is a string, such as \u201cMD5\u201d."]},{"entry":["Signature Alg Id","Algorithm used to generate","String"]},{"entry":[{},"signature. This is a string, such as"]},{"entry":[{},"\u201cRSA 128\u201d."]},{"entry":["Signature","Signature of the data. This is base-","String"]},{"entry":[{},"64 encoded data."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"As was discussed above, it is preferable that any language engine  and any DRL language support at least a number of specific license questions that the digital license evaluator  expects to be answered by any DRL . Recognizing such supported questions may include any questions without departing from the spirit and scope of the present invention, and consistent with the terminology employed in the two DRL  examples above, in one embodiment of the present invention, such supported questions or \u2018methods\u2019 include \u2018access methods\u2019, \u2018DRL methods\u2019, and \u2018enabling use methods\u2019, as follows:","Access Methods","Access methods are used to query a DRL  for top-level attributes.","VARIANT QueryAttribute (BSTR key)","Valid keys include License.Name, License.Id, Content.Name, Content.Id, Content.Type, Owner.Name, Owner.Id, Owner.PublicKey, Licensee.Name, Licensee.Id, Licensee.PublicKey, Description, and Terms, each returning a BSTR variant; and Issued, Validity.Start and Validity.End, each returning a Date Variant.","DRL Methods","The implementation of the following DRL methods varies from DRL  to DRL . Many of the DRL methods contain a variant parameter labeled \u2018data\u2019 which is intended for communicating more advanced information with a DRL . It is present largely for future expandability.","Boolean IsActivated(Variant data)","This method returns a Boolean indicating whether the DRL \/license  is activated. An example of an activated license  is a limited operation license  that upon first play is active for only 48 hours.","Activate(Variant data)","This method is used to activate a license . Once a license  is activated, it cannot be deactivated.","Variant QueryDRL(Variant data)","This method is used to communicate with a more advanced DRL . It is largely about future expandability of the DRL  feature set.","Variant GetExpires(BSTR action, Variant data)","This method returns the expiration date of a license  with regard to the passed-in action. If the return value is NULL, the license  is assumed to never expire or does not yet have an expiration date because it hasn't been activated, or the like.","Variant GetCount(BSTR action, Variant data)","This method returns the number of operations of the passed-in action that are left. If NULL is returned, the operation can be performed an unlimited number of times.","Boolean IsEnabled(BSTR action, Variant data)","This method indicates whether the license  supports the requested action at the present time.","Boolean IsSunk(BSTR action, Variant data)","This method indicates whether the license  has been paid for. A license  that is paid for up front would return TRUE, while a license  that is not paid for up front, such as a license  that collects payments as it is used, would return FALSE.","Enabling Use Methods","These methods are employed to enable a license  for use in decrypting content.","Boolean Validate (BSTR key)","This method is used to validate a license . The passed-in key is the black box  public key (PU-BB) encrypted by the decryption key (KD) for the corresponding digital content  (i.e.,(KD(PU-BB))) for use in validation of the signature of the license . A return value of TRUE indicates that the license  is valid. A return value of FALSE indicates invalid.","int OpenLicense (BSTR action, BSTR key, Variant data)","This method is used to get ready to access the decrypted enabling bits. The passed-in key is (KD(PU-BB)) as described above. A return value of 0 indicates success. Other return values can be defined.","BSTR GetDecryptedEnablingBits (BSTR action, Variant data)","Variant GetDecryptedEnablingBitsAsBinary (BSTR action, Variant Data)","These methods are used to access the enabling bits in decrypted form. If this is not successful for any of a number of reasons, a null string or null variant is returned.","void CloseLicense (BSTR action, Variant data)","This method is used to unlock access to the enabling bits for performing the passed-in action. If this is not successful for any of a number of reasons, a null string is returned.","Heuristics","As was discussed above, if multiple licenses  are present for the same piece of digital content , one of the licenses  must be chosen for further use. Using the above methods, the following heuristics could be implemented to make such choice. In particular, to perform an action (say APLAY@) on a piece of digital content , the following steps could be performed:","1. Get all licenses  that apply to the particular piece of digital content .","2. Eliminate each license  that does not enable the action by calling the IsEnabled function on such license .","3. Eliminate each license  that is not active by calling IsActivated on such license .","4. Eliminate each license  that is not paid for up front by calling IsSunk on such license .","5. If any license  is left, use it. Use an unlimited-number-of-plays license  before using a limited-number-of-plays license , especially if the unlimited-number-of-plays license  has an expiration date. At any time, the user should be allowed to select a specific license  that has already been acquired, even if the choice is not cost-effective. Accordingly, the user can select a license  based on criteria that are perhaps not apparent to the DRM system .","6. If there are no licenses  left, return status so indicating. The user would then be given the option of:","using a license  that is not paid for up front, if available;","activating a license , if available; and\/or","performing license acquisition from a license server .","DRL Language\u2014Specifying Rights According to Events","The examples of DRL licenses  set forth above have pre-determined fields containing predetermined types of data such as a number of plays authorized, an expiration date, etc. Accordingly, such licenses  are not especially flexible, and in particular cannot be employed to specify more specialized rights. In one embodiment of the present invention, then, the DRM license  is constructed to be more flexible in that the license is written according to a DRL language that specifies rights according to events. Importantly, and referring now to , for each event , the flexible DRL language (\u201cflex language\u201d) can specify conditions  precedent to allowing the event  to proceed and actions  to be taken once the event  has been allowed to proceed. In addition, in one embodiment of the present invention, the flex language allows the license  to store and modify license-related information such as state information in the license store , the state store , or elsewhere.","The flex language allows the license  to specify the conditions  under which each event  can occur on the computing device . In addition, after the event  has occurred or is permitted to occur, the flex language allows the license  to specify actions  to be taken, primarily for the purpose of creating\/maintain\/updating (i.e., modifies, generally) state information relating to the license  and\/or the corresponding content .","In one embodiment of the present invention, the flex language can specify conditions  precedent to and\/or actions to be taken in connection with five main types of events : storage of the license , selection of the license , deletion of the license , a request for an action with respect to the license , and a clock rollback. Of course, other types of events  may be specified by the flex language without departing from the spirit and scope of the present invention.","As discussed above, each event  may have a condition  and\/or an action  to be taken. In a license  constructed according to the flex language and in accordance with one embodiment of the present invention, each condition item  and action item  is set forth in the form of an expression to be evaluated. Typically, a condition that evaluates to  is false, and a condition that evaluates to non-zero is treated as true.","Each of the five main types of events  is discussed below, in turn, along with corresponding event code for effectuating and\/or responding to the event .","Storage of the License ","The license  can be written according to the flex language to allow storage in the license store  or elsewhere only if certain conditions  have been met, such as for example having a relatively current DRM black box . Further, upon storing the license , such license  can effectuate actions  such as creating a play count and\/or selection counter in the DRM state store  or elsewhere.","An example of ONSTORE event code within a license  for responding to a request to store the license  is as follows:",{"@attributes":{"id":"p-0377","num":"0376"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ONSTORE>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<CONDITION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<! [CDATA["]},{"entry":[{},"versioncompare(drm.version, \u201c2.0.0.0\u201d ) >= 0"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/CONDITION>"]},{"entry":[{},"<ACTION>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<! [CDATA]"]},{"entry":[{},"!exists (secstate.playcount) ? (secstate.playcount=5;"]},{"entry":[{},"secstate.cdcachecount=1; 1) :1"]},{"entry":[{},"]]>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ACTION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ONSTORE>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As may be appreciated, such ONSTORE event code requires as a condition  of storage of the license  that the DRM system  have at least a certain version number. As may also be appreciated, upon in fact storing the license , the ONSTORE event code effectuates an action  that creates state data for the license  if such state data does not already exist.","Generally, the ONSTORE condition  must be evaluated as true before the license is stored. If the ONSTORE condition  is not present, it is assumed true. The ONSTORE action  is evaluated after storing the license , and is employed (for example) to initialize a secure state corresponding to the license  with state data. Such state data preferably persists even if the license  is deleted. Thus, it is a good idea to check if the state data exists before initializing state variables such as play count. Secure state variables cannot be read unless they exist in the secure state. Assignments will create such variables if not already existing. However, retrieval of non-existing secure state variables fails.","Selection of the License ","The license  can be written according to the flex language to allow selection thereof for purposes of rendering corresponding content  only if certain conditions  have been met, such as for example having the content  present and\/or accessible by the DRM system , having a rendering application with a minimum security level, and within a specified date range. Further, upon selection of the license , such license  can effectuate actions  such as incrementing a play count and\/or selection counter in the DRM state store.","An example of ONSELECT event code within a license  for responding to a request to select the license  is as follows:",{"@attributes":{"id":"p-0382","num":"0381"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ONSELECT>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<CONDITION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<! [CDATA["]},{"entry":[{},"machine.datetime <= #19991231 09:00# &&"]},{"entry":[{},"content.CID == \u201c{0000050B-0000-0010-8000-00AA006D2EA4}\u201c &&"]},{"entry":[{},"app.minseclevel >= 500"]},{"entry":[{},"]]>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/CONDITION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ONSELECT>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As may be appreciated, such ONSELECT event code requires as a condition  of selection of the license  that the current date be before a set date, that the corresponding content be on the computing device , and that the rendering application have a minimum security level. As may also be appreciated, upon in fact selecting the license , the ONSELECT event code does not effectuate any actions , although it is to be appreciated that actions  could in fact be effectuated without departing from the spirit and scope of the present invention.","Generally, the ONSELECT condition  is evaluated when the license is selected. If the condition  is true the license can be selected; otherwise, the license cannot be selected. If the condition  is missing, it is assumed true. If this event has action , the action  is evaluated after the license  is selected.","Deletion of the License ","The license  can be written according to the flex language to allow deletion thereof only if certain conditions  have been met, such as for example ensuring that state information relating to the license  continues to be stored in the state store . Correspondingly, upon deleting the license , such license  can effectuate actions  such as deleting the state information relating to the license  and stored in the state store .","An example of ONDELETE event code within a license  for responding to a request to delete the license  is as follows:",{"@attributes":{"id":"p-0387","num":"0386"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ONDELETE>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<CONDITION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<! [CDATA["]},{"entry":[{},"machine.datetime >= #20001231 09:00# &&"]},{"entry":[{},"]]>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/CONDITION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ONDELETE>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As may be appreciated, such ONDELETE event code requires as a condition  of deletion of the license  that the current date be after a set date. As may also be appreciated, upon in fact deleting the license , the ONDELETE event code does not effectuate any actions , although it is to be appreciated that actions  could in fact be effectuated without departing from the spirit and scope of the present invention.","Generally, the ONDELETE condition  is evaluated when the license is deleted. If the condition  is true the license can be deleted; otherwise, the license cannot be deleted. If the condition  is missing, it is assumed true. If this event has action , the action  is evaluated after the license is deleted.","Action with Respect to the License ","A selection of a license  usually occurs in connection with an action event, such as \u2018play\u2019, \u2018print\u2019, \u2018copy\u2019, etc. with regard to the corresponding content . Note that an \u2018action event\u2019 is not an action , but is a request from a rendering application or the like. According to the flex language, then, the license  may specify several different \u2018action events\u2019, and more particularly conditions  precedent and\/or actions  to be effectuated with regard to each action event. Each action event is initiated by a rendering application seeking for example to render the content  corresponding to the license . The license  may thus be written according to the flex language to address each such action event that a rendering application may initiate, or only some of such action events. The license  can be written to allow the action event to proceed only if certain conditions  have been met, such as having a play count in the state store  greater than zero. Further, on the occurrence of the action event, the license  can take actions such as decrementing the play count in the state store .","Several examples of ONACTION event code within a license  for responding to a request to take action with respect to content  corresponding to the license  are as follows. Each ONACTION event code example is differentiated from others by an action type such as PLAY, RESTORE, BURN CD, etc. Notably, the action type is dictated by the types of actions allowed by the rendering application attempting to render the content  corresponding to the license . Accordingly, it is to be appreciated that the license  must be written to support at least some of the types of action that the rendering application is capable of performing. Consequently, failure to include in a selected license  ONACTION event code corresponding to a type of action of which the rendering application is capable of performing in effect prevents such rendering application from performing such type of action, at least with regard to such selected license .",{"@attributes":{"id":"p-0392","num":"0391"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ONACTION type=\u201cPLAY\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<CONDITION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<! [CDATA["]},{"entry":[{},"secstate.playcount > 0"]},{"entry":[{},"]]>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/CONDITION>"]},{"entry":[{},"<ACTION>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<! [CDATA["]},{"entry":[{},"secstate.playcount\u2212\u2212;"]},{"entry":[{},"]]>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ACTION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ONACTION>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As may be appreciated, such ONACTION-PLAY event code requires as a condition  of play that a play count maintained as state information be greater than zero. As may also be appreciated, upon in fact playing the content , the license  effectuates an action  in which the play count is decremented. Accordingly, based on such ONACTION-PLAY event code, the license  may be employed to render or play the corresponding content  a set number of times, and then no more.",{"@attributes":{"id":"p-0394","num":"0393"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ONACTION type=\u201cBURNCD\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<CONDITION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<! [CDATA["]},{"entry":[{},"app.seclevel >= 1000 && secstate.cdcachecount > 0"]},{"entry":[{},"]]>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/CONDITION>"]},{"entry":[{},"<ACTION>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<! [CDATA["]},{"entry":[{},"secstate.cdcachecount\u2212\u2212;"]},{"entry":[{},"]]>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ACTION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ONACTION>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Such ONACTION-BURNCD event code requires as a condition  of burning (i.e., writing) a compact disk (CD) based on the corresponding content  that the application have a minimum security level and that a cache count of CD burns be greater than zero. Upon in fact burning the CD, the license  effectuates an action  in which the cache count of CD burns is decremented. Accordingly, based on such ONACTION-PLAY event code, the license  may be employed to burn a CD a set number of times, and then no more.",{"@attributes":{"id":"p-0396","num":"0395"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ONACTION type=\u201cBackup\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<CONDITION>"]},{"entry":[{},"<! [CDATA["]},{"entry":[{},"1"]},{"entry":[{},"]]>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/CONDITION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ONACTION>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Such ONACTION-BACKUP event code is examined upon the backing up the license  (i.e., saving a copy of the license  in another location). Here, the condition portion  of the event code is simply the value 1 or true, whereby backing up is always allowed. Alternatively, the condition portion  could simply be omitted to achieve the same result. Upon in fact backing up the license , the ONACTION-BACKUP event code does not effectuate any actions , although it is to be appreciated that actions  could in fact be effectuated without departing from the spirit and scope of the present invention.",{"@attributes":{"id":"p-0398","num":"0397"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ONACTION type=\u201cRestore\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<CONDITION>"]},{"entry":[{},"<!  [CDATA["]},{"entry":[{},"1"]},{"entry":[{},"]]>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/CONDITION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ONACTION>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Similar to the ONACTION-BACKUP event code above, the ONACTION-RESTORE event code is examined upon the restoring of a backed-up license  (i.e., obtaining the saved copy of the license  from the another location). Here, and again, the condition portion  of the event code is simply the value 1 or true, whereby restoring is always allowed. Also again, the condition portion  could simply be omitted to achieve the same result. Upon in fact restoring the license , the ONACTION-RESTORE event code does not effectuate any actions , although it is to be appreciated that actions  could in fact be effectuated without departing from the spirit and scope of the present invention.","Generally, each piece of ONACTION event code includes an identifying type which indicates the corresponding type of action event. The condition  associated with the event code is evaluated when the rendering application requests the type of action event with regard to the license . If the condition  is true, the action event is allowed; otherwise, the action event is not allowed. If the condition  is missing, it is assumed true. If the action event is allowed and after the action event takes place, any action  associated with the event code is performed.","Clock Rollback","An unscrupulous user may attempt to subvert a date- or time-based license term by rolling back the clock  () on the computing device  upon which the DRM system  resides or another appropriate clock. A clock rollback, then, is a special event  wherein the DRM system  determines that the clock  has in fact been rolled back. The license  may thus be written according to the flex language to effectuate actions  such as incrementing a rollback counter or even deleting the license  itself. Note that conditions  are not believed necessary in the case of a clock rollback event, inasmuch as the license  is not allowing the clock rollback event  but instead is responding to such event . Nevertheless, conditions  may be employed in connection with such clock rollback event  without departing from the spirit and scope of the present invention.","An example of ONCLOCKROLLBACK event code within a license  for responding to a detected clock rollback is as follows:",{"@attributes":{"id":"p-0403","num":"0402"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ONCLOCKROLLBACK>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ACTION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<!  [CDATA["]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"deletelicense()"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"]]>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ACTION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ONCLOCKROLLBACK>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Here, it is seen that upon accessing the license , and upon detecting a clock rollback, the license  effectuates a delete action  whereby such license  is deleted from the computing device . Of course, a less draconian measure may be taken without departing from the spirit and scope of the present invention. Such other examples are discussed below.","Generally, the ONCLOCKROLLBACK event code requires that the computing device  and\/or DRM system  have a mechanism to keep track of the clock  on the computing device  in such a way that clock rollbacks can be detected. Such a mechanism is discussed below. Generally, any such mechanism may be employed without departing from the spirit and scope of the present invention. Whenever a clock rollback is detected, the DRM system  should give every license  with ONCLOCKROLLBACK event code a chance to react to the detected rollback by performing the action(s)  specified in such event code. Note that in the case of an ONCLOCKROLLBACK event , the license does not allow the event  to proceed but instead reacts to such event  upon the occurrence thereof.","Event code corresponding to an event can be missing or not present from a license , in which case there is no condition  to check or action  to take for the corresponding event . Except for ONACTION event code, the absence of the event code in the license  implicitly allows the corresponding event . For example, missing ONSELECT event code means that the license  does not have conditions  for the selection of the license  and hence the selection may proceed unconditionally.","As should be evident, ONACTION event code is required for each corresponding action event allowed by the license . Correspondingly, missing ONACTION event code for an action event means that the action event is not allowed by the license  under any circumstances. ONACTION event code must be present to effectuate an action event for the reason that such ONACTION event code represents the actual rights given by the license. In contrast, other types of event code are related to the license  itself.","Note that in effectuating an action  in connection with an event , event code in a license  may set forth a test for a condition. Such condition is then a condition precedent to effectuating the action, as opposed to a condition  precedent to allowing an event to proceed.","In one embodiment of the present invention, the value for a variable as specified in event code in the license  according to the flex language is fetched from a specific place depending on the category. For example, content.CID is retrieved from the corresponding content , license.LID is retrieved from the license  itself, secstate.playcount is retrieved from the state store , and app.seclevel is retrieved from the rendering application. An expression containing an undefined variable terminates with an retrieval error, and a condition  with such expression is treated as false. To check the existence of a variable, one can use an exists function or the like.","Generally, and referring now to , upon receiving a request for an event  from a rendering application or the like with regard to content  (step ), event code corresponding to the event  in the a corresponding license  is located (step ). Note that more than one corresponding license  may need to be reviewed prior to locating the necessary event code. Note also that the located event code may not approve the request (step ), in which case event code in another corresponding license  (if available) may be located and examined. Any appropriate mechanism for locating and reviewing the event code in corresponding licenses  may be employed without departing from the spirit and scope of the present invention. Such mechanism is known or should be apparent and therefore need not be disclosed herein in any detail.","Assuming appropriate event code is located, such event code is then examined. In particular, any condition  within the event code is evaluated as either true or false (step ). If true, the requested event  is allowed to proceed (step ); otherwise, the requested event  is not allowed to proceed based on the license  of the located event code (step ). In the latter case, it is preferable that the requested event be finally denied (step ) if no other appropriate event code that may potentially approve the request remains to be examined (step ). However, if such other appropriate event code exists control is returned to step  at which the condition  within such other event code is evaluated.","Assuming now that the requested event  is allowed to proceed, as at step , the rendering application performs such event  (step ), and any action  within the approving event code is executed (step ). With the event  being allowed to proceed and the action  of the approving event code being executed, the approving event code is then finished (step ).","An example of a license  which includes the events  discussed above is set forth in the Appendix attached hereto.","As shown above and as set forth in the Appendix attached thereto, the license  of the present invention may be written in a code or the like to specify the conditions  to be tested for prior to allowing an event  to proceed and\/or actions  to be taken once the event  has been allowed to proceed. Of course, the license  still includes the content key (KD) for the corresponding content . In addition, the license  may include tying information for tying the license to one or more DRM systems , as is more fully detailed in U.S. patent application Ser. No. 09\/525,509, incorporated by reference herein in its entirety. Also, the license  may include restore information in the event the license  was restored, as is more fully detailed in U.S. patent application Ser. No. 09\/526,290, incorporated by reference herein in its entirety. Further, the license  may include other information without departing from the spirit and scope of the present invention.","Clock Rollback Detection Mechanism","As discussed above, the ONCLOCKROLLBACK event code requires that the computing device  and\/or DRM system  have a mechanism to keep track of the clock  on the computing device  or elsewhere in such a way that clock rollbacks can be detected. Referring now to , such a mechanism operates in the following manner.","Generally, the mechanism has regular access to the clock , and periodically reads such clock  to determine if the clock  has a time earlier than that which was noted previously. Since time presumably cannot be made to go backwards, at least in this universe, the clock  can have a time earlier than that which was previously noted only if the clock  was rolled back.","To detect a clock rollback, then, the mechanism initially obtains a current time from the clock  (step ) and stores the initially obtained time in the secure (state) store  as the stored time (step ). Thereafter, the mechanism regularly obtains a current ((n)th) time from the clock  (step ). In one embodiment of the present invention, regularly obtaining the current time is accomplished on a periodic basis such as once a minute, once every 90 seconds, once an hour, or the like. If so, timing is preferably achieved independent of the system clock , such as for example by way of a count-down timer. In another embodiment of the present invention, regularly obtaining the current time is accomplished on an event-driven basis, such as for example upon initialization of the DRM system , upon receiving a license  or content , upon receiving a request to employ a license , or the like.","With the obtained current ((n)th) time from the clock  (step ), the mechanism, obtains the stored ((n-)th) time from the state store  (step ), compares such current time to such stored time (step ), and determines whether the current time is earlier than the stored time (step ). If the current time is not earlier than the stored time, as should normally be the case, the mechanism determines that no clock rollback has occurred (step ), and the current time is then stored in the state store  as a new stored time (step ). Such new stored time is then available to the mechanism for comparison to a new current time when the mechanism repeats the process (step ). Note that in repeating such process, and as seen in , action proceeds directly to step , where the mechanism once again obtains a current time from the clock . Thus, steps  and  need only be performed once as an initialization procedure.","If, however, the current time as obtained from the clock  is in fact earlier than the stored time, and again since time presumably cannot be made to go backwards, at least in this universe, the mechanism determines that a clock rollback has occurred (step ) based on such current time being earlier than such stored time. Thereafter, and as discussed in more detail below, the mechanism and\/or the DRM system  take a predetermined course of action based on the determination that the clock rollback occurred (step ).","In one embodiment of the present invention, after step . the current time is then stored in the state store  as a new stored time (step ), and such new stored time is then available to the mechanism for comparison to a new current time when the mechanism repeats the process (step ). That is, even though the current time is suspect due to the determined clock rollback, such current time is nevertheless stored as the new current time, and the mechanism continues with its regular determination.","Although the mechanism could stop and not repeat the process, such an action may not be desirable, especially if the clock rollback is viewed as a relatively minor matter not requiring drastic action. Importantly, in the case where the mechanism does in fact repeat the process, failure to store the suspect current time as the new stored time would result in a situation where the mechanism repeatedly determines a clock rollback until the clock is rolled forward beyond the pre-rollback stored time. Especially if the predetermined course of action is costly in resources or time, or if each instance of the predetermined course of action has a cost, it may be better to have only one determined clock rollback than multiple ones.","On the occurrence of a clock rollback and the running of ONCLOCKROLLBACK event code, the current time is not stored as the stored time until after such ONCLOCKROLLBACK event code has been called for each license . Thus, a license  can use the stored time and current time to determine the temporal amount of the roll back (10 seconds, 10 days, 2 years, etc.) and perhaps employ such information in evaluating conditions in such event code. For example, the event code may ignore the clock rollback if the stored time is prior to an expiration time set according to the license .","In the event that the stored time is missing from (deleted from) the state store , it should be presumed that a user deleted such stored time in attempt to avoid a time-based license term. Accordingly, if the stored time is missing from he state store , the mechanism determines that a clock rollback has occurred (step ) based on such missing stored time, and the mechanism and\/or the DRM system  take the predetermined course of action based on the determination that the clock rollback occurred (step ).","Note that by regularly storing the current time in the state store  or elsewhere as the stored time, the mechanism provides a convenient saved variable that each license  and the DRM system  may refer to for time-based checks.","In one embodiment of the present invention, the predetermined course of action (i.e., step ) comprises examining each license  in the license store  for ONCLOCKROLLBACK event code, and if present running such event code to effectuate such event . As set forth above, such ONCLOCKROLLBACK event code in each license  may effectuate an action  whereby:\n\n","A clock rollback such as that determined in accordance with the present invention results from the aforementioned situation where an unscrupulous user is attempting to subvert a date- or time-based license term. Notably, such determined clock rollback can also result from an inadvertent situation where an innocent user accidentally adjusts the clock  backward, or even in an intentional situation where the innocent user purposefully adjusts the clock  backward to a correct time. Appropriate care must be taken, then, in composing the ONCLOCKROLLBACK action  in each license  to implement a remedy that is severe enough to punish the unscrupulous user and yet flexible enough to not overly punish the innocent user. In this regard, deletion of a license upon a single determined clock rollback may be considered too severe in some circumstances, while a series of gradually increasing punishments upon several determined clock rollbacks may be considered more reasonable.","Note that the concept of an ONCLOCKROLLBACK event  and a mechanism to determine a clock rollback may be extended to any other license-related non-decreasing or even non-increasing value without departing from the spirit and scope of the present invention. For example, a decreasing play count maintained in connection with a license that should never increase may be the basis for an event  wherein the play count is determined to have nevertheless increased and a corresponding mechanism to determine a play count increase.","Similarly, the concept of an ONCLOCKROLLBACK event  and a mechanism to determine a clock rollback may be extended to determining a clock roll-forward event . As may be appreciated, an unscrupulous user may attempt to subvert a date- or time-based license term by rolling forward the clock  in addition to or instead of rolling back the clock . A clock roll forward, then, is a special event  wherein the DRM system  determines that the clock  has in fact been rolled forward. Note, though, that in this instance, since time normally goes forward, comparison of a stored time to a current time from the system clock  is not necessarily indicative of a clock roll-forward event . Instead, the current time must be referenced to an expected current time as provided by an appropriate source. As one skilled in the art will appreciate, such source may be a secure time source, a count-up timer independent of the system clock , or the like.","Conclusion","The programming necessary to effectuate the processes performed in connection with the present invention is relatively straight-forward and should be apparent to the relevant programming public. Accordingly, such programming is not attached hereto. Any particular programming, then, may be employed to effectuate the present invention without departing from the spirit and scope thereof.","In the foregoing description, it can be seen that the present invention comprises a new and useful enforcement architecture  that allows the controlled rendering or playing of arbitrary forms of digital content , where such control is flexible and definable by the content owner of such digital content . Also, the present invention comprises a new useful controlled rendering environment that renders digital content  only as specified by the content owner, even though the digital content  is to be rendered on a computing device  which is not under the control of the content owner. Further, the present invention comprises a flexible language with which an event-based license  may be composed, and a mechanism and method for determining a special event, such as a clock rollback, wherein a system value changes in a manner counter to that which is expected, typically as a result of an unscrupulous user trying to subvert a license term based on the system value.","It should be appreciated that changes could be made to the embodiments described above without departing from the inventive concepts thereof. It should be understood, therefore, that this invention is not limited to the particular embodiments disclosed, but it is intended to cover modifications within the spirit and scope of the present invention as defined by the appended claims.","The following is a sample license for rendering digital content comprising a particular motion picture and\/or sound presentation. The license includes many features including the features of the present invention:",{"@attributes":{"id":"p-0433","num":"0437"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u201c1.0\u201d ?>"},{"entry":"<LICENSE version=\u201c2.0.0.0\u201d>"},{"entry":"<LICENSORINFO>"},{"entry":"\u2003<DATA>"},{"entry":"\u2003\u2003<LID>{00000507-0000-0010-8000-00AA006D2EA4 }<\/LID>"},{"entry":"\u2003\u2003<KEYID>Ygiiuk82iok1==<KEYID>"},{"entry":"\u2003\u2003<ISSUEDDATE>20000102 23:20:14Z<\/ISSUEDDATE>"},{"entry":"\u2003\u2003<CONTENTPUBKEY>pokjk8ijkjk92jkjk==<\/CONTENTPUBKEY>"},{"entry":"\u2003\u2003<PRIORITY>15<\/PRIORITY>"},{"entry":"\u2003\u2003<META>"},{"entry":"\u2003\u2003\u2003<NAME>License for Titanic movie<\/NAME>"},{"entry":"\u2003\u2003\u2003<DESCRIPTION>License to play on PC and burn CD"},{"entry":"\u2003\u2003\u2003<\/DESCRIPTION>"},{"entry":"\u2003\u2003\u2003<TERMS>This license is not transferable<\/TERMS>"},{"entry":"\u2003\u2003\u2003<TRANSACTIONID>12344<\/TRANSACTIONID>"},{"entry":"\u2003\u2003\u2003<LICENSORNAME>Reciprocal<\/LICENSORNAME>"},{"entry":"\u2003\u2003\u2003<LICENSORSITE>www.reciprocal.com<\/LICENSORSITE>"},{"entry":"\u2003\u2003<\/META>"},{"entry":"\u2003\u2003<ONSTORE>"},{"entry":"\u2003\u2003\u2003<CONDITION>"},{"entry":"\u2003\u2003\u2003\u2003<![CDATA["},{"entry":"\u2003\u2003\u2003\u2003versioncompare(drm.version, \u201c2.0.0.0\u201d) >= 0"},{"entry":"\u2003\u2003\u2003\u2003]]>"},{"entry":"\u2003\u2003\u2003<\/CONDITION>"},{"entry":"\u2003\u2003\u2003<ACTION>"},{"entry":"\u2003\u2003\u2003\u2003<![CDATA["},{"entry":"\u2003\u2003\u2003\u2003!exists(secstate.playcount)?(secstate.playcount=5;"},{"entry":"\u2003\u2003\u2003\u2003secstate.cdcachecount=1;1):1"},{"entry":"\u2003\u2003\u2003\u2003]]>"},{"entry":"\u2003\u2003\u2003<\/ACTION>"},{"entry":"\u2003\u2003<\/ONSTORE>"},{"entry":"\u2003\u2003<ONSELECT>"},{"entry":"\u2003\u2003\u2003<CONDITION>"},{"entry":"\u2003\u2003\u2003\u2003<![CDATA["},{"entry":"\u2003\u2003\u2003\u2003machine.datetime <= #19991231 09:00# &&"},{"entry":"\u2003\u2003\u2003\u2003content.CID =="},{"entry":"\u2003\u2003\u2003\u2003\u201c{0000050B-0000-0010-8000-00AA006D2EA4}\u201d &&"},{"entry":"\u2003\u2003\u2003\u2003app.minseclevel >= 500"},{"entry":"\u2003\u2003\u2003\u2003]]>"},{"entry":"\u2003\u2003\u2003<\/CONDITION>"},{"entry":"\u2003\u2003<\/ONSELECT>"},{"entry":"\u2002\u2003\u2003<ONDELETE>"},{"entry":"\u2003\u2003\u2003<CONDITION>"},{"entry":"\u2003\u2003\u2003\u2003<![CDATA["},{"entry":"\u2003\u2003\u2003\u2003machine.datetime >= #20001231 09:00# &&"},{"entry":"\u2003\u2003\u2003\u2003]]>"},{"entry":"\u2003\u2003\u2003<\/CONDITION>"},{"entry":"\u2003\u2003\u2002<\/ONDELETE>"},{"entry":"\u2003\u2003<ONCLOCKROLLBACK>"},{"entry":"\u2003\u2003\u2003<ACTION>"},{"entry":"\u2003\u2003\u2003\u2003<![CDATA["},{"entry":"\u2003\u2003\u2003\u2003\u2003deletelicense( )"},{"entry":"\u2003\u2003\u2003\u2003]]>"},{"entry":"\u2003\u2003\u2003<\/ACTION>"},{"entry":"\u2003\u2003<\/ONCLOCKROLLBACK>"},{"entry":"\u2003\u2003\u2002<ONACTION type=\u201cPLAY\u201d>"},{"entry":"\u2003\u2003\u2003<CONDITION>"},{"entry":"\u2002\u2003\u2003\u2003\u2003<![CDATA["},{"entry":"\u2002\u2003\u2003\u2003\u2003secstate.playcount > 0"},{"entry":"\u2002\u2003\u2003\u2003\u2003]]>"},{"entry":"\u2003\u2003\u2003<\/CONDITION>"},{"entry":"\u2003\u2003\u2003<ACTION>"},{"entry":"\u2002\u2003\u2003\u2003\u2003<![CDATA["},{"entry":"\u2002\u2003\u2003\u2003\u2003secstate.playcount--;"},{"entry":"\u2002\u2003\u2003\u2003\u2003]]>"},{"entry":"\u2003\u2003\u2003<\/ACTION>"},{"entry":"\u2003\u2003<\/ONACTION>"},{"entry":"\u2003\u2003<ONACTION type=\u201cBURNCD\u201d>"},{"entry":"\u2003\u2003\u2003<CONDITION>"},{"entry":"\u2002\u2003\u2003\u2003\u2003<![CDATA["},{"entry":"\u2002\u2003\u2003\u2003\u2003app.seclevel >= 1000 && secstate.cdcachecount > 0"},{"entry":"\u2002\u2003\u2003\u2003\u2003]]>"},{"entry":"\u2003\u2003\u2003<\/CONDITION>"},{"entry":"\u2003\u2003\u2003<ACTION>"},{"entry":"\u2002\u2003\u2003\u2003\u2003<![CDATA["},{"entry":"\u2002\u2003\u2003\u2003\u2003secstate.cdcachecount--;"},{"entry":"\u2002\u2003\u2003\u2003\u2003]]>"},{"entry":"\u2003\u2003\u2003<\/ACTION>"},{"entry":"\u2003\u2003<\/ONACTION>"},{"entry":"\u2003\u2003<ONACTION type=\u201cBackup\u201d>"},{"entry":"\u2002\u2003\u2003\u2003\u2003<CONDITION>"},{"entry":"\u2002\u2003\u2003\u2003\u2003<![CDATA["},{"entry":"\u2002\u2003\u2003\u2003\u20031"},{"entry":"\u2002\u2003\u2003\u2003\u2003]]>"},{"entry":"\u2003\u2003\u2003<\/CONDITION>"},{"entry":"\u2003\u2003<\/ONACTION>"},{"entry":"\u2003\u2003<ONACTION type=\u201cRestore\u201d>"},{"entry":"\u2002\u2003\u2003\u2003\u2003<CONDITION>"},{"entry":"\u2002\u2003\u2003\u2003\u2003<![CDATA["},{"entry":"\u2002\u2003\u2003\u2003\u20031"},{"entry":"\u2002\u2003\u2003\u2003\u2003]]>"},{"entry":"\u2003\u2003\u2003<\/CONDITION>"},{"entry":"\u2003\u2003<\/ONACTION>"},{"entry":"\u2003\u2003<ENABLINGBITS>"},{"entry":"\u2003\u2003\u2003<ALGORITHM type=\u201cMSDRM\u201d \/>"},{"entry":"\u2003\u2003\u2003<PUBKEY type=\u201cmachine\u201d>WEJKJKJK==<\/PUBKEY>"},{"entry":"\u2003\u2003\u2003<VALUE>AAAABBBBCCCCDDDD<\/VALUE>"},{"entry":"\u2003\u2003\u2003<SIGNATURE>anvjkhihs==<\/SIGNATURE>"},{"entry":"\u2003\u2003\u2002<\/ENABLINGBITS>"},{"entry":"\u2003\u2003\u2002<ENABLINGBITS>"},{"entry":"\u2003\u2003\u2003<ALGORITHM type=\u201cMSDRM\u201d \/>"},{"entry":"\u2003\u2003\u2003<PUBKEY type=\u201cmachine\u201d >WEJKJKJKert==<\/PUBKEY>"},{"entry":"\u2003\u2003\u2003<VALUE>AAAABBBBCCCCDDDD<\/VALUE>"},{"entry":"\u2003\u2003\u2003<SIGNATURE>anvjkhihssfs==<\/SIGNATURE>"},{"entry":"\u2003\u2003\u2002<\/ENABLINGBITS>"},{"entry":"\u2003\u2003<\/DATA>"},{"entry":"\u2003\u2003<SIGNATURE>"},{"entry":"\u2003\u2003\u2003<HASHALGORITHM type=\u201cSHA\u201d \/>"},{"entry":"\u2003\u2003\u2003<SIGNALGORITHM type=\u201cMSDRM\u201d \/>"},{"entry":"\u2003\u2003\u2003<VALUE>XXXYYYXXXYYYXXXYYY<\/VALUE>"},{"entry":"\u2003\u2003<\/SIGNATURE>"},{"entry":"\u2003\u2003<CERTIFICATECHAIN type=\u201cMSDRM\u201d>"},{"entry":"\u2003\u2003<!- The first one is the certificate issued by the root authority --"},{"entry":"\u2003\u2003>"},{"entry":"\u2003\u2003<!- The last one is the one issued to the license server -->"},{"entry":"\u2003\u2003\u2003<CERTIFICATE>ANJJNDJN<\/CERTIFICATE>"},{"entry":"\u2003\u2003\u2003<CERTIFICATE>BBHBHDBF<\/CERTIFICATE>"},{"entry":"\u2003\u2003<\/CERTIFICATECHAIN>"},{"entry":"<\/LICENSORINFO>"},{"entry":"<DRMRESTOREINFO>"},{"entry":"\u2003\u2003<DATA>"},{"entry":"\u2002\u2003\u2003\u2003\u2003<LID>{00000507-0000-0010-8000-00AA006D2EA4}<\/LID>"},{"entry":"\u2002\u2003\u2003\u2003\u2003<ENABLINGBITS>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<ALGORITHM type=\u201c MSDRM\u201d >"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<PUBKEY type=\u201c machine\u201d >WEJKJKJK==<\/PUBKEY>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<VALUE>AAAABBBBCCCCDDDD<\/VALUE>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<SIGNATURE>anvjkhihs==<\/SIGNATURE>"},{"entry":"\u2002\u2003\u2003\u2003\u2003<\/ENABLINGBITS>"},{"entry":"\u2003\u2003<\/DATA>"},{"entry":"\u2003\u2003<SIGNATURE>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<HASHALGORITHM type=\u201c SHA\u201d >"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<SIGNALGORITHM type=\u201c MSDRM\u201d >"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<VALUE>AAAABBBBCCCCDDDD<\/VALUE>"},{"entry":"\u2003\u2003<\/SIGNATURE>"},{"entry":"<\/DRMRESTOREINFO>"},{"entry":"<\/LICENSE>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The license has LICENSESORINFO to capture all the information packaged at the license server. DRMRESTOREINFO section is added if and when the license is restored.","LICENSORINFO Data",{"@attributes":{"id":"p-0435","num":"0000"},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":"LID"}},"A unique ID for the license. The secure state on the client machine for a license is tied to this LID. The license generator automatically generates this field. The license server cannot set this field.\n\n","The key id associated with the license. The key may be tied to the key id. When a license is searched in the license store for particular content, it is necessary to match the key id. The key id can be any text and should not be binary. A GUID string is highly recommended to avoid collisions.\n\n","The date the license was issued, in GMT. The license generator automatically generates this field at the time of signing the license.\n\n","This field indicates the public key to be used to verify the signature of the content header on the client machine every time the content is used. This field is optional. This is used to prevent a user from tampering with the content header after getting a license. This feature is useful only if the license uses a content variable (e.g. content.CID) and we want to make sure it was not tampered with.\n\n","This field is used to help the client select the appropriate license when there are multiple licenses for the same content. The field indicates the priority of the license. The priority  indicates the lowest priority and priority LONG_MAX indicates the highest priority. The license enumeration process at the client will select licenses based on this priority. So, do not issue a license with priority  right away as it makes it impossible to deliver another license (e.g. pre-deliver) that should be selected after the original one is used up.","The next few fields give meta data about the license. These are some of the fields that are given for sample. The DRM design does not depend on specific fields. As far as DRM is concerned, they are meta data about the license. The API allows a license server to add any kind of data they want to place in the license. For example, it can add a tag indicating the type of license. On the client side, this data is made available to the application using DRM directly but not for an application that uses SDK. Thus, the specific information placed in this section depends on the availability of applications that can make use of this data. The license servers can add or remove fields in this section at any time. Inside the META section, the license server can supply attribute value pairs.\n\n","This tag is used to specify information to unlock the content. The sub-fields indicate the parameters needed.\n\n","This section is used to sign the DATA section. The sub-fields of this section are HASHALGORITHM, SIGNALGORITHM, and VALUE.\n\n","This section is used to indicate the certificate chain. The certificate chain is used to indicate to the DRM Client that the license server was authorized to issue licenses. The root authority may be Microsoft Corporation or the like. Each child of this tag represents a certificate. The first certificate represents the certificate issued by the root authority. The DRM client has the public key of the root authority to verify the certificates. The last certificate is the one issued to the license server. The public key in this certificate is used to verify the signature of the license.\n\n","This tag represents the certificate blob.","Operators","This section describes the various operators allowed in an expression to be evaluated in a license and how the operators behave for various types. The precedence of these operators are as defined for the C language.",{"@attributes":{"id":"p-0447","num":"0474"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Operator","Operand1","Operand2","Result Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["+","LONG",{},"Unary plus"]},{"entry":["+","LONG","LONG","Binary addition."]},{"entry":["+","STRING","STRING","Concatenation of strings"]},{"entry":["\u2212","LONG",{},"Unary minus"]},{"entry":["\u2212","LONG","LONG","Binary subtraction."]},{"entry":["*","LONG","LONG","Binary multiplication."]},{"entry":["\/","LONG","LONG","Integer Division. E.g. 7\/3"]},{"entry":[{},{},{},"is 2"]},{"entry":["%","LONG","LONG","Arg1 % Arg2. 7 % 3 is"]},{"entry":[{},{},{},"1."]},{"entry":["++","LONG",{},"Unary post or pre incre-"]},{"entry":[{},{},{},"ment operator. Variable"]},{"entry":[{},{},{},"should support set opera-"]},{"entry":[{},{},{},"tion."]},{"entry":["\u2212\u2212","LONG",{},"Unary post or pre decre-"]},{"entry":[{},{},{},"ment operator. Variable"]},{"entry":[{},{},{},"should support set opera-"]},{"entry":[{},{},{},"tion."]},{"entry":["=","LONG","LONG","simple assignment"]},{"entry":["=","STRING","STRING","simple assignment"]},{"entry":["=","DATETIME","DATETIME","simple assignment"]},{"entry":["< <= > >= == !=","LONG","LONG","Relational operator."]},{"entry":[{},{},{},"Result LONG. The value"]},{"entry":[{},{},{},"will be 0 or 1."]},{"entry":["< <= > >= == !=","STRING","STRING","Just like for LONG"]},{"entry":["< <= > >= == !=","DATETIME","DATETIME","Just like for LONG"]},{"entry":["!","LONG","N\/A","Unary Not. Result"]},{"entry":[{},{},{},"LONG. 0 or 1."]},{"entry":["&&","LONG","LONG","Logical AND. Result is 0"]},{"entry":[{},{},{},"or 1."]},{"entry":["||","LONG","LONG","Logical OR. Result is 0"]},{"entry":[{},{},{},"or 1."]},{"entry":[";","LONG","LONG","The result is the value of"]},{"entry":[{},{},{},"the 2operand. Useful"]},{"entry":[{},{},{},"for sequence. a ; 1 re-"]},{"entry":[{},{},{},"turns 1. a is not evaluated"]},{"entry":[{},{},{},"as its value is not needed."]},{"entry":[{},{},{},"However, any expression"]},{"entry":[{},{},{},"before ; goes through"]},{"entry":[{},{},{},"normal evaluation. For"]},{"entry":[{},{},{},"example, in 1 + 2 ; 4,"]},{"entry":[{},{},{},"1 + 2 is evaluated."]},{"entry":["()",{},{},"Allows to override prece-"]},{"entry":[{},{},{},"dence"]},{"entry":["?:","ANY","ANY","Conditional expression."]},{"entry":[{},{},{},"E.g.: (a < b) ? c : d."]},{"entry":[{},{},{},"If condition a < b is true,"]},{"entry":[{},{},{},"then the value of this is c"]},{"entry":[{},{},{},"and d is not evaluated. If"]},{"entry":[{},{},{},"the condition a < b is"]},{"entry":[{},{},{},"false, then the value is d"]},{"entry":[{},{},{},"and c is not evaluated."]},{"entry":[",","ANY","ANY","This is used for param-"]},{"entry":[{},{},{},"eter list for function"]},{"entry":[{},{},{},"calls. The operator is"]},{"entry":[{},{},{},"like no-op. The two oper-"]},{"entry":[{},{},{},"ands are kept for passing"]},{"entry":[{},{},{},"to the function."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}},"br":{}},"An expression to be evaluated in a license can contain some pre-defined function calls. The following table shows the list of functions supported and their description. Functions are evaluated as soon the argument list is closed.",{"@attributes":{"id":"p-0449","num":"0476"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Function","Arg1","Arg2","Arg3","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["min","LONG","LONG",{},"minimum. Result is LONG"]},{"entry":["max","LONG","LONG",{},"maximum. Result is LONG"]},{"entry":["long","STRING",{},{},"Convert STRING to long. String has syntax"]},{"entry":[{},{},{},{},"[whitespace][sign][number]. number should have at"]},{"entry":[{},{},{},{},"least one digit. It can be decimal or hexadecimal."]},{"entry":[{},{},{},{},"No whitespace allowed after sign. Trailing spaces are ok."]},{"entry":["long","LONG",{},{},"identity operation."]},{"entry":["string","LONG",{},{},"Convert LONG to STRING."]},{"entry":["string","STRING",{},{},"Like identity function."]},{"entry":["string","DATETIME",{},{},"Convert date to string"]},{"entry":["datetime","STRING",{},{},"Converts to date."]},{"entry":["datetime","DATETIME",{},{},"Date (identity operation)"]},{"entry":["dateadd","STRING","LONG","DATETIME","Arg1 can be d (days) or h (hours) or n (minutes) or"]},{"entry":[{},{},{},{},"s (seconds). The corresponding amount specified in Arg2"]},{"entry":[{},{},{},{},"is added to the given datetime to get the target datetime."]},{"entry":[{},{},{},{},"Result is DATTTIME"]},{"entry":["datediff","STRING","DATETIME","DATETIME","Arg3 \u2212 Arg2. Result is given in units as indicated"]},{"entry":[{},{},{},{},"in Arg1. Arg1 can be d or h or n or s. Result is LONG"]},{"entry":["datepart","STRING","DATETIME",{},"Result is LONG. Arg1 can be y or m or d or h or n or s."]},{"entry":["index","STRING","STRING",{},"index of Arg1 in Arg2 if it is found. The first index is"]},{"entry":[{},{},{},{},"0. If not found, return \u22121. Result is LONG"]},{"entry":["length","STRING",{},{},"Length of Arg1. Result is LONG"]},{"entry":["deletelicense",{},{},{},"Delete the current license. Return 1 if successful. 0 else."]},{"entry":["exists","A Variable",{},{},"Checks if variable exists. The method will try to"]},{"entry":[{},{},{},{},"fetch the value and return true if successful. false otherwise."]},{"entry":["versioncompare","string","string",{},"Compares the two strings treating them as versions."]},{"entry":[{},{},{},{},"The result is undefined if the strings are not versions. A"]},{"entry":[{},{},{},{},"version string has the form <n>.<n>.<n>.<n> where"]},{"entry":[{},{},{},{},"<n> is a number."]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}},"br":{}},"An expression to be evaluated in a license can have variables that belong one of several categories. The categories are drm, license, content, machine, server, app, and secstate. Secure state exposes secure state in the client. For each license, a collection of attribute\/value pairs are exposed. It is up to the license to create and access these attributes. Once created, they cannot be deleted. A license can only access attribute value pairs that correspond to this license. The following table enumerates all possible variables that are exposed.",{"@attributes":{"id":"p-0451","num":"0478"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Variable","TYPE","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["drm.version","STRING","The version of DRM. e.g."]},{"entry":[{},{},"\u201c2.0.0.0\u201d. This variable does not"]},{"entry":[{},{},"use build number but rather"]},{"entry":[{},{},"hard-coded value in the client."]},{"entry":["drm.bb.msdrm.version","STRING","The current black box version."]},{"entry":[{},{},"This data is not necessary very"]},{"entry":[{},{},"secure."]},{"entry":["drmk.version","STRING","The version of DRMK on the"]},{"entry":[{},{},"client machine. This variable"]},{"entry":[{},{},"will not exists on a machine with"]},{"entry":[{},{},"no DRMK. Use"]},{"entry":[{},{},"exists(drmk.version) to check"]},{"entry":[{},{},"the presence of DRMK."]},{"entry":["drmk.parameter","STRING","A string to be used to set up"]},{"entry":[{},{},"DRMK. The string should be of"]},{"entry":[{},{},"the form attr = value; attr ="]},{"entry":[{},{},"value; etc. The supported attri-"]},{"entry":[{},{},"butes are spdif, certs,"]},{"entry":[{},{},"mindrmdriverlevel. The default"]},{"entry":[{},{},"values for these are true, false,"]},{"entry":[{},{},"and 1000. spdif = true => allow"]},{"entry":[{},{},"digitalout. certs = true =>"]},{"entry":[{},{},"require certified drivers."]},{"entry":[{},{},"mindrmlevel is used to indicate"]},{"entry":[{},{},"the level of security needed of"]},{"entry":[{},{},"the drivers. Don't use"]},{"entry":[{},{},"mindrmdriverlevel if certs ="]},{"entry":[{},{},"false."]},{"entry":["machine.datetime","DATETIME","The GMT time computed based"]},{"entry":[{},{},"on client machine's clock."]},{"entry":["app.count","LONG","The number of DRM certificates"]},{"entry":[{},{},"used currently. The value is 1 or"]},{"entry":[{},{},"2. If an application uses SDK, it"]},{"entry":[{},{},"will be 2. If an application uses"]},{"entry":[{},{},"DRM directly, it will be 1."]},{"entry":["app.minseclevel","LONG","The min security level as"]},{"entry":[{},{},"computed from the app"]},{"entry":[{},{},"certificates supplied."]},{"entry":["secstate.<attribute>","ANY","Retrieve specified attribute"]},{"entry":[{},{},"value. For example,"]},{"entry":[{},{},"secstate.firstdateofuse If the"]},{"entry":[{},{},"attribute does not exist error is"]},{"entry":[{},{},"returned. For assignments, it is"]},{"entry":[{},{},"created if it does not exist. The"]},{"entry":[{},{},"type is same as the type of"]},{"entry":[{},{},"value assigned to the attribute."]},{"entry":["secstate.global.saveddate","DATETIME","The last saved clock time as"]},{"entry":["time",{},"recorded by the DRM system. It"]},{"entry":[{},{},"is particularly useful for"]},{"entry":[{},{},"ONCLOCKROLLBACK event."]},{"entry":[{},{},"This is read-only field for the"]},{"entry":[{},{},"license."]},{"entry":["license.<attribute>","STRING","The value of attribute in license"]},{"entry":[{},{},"DATA section. For e.g.,"]},{"entry":[{},{},"license.LID or license.KID."]},{"entry":[{},{},"Note that the attribute is case-"]},{"entry":[{},{},"sensitive. It is possible that the"]},{"entry":[{},{},"value is an XML string. For"]},{"entry":[{},{},"example, license.META will"]},{"entry":[{},{},"give the entire XML string for"]},{"entry":[{},{},"META section without the"]},{"entry":[{},{},"META tags."]},{"entry":["content.<attribute>","STRING","The value of attribute in content"]},{"entry":[{},{},"header DATA section. For e.g."]},{"entry":[{},{},"content.CID"]},{"entry":["pmlicense.version","STRING","The version of PM license being"]},{"entry":[{},{},"requested. This field is read-"]},{"entry":[{},{},"only and can be used in"]},{"entry":[{},{},"CONDITION part of the right"]},{"entry":[{},{},"that gives PM license."]},{"entry":["pmlicense.rights","LONG","The rights to be used for"]},{"entry":[{},{},"generating PM license, if PM"]},{"entry":[{},{},"license is allowed to be created."]},{"entry":[{},{},"The default value is 0."]},{"entry":["pmlicense.appseclevel","LONG","The app sec level to be used for"]},{"entry":[{},{},"generating PM license, if PM"]},{"entry":[{},{},"license is allowed to be created."]},{"entry":[{},{},"The default value is 0."]},{"entry":["pmlicense.expirydate","DATETIME","The date to be used for"]},{"entry":[{},{},"generating PM license, if PM"]},{"entry":[{},{},"license is allowed to be created."]},{"entry":[{},{},"The default value is"]},{"entry":[{},{},"#19991231Z#"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Secure State variables are updated as a transaction for the evaluation of a condition or action. If the action results in an error, the secure state is not updated. During evaluation, the secure state cache is updated as soon as the variable is changed. For example, if secstate.playcount is 5 and secstate.playcount+++ secstate.playcount++ is evaluated, it will result in 11. The secstate.playcount will be 7 at the end of evaluation. This behavior may be different from the ones found in, say for example, Visual C++. Expressions with ambiguous meaning like this should be avoided in the license. The C specification indicates that it is up to the implementation to define the behavior and hence several C compilers themselves may yield different results for expressions with side effects. So, avoid such expressions in the license.","This section gives some examples of events specified in a license.",{"@attributes":{"id":"p-0454","num":"0481"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"License with expiry dates, counted play, and requiring minimum app security level"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<ONSTORE>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ACTION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"!exists(secstate.playcount)?secstate.playcount = 10:0"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ACTION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/ONSTORE>"},{"entry":"<ONSELECT>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<COND>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"machine.datetime <= #20001231 1O:00# &&"]},{"entry":[{},"app.seclevel >= 500"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/COND>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/ONSELECT>"},{"entry":"<ONACTION type=\u201cplay\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<COND>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"secstate.playcount > 0"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/COND>"]},{"entry":[{},"<ACTION>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"secstate.playcount\u2212\u2212"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ACTION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/ONACTION>"},{"entry":"License with effective date"},{"entry":"<ONSELECT>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<COND>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"machine.datetime >= #20011231 10:00# &&"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/COND>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<\/ONSELECT>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"License that allows one time play with no expiry and deletes itself after the play"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<ONACTION type=\u201cplay\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ACTION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"deletelicense()"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ACTION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<\/ONACTION>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"License that allows play for two days after initial play"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<ONSTORE>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ACTION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"!exists(secstate.used)?"]},{"entry":[{},"(secstate.used = 0;secstate.firstuse = machine.datetime):0"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ACTION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/ONSTORE>"},{"entry":"<ONSELECT>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<COND>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"secstate.used == 0 || datediff(\u201cd\u201d, secstate.firstuse,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"machine.datetime) <= 2"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/COND>"]},{"entry":[{},"<ACTION>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"secstate.used == 0?(secstate.firstuse = machine.datetime;secstate.used"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"= 1):0"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ACTION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/ONSELECT>"},{"entry":"<ONACTION type=\u201cplay\u201d>"},{"entry":"<\/ONACTION>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of the embodiments of the present invention, will be better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there are shown in the drawings embodiments which are presently preferred. As should be understood, however, the invention is not limited to the precise arrangements and instrumentalities shown. In the drawings:",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIGS. 5A and 5B","FIG. 4"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 6","FIG. 4"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 7","FIG. 4"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 8","FIG. 1"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 9","FIG. 4"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 10","FIG. 4"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 11","FIG. 4"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 13","FIG. 8"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 14","FIG. 13"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
