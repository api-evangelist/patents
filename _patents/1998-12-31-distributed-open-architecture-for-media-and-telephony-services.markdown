---
title: Distributed open architecture for media and telephony services
abstract: A server provides media and telephony services in a telecommunications network. The server has a distributed, object-oriented software architecture, allowing client applications to access resources located anywhere in the network. The server provides interfaces to media and telephony resources so that client applications, which may access the server through an IP data network, can access the resources. The software architecture framework is provided by Common Object Request Broker Architecture (CORBA).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06965925&OS=06965925&RS=06965925
owner: Nortel Networks, Ltd
number: 06965925
owner_city: St. Laurent
owner_country: CA
publication_date: 19981231
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","SYSTEM ARCHITECTURE"],"p":["This application is related to U.S. Pat. No. 6,445,776 entitled \u201cAbstract Interface for Media and Telephony Services,\u201d which was filed Dec. 31, 1998.","The present invention relates generally to a system and method for providing media and telephony services in a telecommunications network and, more particularly, to an object-oriented system for providing media and telephony services in a distributed computing environment.","The demand for advanced telephony applications in telecommunications networks has grown significantly during the past few years. The area of media and telephony applications, also referred to as computer telephony, includes a wide variety of application-specific devices, many of which have proprietary implementations. A diverse group of vendors develops, sells, and supports devices such as interactive voice response (IVR) systems, voice mail systems, e-mail gateways, fax servers, and automatic call distributors (ACDs). Many of these applications use emerging technologies such as voice compression and expansion, text-to-speech translation, automatic speech recognition, and facsimile-to-text translation.","As telephony applications have become more numerous and complex, interoperability problems have arisen. Further, it is difficult to develop integrated applications that combine features of different application-specific devices because they are developed by different vendors and often use proprietary software. Thus, a need arose for a framework for developing telephony applications in which vendors agree on certain aspects of implementation to allow interoperability of products and software. In response to this need, the Enterprise Computer Telephony Forum (ECTF) has defined such a framework. The ECTF framework provides the ability for computer telephony applications to share media resources (e.g., voice recognition). The ECTF has specified several application program interfaces (APIs), including S. 100, which defines an interface between a media server and computer telephony applications.","Media servers compliant with the ECTF S. 100 API provide a means for developing computer telephony applications in an open client-server environment with shared resources. The S. 100 API is a hardware-independent and operating system-independent API. However, the S. 100 API, based on the C programming language, is a language dependent interface, which makes S. 100 ultimately dependent on the platform used. Also, current system architectures for providing telephony services do not take full advantage of object-oriented programming methods or use distributed processing, thus making it more difficult to extend architectures to include new components. Furthermore, current system architectures with distributed components utilize proprietary protocols.","A server consistent with the present invention comprises an interface to a data network, an interface to a resource providing a service, and means for receiving from a client application, coupled to the data network, an object-oriented, language independent request for access to the resource. Consistent with the present invention, the request includes a parameter needed by the resource, and the interface to the resource includes means for passing the parameter to the resource.","A method consistent with the present invention provides remote services by a server, coupled to a resource, by receiving from a client application an object-oriented, language-independent request for access to the resource, decoding the request to determine a parameter needed by the resource, and passing the parameter to the resource.","Additional features and advantages of the present invention will be readily appreciated by one of ordinary skill in the art from the following detailed description of the best mode for carrying out the invention when taken in connection with the accompanying drawings.","An architecture consistent with the present invention allows development of applications and services in a modular manner and provides for growth from a single node system to a multiple node system, in which services and applications can be located on various nodes throughout the system. Although the context of this description is that of media servers providing a development environment for telephony applications, it should be appreciated that the invention has a broader potential application, and may be used for development of other applications, such as applications on the World Wide Web.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["100","110","120","130","100","120","130","100","120","130"]},"Media service  and telephony service  are also coupled to network , which may be any type of telecommunications network, including a Public Switched Telephone Network (PSTN) or a private network. Media service  and telephony service  are coupled to network  using adapters (not shown) specific to network . For example, media service  can be connected to network  via a Dialogic T1 card.","Application , coupled to network , uses the interface provided by media service  and telephony service . Application  invokes methods on media service  and\/or telephony service . Application  does not have to be collocated with media service  or telephony service , although the present invention does not preclude the collocation of application  with either media service  or telephony service .","Media service , telephony service , and application  include processors , , and , respectively, and memories , , and , respectively. Processors , , and  may be provided by conventional microprocessor circuits. Memories , , and  may include both RAM and ROM portions and may be implemented with any type of computer-readable medium, such as any electronic, magnetic, or optical read\/write storage device. Memories , , and  store data that serves as instructions to processors , , and , respectively, and which, when executed by processors , , and , cause media service , telephony service , and application  to carry out methods that are described below.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2","b":["110","110","200","210","220","230","240","110","250","260"]},"In general, CORBA brings together object-oriented computing and distributed computing. A CORBA-based system is composed of cooperating objects on a software bus, which is called the object request broker (ORB). Each object has an interface, which in CORBA is an abstract, language-independent representation of the set of methods that can be understood by the object. Objects do not have to be collocated. Method invocations on remote objects occur through an underlying protocol, which can be specific to an ORB vendor or based on an industry standard. Referring to , distributed software bus  is an ORB, through which client applications interface with telephony services interface , media services interface , basic services portion , and system management portion . The ORB enables objects to make requests and receive responses transparently in a distributed environment.","CORBA 2.0 specifies an interoperability protocol, Internet Inter-ORB Protocol (IIOP), that allows objects implemented using one vendor's ORB to communicate with an object using another vendor's ORB. An application developer is shielded from all details of the lower-level interaction, including the locations of the objects and the marshaling (i.e., encoding to convert interfaces and parameters into flattened message formats to transfer over a network) and unmarshaling (i.e., decoding) of arguments.","Interface Definition Language (IDL) is essential to interoperability of components in a CORBA system. IDL is a neutral intermediate language that specifies a component's boundaries, interfaces with potential clients, or any description of a resource or service that the server component wants to expose to a client. IDL is not a programming language; it is instead a language for expressing interfaces.","Several commercial implementations of the CORBA standard exist. Orbix, developed by Iona Technologies, is one such implementation that may be used in methods and systems consistent with the present invention. Orbix consists of a CORBA 2.0-compliant object request broker (ORB), an IDL compiler, and related tools. The ORB mediates between clients and implementations of application objects and must provide a standard interface to such clients, and another to such implementations of application objects. The CORBA standard does not specify whether the ORB is a set of runtime libraries, a set of daemon processes, a server machine, or part of an operating system.","Orbix is implemented as a pair of libraries\u2014one for client applications and one for servers\u2014and the orbixd daemon. The orbixd daemon need only be present at nodes running CORBA servers, and it is responsible for launching server processes dynamically. Because of the library implementation of Orbix ORB, there is no central component through which all object requests must pass. Instead, object requests pass directly from the client (application) code to the invoked server object implementation. If the server and client are in different processes, the method invocation is marshalled in the client process, transmitted over an IP network, unmarshalled in the server process, and dispatched to the appropriate server object by the object adapter. The role of orbixd is to connect clients and servers for the first time. Since Orbix adheres to IIOP, the Orbix ORB can interoperate with any other ORB that also supports the standard IIOP.","Another important component of Orbix is its compiler technology, which translates CORBA IDL into programming language code, e.g., C++, that performs remote calls. The generated code is sufficiently sophisticated so that developers are not burdened with extra programming steps after translation.","Referring again to , operating system services portion  provides an underlying architecture that supports server . Consistent with the present invention, operating system  may be a UNIX operating system such as AIX 4.1.5, which is built on open standards including UNIX95, XPG4, and X\/Open. Server  also includes standards-compliant HTTP server , which, in conjunction with graphical clients, provides a window into the system. High availability services  provide active and standby 10BaseT or 100BaseT Ethernet network interface cards (NICs). For applications that do not tolerate a single point of failure, network traffic is automatically switched to the standby NIC when failure of a NIC or external hub is detected. Installation services  provide the ability to install server  as a stand-alone unit or in a line-up.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["230","232","232","234"]},"Consistent with the present invention, basic services portion  also includes resource administrator , which provides network-wide tracking of resources, which can be shared among applications. When a resource becomes available, it registers with resource administrator  by providing information including type and, optionally, any attributes or properties that distinguish it from other resources. Resources can query resource administrator  for the existence of resources by interface type and an optional list of properties. If several resources match a particular type, resource administrator  balances resource utilization by using a least-recently-used algorithm to determine which resource to use, and favors local resources over remote resources.","Resource administrator  tracks resource owners for resource recovery. This reduces the amount of maintenance required to attain a high level of system availability. Resource administrator  also provides a first line of security by allowing resources to access other resources only if authorized to do so.","Resource administrator  may be a multi-tiered service, including both local resource administrators and network-wide administrators. In this case, a local resource administrator tracks local, or nodal, resources, and queries a network-wide administrator if it cannot satisfy a request.","Media services interface  provides interfaces to media services including, for example, text-to-speech services (interface ), speech recognition services (interface ), announcements\/audio signals services (interface ), and facsimile services (interface ). Telephony services interface  allows server  to interact with telecommunications network  and provides interfaces to telephony services including, for example, system call router interface  and interfaces to the SS7 signaling network (interface ) and T1\/E1 signaling (interface ).",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 2","FIG. 3"],"b":["200","140","220","210","200","200","200","282","270","200","282"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 3","FIG. 3"],"b":["200","284","200","284","272","200","284","300","200","300","278","280"]},"Speech recognition services may also be provided in hardware\/firmware by speech recognition component , e.g., the Antares\u2122 automatic speech recognition (ASR) platform, commercially available from Dialogic\u00ae. Speech recognition component  may be coupled to media adapter , e.g., Nuance's RecClient\u2122, which provides a higher-level interface to speech recognition component . Media server  accesses speech recognition component  through speech recognition API , which accesses media adapter  via an interprocess communication capability.","Media server  may provide IVR service by accessing IVR component , which may be a commercially available product such as Dialogic\u00ae D\/240SC-T1. Media server  accesses IVR component  through basic IVR API . IVR component  may be coupled to media adapter , which presents a higher-level interface to basic IVR API  and may be a commercially available product or a proprietary API, e.g., a media adapter provided by Nortel Server's Vail API. Media cache  provides cache storage for IVR applications.","Hardware components coupled to media server  may communicate with each other via time division multiplexed (TDM) bus , which may be an SCbuS\u2122 compliant with the Signal Computing System Architecture\u2122 (SCSA) hardware model, an industry standard TDM architecture.","It should be apparent to one skilled in the art that the specific hardware components providing media or telephony services in  are exemplary only. Media server  may access any resource that provides functionality for a media or telephony service. Also, as shown in , media server  may include API  for any application such as ASR, TTS, IVR, or facsimile, that accesses media adapter , which accesses other hardware components connected to bus  via interface .","Referring again to , server  includes system management portion , which includes at least the following categories of system management based on the Open Systems Interconnection (OSI) system management definition: fault management portion , configuration management portion , performance management portion , and security portion . System management portion  provides the APIs and user interfaces (Uls) for applications, resources, network components, and hardware components utilizing server  to be managed in a consistent and extensible manner.","Fault management portion  provides a mechanism for generating, collecting, monitoring, and displaying fault events, such as logs and alarms. A fault event can be generated, for example, by an IDL API that is part of telephony services interface  or media services interface . Configuration management portion  provides mechanisms for system installation; software distribution, which provides the ability to define, administer, and distribute software and configuration data; resource state management, which allows applications and components with the environment of server  to be managed from an operations workstation and may be based on the ISO X.732 resource state model; and configuration (datafill) management, which allows applications to define, generate, and distribute configuration information and notify applications of configuration change events. Performance management portion  allows application to define, generate, collect, store, and display performance measurement information based on performance data generated by applications using an IDL API and collected into a database. Security portion  provides an interface to manage security information such as user accounts and passwords.","It will be appreciated by those skilled in this art that various modifications and variations can be made to the object-oriented system for providing media and telephony services in a distributed computing environment described herein without departing from the spirit and scope of the invention. Other embodiments of the invention will be apparent to those skilled in this art from consideration of the specification and practice of the invention disclosed herein. It is intended that the specification and examples be considered exemplary only, with a true scope and spirit of the invention being indicated by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
