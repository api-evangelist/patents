---
title: Facilitating browsing of result sets
abstract: A method of facilitating the browsing of a plurality of result sets by a user. The method includes displaying a plurality of queries on a computer display, each query having a corresponding result set, the plurality of queries thereby constituting a set of displayed queries, and displaying the result set of a selected displayed query in response to the user selecting the query from the set of displayed queries via a user interface procedure, while continuing to display the set of displayed queries so the user can subsequently select other queries from the set of displayed queries to thereby interleave browsing the result sets of the queries in the set of displayed queries.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09069854&OS=09069854&RS=09069854
owner: Pomian & Corella, LLC
number: 09069854
owner_city: Carmichael
owner_country: US
publication_date: 20091019
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The subject matter of this application is related to the subject matter of U.S. Provisional Patent Applications No. 61\/106,570, filed on Oct. 18, 2008, and No. 61\/201,855, filed on Dec. 16, 2008, priority to which is claimed under 35 U.S.C. \u00a7119(e) and which are incorporated herein by reference.","The subject matter of this application is also related to the subject matter of a companion Non-Provisional Patent Application entitled \u201cA Method of Computing a Cooperative Answer to a Zero-Result Query through a High-Latency API\u201d, by F. Corella and K. P. Lewison, filed simultaneously with this application.","Traditional search engines are not well suited to tackle difficult search problems. To solve a difficult search problem, a user may have to issue many queries and look at many pages in the result set of each query before finding a suitable result. But the user does not know how many pages he may have to look at in each result set. Therefore the user cannot inspect the result sets one at a time. After looking at, say, 3 pages in each result set, the user may have to go back and look at a further 3 pages in each of the same result sets. In other words, the user may have to interleave the browsing of the result sets or, so to speak, browse the result sets simultaneously. This is difficult to do in traditional search engine; to go back to an earlier result set, the user has to retype the query that produced the result set, or use the back button of the browser to backtrack through intervening pages of other result sets, documents visited by following links embedded in result sets, and, possibly, unrelated documents.","One embodiment provides a method of facilitating the browsing of a plurality of result sets by a user. The method includes displaying a plurality of queries on a computer display, each query having a corresponding result set, the plurality of queries thereby constituting a set of displayed queries, and displaying the result set of a selected displayed query in response to the user selecting the query from the set of displayed queries via a user interface procedure, while continuing to display the set of displayed queries so the user can subsequently select other queries from the set of displayed queries to thereby interleave browsing the result sets of the queries in the set of displayed queries.","In the following Detailed Description, reference is made to the accompanying drawings, which form a part hereof, and in which is shown by way of illustration specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural or logical changes may be made without departing from the scope of the present invention. The following detailed description, therefore, is not to be taken in a limiting sense.","It is to be understood that the features of the various exemplary embodiments described herein may be combined with each other, unless specifically noted otherwise.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","120","130","140","150","150","140","130","142","110","140","142","140","142"]},"Computer  is equipped with a display , a keyboard  and a mouse  and includes a storage facility  that comprises physical components, such as physical memory and hard disks, and logical components, such as virtual memory, file systems, and caches. An executable program called a search application  is stored in the storage facility and runs on computer . Search application  has a fast working memory  that it uses to store data while it is running, and a slower persistent memory  that it uses to preserve data while it is not running, both being components of storage facility . The contents of working memory  are lost when search application  exits, but those of the persistent memory  are preserved and available when search application  is later restarted.","In one embodiment, network interface  exposed by the search back-end  uses Hypertext Transfer Protocol (HTTP) messages, such an interface being called an HTTP-based interface. In one such embodiment, network  is the Internet; the HTTP-based interface is then called a Web interface, or a Web Application Programming Interface (Web API).","In one embodiment, where network  is again the Internet, storage facility  contains a Web browser program  that runs on computer , and search application  is downloaded by the Web browser from a Web site  connected to the Internet.","In one embodiment, search application  runs on computer  by being interpreted by a browser extension , also known as a browser plug-in . In one embodiment the browser plug-in  is supplied by Adobe Systems Inc and called Flash Player, and search application  is built on a programming platform also supplied by Adobe Systems Inc and called Flex. In such an embodiment, working memory  is part of a virtual memory component of storage facility  and persistent memory  is a file controlled by Flash Player and contained in a file system component of storage facility . In such an embodiment, search application  comprises project code written in MXML and ActionScript and compiled by a platform compiler, and platform code supplied by Adobe Systems Inc, some of which is linked with the project code. The project code is an event-driven program, comprising routines that are invoked when events take place. Such a routine is called an \u201cevent listener\u201d or \u201cevent handler\u201d, and is said to \u201chandle\u201d or \u201creact to\u201d the event upon which it is invoked.","Search application  uses display , keyboard , and mouse  of computer  to interact with user . Keyboard  is used to enter text into input fields of the display, and has a submission key , traditionally labeled \u201cEnter\u201d or \u201cReturn\u201d, used to submit data once the data has been entered into input fields. Keyboard  also has a key  labeled with an up-arrow and a key  labeled with a down-arrow (the \u201cup\/down keys\u201d) used for tasks such as moving a caret up and down or moving a highlighted selection up and down a menu or a list. At any given time, keyboard key-press events are directed to a particular user-interface element displayed on the display, which is said to \u201chave keyboard focus\u201d. Keyboard  has a tab key , which the user can use to \u201cbring keyboard focus\u201d to a desired element. User  can also bring keyboard focus to an element by clicking on the element with mouse . Mouse  is used for performing user-interface procedures such as clicking on a button, or clicking a link displayed on the display , or dragging displayed data.","Search application  uses the network interface  to fetch data from the search back-end , data such as:","(1) an estimate of the number of results in the result set of a query, the estimate being accurate as to whether the result set is empty or not (i.e. the estimate being zero if the result set is empty, and not zero if the result set is not empty);","(2) a page of the result set of a query, pages being numbered, each page containing a fixed number of consecutive results (e.g. page 1 containing results 1 through 10, page 2 containing results 11 through 20, etc);","(3) a spelling suggestion (i.e. a suggested respelling of the query), available if the query may have been misspelled according to search back-end ; and","(4) a list of queries similar to the query (traditionally called \u201crelated queries\u201d in search-engine jargon).",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 2","b":["112","162","120","210","120","220","120","230","240","250","260","168","112","250"]},"According to one embodiment, left panel  is used to display a set of queries. The terms \u201cdisplayed query\u201d and \u201cleft panel entry\u201d (or simply \u201cquery\u201d and \u201centry\u201d when there is no ambiguity) will be used interchangeably to refer to an occurrence of a query in left panel . User  can select a displayed query by using a user-interface procedure on the query, such as clicking the query with mouse , such a user-interface procedure being called a selection procedure. Search application  itself can select a displayed query without user  using a selection procedure on the query. For example, in one embodiment, when user  submits a query, search application  creates an entry for the query at the top of left panel  and selects the entry. The query that was last selected by user  or by search application  is called the \u201cselected query\u201d, the \u201cselected entry\u201d, or the \u201cselection\u201d. In one embodiment, the selected query is highlighted.","In one embodiment, search application  is built on the Flex platform and a user-interface element called a \u201clist-based control\u201d, such as a \u201clist control\u201d or a \u201cdatagrid control\u201d, is used to display the set of queries in left panel , the control containing the queries This control will be called the left panel control. In such an embodiment, user  can select a displayed query by clicking on the query or by bringing keyboard focus to the left panel control and using keyboard up\/down keys ,  to move the selection, platform code detecting such user-interface procedures and changing the selection accordingly. The project code can read a property of the left panel control called \u201cselectedIndex\u201d to find out what displayed query is selected, and can assign a value to the property to change the selection.","Search application  reacts to user  selecting a displayed query by displaying the result set of the query in the center panel  in a manner that makes it available for browsing. Search application  also displays the result set in center panel  in such a manner when search application  itself selects the query. Thus, whenever a displayed query is selected, the result set of the query is displayed in center panel .","In one embodiment, search application  displays the result set, if it is not empty, by displaying a page of the result set and a result-set navigation tool, such as a page menu. While making the result set available for browsing in center panel , search application  continues to display the set of queries in left panel , so that user  can click on another query, such as a query that user  previously selected, to browse its result set. User  can thus interleave the browsing of the result sets of the queries in left panel .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 3","b":["230","310","320","330","120"]},"An effective strategy for browsing the three result sets is a breadth-first strategy comprising the steps of viewing page 1 of the result set of query , then page 1 of the result set of query , then page 1 of the result set of query , then page 2 of the result set of query , then page 2 of the result set of query , then page 2 of the result set of query , and so on, thereby interleaving the browsing of the result sets or, so to speak, browsing the three result sets simultaneously. User  can perform each step with a single click. In contrast, if user  were using a traditional search engine, performing each step would require retyping a query or backtracking.","An entry in left panel  for a displayed query, such as entry , has an associated checkbox  and an associated estimate  of the number of results in the result set of the query. User  can click checkbox  using mouse  to toggle a state of checkbox , adding a checkmark if there is not one or removing the checkmark if there is one. User  can then click a user-interface element , such as a link or button labeled \u201cDelete\u201d, to delete all displayed queries (i.e., all entries of queries) whose checkboxes  have a checkmark. User  can also click a user-interface element  labeled \u201cCheck All\u201d to put checkmarks in all checkboxes , and a user-interface element  labeled \u201cUncheck All\u201d to remove all the checkmarks.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 4","b":["230","164"]},"(1) the text of the query , stored as a string of characters;","(2) a retention status , which is a Boolean data item having a value \u201ctrue\u201d when the checkbox  associated with the displayed query does NOT have a checkmark, and a value \u201cfalse\u201d when the checkbox  has a checkmark;","(3) an estimate  of the number of results in the result set of the displayed query, if available; and","(4) data items  and , which are further described below in connection with .","In one embodiment, where search application  is built on the Flex platform and the set of queries is displayed using a list-based Flex control called left panel control, said control is associated with a Flex object of a class \u201cArrayCollection\u201d, which comprises a collection of Flex objects, usually called \u201citems of the ArrayCollection\u201d, but called herein \u201celements of the ArrayCollection\u201d to avoid confusion with \u201cdata items\u201d. Each ArrayCollection element corresponds to a displayed query. In such embodiment, the data items associated with a displayed query are properties of the corresponding element, or properties of other Flex objects reachable by reference from the corresponding element. In particular, the data items , , and  are properties of the corresponding element, and platform code displays the left panel entry for the query according to the values of those data items. For example, the entry  shown in  for the query \u201csmoothie banana orange\u201d is displayed by platform code according to the text of the query  being equal to the string \u201csmoothie banana orange\u201d, the retention status  being equal to true (causing the checkbox  to NOT have a checkmark), and the estimate  of the number of results in the result set being equal to 1910000.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 5","FIG. 3"],"b":["240","230","310"]},"An area  of center panel  displays a page of the result set of the query, page 6 in the example. The page contains results ,  and , as well as a result  that is partially visible and other results that are not visible, but can be made visible by the user using a scroll bar . At the top of the area , a header  provides the page number (page 6 in the example), the range of consecutive results contained in the page (results 51 to 60 in the example), and an estimate of the number of results in the result set (1910000 in the example).","An area  displays a navigation tool relative to the page displayed in area , the navigation tool allowing the user to \u201cgo to\u201d or \u201cnavigate to\u201d or \u201cvisit\u201d a destination page. Visiting a page means displaying the page in area  and a navigation tool now relative to the destination page in the area . In the embodiment illustrated in , the navigation tool is a page menu relative to the page displayed in area . The page menu comprises a button  labeled \u201c<Prev\u201d, a label  that shows the number of the page displayed in the area  (\u201c6\u201d in the example), a button  labeled \u201cNext>\u201d, and a row  of buttons labeled by page numbers, including a button  labeled with the page number of the page displayed in the area  (\u201c6\u201d in the example), up to four buttons labeled with numbers immediately preceding such page number, and up to four buttons labeled with page numbers immediately following such page number. User  can click on a button to go to a corresponding destination page. For example, user  can click on the button  labeled \u201cNext>\u201d to go to the page that immediately follows the page displayed in the area  (i.e. to page 7 in the example). The button  corresponding the page displayed in the area  is disabled. The buttons labeled \u201c<Prev\u201d and \u201cNext>\u201d are disabled if no corresponding pages are available. The row  of numbered buttons only contains buttons whose corresponding pages are available. User  can use the page menu in the area  to browse the result set of the selected query by visiting pages of the result set.","In one embodiment, user  can submit a query by entering the query in query box , and then clicking search button  or pressing submission key . User  can also submit a query that is already displayed in left panel  by dragging the query to query box  or double-clicking on the query. When user  submits a query, search application  displays the result set of the query in center panel . Furthermore, search application  adds the query to left panel , creating an entry for the query at the top of the panel and selecting the entry. This results in two entries for the query when user  submits by double-clicking, but not when user  submits by dragging, because dragging has the side-effect of removing the dragged query.","In one embodiment, when user  submits a query, search application  augments the set of queries displayed in left panel  with an incremental set of displayed queries that comprises the submitted query, but may also comprise additional queries.","Search application  asks search back-end  for a possible respelling of the submitted query. If search back-end  deems that the submitted query is misspelled, it responds with a respelled query (i.e. a query derived from the submitted query by correcting the presumed misspelling). Search application  then includes the respelled query in the incremental set of displayed queries.","In one embodiment, search application  also requests, besides a respelling of the submitted query, queries similar to the submitted query that search back-end  deems could be suggested to user  as possible follow-up queries. (Such queries are traditionally called \u201crelated queries\u201d in search engine jargon, but the word \u201csimilar\u201d will be used here instead of \u201crelated\u201d, to distinguish such queries from a respelling of the submitted query or subqueries of the submitted query, which are also related to the submitted query.) If search back-end  responds with any similar queries, search application  includes the similar queries in the incremental set of displayed queries.","In one embodiment, if search back-end  suggests no similar queries and the query consists of more than a single search term, search application  includes a collection of subqueries of the submitted query in the incremental set of queries, a subquery being derived from the submitted query by removing syntactic elements. If the submitted query is a conjunctive query, search application  includes the immediate conjunctive subqueries of the submitted query, a conjunctive subquery being obtained by removing one or more conjuncts, and an immediate conjunctive subquery being obtained by removing exactly one conjunct.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 6","b":["610","620","630","640","650","660","670"]},"In one embodiment, search application  recognizes an explicit OR operator and, thus, the submitted query can be a disjunctive query. In such embodiment, if search back-end  suggests no similar query when the submitted query is a disjunctive query, search application  includes the immediate disjunctive subqueries of the submitted query in the incremental set of queries, a disjunctive subquery being obtained by removing one or more disjuncts, and an immediate disjunctive subquery being obtained by removing exactly one disjunct.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 7","b":["710","720","730","740","750","760","770"]},"In one embodiment, when user  submits a query and search back-end  indicates that the query has an empty result set (e.g. by providing an estimate of the number of results equal to zero), search application  adds to left panel  a collection of queries that together constitute a cooperative response to the submitted query. In one embodiment, search application  uses a method described in the companion patent application cross-referenced above. In one embodiment, search application  uses one of the methods described in the computer science literature to compute the collection of queries, such as the method described in the paper: F. Corella, S. J. Kaplan, G. Wiederhold and L. Yesil, Cooperative Responses to Boolean Queries. In Proceedings of the First International Conference on Data Engineering, pages 77-85. IEEE Computer Society, 1984.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 8","FIG. 3"],"b":["230","120","230","120","810","820","830","840","310","320","330","230","120"]},"The queries in the incremental set of queries are added to left panel  with checkboxes  that already have checkmarks, as shown in . This makes it easy for user  to delete all the added queries by clicking on the Delete link . Furthermore, when user  enters a query, all the queries having checkmarks are automatically deleted. Thus, if user  ignores left panel  as he\/she submits queries, queries do not accumulate in left panel . If user  wants to keep one of the queries in the incremental set, he\/she can remove the checkmark before submitting a subsequent query.","An economy of means is thus achieved by using checkboxes  associated with the displayed queries for a dual purpose: deleting queries at any time (by checking their checkboxes  and clicking on Delete link ), and retaining queries after they have been added to left panel  (when a query is submitted) but before they are automatically deleted (when a subsequent query is submitted).",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 9","FIG. 9"],"b":["230","120","230","140","120","230"]},"(1) Submitting the query \u201casdf qwer poiu\u201d, thus adding the query and its immediate conjunctive subqueries \u201casdf qwer\u201d, \u201casdf poiu\u201d and \u201cqwer poiu\u201d to left panel , each with a checkmark in its checkbox .","(2) Clicking on the Uncheck All link  to remove the checkmarks.","(3) Dragging the immediate conjunctive subquery \u201casdf poiu\u201d displayed in left panel  to the query box. This has the side-effect of removing the entry for the subquery from left panel , but then search application  adds an entry for the subquery at the top of the panel, followed by entries for its own immediate conjunctive subqueries \u201casdf\u201d and \u201cpoiu\u201d, each with a checkmark in its checkbox .","User  can then browse the result sets of all the displayed queries simultaneously.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 10","FIG. 10"],"b":["120","162","240","1010","1020","1030","204","1020","1010","1030","230","120","162","162"]},"Returning to the description of , which illustrates data associated with a displayed query, data item  is a result-set container associated with the displayed query. If the result set of the displayed query is not empty, result-set container  contains a page of the result set in area , and a navigation tool such as a page menu, relative to the page, in the area  (see , where it is noted that areas  and  were described as pertaining to center panel , but each result-set container has its own areas  and , those of the result-set container that is visible at any particular time appearing in the center panel at that time.). The page may not entirely fit in the area  and, while the result-set container is visible, user  may scroll the page using the scroll bar . The Flex platform code performs the scrolling by modifying data structures pertaining to the result-set container. When the result-set container becomes invisible, its contents are preserved unchanged. When the result-set container becomes visible again, therefore, it displays the last visited page of results in the area  at the last scrolling position, and the same navigation tool relative to the page of results in the area .",{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 4","FIG. 11"],"b":["450","450","510","440","440","450","120","450","162","166","162","166","162"]},"Fetching a page of results from search back-end  takes a few hundredths of a second; laying out a page of results and a page menu takes 20 or 30 milliseconds, an amount of time that, although short, is perceptible by user . However, making a nested container visible usually takes less than 1 millisecond and appears instantaneous to user . The use of result-set containers provides a means of saving and reusing a page of results, saving the time it would take to fetch the page again from search back-end ; and a means of saving and reusing the layout of the page and page menu, saving the time it takes to do the layout again, and making the switch from one result set to another, as user  is browsing several result sets simultaneously, appear instantaneous.","In one embodiment, data comprising data items , , , and  associated with every displayed query is saved from working memory  to persistent memory  when search application  exits, and read back from persistent memory  to working memory  when search application  restarts. If the displayed query has ever been selected, the page number data item  is the page number of the last visited page of the result set of the displayed query, as will become apparent from the description of  below. Thus the last visited pages of the displayed queries are preserved while search application  is not running.","Result-set container data item  is not among the data items that are saved. However, after search application  is restarted, the result-set container is recreated using the page number , as described in connection at  of the process illustrated in .","In one embodiment, search application  is built on the Flex platform and persistent memory  is implemented as a local file controlled by Flash Player. Such an embodiment is advantageous in that it provides a large amount of persistent storage to search application  even though search application  runs in the context of a Web browser and does not have unrestricted access to a file system. However, a particular difficulty arises in such embodiment because the project code is not notified when search application  is about to exit and is not able to save data at application-exit time. The project code must instead copy the data to a so-called \u201clocal shared object\u201d, from which the platform code copies the data to persistent memory  at application-exit item.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 11","b":["1100","162","164"]},"When search application  starts, the platform code, at , copies the data, if available, from persistent memory  implemented as a file controlled by Flash Player to a \u201clocal shared object\u201d. Recall that the data consists of the data items , , , and  associated with every left panel  (i.e. displayed query) entry when search application  exited. The data is available if search application  ran previously on computer , and there were left panel  entries when search application  exited, and the file that implements persistent memory  has not been deleted.","At , also upon the start of search application , the project code copies the data, if available, from the local shared object to the working memory, creating a left panel entry for each set of data items , ,  and  found in the local shared object and associating the data items with the entry. It is noted that, at , the copying of the data is performed by project code rather than platform code, and only after . Recreation of the data item  occurs later as described below in connection with step  of . In one embodiment, if no data is available, search application  assumes that it is running for the first time on computer  and displays a large logo, omitting the panels , , and . The large logo is removed from display  and the panels are added when user  submits a first query.","After , the project code enters a loop that begins at  and has no termination condition, ending only when search application  terminates. The purpose of the loop is to ensure that the local shared object contains a recent copy of the data when search application  terminates.","At , the project code waits for a small, fixed amount of time, such as one second or half a second, by means of a Flex timer, and then proceeds to . At , the project code checks if the data has been modified in the working memory  since the last prior execution of step . If so, the project code proceeds to . Otherwise the project code loops back to . At , the project code copies the data from the working memory  to the local shared object and loops back to .","When search application  exits, platform code performs step , copying the data from the local shared object to persistent memory  implemented as a file controlled by Flash Player.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 12","b":["1200","162","120"]},"At , search application  parses the query found in the query box . In one embodiment, parsing the query consists of splitting the text of the query into words and quoted phrases separated by spaces without recognizing any explicit Boolean operators, each word and each quoted phrase being a search term. In such an embodiment, the query may consist of a single search term, or may be an implicit conjunction of the search terms.","In another embodiment, while parsing the query, search application  recognizes explicit Boolean operators such as a disjunction operator OR, an explicit conjunction operator AND, and an explicit conjunction operator NOT, besides the implicit conjunction operator, and also recognizes syntactic constructs for grouping such as parentheses. In such embodiment the query may consist of a single search term, or may be a conjunction, a disjunction, or a negation. The parsing of the query determines the conjuncts of the query if the query is a conjunction, and the disjuncts of the query if the query is a disjunction. After parsing the query, search application  proceeds to .","At , search application  deletes from left panel  the displayed queries that have an associated retention status data item  equal to \u201cfalse\u201d, and proceeds to . At , search application  creates a result-set container nested in center-panel container , checks if there is another result-set container nested in center panel  that is currently visible and, if so, makes the other result-set container invisible. Search application  then makes the newly created result-set container visible and proceeds to .","At , search application  creates an entry for the query at the top of left panel , with an associated retention status data item  equal to \u201cfalse\u201d, an associated result-set container data item  equal to the result-set container created at , and an associated page number data item  equal to \u201c1\u201d. Search application  then proceeds to . At , search application  selects the entry created at  and proceeds to .","At , search application  uses network interface  to convey the query submitted by user  to search back-end  and requests the first page of the result set of the query, a spelling suggestion, and a suggestion of similar queries. In one embodiment, where search back-end  is provided by Microsoft Corporation, a single message conveys all three requests. In one embodiment, where search back-end  is provided by Yahoo Inc., three separate messages must be sent to the back-end, a first message requesting the first page of results, a second message requesting the spelling suggestion, and a third message requesting the suggestion of similar queries. The response to the first message provides an estimate of the number of results in the result set of the query, and the first page of the result set if the result set is not empty. The response to the second message provides a set of respelled queries with at most one element. The response to the third message provides a possibly empty set of queries that are similar to the submitted query.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIGS. 13","FIG. 13","FIG. 14","FIGS. 15 and 16"],"b":["14","15","16","162","230","210","220","210","190","220","220","210"]},{"@attributes":{"id":"p-0097","num":"0096"},"figref":["FIG. 13","FIG. 12"],"b":["1300","162","120","210","220","1310","162","220","162","1320","1320","162","1310","1200"]},{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 14","b":["1400","162","120","210","190","1410","162","190","220"]},"Search application  then uses the same button-click event listener used at  of  to perform the method  of handling a query submission, as shown in .",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 15","b":["1500","162","120","1510","162","162","1520"]},"At , search application  invokes an event listener for the button-double-click event dispatched at step , which copies the text-of-the-query data item  associated with the displayed query to query box . Search application  then proceeds to , where the event listener invoked at step  performs the method  of handling a query submission, as shown in .",{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 16","b":["1600","162","120","210","1610","162","210","1620"]},"At , search application  copies the text-of-the-query data item  associated with the displayed query to query box , and proceeds to . At , search application  performs the method  of handling a query submission shown in .","Although not illustrated in , it is noted that process  further includes removing the displayed query from query box , which is performed by platform code in parallel with handling the query submission at .",{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 17","b":["1700","162","140","1260","1200","1200","140","1200","1230","230","1240"]},"At , search application  checks if the result set is empty based on the estimate of the number of results. If the result set is empty, search application  proceeds to . Otherwise, search application  proceeds to . At , search application  lays out a message in the result-set container, stating that the submitted query has no results and proceeds to . At , search application  lays out the first page of the result set in the area  of the result-set container, and proceeds to ","At , search application  creates a navigation tool, such as a page menu for the result set, relative to the first page, and lays it out in area  of the result-set container. Search application  proceeds to . At , search application  updates the left panel entry by associating the estimate of the number of results obtained from search back-end  with the left panel entry as data item .",{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 18","b":["1800","162","140","1260","1200","1200","140"]},"At , search application  checks if the set of respelled queries contains a respelled query. If so, search application  proceeds to . Otherwise, process  terminates. At , search application  creates an entry in left panel  for the respelled query, the entry having an associated retention status data item  equal to \u201cfalse: and an associated page number data item  equal to \u201c1\u201d.","In one embodiment, search application  prefetches from search back-end  the first page of the result set of the respelled query. Search back-end  provides an estimate of the number of results in the result set, and the first page if the estimate is not zero. In such an embodiment, search application  associates the estimate of the number of results obtained from search back-end  with the left panel entry created at  as the data item , which results in the estimate being displayed in the entry. In such an embodiment, search application  further creates a result-set container, making it not visible, associates the container with the entry as the data item , and lays out in the container either a message stating that there are no results, if the result-set is empty according to the estimate, or the first page and a navigation tool such as a page menu relative to the first page if the result set is not empty.",{"@attributes":{"id":"p-0111","num":"0110"},"figref":"FIG. 19","b":["1900","162","140","1260","1200","1200","140","1260","1200","1900","1700","1900","1700"]},"At , search application  checks if the set of similar queries is empty or not empty. If the set is not empty, search application  proceeds to . If the set is empty, search application  proceeds to .","At , search application  creates an entry in left panel  for each similar query, the entry having an associated retention status data item  equal to \u201cfalse\u201d and an associated page number data item  equal to \u201c1\u201d. In one embodiment, search application  further prefetches from search back-end  the first page of the result set of the similar query. Search back-end  provides an estimate of the number of results in the result set, and the first page if the estimate is not zero. In such embodiment, search application  associates the estimate of the number of results obtained from search back-end  with the left panel entry created at  as data item , which results in the estimate being displayed in the entry. In such an embodiment, search application  further creates a result-set container, making it not visible, associates the container with the entry as the data item , and lays out in the container either a message stating that there are no results, if the result-set is empty according to the estimate, or the first page and a navigation tool, such as a page menu relative to the first page, if the result set is not empty.","At , search application  checks if the submitted query consists of a single search term or is overly complex. In one embodiment, the submitted query is deemed to be overly complex if it is a conjunctive query whose number of terms exceeds a limit, such as 6 or 7, for example. In one embodiment, the submitted query is further deemed to be overly complex if it is a disjunctive query whose number of terms exceeds the same limit. If the submitted query consists of a single search term or is overly complex, process  terminates. Otherwise, search application  proceeds to .","At , search application  checks if the result set of the submitted query is empty or not empty, as determined at  of process . If the result set is not empty, search application  proceeds to . If the result set is empty, search application  proceeds to .","At , search application  creates zero or more entries in left panel  for subqueries of the submitted query. In one embodiment, if the submitted query is a conjunctive query, the subqueries for which entries are created are the immediate conjunctive subqueries of the submitted query. In one embodiment, if the submitted query is a disjunctive query, the subqueries for which entries are created are the immediate disjunctive subqueries of the submitted query. For each of the subqueries, the created entry has an associated retention status data item  equal to \u201cfalse\u201d and an associated page number data item  equal to \u201c1\u201d.","In one embodiment, search application  further prefetches from search back-end  the first page of the result set of the subquery. Search back-end  provides an estimate of the number of results in the result set, and the first page if the estimate is not zero. In such an embodiment, search application  associates the estimate of the number of results obtained from search back-end  with the left panel entry created at  as data item , which results in the estimate being displayed in the entry. In such an embodiment, search application  further creates a result-set container, making it not visible, associates the container with the entry as data item , and lays out in the container either a message stating that there are no results, if the result-set is empty according to the estimate, or the first page and a navigation tool such as a page menu relative to the first page if the result set is not empty.","At , search application  computes a cooperative response to the submitted query consisting of subqueries of the submitted query, and creates entries in the left panel for the subqueries, and associated result-set containers. According to one embodiment, the cooperative response is computed as described in the companion patent application cross-referenced above.",{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 20","b":["2000","162","240","120","162"]},"At , search application  detects the click on the displayed query, selects the displayed query, and dispatches a selection-change event, which is performed by platform code rather than project code. Search application  then proceeds to . At , search application  uses a selection-change event listener invoked by the selection-change event dispatched at  to perform a method  of displaying the result set of the selected query, as described below in connection with .",{"@attributes":{"id":"p-0121","num":"0120"},"figref":"FIG. 21","b":["2100","162","162","240","120","230","192","194"]},"At , search application  reacts to user  bringing keyboard focus to the left panel  control, enabling the use of up\/down keys ,  to change the selection, which is performed by platform code rather than project code. Search application  then proceeds to .","At , search application  moves the selection in response to user  pressing up\/down keys ,  until the displayed query is selected. A selection-change event is dispatched each time user  presses one of up\/down keys , . Again,  is performed by platform code rather than project code. Search application  then proceeds to .","At , search application  uses a selection-change event listener invoked by the last selection-change event dispatched at step  to perform method  described below in connection with  to display the result set of the selected query. (Earlier selection-changed dispatched as the user is moving the selection also cause method  to be performed, for displayed queries selected earlier.)",{"@attributes":{"id":"p-0125","num":"0124"},"figref":"FIG. 22","b":["2200","162","230","240","162"]},"At , search application  checks if the selected displayed query has an associated result-set container data item . If so, search application  proceeds to . Otherwise, search application  proceeds to . At , search application  checks if there is another result-set container nested in the center panel that is currently visible and, if so, makes the other container invisible. Search application  then makes the associated result-set container visible.","At , search application  creates an empty result-set container, checks if there is another result-set container nested in the center panel that is currently visible and, if so, makes the other container invisible, makes the empty result-set container visible, and associates the empty result-set container with the displayed query as data item .","At , search application  uses the network interface  to convey the query to search back-end  and requests the page of the result set of the query identified by the page number data item  associated with the displayed query. At , search application  receives a response from search back-end  containing an estimate of the number of results in the result set of the query and, if the estimate is not zero, the requested page, and invokes an event listener to handle the response and perform the remaining portions of process . Search application  then proceeds to .","At , the event listener uses the estimate to update data item  associated with the displayed query (if necessary), causing the estimate to be updated on the display, and proceeds to . At , the event listener checks if the estimate is zero, which means that the result set is empty. If the result set is not empty, search application  proceeds to . If the result set is empty, search application  proceeds to .","At , search application  lays out the page received from search back-end  in area  of the result-set container created at , and a navigation tool, such as a page menu for the result set, relative to the page, in area  of the container. At , search application  lays out a message in the created result-set container, stating that there are no results for the selected displayed query.",{"@attributes":{"id":"p-0131","num":"0130"},"figref":"FIG. 23","b":["2300","162","120","520","440"]},"At , search application associates the destination page number with the displayed query as data item , and proceeds to . At , search application  uses network interface  to convey the query to search back-end  and request the destination page. Search application  then proceeds to .","At , search application  receives a response from search back-end  containing the destination page and invokes an event listener to handle the response and perform the remaining step of the process . Search application  then proceeds to . At , the event listener lays out the destination page in area  of the result-set container, and a navigation tool for the result set relative to the destination page in area  of the container. In one embodiment, the navigation tool is a page menu.","It should now be apparent that the page number data item  associated with a displayed query is the last visited page of the result set of the query, if the displayed query has ever been selected so that one of its pages has been visited. Indeed, user  can visit a page by selecting the displayed query and thus making visible a result-set container associated with the query, the page being already displayed in the container, or by navigating to the page after the result-set container has been made visible.","When user  selects the displayed query, search application  performs process . If the displayed query does not have a result-set container, process  creates one and displays in it precisely the page that is identified by the page number data item , the page being requested from search back-end  at . If the displayed query already has a result-set container, process  simply makes the result-set container visible; which does not change the page number  nor the page being visited. When user  visits a page by navigating to the page, search application  performs the process , and at , associates the visited page with the displayed query as data item .","In one embodiment, where search back-end  is provided by Yahoo Inc, search application  quotes single words used as search terms before conveying a query to search back-end  and requesting a page of the result set of the query, to prevent the back-end from including results in its response that belong to the result set of a respelling of the query rather than to the result set of the query.","In one embodiment, where search back-end  is provided by Yahoo Inc, only a portion of the results of a result set are made available through the network interface , the available results being called the \u201cmost relevant results\u201d while the entirety of the result set is referred to as \u201cthe deep hits\u201d in search engine jargon. In such embodiment, the estimate of the number of results shown in left panel  is an estimate of the number of deep hits, but the page menu in center panel  is constructed based on the number of \u201cmost relevant results\u201d.","It should now be apparent that the embodiments described herein enable user  to interleave the browsing of the result sets of the queries displayed in left panel  without having to retype the queries and without backtracking User  can select a query and browse its result set. User  can interrupt the browsing and later resume the browsing by reselecting the query, after having browsed the result sets of other queries in the meantime. In some embodiments, when user  reselects the query, browsing resumes at the same page and same scrolling position, i.e. center panel  displays the page that was displayed when browsing was interrupted, at the same scrolling position that the page had when the browsing was interrupted. Furthermore, in some embodiments, browsing resumes at the same page and scrolling position even after the application has exited and restarted.","Although specific embodiments have been illustrated and described herein, it will be appreciated by those of ordinary skill in the art that a variety of alternate and\/or equivalent implementations may be substituted for the specific embodiments shown and described without departing from the scope of the present invention. This application is intended to cover any adaptations or variations of the specific embodiments discussed herein."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings are included to provide a further understanding of embodiments and are incorporated in and constitute a part of this specification. The drawings illustrate embodiments and together with the description serve to explain principles of embodiments. Other embodiments and many of the intended advantages of embodiments will be readily appreciated as they become better understood by reference to the following detailed description. The elements of the drawings are not necessarily to scale relative to each other. Reference numerals consist of a concatenation of a one- or two-digit number referring to a figure, followed by a two-digit number that locates the referenced part within the figure. A reference numeral pertaining introduced in a figure may be used in other figures to refer to the same part or a similar part.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 23"}]},"DETDESC":[{},{}]}
