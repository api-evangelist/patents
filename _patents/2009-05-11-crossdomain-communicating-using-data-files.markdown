---
title: Cross-domain communicating using data files
abstract: In one implementation, a computer-implemented method includes receiving at a data server computer hosted at a first internet domain a request from a client computer for data to be used by an application SWF file received from a web server hosted at a second internet domain and executed by the client computer, the request includes the second internet domain and information specifying the requested data. The method further includes generating at least a portion of a data SWF file including the requested data and a domain identifier corresponding to the second internet domain, the domain identifier configured to specify that SWF formatted files associated with the second internet domain are permitted to access the requested data within the data SWF file. The method also includes transmitting the data SWF file from the data server computer to the client computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08219598&OS=08219598&RS=08219598
owner: Google Inc.
number: 08219598
owner_city: Mountain View
owner_country: US
publication_date: 20090511
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This document generally describes method and systems for generating a data file to enable cross-domain data services within an application having cross-domain restrictions.","The Internet is a means by which data is exchanged between clients and servers throughout the world. A variety of electronic file formats can be used exchange data. Additionally, a variety of client applications can be used to execute and display the various electronic file formats. For example, ADOBE's FLASH PLAYER application (\u201cFLASH application\u201d) executes and displays SHOCKWAVE FLASH files (\u201cFLASH files\u201d).","Generally, the FLASH application running on a client does not permit data contained within a FLASH file from a first domain (e.g., www.first-domain.com) to be accessed by a FLASH file from a second domain (e.g., www.second-domain.com). This security restriction may be referred to as creating a \u201cdomain boundary\u201d that prohibits the sharing of data between FLASH files from different domains. Such sharing of data across a domain boundary can be termed as a \u201ccross-domain data service.\u201d","A crossdomain.xml policy file permits cross-domain data services for FLASH files from different domains being executed by a FLASH application. The crossdomain.xml policy file indicates to a FLASH application on a client (separate from the first and second domains) that FLASH files from a second domain have permission to cross the domain boundary and access data contained within the first domain's FLASH files.","This document describes techniques for generating a data file so as to enable cross-domain data services within an application having cross-domain restrictions. In general, a data server hosted at a first internet domain can receive a request from a client for a data file capable of providing cross-domain data services to an application file from a second internet domain that is being executed by the client. The data server can dynamically generate the data file to contain, at least, the second internet domain of the application file. The data server can send the dynamically generated data file to the client to enable cross-domain data services between the data file and the application file.","In one example implementation, the dynamically generated data file and\/or the application file can be a vector graphic file, such as a FLASH file.","In one implementation, a computer-implemented method includes receiving at a data server computer hosted at a first internet domain a request from a client computer for data to be used by an application SWF file received from a web server hosted at a second internet domain and executed by the client computer, the request includes the second Internet domain and information specifying the requested data, wherein the application SWF file is a SWF formatted file. The method further includes generating, in response to the received request, at least a portion of a data SWF file including the requested data and a domain identifier corresponding to the second internet domain, wherein the data SWF file is a SWF formatted file, the domain identifier configured to specify that SWF formatted files associated with the second internet domain are permitted to access the requested data within the data SWF file. The method also includes transmitting the data SWF file from the data server computer to the client computer, wherein the data SWF file is adapted to be accessed by the application SWF file to retrieve the requested data associated with the second internet domain.","In another implementation, a system for transmitting a data vector graphic file to a client computer includes one or more servers hosted at a first internet domain and an interface to the one or more servers to receive a request from a client computer for data to be used by an application vector graphic file from a web server executed by the client computer, the web server hosted at a second internet domain, the request includes the second Internet domain and information specifying the requested data. The system further includes a means for generating, in response to the received request, at least a portion of a data vector graphic file including the requested data and a domain identifier corresponding to the second internet domain, the domain identifier specifying that application vector graphic files associated with the second internet domain are permitted to access the requested data contained within the data vector graphic file. The system also includes a communication module to transmit the data vector graphic file from the one or more servers to the client computer, wherein the data vector graphic file is adapted to be accessed by the application vector graphic file to retrieve the requested data associated with the second internet domain.","In another implementation, a computer-implemented method includes compiling by a data server computer hosted at a first Internet domain a template for a vector graphic file having a placeholder for an Internet domain into a data vector graphic file. The method further includes executing by the data server computer the following operations when a request for the data vector graphic file is received from a client computer, wherein the request specifies at least a second Internet domain of a third-party vector graphic file to access the data vector graphic file on the client computer: substituting the second Internet domain of the third-party vector graphic file for the placeholder for the internet domain in the data vector graphic file; and sending to the client computer the data vector graphic file with the second internet domain of the third-party vector graphic file substituted, wherein the client computer authorizes access to the data vector graphic file by the third-party vector graphic file.","Advantageously, the described methods, systems, and products may provide one or more benefits. For example, a data server can control which web server FLASH files have permission to access a data server FLASH file on a per request basis. In another example, efficiency in providing cross-domain data services to a FLASH application can be gained by granting permission to access data with the requested data in a single response.","Additionally, finer control over security authorization to requested data can be gained through the described methods, systems, and products. Such finer controlled security authorizations may permit third-parties to receive only certain data and\/or to access only certain services. Furthermore, instead of allowing an entire internet domain to receive data and\/or services, the described methods, systems, and products can restrict access to specific FLASH applications and\/or files associated with an internet domain.","The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the invention will be apparent from the description and drawings, and from the claims.","Like reference symbols in the various drawings indicate like elements.","This document generally describes methods, systems, and products for enabling cross-domain data services between a data file from a first internet domain and an application file from a second, different, internet domain being executed on a client. The cross-domain data services can be enabled by dynamically generating a data file to include the second internet domain (the internet domain of the application file) and sending the data file to the client.","In one example implementation, the data file and\/or the application file can be vector graphic files, such as a FLASH file. The description below describes methods, systems, and products in the context of vector graphic files and, more specifically, FLASH files. For instance, this document describes methods, systems, and products for providing cross-domain data services to a FLASH application without using a crossdomain.xml policy (described above in the Background). More specifically, this document describes methods, systems, and products for generating a FLASH file that enables cross-domain data services between FLASH files from different internet domains.","In the description below, FLASH files may also be referred to as SWF (short for \u201cSHOCKWAVE FLASH\u201d) files. Additionally, scripting language files that can be used to create vector graphic files may be referenced (such scripting language files may be compiled into vector graphic files). An example scripting language file used to generate a FLASH file can be referred to as an ACTIONSCRIPT. FLASH files, SWF files, and ACTIONSCRIPT files can be formatted in a variety of ways, for example, as provided in the \u201cSWF File Format Specification Version 10,\u201d published by ADOBE Systems Inc., 345 Park Avenue, San Jose, Calif. 95110-2704.","A FLASH application being executed on a client computer can receive from a FLASH file from a web server (\u201ca web server FLASH file\u201d). The web server FLASH file can request data from a data server. To permit the web server FLASH file to access data from the data server (e.g., to enable cross-domain data services), the data server can generate a FLASH file (\u201ca data server FLASH file\u201d) specific to the web server FLASH file's request. The data server FLASH file can be generated to contain the data requested by the web server FLASH file. Additionally, the data server FLASH file can be generated to contain a security restriction permitting the web server FLASH file with access to the requested data.","The security restriction can be a domain identifier embedded within the data server FLASH file. The domain identifier can specify that the Internet domain of the web server FLASH file is permitted to cross the domain boundary and access data contained in the data server FLASH file.","The data server FLASH file can be dynamically generated by the data server in response to a request from the web server FLASH file. In some implementations, dynamic generation can include inserting the domain identifier and the requested data into a pre-compiled FLASH file using placeholders. In some implementations, dynamic generation can include compiling a FLASH file using the domain identifier and the requested data.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","100","102","104","106"]},"The client computer  can receive a web server FLASH file  from the third-party web server . For a variety of reasons, the client computer  may request data from the data sever  for the purpose of executing the web server FLASH file  using a FLASH application . To enable cross-domain data services for the FLASH application  on the client computer , the data server  can dynamically generate a data server FLASH file  for the web server FLASH file . The data server FLASH file  can contain a security restriction  that permits the web server FLASH file  to access data  contained within the data server FLASH file  over a domain boundary in the FLASH application .","For example, the client computer  may receive a web server FLASH file  from the third-party web server  that, when executed by the FLASH application , is an interactive FLASH map program (e.g., a FLASH program that can show a map for a requested address). However, the web server FLASH file  may need an application programming interface (\u201can API\u201d) specific to the interactive FLASH map program for the data server  to enable the interactive mapping functionality. This API can be contained within the data server FLASH file . As such, the client computer  may request the data server FLASH file  that contains the API. To enable the interactive map program (the web server FLASH file ) to access the API (the data server FLASH file ) across the domain boundary in the FLASH application , the data server  may embed the internet domain of the third-party web server  into the data server FLASH file  before sending it to the client computer .","The client computer  can receive a web server FLASH file  from the third-party web server . In some implementations, the FLASH file  can be received as part of a web page . For example, content for the web page  may be provided by a hypertext markup language (\u201cHTML\u201d) file . The HTML file  can instruct that the web server FLASH file  be displayed as part of the web page . The web server FLASH file , the HTML file , and any other files needed for the web page  (e.g., a JavaScript, cascading style sheet file, etc.) can be stored in a data repository  on the web server .","A web browser  on the client computer  can receive the web page  and its accompanying files (including the web server FLASH file ). Upon determining that the web server FLASH file  is to be displayed as part of the web page , the web browser  can launch the FLASH application  to execute the web server FLASH file . While executing or preparing to execute the web server FLASH file , the FLASH application  can determine that a request  should be made to the data server  for the data server FLASH file . In some implementations, another component within the client computer , such as the web browser , can determine that the data server FLASH file  should be requested from the data server .","The request  to the data server  for the data server FLASH file  can contain data specifics  and\/or a domain of the web server  from which the web server FLASH file  was received. The data specifics  can specify the data being requested and\/or provide details regarding the web server FLASH file  for which the data server FLASH file  is being requested. The data specifics  can be used by the data server  to determining what data should be included in the data server FLASH file . The domain of the web server  can specify the internet domain of the third-party web server .","For example, the client computer  may request a FLASH game hosted on www.webserver.com (the internet domain of third-party web server ). Upon receiving the FLASH game (web server FLASH file ) from the third-party web server , the FLASH application  may determine that data for additional game levels is hosted on the data server . To obtain the additional levels, the FLASH application  can send a request  to the data server  for the additional level data. The request  may include the internet domain www.webserver.com (the Internet domain of the third-party web server ) and information regarding the FLASH game (web server FLASH file ) and\/or the additional levels.","Upon receiving the request , the data server  can check whether the web server FLASH file  has permission to receive and\/or access the data server FLASH file . Checking permissions can be performed on a per request basis. Permissions can be based on the data that is being requested and\/or the origin of the request. The origin of the request can include the internet domain of the third-party web server , the specific web server FLASH file , the internet domain of the client computer , or any combination thereof.","For example, a web server FLASH file  from a first domain may have permission to access and\/or receive a first data server FLASH file  but not a second data server FLASH file . Conversely, a web server FLASH file  from a second domain may have permission to access and\/or receive the second data server FLASH file  but not the first data server FLASH file .","In performing the permission check, the data server  may access a database or data table that maintains a record of permissions. To perform the check, the data server  can use the data specifics  and the domain of the web server  received as part of the request .","Once the request  has been determined to have permission to receive the requested data  in the form of the data server FLASH file , the data server  can dynamically generate  at least a portion of the data server FLASH file . Dynamic generation can include retrieving, generating, and\/or compiling the data identified in the data specifics . For example, if the web server FLASH file  is an interactive mapping program, the request  may provide an address as part of the data specifics . The data server  can retrieve and\/or generate a map for this specified address.","Along with the domain of the web server , the dynamically generated data can be inserted into a pre-compiled data server FLASH file . The pre-compiled data server FLASH file  can have placeholders for the domain of the web server  and the dynamically generated data. Inserting can include replacing the placeholders with the appropriate data. For instance, after inserting the domain of the web server  and the dynamically generated content, the data server FLASH file  contains a security restriction  permitting access by the domain of the third-party web server  and requested data  (the data dynamically generated in response to the data specifics ).","In some implementations, the entire data server FLASH file  may be compiled in response to receiving the request . In such implementations, the domain of the web server  and the dynamically generated data can be inserted into an ACTIONSCRIPT which is then compiled into the data server FLASH file . Placeholders may be located in the ACTIONSCRIPT, identifying appropriate locations for the domain of the web server  and the dynamically generated data to be inserted.","In some implementations, data server  may search a cache of dynamically generated data server FLASH files to see if any of the files match the parameters (e.g., the data specifics  and\/or the web server domain ) of the request . If a match is found, the data server  may send the cached dynamically generated data server FLASH file to the client . For example, if a client A and a client B both receive the same web server FLASH file  from the third-party web server  and the data server  generates the data server FLASH file  for client A, the data server  may use the data server FLASH file  generated for client A (assuming the data server FLASH file  is cached after being sent to client A) for client B.","After the data server FLASH file  has been generated (or located in a cache), the data server  can send the data server FLASH file  to the FLASH application  on the client computer . Once received by the FLASH application , the cross-domain data service between the web server FLASH file  and the data server FLASH file  can begin. The cross-domain data service can be enabled by virtue of the internet domain of the third-party data server  being appropriately placed in the data server FLASH file .","In some implementations, cross-domain data services may be enabled by special code contained in the web server FLASH file  and\/or the data server FLASH file . Such special code can use the inserted internet domain of the third-party data server  and specific functionality within the FLASH application  to enable data to be shared across the domain boundary. For example, the ACTIONSCRIPT used to create the web server FLASH file  may be derived from a template containing the special code to interface the data server FLASH file . In such an example, the data server  may have made this template and\/or special code available to the third-party web server .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","202","200","100","202","102"]},"The data server  can include a FLASH compiler , a response data generator , a dynamic FLASH file generator , a permission checker , an ACTIONSCRIPT template data repository , and\/or a compiled FLASH template data repository . The data server  and at least some its subcomponents (the FLASH compiler , the response data generator , the dynamic FLASH file generator , the permission checker , the ACTIONSCRIPT template data repository , and\/or the compiled FLASH template data repository ) can be implemented in a variety of computer systems, as described below with reference to .","The FLASH compiler  can compile ACTIONSCRIPT templates contained in the ACTIONSCRIPT data repository  into FLASH file templates. The compiled FLASH file templates can be stored in the compiled FLASH template data repository . Compilation of an ACTIONSCRIPT template and storage of a corresponding compiled FLASH file template can occur some time before a request for the FLASH file template is received (e.g., the ACTIONSCRIPT can be compiled when it is uploaded to the data server ).","The permission checker  can determine whether a received request is permitted to receive and\/or access the requested data server FLASH file. If a request is permitted to proceed, the response data generator  can generate data specified by a request received by the data server . The response generator  can provide the generated response data to the dynamic FLASH file generator . The dynamic FLASH file generator  can combine the received response data with a compiled FLASH file template stored in the compiled FLASH template data repository  to create a data server FLASH file. For example, the data server FLASH file  from system  can be generated using the response data generator  and the dynamic FLASH file generator .","The FLASH compiler  can receive an ACTIONSCRIPT template  from the ACTIONSCRIPT template data repository . The ACTIONSCRIPT template  may contain placeholders -. As part of the ACTIONSCRIPT template , the placeholders -can be compiled into a compiled FLASH template . The placeholders -can identify locations in the ACTIONSCRIPT template  and\/or the compiled FLASH template  where response data and\/or an internet domain for a third-party web server can be inserted.","Placeholder can be a placeholder for response data. As described above with regard to system , the response data can be generated in response to data specifics contained in a request for a data server FLASH file from a client. The placeholder can be a unique set of characters that can permit the placeholder to be identified after compilation of the ACTIONSCRIPT template .","Placeholder can be a placeholder for an internet domain of a web server, such as the internet domain of the third party web server . The Internet domain to replace the placeholder can be provided as part of a request for a data server FLASH file. Like the placeholder , the placeholder can be a unique set of characters.","The FLASH compiler  can compile the ACTIONSCRIPT template , including the placeholders -, into a compiled FLASH template . The FLASH compiler  can compile the ACTIONSCRIPT template  at a time prior to the data server  receiving a request for a data server FLASH file pertaining to the ACTIONSCRIPT template . The ACTIONSCRIPT template  may be compiled when a new or updated version is received by the data server .","The compiled FLASH template  can be partitioned into at least five compiled fragments -. The compiled fragments -can be defined by the location of the placeholders -after compilation of the ACTIONSCRIPT template  by the FLASH compiler .","For instance, fragment can refer to a portion of the compiled FLASH template  from the start of the file to the placeholder for domain name . Fragment can refer to the placeholder for domain name . Fragment can refer to the portion of the compiled FLASH template  between the placeholder and the placeholder . Fragment can refer to the placeholder for data specifics . Fragment can refer to a portion of the compiled FLASH template  from the placeholder to the end of the file.","The compiled FLASH template  can be stored in the compiled FLASH template data repository  as fragments -. In some implementations, the data repository  may store the fragments -as distinct related files. In other implementations, the data repository  may store the compile FLASH template  as a single file with information identifying the various fragments -","Once the compiled FLASH template  has been stored in the data repository , the data server  can be ready to receive and service requests related to the compiled FLASH template . Compiling the ACTIONSCRIPT template  and fragmenting the compiled FLASH template  may be performed a single time. However, the compiled FLASH template  and its stored fragments -can be used to service multiple requests.","For example, the ACTIONSCRIPT for an interactive map API can be compiled by the FLASH compiler  with placeholders -. The placeholder can be for the domain of the third-party web server providing a web server FLASH file that is requesting the API, such as the third-party web server  providing the web server FLASH file . The placeholder can be for map data specific to the request, such as map data for a specific address. Since there are placeholders -for the request specific data that may be part of the API returned in response to a request, the compiled FLASH template  for the API can be used to service requests from multiple different clients. Thus, the ACTIONSCRIPT template  for the API can be compiled once per multiple requests for the API.","A request for FLASH data  can be received by the data server . The request for FLASH data  may be similar to the request for FLASH data  described above with reference to system . For instance, the request for FLASH data  may be received from a client computer, such as client computer , that is executing a web server FLASH file, such as web server FLASH file , using a FLASH application, such as FLASH application .","The request for FLASH data  can contain data specifics  and\/or a domain of a web server  from which a web server FLASH file originated. The data specifics  can provide specific information regarding the request. For instance, in the case of an interactive map API being requested, the data specifics  can provide a specific address to which the request pertains.","As discussed above with regard to system , the data server  can check whether the request has permission to receive the requested data before beginning to process the request. The data server  can use the permission checker  to perform this function. The permission checker  can determine whether a request has permission based on the internet domain of the web server , an internet domain of the client computer that is executing the web server FLASH file (e.g., an Internet domain for client computer  from system ), the data server FLASH file that is being requested, and\/or the data specifics  being requested.","Once the permission checker  has determined that the request  has permission to receive the requested data server FLASH file, the request  can be forwarded to the response data generator  and the dynamic FLASH file generator . The response data generator  can use the information from the data specifics  to generate response data . The response data generator  may reference one or more data repositories (not depicted) to generate the response data . The response data  can be sent to the dynamic FLASH file generator  by the response data generator .","For instance, in the case a request for an interactive map API and data specifics  identifying a specific address for the request, the response data generator  can reference a data repository storing map information to generate response data  pertaining to the specific address.","Operating in tandem with the response data generator , the dynamic FLASH file generator  can obtain pre-compiled fragments  (e.g., fragments -) of the requested data server FLASH file from the compiled FLASH template data repository . The dynamic FLASH file generator  can identify the requested data server FLASH file from request for FLASH data . For instance, the request  may identify the specific data server FLASH file that (e.g., data server FLASH file containing the interactive map API).","Once the dynamic FLASH file generator  has obtained the fragments , it can replace the placeholder fragments (e.g., fragments and ) with the domain of the web server  and the generated response data . Before replacing the fragments, the dynamic FLASH file generator  may compile the portions to be inserted (the web server  and the generated response data ). The dynamic FLASH file generator  can use the FLASH compiler  to perform this compilation.","The dynamic FLASH file generator  can include a FLASH file data size adjuster . The FLASH file data size adjuster  can make adjustments to the compiled fragments  when the size of the domain of the web server  and\/or the size of the generated response data  is different than the size of the placeholders and , respectively. For instance, the FLASH file data size adjuster  may adjust an identifier that provides an overall size for the fragments . In another instance, the FLASH file data size adjuster  may adjust any internal references that may have changed on account of the placeholders and being replaced.","While the response data generator  is generating the response data , the dynamic FLASH file generator  can begin sending a data stream  of the fragments  to the client that submitted the request . The data stream  can consist of streamed data fragments -. The streamed data fragments , , and can correspond to the data fragments , , and , respectively. The streamed data fragment can correspond to placeholder fragment after it has been replaced with the domain of the web server . The streamed data fragment can correspond to the placeholder fragment after it has been replaced with the generated response data .","The first streamed data fragment can be sent by the dynamic FLASH file generator  while the placeholder fragment is being replaced with the domain of the web server  and while the response data generator  is generating the response data . Similarly, the second streamed data fragment (the placeholder fragment replaced with the domain of the web server ) and the third streamed data fragment can be streamed to the client while the response data  is being generated. The fourth streamed data fragment (the response data ) and the fifth streamed data fragment can be streamed after the response data  has been received from the response data generator .","By having precompiled fragments of the requested data server FLASH file that can be streamed while portions of the request are being generated, the data server  can promptly respond to a request  from a client.","While only two placeholders are described, additional embodiments with a different number of placeholders are possible. In such additional embodiments, the number of fragments that may be generated can be a function of the number of placeholders. For instance, the number of fragments generated and stored may be equal to two times the number of placeholders plus one (e.g., number of fragments=(2*placeholders)+1)","For example, if four placeholders are provided for a data server FLASH file, then there may be nine fragments in total. In such a scenario with four placeholders, one may provide to the web address  and the other three may provide information regarding three distinct data requests.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 3","b":["300","300","100","200","100","200","300"]},"At step , the process  can being by receiving a request from a client computer for data to be used by a web server FLASH file. For example, the data server  receives the request  from the client computer  for data to be used by the web server FLASH file  being executed using the FLASH application .","The process  can then extract a domain name of the web server FLASH file from the request at step . For instance, using domain of the web server , the data server  can extract the internet domain of the third-party web server  from which the web server FLASH file  originated from the request .","In some implementations, the process  can determine whether the extracted Internet domain has permission to receive the requested data at step . For example, the data server  can use the permission checker  to determine whether the request  has permission to receive the requested data based on the domain of the web server . If the Internet domain does not have permission, then process  can proceed to step  without processing the request. If the internet domain does have permission, then process  can continue to process the request at step , , and\/or  (depending on the implementation).","In some implementations, the process  can determine whether the particular web server FLASH file has permission to receive the requested data at step . For example, the data server  can use the permission checker  to determine whether the request  has permission to receive the requested data based on the web server FLASH file from which the request  originated. If the internet domain does not have permission, then process  can proceed to step  without processing the request. If the internet domain does have permission, then process  can continue to process the request at step  and\/or  (depending on the implementation).","In some implementations, the process  can generate the requested data at step . For example, the response data generator  can generate the response data  based upon the request . In some implementations, step  may not be performed if the requested data had already been generated (e.g., the requested data was previously generated for another request).","At step , the process  can dynamically generate a data server FLASH file including the domain name of the web server and the requested data. For example, the dynamic FLASH file generator  can generate the requested data server FLASH file using the precompiled fragments , , and , and the placeholder fragments and replaced with the domain of the web server and the requested data, respectively.","In some implementations, dynamic generation of the data server FLASH file can include compiling an entire ACTIONSCRIPT with the domain of the web server and the requested data inserted. For example, the dynamic FLASH file generator  could insert the domain of the web server  and the requested response data  into the ACTIONSCRIPT template  at placeholders -. After making the insertion, the data server  could produce the data server FLASH file by compiling the ACTIONSCRIPT template  using the FLASH compiler .","At step , the process  can transmit the generated data server FLASH file to the client computer for use by the web server FLASH file. For example, the data server FLASH file  can be transmitted by the data server  to the client computer  for use by web server FLASH file  being executed by the FLASH application .","As described with reference to system , in some implementations the data server FLASH file can be provided to the client in a data stream such that a pre-compiled portion of the FLASH file is streamed while content is being generated in response to the request. For example, the precompiled fragment can be streamed to the client while the response data generator  is generating the response data .","After transmitting the data server FLASH file, the process  can check whether there are additional requests to be processed at step . If there are additional request, the process  can return to step  for the additional request. If there are no more requests, then process  can end.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIGS. 4A-B","b":["400","450","400","450","100","200","100","200","400","450"]},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 4A","b":["400","400","402","204","213","214"],"i":["a","b "]},"The process  can compile the received ACTIONSCRIPT into a template FLASH file (step ). For example, the FLASH compiler  can compile the ACTIONSCRIPT template  into the compiled FLASH template .","The process  can then parse the template FLASH file to identify the location of the placeholders in the template FLASH file at step . Based upon this parsing, the process  can fragment the template FLASH file based on the location of the place holders at step . These fragments can then be stored . Process  ends after the fragments are stored.","For example, the data server  can parse and fragment the compiled FLASH template into fragments -based upon the placeholders. These fragments can then be stored in the compiled FLASH template data repository .",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 4B","b":["450","450","452","202","222","224","226"]},"In some implementations, the process  can generate the requested data at step . Step  may be similar to step  described above with reference to .","At step , process  can access compiled fragments for the requested data server FLASH file that are stored. For example, the dynamic FLASH file generator can obtain the pre-compiled fragments  that were previously generated and stored in the compiled FLASH template data repository . The compiled fragments being accessed could have been previously created in a manner similar to that described above with regard to process .","At step , the process  can generate a data server FLASH file by inserting the requested data and the domain name at positions formerly occupied by placeholders. Step  may be similar to step  described above with reference to .","At step , the process  can adjust size information for the fragments into which the domain name and the response data were inserted. Step  may also involve adjusting size information for the data server FLASH file that may be stored in non-placeholder fragments. Additionally, the step  may also include adjusting any internal references within the data server FLASH file that may be incorrect after the placeholder fragments were replaced.","For example, the FLASH file data size adjuster  can adjust the size of the data fragments  after the dynamic FLASH file generator has replaced the placeholders in the fragments .","At step , the process  can stream the data server FLASH file to the client that had submitted the request received at step . Streaming can be performed in a manner similar to step  describe above with regard to . Streaming can also be performed in a manner similar to that described with regard to the data stream  and the streamed fragments -depicted in . After step , the process  can end.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 5","b":["500","500","500","500"]},"The system  includes a processor , a memory , a storage device , and an input\/output device . Each of the components , , , and  are interconnected using a system bus . The processor  is capable of processing instructions for execution within the system . The processor may be designed using any of a number of architectures. For example, the processor  may be a CISC (Complex Instruction Set Computers) processor, a RISC (Reduced Instruction Set Computer) processor, or a MISC (Minimal Instruction Set Computer) processor.","In one implementation, the processor  is a single-threaded processor. In another implementation, the processor  is a multi-threaded processor. The processor  is capable of processing instructions stored in the memory  or on the storage device  to display graphical information for a user interface on the input\/output device .","The memory  stores information within the system . In one implementation, the memory  is a computer-readable medium. In one implementation, the memory  is a volatile memory unit. In another implementation, the memory  is a non-volatile memory unit.","The storage device  is capable of providing mass storage for the system . In one implementation, the storage device  is a computer-readable medium. In various different implementations, the storage device  may be a floppy disk device, a hard disk device, an optical disk device, or a tape device.","The input\/output device  provides input\/output operations for the system . In one implementation, the input\/output device  includes a keyboard and\/or pointing device. In another implementation, the input\/output device  includes a display unit for displaying graphical user interfaces.","The features described can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. The apparatus can be implemented in a computer program product tangibly embodied in an information carrier, e.g., in a machine-readable storage device for execution by a programmable processor; and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. A computer program is a set of instructions that can be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.","Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors of any kind of computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally, a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and FLASH memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).","To provide for interaction with a user, the features can be implemented on a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.","The features can be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), peer-to-peer networks (having ad-hoc or static members), grid computing infrastructures, and the Internet.","The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network, such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","Although a few implementations have been described in detail above, other modifications are possible. Moreover, other mechanisms for generating a data server FLASH file to enable cross-domain data service in a FLASH application may be used. In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. Other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 4A-B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
