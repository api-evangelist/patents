---
title: Method and apparatus for accelerating occlusion culling in a graphics computer
abstract: A method for accelerating occlusion culling in a graphics computer is disclosed. A depth test is performed on a fragment for a first time to determine if the fragment is visible. The fragment can be marked as potentially visible if the depth test concluded that the fragment is visible. Subsequently, the depth test is performed on the fragment for a second time to determine if the fragment is visible. If the depth test concludes that the fragment is visible, graphics processing for the fragment can be stopped at this point.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06930684&OS=06930684&RS=06930684
owner: Broadizon, Inc.
number: 06930684
owner_city: Austin
owner_country: US
publication_date: 20020927
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF A PREFERRED EMBODIMENT"],"p":["1. Technical Field","The present invention relates to a method and apparatus for processing graphical data in general, and in particular to a method and apparatus for occlusion culling within a graphics processing system. Still more particularly, the present invention relates to a method and apparatus for accelerating occlusion culling in a graphics computer.","2. Description of the Related Art","In a graphics computer, a two-dimensional (2D) display screen is commonly used to display three-dimensional (3D) representations of an object. An object to be rendered is initially divided into multiple primitives. Primitives are basic components of a graphical object and may be defined by geometries of a point, a line, or a polygon. The primitives are subsequently fed through a graphics pipeline in which various types of graphical processing are performed and the results are then rendered on a 2D display screen.","Since each primitive may contain thousands of fragments, a relatively large amount of processing time can be spent to render all the fragments within a primitive. However, some of the processing time are wasted because not all of the primitives are ultimately visible to a viewer. For example, a car may have a hierarchical data structure with different groupings for components such as body panels, an engine, a drive train, wheels, etc. Some of the data structures, such as the engine, are quite complex and may potentially make up of thousands or millions of primitives. If the car is displayed from the top with the hood closed, a typical graphics computer may spend a large amount of time to process the multitude of primitives for the engine with the end result of not a single primitive for the engine needs to be displayed. Similarly, other portions of the automobile, such as the wheels or drive train, may also be entirely occluded. Needless to say, the amount of time spent on processing all of the occluded primitives greatly decreases the speed and efficiency of the typical graphics computer.","Consequently, it would be desirable to provide a method and apparatus for accelerating occlusion culling in a graphics computer.","In accordance with a preferred embodiment of the present invention, a depth test is performed twice on each fragment within a primitive before vertex shading is performed on the primitive. On a fragment level, a depth test is performed on a fragment for a first time to determine if the fragment is visible. The fragment can be marked as potentially visible if the depth test concluded that the fragment is visible. Subsequently, the depth test is performed on the fragment for a second time to determine if the fragment is visible. If the depth test concludes that the fragment is visible, graphics processing for the fragment can be stopped. On a primitive level, if none of the fragments within the primitive is visible, graphics processing for the primitive can be stopped at such point. On a vertex array level, if none of the primitives within the vertex array is visible, graphics processing for the vertex array can be stopped at such point.","All objects, features, and advantages of the present invention will become apparent in the following detailed written description.","The present invention may be executed in a variety of data processing systems under a number of different operating systems. The data processing system may be, for example, a personal computer, a mid-range computer, a mainframe computer, or a console gaming system. In addition, the data processing system may be a stand-alone system or part of a network such as a local-area network (LAN) or a wide-area network (WAN).","Referring now to the drawings and in particular to , there is depicted a block diagram of a graphics pipeline , according to the prior art. As shown, graphics pipeline  includes a transform unit , a light\/shade unit , a clip unit , a perspective unit  and a scan conversion unit . Transform unit  converts primitive data input from a first coordinate space to a second coordinate space. Light\/shade unit  applies lighting and shading to the transformed primitives, and may additionally provide texture mapping. Transform unit  and light\/shade unit  may be combined to perform a graphics processing procedure commonly known as vertex shading. Clip unit  clips the primitives to a viewing volume and may further clip the primitives relative to one or more arbitrary clipping planes. Within clip unit , the primitives are modified so that only the portion of the primitives located inside the viewing volume becomes visible. Perspective divide unit  divides the coordinates of all the primitives by w to transform the primitive data from homogeneous to three-dimensional coordinates. To provide perspective projection, the coordinates are further divided at perspective divide unit  by the depth component so that objects farther away appear smaller. Within scan conversion unit , vertex coordinates and attributes are converted into pixel colors and depths. The data output from graphics pipeline  includes pixel coordinates (or addresses) x and y, pixel depth z, and color r, g, b, a or color index. The output of graphics pipeline  is subsequently routed to a frame buffer  that includes a color buffer and a depth buffer.","Under OpenGL\u2122 architecture, a graphics application renders a scene by submitting vertex arrays as input to graphics pipeline . Graphics pipeline  then breaks each vertex array down into primitives and applies vertex shading to each of the primitives. Each primitive is then clipped to the clip volume and clipping planes. After rasterizing each primitive to multiple fragments, graphics pipeline  applies fragment shading to each of the fragments. Finally, if a fragment passes a depth test, graphics pipeline  outputs the fragment to frame buffer  as pixels.","When performing the depth test, a controller (not shown) associated with frame buffer  compares the incoming fragment data to the fragment data displayed, and controls the storage of the incoming fragment data accordingly. Specifically, the depth component z for each incoming fragment is compared to the depth component z for the fragment currently being displayed at the same x, y location. If the incoming fragment at that location passes the depth test (i.e., closer to a viewer and is visible to the viewer) against the currently displayed fragment data, then the controller will enable the color and depth buffers of frame buffer  to store the data for that incoming fragment (now as pixels). The data associated with the occluded pixels are not stored in the color and depth buffers of frame buffer .","For an unsorted scene with high depth complexity, graphics pipeline  may overdraw frame buffer  many times. Such overdraw is unavoidable because at the time when a fragment is being processed, graphics pipeline  does not have all the necessary information to determine whether or not the fragment is going to be visible in a scene. Thus, conservatively, a fragment has to be deemed visible if the fragment passes the depth test, but the fragment may subsequently be overdrawn by another fragment that is closer to a viewer. Hence, graphics pipeline  can waste a considerable amount of time in processing invisible fragments. Such waste in processing time is likely to increase with the introduction of vertex and fragment shading and the increasing demand for photo-realistic scenes with a high degree of complexity. If a graphics pipeline can determine the occlusion of a vertex array, primitive or fragment, the graphics pipeline can stop further processing of the vertex array, primitive or fragment at such point. Needless to say, the earlier the graphics pipeline can determine an occlusion of a vertex array, primitive or fragment, the less processing time will be wasted.","In accordance with a preferred embodiment of the present invention, a dual pass occlusion method (DPOM) is used to reduce graphics processing time by computing the occlusion information for all fragments in the view frustum, and such information is called the fragment occlusion information (FOI). DPOM also computes the primitive occlusion information (POI) for all primitives in the view frustum and the vertex array occlusion information (VOI) for all vertex arrays submitted by a graphical application to render a scene. With FOI, a graphics pipeline can disable fragment shading for the occluded fragments. With POI and VOI, a graphics pipeline can reject a primitive and a vertex array, respectively, before the corresponding primitives and vertex arrays reach the vertex shading stage of the graphics pipeline.","Under DPOM, the above-mentioned occlusion information (i.e., FOI, POI and VOI) are computed by using preferably two consecutive pre-processing passes. In order to be practical, the above-mentioned occlusion information are computed without requiring a graphics application to supply any geometric hints and\/or spatial relationship information. Preferably, three separate buffers are utilized to store the above-mentioned occlusion information. For example, a fragment result record (FRR) buffer is utilized to store FOI, a primitive result record (PRR) buffer is utilized to store POI, and a vertex array result record (VRR) buffer is utilized to store VOI.","As shown in , a FRR buffer  is a linear (i.e., one-dimensional) buffer having a number of consecutive entries. Each of the entries in FRR buffer  is preferably one bit long and contains the FOI of a fragment. As shown in , a PRR buffer  is a linear buffer having a number of entries, with each entry corresponding to a primitive. Each of the entries in PRR buffer  contains three fields\u2014a field , a field  and a field . For a primitive, field  contains the number of visible fragments within the primitive, field  contains the total number of fragments within the primitive, field  contains a pointer pointing to the address location in FRR buffer  regarding the corresponding fragments for the primitive. As shown in , a VRR buffer  is a linear buffer having a number of entries, with each entry corresponding to a vertex array. Each of the entries in VRR buffer  contains three fields\u2014a field , a field  and a field . For a vertex array, field  contains the number of visible primitives within a vertex array, field  contains the total number of primitives within a vertex array, field  contains a pointer pointing to the address location in PRR buffer  regarding the corresponding primitives for the vertex array.","Referring now to -, there are depicted high-level flow diagrams of a method for accelerating occlusion culling in a graphics computer, in accordance with a preferred embodiment of the present invention. In a first pre-processing pass, a depth buffer within a graphics pipeline is cleared, as shown in block . After fetching a vertex array in a scene, as depicted in block , the graphics pipeline fetches a primitive within the vertex array, as shown in block . For each fragment within the primitive, a depth test (visibility test) is performed using the depth buffer, as depicted in block . If the depth test determines that the fragment is occluded, the entry in FRR buffer  corresponding to the fragment is set to a logical zero (\u201c0\u201d), as shown in block . Otherwise, the entry in FRR buffer  corresponding to the fragment is set to a logical one (\u201c1\u201d), as depicted in block , and the depth buffer is updated with the depth value of the fragment, as shown in block .","After all the fragments within a primitive have been tested, an entry in PRR buffer  corresponding to the primitive is updated by counting the number of visible fragments in the primitive for that entry, as shown in block . If all the fragments within the primitive are occluded, field  for that primitive entry in PRR buffer  is set to \u201c0;\u201d otherwise, field  for that primitive entry in PRR buffer  is set to \u201c1\u201d or the number of non-occluded fragments to imply that primitive is potentially visible.","Similarly, after all the primitives within a vertex array have been tested, an entry in VRR buffer  can be updated by counting the number of visible primitives in the vertex array for that entry, as depicted in block . If all the primitives in the vertex array are occluded, field  for that vertex array entry in VRR buffer  is set to \u201c0;\u201d otherwise, field  for that vertex array entry in VRR buffer  is set to \u201c1\u201d or the number of non-occluded primitives to imply that vertex array is potentially visible. The first pre-processing pass is completed after all the vertex arrays in the scene have been processed, as shown in block .","In a second pre-processing pass, the graphics pipeline fetches a vertex array within the scene, as shown in block . A determination is made as to whether or not the corresponding entry in VRR buffer  has a \u201c0\u201d value, as depicted in block . A vertex array entry in VRR buffer  with a \u201c0\u201d value can definitely conclude that vertex array as not visible, and the graphics pipeline can stop processing that vertex array at such point. Otherwise, each primitive within the vertex array has to be tested again, as shown in block . Thus, a determination is made as to whether or not the corresponding entry in PRR buffer  has a \u201c0\u201d value, as depicted in block . A primitive entry in PRR buffer  with a \u201c0\u201d value can definitely conclude that primitive as not visible, and the graphics pipeline can stop processing that primitive at such point. Otherwise, each fragment within the primitive has to be tested again, as shown in block . Thus, a determination is made as to whether or not the corresponding entry in FRR buffer  has a \u201c0\u201d value, as depicted in block . A fragment entry in FRR buffer  with a \u201c0\u201d value can definitely conclude that fragment as not visible, and the graphics pipeline can stop processing that fragment at such point.","For each potentially visible fragment within the primitive, a depth test is performed for a second time, as shown in block . If the depth test determines that the fragment is occluded, the entry in FRR buffer  corresponding to the fragment is set to a \u201c0\u201d value, as depicted in block . After all the fragments within a primitive have been processed, the entry in PRR buffer  corresponding to the primitive is set to the number of non-occluded fragments in the primitive, as shown in block . Similarly, after all the primitives within a vertex array have been processed, the entry in VRR buffer  corresponding to the vertex array is set to the number of non-occluded primitives in the vertex array, as depicted in block .","In the second pre-processing pass, the depth buffer is not cleared because all the values in the depth buffer are from visible fragments. All the vertex arrays are processed again and the information in VRR buffer , PRR buffer  and FRR buffer  gathered in the first pre-processing pass are used to simplify processing. Unlike the first DPOM pass, a fragment that is determined to be visible by the visibility test is now definitely visible. By counting the number of visible fragments per primitive, the visibility of a primitive can be determined. By counting the number of visible primitives per vertex array, the visibility of a vertex array can be determined. As such, all results are definitive. Graphics processing can be stopped for definitely occluded vertex arrays, primitives and fragments in the rendering passes.","After the two pre-processing passes, the FOI, POI and VOI are stored in FRR buffer , PRR buffer  and VRR buffer , respectively, for each fragment, primitive and vertex array. For the rendering of a scene, the graphics pipeline can use the information in VRR buffer , PRR buffer  and FRR buffer  to prevent vertex arrays, primitives and fragments, respectively, from passing through the entire graphics pipeline and there is no need to use the depth buffer. Thus, DPOM is more efficient than the prior art when the effort to run the two consecutive preprocessing passes required to compute the occlusion information is less than the effort to shade the occluded fragments and vertices.","A pseudo-code example of DPOM is listed as follows:",{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u20031","struct FRR"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u20032","bit visible;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u20033","struct PRR"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u20034","FRR* frr;"]},{"entry":["\u20035","int vis_frags; \/\/visible fragments"]},{"entry":["\u20036","int tot_frags; \/\/total fragments"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u20037","struct VRR"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u20038","PRR* prr;"]},{"entry":["\u20039","int vis_frags; \/\/visible fragments"]},{"entry":["\u200210","int tot_frags; \/\/total fragments"]},{"entry":["\u200211","int vis_prims; \/\/visible primitives"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200212","struct FRAG;"]},{"entry":["\u200213","struct PRIM;"]},{"entry":["\u200214","struct VERTARR;"]},{"entry":["\u200215","FRR* frr_buffer;"]},{"entry":["\u200216","PRR* prr_buffer;"]},{"entry":["\u200217","VRR* vrr_buffer;"]},{"entry":["\u200218","bool isBlendingDisabled( );"]},{"entry":["\u200219","bool testDepthBuffer(FRAG* f);"]},{"entry":["\u200220","updateDepthBuffer(FRAG* f);"]},{"entry":["\u200221","outputToFrameBuffer(FRAG* f);"]},{"entry":["\u200222","clearDepthBuffer( );"]},{"entry":["\u200223","shadePrim(PRIM* p);"]},{"entry":["\u200224","shadeFrag(FRAG* f);"]},{"entry":["\u200225","forEach (FRAG* f);"]},{"entry":["\u200226","forEach (PRIM* p);"]},{"entry":["\u200227","forEach (VERTARR* v);"]},{"entry":["\u200228","function pass1( )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200229","FRR* fp","= frr_buffer;"]},{"entry":["\u200230","PRR* pp","= prr_buffer;"]},{"entry":["\u200231","VRR* vP","= vrr_buffer;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200232","clearDepthBuffer( );"]},{"entry":["\u200233","forEach (VERTARR* v)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200234","vp\u2212>vis_prims","= 0;"]},{"entry":["\u200235","vp\u2212>vis_frags","= 0;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200236","vp\u2212>tot_frags","= 0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200237","PRR* \u2002cur_pp","= pp"]},{"entry":["\u200238","forEach (PRIM* p)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200239","cur_pp\u2212>vis_frags","= 0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200240","cur_pp\u2212>tot_frags","= 0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200241"," FRR* cur_fp","= fp;"]},{"entry":["\u200242","forEach (FRAG* f)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200243","if (testDepthBuffer(f))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200244","cur_fp\u2212>visible = 1;"]},{"entry":["\u200245","cur_pp\u2212>vis_frags++;"]},{"entry":["\u200246","if (isBlendingDisabled( ))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200247","updateDepthBuffer(f);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200248","else cur_fp\u2212>visible = 0;"]},{"entry":["\u200249","cur_pp\u2212>tot_frags++;"]},{"entry":["\u200250","cur_fp++;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200251","if (cur_pp\u2212>vis_frags)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200252","cur_pp\u2212>frr = fp= cur_fp;"]},{"entry":["\u200253","vp\u2212>vis_frags+=cur_pp\u2212>vis_frags;"]},{"entry":["\u200254","vp\u2212>tot_frags+=cur_pp\u2212>tot_frags;"]},{"entry":["\u200255","vp\u2212>vis_prims++;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200256","cur_pp++;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200257","if (vp\u2212>vis_prims)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200258","vp\u2212>prr = pp = cur_pp;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200259","vp++;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200260","function pass2( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200261","VRR* vp=vrr_buffer;"]},{"entry":["\u200262","forEach (VERTARR* v)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200263","if (vp\u2212>vis_prims)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200264","vp\u2212>vis_prims","= 0;"]},{"entry":["\u200265","vp\u2212>vis_frags","= 0;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200266","vp\u2212>tot_frags","= 0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200267","PRR* cur_pp","= vp\u2212>prr;"]},{"entry":["\u200268","forEach (PRIM* p)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200269","if (cur_pp\u2212>vis_frags)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200270","cur_pp\u2212>vis_frags","= 0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200271","cur_pp\u2212>tot_frags","= 0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200272","FRR* cur_fp","=cur_pp\u2212>"]},{"entry":[{},{},"frr;"]},{"entry":["\u200273","forEach (FRAG* f)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200274","if (cur_fp\u2212>visible)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200275","if (testDepthBuffer(f))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200276","cur_fp\u2212>visible = 1;"]},{"entry":["\u200277","cur_pp\u2212>vis_frags++;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200278","cur_pp\u2212>tot_frags++;"]},{"entry":["\u200279","cur_fp++;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200280","if (cur_pp\u2212>vis_frags)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200281","vp\u2212>vis_frags+=cur_pp"]},{"entry":[{},"\u2212>vis_frags;"]},{"entry":["\u200282","vp\u2212>tot_frags+=cur_pp\u2212>tot_frags;"]},{"entry":["\u200283","vp\u2212>vis_prims++;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200284","cur_pp++;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200285","vp++;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200286","function draw( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200287","VRR* vp=vrr_buffer;"]},{"entry":["\u200288","forEach (VERTARR* v)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200289","if (vp\u2212>vis_prims);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200290","PRR* pp = vp\u2212>prr;"]},{"entry":["\u200291","forEach (PRIM* p)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200292","if (pp\u2212>vis_frags)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200293","shadePrim(p);"]},{"entry":["\u200294","FRR* fp = pp\u2212>frr;"]},{"entry":["\u200295","forEach (FRAG* f)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200296","if (fp\u2212>visible)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u200297","shadeFrag(f);"]},{"entry":["\u200298","outputToFrameBuffer(f);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u200299","fp++;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["100","pp++;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["101","vp++;"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Lines  to  of the pseudo code define the various data structures. Lines  to  of the pseudo code specify the memory pointers to FRR buffer , PRR buffer  and VRR buffer . The functions declared in lines  to  of the pseudo code are roughly equivalent to the depth and frame buffer operations in the per fragment unit in OpenGL\u2122. The testDepthBuffer( ) function is a less-than depth test. The functions shadePrim( ) and shadeFrag( ) in lines  to  of the pseudo code execute vertex and fragment programs for vertices and fragments, respectively. The forEach( ) function in line  of the pseudo code corresponds to a rasterizer unit. The functions pass( ) and pass( ) compute the RR buffers. The draw( ) function renders to the frame buffer using the occlusion information stored in the RR buffers.","For the first DPOM pass, lines  to  of the pseudo code clear the depth buffer and initializes the data structures. Lines  to  of the pseudo code apply vertex transformation to a primitive. The vertex transformation is computed using a simplified vertex shading routine, and in most cases, it is the multiplication of the vertex position by a matrix. The simplified vertex shading program and the full vertex shading program must be written such that they compute the same bit exact representation of the vertex position in order for the rasterizer to generate the same fragments for each pass. Lines  to  of the pseudo code perform the depth test on a fragment and store the result in FRR buffer , PRR buffer  and VRR buffer . Lines  to  of the pseudo code also update the depth buffer.","For the second DPOM pass, lines  to  of the pseudo code check if a vertex array is visible and stop processing the vertex array if it is not visible. Lines  to  of the pseudo code check if a primitive is visible and stop processing the primitive if it is not visible. Lines  to  of the pseudo code check if a fragment is visible and update FRR buffer , PRR buffer  and VRR buffer . Vertex arrays, primitives and fragments are rejected from further processing based on their occlusion information in their respective buffers -.","The length of each of FRR buffer , PRR buffer , and VRR buffer  is zero at the start of pass( ) and grows as pass( ) process each fragment, primitive and vertex array. Each of FRR buffer , PRR buffer , and VRR buffer  reaches its maximum length at the end of pass( ). Each of FRR buffer , PRR buffer , and VRR buffer  is filled linearly; therefore, it lends itself to memory access optimization techniques such as write combiners. The length of each of FRR buffer , PRR buffer , and VRR buffer  depends on the scene. A graphics application should control the capacity of FRR buffer , PRR buffer , and VRR buffer  because the graphics application has the most knowledge about its scenes. A DPOM buffer overflow flag can be set during the first pass when a buffer reaches its capacity, and the first pass is then terminated. Similar action applies to the second pass. A graphics application should be able to query for the buffer overflow flags. During a rendering pass, an overflow situation is equivalent to DPOM being unable to supply further occlusion information. The graphics pipeline should be able to continue as a non-DPOM enhanced graphics pipeline by using the depth buffer for occlusion culling. Performance registers can count the number of vertex arrays, primitives and fragments rendered without using DPOM. A graphics application can use such information to adjust the buffer capacity accordingly.","FRR buffer , PRR buffer , and VRR buffer  can be stored in a random access memory (RAM). As a result, FRR buffer , PRR buffer , and VRR buffer  can be accessed by graphics applications using the appropriate application programming interface (API) function calls. FRR buffer , PRR buffer , and VRR buffer  can also be accessed by vertex and shading programs during the rendering passes. Since FRR buffer , PRR buffer , and VRR buffer  can consume a significant amount of memory, there are two ways for reducing memory consumption:\n\n","With reference now to , there is illustrated a block diagram of a graphics computer having a graphics adapter in which a preferred embodiment of the present invention is incorporated. As shown, a graphics computer  includes a central processing unit (CPU) , a read-only memory (ROM) , and a random-access memory (RAM)  connected to a system bus . CPU , ROM , and RAM  are also coupled to a peripheral components interconnect (PCI) local bus  via a PCI host bridge  that provides a high bandwidth path for allowing PCI devices to directly access RAM .","Also attaching to PCI local bus  are a small computer system interface (SCSI)  and an expansion bus bridge . SCSI  is utilized to control high-speed SCSI disk drive . Expansion bus bridge , such as a PCI-to-ISA bus bridge, is utilized to couple an industry standard architecture (ISA) bus  to PCI local bus . A keyboard  and a mouse  are attached to ISA bus  for performing certain basic input\/output (I\/O) functions. In addition, an audio adapter  is attached to PCI local bus  for controlling audio output through a speaker . A graphics adapter  is also attached to PCI local bus  for controlling visual output through a display monitor .","As has been described, the present invention provides an improved method and apparatus for accelerating occlusion culling in a graphics computer. The present invention performs culling at the vertex array, primitive and fragment levels. With the present invention, the execution of vertex and fragment shading programs can be limited to only the primitives and fragments that generate visible pixels.","It is also important to note that although the present invention has been described in the context of a fully functional graphics computer system, those skilled in the art will appreciate that the mechanisms of the present invention are capable of being distributed as a program product in a variety of forms, and that the present invention applies equally regardless of the particular type of signal bearing media utilized to actually carry out the distribution. Examples of signal bearing media include, without limitation, recordable type media such as floppy disks or CD ROMs and transmission type media such as analog or digital communications links.","While the invention has been particularly shown and described with reference to a preferred embodiment, it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention itself, as well as a preferred mode of use, further objects, and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 2","i":["a","c "],"b":"2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 3","i":["a","b "],"b":"3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
