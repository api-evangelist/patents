---
title: Program and system performance data correlation
abstract: System performance data and program performance data may be collected, converted into the same format and correlated by time. A graph or other display of system performance data over a time period may be displayed. A bar may be superimposed on the graph. A corresponding grid or other display, of program performance data over the same time period may be displayed. An item or line of the grid corresponding to a program event at a particular timepoint may be selected. A timepoint in the system performance graph may be selected by adjusting the position of the bar superimposed on the system performance graph. In response to the movement of the bar, the portion of the grid of program performance data displayed may be changed so that the grid of program performance data displays program performance data corresponding to the selected timepoint in the system performance graph.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07559053&OS=07559053&RS=07559053
owner: Microsoft Corporation
number: 07559053
owner_city: Redmond
owner_country: US
publication_date: 20040824
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","COPYRIGHT NOTICE\/PERMISSION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","Overview"],"p":["This invention relates generally to computer performance evaluation and, more particularly, to correlating program and system performance data.","A portion of the disclosure of this patent document may contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever. The following notice shall apply to this document: Copyright \u00a9 2004, Microsoft Corp.","Computer performance evaluation involves measuring and analyzing the total effectiveness of a computer system, including throughput, individual response time, and availability of the system. Tools have been developed to monitor system resources while one or more programs execute. These tools typically collect system information and log the information to one or more performance logs. System information includes information concerning how much memory is being used, how much a computer is paging, how much CPU time a process is taking, and so on. Exemplary system performance monitoring tools include Microsoft's PerfMon and VERITAS i\u2122 for SQL Server.","Another type of performance evaluation tool monitors a single executing software application. For example, Microsoft's SQL Profiler captures SQL Server events from the server and saves them in a trace file. The trace file may be helpful in the troubleshooting of logic and program performance problems. Other well-known program performance evaluation tools include Oracle 9i trace.","Frequently, it would be useful to be able to correlate program performance data with system performance data to determine what effect application events and operations have on the computer system as a whole, in terms of CPU utilization, memory consumption and so on. The reverse is also true. It would often be helpful for a user to be able to understand how computer system resources at a given current rate of utilization affect the execution of a particular program.","Collected system performance data and program performance data may be received, converted into the same format and correlated by time. A graph or other display of system performance data over a time period may be displayed. A bar may be superimposed on the graph. A corresponding grid or other display of program performance data over the same time period may be displayed. An item or line of the grid corresponding to a program event at a particular point in time or timepoint may be selected. A timepoint is a measure of time and corresponds to a certain time interval (e.g., number of seconds) from the beginning of a correlation period. A correlation period in some embodiments of the invention is a period of time in which program and system performance data intersect in time.","A timepoint in the system performance graph may be selected by adjusting the position of the bar superimposed on the system performance graph. In response to the change in position of the bar, the portion of the grid of program performance data displayed may be changed so that the grid of program performance data displays program performance data corresponding to the selected timepoint in the system performance graph.","Similarly, a timepoint in the program performance grid may be selected by scrolling through the grid and selecting a particular item or line in the program performance grid. In response to the selection, the portion of the graph of system performance data displayed may be shifted so that the graph of system performance data displays system performance data corresponding to the selected timepoint in the program performance grid.","A zoom feature allows a selected range to be expanded (enlarged) or shrunk (diminished).","Suppose that a system performance evaluation tool such as Microsoft's PerfMon collects pieces of information about a computer system over a predefined period of time. Suppose that during that period of time, a program evaluation tool such as a trace is also collecting information associated with a database program running on the computer system. Now suppose that at 2 pm on Monday, a generalized system slowdown is experienced. PerfMon may show that CPU utilization has shot up to 99% and memory usage has also climbed sharply. A system operator or database administrator (DBA) may suspect that the slowdown has something to do with the database program. In other words, a system or program administrator may want to know how the execution of a program is affecting the system environment. Without more information, however, determining just what is causing the system slowdown may be very difficult.","Similarly, suppose a DBA would like to know why a query submitted at 2 pm on Monday had a very long response time. The DBA might like to know what was happening system-wide at that point in time that may have affected the query response time. In other words, a system or program administrator may want to know how the system environment is affecting the performance of a program. In the absence of additional information, however, determining a system-wide cause of a program's poor performance (e.g., the query's poor response time) may be very difficult.","In accordance with some embodiments of the invention, system performance information and program performance information may be correlated and the correlated results presented or displayed in such a way that a timepoint selected in a display of system performance information results in the display of program performance information at that timepoint and vice versa.","Exemplary Computing Environment",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},"Although not required, the invention can be implemented via an application programming interface (API), for use by a developer, and\/or included within the network browsing software which will be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers, or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data . RAM  may contain other data and\/or program modules.","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory . GPUs , however, are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","One of ordinary skill in the art can appreciate that a computer  or other client device can be deployed as part of a computer network. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment, having remote or local storage. The present invention may also apply to a standalone computing device, having programming language functionality, interpretation and execution capabilities.","System and Program Performance Data Correlation",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 2","FIG. 1","FIG. 1"],"b":["202","110","202","204","206","204","144","204","208"],"sup":"3"},"Applications programs  may include various application programs as represented by application , including database management programs such as SQL Server, word processing programs and many others. Applications programs  may also include one or more program monitoring modules , , etc. Alternatively, a program monitoring module such as program monitoring modules , , etc. may be included within the application it monitors (e.g., within application module ). Alternatively, a program monitoring module such as program monitoring modules , , etc. may be included within OS .","System performance monitoring module  may monitor system environment conditions such as how much memory is being used, how much a computer is paging, percentage utilization of the CPU and so on, and may collect system performance information. System performance module  may monitor OS processes such as OS process , executing in memory . System performance monitoring module  may log the collected information to one or more performance logs such as performance logs , , etc. In some embodiments of the invention, this information is collected in the form of counters.","A counter may be a number representing the amount of memory used, a percentage of CPU time used by a process, the number of users connected or any other information deemed to be useful. Because the counters are collected in (specifiable) intervals, an event may be generated for each time interval.","Exemplary counters may include a memory counter such as \u201cPages\/sec\u201d, the number of pages read from the disk or written to the disk to resolve memory references to pages that were not in memory at the time of the reference. Observation of this counter is useful to determine if a system needs more physical memory to prevent paging for virtual memory.","A memory counter such as \u201cCommitted Bytes\u201d may display the size of virtual memory (in bytes) that must have backup by disk or physical RAM. Observation of this counter may be useful to determine how much physical RAM a system can use to prevent excessive paging.","A process object in the system monitoring module may be useful for monitoring applications. The process object may support a pseudo instance such as \u201c_Total\u201d, representing the total of all the instances. So Process(_Total)\\% Processor Time may represent the counter indicating the percentage of processor time taken by all the processes on the system. \u201cPrivate Bytes\u201d, \u201cHandle Count\u201d, \u201c% Processor Time\u201d, and \u201cWorking Set\u201d may be other useful process counters.","Handle is a generic term for an opaque identifier to a resource. Common handles include file handles, window handles, and memory handles. Handles are a limited resource in most systems. % Processor Time may refer to the amount of CPU time a process is using. The Working Set may represent the amount of virtual memory the OS is maintaining for a process. In some computer environments, freed memory for a process can stay in the process's working set. Many factors can influence the Working Set of a process, including memory requests of other processes, how the application was compiled and memory usage patterns.","A user object may represent a user of the computer system and thus can be used to determine who is using all the processor time, memory (Private Bytes), or causing all the page faults (with the Page Faults\/sec counter).","Custom application counters can be created. It will be appreciated that the counters described herein are exemplary only and do not limit the scope of the invention contemplated. Applications including database applications such as but not limited to SQL Server, may add performance counters. Other server applications such as Microsoft Transaction Server (MTS), Internet Information Server (IIS) and many others may also add counters.","The system performance monitoring module  may be used to log data, send alert messages to an event log when a counter exceeds a preset bound, run a program when a counter goes over a specified limit and so on. The performance log(s) , , etc. may be associated with a log definition file. A log definition file such as log definition file , etc. may be generated dynamically for each performance log , , etc. when the performance log , , etc. is read by a reader or a profiler , as described more fully below with respect to the profiler. In the log definition file , etc., each specific counter may be converted into a column of numeric data type.","A program monitoring module , , etc. may be a trace provider or other program monitoring tool or utility which monitors a program process such as exemplary program process . A trace provider is a tool that captures events and saves them in a trace file (e.g., exemplary trace file , , etc.). The trace file , , etc. may be used to troubleshoot program logic and program performance problems. For example, SQL Trace Provider is a tool that captures SQL Server events from a SQL Server process and saves those events in a SQL trace file. The trace provider (program monitor, , , etc.) may be used to monitor areas of server activity, including:\n\n","In some embodiments of the invention, a trace provider (program monitor, , , etc.) is invoked by creating a new template or using an existing template that defines the data to be collected. The data is collected by \u201crunning a trace\u201d on the events defined in the template. During the run, the trace provider may display the event classes and data columns that describe the event data being collected.","An event is an action generated by the application. Events may be grouped by event categories. In the case of the SQL Server engine, an event may be, for example, a login connection or the execution of a T-SQL statement and so on. All the data generated by an event may be displayed in the trace, which may include columns of data that describe the event. Columns in the trace may include the event class, the type of data collected and so on. A trace may be limited to a specific file or files by using a filter.","Each trace provider type (program monitor, , , etc.) may be associated with a corresponding trace definition file (not shown) that describes all the events and columns the trace is capable of producing. A trace event may correspond to a specific event instance found in a trace file and may include data needed for display. A trace event may include data and integer identifiers for each column in the event because the provider-specific trace definition may describe each possible column name and its data type referenced to an identifying integer.","Applications programs  may also include a profiler . Alternatively, profiler  may be included within OS . A profiler may include one or more readers (not shown), one or more log definition or trace definition files and one or more correlation tables. A profiler , according to some embodiments of the invention receives information collected from one or more program monitoring modules, , , etc. For example, a profiler  may receive one or more trace files , , etc. from one or more trace providers (program monitors , , etc.)","In addition to the one or more trace files, , , etc. the profiler  may also receive one or more files generated from the performance log(s) , , etc. created by the system monitoring module . A special log definition file , etc. may be generated dynamically for each performance log file upon reading the log file. In the log definition file , etc. each specific counter may be converted into a column (e.g., of numeric data type), the name of the column corresponding to the name of the counter. In some embodiments a reader generates the log definition file , etc. or the trace definition file(s). In some embodiments of the invention, the data structure created to hold the system performance data and the program performance data has a common format, structure or layout.",{"@attributes":{"id":"p-0050","num":"0055"},"figref":["FIG. 3","FIG. 2","FIG. 3"],"b":["214","216","224","226","306","304","218","306","306"]},"Similarly, program performance data  (e.g., a trace file) may be read by a reader . In some embodiments the reader  populates a trace definition file and may pass the trace file and\/or trace definition file to the profiler . The profiler  may correlate the data from the program performance file  and the converted system performance log information  by event timestamp into a correlation table .","Hence, multiple data sources may be correlated via the correlation table , which in some embodiments is implemented as an object. The correlation table  may contain the following information for each record:\n\n","In some embodiments, the correlation table is an array of integers, in which the value of each integer is a timepoint and the index is a number (e.g., row number) in the correlation table storage. In some embodiments of the invention, the correlation table  is populated dynamically as the data sources chosen for correlation are read. In some embodiments multiple trace files from multiple trace data providers and multiple system performance logs may be correlated. In some embodiments of the invention, to be able to efficiently correlate data in any direction, a correlation table is placed in a correlation table storage  which enables the data to be accessed in a direction other than a forward, read-only manner. In some embodiments, the correlation table storage  contains events used for correlation, each event including a column for timepoint, data storage identifier (e.g., identifying the data source: for example, data source=1 may indicate the data is system performance data, while data source=2 may indicate that the data is program performance data).","The populated correlation table  may be used for look-ups. In some embodiments of the invention, a CorrelationStorage class performs the process of finding a corresponding event to the event supplied. In some embodiments the CorrelationStorage class is defined as follows:",{"@attributes":{"id":"p-0055","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class CorrelationStorage"]},{"entry":[{},"{"]},{"entry":[{},"HRESULTRegisterCorrectionNotify(int DataStorageID,"]},{"entry":[{},"ICorrelationNotify* p);"]},{"entry":[{},"HRESULT Correlate(int DataStorageID, DWORD"]},{"entry":[{},"dwTimePoint);"]},{"entry":[{},"};"]},{"entry":[{},"where CorrelationNotify Interface is defined as:"]},{"entry":[{},"interface ICorrelationNotify"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT OnCorrelationChange(long"]},{"entry":[{},"lStorageSpecificRowID, DWORD"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"dwTimePoint);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In some embodiments of the invention, the correlation interface (ICorrelationNotify interface) is implemented on the client and registered with CorrelationStorage. Calling the Correlate( ) method initiates a look-up in the correlation table . In other words, when a bar superimposed on a display is dragged or repositioned (or alternatively, as a selected item in a scrollable display is changed), the corresponding component may call ICorrectionStorage::Correlate( ). The CorrelationStorage object (represented by Correlation Table Storage ) may find the actual (or closest matching) event by performing a binary search to locate the event in the correlation table storage  and then perform a linear search in both directions to find the nearest correlated event to the selected timepoint (from the counterpart DataStorageId). After the appropriate table entry is found, the data at the row number indicated in the table entry for the specified data source storage (e.g., program performance data storage  or system performance data storage ) is accessed to retrieve the information to be displayed. A callback may be initiated (e.g., ICorrelationNotify::OnCorrelationChange( ) is called) to notify the counterpart component to perform a user interface operation associated with the correlation. The user interface may display the event corresponding to the selected timepoint (display  , display  ) as described more fully below.","A timepoint, as described above, is a measure of time and corresponds to a certain time interval (e.g., a number of seconds) from the beginning of the correlation period. A correlation period in some embodiments of the invention is a period of time in which program and system performance data intersect in time. In some embodiments of the invention, if one monitoring module collects data from time t and a second monitoring module collects data from time t+x, the data collected from time t to time t+x is ignored because no data from the second monitoring module can be correlated with the timepoints between time t and time t+x.","In some embodiments of the invention, the system performance information and program performance information are displayed as illustrated by . In  display  represents exemplary system performance information. Display  represents exemplary program performance information. It will be appreciated that the user interface as illustrated by  is exemplary only. The type of information displayed may be a graph, a grid, a chart, summary data, time data, event details, a call tree, a block diagram, an animated model or any suitable display and may display information concerning resources, files, programs, processes, events and so on.","In some embodiments of the invention, the graph control may display a vertical line in a highly visible color (e.g., red) that indicates current selection position in the display. The vertical line may be moved (e.g., with a mouse). Moving the vertical line or bar may cause a notification to the system and program performance windows to change the selection in those windows so that events that occurred at a time when system performance counters were captured may be easily observed.","For example, in , bar  may be adjusted or repositioned. When a bar  is moved, the displays  and  may shift, scroll or reposition in correspondence with the movement of the bar . For example, if bar  is moved to timepoint 6:01 pm, the portion of the system performance data displayed in display  may shift to the left so that the portion of the graph corresponding to the 6:01 pm timepoint will be located in a more central position of the graph than is now depicted in . The display  may also scroll up or down so that the event(s) corresponding to the timepoint 6:01 pm are visible in the display  or are located in a more central position of the grid. The item or line that most closely matches the selected timepoint in the system performance display may be selected or highlighted.","Similarly, if the selected item or line  (represented in display  as a highlighted line of the grid) is moved to the item or line associated with timepoint 6:01 pm, the portion of the program performance data displayed in display  may scroll up or down so that the portion of the grid corresponding to the 6:01 pm timepoint will be located in a more central position of the grid. The display  may also shift correspondingly to the left or right so that the portion of the system performance graph corresponding to the timepoint 6:01 pm will be located in a more central position of the graph than is now depicted in  and the vertical line or bar in the display may move to the selected timepoint.","A zoom-in and zoom-out functionality may also be invoked by for example, clicking a left mouse button in the system performance window and then holding and dragging the mouse. A rubber-band selection rectangle may be generated which changes in size until the mouse button is released. Alternatively, a zoom in and zoom out feature may be invoked via a menu selection.  illustrates a graph for which a zoom in selection has been selected.",{"@attributes":{"id":"p-0063","num":"0071"},"figref":["FIG. 4","FIG. 4"],"b":["402","404","406","408"]},"At step  a timepoint is selected (either by positioning the vertical line or bar or by selecting an item or line in a grid). At step  the correlation table may be consulted to find the row number and the data source identifier of the alternate source data that most closely matches the new timepoint. In some embodiments of the invention a CorrelationStorage object may find the actual (or closest matching) event by performing a binary search to locate the corresponding event in the other data source. A linear search may be performed in both directions to find the nearest correlated event to the selected timepoint (from the counterpart DataStorageId). At step  when the closest match is found, the corresponding information may be displayed. In some embodiments, a callback is initiated (e.g., ICorrelationNorify::OnCorrelationChange( ) is called) to notify the counterpart component to perform a user interface operation associated with the correlation and the corresponding event is displayed.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the present invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the creation and\/or implementation of domain-specific programming models aspects of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. Therefore, the present invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of illustrative embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
