---
title: Token-based object description
abstract: Token-based object description is disclosed. In one embodiment, a system includes a plurality of objects and a set of tokens. Each object has at least one attribute, such as a type. Each token is mapped to a unique attribute. Each object is describable utilizing the set of tokens.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07293041&OS=07293041&RS=07293041
owner: Microsoft Corporation
number: 07293041
owner_city: Redmond
owner_country: US
publication_date: 20030411
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Hardware and Operating Environment","System","Method","CONCLUSION"],"p":["This application is a continuation of U.S. patent application Ser. No. 09\/217,402, filed Dec. 21, 1998, now U.S. Pat. No. 6,615,280.","This invention relates generally to the description of software objects, and more particularly to such a description that is token-based, for purposes of dynamic action invocation.","Dynamic action invocation is a very powerful software engineering technique. A simple case of it has been popularized by using C++ classes to implement polymorphic handling of window messages in programs running under Microsoft Windows operating system. It is very useful to generalize this technique to handle more general objects, and also handle actions that depend equally on multiple objects.","Software objects have generally become the norm when creating new computer programs. Most current programming languages, such as C++ and Java, provide for the use of software objects. In addition, software methodologies such as that provided for by Microsoft Corp.'s Component Object Model (COM), as known within the art, also provide for the use of software objects. A software object may be defined in a nonexclusive and non-limiting sense as a software component having a number of attributes, such as types and\/or parameters. A computer program thus may be defined in a nonexclusive and non-limiting sense as a collection of software objects that interact with one another in accordance with a desired manner.","Usually, the classification, or typing, of these software objects is hierarchical in nature, such that there is an implied transitive relationship between types. Thus if an object is of type A, and type A inherits from B, and objects of type B inherit from C, then the object is considered to be also of types B and C. This may make for inefficient description of objects. That is, describing all aspects of an object's attributes may be inefficient where the object is part of a hierarchical classification of objects in that the resulting description of the object may be overly verbose.","A non-software example is illustrative for purposes of understanding in this regard. An object defined as a tall red flower is considered. This object is (1) a flower, is (2) a red flower, is (3) a tall flower, is (4) tall and red, is (5) tall, is (6) red, and is (7) a tall red flower. Thus, seven different aspects are needed to completely describe the object, making for an inefficient manner by which to describe this object. For these and other reasons, therefore, there is a need for the present invention.","The above-identified problems, shortcomings and disadvantages with the prior art, as well as other problems, shortcoming and disadvantages, are solved by the present invention, which will be understood by reading and studying the specification and the drawings. In one embodiment, a system includes a plurality of objects and a set of tokens. Each object has at least one attribute, such as one or more types and\/or one or more parameters. Each token is mapped to a unique attribute. Thus, each object is describable utilizing the set of tokens.","Thus, embodiments of the invention provide for advantages not found in the prior art. For example, with respect to the example provided in the background section, in one particular embodiment a tall red flower object is describable using three sequentially linked tokens: (1) a tall token, (2) a red token, and (3) a flower token as compared to seven aspects as in the prior art. Thus, flattening a hierarchical-based typing scheme into a token-based description scheme provides for more efficient object description.","The invention includes systems, methods, computers, and computer-readable media of varying scope. Besides the embodiments, advantages and aspects of the invention described herein, the invention also includes other embodiments, advantages and aspects, as will become apparent by reading and studying the drawings and the following description.","In the following detailed description of exemplary embodiments of the invention, reference is made to the accompanying drawings which form a part hereof, and in which is shown by way of illustration specific exemplary embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention, and it is to be understood that other embodiments may be utilized and that logical, mechanical, electrical and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope of the present invention is defined only by the appended claims.","The detailed description is divided into four sections. In the first section, the hardware and the operating environment in conjunction with which embodiments of the invention may be practiced are described. In the second section, a system of one embodiment of the invention is presented. In the third section, a method, in accordance with an embodiment of the invention, is provided. Finally, in the fourth section, a conclusion of the detailed description is provided.","Referring to , a diagram of the hardware and operating environment in conjunction with which embodiments of the invention may be practiced is shown. The description of  is intended to provide a brief, general description of suitable computer hardware and a suitable computing environment in conjunction with which the invention may be implemented. Although not required, the invention is described in the general context of computer-executable instructions, such as program modules, being executed by a computer, such as a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc., that perform particular tasks or implement particular abstract data types.","Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, network PCS, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","The exemplary hardware and operating environment of  for implementing the invention includes a general purpose computing device in the form of a computer , including a processing unit , a system memory , and a system bus  that operatively couples various system components include the system memory to the processing unit . There may be only one or there may be more than one processing unit , such that the processor of computer  comprises a single central-processing unit (CPU), or a plurality of processing units, commonly referred to as a parallel.processing environment. The computer  may be a conventional computer, a distributed computer, or any other type of computer; the invention is not so limited.","The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory may also be referred to as simply the memory, and includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is stored in ROM . The computer  further includes a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media.","The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for the computer . It should be appreciated by those skilled in the art that any type of computer-readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs), and the like, may be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM , or RAM , including an operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port, or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, computers typically include other peripheral output devices (not shown), such as speakers and printers.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as remote computer . These logical connections are achieved by a communication device coupled to or a part of the computer ; the invention is not limited to a particular type of communications device. The remote computer  may be another computer, a server, a router, a network PC, a client, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local-area network (LAN)  and a wide-area network (WAN) . Such networking environments are commonplace in office networks, enterprise-wide computer networks, intranets and the Internet, which are all types of networks.","When used in a LAN-networking environment, the computer  is connected to the local network  through a network interface or adapter , which is one type of communications device. When used in a WAN-networking environment, the computer  typically includes a modem , a type of communications device, or any other type of communications device for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It is appreciated that the network connections shown are exemplary and other means of and communications devices for establishing a communications link between the computers may be used.","The hardware and operating environment in conjunction with which embodiments of the invention may be practiced has been described. The computer in conjunction with which embodiments of the invention may be practiced may be a conventional computer, a distributed computer, or any other type of computer; the invention is not so limited. Such a computer typically includes one or more processing units as its processor, and a computer-readable medium such as a memory. The computer may also include a communications device such as a network adapter or a modem, so that it is able to communicatively couple other computers.","In this section of the detailed description, a description of a computerized system according to an embodiment of the invention is provided. The description is provided by reference to ) and ). Referring first to ), a diagram according to an embodiment of the invention is shown. The system of ) includes a set of tokens , a first object , and a second object . The set of tokens  includes seven tokens such as the token . Each of these tokens relates to a unique attribute of the objects  and .","The invention is not particularly limited to the type of the attributes each of the tokens represents. In one embodiment, at least one of the tokens represents an object type of at least one of the objects  and . Such object types include a Java object, a Component Object Model (COM) object, and a C++ object, or represent a resource provided by an operating system, such as a window, segment of computer memory or a hardware resource, although the invention is not so limited. Other attributes represented by the tokens can include in various embodiments of the invention: parameters of the objects  and , classes, sub-classes, etc., of these objects, as well as other attributes not listed here.","The number of tokens is the total number of unique attributes found within a plurality of objects, such as the plurality of objects consisting of the object  and the object . Each unique attribute may be found in more than one of the plurality of objects, however (for example, where two or more of the objects are COM objects). Thus, the total number of tokens is less than or equal to the total number of attributes of all the objects within the plurality of objects.","Thus, the qualitative description of each of the objects  and  may be represented as a sequence of tokens. That is, each object is describable utilizing the set of tokens. For example, the object  mathematically is represented as a series of tokens: \u2261\u2261\u2261\u2261. This means that the object  has the attributes represented by tokens , ,  and , in that order. Thus, insofar as the object  may have been previously represented in accordance with a hierarchical type scheme, in accordance with the embodiment shown in ), the object  is also represented in a flat (non-hierarchical) manner by the tokens , ,  and  in that order.","Similarly, the object  is mathematically represented as a series of tokens: \u2261\u2261\u2261\u2261\u2261. This means that the object  has the attributes represented by tokens , , ,  and , in that order. Insofar as the object  may have been previously represented in accordance with a hierarchical type scheme, in accordance with the embodiment shown in ), the object  is also represented in a flat (non-hierarchical) manner by these tokens in the order given.","The token-based flat object description of embodiments of the invention thus provides for a more efficient manner by which to describe objects. Rather than describing the objects via reference to a hierarchical tree structure in which the structure may have to be traversed in order for the objects to be described (including the relationships, for example, of the various attributes of the objects as indicated by the tree structure), the flat token-based object description of embodiments of the invention does not require any such traversal, and the relationships are implied as to the sequence of the tokens. This is thus more efficient than is found in the prior art.","Another distinguishing feature of the token based recognition scheme is its dynamic character. Unlike type based languages, objects are not necessarily of a given type throughout their whole lifetime. This allows for adjustment of the description of an object, if one of its characteristics is added, modified or deleted, but the object itself is essentially continuing. While token-based description of objects solves the data structure layout of description of objects, it in itself does not provide an algorithm for efficient recognition of objects based on the description.","Referring next to ), a directed acyclical graph (DAG) of an application programming interface (API) is shown. The API represented in the DAG  of ) is not limited to any particular API, and such APIs are known within the art. The DAG is made up of a number of nodes, such as the node . By utilizing these nodes, the DAG may be used in accordance with the object descriptions of ) to determine if a given object fits as a parameter within the API represented by the DAG . Thus, the objects are such that they can be tested for fit as to an API without traversing a hierarchical type structure. Construction of such an acyclical graph provides for solution of several problems. Firstly, it allows for safe multithreaded operation of the recognition scheme in situations when a mutex (mutually exclusive right) is asserted whenever a comparison happens against a node in the graph. Secondly, in situations when multiple objects are to be recognized at the same time, structuring the recognition problem into small subtasks allows for increased instruction and data cache utilization, ultimately resulting in higher recognition throughput.","This is accomplished by having each node, such as the node , of the DAG  representing a different microcomp. The microcomp of each node is a micro computation, and points to one or more other nodes, such that the next node proceeded to within the DAG is based on the outcome of the current microcomp as applied to the token-based description of a given object. The invention is not particularly limited to a given type or number of microcomps that may be represented by the nodes. Thus, the DAG  may utilize a set of tokens.","For example, one microcomp may be to examine the nth token of a given object to determine if that token represents a desired object type. If it does, then the microcomp may point to another node that indicates a finishing conclusion. Otherwise, this object does not fit the API that the DAG represents. Alternatively, the microcomp may point to a node having a microcomp that requires further processing of the object, to determine if it fits the API represented by the DAG. Thus, by going through the DAG relative to a given object, embodiments of the invention provide for testing of objects against an API in an efficient manner. The set of tokens and one or more objects of ), along with the DAG of ), can in one embodiment be part of a system according to the invention.","Other microcomps that can be represented by nodes of the DAG (although, again, the invention is not so limited) include the following: a compared fixed multiple microcomp, a compare float set microcomp, a compare float sequence microcomp, a switch multiple microcomp, a posix call succeeded microcomp, an OLE call succeeded microcomp, and a match succeeded on position n microcomp. Each of these is now briefly described in turn.","The compare fixed multiple microcomp determines whether or not a given object has a given token(s) at a given position. This microcomp has typically two successors corresponding to true and false results of the comparison. The compare float set microcomp determines whether or not a given object has a given set of tokens at any position; this microcomp has usually two successors as well.","The compare float sequence microcomp determines whether or not a given object has a given sequence of tokens, and may have multiple successors indicating position at which a match was found. The switch multiple (this microcomp is also described by Andrew W. Appel: Modern Compiler Implementation in ML: Section 14.4 Testing Class Membership pg.301, ISBN 0-521-58274-1, which is hereby incorporated by reference) is an equivalent of the switch statement found in the C programming language, with value being the token at a given position.","The posix call succeeded microcomp is 0 or 1 depending whether or not a function returned with 0 or a nonzero value, respectively. The OLE call succeeded microcomp is 0 or 1 depending on whether or not the OLE-defined SEVERITY flag, as known within the art, is 0 or nonzero, respectively. Finally, the match succeeded on position n microcomp is typically unique to asynchronous programming environments, and generally has multiple successors.","In this section of the detailed description, a method according to an embodiment of the invention is presented. This description is provided in reference to . The computerized method is desirably realized at least in part as one or more programs running on a computer\u2014that is, as a program executed from a computer-readable medium such as a memory by a processor of a computer. The programs are desirably storable on a computer-readable medium such as a floppy disk or a CD-ROM, for distribution-and installation and execution on another (suitably equipped) computer.","Thus, in one embodiment, a computer program is executed by a an object fits an application programming interface (API) by applying a description of the object against a directed acyclical graph (DAG) for the API. The description of the object utilizes a set of tokens, where each token is mapped to a unique attribute of a plurality of objects including this object, and the DAG for the API maps the API utilizing the set of tokens (as, for example, part of the microcomps of the nodes of the API).","Referring now to , a flowchart of a method according to one embodiment of the invention is shown. In , a set of tokens is determined for a plurality of objects. Each token is mapped to a unique attribute of the objects, such as an object type, a parameter of the objects, etc. In , a description for each object is determined utilizing the set of tokens. In , a mapping of an API is determined, also utilizing the set of tokens. The mapping in one embodiment can be accomplished via mapping as a DAG, as has been described. Finally, in , an object is tested to determined whether it fits the API, by applying the description of the object against the mapping of the API, as has also been described.","Token-based object description has been described. Although specific embodiments have been illustrated and described herein, it will be appreciated by those of ordinary skill in the art that any arrangement which is calculated to achieve the same purpose, may be substituted for the specific embodiments shown. This application is intended to cover any adaptations or variations of the present invention. Therefore, it is manifestly intended that this invention be limited only by the following claims and equivalents thereof."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2(","i":"a"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2(","i":"b"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
