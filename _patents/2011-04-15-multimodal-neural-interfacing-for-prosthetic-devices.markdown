---
title: Multi-modal neural interfacing for prosthetic devices
abstract: Methods and systems to interface between physiological devices and a prosthetic device, including to receive a plurality of types of physiological activity signals from a user, decode a user movement intent from each of the plurality of signals types, and fuse the movement intents into a joint decision to control moveable elements of the prosthetic device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09486332&OS=09486332&RS=09486332
owner: The Johns Hopkins University
number: 09486332
owner_city: Baltimore
owner_country: US
publication_date: 20110415
---

{"@attributes":{"id":"description"},"GOVINT":[{},{}],"heading":["STATEMENT OF GOVERNMENTAL INTEREST","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","1. Neural Interfacing, Including Sensory Decoding and Sensory Encoding","2. Example 1","(a) Neural Interface","(b) Sensory Decoding","(c) Sensory Encoding","(d) Neural Interface Devices","(e) Supporting Hardware and Software","(f) System Interfaces","(g) System Architecture","(h) Wireless Calibration Link","(i) Neural Toolkit","(j) Implant Locations","(k) Algorithm Considerations","3. Example 2","Pre-Processing, Gating, and Intent Decoding","(a) Preprocessing and Signal Validation","(b) Gating","(c) Movement Decoders","(d) Decision Fusion","(e) Motion Estimation","(f) System Interfaces","(g) Input Devices","4. Example 3","LFP, ECoG, and Spike Decoding","(a) Example Decoders","Example Key for Joint Values for Use in the jointMap Variable","Example Configurable Algorithm Parameters for Spike Decoding","Example Configurable Algorithm Parameters for LFP Decoding","Example Configurable Algorithm Parameters for ECoG Decoding","(b) Bayesian Classifiers","Parameters in Likelihood Term for Spike Decoding","Parameters in Likelihood Term for ECoG and LFP Decoding","Summary of Results of Using a Bayesian Classifier to Decode URMC Manipulandum Data","Summary of Results of Using a Bayesian Classifier to Decode CalTech Plan Activity","(c) Example Algorithm Implementation","(d) Experimental Performance Metrics","Confusion Matrix for Spike Decoder on URMC Switch Task Data","Confusion Matrix for LFP Decoder on URMC Switch Task Data","5. Example 4","Spike and LFP Decision Fusion","(a) Algorithm Overview","(b) Design Approach","(a) Analysis to Support Design Decisions"],"p":["This invention was made with U.S. Government support under the Naval Sea Systems Command under contract number N66001-06-C-8005. The U.S. Government has certain rights in the invention.","1. Technical Field","Disclosed herein are methods and systems to interface between physiological devices and a prosthetic system, including to receive a plurality of types of physiological activity signals from a user, decode a user movement intent from each of the plurality of signals types, and fuse the movement intents into a joint decision to control moveable elements of the prosthetic device.","2. Related Art","Various types of sensors have been developed to monitor various physiological features.","Systems have been developed to control prosthetic devices in response to electrical signals output from a physiological sensor, referred to herein as single-mode prosthetic device control.","User movement intent may, however, be expressed in multiple ways through a variety of physiological means, which may be detectable with different types of sensors that output different types of electrical signals.","Reliability of a user movement intent decoded from any given sensor or signal type may vary with respect to one or more of a variety of factors, such as a particular pre-movement state, a particular desired movement, environment factors, and mental state.","Theoretically, more accurate estimate of user movement intent should be determinable by combining information from multiple sensor types. Interrelations amongst various physiological means are, however, notoriously difficult to ascertain.","What are needed are methods and system to determine user movement intents from each of a plurality of types of physiological sensors and\/or signal types, and to fuse the movement intents to provide a more informed estimate of user intended movement.","Disclosed herein are methods and systems to multi-modally interface between physiological sensors and a prosthetic device, including to receive a plurality of types of physiological activity signals from a prosthetic device user, decode a user movement intent from each of the plurality of signals types, and fuse the movement intents into a joint decision to control moveable elements of the prosthetic device.","A multi-modal neural interface system (NI) may be configured to receive a plurality of types of physiological activity signals from a prosthetic device user, decode a user movement intent from each of the plurality of signals types, and fuse the movement intents into a joint decision to control moveable elements of the prosthetic device.","The NI may include a plurality of classifier modules, each associated with a corresponding one of the signal types to determine a user movement state from signals of the signal type.","The NI may include a plurality of decode modules, each associated with a corresponding one of the signal types to decode a movement intent from signals of the signal type and from one or more of the user movement states; and","The NI may include a fusion module to fuse movement intents from a plurality of the decode modules into the joint movement decision.","The plurality of signal types include one or more of,","a local filed potential (LFP) signal,","a unit activity (spike) signal,","an epidural electrocorticography grid (ECoG) signal,","an electromyography (EMG) signal,","an electroencephalography (EEG) signal, and","an electronystagmography (ENG) signal.","The plurality of signal types may be received from a plurality of types of physiological sensors, which may include one or more types of neurological sensors.","The NI may include a plurality of groups of classifier modules, each group associated with a corresponding group of control (GOC) of the prosthetic device. The NI may further include a plurality of groups of decode modules, each group associated with a corresponding one of the GOC. The NI may further include a plurality of fusion modules, each associated with a corresponding one of the GOCs to fuse the movement intents from decode modules of the GOC into a joint decision of the GOC. The NI may further include a motion estimator to generate a movement action from joint movement decisions of a plurality of the GOCs.","The prosthetic device may include, for example, a prosthetic arm and hand, and the groups of control may include an upper arm group, a wrist group, a hand and finger group, and an endpoint group.","The NI may be configured to receive and incorporate sensory feedback from the prosthetic device into the joint movement decision. Sensory feedback may include one or more of velocity, speed, force, direction, position, and temperature information.","The NI may include a plurality of modular and configurable components, including a base configuration to process signals from one or more relatively non-invasive physiological sensors, and one or more selectively enabled modules to process signals from one or more relatively invasive physiological sensors.","A decode module may be configured to compute an unnormalized log posterior probability (ULPP) value for each of a plurality of classes of movement in accordance with Bayesian classifiers. The decode module may be further configured to determine a movement intent from the ULPP values, and output the movement intent and\/or the ULPP values. Where the decode module is configured to output ULLP values, the fusion module may be configured to generate the joint movement decision based at least in part of the ULPP values.","Methods and systems disclosed herein are not limited to the summary above.","In the drawings, the leftmost digit(s) of a reference number identifies the drawing in which the reference number first appears.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 1","b":["102","104","106"]},"Physiological devices  may include a plurality of types of sensors - through -, and\/or one or more stimulators - through -, which may include, without limitation, implantable neurological devices, implantable muscular devices, and\/or surface-based muscular devices. Example devices are disclosed further below.","Sensors  may output neural motor control data as electrical signals . Signals  may include digitized neural data, which may represent or correspond to physiological and\/or neurological signals.","Where physiological devices  include a plurality of types of sensors , NI  may include a sensory decoder (SD) , also referred to herein as a motor decode system, to decode neural motor control data from the multiple types of sensors . Decoded neural motor control data may include movement intent information, also referred to herein as movement decisions, corresponding to each of multiple sensors and\/or multiple sensor types . NI may be further configured to computationally fuse the motion intent information to generate a joint action decision . Joint movement decision  may represent an estimate of a user's desired movement, and may be based on a plurality of sensor and\/or signal types. Joint action decision  may be embodied as a vector, referred to herein as a joint movement decision vector.","SD  may include a plurality of motion decoders, each associated with a corresponding type of sensor . SD  may further include a fusion module to combine motion intent determinations associated with multiple motion decoders.","Prosthetic system  may include a PD controller  to convert joint decision motion vector  to one or more motor control signals , to control a prosthetic device (PD) . PD  may include one or more a prosthetic limb and\/or appendage.","Prosthetic system  may be configured to provide feedback information to NI , which may include one or more of sensory feedback  and sensory feedback .","Prosthetic system  may, for example, include sensors to sense one or more of position, speed, velocity, acceleration, and direction associated with PD , and PD controller  may be configured to provide corresponding information to SD  as sensory feedback . SD  may be configured to utilize sensory feedback  to generate and\/or revise motion vector .","Alternatively, or additionally, prosthetic system  may include one or more environmental sensors, which may include one or more of temperature and\/or pressure sensors, and prosthetic system  may be configured to provide corresponding information to NI  as sensory feedback . Sensory feedback  and sensory feedback  may be identical to one another, exclusive of one another, or may include some overlapping data.","NI  may include a sensory encoder (SE)  to convert sensory feedback  to stimulate one or more stimulators .","NI  may be implemented to include one or both of SD  and SE .","Sensors  and\/or stimulators  may include one or more relatively non-invasive devices and\/or one or more relatively invasive devices. Example devices are presented below. Methods and systems disclosed herein are not, however, limited to the example devices disclosed herein.","Signals  may include a plurality of types of signals corresponding to types of sensors . Signals  may include, for example, one or more of single-unit activity spikes\/indications, multi-unit activity spikes\/indications, a local field potential (LPF), an epidural electrocorticography grid (ECoG), and electromyography (EMG) signals.","SD  may include corresponding spike, LPF, ECoG, and EMG decoders, and may include a fusion unit to computational fuse outputs of multiple decoders. The fusion unit may be configured to resolve conflicting decoded motor control movement data and\/or decisions generated therefrom. An example is provided below with respect to .",{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 2","b":["102","104","106","108","202","204","206","208","202","210"]},"SD  further includes a fusion unit  to resolve potential differences and\/or conflicts between decoded motor control data and\/or decisions output from decoders . Fusion unit  may include a data fusion module to computationally fuse decode motor control data, and\/or a decision fusion module to computationally fuse movement decisions.","PD  may include a plurality of controllable elements, each having one or more corresponding degrees of controllable motion. Each element may be associated with one of a plurality of groups. Each group may include one or more elements. For example, and without limitation, PD  may correspond to a prosthetic arm, which may include an upper arm group, a wrist group, a hand\/finger group, and an endpoint group.","Decoders , , and , may each include a set of feature extractor and\/or classifier modules for each group of elements of PD , and fusion unit  may include a fusion module for each group of elements of PD . An example is provided below with respect to .",{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 3","b":"102"},"In the example of , NI  includes a gate classifier modules and feature extractor\/classifiers modules, each associated with a corresponding signal type GOC.","Fusion unit  may include multiple fusion modules, illustrated here as an endpoint fusion module , an upper arm fusion module , a wrist fusion module , and a hand\/finger fusion module , to output corresponding vectors , , , and .","Where outputs  of the endpoint, upper arm, wrist, and hand\/finger feature extractor\/classifier modules , , and  include decoded motor control data, fusion modules , , , and  may include data fusion modules.","Where outputs  of the endpoint, upper arm, wrist, and hand\/finger feature extractor\/classifier modules , , and  include movement decisions, fusion modules , , , and  may include decision fusion modules.","SD  may include a motion estimator  to generate joint motion vector  from vectors , , , and .","NI  may include pre-processors , , and , and gate classifiers , , and , e.g. gate classifier modules. Pre-processing and gate classification are described below, in .","Additional example implementations are provided in sections below. Features disclosed with respect to an example herein are not limited to the example. Rather, one or more features disclosed with respect to an example herein may be combined with one or more features of other examples disclosed herein.","A neural interface (NI) may provide bidirectional communications between a prosthetic limb (PL) and a user's nervous system (NS). Output channels, denoted NS\u2192PL, may be used to determine the user's desired movements for the PL based on observed neural activity. Input channels, denoted PL\u2192NS, may be used to provide the user with sensory feedback from the PL by stimulating neural afferents. Such feed-forward and feedback pathways of a NI may be implemented to provide a user with closed loop control over the PL.",{"@attributes":{"id":"p-0115","num":"0114"},"figref":"FIG. 4","b":"400"},"NI  may be implemented modularly, such as to facilitate isolation of potential FDA Class II devices from potential FDA Class III devices, and\/or to accommodate users with different injury types.","NI  may include a neural fusion unit (NFU)  to serve as a central communications and processing hub of NI . NFU  may be provided with multiple NI configurations.","NI  may include one or more attachments to NFU , which may provide additional functionality to communicate with a user's nervous system through one or more neural interface devices.","Depending on a user's injury level, comfort with implanted systems, and willingness to undergo invasive surgeries, the user may elect to use one or more of a variety of neural interface devices.","Example neural interface devices include:\n\n","Data flow through NI  is described below with respect to a feed-forward or monitoring pathway, and a feedback or sensory pathway.","In the example of , the feed-forward pathway includes four feed-forward channels, one for each of:\n\n","Each feed-forward channel may monitor one or more types of neuromotor activity and may transmit information to a local processing module, referred to herein as a multi-modal control unit (MCU). MCUs decode data to determine which, if any, PL movements are intended or desired by the user. Output from the MCUs, or local decoders, may include movement decisions , which may be combined within NFU  to generate an output command to the PL, referred to herein as an action .","The feedback pathway operates in a similar fashion to the feed-forward pathway, in reverse. Specifically, sensory data from the prosthetic limb is aggregated within NFU , which separates the information for presentation through available feedback channels. In the example of , NI  includes three feedback channels, one for each of:\n\n","Within each feedback channel, percepts to be delivered to the user may be locally encoded into patterns of stimulation to elicit appropriate sensations. A pattern may be specific to a neural stimulation device.","Invasive implantable neural recording and stimulation devices may be configured to operate wirelessly, including to receive power and data over a first radiofrequency (RF) link and to transmit data over a second RF link.","A MCU, which may be implemented as a modular attachment to NFU , may implement the wireless functionality, and may provide local motor decoding and sensory encoding functions for cortical devices and peripheral nerve devices.","A user with cortical or peripheral nerve implants may be provided with multiple implanted devices, such as a recording device and a stimulating device, and each MCU may be configured to accommodate multiple implants.","A collection of one or more cortical implants, an associated MCU, and a headcap device that physically resides on a user's head above the implants and that houses the external antennas, is referred to as a multi-modal brain interface device (multi-BID).","Similarly, a collection of one or more peripheral nerve implants, an associated MCU, and an armband device that may physically reside on the user's residual limb around the implants and that houses external antennas, is referred to as a multi-modal peripheral interface device (multi-PID).","A multi-BID and a multi-PID are logical groupings of NI components that perform a function. In other words, there may not be a monolithic multi-BID or multi-PID entity. For engineering convenience, multiple wireless implantable devices that communicate with a MCU may share a common wireless interface and communication protocol.","In , data may be transmitted to and received from a limb controller (LC)  via a communication bus. Data may be communicated over a wireless link to a VIE .","NI  may include recording epimysial electrodes (EMYS-R).","NI  may include conventional prosthetic controls, such as surface electromyography recording electrodes, force-sensitive resistors, and\/or joysticks.","Feed-forward and feedback channels supporting non-invasive and minimally-invasive neural recording and stimulation devices may operate substantially similar to moderately-invasive and highly-invasive channels. Comparable functionality of a MCU for non-invasive devices, such as CPC and tactors may be divided amongst NFU , a CPC headstage, and a set of tactor controllers.","Comparable functionality of a MCU for minimally-invasive devices, such as MES-R, may be spread amongst NFU  and an IMES telemetry controller (IMES-TC). Local motor decoding and sensory encoding functions may be executed by NFU .","Lower-level device controls, such as amplification and digitization for the CPC, wireless communication for the IMES-R, and motor control for the tactors, may be executed on a elatively small dedicated CPC Headstage, IMES-TC, and tactor controller modules coupled to or attached to NFU .","NI  may include one or more of:\n\n",{"@attributes":{"id":"p-0139","num":"0165"},"figref":"FIG. 5","b":"400"},{"@attributes":{"id":"p-0140","num":"0166"},"figref":"FIG. 5","b":"400"},"Example NI subsystems are further described below.","As described above with respect to SD  in , a NI may include a motor decode system to host a set of motor decoding modules or algorithms to convert neural activity into limb commands. An example motor decode system is disclosed below with reference to .",{"@attributes":{"id":"p-0143","num":"0169"},"figref":"FIG. 6","b":["600","602"]},"Motor decode system  routes input signals  to appropriate decode algorithms . Decode algorithms  produce decisions  representing a user-intended or desired movement for one or more PL degrees of control (DOC) in one or more groups of control (GOC). In the example of , motor decode system  provides three GOCs, including an endpoint\/upper arm group, a wrist group, and a hand\/finger group. Multiple decode algorithms  may output different decisions  for the same GOC.","Motor decode system  may include a second layer of processing containing fusion algorithms  to combine multiple decisions  and to generate a single output action , which represents a best estimate of the user's intended or desired movement with respect to the corresponding GOC. Actions  may be used to command movements of a prosthetic limb.","One or more algorithms may not be suitable to accept all inputs, and mapping of inputs to algorithms may be configurable.","Where a NI is implemented in a modular fashion, motor decoding algorithms may also be implemented in a modular fashion. For example, a NFU may host fusion algorithms to accommodate decisions provided by one or more individual algorithms, depending on which neural recording devices and signal types are available for an individual user. The individual algorithms may be hosted on the NFU, such as for surface EMG and IMES-R decoding, and\/or a MCU, such as for cortical activity or peripheral nerve decoding. Partitioning of functionality may permit relatively efficient use of processors and may reduce bandwidth and power requirements of a MCU-to-NFU bus.","Additional example motor decoding features are disclosed further below.","As described above with respect to SE  in , a NI may include a sensory encoder to host a set of sensory encoding modules or algorithms. An example sensory encoder is disclosed below with reference to .",{"@attributes":{"id":"p-0150","num":"0176"},"figref":"FIG. 7","b":["702","704","706","708","710"]},"NI  may include a plurality of sensory encoding modules, each associated with a corresponding type of stimulator. A sensory encoding module may be configured to aggregate sensory feedback  from one or more sensors and\/or types of sensors, and to output one or more stimulator control signals to one or more stimulators and\/or types of stimulators. A sensory encoding module may be configured to perform an n to m mapping, to map sensory feedback  from n sensors and\/or sensor types, to m different afferent pathways, where n may be greater or less than m. Such a mapping process may provide a user with feedback information in a relatively natural and intuitive fashion.","Such a mapping process may include a fusion process, referred to herein as contextual sensory fission (CSF). A CSF process may be implemented with one or more algorithms, and may operate within a neural fusion unit (NFU) of a NI. A CSF system may be configured to develop a set of sensory states that characterize a current function of a PL at a relatively high level (e.g. object has been grasped, object is slipping, or hand is exploring environment). The CSF system may be further configured to assign generation of individual sensory percepts to one or more available feedback channels, to encoding the individual sensory percepts in a format or language of one or more types of stimulators , which may include one r more of tactors, USEA-S, FMA-S, and\/or UEA-S.","Example neural interface devices are disclosed below.","(i) Conventional Prosthetic Controls (CPC)","Conventional prosthetic controls may include non-invasive recording devices such as SEMG-R, joysticks, force-sensitive resistors, electromechanical switches, and\/or other conventional controls. A set of these may be selected for a particular user depending on the user's level of injury and residual limb function. Depending on a particular socket configuration, CPC may be integrated into a socket liner or attached to other parts of the socket.",{"@attributes":{"id":"p-0156","num":"0182"},"figref":"FIG. 8","b":"800"},"(ii) Tactor Subsystem","Tactors provide sensory feedback to users through non-invasive sensory stimulation. A tactor subsystem may include a tactor MHW component that includes an actuator, a tactor controller HW component that contains electronics and circuitry to control the actuator, and a tactor controller SW component to translate percepts supplied by a NFU to actuator commands.","A tactor may be configured to provide mechanical stimuli, which may include tactile, vibratory, and\/or thermal stimuli.","Multiple tactor subsystems may be coordinated to deliver relatively complex sensory stimuli. Coordination may be controlled at a NFU level. Tactor subsystem components may be physically attached to the socket.",{"@attributes":{"id":"p-0161","num":"0187"},"figref":"FIG. 9","b":"900"},"(iii) Implantable MyoElectric Sensor (IMES) Subsystem",{"@attributes":{"id":"p-0163","num":"0189"},"figref":"FIG. 10","b":["1000","1000","000"]},"The IMES-TC may include an electronic components subassembly to modulate and demodulate wireless power, commands, and data, and may include a subassembly to house RF coils and antennas. The electronic components may be implemented within a printed circuit board, which may be physically housed in the socket. RF coils and antennas may be physically housed in an armband. Additional processing and control of IMES subsystem  may be performed by a NFU.","(iv) Utah Slanted Electrode Array for Recording (USEA-R)","A USEA-R is a moderately-invasive wireless implantable device to record neural activity from peripheral nerves. A USEA-R may include a passive mechanical array of, for example, 100 penetrating electrodes of varying heights, and an active electronics assembly based round an application-specific integrated circuit (ASIC) microchip to harvest power from an externally-applied inductive field, record neural signals from multiple electrodes, perform signal analysis tasks, and transmit processed data off-chip using wireless telemetry. Control of a SEA-R and decoding of USEA-R data to determine a user's intended movements may be performed by a MCU.","(v) Utah Slanted Electrode Array for Stimulation (USEA-S)","A USEA-S is a moderately-invasive wireless implantable device to stimulate individual axons in peripheral nerves. A USEA-S may include a passive mechanical array of, for example, 100 penetrating electrodes of varying heights, which may be similar to an array of a USEA-R. A USEA-S may include an active electronics assembly based around an ASIC microchip to harvest power and receive stimulation commands from an externally-applied inductive field, and to generate independent constant-current stimulation pulses for the electrodes. Control of USEA-S and encoding of sensory feedback from a PL to commands compatible with the USEA-S may be performed by a MCU.","(vi) Epidural ElectroCorticoGraphy Grid (ECoG-R)","An ECoG-R is a relatively highly-invasive wireless implantable device to record electrocorticographic signals from the brain. An ECoG-R may include a passive grid of, for example, 64 epidural surface electrodes, and an active electronics assembly based around an ASIC microchip to harvest power from an externally-applied inductive field, record and digitize CoG signals from electrodes, and transmit data off-chip using wireless telemetry. Control of an ECoG-R and decoding of ECoG-R data to determine the user's intended movements may be performed by a MCU.","(vii) Utah Electrode Array for Recording (UEA-R)","A UEA-R is a relatively highly-invasive wireless implantable device to record neural activity from the cortex. A UEA-R may include a passive mechanical array of, for example, 100 penetrating electrodes, and an active electronics assembly based around an ASIC microchip to harvest power from an externally-applied inductive field, record neural signals from electrodes, perform analysis tasks, and transmit processed data off-chip using wireless telemetry. Control of the UEA-R and decoding of UEA-R data to determine the user's intended movements may be performed by a MCU.","(viii) Utah Electrode Array for Stimulation (UEA-S)","A UEA-S is a relatively highly-invasive wireless implantable device to stimulate individual neurons in the somatosensory cortex. A UEA-S may include a passive mechanical array of, for example, 100 penetrating electrodes, which may be similar or identical to an array used in a UEA-R. A UEA-S may include an active electronics assembly based around an ASIC microchip to harvest power and receive stimulation commands from an externally-applied inductive field, and to generate independent constant-current stimulation pulses for the electrodes. Control of the UEA-S and encoding of sensory feedback from the PL into commands compatible with the UEA-S may be performed by a MCU.","(ix) (Floating Microelectrode Array for Recording (FMA-R)","A FMA-R is a relatively highly-invasive wireless implantable device to record neural activity from the cortex. A FMA-R may include a passive mechanical array of, for example, 64 penetrating electrodes, and an active electronics assembly based around an ASIC microchip to harvest power from an externally-applied inductive field, record neural signals from up to, for example, 100 electrodes, perform signal analysis tasks, and transmit processed data off-chip using wireless telemetry. Control of a FMA-R and decoding of FMA-R data to determine the user's intended movements may be performed by a MCU.","(x) Floating Microelectrode Array for Stimulation (FMA-S)","A FMA-S is a relatively highly-invasive wireless implantable device to stimulate individual neurons in the somatosensory cortex. A FMA-S may include a passive mechanical array of, for example, 64 penetrating electrodes, and an active electronics assembly based around an ASIC microchip to harvest power and receive stimulation commands from an externally-applied inductive field, and to generate independent constant-current stimulation pulses for up to, for example, 100 electrodes. Control of a FMA-S and encoding of sensory feedback from a PL into commands compatible with the FMA-S may be performed by a MCU.","Example supporting hardware and software are disclosed below.","(i) Neural Fusion Unit (NFU) HW\/SW","A NFU may serve as a central communications and processing hub of a NI, and may be provided with multiple NI configurations. A NFU may include attachments to provide additional functionality to communicate with the user's nervous system through one or more available neural interface devices.","A NFU may be configured to accommodate, for example, zero or one IMES systems, zero or one CPC headstages, zero to eight tactor controllers, and zero to two MCUs. A NFU may provide a relatively high-speed wireless link to stream data out of a NI, such as for training purposes and\/or as a gateway for commands sent from a VIE to a LC. Physical placement of NFU HW may vary for different limb configuration. NFU HW may be housed in a socket.","NFU HW may be configured to perform one or more of the following functions:\n\n","(ii) Multi-modal Control Unit (MCU) HW\/SW","A MCU serves as a gateway between a NFU and moderately and highly-invasive wireless implantable devices.","Multiple MCU-compatible devices may share a wireless interface.","Multiple implants may be controlled from and may communicate with the same MCU.","Relatively substantial energy levels may be needed to power implantable devices through skin and bones and to support computational efforts of motor decoding algorithms. The MCU may thus include a power source. To manage size and weight of the PL, MCU HW may be housed in a separate unit that attaches to NFU HW via a physical connection, rather than on the limb or in the socket.","MCU HW for use in a multi-BID subsystem and a multi-PID subsystem may utilize different antenna designs to accommodate wireless communications with corresponding implanted neural devices.","Algorithms hosted by MCU SW may differ for peripheral and cortical applications, which may be accommodated with corresponding code images and\/or similar codeimages and configurable parameters.","MCU HW\/SW may be configured to perform one or more of the following:\n\n","Headcap MHW and armband MHW may share the same connector on MCU HW.","(iii) Conventional Prosthetic Controls (CPC) Headstage HW\/SW","CPC headstage HW may include amplifiers, analog-to-digital converters, and other electronics to record from conventional prosthetic controls. CPC headstage SW may package and transmit CPC data to the NFU. Physical placement of the CPC headstage HW may vary depending upon limb configuration. CPC headstage HW may be housed in socket.","(iv) Headcap MHW","Headcap MHW is a mechanical device that may physically house antennas associated with a multi-BID MCU implementations, and which may be worn on a user's head.","(v) Armband MHW","A NI may include two types of armband MHW, one each for a multi-PID MCU and an IMES subsystem. Both types of armband MHW may be mechanical devices that physically house antennas. A MPID-type armband MHW may house antennas supplied by a multi-PID MCU. An IMES-type armband MHW may house antennas supplied by an IMES system. Both Armband MHW types may be worn on a user's residual limb. Depending on the user's amputation level and implant site, the armband MHW may be integrated with the socket or may be a separate entity.",{"@attributes":{"id":"p-0199","num":"0236"},"figref":"FIG. 11","b":"1100"},{"@attributes":{"id":"p-0200","num":"0237"},"figref":"FIG. 12","b":"1200"},"As described above, a NI may be implemented in a modular fashion, which may be useful to isolate potential FDA Class II devices from potential FDA Class III devices, and\/or to accommodate users with different injury types and different levels of tolerance for, and\/or interest in implantable devices.","A NI may include a base configuration with non-invasive neural devices, supporting hardware and software, and infrastructure to communicate with other components. Such functions may be provided by a NFU, a CPC Headstage, and a tactor subsystem. A base configuration may correspond to an FDA Class II system.","The base configuration may be supplemented with one or more modular additions, which may include one or more of a multi-BID, multi-PID, and IMES subsystems. The one or more modular additions may correspond to FDA Class III devices.","Tasks or labor may be apportioned or divided amongst a NFU and a MCU to accommodate one or more considerations, such as modularity and\/or power requirements.","For example, system requirements for total limb weight and number of battery changes per day may reduce or limit the total amount of power available to the NI from the main system battery. A single cortical (UEA-R\/S, FMA-R\/S, or ECoG-R) or peripheral nerve (USEA-R\/S) implant may, however, utilize much less power. A multi-BID or multi-PID subsystem may thus be configured to operate off of the system battery. Additionally, motor decoding and sensory encoding algorithms for cortical and peripheral nerve devices may utilize relatively much more processing power than those for CPC and tactor MHW. One or more multi-BID\/PID support functions may be implemented by the MCU rather than the NFU to the MCU, and the MCU may be implemented apart from the main system and may be provided with a separate power supply, such as in a container unit physically separate from the PL.","Since IMES-R implants require only a minimally-invasive surgical procedure, a PL user may be more willing to utilize an IMES subsystem, as compared to multi-BID and multi-PID subsystems. An IMES-TC may utilize a relatively substantial amount of power, while IMES decoding algorithms may be relatively significantly less demanding than multi-BID\/PID algorithms and may be substantially functionally equivalent to decoding algorithms for surface EMGs. As part of a base configuration, EMGs may run on the NFU. The IMES subsystem may be separated from the base configuration as a potential FDA Class III device, a socket may accommodate the IMES-TC as a modular attachment, the NFU may host the IMES decoding algorithms, and the IMES subsystem may be powered by the main system battery. Such an implementation may facilitate integration of the IMES subsystem with the PL and NI.","A communication channel may be provided between the PL and a virtual integration environment (VIE), such as to configure mechanical components of the PL and algorithms in the NI.","A relatively significant portion of configuration may be performed in a prosthetist's office. A user may, however, have a VIE at home to permit periodic recalibration of motor decoding algorithms. To facilitate user-calibration and to make it as user-friendly as possible, a wireless communication link may be provided from the VIE to the PL. Such a wireless link may be provided by one or more of a variety of PL components and may utilize off-line or buffered data. The VIE may, however, have real-time access to all of, or substantially all of an entire volume of neural data collected by the NI. This may facilitate efficient calibration of motor decoding algorithms.","Where a bus linking the NFU to the LC is relatively limited in bandwidth, a wireless network may be implemented within the NI.","Where the NI is to be configurable even where only non-invasive SEMG recording devices are available, the wireless link may be implemented as part of the NI base configuration, and may be implemented on the NFU.","A NI may be designed, configured, and\/or implemented with or as a neural toolkit to support a relatively wide variety of devices from which a user may select one or more tools to suit the user's particular level of injury and willingness to undergo invasive surgical procedures. A neural toolkit may include best-of-breed technologies selected from multiple classes of devices, which may range from relatively non-invasive to relatively highly-invasive. A neural toolkit may include devices that provide complimentary functionality, such that a user can expect increased sensory or motor performance from the PL with each additional implant. Example devices may include one or more neural recording devices and\/or one or more neural stimulation devices.","A neural toolkit may include one or more of the following neural recording devices:\n\n","Alternatively, or additionally, a neural toolkit may include, for example, one or more of the following neural stimulation devices:\n\n","An MCU HW\/SW may be implemented to be compatible with one or more of a variety of neural interface devices that conform to a communications protocol. For example, MCU HW\/SW may be configured to accommodate a device based on an Integrated Neural Interface (INI) technology developed by Reid Harrison at the University of Utah. There are currently two main types of INI chips, one each for recording and stimulation.",{"@attributes":{"id":"p-0215","num":"0262"},"figref":["FIGS. 13, 14, and 15","FIGS. 13, 14","FIGS. 13, 14, and 15"],"b":["1300","1400","1500","15"]},"Depending on a user's level of amputation, IMES-R and USEA-R\/S devices may be implanted in one or more of multiple locations. For example, a transradial amputee may have IMES-R and\/or USEA-R\/S devices implanted in the forearm, upper arm, and\/or chest\/brachial plexus level. While a NI system architecture may support all of these implant locations, there may be wireless coil and socket design considerations for each location. To ensure that resources are optimally allocated, surgeons and prosthetists were consulted to determine the most likely implant scenarios, as illustrated in the table immediately below.",{"@attributes":{"id":"p-0217","num":"0264"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"8","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}},{"entry":["Injury Type","SEMG","IMES","Tactor","USEA","FMA","UEA","ECoG"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Shoulder","Chest","Chest*","Chest","Chest*","PRR\/S1\/M1","M1\/PM\/S2","M1\/PM\/S2"]},{"entry":"Disarticulation"},{"entry":["Transhumeral","U Arm","U Arm*","U Arm","U Arm*","PRR\/S1\/M1","M1\/PM\/S2","M1\/PM\/S2"]},{"entry":"Amputation"},{"entry":["Elbow","U Arm","U Arm*","U Arm","U Arm*","PRR\/S1\/M1","M1\/PM\/S2","M1\/PM\/S2"]},{"entry":"Disarticulation"},{"entry":["Transradial","L Arm","L Arm","L Arm","U Arm"]},{"entry":"Amputation"},{"entry":["Wrist","L Arm","L Arm","L Arm","U Arm"]},{"entry":"Disarticulation"},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]}}}}},"In the table above, \u201cL Arm\u201d refers to lower arm, \u201cU Arm\u201d refers to upper arm, \u201cPRR\u201d refers to parietal reach region, \u201cS1\u201d refers to primary somatosensory cortex, \u201cM1\u201d refers to primary motor cortex, \u201cPM\u201d refers to pre-motor cortex, and \u201cS2\u201d refers to secondary somatosensory cortex. An asterisk indicates that the devices may be supported, but may not be accommodated simultaneously at the same location.","IMES-R devices may be supported in the forearm of transradial and wrist disarticulation amputees, the upper arm of transhumeral and elbow disarticulation amputees, and in the chest of shoulder disarticulation amputees with targeted muscle reinnervation (TMR).","USEA-R\/S devices may be supported in the upper arm of transradial, wrist and elbow disarticulation, and transhumeral amputees, and in the chest of shoulder disarticulation amputees with TMR.","FMA-R\/S, UEA-R\/S, and ECoG-R devices may be supported for shoulder disarticulation, transhumeral, and elbow disarticulation amputees.","IMES-R and USEA-R\/S devices may not be simultaneously accommodated at the same location if there is significant radiofrequency interference between the two types of devices.","Different algorithms may run at different rates. To estimate the computational cost of these algorithms, operations counts may be been separated into units of operations per time step. In a computational cost analysis, estimates of memory requirements may be evaluated, which may include parameters for the algorithms and temporary variables created to hold intermediate calculation results.","Computational costs may be grouped into two categories: algorithms for individual decode of cortical and peripheral nerve signals, which run on the MCUs, and algorithms for fusion and EMG decoding, which run on a NFU.",{"@attributes":{"id":"p-0225","num":"0272"},"figref":"FIG. 16","b":"1600"},{"@attributes":{"id":"p-0226","num":"0273"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0227","num":"0274"},"figref":["FIG. 18","FIG. 17"]},"In , \u201cMTM\u201d refers to Mixture of Trajectories Model, \u201cHMM\u201d refers to Hidden Markov Model, \u201cANN\u201d refers to Artificial Neural Network, \u201cGMLE\u201d refers to Gaussian Maximum Likelihood Estimate, \u201cPMLE\u201d refers to Pseudo-Maximum Likelihood Estimate, \u201cKF\u201d refers to Kalman Filter, \u201cPoG\u201d refers to Product Gaussians, and \u201cLDA\u201d refers to Linear Discriminant Analysis.","Computational costs may be evaluated with respect to one or more of a worst case scenario, a typical case scenario, and an optimal case scenario, which may be distinguished by the number of implants and volume of data. Example computation costs are provided in the table immediately below.",{"@attributes":{"id":"p-0230","num":"0277"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":[{},"Cortical","Peripheral",{},{}]},{"entry":["Operation","MCU","MCU","NFU","TOTAL"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Scalar + & \u2212 [O(n)]","168,249,692","10,092,500","400",{}]},{"entry":["Scalar * & {circumflex over (\u2009)}2 [O(n)]","10,049,400","23,600","0",{}]},{"entry":["Scalar\/[O(n)]","37,400","4,800","0",{}]},{"entry":["Factorials [O(6)]","205,800","5,000","0",{}]},{"entry":["Matrix + [O(n?)]","0","0","38,800",{}]},{"entry":["Matrix * [O(nmp)]","161,883,400 ","1,977,200","701,200",{}]},{"entry":["Matrix Inversion [O(n)]","24,773,900","1,390,100","1,560,000",{}]},{"entry":["Logs [O(nlog(n))]","29,557,300","0","0",{}]},{"entry":["Exp [O(nlog(n))]","182,248,900","724,000","0",{}]},{"entry":["Max [O(n-1)]","1,400","200","0",{}]},{"entry":["Determinants [O(n)]","1,456,000","0","0",{}]},{"entry":["Nonlinear Function Calls",{},{},{},{}]},{"entry":["[O(log(10))]","3,149,400","0","362,000",{}]},{"entry":["Median Checks [O(nlog(n))]","0","0","0",{}]},{"entry":["MIPS","581.613","14.217","2.624","598.454"]},{"entry":["Integer Data (16 bits)","1,804","110","0",{}]},{"entry":["Float Data (40 bits)","98,504","2,952","3,525",{}]},{"entry":["Memory (bits)","3,969,024","119,840","141,000",{}]},{"entry":["Memory (KBytes)","496.128","14.98","17.625","528.73"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"Methods and systems to pre-process, gate, and decode intent from biological and conventional prosthetic control (CPC) input signals are disclosed below.",{"@attributes":{"id":"p-0232","num":"0279"},"figref":"FIG. 19","b":"1900"},"MDE  may include one or more decode modules or algorithms  to convert biological and conventional prosthetic control (CPC) input signals to limb commands. This is also referred to herein as decoding user intent.","One or more types of input devices  may be used to record one or more of a variety of biological signals from which intent is to be decoded. Input devices  may include, for example, one or more of floating micro-electrode arrays (FMAs), Utah electrode arrays (UEAs), Utah slant electrode arrays (USEAs), electrocorticogram (ECoG) electrodes, surface electromyogram (sEMG) electrodes, and implantable MyoElectric sensor (IMES) electrodes. In addition to biological signals, conventional prosthetic controls, such as force sensitive resistors and switches, may be used as input signals.","MDE  may receive digitized neural data, which may include one or more of single-unit spike activity, local field potentials (LFP), EcoG signals, electromyogram (EMG) signals, and input from CPCs.","Input signals may be routed over an inputs bus, which may include analog and digital signals and a bit error field. Analog signals may include digitized analog data values. Digital signals may include of binary data values.","MDE  may be organized as a set of subsystems.","MDE  may include a preprocessor  to preprocess input signals.","The preprocessed input signals may be routed to gating algorithms  and, subsequently, to appropriate individual decode algorithms . Outputs of decode algorithms , referred to herein as decisions, may be processed in accordance with decision fusion algorithms . Each instantiation of a decision fusion algorithm  may represent a single group of control and decision space, where the decision space may be continuous or discrete.","A full joint state vector may be estimated in order to completely estimate user-intended motion.","Where a NI is implemented as a modular system, motor decoding algorithms  may also be modular.","Motor decoding algorithms  may run on multiple processors.",{"@attributes":{"id":"p-0243","num":"0290"},"figref":"FIG. 20","b":["2000","2002","2004","2008"]},"cMCU  hosts decode algorithms that utilize cortical input signals. pMCU  hosts decode algorithms that utilize peripheral nerve input signals. NFU  hosts decode algorithms that utilize EMG and CPC input signals, and decision fusion algorithms.","Inputs to the decision fusion algorithms may correspond to outputs provided by gating classifiers and individual decode algorithms, depending on which neural recording devices and signal types are available for an individual user. Such partitioning of functionality may facilitate relatively efficient use of each processor and may reduce bandwidth and power requirements of an MCU-to-NFU bus.","Algorithms of a MDE may be provided within a signal analysis block of a virtual integration environment (VIE). The signal analysis block may include infrastructure and interfaces.","Algorithms may be developed from a common template block that includes all or substantially all interfaces that are usable by the embedded system.","A MDE may be configurable during training and during online use.","During training, a clinician may selectively enable and disable algorithms, determine a superset of input signals that map to each individual algorithm, and\/or tune algorithm-specific parameters. Algorithm-specific parameters may vary from algorithm to algorithm, and may include, for example, type of firing rate model a decoder assumes, and bin sizes used in collecting spikes. During training, algorithm parameters to be used for decoding, such as neuronal tuning curves, may also be generated.","During run-time, a patient or clinician may configure the motor decode engine. Multiple types of configurations may be supported, which may include turning on or off individual algorithms, switching the mode that an algorithm runs in (if an algorithm supports mode switching), and adjusting gains of decoder outputs. Mode switching may include, for example, switching the type of intent commends, such as from position to impedance, that the MDE sends.",{"@attributes":{"id":"p-0251","num":"0298"},"figref":["FIG. 21","FIG. 20"],"b":"2002"},{"@attributes":{"id":"p-0252","num":"0299"},"figref":["FIG. 22","FIG. 20"],"b":"2004"},{"@attributes":{"id":"p-0253","num":"0300"},"figref":["FIGS. 23 and 24","FIG. 20"],"b":"2006"},{"@attributes":{"id":"p-0254","num":"0301"},"figref":"FIG. 25","b":["2502","2504","2506"]},"Each gating classifier and movement decoder may use a set or subset of available input signals. An initial selector may be used to discard unused signals, which may reduce the amount of initial processing. The initial selector may select a union of all sets of signals used by all gating classifiers and movement decoders. Preprocessing and other functions may be performed on the selected signals. Subsequent selectors may be included to select subsets of signals that are specific to each gating classifier or movement decoder.","In , ellipses indicate a function or feature that may be repeated, which may be implemented at compile time. The number of gating classifiers and the number of movement decoders may be configurable.","cMCU  and pMCU  may be implemented with frameworks that are similar to one another, with different inputs applied to each of cMCU  and pMCU .","NFU  may be implemented with a similar framework as cMCU  and pMCU , but with different input signals. NFU  may also include a framework to implement decision fusion and state vector estimation. Each fusion block of NFU  may represent a corresponding group of control. A generic group of control may decode ROC ID.","Example subsystems and interfaces of MDE  are described below with respect to .",{"@attributes":{"id":"p-0260","num":"0307"},"figref":["FIG. 26","FIG. 26"],"b":"2600"},"Input signals may be preprocessed in accordance with one or more techniques.","Preprocessing may include digital filtering, which may include, without limitation, all pass filtering.","Preprocessing may include signal validation, which may include signal detection and\/or identification of potentially corrupted data. Corrupted data may arise from broken electrodes, poor connections, interference, and\/or sensor drift. Resulting signals may have aberrant means, variance, and\/or noise characteristics. In addition, some input devices may be permanently implanted, and it may be useful to know whether such a device is operating correctly.","Signal validation algorithms may be provided for specific types of signals to identify potentially corrupted data. Where signal validation algorithms are provided for each type of input signal, preprocessing may be implemented on cMCU , pMCU , and NFU .","Identification of potentially corrupted data may include tagging or flagging data. A flag may include a value to indicate whether a signal is valid, and may include an indication of a stage at which the signal was marked invalid. A set of flags for all signals represent a signal validation result. Identification of potentially corrupted data may render downstream algorithms more efficient and more effective.","Validation algorithms may be implemented to identify or distinguish corrupted signals from uncorrupted signals. Validation algorithms may be also implemented to indicate the type of corruption, which may be used by downstream algorithms to determine whether to use or ignore the data.","Validation algorithms may classify signals as valid or invalid for further processing. Each algorithm may include multiple stages, each of which may flag the signal as invalid or pass the signal to the next validation stage. A signal flagged as invalid in a validation stage may bypass subsequent validation stages.","Validation stages may include one or more general signal analysis techniques with parameters tuned for appropriate signal types, and may include one or more signal-specific analysis techniques. methods. A validation system may classify a signal to be valid if the signal is not flagged as invalid by any validation stage.","A validation system may include one or more stage definitions, which may include one or more initial validation stages to detect readily apparent or common forms of corruption, and one or more subsequent stages to detect less apparent or less common forms of corruption. Such an approach may permit relatively easy computational detection of relatively obvious corruption, which may permit relatively quick invalidation of simple cases, such as flat signals. The validation system may provide signals deemed valid and signals deemed invalid to downstream algorithms, and the downstream algorithms may use stage definition information to selectively determine whether to use a signal deemed to be invalid by a stage of the validation system.",{"@attributes":{"id":"p-0270","num":"0317"},"figref":"FIG. 27","b":["2700","2702","2704","2706"]},"Validation system  may include corresponding algorithms to validate analog and digital data, which may include one or more of analog EcoG data, analog LFP data, and digital spike data.","For example, stage  may be configured or implemented in accordance with the table immediately below.",{"@attributes":{"id":"p-0273","num":"0320"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Analog (Digitized) Validation","Digital (Binary) Validation"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Stage 1 2702","No Data\u2014Flat Signal","Spike Rate Analysis"]},{"entry":[{},{},"a. Unnatural Spike Rates"]},{"entry":[{},{},"i. Injured neurons may fire"]},{"entry":[{},{},"abnormally high (invalid)"]},{"entry":[{},{},"ii. Multiple units may increase the"]},{"entry":[{},{},"spike rate on a single electrode (valid)"]},{"entry":[{},{},"b. Abnormal Spike Rates (statistically"]},{"entry":[{},{},"outlier, not necessarily signal"]},{"entry":[{},{},"corruption)"]},{"entry":["Stage 2 2704","Noise Level Analysis","Abnormal Spike Properties"]},{"entry":[{},"a. No Data\u2014Pure Noise",{}]},{"entry":[{},"b. Noise Level above",{}]},{"entry":[{},"Threshold",{}]},{"entry":["Stage 3 2704","Temporal Anomalies\u2014",{}]},{"entry":[{},"Abnormal Mean\/Variance"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"In addition to identifying corrupt channels, a validation system may be configured or implemented to identify when a channel returns to a valid state.","Gating algorithms attempt to decode movement state of various types of motion, such as premovement and perimovement, or motionlessness. Before attempting to extract movement related activity from neural activity, a determination may be made as to a current state of movement. For example, a user may transition from a state of motionlessness, to a state of planning to make a movement, to a state of actually making a movement. Classifiers that extract discrete class information are referred to herein as state classifiers. A state classifier that extracts movement class information is referred to herein as a gating classifier. Let NG represent the total number of possible movement classes. From a stream of biological and CPC data, the task of a gating classifier is to determine the overall movement regime that the user is in. The estimated movement regime may then be provided to downstream decode algorithms.","In addition to potential increase in computational efficiency provided by a gating classifier in a hierarchical scheme, lack of a gating classifier may potentially permit a decoder to decode spurious movements. Output of gating classifiers may be divergent. One gating classifier may be used to gate multiple decoders of the same group of control on the same processor.","Gating classifiers determine a present state of a user, which may be used to determine how neural information is interpreted. For example, before determining how a user wants to move his or her arm, a determination may first be made as to whether the user wants to a movement. This may help to prevent erroneous movement commands when the user does not desire to make a movement.","Computational load placed on embedded processors may be reduced if components of movement decode algorithms are enabled when a user wants to make a movement.","Presence of a socket may be determined by a signal on one of multiple general purpose inputs on a CPC headstage. This may determine whether CPC algorithms are selected.","Movement decoders may include functions to convert biological and CPC input signals to a decision representing a movement or type of movement.","Individual movement decoders produce decisions that represent a desired or intended movement for one or more modular prosthetic limb (MPL) degrees of control (DOC). Where the MPL includes a prosthetic arm, there may be five groups of control (GOC), including an endpoint group, an upper arm group, a wrist group, a hand\/finger group, and a generic group. Generic algorithms may be configured to decode positions or velocities for movements of reduced order control and to decode ROC IDs.","End effector decoders may be implemented to decode position or velocity of the end effector at fixed time intervals and determine reverse kinematics at all arm joints. End effector decoders may decode force, position and\/or velocity commands for all or substantially all individual joints that determine the position of the end effector. End effector decoders may decode with respect to continuous (position) and\/or discrete (position on a discrete grid).","Upper arm decoders may be implemented to decode joint angles of the shoulder and elbow, and may be implemented with respect to continuous (joint angles) and\/or discrete (direction of joint movement).","Wrist decoders may be implemented to decode abduction\/adduction, pronation\/supination and\/or flexion\/extension. Wrist decoders may be implemented to decode individually or to model as a ball joint and decode two spherical coordinates. Wrist decoders may be implemented to decode velocity and position. Wrist decoders may be implemented with respect to continuous (joint angles) and\/or discrete (direction of joint movement).","Finger decoders may be implemented to decode velocity, force, and\/or position of individual finger joints, which may be based on metacarpophalangeal (MCP). Finger decoders may be implemented with respect to continuous (joint angles) and\/or discrete (direction of joint movement).","Generic decoders may be implemented to decode ROC ID, positions, and\/or velocities for movements of reduced order control. Examples of reduced order control include grasps and canonical trajectories.","Multiple decode algorithms may provide the same or similar type of decision, which may not necessarily agree or coincide with one another, referred to herein as conflicting decisions. Conflicting decisions may be reconciled with decision fusion algorithms.","Decision fusion algorithms are functions that determine a single intent from multiple decisions of the same type, such as the same group of control and decision space. In a case of one decision of a given type, the decision fusion algorithms may act as a pass-through. In a case of multiple decisions of a given type, decision fusion algorithms may determine an estimate of an intent, or final decision, and an associated confidence based on metrics from the individual decisions from the decode algorithms. From the intent, a corresponding command may be sent to the limb controller. The command may be modulated by the confidence value to prevent quick or sudden movements when confidence is low.","For a given GOC, multiple algorithms may compute decisions for the same MPL DOC. For example, a first algorithm may compute an end effector position and confidence based on EMG data. A second algorithm may compute an end effector position and confidence based on spike data. Alternatively, one of the first and second algorithms may compute joint angles, which may be mapped to an end effector position. Such redundant information may be transformed into a final decision.","A decoder may perform data fusion rather that decision fusion. Where different signal modalities are processed on different processors, data fusion may not be suitable.","Decision fusion algorithms may fuse decisions and confidence values from motor decoding algorithms into a final state estimate. The fused state estimate may be used to initiate an intent, such as sending a command to a limb controller. Computationally, fusion algorithms may be relatively inexpensive.","Some state variables may have discrete values, and some may have continuous values.","Discrete decisions may include finger extension\/flexion, grasp type (e.g., cylindrical, lateral, tip, hook, palmer, and spherical), endpoint goal, and joint direction (e.g., flexion\/extension, pronation\/supination, abduction\/adduction).","Continuous decisions may include position, velocity, and joint angles. A first set of decision fusion algorithms may operate on discrete decisions. A second set of decision fusion algorithms may operate on continuous decisions.","When a limb is in an obstacle avoidance mode, hybrid fusion may be considered. Avoiding obstacles may involve constraining movement of discrete joint classes, such as flexion or extension of the elbow, and continuous endpoint positions simultaneously.","Where decision fusion is executed on the NFU and individual decoders may be executed on either of the MCUs and\/or on the NFU, depending upon the input modality. Confidence values generated by the individual decoders may be transmitted over a bus between the MCU and the NFU. Confidence values generated by individual decoders, and gating classifiers, may include probabilistic measures, or may be transformed and interpreted as probabilistic measures, and may be input to decision fusion algorithms as illustrated in . Parameters of the decision fusion algorithms may be determined on a per case basis.","To conserve bandwidth, the amount of confidence data may be kept to a relative minimum. For discrete decision fusion problems, decision vectors produced by each decoder may have a maximum length of, for example, 144 indices. For continuous decision fusion problems, decision matrices produced by each decoder may have a maximum length of, for example, 12 for each dimension. Values may be stored as single precision floating point numbers.","Discrete decision fusion algorithms may utilize one or more of majority voting, a linear opinion pool, the sum rule, the product rule, and the median rule.","Continuous decision fusion algorithms may utilize one or more of products of Gaussians, a single Gaussian approximation to a sum of Gaussians, and the pseudomeasurement method.","Optimal decision fusion algorithms may depend upon performance of individual decoders to be fused. In order to determine which fusion algorithms to use in a particular situation, statistics may be collected and measures may be computed from collected data. For continuous decision fusion, execution time, RMS error, and cross-covariance matrices may be computed offline in order to determine the tradeoff between accuracy and computational expense. For discrete decision fusion algorithms, execution time and confusion matrices may be formed and analyzed offline.","Outputs of fusion algorithms illustrated in  represent desired commands to a limb controller (LC) in the form of intent. The commands may include desired motion\/torque values for individual degrees of motion (DOMs).","A NI may include a full state estimation block to construct higher derivative state information, which may be sent across a system bus at a lower rate that otherwise attainable, without substantially degrading performance. This may improve bandwidth utilization of the system bus.","The full state estimation block may be implemented to recognize when higher derivative state information has already been computed in one or more preceding neural algorithms, and to utilize such information when available.","For example, where an intent provided by a neural algorithm includes a desired DOM joint angle velocity, the full state estimation block may perform one differentiation and one integration at greater than a system bus rate in order to be able to send a complete desired state vector composed of angular position, velocity and acceleration at the system bus rate. This may permit a smoother command signal to be reconstructed and used downstream by a motor controller, referred to herein as a large motor controller (LMC), and LC level.","Where the desired DOM angular position and velocity were previously estimated as part of a neural algorithm and this information is available, the full state estimation block may use the information directly instead of performing the differentiation and integration operations itself.","The full state estimation block may be flexible such that, when the state information is not available, or when the calculation of additional state information is relatively noisy, single command data may be passed on through to the LC as is. The full state estimation block may be implemented with flexibility to dynamically implement relatively more sophisticated state estimation algorithms under some circumstances.","A MDE may receive biological and CPC inputs from an inputs bus. Selected input signals may be preprocessed and routed to a preprocessing subsystem. Unused signals may be filtered out by a selector. Preprocessing may include signal validation, and may include digital filtering. Signal validation results may be used to remove signals with relatively low signal-to-noise and\/or interference ratios. Preprocessing may be omitted or implemented as an all pass filter.","Gating classifiers may apply signal validation results to selected filtered input signals. Gating classifiers may output vectors with measures of confidence indicating or suggesting, for example, no movement, premovement, or perimovement activity. Selected filtered inputs and signal validation results may also used by movement decoders. Discrete movement decoders and continuous movement decoders may include similar or identical input interfaces.","Motion or movement decoders may be implemented to decode continuous state variables and\/or discrete classes.","For continuous state variables, a decoder may output a decision vector with a maximum length of, for example, 144 indices, and a decision matrix where each dimension may have a maximum length of, for example, 12.","For discrete classes, a decoder may output a decision vector with a maximum length of, for example, 144 indices.","Movement decoder outputs and confidence metrics from gating classifiers may be provided as inputs to decision fusion. Cortical and peripheral inputs to decision fusion may be routed on a bus between a MCU and a NFU.","Each decision fusion process may output an intent, which may include a state vector for the continuous case or an enumerated discrete class label for a discrete class. Intents may be routed to a motion estimator or motion estimation function.","A motor decode engine may be implemented or configured to:\n\n","Additional example motor control features are listed below with reference to a prosthetic arm. One or more features listed below may be implemented with respect to other types of prosthetic devices.","With respect to a prosthetic arm, a motor decode engine may be implemented or configured to perform one or more of:\n\n","A motor decode engine may be implemented to generate intents periodically such as, for example, every 20 ms.","A motor decode engine may be implemented to determine signal validity for all selected input signals or a subset thereof. Unused input signals may be filtered out by a selector","A motor decode engine may be configured to determine movement intent for each group of control or reduced order control, such as with gating algorithms.","A motor decode engine may be configured to support one or more of:\n\n","A CPC may include force sensitive resistors (FSR) and switches.","A motor decode engine may include algorithms with configurable parameters. For example, a motor decode engine may include gating algorithms to adaptively update gating algorithm parameters, and motor decode algorithms to adaptively update motor decode algorithm parameters.","A motor decode engine may be configurable to selectively bypass a movement decoder based on the confidence of a corresponding gating classifier. Gating classifiers may be configured or implemented with respect to corresponding groups of control.","One or more factors may influence signals collected by input devices, including placement of a device.","Signals that contribute to or are correlated with motor control may be present only in certain muscles, nerves, and\/or areas of the brain. Physical characteristics of the sensors should be compatible with geometry of an area of a collection medium. For example, finger movement information is encoded in an area of the brain near the central sulcus. Implantation of electrodes in the sulcus, however, often have a relatively low success rate. Impedance and spatial locations of elements in electrode arrays may also affect signal characteristics and correlation functions.","The surface of the brain is a collection of small hills (gyri) and fissures (sulci). Due to the spatial location of the areas planned for implantation, microelectrode arrays may be used to record both on top of sulci and within gyri. When recording on top of a gyrus, microelectrode arrays with shorter shank lengths may be positioned so that the base of the arrays is located on top of the gyms and shanks penetrate down into the cortex. UEAs are used.","To record from within a sulcus, arrays with shorter shank lengths may be placed within the sulcus. This may, however, cause irritation that may results in eventual extrusion of the arrays. Alternatively, arrays with longer shanks may be used, wherein the base may be positioned outside of the sulcus with the shanks extending or penetrating into areas of interest of the sulcus. FMAs may be used.","Methods and systems to decode flexion or extension of individual fingers and the wrist from spike, local field potential (LFP) and electrocorticographic (ECoG) activity are disclosed below.","Such methods and systems are referred to collectively herein as FM MLE spikeLFPECoG Cls decoding, where FM refers to finger movements, MLE refers to maximum likelihood estimation, spikeLPFECoG refers to spike, local field potential (LFP), and electrocorticographic (ECoG), and CL refers to class.","A FM MLE spikeLFPECoG Cls decoding algorithm may include three component algorithms, one for each of a spike decoder, an LFP decoder and an ECoG decoder.","Each of the three algorithms may include Bayesian classifiers, which may run independent of and in parallel with one another.","Each component algorithm may receive as input:\n\n","Each component algorithm may output, in parallel:\n\n","Raw output may include, for each algorithm, unnormalized log posterior probability (ULPP) for all possible classes of movement. Down-stream algorithms in the signal analysis architecture may receive the ULPP values from each individual algorithm, make a final fused decision, and output an intent command that reflects the fused decision.","In generating an intent output, an algorithm may determine single most likely type of movement a user is doing, and may output a corresponding command that conforms to a Modular Prosthetic Limb (MPL) intent bus. This may permit each component algorithm to run alone and independently from the others, such as where a decode from only one modality is needed.",{"@attributes":{"id":"p-0336","num":"0417"},"figref":"FIG. 28","b":"2800"},{"@attributes":{"id":"p-0337","num":"0418"},"figref":"FIG. 29","b":"2900"},{"@attributes":{"id":"p-0338","num":"0419"},"figref":"FIG. 30","b":"3000"},"ECoG and LFP decoding are described below with respect to .","Algorithmic flow of LFP and ECoG decoding may be substantially similar or identical to one another, while parameter values may differ from one another.","In , ECoG decoding and LFP decoding each include signal preprocessing at  and , respectively, feature extraction at  and , respectively, and classification at  and , respectively.","EcoG and LFP preprocessing may each include initial down select of incoming channels. This may permit removal of erroneous channels before they go through any more processing, which may reduce subsequent computational burden. EcoG and LFP channel down select is illustrated at  and  in , respectively.","Channels of data that pass through the down select may be notch filtered to remove power line noise that may be present in the signal. Notch filtering may be performed by default, and may be configurable to disabled at run-time. EcoG and LFP notch filtering is illustrated at  and  in , respectively.","A raw sampling rate of the LFP and ECoG channels may be greater than that necessary for later processing. To reduce down-stream computational load, channels of data may thus be down-sampled by an integer value. The data may be passed through a low-pass or anti-aliasing filter prior to down-sampling to prevent aliasing in the down-sampled signal. The anti-aliasing filter may be configurable to be disabled at run-time. EcoG and LFP anti-aliasing filtering is illustrated at  and  in , respectively.","EcoG and LFP feature extraction may each include band-pass filtering. Up to, for example, five different bands may be extracted from each channel. The same filters may be applied to all channels and then a channel\/band down select may be performed to select only the bands from each channel with greater information content relevant to the decode. EcoG and LFP band pass filtering is illustrated at  and  in , respectively.","The mean power of all relevant bands for each channel may be measured over a window of a pre-determined size and placed into a vector for use in the calculation of the unnormalized log posterior probability (ULPP) for each class of movement. While data may be constantly buffered to fill windows, mean power calculation may be performed only when an external cue is received to indicate that a moment to decode has arrived. EcoG and LFP mean band power calculation is illustrated at  and  in , respectively.","EcoG and LFP classification may be performed with a Bayesian classifier to model the likelihood of observed LFP or ECoG signals for each class with multivariate Gaussian distributions. For reasons of floating point precision, this classification may output an unnormalized log posterior probability (ULPP) for each class, rather than a true probability for each class. A most likely class may be selected as the class with the largest ULPP. Alternatively, the ULPP may be used in a subsequent decision fusion process. Calculation of EcoG and LFP unnormalized class log posteriors is illustrated at  and  in , respectively.","Spike decoding is now described with reference to .","In , spike decoding includes signal preprocessing at , feature extraction at , and classification at .","Spike decoding may include receiving channels of pulse trains, where each pulse indicates a spike. Spike detection and sorting may be performed prior to spike decoding.","Preprocessing at  may include channel down-selection at , such as to remove channels of spike data that are erroneous or that carry relatively little information applicable to decoding.","During feature extraction at , impulse trains passing through channel down select may be sent to a spike counter at . When triggered by an external cue, the spike counter may count spikes in a bin of predetermined size and form(s) in a feature vector. The number of features of the feature vector may correspond to the number of counted spike. The spike counter may be configured to implement variable lags for different spike channels.","Upon completion of spike counting for a bin, the spike counter may send an enable signal to trigger or initiate classification at . Classification at  may include a Bayesian decoder. Likelihood terms may be formed based on an assumed conditional independence among spike channels, and each channel may be modeled with a Poisson distribution. As with ECoG and LFP decoding, this may not result in a true probability but rather, a ULPP value for each class, which may be interpreted as described above with respect to ECoG and LFP decoding.","Calculation of spike unnormalized class log posteriors is illustrated at  in .",{"@attributes":{"id":"p-0355","num":"0436"},"figref":"FIG. 31","b":"3100"},"In , components of the FM MLE spikeLFPECoG Cls decoding algorithm each receive:\n\n","FM MLE spikeLFPECoG Cls decoder  may receive ECoG, LFP and neural spike data. ECoG and LFP data streams may be provided at, for example, 1000 Hz, and may undergo hardware-based low-pass filtering prior to digital sampling to prevent aliasing. Spike data may be received in the form of spike impulse trains at, for example, 1000 Hz. FM MLE spikeLFPECoG Cls decoder  may be configured without assumption regarding spike sorting, and without assumption spike trains are collected from a particular anatomical\/physiological source.","A decode trigger cue may be, for example, a digital pulse of approximately 1 ms duration, and may be used to synchronize a decode to relevant portions of streaming physiological data. A decode trigger cue may will coincide with an occurrence of an event. For example, it might coincide with the closure of a switch.","Each of LFP, ECoG, and spike decoding may interpret trigger cues differently from one another. For spike decoding, a trigger cue may indicate that a decode is to be performed immediately on a window of data ending with the trigger cue. For LFP decoding, the trigger cue may indicate that a decode is to be performed after a window of data is collected. The window of data may start with the decode trigger pulse.","LFP, ECoG, and\/or spike decoding may be configurable to delay a trigger cue by a number of samples. This may be useful, for example, where a decode is to be performed pre-determined time after a particular event.","A movement stop cue may be, for example, a digital pulse of approximately 1 ms duration. A movement stop cue may indicate, for example, when a prosthetic hand is to be returned to a neutral position.","Intent outputs may be provided so that component algorithms may be placed within a signal analysis module of a virtual integration environment (VIE) to decode intent without additional code. Intent commands produced by each algorithm may conform to an interface protocol, and may be sent substantially without modification to a controls block of the VIE to move a prosthetic limb.","For each decode occurrence, the intent may be set to drive joint positions to those of the most likely class. The position may be held until a movement stop cue is received, at which time joints may be driven back to a predetermined neutral position.","Raw output may be provided so that component algorithms may be used with fusion algorithms that combine individual outputs of component algorithms into a fused decision. A fusion algorithm may receive one or more of the following, which may be provided by raw outputs of the component algorithms:\n\n","Raw output of the component algorithms may be provided on a bus with corresponding fields, such as ULPP, movementStart and movementStop. ULPP values may be provided in a vector, where the ivalue is the ULPP value for the iclass. The particular meaning for each class number may be assigned during training.","The movementStart pulse may be synchronized to completion of the decode. For the spike algorithm, the movementStart pulse may coincide with the trigger cue input pulse. For the ECoG and LFP component algorithms, the movementStart pulse may occur after a window of data has been collected and the decode performed. Outputs may be in accordance with double precision.","Component algorithms may utilize configurable or tunable parameters, examples of which are disclosed below. A value of a tunable parameter may be changeable at runtime, and dimensions of a tunable parameter may be unchangeable at runtime. In such an implementation, the values of decode parameters (such as mean vectors and covariance matrices) may be changeable if an algorithm is retrained. If the number of features used in the decode changes, however, the algorithm may need to be recompiled.","Eight example tunable parameters for spike decoding are disclosed below with respect to two classes of parameters, referred to herein as decode and intent mapping tunable parameters.","Decode tunable parameters for spike decoding may include:\n\n","MLE_SPK_MEANS provides the mean firing rate for each unit used in the decode for each class of movement. Specifically, the i, jentry of this matrix is the mean firing rate of the iunit for the jclass. Units that are provided to the decoder may be unusable to make a class decision. Thus, the nUnits variable in MLE SPK MEANS and MLE SPK LOG MEANS below, may represent the number of units used in the decode.","MLE_SPK_LOG_MEANS is the log of the MLE_SPK_MEANS variable. The log of the means may be precomputed to reduce computational overhead at runtime.","MLE_SPK_LOG_PRIORS is a vector with a length equal to the number of classes in the decode, where the ientry gives the log of the prior probability of the occurrence of each class.","MLE_SPK_CLASS_KEY permits remapping of class numbers after decoding. MLE_SPK_CLASS_KEY may be a vector with a length equal to the number of classes in the decode, where the ientry gives the number that class i is to be referred to in the remainder of the algorithm. Specifically, this variable determines the order that ULPP variables are placed in the ULPP output of the algorithm. For example, if the first entry of the vector is 2, the ULPP value for the class that is referred to as class 1 in the other decoder parameters mentioned in this section are placed as the second entry of the ULPP vector and referred to as class 2 in the intent mapping tunable parameters.","Intent mapping tunable parameters for spike decoding may include:\n\n","MLE_SPK_N_JOINTS_PER_CLASS is a vector with a length equal to the number of classes in the decode. The ivalue gives the number of joints in class i, as defined by the MLE_SPK_CLASS_KEY variable. For example, if class 1 involves flexion of the thumb and index MCP joints, the value of nJointsPerClass(1) is 2.","MLE_SPK_JOINT_MAP is a matrix of size nClasses by nJoints, where nClasses is the number of classes in the decode and nJoints is the number of joints of the prosthetic device. nJoints may be, for example, 27. By default, each value may be zero. This matrix maps the joints involved in class C using the key given in the table below. The value of the i, jentry of the jointMap matrix may represent a value giving the ID of the jjoint in class i. The order of the joints may be immaterial. If a particular class of movement involves the movement of less than nJoints, zeros may be used as place holders at the end of the row for that class.",{"@attributes":{"id":"p-0377","num":"0472"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"char"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","ShoulderFE"]},{"entry":["2","ShoulderAbAd"]},{"entry":["3","HumeralRot"]},{"entry":["4","Elbow"]},{"entry":["5","WristRot"]},{"entry":["6","WristAbAd"]},{"entry":["7","WristFE"]},{"entry":["8","IndexAbAd"]},{"entry":["9","IndexMCP"]},{"entry":["10","IndexPIP"]},{"entry":["11","IndexDIP"]},{"entry":["12","MiddleAbAd"]},{"entry":["13","MiddleMCP"]},{"entry":["14","MiddlePIP"]},{"entry":["15","MiddleDIP"]},{"entry":["16","RingAbAd"]},{"entry":["17","RingMCP"]},{"entry":["18","RingPIP"]},{"entry":["19","RingDIP"]},{"entry":["20","LittleAbAd"]},{"entry":["21","LittleMCP"]},{"entry":["22","LittlePIP"]},{"entry":["23","LittleDIP"]},{"entry":["24","ThumbAbAd"]},{"entry":["25","ThumbCMC"]},{"entry":["26","T umbMCP"]},{"entry":["27","ThumbIP"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"MLE_SPK_MAG_MAP is a matrix of size nClasses by nJoints, and provides magnitude (angle) that a corresponding joint in the jointMap matrix is to be driven to. The position may be provided in degrees.","MLE_SPK_JOINT_MAP_INC_NULL_CLASS is a scalar value, which can be either 1 or 0. If the value is 1, when the enable signal is 0, a command may be sent to drive to the limb back to a neutral state. The neutral state may be treated as an extra class where an appropriate entry for it has been appended to the MLE_SPK_N_JOINTS_PER_CLASS, MLE_SPK_JOINT_MAP and MLE_SPK_MAG_MAP variables.",{"@attributes":{"id":"p-0380","num":"0475"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parameter Name","Type","Size"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MLE_SPK_MEANS","double","[nUnits, nClasses]"]},{"entry":["MLE_SPK_LOG_MEANS","double","[nUnits, nClasses]"]},{"entry":["MLE_SPK_LOG_PRIORS","double","[nClasses, 1]"]},{"entry":["MLE_SPK_CLASS_KEY","double","[nClasses, 1]"]},{"entry":["MLE_SPK_N_JOINTS_PER_CLASS","double","[nClasses + 1, 1]"]},{"entry":["MLE_SPK_JOINT_MAP","double","[nClasses + 1, nJoints]"]},{"entry":["MLE_SPK_MAG_MAP","double","[nClasses + 1, nJoints]"]},{"entry":["MLE_SPK_JOINT_MAP_INC_NULL_CLASS","double","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Eleven example tunable parameters for LFP and ECoG decoding are disclosed below with respect to three groups of parameters, referred to herein as filter, decode, and intent mapping tunable parameters.","Filter tunable parameters for LFP(ECoG) decoding may include:\n\n","These two parameters may enable (value of 1) or disable (value of 0) filtering in preprocessing LFP (ECoG) data.","MLE_LFP(ECoG)_ENABLE_NOTCH_FTR parameter determines whether a notch filter is applied to remove power line noise.","MLE_LFP(ECoG)_ENABLE_AA_FTR parameter determines whether an anti-aliasing filter is applied before down sampling.","Decode tunable parameters for LFP (ECoG) decoding may include:\n\n","MLE_LFP(ECoG)_CLASS_MEANS is a matrix of size F by nClasses, where F is the number of features in the decode. Not all bands from all channels of data are necessarily used in the decode. Instead, a down select may performed and a subset of bands from a subset of channels may be formed into a feature vector. The ii, jientry of this matrix gives the mean value of feature i for class j.","MLE_LFP(ECoG)_CLASS_INV_COVS is a matrix of size F*nClasses by F matrix. The first F rows may contain the inverse covariance matrix for the first class. The second F rows may contain the inverse covariance matrix for the second class, etcetera. The algorithm may be provided with inverted covariance matrices to save computational expense at run-time.","MLE_LFP(ECoG)_CLASS_LOG_NORM_CONSTS is the log of the normalizing constants of the likelihood terms for each class. This is a vector with a length equal to the number of classes in the decode. The ivalue gives the normalizing constant for the iclass.","MLE_LFP(ECoG)_CLASS_LOG_PRIORS parameter may be substantially similar or identical to that of the spike decoder described above.","MLE_LFP(ECoG)_CLASS_KEY parameter may be substantially similar or identical to that of the spike decoder described above.","Intent mapping tunable parameters for LFP and ECoG decoding may be substantially similar or identical to intent mapping tunable parameters for spike decoding, such as described above.",{"@attributes":{"id":"p-0393","num":"0495"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parameter Name","Type","Size"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["APL_MLE_LFP_ENABLE_NOTCH_FTR","double","1"]},{"entry":["APL_MLE_LFP_ENABLE_AA_FTR","double","1"]},{"entry":["APL_MLE_LFP_CLASS_MEANS","double","[nLFPFtrs, nClasses]"]},{"entry":["APL_MLE_LFP_CLASS_INV_COVS","double","[nLFPFtrs*nClasses,"]},{"entry":[{},{},"nLFPFtrs]"]},{"entry":["APL_MLE_LFP_CLASS_LOG_NORM_CONSTS","double","[nClasses, 1]"]},{"entry":["APL_MLE_LFP_CLASS_LOG_PRIORS","double","[nClasses, 1]"]},{"entry":["APL_MLE_LFP_CLASS_KEY","double","[nClasses, 1]"]},{"entry":["APL_MLE_LFP_N_JOINTS_PER_CLASS","double","[nClasses, 1]"]},{"entry":["APL_MLE_LFP_JOINT_MAP","double","[nClasses, nJoints]"]},{"entry":["APL_MLE_LFP_MAG_MAP","double","[nClasses, nJoints]"]},{"entry":["APL_MLE_LFP_JOINT_MAP_INC_NULL_CLASS","double","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0394","num":"0496"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parameter Name","Type","Size"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["APL_MLE_ECoG_ENABLE_NOTCH_FTR","double","1"]},{"entry":["APL_MLE_ECoG_ENABLE_AA_FTR","double","1"]},{"entry":["APL_MLE_ECoG_CLASS_MEANS","double","[nECoGFtrs,"]},{"entry":[{},{},"nClasses]"]},{"entry":["APL_MLE_ECoG_CLASS_INV_COVS","double","[nECoGFtrs*nClasses,"]},{"entry":[{},{},"nECoGFtrs]"]},{"entry":["APL_MLE_ECoG_CLASS_LOG_NORM_CONSTS","double","[nClasses, 1]"]},{"entry":["APL_MLE_ECoG_CLASS_LOG_PRIORS","double","[nClasses, 1]"]},{"entry":["APL_MLE_ECoG_CLASS_KEY","double","[nClasses, 1]"]},{"entry":["APL_MLE_ECoG_N_JOINTS_PER_CLASS","double","[nClasses, 1]"]},{"entry":["APL_MLE_ECoG_JOINT_MAP","double","[nClasses, nJoints]"]},{"entry":["APL_MLE_ECoG_MAG_MAP","double","[nClasses, nJoints]"]},{"entry":["APL_MLE_ECoG_JOINT_MAP_INC_NULL_CLASS","double","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"One or more decoding algorithms may be implemented with assumptions. Assumptions may include, for example, one or more of:\n\n","A component algorithm may determine the most likely class of movement from streaming LFP, spike, or ECoG signals, as applicable, when cued by an external signal.","A component algorithm may wait a user-selectable predefined time after receiving an external signal before performing a decode. A delay period may be utilized. For example, a primate may be commanded to move a finger, and it may take, for example, 150-200 milliseconds after the onset of the command cue before cortical signals reflect a response to this command. A delay parameter may be used to take such a delay into account.","A component algorithm may make ULPP values available for each class. For example, decoding may utilize three independent algorithms, one for each modality, and down-stream fusion algorithms may be utilized to fuse outputs of the three algorithms. In order for the fusion algorithms to fuse the output of each algorithm, more than a single class decision from each component algorithm may be provided. The ULPP values may thus be provided as a measure of the likelihood of each possible class.","Component algorithms may each be implemented to make a decision within a fixed time offset subsequent to receipt of a fresh feature vector. This may reduce jitter and latency, which may improve real-time, closed loop control of a virtual or real prosthetic.","A component algorithm may be implemented to permit mapping of any class to any possible combination of joint positions for which the prosthetic limb is capable. This may permit the component algorithm to be used for classification of movements of multiple types of joints or prosthetic devices.","A component algorithm may be precluded from a priori constraining its output to a limited set of a full set of trained classes. This may help to insure that a class that is relatively rare, is not ruled out as a possibility before a decode is performed. Potential performance benefits and patient safety issues may be considered with respect to implementation of such a constraint.","Component algorithms may each include a decoder sub-module and an intent mapping sub-module.","The decoder sub-modules may each receive as inputs physiological data, decode trigger, and movement stop cues. The decoder sub-module may output ULPP values for each class, movementStart and movementStop signals and diagnostic signals. ULPP values may be held constant between movementStart signals.","The intent mapping sub-modules of each component algorithm may receive vectors of ULPP values output by the decoder sub-module, and an enable signal. When the enable signal is at a first stage, the intent mapping sub-module may select the most likely class and may output a model intent command. When the enable command is at a second state, the intent mapping sub-module may output an intent command to drive the limb back to a neutral position.","To facilitate code reuse, the decoder sub-module of each component algorithm may be implemented so that it is not constrained to be used only for the classification of particular movements.","Similarly, to facilitate expanded use of component algorithms, the intent mapping sub-module of each component algorithm may allow for the mapping of any class to any possible combination of joint positions for which the prosthetic limb is capable.","Each component decoder may be implemented to independently estimate intent from one of spike, LFP, and ECoG signals.","Algorithms may be designed based on one or more data sets. For example, simultaneous recording of LFP and spike activity have been generated by the University of Rochester Medical Center [URMC], from a primate performing switch task. Such data may be used to design and\/or verify spike and LFP algorithms. In addition, a ECoG component algorithm may be initially verified with LFP data, and subsequently be verified with ECoG data.","Where algorithms are tested and verified with switch task data, such algorithms may generalize to other paradigms, such as finger flexion and extension movements.","LFP and ECoG decoders may be implemented to extract different frequency bands to form corresponding feature vectors, and thus may be implemented with substantially similar or identical algorithmic flow. For example, a common frequency band decoder may be used for both the LFP and ECoG decoders, which may permit re-use of code.","Spike and frequency band decoders may be designed and verified within a simulator, following which, offline training of algorithm parameters may be performed. Thereafter, the component algorithms may be implemented in a fusion architecture.","One or more component algorithms may include Bayesian classifiers. Bayesian classification is based on a likelihood term for each class, a prior probability for each class, and a posterior probability of each class.","Regarding the likelihood term, when decoding, it may be assumed that the likelihood functions for each class are known. To understand the likelihood function, it may be helpful to think of the decoding problem in reverse. Instead of seeking the most likely class given some observed signal, the inquiry is directed to the probability of the observed neural signal given that a certain class of movement has occurred. The likelihood function provides that latter probability. By way of an example, based on an observer LFP signal, the likelihood function determines the probability of the observed LFP signal being produced by each possible class of movement.","Regarding the prior probability term, when decoding, it may be assumed that the prior probability for each class is known, and that the distribution for the prior probability for all classes is uniform. The assumption of a uniform distribution may help to ensure that no class of movement is \u201cweeded out\u201d simply because it rarely happens. This may serve as a safety consideration.","Regarding the posterior probability term, ultimately, the quantity of interest is not the probability of a observed signal given a class of movement but the reverse, that is, the probability of a class of movement given an observed signal. This is referred to as the posterior probability for each class, and Bayes' theorem permits going from one to the other. Once the posterior probability for each class is known, a command may be generated based on the class with the highest posterior probability.","After training, the likelihood and prior probability terms may be assumed to be known. The task of the each component decoder is to use these distributions and, when presented with a novel observation, determine the posterior probability of 1 of C classes occurring.","Bayes' theorem relates these three terms as follows:",{"@attributes":{"id":"p-0418","num":"0525"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":["\u03c9","c"]},"mo":"\u2758","mover":{"mi":"O","mo":"\u2192"}}}},"mo":"=","mfrac":{"mrow":[{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mover":{"mi":"O","mo":"\u2192"},"mo":"\u2758","msub":{"mi":["\u03c9","c"]}}}},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":["\u03c9","c"]}}}],"mo":"\u2062"},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mover":{"mi":"O","mo":"\u2192"}}}]}}},{"mrow":{"mo":["(",")"],"mrow":{"mi":"Eq","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"1"}}}]}}}}},"In Eq. 1, \u03c9is a variable that represents class c. For a hand prosthetic, classes may correspond to flexion or extension of corresponding single digits, or the combined flexion and extension of some group of fingers.","The variable {right arrow over (O)} is an observation vector, which may include a vector of spike counts or a vector of the power of certain band passed signals from select LFP or ECoG channels.","P(\u03c9|{right arrow over (O)}) is the posterior probability term. It may be understood as giving the probability of class c occurring given that a known observation has been made.","The quantity P({right arrow over (O)}|\u03c9) is the likelihood term described above. P(\u03c9) is the prior probability of each class.","P({right arrow over (O)}) serves as a normalizing constant and is the probability of the observed vector. P({right arrow over (O)}) may be a constant that equally applies to the posterior probability of all classes. As such, it may be omitted.","A formula to calculate ULPP values for class c may be derived as disclosed below.","Since unnormalized posterior probability terms are sought, the denominator in Eq. 1 may be removed to provide:\n\n(\u03c9)\u221d()(\u03c9)\n\nIn Eq. 2 below, the natural log of both sides is computed, which may reduce chances of having a numerical underflow when probability values become relatively small. In Eq. 2, the term ULPP({right arrow over (O)}) is the unnormalized posterior probability for class C:\n\nULPP({right arrow over ()})=log(())+log((\u03c9))\u2003\u2003(Eq. 2)\n","Eq. 2 represents a general formula. For ULPP values, specific forms of Eq. 2 may be provided for the likelihood terms, such as disclosed in examples below.","The likelihood term for the spike decoder may be derived with the assumption that each unit will have a characteristic mean firing rate associated with each class. This may permit modeling of the likelihood of observing a firing rate for unit u given the occurrence of class c with a Poisson distribution:",{"@attributes":{"id":"p-0428","num":"0535"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["n","u"]},{"mi":["\u03c9","c"]}],"mo":"\u2758"}}},"mo":"=","mfrac":{"mrow":[{"msub":{"mi":"\u03bb","mrow":{"mi":["u","c"],"mo":","}},"mo":"\u2062","mmultiscripts":{"mi":"\u2147","none":[{},{}],"msub":[{"mi":"\u03bb","mrow":{"mi":["u","c"],"mo":","}},{"mi":["n","u"]}],"mprescripts":{}}},{"msub":{"mi":["n","u"]},"mo":"!"}]}}}}},"Symbols used in the equation above and in equations below are defined further below.","Conditional independence among the firing rates for all units may be assumed, and the likelihood of observing a collection of firing rates, represented as variable {right arrow over (O)}, described above, may be written as:",{"@attributes":{"id":"p-0431","num":"0538"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mover":{"mi":"O","mo":"\u2192"},"mo":"\u2758","msub":{"mi":["\u03c9","c"]}}}},{"munderover":{"mo":"\u220f","mrow":{"mi":"u","mo":"=","mn":"1"},"mi":"U"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mfrac":{"mrow":[{"msub":{"mi":"\u03bb","mrow":{"mi":["u","c"],"mo":","}},"mo":"\u2062","mmultiscripts":{"mi":"\u2147","none":[{},{}],"msub":[{"mi":"\u03bb","mrow":{"mi":["u","c"],"mo":","}},{"mi":["n","u"]}],"mprescripts":{}}},{"msub":{"mi":["n","u"]},"mo":"!"}]}}],"mo":"="}}}},"Taking the log of the above-equation provides:",{"@attributes":{"id":"p-0433","num":"0540"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"log","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":"P","mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mover":{"mi":"O","mo":"\u2192"},"mo":"\u2758","msub":{"mi":["\u03c9","c"]}}}}}},{"munderover":{"mo":"\u2211","mrow":{"mi":"u","mo":"=","mn":"1"},"mi":"U"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mo":["(",")"],"mtable":{"mtr":{"mtd":[{"mrow":{"msub":{"mi":["n","u"]},"mo":"\u2062","mrow":{"mi":"log","mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":"\u03bb","mrow":{"mi":["u","c"],"mo":","}}}}}},{"msub":{"mi":"\u03bb","mrow":{"mi":["u","c"],"mo":","}}},{"mrow":{"msub":{"mi":["n","u"]},"mo":"!"}}]}}}}],"mo":"="}}}},"The above-quantity may be inserted into Eq. 2 and used with the log of the prior probability for class c, which is assumed to be known, to calculate ULPP({right arrow over (O)}).",{"@attributes":{"id":"p-0435","num":"0542"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Parameter","Definition"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u03c9","Class c."]},{"entry":[{},"{right arrow over (O)}","Observation vector."]},{"entry":[{},"\u03bb","Mean firing rate of unit u for class c."]},{"entry":[{},"n","Observed firing rate for unit u."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"For LFP and ECoG decoders, it may be assumed that the power of certain frequency bands from certain channels will attain some mean values with some known covariance among themselves for each class of movement. Symbols used in the following equations are defined in the table below.","With these assumptions, likelihood term may be modeled for each class as a multivariate Gaussian distribution:",{"@attributes":{"id":"p-0438","num":"0545"},"maths":{"@attributes":{"id":"MATH-US-00005","num":"00005"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mover":{"mi":"O","mo":"\u2192"},"mo":"\u2758","msub":{"mi":["\u03c9","c"]}}}},{"mfrac":{"mn":"1","msub":{"mi":["S","c"]}},"mo":"\u2062","msup":{"mi":"\u2147","mrow":{"mfrac":{"mn":["1","2"]},"mo":["\u2062","\u2062"],"msup":{"mrow":{"mo":["(",")"],"mtable":{"mtr":{"mtd":[{"mover":{"mi":"O","mo":"\u2192"}},{"msub":{"mi":["\u03bc","c"]}}]}}},"mi":"\u2032"},"mrow":{"msup":{"msub":{"mi":["\u03a3","c"]},"mn":"1"},"mo":"\u2061","mrow":{"mo":["(",")"],"mtable":{"mtr":{"mtd":[{"mover":{"mi":"O","mo":"\u2192"}},{"msub":{"mi":["\u03bc","c"]}}]}}}}}}}],"mo":"="}}}},"The term SC is referred to as a normalizing constant for class c and may be defined as:",{"@attributes":{"id":"p-0440","num":"0547"},"maths":{"@attributes":{"id":"MATH-US-00006","num":"00006"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msub":{"mi":["S","c"]},"mo":"=","mfrac":{"mn":"1","mrow":{"msup":{"mrow":{"mo":["(",")"],"mrow":{"mn":"2","mo":"\u2062","mi":"\u03c0"}},"mfrac":{"mi":"N","mn":"2"}},"mo":"\u2062","mrow":{"mo":["\uf603","\uf604"],"msub":{"mi":["\u03a3","c"]}}}}}}}},"Taking the natural log of the likelihood term provides:",{"@attributes":{"id":"p-0442","num":"0549"},"maths":{"@attributes":{"id":"MATH-US-00007","num":"00007"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":[{"mi":"log","mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mi":"P","mo":"\u2062","mrow":{"mo":["(",")"],"mrow":{"mover":{"mi":"O","mo":"\u2192"},"mo":"\u2758","msub":{"mi":["\u03c9","c"]}}}}}},{"mrow":[{"mi":"log","mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":["S","c"]}}},{"msup":{"mo":"\u2009","mn":"1"},"mo":"\u2062","mrow":{"mo":["(",")"],"mtable":{"mtr":{"mtd":[{"msub":{"mover":{"mi":"O","mo":"\u2192"},"mi":"c"}},{"msub":{"mi":["\u03bc","c"]}}]}}}}],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mfrac":{"mn":["1","2"]},"msup":{"mrow":{"mo":["(",")"],"mtable":{"mtr":{"mtd":[{"msub":{"mover":{"mi":"O","mo":"\u2192"},"mi":"c"}},{"msub":{"mi":["\u03bc","c"]}}]}}},"mi":"\u2032"},"msub":{"mi":["\u03a3","c"]}}],"mo":"="}}}},"As with spike decoding, the above-quantity may be inserted into Eq. 2 and used along with the log of the prior probability for class c, which is assumed to be known, to calculate ULPP({right arrow over (O)}).",{"@attributes":{"id":"p-0444","num":"0551"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},"Parameter","Definition"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u03c9","Class c."]},{"entry":[{},"{right arrow over (O)}","Observation vector."]},{"entry":[{},"\u03bc","Vector of mean feature values for class c."]},{"entry":[{},"\u03a3","Covariance matrix for class c."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"When training a spike decoder, the mean firing rate for each unit and class is needed (\u03bb). In practice, the mean firing rate vector for class c (\u03bc) is found. The formula for \u03bcmay be written as:",{"@attributes":{"id":"p-0446","num":"0553"},"maths":{"@attributes":{"id":"MATH-US-00008","num":"00008"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msub":{"mi":["\u03bc","c"]},"mo":"=","mrow":{"mfrac":{"mn":"1","msub":{"mi":["N","c"]}},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"msub":{"mi":["N","c"]}},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mover":{"mi":"O","mo":"\u2192"},"mi":"c"}}}}}}},"In the above-equation, Nis the number of training observation vectors for class C and {right arrow over (o)}is the observed vector for each class.","When training LFP or ECoG component decoders, in addition to the mean, the covariance for each class is needed. The training formula for \u03a3may be written as:",{"@attributes":{"id":"p-0449","num":"0556"},"maths":{"@attributes":{"id":"MATH-US-00009","num":"00009"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msub":{"mi":["\u03a3","c"]},"mo":["\u2062","="],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mfrac":{"mn":"1","msub":{"mi":["N","c"]}},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"msub":{"mi":["N","c"]}},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"mrow":{"mo":["(",")"],"mtable":{"mtr":{"mtd":[{"msub":{"mover":{"mi":"o","mo":"\u2192"},"mi":"c"}},{"msub":{"mi":["\u03bc","c"]}}]}}},"mo":"\u2062","msup":{"mrow":{"mo":["(",")"],"mtable":{"mtr":{"mtd":[{"msub":{"mover":{"mi":"o","mo":"\u2192"},"mi":"c"}},{"msub":{"mi":["\u03bc","c"]}}]}}},"mi":"\u2032"}}}}}}}},"As disclosed above, one or more decoders may not use all units or bands from LFP channels to decode.","A one-way analysis of variance (ANOVA) test may be utilized to down select units and LFP channels\/frequency band combinations. Such a test provides the probability that the difference in mean class values for feature values is due to chance. Units and LFP features having class means that have a significantly low probability, given by their p-value, of being different due to chance alone may be included in the decode. Features may also be ranked according to p-value, and a subset may be selected from the list.","A data set used to train a component algorithm may include:\n\n","Example quantities are provided below. Methods and systems disclosed herein are not, however, limited to the examples herein.","For a spike decoder, approximately 20 training trials may be used for each class of movement, irrespective of the number of units in the decode. For an LFP decoder, approximately 200 trials per movement of LFP data have been used to train the decoder when approximately 20 channels of LFP data are actually used in decoding. Channels included in the decoding were down-selected from all available using a one-way ANOVA test.","(i) Analysis of Example Design Decisions","In an example implementation, design decisions were based on experience with a dataset of simultaneous recordings of LFP and spike data, obtained from another source. It is noted, however, that Bayesian approaches have been successfully utilized by others, as described immediately below.","(1) Previous Use of Bayesian Classifiers","Previous use of Bayesian classifiers are described below.","In a set of experiments conducted at the University of Rochester Medical Center (URMC), primates were trained to place a hand in manipulandum and individually flex and extend all five fingers and the wrist. Additionally, one primate was trained to flex and extend the thumb\/index, index\/middle and ring\/little combinations of fingers.","Recordings were made with individual electrodes over a period of months from the primate motor (MI) and dorsal premotor (PMd) brain areas of each primate. Recordings from individual units were later combined to simulate recording from an array.","Spikes were counted in 100 millisecond bins directly before switch closure and using 30% of trials for training and 70% for testing the results in the table immediately below were obtained.",{"@attributes":{"id":"p-0462","num":"0572"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},{},"Number of Units","Percent"]},{"entry":["Monkey","Type of Movements Decoded","used in the Decode","Accuracy"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["K","Individual fingers and wrist","102","\u2009100%"]},{"entry":["C","Individual fingers and wrist","99","\u2009100%"]},{"entry":["G","Individual fingers and wrist","111","99.8%"]},{"entry":["K","Individual fingers and wrist ","110","99.1%"]},{"entry":[{},"and combined fingers",{},{}]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Additional information regarding the URMC datasets and decoding technique are provided in: Aggarwal, V., et al., 1 , Neural Systems and Rehabilitation Engineering, IEEE Transactions, vol. 16, no. 1, pp. 3-14, Feb. 2008, incorporated herein by reference in its entirety.","In a set of experiments conducted at the California Institute of Technology, a primate was trained to reach to 4 or 8 goals. Recordings of cortical spikes from the parietal reach region were made using microwire arrays. Spikes were counted in 1 second bins during a period after the primate had been instructed on which goal to reach for but before the primate was permitted to reach for the goal. 30% of the data was used for training, and 70% was used for testing. Decoding results for the \u201cplan\u201d activity are presented in the table immediately below.",{"@attributes":{"id":"p-0465","num":"0575"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"Number of Goals","Number of Units used","Percent"]},{"entry":["Monkey","Included in the Decode","in the Decode","Accuracy"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["S","4","54","~89%"]},{"entry":["S","8","82","~57%"]},{"entry":["S","8","82","~70%"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"Additional information the CalTech experiment and decode technique are provided in, S. Musallam, et al., , Science 305, 258 (2004), incorporated herein by reference in its entirety.","In a demonstration carried out at Stanford University, a primate was trained to perform a center out task to 4 goals. Recordings were made with a Stanford Hermes-C-Nano\/INI-5 system. The system enabled the recording of spikes, detected via threshold crossings, on 20 electrodes and the wireless transmission of the data. The data was received and provided in real-time to the VIE, with a cue used to synchronize a Bayesian classifier. Using this system and counting spikes in 150 ms bins falling 150-200 ms after a go cue (individual lags were fit for each unit), an accuracy of \u02dc95% was achieved with 200 trials using 18 threshold crossings.","(2) LFP and ECoG Filter Design","LFP and ECoG decoders may utilize digital filters, such as to remove power line noise, prevent aliasing when down-sampling, and\/or to band pass filter channels of data as part of feature extraction.","The digital filters may be configured to have relatively sharp transitions between stop and pass bands, to have relatively low ripple in the pass band, and\/or to have a relatively low number of coefficients.","Sharp transitions permit relatively tight control over which bands are passed through at each filtering step. For notch and anti-aliasing filters, sharp transitions permit tighter filtering bounds to be set, leaving more bandwidth for analysis. For bandpass filters used in feature extraction, sharp transitions reduce the region of frequency overlap between band passed signals.","Low ripple helps to ensure that all frequencies in a band are weighted equally.","Low numbers of coefficients may reduce latency that may otherwise be used to the decode using longer filters.","Digital filters in LFP and ECoG decoders may include elliptical filters, since they permit for relatively very sharp transitions between stop and pass bands while maintaining relatively low ripple in the pass band.","Elliptical filters were designed for multiple application areas. In the design of the filters, \u221210 decibels was selected as the cutoff attenuation. Analysis was carried out by examining magnitude plots of the elliptical filters, as described below.","Each filter may operator-adjustable for various environments. Filters analyzed below may be generally representative.",{"@attributes":{"id":"p-0477","num":"0587"},"figref":"FIG. 32","b":"3200"},{"@attributes":{"id":"p-0478","num":"0588"},"figref":"FIG. 33","b":"3300"},{"@attributes":{"id":"p-0479","num":"0589"},"figref":["FIG. 34","FIG. 34"],"b":"3400"},"(3) Component Decoder","A spike component decoder was analyzed with URMC switch task data Multiple factors were examined, and five analyses were performed.","The first analysis compared decoders using Poisson and Gaussian likelihood models.","The second analysis compared the performance of the spike decoder when spike sorting was used and when spikes were simply grouped by electrode.","The third analysis compared the performance of the decode when a one way ANOVA test was used to reduce the number of units included in the decode.","The fourth analysis again looked at the decode performance with sorted and unsorted spikes but used Gaussian (instead of Poisson, as was used in the first model) likelihood models.","The fifth analysis looked at the effect of bin size on decode performance.","In all the five analyses, times have been rounded to the nearest millisecond to reflect constraints faced on the xPC.","The results of these analyses are shown in the following five figures.","Ten fold cross validation was performed for each test point. To simulate the dropping of units, an appropriate number of units were selected at random to feed into the decoder. For each fold, between 50 to 150 repetitions were performed, roughly proportional to the reciprocal of the number of units presented to the decoder, to get an average accuracy value. This was then repeated for each fold to produce the values for the test points plotted in the figures below.","For those tests that used an ANOVA test to down select units, the number of units actually used in the decode was lower than the number presented to it. This simulates recording from a random population of units, some of which may be well tuned for the task at hand, while others may not be.","When using an ANOVA test with a low number of units, there were occasions when all units presented to the decoder were weeded out in training. In this case, results from that repetition were not counted.","Data from a switch task paradigm was used in this section. The decode task was to decode which of three switches a monkey was manipulating.",{"@attributes":{"id":"p-0493","num":"0603"},"figref":["FIG. 35","FIG. 35"],"b":"3500"},{"@attributes":{"id":"p-0494","num":"0604"},"figref":["FIG. 36","FIG. 35"],"b":"3600"},"In , it can be seen that for lower unit\/electrode numbers, the unsorted decode outperforms the sorted decode. As the number of units\/electrodes increases, the two methods are similar. This may seem initially counter intuitive. A possible explanation follows. Each electrode may record multiple spikes. In a relatively extreme case of comparing one electrode with one unit, it is likely or possible that a single electrode recording from multiple units may contain more useful information for a decode than a single unit. This effect may diminishe as the number of electrodes and units grows.",{"@attributes":{"id":"p-0496","num":"0606"},"figref":"FIG. 37","b":"3700"},"As described above, if no units were left after an ANOVA test, the analysis for that repetition was skipped. This is analogous to performing an ANOVA test on training data collected from a relatively old array, determining there were no good units on the array, and then determining to not decode.",{"@attributes":{"id":"p-0498","num":"0608"},"figref":"FIG. 37"},"In , it can be seen that the use of ANOVA improves decode accuracy with low unit numbers, possibly by determining when there are no \u201cgood\u201d units with which to perform a decode and thereby preventing a bad decode from entering the analysis. In , it can also be seen that the use of ANOVA does not impair decode performance as the number of units increases. While decode accuracy does not suffer, there may be a practical benefit from the use of ANOVA when many units are presented to the decoder. By selecting only those units which have relatively low p-values, the number of units use in the decode can be lowered, reducing computational burden.",{"@attributes":{"id":"p-0500","num":"0610"},"figref":["FIG. 38","FIG. 38"],"b":"3800"},{"@attributes":{"id":"p-0501","num":"0611"},"figref":["FIG. 39","FIG. 39"],"b":"3900"},"For , the decoder used Poisson likelihood functions, unsorted spikes and an ANOVA test to reduce the dimensionality of data. Bin size was then varied. In all cases the closing edge of the bin was aligned with switch closure. Thus, all spikes that were counted preceded switch closure. The analysis was repeated for different numbers of units that were included in the decode. The results show that for this particular dataset, accuracy saturates for bin sizes around 100 milliseconds in length.","(4) LFP Channel Dropping Analysis","As with the spike decoder, a LFP component decoder was analyzed with URMC switch task data. The number of channels included in the decode was examined.","Ten fold cross validation was performed for each test point. To simulate the dropping of channels, an appropriate number of channels were selected at random to feed into the decoder. For each fold, between 100 to 150 repetitions were performed, roughly proportional to the reciprocal of the number of units presented to the decoder, to get an average accuracy value. This was then repeated for each fold to produce the values for the test points plotted in the figure below.",{"@attributes":{"id":"p-0506","num":"0616"},"figref":"FIG. 40","b":"4000"},"As with the spike decode, because of the use of an ANOVA test, the number of channels presented to the decoder, and given on the ordinate axis of , was an upper bound on the number of channels actually used in the decode.","In the description below, component algorithms are described as placed or implemented within corresponding configurable subsystems. Alternatively, or additionally, component algorithms may be placed or implemented within a signal analysis configurable subsystem, and may be run simultaneously in a fusion approach. The former more readily permits unit testing, validation, and verification of each component algorithm before more sophisticated data and decision fusion techniques are undertaken.","(i) Spike Decoder Signal Analysis Configurable Subsystem","A spike decoder may be implemented within a configurable subsystem  is a block diagram of a FLAPL_FM_MLE_Spike_Cls configurable subsystem , which may include a spike decoder. Configurable subsystem  may represent an instantiation of a signal analysis block in a multi-block model of a VIE, and may receive inputs on an inputs bus and send commands to a controls block over an intent bus.","Configurable subsystem  may include a digital sub-bus of the inputs bus and a selector to select a spike signal, a decodeCue signal, and a movementStop signal.","The spike signal, the decodeCue signal, and the movementStop signal may be provided to block , which may represent a spike component decoder, denoted here as APL_FM_MLE_spike_Cls_v1.","Block  receives the spike and cues signals, and outputs an intent bus and a rawOut bus. Block  may output a diagnostics bus. Where fusion is not performed, and the spike component decoder is implemented to drive the limb by itself, the rawOut bus may be unused.",{"@attributes":{"id":"p-0514","num":"0624"},"figref":"FIG. 42","b":["4102","4202","4204"]},"The table immediately below lists names of parameters that may be used by configurable subsystem . One or more of the parameters may be automatically generated during training.","Example Parameters Used by Configurable Subsystem ",{"@attributes":{"id":"p-0516","num":"0626"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Variable Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["aplMLESpkDecode.baseSmpRate","(non-tunable) This is the base sample time the algorithm"]},{"entry":[{},"runs at in seconds."]},{"entry":["aplMLESpkDecode.intentRate","(non-tunable) The rate that commands should be sent to"]},{"entry":[{},"controls on the Intent Bus in seconds."]},{"entry":["aplMLESpkDecode.nRawUnits","(non-tunable) This is the number of raw channels sent into"]},{"entry":[{},"the Spikes input port."]},{"entry":["aplMLESpkDecode.goodChs","(non-tunable) The unit numbers that should be used in the"]},{"entry":[{},"decode. Any unit numbers that are not placed in this"]},{"entry":[{},"vector will be weeded out to avoid unnecessary"]},{"entry":[{},"computational burden. Unit numbers are one-indexed,"]},{"entry":[{},"with channel one being the first channel that appear on the"]},{"entry":[{},"spike input line, channel two the second, etc.."]},{"entry":["aplMLESpkDecode.binSize","(non-tunable) This is the number of model time steps that"]},{"entry":[{},"should make up a bin when counting spikes. (Example: If"]},{"entry":[{},"baseSmpRate is .001 and bin sizes of 10 milliseconds are"]},{"entry":[{},"desired, then binSize of 10 would be used)."]},{"entry":["aplMLESpkDecode.nCueDelaySmps","(non-tunable) nCueSmpDelays provided during training."]},{"entry":["APL_MLE_SPK_MEANS ","Described Above"]},{"entry":["APL_MLE_SPK_LOG_MEANS","Described Above"]},{"entry":["APL_MLE_SPK_LOG_PRIORS","Described Above"]},{"entry":["APL_MLE_SPK_CLASS_KEY","Described Above"]},{"entry":["APL_MLE_SPK_N_JOINTS_PER_","Described Above"]},{"entry":["CLASS",{}]},{"entry":["APL_MLE_SPK_JOINT_MAP","Described Above"]},{"entry":["APL_MLE_SPK_MAG_MAP","Described Above"]},{"entry":["APL_MLE_SPK_JOINT_MAP_INC","Described Above"]},{"entry":"NULL_CLASS"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"(ii) LFP Signal Analysis Configurable Subsystem",{"@attributes":{"id":"p-0518","num":"0628"},"figref":"FIG. 43","b":"4300"},"Configurable subsystem  may include a digital sub-bus of the inputs bus and a selector to select cues signals. In the example of , selector outputs trigger cue as channel  and a movementStop cue as channel . An analog bus is may be routed another selector where LFP channels may be selected.","Selected signals may be provided to a block , denoted here as APL_FM_MLE_ECoG_or_LFP_Cls_v1, which may represent a component decoder block. Block  may be configured to perform LFP or ECoG decoding.",{"@attributes":{"id":"p-0521","num":"0631"},"figref":"FIG. 44","b":["4302","4402","4404"]},"The table immediately below lists names of parameters that may be used by configurable subsystem . One or more of the parameters may be automatically generated during training.","Example Parameters Used by Configurable Subsystem ",{"@attributes":{"id":"p-0523","num":"0633"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Variable Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["aplMLELFPDecode.baseSmpRate","(non-tunable) This is the base sample time the"]},{"entry":[{},"algorithm runs at in seconds."]},{"entry":["aplMLELFPDecode.intentRate","(non-tunable) The rate that commands should "]},{"entry":[{},"be sent to controls on the Intent Bus in seconds."]},{"entry":["aplMLELFPDecode.nRawChs","(non-tunable) This is the number of raw LFP"]},{"entry":[{},"channels that are initially provided to the "]},{"entry":[{},"decode before any down selection."]},{"entry":["aplMLELFPDecode.goodChs","(non-tunable) The channels of LFP data that"]},{"entry":[{},"should be used in the decode. Channels not "]},{"entry":[{},"listed in this vector will be weeded out to avoid"]},{"entry":[{},"unnecessary computational burden."]},{"entry":["APL_MLE_LFP_ENABLE_","Described Above "]},{"entry":["NOTCH_FTR",{}]},{"entry":["aplMLELFPDecode.notchFtr","(non-tunable) This is a structure with the"]},{"entry":[{},"following fields:"]},{"entry":[{},"bCoefs - The feed-forward coefficients"]},{"entry":[{},"of the notch filter."]},{"entry":[{},"aCoefs - The feedback coefficients of the"]},{"entry":[{},"notch filter"]},{"entry":[{},"rate - The rate the notch filter runs at in"]},{"entry":[{},"seconds."]},{"entry":["APL_MLE_LFP_ENABLE_AA_FTR","Described Above "]},{"entry":["aplMLELFPDecode.aaFtr","(non-tunable) This is a structure with the"]},{"entry":[{},"following fields:"]},{"entry":[{},"bCoefs - The feed-forward coefficients"]},{"entry":[{},"coefficients of the anti-aliasing"]},{"entry":[{},"aCoefs - The feedback coefficients of the"]},{"entry":[{},"anti-aliasing filter"]},{"entry":[{},"rate - The rate the notch filter runs at in"]},{"entry":[{},"seconds."]},{"entry":["aplMLELFPDecode.dwnSmpFactor","This is the integer value the LFP data should be"]},{"entry":[{},"down-sampled by. Down sampling will be"]},{"entry":[{},"applied after notch and anti-alias filtering"]},{"entry":["aplMLELFPDecode.bandPassFtrs","(non-tunable) This is a 1 by 5 structure which"]},{"entry":[{},"contains the parameters to use for each of 5"]},{"entry":[{},"possible filters used to break up the LFP signal"]},{"entry":[{},"into bands."]},{"entry":[{},"enable - 1 if a filter should be used. 0 if a"]},{"entry":[{},"filter should not be used."]},{"entry":[{},"aCoefs - The feed-forward coefficients"]},{"entry":[{},"of the filter. If enable is set to 0, a place holder"]},{"entry":[{},"aCoef value must still be provided."]},{"entry":[{},"bCoefs - The feedback coefficients of the"]},{"entry":[{},"filter. If enable is set to 0, a place holder aCoef"]},{"entry":[{},"value must still be provided."]},{"entry":[{},"rate - The rate the filter should run at (in"]},{"entry":[{},"seconds). If enable is set to 0, a place holder "]},{"entry":[{},"rate value must still be provided."]},{"entry":["aplMLELFPDecode.ftrSelector","(non-tunable) For the real-time decode, band "]},{"entry":[{},"one for all channels is filtered and placed in "]},{"entry":[{},"a vector, band two for all channels is filtered "]},{"entry":[{},"and then added to the end of the existing feature "]},{"entry":[{},"vector, and this is repeated for all bands. "]},{"entry":[{},"However, the decode only takes place on a few "]},{"entry":[{},"of the channel\/band features and the feature "]},{"entry":[{},"vector that the classifier has been trained on "]},{"entry":[{},"may be different than the order of features "]},{"entry":[{},"output by the band-pass filters. Thus, to "]},{"entry":[{},"appropriately down select features and re-"]},{"entry":[{},"arrange them for later decode, a selector "]},{"entry":[{},"block is required. This parameter provides the"]},{"entry":[{},"index selector for this selector block."]},{"entry":[{},"Specifically, it contains the following fields:"]},{"entry":[{},"selInds - This is an array determining"]},{"entry":[{},"what incoming channel\/band features are "]},{"entry":[{},"passed through and in what order. The order"]},{"entry":[{},"that feature indices are specified in this vector "]},{"entry":[{},"will be the order they are sent to the decoder "]},{"entry":[{},"in. If a feature number is not represented in "]},{"entry":[{},"this vector, it will not be sent to the decoder."]},{"entry":[{},"inputSize - This is the size of the"]},{"entry":[{},"incoming feature vector before down-selection. "]},{"entry":[{},"It can be computed as the number of LFP "]},{"entry":[{},"channels that are passed through the initial "]},{"entry":[{},"channel down-selector multiplied by the number "]},{"entry":[{},"of bands extracted from each channel."]},{"entry":[{},"To make things clear, a simple example will be"]},{"entry":[{},"provided. In this example, 2 LFP channels are"]},{"entry":[{},"used and two bands (first, a 25-50 Hz band and"]},{"entry":[{},"second, a 75-100 Hz band) are extracted from"]},{"entry":[{},"each. Thus, the feature vector coming into the"]},{"entry":[{},"selector block would first have the 25-50 Hz"]},{"entry":[{},"band from channel 1, next the 25-50 Hz band"]},{"entry":[{},"from channel 2, next the 75-100 Hz band from"]},{"entry":[{},"channel 1 and finally the 75-100 Hz band from"]},{"entry":[{},"channel 2. However, in this example, the"]},{"entry":[{},"decoder has been trained on a feature vector "]},{"entry":[{},"composed of the power of the 75-100 Hz band "]},{"entry":[{},"from channel 1 and then 25-50 Hz band from "]},{"entry":[{},"channel 2. The ftrSelector would be used to "]},{"entry":[{},"form a proper feature vector for decode by"]},{"entry":[{},"setting the inputSize field to 4 and the "]},{"entry":[{},"selInds field to [3 2]."]},{"entry":["aplMLELFPDecode.nCueDelaySmps","(non-tunable) nCueSmpDelays provided during"]},{"entry":[{},"training."]},{"entry":["aplMLELFPDecode.nSmpsInFtrMean","(non-tunable) The number of band-passed"]},{"entry":[{},"samples that should be included in the mean"]},{"entry":[{},"value."]},{"entry":["APL_MLE_LFP_CLASS_MEANS","Described Above"]},{"entry":["APL_MLE_LFP_CLASS_INV_COVS","Described Above"]},{"entry":["APL_MLE_LFP_CLASS_LOG_NORM_","Described Above"]},{"entry":["CONSTS",{}]},{"entry":["APL_MLE_LFP_CLASS_LOG_","Described Above"]},{"entry":["PRIORS",{}]},{"entry":["APL_MLE_LFP_CLASS_KEY","Described Above"]},{"entry":["APL_MLE_LFP_N_JOINTS_","Described Above"]},{"entry":["PER_CLASS",{}]},{"entry":["APL_MLE_LFP_JOINT_MAP","Described Above"]},{"entry":["APL_MLE_LFP_MAG_MAP","Described Above"]},{"entry":["APL_MLE_LFP_JOINT_MAP_INC_","Described Above"]},{"entry":"NULL_CLASS"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"(iii) ECoG Signal Analysis Configurable Subsystem","A FL_APL_FM_MLE_ECoG_Cls configurable subsystem may include a ECoG decoder, which may be substantially similar or identical to the LFP decoder described above with respect to , with the exception that in parameter names, the character string LFP may be replaced with ECoG.","(iv) spikeDecoderV1 Block",{"@attributes":{"id":"p-0527","num":"0637"},"figref":["FIG. 45","FIG. 42"],"b":"4202"},"Decoder block  may receive spikes, a decode trigger and movement stop cues, and to output ULPP values.","The movementStop cue may be unused by decoder block , and may be passed thru for use by blocks downstream.","The trigger cue may be passed through a conditionalDelay block to delay the trigger pulse a requested number of samples (aplMLESpkDecode.nCueDelaySmps) before it reaches a spike counter block and a Poisson ULPP calculator.","When spikes arrive in the model, they may be initially passed through a selector block to weed out any units that are not used in the actual decode. This may free up memory and\/or computational resources. A unit delay may be applied to incoming spike trains, such as to ensure that when spikes are counted in bins, the leading edge will be inclusive and the trailing edge will be exclusive, which may correspond to how training is performed. Spikes may then be sent to a buffer to keep a record of the last N samples of spike trains for each unit, where N is determined by the binSize used in the decode.","An enabled subsystem may be configured to access the buffer and count the number of spikes for each unit. The enabled subsystem may count spikes when triggered by the potentially delayed trigger pulse rather than constantly. This may conserve computational resources.","After spikes are counted, a Poisson ULPP Calculator block may access the spike counts and produce ULPP values for each class. The ULLP values may be computed when a trigger pulse is received, and the ULPP values may be held between trigger pulses.","(v) bandDecoderV1 Block",{"@attributes":{"id":"p-0535","num":"0645"},"figref":["FIG. 46","FIG. 44"],"b":"4402"},"LFP data may be received on a chData input port. LFP channels may be down selected to remove any channels that are not used in the decode. Remaining LFP channels may be sent through a notch filter to remove power line noise. LFP data may then be down sampled, which may reduce downstream computational load. Where down sampling is implemented, an anti-aliasing filter may be applied. The notch filter and anti-aliasing filters may be configured to permit disabling at run-time. When the notch filter and anti-aliasing filters are disabled, LFP data may pass through them unchanged.","Where down sampling undesired, a down sample factor of 1 may be provided. Parameters that determine the down sample factor in the LFP and ECoG algorithms are referred to herein as aplMLELFPDecode.dwnSmpFactor and aplMLEECoGDecode.dwnSmpFactor, respectively.","After down sampling, the LFP channels may be sent to a band pass filter and buffer block. The band pass filter and buffer block may apply band pass filters specified in a parameter referred to herein as aplMLELFPDecode.bandPassFtrs\/aplMLEECoGDecode.bandPassFtrs. The band pass filter and buffer block may also select appropriate band\/channel combinations using a parameter referred to herein as aplMLELFPDecode.ftrSelector\/aplMLEECoGDecode.ftrSelector, and may buffer the band\/channel combinations. A buffer length may be determined by a frame length used to calculate average band power.","The decoder may review two cues, which may each undergo down sampling as applied to the LFP data. The cues may then be sent through a selector block where the first cue is used for the trigger signal and the second cue is sent out of the block as the movementStop signal.","The down sampled trigger may then be passed through a delay block, illustrated here as a unit delay, to delay the trigger sample by a number of samples indicated in a parameter referred to herein as aplMLELFPDecode.nCueDelaySmps\/aplMLEECoGDecode.nCueDelaySmps. The signal may then be used to trigger the band power calculator and the ULPP calculator.","When enabled by the trigger signal, a band power calculator may access the channel\/band signals buffered in the band pass filter and buffer block to calculate the average power for the signals. The power of these signals may be calculated when the trigger signal is set high, which may conserve computational resources. After the band powers are calculated, a Multivariate Gaussian ULPP","Calculator block may calculate ULPP values. The ULPP values may be calculated when a trigger pulse is received, and ULPP values may be held between pulses.","(vi) Intent Block",{"@attributes":{"id":"p-0544","num":"0654"},"figref":["FIG. 47","FIG. 42","FIG. 44"],"b":["4702","4204","4404"]},"Intent block  receives ULPP values and enable signal. When the enable signal is high, intent block  selects the most likely class from a vector of ULPP values and generates a formatted intent command using intent mapping parameters described above.","Experimental performance metrics for spike and LFP component decoders are provided below. Experimental metrics were not generated for an ECoG component decoder.","The algorithms were evaluated with switch task data obtained from the University of Rochester Medical Center. The following description of the switch task data is based on a task description provided by Vikram Aggarwal, at the Johns Hopkins University (see Mollazadeh et al. described above, for additional information):\n\n","For the results presented here, switch  is a vertical toggle switch, switch  is a push button and switch  is a horizontal toggle switch.","Using 10 fold cross validation, the overall accuracy for the spike component algorithm using unsorted spike data from 64 electrodes was 99.85%. The confusion matrix is provided in the table immediately below.",{"@attributes":{"id":"p-0550","num":"0661"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":[{},{},"Switch 1","Switch 2","Switch 3"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Switch 1","11050","0","0"]},{"entry":[{},"Switch 2","0","11050","0"]},{"entry":[{},"Switch 3","0","50","10850"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"Again using 10 fold cross validation, the overall accuracy for the LFP component algorithm using 32 LFP channels was 83.18%. The confusion matrix is provided in the table immediately below.",{"@attributes":{"id":"p-0552","num":"0663"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":[{},{},"Switch 1","Switch 2","Switch 3"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Switch 1","18700","2000","1400"]},{"entry":[{},"Switch 2","1700","17800","2600"]},{"entry":[{},"Switch 3","1000","2400","18400"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"Features of the experimentally evaluated spike component decoder include:\n\n","One or more of the above-listed features may differ with other spike decoder implementations.","Features of the experimentally evaluated LFP component decoder includes:\n\n","One or more of the above-listed features may differ with other LFP decoder implementations.","Component algorithms may be implemented individually and corresponding decisions may be fused in a data fusion module. Alternatively, or additionally, a mathematical model may be implemented to decode from spike, LFP and ECoG data simultaneously, without a data fusion module.","Decision fusion is described below with reference to motor decoding algorithms FM MLE spike Cls and FM MLE LFP Cls, described above, and with respect to a fusion algorithm referred to herein as a decision fusion FM class. In the examples below, \u201cFM\u201d refers to finger movement, \u201cMLE refers to maximum likelihood estimation, \u201cLFP\u201d refers to local field potential, and \u201cCL\u201d refers to class.","The fusion algorithm described below is a discrete decision fusion algorithm that performs decision fusion on two classifiers, each of which decode three classes. The decision fusion algorithm may receive unnormalized log posterior probability (ULPP) vectors from the two motor decoders, and may output a decision vector.","Methods and systems disclosed herein are not, however, limited to the example fusion algorithm disclosed below.","The decision fusion FM class first converts the ULPP values from the decoders to normalized posterior probabilities so that they are no longer in log space and sum to one. Then it fuses the probability vectors into a decision vector using a weighted average where the weights are optimized by training and sum to one. The index of the decision vector that contains the maximum value corresponds to the final class decision, and the maximum value of the decision vector can be interpreted as the confidence of the decision which can be used to modulate the velocity of the class state transition.",{"@attributes":{"id":"p-0562","num":"0692"},"figref":"FIG. 48","b":"4800"},"A spike classifier weight is denoted \u03b1, a LFP classifier weight is denoted 1\u2212\u03b1, an \u03b1 may include a tunable parameter.","A decision vector may be a [3,1] vector, and a maximum value index corresponds to a most likely class.","Inputs to decision fusion algorithm  may include unnormalized log posterior probabilities from spike and LFP decoders. Each ULPP vector may be a [3,1] vector.","Weighting of the ULPP vectors may be a configurable algorithm parameter, referred to herein as APLLOP_Weights, which may have a size [2,1]. The elements may sum to one.","Decision fusion algorithm  may be implemented to:\n\n","Methods of designing a discrete decision fusion algorithm are disclosed below.","Discrete decision fusion data sets may be analyzed with one or more of the flowing discrete decision fusion algorithms:\n\n","Where the fusion algorithm involves two classifiers and three classes, many of these discrete decision fusion algorithms become relatively trivial. The sum rule is always a special case of the linear opinion pool. Similarly, the product rule is a special case of the log opinion pool. For two classifiers, the sum rule and median rule are equivalent and the majority vote becomes a unanimous vote. The latter will only achieve the performance of the best individual classifier. The product rule is the sum rule in log space. The only analysis that needs to be performed is on the linear opinion pool and the log opinion pool. Also, for a two-classifier problem, the opinion pools simplify to having one weight, a, since the weight of the other classifier will be 1\u2212\u03b1 to satisfy the criterion that the weights sum to unity. It would be expected that the log opinion pool would provide similar accuracy to the linear opinion pool but be more sensitive to outliers and therefore less robust. Both methods may be analyzed, but if the log opinion pool can be shown to be less useful, then only the linear opinion pool may be considered.","The spike decoder provides relatively high accuracy when all of the spike units are included. However, spike content tends to degrade over time, on the order of months to years, and it may become necessary to evaluate the spike decoder with a subset of the original spikes. The decision fusion algorithm may be designed to optimally fuse the decisions independent of the spike decoder accuracy.","Design of the algorithm may include evaluating the linear opinion pool and the log opinion pool using decisions from the LFP and spike decoders, which are generated from a 10-fold cross-validation analysis, which uses 9 of the 10 folds for training the individual decoders. This process may be repeated for variations of the set of active spike units, while all LFP channels may be always used. Where the linear opinion pool proves more useful as a decision fusion method, weights that optimize the correct classification percentage as a function of the number of spike units may be determined Optimal weights may generalize by performing a 2-fold cross validation and determining the optimal weights for each of the two training\/testing set pairs.","There are multiple ways to assess confidence in the fused decision. A first technique includes treating the posterior probabilities as arbitrary data points and considering the distribution of the data points associated with each of the three classes. Density functions may be estimated, and distribution of data points will determine new decision boundaries instead of taking the class that has the maximum resulting value. While this technique may accurately model a particular data set, it may not generalize well with a limited set of data points, and it may disregard the probabilistic intention of the decision vectors. It may also be more expensive computationally, and more complicated than a second technique described below.","A second technique of assessing the confidence treats the data points as probabilities and preserves original decision boundaries. If the confidence of an individual decoder can be defined as the maximum probability of its raw output, then the confidence of the decision fusion result using the linear opinion pool can be defined as the maximum value of the weighted sum of the probabilities of the individual decoders. In other words, if both decoders agree, then linearly interpolating between the two data points will also agree. If the decoders disagree, then as the weights are swept, the resulting data point will cross a decision boundary and the confidence should be lower because the resulting point will be closer to that boundary.",{"@attributes":{"id":"p-0575","num":"0714"},"figref":"FIG. 49","b":"4900"},"A mathematical description of a discrete fusion algorithm is provided below.","Discrete decision fusion classifiers are described by Kittler in terms of a Bayesian theoretical framework. According to Eq. 3 below, the pattern Z should be assigned to class \u03c9j provided that the posteriori probability of that interpretation is maximum. Applying Bayes theorem to Eq. 3 yields Eq. 4.",{"@attributes":{"id":"p-0578","num":"0717"},"maths":{"@attributes":{"id":"MATH-US-00010","num":"00010"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mrow":[{"mrow":[{"mi":["assign","Z"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}},{"msub":{"mi":["\u03c9","j"]},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"if"}],"mo":"\u2192"},{"mrow":[{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"msub":[{"mi":["\u03c9","j"]},{"mi":"x","mn":"1"}],"mo":"\u2758"},"mo":[",","\u2062",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"msub":{"mi":["x","R"]}}}},{"munderover":{"mi":["max","m"],"mrow":{"mi":"k","mo":"=","mn":"1"}},"mo":"\u2062","mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"msub":[{"mi":["\u03c9","k"]},{"mi":"x","mn":"1"}],"mo":"\u2758"},"mo":[",","\u2062",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"msub":{"mi":["x","R"]}}}}}],"mo":"="}],"mo":["\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mtext":{}}]}},{"mrow":{"mo":["(",")"],"mrow":{"mi":"Eq","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"3"}}}]},{"mtd":[{"mrow":{"mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mrow":{"msub":[{"mi":["\u03c9","k"]},{"mi":"x","mn":"1"}],"mo":"\u2758"},"mo":[",","\u2062",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"msub":{"mi":["x","R"]}}}},"mo":"=","mfrac":{"mrow":[{"mrow":[{"mi":"p","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":"x","mn":"1"},"mo":[",","\u2062",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"msub":[{"mi":["x","R"]},{"mi":["\u03c9","k"]}],"mo":"\u2758"}}}},{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":["\u03c9","k"]}}}],"mo":"\u2062"},{"mi":"p","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"x","mn":"1"},{"mi":["x","R"]}],"mo":[",","\u2062",","],"mi":"\u2026","mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}}}}]}}},{"mrow":{"mo":["(",")"],"mrow":{"mi":"Eq","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"4"}}}]}]}}}},"Assuming conditional independence, the classes are highly ambiguous, and equal priors, yields Eq. 5, which is the linear opinion pool also mentioned by Wanas.",{"@attributes":{"id":"p-0580","num":"0719"},"maths":{"@attributes":{"id":"MATH-US-00011","num":"00011"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mrow":[{"mi":["assign","Z"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}},{"msub":{"mi":["\u03c9","j"]},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"if"}],"mo":"\u2192"},{"mrow":[{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"R"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":{"mi":["w","i"]},"mo":"\u2062","mrow":{"mi":"P","mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["\u03c9","j"]},{"mi":["x","i"]}],"mo":"\u2758"}}}}},{"munderover":{"mi":["max","m"],"mrow":{"mi":"k","mo":"=","mn":"1"}},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"R"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":{"mi":["w","i"]},"mo":"\u2062","mrow":{"mi":"P","mo":["(",")"],"mrow":{"msub":[{"mi":["\u03c9","k"]},{"mi":["x","i"]}],"mo":"\u2758"}}}}}],"mo":"="}],"mo":["\u2062","\u2062"],"mstyle":{"mtext":{}}}},{"mrow":{"mo":["(",")"],"mrow":{"mi":"Eq","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"5"}}}]}}}}},"The LFP and spike based decoder may output a ULPP vector for each class. The ULPP values may be normalized prior to decision fusion so that the sum of the posterior probabilities in the vector is one. Eq. 6 may be used to accomplish this. Where elements of eare too large or too small to be represented with double precision floating point values, normalization may first be accomplished without taking the numbers out of log space using the approximation provided by Eq. 7 from Primeaux.","Eq. 6 may be used for normalization and linearization of a ULLP vector:",{"@attributes":{"id":"p-0583","num":"0722"},"maths":{"@attributes":{"id":"MATH-US-00012","num":"00012"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mfrac":{"msup":{"mi":["\u2147","ULPP"]},"mrow":{"mo":"\u2211","msup":{"mi":["\u2147","ULPP"]}}}},{"mrow":{"mo":["(",")"],"mrow":{"mi":"Eq","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"6"}}}]}}}}},"Eq. 7 may be used for addition in log space approximation:\n\nln()\u2248ln(+1)+ln()\u2003\u2003(Eq. 7)\n","The linear opinion pool (LOP) of Eq. 5 as applied to herein is provided in Eq. 8, where posterior probability (PP) vectors are [3,1] and weights, a, are scalars.\n\nLOP=\u03b1PP+\u03b1PP\u2003\u2003(Eq. 8)\n","In Eq. 8, \u03b1 represents a [2,1] weight vector where and:",{"@attributes":{"id":"p-0587","num":"0726"},"maths":{"@attributes":{"id":"MATH-US-00013","num":"00013"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"munderover":{"mo":"\u2211","mi":"i","mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["\u03b1","i"]}},"mo":"=","mn":"1"}}}},"Training of a discrete fusion algorithm is described below.","May weights may be selected to maximize the percent correct classification. Measuring the percent correct classification may include creating a confusion matrix, or table in which the ijentry is the count of points that are actually of class i and classified as class j. From the confusion matrix, the percent correct classification (PCC) may be computed using Eq. 9, where Tr(CM) is the trace of the confusion matrix and N is the total number of trials included in the confusion matrix.",{"@attributes":{"id":"p-0590","num":"0729"},"maths":{"@attributes":{"id":"MATH-US-00014","num":"00014"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mi":["p","c","c"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}]},"mo":"=","mfrac":{"mrow":{"mi":"Tr","mo":"\u2061","mrow":{"mo":["(",")"],"mi":"CM"}},"mi":"N"}}},{"mrow":{"mo":["(",")"],"mrow":{"mi":"Eq","mo":[".","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mn":"9"}}}]}}}}},"The complete data set may be the raw output of the individual decoders from their respective analysis. The data set may include a cross-fold validation analysis and may vary the set of spike units.","The may be, for example, at least 30N data points for each class, where N is the number of independent classifier weights. In the case of this analysis N=1 and there are approximately about 220 trials per class. A problem with three classifiers may have, for example, at least 900 trials. With four or more classifiers, this condition may not be met.","Viability of decision fusion may be assessed to show that it is possible to improve the performance of the system with respect to any of the individual classifiers by combining information.","As described above, for a three-class decision fusion problem with two individual classifiers as input, only the linear and log opinion pools may be considered. Since spike performance may degrade over time, analysis may include varying the subset of spike units.",{"@attributes":{"id":"p-0595","num":"0734"},"figref":"FIG. 50","b":"5000"},"Each normalized probability vector may be visualized as a point on equilateral triangle . The index containing the maximum value may be selected as the most likely class, which partitions triangle  into three regions, as illustrated in . Points that lie inside a blue region  may be classified as class 1. Points that lie inside a green region  may be classified as class 2. Points that lie inside a red region  may be classified as class 3. Points near vertices of the triangles have higher confidences of being correctly classified. Points near decision boundaries, between regions , , and , have lower confidences of being correctly classified.",{"@attributes":{"id":"p-0597","num":"0736"},"figref":"FIG. 51","b":["5100","3"]},"Normalized decision vectors and corresponding parameterized linear trajectories are represented in .  is a plot of a set of points  corresponding to results from a LFP classifier.  is a plot of a set of points  corresponding to results from a spike classifier. In , the weight applied to the spike classifier, \u03b1, is 0 and 1, respectively. It may be assumed that the weight applied to the LFP classifier is 1\u2212\u03b1.",{"@attributes":{"id":"p-0599","num":"0738"},"figref":"FIG. 54","b":"5400"},"When individual classifiers disagree, the confidence of the final decision may be lower than if both classifiers agreed. This is indicated when the point on the trajectory along a line that crosses the decision boundary is close to the decision boundary. A point on another trajectory along a line that doesn't cross a decision boundary may be relatively closer to a vertex.","A data set was divided into two folds for a two-fold analysis.  is a plot of percent correct classification versus spike weight for the two-fold analysis.","Initially, the first fold was used as a training set and the second fold was used as a testing set. In , a solid line represents correct classification versus spike weight.","The second fold was then used as the training set and the first fold was used as the testing set and the same analysis was applied and plotted in dotted lines of . A visual analysis shows that the weights should generalize.","There may be a tradeoff between the accuracy of two decoders and the amount of cross-correlation between them, in that, as the cross-correlation increases, the benefit that decision fusion provides may decrease. Whereas cross-correlation is likely to be high if both decoders are relatively accurate. Inaccuracies may also tend to lower the cross-correlation.",{"@attributes":{"id":"p-0605","num":"0744"},"figref":["FIG. 56","FIG. 56"],"b":"5600"},"The results illustrated in  indicate that there may be potential for improvement from decision fusion, and there may be additional potential benefit with lower amounts of spike units. Accuracy of the spike decoder may, however, decrease as units are removed.","An exhaustive search of the weight space may be performed with one free parameter and plots of percent correct classification versus the spike weight generated for each of the two subsets of data.",{"@attributes":{"id":"p-0608","num":"0747"},"figref":"FIGS. 57 and 58","b":["5700","5800"]},{"@attributes":{"id":"p-0609","num":"0748"},"figref":["FIG. 57","FIG. 57"]},{"@attributes":{"id":"p-0610","num":"0749"},"figref":"FIG. 58"},"Another method of determining confidence is based on the distributions of weighted decision vectors for each class. This method disregards that the points can be interpreted as probabilities and the estimated density functions determine new decision boundaries for the classes. This method is more complicated and may not generalize as well, for reasons described below with respect to , and .",{"@attributes":{"id":"p-0612","num":"0751"},"figref":"FIG. 59"},{"@attributes":{"id":"p-0613","num":"0752"},"figref":"FIG. 60"},{"@attributes":{"id":"p-0614","num":"0753"},"figref":["FIG. 61","FIG. 60"]},"In , there is a noncontiguous region where points are classified as class 2 (green) on the kernel density estimated decision boundaries, which can be explained by the two points which belong to class 2 in the sparse section of the decision space just left of center on the figure. This phenomenon is the why these results may not generalize well.","The parameterized density estimation of  is based on the kernel density estimation of . The kernel method of  should generalize in order to consider the parameterized estimate of the kernel density estimate of FIG. 61.","One or more features disclosed herein may be implemented in hardware, software, firmware, and combinations thereof, including discrete and integrated circuit logic, application specific integrated circuit (ASIC) logic, and microcontrollers, and may be implemented as part of a domain-specific integrated circuit package, or a combination of integrated circuit packages. The term software, as used herein, refers to a computer program product including a computer readable medium having computer program logic stored therein to cause a computer system to perform one or more features and\/or combinations of features disclosed herein.",{"@attributes":{"id":"p-0618","num":"0757"},"figref":"FIG. 62","b":["6200","6202"]},"One or more features of computer system  may be distributed amongst multiple devices. For example, one or more of a NI, a NFU, a MCU, a cMCU, a pMCU, a multi-BID, and a multi-PID may include a corresponding processor .","Computer system  includes memory\/storage , including a computer readable medium having computer program product logic or instructions  stored thereon, to cause processor  to perform one or more functions in response thereto.","Memory\/storage  further includes data  to be used by processor  in executing instructions , and\/or generated by processor  in response to execution of instructions .","Logic  includes multi-modal neural interface (NI) logic  to cause processor  to multi-modally interface between physiological devices and a prosthetic system, such as described in one or more examples above.","NI logic  may include one or more of sensory decoder logic  and sensory encoder logic .","Sensory decoder logic  may include logic to cause processor  to decode user movement intents from digitized multi-modal neural data , which may be received from a plurality of types of sensors  (), and\/or as a plurality of types of signals  (), such as described in one or more examples above.","Sensory decoder logic  may include pre-processor logic  to cause processor  to pre-process multi-modal data , such as described in one or more examples above.","Sensory decoder logic  may include gating\/classifier logic  to cause processor  to gate and\/or classify movement states from multi-modal data , such as described in one or more examples above.","Sensory decoder logic  may include intent decoder logic  to cause processor  to decode user movement intents  from each of the plurality of types of multi-modal data , such as described in one or more examples above. Sensory decoder logic  may include fusion logic  to cause processor  to fuse multiple movement intents  into a joint movement decision , such as described in one or more examples above.","Sensory decoder logic  may be configured with respect to a plurality of groups of control to generate a joint movement decision  for each group of control, and may include motion estimation logic  to output one of a plurality of movement commands  based a combination of joint movement decisions , such as described in one or more examples above.","Data  may include sensory feedback data  from a prosthetic device, which may correspond to one or more of sensory feedback  and  in .","Sensory decoder logic  may include sensory feedback logic  to cause processor  to incorporate sensory feedback , or a portion thereof, such as described in one or more examples above.","Sensory encoder logic  may include logic to cause processor  to map and encode sensory feedback  from n sensors and\/or sensor types, to m afferent pathways, such as described in one or more examples above.","Computer system  may include a communications infrastructure  to communicate amongst components of computer system , such as described in one or more examples above.","Computer system  may include an input\/output controller  to communicate with one or more other systems, such as described in one or more examples above.","Methods and systems are disclosed herein with the aid of functional building blocks illustrating the functions, features, and relationships thereof. At least some of the boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries may be defined so long as the specified functions and relationships thereof are appropriately performed.","One skilled in the art will recognize that these functional building blocks can be implemented by discrete components, application specific integrated circuits, processors executing appropriate software, and combinations thereof.","While various embodiments are disclosed herein, it should be understood that they have been presented by way of example only, and not limitation. It will be apparent to persons skilled in the relevant art that various changes in form and detail may be made therein without departing from the spirit and scope of the methods and systems disclosed herein. Thus, the breadth and scope of the claims should not be limited by any of the exemplary embodiments disclosed herein."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":[{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 18","FIG. 17","FIG. 16"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 21","FIG. 20"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 22","FIG. 20"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 23","FIG. 20"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 24","FIG. 20"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 30"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 31"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 32"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 33"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 34"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 35"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 36"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 37"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 38"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 39"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 40"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 41"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 42","FIG. 41"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 43"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 44","FIG. 43"]},{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 45","FIG. 42"]},{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 46","FIG. 44"]},{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 47","FIGS. 42 and 44"]},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 48"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 49"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 50"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 51","b":"3"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 52"},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 53"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 54"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 55"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 56"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 57"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 58"},{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 59"},{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 60","FIG. 59"]},{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 61","FIG. 60"]},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 62"}]},"DETDESC":[{},{}]}
