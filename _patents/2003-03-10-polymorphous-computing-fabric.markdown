---
title: Polymorphous computing fabric
abstract: Fabric-based computing systems and methods are disclosed. A fabric-based computing system can include a polymorphous computing fabric that can be customized on a per application basis and a host processor in communication with said polymorphous computing fabric. The polymorphous computing fabric includes a cellular architecture that can be highly parameterized to enable a customized synthesis of fabric instances for a variety of enhanced application performances thereof. A global memory concept can also be included that provides the host processor random access to all variables and instructions associated with the polymorphous computing fabric.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07873811&OS=07873811&RS=07873811
owner: The United States of America as represented by the United States Department of Energy
number: 07873811
owner_city: Washington
owner_country: US
publication_date: 20030310
---

{"@attributes":{"id":"description"},"GOVINT":[{},{}],"heading":["STATEMENT OF GOVERNMENT INTEREST","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The invention described herein may be manufactured and used by or for the United States Government for Governmental purposes without the payment of any royalties.","The present invention is generally related to data processing systems and methods thereof. The present invention is also related to cellular and collective computing techniques and systems. The present invention is additionally related to fabric-based computing architectures.","The notion of cellular computation, including the collective computation by an array of regularly interconnected nodes, has been a recurring theme in computer architecture since the early days of computer science. Ranging from cellular automata to systolic arrays, a large body of algorithms and architectures have centered on the notion of a fabric composed of simple automata interacting with immediate neighbors in an n-dimensional mesh. Fabric-based architectures are particularly attractive for efficient layout in VLSI, and specialized chips have been devised for solving specific computational problems, especially in image and array processing. Specialized ASICs, however, designed to solve specific instances of problems are not cost-effective, and relatively few of the scores of designs have actually been fabricated, with virtually none seeing widespread use.","Fabric-based architectures have been an attractive design point within the reconfigurable computing community. One of the first proposals for a fabric-based architecture using commercial FPGAs was the Programmable Active Memory from the DEC Paris Research Laboratory. Based on FPGA technology, a PAM (Programmable Active Memories) is a virtual machine controlled by a standard microprocessor, and can be dynamically configured into a large number of application-specific circuits. PAM introduced the concept of \u201cactive\u201d memory, and is generally attached to a high-speed bus of a host computer, similar to most RAM modules. Unlike RAM, however, the PAM processes data between write and read instructions.","Another important concept is that of bi-directional communication links such as the communication structure proposed by the Remarc project, a fabric-based mesh co-processor. Although the Remarc project does offer a number of advantages, this type of architecture does not permit an associated communications network to operate concurrently with cellular computation, which is important in permitting full utilization of the cell in the fabric.","Programmable data paths have also been proposed, such as linear arrays of function units composed of 16-bit adders, multipliers and registers connectable through a reconfigurable bus. In such architectures, logic blocks are generally optimized for large computations, thereby performing operations more quickly (i.e., and consuming less chip area) than a set of smaller cells connected to form the same type of architecture.","Other architectures incorporate a configurable cache to hold recently stored configurations for rapid reloading (e.g., five cycles instead of thousands of processor cycles). Such architectures, however, typically do not adequately hold instruction set-programs for the cells, thereby limiting their usefulness in highly computational applications.","One final concept is the notion of systolic flow execution, which is essentially the ability to flow data to function units from an interconnection network in addition to the traditional mode of fetching operands from memory to execute in the function units. In some architectures, a flow graph may be automatically mapped to a processing element in the array. Here, the granularity of operation plays a vital role in system performance. These type of architectures, however, rely upon a pre-defined function unit and are typically not customizable.","Based on the foregoing, the present inventors have concluded that a need exists for an improved fabric architecture based on a mesh-connected configurable network of runtime re-configurable cells. Present architectural methods and systems lack this important ability. Thus, the invention disclosed herein has been designed to overcome the problems associated with current fabric-based architectures and systems thereof.","The following summary of the invention is provided to facilitate an understanding of some of the innovative features unique to the present invention, and is not intended to be a full description. A full appreciation of the various aspects of the invention can be gained by taking the entire specification, claims, drawings, and abstract as a whole.","It is therefore one aspect of the present invention to provide for improved data-processing systems and methods.","It is another aspect of the present invention to provide for improved cellular and collective computing techniques and systems.","It is a further aspect of the present invention to provide for an improved fabric-based computing architecture.","The above and other aspects can be achieved as will now be summarized. Fabric-based computing systems and methods are described herein, which include a polymorphous computing fabric that is customizable on a per application basis. The polymorphous computing fabric disclosed by the present inventors herein is essentially a computation accelerator that is customizable to a specific application, and behaves like a processing memory in which data are not only stored but also processed. The polymorphous computing fabric, together with a host processor, can comprise a Fabric-Based System (FBS).","According to one possible embodiment of the present invention, a generic fabric can physically be composed of a mesh-connected configurable network of runtime re-configurable computation cells. Each cell in the fabric generally contains a separate local data memory and local program memory. The collections of all the local memories constitutes a linear memory that can be dual ported so that it is accessible by either the cell or the host processor in the FBS. The polymorphous computer fabric described herein can support different computing models, including, but not limited to: multiple instruction multiple data (MIMD), single program multiple data (SPMD), and systolic flow execution. The polymorphous computing fabric can also permit dynamic reconfiguration of communication patterns between cells and within cells.","The particular values and configurations discussed in these non-limiting examples can be varied and are cited merely to illustrate an embodiment of the present invention and are not intended to limit the scope of the invention.","The invention described herein generally provides a polymorphous computing fabric that is customizable on a per application basis. The polymorphous computing fabric disclosed herein is essentially a computation accelerator that can be customized to a specific application, and behaves like a processing memory in which data are not only stored but also processed. The present invention includes a flexible, modular and generic approach to the composition of specific cell architectures, thereby facilitating the rapid creation of fabric instances. The present invention is also related to the notion of aggregating each cell's local memory into a global memory accessible to a host control processor. With this approach, a specific cellular architecture well matched to a given class of algorithms can be created, while simultaneously optimizing resource usage. In addition, permitting a host processor direct access to each cell's local memory can reduce the bottleneck of communicating data and programs thereof to the cellular array. Communication with the fabric thus can occur over a bi-directional data network.","In accordance with one embodiment of the present invention, the basic fabric can include a mesh-connected configurable network of runtime re-configurable cells. Each cell within the fabric can possess a separate local data memory and local program memory. The collections of all the local memories constituting a global memory can be dual ported so that it is accessible by either the cell or the host processor in the Fabric-Based System (FBS). In addition to coordination by the host processor, each cell generally is associated with its own microcontroller. Thus, the control in the FBS is essentially distributed. Each cell is generally capable of conditional execution, allowing local events to be propagated to other cells.","This versatile computing fabric described herein can support a variety of computing and communications alternatives. Cells on the outer mesh border can broadcast to others on the border. Local nearest neighbor communications facilitates systolic computations. Because each cell has its own program memory and control unit, MIMD computing is possible. If the same program is executed by all of the cells SPMD computing can be accomplished. Moreover, systolic flow execution is possible. In this model of execution, data can flow to the function units from an interconnection network in addition to the traditional mode of fetching operands from memory to execute in the function units. For synchronization, the host processor can broadcast a start or stop signal to the fabric, and can observe any cell's status bit.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 1","FIGS. 1 to 8","FIG. 1","FIG. 1"],"b":["100","100","101","104","106","108","110","112","114","116","118","120","122","124","126","104","106","108","103","122","124","126","105","108","114","120","126","109","104","110","116","122","111","107","128","101","102"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["130","118","134","132","130","118","130","118","140","142","146","148","136","150","148","142","146","138","118","118","104","106","108","110","112","114","116","120","122","124","126"]},"The cells , , , , , , , , , ,  and  can be configured by parameters that are generally set prior to mesh generation. Such parameters include, for example, the size of the network and the size of the communication busses. The choice of a function unit, such as, for example, function unit  of , for a given class of applications is also an important cell configuration parameter, in addition to the number and size of local memories. The type of memory access (e.g. random, sequential, circular) is also an important cell design parameter, in addition to the instruction set layout and the communication direction. Other parameters can be modified during fabric execution. For example, a cell's communication pattern can be modified during application execution. The behavior of a cell can also be modified during fabric execution, in addition to the conditional reconfiguration of the cell's memory access patterns.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 2"],"b":["200","134","104","106","108","110","112","114","116","118","120","122","124","126","212","220","2"]},"As depicted in , datapaths , , , , and  can respectively communicate with interfaces , , , ,  and . A first memory bus  can communicate with a function unit, as indicated by arrow . Interfaces , ,  and  can respectively communicate with a data network, as indicated respectively by arrows , , , and . Interface  generally includes a register  which can receive data from a logic component  and the network, which in turn receives data  from datapaths , , , ,  and\/or memory bus . Similarly, interface  includes a register  which can receive data  from interface  transmitted along one or more of datapaths , , , ,  and\/or memory bus .","Data  provided by register  can be transmitted to a bus  and then sent to the function unit (e.g., function unit  of ), as illustrated by arrow . Likewise, interface  includes a register  which can receive data  from one or more of interfaces , ,  and\/or  transmitted along one or more of datapaths , , , ,  and\/or memory bus . Data  provided by register  can then be transmitted to a bus  and then to the function unit, as indicated by arrow . It can be appreciated by those skilled in the art that interfaces ,  and  can also include a similar internal structure. Additionally, in , arrows , , , and  indicate the respective transmission of data to and\/or from the condition network to and\/or from logic components , ,  and\/or . Logic components , ,  and  can respectively receive data from a register . Register  can receive data from the function unit, as indicated by arrow . Data  can also be transmitted to one or more function units from a register  as indicated by arrow .","The function unit generally performs operations on two or more operands, such as Operand A, Operand C, and\/or Operand B. In such a modular architecture, function units can be designed for application classes and can be replaced without affecting other aspects of the fabric. A variety of different function unit modules can be implemented, in accordance with the invention described herein. Two such modules are illustrated in  herein.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 3","FIG. 3","FIG. 1"],"b":["300","328","301","324","301","134","330","301","326","328","324","308","330","326","308","330","326","312","308","306","308","310","312","312","316","328","314","306"]},"Condition module  can receive conditions (i.e., conditional data) from communications module . Data from second function unit  can be further transmitted to an ACC unit  and then as indicated by arrow , transmitted to communications module . Similarly, as indicated by arrow , data can be transmitted to and\/or from communications module  to and\/or from first function unit , second function unit  and\/or condition module . Data can also be provided as feedback from ACC unit  to bus , as indicated by arrow .  additionally illustrates a logic chart  associated with condition module  and a logic chart  associated with function unit  (i.e., Function ). Within module , first function unit  can generally be optimized for a distance calculation, while second function unit  can perform one or more of seven possible logical operations, as indicated by logic chart .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 4","FIG. 4","FIG. 1","FIG. 1"],"b":["400","400","404","424","424","404","406","400","402","402","401","401","134","301","401","412","410","412"]},"The data can also be transmitted by communications module  as a second input  (i.e., Input B\/Operand B) to bus . Data from bus  can be provided to a bus  along with data from a buffer , which receives output data from first function unit . Data from bus  can also be communicated to a bus , which also receives data from an ACC unit . Data from bus  and bus  are then provided to a second function unit , which is then communicated, along with output data from buffer , as combined data , which is transmitted to communications module . Output from second function unit  can also be provided as feedback to ACC unit , as specifically indicated by arrow .","In module , first function unit  can generally perform a multiply function, while second function unit  can perform one of 5 possible logical operations, as indicated by logic chart . Module  can be optimized for DSP intensive processing. Module  generally includes three inputs. The source of two inputs (i.e., Inputs A and B) can be determined by an Access Control Module (not shown in ). The third source is simply local memory (e.g., memory ). Local memories can be accessed using random, sequential, or circular modes. The circular access mode is particularly well suited for delay line implementation, sliding window, and\/or repetitive coefficients access.","A microcontroller (e.g., controller  of ) can execute instructions from the Program Memory. The instruction set generally includes nine generic instructions where the instruction field meaning depends upon a specific cell configurations. The first instruction can be implemented as a configure instruction. This instruction configures the Function 1 unit (e.g., first function units \/) and a condition unit. It selects communications busses, direction of communication, access mode (i.e., random, sequential, or circular) to local memories, and whether the function unit will operate in 8-bit, 16-bit or 32-bit modes.","The second instruction can be implemented as a control instruction. This instruction directs whether or not the function unit performs an accumulate function, and whether or not to perform a memory read or write access. Additionally, the control instruction can control which 8 bits of a 16 bit operand are to be accessed and can enable I\/O (Input\/Output) to and\/or from pipelined communication busses according to the communication pattern established by the configure instruction. The \u201cwait count\u201d field of the control instruction serves a variety of functions. For example, it can be utilized for looping operations. If a loop count field is non-zero, the instruction can repeat the operations (e.g., an accumulation function) for the specified number of cycles. It can also be used for time synchronization, so that the cells wait for a specified number of cycles before continuing with the next instruction.","The third instruction can be implemented as a jump instruction. This is the unconditional branch instruction to a 7-bit address. The fourth instruction is a conditional jump instruction, in which a jump is executed if a condition register is zero. The fifth instruction is a start loop instruction, which marks the beginning of a loop body. A 7-bit loop count can be included in this instruction.","The sixth instruction can be implemented as an end loop instruction, which marks the end of the loop body. If the loop count has reached zero, a branch can be executed to the address supplied within the instruction. The combination of control with start\/end loop instructions provide for two levels of nested loop operations. The end loop instruction can also reset memory address counters and enable or disable memory and accumulator operations. This in turn can reduce the number of instructions necessary for a loop body implementation, in many cases by two cycles.","The seventh instruction can be implemented as a stop-then-wait-for-start instruction. The purpose of this instruction is to stop cell execution, setting the internal status bit to 1, and waiting for the next start signal to arrive from the host processor. When the start signal is received, a branch can be executed to a 7-bit address supplied within the instruction, and the status bit then changes to 0.","The eighth instruction can be implemented as a reset instruction, which can selectively reset the specified function unit internal registers and then wait for a specified number of cycles. As with the control instruction, the rest can be utilized for both looping as well as synchronization. The ninth and final instruction can be implemented as a load instruction, which generally initializes the memory address counter and limits registers for circular address generation thereof. A combination of configure and load instructions can be utilized for RAM (Random Access Memory).","The aforementioned instructions generally expose the microarchitecture of a fabric cell, and can provide the programmer with control over all the communication busses, memory and function units. This architecture can also be utilized to communicate independently of computation. Thus, for example, a cell can compute utilizing local memory while simultaneously forwarding data through the interconnection network. The data distribution pattern can be dynamically reconfigured without affecting the state of computation. In addition, such an architecture can provide an optimized loop control mechanism for up to two nested loops. If a higher level of loop nest is desired, the host processor must coordinate the outer loops using the fabric start\/stop mechanism.","Hybrid Configurable System on a Chip (CSOC) architectures have been proposed over the last several years. Recently, such devices have begun to appear as commercial offerings. In contrast to traditional FPGAs, these integrated systems offer a processor and an array of configurable logic cells on a single chip. The present invention can be implemented, for example, on an Altera Excalibur\u2122 ARM hybrid system. This chip contains, for example, an industry-standard ARM922T 32-bit RISC processor core operating at up to 200 MHz (equivalent to 210 Dhrystone MIPS). A Memory Management Unit (MMU) can be included for real-time operating system support. Such an architecture can build upon features of the APEX\u2122 20KE PLD, with up to 1M gates. Excalibur\u2122 ARM offers two methods of communication between ARM processor and user logic: the first, using a slave\/master bridge connected to a second level internal bus AHB2 (advanced High-Performance Bus) and the second, utilizing a dual port memory connected directly to the AHB2. It can be appreciated by those skilled in the art that such components and devices are not considered limiting features of the present invention. Instead, such components and devices represent merely one set of possible components and devices that can be utilized to implement an embodiment of the present invention. Various other devices and components not discussed herein can be utilized to implement other embodiments of the present invention, preferred or otherwise.","Thus,  depicts a block diagram of a communication system  that can be implemented between a fabric and an ARM processor, in accordance with a preferred embodiment of the present invention. As indicated in , a fabric  can be connected to a dual port memory  (on one side) via a DMA\/controller unit  and accessible by an ARM processor (from the other side) instead of directly to a slave bus. Dual port memory  can communicate with a bus  (i.e., an AHB2 bus) and with DMA\/controller unit . DMA\/controller unit  can also communicate with a slave controller , which in turn can communicate with a master\/slave bridge  that also can communicate with bus . Such a configuration is desirable because an AHB Master Port is about 10 times slower than a dual port memory for communication.","The example configuration illustrated in  generally utilizes 16-bit data paths for communication between the ARM and a two-dimensional mesh of 52 processor (i.e., fabric ). Fabric\/host communication is generally handled by a controller (i.e., DMA\/controller unit ) that manages both direct memory access to a 32 K 160 bit dual port RAM (i.e., dual port memory ) and to a 32-bit bridge (i.e., master\/slave bridge ) to the AHB2 bus (i.e., bus ) of the ARM. Through the master\/slave bridge , the host can command the DMA\/controller unit  to send the program to given cells of fabric  and also send data to given cells of fabric . Additionally, the host can command the DMA\/controller unit  to receive data from fabric , send reset data, a start strobe and read a stop signal via the master\/slave bridge .","Fabric  generally utilizes 8-bit data paths for communication with 8-bit registers, with instruction set support for 16-bit function unit operations. With manual placement (i.e., placement directives can be generated by script), 52 cells can be instantiated (e.g., 13 rows\u00d74 columns) on a device such as, but not limited to, an Excalibur\u2122 ARM EPXA 10F1020C2. Note that the clock frequency for both function unit modules  and  (i.e. systems  and ) is generally 33 MHz, which provides a peak performance of approximately 10.2 GigaOps\/s and 1.8 GMAC\/s, respectively.","A number of tools can be utilized to simplify program development and initialization of the fabric. A single assembler, for example, can be utilized to support all of the fabric instances, because the instruction set generally includes nine generic instructions with fabric-instance-dependent fields.","A Procedure Access Generator (PAG) can be utilized by the subroutines to communicate data and programs between the ARM processor and the fabric. Sending the programs and the data from an ARM host processor to a particular cell through a dual port memory is a complicated task. The processor must test the state of the access controller to be sure that the previously executed command is finished. The processor also must compose an appropriate command word to send the data or program to a given cell in the fabric. To simplify this task, the PAG can generate a specific access procedure from the assembler source file that permits the processor to send the program or data to a given set of cells declared in the source file.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 6","FIG. 6"],"b":["600","602","606","608","610","603","607","1","606","2","608","1","3","610","614","606","608","612","604","610"]},"Many applications can be successfully implemented on two fabric instances. However, each application possesses different properties and requires different fabric parameters. A K-means clustering algorithm application, for example, requires a large granularity function unit (with a one cycle execution of the absolute value of the different and an accumulation), and a data dependent dynamic configuration of the communication pattern for index processing.  depicts one possible implementation thereof.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 7","b":["700","720","703","707","710","702","706","708","702","724","726","724","703","720","706","728","736","730","732","734","736"]},"Cell  can be further divided in a first configuration and a second configuration. Cell  includes a memory unit , a logical component  (i.e. absolute value of A-B), a register , an adder  and an ACC unit . Cell  includes a memory unit  (i.e., Class NM_CLASS) and a register . Cell  is further divided into a first configuration and a second configuration. Cell  includes a memory unit , a logical component  (i.e., absolute value of A-B), a register , an adder , and an ACC unit . Data from memory unit  of cell  can be input to logical component  along with data from memory unit . Data from logical component  can then be fed as input to register . Similarly, data from memory unit  can be input to logical component  of cell  along with data from memory unit .","Memory unit  and  generally function as a memory of a class's center. Data output from adder  of cell  can be input to register  of cell . Data from adder  can also be supplied as feedback to ACC unit , which can then be fed as input to adder  along data from register . Data output from register  and memory unit  of cell  can be input to register  of cell . Data output from register  can then be fed supplied to logical component  or taken as data , which is then supplied to register . Data  also includes data retrieved from memory unit .","The cells depicted in  can be arranged in a two-stage pipeline mode. Once the distances are calculated, they can be stored in appropriate registers of cells , , and . At this moment, cells , , and  can initiate the index calculation. This index calculation starts from cell . It is generally necessary to implement a run time conditional reconfiguration mode for the implementation of this processing because the index calculation cell should send the minimum distance index to its north neighbor. The index comes either from the south direction or from its local memory. Note that the appropriate directions are shown in directional box . In general, the fabric-based implementation of a K-means algorithm is nearly as fast as a direct hardware implementation. It requires only two additional cycles for a distance calculation. The area overhead is generally 5\u00d7 before optimization and 1.4\u00d7 after unused modules are manually removed.","Also illustrated in  is a high-level flow chart , which depicts general logical operational steps for implementing a K-means clustering algorithm application in accordance with a preferred embodiment of the present invention. As depicted at block , pixels can be randomly assigned to NU_CLASS classes.","Thereafter, as illustrated at block , the centers of the classes can be computed. Next, as depicted at block , a loop subroutine can be implemented. Initially, a \u201cLoop (N)\u201d command for each pixel is initiated. As illustrated at block , the variable C can be set equal to the class of the pixel. Next, as depicted at block , the class number K can be determined, which possesses the minimum distance to C (i.e., the class of the pixel). Thereafter, as illustrated at block , if C is not equal to K, the pixel C is moved to class K. Following processing of the loop operation illustrated at block , the center of the classes K and C can be re-computed, as depicted at block .",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 8","b":["800","802","802","801","803","805","807","801","808","803","810","805","822"]},"Data from memory unit  can be transferred to a multiplier , when in turn can be transferred to a register . Cell  also includes an adder , an ACC unit , and a memory unit  that functions as a results memory. Cell  includes a memory unit  that functions as a coefficients memory. Data from memory unit  can be transferred to a multiplier , along with data from memory unit  and\/or memory unit . Cell  further includes a register , and an adder . Cell  also includes a memory unit  that functions as a results memory and an ACC unit .","For the configuration of system , approximately fifty-two parallel filters can be implemented, depending upon a desired implementation and\/or design parameters. Two cells out of fifty-two can be utilized for storage of the data samples and to implement the delay line of all the filters. This delay line can be implemented by utilizing local memory with circular access. Each cell implements an FIR filter, executes all of the processing, takes the coefficients from one of the local memories accessed in a circular manner, and stores the results to another memory utilizing sequential access. The implementation of system  can store up to 256 samples and results and can realize  filter taps.","System  can implement an N-tap FIR filter application, which requires a smaller granularity three input function (with a one cycle execution of the multiplication and summation), and a systolic flow execution mode. A transposed version of an FIR filter can implemented in accordance with system . A delay line thereof can be implemented by systolic communication inside of the fabric. System  includes cells , , , , and . Cell  is associated with a memory unit  that functions as a samples memory. A cell  is associated with a memory unit , a multiplier , and a register . Data from memory unit  and\/or memory unit  can be transferred to multiplier  and then to register . Thereafter, data from register  can be transferred to cell . A cell  includes a memory unit , a multiplier , a register , a register , and an adder .","Data from memory unit  and\/or memory unit  can be transferred to multiplier  and then to register . Thereafter, data output from register  can be transferred to adder , along with data from register , which receives as input, data transferred as output from register  of cell . A cell  includes a memory unit , a multiplier , a register , a register , and an adder . Data from memory unit  of cell  can be transferred to multiplier , along with data from memory unit . Thereafter, data output from multiplier  can be transferred to register  and then to adder , along with data output from register . Cell  is associated with a memory unit  that functions as a results memory. Data output from adder  of cell  can thus be transferred to and stored within memory .","System  can implement a vector by matrix calculation application, which can be utilized in many typical DSP applications. System  requires a large granularity function, systolic communication mode and direct process access to a local memory. Only one cell is generally utilized to distribute the vector inside of the fabric. The other cells multiply the vector by each specific column. The same local memory can be utilized to read and store the results utilizing sequential and RAM modes. System  thus includes cells ,  and . Cell  can also be associated with a memory unit , while cell  can include a memory unit , a multiplier , a register , an adder , and an ACC unit . Cell  generally includes a memory unit , a multiplier , a register , an adder , and an ACC unit .","The present invention thus discloses a computing fabric that includes a parameterized cellular array connected to a host processor. The parameterized nature of such an array permits generation of the fabric for specific classes of applications. The cellular architecture of the fabric described herein is highly parameterized and can enable customized synthesis of fabric instances to achieve enhanced performance for different classes of applications. This approach is made possible by the modular architecture of the fabric described herein. Another unique feature of the fabric disclosed herein is the use of global memory. This type of memory provides the host process random access to all variables and instructions on the fabric's cells. The memory can be initialized in the same manner as a standard memory in a computer or other data processing system. Programs and data can be dynamically loaded during processing on the fabric because the global memory is dual ported. This reduces overhead for preparing the data and programs. The fabric can reconfigure itself during processing by utilizing data generated during fabric execution.","A number of advantages can be provided by the present invention described herein. For example, the performance of the system can be optimized in terms of speed and area because the specific instantiation of the fabric matches closely the given class of the applications. Development time can also be shortened because the architecture is parameterized and does not require verification. Additionally, the communication bottleneck of initialization, configuration, and dynamic reconfiguration of the fabric is reduced by the fact that the data and program memories are directly accessible by the host processor in the FBOS. Finally, data access time during executing can be reduced due to parallel memory access by all of the cells in the fabric and because the communications network runs concurrently. Potential commercial applications of the present invention include, but are not limited to, DSP applications and image processing.","The embodiments and examples set forth herein are presented to best explain the present invention and its practical application and to thereby enable those skilled in the art to make and utilize the invention. Those skilled in the art, however, will recognize that the foregoing description and examples have been presented for the purpose of illustration and example only. Other variations and modifications of the present invention will be apparent to those of skill in the art, and it is the intent of the appended claims that such variations and modifications be covered. The description as set forth is not intended to be exhaustive or to limit the scope of the invention. Many modifications and variations are possible in light of the above teaching without departing from the spirit and scope of the following claims. It is contemplated that the use of the present invention can involve components having different characteristics. It is intended that the scope of the present invention be defined by the claims appended hereto, giving full cognizance to equivalents in all respects."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying figures, in which like reference numerals refer to identical or functionally-similar elements throughout the separate views and which are incorporated in and form part of the specification, further illustrate the present invention and, together with the detailed description of the invention, serve to explain the principles of the present invention.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
