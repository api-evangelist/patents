---
title: Blocking replication of e-mail worms
abstract: Computer-implemented methods, apparati, and computer-readable media for blocking the replication of computer worms in a computer. A method of the present invention comprises the steps of: for an e-mail program installed on the computer, finding the location of a temporary holding area used by the e-mail program for storing and opening e-mail attachments; monitoring the temporary holding area for openings of target programs stored within the temporary holding area; and upon the opening of a target program for execution, implementing a worm mitigation procedure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07631353&OS=07631353&RS=07631353
owner: Symantec Corporation
number: 07631353
owner_city: Mountain View
owner_country: US
publication_date: 20021217
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND ART","DISCLOSURE OF INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This invention pertains to the field of detecting and blocking the replication of computer worms that spread via electronic mail (e-mail).","Virus, worms, and Trojan horses are types of malicious computer code. As used herein, \u201cmalicious computer code\u201d is any code that enters a computer without an authorized user's knowledge and\/or without an authorized user's consent. A worm is a type of malicious computer code that is self-replicating. A worm spreads over a network from one computer to another, usually via e-mail attachments. The operating system (OS) on the e-mail recipient's computer puts the attachment into a temporary holding area such as a temporary folder. In recent Windows operating systems, the temporary folder is a hidden folder. When the recipient clicks on the attachment or the attachment automatically executes via a vulnerability, the executable worm inside the temporary holding area opens and creates another e-mail with an attachment, i.e., the worm.","One technique for blocking the replication of worms that spread via e-mail is disclosed in commonly owned U.S. patent application Ser. No. 10\/255,658 filed Sept. 25, 2002.","Computer-implemented methods, apparati, and computer-readable media for blocking the replication of computer worms in a computer (). A method of the present invention comprises the steps of: for an e-mail program () installed on the computer (), finding () the location of a temporary holding area () used by the e-mail program () for storing and opening e-mail attachments; monitoring () the temporary holding area () for openings of target programs () stored within the temporary holding area (); and upon the opening of a target program () for execution, implementing () a worm mitigation procedure.","Turning to , a human user of computer  wishes to block computer worms from spreading from said computer . There can be any integral number N of e-mail programs  installed on computer . The way that a typical e-mail program  works is that attachments to incoming e-mails are placed by program  into a temporary holding area  associated with that program . Each program  has its own temporary holding area  associated therewith. Thus,  illustrates N temporary holding areas . The present invention pertains to the scenario in which an e-mail attachment residing within a temporary holding area  is an executable program . Such a program is referred to in the present patent application as a \u201ctarget program\u201d . There can be zero or a positive integral number of target programs  within a temporary holding area .  illustrates the case where there is one target program  within each temporary holding area .","A file system filter driver module  is coupled to each temporary holding area , and monitors when a target program  is opened. File system filter driver  has the capability of determining whether target program  is opening as an executable or is opening as data. A worm mitigation module  is coupled to file system filter driver , to each e-mail program , and to port , a conventional port found on many computers . A plurality of other programs  may reside on computer  and may be coupled to target programs , e.g., for purposes of opening target programs . A user interface , such as a video monitor, is coupled to worm mitigation module .","File system filter driver  and worm mitigation module  can be implemented in hardware, firmware, and\/or software; and are normally implemented in software.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2","b":["21","5","1","10","10","1","25","25","25"]},"In step , worm mitigation module  finds the temporary holding area  associated with each e-mail program . This can be done, for example, by sending a test e-mail to computer  and seeing where program  places the attachment; or by obtaining information from the vendor of the e-mail program .","At step , file system filter driver  monitors the opening of target programs  residing within temporary holding areas . As stated above, driver  has the capability to distinguish between openings of programs  for execution and openings of programs  as data. At step , when driver  detects the opening of a target program  for execution, worm mitigation module  is immediately instructed to implement a worm mitigation procedure.","Four embodiments of worm mitigation procedure  will be described herein.","In a first embodiment of worm mitigation procedure , target program  is prevented from opening itself as data. Driver  has the ability to detect such an event on a real time basis. When the event begins to occur, module  simultaneously aborts the opening. The theory behind this procedure is that an e-mail attachment opening itself as data is a strong indication that the attachment is a worm attempting to replicate itself.","With reference to , module  may optionally alert  the user of computer , via user interface , upon the occurrence of the target program  attempting to open itself as data. This alerts the user to the possibility of a worm.","At step , a false positive mitigation procedure is executed in order to minimize the risk of a false positive declaration of a worm. For example, program  could be opening itself as data simply to unpack or unzip a set of files. False positive mitigation procedure  can be performed by module . When module  finds (deems) that a false positive has occurred, module  allows the target program  to open itself as data. The finding of a false positive is based upon the occurrence of at least one criterion from a set of preselected false positive criteria. For this first embodiment of worm mitigation procedure , said false positive criteria can include, for example, the following:","False positive criterion number . The target program  is a self-extractor, such as an unzip program or an unpack program.","False positive criterion number . The target program  has a valid digital signature affixed thereto. For example, it may be preselected that such a digital signature must be a class  digital signature in the Authenticode system promulgated by Microsoft Corporation. In order for this criterion to be satisfied, module  must verify the validity of the digital signature, e.g., by checking the authenticity of the public key used by the trusted third party such as VeriSign that has affixed the digital signature.","False positive criterion number . The target program  must pass at least one additional test that was preselected when the worm mitigation procedure  was designed, to confirm the presence of a worm. Such a test may be, for example, subjecting target program  to antivirus scanning software, subjecting target program  to behavior blocking software, or sending target program  in an encrypted form to the headquarters of an antivirus software company such as Symantec Corporation for further analysis.","Finally, in step , worm mitigation module  processes target program  upon the occurrence of target program  attempting to open itself as data. As used herein, \u201cprocesses\u201d can mean: 1) module  deletes program  from computer ; 2) module  aborts or blocks the method being performed by program ; 3) module  blocks the method being performed by program  and quarantines program ; 4) module  attempts a heuristic repair of program , and if successful, allows the method being performed by program  to proceed; or 5) module , upon receipt of appropriate instructions from the user of computer  via user interface , allows the method being performed by program  to proceed.","In the second embodiment of worm mitigation procedure , module  prevents any program  anywhere on computer  from opening target program  as data. This embodiment is an extension of the first embodiment of worm mitigation procedure  described above. The theory behind this embodiment is that a worm  may ask another program  to open it, in an attempt to disguise its true malicious character.","In this second embodiment, optional step  entails alerting the user when any program  attempts to open the target program  as data.","In this second embodiment, target program  is allowed to be opened as data by said other program  when the false positive mitigation procedure  deems said opening to be a false positive. Again, such a determination is made by module  based upon a preselected set of false positive criteria, such as those described above in conjunction with the first embodiment of worm mitigation procedure .","In this second embodiment, the step of processing  the target program  is done when said other program  attempts to open target program  as data. \u201cProcessing\u201d can entail any one of the five options detailed above.","In the third embodiment of worm mitigation procedure , module  prevents target program  from accessing port . The theory behind this embodiment is that an e-mail being sent to the Internet out of a temporary holding area  raises a high degree of suspicion that a worm is present.","In one embodiment, nothing is allowed to pass through port . In an alternative embodiment, an e-mail is allowed to pass through port  but an e-mail attachment is not allowed to pass through port , because it is more likely that the malicious code will be in the e-mail attachment than in the e-mail body. This alternative embodiment is in essence a false positive mitigation technique, because an e-mail setup program could be sending registration information over the Internet, e.g., via a MAPI (Mail Application Programming Interface).","In this third embodiment, step  entails alerting the user that a target program  is attempting to access port . This warns the user that a worm may be present.","In this third embodiment, the execution of the false positive mitigation procedure  results in the target program  being allowed to access port  when said accessing is deemed by module  to be a false positive, based upon a set of preselected criteria. In this case, the false positive criteria may consist of false positive criteria  and  as described above.","In this third embodiment, target program  is processed at step  when target program  attempts to access port . Again, step  can entail any one of the five options detailed above.","In the fourth embodiment of worm mitigation procedure , module  blocks all e-mail programs  on computer  from opening any executable program  anywhere on computer  as data during the time period that target program  is executing out of temporary holding area . The theory behind this fourth embodiment is that one of these other programs  could be acting as a proxy for the worm , i.e., the worm has disguised itself by placing itself in some area other than temporary holding area . Out of the four embodiments described herein, this fourth embodiment probably has the highest risk of a false positive.","In this fourth embodiment, step  entails alerting the user when target program  opens for execution out of the temporary holding area . Again, this warns the user of the possibility of a worm being present within computer .","In this fourth embodiment, executing false positive mitigation procedure  results in module  allowing e-mail programs  on computer  to open other executable programs  as data during the time period that target program  is executing out of temporary holding area , when module  deems that said opening is a false positive, based upon preselected criteria.","In this embodiment, said false positive criteria may be criteria  and  as described above.","In this fourth embodiment, optional step  entails processing target program  when target program  opens for execution out of temporary holding area . As before, step  can entail any one of the five options detailed above.","The above description is included to illustrate the operation of the preferred embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion, many variations will be apparent to one skilled in the art that would yet be encompassed by the spirit and scope of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other more detailed and specific objects and features of the present invention are more fully disclosed in the following specification, reference being had to the accompanying drawings, in which:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
