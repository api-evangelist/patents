---
title: Malware protection using file input/output virtualization
abstract: Applications running in an API-proxy-based emulator are prevented from infecting a PC's hard disk when executing file I/O commands. Such commands are redirected to an I/O redirection engine instead of going directly to the PC's normal operating system where it can potentially harm files in on the hard disk. The redirection engine executes the file I/O command using a private storage area in the hard disk that is not accessible by the PC's normal operating system. If a file that is the subject of a file I/O command from an emulated application is not in the private storage area, a copy is made from the original that is presumed to exist in the public storage area. This copy is then acted on by the command and is stored in the private storage area, which can be described as a controlled, quarantined storage space on the hard disk. In this manner the PC's (or any computing device's) hard disk is defended from potential malware that may originate from applications running in emulated environments.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08510838&OS=08510838&RS=08510838
owner: Trend Micro, Inc.
number: 08510838
owner_city: Tokyo
owner_country: JP
publication_date: 20090408
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Redirection of File I\/O Commands in an Emulator Environment","File I\/O Virtualization"],"p":["The present invention is related to U.S. patent application Ser. No. 12\/420,525, titled MALWARE PROTECTION USING FILE INPUT\/OUTPUT VIRTUALIZATION, filed on the same day, which is hereby incorporated by reference in its entirety.","1. Field of the Invention","The present invention relates generally to defending computer systems from malicious attacks. More specifically, the present invention relates to preventing unauthorized or unverified applications from infecting computing devices with malware.","2. Description of the Related Art","Current approaches to preventing malware from infecting a computing device may involve examining the operating behavior of the device. One way of tracking the behavior of a computer is utilizing a so-called \u201capplication emulator\u201d program. Application emulator programs are used to measure and observe how a computer or any type of computing device operates or behaves when executing an application and detects potential malware through these measurements and observations. These emulator programs (\u201cemulators\u201d) enable emulation of an operating environment, creating a so-called \u201csandbox\u201d area in which certain application programs can execute. By operating or executing in this sandbox, the applications are prevented from harming components of the computer\u2014such as mass storage components and processors\u2014or from corrupting data on the computer, in the event that the applications are malicious, unpredictable, or harmful in any manner.","One specific type of emulator that is often used for tracking behavior for malware detection is an API-proxy-based application emulator. This kind of emulator allows application programs that are operating in the sandbox to have full access to the computer's persistent storage component, such as a hard disk. For example, the emulator intercepts system calls made by an application and re-directs certain ones, such as API (application programming interface) requests, to modules in the operating system. As noted, the emulator can monitor the behavior of an application by virtue of the application running in the emulated environment (the application is also said to be running on a \u201cvirtual CPU\u201d). All or most system calls go through an API-adaptor in the emulator, which enables monitoring of API call sequences to the operating system.","However, as a consequence, the hard disk or other primary persistent storage component becomes vulnerable when the API-adaptor redirects API calls to the operating system. For example, file input\/output (I\/O) operations are able to go directly to the hard disk. By allowing file I\/O commands coming from a potentially harmful application executing in an emulator environment to access the hard disk, data stored on the disk is in danger of being corrupted or infected. This type of damage is sometimes referred to as out-of-box damage (the \u201cbox\u201d referring to the sandbox discussed above).","Another way data in a hard disk may be infected or corrupted arises from the disabling or unavailability of so-called anti-virus \u201cin-the-cloud\u201d services normally utilized by the computer. As a software distribution model in which security services are hosted by vendors and made available to customers over the Internet, such services have been advocated as a next generation model for virus detection.","This approach to defending computers against malware employs a set of \u201ccloud\u201d (i.e., Internet) servers which analyze and correlate new attacks and generate vaccinations online. With this infrastructure, in-the-cloud services can sharply reduce the computing burden on client computers, and can make security products more effective in stopping new malware. Furthermore, customers do not need to install a full copy of the virus signature file, and need only keep a small set of \u201ccloud signatures\u201d and, in some cases, an in-the-cloud scan engine software module or agent. The benefits include easy deployment, lost cost of operation, and fast signature updating.","However, an anti-virus \u201cin-the-cloud\u201d service may become ineffective or disabled under certain circumstances. For example, a network connection may be lost if there are denial-of-service attacks on the \u201ccloud\u201d servers. In another scenario, the client computer may go offline, in which case the in-the-cloud service becomes inaccessible. When the in-the-cloud service is not available, the client computer currently has few options for protecting itself against malware. And when not protected, the hard disk is at risk of being corrupted. One option is using quarantine technology to prevent the computer user from accessing any potentially dangerous files or applications, for example, applications that are downloaded or copied from unauthorized sources, such as portable devices (e.g., digital cameras, cell phones, media players).","However, quarantine technology is generally not a practical solution because often a user is blocked from accessing many safe and conventional applications stored on the hard disk, including those that the user accesses frequently during normal use. Many such applications may be quarantined on the hard disk and, thus, inaccessible to the user. This approach may significantly hamper use of the computer and frustrate the user. A blanket quarantine approach which places any and all files or applications from unknown or unauthorized sources is likely to have many \u201cfalse-positives.\u201d That is, many applications that are safe and are used by the user regularly may be quarantined and inaccessible.","Thus, it would be desirable to implement an emulator that cannot corrupt a hard disk. It would be further desirable to have an effective anti-virus capability for a computer when the computer is temporarily unable to access in-the-cloud anti-virus services and that at the same time will not significantly hamper normal use of the computer.","Various different types of emulator programs are used in computing devices for wide range of reasons. One type of emulator is the so-called API-proxy-based application (behavior) emulator which runs, often on a PC, to examine the behavior of an application in an environment where execution of the application generally cannot do harm to the PC. That is, if the application is infected with malware and executes in the API emulator, it will generally not affect other parts of the PC. One problem, however, is that file I\/O commands that are issued by the \u201cemulated application\u201d may still access and manipulate files that are stored on the PC's hard disk, potentially infecting those files and corrupting the hard disk. In various embodiments of the present invention, file I\/O commands coming from emulated applications (or from the emulator) are re-directed to an I\/O redirection engine instead of to the PC's normal operating system. The redirection engine accepts file I\/O commands from emulated applications and ensures that those commands only affect files that are stored in a private storage area on the hard disk that may be described as a quarantine storage area. This allows for successfully isolating the file I\/O commands of the emulated application from potentially causing infection of the public storage area of the hard disk where the vast majority of files and data of the PC are stored.","The file I\/O commands from the emulated application are examined in the redirection engine to determine which files are subject to the command. If a file is already in the private, controlled storage area on the hard disk, the command is executed using the quarantined copy of the file (the original of the file is in the public storage area). If a file is not already in the private storage area, it is copied from the public storage area and the file copy is used for executing the file I\/O command and then stored in the private storage area. In this manner, file I\/O commands from emulated applications cannot inadvertently corrupt or damage files in the PC's hard disk and can only manipulate files and data in a controlled separate area not accessible by the normal operating system of the PC.","As discussed above, a computer can be infected by having applications containing or enabling malware execute and access a persistent storage component on the computer. File input\/output (I\/O) commands issuing from applications executing in a sandbox environment or that are downloaded from unknown sources, such as portable devices, can directly access a computer's hard disk. In this manner, all forms of data on the disk may be infected or corrupted, causing damage to the hard disk itself or to other hardware and software components of the computer.","In a first embodiment, as discussed above, an emulator, such as an API-proxy-based application emulator, creates a sandbox environment in which an application can run without causing harm to a computer. A sandbox may be described as an operating environment that is separate from the computer's normal or conventional operating system. However, certain system calls, specifically, file I\/O commands from the application can directly access the computer's persistent storage area. In one embodiment, an I\/O redirection engine analyzes the file I\/O commands and uses a quarantined or private storage area in the persistent storage area exclusively for suspicious or unverifiable applications (the term \u201capplications\u201d is used herein to refer to include software applications, computer programs, and executable computer instructions contained in files). The embodiments discussed below are illustrated using a client or personal computer (PC), as an example of a computing device. The various embodiments described below apply to any type of computing device having a persistent storage area, such as cell phones, media players, and other \u201csmart\u201d handset computing or communication devices. The PC implementing the I\/O redirection engine and private storage area may be a stand-alone computing device or a component in a network. The term \u201chard disk\u201d is used herein to refer to a primary persistent storage area (internal or external), typically a mass storage area, although, as is known in the art, a persistent storage area may be implemented using other types of hardware, such as persistent memory and USB drives, depending on the device.","In the various embodiments, a hard disk has a public area and, as noted, a private area. The public area, having a first range of addresses, is the conventional or normally accessible section of the hard disk used by routine applications, operating system modules and functions, and various components of the PC during its normal course of operation. The private storage area of the hard disk, assigned a second range of addresses, is used to store only certain files selected in the I\/O redirection engine using processes discussed below. The private storage area is an area of persistent storage that is sequestered or, as noted, quarantined from the rest of the hard disk. It is used only by applications running in the emulator environment; applications that are running in the PC's normal operating environment do not access it. It is intended for executing file I\/O commands from applications running in the emulator environment (created by the API-proxy-based emulator program). In other embodiments, the private storage area is also referred to as a virtual storage space. The term \u201cvirtual\u201d is used because the emulator environment or sandbox may also be characterized as a virtual operating system environment, depending on the context. This concept also extends to describing the CPU; there is, of course, an actual CPU in the PC and a virtual CPU in the emulator. In this manner, if a file I\/O command from an emulated application requires directly accessing the hard disk, the command is re-directed to the private storage. When reference is made simply to the \u201chard disk,\u201d it can be assumed herein that the public area of the hard disk, as described above, is being referenced.","An application program is basically a series of computer instructions that are executed by a processor in a PC. If there is an emulator executing on the PC, certain software applications may run in the emulator (i.e., virtual) environment created by the emulator. These applications execute using a virtual CPU created by the emulator that is used to interpret instructions of the emulated applications. An emulator may also be described as a platform that enables execution of an emulated application on the virtual CPU.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 1","FIG. 3"],"b":["102","104","103","104","102","104","102","106","104","106","102","106","104","108","109","111","108","102","108","110","108","104","110","112","114","114","116","110","110"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 1"],"b":["202","102"]},"At step  the API adaptor layer of the emulator transmits file I\/O commands received from the emulated application to the operating system (O\/S). These file I\/O commands come from the emulated application as it executes in the emulator environment. File I\/O commands may include operations to write to or read from a file, delete a file, or create a new file in the hard disk, as well as other commands such as file registry I\/O commands. The O\/S receives file I\/O commands (as well as other types of commands) from all applications executing on the PC, not only from applications executing in the emulator. At step  the O\/S transmits the file I\/O commands to the redirection engine. The redirection engine may register itself with the operating system when the engine initially starts up or executes. The registration with the operating system may be needed to specifically receive file I\/O commands (as well as registry I\/O commands, if needed). At step  the redirection engine receives file I\/O commands from the O\/S. This is done using a command receiving module in the redirection engine. At step  the redirection engine analyzes each file I\/O command. This analysis effectively functions as a filter for the PC's persistent storage accessing subsystem and is described in . It is worth noting that the analysis at step  is of the file I\/O command itself and not of the file that is the subject of the command (i.e., the file on which the command is operating on or creating). This analysis is done using a command analysis module in the redirection engine.","At step  one of the two storage types is utilized to carry out the file I\/O command as described in . As discussed earlier, the storage may be a public storage area or a private storage area, used only by the emulator. The type of storage is determined in the analysis performed at step . Once the file I\/O command has been executed using the appropriate storage type, the process of redirecting file I\/O commands from emulated applications to the hard disk is complete.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3","b":["302","304","306","308"]},"At step  the redirection engine determines whether the file I\/O command operates on a file that has previously been written to or operated on by the emulated application or by any other emulated application. In one embodiment, this is done by examining a file update log containing a list of files which have been modified by any previous emulated application. The file update log, as shown in , is created by and maintained by the redirection engine and may be stored in a local memory or on the hard disk. In other embodiments, there may be more than one file update log. For example, there may be one for each emulated application. If the file (i.e., the subject of the file I\/O command) has not been previously accessed by an emulated application, control goes to step . At step  the redirection engine determines whether the file I\/O command involves requires writing to, modifying, or deleting the subject file. This may be done by parsing the command using techniques known in the art. If it does not, control goes to step  where the file I\/O command is executed in a conventional manner using the hard disk. If the file I\/O command involves writing to, modifying or deleting the file, control goes to step  where the redirection engine retrieves the file from the public storage area in the hard disk and makes a copy of the file. The redirection engine stores this copy in the private storage area of the hard disk. Control then moves to step .","Referring back to step , if the file was previously modified by an emulated application, control goes to step  where the file I\/O operation is performed on the copy of the file stored in the private storage area. As noted, determining whether it was previously modified is done by examining the file update log. It is during execution of the file I\/O operation when potential harm to the PC, such as corruption of the hard disk, injection of malware, and the like, may occur. Modification of the file via a file I\/O command from an unverified or untrustworthy application may, for example, introduce a virus into the PC or cause some other malware-related harm. By limiting updates (e.g., write operations) to a copy of the file stored in the private storage area, the redirection engine is safeguarding the hard disk and the rest of the PC from potential corruption and malware.","At step  the redirection engine updates the file update log if needed to include the name of the subject file (i.e., whether it has been accessed a first time). As noted, it may use this log to check whether a file has been previously modified by the engine as described in step . At this stage the process of the redirection engine processing a file I\/O command is complete. In this manner, the redirection engine controls access to the hard disk by applications running in an emulator environment or sandbox, thereby limiting potential out-of-box damage that may be caused by emulated applications.","As discussed above, another way certain types of applications may maliciously attack a PC via accessing the PC's hard disk involves an anti-virus in-the-cloud scanning service that has been disabled or is inaccessible. When this type of anti-virus scanning is temporarily unavailable for a PC that normally uses it, applications from external sources, such as portable devices or the Internet, present a particular danger. Not checking them at all and allowing them to freely execute on the PC is too risky to be a viable option. On the other hand, putting all of them in quarantine is simply not practical. It is helpful to note that it is assumed that the existing internal applications and files have already been scanned and secured by the in-the-cloud scanning service before it became inaccessible. It is only after the service is unavailable that new, potentially risky new files that come from external sources that need to be handled in a special manner to protect the PC, as described below. Before continuing, it is also helpful to note that the private or quarantined memory area is not a virtual memory, as that term is used in the art. The private memory is a real storage space on the hard disk.","In another embodiment, the I\/O redirection engine itself creates a virtualized (virtual) environment in which applications can execute. This virtualized environment has no relationship to virtual memory, which is a different and unrelated concept. In this embodiment, the API-proxy-based emulator does not play a role and the virtualized environment is distinguishable from the emulated environment created by the API-proxy-based application emulator. An application running in the virtualized environment created by the I\/O redirection engine may be referred to as a virtualized application. The redirection engine, which may have multiple functions and capabilities, provides a virtualized environment or platform for application execution. This is useful in cases where a PC normally uses an anti-virus in-the-cloud service for detecting malware. As is known in the field of malware protection, an in-the-cloud service utilizes servers distributed over the Internet (or other network) to apply virus signatures used in virus detection, and works in conjunction with a desktop scanning agent that typically resides on the PC.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 4","b":["402","402","402","404","406","406","405","404","408","410","412","406","1","2","412","405","404","1","2","410","408"]},"As discussed above, the PC normally uses anti-virus (AV) in-the-cloud scanning services. The PC has an AV agent scanner operating between the applications and the operating system and is deployed to operate in conjunction with the in-the-cloud services on the Internet. However, when the AV in-the-cloud service is unavailable for any one of a number of reasons (e.g., Internet service is down, the AV agent is not executing, the in-the-cloud servers are offline), the virtualized environment  operating in I\/O redirection engine  executes to defend the PC against potential malware from external sources.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 5","FIG. 5"],"b":"502"},"At step , the application is scanned for viruses using anti-virus scan techniques that do not require accessing the Internet (as in-the-cloud scanning does). For example, the PC may perform a so-called forensic malware detection scan on the application or use a signature-based scanning technique. A forensic malware scan checks a file using information in the file, such as metadata and other file characteristics, to determine whether the file is potentially harmful or suspicious in any way. For example, some applications may have signatures to verify their authenticity or to ensure that they are free of viruses. If an application does not have a signature, it may be considered suspect. A technique known as \u201cgeneric packer detection\u201d may also be used to identify potentially high risk applications (a \u201cpacker\u201d refers to code obfuscation intended to prevent reverse engineering or analysis). At step  the forensic malware scan indicates whether the application is suspicious or unusual in any way.","If the application can be verified or authenticated by the malware detection scan, such as by checking a signature in the application or by other means and thus is considered safe, control goes to step . There the application executes in the PC's normal operating system environment and is allowed to access the public persistent storage area of the hard disk. On the other hand, if the application cannot be verified at step  and, thus, is classified as suspicious or potentially harmful, control goes to step  where the application executes in the virtualized environment created by the redirection engine. The application executes as a virtualized application in this environment. The virtualized application may be characterized as executing on the PC's real CPU, rather than on a \u201cvirtual\u201d CPU as in the emulator embodiment described above. The virtualized environment is created automatically by the redirection engine. The redirection engine sets up the private persistent storage area and prepares the virtualized environment. The virtualization that occurs by the redirection engine is only file I\/O virtualization rather than full environment virtualization. Only an application's file I\/O commands may be described as being \u201cvirtualized.\u201d As noted above, the application still runs on the real CPU, while its file I\/O impact is virtualized. For example, the application believes it has modified C:\\a.txt, but actually it has only modified a copy of a.txt because the real a.txt is in the public persistent storage area and is not modified (the command to modify a.txt has been virtualized).","At step  the virtualized application utilizes the private persistent storage area in the hard disk. In this embodiment, the redirection engine ensures that file I\/O commands coming from the virtualized application operate on files stored in the private persistent storage area of the hard disk. These file I\/O commands are the same as those discussed above; they primarily include operations to write to or read from a file, delete a file, or create a new file in the hard disk. At this stage the application either continues execution as a virtualized application\u2014accessing the private persistent storage area\u2014or executes in the normal operating environment as described at step . Only applications that are potentially harmful are launched in the virtualized environment (see box  of ). In one embodiment, an application does not switch to the real operating system environment once it is selected to execute in the virtualized environment. The switching between the real operating system and the virtualized environment is generally prohibited in order to protect the PC from potential malware.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 6","FIG. 6","FIG. 7"],"b":["602","602","602","604","604","604","606","606","608","606","610","610","602","608","606","612","612","510","512"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 7","b":["510","702","610","704","706","708"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 8","FIG. 3"],"b":["800","802","302","803","800","804","804","304","804","306"]},"A file analysis module  examines previous activity performed on the subject file by the emulated application. It determines whether the file is new, whether it has previously been modified by the application, or whether the redirection engine has handled the file in any capacity before receiving the present file I\/O command. File analysis module  performs this analysis by referring to a file update log  which maintains a record of all files previously handled by engine . For example, file update log  may include a list  of file directories, where each directly ends with the file name that was modified, for example, E:\\program files\\Trend\\secrect.exe, C:\\a.txt, D:\\b.exe, and so on. It may also contain a short description of the activity performed, such as write, delete, read, and the like.","Redirection engine  may also have a virtualized I\/O platform module  which creates the virtualized I\/O environment discussed in . Module  maintains virtualized environment  in which unverified or unauthorized applications can execute. The redirection engine may communicate with the hard disk via a storage subsystem of the device. The engine is able to access public and private storage areas of the hard disk depending on the results of the analysis performed on the file I\/O command and, if from an emulated program, on the activity history of a specific file. Thus, engine  may also contain a hard disk interface  used to communicate with storage processing subsystem components in order to retrieve and write to a hard disk . Hard disk  has a public storage area and a sequestered or quarantined storage area. This storage area is referred to in one embodiment as a private storage area and in another embodiment as a virtual space.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIGS. 9A and 9B","FIG. 9A"],"b":["900","900","902","904","906","909","910","912","914","900"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 9B","b":["900","920","922","924","924","926","922","926","926","924","914"]},"CPU  is also coupled to a variety of input\/output devices such as display , keyboard , mouse  and speakers . In general, an input\/output device may be any of: video displays, track balls, mice, keyboards, microphones, touch-sensitive displays, transducer card readers, magnetic or paper tape readers, tablets, styluses, voice or handwriting recognizers, biometrics readers, or other computers. CPU  optionally may be coupled to another computer or telecommunications network using network interface . With such a network interface, it is contemplated that the CPU might receive information from the network, or might output information to the network in the course of performing the above-described method steps. Furthermore, method embodiments of the present invention may execute solely upon CPU  or may execute over a network such as the Internet in conjunction with a remote CPU that shares a portion of the processing","In addition, embodiments of the present invention further relate to computer storage products with a computer-readable medium that have computer code thereon for performing various computer-implemented operations. The media and computer code may be those specially designed and constructed for the purposes of the present invention, or they may be of the kind well known and available to those having skill in the computer software arts. Examples of computer-readable media include, but are not limited to: magnetic media such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs and holographic devices; magneto-optical media such as floptical disks; and hardware devices that are specially configured to store and execute program code, such as application-specific integrated circuits (ASICs), programmable logic devices (PLDs) and ROM and RAM devices. Examples of computer code include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter.","Although illustrative embodiments and applications of this invention are shown and described herein, many variations and modifications are possible which remain within the concept, scope, and spirit of the invention, and these variations would become clear to those of ordinary skill in the art after perusal of this application. Accordingly, the embodiments described are illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope and equivalents of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["References are made to the accompanying drawings, which form a part of the description and in which are shown, by way of illustration, particular embodiments:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 9A and 9B"}]},"DETDESC":[{},{}]}
