---
title: Persistent state database for operating system services
abstract: A database is used to store user interface state information. The database is accessed by a key having a service ID field, a caller ID field, and a caller context ID field. The caller context ID is used to identify the context in the application program from which the user interface is called. In this manner, the system can differentiate between calls from different portions of the application program which can have different user expectations of the desirable user interface state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08244687&OS=08244687&RS=08244687
owner: Apple Inc.
number: 08244687
owner_city: Cupertino
owner_country: US
publication_date: 20110517
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE PRESENT INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["This application is a continuation of application Ser. No. 10\/996,076, filed Nov. 22, 2004, now U.S. Pat. No. 7,966,299, issued Jun. 21, 2011, which in turn is a continuation of application Ser. No. 10\/376,591, filed Mar. 3, 2003, now U.S. Pat. No. 6,823,343, issued Nov. 23, 2004, which in turn is a continuation application of application Ser. No. 09\/162,126, filed Sep. 29, 1998, now U.S. Pat. No. 6,523,472, issued Mar. 11, 2003, which are all incorporated herein by reference.","1. Field of the Invention","The present invention generally relates to interaction with services provided by the operating system in a computer. More particularly, the present invention relates to a method and apparatus for storing information that identifies the state of a particular client's, or user's, interaction with operating system services.","2. State of the Art","A computer's operating system typically provides a variety of different services that are called upon by clients, e.g. application programs and other processes, to perform functions that may relate to hardware components of the computer system, or other software programs. For instance, the file system permits a client to retrieve files from a local hard disk drive to open them within an application program, as well as store them back on the disk drive when they are closed. Another example of an operating system service is a color picker, which enables a client to vary colors which are displayed on a computer monitor and\/or printed on a printer.","Many operating system services require, or at least permit, a client to provide input which determines how the function of the service is to be carried out. For instance, when a file is to be opened in an application program, the client is provided with a choice of available storage locations, and files within that location, from which to select. Similarly, a color picker may provide sliders, or other types of control elements, which enable the user to adjust the colors on a display. These types of services typically have a user interface associated with them, via which the user can provide the necessary input. Other types of operating system services may not require explicit user input, and therefore normally do not have a corresponding user interface. For instance, the operating system may want to keep track of a user name and password for a server, to provide for automatic reconnection.","One example of a user interface that is provided when an application program issues a call to open or save files comprises a visual display of a directory and its contents. The user selects a file to be operated on by the application program, by clicking on a representation of the file in the visual display of the user interface. Typically, information concerning the directory displayed in the user interface is stored when the access to the operating system service terminates, e.g. the user exits the user interface. The next time the application program calls that service, the operating system causes the user interface to display the most-recently stored directory.","There are many operating system services which are called by multiple different clients. For instance, the file system service may be called by a text editing portion of a word processor, and then called by the dictionary portion of the same word processor, or by an entirely different application program. When the text portion of the word processor calls the file system again, its user interface will display the contents of the last directory that had been accessed. Thus, if the most recent call to the file system was from the dictionary portion of the word processor, the user interface might display a list of dictionary files. The user must then manipulate the user interface so that it displays the directory containing the desired text files. This can be a time-consuming annoyance to the user.","Additionally, when a desired directory is displayed to the user, the display typically occurs at a default location in the directory. For example, if files are displayed in alphabetical order, the files which initially appear are those whose names begin with A, B, C, etc. Consequently, a user may have to scroll down the user interface to find a previously selected object. If a directory contains a long list of files this can take some time.","It is desired to provide an improved method and apparatus for storing state information relating to operating system services across invocations of the services, to ensure correct operation of services, as well as to make the access to such services more convenient for the client.","The present invention generally relates to a method and system for storing state information relating to shared service programs. A database stores information which preserves the state of a particular operating system service for each client which calls that service. Thus, whenever a client accesses the service, it will be returned to the same state that existed when it last exited that service, even if other clients had accessed the service in the meantime and left it in a different state. The stored information is external to the clients which utilize the services, so that changes to the services can be implemented without affecting the clients.","In a preferred embodiment of the invention, the state information which is stored for each client-service pair includes as much information as possible which relates to the client's interaction with that service. For example, the state of a file system service might include the directory which was last accessed by the client, together with various parameters that define the user interface for that service, such as the size and location of a dialog window. Additional information along these lines can include position of a scroll button for the window, so that the client is returned to the same position in the directory where it exited the previous time, rather than a default position such as the top of a list.","The state information is stored under the control of the shared service or the operating system, rather than the application program. The application program need not be modified to provide changes to the state information storing process. The application program, however, can provide context information to affect the storing of the state information indirectly.","Preferably, the database is accessed by a key. The key includes a caller ID field indicating the application program or other client, a service ID field indicating the shared service program and a caller context ID field which may contain context information provided by the client.","The caller context ID field in the key allows different states to be stored for different contexts in an application. For example, the same service could be called by the text editing portion of a word processor, and the dictionary portion of the word processor. When the text portion of the word processor calls the service, the user interface will be set up with the state information corresponding to the state of the service which existed the last time the text portion of the word processor called the service. This avoids the annoyance of the user interface showing a directory of dictionary files when one wants to open a text file. The use of the caller context ID field allows two or more different states to be stored; one for each context of the application program.","In a preferred embodiment of the present invention, the key to the database also has a service context ID field. The service context ID field allows different versions of the shared service program to store different types of state data. A first version of a shared service interface might store the user interface state information in a certain manner. An upgrade to the shared service program can modify the way state information is stored. However, entries to the database may have already been made using the first version of the shared service program. The service context ID allows the upgraded shared service program to determine how the state data is stored in the database; the old way or the new way.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","102","104","106","104"]},"Looking again at , when the application program A provides context information J to shared service program S, the resulting Key  will be different from Key . This means that the stored state information will be different for different contexts of the application program. Additionally, both a shared service program T and the shared service program S can use the same database without conflict since the Key  produced by shared service program T will be different from any key produced by shared service program S.","The Database  stores the state information for the shared service program. For example, a user interface can store positioning and display information and a printer program can store printer setups. This state information is stored under the control of the shared service program or operating system; the application program is not required to store the state information itself.","By sending the context information, the application program is given some ability to determine what state information is associated with different application contexts.","Since the application program does not control the storing of the state information, the information to be stored can be modified without requiring modifications to the application program. This process is aided by use of the service context ID field. A new version of the shared service program can change the service context ID, allowing the data structure of the stored state information to be modified without conflicts.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":"20"},"The application programming interface for the service constructs a key. This key has a service ID field, a caller ID field, a caller context ID field, and preferably a service context ID field. The service ID indicates the particular service being called. Each shared service program has a different service ID number. The caller ID number identifies the application program calling the service. The caller context ID field contains the caller context, in this case , that is passed from the application program. The service context ID field contains the service context provided by the application programming interface. In this example, the service context ID is set to 0.","The key is used to determine whether there is any relevant user interface information stored in the database. If there is no state information currently stored in the database, the state of the service is set to a general default setting, or to a default setting for a given application program. Thus, for example, a dialog window for a \u201cGetFile\u201d user interface is displayed at a default size and location, and the contents of a predetermined directory are listed.","In block , the user modifies the state of the service and exits. Typically, the user will manipulate the interface to find the desired directory, select certain items, and\/or change the size or position of the user interface window. In block , the key  is used to store the state information in the database. In block , intervening actions occur. Later, in block , the application program calls the same user interface as above. In block , the key , which is the same as the key , is produced. This key is used to access the database in block , and this will pull up the stored state information. In block , the system uses the stored state information to set the state of the called service to the same state that existed when that client exited the service the last time. This can be done even though intervening actions may include calling of the service from a second context of the application program, and modification of the state of the service in that second context.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 3","i":"Inside Macintosh"},"In the example shown in , the stored state information includes dialog window size, dialog window position, selected item information, directory last used, and an additional state information field. The additional state information field can be used to store any other file access information which is considered useful, such as filtering information and the like.","As discussed above, the service context ID portion of the key can be used to indicate the arrangement of the state information in the database. Different service IDs can indicate different arrangements of the state information fields.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4","b":["50","52","50","52","50"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIGS. 5A and 5B","b":["54","56","58"]},"In step , the user manipulates the service to obtain the desired operation, and exits. In step , the application programming interface uses the key, I, to store state information I about the service in the database. In step , the application program calls the service in a second context. This second context might be different from the first context. The application program sends an indication of the context to the application programming interface. Looking at , in step , the application programming interface produces a key, key II. Key II is different from key I, because the context ID field is different. In step , the key II is used to check the database. The application programming interface will then set the service to the appropriate state associated with that context. After the user exits the service, the application programming interface, in step , stores the state information, state information II, into the database. In step , the application programming interface calls the service in the first context. In step , the application programming interface produces the same key, key I, as discussed above. The key I is used to get state information I, which has been stored in the database. In step , the state information I is used by the application programming interface to set up the state of the service. In this way, the state of the service will be similar to the state that existed after step . Thus, if a user calls the file system to open a file in the text portion of an application program, later calls the file system from a dictionary to get a dictionary file, and then reopens the user interface back in the text portion of the application program, the system will display files in the first directory, rather than the directory of dictionaries.","One aspect of the present invention concerns the storing of \u201cselected item\u201d information for a user interface.  is a diagram that illustrates a prior art method. In block , a user interface for the file system service displays the directory \u201cClient Addresses\u201d. In block , the user manipulates the user interface to select the file \u201cONEIL\u201d. In block , the user interface is closed. In block , when the user interface is reopened, the directory \u201cClient Address\u201d is displayed but the previously selected file \u201cONEIL\u201d is not displayed. The files at the top of the list, \u201cALVAREZ\u201d\u2014\u201cDIJULIO\u201d, are displayed instead. This can be an inconvenience to the user. For example, consider the case where the user wants to modify the address files to reflect a telephone area code change. After modifying the file \u201cONEIL\u201d, the next time the user interface is opened, the user must scroll down the user interface to get to the next file to examine, \u201cOWENS\u201d. By the end of the process, a substantial amount of time has been wasted manipulating the user interface.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 7","FIG. 2","FIG. 7"],"b":["124","126","130"]},"In a preferred embodiment, the system can store more than one selected item. It is possible that the files have been modified such that some, or all, of the selected item(s) no longer exist. The display will then show only the previously selected files, if any, that still exist.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 8","b":["140","142","144"]},"It will be appreciated by those of ordinary skill in the art that the invention can be embodied in other specific forms without departing from the spirit or essential character thereof. For example, a \u201csave file\u201d interface may use stored user interface data from an \u201copen file\u201d interface for the same application program and application context.","The presently disclosed embodiments are therefore considered in all respects to be illustrative, and not restrictive. The scope of the invention is indicated by the appended claims, rather than the foregoing description, and all changes that come within the meaning and range of equivalence thereof, are intended to be embraced herein."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention can be further understood from the following description in conjunction with the appended drawings. In the drawings:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
