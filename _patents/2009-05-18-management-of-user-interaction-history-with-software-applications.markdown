---
title: Management of user interaction history with software applications
abstract: A system and method are disclosed for history management a plurality of objects within an application, wherein each of the plurality includes at least a software method for saving the object's state and a software method for loading the object's state and a history manager function including a software method for recording an application interaction state for each user interaction with the application, wherein the application interaction state comprises the object's state for each of the plurality of objects at a time of the each user interaction with the application, wherein the user selects a desired one of the application interaction states to set the application to a desired one of the user interactions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08281285&OS=08281285&RS=08281285
owner: Adobe Systems Incorporated
number: 08281285
owner_city: San Jose
owner_country: US
publication_date: 20090518
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION AND PRIORITY CLAIM","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is a continuation of U.S. patent application Ser. No. 10\/794,173 by Glen Warren Ruehle, filed Mar. 5, 2004, which application is incorporated by reference herein in its entirety.","The present invention relates, in general, to software application functionality, and, more specifically, to managing the history of user interactions with a software application.","The growth of the Internet has spawned a variety of industries and applications. Browser technology, the computer applications used to navigate the Internet and the World Wide Web (WWW), have become a nearly universal computer application paradigm. The ease with which users are able to navigate between various Web pages resulted in a new generation of browser-centric users. Web pages are typically formatted in hypertext markup language (HTML). HTML is a format-descriptive meta language that describes the visual formatting and layout of the Internet documents. These documents are generally delivered to users over the Internet using hypertext transfer protocol (HTTP). HTTP is an address-oriented transport protocol that utilizes uniform resource locators (URLs) to identify the locations of specific Web pages. Web browsers use these URLs to navigate between the various HTML pages that a user desires to see.","In comparison, most general computer applications, whether on the desktop or Web-based, utilize a direct and application-specific interface with the user. Therefore, users interact with various general computer applications using navigation means that are generally different from their browser experience. With the increased popularity and usability of browsers, however, many software manufacturers have modified various user interface (UI) elements of general applications to mimic the ease and familiarity of the browser experience.","One shortcoming to general computer applications that has generally escaped a browser-like UI feature is the \u201cBack\u201d button. Browser users are familiar with the standard browser navigation tools, such as Back, Forward, Home, Favorites, and the like. Without these tools, it is likely that users would not have as good an experience in navigating the Web as they currently enjoy. The WWW is typically well-suited to such navigation tools because of the address-oriented nature of the URL-based transport protocol, HTTP. As a user \u201csurfs\u201d or hypertext jumps from one page to the next, a history of the user's interactions is easily recorded and managed. The URL of each page may simply be stored in some kind of storage register or memory location. As the user desires to return to a particular Web page, he or she may either sequentially click the Back button, until the desired page is reached, or, if the user goes past the desired page, he or she may click the Forward button to return through the address list. In some browser embodiments, the user may be shown several historical URLs, or the Web page title associated with that URL, at once, allowing for random navigation by directly selecting the particular address the user desires to jump to. Similarly, if a user desires to save a particular Web page address for future direct reference, the URL for that page may be stored in a Favorites list.","In contrast, general computer applications do not typically operate on an address-based mechanism within the operation of the application itself. General computer applications usually execute sequential code or bytecode compiled from a declarative computer language, such as MACROMEDIA, INC.'s ACTIONSCRIPT\u2122, and SUN MICROSYSTEM INC.,'s JAVASCRIPT\u2122, that does not have a universally-specific indicator of a particular view, page, or process step in the application. Therefore, the application generally has no way for recording a particular user interaction to which the user can then return simply by clicking a Back button.","For example, MICROSOFT CORPORATION'S OUTLOOK\u2122 email program allows interaction with email, whether incoming, outgoing, saved, sorted, and the like. While any one particular box, such as the inbox, may have a Back and Forward button to traverse the various emails in that box, those navigational tools typically work within the context of that box. Moreover, those interface elements usually work in the context of location. Therefore, if a user begins looking at the first email, then selects to view the tenth email, using the back button would only get the user to the ninth email, even though the user had yet to actually view the ninth email. Similarly, if a user views emails that have been sorted in a specific folder and then moves to view emails in the inbox, pressing the back button will not return the user to viewing the email in the specific folder.","Wizards are computer applications that are developed to step a user through a particular process. The Wizard, somewhat like a browser, displays a view screen to a user for providing some information or to request a particular action. Once the action is taken, it moves to the next view screen in the Wizard sequence. Wizards will typically have a Back button, but this Back button works only in a sequential method. Therefore, in view screen five, if the user selects the Back button, the user is \u201cbacked up\u201d to view screen four. These navigation features in a Wizard do not necessarily operate on the basis of the user's interaction history, but merely operate on the sequence of the Wizard itself. A user desiring to go completely back to the beginning of the Wizard would need to repeatedly select the Back button in order to get there. Moreover, if, during operation of the Wizard, the user accessed another application running on the user's computer, the Wizard Back button would not take the user back to this separate application.","Another example of an attempt by computer software manufacturers to implement Browser-like navigation are large form-type applications. One example of a form-type application would be INTUIT CORPORATION's TURBOTAX\u2122. The function of the TURBOTAX\u2122 software is to step a user through a series of fill-in form pages in order to complete various federal income tax return forms. Recent versions of TURBOTAX\u2122 have included not only a Wizard-like Back button, which works sequentially, but also a hypertext-coded outline of the various major steps allowing the user to hypertext jump to any portion of the fill-in form process. Again, while this navigation allows the user to jump to various places in the application, it is implemented purely through mapping of the application. The various user interactions with TURBOTAX\u2122 are not recorded for purposes of navigation. Therefore, if a user selected to return to the deductions section, he or she would be taken to the first page of the deductions section regardless of whether or not the user had even been to that page before. While this navigation feature allows the user more flexibility in navigating the application, there is still no way to directly track the user's interactions.","Recently, computer applications have been made available to users to access over the Internet. These Web-based or on-line applications are generally accessed by the user through the container of the Web browser. The Web browser displays an HTML page, however, the HTML page contains a player or other type of application container that runs the visual representation of the Web-based application to the user. In these types of applications, if the user were operating the Web-based application, the browser Back button would not necessarily take the user back to the preceding step of the application, but may, in fact, take the user back to the Web page that preceded the user's activation of the Web-based application. Thus, the Back button would exit the user from the application altogether.","In order to compensate for this problem with on-line applications, techniques have been developed to communicate with the browser that the user is interacting with an on-line application that is being displayed within the browser. Such features are typically implemented using a hidden Web page, referred to as an invisible frame or i-frame. When a user calls an on-line application, an HTML shell is loaded with the container on which the on-line application will be displayed. One example of such a container may be MACROMEDIA INC.'s MACROMEDIA FLASH\u2122 PLAYER. Along with the MACROMEDIA FLASH\u2122 PLAYER will be the i-frame. An i-frame is a browser element which is a floating frame, sub-navigational element within the browser window. Navigation that occurs within the i-frame is remembered in the browser's history mechanism. Therefore, when a user selects Back or Forward, the history information from the i-frame is used.","In the example of a MACROMEDIA FLASH\u2122 PLAYER container, the i-frame will also includes a Small Web Format (SWF) file. SWF files are the native file format in MACROMEDIA FLASH\u2122. The SWF file within the I-frame will be used to communicate with the main SWF file running in the MACROMEDIA FLASH\u2122 PLAYER container. In these applications, the developer has generated state book marks which mark places in the application for use with a navigational feature. For example, a developer may place code in the application that state A is an entry screen, while state B is a processing screen, and state C is a confirmation screen. When the application is running and a user moves from the entry screen to the processing screen, the i-frame notes the change from state A to state B in a URL having query information concerning the actual state of the application. The browser history feature remembers the new URL of the processing screen, which is state B for the application. If the user were to select the Back button on the browser, the browser pulls the previous URL from its history, passes it to the i-frame, which, in turn, uses the query information from the previous URL to communicate to the main SWF file running on the MACROMEDIA FLASH\u2122 PLAYER container and reload state A to the main SWF file. Therefore, the user is taken back to state A or the entry screen of the on-line application. While this method allows for history navigation within an on-line application, the application developers hard codes each state identifier into the application, adding a substantial amount of work and expense to the development of the application.","Representative embodiments of the present invention are related to a system and method for managing user interaction with computer applications. Computer applications typically comprise a number of objects that operate or are displayed within the application. Computer applications that are configured according to the teachings of the present invention include objects that may have at least two computer methods: a save state method and a load state method. To interact with these objects, a history manager is also used that includes, at least, a method for saving the application state. In calling this save application state method from the history manager, the history manager calls the save state method for each of the objects in the application. The collection of each of the objects' saved states is then stored, associated with the particular user interaction that caused each of the states. If a user desires to go back to one of the previous points in the application, he or she may select the particular application state that is stored associated with that particular user interaction or application state.","In response to this Back feature being selected, the history manager calls the load state method for each of the objects, which then reload the state that was originally stored for that particular application state or that particular user interaction. By causing each object to restore the specific state, the application returns to the exact state for that particular user interaction. Maintaining a list of the state objects, state objects are each of the objects' states saved for a particular user interaction, the user may select to go back to previous interactions and then go forward to current interactions. With the ability to save these state objects, a user may also more permanently save an interaction state in a favorites-like data structure.","The foregoing has outlined rather broadly the features and technical advantages of the present invention in order that the detailed description of the invention that follows may be better understood. Additional features and advantages of the invention will be described hereinafter which form the subject of the claims of the invention. It should be appreciated that the conception and specific embodiment disclosed may be readily utilized as a basis for modifying or designing other structures for carrying out the same purposes of the present invention. It should also be realized that such equivalent constructions do not depart from the invention as set forth in the appended claims. The novel features which are believed to be characteristic of the invention, both as to its organization and method of operation, together with further objects and advantages will be better understood from the following description when considered in connection with the accompanying figures. It is to be expressly understood, however, that each of the figures is provided for the purpose of illustration and description only and is not intended as a definition of the limits of the present invention.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["1","100","2","101","3","102","103","103"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2A","b":["20","200","201","1","4","1","4","1","2","3","4","20","200","1","4","201","201","1"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2B","b":["20","3","200","1","4","2","201","1","4"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2C","FIGS. 2A and 2B","FIG. 2C"],"b":["20","3","20","1","200","1","4","1","1","4","20","20"]},"In the example described in , only a single user interaction was described. It should be noted that the various embodiments of the present invention are not limited to a single, sequential interaction-history recall, similar to a \u201cBack\u201d or \u201cForward\u201d function. If the user had made ten different interactions with application , for example, ten different state objects would be stored, each having the multiple individual states of the objects for that particular user interaction. When the user selects to use the history management feature, each of the ten state objects would be presented to the user for random selection to return to any of the previous user interactions. It should also be noted that the options for the ten different state objects may be presented to a user in such a visual way as to inform the user of what type of interaction is represented by that state object.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["300","301","302"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4","b":["40","41","40","400","401","1","41","402","403","402","41","42","406","408","403","41"]},"In the embodiment of the present invention depicted in , each object in the application that is to use the history management feature calls the method register object  of history manager . As each object is registered with history manager , object list  is created listing each of the objects, such as object- , that have registered to take advantage of the history management feature. Upon calling register object  method, history manager  assigns a unique ID to that object, Object-  for example, and sets that ID in object ID . History manager  also sets the particular objects depth in object depth . An object's depth is the hierarchical level of the object in the structure of the application. For example, the hierarchical level provides the objects relational position with regard to other objects. A relational position may be a parent relationship, a child relationship, and a sibling relationship.","When the user interacts with the application, history manager  calls save state objects method , which, in turn, calls save state method  of object- . History manager  will then cycle through object list  calling the save state method for each of the other objects that have registered with history manager . In response to save state method , object-  stores its current state in object registry  associated with the user's current interaction as a state object, such as state objects -.","As the user continues to interact with the application, state objects continue to be saved in object registry . If the user desires to return to any one of those previous interactions, he or she may invoke the history management feature, which presents all of the state objects in object registry  for random selection by the user. When the user selects anyone of these state objects, such as state object , object-  calls load state method  to retrieve and load into its \u201ccurrent\u201d state, the state that had been saved and associated with the user interaction associated with state object . When re-loading the previous \u201ccurrent\u201d state, object depth  is used to determine which state objects to restore first. State objects are restored in hierarchical order starting with the outer most object or a parent relationship and ending with the inner most object level or the child or sibling relationship. Upon the loading of the previous state, the application again displays to the user the exact state that the application was in when the user interacted with the application at the user-selected previous point. The user may then randomly return to any of the subsequent states in the same manner, by selecting state object , for example.","It should be noted that the specifics described with respect to  are not the only ways to implement the various embodiments of the present invention. For example, in additional or alternative embodiments to the present invention object ID  or object depth  may be maintained with history manager .","It should further be noted that in additional or alternative embodiments to the present invention, certain objects may be designated in various development environments as objects that use history management by default. Such objects may be navigational elements such as a tab navigator or an accordion navigator. An example of such a development environment in which selected objects are registered with the history manager by default is MACROMEDIA, INC.'s FLEX\u2122. FLEX\u2122 is a development environment utilizing server-side code that assists in developing rich Internet applications. The FLEX\u2122 server delivers a standards-based, declarative programming methodology and workflow along with runtime services for developing and deploying the presentation tier of rich client applications. FLEX\u2122 utilizes MACROMEDIA FLASH\u2122 as a container for delivering rich media applications to a client.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 5","b":["500","50","501","503","504","506","507","509"]},"When the user selects button  in application , the state of button  is changed, along with possible changes in other objects of application. For purposes of the example illustrated in , only a change to the state of button  is implemented. The object for button  is a child object of the window of tab . Tab  is, itself, a child object of the window associated with tab , which, itself is a child object of application . Beginning with the top-most level, button  is within nested state , application -tab -tab -button . The objects for tabs , , , and  as well as the other applications  and  each have their own objects active on computer display . If a haphazard sequence of restoring objects were implemented, button  may not end up displayed as originally displayed because a subsequent object is re-rendered on top of it. However, application  is an embodiment configured according to the present invention which defines a specific sequence of state restoration.","If the user subsequently desires to return to the interaction described above, for example by selecting a \u201cBack\u201d  or \u201cForward\u201d  button, the application states are loaded in a top-down sequence from the highest level to the lowest. For example, the application view page for application  is loaded. Next, the state of tab  was a \u201cviewable\u201d state. Therefore, the visible page is displayed corresponding to tab . Tabs  and  were each in a \u201chidden\u201d state, for which the hidden view is displayed corresponding to tabs  and . Proceeding down the hierarchical levels, tab  was in a \u201cviewable\u201d state, such that its visible page is displayed. Tabs  and  were \u201chidden,\u201d such that their states are reloaded in the \u201chidden\u201d states. Finally, buttons  -  are each rendered onto the visible page of tab . Button  had been selected by the user. Therefore, its state was restored in the \u201cselection\u201d state.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 6","b":["60","600","601","60","602","60","603","60","61","60","61","60","604","604","605","609","604","609","61","61"]},"As the user interacts with Web application , a state object is created using each of the present states of the objects within Web application . A single state object is created for each user interaction and stored in state object memory . The functions of Web application  operate to convert the single state object into a properly formatted query information string, which is then used to compiled state object URL . I-frame  communicates state object URL  to the browser, which stores it in browser history memory .","If the user desires to return to one of his or her previous interactions, he or she selects the specific URL from the browser's history feature. In response to this selection, the appropriate state object URL is retrieved from browser history memory , such as state object URL . State object URL  is communicated to i-frame , in which the state information contained within the query information string of state object URL  is used by SWF  to load the previous state into Web application . The display of Web application  is, thus, restored to the desired interaction that the user selected.","Although the present invention and its advantages have been described in detail, it should be understood that various changes, substitutions and alterations can be made herein without departing from the invention as defined by the appended claims. Moreover, the scope of the present application is not intended to be limited to the particular embodiments of the process, machine, manufacture, composition of matter, means, methods and steps described in the specification. As one will readily appreciate from the disclosure, processes, machines, manufacture, compositions of matter, means, methods, or steps, presently existing or later to be developed that perform substantially the same function or achieve substantially the same result as the corresponding embodiments described herein may be utilized. Accordingly, the appended claims are intended to include within their scope such processes, machines, manufacture, compositions of matter, means, methods, or steps."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present invention, reference is now made to the following descriptions taken in conjunction with the accompanying drawing, in which:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2C","FIGS. 2A and 2B"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
