---
title: System, method, and computer program for validating web service interface design
abstract: A system, method, and computer program product are provided for validating web service interface design. In use, an object-oriented information model including JAVA® code associated with JAVA® programming language to be converted to a document-oriented model described in Extensible Markup Language (XML) is identified. Further, one or more objects associated with the object-oriented information model that are associated with a plurality of instances are automatically identified. In addition, for each of the one or more objects associated with the plurality of instances, either: the one or more objects are stored in a location other than the object-oriented information model and each of the plurality of instances of the one or more objects are replaced with a reference to the one or more objects in the location other than the object-oriented information model; the plurality of objects are indicated as being safe, thus signifying the plurality of objects are not significant; or the plurality of objects are indicated as being contained by a corresponding owning object, thus indicating that there can be no duplication of these objects. In response, the object-oriented information model is annotated as being optimized. Still yet, the object-oriented information model is automatically validated based, at least in part, on the object-oriented information model being annotated as optimized.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09436440&OS=09436440&RS=09436440
owner: Amdocs Software Systems Limited
number: 09436440
owner_city: Dublin
owner_country: IE
publication_date: 20140224
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Application No. 61\/807,350, filed Apr. 2, 2013, the entire contents of which are incorporated herein by reference.","The present invention relates to web service interface design, and more particularly to validating, at design time, that messages transferred by the web service are well formed.","Extensible Markup Language (XML) Web services based on Simple Object Access Protocol (SOAP) are the ubiquitous mechanism for integrating heterogeneous enterprise IT applications, defined by Web Services Description Language (WSDL) files and supporting XML Schema Definition (XSD) files. The interfaces are commonly designed using the JAVA\u00ae programming language, and the WSDL\/XSD is generated using JAVA\u00ae technologies such as JAVA\u00ae beans, JAVA\u00ae Architecture for XML Binding (JAXB), and JAVA\u00ae API for XML Web Services (JAX-WS).","Using this approach, a problem arises when the object-oriented information model described in JAVA\u00ae is converted to the document-oriented model expressed by XML. In particular, if there are multiple references to the same object, an associated message will be bloated with duplicated data, as the references are expressed as nested XML elements. Although JAVA\u00ae has some primitive mechanisms to remedy this problem, there is no ability to prevent this from happening at design time.","There is thus a need for addressing these and\/or other issues associated with the prior art.","A system, method, and computer program product are provided for validating web service interface design. In use, an object-oriented information model including JAVA\u00ae code associated with JAVA\u00ae programming language to be converted to a document-oriented model described in Extensible Markup Language (XML) is identified. Further, one or more objects associated with the object-oriented information model that are associated with a plurality of instances are automatically identified. In addition, for each of the one or more objects associated with the plurality of instances, either: the one or more objects are stored in a location other than the object-oriented information model and each of the plurality of instances of the one or more objects are replaced with a reference to the one or more objects in the location other than the object-oriented information model; the plurality of objects are indicated as being safe, thus signifying the plurality of objects are not significant; or the plurality of objects are indicated as being contained by a corresponding owning object, thus indicating that there can be no duplication of these objects. In response, the object-oriented information model is annotated as being optimized. Still yet, the object-oriented information model is automatically validated based, at least in part, on the object-oriented information model being annotated as optimized.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","102","100","102","102"]},"Coupled to the network  is a plurality of devices. For example, a server computer  and an end user computer  may be coupled to the network  for communication purposes. Such end user computer  may include a desktop computer, lap-top computer, and\/or any other type of logic. Still yet, various other devices may be coupled to the network  including a personal digital assistant (PDA) device , a mobile phone device , a television , etc.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","100","200"]},"As shown, a system  is provided including at least one central processor  which is connected to a communication bus . The system  also includes main memory  [e.g. random access memory (RAM), etc.]. The system  also includes a graphics processor  and a display .","The system  may also include a secondary storage . The secondary storage  includes, for example, a hard disk drive and\/or a removable storage drive, representing a floppy disk drive, a magnetic tape drive, a compact disk drive, etc. The removable storage drive reads from and\/or writes to a removable storage unit in a well known manner.","Computer programs, or computer control logic algorithms, may be stored in the main memory , the secondary storage , and\/or any other memory, for that matter. Such computer programs, when executed, enable the system  to perform various functions (to be set forth below, for example). Memory , storage  and\/or any other storage are possible examples of tangible computer-readable media.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3","FIGS. 1 and\/or 2"],"b":["300","300","300"]},"As shown, an object-oriented information model including JAVA\u00ae code associated with JAVA\u00ae programming language to be converted to a document-oriented model described in Extensible Markup Language (XML) is identified. See operation . The object-oriented information model may include any code, message, and\/or model, etc. For example, in one embodiment, the object-oriented information model may be associated with a web service interface, a web service object, an application programming interface (API), and\/or various other object-oriented information models. In one embodiment, the object-oriented information model including JAVA\u00ae code associated with JAVA\u00ae programming language may be converted to the document-oriented model described in XML at runtime.","As shown further in , one or more objects associated with the object-oriented information model that are associated with a plurality of instances are automatically identified. See operation . For example, in one embodiment, identifying the one or more objects associated with the object-oriented information model that are associated with the plurality of instances may include identifying objects in the JAVA\u00ae code that are referenced more than once. Further, in one embodiment, identifying the one or more objects associated with the object-oriented information model that are associated with the plurality of instances may include identifying objects in the JAVA\u00ae code that include more than one object definition.","In addition, for each of the one or more objects associated with the plurality of instances, either: the one or more objects are stored in a location other than the object-oriented information model and each of the plurality of instances of the one or more objects are replaced with a reference to the one or more objects in the location other than the object-oriented information model; the plurality of objects are indicated as being safe, thus signifying the plurality of objects are not significant; or the plurality of objects are indicated as being contained by a corresponding owning object, thus indicating that there can be no duplication of these objects. See operation .","In one embodiment, storing the one or more objects in the location other than the object-oriented information model may include storing the one or more objects in a defined data container that is outside of the object-oriented information model. In one embodiment, the defined container may include a data structure capable of storing the one or more objects. The location may include any location in memory (e.g. internal and\/or external, etc.).","Additionally, in one embodiment, replacing each of the plurality of instances of the one or more objects with the reference to the one or more objects in the location other than the object-oriented information model may include replacing each of the plurality of instances of the one or more objects with a reference to the defined container that is outside of the object-oriented information model. As an option, the reference to the defined container that is outside of the object-oriented information model may include an identification associated with the one or more objects. The identification may include any type of identifier associated with the object, such as a name and\/or number, etc.","In various embodiments, the reference may include any type of information and\/or be associated with various information. Further, in one embodiment, the reference may include a character string. In another embodiment, the reference may include a pointer. In another embodiment, the reference may include a number. Of course, in various embodiments, the reference may come in a variety of forms.","The object-oriented information model is annotated as being optimized, in response to performing one of the storing and the replacing, the indicating the one or more objects as safe, or the indicating the one or more objects as being contained by the corresponding owning object. See operation . The annotation may include any form.","For example, the annotation may include a log indicating the references to duplicate objects were removed. In another embodiment, the reference inserted may serve as the annotation, thereby indicating duplicate objects were replaced. For example, in one embodiment, the presence of a reference in the object-oriented information model may serve as the annotation. In another embodiment, a flag may be used to annotate the object-oriented information model as being optimized.","In another embodiment, a notification may be sent to a user indicating the object-oriented information model is optimized (e.g. and thereby serving as the annotation, etc.). In another embodiment, the annotation may include a descriptor or character string that becomes part of the object-oriented information model or a message associated therewith. Of course, in various embodiments, the object-oriented information model may be annotated as being optimized in a variety of ways.","As shown further in , the object-oriented information model is automatically validated based, at least in part, on the object-oriented information model being annotated as optimized. See operation . In various embodiments, the automatic validation may include various other validation steps.","For example, in one embodiment, automatically validating the optimized object-oriented information model may further include verifying the reference to the one or more objects in the location other than the object-oriented information model is of the type \u201cjava.util.List.\u201d As another example, automatically validating the optimized object-oriented information model may further include verifying the reference to the one or more objects in the location other than the object-oriented information model is associated with at least one object identifier. In either case, in one embodiment, the method  may further include converting at least a portion of the object-oriented information model including the JAVA\u00ae code to the document-oriented model described in XML, as a result of the automatic validation.","Still yet, in one embodiment, the method  may include reporting that there are one or more objects associated with the plurality of instances in the object-oriented information model. As an example, reporting that there are one or more objects associated with the plurality of instances in the object-oriented information model may include displaying an message utilizing a user interface. Further, in one embodiment, the method  may further include indicating the object-oriented information model is safe to use, based on the automatic validation. As an example, the indication may be presented in the form of a message to a user utilizing a user interface.","The objects associated with the object-oriented information model may include any type of object. As one example, the one or more objects associated with the object-oriented information model may include one or more product definitions. In this case, identifying the one or more objects associated with the object-oriented information model that are associated with the plurality of instances may include identifying that a first one of the one or more product definitions are present more than once in the object-oriented information model.","Further, in this example, storing the one or more objects in the location other than the object-oriented information model may include storing the first one of the one or more product definitions outside of the object-oriented information model. In this case, replacing each of the plurality of instances of the one or more objects with the reference to the one or more objects in the location other than the object-oriented information model may include replacing each instance of the first one of the one or more product definitions present in the object-oriented information model with a reference to a location where the first one of the one or more product definitions are stored outside of the object-oriented information model. As an option, the reference to the location where the first one of the one or more product definitions are stored outside of the object-oriented information model may further include an identifier associated with the first one of the one or more product definitions.","Of course, product definitions are only one example of the objects, in accordance with one embodiment. In various embodiments, the objects may include any number of items and\/or descriptors. For example, in one embodiment, the one or more objects associated with the object-oriented information model may include one or more objects associated with fixed definitions.","More illustrative information will now be set forth regarding various optional architectures and uses in which the foregoing method may or may not be implemented, per the desires of the user. It should be strongly noted that the following information is set forth for illustrative purposes and should not be construed as limiting in any manner. Any of the following features may be optionally incorporated with or without the exclusion of other features described.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 4","FIGS. 1-3"],"b":["400","400","400"]},"As shown, in the context of service interface design, message types are created and\/or edited utilizing JAVA\u00ae code. See operation . Further, one or more interfaces are created. See operation .","Additionally, a validation tool is run to validate the interface and associated information. See operation . Further, Web Services Description Language (WSDL) files and supporting XML Schema Definition (XSD) files are then generated from the interface created and associated information. See operation .","In one embodiment, the validation tool may function to report potential duplicate references within a service operation message, and require the designer to restructure the message or indicate that the references are safe to use. In another embodiment, the validation tool may function to optimize and automatically validate the object-oriented information model.","For example, in one embodiment, a system associated with the flow diagram  may function to implement a method by which a set of annotations are added to JAVA\u00ae code, where the annotations describe the web service interface. Further, the system may include a validation tool that validates the structure of the message. In this case, the request and return message types may be defined explicitly.","In other words, the javax.jws.Web Service annotation may specify:\n\n","style=javaz.jws.soap.SOAPBinding.Style.DOCUTMENT,","use=javax.jws.soap.SOAPBindgin.Use.LITERAL,","parameterStyle=javax.jws.soap.SOAPBinding.ParameterStyle.BARE)","Thus, a typical service operation is defined as follows:\n\n","The types operationNameResponse and operationName are known as message assembly types, and maybe analyzed and validated utilizing the techniques described herein.","As an example, an application may manage products, customers, and the particular products those customers have purchased and own, which are referred to as product instances. The product definitions may store fixed information such as, for example, a picture of the product, the make, model, description, dimensions and color, etc. Further, the product instance may store the customer specific information such as, for example, date purchased, serial number (if applicable), etc. The information model would naturally define a product instance with an association to the customer who owns it, and the product definition of which it is an instance.",{"@attributes":{"id":"p-0051","num":"0052"},"figref":"FIG. 5","b":["500","504","502","506"]},"Consider a service operation that retrieves customers, their product instances, and the definitions. If the operation is naively defined to return a list of customers, the XML document returned may be structured as shown in .  shows a data structure  illustrating how duplicate data may be structured in an XML document returned by a web service operation that is naively defined.","If the operation returns 100 customers who purchased the same product, the corresponding product definition will be repeated 100 times in the XML document. This may result in many megabytes of duplicated data. The message may therefore be constructed with a separate container for the product definitions that is outside the customer model, and referenced from within the customer model, as shown in .",{"@attributes":{"id":"p-0054","num":"0055"},"figref":["FIG. 7","FIGS. 1-6"],"b":["700","700","700"]},"As shown, the data structure  includes a parameter  \u201c<ProductDefinitionsReferenced>\u201d. The parameter <ProductDefinitionsReferenced> refers to a shared reference container. In one embodiment, this may be added to the message to avoid duplication of referenced data due to the document structure of XML. In one embodiment, the consumer of the operation may find the product definition details of product instances that customers own by matching an embedded identifier (\u201cProductDefinitionId.id\u201d) in the customer structure, and an identifier (\u201cProductDefinition.id\u201d) in the shared reference.","In one embodiment, to design this data structure, a designer may follows the flow illustrated in , to generate the Java code illustrated in .","In one embodiment, to design this data structure, a designer may follows the flow illustrated in , to generate the JAVA\u00ae code illustrated in .",{"@attributes":{"id":"p-0058","num":"0059"},"figref":["FIG. 8","FIG. 7","FIGS. 1-7"],"b":["800","800","800"]},"Table 1 shows an annotation summary for the annotations utilized in the context of .",{"@attributes":{"id":"p-0060","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Annotation Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["@Containment","Indicates that an associated entity is "]},{"entry":[{},"contained by its parent entity, "]},{"entry":[{},"meaning that instances of the "]},{"entry":[{},"contained entity are unique for "]},{"entry":[{},"each parent instance."]},{"entry":["@ID","Indicates that a type is an identifier, "]},{"entry":[{},"meaning that it is a special qualification "]},{"entry":[{},"that defines only attributes necessary to"]},{"entry":[{},"identify an instance of the type."]},{"entry":["@MessageAssembly","Indicates a message assembly type."]},{"entry":["@Repository Type","Defines a type in the WSF repository."]},{"entry":["@SafeReferences","Specifies that references within a "]},{"entry":[{},"message assembly type are safe, "]},{"entry":[{},"meaning that for this operation "]},{"entry":[{},"there will be little or no duplication "]},{"entry":[{},"of instances of the referenced type "]},{"entry":[{},"within the XML message."]},{"entry":["@SharedReference","Indicates that a field within a message "]},{"entry":[{},"assembly type is a container for "]},{"entry":[{},"references by other types in the message."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In the context of , the annotation type \u201cContainment\u201d indicates that an associated entity is contained by its parent entity, meaning that instances of the contained entity are unique for each parent instance. The relationship to the contained may be one-to-many, but may also be one-to-one. For example:\n\n","The opposite of containment is \u201creference\u201d, in which instances of the associated entity may be referenced by many different instances of the parent entity. Associations annotated with @Containment do not necessary need to implement @SafeReference within message assembly.","The annotation type \u201cID\u201d indicates that a type is an identifier, meaning that it is a special qualification that defines only attributes necessary to identify an instance of the type. ID types are used to reference other types, typically for message assembly,. For example:\n\n","@SemanticTerm(SemanticTermValue.IDENTIFIER)","public java.lang.String id;\n\n","In the context of , the annotation type \u201cMessageAssembly\u201d indicates a message assembly type. These types may define the schema of the input, output, and fault messages of a web service operation, and may be subject to validation to ensure that the messages do not contain duplicated data as a result of transforming the object oriented model of the service implementation to the document oriented model of the XML message. Message assembly types may be annotated with @XmlRootElement.","Associations within the types referenced by a message assembly type (either directly or indirectly) may conform to a variety of forms. For example, the association may be annotated with @Containment, meaning that the associated instances are unique. As another example, the target type of the association may be annotated with @ID, meaning that the instances it references are identified by their ID only. In case other attributes of the referenced entity are needed, they may be extracted to a different message property (annotated with @SharedReference). As another example, the association may be referenced in a path of one of the @SafeReferences annotations specified by @MessageAssembly. For example:\n\n",". . .\n\n","Table 2 describes parameters associated with the \u201cSafeReferences\u201d annotation used in this example.",{"@attributes":{"id":"p-0070","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Parameters"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SafeReferences","value( )"]},{"entry":[{},"[ ]","Indicates which references used "]},{"entry":[{},{},"within this message assembly "]},{"entry":[{},{},"are safe to use, and will not "]},{"entry":[{},{},"cause data duplication."]},{"entry":[{},{},"Default { }."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"With further reference to , the annotation type \u201cRepositoryType\u201d defines a type and its originating type. Used as part of a type qualification scheme, this annotation may be used by a validation tool when validating shared references.","Table 3 describes parameters associated with the \u201cRepositoryType\u201d annotation, in accordance with one embodiment.",{"@attributes":{"id":"p-0073","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Parameters"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String","name( )"]},{"entry":[{},{},"The formal, technical name of the type as "]},{"entry":[{},{},"it appears in the XSD."]},{"entry":[{},"String","originatingType( )"]},{"entry":[{},{},"For qualified types, the fully qualified class "]},{"entry":[{},{},"name of the originating (unqualified)"]},{"entry":[{},{},"type on which it is based."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"With further reference to , the annotation type \u201cSafeReferences\u201d specifies that references within a message assembly type are safe, meaning that for this operation there may be little or no duplication of instances of the referenced type within the XML message. This annotation may be used to simplify the structure of the message, and avoid the use of a shared reference attributes in the message.","The paths parameter specifies the fields within the message structure that hold the safe references. The path may be specified as a dot-separated list of field names, starting with a field of the message assembly type, and then referencing fields in the nested types. if the path references a List<> type, it may be suffixed with [ ] to indicate that the subsequent name is a field of the underlying type, rather than a field of java.util.List. For example\n\n","This path would specify that for the given operation, the message is unlikely to have two different lines of an order that refer to the same product.","Table 4 describes parameters associated with the \u201cSafeReferences\u201d annotation, in accordance with one embodiment.",{"@attributes":{"id":"p-0078","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Parameters"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String","type( )"]},{"entry":[{},{},"Fully qualified class name of the referenced type "]},{"entry":[{},{},"which potentially has duplicates instances."]},{"entry":[{},"String [ ]","paths( )"]},{"entry":[{},{},"An array of paths to fields in the "]},{"entry":[{},{},"message structure that are safe references."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"With further reference to , the annotation type \u201cSharedReference\u201d indicates that a field within a message assembly type is a container for references by other types in the message. Fields annotated with @SharedReference may not be part of the functional payload of the operation, but may be added to the message in order to avoid instances of the (shared) reference being duplicated in the XML message. The instances contained in a @SharedReference field may be referenced by an @ID restriction of the same type.","For example, a message assembly type might be defined as follows:\n\n","public List productInstances;","@SharedReference","public List productSpecificationsReferenced;",". . .\n\n","The definition of ProductInstance may contain a reference to a ProductSpecification via its ID, for example:\n\n","public ProductSpecificationId productSpecification;",". . .\n\n","In this way, a message containing hundreds of product instances with many duplicate references to the same product specification will not contain duplicates of the product specifications. The consumer may retrieve the ProductSpecification details from the @SharedReference container using the values of ProductSpecificationID.","Table 5 describes various validations that may be performed on message assembly types by a validation tool, in accordance with one embodiment. In one embodiment, for each of these conditions that fail, an appropriate error message may be generated by the validation tool.",{"@attributes":{"id":"p-0090","num":"0111"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"char"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1.","The message assembly type must implement "]},{"entry":[{},"@XmlRootElement."]},{"entry":["2.","The message assembly type may not contain "]},{"entry":[{},"any fields whose types are annotated with "]},{"entry":[{},"@MessageAssembly or @XmlRootElement"]},{"entry":["3.","All types used by the fields of the message "]},{"entry":[{},"assembly type (including all nested fields) "]},{"entry":[{},"must be annotated with @RepositoryType."]},{"entry":["4.","If the @MessaageAssembly type has a field "]},{"entry":[{},"which is annotated with @SharedReference "]},{"entry":[{},"its type must be java.util.List."]},{"entry":["5.","If the @MessageAssembly has a field "]},{"entry":[{},"annotated with @SharedReference whose "]},{"entry":[{},"type is java.util.List<t>, the message "]},{"entry":[{},"assembly type must contain a field whose"]},{"entry":[{},"type is annotated with @ID, and whose "]},{"entry":[{},"@RepositoryType.originatingType is "]},{"entry":[{},"the same as t."]},{"entry":["6.","The type identified by @SafeReferences.-"]},{"entry":[{},"type must not be annotated with @ID."]},{"entry":["7.","All paths specified with @SafeRefer-"]},{"entry":[{},"ences.paths must conform to the documented"]},{"entry":[{},"syntax, and must refer to a field (or nested "]},{"entry":[{},"field) within the message assembly type "]},{"entry":[{},"whose type is the same as that specified "]},{"entry":[{},"by @SafeReferences.type."]},{"entry":["8.","A field identified by @SafeReferences.paths "]},{"entry":[{},"must not be annotated with @Containment."]},{"entry":["9.","If the message assembly type contains a field "]},{"entry":[{},"named f of type t that causes a static cyclic "]},{"entry":[{},"reference (i.e. t contains a field or a nested field"]},{"entry":[{},"whose type is t), f must be defined with a "]},{"entry":[{},"@SafeReferences.path annotation whose "]},{"entry":[{},"type is t."]},{"entry":["10.","The message assembly type may not contain "]},{"entry":[{},"duplicate references to the same type t "]},{"entry":[{},"unless t is annotated with @ID , or all the "]},{"entry":[{},"fields of type t are annotated with"]},{"entry":[{},"@Containment or all the fields of type t are "]},{"entry":[{},"identified by paths within a @SafeReference "]},{"entry":[{},"annotation whose type is t. A duplicate "]},{"entry":[{},"reference is either a field within a List,"]},{"entry":[{},"or multiple fields of the same type."]},{"entry":["11.","The message assembly type (from its base "]},{"entry":[{},"types and references) may not contain"]},{"entry":[{},"more than 700 non-transient fields."]},{"entry":["12.","The message assembly type may not have "]},{"entry":[{},"more than five levels of nested types."]},{"entry":["13.","All fields annotated with @SharedReference "]},{"entry":[{},"should be ordered after all other fields in the "]},{"entry":[{},"schema, either by their default ordering, or "]},{"entry":[{},"by use of @XmlType.propOrder."]},{"entry":["14.","All fields described by paths within a "]},{"entry":[{},"@SharedReference must be duplicate"]},{"entry":[{},"references to the same type. A duplicate "]},{"entry":[{},"reference is either a field within a List,"]},{"entry":[{},"or multiple fields of the same type."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. Thus, the breadth and scope of a preferred embodiment should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 8","FIG. 7"]}]},"DETDESC":[{},{}]}
