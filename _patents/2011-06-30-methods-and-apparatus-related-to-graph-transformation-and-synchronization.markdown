---
title: Methods and apparatus related to graph transformation and synchronization
abstract: In one general aspect, a computer system can include instructions configured to store on a non-transitory computer-readable storage medium. The computer system can include a subgraph transformer configured to transform a plurality of subgraphs of a source graph into a plurality of transformed subgraphs, and configured to define a target graph that is a transformed version of the source graph based on the plurality of transformed subgraphs. The computer system can include a change detector configured to receive an indicator that a portion of the source graph has been changed, and a synchronization module configured to synchronize a portion of the target graph with the changed portion of the source graph.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09116968&OS=09116968&RS=09116968
owner: BMC SOFTWARE, INC.
number: 09116968
owner_city: Houston
owner_country: US
publication_date: 20110630
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This description relates to graph transformation and synchronization.","Known Extract, Transform, and Load (ETL) programs can be configured to operate on various types of tabular data, extensible mark-up language (XML) data, and so forth. These known ETL programs can be configured to, for example, transform data from one format compatible with a system into another format compatible with another system. These known ETL programs, however, may not be capable of processing graph data for graph-to-graph transformations in an efficient fashion. Graph data can be used to represent social networking relationships, document management systems, and so forth. Many graph-to-graph transformations can be difficult, or even impossible, to implement using known ETL programs. Thus, a need exists for systems, methods, and apparatus to address the shortfalls of present technology and to provide other new and innovative features.","In one general aspect, a computer system can include instructions configured to store on a non-transitory computer-readable storage medium. The computer system can include a subgraph transformer configured to transform a plurality of subgraphs of a source graph into a plurality of transformed subgraphs, and configured to define a target graph that is a transformed version of the source graph based on the plurality of transformed subgraphs. The computer system can include a change detector configured to receive an indicator that a portion of the source graph has been changed, and a synchronization module configured to synchronize a portion of the target graph with the changed portion of the source graph.","In another general aspect, a computer-readable storage medium can store instructions that when executed cause a processor to perform a process. The instructions can include instructions to access at least a portion of a source graph including a plurality of nodes and relationships between the plurality of nodes, and access at least a portion of a target graph including a plurality of nodes and relationships between the plurality of nodes. The instructions can include instructions to identify, based on a subgraph collection rule, a subgraph of the source graph starting at a node from the plurality of nodes identified as a source root node, and define, based on a transformation rule, a transformed subgraph based on the subgraph of the source graph. The instructions can also include instructions to modify a subgraph from the target graph based on the transformed subgraph.","In yet another general aspect, a computer-readable storage medium can store instructions that when executed cause a processor to perform a process. The instructions can include instructions to receive an indicator of a changed portion of a source graph including a plurality of nodes and relationships between at least a portion of the plurality of nodes, and identify, in response to the indicator, a subgraph of the source graph that includes the changed portion. The instructions can include instructions to identify a subgraph of a target graph corresponding with the subgraph of the source graph, and identify, based on a class graph, a node to be modified within the subgraph of the target graph where the node is an instance of a node included in a class of nodes from the class graph.","The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["180","190","180","18","190","19","180","190","18","18","19","19"]},"The target graph  is a transformed version of the source graph  that is transformed by (e.g., transformed using, converted by) a graph transformation module . In other words, the data in the source graph  can be the same as (or substantially the same as) the data in the target graph , but represented in a different form (e.g., a transformed form) within the target graph . For example, nodes included in the source graph  may be represented in a different fashion from nodes included in the target graph , relationships between nodes included in the source graph  may be represented in a different fashion within the target graph , and\/or attributes (e.g., nodes types, node characteristics, relationship characteristics) included in the source graph  may be represented in a different fashion from attributes included in the target graph . In some embodiments, the target graph  can be referred to as a transformed graph.","In some embodiments, the source graph  can be referred to as having a configuration (e.g., transform configuration) different from a configuration of the target graph . In some embodiments, the source graph  can be referred to as having a mapping or a format different from a mapping or format of the target graph . In some embodiments, transformation of the source graph  can be referred to as changing the mapping (or configuration) of the source graph . In some embodiments, the source graph  can be referred to as being mapped to the target graph . In some embodiments, at least some of the data (e.g., nodes, relationships, attributes) represented within the source graph  may not be represented in the target graph . In some embodiments, at least some of the data represented within the target graph  may not be represented within the source graph .","The source graph  can be transformed by the graph transformation module  into the target graph  so that data of (e.g., included in, represented within) the source graph  can be processed at the target system . In some embodiments, the target graph  can be initially produced (e.g., created) based on a transformed version of the source graph  by the graph transformation module  (which can be referred to as initial production). The target system  may be configured so that the data of the source graph  may not be processed at the target system  without being transformed into the target graph . For example, the target system  can be configured to operate based on a platform that is incompatible with a platform of the source system . Accordingly, a graph (such as source graph ) that may be processed at source system  may not be compatibly processed at the target system  without being transformed. Thus, the graph of the source system  may be transformed for processing (e.g., compatible processing) at the target system .","The source graph  can be synchronized with the target graph  by the graph transformation module  (after the target graph  has been initially produced). Specifically, changes to the source graph  can be synchronized (e.g., created, updated, deleted) within the target graph  by the graph transformation module . For example, a change to the source graph  can be transformed by the graph transformation module  into a transformed change to the source graph . The transformed change to the source graph  can be used to update the target graph , or can be otherwise incorporated into the target graph .","In some embodiments, when the target graph  (or a portion thereof) is synchronized with the source graph  (or a portion thereof), the target graph  may not be identical to a transformed version of the source graph . In other words, when the target graph  (or a portion thereof) is synchronized with the source graph  (or a portion thereof), the target graph  may be updated so that the target graph  is substantially similar to a transformed version of the source graph . In some embodiments, when the target graph  (or a portion thereof) is synchronized with the source graph  (or a portion thereof), the target graph  may be identical to a transformed version of the source graph .","The source graph  (and the source system ) can be identified as a source, because the source graph  (and the sources ) is an original version (or system) or an untransformed version of a graph. The target graph  (and target system ) can be identified as a target, because the target graph  (and target system ) is a target of a transformed version of the source graph .","As a specific example, the source system  can be a system configured to discover network devices, enterprise applications, and\/or business processes such as a BMC software Atrium Discovery and Dependency Mapping (ADDM) system. The target system  can be a system configured to generate impact relationships for use in a service model such as a BMC Software Configuration Management Database (CMDB) system. Source graph (or portions thereof) produced by (e.g., discovered by) and\/or processed using the ADDM system can be transformed into and\/or synchronized with target graphs (or portions thereof) produced by and\/or processed using the CMDB system using the graph transformation module .","As another specific example, the source system  can be a first social networking system and the target system  can be a second social networking system. The first social networking system may be configured to process graphs that may not be compatibly processed by the second social networking system. The graphs of the first social networking system may be transformed and\/or synchronized by the graph transformation module  so that the graphs can be compatibly processed by the second social networking system. A graph of a social network can include nodes representing users (or user accounts), and relationships within the graph can represent relationships between the users. In some embodiments, the source system  and or the target system  can be related to, for example, document management systems, and\/or so forth.","The source graph  and the target graph  can be stored as (or represented as) graph data rather than as tabular data in relational database or comma-separated value (CSV) files, or another type of data (e.g., extensible markup language (XML) data), that is adapted to represent one or more graphs. In other words, the source graph  and the target graph  are represented within graph storage models that directly represent nodes, relationships between nodes, and\/or attributes included within the graphs. Said differently, the source graph  and\/or the target graph  may be represented without using tabular data that is linked, for example, through database keys or other metadata to represent nodes and relationships between nodes.","Because the source graph  and the target graph  are stored as graph data, transformation and\/or synchronization performed by the graph transformation module  can be performed on the graph data. Thus, transformations and\/or synchronizations may be directly performed as graph-to-graph transformations and\/or synchronizations, rather the transformations and\/or synchronizations performed on tabular data, or another type of data, that is adapted to represent one or more graphs. In some instances, the synchronization and\/or transformation operations performed by the graph transformation module  may be impossible to perform on, for example, tabular data, and may only be performed on (e.g., performed efficiently on) graph data. More details related to the operations performed by the graph transformation module  are described below.","Although not shown, in some embodiments, at least a portion of the target graph  can be transformed for processing (e.g., compatible processing) at the source system  as a part of the source graph . In some embodiments, changes to the target graph  can be synchronized with the source graph . In such embodiments, the target graph  can function as a source graph in the source graph  can function as a target graph.","Although not shown in , in some embodiments, the target graph  can be associated with one or more graphs that are native to the target system . In other words, the target graph  can be combined with a graph that is originally associated with (e.g., defined for processing at) the target system . In such embodiments, the graph transformation module  can be configured to transform the graph that is originally associated with a target system  for processing at the source system . The transformed version of the graph can be associated with (e.g., combined with) the source graph . Also, in such embodiments, changes to the graph at the target system  can be transformed used to update (or can be otherwise incorporated into) the source graph , or a portion thereof.","In some embodiments, the graph transformation module  can be one or more scripts, or can be configured to implement one or more scripts. For example, a transformation script can be configured to transform at least a portion of the source graph  into a portion of the target graph . As another example, a synchronization script can be configured to synchronize at least a portion of the source graph  with a portion of the target graph . In some embodiments, one or more of the scripts can be, for example, executable modules. More details related to scripts of the graph transformation module  are discussed in connection with, for example, .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2A","FIG. 2B","FIG. 2A","FIG. 2A"],"b":["28","29","28","28","1","2","1","2","28","1","2","1","2","1","2"]},"As shown in , in the target graph , the computer U, the processors U, U, and the processes OA, OB, OC are each represented as separate nodes. Specifically, processors U and U are each represented as nodes having a relationship (e.g., a link) (represented by lines) with the computer U. The process OA is represented as a node having a relationship (represented by a line) with the processor U, and the processes OB an OC are each represented as nodes having a relationship (represented by lines) with processor U. When transformed from the source graph , the processors U, U, and the processes OA, OB, OC are extracted from the computer U and represented as individual nodes. In some embodiments, the transformation from the source graph  to the target graph  can be performed by a graph transformation module such as graph transformation module  shown in .","Although not shown in , in some embodiments, additional attributes and\/or nodes can be associated with any of the components illustrated within these figures. For example, additional attributes (e.g., process type, process duration, etc.) can be related to the processes OA, OB, and\/or OC. As another example, additional attributes (e.g., processor type, processor speed, internal memory capacity, core processor capabilities, etc.) can be related to the processors U and\/or U. In some embodiments, networks and\/or other computers can be associated with computer U, and\/or a portion thereof.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 3","b":["310","310","39","390","38","380","310","38","39","39","38"]},"After the target graph  has been defined (e.g., initially produced), changes to the source graph  (via the source system ) can be synchronized with the target graph . In some embodiments, portions (e.g., subgraphs) of the target graph  can be modified based on changes to the source graph . For example, one or more nodes, relationships between the one or more nodes, and\/or attributes can be added to or deleted from the target graph  based on changes to the source graph .","In this embodiment, initial production of the target graph  and\/or synchronization of the target graph  can be performed based on subgraphs of the source graph . A subgraph can be a portion of a graph. A subgraph of the source graph  can be referred to as a source subgraph, and a subgraph of the target graph  can be referred to as a target subgraph. For example, if the source graph  includes 100 nodes, a source subgraph of the source graph  can include less than all of the nodes of the source graph . Initial production of the target graph  can be performed by transforming the source subgraph of the source graph  and including the transformed source subgraph as part of the target graph. Synchronization of the target graph  can be performed based on a transformed version of the source subgraph of the source graph .","The graph transformation module  includes a subgraph collector  configured to identify and retrieve a source subgraph from the source graph  and\/or a target subgraph from the target subgraph . The collection of a subgraph can start with a root node identified by a root node identifier  of the subgraph collector . Nodes, relationships, and\/or attributes associated with the root node can be collected (e.g., used to define) the subgraph. In some embodiments, the root node and nodes, relationships, and\/or attributes associated with the root node can be collected to define a subgraph based on one or more subgraph collection rules  stored in a memory . In some embodiments, collection of a subgraph may not include actual retrieval of graph data related to the subgraph, but can include identification of graph data representing nodes, relationships between nodes, and\/or attributes associated with the subgraph.","For example, a subgraph collection rule (from the subgraph collection rules ) indicating that each host computer included within a graph representing a computer network should be identified as a root node. The subgraph collection rule can also indicate that each client computer having access to the host computer should be collected as subgraphs. Accordingly, subgraphs representing portions of the computer network can be collected from the graph representing the computer network.","As shown in , the graph transformation module  includes a subgraph transformer . Subgraph transformer  is configured to transform source subgraphs into transformed subgraphs (which can be referred to as transformed source subgraphs) that can be included in (e.g., included in an initial production of) and\/or synchronized with at least a portion of the target graph . The graph data of the source graph  (e.g., the tree structure of the source graph ) can be traversed to produce the target graph .","Transformations can be performed by the subgraph transformer  based on one or more transformation rules  stored in the memory . The transformation rules  can indicate a manner in which nodes, relationships between nodes, and\/or attributes may be handled (e.g., modified) when transforming a source subgraph into a target subgraph (which is a transformed version of the source subgraph). In some embodiments, one or more of the transformation rules  can be integrated into (e.g., integrated into instructions, scripts, code, etc.) the subgraph transformer .","For example, one or more transformation rules  can be used to transform attributes of a node in the source graph  into nodes for the target graph . As another example, one or more transformation rules  can be used to define a relationship between nodes for the target graph  from a portion of the source graph  that does not include the relationship between the nodes. In some embodiments, one or more transformation rules  can be configured to group and\/or ungroup nodes of the source graph  for the target graph . More details related to grouping nodes are discussed in connection with, for example, .","As illustrated by the line between the transformation rules  and the subgraph collection rules , the transformation rules  can be related to the subgraph collection rules . For example, one or more of the subgraph collection rules  can be defined so that a subgraph of the source graph  can be collected and can be efficiently transformed using one or more of the transformation rules . As a specific example, if a transformation rule from the transformation rules  is related to transformation of a particular type of node, one or more of the subgraph collection rules  can be defined so that a subgraph can be collected by the subgraph collector  using the particular type of node as a root node. Thus, the transformation rule can be efficiently implemented by the subgraph transformer  to perform a transformation of the particular type of node. In some embodiments, one or more of the subgraph collection rules  can be integrated into (e.g., integrated into instructions, scripts, code, etc.) the subgraph collector .","In some embodiments, one or more subgraph collection rules  can be defined based on (e.g., derived from) one or more transformation rules . For example, a transformation rule from the transformation rules  can be used to define a subgraph collection rule from the subgraph collection rules  so that a subgraph of the source graph  can be collected and can be efficiently transformed using the transformation rules.","In the case of initial production of the target graph , portions of the target graph  can be produced based on source subgraphs of the source graph  that are collected by the subgraph collector  based on one or more subgraph collection rules  and are transformed by the subgraph transformer  based on one or more transformation rules . For example, a source subgraph of the source graph  can be collected by the subgraph collector  based on a subgraph collection rule from the subgraph collection rules . The source subgraph can be transformed by the subgraph transformer  based on a transformation rule from the transformation rules . In some embodiments, the transformation rule can correspond with the subgraph collection rule. The transformed source subgraph can define (or can be used to define) at least a portion of the target graph . An example of initial production of a target graph based on a source graph is shown in .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 4A","FIG. 3","FIG. 3"],"b":["48","1","48","1","342","33","1","44","2","3","48","44","33","340"]},"After the source subgraph  has been identified, the source subgraph  is transformed into the transformed source subgraph  shown in . The source subgraph  can be transformed into the transformed source subgraph  by the subgraph transformer  based on one or more of the transformation rules  shown in . In this embodiment, a relationship between Q and Q is removed (e.g., deleted) from the source subgraph  and a relationship between Q and Q is added to the source subgraph  to define the transformed source subgraph .","As represented within , the transformed source subgraph  defines (or is used to define) at least a portion of a target graph . Although not shown in , additional nodes and\/or relationships between nodes may exist within the source graph  and\/or the target graph .","Referring back to , in the case of synchronization of the target graph  to the source graph , changes to the source graph  that are to be synchronized with the target graph  (e.g., an existing target graph) can be detected by a change detector  of the graph transformation module . For example, a node within the source graph  that has changed in response to, for example, an action triggered by a user of the source system  can be detected by the change detector . The change of the source graph  that is detected by the change detector  can be synchronized (or can be used to synchronize) the target graph  with the source graph .","As a specific example, an indicator of a change to the source graph  can be produced by the change detector . The indicator can be configured to trigger the subgraph collector  to collect a source subgraph related to the change to the source graph . The source subgraph can be collected so that the change to the source graph  is included in the source subgraph. Specifically, a source root node of the subgraph can be selected and used as a root of the source subgraph so that source subgraph will include the change to the source graph . The source subgraph related to the change to the source graph  can be transformed by the subgraph transformer  into a transformed source subgraph.","After the transformed source subgraph has been defined based on the source subgraph collected from the source graph  by the subgraph transformer , a target root node of the target graph  corresponding with the source root node of the source subgraph of the source graph  can be identified within the target graph  (by the root node identifier ). Starting from the target root node, a target subgraph of the target graph  can be collected (or identified) from the target graph . The target subgraph can be synchronized with the transformed source subgraph by a synchronization module  of the graph transformation module  so that the target subgraph will match the transformed source subgraph. In some embodiments, synchronization can be performed by the synchronization module  based on a key (e.g., node or other indicator) of the changed portion of the source graph  matching with a key of a portion of the target graph .","In some embodiments, the synchronization module  can be configured to synchronize one or more nodes, one or more relationship between nodes, and\/or attributes associated with nodes (or relationships) so that the target subgraph will match the transformed source subgraph. In some embodiments, the synchronizing performed by the synchronization module  can include any type of modification such as adding, deleting, updating, and\/or so forth. Because the target subgraph of the target graph  is already transformed relative to the source graph , the target subgraph of the target graph  is not transformed before being compared with the transformed source subgraph of the source graph . An example of synchronization of a target graph within a source graph is shown in .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 5A","FIG. 5A"],"b":["58","54","54","1","3","1","2","3","59","55","54","55","1","3","1","2","2","3"]},"As shown in , the source graph  is modified. Specifically, the source subgraph  is modified to include node X between nodes X and X. The change to the source subgraph  of the source graph  can be detected by, for example, the change detector  of the graph transformation module  shown in .","In response to the change to the source subgraph , a transformed source subgraph  is defined as shown in . The source subgraph  can be transformed into the transformed source subgraph  by the subgraph transformer  based on one or more of the transformation rules  shown in . In this embodiment, a relationship between X and X is deleted from the source subgraph  and a relationship between X and X is added to the source subgraph  to define the transformed source subgraph .","In some embodiments, a root node of the source subgraph  can be identified within the source graph  so that the transformed source subgraph  can be defined using the same root node as that of the source subgraph . In this embodiment, the root node can be node X. The root node X can be identified by the root node identifier  based one or more of the subgraph collection rules  shown in  and based on the portion of the source graph  that has been modified. In some embodiments, the source subgraph  can be identified based on one or more of the subgraph collection rules  by the subgraph collector  shown in .","After the transformed source subgraph  has been defined, a node in the target graph  that corresponds with the root node X in the source graph  is identified. In this embodiment, the node X in the target graph  corresponds with the root node X of the source graph  (as represented by the dashed double arrow). The correspondence between the root node X of the source graph  and the node X and the target graph  is identified so that a target subgraph of the target graph  that corresponds with the transformed source subgraph  can be identified and compared with the transformed source subgraph .","Based on the node X from the target graph  and based on one or more subgraph collection rules  shown in , a target subgraph  is identified (e.g., collected) within the target graph . After the target subgraph  has been identified, the target subgraph  can be compared with the transformed source subgraph . In some embodiments, the target subgraph  can be compared with the transformed source subgraph  so that the target subgraph  can be updated with any changes in the transformed source subgraph .","As represented within , the target subgraph  is updated with the changes in the transformed source subgraph . In some embodiments, the target subgraph  of the target graph  can be replaced with (e.g., can be replaced with an instance of) the transformed source subgraph . In some embodiments, comparison of the target subgraph  with the transformed source subgraph  and\/or modification of the target subgraph  based on the transformed source subgraph  can be performed by the synchronization module  of the graph transformation module  shown in .","Although not shown in , in some embodiments, if a node of a target graph corresponding to a source root node (of a changed portion) of a source graph is not found in the target graph, the transformed source subgraph can be identified as being a subgraph that is new to the target graph. In such embodiments, the transformed subgraph can be added to the target graph as a new portion of the target graph.","Although not shown in , if a node of a target graph corresponding to a source root node (of a changed portion) of a source graph is not found in the target graph, a search for a target subgraph of the target graph that may have portions that match with any portion of the transformed source subgraph can be conducted. If a match (excluding the source root node) between at least a portion of the transformed source subgraph is found in a target subgraph of the target graph, the target subgraph may be modified based on the transformed source subgraph.","Also, although not shown in , if a transformed source subgraph matches a target subgraph, the target subgraph may not be updated and the transformed source subgraph can be discarded. The target subgraph may not be modified because the target subgraph already matches with the transformed source subgraph and synchronization may not be needed. Although not shown in , additional nodes, relationships between nodes, and\/or attributes may exist within the source graph  and\/or the target graph .","Some portions of the procedure shown in  can be performed in a different order. For example, a node from the target graph  corresponding with the root source node X of the source graph  can be identified before the source subgraph  is transformed to define the transformed source subgraph .","In some implementations, the graph transformation module  can be configured to operate at a host device. In such implementations, the graph transformation module  can be configured to access, through a network, the source system  and\/or the target system . In some embodiments, the functionality of the graph transformation module  can be called and\/or executed on an on-demand basis (e.g., in response to the event data ). In some implementations, the graph transformation module  can function as a background application operating in conjunction with the source system  and\/or the target system . In some implementations, the graph transformation module  can function as an application (or service) that can be accessed via an application programming interface (API).","The graph transformation module  can be, or can include, any type of hardware and\/or software configured to process graph data, send notifications, and process feedback. In some implementations, one or more portions of the components shown in the graph transformation module  in  can be, or can include, a hardware-based module (e.g., a digital signal processor (DSP), a field programmable gate array (FPGA), a memory), a firmware module, and\/or a software-based module (e.g., a module of computer code, a set of computer-readable instructions that can be executed at a computer). For example, in some implementations, one or more portions of the graph transformation module  can be, or can include, a software module configured for execution by at least one processor (not shown). In some implementations, the functionality of the components can be included in different modules and\/or different components than those shown in . For example, although not shown, the functionality of the subgraph collector  can be included in a different module than the subgraph collector , or divided into several different modules.","Although not shown, in some implementations, the graph transformation module  (or portions thereof), the source system  (or portions thereof), and\/or the target system  (or portions thereof) can be configured to operate within, for example, a data center (e.g., a cloud computing environment), a computer system, one or more server\/host devices, and\/or so forth. In some implementations, the graph transformation module  (or portions thereof), the source system  (or portions thereof), and\/or the target system  (or portions thereof) can be configured to operate within a network. Thus, the graph transformation module  (or portions thereof), the source system  (or portions thereof), and\/or the target system  (or portions thereof) can be configured to function within various types of network environments that can include one or more client devices and\/or one or more server devices. For example, the network can be, or can include, a local area network (LAN), a wide area network (WAN), and\/or so forth. The network can be, or can include, a wireless network and\/or wireless network implemented using, for example, gateway devices, bridges, switches, and\/or so forth. The network can include one or more segments and\/or can have portions based on various protocols such as Internet Protocol (IP) and\/or a proprietary protocol. The network can include at least a portion of the Internet.","The graph transformation module , the source system , and\/or the target system  can be configured to operate based on one or more platforms (e.g., one or more similar or different platforms) that can include one or more types of hardware, software, firmware, operating systems, runtime libraries, and\/or so forth. In some implementations, the graph transformation module , the source system , and\/or the target system  can represent a cluster of devices (e.g., a server farm). In such an implementation, the functionality and processing of the graph transformation module , the source system , and\/or the target system  can be distributed to several devices of the cluster of devices.","Although not shown, in some implementations, the memory  can be implemented as more than one memory component (e.g., more than one random-access memory (RAM) component or disk drive memory) associated with the graph transformation module . In some implementations, the memory  can be a database memory. In some implementations, the memory  can be, or can include, a non-local memory. For example, the memory  can be, or can include, a memory shared by multiple devices (not shown). In some implementations, the memory  can be associated with a server device (not shown) within a network and configured to serve the graph transformation module .",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 6","FIG. 6","FIG. 3"],"b":"310"},"A plurality of subgraphs of a source graph are transformed into a plurality of transformed subgraphs (block ). In some embodiments, each subgraph from the plurality of subgraphs of the source graph is collected based on one or more subgraph collection rules (e.g., subgraph collection rules  shown in ), and one or more transformation rules (e.g., transformation rules  shown in ).","A target graph that is a transformed version of the source graph is defined based on the plurality of transformed subgraphs (block ). In some embodiments, one or more of the plurality of transformed subgraphs are coupled (via relationships) to form the target graph. The target graph can be initially produced based on the plurality of subgraphs of the source graph. The target graph can be compatibly processed by a target system that may not be configured to process the source graph.","An indicator that a portion of the source graph has been changed is received (block ). In some embodiments, the indicator can be produced by the change detector  shown in . In some embodiments, one or more nodes of the source graph and\/or one or more relationships between nodes of the source graph can be changed.","A portion of the target graph is synchronized with the changed portion of the source graph (block ). In some embodiments, the portion of the target graph can be a subgraph that is synchronized with the portion of the source graph. In some embodiments, the portion of the source graph can be a subgraph that is transformed and compared with the portion of the target graph, which can also be a subgraph. The portion of the target graph can be updated with changes to the transformed subgraph of the source graph.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 7","FIG. 7","FIG. 3"],"b":"310"},"At least a portion of a source graph including a plurality of nodes and relationships between the plurality of nodes is accessed (block ). In some embodiments, the plurality of nodes and relationships between the plurality of nodes of the source graph can be stored (e.g., stored at a source system) or represented using graph data.","At least a portion of a target graph including a plurality of nodes and relationships between the plurality of nodes is accessed (block ). In some embodiments, the plurality of nodes and relationships between the plurality of nodes of the target graph can be stored (e.g., stored at a target system) or represented using graph data.","A subgraph of the source graph starting at a node from the plurality of nodes identified as a source root node is identified based on a subgraph collection rule (block ). In some embodiments, the subgraph collection rule can be one or more of the subgraph collection rules  shown in . In some embodiments, the source root node can be identified based on a type of transformation that will be performed on the subgraph of the source graph. In other words, the type of transformation that is performed on the subgraph of the source graph can dictate which node from the source graph is selected as a source root node. Also, the nodes and\/or relationships between nodes included in the subgraph can be selected based on the transformation that is performed on the subgraph of the source graph.","A transformed subgraph is defined based on a transformation rule and based on the subgraph of the source graph (block ). In some embodiments, the transformed subgraph can be referred to as a transformed source subgraph. In some embodiments, the transformation rule can be, for example, one or more of the transformation rules  shown in . In some embodiments, the transformation rule can be used to derive the subgraph collection rule described above.","A subgraph from the target graph is modified based on the transformed subgraph (block ). In some embodiments, the subgraph of the target graph (which can be referred to as a target subgraph) can be identified (e.g., collected) based on one or more subgraph collection rules such as the subgraph collection rule described above in connection block . In some embodiments, the subgraph of the target graph can be identified based on a root node that corresponds with the source root node described in connection with block .",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 8A","FIG. 8A","FIG. 8A","FIG. 8A"]},{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 8B","FIG. 8A","FIG. 8B"]},"If a log of (e.g., a log file of, a record, a log detailing, a history file) the change to the source subgraph is available, the removal of the VMware Program X from the source subgraph to produce the modified source subgraph shown in  can be determined. The information about the removal can be used in conjunction with a transformed version of the modified source subgraph to remove from the target subgraph the VMware Server X\u2032 and the VMware Enabler X\u2032, which were both derived from the VMware Program X (which is no longer included in the source subgraph). The target subgraph (which can be referred to as a synchronized target subgraph or as a modified target subgraph) without the VMware Server X\u2032 in the VMware Enabler X\u2032 is shown in . Thus, the target subgraph shown in  can be synchronized with the modified source subgraph shown in  to produce the synchronized target subgraph shown in  based on a log of the change to the source subgraph.","If a log of the change to the source subgraph is not available, synchronizing the target subgraph with the changed source subgraph can be performed based on one or more class graphs (or class subgraphs). The class graph can be a representation (e.g., a generic representation) that includes classes (e.g., types) of nodes (which can be referred to as potential nodes or as projected nodes) that have a probability (e.g., possibility) of being included in the source subgraph, and\/or have a probability (e.g., possibility) of being derived from (e.g., transformed from) the source subgraph for the target subgraph. In some embodiments, the class graph can include all of the possible classes of nodes (e.g., potential nodes), relationships, and\/or so forth that could have been included in (e.g., have a probability of being included in) a source subgraph and\/or a target subgraph. The class graph can also include all of the possible classes of nodes (e.g., potential nodes), relationships, and\/or so forth that can be included in (or should be removed from) the target subgraph (after being derived from the source subgraph). In some embodiments, the class graph can include all of the possible classes of nodes (e.g., potential nodes), relationships, and\/or so forth that may have been included in (e.g., have a probability of being included in) the source graph, but are currently excluded (e.g., deleted) from the source graph after the source subgraph has been modified.","In some embodiments, a class graph can be produced using a script (e.g., a class script). In some embodiments, a class graph can be produced (e.g., inferred) based on transformations of nodes, relationships, and\/or attributes defined within a transformation script. In some embodiments, a class graph can be represented as a script (e.g., a class script) that can be executed during synchronization of a target subgraph with a source subgraph. In some embodiments, one or more class graphs (or subgraphs) can be produced by a class graph definition module (e.g., produced by a class graph definition module based on a transformation script).","In this example embodiment, because the VMware Program X is no longer part of the modified source subgraph shown in , the VMware Server X\u2032 and the VMware Enabler X\u2032 may not be properly removed from the original target subgraph (shown in ) without information indicating that the original source subgraph (shown in ) included a precursor (to the VMware nodes) that has since been removed from the modified source subgraph. In other words, the class graph can be used as a reference to determine one or more nodes, relationships, and\/or attributes (and\/or derivations thereof) that have been removed from the original source subgraph to produce the modified source subgraph, and should also be removed (e.g., removed after being transformed) from the original target subgraph to produce the synchronized subgraph.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 8D","FIG. 8A","FIG. 8B","FIG. 8D","FIG. 8E","FIG. 8D"],"b":["811","813","801","801","801","811","801","811"]},{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIG. 8E","FIG. 8D","FIG. 3","FIG. 8D","FIG. 8D","FIG. 8D","FIG. 8E","FIG. 3"],"b":["350","801","801","803","805","803","805","350"]},"As mentioned above, if a log of changes to the source subgraph (from the original source subgraph  to the modified source subgraph ) is not available, the target class graph (shown in ) can be used to determine changes that should be made to the original target subgraph shown in  to arrive at the synchronized target subgraph shown in . Specifically, the target class graph shown in  can be used to search for instances of each class of nodes that could be included in the original target subgraph shown in  and should be removed from the original target subgraph to arrive at the synchronized target subgraph shown in . After instances of nodes are identified based on the class graphs, instances of nodes can be removed, if necessary, from the original target subgraph shown in  to produce the modified target subgraph shown in  based on a comparison of the modified source subgraph shown in  (and\/or the original source subgraph shown in , if available) with the original target subgraph shown in .","For example, because the target class graph includes the server class , instances of nodes of the server class  can be located (e.g., searched, identified) and removed from the original target subgraph shown in , if necessary. In this embodiment, the Apache Server W\u2032 and the VMware Server X\u2032 are included in the original target subgraph shown in . Because no VMware Program instance from which the VMware Server X\u2032 could be derived appears in the original source subgraph (shown in ), the VMware Server X\u2032 can be removed when producing the synchronized target subgraph shown in .","Also, because the target class graph includes the enabler class , instances of nodes of the enabler class  can be located (e.g., searched, identified) and removed from the original target subgraph shown in , if necessary. Searching for instances of nodes of the enabler class  might not otherwise occur (e.g., be triggered) without the target class graph, which includes the enabler class  as an indicator of the possibility of instances of nodes of the enabler class . In particular, searching for instances of nodes of the enabler class  might not be triggered by an analysis of the modified source subgraph shown in , because nodes that could be converted into nodes of the enabler class  are no longer present in the source subgraph shown in  (and these changes may not be recorded in a log). In this case, the original target subgraph shown in  includes the VMware Enabler X\u2032. Because precursors to the VMware Enabler X\u2032 are not present in the modified source subgraph, the VMware Enabler X\u2032 is removed from the original target subgraph shown in  to produce the synchronized target subgraph shown in .","Although the class graphs shown in  focus on nodes, a class graph can also include relationships (e.g., potential relationships, projected relationships) and\/or attributes (e.g., potential attributes, projected attributes) that can be derived from (e.g., copied from, transformed from) a source subgraph and included in a target subgraph. In some embodiments, one or more class graphs such as the class graph shown in  can be stored in the memory  of the graph transformation module  shown in . In some embodiments, the graph transformation module  shown in  can be configured to identify class graphs that correspond with a modified source subgraph (and\/or the original source subgraph). Specifically, the graph transformation module  can be configured to identify a source root node of a modified source subgraph (and\/or the original source subgraph), and the transformation module  can be configured to determine that the source root node corresponds with a root node of a source class graph (and\/or target class graph). In some embodiments, the synchronization module  can be configured to use, as described above, one or more class graphs to synchronize (e.g., modified) one or more target graphs with one or more source subgraphs.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":["FIG. 9","FIG. 9","FIG. 3"],"b":"310"},"An indicator of a changed portion of a source graph including a plurality of nodes and relationships between the plurality of nodes is received (block ). In some embodiments, the indicator of the changed portion of the source graph can be produced by a change detector (e.g., change detector  shown in ). In some embodiments, the change portion of the source graph can include a node that has been removed (e.g., deleted) from the source graph.","A subgraph of the source graph that includes the changed portion is identified in response to the indicator (block ). In some embodiments, the subgraph of the source graph that includes the changed portion can be identified by a subgraph collector such as subgraph collector  shown in . The subgraph of the source graph can be identified based on one or more subgraph collection rules (e.g., subgraph collection rules  shown in ).","A subgraph of a target graph corresponding with the subgraph of the source graph is identified (block ). In some embodiments, the class graph can be associated with the subgraph of the source graph based on a root node of the subgraph of the source graph (by the subgraph collector  shown in ). For example, in some embodiments, a target root node of the subgraph of the target graph corresponding with a source root node of the subgraph of the source graph can be identified, and the target graph can be collected from the target root node.","Based on a class graph, a node to be modified (e.g., updated, removed, inserted) within the subgraph of the target graph is identified where the node is an instance of a node included in a class of nodes from the class graph (block ). In some embodiments, the identification of the node can be triggered by the class of nodes included in the class graph, which can be a target class graph. In some embodiments, the synchronization module  shown in  can be configured to identify and then modify the subgraph of the target subgraph based on the subgraph of the source graph and the class graph.","Referring back to , the graph transformation module  includes a script analyzer  and a script generator . The script analyzer  is configured to analyze, for example, a transformation script configured to perform one or more transformation functions associated with graph presentation module . For example, a transformation script can be included in, and\/or operated by, the subgraph transformer  shown in . The transformation script can be configured to, for example, loop over nodes (and\/or relationships between nodes) within the source graph , manipulate attribute values, define (e.g., construct desired) target nodes within the target graph , and\/or so forth.","The script analyzer  can be configured to determine a manner in which the transformation script handles one or more portions of the source graph  to produce the target graph . Specifically, the script analyzer  can be configured to determine, for example, that the transformation script processes nodes, root nodes, relationships between nodes, and\/or attributes in a particular order, during a specified time period, using a specified transformation, and\/or so forth. In some embodiments, the analysis performed by the script analyzer  can be referred to as a static analysis (e.g., a static analysis of the transformation script). The analysis performed by the script analyzer  is directly performed on the transformation script and is independent of any specific source graph (or portion thereof) and\/or specific target graph (or portion thereof).","Based on the analysis performed by the script analyzer , the script generator  can be configured to produce a collection script, a synchronization script, and\/or a class script. The collection script can be included in, and\/or operated by, the subgraph collector  to identify (e.g., collect) subgraphs within the source graph  and\/or the target graph . The synchronization script can be included in, and\/or operated by, the synchronization module  to synchronize one or more portions of the target graph  with one or more portions of the source graph .","Because the script analyzer  and the script generator  can be configured to collectively process a transformation script that can be used to produce a collection script, a synchronization script, and\/or a class script, a collection script, a synchronization script, and\/or a class script associated with the transformation script do not need to be separately produced. Thus, a user (e.g., an administrator) of the graph transformation module  can define a transformation script that can be analyzed by the graph transformation module , which can automatically produce a collection script, a synchronization script, and\/or a class script that does not need to be separately produced (e.g., programmed) by the user of the graph transformation module .",{"@attributes":{"id":"p-0104","num":"0103"},"figref":["FIG. 10","FIG. 3"],"b":["1020","1030","1010","1020","1030","1010","310","360","365","310"]},"The transformation script  can be any type of script that can be configured to implement a transformation of a source graph (or portion thereof) into a target graph (or portion thereof). In other words, the transformation script  can be configured to process nodes, relationships between nodes, and\/or attributes of a source graph to produce a target graph. The transformation script  can include, for example, for loops that can be used to process graph data representing portions (e.g., nodes, relationships, attributes) of a source graph, if statements that may specify a variety of alternatives for processing portions (e.g., nodes, relationships, attributes) of a source graph, and\/or so forth. In some embodiments, at least some portions of code branches, variable assignments, and\/or so forth can by analyzed when producing the collection script  and\/or synchronization script  based on the transformation script .","As a specific example, the transformation script  can be configured to transform certain types of nodes, relationships, and\/or attributes. In some embodiments, the transformation script  can be configured to start with a particular node as a root node. Accordingly, the collection script , when defined by the graph transformation module  (shown in ) based on the transformation script , can be configured to identify the certain types of nodes, root nodes, attributes, and\/or relationships for a subgraph. Similarly, the synchronization script , when defined by the graph transformation module  (shown in ) based on the transformation script , can be configured to synchronize the certain types of nodes, root nodes, attributes, and\/or relationships between a subgraph of a source graph and a subgraph of a target graph.","In some embodiments, one or more of the scripts (e.g., transformation script , collection script , synchronization script ) can be, for example, a standalone executable file, a single-use method, and\/or so forth. In other words, one or more of the scripts can be a computer program that can be written in any form of programming language, including compiled or interpreted languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. In some embodiments, one or more of the scripts can be configured to generate programming code that can be used to process (e.g., manipulate) one or more graphs (or graph data) and\/or can be configured to produce runtime data associated with one or more one or more graphs (or graph data).",{"@attributes":{"id":"p-0108","num":"0107"},"figref":["FIG. 11","FIG. 11"]},"In the second section, the transformation script is configured to follow (e.g., traverse Interface relationships to NetworkInterface nodes, and create either an IPv6Address or an IPv4Address (which can be attributes). The address nodes are linked to the System nodes, and the transformation script can be configured to resolve whether Address relationships can be linked to an IPv6Address or an IPv4Address. Although not shown in , a collection script and\/or a synchronization script and\/or source and target class graphs can be derived from the transformation script shown in .",{"@attributes":{"id":"p-0110","num":"0109"},"figref":["FIGS. 12A and 12B","FIG. 12A"],"b":["1","2","3","4","1","2","4","80"]},"As shown in , some of nodes in the source subgraph shown in  are grouped into a second level of nodes  (represented with dashed circles) inserted between the root node and the first level of nodes . Specifically, nodes K and K are collapsed into a single node (within the second level of nodes ) and the collapsed node is related to node K and node K in the first level of nodes . In this embodiment, node K is included in both the first level of nodes  and the second level of nodes .","In some embodiments, the nodes K and K can be collapsed in the second level of nodes  because they are related to a particular type of product, and the individual nodes K and K can be included in the first level of nodes  as instances of the particular type of product. Thus, the second level of nodes  can represent products (e.g., a product layer) and the first level of nodes  can represent instances of the product (e.g., an instance layer). In some embodiments, the nodes in the second level of nodes  can be renamed as product nodes.","The pseudo-code below can be code specifically adapted for transformations that involve grouping of nodes such as that shown in .",{"@attributes":{"id":"p-0114","num":"0113"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for each node:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"generate key"]},{"entry":[{},"group with key:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"perform operations for group"]},{"entry":[{},"for each node in group:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"perform operations for nodes."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"figref":["FIGS. 12A and 12B","FIG. 10","FIGS. 12A and 12B","FIG. 12A","FIG. 12B","FIG. 12B","FIG. 12A"],"b":"1010"},"Implementations of the various techniques described herein may be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. Implementations may implemented as a computer program product, i.e., a computer program tangibly embodied in an information carrier, e.g., in a machine-readable storage device (computer-readable medium) for processing by, or to control the operation of, data processing apparatus, e.g., a programmable processor, a computer, or multiple computers. A computer program, such as the computer program(s) described above, can be written in any form of programming language, including compiled or interpreted languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program can be deployed to be processed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.","Method steps may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method steps also may be performed by, and an apparatus may be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the processing of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. Elements of a computer may include at least one processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer also may include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory may be supplemented by, or incorporated in special purpose logic circuitry.","To provide for interaction with a user, implementations may be implemented on a computer having a display device, e.g., a cathode ray tube (CRT) or liquid crystal display (LCD) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.","Implementations may be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation, or any combination of such back-end, middleware, or front-end components. Components may be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.","While certain features of the described implementations have been illustrated as described herein, many modifications, substitutions, changes and equivalents will now occur to those skilled in the art. It is, therefore, to be understood that the appended claims are intended to cover all such modifications and changes as fall within the scope of the embodiments. It should be understood that they have been presented by way of example only, not limitation, and various changes in form and details may be made. Any portion of the apparatus and\/or methods described herein may be combined in any combination, except mutually exclusive combinations. The embodiments described herein can include various combinations and\/or sub-combinations of the functions, components and\/or features of the different embodiments described."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 4A through 4C"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 5A through 5E"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 8A through 8E"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 12A and 12B"}]},"DETDESC":[{},{}]}
