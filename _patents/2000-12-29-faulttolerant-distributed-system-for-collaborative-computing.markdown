---
title: Fault-tolerant distributed system for collaborative computing
abstract: A fault-tolerant distributed collaborative computer system is provided that comprises a plurality of server computers interconnected via a high-speed link. By replicating the conference information on more than one server computer, the single point of failure limitation is eliminated. In fact, if a server hosting or participating in a conference malfunctions, the failure is detected by other server computers and the client computer is able to reconnect to the conference through a new server computer. In addition, the state of processes executed by the server computers is periodically replicated, so that when failure of a process is detected a new processes can be spawned and the replicated state information loaded onto the new process, allowing the on-line conference to continue.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07069298&OS=07069298&RS=07069298
owner: WebEx Communications, Inc.
number: 07069298
owner_city: San Jose
owner_country: US
publication_date: 20001229
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO CD-ROM APPENDIX","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","ALTERNATE EMBODIMENTS"],"p":["An Appendix containing a computer program listing is submitted on a compact disk, which is herein incorporated by reference in its entirety. The total number of compact discs including duplicates is two. Appendix A, which is part of the present specification, contains a list of the files contained on the compact disk. These listings contain material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the patent and trademark office patent file or records, but otherwise reserves all copyright rights whatsoever.","1. Field of the Invention","The present invention relates generally to computer networks and, more particularly, to collaborative computing over a computer network.","2. Description of the Related Art","Traditional collaborative computing tools allow computer users at different locations to communicate via a computer network and share documents or applications stored and\/or executed on one the user's computers. While both peer-to-peer and client-server communication models have been used in the past, web-based collaborative tools generally employ a client-server model.","For example, client-server application sharing (also discussed in the context of \u201cdistributed computing\u201d) is described in U.S. Pat. No. 5,434,852 \u201cDistributed Processing Architecture for Control of Broadband and Narrowband Communication Networks;\u201d U.S. Pat. No. 5,887,170 \u201cSystem for Classifying and Sending Selective Requests . . . ;\u201d and U.S. Pat. No. 6,038,593 \u201cRemote Application Control for Low Bandwidth Application Sharing,\u201d all incorporated herein by reference in their entireties. Other group communication techniques are described by Ulrick Hall and Franz J. Hauck, \u201cPromondia: A Java-Based Framework for Real-time Group Communication in the Web,\u201d Proceedings of Sixth International World Wide Web Conference (Apr. 7\u201311, 1997); Lane Boyd, \u201cTaking Collaboration Into Orbit,\u201d Computer Graphics World, Vol. 21, No. 9, p. 36 (September 1998); and Eric Ly, \u201cDistributed Java Applets for Project Management on the Web,\u201d IEEE Internet Computing Online, Vol. 1, No. 3 (May\/June 1997), all incorporated herein by reference in their entireties.","International Telecommunications Union (ITU) Standard T.120 is a family of open standards that provides both communications and applications protocols to support real-time multipoint data communications for collaboration and conferencing, among other uses. This standard is outlined in 120 by DataBeam Corp. (May 14, 1997), incorporated herein by reference in its entirety.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 1A","FIG. 1A","FIG. 1B","FIG. 1B"],"b":["100","110","120","130","110","120","110","120","110","110","110","110","120","120","120","120"],"i":["n ","n ","n ","n ","n","n ","n ","n "]},"The system and method of the present invention provide a distributed collaborative computer system that is scalable to handle an arbitrary number of conference participants and eliminates the server as the single point of failure in the system. This is accomplished by providing a plurality of server computers interconnected via one or more high-speed links. A fault-tolerant distributed collaborative computer system is provided that comprises a plurality of server computers interconnected via a high-speed link. By replicating the conference information on more than one server computer, the single point of failure limitation is eliminated. In fact, if a server hosting or participating in a conference malfunctions, the failure is detected by other server computers and the client computer is able to reconnect to the conference through a new server computer. In addition, the state of processes executed by the server computers is periodically replicated, so that when failure of a process is detected a new processes can be spawned and the replicated state information loaded onto the new process, allowing the on-line conference to continue.","The use of the same reference symbols in different drawings indicates similar or identical items.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 2A","FIGS. 1A and 1B"],"b":["200","210","220","130","210","220","220","230","230","130","130","1","3"],"i":["n ","n ","n ","n","n "]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2B","b":["210","220","210","210","210","225","220","130","220","220","230","210","210","225","220","130","210","225","230","225","210","210","225","230","225","210","230","225","225","230","210","210"],"i":["n ","n "]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":"300"},"Distributed collaborative computer system  includes meeting zones (where n=A, B, C), client browser , web zone  and central operation database . Client browser  is a web browser program executed on one of client computers (). Client browser  first connects to web zone  to request starting or joining a conference. Web zone , in turn, verifies the user and conference information and updates central operation database  accordingly. Once web zone  has verified that the user is authorized to start\/join a conference, client browser  connects to one of meeting zones to access the conference. Meeting zone , in turn, connects client browser  to the desired conference and updates central operation database  accordingly.","Web zone  includes a web server  that maintains a website to allow users to access distributed collaborative computer system  and a web database  that stores web usage and administrative information about users of distributed collaborative computer system . The information stored in web database  is periodically synchronized and\/or replicated with the information stored in central operation database  to ensure data consistency.","Each meeting zone , in turn, includes a meeting manager , a ping server , a license manager , a meeting database , a log server , collaboration (CB) servers , and application (App) servers . Furthermore, each meeting zone also includes a process manager (PM) . Process manager  is the controlling process for all logical servers running on a physical server within the meeting zone. PM  thus monitors the health of all logical servers and processes running on the physical server and spawns replacement processes on failure. Alternatively, PM  can start new processes on command from remote access service (RAS) .","In one embodiment of the present invention, a single instance of meeting zone A is implemented on one physical server (i.e., one machine).","In some embodiments, each meeting zone is implemented on a single physical server. One of ordinary skill will readily appreciate, however, that multiple physical servers could also be used either as hot or warm standby units for redundancy or to spread the logical server loading across multiple machines, each with its own PM. Alternatively, several meeting zones could be implemented on one physical server, either having their own PM, or sharing a single PM.","PM  spawns each logical server (e.g., CB servers A, B, C; App server A, B, C; meeting manager , ping server , log server , and license manager ) as directed by a startup configuration file or operator command through RAS . RAS  is, in some embodiments, a real-time messaging service such as TIBCO Rendezvous, available from TIBCO Software, Inc. of Palo Alto, Calif.","Each logical server has its own communications and control module known as a zone manager (ZM). Conceptually, each ZM  is functionally similar although one of ordinary skill in the art will appreciate that implementation optimizations may allow for reduced functionality in some instances of ZM .","Meeting manager  also possesses a special zone manager , so designated because it also acts as a gatekeeper (GK) for the entity meeting zone . The GK maintains a subset of the state of each logical server so that meeting manager  has immediately available the detailed status of the entire meeting zone .","Each ZM, which is spawned (created) in direct correspondence to each logical server or autonomous process on a given physical server machine, monitors the health and status of its corresponding logical server or process. All logical server communications with other logical servers and with the process manager  go through the ZM in each logical server and the PM.","The operational functions of PM , RAS , ZM , and ZM\/GK  are discussed in further detail below.","All ZMs report to a single \u201csuper ZM\u201d, known as the gatekeeper or ZM\/GK. Each ZM sends a subset of its corresponding logical server's state and traffic capacity to the ZM\/GK so that the GK is aware of the status of all elements of the meeting zone. This enables the meeting manager to get coordinated zone state reports and therefore \u201cknow\u201d the status of the entire meeting zone.","Zone status is important to the meeting manager (and thus to the overall health and efficiency of the zone) because the meeting manager uses ZM\/GK state reports to manage both the zone's overall quality of service (QoS) and the load balance across all active collaboration servers (CBs) in the zone.","QoS, in this context, refers to the zone's ability to respond to client data requests of all types (e.g., HTTP, application sharing, document sharing, telephony, and so forth). In addition, QoS is an indirect indicator of latency to those requests, caused by high and possibly unbalanced loading of the logical servers in the meeting zone. For example, in some embodiments of the present invention, a meeting manager faced with a need to add more user participants to an in-progress meeting must determine if an additional CB server must be spawned (i.e., brought on-line) to keep overall CB server loading below a certain threshold. This \u201cintelligence\u201d in the MM is implemented through the ZMs in each CB and the coordinating function of the ZM\/GK reporting to the MM. The MM can thus decide if the pre-defined QoS for the specific user client (perhaps determined by the time of day, the user's license, or the type of service purchased by the user or some communication thereof, to name but a few examples), would be unobtainable without additional CB server resources. If so, the meeting manager will request that the process manager spawn a new CB server.","Once client browser  has received authorization to start\/join a conference, client browser  attempts to connect to ping servers  in multiple meeting zones . Client browser  selects the first ping server to respond to the connection request and disconnects other responding ping servers . The selected ping server, in turn, forwards the request to start\/join a conference to a meeting manager  in the same meeting zone as the selected ping server . Meeting manager , in turn, assigns a CB server to host\/handle the conference. The selected CB server connects to client browser  and any other CB servers handling the conference that the user wishes to start\/join. Thus, client browser  communicates with other client browsers  via the selected CB server ","App servers are used by CB servers and client browsers  to support services such as document view, file sharing, video, voice over IP, telephony, polling, chat and application sharing. Collaborative support for these services are further described in the following references, each incorporated herein by reference in its entirety:\n\n","Log server  communicates with meeting manager  via their respective ZMs  and  and stores information related to new users joining\/leaving conferences and updates meeting database . License manager  communicates with meeting manager  (again, through ZMs  and ) and polls meeting database  to ensure that the number of users authorized to join a meeting is not exceed.","Overall fault tolerance is ensured by providing process-level fault monitoring by the ZM and correction (e.g., process replacement) by the PM. At the logical server level, the MM uses ZM\/GK sate monitoring to detect logical server faults and PM commands to spawn replacements. Logical server state replication is also provided by the gatekeeper, using the meeting database. Finally, physical server fault tolerance is provided by operator hardware and environmental status using a combination of manual and RAS monitoring and control methods well-known in the art.",{"@attributes":{"id":"p-0050","num":"0059"},"figref":["FIGS. 4A\u20134C","FIG. 3"],"b":["400","300"]},"First, in stage , client browser  connects to a web server . If the connection is successful (stage ), operation  proceeds to stage , otherwise stages  and  are repeated. In stage , the user of client computer  logs on to web server . In stage , the information entered by the user in stage  is authenticated with information stored in web database . If the information entered by the user cannot be authenticated, stages  and  may be repeated until the information entered by the user is successfully validated. In some embodiments, client browser  is disconnected after a predetermined number of login attempts to prevent unauthorized access to web server . As those skilled in the art are familiar with techniques for preventing\/deterring unauthorized access to a website, these techniques are not further discussed herein.","Once the user has successfully logged on to web server , stage  determines whether the user is requesting to start a new conference or join an existing conference. If the user is requesting to join a new conference, operation  proceeds to stage , otherwise operation  proceeds to stage .","In stage , meeting parameters are extracted from meeting database  through web database . In stage , a plug-in for client browser  is launched on client computer (). The first time the user of client browser  connects to web server , the plug-in is downloaded over global-area network  and installed on the client computer . After the plug-in is installed on client computer , it can be re-used for subsequent conferences without the need for downloading and reinstalling it. In some embodiments, multiple versions of the plug-in are used over time: when a new version of the plug-in becomes available on web server , the new plug-in is downloaded to client computer and installed in place of the older version of the plug-in.","In stage , the meeting parameters are sent from meeting database  (via web database ) to client computer and operation  proceeds to stage  ().","In stage , client browser  attempts to connect to any available ping server . In stage , responses are received from one or more ping servers . In some embodiments, if no response is received within a predefined time limit, stages  and  are repeated until a response is received within either the original time limit or a newly defined time limit. Client browser  selects the fastest ping server  to respond to the connection request (stage ) and disconnects the non-selected ping servers  (stage ). Client browser  then sends a request to join a meeting to the selected ping server  (stage ) and ping server  forwards the request to a meeting manager (MM)  (stage ) in the same meeting zone () as ping server .","Upon receiving the request to join a meeting, meeting manager  selects a collaboration (CB) server from a pool of available CB servers in the meeting zone (stage ). In stage  (), the selected CB server queries other CB servers in all meeting zones to ascertain which CB server is hosting the meeting to which the user of client browser  is attempting to connect. Once client CB server locates the hosting CB server , it connects to the hosting CB server (stage ). Client CB server then makes a local copy of the meeting data from hosting CB server ","Stage  determines whether meeting manager  has received a meeting confirmation from client CB server , in which case operation  proceeds to stage . Otherwise stages \u2013 are repeated with a new client CB server ","In stage , meeting manager  has received confirmation from CB server that a connection has been successfully established with the hosting CB server . The confirmation is then transmitted from meeting manager  to ping server  and from ping server  to client browser  (stage ).","If the user requests starting a new meeting in stage , operation  proceeds to stages \u2013. Stages \u2013 are analogous to stages \u2013 and stages \u2013 are analogous to stages \u2013, except that if stage  fails, operation  proceeds to stage  rather than stage .",{"@attributes":{"id":"p-0060","num":"0069"},"figref":["FIG. 5","FIG. 3","FIG. 3"],"b":["500","370","500","510","520","365"]},{"@attributes":{"id":"p-0061","num":"0070"},"figref":["FIG. 6","FIG. 3"],"b":["600","360","610","600","620","610","620","360","630","380","640","610","630"],"i":"n "},{"@attributes":{"id":"p-0062","num":"0071"},"figref":["FIG. 7","FIG. 3","FIG. 3"],"b":["700","390","390","350","310","710","350","390","380","720","380","390","730","390","740","313","380","390","750","390","320","380","760","320","390"],"i":["n ","n ","n ","n ","n ","n","n ","n ","n ","n ","n ","n ","n. "]},{"@attributes":{"id":"p-0063","num":"0072"},"figref":"FIGS. 8\u201311","b":["350","300"]},{"@attributes":{"id":"p-0064","num":"0073"},"figref":"FIG. 8","b":["800","350","380","310","810","380","380","350","350","380","350","380","380","350","380","380"],"i":["n ","n ","n","n ","n ","n ","n ","n ","n "]},"In some embodiments of the present invention, meeting manager  employs its zone manager (and meeting zone gatekeeper) (ZM\/GK)  to exchange heartbeat (or analogous) messages with ZM  in each CB server . When and if ZM\/GK  detects a CB server (or other logical server failure) by noting a lack of heartbeats, for example, ZM\/GK sends a request to process manager (PM)  to restart the dead logical server.","PM  also monitors each ZM , including ZM\/GK , to evaluate ZM health. Should PM  discover a failed or stopped ZM process, the PM will restart (i.e., spawn a replacement for) the ZM.","In particular, if failure of a CB server is detected in stage , operation  proceeds to stage . Otherwise stage  is repeated until a failure is detected. Meeting manager , in turn, retrieves a list of meetings handled by failed CB server from meeting database  (stage ) and sends a request to process manager  to launch a new CB server (stage ).","The newly-spawned (replacement) CB server recovers its state information (e.g., information describing its configuration, operating or quality of service [QoS] parameters, and\/or current meeting data) from the local meeting zone's gatekeeper. Typically, this is the ZM\/GK  within zone manager , but the gatekeeper function may alternately be provided by any designated ZM . Generally speaking, all local state in a logical server is preserved. However, if an application server goes down, the application state is lost. Only the meeting state is preserved in this case.","Stage  then determines if the new CB server has successfully come on-line, in which case meeting manager  continues to monitor the status of CB servers (stage ). Otherwise, stages \u2013 are repeated until a new CB server successfully comes on-line.",{"@attributes":{"id":"p-0070","num":"0079"},"figref":["FIG. 9","FIG. 3"],"b":["900","350","380","390","310","350","380","380","390","350","380","311","313","314"],"i":["n ","n ","n ","n ","n ","n ","n "]},"The WebEx Transport Layer protocol (TP) is responsible for providing point-to-point connectivity between a WebEx client and the WebEx server. The TP layer will attempt to create direct TCP connections and use TCP to communicate between the client and server. For clients that sit behind firewalls, particularly for those that are unable to create direct TCP connections, the WebEx TP layer will automatically create virtual sockets based upon HTTP. This enables the client to communicate with the server through most firewalls.","Since the HTTP protocol functions on a Request\/Response basis, it is always the client that issues the Request command. Hence, in order to provide a bi-directional communication channel, the client actively polls the server in order to fetch the data that may be sent from the server to the client. The details of this implementation are available in the co-pending and commonly-assigned Application for a U.S. patent Ser. No. 09\/449,011, filed on Nov. 24, 1999, \u201cEmulating a Persistent Connection Using HTTP,\u201d cited and incorporated above.","If a failure of App server is detected, operation  proceeds to stage . Otherwise stage  is repeated. In stage , meeting manager  places any CB servers connected to failed App server in a suspend state and receives a request for a new App server from CB server in stage . Meeting manager  then requests that process manager  launch a new App server (stage ). Process manager  launches the new App server and notifies meeting manager  (stage ).","Once meeting manager  has received notification that the new App server has been launched, meeting manager  resumes (i.e., removes from the suspend state) CB server and connects it to the new App server . (App server state is restored from a backup meeting manager, through any of a number of standard and common means well-known in the art.) Meeting manager continues to monitor the status of App server (stage ). Note that all logical server-to-logical server and logical server-to-PM communications employ ZMs  and .",{"@attributes":{"id":"p-0075","num":"0084"},"figref":["FIG. 10","FIGS. 8 and 9"],"b":["1000","350","360","370","1000","1020","1010","350","311","360","370","1020","1030","360","370","350","360","370","1010","1030","1040","360","370"]},"Note that the reliable TP layer keeps all data and resends\/reloads it into the replacement license and\/or log server as needed.",{"@attributes":{"id":"p-0077","num":"0086"},"figref":"FIGS. 8\u201310","b":["350","310","350","350","310","311","350","350"],"i":["n","n"]},{"@attributes":{"id":"p-0078","num":"0087"},"figref":["FIG. 11","FIG. 3"],"b":["1100","310","350","311","350","1110","350","1110","1120","1110"],"i":"n "},"In stage , process manager  launches a new standby meeting manager. The pre-existing standby meeting managers, advised of the failure of primary meeting manager by process manager , elect (through any of several well-known server election or promotion mechanisms) one of their own (step ) to take over as primary and broadcast an election message (stage ). One of the standby meeting managers is thus selected as the new primary meeting manager  (stage ). In the event only one standby MM is presently configured, the election message of stage  is simply construed as a command to become the primary MM.","The standby meeting manager(s) , CB servers , App server , ping servers , license manager , and log server  in the same meeting zone as new primary meeting manager  connect to new primary meeting manager  (stage ) and register with it (stage ) so that the new primary meeting manager can continue to monitor the status of these servers. New primary meeting manager  recovers its server state (stage ) and receives reports from CB servers on the status of any active conferences handled by CB servers (stage ). Finally, new primary meeting manager  recovers meeting information for all meetings handled in the meeting zone (stage ). Process manager  monitors the status of new primary meeting manager  (stage ).","CB server interfaces with client browser  through application protocol entities (APEs) joined to agent sessions.  is a block diagram illustrating the software components of client computers and server computers () involved in the communications between CB server and client browser . In particular, communications channels are established between transaction processing (TP) server  and Application Resource Manager (ARM) server  on server computer and TP client  and ARM client  on client computer . Thus, conference manager  and App server (both logically part of CB server ) communicate with client computer via the communication channels maintained by ARM server  and TP server .",{"@attributes":{"id":"p-0082","num":"0091"},"figref":["FIGS. 13A\u201313C","FIG. 3","FIG. 13B"],"b":["1300","380","390","320","380","1305","210","380","380","210","1310","1315","1316","380","210","1317","210","1320","1318","1320"],"i":["n ","n ","n ","n ","n ","n","n","n ","n; ","n "]},"Stage  () determines whether the user of client computer has elected to create a new session (e.g., to share an application), in which case operation  proceeds to stage . Otherwise, operation  proceeds to stage . Client computer APE then sends a message to the agent session APE of CB server requesting a new session (stage ). CB server , in turn, requests a new session from App server (stage ) and App server creates the new session for the conference (stage ). App server also creates a new APE and joins the new session to the new APE (stage ). CB server , in turn, sends the new session's ID to client computer (stage ). Client computer launches an application (stage ), creates a new APE for the application and joins the new APE to the new session (stage , referring to ).","Stage  determines if a new client computer wants to join an existing session, in which case operation  proceeds to stage . Otherwise, operation  terminates. Client computer requests joining the session (stage ), concluding operation .",{"@attributes":{"id":"p-0085","num":"0094"},"figref":"FIG. 14","b":["210","210","210","380","310","1240","1250","380","1420","380","310","1410","1410"]},"CB server C, in turn, connects to client computer B via its own ARM server  and TP server  (not shown).",{"@attributes":{"id":"p-0087","num":"0096"},"figref":["FIG. 15","FIG. 3","FIG. 14"],"b":["1500","210","210","300","380","380","1410","1510","380","380","1520","210","380","380","1410","1530","380","210","1250","1540","1550","210","210","1530","1550","1500"]},"Distributed collaborative computer system  allows users of client computers to participate in on-line conferences by sharing both audio and video signals. In particular, distributed collaborative computer system  allows users to share images of a document that can be marked-up by conference participants (document viewing). Document viewing is described in further detail in U.S. Pat. No. 5,577,188 \u201cMethod to Provide for Virtual Screen Overlay\u201d and co-pending and commonly-assigned U.S. patent application Ser. Nos. 09\/471,938 and 09\/591,377 (filed on Dec. 23, 1999 and Jun. 9, 2000, respectively), cited and incorporated above. In addition, users may share control of an application program executed on any of the client computers participating in the on-line conference (a process known as application sharing). Application sharing is described in further detail in co-pending and commonly-assigned U.S. patent application Ser. No. 09\/442,424 (filed Nov. 17, 1999), cited and incorporated above.","During document viewing, the presenter may choose to skip one or more pages in the document being viewed.  are flow diagram illustrating the skip page operation  used to control transmission of pages between the presenter's client computer and other participants' client computers ","First, an App server providing the document viewing application (also referred to as the docview server) assigns unique IDs to each page in the document being viewed (stage , ). The page IDs and page content data are then passed to ARM client  and from ARM client  to ARM server  (stage ). ARM server , in turn, begins transmitting the document page IDs and data over a shared data queue on high-speed real-time messaging link  (stage ). The first page ID is then sent to all client computers connected to the conference (stage ). Client computers , in turn, request the first page data from the shared data queue (stage ) and CB server sends the first page data to client computers (stage ). Stage  then determines whether the presenter has elected to jump to a new page in the shared document, in which case operation  proceeds to stage . Otherwise, operation  proceeds to stage . In stage  (), the presenter's client computer broadcasts the new page ID to all client computers participating in the conference. The new page data is then transmitted over the shared data queue (stage ) and client computers request the new page from the shared media queue (stage ).","Alternatively, stage  determines if all data transmitted on the shared data queue has been received, in which case the docview server is notified (stage . Otherwise, operation  proceeds to stage .","Stage , in turn, determines whether the shared data queue is no longer needed, in which case the shared data queue is emptied (stage ) and operation  terminates. Otherwise, operation  proceeds to stage .",{"@attributes":{"id":"p-0093","num":"0102"},"figref":"FIG. 17","b":["1700","320","380","1710","320","380","1720","1730","380","380","320","380","1740","1710","1730","320","380"],"i":["n ","n ","n","n ","n ","n. "]},{"@attributes":{"id":"p-0094","num":"0103"},"figref":["FIGS. 18A","FIG. 3"],"b":["18","18","1","3","19","19","20","20","20","320","300"]},"Meeting center web page  (, B and C\u2013) is displayed when a user first accesses web server  () through client browser . Meeting center web page  contains a list of current and scheduled meetings the user may want to join. In addition, the user may create a new meeting by selecting create meeting button , causing a sign in prompt to be displayed in meeting center web page  (). If the user is not already registered with the service, the user can register by selecting new user link . Otherwise, the user can enter ID and password information in login prompt . If the user's data is successfully authenticated with the information stored in web database  and\/or central operation database  (), a create new meeting prompt  is displayed in meeting center web page  (FIGS. C\u2013). The user can then enter meeting parameters such as date, time, and attendee list by filling in new meeting prompt . The user can also edit meeting options by selecting edit options button , thereby causing meeting options web page  () to be displayed. Once the user has entered the desired meeting information on meeting center web page , the user can either schedule the meeting by pressing schedule button  or start the meeting by pressing start now button .","Meeting options web page  allows the user to set specific meeting options such as features, client type, frequency and reminders. Once the user is satisfied with the selected options, the user can return to meeting center web page  by pressing submit button .","Meeting web page  () is displayed to the user during a meeting. Meeting web page  includes a shared pane , an attendee pane  and a message pane . Information shared among meeting participants are displayed in shared pane . The user can share images, documents, applications, web pages, desktops and whiteboards by selecting an appropriate entry from tools menu  (). For example, if the user selects to share an image to be marked up by the meeting participants, the image is displayed in shared pane  (). One or more users can then mark up the image by selecting a drawing tool from drawing menu  and drawing over the image. Attendee pane  contains a list of meeting attendees. Alternatively, attendee pane  can used to display polls taken among the meeting attendees or a video conferencing images. Finally, message pane  can used to compose, send and receive messages among two or more meeting attendees.","Since conference information is replicated across all CB servers handling the conference and can be reconstructed by meeting manager , failure of one or more CB servers does not disrupt the conference and can be gracefully recovered. As a result, the distributed collaborative computing system of the present invention eliminates the single point of failure limitation of prior art collaborative computing systems. In addition, since multiple server computers are used to handle an on-line conference, the distributed collaborative computing system of the present invention may handle conferences with an arbitrary number of participants, without any limitations imposed by the processing capacity of any single server computer. By contrast, prior art systems were limited to conferences whose participants could all be handled by a single server computer.","The order in which the steps of the present method are performed is purely illustrative in nature. In fact, the steps can be performed in any order or in parallel, unless otherwise indicated by the present disclosure.","The method of the present invention may be performed in either hardware, software, or any combination thereof, as those terms are currently known in the art. In particular, the present method may be carried out by software, firmware, or microcode operating on a computer or computers of any type. Additionally, software embodying the present invention may comprise computer instructions in any form (e.g., source code, object code, interpreted code, etc.) stored in any computer-readable medium (e.g., ROM, RAM, magnetic media, punched tape or card, compact disc (CD) in any form, DVD, etc.). Furthermore, such software may also be in the form of a computer data signal embodied in a carrier wave, such as that found within the well-known Web pages transferred among computers connected to the Internet. Accordingly, the present invention is not limited to any particular platform, unless specifically stated otherwise in the present disclosure.","While particular embodiments of the present invention have been shown and described, it will be apparent to those skilled in the art that changes and modifications may be made without departing from this invention in its broader aspect and, therefore, the appended claims are to encompass within their scope all such changes and modifications as fall within the true spirit of this invention. \n\n"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present disclosure may be better understood and its numerous features and advantages made apparent to those skilled in the art by referencing the accompanying drawings.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 1B","FIG. 1A"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2B","FIG. 2A"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIGS. 4A","FIG. 3"],"b":["4","4"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 6","FIG. 3"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 7","FIG. 3"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIGS. 8","FIG. 3"],"b":["9","10","11"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 12","FIGS. 2A and 2B"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIGS. 13A","FIG. 3"],"b":["13","13"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 14","FIG. 3"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 15","FIG. 14"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 16A and 16B"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIGS. 18A","FIG. 3","FIG. 3"],"b":["18","18","1","3","19","19","20","20","20"]}]},"DETDESC":[{},{}]}
