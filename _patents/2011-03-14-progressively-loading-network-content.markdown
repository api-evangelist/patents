---
title: Progressively loading network content
abstract: Disclosed are various embodiments for progressively loading content that is asynchronously obtained from a server. A network page is obtained in a client from a server. Supplemental data is obtained in the client from the server in response to an element of the network page. The supplemental data, which is obtained asynchronously with respect to the network page, includes content and scripted callbacks. Each scripted callback is processed in the client, and in response, a respective portion of the content that has been obtained from the server is also processed in the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08682964&OS=08682964&RS=08682964
owner: Amazon Technologies, Inc.
number: 08682964
owner_city: Reno
owner_country: US
publication_date: 20110314
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Ajax refers to a group of interrelated web development technologies that may be used to create interactive applications. In particular, the term \u201cAjax\u201d may refer, for example, to the asynchronous use of JavaScript and extensible markup language (XML) on the client-side. Ajax may use, for example, a combination of cascading style sheets (CSS) and hypertext markup language (HTML) to format content. The document object model (DOM) corresponding to the content may be accessed with JavaScript in order to provide dynamic updates to the content. The dynamic updates may occur asynchronously with respect to the loading of the original content. The XMLHttpRequest (XHR) application programming interface (API) is one approach to exchanging data asynchronously between client and server while avoiding full-page reloads. The XHR API is supported to varying degrees by many browsers, including Microsoft\u00ae Internet Explorer, Mozilla\u00ae Firefox\u00ae, and Apple\u00ae Safari\u00ae, among others.","The present disclosure relates to the loading and rendering of network content in a progressive manner, even where such content is obtained asynchronously with respect to a network page. Network pages without Ajax content may be rendered progressively, such that when a portion of content is obtained from a server, the portion is processed (or \u201cflushed\u201d), and the rendered network page is updated accordingly. Network pages that contain Ajax content may use the XMLHttpRequest (XHR) object and application programming interface (API) for the client to request data asynchronously. Some browsers (e.g., Mozilla\u00ae Firefox\u00ae, Apple\u00ae Safari\u00ae, Google\u00ae Chrome\u00ae, etc.) support flushing in the XHR object, such that a callback is performed upon receipt of a partial payload of data from the server. However, other browsers (e.g., Microsoft\u00ae Internet Explorer, etc.) do not support this flushing behavior in the XHR object. In such browsers, Ajax content may only be rendered after it is received in its entirety.","Various embodiments of the present disclosure introduce an alternative approach to asynchronous communication between a client and a server such that Ajax content may be loaded progressively, even in browsers that do not support flushing in the XHR object. To this end, a hypertext markup language (HTML) element in the base network page may be utilized for a browser to obtain supplemental data from the server. The supplemental data includes one or more content segments, each followed by a scripted callback. The scripted callback triggers processing of the completed content segments in the browser. The rendered network page may be updated in response to each of the completed content segments. In the following discussion, a general description of the system and its components is provided, followed by a discussion of the operation of the same.","With reference to , shown is a networked environment  according to various embodiments. The networked environment  includes one or more computing devices  in data communication with one or more clients  by way of a network . The network  includes, for example, the Internet, intranets, extranets, wide area networks (WANs), local area networks (LANs), wired networks, wireless networks, or other suitable networks, etc., or any combination of two or more such networks.","The computing device  may comprise, for example, a server computer or any other system providing computing capability. Alternatively, a plurality of computing devices  may be employed that are arranged, for example, in one or more server banks or computer banks or other arrangements. For example, a plurality of computing devices  together may comprise a cloud computing resource, a grid computing resource, and\/or any other distributed computing arrangement. Such computing devices  may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience, the computing device  is referred to herein in the singular. Even though the computing device  is referred to in the singular, it is understood that a plurality of computing devices  may be employed in the various arrangements as described above.","Various applications and\/or other functionality may be executed in the computing device  according to various embodiments. Also, various data is stored in a data store  that is accessible to the computing device . The data store  may be representative of a plurality of data stores  as can be appreciated. The data stored in the data store , for example, is associated with the operation of the various applications and\/or functional entities described below.","The components executed on the computing device , for example, include a network data server application  and other applications, services, processes, systems, engines, or functionality not discussed in detail herein. The network data server application  is executed to serve up network content, such as network pages , supplemental data , and\/or other forms of network content, in response to a request, such as a network page request , a supplemental data request , and\/or other requests. The network data server application  may be configured to generate such network pages  and supplemental data  from data and code stored in the data store  or elsewhere. To this end, the network data server application  may include various programs, modules, scripts, and\/or other code that perform generation of network pages  and supplemental data . In various embodiments, the network data server application  may include a commercially available hypertext transfer protocol (HTTP) server such as, for example, Apache\u00ae HTTP Server, Apache\u00ae Tomcat\u00ae, Microsoft\u00ae Internet Information Services (IIS), and\/or other servers.","Each network page  corresponds to one or more HTML files, one or more extensible markup language (XML) files, one or more extensible HTML (XHTML) files, and\/or other network page data. In some examples, a network page  may constitute a web page or a web application screen. The network page  may include progressive loading code , one or more elements for progressive loading , and\/or other data. The progressive loading code  corresponds to JavaScript\u00ae or other code that configures asynchronous, yet progressive, loading of the supplemental data  through the use of the element for progressive loading . The element for progressive loading  may correspond to an HTML element such as an iframe element, a script element, or another element. The element for progressive loading  may be embedded in the network page  or may be added dynamically to the document object model (DOM) associated with the network page  by the progressive loading code .","The supplemental data  may include a plurality of content segments , where each of the content segments  is followed by a scripted callback  that triggers processing of the content segment  when the content segment  has been obtained. Each content segment  may correspond to HTML data, XML data, XHTML data, JavaScript data, and\/or other data that may be used to update content of the network page . The type of data included in the content segment  may depend on the element for progressive loading . Where the data included in the content segment  includes JavaScript data, the data may be expressed using JavaScript Object Notation (JSON) or another format. In various embodiments, the content segments  may be separated by a delimiter, such as, for example, a string of three ampersands (i.e., \u201c&&&\u201d) or another string. The delimiter may be chosen, for example, so as to be invalid in HTML, XML, or other language employed in the content segment .","As an example, where the element for progressive loading  is a script tag, the content segment  may include JavaScript code. As another example, where the element for progressive loading  is an iframe, the content segment  may include HTML markup. Each scripted callback  corresponds to a script block that triggers processing of the respective content segment , which may involve, for example, updating a DOM of the network page  or performing other action(s).","The data stored in the data store  includes, for example, network page content , progressive loading code , and potentially other data. The network page content  includes various data that may be used in generating the network pages  and the supplemental data . To this end, the network page content  may include code, text, HTML, XML, XHTML, cascading style sheets (CSS), extensible style sheet language transformations (XSLT), images, audio, video, portable document format (PDF) data, and\/or other data. The progressive loading code  corresponds to various code that configures the network page  to perform the progressive loading functionality described herein, or is used to generate the progressive loading code  that is sent within the network page . To this end, the progressive loading code  may include JavaScript code, VBScript code, Java\u00ae code, and\/or other forms of client-side code. In some embodiments, the progressive loading code  may also configure the generation of the supplemental data  by the network data server application .","The client  is representative of a plurality of client devices that may be coupled to the network . The client  may comprise, for example, a processor-based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer, a laptop computer, personal digital assistants, cellular telephones, smartphones, set-top boxes, music players, web pads, tablet computer systems, game consoles, electronic book readers, or other devices with like capability. The client  may include a display . The display  may comprise, for example, one or more devices such as cathode ray tubes (CRTs), liquid crystal display (LCD) screens, gas plasma-based flat panel displays, LCD projectors, or other types of display devices, etc.","The client  may be configured to execute various applications such as a browser  and\/or other applications. The browser  may be executed in a client , for example, to access and render network pages, such as web pages, or other network content served up by the computing device  and\/or other servers, thereby generating a rendered network page  on the display . The rendered network page  may include one or more display regions , where asynchronously obtained network content is to be progressively rendered. The client  may be configured to execute applications beyond browser  such as, for example, email applications, instant message applications, and\/or other applications.","Next, a general description of the operation of the various components of the networked environment  is provided. To begin, the client  requests a network page  from the network data server application  by way of a network page request . The network data server application  generates the network page  in response to the network page request . The network page  may be generated based in part on network page content  and progressive loading code . The network page  may include progressive loading code  and one or more elements for progressive loading . The network page  is sent over the network  to the client .","In the client , the browser  obtains the network page  and begins rendering it as a rendered network page  on the display . The browser  may execute the progressive loading code , which may involve creating one or more elements for progressive loading . If the browser  supports flushing in the XHR API, an XHR object may be used instead for the loading of asynchronous content. Otherwise, the elements for progressive loading  may be created in the DOM of the network page . In one embodiment, an element for progressive loading  corresponds to a hidden iframe element in the DOM.","The element for progressive loading  is used to generate a supplemental data request  that is sent to the network data server application  or another server within the domain of the network data server application . In response, the network data server application  generates the supplemental data  from the network page content  and\/or the progressive loading code . The supplemental data  includes one or more content segments  each followed by a scripted callback . The supplemental data  is sent to the browser  over an HTTP or other connection.","As the content segments  are received at the browser , the scripted callbacks  are executed, and the progressive loading code  in the browser  begins processing the flushed content segments . Updates may be made dynamically to the DOM of the network page  as the content segments  are received, which may be reflected in one or more display regions  of the rendered network page . Other content related to the flushed content segments  (e.g., images or other linked data) may continue to download and be flushed synchronously by the browser .","Referring next to , shown is one example of a user interface  rendered by a browser  () executed in a client  () in the networked environment  (). The user interface  includes a rendered network page  and a display region . In this non-limiting example, the rendered network page  corresponds to a search result network page  () that has been generated in response to a search query obtained by a user. The rendered network page  includes content such as a heading, a listing of the category and the search query, and the display region  in which the search results are to be displayed.","In this example, the display region  includes descriptive placeholder text (\u201cLoading content . . . \u201d). In other examples, other types of placeholders or no placeholder may be present. The search result content that is to be loaded into the display region  corresponds to Ajax content that is to be loaded asynchronously with respect to the network page .","Moving on to , shown is another example of the user interface  rendered by a browser  () executed in a client  () in the networked environment  (). The user interface  in this example shows the rendered network page  of  being updated to include a partial listing of the search results. To this end, the display region  of  has been partially loaded from a portion of the Ajax content. The DOM of the network page  () has been updated to include four display regions , , , and for the search results. The display regions and , corresponding to the first two of the search results, have been loaded and rendered completely.","The display region , corresponding to the third search result, is in the process of being rendered, with the item image  being partially rendered. The display region , corresponding to the subsequent search results, has yet to be rendered and, as depicted, corresponds to a descriptive placeholder text (\u201cLoading content . . . \u201d). In other examples, other types of placeholders or no placeholder may be present. It is noted that the browser  has flushed the content segments  () of the supplemental data  () that correspond to the display regions , , and , but the last content segment  that is seen in the viewport of the browser  has yet to complete loading.","Turning now to , shown is another example of the user interface  rendered by a browser  () executed in a client  () in the networked environment  (). The user interface  in this example shows the rendered network page  of  being updated as more supplemental data  () has been obtained by the browser . The display regions and , corresponding to the first two of the search results, have been loaded and rendered completely. The display region , corresponding to the third search result, is still in the process of being rendered, with the item image  being partially rendered. The display region , corresponding to the fourth search result, is also in the process of being rendered, with the item image  being partially rendered. It is noted that the content segments  () associated with the display regions and have been obtained to the extent necessary to be flushed, although rendering of content in the display regions and has not fully completed.","Continuing on to , shown is another example of the user interface  rendered by a browser  () executed in a client  () in the networked environment  (). In this example, the rendered network page  also includes four display regions , , , and above the fold. However, unlike in previous examples, rendering of the display region corresponding to the fourth search result has completed before the rendering of the display regions , , and corresponding to the first three search results.  illustrates that content segments  () of the supplemental data  () may be obtained in differing orders in some embodiments. Thus, the progressive loading of Ajax content may be programmatically controlled and does not have to occur in a top to bottom manner.","Referring next to , shown is a flowchart that provides one example of the operation of a portion of the network data server application  according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network data server application  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example method implemented in the computing device  () according to one or more embodiments.","Beginning with box , the network data server application  obtains a network page request  () from a client  (). In box , the network data server application  generates the network page  () from the network page content  () in response to the network page request . The network page  may include other network page content  that is to be loaded synchronously, such as CSS, images, audio, video, etc. The network page  is configured for progressive loading of at least a portion of the network page content  that is to be obtained asynchronously with respect to the network page . The network data server application  may process the progressive loading code  () to obtain progressive loading code  (), an element for progressive loading  (), and\/or other data to be included in the network page . In box , the network data server application  sends the network page  to the client . Thereafter, the portion of the network data server application  ends.","Continuing on to , shown is a flowchart that provides one example of the operation of another portion of the network data server application  according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network data server application  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example method implemented in the computing device  () according to one or more embodiments.","Beginning with box , the network data server application  obtains a supplemental data request  () from the client  (). It is noted that the supplemental data request  may be received some time after the network page request  () discussed in connection with the flowchart of  because the supplemental data request  is generated asynchronously with respect to the network page request . The supplemental data request  may be received before the network data server application  has completed sending the network page  () in box  (). Further, the supplemental data request  may be handed by an instance of the network data server application  that is different from the instance of the network data server application  that handles the network page request  in . The supplemental data request  may be generated by the element for progressive loading  (), the progressive loading code  (), an XHR object, or other code related to the network page  and executed in the browser  ().","In box , the network data server application  generates supplemental data  (). The supplemental data  may include one or more content segments  () and one or more scripted callbacks  () that are configured to trigger processing of completed content segments  that have been obtained in the client . In another example, where the browser  supports flushing for the XHR object, the supplemental data  may merely include content, which may not explicitly be divided into content segments  and may not include the scripted callbacks .","In box , the network data server application  determines whether the supplemental data request  specifies a portion of the supplemental data . In other words, the supplemental data request  may include data that identifies a content segment  other than the initial content segment  of the supplemental data . Such a supplemental data request  may be employed to reduce the amount of supplemental data  to be transmitted over the network  after a timeout when a portion has already received and flushed at the client . When the supplemental data request  does not specify a portion of the supplemental data , the network data server application  continues to box .","In box , the network data server application  sends a content segment  to the client . In box , the network data server application  sends a scripted callback  to the client . In box , the network data server application  determines whether more content segments  remain to be sent. If a content segment  remains to be sent, the network data server application  returns to box  and sends the next content segment  of the supplemental data  to the client . If no content segments  remain to be sent, the portion of the network data server application  ends.","If the network data server application  determines in box  that the supplemental data request  does specify a portion of the supplemental data , the network data server application  moves instead to box . In box , the network data server application  sends the requested content segment  to the client . The network data server application  then continues to box  and sends a scripted callback  to the client . In box , the network data server application  determines whether more content segments  remain to be sent. If a content segment  remains to be sent, the network data server application  returns to box  and sends the next content segment  to the client . If no content segments  remain to be sent, the portion of the network data server application  ends.","Turning now to , shown is a flowchart that provides one example of the operation of a portion of the browser  according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the browser  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the client  () according to one or more embodiments.","Beginning with box , the browser  sends a network page request  () to the network data server application  () and obtains a network page  (). The network page  may include Ajax content, and if so, may include progressive loading code  () and one or more elements for progressive loading  (). The browser  may begin executing the progressive loading code . In box , the progressive loading code  in the browser  determines the type of browser  that is being used. In other embodiments, the network data server application  may know the type of browser  through the user-agent field in an HTTP request and configure the progressive loading code  appropriately. In still other embodiments, the XHR API may not be used (e.g., for performance reasons, to simplify code development, etc.), thereby making browser  identification unnecessary for purposes of progressive loading.","In box , the progressive loading code  in the browser  determines whether the browser  supports flushing in the XHR API. In another embodiment, such a determination may be made by the network data server application . If the browser  supports flushing in the XHR API, the browser  continues to box  and uses the XHR API to obtain content for the network page  asynchronously with respect to the network page . In box , the progressive loading code  in the browser  renders one or more updates to the rendered network page  (). Such an update may involve rendering content in one or more display regions  () configured to contain Ajax content. The progressive loading code  in the browser  may modify the DOM of the network page  () to include updates based at least in part on the Ajax content. Thereafter, the portion of the browser  ends.","If the browser  does not support flushing in the XHR API, the progressive loading code  in the browser  continues to box . In box , the progressive loading code  in the browser  loads supplemental data  () asynchronously using the configured element for progressive loading  () in the network page . The element for progressive loading  may be an original element of the DOM in the network page  or may be generated by the progressive loading code . In various embodiments, the element for progressive loading  may correspond to an iframe, a script tag, or another HTML element. The element for progressive loading  is configured with a uniform resource identifier (URI) that is used in generating a supplemental data request  ().","In box , the progressive loading code  in the browser  determines whether a timeout has occurred involving the supplemental data . If a timeout has occurred, the progressive loading code  in the browser  may move to box  and request the supplemental data  again following the timeout. The new supplemental data request  may specify the content segment(s)  () that are to be obtained, which content segment(s)  have been obtained, or other data that enables the network data server application  to send a partial quantity of the supplemental data . The browser  then moves to box . If a timeout has not occurred, the browser  also moves to box .","In box , the browser  obtains a content segment  in the supplemental data . In box , the browser  processes a scripted callback  () that follows the content segment  in the supplemental data . In box , the browser  processes the content segment  in response to the scripted callback  and renders an update to the rendered network page . The update may involve modifying the DOM that is associated with the network page . In one embodiment, the update may involve adding content to display regions  () of the rendered network page  that are reserved for the Ajax content. In box , the browser  determines whether more supplemental data  is to be obtained through the element for progressive loading . If more data is to be obtained, the browser  returns to box  and determines whether a timeout has occurred. If more data is not to be obtained, the portion of the browser  ends.","In some embodiments, the browser  may request multiple content segments  in parallel. To this end, the tasks of boxes , , and  may be parallelized. Therefore, the browser  may be configured to obtain another content segment  in box  before a previous content segment  has been fully obtained and processed in boxes , , and . As a non-limiting example, content for an above-the-fold display region  and content for a below-the-fold display region  may be loaded in parallel.","With reference to , shown is a schematic block diagram of the computing device  according to an embodiment of the present disclosure. The computing device  includes at least one processor circuit, for example, having a processor  and a memory , both of which are coupled to a local interface . To this end, the computing device  may comprise, for example, at least one server computer or like device. The local interface  may comprise, for example, a data bus with an accompanying address\/control bus or other bus structure as can be appreciated.","Stored in the memory  are both data and several components that are executable by the processor . In particular, stored in the memory  and executable by the processor  are the network data server application  and potentially other applications. Also stored in the memory  may be a data store  and other data. In addition, an operating system may be stored in the memory  and executable by the processor .","It is understood that there may be other applications that are stored in the memory  and are executable by the processor  as can be appreciated. Where any component discussed herein is implemented in the form of software, any one of a number of programming languages may be employed such as, for example, C, C++, C#, Objective C, Java\u00ae, JavaScript\u00ae, Perl, PHP, Visual Basic\u00ae, Python\u00ae, Ruby, Delphi\u00ae, Flash\u00ae, or other programming languages.","A number of software components are stored in the memory  and are executable by the processor . In this respect, the term \u201cexecutable\u201d means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be, for example, a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory  and run by the processor , source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory  and executed by the processor , or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory  to be executed by the processor , etc. An executable program may be stored in any portion or component of the memory  including, for example, random access memory (RAM), read-only memory (ROM), hard drive, solid-state drive, USB flash drive, memory card, optical disc such as compact disc (CD) or digital versatile disc (DVD), floppy disk, magnetic tape, or other memory components.","The memory  is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus, the memory  may comprise, for example, random access memory (RAM), read-only memory (ROM), hard disk drives, solid-state drives, USB flash drives, memory cards accessed via a memory card reader, floppy disks accessed via an associated floppy disk drive, optical discs accessed via an optical disc drive, magnetic tapes accessed via an appropriate tape drive, and\/or other memory components, or a combination of any two or more of these memory components. In addition, the RAM may comprise, for example, static random access memory (SRAM), dynamic random access memory (DRAM), or magnetic random access memory (MRAM) and other such devices. The ROM may comprise, for example, a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other like memory device.","Also, the processor  may represent multiple processors  and the memory  may represent multiple memories  that operate in parallel processing circuits, respectively. In such a case, the local interface  may be an appropriate network  () that facilitates communication between any two of the multiple processors , between any processor  and any of the memories , or between any two of the memories , etc. The local interface  may comprise additional systems designed to coordinate this communication, including, for example, performing load balancing. The processor  may be of electrical or of some other available construction.","Although the network data server application , the browser  (), and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above, as an alternative the same may also be embodied in dedicated hardware or a combination of software\/general purpose hardware and dedicated hardware. If embodied in dedicated hardware, each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include, but are not limited to, discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals, application specific integrated circuits having appropriate logic gates, or other components, etc. Such technologies are generally well known by those skilled in the art and, consequently, are not described in detail herein.","The flowcharts of , B, and  show the functionality and operation of an implementation of portions of the network data server application  and the browser . If embodied in software, each block may represent a module, segment, or portion of code that comprises program instructions to implement the specified logical function(s). The program instructions may be embodied in the form of source code that comprises human-readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor  in a computer system or other system. The machine code may be converted from the source code, etc. If embodied in hardware, each block may represent a circuit or a number of interconnected circuits to implement the specified logical function(s).","Although the flowcharts of , B, and  show a specific order of execution, it is understood that the order of execution may differ from that which is depicted. For example, the order of execution of two or more blocks may be scrambled relative to the order shown. Also, two or more blocks shown in succession in , B, and  may be executed concurrently or with partial concurrence. Further, in some embodiments, one or more of the blocks shown in , B, and  may be skipped or omitted. In addition, any number of counters, state variables, warning semaphores, or messages might be added to the logical flow described herein, for purposes of enhanced utility, accounting, performance measurement, or providing troubleshooting aids, etc. It is understood that all such variations are within the scope of the present disclosure.","Also, any logic or application described herein, including the network data server application , the browser , and the progressive loading code ,  (), that comprises software or code can be embodied in any non-transitory computer-readable medium for use by or in connection with an instruction execution system such as, for example, a processor  in a computer system or other system. In this sense, the logic may comprise, for example, statements including instructions and declarations that can be fetched from the computer-readable medium and executed by the instruction execution system. In the context of the present disclosure, a \u201ccomputer-readable medium\u201d can be any medium that can contain, store, or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer-readable medium can comprise any one of many physical media such as, for example, magnetic, optical, or semiconductor media. More specific examples of a suitable computer-readable medium would include, but are not limited to, magnetic tapes, magnetic floppy diskettes, magnetic hard drives, memory cards, solid-state drives, USB flash drives, or optical discs. Also, the computer-readable medium may be a random access memory (RAM) including, for example, static random access memory (SRAM) and dynamic random access memory (DRAM), or magnetic random access memory (MRAM). In addition, the computer-readable medium may be a read-only memory (ROM), a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other type of memory device.","It should be emphasized that the above-described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above-described embodiment(s) without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Many aspects of the present disclosure can be better understood with reference to the following drawings. The components in the drawings are not necessarily to scale, emphasis instead being placed upon clearly illustrating the principles of the disclosure. Moreover, in the drawings, like reference numerals designate corresponding parts throughout the several views.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIGS. 2-5","FIG. 1"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIGS. 6A and 6B","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 8","FIG. 1"]}]},"DETDESC":[{},{}]}
