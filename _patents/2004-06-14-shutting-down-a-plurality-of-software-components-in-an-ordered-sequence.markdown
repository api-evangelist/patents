---
title: Shutting down a plurality of software components in an ordered sequence
abstract: An apparatus in one example comprises a manager component in communication with a distributed software application. The distributed software application comprises a plurality of software components that run within one or more executables. The manager component shuts down the plurality of software components in an ordered sequence based on one or more dependency relationships among the plurality of software components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07426715&OS=07426715&RS=07426715
owner: Lucent Technologies Inc.
number: 07426715
owner_city: Murray Hill
owner_country: US
publication_date: 20040614
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application contains subject matter that is related to the subject matter of the following applications, which are assigned to the same assignee as this application. The below-listed applications are hereby incorporated herein by reference in their entireties.\n\n","The invention relates generally to distributed software applications and more particularly to management of distributed software applications.","In known distributed software applications, software components are distributed among a plurality of executables (i.e., software capsules or software entities). Each of the executables contains one or more software components that perform some portion of the functionality of the distributed software application. The executables of the distributed software application may all run on a single processor or may be divided up and run across a plurality of processors.","During operation of the distributed software application, state information is created, system resources are allocated, and\/or databases are updated. If the software components of a distributed software application shut down without a preplanned shutdown sequence, then the distributed software application may leave system resources in an inconsistent state. As one shortcoming, without a proper shutdown sequence, the distributed software application may not properly store the state information, release the allocated system resources, and\/or update the databases.","During shutdown of a distributed software application divided into a plurality of executables running on a single processor, the distributed software application may shut down the executables by following a preplanned shutdown sequence for the executables. As one shortcoming, executing the shutdown sequence at the executable level may not serve to fully leave the system resources in a consistent state. The distributed software application may run on a single processor or the executables of the distributed software application may be divided across a plurality of processors. As another shortcoming, the shutdown sequence is unable to fully coordinate a shutdown of the executables and software components of the distributed software application divided across a plurality of processors.","Thus, a need exists to shut down a distributed software application in a manner that stores state information, releases system resources, and\/or leaves the system resources in a consistent state.","A manager component for a distributed software application employs dependency relationships between software components of the distributed software application during shutdown of the distributed software application. The manager component shuts down the software components in an ordered sequence based on the dependency relationships among the software components. When software components have dependencies on other software components, the manager component shuts down the software components in a proper sequence to store state information, release system resources, and\/or leave one or more database of the distributed software application in a consistent state.","In one embodiment, there is provided an apparatus comprising a manager component in communication with a distributed software application. The distributed software application comprises a plurality of software components that run within one or more executables. The manager component shuts down the plurality of software components in an ordered sequence based on one or more dependency relationships among the plurality of software components.","In another embodiment, there is provided an apparatus comprising a manager component that shuts down a first software component, of a distributed software application, that runs on a first processor and a second software component, of the distributed software application, that runs on a second processor in an ordered sequence based on one or more dependency relationships between the first and second software components.","In yet another embodiment, there is provided a method for: obtaining one or more dependency relationships among a plurality of software components that run within one or more executables of a distributed software application; establishing an ordered sequence for shutdown of the plurality of software components based on one or more of the one or more dependency relationships; and shutting down the plurality of software components in the ordered sequence.","Turning to , an apparatus  in one example comprises a distributed software application  and a management infrastructure . The management infrastructure  performs one or more management operations on the distributed software application . The management infrastructure  comprises a manager component . For example, the manager component  may coordinate one or more of starting, stopping, initializing, shutting down, and monitoring the distributed software application , detecting failures of the distributed software application , recovering the distributed software application , propagating state changes about distributed software application , and the like.","The distributed software application  represents a software application divided among a plurality of executables (i.e., software capsules or software entities). For example, the distributed software application  comprises a plurality of executables ,  and . The distributed software application  may run on a single central processing unit (\u201cCPU\u201d) or may be divided between multiple CPUs. For example, the executables  and  may run on processor  and the executable  may run on processor . The processor  comprises an executable manager  and the processor  comprises an executable manager . The executable managers  and  in one example are part of the management infrastructure .","The executable managers  and  start, stop and monitor executables of the distributed software application  that run on the processors  and , such as the executables ,  and . To start or stop the executable , the executable manager  invokes operating system commands to start or stop the executable . The executable managers  and  monitor communication channels and\/or diagnostics on behalf of the executables ,  and . Should one or more of the executables ,  and  fail, the respective one of the executable managers  and  informs the manager component .","To detect failures of the executables ,  and  the executable managers  and  register with an operating system to receive notifications when the executables ,  and  terminate either abnormally or as a result of explicit commands sent to the executables ,  and . To detect failures of software components , ,  and  within the executables ,  and , the executable managers  and  send status queries to the software components , ,  and  and expect to receive status responses from the software components , ,  and .","Each of the executable managers  and  comprise a communication interface  for communication with the manager component . The executable managers  and  receive instruction from the manager component . For example, the executable managers  and  may receive instructions at the communication interface  from the manager component . The executable manager  is encapsulated in an executable  running on the processor  and the executable manager  is encapsulated in an executable  running on the processor .","The executables ,  and  comprise one or more software components , ,  and . For example, the executable  encapsulates the software components  and , the executable  encapsulates the software component , and the executable  encapsulates the software component . Within each of the executables ,  and  may be tens, hundreds, or even thousands of other software components (e.g., analogous to the software components , ,  and ).","The software components , ,  and  represent software sub-entities of the executables ,  and . For example, the software components , ,  and  represent logical blocks of software of the executables ,  and . The software components  and  in one example are developed independently and then put together within the executable . The software components , ,  and  each perform some portion of the overall functionality of the distributed software application . The software components , ,  and  work together to make the distributed software application  achieve the desired operation. The distributed software application  may provide any functionality for a computer system. The distributed software application  in one example comprises a call processing software application. For example, the distributed software application  sets up and\/or tears down telecommunication sessions in a telecommunication network.","In one embodiment, each of the software components , ,  and  comprise application software , management support software , a management support software communication interface , and one or more application software communication interfaces . The software components , ,  and  employ the management support software communication interfaces  to receive communications from the manager component . The software components , ,  and  employ the application software communication interfaces  to receive communications from other software components of the software components , ,  and . An application programming interface (\u201cAPI\u201d)  communicatively couples the application software  with the management support software  in each of the software components , ,  and . The application software  and the management support software  can exchange information through the application programming interface .","The application software  is the portion of the software components , ,  and  that performs some portion of the overall functionality of the distributed software application . The management support software  is the portion of the software components ,  and  that cooperates with the manager component  to perform management operations on the software components ,  and . The application software  is part of the distributed software application  and the management support software  is part of the management infrastructure .","An application developer creates the application software  of the software components , ,  and  to achieve the designated functionality of the software components , ,  and . For example, the application developer creates the application software  of the software components , ,  and  to achieve the overall functionality of the distributed software application .","To alleviate the application developers from being required to write software into each of the software components , ,  and  to interface with the manager component , a code generator in one example automatically generates the management support software . To create the management support software , a configuration file  in one example is input into the code generator. The configuration file  comprises connection information and\/or architecture information of the distributed software application . The code generator creates code for the management support software . The code for the management support software  is compiled and linked with the application software  in the software components , ,  and . The management support software  may be different for each of the software components , ,  and , as will be appreciated by those skilled in the art.","The manager component  comprises a communication interface  for receiving incoming communications. The communication interface  is employable for receiving the configuration file . The manager component  may employ other means to receive the configuration file , such as reading the configuration file  directly from a disk or file system. The communication interface  may also receive communications from the executable managers  and , as well as communications from the software components , ,  and .","The manager component  may also use the communication interface  for receipt of external system information from an external environment . In one example, the external environment  represents other components of the system that are in communication with the manager component . In another example, the external environment  represents another management infrastructure in communication with the management infrastructure .","The manager component  is encapsulated with zero or more other software components in an executable . The executable  that contains the manager component  may be run on either of the processors  and . The manager component  in one example is active and the apparatus  may have one or more standby manager components (e.g., analogous to the manager component ). If the manager component  fails, then one of the standby manager components becomes active and gains managerial control of the distributed software application .","One advantage to the manager component  controlling shutdown of the distributed software application  is that the manager component  alleviates application developers from being required to write software into each of the software components , ,  and  to coordinate shutdown. The manager component  controls shutdown of the software components , ,  and  on behalf of the software components , ,  and . For example, the manager component  interfaces with the management support software  coupled with the application software  in the software components , ,  and  to sequence shutdown of the software components , ,  and . Therefore, the manager component  saves the application developers effort of creating software to sequence shutdown.","The management infrastructure  provides shutdown management functionality as a reusable asset for distributed software applications. The management infrastructure  in one example comprises a portion of a high availability (\u201cHA\u201d) infrastructure. The manager component  in one example comprises a high availability manager component operating in a high availability infrastructure. The high availability infrastructure controls management operations on the software components , ,  and  for the distributed software application . For example, the high availability infrastructure controls shutdown of the software components , ,  and  in the ordered sequence for the distributed software application , along with terminating the executables that encapsulate the software components , ,  and . The high availability infrastructure is usable to control management operations for the distributed software application  or another distributed software application. The high availability infrastructure is able to continue processing while switching between active and standby components in the high availability infrastructure.","To startup of the distributed software application , the manager component  initializes each of the software components , ,  and  and each of the executables ,  and . The manager component  in one example imports the configuration file  to obtain connection information of the distributed software application . The configuration file  provides information to the manager component  to allow the manager component  to control the distributed software application . The configuration file  is created to store connection information and\/or architecture information of the distributed software application . The configuration file  in one example provides the manager component  with information about the set of executables ,  and , the number of each type of the executables ,  and , the mapping of the software components , ,  and  to the executables ,  and , the types of the software components , ,  and , and the number of each type of the software components , ,  and  in each of the executables ,  and .","The configuration file  in one example indicates one or more dependency relationships among the software components , ,  and . The manager component  employs a list of the dependency relationships to establish an ordered sequence for startup. The manager component  initializes the software components , ,  and  in the ordered sequence for startup based on the dependency relationships among the software components , ,  and . For example, if the software component  is dependent on the software component , then the manager component  initializes the software component  before initializing the software component  as part of the ordered sequence. If the software components  and  are free from any dependency relationships, then the manager component  may initialize the software components  and  in parallel as part of the ordered sequence.","Once all of the executables ,  and  and the software components , ,  and  are initialized during startup, the distributed software application  may run and perform an intended function. During operation of the distributed software application , state information is created, resources are allocated, and\/or databases are updated. At shutdown of the distributed software application , it is desirable to save the state information, release the allocated resources, and confirm that the databases are in a consistent state. To transition the distributed software application  from active operation to a non-operational state, the manager component  shuts down the distributed software application  in an ordered sequence based on the dependency relationships among the software components , ,  and . The manager component  may shut down the distributed software application  in the ordered sequence at the level of the software components , , , and , then may shutdown the executables ,  and . The manager component  may coordinate the shutdown of the executables ,  and  and\/or the software components , ,  and  running on a single processor or divided among a plurality of processors, such as the processors  and .","Turning to , an illustrative description of one exemplary operation of the apparatus  is now presented, for explanatory purposes. The manager component  comprises a high availability manager component operating in a high availability infrastructure. To begin operation of the apparatus , the distributed software application  is configured for control by the manager component , and the manager component  coordinates the initialization of the distributed software application . Exemplary logic  serves to allow the manager component  to employ an ordered sequence to shut down the distributed software application . The logic  employs one or more steps, for example, STEPS , , , , , , and . An application developer, a system architect, or any other developer performs the STEP  of  and the manager component  performs the STEPS , , , ,  and  of .","To shut down the distributed software application , the manager component  shuts down the software components , ,  and  in an ordered sequence based on the dependency relationships among the software components , ,  and  and\/or among the executables ,  and . Shutting down the distributed software application  in the ordered sequence serves to save a record of state information, release allocated system resources, and properly update databases. The manger component  serves to shut down the executables ,  and  according to the ordered sequence. The manager component  also serves to shut down the software components , ,  and  running within the executables ,  and  according to the ordered sequence.","At STEP , the application developer or other developer creates the configuration file  to comprise connection information, architecture information, and dependency relationships of the distributed software application . At STEP , the manager component  imports the configuration file  to obtain the list of the dependency relationships between the software components , ,  and . At STEP , the manager component  employs the list of dependency relationships to establish an ordered sequence for shutdown of the software components , ,  and  and the executables ,  and .","At STEP , the manager component  deactivates the software components , ,  and  according to the ordered sequence. For example, the manager component  sends deactivation messages to the management support software communication interfaces  of the software components , ,  and  in the ordered sequence. The deactivation messages indicate to the software components , ,  and  to wrap up any current tasks and to not take on any new tasks. The manager component  may also instruct the active software components of the software components , ,  and  to not send new tasks to the deactivated software components of the software components , ,  and .","In one exemplary implementation of the distributed software application , the software component  has a dependency on the software component , and the software component  (running on the processor ) has a dependency on the software component  (running on the processor ). The software component  in one example is free from dependency relationships. Therefore, the manager component  may shut down the software component  independently from the other software components , , and . To shutdown of the distributed software application  according to the ordered sequence, the manager component  determines to shut down the software component  before the software component , and to shut down the software component  before the software component .","To begin shutdown of the software components , ,  and , the manager component  in one example sends a first deactivation message to the software component  and a second deactivation message to the software component . Upon deactivation of the software components  and , each the software components  and  send a confirmation message to the manager component . Before proceeding, the manager component  waits for the confirmation message from the software component  to confirm deactivation of the software component . Upon receipt of the confirmation message from the software component , the manager component  may send a third deactivation message to the software component . Before proceeding, the manager component  waits for a confirmation message from the software component  to confirm deactivation of the software component . Upon receipt of the confirmation message from the software component , the manager component  may send a fourth deactivation message to the software component . Upon deactivation of the software component , the software component  sends a confirmation message to the manager component .","The manager component  sends the deactivation messages to the management support software  of the software components , ,  and . The management support software  relays the instruction to deactivate through the application programming interface  to the application software . After deactivation the application software  sends the confirmation messages to the management support software . The management support software  relays the confirmation messages to the manager component .","Communication between the manager component  and the management support software  of the software components , ,  and  is resilient to failure. For example, the messages may employ timeouts to handle dropped or delayed messages or confirmation notifications. Upon failure of a deactivation message, the manager component  in one example employs a configurable number of retries for the deactivation message.","Once the manager component  has deactivated each of the software components , ,  and  according to the ordered sequence, the manager component  may tear down any communication channels between the software components , ,  and . The manager component  then may terminate each of the software components , ,  and . At STEP , before terminating the software components , ,  and , the manager component  instructs the executable managers  and  to stop monitoring the executables ,  and . For example, the manager component  sends a message to the communication interface  of the executable manager  to instruct the executable manager  to stop monitoring the executables  and . The manager component  also sends a message to the communication interface  of the executable manager  to instruct the executable manager  to stop monitoring the executable .","At STEP , the manager component  sends termination messages to the management support software communication interfaces  of the software components , ,  and . The termination messages instruct the software components , ,  and  to stop running. The manager component  in one example sends the termination messages in the ordered sequence based on the dependency relationships of the software components , ,  and , analogously to the deactivation messages, as described herein.","At STEP , the manager component  instructs the executable managers  and  to terminate the executables ,  and . For example, the manager component  sends a message to the communication interface  of the executable manager  to instruct the executable manager  to terminate the executables  and . The manager component  also sends a message to the communication interface  of the executable manager  to instruct the executable manager  to terminate the executable . Upon shutdown of the executables , , and , the executable managers  and  each send a confirmation message to the manager component  to indicate a successful shutdown of the executables ,  and . Receipt of the confirmation messages from each of the executable managers  and  indicates to the manager component  that the distributed software application  is fully shutdown. The executable shutdown messages to the executable managers  and  and the confirmation messages are resilient to failure, analogously to the deactivation messages and deactivation confirmation messages, as described herein.","In one embodiment, the manager component  may determine to not follow the ordered sequence to shut down the distributed software application . If a large number of the software components , ,  and  don't have state information that needs to be preserved and don't need to complete any operations that are in progress, then the manager component  may just terminate the software components , ,  and  in a more efficient manner, such as in parallel.","The apparatus  in one example comprises a plurality of components such as one or more of electronic components, hardware components, and\/or computer software components. A number of such components can be combined or divided in the apparatus . An exemplary component of the apparatus  employs and\/or comprises a set and\/or series of computer instructions written in or implemented with any of a number of programming languages, as will be appreciated by those skilled in the art. The apparatus  in one example comprises any (e.g., horizontal, oblique, or vertical) orientation, with the description and figures herein illustrating one exemplary orientation of the apparatus , for explanatory purposes.","The apparatus  in one example employs one or more computer-readable signal-bearing media. The computer-readable signal-bearing media store software, firmware and\/or assembly language for performing one or more portions of one or more embodiments of the invention. Examples of a computer-readable signal-bearing medium for the apparatus  comprise the recordable data storage medium of the manager component . The computer-readable signal-bearing medium for the apparatus  in one example comprise one or more of a magnetic, electrical, optical, biological, and atomic data storage medium. For example, the computer-readable signal-bearing medium comprises floppy disks, magnetic tapes, CD-ROMs, DVD-ROMs, hard disk drives, and electronic memory. In another example, the computer-readable signal-bearing medium comprises a modulated carrier signal transmitted over a network comprising or coupled with the apparatus , for instance, one or more of a telephone network, a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), the Internet, and a wireless network. The steps or operations described herein are just exemplary. There may be many variations to these steps or operations without departing from the spirit of the invention. For instance, the steps may be performed in a differing order, or steps may be added, deleted, or modified.","Although exemplary implementations of the invention have been depicted and described in detail herein, it will be apparent to those skilled in the relevant art that various modifications, additions, substitutions, and the like can be made without departing from the spirit of the invention and these are therefore considered to be within the scope of the invention as defined in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["Features of exemplary implementations of the invention will become apparent from the description, the claims, and the accompanying drawings in which:",{"@attributes":{"id":"p-0013","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0022"},"figref":["FIG. 2","FIG. 1"]}]},"DETDESC":[{},{}]}
