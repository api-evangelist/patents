---
title: Method and system for reading data from and writing data to a memory
abstract: The invention relates to a method of writing data to and reading data from a memory () by a host. By limiting processing time, time restrictions regarding the data to be processed can be met. However, this is at the expense of data integrity. By setting time limits for a group () of multiple processing assignments and dynamic allocation of time, reserved for error recovery and retries, data integrity can be improved, while time limits can still be met. Furthermore, by attaching priorities to the assignments, multiple types of data can be handled in one group of assignments. For example, assignments with real-time requirements can be put in a group with assignments with best effort requirements. In this way, more flexible planning of processing assignments is possible. The invention also relates to a system for writing data to and reading data from a memory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06986012&OS=06986012&RS=06986012
owner: Koninklijke Philips Electronics N.V.
number: 06986012
owner_city: Eindhoven
owner_country: NL
publication_date: 20020903
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["The invention relates to a method of reading data from a memory and writing data to a memory by means of a host, in which an available time for performing a processing assignment is limited by the host.","The invention also relates to a system comprising a host and a memory, in which the host is adapted to write data to the memory and read data from the memory, and in which the system is adapted to limit an available time for performing a processing assignment.","WO 00\/75923 discloses a method of supplying data to a host computer by means of a hard-disk drive system. This method comprises the steps of establishing whether a read\/write assignment by the host computer concerns audiovisual data, and of limiting the number of available recovery attempts during performance of the assignment if the assignment concerns audiovisual data.","The number of available recovery attempts is eliminated because the host gives a time limit within which the assignment should be completed. In this way, each assignment is assigned a time unit in which errors can be recovered. Not every assignment will need this time unit. In addition, further assignments may need more time to restore errors. The drawback of this method is, on the one hand, that the bandwidth of the hard-disk drive system is not optimally used and, on the other hand, is at the expense of the integrity of the data.","It is an object of the invention to improve the use of bandwidth of the hard-disk drive system.","This object is achieved by means of the method according to the invention in that the available time is the sum of a first time unit planned for processing the assignment, and a second time unit made available for recovering processing errors, the second time unit being made available for a group of processing assignments comprising said processing assignment.","By means of a dynamic allocation of time for error recovery, this time is used optimally. If no errors occur when an assignment is being processed, the time for recovering errors is automatically available for the next assignment of the group of processing assignments. This has the advantage that the time available for recovering errors is optimally used. On the one hand, an extra time unit for error recovery need not be allocated to each processing assignment. This has the advantage that the bandwidth of the memory is better utilized. On the other hand, the time available for error recovery and not used by a previous assignment may be used for recovering errors which occur during a subsequent assignment. This has the advantage that the integrity of data regarding the next assignment can be enhanced.","An embodiment of the method according to the invention is characterized in that the second time unit is recomputed after at least one of the processing assignments of the group of processing assignments has been completed.","In fact, the first time unit is a planning within which the assignment will certainly have been processed because the first time unit in this embodiment is computed on the basis of the guaranteed bitrate of the hard-disk drive system, which is a worst case approximation. In this way, it is possible that the time unit within which the assignment has been processed is shorter than the first time unit. By using the difference between the two time units for further assignments for recovering processing errors by adding this difference to the second time unit, the time available for error recovery is longer. This has the advantage that the integrity of the data to be processed can be enhanced without the processing of the group of processing assignments taking more time.","An embodiment of the method according to the invention is characterized in that a priority level is coupled to at least one of the processing assignments. This has the advantage that a plurality of types of data can be processed in a group of processing assignments.","An embodiment of the method according to the invention is characterized in that the priority level comprises one of the following classifications: a first priority at which the requested assignment should be completed within a predetermined time, and a second priority at which the requested assignment should be completed without errors. This embodiment of the method according to the invention has the advantage that, for example, assignments relating to audiovisual data with a real-time character as well as assignments relating to a file whose data integrity is important can be planned in a group of processing assignments. This has the advantage that the memory can be used in a more flexible way.","An embodiment of the method according to the invention is characterized in that, if a processing assignment of the second priority is not faultlessly completed within a third time unit, which is equal to the sum of the first time unit and the second time unit, the relevant processing assignment is planned in a further group of processing assignments. Data integrity is a first requirement for processing assignments of the second priority. If processing errors occur when processing assignments of the second priority, the memory will have to retry to recover the errors. This may take several seconds, for example, in a hard-disk drive system. In the meantime, no other processing assignments can be processed. By postponing assignments of the second priority, at which errors occur during processing, to a subsequent group of processing assignments, the hard-disk drive system is available again for other processing assignments, and processing errors which occurred during processing of the assignment of the second priority can be solved again. This embodiment of the method according to the invention has the advantage that, on the one hand, the system is not occupied for an unacceptably long time by repeated attempts to recover processing errors and, on the other hand, the integrity of data regarding assignments of the second priority is guaranteed.","An embodiment of the method according to the invention is characterized in that, if a processing assignment of the second priority is not faultlessly completed within a third time unit, which is equal to the sum of the first time unit and the second time unit, the error recovery of the relevant processing assignment of the second priority is planned in a further group of processing assignments. This method according to the invention has the advantage that data regarding the processing assignment of the second priority, during which at least one processing error has occurred and which has been processed without processing errors does not need to be processed again in a subsequent group of processing assignments. Instead, only the data which is not processed by a processing error is to be processed. In this way, only the recovery of the processing error is to be postponed to a subsequent group of at least one processing assignment. This has the advantage that the bandwidth of the memory is better utilized.","The system according to the invention is characterized in that the system is further adapted to compute the available time by taking the sum of a first time unit, planned for processing the processing assignment, and a second time unit made available for recovering processing errors, the system being further adapted to make the second time unit available for a group of processing assignments, the group comprising said processing assignment.","These and other aspects of the invention are apparent from and will be elucidated with reference to the embodiments described hereinafter.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["150","100","102","101","103","104","100","102","103","111","103","101","112","104","113","101","104","114","100","121","101","100","122","101"]},"The system  is adapted to store information presented via the input channel  in the hard-disk system  and to present information stored on the hard-disk system  via the output channel . The information may consist of streams of audiovisual information, files\u2014texts and the like\u2014or a combination of both. A possibility of application of the system  is a PC. However, it is alternatively possible to use the system  in a digital video recorder (DVR).",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 1"],"b":["200","150","200","205","100","204","205","205","204","211","204","205","212","205","204","205","102","204"]},"In the drive structure , a scheduler  is situated underneath the file system . The scheduler  receives requests for retrieving information from the hard-disk system  or storing information in the hard-disk system  via a second API  of the file system . Subsequently, assignments for retrieving the information from the hard-disk system  or storing information in the hard-disk system  are planned by the scheduler  in the form of cycli. The cycli consist of assignments for retrieving parts of the requested information sequentially from the hard-disk system , or of assignments for storing parts of the presented information sequentially in the hard-disk system . A combination of read and write assignments is also possible.","The scheduler  gives the assignments in the cycle to the hard-disk system  via a driver . The scheduler  communicates with the driver  via a third API , and the driver  communicates with the scheduler  via a third feedback channel .","The driver  subsequently communicates with the hard-disk system  via a fourth API . In the embodiment shown, this communication takes place in accordance with the ATA-6 protocol. The hard-disk system  communicates with the driver  via a fourth feedback channel .","The activities of the application , the file system , the scheduler  and the driver  are co-ordinated by a drive system  which communicates with all of the three layers of the drive structure .","In the embodiment shown, the drive structure  is implemented in software stored in the memory . However, it is alternatively possible to implement the drive structure as a ROM code on a separate IC.","Now it is possible that the hard-disk system  () encounters an error when information is being read from or written to the hard disk itself (not shown). Conventional hard disks will attempt to recover the error until the error has been solved, or until all pre-programmed recovery procedures have been exhausted. The reason is that the integrity of data in many applications such as text processing on a PC, is more important than supplying the requested information in time. If the error cannot be recovered by means of pre-programmed recovery procedures, the conventional hard disks give an error message. This total process may take several seconds. In this period of time, the hard-disk system  cannot perform any other assignments.","If the system  () is used in a DVR apparatus, the information requested by the host  () from the hard-disk system  () will often consist of one or more streams of audiovisual information. The same applies to information presented by the host  () to the hard-disk system  () for storage on the hard-disk system . It is alternatively possible that the system  () is given an assignment for storing information in the hard-disk system  () as well as an assignment for retrieving information from the hard-disk system . Audiovisual information is presented in a continuous stream so that it is necessary that the system  () processes this information in real time.","In one embodiment of the invention, it is possible that the system  is connected by means of the output channel  to a display device (not shown) and sends audiovisual information, stored in the hard-disk system  by the system , to the display device for displaying this audiovisual information to a user. If the hard-disk system  now encounters an error when reading information, this may lead to a drop-out of the picture, when a hard error is concerned\u2014that is to say, when there is really an error on the hard disk itself\u2014and the hard-disk system will continue to try to recover this error. Also in the case of a soft error\u2014badly written data\u2014it is possible that the processing of an error may take a long time. As stated hereinbefore, the time used for this purpose may increase to several seconds in conventional hard-disk systems. This is not desirable because a user of the system  () will then miss a considerable piece of the stream of audiovisual information. The presentation of the stream of audiovisual information with a small error is preferred to not presenting a part of the stream of audiovisual information. The integrity of the information is thus of subordinate importance in the case where audiovisual information is concerned. Moreover, the supply of information to other applications is also interrupted at the moment when the hard-disk system  is busy for a long time to recover an error until all pre-programmed procedures have been exhausted. It is therefore preferred to limit the time assigned to a hard disk for a satisfactory supply of data. This is possible with the ATA-6 standard for hard-disk systems. In the presented embodiment of the invention, this function is used in scheduler  ().","The way in which the scheduler in accordance with the presented embodiment of the invention operates will now be described with reference to ,  and . If processing of information is mentioned, it is understood to mean reading of information from the hard-disk system  and\/or storing information in the hard-disk system .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 3A","FIG. 1"],"b":["203","204","102","102","100"]},"If the scheduler  plans a period of recovering an error for each processing assignment, which period suffices for about two recovery attempts, and if a total of four streams of audiovisual information must be processed, a planning for processing information can be presented as a first cycle planning  in .","One way of determining the total time of the first cycle planning  is given by relation (1). In this relation, Tis the computed total time of the cycle planning, ris the guaranteed bitrate of the hard-disk system , M is the total capacity of the memory  (), \u03b1 is a natural number and Tis the time required for a recovery error attempt. In one embodiment of the invention, Tis the minimal time required to recover an error, i.e. the time required for one revolution of the hard disk. This is the minimal time required for rereading or rewriting the sector where the read or write assignment has gone wrong.","In this way, Tis the time in which the memory  () can be filled with information, or the time in which all information in the memory  can be stored in the hard-disk system . It is, however, preferred to observe a safety margin so as to prevent overflow of the memory. For this reason, the factor \u03b2 is introduced in relation (1). \u03b2 is preferably a real number between 0 and 1. Furthermore, the consumption of the time required for an error recovery attempt is optional, while it is also possible that factor \u03b1 is equal to 0. Tcan be taken to be equal to the time required for a revolution of the disk of the hard-disk system  (). \n\n","The time Tneeded by the hard-disk system  in a cycle for performing an assignment for a stream of audiovisual information (stream i) can be computed with reference to relation (2). In this relation, Tis the time of a cycle in accordance with relation (1), ris the bitrate of the stream of audiovisual information for which an assignment is to be performed, Tis the (maximum) time required for jumping from one sector to another. This may take a fairly long time and a plurality of revolutions to find the sector (seek time) plus maximally one rotation (rotational latency). \n\n","In a further embodiment, the cycle time Tmay also be computed in a different way. This has been done in relations (3) to (5). Relation (3) indicates the time Twhich is required to perform a processing assignment having a value of Bwith a guaranteed bitrate r, taking an access time Tinto account. \n\n","Relation (4) gives a possible relation between an assignment quantity B, a bitrate rof the data stream i and the time Tindicating the planned time of the processing assignment.\n\n\u2003\u2003(4)\n","Furthermore, the cycle time Tshould comply with relation (5). In relation (5), TC is the time of the total cycle, Tis the times planned for the assignments in the cycle, in which Tmay be determined by means of relation (3). Factor \u03b1 and Tare determined as explained with reference to relation (1). \n\n","For reasons of costs, a small buffer is preferred. Therefore, it is preferred to maintain the assignment quantity Brelatively small. It will be evident from the relations above that the cycle time Tmust thus be kept short. Moreover, the reaction time of the system  () is also shorter when the cycle time Tis short.","Furthermore it is also possible to determine the cycle time Tin the relations above per cycle with reference to the sum of the times Tplanned for completing all assignments.","Since rindicates a lower limit of the bitrate of hard-disk system  (), relation (2) indicates an upper limit of the time required to perform the assignment. The allocation of time for two recovery attempts per assignment is too much in many cases. This is shown in the first cycle planning  and the cycle . As previously stated, the system  () is considered to process four streams of information in the embodiment shown, in which the timeliness of processing information is more important than the integrity. The time of the first cycle planning  is split up into four pieces and, in each piece, the time is reserved for processing a piece of information by hard-disk system . In the first cycle planning , a first time unit  indicates the time planned for processing a first assignment. A second time unit  indicates the time planned for two recovery attempts for processing possible errors which may occur when processing the first assignment. Furthermore, a third time unit  indicates the time planned for a second assignment. A fourth time unit  indicates the time planned for two recovery attempts of processing possible errors which may occur when processing the second assignment.","Now, the reservation of time required for two attempts of recovering an error is a worst case approximation per processing assignment. The time reserved for an assignment is also a worst case approximation. In this way, it is possible that the spare time\u2014the time left in a cycle for error recovery\u2014may increase as a larger number of assignments in the cycle has been processed.","Since, as already previously stated, relation (2) gives an upper limit for the time required to perform an assignment, it is possible in practice to perform the first cycle planning  as the cycle . In the cycle , a first time unit  represents the time which was actually required to process the first assignment. Furthermore, a second time unit  in the cycle  represents the time which was required for recovering an error which occurred when the first assignment was processed. In the presented example, one recovery attempt was sufficient to recover the error.","In practice, it appears that the risk of errors when processing information by a hard-disk system is so small that it is not real to reserve time per processing assignment for recovering errors which occur when the processing assignment is processed, if the quantity of information to be processed is relatively small. Since, however, a processing error may occur in each assignment, it is desirable to reserve space for recovering possible errors. This may be space for recovering an error, but for safety's sake it is alternatively possible to reserve space per processing assignment for recovering two processing errors. A different number is of course also possible. As a result, the bitrate of the hard-disk system  is not optimally used. In fact, the time planned for the first cycle planning is clearly longer than the time used in the first cycle . Consequently, planning for use of the hard-disk system  remains unused during a time unit .","It is preferred to adapt the time reserved for recovering a processing error to the risk of occurrence of a processing error. If the risk of an error is 10per bit, one recovery attempt should be planned per megabit of processed information. If the processed information is smaller than 10bits and one recovery attempt per processing assignment has been reserved, this leads to a less efficient use of the available bandwidth of the hard-disk system .","Those skilled in the art know that the above-mentioned approximation is very simplistic and inaccurate because the seek operation\u2014seeking for the correct sector\u2014may also be a source of errors. However, the message is clear to those skilled in the art: the risk of errors for an assignment is considerably smaller when the full spare time (for recovering all processing errors in a cycle) is given along with an assignment, rather than when a fraction of the spare time is given along with each assignment.","In the presented embodiment of the invention, it is therefore proposed to reserve time for recovery attempts per group of processing assignments. This is shown in a second cycle planning . In the second cycle planning , a first time unit  is reserved for performing a first assignment, a second time unit  is reserved for performing a second assignment, a third time unit  is reserved for performing a third assignment, a fourth time unit  is reserved for performing a fourth assignment, and a fifth time unit , of which the reserved time corresponds to the time required for two recovery attempts.","Assuming that the four assignments in the second cycle planning  are performed as the assignments for the first cycle planning , a second cycle  shows the way in which the second cycle planning  is performed. The planned time which is now not used for performing the assignments, indicated by a time unit , is now much smaller than the time unit . In the situation shown, the gain consists of the time reserved in the first cycle planning for a total number of seven recovery attempts.","If a processing error occurs when the first assignment is being performed and the hard-disk system needs all the time reserved for error recovery, indicated by the fifth time unit , for recovering the processing error, there is no time left to recover processing errors which occur when the second, the third and the fourth assignment are being processed. In that case, the processing errors will not be recovered and the assignments will be further processed. Within the ATA-6 protocol, the command can be given to further process the assignment when there is an error message, in which no attempt is made to recover the error.","An embodiment of the method according to the invention for performing the second cycle planning  is shown in .  is a flow chart showing a processing flow . In the presented embodiment of the method according to the invention, this method is performed by the processing unit  (). The processing flow  starts at a start  where the file system  () passes on at least one assignment to the scheduler  ().","As previously stated, the duration of a cycle is notably determined by the guaranteed bitrate of the hard-disk system  (), the seek time (time for seeking a specific sector) and the capacity of the memory  (). All processing assignments are to be performed in the duration of a cycle.","Furthermore, the sum of the bitrates of all streams of audiovisual information, for which the hard-disk system  () receives processing assignments, must not be larger than the guaranteed bitrate of the hard-disk system . This means that the sum of the times required to perform the assignments of all streams of audiovisual information as computed in accordance with relation (2) must not be longer than the cycle time computed in accordance with relation (1). This is tested in a decision . In decision , it is tested whether the situation complies with relation (6) after the quantity of the left member of relation (6) has been determined in a process . In relation (6), Tis the time required to process the information for an audiovisual stream of information i in the cycle time as computed in accordance with relation (1), and Tis the cycle time as computed in relation (1). In relation (6), n is the number of audiovisual streams of information of which information is to be processed. It is of course also evident that the relations (3), (4) and (5) may be alternatively used for computing relation (6). Of course, this does not depart from the scope of the invention. \n\n","If the situation complies with relation (6), the processing flow  proceeds to a process . If it appears in the decision  that the time required to process all assignments is not shorter than the duration of a cycle, the last received processing assignment is postponed in a process  to a subsequent cycle. Subsequently, it is tested once again in the decision  whether the time required to process all assignments is shorter than the duration of a cycle. It will of course be evident to those skilled in the art that a different assignment than the last is coupled. This may be done, for example, on the basis of priorities or deadlines, coupled to the processing assignments. In a further embodiment, processing assignments are added to a row in the loop comprising the process , the decision , the process  and the process , until the left member of relation (6) is larger than the right member of relation (6), so that the left member of relation () is always smaller than the right member of relation (6). The processing assignments are selected from a group of assignments by the file system  (), the application  () or the scheduler  (). The selection of the assignments takes place on the basis of the priorities given to the processing assignments. In a further embodiment of the invention, the selection of the assignments for the cycle takes place on the basis of the deadline set for a processing assignment.","In the process , the assignments to be performed are set in a queue. Subsequently, it is computed in a process  how much time the assignments will take up and how much spare time is present in the cycle. The time required for an assignment is determined in accordance with relation (3).","The difference between the sum of the time required for processing the assignments of all streams of information and the duration of the cycle is the spare time. In a further embodiment, a spare time can always be defined in a cycle so as to create time to recover errors. This may be done, for example, by defining a dummy processing assignment.","As previously stated, the factor \u03b1 in relation (1) can be varied in a further embodiment so as to reserve space in a cycle for processing errors. The factor \u03b1 may be determined on the basis of experience with the hard-disk system. For example, the factor \u03b1 may be determined by the manufacturer of the hard-disk system  on the basis of experiments. In another embodiment of the invention, it is alternatively possible to determine the factor \u03b1 on the basis of the performance of the hard-disk system  in the ambience of the system  (). In this embodiment, the factor \u03b1 will be larger when the system  () is in an ambience with much vibration, as compared with a situation where the system  () is in an ambience without vibration.","After this computation in the process , a first assignment of the queue formed in the process  is passed on in a process  to the hard-disk system  () for the purpose of processing. As already previously stated, it is possible to give a deadline to a processing assignment in a hard-disk system complying with the ATA-6 standard. In the process , a deadline is given along with the first processing assignment. The deadline is equal to the sum of the time reserved for performing the first assignment, and the spare time which is computed in the process . If the assignment has been processed without an error, the hard-disk system  () will be ready with the processing operation within the deadline that has been set. However, if at least one error occurs when the first assignment is being processed and the time for recovering the error plus the time required to process the assignment is larger than the deadline set in the process , the hard-disk system  () will discontinue processing of the assignment when the deadline is reached. After the scheduler  () has given the assignment to the hard-disk system in the process , the processing flow  waits in a process  until the hard-disk system has finished the assignment. Subsequently, feedback is given to the file system  () in a process . This provides, inter alia, the possibility of finding out whether the assignment has been processed successfully. If errors have occurred during processing of the assignment, feedback can be given on whether errors have occurred and how the location and number of errors that have occurred can be determined. If the processing assignment dealt with was a reading assignment, the information that has been read will also be fed back to the file system  (). Subsequently the completed assignment is removed in a process  from the queue formed in the process . After the process , it is tested in a decision  whether the queue formed in the process  and changed in the process  is empty. If this is the case, the processing flow  ends at an end point . If the queue is not empty, the processing flow  proceeds to the process .","Until now, the processing of time-critical assignments has been discussed, i.e. assignments in which timeliness of processing information is more important than integrity of the processed information. However, it is alternatively possible that the processing assignments for the hard-disk system  () also concern information whose processing integrity is more important than its timeliness. Examples of this type of information are files comprising an application. Handling processing errors cannot be interrupted in these types of processing assignments because this would affect the integrity of the processed information. This is not acceptable. For this reason, this type of information cannot be processed in accordance with the processing flow  ().","To simplify the further description of the presented embodiment of the invention, an assignment to process information, in which timeliness of processing is more important than integrity, will be referred to as a real-time or RT assignment. An assignment for processing information, in which integrity is more important than timeliness, is referred to as a best effort or BE assignment. These classifications may be considered to be priority levels. Again, the processing of information comprises storing information in the hard-disk system  () as well as reading information from the hard-disk system  ().","As previously stated, the processing flow  () can only be used for RT assignments.  shows a further processing flow  for processing cycli with RT and BE assignments. In the presented embodiment of the method according to the invention, this method is performed by the processing unit  (). The further processing flows begins at the start . In a process , the total time required for processing all assignments is determined.","Subsequently, it is tested in a decision  whether the time required to handle all assignments in the cycle planning does not exceed the time for a cycle (compare decision  in the processing flow  ()). If the time required for handling all assignments in the cycle planning exceeds the time of a cycle, a processing assignment which was the last to come in is postponed in a process  to a subsequent cycle. Subsequently, the time required to complete all assignments in the cycle planning is tested again. If the time required for completing all processing assignments is shorter than or equal to the time of a cycle, all assignments of the cycle planning are queued up in a process . As already stated, it is also possible for an assignment other than the last to be shifted in the process .","Subsequently, the spare time of the cycle planning is determined in a process . To this end, the sum of the times required to complete all assignments of the cycle planning is subtracted from the cycle time. Moreover, the sum of the time required for completing all BE processing assignments in the queue formed in the process  is determined.","Subsequently, a first assignment of the cycle planning is given to the hard-disk system  () in a process . The deadline given for completing the first assignment corresponds in the presented embodiment of the invention to the sum of the time required in accordance with the scheduler for completing the first assignment, the spare time and the time required for completing all BE assignments of the cycle planning. The fact that the BE assignments are not time-critical has been taken as a starting point in this case. The advantage of using the time required for completing all BE assignments of the cycle planning is that the maximum time which is not allocated to time-critical assignments can be used for recovering processing errors. In this way, the integrity of RT information is enhanced and the maximum time is offered to ensure faultless handling of BE assignments. However, it is also possible to determine the deadline only with reference to the sum of the time required in accordance with the cycle planning for handling the assignment and the spare time in the cycle planning.","After the first processing assignment of the queue formed in the process  is given with the associated deadline to the hard-disk system  (), the further processing flow  waits for a reaction of the hard-disk system  in a process . After the hard-disk system  () has finished the assignment and gives feedback to the scheduler  (), it is tested in a decision  whether the assignment has been processed without errors. If this is the case, feedback is subsequently given to the file system  () in the process . Feedback can be given, inter alia, on whether the assignment has been processed successfully. If errors have occurred in processing the assignment, feedback can be given on the occurrence of errors and on the number of errors that has occurred. If the assignment dealt with was a read assignment, the information that has been read will also be fed back to the file system  ().","However, if an error has occurred when the assignment is being processed, which error cannot be recovered within the deadline set, it is tested in a decision  whether the assignment was a BE or a RT assignment. If the assignment was a RT assignment, the processing flow  proceeds to the process  and the assignment is terminated. If the assignment was a read assignment, the data of the hard-disk system  () is passed on together with the error to the host  ().","If the assignment during which an error has occurred that cannot be recovered within the deadline set was, however, a BE assignment, the complete BE assignment is planned in a process  for the next cycle. On planning the cycle, this process has priority to other BE assignments.","If the assignment was a read assignment, the information retrieved from the hard-disk system  () is not passed on to the host  (). If the assignment was a write assignment, the information on the disk (not shown) of hard-disk system  () is ignored. After the process  the further processing flow  proceeds to the process .","After the process , the processed assignment is removed in a process  from the queue formed in the process .","After the assignment for the performed processing operation has been removed in the process  from the queue formed in the process , it is tested in a decision  whether the time which is still available in the cycle is sufficient to process all assignments which are still to be processed. If this is not the case, the last BE assignment in the queue formed in the process  is planned in a process  for the next cycle and removed from the queue. Subsequently, it is tested again in the process  whether the time which is still available in the cycle is sufficient to process the assignments which are still in the queue. If this is not the case, the further processing flow  proceeds to the process . If this is the case, the further processing flow  proceeds to a process . In the process , it is tested whether the queue of processing assignments is empty. If this is the case, the further processing flow  comes to an end at an end point . If the queue in the process  is still not empty, the further processing flow  proceeds to the process .","As is apparent from the description of the further processing flow , it should be known to the scheduler  () whether the processing assignment is a BE or a RT assignment. This is passed on by the application  () via a first Application Protocol Interface (API)  to the file system  () which passes it on to the scheduler  () via a second API .","The further processing flow  () is further illustrated with reference to .  shows a cycle planning . Planned in this cycle are: a first RT processing assignment , a first BE processing assignment , a second RT processing assignment , a third RT processing assignment , a second BE processing assignment  and a length of spare time .  shows how the first RT processing assignment  is given to the hard-disk system  (). In the process  () the extra time a processing assignment may occupy has been computed in addition to the time computed by the scheduler for this assignment. The deadline given with the first RT processing assignment is the sum of the time planned for the first RT processing assignment and a time lapse  which is computed in the process . Time lapse  is computed by summing the time determined by the scheduler for processing the two BE assignments in the cycle planning  and the spare time .",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 6C","FIG. 1","FIG. 1"],"b":["602","102","621","102","606","605","602","622","602"]},"After completion of the second BE processing assignment , which has been effected in a time lapse  which the scheduler reserved for it, the second RT processing assignment is given to the hard-disk system  (). The deadline given for this assignment corresponds to the sum of the spare time , the time planned for the second BE processing assignment  and the time planned for the second RT processing assignment . As previously stated, it is possible to extend the spare time as a larger number of assignments in the cycle is handled. The reason is that the time planned per assignment is a worst case assignment. If a processing assignment is\u2014faultlessly\u2014completed within the deadline set, the difference between the time required by the hard-disk system  () for completing the processing assignment and the planned time is extra spare time for subsequent processing assignments.","In the presented situation, an error occurs when the second assignment  is being processed. The processing assignment is fulfilled in a time lapse  and the error which occurs can be recovered in a time lapse  which is longer than the spare time . Although an error occurs, this error can thus be recovered within the time allocated by the scheduler for performing the assignment. This means that the hard-disk system  () does not give an error message to the scheduler, and the further processing flow  () proceeds to the process  after the second RT processing assignment has been performed in the decision  (). Subsequently, processes  and  are performed. In the decision  it is tested whether the time still available in the cycle planning after the first three processing assignments have been performed is sufficient to perform the rest of the planned processing assignments. As is shown in , this is not the case because a time lapse  indicating the time available in the cycle for handling the last processing assignment (in this case, the second BE processing assignment ) is shorter than the time reserved for this last processing assignment.","After the first three processing assignments of the cycle planning  have been performed, including the recovery of errors that have occurred, there is thus not enough time left to complete the third RT processing assignment  and the second BE assignment . For this reason, the further processing flow  proceeds to the process  after the decision . In the process , the second BE processing assignment  is removed from the queue of assignments. Subsequently, it is tested again in the process  whether the time still available in the cycle planning after the first three processing assignments have been performed is sufficient to perform the rest of the planned processing assignments. This is the case after the second processing assignment  has been removed.","Subsequently, after the process , the spare time is recomputed in the process . In , this time is shown as a recomputed spare time . Subsequently, the second RT processing assignment is given in the process  to the hard-disk system  () with a deadline which corresponds to the time planned for the second RT processing assignment  and a time lapse  which corresponds to the recomputed spare time . In the presented situation, the second RT processing assignment is processed without any errors.  shows how the cycle planning  in the presented situation is performed in accordance with the further processing flow . A time lapse  indicates the time required for processing the first RT processing assignment , a time lapse  indicates the time required for processing the first BE processing assignment , a time lapse  indicates the time required for processing the second RT processing assignment , a time lapse  indicates the time required for recovering an error which occurred when the second RT processing assignment  was processed, and a time lapse  indicates the time required for processing the third RT processing assignment .","The situation presented here is only an example of a situation as may occur in the presented embodiment of the invention. It will be evident to those skilled in the art that the invention has a wider scope than the embodiment presented here.","Hitherto, two examples of planning scenarios have been presented. In the first scenario, a planned cycle only consists of RT processing assignments, and in the second scenario, a planned cycle consists of RT processing assignments and BE processing assignments. If an error occurs in the second case when processing a BE assignment and the error cannot be recovered within the imposed deadline, the entire BE processing assignment is replanned in a subsequent cycle in the presented scenario. In the subsequent cycle, there should be minimally as much space available for processing the postponed BE processing assignment. In fact, the BE processing assignment should be completely performed once again. This means that the first time this BE processing assignment was performed was dead time. As a result, the bandwidth of the hard-disk system has not been used optimally. In yet another embodiment of the invention, the recovery process of solving the processing error is stopped and continued in a subsequent cycle. In this way, an ultimate status of the processing assignment can be found. An embodiment of the method according to the invention can be implemented by means of the ATA-6 protocol.","If the processing error is a soft error, it can be probably solved because the error may have been caused by a vibration of the hard-disk system  (), by a temporary synchronization problem or another problem of a temporary nature. The written data may also have a poor quality.","If the processing error is a hard error, such as damage of the hard disk, the hard-disk system  () will ultimately give an error message. With this information, the hard-disk system  () or the file system  () can mark the relevant part of the hard disk as being defective so as to prevent this hard error from leading to a processing error again at a later stage. These two aspects are great advantages within the framework of optimal use of the bandwidth of the hard-disk system  ().","To implement this embodiment according to the invention, a small modification is to be made in the further processing flow  (). In the further processing flow , it is not the entire BE processing assignment that has to be postponed in process  () to a subsequent cycle. Instead, the status of the recovery process should be stored in a cache memory (not shown) in the hard-disk system  () or the host system  (), and the further processing of recovering the error should be planned in a subsequent cycle.","In the presented embodiment of the invention, the scheduler is a part of a real-time file system  (). In a further embodiment of the invention, the hard-disk system  () comprises the scheduler  ().","In the description of the embodiment of the invention which is most preferred, a hard-disk system with a hard disk for magnetically storing information has been described. However, it will be evident to those skilled in the art that the invention is also applicable to storing information in and\/or reading information from arbitrary memory systems such as magneto-optical media, optical media such as CD-ROM and DVD and solid-state memories such as Flash, EEPROM, SRAM and ROM memories and in possibly future quantum memories.","In summary, the invention relates to a method of writing data to and reading data from a memory () by a host. By limiting processing time, time restrictions regarding the data to be processed can be met. However, this is at the expense of data integrity. By setting time limits for a group () of multiple processing assignments and dynamic allocation of time, reserved for error recovery and retries, data integrity can be improved, while time limits can still be met. Furthermore, by attaching priorities to the assignments, multiple types of data can be handled in one group of assignments. For example, assignments with real-time requirements can be put in a group with assignments with best effort requirements. In this way, more flexible planning of processing assignments is possible. The invention also relates to a system for writing data to and reading data from a memory."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"p":["In the drawings:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 6A\u20136G"}]},"DETDESC":[{},{}]}
