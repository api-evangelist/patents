---
title: Method, system, and apparatus for converting numbers based upon semantically labeled strings
abstract: A method, system, and apparatus are provided for converting numbers to text and to digit shapes expressed in different languages. When a string of text is entered into an application program, the string is analyzed to determine whether the string of text includes a number expressed using digits. If the string of text includes a number expressed using digits, the number is semantically labeled with schema information. When a selection is received of the number, a list of actions may be provided identifying conversion actions available for the number. One of the conversion options may then be selected resulting in the conversion of the selected number to text in one or more languages. A conversion option may also be selected for converting the number digits to digits expressed using other digit shapes. The converted number may then be inserted into the string of text to replace the selected number.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07742048&OS=07742048&RS=07742048
owner: Microsoft Corporation
number: 07742048
owner_city: Redmond
owner_country: US
publication_date: 20020523
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT"],"p":["Embodiments of the present invention relate to the field of number conversion. More particularly, embodiments of the invention relate to the field of converting numbers expressed using digits to text and to converting digit characters to different digit characters.","Modern desktop operating systems are provided with various localization features for improving usability for users throughout the world. For instance, some desktop operating systems provide support for multiple user interface languages. Through this type of support for multiple user interface languages, users can configure the user interface of the operating system to operate in any of a number languages supported by the host operating system.","In addition to operating system support, many application programs also support the use of multiple languages for international users. For instance, a word processing program may allow a user to create documents in English, Thai, Vietnamese, or any other language installed in the operating system and enabled by the user. Documents may also be created that contain text or other information in a combination of languages. In fact, international users of such applications frequently create documents that include text in more than one language.","When creating foreign language documents, users may wish to express numbers using text (e.g. \u201cone-hundred twenty three\u201d) in the language of their target audience. However, if the user does not speak the language of their target audience, it may be difficult for the user to translate the number (e.g. \u201c123\u201d) into the target language. (e.g. \u201ccent vingt-trois\u201d). Moreover, when a user receives a foreign language document, the document may contain numbers expressed using digit shapes unfamiliar to the user. In this situation, it may also be very difficult for the user to convert the foreign language digit shapes to digit shapes that the user understands.","Therefore, in light of the above, there is a need for a method, system, and apparatus for easily converting numbers expressed using digit shapes to text in any of a number of languages. Moreover, there is a need for a method, system, and apparatus for converting numbers expressed using digit shapes to different digit shapes.","Embodiments of the present invention solve the above-described problems by providing a method, system, and apparatus for easily converting numbers expressed as digit shapes to text in a user-selected language. Moreover, embodiments of the present invention provide a method, system, and apparatus for converting numbers expressed using digit shapes to different digit shapes. Moreover, embodiments of the invention present conversion options to the user in a user-selected language and only present options for converting to text or digit shapes in languages that are enabled within a host application.","According to one actual embodiment of the present invention, a method is provided for converting a number expressed as digit shapes to text in a system for creating and editing an electronic document. According to this embodiment of the invention, software modules are executed in conjunction with a software application for creating and editing an electronic document that allow the convenient conversion of numbers expressed using digits to text. When a user types a string of text, such as a paragraph, the string is analyzed to determine whether the string of text includes a number expressed using digits (e.g. \u201c123\u201d). If the string of text includes a number expressed using digit shapes, the number is semantically labeled with schema information that indicates that the number may be converted to text.","Once a number expressed using digit shapes has been identified within a string of text, such as a paragraph, the application may display an indication to the user that the number has been semantically labeled. This indication also identifies to the user that actions may be performed on the number. When a selection is received of the number or the indication, a list of actions may be provided to the user identifying conversion options available for the number. For instance, a list of actions may be presented to the user for converting the number to text in any of a number of languages. Additionally, conversion options may also be presented to the user for converting the digit shapes of the number to digit shapes in another language.","According to one embodiment of the invention, a current user interface language setting for the application program is determined prior to providing the list of actions to the user. When the user selects the list of actions, the available actions are displayed to the user in a language specified by the current user interface language setting. In this manner, the user is always presented the conversion options in the current user interface language.","According to another actual embodiment of the invention, each of the enabled languages for the application program may also be identified prior to displaying the list of actions. Once the enabled languages have been identified, actions may be included in the list of actions only for converting the number to text in languages that are enabled. In this manner, a user is never presented with conversion options for converting to text in languages not enabled for use with the application program.","After the list of actions has been displayed to the user, a selection of one of the actions may be received. In response to receiving the selection of a conversion action, a converted number may be generated by converting the selected number to the text in the language identified by the selected action. Alternatively, a selection of a conversion action for converting the selected number to different digit shapes may be received. In response to such a selection, a converted number is generated by replacing each of the digit shapes in the selected number with a corresponding different digit shape. Once the conversion has been completed, the converted number may be inserted into the string of text to replace the selected number. According to various embodiments of the present invention, a document object model supported by the host application may be utilized to insert the converted number into the string of text.","According to another embodiment of the present invention, a system is provided for converting a number expressed as digits to text or to different digits. According to this embodiment of the invention, the system includes a recognizer plug-in capable of receiving a portion of an electronic document as a string of text from an application program. For instance, the recognizer plug-in may receive a paragraph of text from an application program as it is typed by the user. Once the recognizer plug-in has received the string of text, the recognizer plug-in analyzes the string of text to determine whether the string of text includes a number expressed using digits. If the string of text includes a number expressed using digits, the recognizer plug-in semantically labels the number with schema information identifying the number as being capable of conversion to text. This information is then passed by the recognizer plug-in back to the application program.","According to one embodiment of the invention, the system also includes an application program for creating and editing an electronic document. For instance, the application program may comprise a word processor, a spreadsheet application program, an e-mail application which includes editing functions, or other types of application programs for creating and editing electronic documents. According to this embodiment of the invention, the application program is capable of displaying the string of text along with an indication that the number has been semantically labeled by the recognizer plug-in. This indication may comprise a user interface object for indicating to a user that the number has been semantically labeled and that conversion actions may be performed on the number.","The application program may also be operative to receive a selection of the number or the indication and to provide a list of actions that may be performed on the number to convert the number to text or to different digit shapes. The application may then receive the selection of one of the list of actions and provide the selection and the number to an action plug-in.","The system also includes an action plug-in that is capable of generating a converted number by converting the selected number to text in the language identified by the selected action from the list of actions. The action plug-in may also generate a converted number by converting the selected number to digit shapes identified by the selected action from the list of actions. The action plug-in is also operative to replace the selected number with the converted number in the string of text. According to one actual embodiment of the invention, the action plug-in may replace the number with the converted number in the string of text by accessing a document object model provided by the application program.","According to various embodiments of the present invention, the system provided herein may also include an action plug-in that is operative to register with the application program prior to performing any conversion functions. As a part of the registration procedure, the action plug-in may provide the list of actions that may be performed on the number to convert the number to text or digit shapes. Moreover, when creating the list of actions, the action plug-in may determine a current user interface language setting for the application program and generate the action menu items in a language specified by the current user interface language setting. Additionally, the action plug-in may also identify one or more enabled languages for the application program and generate each of the action menu items only for conversion to text and digit shapes corresponding to the enabled languages. In this manner, the action plug-in ensures that users will be presented lists of actions in the current user interface language and only for conversions supported by the currently enabled languages of the application program.","Other embodiments of the present invention also provide a computer-controlled apparatus and a computer-readable medium for converting numbers to text and digit shapes in a user-selected language based on semantically labeled strings. These and other details regarding the various embodiments of the invention will become more apparent from the detailed description that follows.","As described briefly above, embodiments of the present invention provide a method, system, apparatus, and computer-readable medium for converting numbers to text and digit shapes in a user-selected language. In the following detailed description, references are made to the accompanying drawings that form a part hereof, and in which are shown by way of illustration specific embodiments or examples. These embodiments may be combined, other embodiments may be utilized, and structural changes may be made without departing from the spirit and scope of the present invention. The following detailed description is, therefore, not be taken in a limiting sense, and the scope of the present invention is defined by the appended claims and their equivalents.","Referring now to the drawings, in which like numerals represent like elements through the several figures, aspects of the present invention and the exemplary operating environment will be described.  and the following discussion are intended to provide a brief, general description of a suitable computing environment in which the invention may be implemented. While the invention will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a personal computer, those skilled in the art will recognize that the invention may also be implemented in combination with other program modules. Additional aspects of an illustrative operating environment and software architecture for implementing the various embodiments of the present invention are described in U.S. patent application Ser. No. 09\/588,411, entitled \u201cMethod and System for Semantically Labeling Strings and Providing Actions Based on Semantically Labeled Strings\u201d, which is expressly incorporated herein by reference.","Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","Turning now to , an illustrative computer architecture for a personal computer  for practicing the various embodiments of the invention will be described. The computer architecture shown in  illustrates a conventional personal computer, including a central processing unit  (\u201cCPU\u201d), a system memory , including a random access memory  (\u201cRAM\u201d) and a read-only memory (\u201cROM\u201d) , and a system bus  that couples the memory to the CPU . A basic input\/output system containing the basic routines that help to transfer information between elements within the computer, such as during startup, is stored in the ROM . The personal computer  further includes a mass storage device  for storing an operating system , application programs, such as the application program , and data.","The mass storage device  is connected to the CPU  through a mass storage controller (not shown) connected to the bus . The mass storage device  and its associated computer-readable media, provide non-volatile storage for the personal computer . Although the description of computer-readable media contained herein refers to a mass storage device, such as a hard disk or CD-ROM drive, it should be appreciated by those skilled in the art that computer-readable media can be any available media that can be accessed by the personal computer .","By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid state memory technology, CD-ROM, DVD, or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer.","According to various embodiments of the invention, the personal computer  may operate in a networked environment using logical connections to remote computers through a TCP\/IP network , such as the Internet. The personal computer  may connect to the TCP\/IP network  through a network interface unit  connected to the bus . It should be appreciated that the network interface unit  may also be utilized to connect to other types of networks and remote computer systems. The personal computer  may also include an input\/output controller  for receiving and processing input from a number of devices, including a keyboard or mouse (not shown). Similarly, an input\/output controller  may provide output to a display screen, a printer, or other type of output device.","As mentioned briefly above, a number of program modules and data files may be stored in the mass storage device  and RAM  of the personal computer , including an operating system  suitable for controlling the operation of a networked personal computer, such as the WINDOWS XP operating system from MICROSOFT CORPORATION of Redmond, Wash. The mass storage device  and RAM  may also store one or more application programs. In particular, the mass storage device  and RAM  may store an application program  for creating and editing an electronic document . For instance, the application program  may comprise a word processing application program and the electronic document  may comprise a word processing document. The application program  may also comprise a spreadsheet application program and the electronic document  comprise a spreadsheet. Similarly, the application program  may comprise an electronic mail application program and the electronic document  may comprise an electronic mail message. Application programs for creating and editing other types of electronic documents may also be used with the various embodiments of the present invention.","Embodiments of the present invention provide program modules for use in conjunction with the application program  that convert numbers expressed using digit shapes contained within the electronic document  to text or to digit shapes in other languages. In particular, embodiments of the invention provide a recognizer plug-in  and an action plug-in . As will be described in greater detail below, the recognizer plug-in  recognizes numbers in an electronic document  and labels the numbers with semantic information. The recognizer plug-in  then passes this information to the application program  for use by the action plug-in . The action plug-in  performs actions on the recognized numbers for converting numbers expressed using digit shapes to text or to digit shapes in a user-selected language.","According to various embodiments of the present invention, the action plug-in  may also generate a list of actions that may be performed on a given number. As a part of this process, the action plug-in  may query language settings  of the application program  or operating system . The language settings  specify the current user interface language and the currently installed and enabled languages for the application program  and the operating system . The list of actions may then be customized based on the current user interface language and the installed languages. Additional details regarding the operation of the recognizer plug-in  and the action plug-in , including the use of the language settings  will be described in greater detail below.","Referring now to , an illustrative software architecture for use in conjunction with the various embodiments of the present invention will be described. The architecture shown in  includes an application program , such as a word processor application program, a spreadsheet application program, or other type of application program for creating and editing electronic documents. The application program  may also comprise a Web browser.","The application program  is able to communicate with a recognizer dynamically linked library (\u201cDLL\u201d)  and an action DLL . As will be described in greater detail below, the recognizer DLL  controls one or more recognizer plug-ins A-N and the action DLL  controls one or more action plug-ins A-N.","According to one embodiment of the invention, the recognizer plug-ins A-N and the action plug-ins A-N are automation servers. Automation servers are well-known software components that are assembled into programs or add functionality to existing programs running on the WINDOWS XP operating system from MICROSOFT CORPORATION of Redmond, Wash. Automation servers may be written in a variety of computing languages and can be plugged and unplugged at runtime without having to recompile the host program.","The recognizer DLL  handles the distribution of text strings from an electronic document being edited by the application program  to the individual recognizer plug-ins A-N. The recognizer plug-ins A-N recognize particular strings in an electronic document, such as a word processing document or a spreadsheet document. The recognizer plug-ins A-N may be packaged with the application program module  or they may be written by third parties to recognize particular strings of interest. Typically, the recognizer DLL  passes strings to the recognizer plug-ins A-N in single paragraphs or cell value increments. However, strings may be passed to the recognizer plug-ins A-N in other sizes and formats.","As part of recognizing certain strings as including semantic information, the recognizer plug-ins A-N determine which strings are to be labeled and how they are to be labeled. After receiving these results from the various recognizer plug-ins , the recognizer DLL  sends semantic categories to the application program module . According to one actual embodiment of the invention, a recognizer plug-in  is provided for recognizing strings as containing numbers expressed using digit shapes. According to this embodiment of the invention, the semantic category comprises schema information that identifies the number and whether it is to be handled as a decimal number, an integer number, or both. This information is returned to the recognizer DLL  by the recognizer plug-in  along with other information that may be utilized by a corresponding action plug-in , such as a copy of the number. Additionally, the recognizer plug-in  may return information identifying the location of the number within the text string, including the length of the text string and the character number of the first digit of the number.","Semantic categories are stored as part of the electronic document along with other document information and are available when a document is transmitted from one computer to another computer. According to one embodiment, storing semantic categories in an electronic document is controlled by an \u201cEmbed semantic categories\u201d checkbox. The checkbox is on by default. Turning it off will prevent semantic categories in the document from being saved. The state of the checkbox is per document. The same checkbox controls saving for both .htm and .doc documents. Checking a \u201cSave semantic categories as eXtensible Markup Language (XML) properties\u201d checkbox (off by default) will write out the text of all of the semantic categories in the document and their labels in the header of the Hypertext Markup Language (HTML) file in XML (that is using the same tags as are used inline, but surrounded by <xml> And <\/xml>) for easy identification and parsing by search engines and knowledge management systems.","It should be appreciated that each of the recognizer plug-ins A-N are executed separately. The recognizer DLL  is responsible for handling the asynchronicity that results from different recognizer plug-ins A-N returning results at different times. In this manner, various types of data may be recognized within a text string and different actions provided for each semantically labeled string. Additional details regarding the operation of the recognizer plug-in  for recognizing numbers will be described below with reference to .","After a string is labeled by a recognizer plug-in A-N, schema information is sent to the application program module . A user of the application program module  may then execute actions that are associated with the schema information on the recognized string. The action DLL  manages the action plug-ins A-N that are executed in order to perform the actions. As with the recognizer plug-ins A-N, the action plug-ins A-N may be packaged with the application program module  or written by third parties to perform particular actions that are of interest. The action plug-ins A-N provide possible actions to be presented to the user based upon the schema information, or type label, associated with the string. As will be described in greater detail below, the list of actions provided to the user is dynamically generated for each schema type. This information is then provided to the application program  which displays the list of actions to the user when the string is selected.","After an action has been chosen from the list of actions, the action DLL  manages the appropriate action plug-in A-N and passes the necessary information between the action plug-in and the application program module  so that the action plug-in may execute the desired action. Typically, the application program module  sends the action DLL  an automation request to invoke the action the user has selected. As will be described in greater detail below, according to one embodiment of the invention, an action plug-in  is provided that converts recognized numbers to text or digit shapes in a user-selected language. Addition details regarding the operation of the action plug-in  will be described in greater detail below with reference to .","Turning now to , illustrative output provided by various embodiments of the present invention will be described. In particular,  shows a list of text strings representing the number \u201c123\u201d in a variety of different languages. As will be discussed in greater detail below, if a user types the number \u201c123\u201d into an electronic document, embodiments of the present invention will recognize the number and label the number with schema. Additionally, the number will be displayed in a manner to indicate to the user that conversion options may be performed by the user. If the user selects the number, a list of actions may be provided to the user for converting the number to text in one of a variety of languages. The user may then select one of the conversion options to have the number converted to text. The list of text strings shown in  illustrates the possible outputs of the various embodiments of the invention for converting numbers to text strings.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 3B","FIG. 3B","FIG. 3B"]},"Referring now to , an illustrative user interface provided by the various embodiments of the present invention will be described. As mentioned briefly above, a string of text may be typed by a user into an application program module, such as a word processor. Once the user has provided the string of text, the string of text is provided to a recognizer plug-in  that recognizes numbers expressed using digits contained within the string of text. The number  identified by the recognizer plug-in  is identified to the application program module as a type of data upon which actions may be performed. Therefore, the application program module  provides an indication to the user that actions may be performed on the number . This indication may be provided to the user by highlighting the number  or providing a user interface indication  in proximity to the number .","As shown in , when the number  or the indication  is selected by a user, a list of actions is displayed that may be performed on the number to convert the number to text or different digit shapes. This list of actions may comprise a dropdown menu  having one or more menu items corresponding to the list of actions that may be performed on the number. According to one embodiment of the invention, the contents of the dropdown menu  may be displayed in one of many different languages. The language in which the dropdown menu  is displayed is based on a current user interface language for the application program module  or the operating system . In this manner, international users throughout the world will be displayed a dropdown menu  in their currently installed and active user interface language. For instance,  shows the dropdown menu  as it would be displayed if the currently installed and active user interface language was the German language.","As also shown in , the dropdown menu  includes text  indicating that a conversion will take place and indicating whether the number is a decimal number or integer number. The dropdown menu  also includes another indication of the number  to be converted. The dropdown menu  also includes a list of actions  that may be performed to convert the number  to text in a user-selected language. Additionally, the dropdown menu  also includes a list of actions  that may be performed to convert the number to digit shapes in a user-selected language. According to one embodiment of the invention, the list of actions  and  displayed in the dropdown menu  is limited to conversion options to languages enabled on the personal computer . In this manner, actions for converting numbers to text and digits in languages not supported by the personal computer  will not be shown in the dropdown menu . For example, an action item for converting the number into French text would not appear on the dropdown menu  if support for the French language is not enabled on the personal computer .","As further shown in , the application program module  also adds menu items A and B to the dropdown menu . The selection of item A removes the semantic labeling from a selected string of text and the selection of item B provides a list of user selectable preferences defining the operation and behavior of the recognizer and action plug-ins, including removing the recognizer plug-in  and the action plug-in .","As described briefly above, when a number  is recognized by the recognizer plug-in , the number  is labeled with schema information indicating that the number may be converted to text or digits in different languages. The schema information is then returned to the application program module  and is utilized by the action plug-in  to determine the appropriate list of actions  that should be included in the dropdown menu . In this manner, only conversion operations consistent with numbers that are expressed as digits are provided to the user via the dropdown menu . For instance, no conversion operations would be displayed if the number was originally expressed as text.","As will be discussed in greater detail below, the application program  receives most of the text shown in the dropdown menu  from the action plug-in . This process occurs when the application program  is initially executed and the action plug-in  registers itself with the application program . Additional details regarding this registration process will be described below with reference to .","As shown in , the recognizer plug-in  is also capable of recognizing decimal numbers. As with integer numbers, decimal numbers may also be converted to text in a user-selected language or converted to digit shapes in the user-selected language. However, because the use of decimal separator characters and thousands separator characters differs by country, it may be occasionally difficult to determine the proper usage of a particular character. For instance, in the United States a comma is typically used as a thousands separator character and a period is typically used as the decimal separator character. However, in other countries, a comma may be used as a decimal separator and a period may be used as a thousands separator. Therefore, it may be difficult to determine whether the number \u201c1,234\u201d is one-thousand two hundred thirty four or one and two-hundred thirty four one-thousandths.","To account for the situation where the decimal or thousands separator characters are ambiguous, embodiments of the invention allow the user to indicate the proper usage. For instance, as shown in , the number \u201c1,234\u201d has been typed. In order to ensure that an improper assumption is not made about the actual value of the number, the dropdown menu  includes a menu item A corresponding to conversion actions for decimal numbers and also a menu item B corresponding to conversion actions for integer numbers. These options are displayed and the user is provided with the appropriate menu.  shows the dropdown menu  for converting integer numbers. The user can then select the desired conversion action for the recognized number . It should also be appreciated that the recognizer plug-in  is also capable of recognizing numbers expressed utilizing different digit shapes.","Referring now to , an illustrative routine  will be described for registering the number conversion software components with the application program . In particular, when the action plug-in  and the recognizer plug-in  for converting number to text and digit shapes are first executed, they are registered with the application program . By registering with the application program , the application program  is made aware of the software components and enabled for use with the schema types recognized by the recognizer plug-in . Moreover, the action items to be displayed to the user corresponding to each schema type are also enumerated to the application program  so that the application program  can display the dropdown menu  when a number  or indicator  is selected by a user.","The routine  begins at block , where the current user interface language is identified. As discussed briefly above, the current user interface language may be stored in the language settings  maintained by the operating system  or the application program . Once the current user interface language has been identified, the routine  continues to block . At block , the currently enabled languages are also identified. In particular, the language settings  may again be consulted to determine the languages that are enabled and installed for use with the operating system  or with the application program .","Once the currently enabled languages have been identified, the routine  continues to block , where action menu items are generated for each schema type for the enabled languages. In this manner, action items are generated for each schema type and for the currently enabled languages. No action items are generated for conversion options corresponding to languages that are not installed or enabled.","From block , the routine  continues to block , where the action menu items are created in the current user interface language. In this manner, the dropdown menu  displayed to the user is provided in the current user interface language. From block , the routine continues to block , where the action menus for each schema are returned to the application program . According to one embodiment of the invention, the application program  displays the dropdown menu  in response to the selection of a number  or an indicator . However, it should be appreciated that the action plug-in  or other software component may be responsible for the display of the dropdown menu . The routine  continues from block  to block , where it ends.","Turning now to , an illustrative routine  will be described for processing the input of a new string at the application program . The routine  begins at block , where the application program  receives a new string, such as when a user enters a new paragraph into an electronic document or edits a previously entered paragraph. From block , the routine  continues to block  where the application program  passes the new string to the recognizer DLL . As described above, the recognizer DLL  is responsible for communicating with the application program , managing the jobs that need to be performed by the recognizer plug-ins A-N, receiving results from the recognizer plug-ins A-N, and sending schema information to the application program module  for recognized numbers. It should be understood that, in one embodiment of the invention, a paragraph is passed to the recognizer DLL  at block . However, in alternative embodiments, a sentence, the contents of a spreadsheet cell, a section of the document, the entire document, etc., may be passed to the recognizer DLL . In other words, it should be appreciated that the embodiments of the present invention are not limited to simply passing a paragraph to the recognizer DLL .","From block , the routine  continues to block , where the recognizer DLL  passes the string to the recognizer plug-ins A-N. The routine  then continues to block  where the recognizer plug-ins are executed on the paragraph to recognize key words within the string. In particular, the recognizer plug-in for converting numbers to text and digit shapes in user-selected languages is executed on the string. An illustrative routine describing the operation of the recognizer plug-in for number conversion is described below with reference to .","At block , the results from the recognizer plug-in  are received at the recognizer DLL . The routine  then continues to block , where a determination is made by the recognizer DLL  as to whether the paragraph has been edited since the string was transmitted to the recognizer plug-ins A-N. If the paragraph has been edited, the routine  returns to block , where the edited string is passed to the recognizer DLL . If the paragraph has not been edited, the routine  continues to block , where the recognizer DLL  sends the results received from the recognizer plug-in  to the application program . The routine  then continues to block , where it ends.","Referring now to , an illustrative routine  will be described that illustrates the operation of the recognizer plug-in  for recognizing numbers according to one embodiment of the present invention. The routine  begins at block , where a string of text is received at the recognizer plug-in  from the recognizer DLL . The routine  then continues to block , where a determination is made as to whether the string of text contains a number expressed using digit characters, or shapes. As described above, the digit characters may be identified regardless of the language in which the characters are represented.","From block , the routine  continues to block , where a determination is made as to whether a number expressed using digits was found in the string of text. If no digits were found, the routine  branches from block  to block , where it returns to block , shown in . If, however, at block , it is determined that a number expressed using digits was found in the string of text, the routine  continues to block .","At block , a determination is made as to whether the recognized number includes separator characters that may be ambiguous. As described above, certain decimal and thousands separator characters are used inconsistently around the world. Therefore, it may be impossible to determine the actual value of a particular number. Accordingly, if a recognized number includes ambiguous separator characters, the routine  branches to block , where the number is tagged with schema information for both decimal and integer numbers. In this manner, a dropdown menu will be provided to the user for the number with options for converting both decimal and integer numbers and the user can make the determination as to the appropriate use of the ambiguous separator characters. From block , the routine  continues to block .","If, however, at block , it is determined that the recognized number does not contain any ambiguous separator characters, the routine  continues to block , where a determination is made as to whether the number is a decimal number. If the number is a decimal number, the routine  branches to block , where the number is tagged with schema information corresponding to decimal numbers. The routine  then continues from block  to block .","If, at block , it is determined that the number is not a decimal number, the routine continues to block , where the number is tagged with schema information corresponding to integer numbers. The routine  then continues from block  to block , where the schema names are returned to the recognizer DLL . Additionally, a \u201cproperty bag\u201d is also returned to the recognizer DLL . The property bag is an object which stores information about the recognized number that may be utilized by the action plug-in . In particular, the property bag includes a copy of the recognized number and the schema associated with the number. The property bag may also include other types of data about the number. The data stored in the property bag may be utilized by the action plug-in. From block , the routine  continues to block , where it returns to block , shown in .","Referring now to , an illustrative routine  will be described for processing the selection of a semantically categorized number. As discussed above, once a number has been recognized within a string of text by the recognizer plug-in A, the number may be highlighted or an indication may be provided to the user indicating that the number has been recognized and that actions may be performed on the number. Accordingly, at block , a determination is made as to whether the number or indicator has been selected by a user. If the number has not been selected, the routine  continues to block , where it ends. If, however, the number or indicator has been selected, the routine  continues to block .","At block , the application program  displays the list of actions associated with the schema corresponding to the selected number. In this manner, the dropdown menu  described above with reference to  is presented to the user. The routine  then continues from block  to block , where a determination is made as to whether the user has selected one of the items from the list of actions. If the user has made the selection of a user interface item other than one of the items from the list of actions, the routine  branches to block , where the list of actions is removed. If, however, the user does select one of the items from the list of actions, the routine  continues to block .","At block , the application program  calls the action plug-in  corresponding to the appropriate schema type and indicates that an action item has been selected. The call from the application program  to the action plug-in  includes the schema name corresponding to the recognized number, the item number of the selected menu item, the name of the calling application program , a pointer into an object model provided by the application program  for accessing the document , the property bag described above with reference to , and the text of the recognized number. The routine  then continues to block , where the action plug-in for number conversion is executed. An illustrative routine for executing the action plug-in  for number conversion is described below with reference to . Once the action plug-in  has completed its execution, the routine  continues from block  to block , where it ends.","Referring now to , an illustrative routine  will be described for executing an action plug-in  for number conversion. The routine  begins at block , where the action plug-in  receives a call from the action DLL  indicating that the user has selected an action menu item. From block , the routine  continues to block , where a determination is made as to whether a menu item has been selected for converting the selected number to text. If the user has requested that the selected number be converted to text, the routine  branches to block , where a converted number is generated by converting the selected number to text in the language identified by the user. The routine  then branches from block .","If, at block , it is determined that the user has not selected a menu item for converting the recognized number to text, the routine  continues to block . At block , a determination is made as to whether the user has selected a menu item for converting the recognized number to digit shapes. If the user has requested that the recognized number be converted to different digit shapes, the routine  branches to block , where the recognized number is converted to digit shapes in the character set identified by the user. The routine  then continues from block  to block .","At block , the number in the string of text is replaced with the converted number. According to one embodiment of the present invention, the replacement is made by accessing a document object model provided by the application program . Through the document object model, the action plug-in  can directly access the document  and make changes therein. Details regarding the use of such a document object model are well known to those skilled in the art. From block , the routine  continues to block , where it returns to block , described above with reference to .","Based on the foregoing, those skilled in the art should appreciate that various embodiments of the present invention provide a method, system, apparatus, and computer-readable medium for converting numbers expressed as digit shapes to text or digits in a user-selected language based upon semantically labeled strings. The above specification, examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention, the invention resides in the claims hereinafter appended."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 3A-3B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 3C-3G"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
