---
title: Speech processing for telephony API
abstract: Systems, methods, and structures are discussed that enhance media processing. One aspect of the present invention includes a data structure to enhance media processing. The data structure includes a terminal data structure to instantiate terminal objects and a speech recognition terminal data structure that extends the terminal data structure. Another aspect of the present invention includes a data structure to enhance media processing. This data structure includes a terminal data structure to instantiate terminal objects and a speech generation terminal data structure that extends the terminal data structure. These data structures may be used to implement an internet protocol interactive voice response system, an internet protocol unified message system, and speech-enabled Web applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07634066&OS=07634066&RS=07634066
owner: Microsoft Corporation
number: 07634066
owner_city: Redmond
owner_country: US
publication_date: 20040701
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a divisional of U.S. patent application Ser. No. 09\/557,333 filed Apr. 24, 2000 now U.S. Pat. No. 7,251,315, which is a continuation-in-part of U.S. patent application Ser. No. 09\/157,469 filed Sep. 21, 1998 and which resulted in U.S. Pat. No. 6,343,116, issued on Jan. 29, 2002. This application contains subject matter related to pending U.S. patent application Ser. No. 09\/649,510 filed Aug. 25, 2000. This application further contains subject matter related to three co-pending U.S. patent applications filed on Jul. 1, 2004.","This invention relates generally to computer telephony, and more particularly to speech processing for computer telephony.","A portion of the disclosure of this patent document contains material, which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever. The following notice applies to the software and data as described below and in the drawings attached hereto: Copyright \u00a91999, 2000, Microsoft Corporation, All Rights Reserved.","With the advent of computer networking, such as local-area networks (LAN), wide-area networks (WAN), intranets and the Internet, several applications have become popularized. In one such application, a user of a first client computer is able to \u201ccall\u201d and communicate with a user of a second client computer. This type of application is generally known as computer telephony.","To accommodate computer telephony, operating systems such as versions of the MICROSOFT WINDOWS operating systems include telephony application programming interfaces, or TAPI'S. (It is noted that TAPI typically refers specifically to Microsoft's Telephony API and is not usually used in reference to other telephony API's. However, as used in this application, TAPI refers to telephony API's generically.) Application programming interfaces (API's) are interfaces by which computer programs can provide for specific functionality that is included within the operating systems. This means that programmers developing such programs do not have to develop their own code to provide this functionality, but rather can rely on the code within the operating system itself. Thus, a TAPI relates to a computer telephony application programming interface.","In the MICROSOFT WINDOWS 95 operating system, as well as other versions of the MICROSOFT WINDOWS operating system, TAPI version 2.1 provides for some basic computer telephony functionality for utilization by computer programs. In particular, TAPI 2.1 provides for call control\u2014the initiation and termination of computer telephony calls. However, call control is only one aspect of computer telephony. For example, once a computer telephony call is placed, the media aspects of the call must also be controlled. However, TAPI 2.1, as well as other prior art telephony API's, do not provide for this functionality.","The media aspects of the call relate to the information (or, media) that is itself the subject of the call. For example, a voice call includes audio information transmitted by both the caller and callee of a call, a video call includes both audio information and visual (video) information, etc. Currently, any multimedia devices that are to be used in conjunction with a computer telephony call\u2014such as microphones to detect sound, and speakers to play sound\u2014must have specific drivers written for this purpose, to be used specifically in conjunction with computer telephony calls. Other multimedia devices that may be present, in other words, may not be usable in conjunction with the call.","TAPI 2.1, as well as other prior art telephony API's, are also represented as a framework that is not easily expanded. For example, TAPI 2.1 is procedurally based, which means the API cannot easily accommodate new aspects and features without redeveloping the entire API. For the reasons outlined in this background, as well as other reasons, there is, therefore, a need for the present invention.","The above-identified problems, shortcomings and disadvantages with the prior art, as well as other problems, shortcoming and disadvantages, are solved by the present invention, which will be understood by reading and studying the specification and the drawings. In one embodiment, a system includes at least one call control object and at least one media control object. The call control objects are to initiate and terminate a computer telephony call having a media stream. The media control objects are to end-point the media stream of the computer telephony call. In a further embodiment, there is also a media control manager to instantiate a media control object for each multimedia device of the system.","Thus, embodiments of the invention provide for advantages not found in the prior art. The invention provides for well-defined media control: besides call control objects, embodiments of the invention include media control objects to end-point (for example, source or sink) the media stream of a computer telephony call. The invention provides for the utilization of multimedia devices (including virtual devices as well as physical devices) that may not have been installed specifically for telephony purposes, via the media control manager instantiating media control objects for such devices. Furthermore, the invention provides for an object-based hierarchy to TAPI's (e.g., via the call control objects and the media control objects), to maximize flexibility and further expansion of TAPI's based on the invention.","The invention includes systems, methods, computers, application programming interfaces, and computer-readable media of varying scope. Besides the embodiments, advantages and aspects of the invention described here, the invention also includes other embodiments, advantages and aspects, as will become apparent by reading and studying the drawings and the following description.","In the following detailed description of exemplary embodiments of the invention, reference is made to the accompanying drawings which form a part hereof, and in which is shown, by way of illustration, specific exemplary embodiments in which the invention may be practiced. In the drawings, like numerals describe substantially similar components throughout the several views. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention. Other embodiments may be utilized and structural, logical, electrical, and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope of the present invention is defined only by the appended claims.","Hardware and Operating Environment",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 1","FIG. 1"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["20","21","22","23","21","23","22","24","25","26","24","20","26","20","27","28","29","30","31","27","28","30","23","32","33","34","20","29","31"]},"Program modules may be stored on the hard disk, magnetic disk , optical disk , ROM , and RAM . Program modules may include operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into personal computer  through input devices such as a keyboard  and a pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial-port interface  coupled to system bus ; but they may be connected through other interfaces not shown in , such as a parallel port, a game port, or a universal serial bus (USB). A monitor  or other display device also connects to system bus  via an interface such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices such as a sound adapter, speakers, and additional devices such as printers.","Personal computer  may operate in a networked environment using logical connections to one or more remote computers such as remote computer . Remote computer  may be another personal computer, a server, a router, a network PC, a peer device, or other common network node. It typically includes many or all of the components described above in connection with personal computer ; however, only a storage device  is illustrated in . The logical connections depicted in  include local-area network (LAN)  and a wide-area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When placed in a LAN networking environment, PC  connects to local network  through a network interface or adapter . When used in a WAN networking environment such as the Internet, PC  typically includes modem  or other means for establishing communications over network . Modem  may be internal or external to PC , and connects to system bus  via serial-port interface . In a networked environment, program modules, such as those comprising Microsoft.RTM. Word which are depicted as residing within PC  or portions thereof may be stored in remote storage device . Of course, the network connections shown are illustrative, and other means of establishing a communications link between the computers may be substituted.","Software may be designed using many different methods, including object-oriented programming methods. C++ is one example of common object-oriented computer programming languages that provide the functionality associated with object-oriented programming. Object-oriented programming methods provide a means to encapsulate data members (variables) and member functions (methods) that operate on that data into a single entity called a class. Object-oriented programming methods also provide a means to create new classes based on existing classes.","An object is an instance of a class. The data members of an object are attributes that are stored inside the computer memory, and the methods are executable computer code that acts upon this data, along with potentially providing other services. The notion of an object is exploited in the present invention in that certain aspects of the invention are implemented as objects in one embodiment.","An interface is a group of related functions that are organized into a named unit. Each interface may be uniquely identified by some identifier. Interfaces have no instantiation, that is, an interface is a definition only without the executable code needed to implement the methods which are specified by the interface. An object may support an interface by providing executable code for the methods specified by the interface. The executable code supplied by the object must comply with the definitions specified by the interface. The object may also provide additional methods. Those skilled in the art will recognize that interfaces are not limited to use in or by an object-oriented programming environment.","System",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2","FIG. 3","FIG. 2","FIG. 3"]},"Referring first to , an object hierarchy according to an embodiment of the invention is shown. The system includes a telephony application programming interface object (TAPI object) , an address object , a terminal object , a call object , and a call-hub object . For each of objects , ,  and , only a single object of each type is shown in  for purposes of clarity; however, there can be in one embodiment of the invention multiple instantiations of each of these objects. Each of the objects , ,  and  may in one embodiment correspond to a specific means for performing functionality of the object.","The interface object  provides an interface by which computer programs can access the functionality provided by these other objects. This means that the computer programs themselves do not have to include code for this functionality, but instead can rely on the functionality provided by the objects themselves as already existing, and as interfaced to such programs via the interface object . Application programming interfaces within operating systems such as versions of the MICROSOFT WINDOWS operating system are known within the art.","The address object  is a type of first-party call control object. A call control object is an object that provides for the initiation and termination of a computer telephony call having a media stream\u2014that is, the object provides for the connection and ending of a call. In particular, the address object  is an object over which a computer telephony call may be placed. That is, the address object  represents a line or device that can make or receive calls on it. In different embodiments of the invention, the object represents a modem attached to a PSTN (Public Switching Telephone Network) phone line, an ISDN (Integrated Services Digital Network) hardware card attached to an ISDN line, a DSL (Digital Subscriber Loop) modem attached to a PSTN phone line having DSL capability, and an IP (Internet Protocol) address that is able to make IP telephony calls. However, the invention is not limited to a particular representation. The address object  is a first-party call control object in that it relates to a party of the telephony call\u2014for example, the caller or callee of the telephony call\u2014as opposed to a third party not specifically of the telephony call.","The terminal object  is a type of media control object. A media control object is an object that end-points the media stream of a computer telephony call. The media stream of a computer telephony call is the information that actually makes up the call\u2014for example, audio information in the case of a voice call, audio and image (video) information in the case of a video call, etc. A media control object end-points the media stream in that it can be a sink object, which is a finishing end point such as speaker or a monitor where the media stream ends or is \u201csunk\u201d after it has been communicated from one party to the call to another party to the call, or a source object, which is a beginning end point such as a microphone or a speaker where the media stream begins or is \u201csourced\u201d such that it is then communicated from one party to the call to another party to the call. The terminal object  can represent physical devices, such as the microphone or speakers on a sound card, a video camera, and a phone, as well as more dynamic, virtual devices, such as a video window on the screen, a file to which the media stream is saved, and a DTMF (Dual Tone Multiple Frequency) detector.","The call object  is another type of first-party call control object. In particular, the call object  represents an end-point of the computer telephony call. For example, for a caller to callee direct call, there would be two call objects , a first object representing the first end point of the call, and a second object representing the second end point of the call. In a conference call, there would be more than two call objects , one object  for each participant (end point).","The call-hub object  is a third-party call control object. The call-hub object  relates the call objects  for a particular computer telephony call. In other words, it represents a telephony connection itself, and is basically a collection of call objects that are all related because they are on the same telephony connection. For example, one type of call-hub object  is a tracking object in a call center environment, to track the callers on a particular call, the duration of the phone call, etc. A third-party call control object is also able to initiate and terminate a phone call. However, the object is a third-party call control object in that it does not specifically relate to a particular party of the telephony call, but rather may encompass all the parties of the call (as well as information regarding the call).","Referring next to , a block diagram of an architecture according to one embodiment of the invention is shown. The architecture includes a TAPI application , the TAPI , a telephony server , a telephony service provider , a media stream provider , and a terminal manager . The TAPI application  is a computer program that utilizes the functionality provided by the TAPI . That is, the TAPI application  is any type of computer program that utilizes the TAPI , through which the application is able to access telephony call control and media control functionality provided by the TAPI .","The telephony server  and the telephony service provider  make up the call control aspects of the architecture of . The telephony server  keeps track of all telephony capabilities on a given computerized system; for example, such as that found within versions of the MICROSOFT WINDOWS NT operating system. The telephone service provider  is a component used to control a specific piece of telephony hardware. Although only one provider  is shown in , the invention is not so limited; there can be many such providers installed.","The media stream provider  and the terminal manager  make up the media control aspects of the architecture of . The media stream provider  is an extension of the provider , and works together with the provider  to implement call control (via the provider ) and media control (via the provider ). All call control requests proceed through the telephony server  to the provider , and all media control requests proceed through to the provider . The media stream provider  is a component used to control a specific media stream (such as audio, video, etc.). Furthermore, there is a media stream provider  for each different media stream; although only one provider  is shown in , the invention is not so limited\u2014there can be many such providers installed.","The terminal manager  is a media control manager. It is a component that instantiates a medial control object for each installed multimedia device. That is, it is a component that allows telephony applications (such as application ) to use any multimedia device installed within a telephony environment. When the manager  is initialized, it discovers all multimedia devices that it can use that are installed on a given computer, such as sound cards, video capture cards, as well as other multimedia hardware; the invention is not so limited. The manager than creates a medial control object, such as a terminal object, for each of these devices. The manager  also creates terminal objects or media control objects for other media sources or sink that do not necessarily correspond to hardware, but rather to virtual devices. These types of device represent media stream processing that is performed by the computer itself, rather than specific hardware. For example, these types of terminals may include a video window, a speech recognition engine, and a file; the invention is not so limited.","The TAPI  in one embodiment has an interface that defines how the provider  communicates with the terminal manager . This interface allows any provider  (there may be more than one provider , although for purposes of clarity only one is shown in ) to query the manager  for the devices that are represented as terminal or media control objects. The interface also allows the provider  to determine from the manager  how to include these devices within media streams that the provider  is to set up. Therefore, the manager  allows any provider  to access the same set of terminal or media control objects, and use them with any telephony hardware.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 4(","FIG. 4(","FIGS. 4("],"i":["a","b","a","b"],"b":"4"},"Thus, in one embodiment, a computer program is executed by a processor of a computer from a medium therefrom, where the program may include address objects, call objects, terminal objects, and call-hub objects, as described in the previous section of the detailed description. Each of these objects may in one embodiment also correspond to a specific means for performing the functionality of the object. In another embodiment, the computer program also includes a terminal manager, which detects a plurality of multimedia devices and instantiates a terminal object for each multimedia device detected, as has also been described in the previous section of the detailed description.","Exemplary Methods","Referring now to ), a flowchart of a method for placing an outgoing computer telephony call, according to an embodiment of the invention, is shown. In , a TAPI object is instantiated by an application program so that the program is able to use the functionality provided by the TAPI. In , the TAPI object is initialized. For example, a terminal manager is run to instantiate terminal objects for physical and virtual multimedia devices, as has been described in the previous section of the detailed description.","In , the TAPI object is queried for an enumeration of the address objects available from the TAPI object. Each address object has certain telephony capabilities\u2014for example, one may relate to an ISDN line, another to a PSTN line, etc. Thus, in , each address object is queried to learn its telephony capabilities. The desired address object or objects are then selected, depending on the type of call desired (e.g., a regular voice call may go over a PSTN line, a video call may go over one or more ISDN lines, etc.).","In , a call object is instantiated from a desired address object or objects. The call object thus relates to the computer performing the method of ) as being the caller for a specific computer telephony call utilizing the desired address object or objects. In , the desired address object or objects are queried for an enumeration of the terminal objects available from the address object or objects. For example, an address object relating to a PSTN line over which voice calls are placed may have a terminal object relating to a microphone and a terminal object relating to a sound card connected to a speaker. Depending on the type of call desired, then, in  at least one desired terminal object enumerated in  is selected. Finally, in , the outgoing computer telephony call is connected (i.e., placed) over the desired address object or objects utilizing the desired terminal object or objects.","Thus, placing a computer telephony call according to the embodiment of the invention of ) involves determining the address objects that are available such that a call may be placed over them, and selecting a desired address object or objects. A call object is created for the specific call to be placed. The terminal objects that are available for the utilized address objects are then determined, and the desired terminal objects are selected. The call is then placed, such that the address objects represent the communication media over which the call is placed, and the terminal objects represent the multimedia devices that act as end points for the media stream communicated over the communication media.","Referring next to ), a flowchart of a method for receiving an incoming computer telephony call, according to an embodiment of the invention, is shown. In , a TAPI object is instantiated by an application program so that the program is able to use the functionality provided by the TAPI. In , the TAPI object is initialized. For example, a terminal manager is run to instantiate terminal objects for physical and virtual multimedia devices, as has been described in the previous section of the detailed description.","In , the TAPI object is queried for an enumeration of the address objects available from the TAPI object. Each address object has certain telephony capabilities\u2014for example, one may relate to an ISDN line, another to a PSTN line, etc. Thus, in , each address object is queried to learn its telephony capabilities. The desired address object or objects are then selected, depending on the type of call that is desired to be listened for (e.g., a regular voice call may be received over a PSTN line, a video call may be received over one or more ISDN lines, etc.).","In , an event callback is instantiated and registered on the TAPI object. The event callback is a request by the application program performing the method of ) to have the TAPI object notify the application program when the desired event occurs\u2014in this case, when an incoming call is received. In , the desired address object or objects are also registered with the TAPI object. These are the address object or objects over which an incoming computer telephony call is to be listen for by the TAPI object, such that upon occurrence of such an event, the application program performing the method of ) is notified. Thus, in , a notification of an incoming computer telephony call from the TAPI object is received on the event callback. In , the incoming computer telephony call is connected (i.e., received) over the desired address object or objects.","As has been described, receiving a computer telephony call according to the embodiment of the invention of ) involves determining the address objects that are available such that a call may be received over them, and selecting a desired address object or objects. An event callback is created and registered, so that notification is received when a call arrives over the desired address object or objects. The call is then received (created), such that the address objects represent the communication media over which the call is received.","Speech Processing",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 5","b":["500","500","500","500"]},"The system  includes a telephony source . The telephony source  generates a telephony call that is transmitted by a public switched telephone network . The public switched telephone network  transmits the telephony call to a gateway . The gateway  translates the telephony call based on the communication protocols of the public switched telephone network  to a telephony call based on internet protocols. The gateway  transmits the internet protocol telephony call to a call router . The call router  may store information associated with the internet protocol telephony call in a data store .","The call router  routes the internet protocol telephony call to an interactive voice response server . In one embodiment, the interactive voice response server  includes a terminal object. In another embodiment, the interactive voice response server  performs media processing tasks, such as playing prerecorded messages and detecting input from the user. In one embodiment, such media processing tasks can be accomplished using an appropriate instantiation of the terminal object. The interactive voice response server  may store information associated with the internet protocol telephony call in the data store . The interactive voice response server  decides to allow the call router  to route the internet telephony call to a client computer  depending on a caller's interaction with the interactive voice response server .","The client computer  is adapted to retrieve information associated with the internet protocol telephony call from the data store . In one embodiment, the client computer  includes a terminal object. The terminal object allows the client computer to answer the internet protocol telephony call.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 6","b":"600"},"The system  includes a telephony source . The telephony source  generates a telephony call that is transmitted to a gateway . The gateway  translates the telephony call to a telephony call based on internet protocols. The gateway  transmits the internet protocol telephony call to a client computer . If the client computer  is unavailable to answer the internet protocol telephony call, the internet protocol telephony call is routed to a voice mail system . In one embodiment, the voice mail system  includes a terminal object.","The voice mail system  saves the voice mail in the email store. The client computer  receives an email message with the voice mail saved as an attachment. The client computer  may then access the voice mail through the media processing capability of the client computer .",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 7","b":["700","700"]},"The system  includes a client . The client  initiates a telephony call to a voice browser  that is executing on a computer. The voice browser  can access at least one Web page  stored on a Web server . The Web page  may include voice tags. In one embodiment, the voice browser  includes a terminal object that can interpret the voice tags. In another embodiment, the terminal object renders the Web page  into speech for the client . In another embodiment, the terminal object allows the client to navigate through a Web site based on the speech commands of the client.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 8","b":"801"},"The object hierarchy  includes a TAPI object , a call-hub object , an address object , a call object , a terminal object , and a stream object . These objects have been discussed hereinbefore. The object hierarchy  includes a speech recognition object  that is derived from the terminal object . In one embodiment, the terminal object  can be viewed as a terminal data structure, and the speech recognition object  is a speech recognition data structure that extends the terminal data structure. The object hierarchy  also includes a speech generation object  that is derived from the terminal object . In one embodiment, the terminal object  can be viewed as a terminal data structure, and the speech recognition object  is a speech recognition data structure that extends the terminal data structure.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 9","b":["900","900","902","908","912","922"]},"The engine token data structure  includes a method member get engine name . The method member get engine name  gets the name of a speech recognition engine in a textual form. The engine token data structure  includes a method member get engine token . The method member get engine token  gets an identifier that identifies a speech recognition engine.","The enumeration engine data structure  includes a method member next . The method member next  gets the next available speech recognition engine from a list of available speech recognition engines.","The speech recognition data structure  includes a method member enumerate recognition engines . The method member enumerate recognition engines  obtains an indirect reference to a listing of speech recognition engines that are available for use. The speech recognition data structure  includes a method member select engine . The method member select engine  selects a speech recognition engine to be used in the speech recognition process. The speech recognition data structure  includes a method member get selected engine . The method member get selected engine  retrieves the currently selected speech recognition engine. The speech recognition data structure  includes a method member convert extended markup language to grammar  converts extended markup language (XML) into a compiled grammar for use with a speech recognition engine.","The recognition context  includes a method member initialize . The method member initialize  creates a speech recognition context based on a selected speech recognition engine. The recognition context  includes a method member shut down . The method member shut down  destroys a speech recognition context. The recognition context  includes a method member load grammar . The method member load grammar  loads a grammar into a recognition context from a source selected from a group consisting of a resource, a memory, and a file. The recognition context  includes a method member unload grammar . The method member unload grammar  unloads a grammar previously loaded into a recognition context. The recognition context  includes a method member activate grammar . The method member activate grammar  activates a grammar to be used in a speech recognition engine. The recognition context  includes a method member get result . The method member get result  retrieves a speech recognition result. The recognition context  includes a method member get hypothesis . The method member get hypothesis  retrieves a speech recognition result that is deemed a likely speech recognition result.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 10","b":["1000","1000","1002","1000","1004"]},"The process  includes an act  for getting a desired speech recognition engine. The act  includes an act for enumerating a list of available speech recognition engines, an act for identifying a desired speech recognition engine from the list of available speech recognition engines, and an act for selecting the desired speech recognition engine.","The process  includes an act  for setting a speech recognition context. The act  includes an act for initializing the speech recognition context, an act for loading a grammar for the speech recognition context, and an act for setting the speech recognition context to notify a user when a desired event occurs.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 11","b":["1100","1100","1100"]},"The data structure  includes a set of voice method members that are selected from a group consisting of a method member set voice  for setting a voice to be used for speech generation and a method member get voice  for getting the voice used in speech generation. The data structure  includes a set of priority method members that are selected from a group consisting of a method member set priority  for setting a priority for a voice and a method member get priority  for getting a priority for a voice. The voice with a higher priority may interrupt a voice with a lower priority. The data structure  includes a set of volume method members that are selected from a group consisting of a method member set volume  for setting a volume of speech synthesized by a speech engine and a method member get volume  for getting a volume of speech synthesized by a speech generation engine. The data structure  includes a set of rate method members that are selected from a group consisting of a method member set rate  for setting a rate of speech synthesized by a speech generation engine and a method member get rate  for getting a rate of speech synthesized by a speech generation engine. The data structure  includes a set of time out method members that are selected from a group consisting of a method member set time  for setting a time for a speech synthesis to time out and a method member get time  for getting a time for a speech synthesis to time out.","The data structure  includes a method member speak  for synthesizing text to audio. The data structure  includes a method member get status  for getting a status on synthesizing of output audio. The data structure  includes a method member skip  for skipping to a specific point in a text stream. The data structure  includes a method member wait  for blocking other executions until the method member speak  has been executed to completion. The data structure  includes a method member enumerate voices  for obtaining a list of voices for the speech generation engine.","The method member speak  is receptive to a number of inputs so as to enhance the synthesis of text to audio. These inputs include a text stream with voice markup, an offset that represents an offset into the text stream where the voice should start speaking, a speakover flag so as to blend the voice output over any currently playing audio output, and a punctuation flag so as to allow a speech generation engine to speak each punctuation of a text stream.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 12","b":["200","200","200","202","200","204","204","200","206","206"]},"Computer telephony application programming interface has been described.","Although the specific embodiments have been illustrated and described herein, it will be appreciated by those of ordinary skill in the art that any arrangement which is calculated to achieve the same purpose may be substituted for the specific embodiments shown. This application is intended to cover any adaptations or variations of the present invention. It is to be understood that the above description is intended to be illustrative, and not restrictive. Combinations of the above embodiments and other embodiments will be apparent to those of skill in the art upon reviewing the above description. The scope of the invention includes any other applications in which the above structures and fabrication methods are used. Accordingly, the scope of the invention should only be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled."],"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","COPYRIGHT NOTICE\u2014PERMISSION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4(","i":"a"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4(","i":"b"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
