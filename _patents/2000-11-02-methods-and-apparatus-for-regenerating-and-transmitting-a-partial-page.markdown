---
title: Methods and apparatus for regenerating and transmitting a partial page
abstract: The invention relates to a method and apparatus for regenerating portions of the page that have changed and transmitting only those portions to the client for display. In one aspect, the invention relates to a method for partial page regeneration of a transmitted page by a server. The method includes receiving page generation code that generates a page, transmitting the page to a client for display, associating a portion of the transmitted page with a fragment of the page generation code, and executing the associated fragment of the code to regenerate the portion of the transmitted page. In one embodiment, the method includes transmitting the regenerated page portion to the client for incorporation into the transmitted page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07051084&OS=07051084&RS=07051084
owner: Citrix Systems, Inc.
number: 07051084
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20001102
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS","Equivalents","Appendix 1"],"p":["The present invention relates generally to apparatus and methods for updating a page sent to a client for display. More specifically, the invention relates to an apparatus and method for regenerating and retransmitting changed portions of the page sent to a client.","Computer communication networks typically include one or more nodes called servers and one or more nodes termed clients. A server provides a service to a client upon receiving a request from the client.  illustrates an example of a service that a network  may provide. The client  communicates with the server  using a communication channel . The client , via its web browser, transmits (arrow ) a request to the server  for a web page . The server  executes (arrow ) all of the page generation code  to generate a complete web page  and transmits (arrow ) the web page  for display on (arrow ) the client . The generated page  represents a snapshot of the state of the server-side data  at the point in which the page generation code  was executed (arrow ).","For example, consider that the page generation code  generates the page  so as to include a list of share prices for certain stocks. The server  retrieves (arrow ) the data  (i.e., share price) that was stored in the server storage buffer  or received (arrow ) by the server  at the point of time in which the program was executed (arrow ), or sometime before then. The server transmits (arrow ) and the client displays (arrow ) the entire generated page . The page  remains displayed on the client  until the client  requests (arrow ) a refresh of the page  (i.e., another transmission of the page  with a snapshot of the state of the server-side data  at the time of the refresh request). Upon such a request (arrow ), the server  re-executes (arrow ) the page generation code  and transmits the new generated page  to (arrow ) the client .","Some systems may have a periodic update, where the client requests (arrow ) a refresh of the page  every specified period of time. Upon re-executing (arrow ) all of the page generation code , the server  generates another complete page . Again, the page  represents a snapshot of the state of the server-side data  at the point in which the server  re-executes (arrow ) all of the page generation code . The data  (e.g., share price) in the generated page  may be the same as the period before, thus making the execution (arrow ) of the page generation code  and the transmission (arrow ) of the page  unnecessary. Even when the data has changed, the majority of the page  will be static elements, which are unchanged.","Neither the manual nor periodic update keeps the user timely informed of data  as the data  changes. The updates are almost unrelated to the changes in the data ; for example, a page  can be transmitted although no data has changed. This update unnecessarily uses network communication channel resources, client resources and server resources.","The invention relates to a method and apparatus for regenerating portions of the page that have changed and transmitting only those portions to the client for display. Executing only the necessary parts of the page generation code and transmitting only changes to the client improves the efficiency of using the resources of the network communication channel, the client node and the server node. Performing these operations only when required, when the data has changed, improves the efficiency of use even further. The invention also takes advantage of any portions of the page that are already on the client by reusing them and thus eliminates the need to regenerate or transmit those reusable portions.","In one aspect, the invention relates to a method for partial page regeneration of a transmitted page by a server. The method includes receiving page generation code that generates a page, transmitting the page to a client for display, associating a portion of the transmitted page with a fragment of the page generation code, and executing the associated fragment of the code to regenerate the portion of the transmitted page. In one embodiment, the method includes transmitting the regenerated page portion to the client for incorporation into the transmitted page.","In another embodiment, the method includes manipulating execution of the page generation code to enable selective execution of the associated code fragment. In another embodiment, the step of manipulation includes intercepting communication between the associated fragment and other parts of the code to enable execution of less than the entire page generation code. In another embodiment, the step of manipulation includes adding additional code to operate with the page generation code to enable selective execution of the associated fragment.","In another embodiment, the step of associating a portion of the transmitted page includes executing a fragment of the page generation code to generate an output and identifying, by way of an identification tag, a generated output of the executed fragment to identify which portion of the transmitted page is created by the executed fragment. In another embodiment, the step of identification includes inserting an identification tag at the beginning and ending of the generated output. In another embodiment, the code is formatted as a servlet. In another embodiment, the page is formatted as a Hypertext Markup Language (HTML) page.","In another aspect, the invention relates to a server for partial page regeneration of a transmitted page. The server includes a transceiver in communication with a client and a partial page regenerator in communication with the transceiver. In another embodiment, the server includes an external page code source in communication with the partial page regenerator.","In another aspect, the invention relates to a server for partial page regeneration of a transmitted page. The server includes a transceiver in communication with a client, which transmits a page to the client for display. The server further includes a partial page regenerator in communication with the transceiver and an external page code source, where the partial page regenerator receives page generation code that generates a page from the external page code source. The partial page regenerator associates a portion of a page with a fragment of the page generation code and executes the associated fragment of the code to regenerate a portion of the transmitted page.","In another embodiment, the external page code source is located on the server. In another embodiment, the partial page regenerator is further configured to send a regenerated portion to the transceiver for transmission to the client. In another embodiment, the partial page regenerator can manipulate execution of the page generation code to enable selective execution of the associated fragment. In another embodiment, the partial page regenerator can intercept communication between the associated fragment and other parts of the code to enable execution of less than an entire page generation code. In another embodiment, the partial page regenerator can add additional code to operate with the page generation code to enable selective execution of the associated fragment.","In another embodiment, the partial page regenerator can execute the fragment to generate an output and insert an identification tag at the beginning and ending of the generated output of the executed fragment to identify which portion of the transmitted page is created by the executed fragment. In another embodiment, the partial page regenerator stores a relationship between the portion of a page and the fragment of a code that generates the portion.","In another aspect, the invention relates to a system for partial page regeneration of a transmitted page. The system includes an external page code source, a client, which includes a client transceiver, and a server, which includes a server transceiver in communication with the client transceiver and a partial page regenerator in communication with the server transceiver and the external page code source. In another embodiment, the external page code source is located on a server.","In another aspect, the invention relates to a system for partial page regeneration of a transmitted page. The system includes an external page code source and a client, which includes a client transceiver that receives a page, and a server. The server further includes a server transceiver in communication with the client that transmits a page to the client for display, and a partial page regenerator in communication with the server transceiver and the external page code source. The partial page regenerator receives page generation code that generates a page from the external page code source. The partial page regenerator associates a portion of the page with a code fragment of the page generation code and executes the associated fragment of the code to regenerate the portion of the transmitted page. In one embodiment, the external page code source is located on a server.","In another embodiment, the partial page regenerator sends the regenerated portion to the server transceiver for transmission to the client. In another embodiment, the partial page regenerator manipulates execution of the page generate code to enable selective execution of the associated fragment. In another embodiment, the partial page regenerator intercepts communication between the associated fragment and other parts of the code to enable execution of less than the entire page generation code. In another embodiment, the partial page regenerator adds additional code to operate with the page generation code to enable selective execution of the associated fragment. In another embodiment, the partial page regenerator executes the fragment to generate an output and inserts an identification tag at the beginning and ending of the generated output of the executed fragment to identify which portion of the transmitted page is created by the executed fragment. In another embodiment, the partial page regenerator stores a relationship between the portion of the page and the fragment of the code that generates the portion.","1.0 Partial Page Regeneration System","In broad overview, illustrates an exemplary embodiment of a partial page regeneration system  that includes a first computing system (\u201cclient node\u201d)  in communication with a second computing system (\u201cserver node\u201d)  over a network . For example, the network  can be a local-area network (LAN), such as a company Intranet or a wide area network (WAN) such as the Internet or the World Wide Web. A user of the client node  can be connected to the network  through a variety of connections including standard telephone lines, LAN or WAN links (e.g., T1, T3, 56 kb, X.25), broadband connections (ISDN, Frame Relay, ATM), and wireless connections. The client node  includes a client transceiver  to establish communication with the network . The server node  includes a server transceiver  to establish communication with the network . The connections can be established using a variety of communication protocols (e.g., HTTP TCP\/IP, IPX, SPX, NetBIOS, Ethernet, RS232, and direct asynchronous connections).","The client node  can be any computing device (e.g., a personal computer, set top box, phone, handheld device, kiosk, etc) used to provide a user interface (e.g., web browser) to an application or web page, or to otherwise present data stored or accessed via the server node . The client node  includes a display , a storage buffer , the client transceiver  and a display alterer . The display alterer  is in communication with the client transceiver  for transmitting requests to the server node  for an update of a web page . The display alterer  also receives the web page  or portions of the web page  sent from the server node  through the client transceiver . The display alterer  is in communication with the display  for displaying the web page  or for incorporating received updated portions of the web page  into the currently displayed web page . The display alterer  is in communication with the storage buffer  for temporarily storing web page data needed for the incorporation of the received updated portions of the web page . The storage buffer  can include persistent and\/or volatile storage.","The server nodes  and \u2032 can be any computing device capable of providing the requested services of the client node , particularly generating and transmitting portions of the transmitted web page . It is to be understood that more or fewer servers than those shown in can be connected to the network . In one embodiment, the server nodes  and \u2032 are two separate computing devices. In another embodiment, the server nodes  and \u2032 are a single computing device. Either implementation is equivalent for practicing the principles of the invention, and thus the reference to a server node  hereafter represents either configuration or another equivalent configuration.","The server node  includes the server transceiver , a partial page regenerator , page generation code , a storage buffer  and a data change monitor . The server node  can receive the page generation code  from any source. In one embodiment, the page generation code  can be on another physical device that is in communication with the physical device (e.g., server node ) on which the partial page regenerator  resides. In another embodiment, the source can be a programmer who creates the page generation code  and stores the code  on the server node  to accommodate requests from the client node . The page generation code  can be written in any language and in any format that the server node  uses to generate a web page . Examples of format for the page generation code  include a servlet, a JAVA Server Page (\u201cJSP\u201d), an Active Server Page (\u201cASP\u201d), a template language, and\/or a Common Gateway Interface (\u201cCGI\u201d) script.","During operation of the page regeneration system , the server node  generates and transmits to the client node  only those portions of a currently displayed web page  that have changed since the web page  (or portions of the web page ) were last transmitted to the client node . The client node  incorporates those page portions into the currently displayed page .","1.1 Portions of a Page and Fragments of Page Generation Code","As shown in , the web page  includes a plurality of page portions , , , , , and (generally referred to as ). The page generation code  includes a plurality of code fragments , , , (generally referred to as ). illustrates an example of the correspondences between page portions , , , , of the web page  and the code fragments , , , of the page generation code  that generate the corresponding page portions . Examples of format for the web page , and thus of the page portions , include HTML, XML, VRML, WML, (display) postscript and nroff. Each code fragment  generates one or more page portions . For example, as illustrated in , code fragment generates page portions , and ",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 2","i":["b ","a","b","c","d ","a","a"],"b":["265","30","50","50","50","50","50","265","50","265","50","265","260","50","265"]},"Referring back to , the partial page regenerator  is in communication with the server transceiver  for receiving requests from the client node  to refresh the web page . The partial page regenerator  transmits the web page , or portions  of the web page , to the server transceiver  in response to such requests, for transmission to the client node . The partial page regenerator  is in communication with the page generation code  for executing code fragments  of the page generation code  to create corresponding page portions  of the web page . The partial page regenerator  also determines the data  in the storage buffer  that the code fragments  use to generate the corresponding page portions . The partial page regenerator  is in communication with the data change monitor  to receive notice of any change in the data  in the storage buffer  upon which the code fragments  depend.","1.2 Identifying a Code Fragment","The partial page regenerator  identifies code fragments  in the page generation code . To identify code fragments , the partial page regenerator  identifies processes (e.g., methods in an object-oriented language, subroutines, functions) that meet one or more criteria. For example, in one embodiment the criterion is that the code fragment  (e.g., process) is idempotent, or provides indempotentcy. That is, the code fragment  produces identical results every time that code fragment  is called with the same arguments and the same dependent data . In other words, when the code fragment  is executed there are no side effects that change the results of calls to other code fragments (e.g., no updating of global counters) or that change dependent data .","The idempotent property allows the partial page regenerator  to substitute a previously cached output generated by the code fragment for another page portion generated by the same code fragment, rather than calling that code fragment again. For example, as depicted in the embodiment in , code fragment generates page portion . Instead of executing code fragment two more times, page portions and can be generated simply be copying the portion because the property of the fragment is such that the fragment will produces the same output each time it is called with the same arguments.","The partial page regenerator  determines that a process (e.g., method in an object-oriented language, subroutine, function) in the page generation code  meets this criterion by verifying, for example, that the process does not contain any global variables that the process changes. If the process meets the criterion, the partial page regenerator  identifies the process as a code fragment  in a map of correspondences  () that the partial page regenerator  generates.","For example, another embodiment uses the criterion that a process (e.g., method in an object-oriented language, subroutine, function) generates output (e.g., HTML code) that defines one or more page portions  of the web page . The partial page regenerator  determines that a process meets this criterion by verifying, for example, that the process includes a certain return type (e.g., returns String). In other embodiments, the partial page regenerator  verifies the process follows a certain predefined naming convention (e.g., called fragment_x), and\/or a certain predefined annotation to the process (e.g., #define foo_is_a_fragment). In certain formats, JSP for example, embedded tags may exist that match pieces of the code  to portions of the page  that the pieces generate. In these formats, the tags can be used as identifying code fragments . In other embodiments the partial page regenerator  verifies the process includes other certain additional attributes, such as being included in a list of process names provided to the partial page regenerator  at runtime (i.e., when the page generation code  is executed).","In one embodiment, the partial page regenerator  examines the page generation code  using a standard JAVA technique \u2018introspection\u2019. An advantage is that the partial page regenerator  does not need to decompile or have source access to the page generation code . This allows the partial page regenerator  to work with any page generation code , regardless of restrictions (e.g., physical or license restrictions) to source access of the page generation code .","1.3 Wrapping a Code Fragment with Additional Code","After identifying the code fragments , the partial page regenerator  needs the ability to execute the code fragments  individually from and independently of other parts of the page generation code . Because the page generation code  is written to be executed in its entirety, the partial page regenerator  must create additional code, relating to the page generation code , to selectively control execution of the code fragments. To do this, the partial page regenerator  augments the page generation code  to enable individual and independent execution of each of the code fragments .","In one embodiment, the additional code takes the same name as the code fragment  that the additional code is augmenting. By taking the same name, the additional code is called and executed instead of the code fragment  of the partial page generation code . The additional code controls whether the code fragment  of the page generation code  with the same name is subsequently called and executed. This control allows the selective execution of the code fragments  of the page generation code .","1.3.1 Wrapping\u2014A Servlet Format Example",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 3","i":["a ","a","b","c","a","b","c"],"b":["30","265","265","265","265","240","265","30","240","265"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"i":["b ","b","c ","b","c","b","c","b","c","b","c","b","c","b ","b","c","b","c","a. "],"b":["270","270","270","268","268","268","268","265","265","268","268","270","270","270","270","30","210","265","265","30"]},"In one embodiment, to create the additional code , the partial page regenerator  examines the page generation code  as a class file by using introspection. The partial page regenerator  then generates an additional JAVA file containing the additional code  defined as a subclass of the original page generation code . When compiled, the additional JAVA file becomes a subclass of the original page generation code . In another embodiment, the partial page regenerator  generates a .class file directly. In another embodiment, the partial page regenerator  performs the code wrapping when the page generation code  is executed and generates a class object that is stored in memory.","In the embodiment illustrated in , the code fragments \u2032 and \u2032have been wrapped with similar additional code \u2032, \u2032. The additional code \u2032, \u2032 determines whether the code fragment \u2032, \u2032 has already been executed with the same argument. If the code fragment \u2032, \u2032 has been executed, which indicates that the code fragment generates multiple page portions, additional code \u2032, \u2032 issues a command to copy the previously generated page portion into this duplicate page portion. If the code fragment \u2032, \u2032 has not been executed, then the additional code \u2032, \u2032 calls the code fragment (e.g., \u2032, \u2032) for execution.","In the additional code \u2032, \u2032, the term \u201cx\u201d, used after the \u201cstart\u201d, \u201cend\u201d and \u201ccopy to\u201d instructions, represents an identification tag that is used by the partial page regenerator  to identify each generated page portion . The term \u201cmod list\u201d represents a modification list that is sent to the client node  with the generated page portions . The modification list contains commands that instruct the client node  on how to incorporate the page portions  into the currently displayed page .","In the illustrated embodiment of , the code fragment \u2018main\u2019 \u2032 is not wrapped. After the initial transmittal of the page , the header and static information do not change and this code fragment \u2032 is not executed again. Consequently, additional code  is not needed for the \u2018main\u2019 code fragment \u2032. All of the page portions  of the page  that can change are located in the \u201cbody\u201d of the page , as represented by the \u2018do table\u2019 code fragment \u2032 and the \u2018do Share\u2019 code fragment ","In another embodiment, if the page generation code  does not include a body page portion, the \u2018main\u2019 code fragment \u2032 includes additional code (not shown) similar to the other wrapped code fragments \u2032, \u2032. The additional code (not shown) provides an identification tag for the \u2018body\u2019 part of the \u2018main\u2019 code fragment \u2032. The initial execution provides all of the necessary header information and static data to generate the page . A subsequent execution of the \u2018main\u2019 code fragment \u2032is made if the data that the \u2018main\u2019 code fragment \u2032 depends on changes. The output of this re-execution is scanned and all but the content of the \u2018body\u2019 part is discarded. The \u2018main\u2019 code fragment \u2032 can then be treated like any other code fragment.","1.3.2 Wrapping\u2014A CGI Format Example",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 4","FIG. 4"],"i":["a ","a","b","c","a","b","c","b","a","b","c","a","a","a","b","c","a","b","c","a"],"b":["30","265","265","265","265","265","265","270","270","270","270","275","268","265","265","265","265","265","265","270"]},"In another embodiment, there is a single script (e.g., page generation code \u2033) and the code fragments \u2033, \u2033, \u2033 are not individual scripts, but represent subroutines of that script (e.g., \u2033). In this embodiment, the CGI interpreter  is modified with the additional code \u2033, not wrapped, so that calls to invoke the subroutines of the script (e.g., code fragments \u2033, \u2033, \u2033) are intercepted.","1.3.3 Wrapping a JAVA Bean that Retrieves Data","In addition to executing the code fragments  individually from and independently of other parts of the page generation code , the partial page generator  may also have to intercept access to the data  upon which the code fragments  depend. This is typically accessed via data access objects. illustrates an exemplary embodiment where JAVA is used for implementation. In this embodiment, data  is typically accessed via one or more Java beans . The JAVA beans  themselves are logically separate from the page generation code  and are only responsible for managing access to the data . The beans  are not considered code fragments , as the do not directly generate output that produces the page .","To intercept and control access to data , the partial page regenerator  wraps the JAVA beans  that retrieve the data  with additional code (not shown). Each JAVA bean  is a class file, so the partial page regenerator  generates a wrapper class (e.g., proxy) for the JAVA bean . The partial page regenerator  identifies these processes (e.g., methods in an object-oriented language, subroutines) that retrieve data , for example, by searching for processes that match a naming convention. For example, for JAVA beans the naming convention is:\n\n","Similarly as described above, an advantage of generating a wrapper class (e.g., proxy) for the JAVA bean  is that the JAVA bean code  remains unmodified, even during runtime. In one embodiment, the partial page regenerator  generates additional code for JAVA beans by generating two proxies , . The generation of two proxies is necessary because the proxy  called by the page generation code  has the original name of the original process of data access bean , so that the proxy  is invoked (arrow ) instead of the original process, to allow interception of that original process. However, if the proxy  calls the original process , which has the same name, the JAVA classloader will incorrectly resolve this by calling (arrow ) the proxy .","The partial page regenerator  generates a first proxy  that calls a second proxy , where the second proxy  has a different, arbitrary name. The second proxy  is invoked and then calls the original process . By arranging that the second proxy  and JAVA bean  exist in a different name space from the first proxy  and page generation code , using the two proxies ,  and two namespaces allows for duplicative naming convention. The second namespace can be achieved using a second Java classloader. Though discussed as a technique for JAVA beans  that retrieve data , this two proxy technique is applicable to JAVA data access objects that are not JAVA beans. For example, this technique can be used to intercept access between a piece of code A and a piece of code B, providing that B does not reference A by class name, and that all (unnamed) references from B to A are also intercepted by the proxy.","1.3.4 Wrapping\u2014An Example of Selected Execution and Generated Output",{"@attributes":{"id":"p-0064","num":"0066"},"figref":["FIG. 5","FIG. 5","FIG. 5"],"i":["a ","a","b","c","b","c","b ","a "],"b":["280","265","265","265","270","270","250","250","283","260","240","284","283","250"]},"Following the flow of execution (arrow , ), first the \u2018main\u2019 code fragment \u2032 is executed. The \u2018main\u2019 code fragment \u2032 initially creates an empty page (e.g., no content in the body section of the HTML page) and uses an identification tag of \u201c0\u201d to identify the portion of the page  that contains modifiable page portions . The \u2018main\u2019 code fragment \u2032 also generates an assign command in the modification list  that assigns the content of identification tag \u201c1\u201d to the portion with the identification tag \u201c0\u201d (e.g., refer to TABLE 1 below for description of assign command).","The \u2018main\u2019 code fragment \u2032 calls the \u2018do table\u2019 code fragment \u2032. Since the \u2018do table\u2019 code fragment \u2032 is wrapped with additional code \u2032, the additional code \u2032 intercepts the call and begins execution. The additional code \u2032 creates the identification tag \u201c1\u201d to identify the beginning of the portion of the page that the additional code \u2032 code fragment produces. The additional code \u2032 generates the HTML span tag for the identification tag to establish the start of the page portion that the additional code \u2032 generates. The additional code \u2032 generates an end span tag to identify the end of the page portion identified as \u201c1\u201d, once the execution of addition code \u2032 is complete. Using the map of correspondences  (), the additional code \u2032 determines that the \u2018do table\u2019 code fragment \u2032 has not been executed yet and calls the \u2018do table\u2019 code fragment \u2032 of the page generation code \u2032 for execution.","During execution of the instruction set (not shown) of the \u2018do table\u2019 code fragment \u2032 of the page generation code , the \u2018do table\u2019 code fragment \u2032generates a <table> tag in the HTML output  and HTML code to generate a header row with table data cells \u201cName\u201d and \u201cPrice\u201d. The \u2018do table\u2019 code fragment \u2032receives input data  (e.g., ticker symbols for shares of stock) from the storage buffer .","In response to the input data , the \u2018do table\u2019 code fragment \u2032 calls the \u2018do Share\u2019 code fragment \u2032 of the page generation code \u2032 for each ticker symbol in the input data . For the first piece of data \u201cABCC\u201d, the \u2018do table\u2019 code fragment \u2032calls the \u2018do Share\u2019 code fragment \u2032. Because the \u2018do Share\u2019 code fragment \u2032 is wrapped with additional code \u2032, the additional code \u2032 intercepts the call and begins execution. The additional code \u2032 creates the identification tag \u201c2\u201d to identify the beginning of the portion  of the page  that the additional code \u2032 fragment produces the first time the \u2018do Share\u2019 code fragment \u2032 is called with the piece of input data \u201cABCC\u201d.","The additional code \u2032 generates the HTML span tag to establish the start of the page portion that the additional code \u2032 generates. The additional code \u2032 determines that the \u2018do Share\u2019 code fragment \u2032 has not been executed yet with the argument \u201cABCC\u201d and calls the \u2018do Share\u2019 code fragment \u2032 of the page generation code \u2032 for execution. During execution of the instruction set (not shown) of the \u2018do Share\u2019 code fragment \u2032 of the page generation code , the \u2018do Share\u2019 code fragment \u2032 generates a row in the table with table data cells \u201cABC Corp.\u201d and \u201c99.9\u201d. Because the execution of the \u2018do Share\u2019 code fragment \u2032 is complete, with respect to that page portion dealing with that piece of input data , the additional code \u2032 generates an end span tag in the HTML code to establish the end of the portion created by the additional code \u2032 fragment. Execution returns back to the \u2018do table\u2019 code fragment ","For the next piece of data \u201cXYZC\u201d, the \u2018do table\u2019 code fragment \u2032 calls the \u2018do Share\u2019 code fragment \u2032 again. Because the \u2018do Share\u2019 code fragment \u2032 is wrapped with additional code \u2032, the additional code \u2032 intercepts the call and begins execution. The additional code \u2032 creates the identification tag \u201c3\u201d to identify the beginning of the portion of the page that the additional code \u2032 code fragment produces the first time \u2018do Share\u2019 code fragment \u2032 is called with the piece of input data \u201cXYZC\u201d. The additional code \u2032 generates the HTML span tag to establish the start of the page portion that the additional code \u2032 generates. The additional code \u2032 determines that the \u2018do Share\u2019 code fragment \u2032 has not been executed yet with the argument \u201cXYZC\u201d and calls the \u2018do Share\u2019 code fragment \u2032 for execution. During execution of the instruction set (not shown) of the \u2018do Share\u2019 code fragment \u2032of the page generation code  generates a row in the table with table data cells \u201cXYZ Corp.\u201d and \u201c1.2\u201d. Because the execution of the \u2018do Share\u2019 code fragment \u2032 is complete, with respect to that page portion dealing with that piece of input data , the additional code \u2032 generates an end span tag to establish the end of the portion created by the additional code \u2032 code fragment. Execution returns back to the \u2018do table\u2019 code fragment ","For the next piece of data \u201cABCC\u201d, the \u2018do table\u2019 code fragment \u2032 calls the \u2018do Share\u2019 code fragment \u2032. Because the \u2018do Share\u2019 code fragment \u2032 is wrapped with additional code \u2032, the additional code \u2032 intercepts the call and begins execution. The additional code \u2032 creates the identification tag \u201c4\u201d to identify the beginning of the portion of the page that the additional code \u2032 code fragment produces the second time \u2018do Share\u2019 code fragment \u2032 is called with the piece of input data \u201cABCC\u201d. The additional code \u2032 generates the HTML span tag to establish the start of the page portion that the additional code \u2032 generates. This time the additional code \u2032 determines that the \u2018do Share\u2019 code fragment \u2032 has been executed with the argument \u201cABCC\u201d and does not call the \u2018do Share\u2019 code fragment \u2032 for execution. The \u2018do Share\u2019 code fragment \u2032, if executed again, would generate a row in the table with table data cells \u201cABC Corp.\u201d and \u201c99.9\u201d, identical to the portion in the identification tag \u201c2\u201d.","Because the \u2018do Share\u2019 code fragment \u2032 is not executed, the additional code \u2032 generates an end span tag to establish the ending of the portion created by the additional code \u2032 code fragment. To generate the portion of the page that is required, the additional code \u2032 generates a copy command in the modification list  instructing the display alterer  of the client node  to copy the portion contained in identification tag \u201c2\u201d to the portion contained in identification tag \u201c4\u201d (e.g., refer to Table 1 for description of copy command). Execution returns back to the \u2018do table\u2019 code fragment ","With all the pieces of input data  processed, the execution of the \u2018do table\u2019 code fragment \u2032 is completed. The additional code \u2032 generates an end span tag to establish the ending of the portion generated by the additional code \u2032. Execution returns back to the \u2018main\u2019 code fragment \u2032 and from there to the runtime system, which transmits the page portions (e.g., the HTML output file) and the instructions for inserting the page portions (e.g., modification list) to the client node  via the server transceiver .","From the illustrative example of and , it is easy to see that when the page  is subsequently updated, for example, because the price of a share of XYZ Corp. increased, the execution and output can be further reduced. In one embodiment, for example, for a subsequent update only the row of the table that has changed is transmitted to the client node . In this embodiment the partial page regenerator  executes the \u2018do share\u2019 code fragment \u2032, with its associated additional code \u2032, using \u201cXYZC\u201d as the argument. The additional code \u2032 creates the identification tag \u201c5\u201d to identify the beginning of the portion of the page that the additional code \u2032fragment produces the next time \u2018do Share\u2019 code fragment \u2032 is called with \u201cXYZC\u201d. The additional code \u2032 generates an HTML span tag to establish the start of the page portion that the additional code \u2032 generates. The additional code \u2032 calls the \u2018do Share\u2019 code fragment \u2032 for execution. The \u2018do Share\u2019 code fragment \u2032 generates a row in the table with table data cells \u201cXYZ Corp.\u201d and \u201c2.5\u201d, the new price. Since the execution of the \u2018do Share\u2019 code fragment \u2032 is complete, the additional code \u2032generates an end tag for span id=5 to establish the ending of the portion created by the additional code \u2032 fragment.","The partial page regenerator  determines, using the map of correspondences  (), that the row with \u201cXYZC\u201d has identification tag \u201c3\u201d. The partial page regenerator  determines that the rows of the table with ABC Corp. do not need to be updated because the price has not changed. The partial page regenerator  transmits the generated HTML output of the updated row and a modification list to the display alterer  of the client node  for incorporation into the currently displayed web page. The partial page regenerator  includes the command \u201cAssign 5\u21923\u201d in the transmitted modification list (e.g., refer to Table 1 for description of assign command). This command instructs the display alterer  to find the HTML output with the identification tag \u201c3\u201d and replace it with the newly transmitted HTML output portion with the identification tag \u201c5\u201d.","1.3.5 Updating the Server Storage Buffer with Client Feedback","In the exemplary embodiment of , the input data  originates from the client node . In this embodiment, the input data  is transmitted from the client node  after the client user has inputted the data into one or more user input fields of the transmitted page  and clicked on the submit button, update button and\/or pressed the enter key. In another embodiment, the display alterer  of the client node  monitors the user input fields of the transmitted page . When the display alterer  has detected data in a user input field (e.g., the user entered data into a field and pressed the tab key or the user entered data and moved the cursor to another part of the page and clicked a mouse key), the display alterer  transmits that data to the partial page regenerator  with a page update request.","In yet another embodiment, the partial page regenerator  provides additional software (e.g., a method referred to as \u2018feedback\u2019) to the client node  that is part of the page  generated by the page generation code . When the additional software is called (e.g., by user action), the additional software arranges that its arguments are transmitted to the server node . The partial page regenerator  also provides additional software (e.g., a method, also called \u2018feedback\u2019) in the page generation code . The \u2018feedback\u2019 method on the server node  uses the arguments received by the client node  to update the data  in the storage buffer .","For example part of the page generated might be\n\n","In another embodiment, the calling of \u2018feedback\u2019 on the server node  causes the partial page regenerator  to immediately refresh the page , as the page  is most likely to have changed.","1.4 Map of Correspondences","The partial page regenerator  determines the identification tags  (e.g., HTML span tags) of the portions  of the page  and whether data  for any of those page portions  has changed because the partial page regenerator  generates a map of correspondences  () as the partial page regenerator  creates the page portions  which stores such information. Within the map of correspondences  is a page description model  () that models the layout relationship of the portions of the page.","1.4.1 Map of Correspondences\u2014Page Description Model",{"@attributes":{"id":"p-0081","num":"0088"},"figref":["FIG. 6","FIGS. 5"],"b":["303","5","303","303","305","305","305","305","305","305","305","305","303","260","303","303","240"],"i":["a ","b","a","b","c","d","e","f ","g "]},"Each node  of the node tree \u2032 has an ID that is unique with respect to each of the other nodes  of the node tree \u2032 and identical with respect to the identification tag (e.g., span tag) inserted into the HTML output  sent to the client node . In another embodiment, if the node ID is different from the inserted identification tag, the map of correspondences  contains the relationship between the model node  representing the portion  of the page  and the actual identification tag (e.g., span tag) of the HTML code sent to the client node  to generate the display of the page portion. To create the page description model , the map of correspondences  includes correspondences between the code fragment  of the page generation code  and the portions  of the page each of the code fragments  create. The map of correspondences  also includes correspondences between the code fragments  of the page generation code  and the data  on which each of the code fragments  depend.","1.4.2 Map of Correspondences\u2014Data Structure",{"@attributes":{"id":"p-0083","num":"0090"},"figref":"FIG. 7","b":["308","300","308","303","320","330","345","360","320","260","240","265","323","320","283","260","240","220","205","320"]},"The value field  can be used to create one or more nodes . The map of correspondences  maps (arrow ) the value field  to those nodes  in the node tree \u2032 that correspond to that specific value field .","The key field  represents (arrow ) the execution of a code fragment . The key field  includes the data necessary to re-execute a code fragment  to generate the value  to which the key corresponds (arrow ). A single key field  can have multiple correspondences (arrow ) because, as the code fragment  of the key  is re-executed, subsequent to a change in the data  upon which the code fragment  depends, a new value  is created. At all times however, there is only one current value  for that particular key .","The current value  generated by a key  is stored in the table of current values . In the table of current values , the correspondence (arrow ) of the key field  to the value field  is always one to one, if the key  is represented. In other words, some keys  may not be represented in the table of current values , but if the key  is in the table of current values , there is at most one value  for that key . The table of current values  tracks the key field  with a specific argument so that there is only one current value field  created (e.g., one criterion of a code fragment is that it always produces the same output (i.e., value field ) with the same arguments and data ).","The map of correspondences  maps (arrow ) value fields  to event fields . The event field  contains data about events that affect the value fields  to which they are mapped (arrow ). In a generic sense, a mapped event  is simply a notion that a value  depends on a piece of data  and is used as one means for translating between a notification that \u2018something\u2019 has changed and identifying which values  are now invalid.","For example, reference to events that indicate a change of the data  on which the value field  depends can be stored in the event field . With this correspondence (arrow ), when that data  changes, or an event is generated representing a change in the data , the partial page regenerator  determines that those nodes , which are mapped (arrow ) to the value field  mapped (arrow ) to the event  representing the changed data , are no longer valid and must be updated. The generation and monitoring of these types of data  change events  are well known in the art and any generating and monitoring technique is acceptable.","1.4.3 Map of Correspondences\u2014Example Using and ",{"@attributes":{"id":"p-0089","num":"0096"},"figref":["FIG. 8","FIGS. 5"],"b":["300","250","5","345","320","345","265","345","375","320","330","320","260","305","305","305","320","375","305","303","305","375","320","305"],"i":["a ","b","b","c","d"]},"1.5 Instructions for Incorporation of Page Portions","As shown in , the partial page regenerator  generates a modification list  along with the actual output  that is used to generate a portion  of the page  on the display  of the client node . The server node  transmits the portions  of the page  that have been modified, along with the modification list for those particular portions , to the client node . The client node  uses the modification list to display the transmitted portions  in the appropriate area of the page . The display alterer  performs the task of incorporating the transmitted page portion , using the modification list.","To incorporate the transmitted page portion(s) into the displayed page , the display alterer  must be able to process the commands that are on the modification list. The partial page regenerator  determines the capability of the display alterer . In one embodiment, the display alterer  of the client node  is part of the client software. In this embodiment, the client node  can inform the server node  which commands the display alterer  can understand during the initial request.","In another embodiment, the display alterer  of the client node  is a piece of script added to the page  dynamically by the server transceiver  when the page  is first sent to the client node . An example of the linking of a script client to a page is described in Appendix 1.","In this embodiment, the client node  informs the server node  what \u2018type\u2019 of browser the client node  is running as part of the initial request, and the server node  can then lookup the capabilities in a table of known browsers stored on the server node . (For example, the client browser may identify itself as being Internet Explorer 5.0). In yet another embodiment, the server transceiver  sends the client browser different versions of the display alterer  and\/or client transceiver , depending on the type of the client browser.","1.5.1 Command Examples","The modification list uses commands from a predetermined set of commands. For one embodiment, Table 1 lists an example of a set of four types of commands that can appear in the modification list. The first column of Table 1 lists the name of the command. The second column of Table 1 lists the parameters that can be included with each command. The third column of Table 1 lists a general description of each command. The term \u201cnode\u201d refers to the nodes  of the page description model node tree \u2032 in the map of correspondences . The command parameter uses the identification tag (i.e., ID) to represent the node . For example, if the node  was a table data cell of the price of the stock and the price changed to 120, the command might be Assign(8, \u201c$120\u201d). The display alterer  would insert the value of \u201c$120\u201d in the table data cell with the identification tag \u201c8\u201d.",{"@attributes":{"id":"p-0095","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Command","Parameters","General Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Assign","dest node,","Insert the specified HTML at the specified"]},{"entry":[{},"output (e.g.,","point (node) in the page."]},{"entry":[{},"literal html)"]},{"entry":["CopyNode","dest node,","Copy all children of \u2018src\u2019 to \u2018dest\u2019"]},{"entry":[{},"src node","in the page."]},{"entry":["MoveNode","dest node,","Move all children of \u2018src\u2019 to \u2018dest\u2019"]},{"entry":[{},"src node","in the page."]},{"entry":["CopyValue","dest node,","Copy the specified value into \u2018dest\u2019"]},{"entry":[{},"value","in the page."]},{"entry":[{},{},"(If the display alterer 245 has no notion of"]},{"entry":[{},{},"\u2018values\u2019 this command is converted to a"]},{"entry":[{},{},"\u2018MoveNode\u2019 or \u2018CopyNode\u2019 or \u2018Assign\u2019"]},{"entry":[{},{},"command prior to transmission.)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}},"br":{}},"When an event  is detected that represents a change in data , the partial page regenerator  adds the value  that corresponds (arrow , ) to the event  on an invalid value list (not shown). In one embodiment, the invalid value list is part of the map of correspondences . The invalid value list tracks all values currently displayed on the page  on the client node  that have changed and are no longer valid. Once there is an entry on the invalid value list, the partial page regenerator  waits for a request to refresh the page  and, in response to that request, generates and transmits updates for the changed portions  of the page .","The request to refresh the page  can be generated in many different ways. For example, the user on the client node  may request a refresh of the page . In another embodiment, the display alterer  may request a refresh of the page  periodically. In another embodiment, the partial page regenerator  generates the request for a refresh once a change in data  is detected. For example, as stated above, when the \u2018feedback\u2019 method is called on the server node , the partial page regenerator  automatically generates a request for a refresh. In another embodiment, the communication protocol between the client node  and the server node  support or simulate a server push model (i.e., server node  transmitting data to the client node  without the client node  initiating a request).","1.6.1 Generating Updates for Portions of the Transmitted Page",{"@attributes":{"id":"p-0098","num":"0105"},"figref":"FIG. 9","b":["250","260","240","250","260","245","260","205","205"]},"To start the exemplary process, the partial page regenerator  examines the invalid value list and removes all values  () on the invalid value list (step ) from the table of current values  (), as they represent invalid values. The partial page regenerator  generates (step ) a \u2018recycleRoot\u2019 node. This \u2018recycleRoot\u2019 node is a temporary place used to store nodes  that might be reused later. The partial page regenerator  creates (step ) two initially empty lists of commands, a working list and the modification list. The partial page regenerator  generates the working list, and moves groups of items from the working list to the modification list. The commands used in this example are the same as those commands shown in Table 1.","The partial page regenerator  scans (step ) the invalid value list to find the highest node that corresponds to one of the values  on the invalid value list. (The highest node as the node closest to the root of the node tree \u2032.) If there are no such nodes, then the exemplary process jumps (arrow ) to step . The partial page regenerator  removes (step ) the highest node from the page description model node tree \u2032 for the corresponding invalid value. The children nodes  of the highest node are moved (step ) to the recycleRoot, as they may not themselves be invalid, and may be used later. The partial page regenerator  determines (step ) the key  () used to recalculate the corresponding value of the highest node, using the map of correspondences . For example, using , the partial page regenerator  follows the node , which corresponds (arrow ) to a value , which corresponds (arrow ) to a key .","Once the key  is determined (step ), the partial page regenerator  determines whether there is a current value (i.e., a value  in the current value table ) for the corresponding key . If there is a current value for this key , then recalculation (step ) has already taken place for this key  on a previous iteration of the loop (arrow ). If recalculation (step ) has already taken place, the partial page regenerator  adds (step ) the node  to the page description model node tree \u2032 for the corresponding current value and adds (step ) a \u2018CopyValue\u2019 command to the working list. If recalculation (step ) has already taken place, the exemplary process jumps (arrow ) to step .","If recalculation (step ) has not already taken place, the partial page regenerator  re-executes (step ) the code fragment  associated with the determined key  (step ) to generate a new value. The generated output is saved to an output file (e.g., the HTML output code  in ) with an identification tag. The node is added (step ) to the page description model node tree \u2032 for the newly generated value. Then the partial page regenerator  adds (step ) an \u2018Assign\u2019 command, using the identification tag, to the working list.","During re-execution (step ), the code fragment  associated with the determined key (step ) may call other code fragments (e.g., , the \u2018do table\u2019 code fragment calls the \u2018do Share\u2019 code fragment). For each call that has parameters matching a value  in the current value table , the partial page regenerator , via the additional code , intercepts the call. The interception is similar to the example of the execution of \u2018do Share\u2019 (ABCC) for the second time in and . Upon interception, the partial page regenerator  generates an empty page portion with an identification tag (e.g., span ID \u201c4\u201d, 290and in ) and generates a \u2018CopyValue\u2019 command, which is added to the working list.","The partial page regenerator  examines the invalid value list to determine (step ) whether there are more nodes reachable from the root. If there are more nodes, the process loops (arrow ) back to step . If there are not any more nodes, the process continues with step .","The partial page regenerator  examines the nodes under the recycle root to determine (step ) whether any nodes can be reused. As these nodes each represent portions  of a page available on the client node , it is highly beneficial to reuse these. The portions  can be reused if they match \u2018CopyValue\u2019 commands on the working list. If a node under the recycleRoot can be reused, the partial page regenerator  converts (step ) the matching \u2018CopyValue\u2019 command to a \u2018MoveNode\u2019 command, with the source node parameter set to the matching node. The parents and children of the reused node are marked (step ) as used as they may not also be recycled. The partial page regenerator  sets (step ) a flag to indicate that at least one command in the working list has changed.","The partial page regenerator  continues by sorting (step ) the commands in the working list, placing the \u2018Assign\u2019 commands first, followed by the \u2018MoveNode\u2019 commands. The partial page regenerator  removes (step ) the \u2018Assign\u2019 commands and the \u2018MoveNode\u2019 commands from the working list and appends them to the modification list, ready for transmission to the client node . Remaining \u2018CopyValue\u2019 commands are left on the working list.","The partial page regenerator  determines (step ) whether any commands have been changed, by checking to see if a flag was set (step ). This determination is made because if at least one command has been changed, then it is possible that a previously unreachable node is now reachable. If the flag was set (step ), the exemplary process loops (arrow ) back to step .","When no more nodes can be recycled, the partial page regenerator  converts (step ) all remaining \u2018CopyValue\u2019 commands to \u2018CopyNode\u2019 commands. These are less efficient than a \u2018MoveNode\u2019 command, but still better than separate \u2018Assign\u2019 commands. The source for a \u2018CopyNode\u2019 command is any node that has the correct value. When converting a \u2018CopyValue\u2019 command, the set of nodes related to the value is examined and one node is selected. The only requirement is that this node is one that will be available on the client at the time that the \u2018CopyNode\u2019 command is executed. The requirement can be satisfied by selecting the node with the lowest identification tag as the source node when converting the \u2018CopyValue\u2019 commands, in both step  and step .","During this conversion, the partial page regenerator  renames the copied sub-tree so that the resulting sub-tree contains nodes with unique identifiers. Any means may be used for renaming (e.g., pre-order depth first traversal). The partial page regenerator  appends (step ) the working list, which now contains only \u2018CopyNode\u2019 commands, to the modification list.","In one example, the modification list  includes a number of sections. All but the final two sections contain one or more \u2018Assign commands\u2019 followed by one or more \u2018MoveNode\u2019 commands. The penultimate section contains one or more \u2018Assign\u2019 commands followed by zero or more \u2018MoveNode\u2019 commands, and the final section contains zero or more CopyNode commands (e.g., AAM AAAMMM AAA CCC, where A=\u2018Assign\u2019 command, M=\u2018MoveNode\u2019 command, C=\u2018CopyNode\u2019 command and the spaces divide each section).","Then, the partial page regenerator  removes (step ) all nodes left on the recycle list from the page description model node tree \u2032 for their corresponding values . If the value  has no remaining corresponding nodes  in the page description model node tree \u2032, then the value  is discarded and removed from the current values table . The partial page regenerator  also removes any event records  and keys  associated with the discarded values . This reflects the commands that will take place on the client node .","1.7 Incorporating Updated Portions into the Transmitted Page","Once the output  and the modification list  have been created, the partial page regenerator  transmits the two items through the server transceiver , over the network communication channel , through the client transceiver  to the display alterer . The display alterer  incorporates the output  using the modification list .","1.7.1 Using the Modification List",{"@attributes":{"id":"p-0113","num":"0120"},"figref":"FIG. 10","b":["245","260","240","284","210","260","284","245","284","245","500","284","245","505","225","245","284","510","245","515","260","260","240"]},"The display alterer  reexamines (step ) the current section of the modification list  for \u2018MoveNode\u2019 commands. For each \u2018MoveNode\u2019 command, the display alterer  retrieves (step ) the appropriate source node temporarily saved (step ) in the storage buffer . The display alterer  inserts (step ) the value of the node, and any descendents, into the portion  of the page  specified by the destination node of the \u2018MoveNode\u2019 command.","The display alterer  moves (step ) to the next section in the modification list . If there are no more sections, the process continues at step . If the new section does not contain only \u2018CopyNode\u2019 commands, the process continues to step .","The display alterer  examines (step ) the current section of the modification list  for \u2018CopyNode\u2019 commands. For each \u2018CopyNode\u2019 command, the display alterer  copies (step ) the appropriate source node, and any descendents. The display alterer  inserts (step ) the output of the copied node, and any descendents, into the portion  of the page  specified by the destination node of the \u2018CopyNode\u2019 command. During this copy process, the display alterer  renames (step ) all of the embedded node identification tags of the copied nodes. In one embodiment, the display alterer  performs all of the incorporation on the HTML code (e.g., a copy of the HTML code of the currently displayed page  in the storage buffer ) and when incorporation of all of the updates is complete, the display alterer  displays (step ) the updated page. In another embodiment, the display alterer  displays (step ) each update as that update is incorporated into the displayed page .","1.7.2 An Example of Incorporation",{"@attributes":{"id":"p-0117","num":"0124"},"figref":"FIGS. 11","i":["a","b","c ","d "],"b":["11","11","1","245","240","260","240","245"]},{"@attributes":{"id":"p-0118","num":"0125"},"figref":["FIG. 11","FIGS. 5","FIG. 11"],"i":["a ","a ","b","a "],"b":["303","240","5","303","284","250","245"]},"The display alterer  uses the modification list \u2033 to incorporate the changes, following the exemplary process of . The display alterer  examines (step ) the modification list \u2033 and finds an \u2018Assign\u2019 command. The display alterer  also determines (step ) that there are \u2018MoveNode\u2019 commands associated with the descendents (i.e., child nodes) of the \u2018Assign\u2019 command destination node (i.e., node \u201c1\u201d). As shown if , the modification list \u2032\u2033 includes implicit actions of saving (step ) the reusable nodes  in the storage buffer . Because there is an \u2018Assign\u2019 command for the table, the display alterer  removes the descendents of that node to start creating a working version 600 of the page description model node tree \u2033.","Referring to , the display alterer  inserts (step ) the output as defined in the \u2018Assign\u2019 command. In this example, the output of the \u2018Assign\u2019 command, though not shown in the modification list \u2033, is shown in the working version 605 of the page description model node tree \u2033. Per the \u2018Assign\u2019 command, the new node \u201c1\u201d includes four descendent nodes with the identification tags \u201c5\u201d, \u201c6\u201d, \u201c7\u201d and \u201c8\u201d. The descendent nodes with the identification tags \u201c5\u201d, \u201c6\u201d and \u201c8\u201d are empty. The descendent node with the identification tag \u201c7\u201d has the value \u201cGamma\u201d.","The display alterer  continues by examining (step ) the modification list \u2033 for any \u2018MoveNode\u2019 commands. As shown in , there are three move commands. For each \u2018MoveNode\u2019 command, the display alterer  retrieves (step ) the nodes identified as the source node (i.e., 2,3,4) and inserts (step ) the values (i.e., Alpha, Beta, Delta) into the destination nodes (i.e., 5,6,8). illustrates the page description model node tree \u2032\u2033 of the updated page , now displayed (step ) on the display  of the client node .","Although a table of stock prices has been used throughout this description, this invention works equally well with any other kind of content. For example,  is a screenshot of an example of an email page  being displayed to a user at the client node . A page generation code (not shown) might display a list  of messages in an \u2018inbox\u2019 for a particular user. For each message the sender , subject  and date  are shown, together with an indication (not shown) as to whether the message had been read (e.g., displayed in bold). This list  also contains links so that if a message were selected, then it would be displayed in full . With an embodiment of the partial page regenerator, the displayed list  of messages is updated in a number of ways\n\n","The partial page regenerator, to create such a list  of messages, would probably mimic the stock price example in structure. The partial page regenerator determines the number of messages, and then executes a loop, outputting a page portion (e.g., html) for each message.","Such an email application might be augmented by a more complex interface, for example listing available folders containing email in a \u2018tree structure\u2019 . The partial page regenerator creates this structure  by executing one fragment for each \u2018folder\u2019, and either displays a closed folder, or displays an open folder and then recursively calls the same fragment to display the contents of the folders. If the generated output contains \u2018onClick\u2019 events for each folder that inform the server node  when a folder is selected (ie opened or closed), then the page  is automatically updated to show the new state of a folder after a user selected it.","The invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. The foregoing embodiments are therefore to be considered in all respects illustrative rather than limiting on the invention described herein. Scope of the invention is thus indicated by the appended claims rather than by the foregoing description, and all changes which come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein.","A worked example of adding a player to an HTML page that can then retrieve and display updates to the page. This demonstration will work with Internet Explorer 5.0 Here is an original page, which has been augmented with a client player (Transceiver  and Display Alterer ). This is shown in grey and labeled u1. The page has also been modified to get updates immediately that it is loaded (this is a simplification). This is shown in grey and labeled u2.",{"@attributes":{"id":"p-0127","num":"0137"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]},{"entry":[{},"Page.html"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<HTML>"]},{"entry":[{},"<head>"]},{"entry":[{},"<script scr=\u201cplayer.js\u201d><\/script> U1."]},{"entry":[{},"<\/head>"]},{"entry":[{},"<BODY onload=getUpdates(\u201cupdates.html\u201d)>U2"]},{"entry":[{},"<span id=1>Alpha<\/span><br>"]},{"entry":[{},"<span id=2>Beta <\/span><br>"]},{"entry":[{},"<span id=3>Gamma<\/span><br>"]},{"entry":[{},"<span id=4>Delta<\/span><br>"]},{"entry":[{},"<\/body>"]},{"entry":[{},"<\/HTML>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The following code is the contents of \u2018player.js\u2019 that is added to the original page. This is a much simplified client player (Transceiver  and Display Alterer ) which can perform only simple \u2018ASSIGN\u2019 operations. The operation of this is as follows.","When updates are requested, the location of a page containing updates, or server generating a page containing updates is supplied as a uniform resource locator (URL). This is passed to the \u2018getUpdates\u2019 function. This function creates a hidden subpage (frame) that is used as a communications channel to the server.","When the server recives the URL request, it responds by supplying a set of updates encoded as a HTML page (example given later). When loaded, this page of updates calls the \u2018doUpdate\u2019 method which in turn applies the update to the original page.",{"@attributes":{"id":"p-0131","num":"0141"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"player.js"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ retrieve a page containing updates from the specified URL"},{"entry":"\/\/ once this has loaded \u2018doUpdate\u2019 will be called"},{"entry":"function getUpdates(url)"},{"entry":"{"},{"entry":"\u2002document.body.insertAdjacentHTML(\u201cafterBegin\u201d, \u201c<IFRAME"},{"entry":"NAME=_tunnel ID=_tunnel FRAMEBORDER=0 WIDTH=0"},{"entry":"HEIGHT=0 STYLE=\u2018position:absolute\u2019 SRC=\u2018\u201d+url+\u201c\u2019><\/IFRAME>\u201d);"},{"entry":"\u2003}"},{"entry":"\/\/ called when updates are available"},{"entry":"\/\/ Perform the update on the current page."},{"entry":"function doUpdate(command,destId,data)"},{"entry":"{"},{"entry":"\u2002if(command==\u2018assign\u2019)"},{"entry":"\u2002{"},{"entry":"\u2003var dest = document.getElementById(destId);"},{"entry":"\u2003dest.innerHTML = data;"},{"entry":"\u2002}"},{"entry":"\u2002else"},{"entry":"\u2002{"},{"entry":"\u2003alert(\u201cCommand \u201c+command+\u201dnot understood\u201d);"},{"entry":"\u2002}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The following is an example page of updates. This page would normally be created dynamically by the Server Node ().",{"@attributes":{"id":"p-0133","num":"0143"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"updates.html"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ This page contains the following updates, encoded as a HTML page"},{"entry":"<html>"},{"entry":"<head>"},{"entry":"<script>"},{"entry":"\/\/ parent is the containing window (ie the original page)"},{"entry":"parent.doUpdate(\u2018assign\u2019,1,\u201c A\u201d);"},{"entry":"parent.doUpdate(\u2018assign\u2019,3,\u201c C\u201d);"},{"entry":"<\/script>"},{"entry":"<\/head>"},{"entry":"<body><\/body>"},{"entry":"<\/html>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, features and advantages of the present invention, as well as the invention itself, will be more fully understood from the following description of preferred embodiments, when read together with the accompanying drawings.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2","i":"a "},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","i":"b "},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3","i":"a "},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3","i":"b "},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4","i":"a "},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4","i":"b "},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4","i":"c "},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5","i":"a "},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5","i":"b "},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIGS. 11","i":["a","b","c ","d "],"b":["11","11","11"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
