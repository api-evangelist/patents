---
title: Image stream pipeline controller for deploying image primitives to a computation fabric
abstract: According to some embodiments, an image pipeline controller may determine an image stream having a plurality of image primitives to be executed. Each image primitive may be, for example, associated with an image algorithm and a set of primitive attributes. The image pipeline controller may then automatically deploy the set of image primitives to an image computation fabric based at least in part on primitive attributes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09378534&OS=09378534&RS=09378534
owner: INTEL CORPORATION
number: 09378534
owner_city: Santa Clara
owner_country: US
publication_date: 20111228
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["Many devices include one or more image sensors and\/or image displays, and an image processing unit may facilitate the processing of data coming from the sensor, being provided to the display, and\/or is otherwise being utilized by applications running on the device. For example, a smart phone might include a number of different cameras and a touch screen. The image processing unit may include an image computation fabric having a number of different components to process image information.","In some cases, the image processing unit may execute a series of image primitives to create output image data (e.g., to be sent to a touch screen) based on input image data (e.g., received from a smart phone's camera). The image primitives may be, for example, associated with an image primitive library and might include, for example, sensor primitives, calibration primitives, optics primitives, etc.","Typically, an application executing in connection the image processing unit determines which image primitives will be executed by the various components of the image computation fabric. For example, the application might determine that a filter primitive will be executed by fixed function hardware. Such an approach, however, can have several disadvantages. For example, the application might be unaware that another application is also attempting to use the same fixed function hardware. As a result, an application may \u201cstall\u201d or need to wait until the fixed function hardware becomes free, and the performance of the system may be degraded.","Moreover, the substantial number and relative complexity of image primitives (and the fact that they may operate differently in connection with different components of different image execution fabrics) may result in substantial software development costs and inhibit innovation for application software developers (who may be forced to create customized software for each new platform).",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","110","120","110","120","130","110","120","100","100","140"]},"The device  illustrated in  may exchange information via any communication network which may be one or more of a Local Area Network (\u201cLAN\u201d), a Metropolitan Area Network (\u201cMAN\u201d), a Wide Area Network (\u201cWAN\u201d), a proprietary network, a Public Switched Telephone Network (\u201cPSTN\u201d), a Wireless Application Protocol (\u201cWAP\u201d) network, a Bluetooth network, a wireless LAN network, and\/or an Internet Protocol (\u201cIP\u201d) network such as the Internet, an intranet, or an extranet. Note that any devices described herein may communicate via one or more such communication networks.","All systems and processes discussed herein may be embodied in program code stored on one or more non-transitory computer-readable media. Such media may include, for example, a solid state Random Access Memory (\u201cRAM\u201d) or Read Only Memory (\u201cROM\u201d) storage units. Embodiments are therefore not limited to any specific combination of hardware and software.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","210","210","212","214","216","218"]},"The image processing unit  may execute a series of image primitives  to create output image data (e.g., to be sent to a touch screen) based on input image data (e.g., received from a smart phone's camera). The image primitives  are associated with an image primitive library stored in an image primitive database  and might include, for example, sensor primitives, calibration primitives, optics primitives, lighting primitives, depth primitives, segmentation primitives, color primitives, filter primitives, and\/or three dimensional depth primitives.","The set of image primitives  executed on the stream of image information may represent a set of resources used by an application to process the image data. For example, an imaging application might require a small set of image primitives  to provide processing to implement specific high level algorithms, such as face recognition, gesture recognition, etc. That is, the image primitives  may be used together to process image data and achieve higher level goals. The image primitives  may represent building blocks for larger algorithms, and may be resources which must be managed and made available to multiple simultaneous imaging and visual computing applications.","A set of image primitives  may be associated with many different types of image algorithms, such as those associated with pixel correction, artifact removal, histogram information, scaling functions, face recognition, visual object recognition, visual scene analysis, machine vision, gesture recognition, and\/or depth map calculations. Moreover, different types of image primitives  might be associated with, by way of examples only, camera sensor format processing (Bayer Red Green Blue (RGB), Aptina\u2122 RGB, Kodak\u2122 RGBW, etc.), camera sensor dimensions (1080p, etc.), camera sensor frame rates, calibrations (Auto White Balance, Auto Shutter, Auto Focus, etc.), dead pixel detection and correction, lighting controls, optics controls, three dimensional depth sensor controls (structured light, stereo triangulation, etc.), color conversion (RGB, YUV, HIV, etc.), Look-Up Table (LUT) processing and value substitution, boolean operations, segmenting an image into various component parts (foreground, background, objects, etc.), filters (sharpen, blur, media, etc.), edge detection (Sobel, Roberts, Prewitt, etc.), point operations (Pixel Math, etc.), and\/or domain processing (Fourier, HAAR, Karhunen-Loeve, Slant Transform, etc.)","Typically, an application executing in connection the image processing unit  determines which image primitives  will be executed by the various components , , ,  of the image computation fabric . For example, the application might determine that a filter primitive will be executed by the fixed function hardware . Such an approach, however, can have several disadvantages. For example, the application might be unaware that another application is also attempting to use the fixed function hardware . As a result, an application may \u201cstall\u201d or need to wait until the fixed function hardware becomes free, and the performance of the system may be degraded.","Moreover, the substantial number and relative complexity of image primitives  (and the fact that they may operate differently in connection with different components of different image execution fabrics ) may result in substantial software development costs and inhibit innovation for application software developers (who may be forced to create customized software for each new platform).","Thus, embodiments provided herein may provide for improved deployment of image primitives to a computation fabric. In particular,  is a block diagram of an imaging processing unit  in accordance with some embodiments. As before, the image processing unit  includes an image computation fabric  that may process image information. The image computation fabric  might include, for example, a fixed function hardware image processing unit , an SIMD image execution unit , a VLIW processing unit , and\/or a general processing unit . The image processing unit  may execute a series of image primitives  to create output image data (e.g., to be sent to a touch screen) based on input image data (e.g., received from a smart phone's camera). The image primitives  are associated with an image primitive library stored in an image primitive database . According to this embodiment, an image pipeline controller  may be used to help deploy the image primitives  to the image computation fabric . Note that the image pipeline controller  might be associated with a hardware image pipeline controller, a software image pipeline controller, or a combination of hardware and software image pipeline controller components.","The image pipeline controller  may deploy image primitives  (e.g. to various components of the image computation fabric ) in a number of different ways. For example,  is a flow diagram of a process that might be associated with the pipeline controller  of  according to some embodiments. Note that all processes described herein may be executed by any combination of hardware and\/or software. The processes may be embodied in program code stored on a tangible medium and executable by a computer to provide the functions described herein. Further note that the flow charts described herein do not imply a fixed order to the steps, and embodiments of the present invention may be practiced in any order that is practicable.","At , an image pipeline controller may determine an image stream having a plurality of image primitives to be executed, each image primitive being associated with an image algorithm and a set of primitive attributes. The image stream might be, for example, received from a video camera. At , the image pipeline controller may automatically deploy the set of image primitives to an image computation fabric based at least in part on primitive attributes.","As used herein, a primitive \u201cattribute\u201d may be any information that describes aspects of the operation or execution of the image primitive. One skilled in the art will recognize that a wide range of attributes may be assigned to each primitive or group of primitives within a segment, thus the attributes listed herein serve to illustrate the concepts of this invention and therefore do not limit the applicability of this invention to incorporate other useful attributes beside those listed.","For example,  illustrates primitive attributes  for a convolution image primitive according to some embodiments. The image attributes  may be, for example, defined by a developer of the image primitive. According to some embodiments, the primitive attributes  might reflect a number of computation units, a performance value, a power value, a thermal value, and\/or a rank preference for the image attribute. By way of example, each image primitive might be assigned attributes a-priori by design engineers who characterize the primitive in connection with various criteria to define the image primitive in terms of: a performance rank for software primitives on various processors or fixed function hardware, a preferred processor(s) for software primitives, a ranking of performance versus power, a fixed function hardware availability (e.g., some primitives may be implemented only in software), and\/or an indication of whether or not the image primitive can process a subset of image information (e.g., to be processed as 4 k cache-resident pixel image \u201ctiles\u201d for two dimensional images). That is, these primitive attributes  may be used to define image primitive behavior at run-time.","The image primitives may be stored within a primitive attribute database or other data structure and used by a compiler or translator that is accessed by a pipeline controller to interpret the attributes and execute primitives in accordance with the attributes. For example,  is a block diagram of an imaging processing unit  having a primitive attribute database  or other data structure in accordance with some embodiments. The image processing unit  includes an image computation fabric  to execute image information including a fixed function hardware image processing unit , an SIMD image execution unit , a VLIW processing unit , and\/or a general processing unit . The image processing unit  may execute a series of image primitives  to create output image data based on input image data, and an image pipeline controller  may be used to help deploy the image primitives  to the image computation fabric . The image pipeline controller  may deploy image primitives  (e.g. to various components of the image computation fabric ) based on information in the primitive attribute database  or other data structure. For example, a software application may use an Application Programming Interface (API) to query image primitive attributes and associated assets, and then the application may choose a preferred method for using the image primitive  based on the available primitive attributes.","According to some embodiments, the image pipeline controller  and\/or primitive attribute database  or other data structure at run-time may read the primitive attributes of each image primitive  to determine the best way to run a workload within a given image computation fabric . For example, an image primitive  may be available both in fixed function hardware  and a software proxy as defined in the primitive attributes, in which case an application might choose which type should be executed to achieve a performance versus wattage target.","According to some embodiments, when a software application has not specified how to use an image primitive  via a primitive attribute, the image pipeline controller  and\/or primitive attribute database  or other data structure may be used by the various components comprising the run-time framework within this invention to automatically attempt to optimize performance. According to some embodiments, the run-time framework may automatically attempt to optimize performance of primitives across a compute fabric according to a-priori defined attributes of each primitive, where primitives may be grouped into segments which may be executed in-order or out-of-order according to their attributes. Moreover, as described with respect to  segments may chained together to form a pipeline, and the run-time framework may optimize the workload according to the available compute resources as per the attributes defined for each primitive. Moreover, the optimization may include adjusting the behavior of the computing assets such as a clock frequency, voltage, bus speed, processor speed, processor time slice size for threads, device and thread priorities, bus arbitration priorities, memory tile sizes, cache behavior, memory behavior, primitive implementation method of SW or FF HW, etc.","For example,  is a block diagram of an imaging processing unit  with an initialize component  and a sequencer component  in accordance with some embodiments. The image processing unit  includes an image computation fabric  to execute image information including a fixed function hardware image processing unit , an SIMD image execution unit , a VLIW processing unit , and\/or a general processing unit . The image processing unit  may execute a series of image primitives  to create output image data based on input image data, and an image pipeline controller  may be used to help deploy the image primitives  to the image computation fabric . The image pipeline controller  may deploy image primitives  (e.g. to various components of the image computation fabric ) based on information in the primitive attribute database  or other data structure. The initialize component  may be used, for example, to initialize a camera, image sensor, or any other device.","The sequencer component  may execute a sequencing algorithm to order the image primitives  within the image stream for an in-order image primitive execution in a pipeline sequence. According to some embodiments, the image primitives  may be associated with an original order, and the execution of the image primitives  may be performed for at least some of the image primitives  in an order different than the original order for an \u201cout-of-order\u201d primitive execution in a pipeline sequence. For example, at run time the sequencer component  may order the image primitives  to execute efficiently within the image computation fabric . For example, portions of an image stream may allow out-of-order image primitive execution (and may have no dependencies) and such image primitives  may be candidates for parallel execution across the components of the image computation fabric .","A resource manager and run time resource lock mechanism may be responsible for determining the availability of assets or components of the image computation fabric , locking assets for exclusive use by a pipeline or application, monitoring asset states, and\/or freeing assets for use by other pipelines or application. Such an approach may permit, for example, multiple simultaneous applications to use the components of the image computation fabric . For example,  is a block diagram of an imaging processing unit  to process multiple image streams  in accordance with some embodiments. The image processing unit  includes an image computation fabric  to execute image information including a fixed function hardware image processing unit , an SIMD image execution unit , a VLIW processing unit , and\/or a general processing unit . The image processing unit  may execute a series of image primitives for multiple image streams  to create output image data based on input image data, and an image pipeline controller  may be used to help deploy the image primitives of the image streams  to the image computation fabric . The image pipeline controller  may deploy image primitives of the image stream  (e.g. to various components of the image computation fabric ) based on information in a primitive attribute database  or other data structure. For example, different image streams  may be associated with different applications being executed by an operating system, and information about the image streams  may be associated with an API.","According to some embodiments, a tile processor  in the image pipeline controller  may determine whether a tile subset of image data is to be deployed to the image computation fabric  based at least in part on a primitive attribute in the primitive attribute database . For example, a primitive attribute might indicate that a convolution image primitive in an image stream  can be divided into tiles that can be separately processed by components of the image computation fabric  (e.g., to allow for more efficient execution). That is, at run time the tile processor  may manage dividing an image stream  being sent through the pipeline into tiled regions when possible and\/or specified by an application. The tiling technique may let an image be processed in smaller tiles that fit inside a cache line, enabling swap-free access to the data with little or no page faults. This may speed up performance as compared to processing each image primitive over an entire image, sequentially.","According to some embodiments, a load distributor and balancer  in the image pipeline controller  may execute a load-balancing algorithm between image primitives in different image streams . For example, at run time the load distributor and balancer  may let multiple applications simultaneously use available assets in the image computation fabric , and a stream multiplexer may manage resource locks and resource contention issues. The load distributor and balancer  may also execute a workload distribution algorithm to select an image processing component to receive one of the image primitives in the image streams . The selection may be based on a power and performance policy, resource reservation priorities, pipeline priorities, and\/or resource availability arbitration priorities. According to some embodiments, a workload distribution algorithm may reduces stall and\/or optimize for power or performance associated with execution of the image primitives in the image computation fabric . Thus, the load distributor and balancer  may spread the workload across available resources in the image computation fabric , to parallelize workload execution when possible. According to some embodiments, information in the primitive attribute database  may provide guidance for the load distributor and balancer .","For example, a workload distribution algorithm might select one of the fixed function hardware image processing unit  or a \u201csoftware emulation\u201d or proxy of the fixed function hardware image processing unit  based on primitive attributes and\/or an image processing component status (e.g., when the fixed function hardware image processing unit  is in use by another application, the load distributor and balancer  might select to use a software proxy of that component instead).  is a block diagram of an imaging processing unit  providing a software proxy emulation of fixed function hardware  according to some embodiments. The image processing unit  includes an image computation fabric  to execute image information including a fixed function hardware image processing unit , an SIMD image execution unit , a VLIW processing unit , and\/or a general processing unit . The image processing unit  may execute a series of image primitives for multiple image streams  to create output image data based on input image data, and an image pipeline controller  may deploy the image primitives of the image streams  to the image computation fabric . The image pipeline controller  may deploy image primitives of the image stream  to various components of the image computation fabric  and\/or the software proxy emulations  based on information in a primitive attribute database  or other data structure. For example, an image primitive might be deployed to a software proxy emulation  when a corresponding component in the image computation fabric  is currently being used by another image stream  and\/or another application.","Note that  represents a logical architecture according to some embodiments, and actual implementations may include more or different components arranged in other manners. Moreover, each system described herein may be implemented by any number of devices in communication via any number of communication paths. Two or more of the devices may be may be implemented in a single component. Further, each device may comprise any number of hardware and\/or software elements suitable to provide the functions described herein as well as any other functions. Other topologies may be used in conjunction with other embodiments.","The image streams  are composed of sequences of image primitives. According to some embodiments, a subset of the image primitives within a stream are associated with an image stream \u201csegment.\u201d For example,  illustrates  segments in image streams according to some embodiments. In particular, a first image stream  includes an image stream segment  comprising image primitives A, B, and C. The first image stream  also includes a number of individual image primitives , . A second image stream  includes other image stream segments  (comprising image primitives A, E, and F) and  (comprising image primitives B, D, and G).","The image streams ,  of  might be composed of \u201cin-order\u201d image stream segments. That is, each image stream segment might be deployed to the image computation fabric only after the prior segment has executed (sequential execution). Note, however, that some image streams might support out-of-order execution. For example,  illustrates  three image stream segments being executed in parallel by the image computation fabric (spread out across computing resources). Similarly,  illustrates  an image pipeline composed of both in-order and out-of-order image stream segments chained together.","According to some embodiments, the image stream segments may be associated with one or more image stream attributes for workload distribution, stall reduction, power optimization, performance optimization, load balancing, and\/or a sequencing algorithm. Thus, a pipeline or image stream may be composed of segments, where segments are composed of sets of image primitives. Moreover, sets of primitives may be combinations of either fixed function hardware, software proxy emulations of the fixed function hardware that can be used when the fixed function hardware is busy, or \u201csoftware only\u201d primitives. Moreover, segments might be executed either in-order or out-of-order. According to some embodiments, image primitives, segments and\/or entire pipelines may have policy attributes such as priority, power\/performance budget, memory size requests, memory bandwidth requests. Note that a programmable segment could be provided such that it is associated with an arbitrary set of image primitives and\/or an arbitrary image primitive order (e.g., to allow a customer to program an area image processing function).","Thus, a segment of an image stream may be assigned various attributes to control its execution during run time. For example,  is an example of a Graphical User Interface  for segment attribute definition in accordance with some embodiments. The GUI  may, for example, let a software developer define attributes for a camera fixed function hardware segment and an associated camera software proxy segment. In particular, the GUI  may be used to turn various attributes (e.g., de-noise, artifact removal, and\/or video stabilization attributes) \u201cor\u201d or \u201coff\u201d for the segments as appropriate.","These attributes may be used by an image pipeline controller when deploying the segment to an image computation fabric. For example,  is a flow diagram illustrating a method associated with image stream segments in accordance with some embodiments. At , an image stream with multiple segments may be received by an image pipeline controller. For example, the image stream might be received from a smartphone video camera. At , a stall avoidance and power optimization analysis may be performed for the segment. For example, an image pipeline control might try to avoid deploying multiple tasks to the same component at the same time. At , a workload distribution and load balancing analysis may be performed in connection with various pipelines, segments and\/or individual image primitives. For example, an image pipeline controller might attempt to deploy tasks to under utilized image resources or assets. At , an execution component may be selected for the segment. Based on the selection at , the segment may be assigned to a fixed function hardware image processing unit at  or a software proxy of a fixed function hardware image processing unit at .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 13","b":["1300","1310","1320","1320","1320"]},"Embodiments described herein may provide a standard software API across different execution components and\/ visual computing assets associated with perceptual computing software and fixed function hardware, camera pipelines and asset to help provide an improved user experience and performance versus wattage advantages.","Accordingly, a method and mechanism to efficiently, accurately, and automatically deploy image primitives to an image computation fabric may enable use cases such as three dimensional depth perception, high resolution images, high frame rate image capture for computational photography, face recognition, scene analysis, etc. An image pipeline may include fixed function hardware assets close to the image sensor, fixed function hardware assets inside processor graphics components, and various software API's and libraries to handle high level use cases. A cohesive architectural model may tie together disparate assets into a complete system to enable software innovation and to expose a camera pipeline and the available assets across operating system platforms.","According to some embodiments, a run-time framework may automatically attempt to facilitate or optimize performance of primitives across a compute fabric according to a-priori defined attributes of each primitive. Moreover, according to some embodiments, primitives may be grouped into segments which might be executed in-order or out-of-order according to their attributes. Moreover, segments may be chained together into a pipeline, and the run-time framework may attempt to facilitate or optimize the workload according to the available compute resources as per the attributes defined for each primitive or segment. According to some embodiments, the facilitation or optimization might include support for multiple simultaneous applications to share the compute fabric, interleaving for resource sharing and usage by different applications, resource locking and sharing mechanisms for primitives in a compute fabric, adjusting the behavior of the computing primitive assets such as by adjusting a clock frequency, voltage, bus speed, processor speed, processor time slice size for threads, device and thread priorities, bus arbitration priorities, memory tile sizes, cache behavior, memory behavior, primitive implementation method of SW or FF HW, etc.","The following illustrates various additional embodiments and do not constitute a definition of all possible embodiments, and those skilled in the art will understand that the present invention is applicable to many other embodiments. Further, although the following embodiments are briefly described for clarity, those skilled in the art will understand how to make any changes, if necessary, to the above-described apparatus and methods to accommodate these and other embodiments and applications.","Although embodiments have been described with respect to particular types of image sensors and displays, note that embodiments may be associated with other types of sensors and displays. For example, three dimensional cameras and\/or displays may be supported by any of the embodiments described herein. Moreover, while embodiments have been illustrated using particular ways of processing image information, note that embodiments might instead be associated with any other sorts of image primitives and\/or algorithms.","Embodiments have been described herein solely for the purpose of illustration. Persons skilled in the art will recognize from this description that embodiments are not limited to those described, but may be practiced with modifications and alterations limited only by the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 10A through 10C"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
