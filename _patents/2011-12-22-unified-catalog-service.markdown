---
title: Unified catalog service
abstract: A catalog of one or more metadata objects associated with metadata is stored in a persistent manner. The data objects are stored at least in part on a user node included in a data management system. A request associated with accessing a metadata object included in the persistent catalog is received. In response to receiving the request, access to the requested metadata object is provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09286303&OS=09286303&RS=09286303
owner: EMC Corporation
number: 09286303
owner_city: Hopkinton
owner_country: US
publication_date: 20111222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION"],"p":[{"@attributes":{"id":"p-0002","num":"0001"},"figref":"FIG. 1","b":["106","108","100","104","100","102","110","112","102","114","116","106","110","114","114","116","102","114","116"]},"The invention can be implemented in numerous ways, including as a process; an apparatus; a system; a composition of matter; a computer program product embodied on a computer readable storage medium; and\/or a processor, such as a processor configured to execute instructions stored on and\/or provided by a memory coupled to the processor. In this specification, these implementations, or any other form that the invention may take, may be referred to as techniques. In general, the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise, a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein, the term \u2018processor\u2019 refers to one or more devices, circuits, and\/or processing cores configured to process data, such as computer program instructions.","A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments, but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives, modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity, technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.","A persistent catalog of metadata which is located on a catalog node is described herein. The catalog node is part of a distributed data management system which also includes a master node and a user node. User nodes in the data management system which desire access to metadata obtain it directly from a catalog stored on the catalog node, as opposed to managing and maintaining a persistent collection of metadata locally on the user node. In some embodiments, a temporal copy of metadata is stored locally in a cache on a user node; in such embodiments the copy is neither persistent nor a link by which a corresponding metadata object in a catalog can be updated, thus reducing synchronization issues. In some embodiments, a catalog is associated with multiple data management systems and the catalog presents a unified representation of metadata from multiple sources. For example, even though a catalog may contain metadata about a Hadoop database as well as metadata about a Greenplum database, the metadata is stored in the catalog in a unified schema and presented to a requester in this unified schema. In some other embodiments, multiple data management systems associated with the same catalog are instantiations of the same type of system (i.e., just as a standard relational database management system (RDBMS) can contain the data for multiple users, a catalog node can contain multiple catalogs for a collection of separate database instances). In some embodiments, a given catalog node contains multiple versions of a catalog associated with different versions or instantiations of the same data management system.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2","b":["200","224","202","106","108","200"]},"The data management system shown in this example is a distributed system where data is distributed throughout the system, as opposed to being located in one (for example, central) location. In this example, user data is stored on user nodes  and  as user data  and , respectively. Although not shown in this example, in some embodiments a master node includes some data managed by the data management system. In various embodiments, a data management system is a file system, a database (e.g., distributed or centralized), etc.","Cache  and  are used to store temporary copies of metadata objects from catalog . Using such a cache may offer performance improvements, for example in cases where a copy of a desired metadata object is contained in the cache (i.e., a cache hit). A cache is used, in one example, for a process to be performed on user node , and that process is stored in metadata. Cache  is accessed to determine if that metadata object (i.e., the process) is stored on user node . If it is, then the process (i.e., metadata object) from cache  is used. Otherwise, catalog  on catalog node  is accessed via network . A variety of cache management techniques may be used, for example, to detect stale information in the cache and remove it once it is detected. In some embodiments, a cache is used on a master node. In some embodiments, caches are not used and a process on a local node or a master node sends a request for a metadata object directly to a catalog (i.e., there is no check first to see if it is available locally). In some embodiments a cache is a write-through cache, where updates to the cache propagate automatically to the catalog (e.g., some mechanism synchronizes or invalidates the caches in the system). A cache on a user node is optional and in some embodiments is not included.","In this example, no persistent copy of a metadata object from catalog  is stored on and\/or managed by user nodes  and  in cache  or , respectively. This eliminates the synchronization issues associated with keeping a persistent copy on a user node with a corresponding metadata object in catalog . For example, if some metadata is stored locally and persistently in the form of segments on a local device, then during an upgrade it will be necessary to ensure that the update is performed on all relevant segments in addition to the catalog. The timing of the update is also consideration and it may be necessary to ensure that the change is performed simultaneously across all devices. Similarly, if a new user node is spawned, there is no need to construct and populate a persistent local metadata store.","In some embodiments, a first service or data management system is used to manage and\/or store catalog  on catalog node  and a second service or data management system is used to manage and\/or store information on master node  and user nodes  and . For example, suppose a first database system which is optimized to manage a relatively small amount of information stored centrally is used to store and manage catalog  on catalog node , and a second database system which is optimized to manage a relatively large amount of information stored in a distributed manner is used to store and manage user data  and  (and possibly other information as desired). To illustrate how such an arrangement may be useful, consider that requests for metadata objects may be small requests (i.e., asking for small amounts of information to be moved or returned) and expedited answers would be desirable. However, user data  and  may contain massive amounts of information (e.g., an enterprise data warehouse). Requests for the latter may include dealing with much, much larger amounts of information (e.g., a request to move or return receipt information for all stores nationwide in a retail chain). Using two services and\/or data management systems permits different types of databases, configurations, settings, availability guarantees, and\/or optimizations to be employed which are selected based on the different inherent properties and desired performance goals associated with the information being managed. For example, configuration of a database used to store and manage catalog  occurs independent of user data  and , so things like the amount of user data  and  or desired performance or availability goals associated with user data will not adversely affect the configuration of a database used to store and manage the catalog.","In some embodiments, catalog  manages and stores metadata associated with multiple data management systems. For example, user node  may be associated with a Greenplum database system and user node  may be associated with a Hadoop system. Catalog  may manage and store information for both the Greenplum database and the Hadoop database, receiving and responding to requests for access to metadata objects associated with the Greenplum and Hadoop systems. Other example data management systems include EMC systems, Oracle systems, Hive systems and Pig systems. In some embodiments, catalog  has a simplified and\/or unified application programming interface (API) for catalog related services (e.g., to create, implement and\/or manage a catalog). This may be attractive if there are multiple types of systems (as in the Greenplum and Hadoop example above), since a process which interfaces with such an API will have a consistent interface. So even though metadata may be associated with different types of sources (such as Greenplum, Hadoop, etc.), there may be a common or unified organization or schema associated with the metadata managed by the catalog.","In some embodiments, catalog  is used as an add-on or replacement to some other catalog. For example, a company may purchase a data management system from a first software provider which is associated with master node  and user nodes  and . Although the data management system associated with the first software provider includes an out-of-the-box catalog, the services provided may be inconvenient to use or lacking in some way. Catalog  may be provided by another software provider as a replacement for the out-of-the-box catalog and may provide a richer set of services or features compared to the out-of-the-box catalog. For example, a company may implement a Hadoop data management system, but supplement the Hadoop system with a Greenplum catalog service which is used in place of the Hadoop catalog. In some embodiments, an out-of-the-box catalog is stored on a master node and an administrator wants the catalog to be located on some other node than the master node (e.g., catalog node ). In some embodiments, an administrator is able to specify what node is the catalog node (i.e., what node to install catalog  on).","In addition to user nodes  and , master node  may access metadata stored in catalog . Master node  includes query planner  and boot engine . In this example, query planner  performs a variety of query related processes, including: assembling a raw query to be performed on user data  and\/or , optimizing the raw query, and executing (and\/or dispatching the distributed execution of) the optimized query on the target user data. Some or all of the steps involve accessing catalog  (e.g., metadata may describe what operations are available for or are permitted to be executed on user data in order to assemble a raw query, or metadata may describe features or characteristics about how the data is provided or organized which may enable performance improvements or other optimizations). Query planner  may have a pointer, reference or address associated with catalog  and directs access requests for metadata to catalog  and catalog  provides access to the requested metadata.","Master node  further includes boot engine , which is associated with a boot process. In one example, boot engine  is initiated when master node  is powered on (e.g., when an underlying hardware system such as a computer or server is powered on). At such times, master node  may begin in a relatively primitive state with very basic processing capabilities and minimal knowledge of the data management system (e.g., described by state information which may be stored in catalog ). Boot engine  may begin a process of acquiring knowledge about the system and expanding its processing capabilities. This boot process may involve accessing catalog  (for example) because the catalog describes what type of data management system the system is, where important system components are located (e.g., a root node or index), and\/or other important identifying information about the system.","In some embodiments, master node  provides additional and\/or alternative services to those described above. For example, a master node may function as an interface, service or access point by which users interface with the distributed management system shown. In such embodiments, an interface or communications process (not shown) may be performed on master node .","Backup catalog  on backup catalog node  is used in some embodiments as a substitute for catalog  as desired or needed. In some embodiments, a redirection to a backup catalog occurs by redirecting a process (e.g., on one of the user nodes  or  or on master node ) to backup catalog , for example, by updating a link, address or identifier associated with the catalog. In some embodiments, backup catalog  is used when catalog  is brought down for service maintenance or a hardware upgrade, or when catalog  fails. In this particular example, backup catalog  and catalog  are on different devices to increase the likelihood that backup catalog  is available if catalog  fails. If backup catalog  were on the same device, then in some situations the backup catalog might not be available if catalog node  fails entirely.","In various embodiments, network  includes any number and\/or types of networks spanning any distance. In various embodiments, the devices shown are spread out across different regions. For example, user node  may be located in Seattle and user node  is located in San Francisco. Various examples of networks that may be used include storage area networks (SAN), Ethernet networks, etc.","A benefit to the system shown in this embodiment is demonstrated during the boot process, especially with respect to the updating of a catalog. In monolithic systems where the catalog is on the master node, it is risky to upgrade certain parts of the catalog, for example those portions that are accessed by boot engine  during a boot process, such as system state information. If a change (for example, to system state information) causes the system to hang or freeze in the middle of the boot process, it may be extremely difficult or impossible to recover because the master node cannot get to a state where the catalog is accessible and tools are available to correct the change in the catalog. For example, the master node may not be in a state where the catalog can be accessed and presented to an administrator for manual editing or rollback to a good version. An administrator is, in essence, locked out of the system. Although not making any change to a catalog is one way to prevent this problem from occurring, that solution is not attractive since a catalog would be locked into the state it was in when first created.","In contrast, changes to catalog  in  do not affect a boot engine (not shown) on catalog node . Even if a change to catalog  causes boot engine  on master node  to freeze, any such change will not affect a boot engine on catalog node  and an administrator will not be locked out of catalog node . Catalog node  is in a state where catalog  could be accessed and modified as needed (e.g., an administrator performs a manual edit to catalog ). Alternatively, instead of accessing catalog node  and making a fix to metadata , in some embodiments catalog node  is brought down and backup catalog node  with a functioning (e.g., earlier) version of backup catalog  is brought up so that boot engine  accesses backup catalog  on backup catalog node  instead of catalog  on catalog node . For example, if master node  includes a pointer or reference to catalog node , then backup catalog node  may assume the identity of catalog node  on the network or system so that a pointer or reference points to backup catalog node . In either case, such solutions are not possible in a monolithic system where a catalog is located on the master node.","In some embodiments, master node  is based on or developed from a legacy monolithic system where the catalog resides on a master node and the catalog is highly intertwined with processes on the master node which access metadata stored in the catalog. In some such embodiments, modifications are made to decouple the catalog from other components on a master node. For example, a query planner or boot engine may expect a catalog to be on-device and access of metadata in processes or function calls may be structured or expressed as a local access (e.g., a location in hierarchy or an object identifier with no context or scope since the calling process and catalog may have the same or similar scope or context). Modifications may be made to a query planner or boot engine to support a catalog that is no longer on the same device (e.g., assembling a request for metadata where the request and returned metadata are exchanged over a network and specifying any required scope or context since the calling process and catalog are not on the same device).","A catalog which is located on a catalog node (as opposed to a master node) may enable a variety of applications. The following figure shows a multi-master system which uses a catalog on a catalog node. A multi-master system may be desirable since it may offer improved performance over a single master and may offer redundancy in the event a master fails.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3","b":["300","302","306","308","300","302","300","302","300","306","302","308"]},"Regardless of the responsibilities of and\/or processes performed by master nodes  and , the master nodes do not maintain persistent copies of the metadata locally. In some embodiments, masters  and  maintain a cache (e.g., as described above with respect to the previous figure) but any metadata kept in such a cache is transient or temporal. In some embodiments, if there is no cache or a desired metadata object is not located in a cache on a master node, a request is sent to catalog node  for access to the desired metadata object. Similarly, user nodes  and  do not keep a persistent copy of metadata on their devices; any copy which is kept locally is stored in a temporary manner.","In some embodiments, the number of masters varies over time. For example, if more masters are needed because the load is heavy, additional master nodes may be instantiated; when they are no longer needed they are brought down. Since the master node no longer includes a catalog, it is relatively effortless to instantiate a master node (or alternatively bring it down) and adjust the number of masters as needed. For example, to bring up a new master in such monolithic systems would require duplication of the catalog on the master node. Some systems may not have fully automated tools to do this. Furthermore, in the event a master node is brought down, the corresponding catalog would come down but other nodes or processes might expect the catalog to be available, which could create problems.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 4","FIG. 2"],"b":"200"},"At , a catalog of one or more metadata objects associated with one or more data objects is stored in a persistent manner on a catalog node included in a data management system. For example,  show examples of such a data management system.","At a catalog node, a request associated with accessing a metadata object included in the persistent catalog is received at . For example, catalog node  may receive a request from master node  or user node  or .","At , in response to receiving a request, access is provided to a requested metadata object. For example, master node  and user nodes  and  do not store persistent copies of metadata objects from the catalog locally.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 5","FIG. 2"],"b":["212","214"]},"At , a request associated with accessing a metadata object is generated at a master node included in a data management system. The metadata object is included in a catalog of one or more metadata objects associated with one or more data objects and the catalog is stored in a persistent manner on a catalog node included in a data management system and data objects are stored at least in part on a user node included in the distributed data management system. In one example, query planner  on master node  in  is assembling, optimizing and\/or executing a query and information stored in catalog  is used as part of this.","At , access to a requested metadata object is received at a master node. In some embodiments, neither a master node nor a user node is configured to store any metadata object from the catalog in a persistent manner. For example, even though query planner  in  may receive some metadata objects in order to assemble, optimize and\/or execute a query, the metadata object obtained in order to do this is not stored persistently on the master node.","Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding, the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Various embodiments of the invention are disclosed in the following detailed description and the accompanying drawings.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
