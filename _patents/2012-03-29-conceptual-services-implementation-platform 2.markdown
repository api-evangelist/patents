---
title: Conceptual services implementation platform
abstract: The present disclosure generally relates to computing methods and applications. A service platform includes standard functionalities that can be used in different applications, such as composite applications. The service platform includes a database that stores application specific information, which is mapped to the standard functionalities. To use these functionalities, different applications initialize relevant parts of the database and use predefined standards to access these functionalities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09589037&OS=09589037&RS=09589037
owner: Hewlett Packard Enterprise Development LP
number: 09589037
owner_city: Houston
owner_country: US
publication_date: 20120329
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["The present disclosure generally relates to computing methods and applications.","With the advent of the computer and network technologies, more and more software tools and applications become available to provide solutions to individuals and business entities. Often, programmers build software applications by combining existing software solutions and functions, usually for the reasons of cost savings. As an example, an application that is formed by combining multiple existing service implementations can be loosely referred to as a composite application. This type of application can be referred to by other names as well. Usually, a composite application comprises functionalities from more than one source and a logic portion that governs how these functionalities are used and interact with one another.","The present disclosure generally relates to computing methods and applications. A service platform includes standard operations that can be used to implement composite applications. The service platform includes a database that stores information on conceptual services and service implementations; each conceptual service can have a plurality of service implementations. The service platform automatically sends standard operation service requests to appropriate service implementations; the appropriate service implementation for a request may be determined by the customer who is making the request. Some service requests trigger additional requests, which the platform handles automatically.","Existing technologies are often inadequate for various reasons. Typically, for composite applications, existing solutions typically provide design patterns and generic integration platforms. Problems with these solutions include: (i) they enable developers to create solutions that do not conform to the best patterns (e.g., lack of abstract canonical service interfaces and over-reliance on point-to-point integration); (ii) they do not follow the principles of model driven architecture, but instead require developers to construct platform-specific implementation code for each platform separately; (iii) they require system engineers to create domain solutions, instead of enabling domain experts to specify domain designs that are directly executable; (iv) the existing published design patterns are at a much finer grained level than is needed, in other words, they are elementary building blocks rather than high-level meta-patterns that are needed for multi-tenant, configurable, composite services; and (v) these other solutions do not address the traceability issues from the business context to the conceptual services to the logical designs to the physical technologies to the executable code.","Typically, composite applications are built by combining functionalities from multiple applications, services, and\/or sources. By using functionalities that are already available, it is possible to build composite applications faster than starting from scratch. However, the complexity of composite applications, especially when delivered as multi-tenant configurable services, creates obstacles to success at every stage of the lifecycle; conception, design, development, deployment, operation, and continuous release. Some of this complexity is inherent to the problem being solved, but much of it is artificially introduced by failing to treat composite applications as the new solution type they are.","In general, composite applications are complex. They combine cross-functional, role-based user experiences, case- and message-based workflows, interoperable canonical business services (each delivered via multiple optional service implementations), multi-tenant customer configurations, together with security, logging, monitoring, self-service sales, metering, billing, etc. Each of these components is a challenge in itself, but is still much simpler than their combination. Further, composite applications often require formal traceability from the business context to the conceptual services to the logical designs to the physical technologies to the executable code, which are not dealt with coherently by existing application methodologies.","These challenges have resulted in multiple failures in the development projects, customer contracts, and service line offerings and portfolios. The difficulties negatively affect code quality, time to market, development and maintenance costs, and agile rapid release. In addition, the avoidable complexities often cause software engineers to forget to follow good design principles based on model driven architecture, including standardized domain-independent platform architectures and platform-independent portable domain designs.","It is to be appreciated that, in contrast, by focusing on the specific problems associated with composite applications and by leveraging our Role-based Domain Architecture (RDA) methodology and tools, we have developed a design methodology that reduces the avoidable complexity in these solutions. As described in the present disclosure, we have defined a domain-independent composite application platform, appropriate RDA meta-models for capturing platform-independent domain models, and the code- and configuration-generating drivers that make executable designs a reality for composite applications. The present disclosure describes a portion of the platform that provides managing multiple implementations of conceptual services and their dependencies. It is to be appreciated the methods and systems described in the present disclosure are comparable to that of a relational database management system, which can be combined with a database design tool for composite, service-oriented, message-based, event-driven, multi-tenant, as-a-service software, the resulting designs being used to generate configuration files and patterned code that is deployable on the runtime platform. The methods and systems described in the present disclosure focus on one sub-problem of this big picture, the problem of managing multiple implementations for conceptual services and their dependencies within a configurable and multi-tenant environment.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","105","106","107","108","110","111","100","100","100"]},"To use the CSIP , a user interfaces with the service fa\u00e7ade  of the CSIP . As shown in , the REST API services  depends on the Service Fa\u00e7ade , which provides standard functions that REST API Services  can access. The REST API Services  provides an interface for the UI Composite Client  and the Service Implementation . For example, UI Composite Client  can be a composite application that uses multiple standard operations provided by the CSIP , and to access these operations, the composite application uses the REST API services  which interact with the Service Fa\u00e7ade .","The Service Integration and Dependency Support System (SIDSS)  performs various operations and owns fundamental objects (a) Services, Fundamental Object Schemas, Service Dependencies ; (b) Service Implementations, SI Object Schemas, Schema Transformations ; (c) Customers and their SI Picks ; (d) Customer Object Instances and their Mappings . The SIDSS  exposes these fundamental objects through standard CRUD (Create, Retrieve, Update, Delete) operations.","The Message Broken  owns fundamental object Customer Object Instances in Queues. In addition, the Message Broker  exposes operator oPublish and uSubscribe.","The Message Transformation , as shown, exposes operations Create from SI, Create To SI, Read SI, Update or Delete from SI, and Update or Delete To SI. These operations are described below and illustrated in .","The Service Fa\u00e7ade  exposes operations oNew, oChange, oRemove, oGet, and uGet. In addition, the Service Fa\u00e7ade  interfaces with the REST API Services . for example, upon receiving a service request from the REST API Services , the Service Fa\u00e7ade  executes the appropriate CSIP operations to satisfy the service request.","The Service Integration  exposes operations uNew, uChange, and uRemove.","The components of the CSIP  work with and depend on one another. These services have the following dependencies as illustrated in :","Service Fa\u00e7ade  depends on (a) SIDSS ; (b) Message Broker : oPublish; and (c) Message Transformation .","Service Integration  depends on (a) SIDSS ; (b) Message Broker : uSubscribe; and (c) Message Transformation .","Message Broker  depends on SIDSS .","Message Transformation  depends on (a) SIDSS  and (b) (called) Service Implementation .","For example, to access and use the CSIP , a composite application UI Composite Client  or (calling) Service Implementation  depends on REST API Services , which depends on Service Fa\u00e7ade . And to access the (called) Service Implementation , the composite application interacts with the CSIP  through REST API Services , which depends on Service Fa\u00e7ade , which depends on Service Transformation , which depends on Service Implementation .","As can be seen from  and the description above, many components of the CSIP  depend on the SIDSS . It is to be appreciated that the SIDSS  provides dependency supports that allow functionalities of CSID  components to operate with one another and provide services to composite applications.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 2","b":["200","200","200"]},"The SIDSS database  includes domain information , service implementation information , customer information , and operational information . Domain information  includes Domain table , Service table , FundamentalObjectSchema table , and ServiceUsesFundamentalObject table . Service implementation information  includes ServiceImplementation table , ServiceImplementationObject Schema table , and SchemaTransformation table . Customer information  includes Customer table  and CustomerServiceConfiguration table . Operational information  includes FundamentalObjectInstance table , ServiceImplementationObjectInstance table , and ObjectInstanceMapping table .","The business data in the domain is represented as a set of fundamental objects stored in the FundamentalObjectSchema table , each of which is owned by one of the services in Service table . These fundamental object schemas are listed in FundamentalObjectSchema table , which identifies the OwningService for each object. A fundamental object owned by one service may be used by other services, each of which is referred to as a UsingService. ServiceUsesFundamentalObject table  stores this information (i.e., relationships between services and various fundamental objects that they use). As an example, the structure of a fundamental object is represented as an XML Schema Design (XSD) which is stored in the FundamentalObjectXSD attribute of FundamentalObjectSchema table . Instances of a fundamental object are represented as XML documents stored in the FundamentalObjectInstanceXML attribute of FundamentalObjectInstance table . These XML documents conform to the corresponding FundamentalObjectXSD.","The ServiceImplementation table  stores information on the service implementations that implement the (conceptual) services. A Service Implementation (SI) that implements an OwningService is the system of record for the instances of fundamental objects owned by that OwningService.","The Customer table  stores information on the customers of the services. The CustomerServiceConfiguration table  stores the configuration details for each customer; this table has a row for each (Service, Customer) pair, in which ServiceImplementationID identifies the ServiceImplementation that this customer has picked to implement this Service. Rows are inserted into these tables whenever a new customer is introduced. The CustomerServiceConfiguration table  provides links between services stored in the Service table  and implementations of services stored in the ServiceImplementation table . When the user (or the composite application of the user) needs to use a service provided by the CSIP and sends a service request, the SIDSS  refers to various tables to determine which services to use and how these services are implemented.","The service implementation information tables  on the right parallel the domain information tables  on the left. For example, alignment between the Service Implementation Objects and the corresponding Fundamental Objects is made explicit in the SchemaTransformation table  in the middle. For example, the SchemaTransformation table  stores the XSLT files needed to translate between corresponding FundamentalObjectInstanceXML and ServiceImplementationObjectInstanceXML documents. These transformations may also include data domain mappings (e.g., \u201cTexas\u201d in one representation might be \u201cTX\u201d in another; truncation and padding functions; etc.).","New rows are inserted into the ServiceImplementation table , ServiceImplementationObject Schema table , and SchemaTransformation table  whenever a new service implementation is introduced. The new service implementation can be a part of the CSIP functionalities and\/or introduced by a customer.","Operation tables  include FundamentalObjectInstance table , ServiceImplementationObjectInstance table , and the ObjectInstanceMapping table . Object mappings between FundamentalObjectInstance table  and ServiceImplementationObjectInstance table  are stored in the ObjectInstanceMapping table .","New rows are inserted into the FundamentalObjectInstance table , ServiceImplementationObjectInstance table , and ObjectInstanceMapping table  when new instances occur in the execution of the composite application.","It is to be understood that while the tables illustrated in  are referred to with specific names, other names can be used as well. Depending on the application, one or more tables in  can be added, removed, renamed, modified, replaced, and\/or combined.","Now referring back to . As shown in , the CSIP  includes Message Broker , which is a component responsible for standard publish-subscribe operations.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIGS. 3-8","FIGS. 3-8"],"b":["108","110","111"]},{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 3","FIG. 3","FIG. 3","FIG. 2"],"b":"232"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 4","FIG. 4","FIG. 4","FIG. 1"],"b":"111"},{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 5","FIG. 5","FIG. 5"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 6","FIG. 6"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIGS. 7 and 8","FIG. 7","FIG. 7","FIG. 7"],"b":["108","100"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 8","FIG. 8","FIG. 8"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIGS. 9-12","FIGS. 9-12","FIG. 9","FIG. 9","FIG. 9"],"b":["105","100","108","110","107","100","107"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 10","FIG. 10","FIG. 10"],"b":["108","110","107","100","107"]},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 11","FIG. 11","FIG. 11"],"b":["108","110","107","100","107"]},{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIGS. 12A and 12B","FIG. 12A","FIG. 12B"],"b":["108","100","108","100"]},{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIGS. 13A-D","FIG. 13A","FIG. 2"],"b":"200"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIGS. 14-16","FIGS. 14-16"],"b":["106","100","106","107","108","110"]},{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 14","FIG. 14"],"b":["106","108"]},{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 15","FIG. 15"],"b":["106","108"]},{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 16","FIG. 16"],"b":["106","108"]},"The CSIP described in the present disclosure simplifies multi-tenant composite applications by standardizing the architecture, design patterns, and executable platform for service implementation and integration. This standard platform reduces risk, improves quality, shortens time-to-market, and lowers development and maintenance costs. The CSIP  is not just a set of design patterns; rather it is a platform that implements the design patterns. It is analogous to a relational database management system for service implementation and integration.","Additionally, the CSIP provides executable designs possible for service implementation and integration. This encourages domain design experiments with quick cycle times to improve such solutions. Use of the system can occur in four stages: (a) each domain design; (b) each service implementation; (c) each customer setup; and (d) customer instances that occur during runtime. Automating these makes it much easier to create and run multi-tenant composite applications. This is analogous to database design tools (e.g., ERWin) for service implementation and integration. For example, given two composite applications both use a function provided by the CSIP, neither application needs a specialized or customized version of that function, as the function is a standard CSIP function; to utilize this function for different uses, the SIDSS is configured accordingly. The composite applications have different information stored at the SIDSS, and the information stored at the SIDSS dictates how this function behaves when used by these two different applications.","Moreover, the CSIP provides the basis for solving the traceability problem for composite applications. It explicitly ties the executable code and configurations for service implementation and integration to the business context, conceptual services, logical design, and physical technologies. It makes executable designs possible.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 17","b":["1700","1704","1701","1707","1704","1705","1706","1702","1703","1707","1708","1709","1701","1707","1704","1701","1707"]},"Once the HR domain  is set up, then service implementations for each of the services are listed. For example, SAP and\/or Oracle applications can be used to implement the WFA  and the PAY . Automatic Data Processing as-a-service offerings can be used to implement PAY . Towers Perrin and Hewitt implementations can be used for the HWB . These are examples of populate HR service implementations that can be incorporated within the service ecosystem. It is to be understood these services can be implemented using other types of applications as well. Other users or entities might also have their own service implementations for these services. Finally, individual customers might have custom implementations or contracts with other third-party providers for one or more of WFA, PAY, and HWB.","For each of these service implementations, the ServiceImplementationObjects, their ServiceImplementationObject Schemas, and the XSLT mappings between these schemas and the FundamentalObject Schemas need be specified. For example, when implementing these services, relevant information is entered into the SIDSS database. Given the list of service implementations, each customer identifies their picks for the implementation of each of the services. New service messages for the various customers are automatically routed to the appropriate service implementations of the CSIP, and these messages are automatically processed appropriately. As described above, a user or customer simply identifies the implementation of service functionalities in order to use the CSIP functionalities, as opposed to redefining or customizing these services as commonly used in existing techniques. The parameters and behaviors of the components of the CSIP are standardized, thereby freeing the customer or user from having to create them from scratch for each solution.","Use of the CSIP is illustrated in the following two use cases. The operators are defined above. An arrow (\u2192) indicates an initiating event arising from a source external to the CSIP.","To create a new employee, the following steps are performed:",{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Create Employee"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Capture new Employee information (i.e., EmployeeName,"]},{"entry":[{},"EmployeeAddress)"]},{"entry":[{},"\u2192 WFA oNew EmployeeID = new Employee(EmployeeName,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"EmployeeAddress)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003includes WFA oPublish Employee(EmployeeID, EmployeeName,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"EmployeeAddress)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PAY uSubscribe to uNew Employee(EmployeeID, EmployeeName,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"EmployeeAddress)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HWB uSubscribe to uNew Employee(EmployeeID,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"EmployeeName, EmployeeAddress)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"For example, to create the new employee information, which includes name and address, the external source (e.g., and user) initiates the oNew operation by the WFA, which invokes the oPublish operation by the WFA. To use the oNew operation, the WFA access the oNew operation of the Service Fa\u00e7ade component of the CSIP. The oPublish operation is processed by the Message Broker of the CSIP. The PAY and HWB services needs access to the new employee information, and to do that they utilize the uSubscribe operation of the Message Broker component the uNew operation of the Service Integration component.","To provide another example, the following steps are performed to update information for an existing employee:",{"@attributes":{"id":"p-0080","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Update Employee Address"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Capture updated EmployeeAddress"},{"entry":"\u2192 WFA oChange Employee(EmployeeID, updated EmployeeAddress)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003includes WFA oPublish Employee(EmployeeID, updated"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"EmployeeAddress)"},{"entry":"\u2002PAY uSubscribe to uChange Employee(EmployeeID, updated"},{"entry":"EmployeeAddress)"},{"entry":"Create \u201cNew Account and\/or Change Deposit Allocation\u201d case"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Employee is presented with option to add new Account and\/or"]},{"entry":[{},"Change"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Allocation"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Capture new Account and\/or new Allocation from the Employee"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2192 PAY oNew AccountID = Account(AccountName, BankID,"},{"entry":"AccountRoutingNumber)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2192 PAY oChange updated list of Allocation(EmployeeID,"]},{"entry":[{},"AccountID,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"DepositPercent)"},{"entry":"\u2002HWB uSubscribe to uChange Employee(EmployeeID, updated"},{"entry":"EmployeeAddress)"},{"entry":"Create \u201cUpdate Enrollment Selections\u201d case (e.g., with 30 day timer)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Present Employee updated EligibilityOptions implied by updated"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"EmployeeAddress"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Capture updated EnrollmentSelections from the Employee"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2192 HWB oChange updated list of EnrollmentSelections(EmployeeID,"},{"entry":"OptionID)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Includes HWB oPublish updated list of EnrollmentSelections"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"(EmployeeID, OptionID)"},{"entry":"PAY uSubscribe to uChange updated list of EnrollmentSelections"},{"entry":"(EmployeeID, OptionID)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PAY updates Employee's payroll deductions to reflect updated"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"EnrollmentSelections"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"It is to be appreciated that the CSIP system described in the present disclosure may be implemented using various types of systems.  is a simplified diagram illustrating a computer system that can be used to implement a CSIP system. This diagram is merely an example, which should not unduly limit the scope of the claims herein. One of ordinary skill in the art would recognize other variations, modifications, and alternatives. For example, the computer system in  comprises a computer readable medium (e.g., hard disk, solid state memory, optical drive, etc.) that stores program instructions that can be executed by processors to perform various functions of the CSIP system and SIDSS databases. It is to be appreciated that CSIP systems can be implemented using a network computing device, including but not limited to SOA systems. There can be other embodiments as well.","While the above is a full description of the specific embodiments, various modifications, alternative constructions and equivalents may be used. Therefore, the above description and illustrations should not be taken as limiting the scope of the present invention which is defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 12A and 12B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 13A-D"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 18"}]},"DETDESC":[{},{}]}
