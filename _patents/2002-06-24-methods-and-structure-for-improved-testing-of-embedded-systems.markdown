---
title: Methods and structure for improved testing of embedded systems
abstract: Methods and structure for standardized communication between a test operator, a host system, and an embedded system under test. Test program instructions are designed, written for, and executed on, an embedded system under test in accordance with standard API functions for message exchange. Still further, the invention provides for standards in the user interface to select a desired test, to start the test with defined parameters and to present reply and status information to the test operator. These user interactions are defined in a test configuration language of the present invention and preferably incorporated with the executable image file to define an integral test vehicle file. The present invention thereby reduces test sequence development time by providing standard API functions for message exchange between a host system test application and the system under test and provides for standardized user interaction in a flexible, easily maintained design language.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07385927&OS=07385927&RS=07385927
owner: LSI Logic Corporation
number: 07385927
owner_city: Milpitas
owner_country: US
publication_date: 20020624
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Custom Command and Parameter Definition","Current Status Definition"],"p":["1. Field of the Invention","The invention relates generally to computer assisted, automated testing systems and procedures and more specifically relates to improved methods and structures for automated testing of embedded systems by providing a standardized user interface and API for communications between the embedded system under test, the test operator and an associated automated test host system.","2. Discussion of Related Art","It is critical in the electronic arts, and other technological arts, to verify design and operation of products and systems prior to volume manufacturing and distribution of such products. Further, as products evolve with enhancements and modifications, it is similarly critical to verify design and operation of the products so modified. In one form of testing, the system or product under test is viewed as a \u201cblack box\u201d such that external information or stimuli are provided as inputs to the black box (system under test) and resulting actions or output values are confirmed as proper actions or outputs of the black box in response to appropriately applied stimuli. The internal structure and operation inside the \u201cblack box\u201d are not relevant to such testing.","Such \u201cblack box\u201d of testing is adequate to verify operation of the system in response to numerous expected environmental circumstances and stimuli. However, such black box testing often is insufficient to apply stressful stimuli outside normal expected ranges of operation.","In view of the weaknesses and limitations of black box testing, other forms of testing (sometimes referred to as \u201cwhite box\u201d testing) are useful to more effectively verify operation of the system under test in response to a wider range of stimuli including those associated with conditions generated internal to the system under test. Exemplary of such testing approaches is the automated testing of embedded systems. For example, it is common that intelligent I\/O controller devices inserted within a host system often possess substantial computational and processing power as integrated circuit chips designed within the intelligent I\/O controller. For example, an intelligent I\/O controller may include one or more general-purpose processing devices (i.e., CPUs), one or more special-purpose processors (i.e., I\/O coprocessors), and substantial amounts of memory for storing code to operate the various processors, variables associated with that operation and buffer memory for buffering user data moving into, or out of, the intelligent I\/O controller. To effectively test operation of all of these components often requires that special test programs be designed and loaded into the program memory associated with the intelligent I\/O controller so as to enable the various processors within such an intelligent I\/O controller to perform tests applying internally generated stimuli.","As presently practiced in the art, no standards exist for development, and operation of such embedded test sequences. Rather, individual test engineers often design unique test cases by producing appropriate test code instructions and developing unique host interfaces for communicating parameters of the test and test results between the host system in use by the test operator and the embedded systems under test. Creation of such a unique interface between systems under test and host systems with which a test operator interacts can create confusion in the style of interaction and hence errors in test procedures. Further, such unique design efforts generate duplicative work by multiple engineers each creating unique embedded test interfaces rather than sharing a common, standard interface.","It is evident from the above discussion that a need exists for improved methods and structures for generating, configuring and operating test sequences especially on embedded systems under test.","The present invention solves the above and other problems, thereby advancing the state of the useful arts, by providing methods and associated structure for a common, standardized user interface and programming interface for communications between a test operator, a host system on which the test operator interacts to perform desired tests, and the systems under test. In particular, the present invention includes an application programming interface (API) defining a communications protocol between a system under test and an attached host system on which a test operator using a test application interacts with the system under test. Further, the invention provides for coupling configuration related information associated with the test with the stored program instructions required to perform the particular test. Still further, the present invention allows for integration of user interface information with the stored program instructions used to perform the specific test. These and other features of the present invention reduce the time required for a test engineer to develop a new test by providing standardized interfaces for exchange of information between the test host system and an embedded system under test. The present invention further reduces time required by an engineer to develop a new test by eliminating the need for customized, unique test operator interface code to be developed. Rather, the present invention provides standardized test operator interfaces associated with the test case. Lastly, the present invention also provides for integrating the program instructions associated with performing the test within an embedded system under test with the configuration information and user interface information associated with selecting and performing a desired test sequence. These features also improve the uniformity of test operator interfaces to permit more consistent, less error prone, interactions with human test operators.","While the invention is susceptible to various modifications and alternative forms, a specific embodiment thereof has been shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that it is not intended to limit the invention to the particular form disclosed, but on the contrary, the invention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the invention as defined by the appended claims.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["100","102","150","100","102","102","100","150","150","102","150","102","100","102","100","150","100"]},"IOC  may include one or more general-purpose and or special-purpose processors  providing computational and data processing capabilities within IOC . Exemplary of such a general-purpose processor is any standard CPU. Exemplary of such special-purpose processors are I\/O coprocessors for providing control of associated I\/O peripheral devices and buses (not shown). Processors  execute program instructions preferably stored in program memory . Program memory  may be any form of memory suitable for storage and fetching of program instructions including, for example, ROM, PROM, EPROM, EEPROM, Flash memory, RAM (including standard DRAM or SRAM), etc. In a preferred embodiment, program memory  may be accessible as shared memory for direct access by host system  via a PCI bus  to permit host system  to directly load programmed instructions into IOC .","In addition, IOC  may include read\/write memory  for storage of data and variables manipulated by operation of processors . Read\/write memory  may be any form of memory suitable for storage and manipulation of data and variables including, for example, Flash memory, RAM (including standard DRAM and SRAM), etc. Similar to program memory , read\/write memory  may preferably be accessible as shared memory to a host system  via a PCI bus .","In accordance with the present invention, IOC  preferably includes mailbox  (also referred to herein as \u201cdoorbell\u201d) for purposes of exchange of information with host system . As noted above, program memory  and\/or read\/write memory  may also be adapted as shared memory accessible to host system . Mailbox  may therefore merely represent a designated portion of a larger shared memory component within IOC . Further, those of ordinary skill in the art will readily recognize that mailbox  may be implemented as one or more read\/write registers in accordance with PCI or other bus interface standards. Numerous equivalent implementations will be readily recognized by those of ordinary skill in the art.","Automated test application  is preferably operable on host system  to coordinate operation of test procedures on IOC . Automated test application  may preferably communicate with IOC  using mailbox . Messages are sent from the host system  to the system under test  by the automated test application  to initiate actions and to request status information. Replies to such requests are forwarded by IOC  to host system  through mailbox  for processing by automated test application .","Automated test application  may preferably include a test control and status information exchange element  for controlling operation of test procedures within IOC  and for receiving status information regarding progress and completion of such test procedures from IOC . Automated test application  also may preferably include operator display and response information exchange element  for presenting information to a test operator. The information to be presented may preferably be generated by test procedures operable within IOC . Automated test application  may also preferably include test code and configuration information exchange element  for downloading program instructions and associated configuration information and parameters for performing desired tests sequences. Program instructions that define a test procedure and associated configuration information are also referred to herein as a \u201cvehicle.\u201d The vehicle includes all information needed by IOC  to perform the desired test sequence including programmed instructions and associated configuration information. Elements ,  and  of automated test application  preferably communicate with IOC  via mailbox  and\/or other shared memory structures or other communication media.","In a preferred embodiment, the exchange of information between automated test application  on host system  and IOC  uses a standardized request\/reply message exchange format. In a preferred embodiment, the host system , through test application , initiates a message exchange by generating and transmitting an appropriate request message. The IOC  receives the request message through the mailbox  and processes the request appropriately. Upon completion of the request, a reply message corresponding to the request is generated and returned to the host system  through mailbox . Such a request\/reply messaging format helps simplify the message exchange structure by its synchronous exchange process to thereby avoid problems of deadlock over a shared resource shared by asynchronously operating processes.","An exemplary message exchange protocol useful for such communications is provided further herein below. The functions identified below define an API used for coding of test cases by test engineers. Specific parameter fields and syntax of the function calls are a matter of design choice well known to those of ordinary skill in the art and therefore need not be provided herein. This standard API is independent of the particular system under test on which the test vehicle is to operate. Thus, a test designer may design all tests using a common API for communications with the host system test application. Those of ordinary skill in the art will recognize a variety of equivalent structures and messaging media and protocols to provide for simple, reliable, standardized communications between a host system and a system under test. By adhering to a simple, reliable, standardized messaging protocol, a test engineer need only write program instructions for performing a desired test sequence using the standard message exchange protocol when needed during the test operation and need not design a unique messaging standard for host system interaction by the system under test.","Validation Messaging Interface (VMI)\u2014API","VMI Communication: VMI uses a simple Request\/Reply method of communicating. With minor exceptions as noted, every Request message sent from the host system will have an associated Reply message returned by the IOC. Both Request and Reply messages are transmitted through the mailbox (doorbell) interface.","Simple Doorbell Message: In a preferred embodiment, all messages (Requests and Replies) are integral multiples of 32-bit words in length. However, those of ordinary skill in the art will recognize that any standard, fixed word size or non-fixed size (i.e., multi-bit frame) encoding can be used for purposes of encoding messages to be transmitted through the mailbox. Further, those of ordinary skill in the art will readily recognize a variety of options for encoding of fields within a message. Such selections of fixed words, non-fixed size bit frames and encodings of fields within such messages are well-known matters of design choice for those of ordinary skill in the art. Preferably, more common or frequently used messages are encoded as shorter words or frames. Through described below with respect to fixed 32-bit size words and with specific bit positions for encoding of fields, any word or frame sizes and any particular encoding of fields within a message may be used.","List of Exemplary Simple-Word Doorbell Messages","RESET_IOC_REQUEST","This will be tied onto an interrupt and force a reset of the IOC if sent. No Reply message is generated from this Request.","STOP_TEST_REQUEST","STOP_TEST_REPLY","This will attempt to stop the running of the IOC test vehicle. The Reply message indicates that the test vehicle has stopped.","CURRENT_TEST_STATUS_REQUEST","CURRENT_TEST_STATUS_REPLY","This requests the present status of the test vehicle. The reply message includes a status value that may be dependant on the test that is currently running. A parameter supplied with the request message indicates which of a plurality of standard status values is to be returned. A first status value to be returned is standardized and provides general status of the overall test vehicle. Other standard status values may be requested as indicated by the parameter associated with the request message. These other standard values may be used to return other standard information about the test, such as: bytes transferred, errors received, locations tested and other useful information the vehicle may want to relay to the test application and test operator. The following table lists exemplary standard general status values as bit fields in a 32-bit value.",{"@attributes":{"id":"p-0028","num":"0027"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"CURRENT_TEST_STATUS exemplary status bits."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Bit","Definition"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Bit 0","VMI_CURRENT_STATUS_TEST_COMPLETE"]},{"entry":["Bit 1","VMI_CURRENT_STATUS_TEST_RUNNING"]},{"entry":["Bit 2","VMI_CURRENT_STATUS_TEST_FAIL"]},{"entry":["Bit 3","VMI_CURRENT_STATUS_INIT"]},{"entry":["Bit 4","VMI_CURRENT_STATUS_GOT_RESET"]},{"entry":["Bit 5","VMI_CURRENT_STATUS_NEED_RESOURCES"]},{"entry":["Bit 6","VMI_CURRENT_STATUS_DOORBELL_IN_USE"]},{"entry":["Bit 7","VMI_CURRENT_STATUS_REQUEST_ISSUED"]},{"entry":["Bit 8","VMI_CURRENT_STATUS_REPLY_READY"]},{"entry":["Bit 9","VMI_CURRENT_STATUS_DOORBELL_FAIL"]},{"entry":["Bit 10","VMI_CURRENT_STATUS_STOP_TEST"]},{"entry":["Bit 10-31","Reserved"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Upon receiving the test complete status, the host system (test application) may send a TEST_SENDREPLY_REQUEST to the vehicle (as discussed below) to request more detailed status specific to the particular test vehicle.","VEHICLE_INFO_REQUEST","VEHICLE_INFO_REPLY","This message requests information about the test vehicle. Additional fields in the request message also provide the test vehicle with information about the display window on the host system. The display window as noted above may be a shared memory 2-dimensional array of characters. Information written to the display window by the test vehicle is presented to the test operator's display on the host system. This may be used for supporting the design and debug of the test vehicle or may be used in the actual test operation of the vehicle to inform the operator regarding progress of the test.","The reply message may provide the host system test application with identification information regarding the test vehicle such as a name or identifier of the test and version information regarding the identified test. In addition, fields of the reply message may request that the test application allocate an additional buffer in a shared memory for use by the test vehicle. Additional fields identify the initial values to be stored in such a buffer and identify the preferred word width for access to such an additional buffer. Subsequent messages discussed below exchange information about such an additional buffer.","HOST_MEMORY_BUFFER_POST_REQUEST","HOST_MEMORY_BUFFER_POST_REPLY","This Request Message supplies the test vehicle with the host system memory pointer of data that can be used by the test vehicle. The requested buffer is requested, as noted above, by a portion of the reply message associated with the test vehicle information request. The reply message to this post request message merely completes the message exchange to verify the allocation of the buffer. Such a buffer may then be used by the execution of the test vehicle for any purposes appropriate to that test vehicle.","TEST_START_REQUEST","TEST_START_REPLY","This Request message starts the test vehicle executing with the parameters sent in the parameter fields of the message. The parameter values are supplied by the test operator through user interaction as described further herein below. The test operator supplied values are then passed to the test vehicle as parameters to this start request message. The test vehicle reviews the parameters to determine if the parameters are proper. If the request parameters are proper for the test vehicle, the test will start and an appropriate general status so indicating the start of the test will be returned with the reply. The test will continue to run until a stop test message is sent or until the test vehicle finishes in its proper course. Upon sending this message and receiving a good status, the VMI host should then request and receive test status looking for the vehicle's test complete status bit to be set in the returned status field (as discussed above). This signifies that the test is done and ready to transmit detailed results from the execution of that test in response to a corresponding request message.","TEST_SENDREPLY_REQUEST","TEST_SENDREPLY_REPLY","As noted above, this request is intended to be sent only after the test has completed (as indicated by the test complete status in the current status reply message). This message exchange allows the vehicle to send back detailed information unique to the particular test completion status codes. Each test vehicle may be designed to provide its own detailed status of execution. The reply message here transmits whatever additional detailed status codes are programmed into the test vehicle as fields of the reply message.","The invention also includes a flexible command, status and parameter definition language that permits a test designer to define a wide variety of custom commands, test specific status and test parameters to be supplied by the test operator in starting a selected test vehicle. Parameters of test vehicles may be defined in the definition language. Status information unique to a particular test may also be defined by the language. In addition, entire custom commands may be defined by the language. The definitions includes types and ranges of permissible values as well as user interface information to prompt the test operator for desired values.","Parameter Definition","This flexible language is provided as a portion of the test vehicle and defines the user interface to be provided to the test operator to supply requisite parameters to start a test. The command language includes a number of keywords or directive to define the nature of each parameter to be supplied to the test vehicle on startup. Fields of the keywords to define a parameter also include text used to present readable options to the test operator to select desired values for the various parameters of the test vehicle.","The \u201cparameter\u201d keyword allows the test designer or operator to specify different parameters types and use them in the test or in custom tests (defined by the \u201ccommand\u201d keyword discussed below). Fields of the parameter keyword allow the parameter to be defined as a specific type such as a numeric value or a list of enumerated values for the user to chose from (i.e., a list of options). Additional fields of the parameter keyword provide default values for the parameter to assume if the operator does not specify a value for the parameter when prompted to do so. Still other fields allow a test designer to provide textual help messages to describe, for example, the usage of the parameter or permissible values for the parameter.","An exemplary syntax for specifying such custom parameters is provided below. Words in boldface represent keywords. Words in italics represent variable names that the user may choose. Words within \u201c<\u201d,\u201c>\u201d represent that the writer may choose one of those values.",{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"PARAMETER PARAM1_NAME {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TYPE=U32;"]},{"entry":[{},"DEFAULT=<default_value>;"]},{"entry":[{},"BOUNDARY_LOW=<lowest_value>;"]},{"entry":[{},"BOUNDARY_HIGH=<highest_value>;"]},{"entry":[{},"DESCRIPTION=\u201cDescription of the parameter.\u201d;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"PARAMETER PARAM1_NAME{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TYPE=CUSTOM;"]},{"entry":[{},"CHOICES={Name_for_Choice 1, Name_for Choice2,"]},{"entry":[{},"Name_for_Choice3, . . . };"]},{"entry":[{},"CHOICES_VALUE={val_for_Choice 1, val_for_Choice2,"]},{"entry":[{},"val_for_Choice3, . . . };"]},{"entry":[{},"CHOICE_DESCRIPTION={"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u201cDescription of Choice1\u201d,"]},{"entry":[{},"\u201cDescription of Choice2\u201d,"]},{"entry":[{},"\u201cDescription of Choice3\u201d,"]},{"entry":[{},". . . ,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"DEFAULT=<default_choice_number>;"]},{"entry":[{},"DESCRIPTION=\u201cDescription of the parameter.\u201d;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The VMI Host will send periodic request messages to elicit present status of the test vehicle. The vehicle will reply to these test status messages with standard status indicators preferably specified as bits in a bit field as discussed above. However, each test vehicle may also provide numerous other \u201cstandard\u201d status values in response to a test application request message for current status. The particular status values unique to each test may be defined in the language of the present invention including user interface information for presentation of the unique status in an appropriate readable form.","The following is an example of a status definition syntax used in the definition language of the invention. As above, words in boldface represent keywords. Words in italics represent variable names that the user may choose. Words within \u201c<\u201d,\u201c>\u201d represent that the writer may choose one of those values.",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CURRENT_STATUS CURRENT_STATUS_NAME {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"INDEX=< 1-31 >;"]},{"entry":[{},"UNITS=\u201cunits\u201d;"]},{"entry":[{},"DESCRIPTION=\u201cDescription of the current status.\u201d;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"The test vehicle may also return extended status as discussed above in reply to an appropriate request message from the test application. As above for the \u201cstandard\u201d status definition, the language of the present invention allows the extended status information to be presented to a test operator in a readable format. The extended status reply message returns a selected status of a plurality of extended status indicators. Each possible status indicator is identified by a reply name entry of the definition language. Each names status indicator includes descriptive text to inform the test operator of the nature of the extended status indicator and a type entry to identify the type of values to be returned for the status indicator. The type entry, in turn includes descriptive text for each possible value of the named extended reply status indicator. An example of a reply definition follows: As above, words in boldface represent keywords. Words in italics represent variable names that the user may choose. Words within \u201c<\u201d,\u201c>\u201d represent that the writer may choose one of those values.",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"REPLY_STATUS REPLY_STATUS_NAME {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"REPLY_TYPE=<REPLY_STATUS_TYPE>"]},{"entry":[{},"DESCRIPTION=\u201cDescription of reply status field.\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"REPLY_STATUS_TYPE REPLY_STATUS_TYPE0 {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DESCRIPTION= {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u201cStatus Good\u201d,"},{"entry":"\u201cDescription of Error_1\u201d,"},{"entry":"\u201cDescription of Error_2\u201d,"},{"entry":". . ."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"};"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The VMI Vehicle preferably also allows the test application and system under test to understand which parameters correspond to the main command (i.e., the test start request message) or for additional custom commands (optional). At least one command is preferably defined per vehicle in the definition language of the invention\u2014namely the test start command transmitted as a test start request message. The command definition indicates the list of parameters to be supplied with the command by reference to the parameter definitions discussed above. The command directive for a defined command also includes the status information defined by the above status and reply directive. Additional commands may be defined for a particular test vehicle with associated parameters, status and replies (if any) as defined by appropriate directives discussed above. An example of a standard command definition (i.e., test start) and a custom command definition follows. As above, words in boldface represent keywords. Words in italics represent variable names that the user may choose. Words within \u201c<\u201d,\u201c>\u201d represent that the writer may choose one of those values.",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"COMMAND COMMAND_NAME0 {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"FUNCTION=VMI_FUNCTION_COMMAND;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"PARAM_LIST= {"},{"entry":"CMD_PARAM_NAME0,"},{"entry":"CMD_PARAM_NAME1,"},{"entry":"CMD_PARAM_NAME2,"},{"entry":". . .,"},{"entry":"CMD_PARAM_NAME<MAX_COMMAND_PARAMETERS - 1>,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"};"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"REPLY_STATUS_LIST= {"},{"entry":"REPLY_STATUS_NAME0,"},{"entry":"REPLY_STATUS_NAME1,"},{"entry":"REPLY_STATUS_NAME2,"},{"entry":". . .,"},{"entry":"REPLY_STATUS_NAME<MAX_REPLY_STATUSES - 1>,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"};"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"CURRENT_STATUS_LIST= {"},{"entry":"CURRENT_STATUS_NAME0,"},{"entry":"CURRENT_STATUS_NAME1,"},{"entry":"CURRENT_STATUS_NAME2,"},{"entry":". . .,"},{"entry":"CURRENT_STATUS_NAME<MAX_CURRENT_STATUSES - 1>,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"DESCRIPTION=\u201cDescription of this command.\u201d;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"COMMAND COMMAND_NAME1 {"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FUNCTION=VMI_FUNCTION_CUSTOM_COMMAND1;"]},{"entry":[{},"PARAM_LIST={ CMD_PARAM_NAME1,"]},{"entry":[{},"CMD_PARAM_NAME2 };"]},{"entry":[{},"DESCRIPTION=\u201cDescription of the command 1.\u201d;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"PARAMETER CMD_PARAM_NAME0 {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TYPE=U32"]},{"entry":[{},"DEFAULT=0\u00d740"]},{"entry":[{},"DESCRIPTION=\u201cDescription of the command parameter name0.\u201d;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"PARAMETER CMD_PARAM_NAME1 {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TYPE=U32;"]},{"entry":[{},"DEFAULT=<0-4G>;"]},{"entry":[{},"BOUNDARY_LOW=<0-4G>;"]},{"entry":[{},"BOUNDARY_HIGH=<0-4G>;"]},{"entry":[{},"DESCRIPTION=\u201cDescription of the command parameter1.\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"PARAMETER CMD_PARAM_NAME2 {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TYPE=CUSTOM;"]},{"entry":[{},"CHOICES={ Choice 1, Choice2, Choice3, . . . };"]},{"entry":[{},"CHOICE_DESCRIPTION={"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u201cDescription of Choice1\u201d,"},{"entry":"\u201cDescription of Choice2\u201d,"},{"entry":"\u201cDescription of Choice3\u201d,"},{"entry":". . .,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"DEFAULT=<0 - Number_of_Choices>;"]},{"entry":[{},"DESCRIPTION=\u201cDescription of the command parameter2.\u201d;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"One further directive in the test vehicle defines the type of the vehicle file itself. The image type will be specified by vehicle type directive in the language of the present invention. If the type is \u201cSHARED_RAM\u201d, the test vehicle configuration file will contain the binary image of the vehicle. The VMI Host will load this image into the IOC shared memory and start the execution of the firmware image. In the VMI configuration file, the firmware image will preferably start immediately after the directive string VMI_BINARY_IMAGE and will end at the end of the file. If the test vehicle type is ROM, then the host will assume the firmware image is written to the external flash and the firmware will begin executing after a hard reset.","Those of ordinary skill in the art will recognize that the definition language described above are intended merely as exemplary of a syntax and semantic for such a flexible definition language. Numerous equivalent language constructs may be used in implementing this broad feature of the present invention\u2014namely that the test vehicle file includes configuration information in the form of directive written in a high level definition language.","Further, it will be noted that in the preferred embodiment, the configuration information in the form of definition language directives as above is preferably contained within the file that defines the test vehicle. The binary code image and configuration directives are preferably integrated within the same file structure. This provides the benefit of reducing the possibility that a test vehicle's executable code would be separated from the associated configuration information such that the test would be run with inappropriate configuration information.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 2","b":["102","200"]},"Element  then awaits indication from the IOC that it is ready to perform the loaded test sequence. Such an indication may preferably be generated as a status bit in a shared memory location including, for example, the mailbox used for other communications as described herein below. When the IOC indicates its readiness for proceeding with a test, element  next preferably transmits a vehicle information request. A vehicle information request message, as discussed above, may preferably provide information for the test vehicle to identify memory on the host system accessible to the IOC for purposes of displaying messages to a test operator using the host system. This memory location may preferably be accessed as shared memory within the host system accessible by the IOC. Element  then awaits receipt of the reply message from the IOC in response to the vehicle information request message. The reply may preferably indicate status of the test vehicle.","The vehicle information reply message may optionally indicate that additional buffer memory be allocated in a shared memory of the host system accessible to the IOC for purposes of operating the selected test vehicle. Element  determines whether the reply to the vehicle information request indicates that additional shared memory buffer space on the host system need be allocated for purposes of performing the selected test vehicle. If not, processing continues with element  as described further herein below. If such additional shared buffer space has been requested as indicated in the vehicle information reply message, element  is next operable to transmit a host buffer post request to the IOC providing information regarding the allocated buffer space in host system shared memory. Element  then awaits receipt of a reply to the host buffer post request message.","Element  is next operable to transmit a test start request message from the host system to the IOC indicating that the test vehicle should commence execution of the selected test. Element  then awaits receipt of a reply message to the test start request indicating that the test vehicle has begun execution of the selected test vehicle. In an exemplary preferred embodiment, the method of the present invention may then enter a polling sequence to determine when the selected test vehicle has completed the programmed test sequence. Element  therefore transmits a current status request message from the host system to the IOC requesting current status information regarding operation of the test vehicle within the IOC. Element  then awaits a response to the current status request providing current status information regarding operation of the present test vehicle within the IOC. Element  then determines whether the current status reply message indicates that the test has been completed. If not, processing continues by looping back to element  to transmit a next status request and await an associated status reply.","When element  determines that the present test vehicle has completed execution of the test sequence, element  is preferably operable to transmit a test information request message from the host system to the IOC. Element  then awaits a reply message from the IOC in response to the test information request. The reply message may preferably provide additional test result information indicative of detailed results of the particular completed test vehicle. Element  then presents the provided detailed completion status information received in the test information reply message to the operator. Presentation of such information may include, for example, display of the information for the test operator to review and\/or logging of the information in a test log file for subsequent postprocessing.","As noted above, in a preferred exemplary embodiment, the IOC (system under test) is provided with a two-dimensional array of characters in shared memory of the host system such that the IOC may write test related messages in the two-dimensional array of characters in shared memory. An asynchronous process is preferably operable within the host system to monitor this shared two-dimensional array for any changes in the text and to present such changed information to the test operator on a display screen and\/or in a log file. Element  is therefore operable to await a change in the test data presently stored in the shared two-dimensional array. When a change is detected by element , element  is then operable to display the current test data for presentation to the test operator on an operator display and\/or log file. Element  is then operable to transmit any data updated by user input in the two-dimensional array to the IOC for processing thereof. Data changed by user input in the two-dimensional array is indicative of a user response to a test vehicle message and therefore needs to be communicated to the test vehicle for appropriate processing.","As presented herein above, methods of the present invention are preferably operable on the host system to poll the IOC for status information to determine when events of interest have occurred within the IOC executing the downloaded test vehicle. Alternatively, or in addition to such polling sequences, changes of state within the test vehicle operable on the IOC may generate asynchronous events and corresponding interrupts within the host system. Element  of  represents such processing of an asynchronously received event by the host system from the IOC. Such asynchronous processing of a received event may replace polling sequences described above for detecting, for example, completion of the execution of a test vehicle.","While the invention has been illustrated and described in the drawings and foregoing description, such illustration and description is to be considered as exemplary and not restrictive in character, it being understood that only the preferred embodiment and minor variants thereof have been shown and described and that all changes and modifications that come within the spirit of the invention are desired to be protected."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
