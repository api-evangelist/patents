---
title: Integrated application that contains software modules coupled to a message bus
abstract: A method and system for providing an integrated application that includes software modules coupled to a message bus. The software modules include applications of different degrees of complexity and different number of components, such as management applications, service applications, and other similar applications. A computer system receives a first input that selects a user interface (UI) to access the integrated application. The selected UI can be a specific UI associated with a software module, or an orchestrator UI that unifies individual styles of the specific UIs. The computer system receives, via the selected UI, a second input to access a destination module among the software modules. If the selected UI is the orchestrator UI, the second input is forwarded to the destination module via the message bus. If the selected UI is a specific UI, the second input is sent to the destination module via the selected specific UI.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600131&OS=09600131&RS=09600131
owner: Red Hat, Inc.
number: 09600131
owner_city: Raleigh
owner_country: US
publication_date: 20110531
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["Embodiments of the present invention relate to a computer system, and more specifically, to integration of software modules that are coupled to a message bus.","Today's enterprises are increasingly dependent on software applications acquired from various sources for their daily operations. As the complexity of the applications grows, it becomes increasingly difficult to coordinate their operations. These applications may be implemented in different programming languages, provide different interfaces, and organize their data according to different schemas. Additionally, each application may be maintained and supported by a different support team (e.g., a different vendor) that has little knowledge of the technical details of the other applications used by an enterprise.","One approach for integrating the applications is to rewrite the code so that the applications can communicate with each other, share the same interface and use the same schema. However, rewriting the code can be time consuming and error prone. Further, after the code is rewritten, the original support teams for the applications may no longer be able to support the rewritten applications.","Described herein is a method and system for providing an integrated application that includes software modules coupled to a message bus. In one embodiment, a computer system receives a first input that selects a user interface (UI) to access the integrated application. The selected UI is one of specific UIs that are associated with the software modules, or an orchestrator UI that unifies individual styles of the specific UIs. The computer system receives, via the selected UI, a second input to access a destination module among the software modules. If the selected UI is the orchestrator UI, the second input is forwarded to the destination module via the message bus. If the selected UI is one of the specific UIs, the second input is sent to the destination module via the selected specific UI. The computer system then performs operations of the destination module.","In the description herein, the term \u201csoftware module\u201d refers to applications of different degrees of complexity and different number of components, such as management applications, service applications, and other similar applications. Embodiments of the present invention allow software modules that are independently developed to be integrated via a message bus and presented to an external entity (e.g., a user, client or agent) as one single application (\u201cintegrated application\u201d). The integrated application can be presented as one single application via an orchestrator UI and an application programming interface (API) gateway. The software modules communicate with the orchestrator UI, the API gateway and with each other via the message bus. The data of the software modules are stored in a database and organized in schemas that may be different from each other. When needed, a user may choose to use a UI that is specifically associated with a software module instead of the orchestrator UI.","According to embodiments of the present invention, the integrated application includes services and applications as the software modules. Each application can be a self-sufficient, standalone software product that can function in the absence of other software modules in the integrated application. These services and applications can be acquired from different software vendors and can be used as parts of the integrated application without having to be rewritten.","In the following description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["100","100","110","160","110","110","161","162","161","162","100","100"]},"In one embodiment, the network  that couples the computer system  and the client machines  may be a private network (e.g., a local area network (LAN), a wide area network (WAN), intranet, or a similar private network) or a public network (e.g., the Internet).","In one embodiment, the computer system  may include one or more server machines. Each server machine may include one or more processors , input\/output (I\/O) devices  and memory . The computer system  runs an operating system (OS)  for allocating system resources to processes that run on the computer system . The computer system  is also coupled to a data storage . The data storage  may include flash drives, optical and\/or magnetic drives, mass storage devices (e.g., disks), or other storage devices. In one embodiment, the data storage  stores a database  that is used by the computer system .","According to one embodiment of the present invention, the computer system  runs an integrated application  that contains a number of software modules . The software modules  may be developed independently by different software vendors, implemented in different programming languages (e.g., Python, Perl, Java, C, or other programming languages), and\/or organize data according to different schemas. An enterprise that acquires the software modules  may wish to present the software modules  to its users as a single, integrated application. At the same time, the enterprise may also wish to keep the functionalities of the software modules  separate to allow developers of each software module  to continue maintaining and improving the individual software module  without having knowledge of the other software modules . As the need of the enterprise changes, an administrator of the enterprise may add or remove any of the software modules  without having to change the existing\/remaining software modules .","In one embodiment, the integrated application  presents a unified user interface (UI) to a user  of the computer system  through a display . The user  may be a system administrator or a consumer of the services provided by integrated application . In one embodiment, the integrated application  allows the user  to choose between the unified UI and a specific UI provided by a software module . The integrated application  also provides an application programming interface (API) gateway for the client application  and agent  to access the software modules . Additionally, the data of the integrated application  is organized according to the schemas of the software modules , where different software modules  can have different schemas. In one embodiment, the computer system  stores the data in the database .",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2","b":["140","100","140","220","220","230","230","220","220","220","230","220","220","221","221","221","221","221","220","221","240","240","221","220","221","240","185","242","242","140","220","140","220","140","140","220","220","230","220"]},"In one embodiment, the second set of software modules A-C (collectively referred to as software modules ) include applications that provide specific services, which usually have a lower degree of complexity and fewer software components than the software modules . Each software modules  does not have an UI specifically associated with it. Instead, the software modules  are accessible through an API gateway , which accepts API calls from the client applications  and the agents . Although each software module  in the second set may provide a different API, the API gateway  integrates the different APIs to present a unified API to external entities (e.g., the client applications  and the agents ). The API calls may be made in accordance with protocols such as Advanced Message Queuing Protocol (AMPQ), JavaScript Object Notation Remote Procedure Call (JSON RPC), Extensible Markup Language RPC (XML-RPC), Representation State Transfer (REST), or similar message exchange protocols. Examples of the second set of software modules  include service applications, such as the content service A, the provisioning service (e.g., Cobbler) B, the entitlement proxy service C, and other service applications. Each software module  provides a specific service. For example, the content service manages packages or software contents, and the provisioning service manages records and information of a computer system. Like the software modules , each software module  can also be a self-sufficient, standalone software product and can function independently of other software modules  and . When integrated together, the software modules  can complement each other to provide a superset of the services of each individual software module.","In one embodiment, the first set of software modules  may also be accessible by the client applications  and the agents  through the API gateway  using the API calls.","In one embodiment, the software modules ,  in the integrated application  are coupled to a message bus  that transmits messages among the software modules , , the orchestrator UI  and the API gateway . Messages on the message bus  may be sent according to a standard protocol such as the AMPQ or any other message exchange protocols. In one embodiment, when the orchestrator UI  or the API gateway  receives an input that is intended for one of the software modules  or , the orchestrator UI  or the API gateway  examines the request to determine its destination and then forwards the request to the destination software module via the message bus . In an alternative embodiment, when the orchestrator UI  or the API gateway  receives an input, the orchestrator UI  or the API gateway  publishes the information in the input on the message bus , which allows the intended recipient(s) to pull the information from the message bus . In an embodiment where an input is sent by the user  directly to one of the UIs , the UI  can forward the input to the associated software module  without routing through the message bus . After the destination module (which is one of the software modules  and ) receives the input, the destination module may forward the input to one or more of the software modules ,  via the message bus .","In one embodiment, each of the software modules ,  includes a mechanism which enables the software module ,  to communicate with the message bus . This mechanism can be part of the software modules , . Alternatively, this mechanism can be provided by pluggable software that is incorporated into the software modules , .","In one embodiment, the software modules ,  organize their data according to schemas  that may be different from one another. The data is stored in the database . The database  keeps data using different schemas  separate.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3","FIG. 1","FIG. 2","FIG. 5","FIG. 1","FIG. 2"],"b":["300","140","300","500","300","100"]},"Referring to , in one embodiment, the method  begins when the computer system , upon receiving a login request, authenticates a user who requests to access the integrated application  (block ). In one embodiment, the computer system  provides a single sign-on (SSO) mechanism. With the SSO, a user submits sign-in credentials only once and, if successfully authenticated, the user can gain access to all of the software modules in the integrated application . The SSO mechanism may be based on Kerberos, smart card, or a one-time password (OTP) token. Once the user is successfully authenticated, the computer system  presents the user with options for the user to select a UI (block ). In one embodiment, the options may be presented to the user via the display , which lists the orchestrator UI  and all of the UIs  of  that are associated with the first set of software modules . The user may choose a UI among the orchestrator UI  and the UIs . The computer system  receives, via the selected UI, an input from the user to access one of the software modules (\u201cdestination module\u201d), which can be any one of the software modules  and  (block ). In one embodiment, if the selected UI is the orchestrator UI , the orchestrator UI  determines the destination module based on information in the input (block ). The orchestrator UI  then forwards the input to the destination module via the message bus  (block ). In an alternative embodiment, the orchestrator UI  may publish the input on the message bus , and the destination module can pull the input from the message bus . If the selected UI is one of the UIs  provided by the software modules , the selected UI can directly send the input to its associated software module without routing through the message bus  (block ). After the destination module receives the input, the computer system  performs the operations of the destination module according to the input (block ). The destination module may further interact with other software modules via the message bus . The destination module may also access its data in the database  using the schema specific to the destination module (block ).",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 4","FIG. 1","FIG. 2","FIG. 5","FIG. 1","FIG. 2"],"b":["400","140","250","400","500","400","100"]},"Referring to , in one embodiment, the method  begins when the computer system , upon receiving an access request, validates a requester (e.g., the client application  or the agent ) that requests access to the integrated application  (block ). The techniques for validating a remote client application or agent are known and the details for the validation are omitted herein. After the requester is validated, the computer system  receives an API call, via the API gateway , from the requester to access one of the software modules in the integrated application  (block ). In one embodiment, the API gateway  determines the destination module based on information in the API call (block ). The API gateway  then forwards the request to the destination module via the message bus  (block ). In an alternative embodiment, the API gateway  may publish the request on the message bus , and the destination module can pull the request from the message bus . After the destination module receives the request, the computer system  performs the operations of the destination module (block ). The destination module may further interact with other software modules via the message bus . The destination module may also access its data in the database  using the schema specific to the destination module (block ).",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 5","b":"500"},"The exemplary computer system  includes a processing device , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM), Rambus DRAM (RDRAM), or other variations of memory devices, a static memory  (e.g., flash memory, static random access memory (SRAM), or other variations of static memory), and a secondary memory  (e.g., a data storage device), which communicate with each other via a bus .","The processing device  represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device  may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, processor implementing other instruction sets, or processors implementing a combination of instruction sets. The processing device  may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device  is configured to execute integration logic  for performing the operations and steps discussed herein.","The computer system  may further include a network interface device . The computer system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The secondary memory  may include a machine-readable storage medium (or more specifically a non-transitory computer readable storage medium ) on which is stored one or more sets of instructions (e.g., integration logic ) embodying any one or more of the methodologies or functions described herein (e.g., the integrated application  of ). The integration logic  may also reside, completely or at least partially, within the main memory  and\/or within the processing device  during execution thereof by the computer system ; the main memory  and the processing device  also constituting machine-readable storage media. The integration logic  may further be transmitted or received over a network  via the network interface device .","The non-transitory computer readable storage medium  may also be used to store the integration logic  persistently. While the non-transitory computer readable storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201cnon-transitory computer readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cnon-transitory computer readable storage medium\u201d shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine that causes the machine to perform any one or more of the methodologies of the present invention. The term \u201cnon-transitory computer readable storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.","The computer system  may additionally include integration modules  for implementing the functionalities of the integrated application  of . The module , components and other features described herein (for example in relation to ) can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS, FPGAs, DSPs or similar devices. In addition, the module  can be implemented as firmware or functional circuitry within hardware devices. Further, the module  can be implemented in any combination of hardware devices and software components.","Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201csending\u201d, \u201creceiving\u201d, \u201cforwarding\u201d, \u201cperforming\u201d, or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer system selectively programmed by a computer program stored in the computer system. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic disk storage media, optical storage media, flash memory devices, other type of machine-accessible storage media, or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.","It is to be understood that the above description is intended to be illustrative, and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Although the present invention has been described with reference to specific exemplary embodiments, it will be recognized that the invention is not limited to the embodiments described, but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly, the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the invention should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, and can be more fully understood with reference to the following detailed description when considered in connection with the figures in which:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
