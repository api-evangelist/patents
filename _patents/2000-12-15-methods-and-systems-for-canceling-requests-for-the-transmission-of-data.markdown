---
title: Methods and systems for canceling requests for the transmission of data
abstract: Methods are provided that allow high-level protocol drivers to cancel transmission requests that have been sent to low-level protocol drivers. Transmission requests are assigned cancel identifiers. Because one original request may be divided into several packets for transmission, the same cancel identifier is given to every packet that derives from the original request. High-level protocol drivers can request cancellation of all pending requests whose cancel identifiers match the one indicated. Cancel identifiers generated by different high-level protocol drivers are mutually distinct so one protocol driver cannot inadvertently cancel requests made by another. The protocol driver may divide its requests into logical flows and assign the same cancel identifier to all requests within one flow. Then, the protocol driver may cancel all pending requests within one flow while allowing requests in other flows to proceed to transmission. An application can use these methods to cancel requests sent to high-level protocol drivers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06931645&OS=06931645&RS=06931645
owner: Microsoft Corporation
number: 06931645
owner_city: Redmond
owner_country: US
publication_date: 20001215
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Overview of a General-purpose Computer","An Exemplary Environment for Network Operations","Transmission Data Flows Within the Exemplary Network Environment","Canceling a Pending Data Transmission Request","Conclusion"],"p":["The present invention relates generally to computer communications, and, more particularly, to canceling pending requests for the transmission of data.","In many implementations of data communications, an application that transmits data does not place its data directly onto the communications link provided by its host computer. Instead, the application passes the data in packets to a high-level protocol driver which manipulates the packets and then passes them down to a low-level driver. The low-level protocol driver may also manipulate the packets before passing them on to a hardware driver which delivers the data to the communications link. This stack of protocol drivers adds delays between when the application requests that data be transmitted and when the data are actually put onto the communications link. Another possible source of transmission delays is the traffic shaper. This protocol driver component tries to ensure that each packet of data is transmitted in a manner that meets the Quality of Service (QoS) requirements of that packet. For example, some packets are only useful if they are transmitted before a specific time. The traffic shaper may allow these time-critical packets to be transmitted while delaying the transmission of any waiting non-time-critical packets. This may delay the transmission of the non-time-critical packets by a second or more.","It may happen during these transmission delays, that the application or a high-level protocol driver decides to cancel the transmission of one or more data packets. For instance, the application may have been shut down or the computer may be rebooting. In these cases, there is no reason to try to transmit the packets. Some operating systems do not provide a mechanism allowing the cancellation of packets pending transmission, however, and before the application can be shut down or the computer rebooted, the pending packets must proceed through the stack of protocol drivers and be sent out onto the communications link. Waiting for the packets to be transmitted causes unnecessary delays just at a time when delays may be unacceptable.","Microsoft's \u201cWINDOWS\u201d operating system provides a mechanism for canceling pending packets. When an application requests that data be transmitted, the request is captured in an Input\/Output Request Packet (IRP) which is sent to a high-level protocol driver. The high-level protocol driver translates the IRP into one or more Network Driver Interface Specification (NDIS) packets which are sent down to a low-level protocol driver. While pending IRPs may be canceled, NDIS packets are not currently cancelable. Thus, a request to cancel an IRP waits until all the NDIS packets generated from the IRP complete their transmit processing. This leads to the same result as above: time is spent waiting for the completion of the transmit processing of now meaningless packets.","Some operating systems allow an application or a high-level protocol driver to cancel the transmission of all pending packets. While that may be sufficient in some cases, its inflexibility is inappropriate to other circumstances. For example, an application may be transmitting several logical packet flows across a network. The flows may have different QoS requirements or be sent to different locations. Faced with network congestion, the application or a high-level protocol driver may decide that it is necessary to cancel the transmission of packets in one flow in order to allow packets in the other flows to proceed. Current mechanisms, however, do not allow the selective cancellation of pending transmit packets.","The above problems and shortcomings, and others, are addressed by the present invention, which can be understood by referring to the specification, drawings, and claims. The invention allows a high-level protocol driver to cancel data transmission requests (which may be in the form of, e.g., packets or IRPs) that have been sent to a low-level protocol driver. Transmission requests are assigned cancel identifiers. Because one original transmission request may be divided into several packets for transmission, the invention associates the same cancel identifier with every packet that derives from the original transmission request. The high-level protocol driver can request the cancellation of all pending requests whose cancel identifiers match the one indicated. The invention also ensures that cancel identifiers generated by different high-level protocol drivers are mutually distinct so that one high-level protocol driver cannot inadvertently cancel requests made by another.","The high-level protocol driver may choose to not give each transmission request a distinct cancel identifier. It may instead divide the transmission requests into logical flows and assign the same cancel identifier to all requests within one flow. Then, the protocol driver may cancel all pending requests within one flow while allowing requests in other flows to proceed to transmission.","The invention may also be practiced by an application to cancel transmission requests sent to a high-level protocol driver.","Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. The following description is based on possible embodiments of the invention and should not be taken as limiting the invention in any way.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general-purpose or special-purpose computing system environments or configurations. Examples of well-known computing systems, environments, and configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and distributed computing environments that include any of the above systems or devices.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc., that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general-purpose computing device in the form of a computer . Components of the computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory  to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include the Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus, also known as Mezzanine bus.","The computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer  and include volatile\/nonvolatile and removable\/non-removable media. By way of example, and not limitation, computer-readable media may include computer storage media and communications media. Computer storage media include volatile\/nonvolatile and removable\/non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Computer storage media include, but are not limited to, random-access memory (RAM), read-only memory (ROM), EEPROM, flash memory, or other memory technology, CD-ROM, digital versatile disks (DVDs), or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage, or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer . Communications media typically embody computer-readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communications media include wired media such as a wired network and a direct-wired connection and wireless media such as acoustic, RF, and infrared media. Combinations of the any of the above should also be included within the scope of computer-readable media.","The system memory  includes computer storage media in the form of volatile and nonvolatile memory such as ROM  and RAM . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and program modules that are immediately accessible to or presently being operated on by processing unit . By way of example, and not limitation,  illustrates an operating system , application programs , other program modules , and program data . Often, the operating system  offers services to application programs  by way of one or more application programming interfaces (APIs) (not shown). Because the operating system  incorporates these services, developers of application programs  need not redevelop code to use the services. Examples of APIs provided by operating systems such as Microsoft's \u201cWINDOWS\u201d are well-known in the art.","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from and writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from and writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from and writes to a removable, nonvolatile optical disk  such as a CD ROM. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, DVDs, digital video tape, solid state RAM, and solid state ROM. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer-readable instructions, data structures, program modules, and other data for the computer . In , for example, hard disk drive  is illustrated as storing an operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from the operating system , application programs , other program modules , and program data . The operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball, or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, and scanner. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port, or a Universal Serial Bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device, or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in FIG. . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a Network Interface Card (NIC) or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or via another appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in a remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In the description that follows, the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computers, unless indicated otherwise. As such, it will be understood that such acts and operations, which are at times referred to as being computer-executed, include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains them at locations in the memory system of the computer, which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data are maintained are physical locations of the memory that have particular properties defined by the format of the data. However, while the invention is being described in the foregoing context, it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operations described hereinafter may also be implemented in hardware.","The invention concerns canceling data packets while they are pending transmission. It will typically be practiced in the context of a multi-level hierarchy of drivers, where the drivers work together to service input\/output (I\/O) requests. This section and the next set the stage for a discussion of packet cancellation by providing a quick overview of how a computer may provide multi-level I\/O services in a networking environment. While this discussion is at times quite specific, the invention is not limited by the details of the discussed embodiment. In particular, the invention need not be practiced with a LAN connection nor in a networking environment.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 2"],"b":["110","1"]},"When a computer user runs an application program , it sometimes becomes necessary for that program to communicate with a remote computer  or with remote services. Rather than force every application program to include communications software, the computer  provides communications services to the application program by means of routines in a dynamic linked library (DLL) . The application program calls a DLL routine to perform a communications request and the DLL routine in turn calls on the services of the Input\/Output manager (IOM) .","The IOM  provides I\/O functionality to DLL routines. It coordinates all of the disparate elements in the hierarchy of drivers shown in FIG. . As part of this coordination, the IOM creates an I\/O Request Packet (IRP) that captures the details of the application program's transmission request. The IOM routes the request from driver to driver as each driver performs its part in servicing the request. The IOM also contains common routines usable by many of the drivers. Consolidating this code into the IOM makes the drivers less complex and more compact.","The TCP\/IP driver  is one example of a high-level protocol driver. It communicates with its peer TCP\/IP driver on the remote computer  to coordinate and control aspects of networking such as ensuring that data are transmitted correctly, in order, and without gaps or errors. The TCP\/IP driver does not communicate directly with the remote computer but calls routines in the Network Driver Interface Specification (NDIS) Library  to perform its requests.","The NDIS Library  provides standard interfaces that isolate its intermediate drivers  and miniport drivers  from the details of the operating system. This allows the drivers to be ported from one operating system to another. The NDIS library performs as much common processing as possible to allow its drivers to be small and to focus on the specific aspects of one networking topology. In general, NDIS provides to high-level protocol drivers a standard view of networking while giving the computer  the flexibility to use many different networking topologies, possibly at the same time.","NDIS intermediate drivers  process data before sending them to other drivers, such as to NDIS miniport drivers . NDIS intermediate drivers are not used in every communications task, but they can serve important functions including filtering, traffic shaping, implementing specialized protocols, etc.","An NDIS miniport driver  translates its input, I\/O requests for a generic type of port, into commands more suited to the topology of the interface it supports. In the example of , the miniport driver converts generic I\/O requests into LAN commands.","The Hardware Abstraction Layer  provides a bridge between logical I\/O functions and the implementation details of particular hardware platforms, such as a particular manufacturer's LAN NIC . It provides NDIS miniports  with a standard interface to hardware resources.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 3A","FIG. 2"]},"Note that as the data transmission request passes down the hierarchy of drivers, it is first encapsulated in an IRP (Step ) and then becomes an NDIS packet (Step ). That transformation reflects this particular embodiment. In some embodiments, the IRP itself can be passed from driver to driver for processing.","At several stages in the processing, the request is queued (Steps , , and ). Generally, the request is not processed until it reaches the head of the queue (Steps , , and ), that is to say, until all previous requests have been processed. Time spent in these queues constitutes a large part of the delay between when the application program  requests the transmission and when the data are actually put onto the LAN .","Drivers do not wait while the drivers below them process the request. Instead, after sending the request down for further processing, they indicate to processes higher in the hierarchy that the request is in progress (Steps , , , and ) and then go on to other work. The higher-level processes use these indications to track the progress of the request. When the request is completely processed, a separate indication is sent up the driver hierarchy. One mechanism for indicating the completion of a transmission request is explained below with reference to FIG. B.","In many cases, the services of the NDIS intermediate driver  are not necessary. Steps  and  are then omitted and, in Step , the TCP\/IP driver  passes the NDIS packet directly to the NDIS (LAN) miniport driver .","As the request works its way down the driver hierarchy, it may be processed in many ways. That processing is not pertinent to the present invention so this discussion ignores it.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3B","FIG. 2","FIG. 3A","FIG. 3B"],"b":["171","10","2","210","170","4","204","202","5","135"]},"The discussion so far follows the usual case in which an application program's request for the transmission of data is processed until the data are transmitted and the application program is informed of that fact. Sometimes, however, after the application program makes the data transmission request (Step  in ) but before the data are actually transmitted (Step ), a need may arise to cancel the pending request. For example, the application may terminate unexpectedly or the computer system may be rebooting.","Methods existing prior to the instant invention allow for canceling IRPs pending transmission. However, these methods do not allow for canceling the NDIS packet that results from the IRP (Step  in FIG. A). Therefore, the TCP\/IP driver  must wait until that NDIS packet is processed by the processes below the TCP\/IP driver. The TCP\/IP driver waits until it receives notification that processing of the NDIS packet is complete (Step  of FIG. B). Only then can it remove the IRP from its queue and pass to the IOM the indication that the IRP cancellation is complete. This waiting may occupy a significant amount of time, depending upon the length of the queues in the NDIS intermediate and miniport drivers and on the speed of the transmission link.","The present invention shortens these cancellation delays by enabling high-level protocol drivers (or applications) to cancel all requests stemming from the original data transmission request. In the embodiment of , the invention allows the TCP\/IP driver  to cancel the NDIS packets resulting from the IRP so that the TCP\/IP driver need not wait for the NDIS packets to be completely processed by the lower-level drivers.","According to one embodiment of the invention, at Step  of , and before passing down the NDIS packet, the TCP\/IP driver  creates a cancel identifier and puts that cancel identifier into the header of the NDIS packet. The cancel identifier accompanies the NDIS packet through all its processing in the hierarchical driver stack. If the TCP\/IP driver is called upon to cancel the transmission of the IRP, it requests that all lower-level drivers cancel the NDIS packets that resulted from the IRP. In the cancellation request, the TCP\/IP driver identifies which NDIS packets to cancel by the cancel identifier it earlier stored in the NDIS packet's header.","The computer  may be running several high-level protocol drivers in parallel. If the ranges assigned to cancel identifiers by different drivers overlap, then one driver could inadvertently cancel the transmission requests made by another driver. One embodiment of the present invention avoids this problem by dividing the cancel identifier into two parts. By making the first part specific to one particular driver, this embodiment prevents the cancel identifiers assigned by one driver from overlapping with those assigned by another driver.","The second part of the cancel identifier (which may be the only part in embodiments on computers that run only one high-level driver) may be chosen to be unique within the context of the driver. However, that need not be the case. The driver may instead use cancel identifiers to divide traffic into logical entities. For example, a driver may assign the same cancel identifier to all packets within one data flow. If, because of congestion or other problems, the driver decides to cancel transmission of packets within that packet flow to allocate more resources to other packet flows, it can do so by making one cancellation request.","Another aspect of the invention's utility may be seen in a common scenario that complicates the straightforward transmission case illustrated in .  starts off identically to  with the application program  requesting a data transmission. When the request gets down to the TCP\/IP driver , however, (Step ), the TCP\/IP driver decides to process the IRP by means of multiple NDIS packets, rather than the single NDIS packet of FIG. A. There are several possible reasons why the TCP\/IP driver may decide to do this. As one example, the amount of data in the IRP may be too great to fit into one packet on the LAN . The multiple NDIS packets are passed one by one down the stack to be processed separately by the lower-level protocol drivers.  follows the notifications of the packets' transmissions as they are sent one by one up the hierarchical stack. Note that in Step , the TCP\/IP driver can only complete the processing of the original IRP when it has received transmission notifications for all of the NDIS packets that came from that IRP.","In the multiple NDIS packet scenario of , the TCP\/IP driver  assigns the same cancel identifier to every NDIS packet resulting from the IRP. If the TCP\/IP driver needs to cancel the IRP, it simply tells the drivers below it in the hierarchy to cancel all NDIS packets whose cancel identifiers match the one it passes down. At each level, the driver removes the matching NDIS packet from its queue (if it has one), repeats the cancellation request to the driver below it, and sends to the driver above it an indication for each NDIS packet that the transmission request is complete with status CANCELED.","The invention may be practiced by an application program rather than, or in addition to, a high-level driver. The application program assigns cancel identifiers to its data transmission requests. The drivers in the hierarchy, however, may choose to divide the original transmission request into subrequests (see discussion accompanying ) and associate the cancel identifier of the original request with all of its subsidiary requests. The application can then cancel its request in the same manner as described above for the high-level driver: it passes down the cancel identifier and each driver in the stack cancels its work related to that cancel identifier.","Regardless of whether the cancellation request originates at the application program or at a high-level driver, it may not always be possible to fully comply with the request. Data may have already been transmitted onto the LAN  or have been sent to a NIC that does not act on cancellation requests. The cancellation request is processed in a best effort, rather than as an assured success, manner.","Because cancellation requests based on a cancellation identifier clear all the queues of work associated with the cancellation identifier, they return much more quickly than cancellation requests whose processing includes waiting for queues to empty. This speed is of great importance if the application program is shutting down or if the computer is rebooting.","All of the references cited herein, including patents, patent applications, and publications, are hereby incorporated in their entireties by reference.","In view of the many possible embodiments to which the principles of this invention may be applied, it should be recognized that the embodiments described herein with respect to the drawing figures are meant to be illustrative only and should not be taken as limiting the scope of invention. The invention may also be practiced on non-\u201cWINDOWS\u201d machines and on any kind of communications link, including wireless networks. Therefore, the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["While the appended claims set forth the features of the present invention with particularity, the invention, together with its objects and advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings of which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3B","FIG. 3A"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4B","b":"4"}]},"DETDESC":[{},{}]}
