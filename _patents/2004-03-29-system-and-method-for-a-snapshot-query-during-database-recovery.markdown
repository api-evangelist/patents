---
title: System and method for a snapshot query during database recovery
abstract: A method of performing a snapshot query in a database undergoing recovery allows access to the database during rollback or undo operations. The method includes allowing the query to detect whether a redo lock is present on a data item and if so, waiting until subsequent rollback operations release the lock. If another user has placed an exclusive lock on a data item of the database, the query may continue by reading a version of the data item form the version store. In an embodiment where a mirror database is used for recovery, the constant redo operations have an associated version store. Upon failover to the mirror database, queries may begin during the undo phase of recovery by allowing a query to read the version store of redo operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07146386&OS=07146386&RS=07146386
owner: Microsoft Corporation
number: 07146386
owner_city: Redmond
owner_country: US
publication_date: 20040329
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["REFERENCE TO CO-PENDING APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","EXEMPLARY EMBODIMENTS OF THE INVENTION"],"p":["The following reference has some subject matter in common with the current application:","Co-Pending patent application Ser. No. 10\/602,283 filed Jun. 23, 2003 entitled \u201cRESYNCHRONIZATION OF MULTIPLE COPIES OF A DATABASE AFTER A DIVERGENCE IN TRANSACTION HISTORY\u201d commonly assigned with the present application.","This invention relates in general to the field of computer databases. More particularly, this invention relates to access to a database during a recovery operation.","Modern business may rely heavily on databases to keep vital records such as clients, services, suppliers, billing records, and inventory. When database hardware or software fails, it becomes imperative to recover the database so that operations with the database may continue. In very large databases, recovery may be lengthy and costly. Generally, access to the database may be limited during recovery because existing techniques do not provide a method for access during the recovery phase.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1","b":["100","105","110","115","105","105"]},"The redo phase  of the database recovery timeline  compares the log file entries with the database. If a transaction in the log file is represented in the database, the next entry in the transaction log file is examined. If the transaction present in the log file is not in the database, the redo phase re-applies the transaction log to the database file to record the transaction as part of the recovery process. However, the re-entered transaction may be incomplete because it was never committed into the database. Transactions that are already in the database and do not need to be re-entered may also be incomplete.","By selectively removing the uncommitted transactions from the database, the database reconstruction may result in a transactionally consistent form after the recovery operation. The undo phase  of database recovery rolls back the transaction from the database in those instances where the log file has no record of a commitment of the transaction. Consequently, uncommitted transactions are removed so that the database recovery may result in a consistent set of committed transactions.","Some prior art systems which use the database recovery scheme of  cannot allow access to the database until after the undo phase . That is, prior art systems can not allow access to the database until all recovery operations are completed. Prior art systems only allow access after point D in the recovery timeline .","Thus, there is a need for an architecture and method that may allow for an earlier entry for accessibility into a database recovery timeline. The present invention addresses the aforementioned needs and solves them with additional advantages as expressed herein.","The invention includes a method of allowing access to database during recovery of the database. In one embodiment, a method includes reading a log file and determining which transactions require entry into the database as part of recovery operation. The incomplete transactions assert a redo lock which remains asserted until the rollback (undo) operation completes. According to an aspect of the invention, access to the database may occur during the undo phase of recovery provided the query tests the locks of the data items requested in the query. If the data items have redo locks, then the query waits until those data item have their redo locks removed. Other locks, such as regular write type locks, do not delay access as the query may read a previous version of the queried data.","In another embodiment of the invention, access may be given to a query while a database is in the recovery phase if unentered transactions generate versions as they are entered. During the rollback phase of recovery, access by a query may be achieved by giving the query access to the version store. Version store is a place to store versions of database items. Commit time on queried data items may be checked to direct the query to retrieve a locked data item from a version store. Otherwise, a queried item may be retrieved from the database.","In one embodiment of the invention, a mirror database system used for recovery may grant access to the mirror database during rollback recovery operations due to the versioning aspect of the invention where locked data item have a previous version of the data available for a query. This aspect of early access to the database provides availability, concurrency and other advantages as expressed herein.","Overview","An embodiment of the invention allows access to a database during the undo phase of recovery. Referring to , prior art systems allow recovery only after point D in time. Some embodiments of the present invention realize accessibility for queries at point C in time. This earlier accessibility is possible through the use of a technique employing row level versioning and row level locking. Using this technique, users requiring access to the database during the undo phase may read transactionally consistent data from the database by noting the lock on the data and taking data from either the database or from a version store as appropriate.","In another embodiment, aspects of the invention allow a method to gain access to a mirror database during failover operations. In this embodiment, a mirror database is used to provide a database recovery mechanism upon failure of a primary database. Access to the mirror database during recovery is facilitated by using the version store aspects of the invention. This method allows a user to gain access to the mirror database earlier in time that prior art databases.","After discussing an exemplary configuration using , exemplary methods and embodiments will be discussed in conjunction with . An exemplary computing environment is also discussed in conjunction with .","An advancement in the recovery of databases using a mirror database recovery scheme is disclosed in co-pending patent application Ser. No. 10\/602,283 filed Jun. 23, 2003 entitled \u201cRESYNCHRONIZATION OF MULTIPLE COPIES OF A DATABASE AFTER A DIVERGENCE IN TRANSACTION HISTORY\u201d commonly assigned with the present application. This commonly assigned patent application discloses a method and system for accommodating a mirror database and is hereby incorporated by reference in its entirety.","In one embodiment of the present invention, row level versioning is advantageously used to enable a database snapshot or view of the database at a point in time. Also referred to as snapshot isolation, row level versioning enhances database application concurrency by keeping multiple row versions in a user table so that the readers and writers of the information do not block one another. Row level versioning provides for the storing of a version of database values as operations on the database, such as accesses by others for update or maintenance purposes, such that a version of the data may be read by others. A snapshot query refers to a read only query that returns a consistent set of changes made by other transactions in the database up to a particular point in time. A snapshot query allows a transactional consistent view of the database so that a query against the database is possible without blocking update transactions.","In some prior art systems, row level locks may be asserted against a database table if a transaction changes a row. An example of one type of lock would be a lock asserted by a redo operation against a row. A second example of a lock may a lock asserted by any other user transaction that has gained access to the row. Normally, the row lock is maintained in an asserted state until the transaction is complete and the writer commits.","Row level versioning allows queries to be performed against a database that would normally not allow such access. Row level versioning allows the reader of a database to get to the previously committed value of the row, so concurrency may be increased in the system. It is therefore advantageous for the database system to keep old versions of a row when it is updated. Row level versioning provides the reader of the transaction with a transaction consistent snapshot of the database thus permitting meaningful queries. The snapshot of the database may be defined as the state of the database if all active transactions other than the reader are ignored when the reader transaction starts.","Versioning works by allowing the update transaction keep the old versions of the data so that a snapshot of the database can be constructed from the old versions. When a record in a table or index is updated, the new record may be stamped with the transaction sequence number of the transaction that is doing the update. The old version of record may be stored in a version store, and the new record may contain a pointer to the old record in the version store. Old records in the version store may contain pointers to even older versions. All the old versions of a particular record may be chained in a linked list. By following the link pointer a couple of times to reach the right version for a particular snapshot of the database, the correct version may be reached.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["200","205","210","215","240","220","230","240"]},"The components of  may be active in the undo phase of recovery where uncommitted transactions are being rolled back to produce a transaction consistent database state. The logging and recovery manager  performs the redo as well as undo operations on the database . The logging and recovery manager receives transaction information including both committed and uncommitted transactions from the data base log file .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":["300","310","315","320"]},"The last phase of a recovery scheme removes those transactions that are uncommitted in order to produce a transaction consistent database. In a SQL environment, the removal of the selected uncommitted transactions may be accomplished via one or more undo instructions. Step  of  indicates that the undo phase may begin after the redo phase is completed. Normally, this undo phase of recovery would have to be completed before access is granted to the database for any read or write operation. However, the present invention advantageously may permit access to the database at the beginning of the undo phase (step ).","Access to the database during the undo phase may be initiated by a query to a row, page, index, table or other structure within in the database. This query may operate under locking based isolation level or snapshot based isolation level. Isolation level is an attribute of the query that dictates the concurrency behavior of the query and may result in different result sets for the query when there are concurrent updates affecting the result sets. Step  tests if the query is a snapshot based query or a locking based query. If the query is a locking based query, the desired query data may be read from the database (step ) when it is available. However, if the query is a snapshot based query, then the step  may be entered. It should be noted that step  may be omitted if the query is known to be a snapshot based query a-priori.","The steps \u2013 in  depicts an exemplary flow involving a query operation under snapshot based isolation levels. Using an aspect of the invention, row level locks and database versioning, discussed above, may be used in association with the present method. In processing the query, the method  checks for the presence of exclusive or write type locks (step ) that may be placed on database elements. If no exclusive or write type lock is present, a read of the available relevant data may be performed (step ). Note that a shared or read type lock may be present. In that instance, the step  decision fails and allows a test and read from step .","Step  involves a test as to which source of data is to be read. In the snapshot query environment, data is preferably both time consistent as well as transaction consistent. The implied test compares the start time of the query with the commit time of the data being accessed. If the start time is before the commit time, the version store of the data should be used. Otherwise, the data is committed, is transactionally and time consistent and the data may be safely read from the database. Step  may thus include a read from either the database or a version store of a database value depending on the state of consistency of the data. If data is read from the version store, the right version is chosen among several committed versions depending on the state of consistency of the data.","If a write type lock is present, the lock may be tested for lock type (step ). If the lock is acquired during the redo phase, then the data protected by the lock may not have a version store value to read. The access may then be delayed by waiting (step ) for the redo lock to be released during the undo phase of the database recovery. Once the redo lock is released, a test and data read may occur (step ). Once again, step  may include a read from either the database or a version store of a database value. If a redo type lock is not asserted, then an immediate data read may be performed (step ). This data read allows an access to continue despite the presence of some types of locks on the row, page, table or index of the database. An example of some types of lock would be an exclusive (write type) lock asserted by another user or query. Such an exclusive lock prevents multiple users or queries from accessing the same data simultaneously. It is worth noticing that there could be multiple users or queries waiting for the release of the redo lock, and among those users, the ones that will perform version read (also known as operating under snapshot based isolation levels) have priority over those that will need to acquire shared locks in order to access data. The later types of users are known as operating under locking based isolations levels.","In another embodiment of the invention, aspects of the invention may be advantageously used in conjunction with a mirror database. A mirror database may be used to serve as a backup database in the event of a failure in the primary database.  depicts a system  where a primary database  has a corresponding mirror database  for high-availability purposes. An aspect of the system  is the primary database log  is constantly being shipped to the mirror database site such that a shipped log file  may update the mirror database  to reflect the transactions of the primary database .","It is an aspect of the system  of  that the mirror database  is performing constant redo operations to add in the transactions received by the shipped file log . While in the redo phase, the mirror database  is also constantly acquiring appropriate locks on the rows, pages, tables and indexes of updated database elements. If, in such a system, versioning is applied such that a version store is used to store versions of the transaction data as it is being updated, then other aspects of the present invention may be applied.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 5","FIG. 5"],"b":["500","510","520","530","520","550","540","560","550"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 6","b":["600","600","610","620","625"]},"At this point, the method  may permit access to the database () by virtue of the versioning aspects of the invention. The access may be a query against the database. The method tests (step ) if the query operates under the snapshot based isolation levels. If isolation is snapshot based, a test and read from the version store or the database may be performed (step ). Notice that the step , test and read from version store or database, is similar to that performed in step  of . As before, the test and read may read from either the database or the version store depending on the time and transaction consistency of the desired data. Returning to , step  may be accomplished because the redo process (step ) created a version of the data as it was conducting the unexecuted transactions from the log file. If isolation is locking based, the database itself may safely be used (step ) to obtain the needed data for the query after shared locks are granted to the query.","It should be noted that the type of lock (i.e. whether it was obtained by the REDO process) may be unnecessary to test in the method . It is noted that the redo process (step ) generated versions of the data as described above. It is also noted that transactions that changed data also generated versions of data such that any rows, pages, tables or indexes locked by uncommitted transactions have version store data to provide a snapshot query with information needed for read access.","Exemplary Computing Device",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 7"},"Although not required, embodiments of the invention can also be implemented via an operating system, for use by a developer of services for a device or object, and\/or included within application software. Software may be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that various embodiments of the invention may be practiced with other computer configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, appliances, lights, environmental control elements, minicomputers, mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network\/bus or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices and client nodes may in turn behave as server nodes.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 7","b":["700","700","700","700"]},"With reference to , an exemplary system for implementing an embodiment of the invention includes a general purpose computing device in the form of a computer system . Components of computer system  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer system  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer system  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, Random Access Memory (RAM), Read Only Memory (ROM), Electrically Erasable Programmable Read Only Memory (BEPROM), flash memory or other memory technology, Compact Disk Read Only Memory (CDROM), compact disc-rewritable (CDRW), digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer system . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer system , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer system  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM, CDRW, DVD, or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer system . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter-commands and information into the computer system  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory (not shown). In addition to monitor , computer systems may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer system  may operate in a networked or distributed environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer system , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks\/buses. Such networking environments are commonplace in homes, offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer system  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer system  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer system , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web-enabled interface for applications and computing devices, making computing activities increasingly Web browser or network-oriented.","For example, MICROSOFT\u00ae's .NET\u2122 platform, available from Microsoft Corporation, includes servers, building-block services, such as Web-based data storage, and downloadable device software. While exemplary embodiments herein are described in connection with software residing on a computing device, one or more portions of an embodiment of the invention may also be implemented via an operating system, application programming interface (API) or a \u201cmiddle man\u201d object between any of a coprocessor, a display device and a requesting object, such that operation may be performed by, supported in or accessed via all of .NET\u2122's languages and services, and in other distributed computing frameworks as well.","As mentioned above, while exemplary embodiments of the invention have been described in connection with various computing devices and network architectures, the underlying concepts may be applied to any computing device or system in which it is desirable to attain access to databases during the undo phase of recovery. Thus, the methods and systems described in connection with embodiments of the present invention may be applied to a variety of applications and devices. While exemplary programming languages, names and examples are chosen herein as representative of various choices, these languages, names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same, similar or equivalent systems and methods achieved by embodiments of the invention.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize an embodiment of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","While aspects of the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. Furthermore, it should be emphasized that a variety of computer platforms, including handheld device operating systems and other application specific operating systems are contemplated, especially as the number of wireless networked devices continues to proliferate. Therefore, the claimed invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of preferred embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating embodiments of the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
