---
title: Service and APIs for remote volume-based block storage
abstract: Methods, apparatus, and computer-accessible storage media for providing a volume-based block storage service and application programming interfaces (APIs) to the service. A block storage service and block storage service APIs may allow processes (applications or appliances) on the service client network to leverage remote, volume-based block storage provided by the service provider. The APIs may provide a standard interface to volume-based block storage operations on a remote data store. The service provider, the service clients, and/or third parties may develop various applications and/or appliances that may, for example, be instantiated in service clients' local networks and that leverage the block storage service via the APIs to create and manage volumes and snapshots on the remote data store and to upload and download data from the volumes and snapshots on the remote data store.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09635132&OS=09635132&RS=09635132
owner: Amazon Technologies, Inc.
number: 09635132
owner_city: Reno
owner_country: US
publication_date: 20111215
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION OF EMBODIMENTS","CONCLUSION"],"p":["Many companies and other organizations operate computer networks that interconnect numerous computing systems to support their operations, such as with the computing systems being co-located (e.g., as part of a local network) or instead located in multiple distinct geographical locations (e.g., connected via one or more private or public intermediate networks). For example, data centers housing significant numbers of interconnected computing systems have become commonplace, such as private data centers that are operated by and on behalf of a single organization, and public data centers that are operated by entities as businesses to provide computing resources to customers. Some public data center operators provide network access, power, and secure installation facilities for hardware owned by various customers, while other public data center operators provide \u201cfull service\u201d facilities that also include hardware resources made available for use by their customers. However, as the scale and scope of typical data centers has increased, the tasks of provisioning, administering, and managing the physical computing resources have become increasingly complicated.","The advent of virtualization technologies for commodity hardware has provided benefits with respect to managing large-scale computing resources for many customers with diverse needs, allowing various computing resources to be efficiently and securely shared by multiple customers. For example, virtualization technologies may allow a single physical computing machine to be shared among multiple users by providing each user with one or more virtual machines hosted by the single physical computing machine, with each such virtual machine being a software simulation acting as a distinct logical computing system that provides users with the illusion that they are the sole operators and administrators of a given hardware computing resource, while also providing application isolation and security among the various virtual machines. Furthermore, some virtualization technologies are capable of providing virtual resources that span two or more physical resources, such as a single virtual machine with multiple virtual processors that spans multiple distinct physical computing systems.","As another example, virtualization technologies may allow data storage hardware to be shared among multiple customers by providing each customer with access to a virtualized data store which may be distributed across multiple data storage devices, with each such virtualized data store acting as a distinct logical data store that provides the customer with the illusion that they are the sole operator and administrator of the data storage resources.","Web Services","The conventional Web model allows clients to access Web resources (e.g., applications, services, and data) via an HTTP client program, such as a Web browser. A technology referred to as Web services has been developed to provide programmatic access to Web resources. Web services may be used to provide programmatic access to Web resources including technology platforms (e.g., applications and services) and data (e.g., product catalogs and other databases) hosted on Web-connected computers such as Web server systems via a Web service interface. Generally speaking, a Web service interface may be configured to provide a standard, cross-platform API (Application Programming Interface) for communication between a client requesting some service to be performed and the service provider. In some implementations, a Web service interface may be configured to support the exchange of documents or messages including information describing the service request and response to that request. Such documents, or messages, may be exchanged using standardized Web protocols, such as the Hypertext Transfer Protocol (HTTP), for example, and may be formatted in a platform-independent data format, such as eXtensible Markup Language (XML), for example.","While embodiments are described herein by way of example for several embodiments and illustrative drawings, those skilled in the art will recognize that embodiments are not limited to the embodiments or drawings described. It should be understood, that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application, the word \u201cmay\u201d is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). Similarly, the words \u201cinclude,\u201d \u201cincluding,\u201d and \u201cincludes\u201d mean including, but not limited to.","Various embodiments of methods, apparatus, and computer-accessible storage media for providing a service for remote, volume-based block storage and application programming interfaces (APIs) to the service are described. Embodiments of a block storage service and APIs to the block storage service are described herein in the context of a service provider that provides, over an intermediate network such as the Internet, a remote, volume-based block storage as a remote data store to clients of the service provider (referred to herein as service clients). The block storage service and APIs may be implemented on one or more devices on the service provider network and may act as an interface between various processes in the service clients' data centers and the remote data store. The APIs to the block storage service may provide a standard interface to volume-based block storage operations to be performed on the remote data store. The service provider, the service clients, and\/or third parties may develop and provide various applications and\/or appliances that may, for example, be instantiated in service clients' local networks and that leverage the block storage service via the APIs to create and manage volumes and snapshots on the remote data store provided by the service provider and to upload and download data from the volumes and snapshots on the remote data store.","Embodiments of the block storage service and APIs may, for example, enable entities such as third party storage device providers to develop cloud technology-backed block devices, for example Storage Area Network (SAN) storage devices and Network-Attached Storage (NAS) devices, that upload data to and download data from \u201ccloud\u201d storage provided by the service provider. The block storage service and APIs also standardize the interface to the block-based cloud storage, which may enable the exchange of data with various storage technologies provided by the service provider and other storage device providers, and which may, for example, promote interoperability among backup and disaster recovery scenarios.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["110","100","114","150","150","150","100","150","150","100","150"]},"As an example of remote data storage functions that may be provided by service provider , block-level storage volumes may be created in data store , and snapshots of volumes in data store  or, alternatively, snapshots of volumes in local storage on the service client's network , may be created. A snapshot may be viewed as an immutable, point-in-time capture of a volume. The ability to create volumes in data store  for a service client may allow, for example, the data store  to be used as a primary data store for the service client's data. The ability to take snapshots of volumes in a service client's local storage on a network  may allow, for example, the data store  to be used as backup or shadowing storage for the service client's primary data store on the service client's local storage. Note that, in both cases, service client data may be sent from a client network  to the service provider  network for storing in the data store , and service client data may also be retrieved from the remote data store  and returned to a client network .","The service provider  may store the service clients' data in the data store  according to block storage technology. In at least some embodiments, 4 MB (four megabyte) blocks may be used in the data store , but other sizes of blocks (e.g., 1 MB) may instead be used. The data store  may be implemented on or across several or many storage devices or systems on the service provider  network. A service client's volume data  and\/or snapshot data  may be spread across two or more of the physical storage devices or systems. The storage devices may be, but are not necessarily, multi-tenant devices that are shared with other service clients. However, from the perspective of the users and processes on a client network , the respective service client's data may be presented as virtual volumes or files. Note that the data of other service clients that are also stored on the data store  are generally not visible to or accessible by the users and processes of the service client.","In at least some embodiments, manifests  may be used to track the volume data  and snapshot data  of the service clients on the data store . When a volume is created on data store , a manifest  for the volume is created. A volume manifest  may include volume information such as a service client identifier (e.g., an account identifier (ID)), a volume identifier (volume ID) unique to this volume, timestamps, and so on. A volume manifest  also includes entries that map chunks of volume data to locations in the data store . Each entry in the manifest  may also include a field that indicates the creator\/owner of the respective chunk, which will typically but not always be an account identifier of the service client that owns this volume. In at least some embodiments, when a block of data for a given volume  is received, for example from a client network  of a service client corresponding to the volume, one or more chunks of the block may be stored to one or more locations in the data store . For each of these one or more locations, an entry is made in the volume manifest  that maps the respective chunk to the storage location. For example, a volume block of 4 MB may be received. If the block size of the data store is 1 MB, the volume block may be broken up into 1 MB chunks. Each chunk from the block may then be stored to a different location in the data store  (the locations may or may not be contiguous). For each chunk, an entry is made in the volume manifest  that maps the respective chunk to the storage location in data store .","Volumes and their corresponding volume manifests  are mutable. However, snapshots and their corresponding snapshot manifests  are immutable. A snapshot may be viewed as an immutable, point-in-time capture of a volume. The volume may be one of the volumes on data store  or, alternatively, a volume on a service client's local storage on a client network . When a snapshot of a volume is taken, a snapshot manifest  is created. A snapshot may thus be viewed as encompassing both the snapshot data  on the data store  and a snapshot manifest  that records the locations of the snapshot data  within the data store . The snapshot manifest  is essentially a representation of a given volume at the point in time that the snapshot of the volume was taken. A snapshot manifest  may include snapshot information, for example a snapshot identifier (ID) unique to this snapshot, information about the volume for which the snapshot was taken, an identifier for the service client that corresponds to the snapshot (e.g., an account ID), timestamps, and so on. A snapshot manifest  also includes entries that map chunks of the respective volume to object locations (the snapshot data ) in the data store . Each entry may also include a field that indicates the creator\/owner of the respective chunk. Volume manifests and snapshot manifests may thus be similar; however, while volume manifests are mutable, snapshot manifests are immutable.","In at least some embodiments, when a point-in-time snapshot of a volume on data store  is taken, the snapshot data  is not copied to another location but is instead made immutable within the volume. Alternatively, when or after a point-in-time snapshot of a volume is taken, the snapshot data  may be copied from the volume to new locations in the data store . When taking a snapshot of a volume on a client network , point-in-time data may be uploaded from the volume on the client network  to the data store .","A snapshot may, for example, be used as a basis to create a new volume or to restore a volume. For example, a new volume may be created on data store  from a snapshot, using the snapshot manifest  to locate the data for the new volume. As another example, a volume may be created or restored\/recovered on a client network  from a snapshot on data store  according to the snapshot manifest .","In at least some embodiments, service provider  may also provide hardware virtualization  technology that enables the creation of \u201cvirtual\u201d machine image instances  for service clients on hardware provided by the service provider . This hardware may be, but is not necessarily, multi-tenant hardware. That is, a service client's machine images may be instantiated on multi-tenant devices that are shared with other service clients. For a given service client, one or more machine image instances  may be attached to volumes on data store  and\/or instantiated or \u201cbooted\u201d from volumes (which may be referred to as boot images) maintained by the storage service  on data store . After a machine image instance  is originally attached to or booted from a volume on data store , the machine image instance  may be modified. These modifications may be reflected in the corresponding volume on data store . The service provider  may periodically or aperiodically create a differential snapshot of a machine image instance , for example at the service client's request, by taking a point-in-time snapshot of the corresponding volume on data store . Note that an initial snapshot may be created for a machine image instance  when the instance is created, with a new, differential snapshot created periodically or aperiodically thereafter. In turn, a machine image instance  may be created or recovered from a snapshot, for example by creating a volume on data store  from the snapshot and attaching a machine image instance  to the volume or booting a machine image instance  from the volume. For example, if a machine image instance  needs to be recovered or copied, a point-in-time version of the machine image may be obtained from a differential snapshot of the volume corresponding to the machine image instance .","Storage Gateway Appliance Technology","To provide an interface to the remote data store  for service customers, the service provider  may provide storage gateway appliance technology in which a storage gateway appliance on a client network  acts as a data target (e.g., iSCSI target) for processes on the client network. From the perspective of the processes, the storage gateway appliance appears as a data target on the local network. In at least some embodiments, the storage gateway appliance internally implements functionality to communicate, via secure proxy connections managed by a gateway control plane, with an interface to the data store  on the service provider  network to provide the block-based volume and snapshot functionality described above. The client (e.g., a network administrator) indirectly configures and manages operations of the storage gateway appliance via a console process on the service provider  network.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["110","114","110","154","150","150","114","110"]},"A storage gateway  on a service client's network may be configured as a cached gateway that provides an interface to and local cache for primary storage on data store  provided remotely by the service provider  and\/or as a shadowing gateway that shadows primary storage implemented on a local data store  to remote storage on data store  provided by the service provider . The storage gateway  may present standard data access interfaces to the customer's applications at the front-end of the gateway appliance, convert the data accesses into storage service requests at the back-end of the gateway appliance, and transfer the data over an intermediate network to the service provider  network according to a storage service interface. The data access interfaces exposed by the storage gateway  to processes  on the client network  may include block storage protocols (e.g., iSCSI, GNBD (Global Network Block Device), etc.), file storage protocols (e.g., NFS (Network File Storage), CIFS (Common Internet File System), etc.), and\/or object storage protocols (e.g., REST (Representational State Transfer)).","In an example embodiment, a cached gateway  may be though of as an on-premise block-based appliance that leverages on-premise (local) storage  for most frequent accessed data and remote storage  provided by the service provider  for essentially infinite total capacity. A cached gateway  may appear as a data interface target (e.g., an iSCSI target) operating within the client network , for example the cached gateway  may appear on the client network  as a storage array. The cached gateway  may, for example, expose logical unit numbers (LUNs), e.g., block-based storage devices such as hard disks, to processes  executing on devices within the client network . The processes  in turn may initiate data sessions (e.g., SCSI sessions) with LUNs and send data commands (e.g., SCSI commands) to the cached gateway .","In an example embodiment, a shadowing gateway  acts as a \u201cbump in the wire\u201d between a client's applications and the client's local data store  to provide shadowing of the client's write data (e.g., iSCSI writes) to remote storage  provided by the storage service . The local data store  serves as the primary data store for the client process(es)  on client network , in contrast to a cached gateway implementation where remote data store  serves as the primary data store. The shadowing gateway  exposes one or more data ports (e.g., iSCSI ports) to the client process(es)  on the client network . The client process(es)  on client network  may then read from and write to the local data store  via the storage gateway  data port(s). A client process  may be any hardware, software, and\/or combination thereof that exists on the client network  and that can connect to and communicate with the storage gateway  via the data protocol of the gateway's data ports (e.g., the iSCSI protocol). Read requests from the client processes  may be passed directly to the local data store  without further interference or processing by shadowing gateway , and the requested data may be passed directly from local data store  to the client processes . Write requests directed to the local data store  are also passed to the local data store  by shadowing gateway . However, in addition to passing the write requests to the local data store , the storage gateway  may shadow the new or updated data indicated by the write requests to the remote data store .","Embodiments of the storage gateway  may be implemented according to a security model that provides data protection for the service client as well as protection against misuse and unauthorized use (e.g., pirating) of the storage gateway  by the service client or by third parties. The security model may include an activation process initiated by the gateway  to register with the service provider  and associate the gateway  with a client account; the gateway  is provided with security credentials that are used in subsequent communications with the service provider  network. The security model may also include establishing secure connections to external processes, for example processes of the service provider  via proxies provided by a gateway control plane  on the service provider  network. The gateway  initiates connections; the external processes do not initiate connections. The security model may also include the service client managing the gateway  through the service provider  via a console process  at the service provider  network. For example, a network administrator, via a network administrator process  on client network , may communicate with a console process  to view volumes and snapshots, create volumes, take snapshots, and create volumes from snapshots. In addition, a network administrator, via a network administrator process  on client network , may communicate with a console process  to manage the service client's machine image instances  provided by hardware virtualization  technology on service provider  network.","Block Storage Service and APIs to the Block Storage Service","While the storage gateway appliance technology described above enables the clients of the service provider  to utilize the remote, volume-based block storage provided on the remote data store , the technology limits the clients to the functionality that is provided by the storage gateway  appliance. In the client network , the storage gateway  appears as a data target (e.g., an iSCSI target) to the client processes . On the backend, the storage gateway  interfaces with the data store  via a secure proxy connection provided by gateway control . The service client (e.g., a network administrator) indirectly configures and manages the storage gateway appliance via a console process  on the service provider  network. However, this configuration and management is limited to the functionality that is provided by the storage gateway  appliance.","Embodiments of a block storage service and application programming interfaces (APIs) to the block storage service are described that allow the service provider, the service clients, and\/or third parties to develop and provide various applications and\/or appliances that may, for example, be instantiated in service clients' local networks and that leverage the block storage service via the APIs to create and manage volumes on the remote data store provided by the service provider. Embodiments of the block storage service and APIs may, for example, enable various entities such as third party storage device providers to develop cloud technology-backed block devices, for example Storage Area Network (SAN) storage devices and Network-Attached Storage (NAS) devices, that upload data to and download data from \u201ccloud\u201d storage provided by the service provider. The block storage service and APIs also standardize the interface to the block-based cloud storage, which may enable the exchange of data with various storage technologies provided by the service provider and other storage device providers, and which may, for example, promote interoperability among backup and disaster recovery scenarios.","The block storage service and APIs may be implemented on one or more devices on the service provider network, for example on one or more devices in a data plane of the service provider network, and may act as an interface between various processes in the service clients' data centers (or elsewhere in the networking environment) and the remote data store. The APIs to the block storage service may provide a standard interface to volume-based block storage operations on the remote data store that may be leveraged to develop various and diverse applications and\/or appliances that may, for example, be instantiated in service clients' local networks and that leverage the block storage service via the APIs to create and manage volumes and snapshots of volumes on the remote data store provided by the service provider. The block storage service and APIs thus allow the service clients to utilize the remote, volume-based block storage provided on the remote data store in various ways without relying on the storage gateway appliance technology solution. The standard interface provided by the APIs may also enable the sharing of data among various applications or appliances that support the APIs, which may, for example, enable the exchange of data through the remote data store for backup or disaster recovery purposes, or for data exchange purposes.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 3","b":["210","200","250","250","250","200","214","242","240","240","212","240","210","240","242"]},"As examples of remote data storage functions that may be provided to the service clients via the APIs  to the block storage service , a service client may create block-level storage volumes in data store , and may take snapshots of volumes in data store  or, alternatively, snapshots of volumes in local storage on the service client's network . The APIs  may also allow a service client to create volumes either on data store  or on local storage in the service client's local network  from snapshots on data store . In addition, the APIs  may allow the service client to upload blocks of data from a client network  for storing in the remote data store , and to download blocks of data from the remote data store  to the client network . Other functions that may be provided through the APIs  may include, but are not limited to, deleting volumes, deleting snapshots, and reporting on the status of a snapshot in progress.","The block storage service  may store the service clients' data in the data store  according to block storage technology. In at least some embodiments, 4 MB (four megabyte) blocks may be used in the data store , but other sizes of blocks (e.g., 1 MB) may instead be used. The data store  may be implemented on or across several or many storage devices or systems on the service provider  network. A service client's volume data  and\/or snapshot data  may be spread across two or more of the physical storage devices or systems. The storage devices may be, but are not necessarily, multi-tenant devices that are shared with other service clients. However, from the perspective of the users and processes on a client network , the respective service client's data may be presented as virtual volumes or files. Note that the data of other service clients that are also stored on the data store  are generally not visible to or accessible by the users and processes of the service client.","In at least some embodiments, manifests  may be used by the block storage service  to track the volume data  and snapshot data  of the service clients on the data store . When a volume is created on data store  via APIs , a manifest  for the volume is created. A volume manifest  may include volume information such as a service client identifier (e.g., an account identifier (ID)), a volume identifier (volume ID) unique to this volume, timestamps, and so on. A volume manifest  also includes entries that map chunks of volume data to locations in the data store . Each entry in the manifest  may also include a field that indicates the creator\/owner of the respective chunk, which will typically but not always be an account identifier of the service client that owns this volume. In at least some embodiments, when a block of data for a given volume  is received via the APIs , for example from a client network  of a service client that owns the volume, one or more chunks of the block may be stored to one or more locations in the data store . For each of these one or more locations, an entry is made in the volume manifest  that maps the respective chunk to the storage location. For example, a volume block of 4 MB may be received via APIs . If the block size of the data store is 1 MB, the volume block may be broken up into 1 MB chunks. Each chunk from the block may then be stored to a different location in the data store  (the locations may or may not be contiguous). For each chunk, an entry is made in the volume manifest  that maps the respective chunk to the storage location in data store .","Volumes and their corresponding manifests  are mutable. However, snapshots and their corresponding snapshot manifests  are immutable. A snapshot may be viewed as an immutable, point-in-time capture of a volume. The volume may be one of the volumes on data store  or, alternatively, a volume on a service client's local storage on a client network . When a snapshot of a volume is created via the APIs , a snapshot manifest  is created. A snapshot may thus be viewed as encompassing both the snapshot data  on the data store  and a snapshot manifest  that records the locations of the snapshot data  within the data store . The snapshot manifest  is essentially a representation of a given volume at the point in time that the snapshot of the volume was taken. A snapshot manifest  may include snapshot information, for example a snapshot identifier (ID) unique to this snapshot, information about the volume for which the snapshot was taken, an identifier for the service client that created the snapshot (e.g., an account ID), timestamps, and so on. A snapshot manifest  also includes entries that map chunks of the respective volume to object locations (the snapshot data ) in the data store . Each entry may also include a field that indicates the creator\/owner of the respective chunk. Volume manifests and snapshot manifests may thus be similar; however, while volume manifests are mutable, snapshot manifests are immutable.","In at least some embodiments, when a point-in-time snapshot of a volume on data store  is created via the APIs , the snapshot data  is not copied to another location but is instead made immutable within the volume. Alternatively, when or after a point-in-time snapshot of a volume is created via the APIs , the snapshot data  may be copied from the volume to new locations in the data store . When creating a snapshot of a volume on a client network  via the APIs , point-in-time data may be uploaded from the volume on the client network  to the data store  via the APIs .","A snapshot may, for example, be specified via the APIs  to be used as a basis to create a new volume or to restore a volume. For example, a new volume may be created on data store  from a snapshot via the APIs , using the snapshot manifest  to locate the data for the new volume. As another example, a volume may be created or restored\/recovered on a client network  from a snapshot on data store  via the APIs  and according to the snapshot manifest .","In at least some embodiments, service provider  may also provide hardware virtualization  technology that enables service clients to create \u201cvirtual\u201d machine image instances  on hardware provided by the service provider . For a given service client, one or more machine image instances  may be attached to volumes on data store  and\/or instantiated or \u201cbooted\u201d from volumes (which may be referred to as boot images) maintained by the storage service  on data store . After a machine image instance  is originally attached to or booted from a volume on data store , the machine image instance  may be modified. These modifications may be reflected in the corresponding volume on data store . A service client may request, via the APIs , that a differential snapshot of a machine image instance  be taken. The snapshot may then be created by taking a point-in-time snapshot of the corresponding volume on data store . In turn, a machine image instance  may be created or recovered from a snapshot, for example by requesting, via the APIs , the creation of a volume on data store  from the snapshot and attaching a machine image instance  to the volume or booting a machine image instance  from the volume.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 4","b":["250","240","242","210","214","210","240","242","214","210","242","214","240","212","210"]},"The service provider, a service client, and\/or a third party may develop applications or appliances (e.g., local application(s) ) that may, for example, execute on a client network  and that leverage the APIs  to take advantage of the volume-based block storage on remote data store . As examples of remote data storage functions that may be performed by the local application(s)  via the APIs  to the block storage service , a local application  may create block-level storage volumes in data store , and may take snapshots of volumes in data store  or, alternatively, snapshots of volumes in local storage (e.g., local data store ) on the service client's network . A local application  may also create volumes either on data store  or on local storage in the service client's local network  from snapshots on data store  via the APIs . In addition, a local application  may upload blocks of data from a client network  for storing in the remote data store  via the APIs , and download blocks of data from the remote data store  to the client network  via the APIs . Other functions that may be performed by a local application  through the APIs  may include, but are not limited to, deleting volumes, deleting snapshots, and reporting on the status of a snapshot in progress. The local storage (e.g., local data store ) on client network may be any type of storage system or storage device, and may serve as a data source or a data destination.","Note that the API calls and responses between local application(s)  and block storage service APIs  in  are not performed over a secure proxy connection managed by a gateway control plane as in the storage gateway system illustrated in . The communications between local application(s)  and block storage service APIs  may be performed over the public network or, alternatively, over a private channel such as a virtual private network (VPN) connection. Also note that the service client, for example via a network administrator process  on client network , may directly interface with a local application  to manage and control operations of the application , in contrast to the storage gateway system illustrated in  in which the storage gateway is managed and controlled via a console process on the service provider network.","A wide variety of applications  may be developed using the APIs . As an example, a service client or third party may develop a relatively simple application that creates a volume on remote data store  via a \u201ccreate volume\u201d API and copies a data set from a data source (e.g., a tape, a disk, a storage system, etc.) to the volume according to an \u201cupload block\u201d API. As a more complex example, a third party storage device provider may develop cloud technology-backed block devices, for example Storage Area Network (SAN) storage devices and Network-Attached Storage (NAS) devices, that upload data to and download data from \u201ccloud\u201d storage (remote data store ) provided by the service provider  network via the APIs . As indicated by the dotted line from client process(es)  to local application(s)  in , client process(es)  may or may not interface with such a local application . As indicated by the dotted line from client process(es)  to local data store , client process(es)  may or may not access local data store  through other interfaces or methods instead of or in addition to via the local application(s) . Several use cases and other examples of applications  that may leverage the APIs  are described later in this document.","Example APIs to the Block Storage Service","This section describes an example set of functions for the remote, volume-based block storage that may be provided by the block storage service  and exposed to the service clients or other entities via the APIs  to the block storage service , according to at least some embodiments. The example set of functions described herein is not intended to be limiting. The APIs  may be implemented according to different technologies including but not limited to Simple Object Access Protocol (SOAP) technology and Representational state transfer (REST) technology. In other words, the APIs  may be, but are not necessarily, implemented as SOAP APIs or RESTful APIs. SOAP is a protocol for exchanging information in the context of web services. REST is an architecture for distributed hypermedia systems. A RESTful API (which may also be referred to as a RESTful web service) is a web service API implemented using HTTP and REST technology. The APIs  can be wrapped with client libraries in various languages including but not limited to C, C++, Java, C#, and Perl to support integration with the block storage service .","Several APIs  may be used to expose the functionality of the block storage service  to the service clients and\/or third party vendors that may be leveraged to develop applications and\/or appliances for use in the service clients' data centers, as an example. These functions may include, but are not limited to, a create volume function, a create snapshot function, an upload block function, a download block function, a snapshot progress function, a delete volume function, and a delete snapshot function. The following describes example APIs to each of these functions.","Create Volume API","A create volume API may be provided that allows a caller to request creation of an empty volume on data store . In at least some embodiments, the create volume API may also allow a caller to request creation or restoring of a volume on data store  (or alternatively on some other storage system, for example a local data store on the service client's network) from a specified snapshot of a volume on data store . The create volume API may also enable a caller to bootstrap a volume from existing data other than a snapshot, for example data on a service client's local data store. In at least some embodiments, in response to the create volume API call, the block storage service  creates the new volume and a volume manifest, and may also create an initial snapshot of the new volume and a snapshot manifest.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 5","b":["260","242","210","242","240","260","240","270","214","220","270","272","220","260","242","270","272"]},"In at least some embodiments, when the caller is using the create volume API to create a volume from a specified snapshot on data store , the caller specifies the snapshot in the create volume request. A copy of the snapshot manifest is made and is used as the volume manifest. The snapshot manifest is immutable; the volume manifest is mutable. The snapshot that the volume is created from may be a completed snapshot or an incomplete snapshot. If incomplete, additional data subsequently uploaded to the snapshot is included in the volume. In addition, new data (data created after the point-in-time of the snapshot) may be added to the volume, and dirty data (data modified after the point-in-time of the snapshot) may be written to the volume. After creating the volume from the snapshot using the create volume API, the user may begin downloading data from the volume as necessary or desired, and may take snapshots of the volume.","Create Volume API Input Parameters","In at least some embodiments, input parameters to the create volume API may include, but are not limited to, one or more authentication parameters, an optional volume size parameter, an optional snapshot identifier (snapshot ID), and an idempotency key.","The one or more authentication parameters may include a certificate, a private key, or some other data for authenticating the caller with the service provider. A certificate may, for example contain service client information, for example an account ID of the service client with the service provider.","The optional volume size parameter allows the caller to specify a size for a volume to be created. If a volume size is not specified, the volume size to be used may be determined from another parameter (e.g., from the size of a specified snapshot, if a snapshot is specified), a default volume size may be used, or some other method for determining the volume size may be used.","The optional snapshot ID parameter may be used, for example, to specify a snapshot on the service provider data store from which the volume is to be created or restored. If a snapshot ID is not specified, then a new empty volume may be created.","The idempotency key may enable the create volume API to be retried without side effects. In other words, the create volume API call may be an idempotent operation that has no additional effect if it is called more than once with the same input parameters.","Create Volume API Output Parameters","In at least some embodiments, output parameters of the create volume API may include, but are not limited to, a volume identifier (volume ID) for the new volume, and a snapshot ID for an initial snapshot of the new volume. When a volume is created, an initial snapshot (which may include snapshot data and a snapshot manifest) of the volume is created. An identifier for this snapshot may be returned with the volume ID. In at least some embodiments, both the volume ID and the snapshot ID may be globally unique identifiers (GUIDs).","While a volume ID and snapshot ID are described as being returned to the caller, note that other methods for identifying volumes and snapshots to the caller may be used. Generally speaking, some type of handle to the volume and the snapshot are returned to the caller that the caller may then use in subsequent API calls to identify the volume and snapshot.","Create Volume API Exceptions","In at least some embodiments, indications of exceptions that may be returned to the caller by the create volume API may include an authentication failure exception, an invalid volume size exception, an invalid snapshot ID exception, and an invalid volume ID exception.","An authentication failure exception may be raised if the service provider cannot authenticate the caller according to the one or more input authentication parameters.","An invalid volume size exception may be raised if a snapshot was specified using the snapshot ID input parameter and the input volume size is less than the size of the specified snapshot. An invalid volume size exception may also be raised if the input volume size is less than a minimum volume size or greater than a maximum volume size. In other words, the block storage service  may limit volume size to within a range from a minimum size to a maximum size, and if the caller requests a volume size that is not within this range, then an invalid volume size exception may be raised.","An invalid snapshot ID exception may be raised if the caller specifies a snapshot with the snapshot ID input parameter, and if the block storage service  cannot locate the specified snapshot or determines that the snapshot ID is invalid for some other reason (e.g., the specified snapshot exists but does not belong to the service provider or the service provider is not allowed to export the snapshot to local storage).","Create Snapshot API","A create snapshot API may be provided that allows a caller to request creation of a snapshot of an existing volume on remote data store , or alternatively to request creation of a snapshot for an existing volume on a service client's local data store . After the snapshot is created, data may be uploaded to the snapshot, for example from a volume on a local data store . In at least some embodiments, multiple snapshots of a given volume may be created. In at least some embodiments, a versioning scheme may be used to distinguish between snapshots of a given volume. In at least some embodiments, a data version may be atomically incremented to insure data consistency. (E.g., version 1, version 2, etc.) In at least some embodiments, there may be multiple snapshots of a given volume that are in progress at a given time. In at least some embodiments, the multiple snapshots of a given volume are completed in the order that they were created. In at least some embodiments, data can only be uploaded to the earliest outstanding snapshot of a given volume. Note that a manifest for the snapshot may also be created.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 6","b":["260","242","210","242","240","260","240","274","214","220","274","260","242","274"]},"Create Snapshot API Input Parameters","In at least some embodiments, input parameters to the create snapshot API may include, but are not limited to, one or more authentication parameters, a volume identifier (volume ID), a list of data chunk tokens, and an idempotency key.","The one or more authentication parameters may include a certificate, a private key, or some other data for authenticating the caller with the service provider. A certificate may, for example contain service client information, for example an account ID of the service client with the service provider.","The volume ID parameter may be used to specify a volume on remote data store  or alternatively a volume on the service client's local data store  for which a snapshot is to be created.","The list of data chunk tokens may be either a pointer to or other locator for a list of tokens or an actual list of tokens that each uniquely identifies a unit of data (a chunk) in a volume, for example a volume on the service client's local data store , for which the snapshot is being taken. A data chunk token may, for example, be a hash of a unit of data (a chunk). In block-based data systems (for example, block storage systems), a unit of data (a chunk) may, for example, be a 256-byte portion of a data block, a 1024-byte portion of a data block, a 1-megabyte portion of a data block, some other fixed or variable sized portion of a data block, or may be the entire data block. In file-based systems, a unit of data may be a file, or a portion of a file similar to the portions in a block-based data system. The data chunk tokens may, for example, be used in a data deduplication technique that may be applied when uploading data blocks according to the upload block API to reduce the amount of data that is actually uploaded.","The idempotency key may enable the create snapshot API to be retried without side effects. In other words, the create snapshot API call may be an idempotent operation that has no additional effect if it is called more than once with the same input parameters.","Create Snapshot API Output Parameters","In at least some embodiments, output parameters of the create snapshot API may include, but are not limited to, a snapshot identifier (snapshot ID) for the initial snapshot of the specified volume. In at least some embodiments, the snapshot ID may be a globally unique identifier (GUID).","While a snapshot ID is described as being returned to the caller, note that other methods for identifying snapshots to the caller may be used. Generally speaking, some type of handle to the snapshot is returned to the caller that the caller may then use in subsequent API calls to identify the snapshot.","Create Snapshot API Exceptions","In at least some embodiments, indications of exceptions that may be returned to the caller by the create snapshot API may include an authentication failure exception, an invalid volume ID exception, and an invalid chunk token exception.","An authentication failure exception may be raised if the service provider cannot authenticate the caller according to the one or more input authentication parameters.","An invalid volume ID exception may be raised if the volume specified by the volume ID input parameter cannot be located or if the volume ID is determined to be invalid for some other reason (e.g., the specified volume does not belong to the service provider).","Upload Block API","An upload block API may be provided that allows a caller to upload blocks of data to a specified volume or snapshot on remote data store .","The upload block API may be used, for example, to upload data from a volume on local data store  to a specified snapshot on remote data store . In at least some embodiments, multiple snapshots of a given volume may be created. In at least some embodiments, a versioning scheme may be used to distinguish between snapshots of a given volume. In at least some embodiments, a data version may be atomically incremented to insure data consistency. (E.g., version 1, version 2, etc.) In at least some embodiments, there may be multiple snapshots of a given volume that are in progress at a given time. In at least some embodiments, the multiple snapshots of a given volume are completed in the order that they were created. In at least some embodiments, data can only be uploaded to the earliest outstanding snapshot of a given volume.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 7","b":["260","242","210","280","214","242","240","260","240","212","220","260","242"]},"Note that the uploaded data may either be volume data  or snapshot data  as indicated by the upload block input parameters. The local data source  may, for example, be a volume on a local data store on client network , a client process on client network , a tape, a file on a local data store, a cache, or any of various other sources for data.","Upload Block API Input Parameters","In at least some embodiments, input parameters to the upload block API may include, but are not limited to, one or more authentication parameters, a volume identifier (volume ID), a snapshot identifier (snapshot ID), a data version, a compressed parameter, and, for each of one or more data blocks being uploaded, a data offset, a data length, a checksum, and the data to be uploaded. In some embodiments, the input parameters for the upload block API may also include a snapshot progress parameter.","The one or more authentication parameters may include a certificate, a private key, or some other data for authenticating the caller with the service provider. A certificate may, for example contain service client information, for example an account ID of the service client with the service provider.","The volume ID parameter may be used to specify a volume on remote data store  to which the data block is being uploaded.","The snapshot ID parameter may be used to specify a snapshot on remote data store  to which the data block is being uploaded. In some embodiments, the input parameters for the upload block API may also include a snapshot progress parameter that may be used to indicate the percentage of the snapshot that has been uploaded at this upload and to indicate if the snapshot is completed with this upload (i.e. by indicating 100%).","The data version parameter may be used to specify a snapshot version. The data version may be used, for example, in a versioning scheme to distinguish between multiple point-in-time snapshots of a given volume. In at least some embodiments, the data version parameter may, for example, be used to synchronize the version of the data on the local storage with the data on the remote data store . A server handling an upload block API request may refer to the data version parameter to prevent a newer block of data on remote data store  from being overwritten with an older block of data specified in the request.","The compressed parameter may be used to indicate if the data being uploaded is or is not compressed according to a compression scheme or techniques.","The data offset may be an offset into the specified volume or snapshot on the remote data store  at which the respective data is to be stored.","The data length may be a length (e.g., in bytes) of the respective data being uploaded.","The checksum may be an MD5, CRC32, SHA-256, or some other checksum of the respective data being uploaded.","Upload Block API Output Parameters","In at least some embodiments, output parameters of the upload block API may include, but are not limited to, one or more data chunk tokens. A data chunk token is an identifier for a unit of data that was uploaded. A data chunk token may, for example, be a hash of a unit of data. Both the block storage service  and the local application  may store data chunk tokens, and may use the tokens to identify data chunks in upload and\/or download operations, for example in a data deduplication technique.","In some embodiments, data chunks may be uploaded for a snapshot proactively before a snapshot is created, and the data chunk tokens may be submitted and included in the snapshot manifest when the snapshot is created. The data chunk token is a unique identifier that allows the block storage service to locate the data chunk in the remote data store. Alternatively, a snapshot may be created before data chunks are uploaded to the snapshot; in this case, a snapshot token may be returned instead of the data chunk token. The snapshot token uniquely identifies the point of time version of the snapshot. The snapshot token may, for example, be used by multiple servers (e.g., load balanced servers) to access the same snapshot manifest.","Upload Block API Exceptions","In at least some embodiments, indications of exceptions that may be returned to the caller by the upload block API may include an authentication failure exception, an invalid volume ID exception, an invalid snapshot ID exception, an invalid data version exception, a checksum error exception, and a snapshot already complete exception.","An authentication failure exception may be raised if the service provider cannot authenticate the caller according to the one or more input authentication parameters.","An invalid volume ID exception may be raised if the volume specified by the volume ID input parameter cannot be located or if the volume ID is determined to be invalid for some other reason (e.g., the specified volume does not belong to the service provider).","An invalid snapshot ID exception may be raised if the caller specifies a snapshot with the snapshot ID input parameter, and if the block storage service  cannot locate the specified snapshot or determines that the snapshot ID is invalid for some other reason (e.g., the specified snapshot exists but does not belong to the service provider).","An invalid version exception may be raised, for example, if the caller specifies a version that does not exist, or if there is an earlier snapshot version that has not been completed and the caller specifies a later version.","A checksum error exception may be raised if an error in the data block being uploaded is detected according to the checksum provided as an input parameter.","A snapshot already complete exception may be raised if it is determined that the caller is attempting to upload a data block to a snapshot that is indicated as being complete. As previously noted, snapshots, once generated, are immutable. Note that the snapshot progress API may be used to indicate what percentage of a snapshot has been uploaded and to report when the snapshot is complete.","Download Block API","A download block API may be provided that allows a caller to download blocks of data from a specified volume or snapshot on remote data store . The download block API may, for example, be used by a local application  to download a latest (most recent or up-to-date) copy of data from a specified volume on remote data store . The downloaded data may, for example, be written to a local cache and\/or to a local data store . As another example, the download block API may be used to download data from a specified snapshot on remote data store  to a volume being restored from the snapshot on a local data store .",{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 8","b":["260","242","210","214","242","240","260","240","214","240","220","260","242"]},"Note that the downloaded data may either be volume data  or snapshot data  as indicated by the download block input parameters. The local application  may provide or write the downloaded data to a local data destination . The local data destination  may, for example, be a volume on a local data store on client network  that is being generated from a snapshot on remote data store , a client process on client network , a tape, a file on a local data store, a cache, or any of various other destinations for data.","Download Block API Input Parameters","In at least some embodiments, input parameters to the upload block API may include, but are not limited to, one or more authentication parameters, a volume identifier (volume ID), a snapshot identifier (snapshot ID), and, for each of one or more data blocks to be downloaded, a data offset, a data length, and a compressed parameter.","The one or more authentication parameters may include a certificate, a private key, or some other data for authenticating the caller with the service provider. A certificate may, for example contain service client information, for example an account ID of the service client with the service provider.","The volume ID parameter may be used to specify a volume on remote data store  from which data is to be downloaded.","The snapshot ID parameter may be used to specify a snapshot on remote data store  from which data is to be downloaded. In at least some embodiments, a snapshot version may also be included as an input parameter.","The data offset may be an offset into the specified volume or snapshot on the remote data store  from which the data is to be downloaded.","The data length may be a length (e.g., in bytes) of the data to be downloaded from the volume at the data offset.","The compressed parameter may be used to indicate if the data being downloaded is or is not compressed according to a compression scheme.","Download Block API Output Parameters","In at least some embodiments, output parameters of the download block API may include, but are not limited to, for each of one or more data blocks being downloaded, a data offset, a data length, a checksum, and the data being downloaded.","The data offset may be an offset into the specified volume or snapshot on the remote data store  from which the respective data is being downloaded.","The data length may be a length (e.g., in bytes) of the respective data being downloaded.","The checksum may be an MD5, CRC32, SHA-256, or some other checksum of the respective data being downloaded.","Download Block API Exceptions","In at least some embodiments, indications of exceptions that may be returned to the caller by the download block API may include an authentication failure exception, an invalid volume ID exception, and an invalid snapshot ID exception.","An authentication failure exception may be raised if the service provider cannot authenticate the caller according to the one or more input authentication parameters.","An invalid volume ID exception may be raised if the volume specified by the volume ID input parameter cannot be located or if the volume ID is determined to be invalid for some other reason (e.g., the specified volume does not belong to the service provider).","An invalid snapshot ID exception may be raised if the caller specifies a snapshot with the snapshot ID input parameter, and if the block storage service  cannot locate the specified snapshot or determines that the snapshot ID is invalid for some other reason (e.g., the specified snapshot exists but does not belong to the service provider).","Snapshot Progress API","A snapshot progress API may be provided that, for example, allows a caller to report on the progress of a current snapshot being uploaded and to report when the snapshot is complete. For example, after the caller creates a snapshot on the remote data store  via the create snapshot API, the caller may use the snapshot progress API to report to the block storage service  what percentage of the snapshot has been uploaded to the remote data store  via the upload block API. Note that additional data cannot be uploaded to a snapshot via the upload block API once the snapshot has been reported to be complete via the snapshot progress API. In at least some embodiments, after a snapshot is complete, the snapshot and its manifest are immutable.","The snapshot progress API may be used asynchronously or synchronously during the upload to snapshot to report snapshot progress to the block storage service . For example, the caller (a client application) may be configured to send a snapshot progress message via the APIs  periodically or aperiodically to the block storage service . As another example, the client application may be configured to send a snapshot progress message to the block storage service  at percentage intervals (e.g., 10%, 20%, . . . , 100%). As another example, the client application may be configured to send a snapshot progress message after every upload block call to the API, or after every N such calls. In some embodiments, instead of or in addition to the client application initiating the snapshot progress call, the APIs  may be configured to enable the block storage service  to prompt the client application for snapshot progress; the client application responds by reporting the percentage of snapshot progress.","In some embodiments, instead of or in addition to the snapshot progress API, the input parameters for the upload block API may include a snapshot progress parameter.","Snapshot Progress API Input Parameters","In at least some embodiments, input parameters to the snapshot progress API may include, but are not limited to, one or more authentication parameters, a snapshot identifier (snapshot ID), and a progress parameter.","The one or more authentication parameters may include a certificate, a private key, or some other data for authenticating the caller with the service provider. A certificate may, for example contain service client information, for example an account ID of the service client with the service provider.","The snapshot ID parameter may be used to indicate a snapshot on remote data store  that corresponds to this snapshot progress call.","The progress parameter may indicate an estimate of how much of the snapshot has been uploaded. In at least some embodiments, this estimate may be indicated by a percentage, for example as a number in the range 0.0-1.0 or as a number in the range 0-100. In at least some embodiments, a maximum number (e.g., 1.0 or 100) may indicate that the snapshot is complete. Note that these ranges and numbers are given by way of example, and other methods may be used to indicate snapshot progress in some embodiments.","Snapshot Progress API Output Parameters and Exceptions","In at least some embodiments, there are no output parameters for the snapshot progress API. In at least some embodiments, indications of exceptions that may be returned to the caller by the upload block API may include an authentication failure exception, an invalid snapshot ID exception, and an invalid progress exception.","An authentication failure exception may be raised if the service provider cannot authenticate the caller according to the one or more input authentication parameters.","An invalid snapshot ID exception may be raised if the block storage service  cannot locate the specified snapshot or determines that the snapshot ID is invalid for some other reason (e.g., the specified snapshot exists but does not belong to the service provider, or the specified snapshot is not the earliest outstanding snapshot of the corresponding volume).","An invalid progress exception may be raised if the progress parameter indicates a value that is not valid, for example if the indicated value is less than the value indicated in the progress parameter from a previous call to the snapshot progress API for this snapshot.","Delete Volume API","A delete volume API may be provided that allows a caller to request deletion of an existing volume on remote data store .","Delete Volume Input Parameters","In at least some embodiments, input parameters to the delete volume API may include, but are not limited to, one or more authentication parameters and a volume identifier (volume ID).","The one or more authentication parameters may include a certificate, a private key, or some other data for authenticating the caller with the service provider. A certificate may, for example contain service client information, for example an account ID of the service client with the service provider.","The volume ID parameter may be used to specify a volume on remote data store  that is to be deleted.","Delete Volume API Output Parameters and Exceptions","In at least some embodiments, there are no output parameters for the delete volume API. In at least some embodiments, indications of exceptions that may be returned to the caller by the upload block API may include an authentication failure exception and an invalid volume ID exception.","An authentication failure exception may be raised if the service provider cannot authenticate the caller according to the one or more input authentication parameters.","An invalid volume ID exception may be raised if the volume specified by the volume ID input parameter cannot be located or if the volume ID is determined to be invalid for some other reason (e.g., the specified volume does not belong to the service provider).","Delete Snapshot API","A delete snapshot API may be provided that allows a caller to request deletion of an in-progress or completed snapshot on remote data store .","Delete Volume Input Parameters","In at least some embodiments, input parameters to the delete snapshot API may include, but are not limited to, one or more authentication parameters and a snapshot identifier (snapshot ID).","The one or more authentication parameters may include a certificate, a private key, or some other data for authenticating the caller with the service provider. A certificate may, for example contain service client information, for example an account ID of the service client with the service provider.","The snapshot ID parameter may be used to specify a snapshot on remote data store  that is to be deleted.","Delete Snapshot API Output Parameters and Exceptions","In at least some embodiments, there are no output parameters for the delete snapshot API. In at least some embodiments, indications of exceptions that may be returned to the caller by the upload block API may include an authentication failure exception and an invalid snapshot ID exception.","An authentication failure exception may be raised if the service provider cannot authenticate the caller according to the one or more input authentication parameters.","An invalid snapshot ID exception may be raised if the snapshot specified by the snapshot ID input parameter cannot be located or if the snapshot ID is determined to be invalid for some other reason (e.g., the specified snapshot does not belong to the service provider).","Applications of the Block Storage Service APIs","The following describes examples of general applications for embodiments of the block storage service and the block storage service APIs in a service provider networking environment, for example as illustrated in . The block storage service and APIs may be implemented on one or more devices on the service provider network and may act as an interface between various processes in service clients' data centers and a remote, block-based data store on the service provider network. The APIs to the block storage service may provide a standard interface to volume-based block storage operations on the remote data store. The service provider, the service clients, and\/or third parties may develop and provide various applications and\/or appliances that may, for example, be instantiated in service clients' local networks and that leverage the block storage service via the APIs to create and manage volumes and snapshots on the remote data store provided by the service provider. These applications and appliances may include, for example, relatively simple programs that are designed to create a volume and upload data from a data source to the volume, applications or appliances that leverage the APIs to utilize the remote data store provided by the service provider as a primary data store for a service client's data, applications or appliances that leverage the APIs to utilize the remote data store provided by the service provider as a backup or shadowing data store for a service client's primary data store on the service client's local network. Embodiments of the block storage service and APIs may, for example, enable various entities such as third party storage device providers to develop cloud technology-backed block devices, for example Storage Area Network (SAN) storage devices and Network-Attached Storage (NAS) devices, that upload data to and download data from \u201ccloud\u201d storage provided by the service provider according to the block storage service APIs.","The block storage service APIs may provide a standard interface to the volume-based block storage on the remote data store that may, for example, allow different applications and\/or appliances to exchange or share data through the remote data store. For example, one application on a service client network may create a volume on the remote data store and upload data to the volume according to the block storage service APIs. A snapshot of the volume may be taken on the remote data store. Another, different application or appliance that supports the block storage service APIs on the service client network or on some other network may then, with appropriate data access permissions, access data from the volume and\/or snapshot in accordance with the block storage service APIs.","The block storage service APIs may be implemented according to different technologies including but not limited to Simple Object Access Protocol (SOAP) technology and Representational state transfer (REST) technology. In other words, the block storage service APIs may be, but are not necessarily, implemented as SOAP APIs or RESTful APIs. The block storage service APIs may be wrapped with client libraries in various languages including but not limited to C, C++, Java, C#, and Perl to support integration with the block storage service.",{"@attributes":{"id":"p-0150","num":"0149"},"figref":"FIG. 9","b":["300","302","304","306","304","308","310"]},"As indicated at , after the caller receives the volume ID from the service provider via the create volume API, the caller may generate an upload block request for the volume according to the upload block API. In at least some embodiments, an upload block request to upload data to a volume may include, but is not limited to, one or more authentication parameters, a volume identifier (volume ID), a compressed parameter, and, for each of one or more data blocks being uploaded, a data offset, a data length, a checksum, and the data to be uploaded. As indicated at , the block storage service receives the upload block request via the upload block API. At , the block storage service may examine one or more parameters of the upload block request to determine if the request is valid. If the upload block request is not valid, then the block storage service may return an error to the caller via the upload block API, ad indicated at . In at least some embodiments, errors that may be returned to the caller by the upload block API for a volume may include an authentication failure error, an invalid volume ID error, and a checksum error. At , if the upload block request is valid, the block storage service writes the volume data indicated by the request to the service provider data store according to the input parameters, as indicated at . In at least some embodiments, the block storage service also updates the respective volume manifest.","As indicated at , the block storage service returns one or more data chunk tokens to the caller via the upload block API. A data chunk token is an identifier for a unit of data that was uploaded. A data chunk token may, for example, be a hash of a unit of data. Both the block storage service and the caller (e.g., a local application on a client network) may store data chunk tokens, and may use the tokens to identify data chunks in subsequent upload and\/or download operations, for example in a data deduplication technique.","The caller may continue to use the upload block API to upload additional new or modified (dirty) data to the volume on the service provider data store. At , if the caller has completed uploading data (e.g., if all of the data to be uploaded to a volume has been uploaded), then the upload is complete. Otherwise, the method may return to element .","As further described below, one or more techniques for accelerating data uploads may be employed in the data upload process for a volume as described above. For example, a data deduplication technique and\/or a data compression technique may be used.",{"@attributes":{"id":"p-0155","num":"0154"},"figref":["FIG. 10","FIG. 9"],"b":"400"},"As indicated at , a caller may generate a download block request for the volume according to the download block API. In at least some embodiments, a download block request to download data from a volume may include, but is not limited to, one or more authentication parameters, a volume identifier (volume ID), a data offset, a data length, and a compressed parameter. As indicated at , the block storage service receives the download block request via the download block API. At , the block storage service may examine one or more parameters of the download block request to determine if the request is valid. If the download block request is not valid, then the block storage service may return an error to the caller via the download block API, ad indicated at . In at least some embodiments, errors that may be returned to the caller by the download block API for a volume may include an authentication failure error and an invalid volume ID error. At , if the download block request is valid, the block storage service reads the requested volume data from the service provider data store according to the input parameters and the volume manifest as indicated at . As indicated at , the block storage service returns the requested data to the caller via the download block API. In at least some embodiments, for each of one or more data blocks being downloaded, the download block API returns a data offset, a data length, a checksum, and the data being downloaded.","As indicated by the dashed line with arrow returning from  to , the caller may, but does not necessarily, continue to use the download block API to download additional data from the volume on the service provider data store. As further described below, one or more techniques for accelerating data downloads may be employed, for example a data compression technique.",{"@attributes":{"id":"p-0158","num":"0157"},"figref":"FIG. 11","b":["500","502","504","506","504","508"]},"As indicated at , after the caller receives the snapshot ID from the service provider via the create snapshot API, the caller may generate an upload block request for the snapshot according to the upload block API. In at least some embodiments, an upload block request to upload data to a snapshot may include, but is not limited to, one or more authentication parameters, a snapshot identifier (snapshot ID), a data version for the snapshot, a compressed parameter, and, for each of one or more data blocks being uploaded, a data offset, a data length, a checksum, and the data to be uploaded. As indicated at , the block storage service receives the upload block request via the upload block API. At , the block storage service may examine one or more parameters of the upload block request to determine if the request is valid. If the upload block request is not valid, then the block storage service may return an error to the caller via the upload block API, ad indicated at . In at least some embodiments, errors that may be returned to the caller by the upload block API for a snapshot may include an authentication failure error, an invalid snapshot ID error, an invalid data version error, a checksum error, and a snapshot already complete error. At , if the upload block request is valid, the block storage service writes the snapshot data indicated by the request to the service provider data store according to the input parameters, as indicated at . In at least some embodiments, the block storage service also updates the respective snapshot manifest.","As indicated at , the block storage service returns one or more data chunk tokens to the caller via the upload block API. A data chunk token is an identifier for a unit of data that was uploaded. A data chunk token may, for example, be a hash of a unit of data. Both the block storage service and the caller (e.g., a local application on a client network) may store data chunk tokens, and may use the tokens to identify data chunks in subsequent upload and\/or download operations, for example in a data deduplication technique.","At , if the snapshot is not yet complete, the caller may continue to use the upload block API to upload additional data to the snapshot on the service provider data store. In at least some embodiments, a snapshot progress API may be provided that, for example, allows the caller to report on the progress of a current snapshot being uploaded and to report when the snapshot is complete. For example, after a snapshot is created on the remote data store via the create snapshot API as indicated at  through  and begins uploading data to the snapshot as indicated at  through , the caller may use the snapshot progress API to report to the block storage service what percentage of the snapshot has been uploaded to the remote data store via the upload block API. When the snapshot is complete, the snapshot progress API may be used to report to the block storage service that the snapshot has been completed. In at least some embodiments, additional data cannot be uploaded to the snapshot via the upload block API once the snapshot has been reported to be complete via the snapshot progress API. In at least some embodiments, the block storage service treats a completed snapshot and its manifest as immutable.","The snapshot progress API may be used asynchronously or synchronously during the upload to snapshot to report snapshot progress to the block storage service. For example, the client application may be configured to send a snapshot progress message via the API periodically or aperiodically to the block storage service. As another example, the client application may be configured to send a snapshot progress message to the block storage service at percentage intervals (e.g., 10%, 20%, . . . , 100%). As another example, the client application may be configured to send a snapshot progress message after every upload block call to the API, or after every N such calls. In some embodiments, instead of or in addition to the client application initiating the snapshot progress call, the snapshot progress API may be configured to enable the block storage service to prompt the client application for snapshot progress; the client application responds by reporting the percentage of snapshot progress.","As further described below, one or more techniques for accelerating data uploads may be employed in the data upload process for a snapshot as described above. For example, a data deduplication technique and\/or a data compression technique may be used.",{"@attributes":{"id":"p-0164","num":"0163"},"figref":["FIG. 12","FIG. 11"],"b":"600"},"U.S. patent application Ser. No. 13\/324,907, titled \u201cMETHODS AND APPARATUS FOR CONTROLLING SNAPSHOT EXPORTS,\u201d which was previously incorporated by reference in its entirety, describes methods and apparatus that may be used to control the downloading of snapshots of volumes according to export rights of the service clients. In these methods, for example, a request may be received from a service client to access one or more snapshots, for example a request to export the snapshot or a request for a listing of snapshots. For each snapshot, the service provider may determine if the service client has rights to the snapshot, for example by checking a manifest for the snapshot to see if entries in the snapshot manifest belong to accounts to which this service client has export permission and\/or if the service client has export permission for the respective volume corresponding to the snapshot. If the service client has export rights for a snapshot, the request is granted; otherwise, the request is not granted. In particular, U.S. patent application Ser. No. 13\/324,907 describes a snapshot export control service that may be accessed by the block storage service to determine a service client's access permissions for snapshots specified by the service client via the block storage service APIs, for example snapshots specified via the download block API.","As indicated at , a caller may generate a download block request for the snapshot according to the download block API. In at least some embodiments, a download block request to download data from a snapshot may include, but is not limited to, one or more authentication parameters, a snapshot identifier (snapshot ID), a data offset, a data length, and a compressed parameter. As indicated at , the block storage service receives the download block request via the download block API. At , the block storage service may examine one or more parameters of the download block request to determine if the request is valid. If the download block request is not valid, then the block storage service may return an error to the caller via the download block API, ad indicated at . In at least some embodiments, errors that may be returned to the caller by the download block API for a volume may include an authentication failure error and an invalid snapshot ID error. At , if the download block request is valid, the block storage service reads the requested snapshot data from the service provider data store according to the input parameters and the snapshot manifest as indicated at . As indicated at , the block storage service returns the requested snapshot data to the caller via the download block API. In at least some embodiments, for each of one or more data blocks being downloaded, the download block API returns a data offset, a data length, a checksum, and the data being downloaded.","The caller may continue to use the download block API to download additional data from the snapshot on the service provider data store. At , if all data from the snapshot has been downloaded, then the download is complete. Otherwise, the method may return to element .","As further described below, one or more techniques for accelerating data downloads may be employed, for example a data compression technique.","Data Transfer Acceleration Techniques","Embodiments of the block storage service and APIs to the block storage service may implement or support one or more techniques for accelerating the transfer of data (data uploads and\/or data downloads) between the block storage service and applications and\/or appliances that leverage the block storage service APIs to create and manage volumes and snapshots on remote, volume-based block storage provided by the service provider. The accelerated data techniques may, for example, include techniques that reduce the amount of data that is uploaded and\/or downloaded using the data upload and data download API techniques described herein. This accelerated data movement, as compared to a standard Internet connection, may, for example, be achieved using one or more of data deduplication, compression, and parallelization",{"@attributes":{"id":"p-0170","num":"0169"},"figref":"FIG. 13","b":["260","240","242","200","260","200","202","250","200","260","240","260","240"]},{"@attributes":{"id":"p-0171","num":"0170"},"figref":"FIG. 13","b":["244","246","240","242","260","264","266","260"]},"Example data deduplication techniques that may be employed in at least some embodiments are described in U.S. patent application Ser. No. 12\/981,393, titled \u201cRECEIVER-SIDE DATA DEDUPLICATION IN DATA SYSTEMS,\u201d which is hereby incorporated by reference in its entirety, and in U.S. patent application Ser. No. 12\/981,397, titled \u201cREDUCED BANDWIDTH DATA UPLOADING IN DATA SYSTEMS,\u201d which is hereby incorporated by reference in its entirety. In the example data deduplication techniques, the receiver (the block storage service ), rather than the sender (the local application ), maintains tokens, for example as a fingerprint dictionary, for previously uploaded data. When the sender has additional data to be uploaded, the sender extracts tokens (fingerprints) for units of the data and sends the fingerprints to the receiver. The receiver checks its fingerprint dictionary to determine the data units to be uploaded and notifies the sender of the identified units, which then sends the identified units of data to the receiver. However, note that other data deduplication techniques may be employed in some embodiments.","While  illustrates sender- and receiver-side handlers that may implement one or more techniques for accelerating the transfer of data in data uploads from the client network  to the remote data store  using the block storage service APIs , specifically the upload block API, note that similar techniques may be used to accelerate data transfers using the download block API to download data from the remote data store  to the client network .","One or more of a variety of data compression techniques may be used. As noted above in the description of the block storage service APIs, the upload block and download block APIs may each provide a compressed parameter that may be used to indicate if the data in a respective block is or is not compressed according to the compression technique.","Example Use Cases","A wide variety of applications and appliances may be developed that leverage the block storage service APIs as described herein to take advantage of the remote, volume-based block storage service provided by the service provider. The following describes some example use cases. Note that these examples are not intended to be limiting.","Import\/Export Utility","A service client or third party may develop an application that may be used on a service client's network to export data to volumes on the service provider's remote data store and\/or to import data from the remote data store to volumes on a local data store.",{"@attributes":{"id":"p-0177","num":"0176"},"figref":["FIG. 7","FIG. 9"],"b":["214","280","280","280","214","312","322","240","242"]},{"@attributes":{"id":"p-0178","num":"0177"},"figref":["FIG. 8","FIG. 10"],"b":["214","282","282","282","214","402","412","282"]},"Primary Data Store","A service client or third party may develop an application or appliance that may be used on a service client's network to leverage the remote, volume-based block storage service provided by the service provider as a primary storage for the service client's data via the block storage service APIs.  is a high-level block diagram that broadly illustrates a local application that leverages the block storage service APIs to provide a primary data store on the remote, volume-based block storage, according to at least some embodiments. A local application  or appliance may be developed that appears as a local data target (e.g., an iSCSI target) to client processes  on the client network . The client processes  may make read and write I\/O requests to the local application  or appliance. The local application  or appliance uploads data from the write requests to volume(s) on the remote data store  and downloads data from volume(s) on the remote data store  for the read requests according to the block storage service APIs, for example as illustrated in . The local application  may support the create volume API, the create snapshot API, the upload block and download block APIs, and also may support one or more other APIs provided via the block storage service APIs such as delete volume and delete snapshot APIs.","Backing Data Store","A service client or third party may develop an application or appliance that may be used on a service client's network to leverage the remote, volume-based block storage service provided by the service provider as a backing data store for the service client's primary data store via the block storage service APIs.  is a high-level block diagram that broadly illustrates a local application that leverages the block storage service APIs to provide a backing data store on the remote, volume-based block storage, according to at least some embodiments. A local application  or appliance may be developed that appears as a local data target (e.g., an iSCSI target) to client processes  on the client network . The client processes  may make read and write I\/O requests to the local data store  via the local application. Read requests from the client processes  received by the local application  are passed on to the local data store  that serves as the primary data store. Write requests from the client processes  received by the local application  are passed on to the local data store , and are also shadowed to the backing data store  on remote data store  according to the upload block API. The shadowed data may be stored on remote data store  as snapshot data . The local application  may support the create volume API, the create snapshot API, the upload block and download block APIs, and also may support one or more other APIs provided via the block storage service APIs such as delete volume and delete snapshot APIs. For example, the local application  may enable restore of a volume on local data store  from a snapshot on remote data store  via the block storage service APIs.","When local application  initiates or resumes operations on the client network , there may be data in the local data store  that is not reflected in the backing data store  on the remote data store . Thus, local application  may implement a bootstrapping process during which at least some data from the local data store  may be uploaded to the remote data store  according to the block storage service APIs so that the snapshot(s) in the backing data store  can be populated and\/or updated to accurately reflect the data that is currently on the local data store .","Illustrative System","In at least some embodiments, a computer system that implements a portion or all of one or more of the technologies described herein, including but not limited to a block storage service and APIs to the block storage service, may include a general-purpose computer system that includes or is configured to access one or more computer-accessible media, such as computer system  illustrated in . In the illustrated embodiment, computer system  includes one or more processors  coupled to a system memory  via an input\/output (I\/O) interface . Computer system  further includes a network interface  coupled to I\/O interface .","In various embodiments, computer system  may be a uniprocessor system including one processor , or a multiprocessor system including several processors  (e.g., two, four, eight, or another suitable number). Processors  may be any suitable processors capable of executing instructions. For example, in various embodiments, processors  may be general-purpose or embedded processors implementing any of a variety of instruction set architectures (ISAs), such as the x86, PowerPC, SPARC, or MIPS ISAs, or any other suitable ISA. In multiprocessor systems, each of processors  may commonly, but not necessarily, implement the same ISA.","System memory  may be configured to store instructions and data accessible by processor(s) . In various embodiments, system memory  may be implemented using any suitable memory technology, such as static random access memory (SRAM), synchronous dynamic RAM (SDRAM), nonvolatile\/Flash-type memory, or any other type of memory. In the illustrated embodiment, program instructions and data implementing one or more desired functions, such as those methods, techniques, and data described above for a block storage service and APIs to the block storage service, are shown stored within system memory  as code  and data .","In one embodiment, I\/O interface  may be configured to coordinate I\/O traffic between processor , system memory , and any peripheral devices in the device, including network interface  or other peripheral interfaces. In some embodiments, I\/O interface  may perform any necessary protocol, timing or other data transformations to convert data signals from one component (e.g., system memory ) into a format suitable for use by another component (e.g., processor ). In some embodiments, I\/O interface  may include support for devices attached through various types of peripheral buses, such as a variant of the Peripheral Component Interconnect (PCI) bus standard or the Universal Serial Bus (USB) standard, for example. In some embodiments, the function of I\/O interface  may be split into two or more separate components, such as a north bridge and a south bridge, for example. Also, in some embodiments some or all of the functionality of I\/O interface , such as an interface to system memory , may be incorporated directly into processor .","Network interface  may be configured to allow data to be exchanged between computer system  and other devices  attached to a network or networks , such as other computer systems or devices as illustrated in the other Figures described herein, for example. In various embodiments, network interface  may support communication via any suitable wired or wireless general data networks, such as types of Ethernet network, for example. Additionally, network interface  may support communication via telecommunications\/telephony networks such as analog voice networks or digital fiber communications networks, via storage area networks such as Fibre Channel SANs, or via any other suitable type of network and\/or protocol.","In some embodiments, system memory  may be one embodiment of a computer-accessible medium configured to store program instructions and data as described above in reference to the other Figures for implementing embodiments of a block storage service and APIs to the block storage service. However, in other embodiments, program instructions and\/or data may be received, sent or stored upon different types of computer-accessible media. Generally speaking, a computer-accessible medium may include non-transitory storage media or memory media such as magnetic or optical media, e.g., disk or DVD\/CD coupled to computer system  via I\/O interface . A non-transitory computer-accessible storage medium may also include any volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc, that may be included in some embodiments of computer system  as system memory  or another type of memory. Further, a computer-accessible medium may include transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as a network and\/or a wireless link, such as may be implemented via network interface .","Various embodiments may further include receiving, sending or storing instructions and\/or data implemented in accordance with the foregoing description upon a computer-accessible medium. Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media, e.g., disk or DVD\/CD-ROM, volatile or non-volatile media such as RAM (e.g. SDRAM, DDR, RDRAM, SRAM, etc.), ROM, etc, as well as transmission media or signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as network and\/or a wireless link.","The various methods as illustrated in the Figures and described herein represent exemplary embodiments of methods. The methods may be implemented in software, hardware, or a combination thereof. The order of method may be changed, and various elements may be added, reordered, combined, omitted, modified, etc.","Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended to embrace all such modifications and changes and, accordingly, the above description to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 16"}]},"DETDESC":[{},{}]}
