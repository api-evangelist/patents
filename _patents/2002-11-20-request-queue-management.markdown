---
title: Request queue management
abstract: Methods and apparatus providing, controlling and managing a dynamically sized, highly scalable and available server farm are disclosed. A Virtual Server Farm (VSF) is created out of a wide scale computing fabric (“Computing Grid”) which is physically constructed once and then logically divided up into VSFs for various organizations on demand. Each organization retains independent administrative control of a VSF. A VSF is dynamically firewalled within the Computing Grid. Allocation and control of the elements in the VSF is performed by a control plane connected to all computing, networking, and storage elements in the computing grid through special control ports. The internal topology of each VSF is under control of the control plane. A request queue architecture is also provided for processing work requests that allows selected requests to be blocked until required human intervention is satisfied.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07146233&OS=07146233&RS=07146233
owner: Sun Microsystems, Inc.
number: 07146233
owner_city: Santa Clara
owner_country: US
publication_date: 20021120
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS AND CLAIM OF PRIORITY","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is a continuation-in-part of, and domestic priority is claimed under 35 U.S.C. \u00a7 120 from, application Ser. No. 09\/630,440, filed Aug. 2, 2000 now U.S. Pat. No. 6,597,956, entitled \u201cMethod and Apparatus for Controlling An Extensible Computing System,\u201d naming Ashar Aziz, et al., as inventors, which is a continuation-in-part of, and claims domestic priority under 35 U.S.C. \u00a7 120 from, application No. 09\/502,170, filed Feb. 11, 2000 now U.S. Pat. No. 6,779,016, entitled \u201cExtensible Computing System,\u201d naming Ashar Aziz, et al., the entire contents of both which are hereby incorporated by reference in their entirety for all purposes. This application also claims domestic priority under 35 U.S.C. \u00a7 119 from provisional patent application No. 60\/332,513, filed Nov. 21, 2001, entitled \u201cRequest Queue Management,\u201d naming Ashar Aziz, et al., as inventors, and also claims domestic priority under 35 U.S.C. \u00a7 119 from provisional patent application No. 60\/369,225, filed Mar. 29, 2002, entitled \u201cRequest Queue Management,\u201d naming Ashar Aziz, et al., as inventors, the entire contents of which is hereby incorporated by reference in its entirety for all purposes.","The present invention relates generally to data processing. The invention relates more specifically to a method and apparatus for controlling a computing grid.","Builders of Web sites and other computer systems today are faced with many challenging systems planning issues. These issues include capacity planning, site availability and site security. Accomplishing these objectives requires finding and hiring trained personnel capable of engineering and operating a site, which may be potentially large and complicated. This has proven to be difficult for many organizations because designing, constructing and operating large sites is often outside their core business.","One approach has been to host an enterprise Web site at a third party site, co-located with other Web sites of other enterprises. Such outsourcing facilities are currently available from companies such as Exodus, AboveNet, GlobalCenter, etc. These facilities provide physical space and redundant network and power facilities shared by multiple customers.","Although outsourcing web site hosting greatly reduces the task of establishing and maintaining a web site, it does not relieve a company of all of the problems associated with maintaining a web site. Companies must still perform many tasks relating to their computing infrastructure in the course of building, operating and growing their facilities. Information technology managers of the enterprises hosted at such facilities remain responsible for manually selecting, installing, configuring, and maintaining their own computing equipment at the facilities. The managers must still confront difficult issues such as resource planning and handling peak capacity. Specifically, managers must estimate resource demands and request resources from the outsourcing company to handle the demands. Many managers ensure sufficient capacity by requesting substantially more resources than are needed to provide a cushion against unexpected peak demands. Unfortunately, this often results in significant amounts of unused capacity that increases companies' overhead for hosting their web sites.","Even when outsourcing companies also provide complete computing facilities including servers, software and power facilities, the facilities are no easier to scale and grow for the outsourcing company, because growth involves the same manual and error-prone administrative steps. In addition, problems remain with capacity planning for unexpected peak demand. In this situation, the outsourcing companies often maintain significant amounts of unused capacity.","Further, Web sites managed by outsourcing companies often have different requirements. For example, some companies may require the ability to independently administer and control their Web sites. Other companies may require a particular type or level of security that isolates their Web sites from all other sites that are co-located at an outsourcing company. As another example, some companies may require a secure connection to an enterprise Intranet located elsewhere.","Also, various Web sites differ in internal topology. Some sites simply comprise a row of Web servers that are load balanced by a Web load balancer. Suitable load balancers are Local Director from Cisco Systems, Inc., BigIP from F5Labs, Web Director from Alteon, etc. Other sites may be constructed in a multi-tier fashion, whereby a row of Web servers handle Hypertext Transfer Protocol (HTTP) requests, but the bulk of the application logic is implemented in separate application servers. These application servers in turn may need to be connected back to a tier of database servers.","Some of these different configuration scenarios are shown in , , and .  is a block diagram of a simple Web site, comprising a single computing element or machine  that includes a CPU  and disk . Machine  is coupled to the global, packet-switched data network known as the Internet , or to another network. Machine  may be housed in a co-location service of the type described above.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1B","b":["110","112","106","112"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1C","b":["120","1","2","1","2","1","2"]},"Given the diversity in topology of the kinds of Web sites that need to be constructed and the varying requirements of the corresponding companies, it may appear that the only way to construct large-scale Web sites is to physically custom build each site. Indeed, this is the conventional approach. Many organizations are separately struggling with the same issues, and custom building each Web site from scratch. This is inefficient and involves a significant amount of duplicate work at different enterprises.","Still another problem with the conventional approach is resource and capacity planning. A Web site may receive vastly different levels of traffic on different days or at different hours within each day. At peak traffic times, the Web site hardware or software may be unable to respond to requests in a reasonable time because it is overloaded. At other times, the Web site hardware or software may have excess capacity and be underutilized. In the conventional approach, finding a balance between having sufficient hardware and software to handle peak traffic, without incurring excessive costs or having over-capacity, is a difficult problem. Many Web sites never find the right balance and chronically suffer from under-capacity or excess capacity.","Yet another problem is failure induced by human error. A great potential hazard present in the current approach of using manually constructed server farms is that human error in configuring a new server into a live server farm can cause the server farm to malfunction, possibly resulting in loss of service to users of that Web site.","Based on the foregoing, there is a clear need in this field for improved methods and apparatuses for providing a computing system that is instantly and easily extensible on demand without requiring custom construction.","There is also a need for a computing system that supports creation of multiple segregated processing nodes, each of which can be expanded or collapsed as needed to account for changes in traffic throughput.","There is a further need for a method and apparatus for controlling such an extensible computing system and its constituent segregated processing nodes. Other needs will become apparent from the disclosure provided herein.","According to one aspect of the invention, a method is provided for communicating requests for work to be performed between a client and a server. The method includes receiving from the client a request for work to be performed and storing the request in a queue. The method further includes selecting the request from the queue based upon one or more selection criteria and if the request includes an attribute that requires human intervention, then not allowing the request to be completely processed until the required human intervention is satisfied. The method also includes once the required human intervention has been satisfied, providing the request to the server.","According to another aspect of the invention, a method is provided for processing requests for work to be performed that are stored in a queue. The method includes selecting a request from the queue based upon one or more selection criteria and if the selected request includes one or more attributes that require human intervention, then not completely processing the selected request until the one or more attributes that require human intervention are satisfied.","According to another aspect of the invention, a queue is provided for processing requests for work to be performed. The queue includes a storage medium for storing requests and a request processing mechanism communicatively coupled to the storage medium. The request processing mechanism is configured to store requests on the storage medium and select, based upon one or more selection criteria, a request from the storage medium to be processed. The request processing mechanism is further configured to if the selected request includes one or more attributes that require human intervention, then determine whether the one or more attributes have been satisfied; and only provide the request to a recipient if the one or more attributes have been satisfied.","In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","Virtual Server Farm (VSF)","According to one embodiment, a wide scale computing fabric (\u201ccomputing grid\u201d) is provided. The computing grid may be physically constructed once, and then logically partitioned on demand. A part of the computing grid is allocated to each of a plurality of enterprises or organizations. Each organization's logical portion of the computing grid is referred to as a Virtual Server Farm (VSF). Each organization retains independent administrative control of its VSF. Each VSF can change dynamically in terms of number of CPUs, storage capacity and disk and network bandwidth based on real-time demands placed on the server farm or other factors. Each VSF is secure from every other organization's VSF, even though they are all logically created out of the same physical computing grid. A VSF can be connected back to an Intranet using either a private leased line or a Virtual Private Network (VPN), without exposing the Intranet to other organizations' VSFs.","An organization can access only the data and computing elements in the portion of the computing grid allocated to it, that is, in its VSF, even though it may exercise full (e.g. super-user or root) administrative access to these computers and can observe all traffic on Local Area Networks (LANs) to which these computers are connected. According to one embodiment, this is accomplished using a dynamic firewalling scheme, where the security perimeter of the VSF expands and shrinks dynamically. Each VSF can be used to host the content and applications of an organization that may be accessed via the Internet, Intranet or Extranet.","Configuration and control of the computing elements and their associated networking and storage elements is performed by a supervisory mechanism that is not directly accessible through any of the computing elements in the computing grid. For convenience, in this document the supervisory mechanism is referred to generally as a control plane and may comprise one or more processors or a network of processors. The supervisory mechanism may comprise a Supervisor, Controller, etc. Other approaches may be used, as described herein.","The control plane is implemented on a completely independent set of computing elements assigned for supervisory purposes, such as one or more servers that may be interconnected in a network or by other means. The control plane performs control actions on the computing, networking and storage elements of the computing grid through special control ports or interfaces of the networking and storage elements in the grid. The control plane provides a physical interface to switching elements of the system, monitors loads of computing elements in the system, and provides administrative and management functions using a graphical user interface or other suitable user interface.","Computers used to implement the control plane are logically invisible to computers in the computing grid (and therefore in any specific VSF) and cannot be attacked or subverted in any way via elements in the computing grid or from external computers. Only the control plane has physical connections to the control ports on devices in the computing grid, which controls membership in a particular VSF. The devices in the computing can be configured only through these special control ports, and therefore computing elements in the computing grid are unable to change their security perimeter or access storage or computing devices which they are not authorized to do.","Thus, a VSF allows organizations to work with computing facilities that appear to comprise a private server farm, dynamically created out of a large-scale shared computing infrastructure, namely the computing grid. A control plane coupled with the computing architecture described herein provides a private server farm whose privacy and integrity is protected through access control mechanisms implemented in the hardware of the devices of the computing grid.","The control plane controls the internal topology of each VSF. The control plane can take the basic interconnection of computers, network switches and storage network switches described herein and use them to create a variety of server farm configurations. These include but are not limited to, single-tier Web server farms front-ended by a load balancer, as well as multi-tier configurations, where a Web server talks to an application server, which in turn talks to a database server. A variety of load balancing, multi-tiering and firewalling configurations are possible.","The Computing Grid","The computing grid may exist in a single location or may be distributed over a wide area. First this document describes the computing grid in the context of a single building-sized network, composed purely of local area technologies. Then the document describes the case where the computing grid is distributed over a wide area network (WAN).",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 2","b":["200","208","208","1","2","1","2","202"]},"All of the computing elements are interconnected to each other through one or more VLAN switches  which can be divided up into Virtual LANs (VLANs). The VLAN switches  are coupled to the Internet . In general a computing element contains one or two network interfaces connected to the VLAN switch. For the sake of simplicity, in  all nodes are shown with two network interfaces, although some may have less or more network interfaces. Many commercial vendors now provide switches supporting VLAN functionality. For example, suitable VLAN switches are commercially available from Cisco Systems, Inc. and Xtreme Networks. Similarly there are a large number of commercially available products to construct SANs, including Fibre Channel switches, SCSI-to-Fibre-Channel bridging devices, and Network Attached Storage (NAS) devices.","Control plane  is coupled by a SAN Control path, CPU Control path, and VLAN Control path to SAN switches , CPUs CPU, CPU, . . . CPUn, and VLAN Switches , respectively.","Each VSF is composed of a set of VLANs, a set of computing elements that are attached to the VLANs, and a subset of the storage available on the SAN that is coupled to the set of computing elements. The subset of the storage available on the SAN is referred to as a SAN Zone and is protected by the SAN hardware from access from computing elements that are part of other SAN zones. Preferably, VLANs that provide non-forgeable port identifiers are used to prevent one customer or end user from obtaining access to VSF resources of another customer or end user.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 3","b":["1","2","1","302","2","106","302","1","2","304","306","306"],"i":["a","b. "]},"At any given point in time, a computing element in the computing grid, such as CPU of , is only connected to the set of VLANs and the SAN zone(s) associated with a single VSF. A VSF typically is not shared among different organizations. The subset of storage on the SAN that belongs to a single SAN zone, and the set of VLANs associated with it and the computing elements on these VLANs define a VSF.","By controlling the membership of a VLAN and the membership of a SAN zone, control plane enforces a logical partitioning of the computing grid into multiple VSFs. Members of one VSF cannot access the computing or storage resources of another VSF. Such access restrictions are enforced at the hardware level by the VLAN switches, and by port-level access control mechanisms (e.g., zoning) of SAN hardware such as Fibre Channel switches and edge devices such as SCSI to Fibre Channel bridging hardware. Computing elements that form part of the computing grid are not physically connected to the control ports or interfaces of the VLAN switches and the SAN switches, and therefore cannot control the membership of the VLANs or SAN zones. Accordingly, the computing elements of the computing grid cannot access computing elements not located in the VSF in which they are contained.","Only the computing elements that run the control plane are physically connected to the control ports or interface of the devices in the grid. Devices in the computing grid (computers, SAN switches and VLAN switches) can only be configured through such control ports or interfaces. This provides a simple yet highly secure means of enforcing the dynamic partitioning of the computing grid into multiple VSFs.","Each computing element in a VSF is replaceable by any other computing element. The number of computing elements, VLANs and SAN zones associated with a given VSF may change over time under control of the control plane.","In one embodiment, the computing grid includes an Idle Pool that comprises large number of computing elements that are kept in reserve. Computing elements from the Idle Pool may be assigned to a particular VSF for reasons such as increasing the CPU or memory capacity available to that VSF, or to deal with failures of a particular computing element in a VSF. When the computing elements are configured as Web servers, the Idle Pool serves as a large \u201cshock absorber\u201d for varying or \u201cbursty\u201d Web traffic loads and related peak processing loads.","The Idle Pool is shared between many different organizations, and therefore it provides economies of scale, since no single organization has to pay for the entire cost of the Idle Pool. Different organizations can obtain computing elements from the Idle Pool at different times in the day, as needed, thereby enabling each VSF to grow when required and shrink when traffic falls down to normal. If many different organizations continue to peak at the same time and thereby potentially exhaust the capacity of the Idle Pool, the Idle Pool can be increased by adding more CPUs and storage elements to it (scalability). The capacity of the Idle Pool is engineered so as to greatly reduce the probability that, in steady state, a particular VSF may not be able to obtain an additional computing element from the Idle Pool when it needs to.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 4A","FIG. 4B","FIG. 4C","FIG. 4D","FIG. 4A","FIG. 4B"],"b":["1","2","400","402","1","400","1","404"]},"In , VSF no longer needs CPUX, and therefore the control plane moves CPUX out of VSF and back into the Idle Pool . In , VSF has developed a need for an additional computing element. Accordingly, the control plane moves CPUX from the Idle Pool  to VSF. Thus, over the course of time, as traffic conditions change, a single computing element may belong to the Idle Pool (), then be assigned to a particular VSF (), then be placed back in the Idle Pool (), and then belong to another VSF ().","At each one of these stages, the control plane configures the LAN switches and SAN switches associated with that computing element to be part of the VLANs and SAN zones associated with a particular VSF (or the Idle Pool). According to one embodiment, in between each transition, the computing element is powered down or rebooted. When the computing element is powered back up, the computing element views a different portion of storage zone on the SAN. In particular, the computing element views a portion of storage zone on the SAN that includes a bootable image of an operating system (e.g., Linux, NT, Solaris, etc.). The storage zone also includes a data portion that is specific to each organization (e.g., files associated with a Web server, database partitions, etc.). The computing element is also part of another VLAN which is part of the VLAN set of another VSF, so it can access CPUs, SAN storage devices and NAS devices associated with the VLANs of the VSF into which it has been transitioned.","In a preferred embodiment, the storage zones include a plurality of pre-defined logical blueprints that are associated with roles that may be assumed by the computing elements. Initially, no computing element is dedicated to any particular role or task such as Web server, application server, database server, etc. The role of the computing element is acquired from one of a plurality of pre-defined, stored blueprints, each of which defines a boot image for the computing elements that are associated with that role. The blueprints may be stored in the form of a file, a database table, or any other storage format that can associate a boot image location with a role.","Thus, the movements of CPUX in , , ,  are logical, not physical, and are accomplished by re-configuring VLAN switches and SAN Zones under control of The control plane. Further, each computing element in the computing grid initially is essentially fungible, and assumes a specific processing role only after it is connected in a virtual server farm and loads software from a boot image. No computing element is dedicated to any particular role or task such as Web server, application server, database server, etc. The role of the computing element is acquired from one of a plurality of pre-defined, stored blueprints, each of which is associated with a role, each of which defines a boot image for the computing elements that are associated with that role.","Since there is no long-lived state information stored in any given computing element (such as a local disk), nodes are easily moved between different VSFs, and can run completely different OS and application software. This also makes each computing element highly replaceable, in case of planned or unplanned downtime.","A particular computing element may perform different roles as it is brought into and out of various VSFs. For example, a computing element may act as a Web server in one VSF, and when it is brought into a different VSF, it may be a database server, a Web load balancer, a Firewall, etc. It may also successively boot and run different operating systems such as Linux, NT or Solaris in different VSFs. Thus, each computing element in the computing grid is fungible, and has no static role assigned to it. Accordingly, the entire reserve capacity of the computing grid can be used to provide any of the services required by any VSF. This provides a high degree of availability and reliability to the services provided by a single VSF, because each server performing a particular service has potentially thousands of back-up servers able to provide the same service.","Further, the large reserve capacity of the computing grid can provide both dynamic load balancing properties, as well as high processor availability. This capability is enabled by the unique combination of diskless computing elements interconnected via VLANs, and connected to a configurable zone of storage devices via a SAN, all controlled in real-time by the control plane. Every computing element can act in the role of any required server in any VSF, and can connect to any logical partition of any disk in the SAN. When the grid requires more computing power or disk capacity, computing elements or disk storage is manually added to the idle pool, which may decrease over time as more organizations are provided VSF services. No manual intervention is required in order to increase the number of CPUs, network and disk bandwidth and storage available to a VSF. All such resources are allocated on demand from CPU, network and disk resources available in the Idle Pool by the control plane.","A particular VSF is not subjected to manual reconfiguration. Only the computing elements in the idle pool are manually configured into the computing grid. As a result, a great potential hazard present in current manually constructed server farms is removed. The possibility that human error in configuring a new server into a live server farm can cause the server farm to malfunction, possibly resulting in loss of service to users of that Web site, is virtually eliminated.","The control plane also replicates data stored in SAN attached storage devices, so that failure of any particular storage element does not cause a loss of service to any part of the system. By decoupling long-lived storage from computing devices using SANs, and by providing redundant storage and computing elements, where any computing element can be attached to any storage partition, a high degree of availability is achieved.","A Detailed Example of Establishing a Virtual Server Farm, Adding a Processor to it, and Removing a Processor From it",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 5","FIG. 5"]},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 5","b":["502","504","504","106","1","2","506","1","5","506","1","2","508","506","504"]},"For the sake of simplicity and exposition, the number of computing elements in  is a small number. In practice, a large number of computers, e.g., thousands or more, and an equally large number of storage devices form the computing grid. In such larger structures, multiple SAN switches are interconnected to form a mesh, and multiple VLAN switches are interconnected to form a VLAN mesh. For clarity and simplicity, however,  shows a single SAN switch and a single VLAN switch.","Initially, all computers A\u2013G are assigned to the idle pool until the control plane receives a request to create a VSF. All ports of the VLAN switch are assigned to a specific VLAN which we shall label as VLAN I (for the idle zone). Assume that the control plane is asked to construct a VSF, containing one load balancer\/firewall and two Web servers connected to a storage device on the SAN. Requests to control plane may arrive through a management interface or other computing element.","In response, the control plane assigns or allocates CPU A as the load balancer\/firewall, and allocates CPUs B and C as the Web servers. CPU A is logically placed in SAN Zone , and pointed to a bootable partition on a disk that contains dedicated load balancing\/firewalling software. The term \u201cpointed to\u201d is used for convenience and is intended to indicate that CPU A is given, by any means, information sufficient to enable CPU A to obtain or locate appropriate software that it needs to operate. Placement of CPU A in SAN Zone  enables CPU A to obtain resources from disks that are controlled by the SAN of that SAN Zone.","The load balancer is configured by the control plane to know about CPUs B and C as the two Web servers it is supposed to load balance. The firewall configuration protects CPUs B and C against unauthorized access from the Internet . CPUs B and C are pointed to a disk partition on the SAN that contains a bootable OS image for a particular operating system (e.g., Solaris, Linux, NT etc) and Web server application software (e.g., Apache). The VLAN switch is configured to place ports v and v on VLAN , and ports v, v, v, v and v on VLAN . The control plane configures the SAN switch  to place Fibre-Channel switch ports s, s, s and s into SAN zone .","A description of how a CPU is pointed to a particular disk drive, and what this means for booting up and shared access to disk data, is provided further herein.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIG. 6","FIG. 6"],"b":["1","1","1","2"]},"Now, assume that because of a policy-based rule, the control plane determines that another Web server is required in VSF . This may be caused, for example, by an increased number of requests to the Web site and the customer's plan permits at least three Web servers to be added to VSF . Or it may be because the organization that owns or operates the VSF wants another server, and has added it through an administrative mechanism, such as a privileged Web page that allows it to add more servers to its VSF.","In response, the control plane decides to add CPU D to VSF . In order to do this, the control plane will add CPU D to VLAN  by adding ports v and v to VLAN . Also, CPU D's SAN port s is added to SAN zone . CPU D is pointed to a bootable portion of the SAN storage that boots up and runs as a Web server. CPU D also gets read-only access to the shared data on the SAN, which may consist of Web page contents, executable server scripts, etc. This way it is able to serve Web requests intended for the server farm much as CPUs B and C serve requests. The control plane will also configure the load balancer (CPU A) to include CPU D as part of the server set which is being load balanced.","CPU D is now booted up, and the size of the VSF has now increased to three Web servers and  load balancer.  is a block diagram of the resulting logical connectivity.","Assume that the control plane now receives a request to create another VSF, which it will name VSF , and which needs two Web servers and one load balancer\/firewall. The control plane allocates CPU E to be the load balancer\/firewall and CPUs F, G to be the Web servers. It configures CPU E to know about CPUs F, G as the two computing elements to load balance against.","To implement this configuration, the control plane will configure VLAN switch  to include port v, v in VLAN  (that is, connected to the Internet ) and ports v, v and v, v to be in VLAN . Similarly, it configures SAN switch  to include SAN ports s and s and s in SAN zone . This SAN zone includes the storage containing the software necessary to run CPU E as a load-balancer and CPUs F and G as Web servers that use a shared read-only disk partition contained in Disk D in SAN zone .",{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 8","b":["1","2","1","1","2","1"]},"Further assume that later, the control plane decides that VSF  can now fall back down to two Web servers. This may be because the temporary increase in load on VSF  has decreased, or it may be because of some other administrative action taken. In response, the control plane will shut down CPU D by a special command that may include powering down the CPU. Once the CPU has shut down, the control plane removes ports v and v from VLAN , and also removes SAN port s from SAN zone . Port s is placed in an idle SAN zone. The idle SAN zone may be designated, for example, SAN Zone I (for Idle) or Zone .","Some time later, the control plane may decide to add another node to VSF . This may be because the load on the Web servers in VSF  has temporarily increased or it may be due to other reasons. Accordingly, the control plane decides to place CPU D in VSF , as indicated by dashed path . In order to do this, it configures the VLAN switch to include ports v, v in VLAN  and SAN port s in SAN zone . CPU D is pointed to the portion of the storage on disk device  that contains a bootable image of the OS and Web server software required for servers in VSF . Also, CPU D is granted read-only access to data in a file system shared by the other Web servers in VSF . CPU D is powered back up, and it now runs as a load-balanced Web server in VSF , and can no longer access any data in SAN zone  or the CPUs attached to VLAN . In particular, CPU D has no way of accessing any element of VSF , even though at an earlier point in time it was part of VSF .","Further, in this configuration, the security perimeter enforced by CPU E has dynamically expanded to include CPU D. Thus, embodiments provide dynamic firewalling that automatically adjusts to properly protect computing elements that are added to or removed from a VSF.","For purposes of explanation, embodiments have been described herein in the context of port-based SAN zoning. Other types of SAN zoning may also be used. For example, LUN level SAN zoning may be used to create SAN zones based upon logical volumes within disk arrays. An example product that is suitable for LUN level SAN zoning is the Volume Logics Product from EMC Corporation.","Disk Devices on the SAN","There are several ways by which a CPU can be pointed to a particular device on the SAN, for booting up purposes, or for accessing disk storage which needs to be shared with other nodes, or otherwise provided with information about where to find bootup programs and data.","One way is to provide a SCSI-to-Fibre Channel bridging device attached to a computing element and a SCSI interface for the local disks. By routing that SCSI port to the right drive on the Fibre-Channel SAN, the computer can access the storage device on the Fibre-Channel SAN just as it would access a locally attached SCSI disk. Therefore, software such as boot-up software simply boots off the disk device on the SAN just as it would boot off a locally attached SCSI disk.","Another way is to have a Fibre-Channel interface on the node and associated device-driver and boot ROM and OS software that permits the Fibre-Channel interface to be used as a boot device.","Yet another way is to have an interface card (e.g., PCI bus or Sbus) which appears to be a SCSI or IDE device controller but that in turn communicates over the SAN to access the disk. Operating systems such as Solaris integrally provide diskless boot functions that can be used in this alternative.","Typically there will be two kinds of SAN disk devices associated with a given node. The first is one which is not logically shared with other computing elements, and constitutes what is normally a per-node root partition containing bootable OS images, local configuration files, etc. This is the equivalent of the root file system on a Unix system.","The second kind of disk is shared storage with other nodes. The kind of sharing varies by the OS software running on the CPU and the needs of the nodes accessing the shared storage. If the OS provides a cluster file system that allows read\/write access of a shared-disk partition between multiple nodes, the shared disk is mounted as such a cluster file system. Similarly, the system may use database software such as Oracle Parallel Server that permits multiple nodes running in a cluster to have concurrent read\/write access to a shared disk. In such cases, a shared disk is already designed into the base OS and application software.","For operating systems where such shared access is not possible, because the OS and associated applications cannot manage a disk device shared with other nodes, the shared disk can be mounted as a read-only device. For many Web applications, having read-only access to Web related files is sufficient. For example, in Unix systems, a particular file system may be mounted as read-only.","Multi-Switch Computing Grid","The configuration described above in connection with  can be expanded to a large number of computing and storage nodes by interconnecting a plurality of VLAN switches to form a large switched VLAN fabric, and by interconnecting multiple SAN switches to form a large switched SAN mesh. In this case, a computing grid has the architecture generally shown in , except that the SAN\/VLAN switched mesh contains a very large number of ports for CPUs and storage devices. A number of computing elements running the control plane can be physically connected to the control ports of the VLAN\/SAN switches, as described further below. Interconnection of multiple VLAN switches to create complex multi-campus data networks is known in this field. See, for example, G. Haviland, \u201cDesigning High-Performance Campus Intranets with Multilayer Switching,\u201d Cisco Systems, Inc., and information available from Brocade.","SAN Architecture","The description assumes that the SAN comprises Fibre-Channel switches and disk devices, and potentially Fibre-Channel edge devices such as SCSI-to-Fibre Channel bridges. However, SANs may be constructed using alternative technologies, such as Gigabit Ethernet switches, or switches that use other physical layer protocols. In particular, there are efforts currently underway to construct SANs over IP networks by running the SCSI protocol over IP. The methods and architecture described above is adaptable to these alternative methods of constructing a SAN. When a SAN is constructed by running a protocol like SCSI over IP over a VLAN capable layer  environment, then SAN zones are created by mapping them to different VLANs.","Also, Network Attached Storage (NAS) may be used, which works over LAN technologies such as fast Ethernet or Gigabit Ethernet. With this option, different VLANs are used in place of the SAN zones in order to enforce security and the logical partitioning of the computing grid. Such NAS devices typically support network file systems such as Sun's NSF protocol, or Microsoft's SNB, to allow multiple nodes to share the same storage.","Control Plane Implementation","As described herein, control planes may be implemented as one or more processing resources that are coupled to control and data ports of the SAN and VLAN switches. A variety of control plane implementations may be used and the invention is not limited to any particular control plane implementation. Various aspects of control plane implementation are described in more detail in the following sections: 1) control plane architecture; 2) master segment manager election; 3) administrative functions; and 4) policy and security considerations.","1. Control Plane Architecture","According to one embodiment, a control plane is implemented as a control process hierarchy. The control process hierarchy generally includes one or more master segment manager mechanisms that are communicatively coupled to and control one or more slave segment manager mechanisms. The one or more slave segment manager mechanisms control one or more farm managers. The one or more farm managers manage one or more VSFs. The master and slave segment manager mechanisms may be implemented in hardware circuitry, computer software, or any combination thereof.",{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 9","b":["900","902","904","902","904","904","904","906"]},"According to one embodiment, control plane  includes a master segment manager , one or more slave segment managers  and one or more farm managers . Master segment manager , slave segment managers  and farm managers  may be co-located on a particular computing platform or may be distributed on multiple computing platforms. For purposes of explanation, only a single master segment manager  is illustrated and described, however, any number of master segment managers  may be employed.","Master segment manager  is communicatively coupled to, controls and manages slave segment managers . Each slave segment manager  is communicatively coupled to and manages one or more farm managers . According to one embodiment, each farm manager  is co-located on the same computing platform as the corresponding slave segment managers  with which it is communicatively coupled. Farm managers  establish, configure and maintain VSFs  on computing grid . According to one embodiment, each farm manager  is assigned a single VSF  to manage, however, farm managers  may also be assigned multiple VSFs . Farm managers  do not communicate directly with each other, but only through their respective slave segment managers . Slave segment managers  are responsible for monitoring the status of their assigned farm managers . Slave segment managers  restart any of their assigned farm managers  that have stalled or failed.","Master segment manager  monitors the loading of VSFs  and determines an amount of resources to be allocated to each VSF . Master segment manager  then instructs slave segment managers  to allocate and de-allocate resources for VSFs  as appropriate through farm managers . A variety of load balancing algorithms may be implemented depending upon the requirements of a particular application and the invention is not limited to any particular load balancing approach.","Master segment manager  monitors loading information for the computing platforms on which slave segment managers  and farm managers  are executing to determine whether computing grid  is being adequately serviced. Master segment manager  allocates and de-allocates slave segment managers  and instructs slave segment managers  to allocate and de-allocate farm managers  as necessary to provide adequate management of computing grid . According to one embodiment, master segment manager  also manages the assignment of VSFs to farm managers  and the assignment of farm managers  to slave segment managers  as necessary to balance the load among farm managers  and slave segment managers . According to one embodiment, slave segment managers  actively communicate with master segment manager  and request changes to computing grid  and to request additional slave segment managers  and\/or farm managers . If a processing platform fails on which one or more slave segment managers  and one or more farm managers  are executing, then master segment manager  reassigns the VSFs  from the farm managers  on the failed computing platform to other farm managers . In this situation, master segment manager  may also instruct slave segment managers  to initiate additional farm managers  to handle the reassignment of VSFs . Actively managing the number of computational resources allocated to VSFs , the number of active farm managers  and slave segment managers  allows overall power consumption to be controlled. For example, to conserve power master segment manager  may shutdown computing platforms that have no active slave segment mangers  or farm managers . The power savings can be significant with large computing grids  and control planes .","According to one embodiment, master segment manager  manages slave segment managers  using a registry. The registry contains information about current slave segment managers  such as their state and assigned farm managers  and assigned VSFs . As slave segment managers  are allocated and de-allocated, the registry is updated to reflect the change in slave segment managers . For example, when a new slave segment manager  is instantiated by master segment manager  and assigned one or more VSFs , the registry is updated to reflect the creation of the new slave segment manager  and its assigned farm managers  and VSFs . Master segment manager  may then periodically examine the registry to determine how to best assign VSFs  to slave segment managers .","According to one embodiment, the registry contains information about master segment manager  that can be accessed by slave segment managers . For example, the registry may contain data that identifies one or more active master segment managers  so that when a new slave segment manager  is created, the new slave segment manager  may check the registry to learn the identity of the one or more master segment managers .","The registry may be implemented in many forms and the invention is not limited to any particular implementation. For example, the registry may be a data file stored on a database  within control plane . The registry may instead be stored outside of control plane . For example, the registry may be stored on a storage device in computing grid . In this example, the storage device would be dedicated to control plane  and not allocated to VSFs .","2. Master Segment Manager Election","In general, a master segment manager is elected when a control plane is established or after a failure of an existing master segment manager. Although there is generally a single master segment manager for a particular control plane, there may be situations where it is advantageous to elect two or more master segment managers to co-manage the slave segment managers in the control plane.","According to one embodiment, slave segment managers in a control plane elect a master segment manager for that control plane. In the simple case where there is no master segment manager and only a single slave segment manager, then the slave segment manager becomes the master segment manager and allocates additional slave segment managers as needed. If there are two or more slave segment managers, then the two or more slave processes elect a new master segment manager by vote, e.g., by a quorum.","Since slave segment managers in a control plane are not necessarily persistent, particular slave segment managers may be selected to participate in a vote. For example, according to one embodiment, the register includes a timestamp for each slave segment manager that is periodically updated by each slave segment manager. The slave segment managers with timestamps that have been most recently updated, as determined according to specified selection criteria, are most likely to still be executing and are selected to vote for a new master segment manager. For example, a specified number of the most recent slave segment managers may be selected for a vote.","According to another embodiment, an election sequence number is assigned to all active slave segment managers and a new master segment manager is determined based upon the election sequence numbers for the active slave segment managers. For example, the lowest or highest election sequence number may be used to select a particular slave segment manager to be the next (or first) master segment manager.","Once a master segment manager has been established, the slave segment managers in the same control plane as the master segment manager periodically perform a health check on the master segment manager by contacting (ping) the current master segment manager to determine whether the master segment manager is still active. If a determination is made that the current master segment manager is no longer active, then a new master segment manager is elected.",{"@attributes":{"id":"p-0130","num":"0129"},"figref":"FIG. 10","b":["1000","1002","1004","1004","1004","1002","1006"]},"In state , an active slave segment manager list is obtained and control proceeds to state . In state , a check is made to determine whether other slave segment managers have also not received a response from the master segment manager. Instead of sending messages to slave segment managers to make this determination, this information may be obtained from a database. If the slave segment managers do not agree that master segment manager is no longer active, i.e., one or more of the slave segment managers received a timely response from the master segment manager, then it is presumed that the current master segment manager is still active and control returns to state . If a specified number of the slave segment managers have not received a timely response from the current master segment manager, then it is assumed that the current master segment manager is \u201cdead\u201d, i.e., no longer active, and control proceeds to state .","In state , the slave segment manager that initiated the process retrieves a current election number from an election table and the next election number from a database. The slave segment manager then updates the election table to include an entry that specifies the next election number and a unique address into a master election table. Control then proceeds to state  where the slave segment manager reads the lowest sequence number for the current election number. In state , a determination is made whether the particular slave segment manager has the lowest sequence number. If not, then control returns to state . If so, then control proceeds to state  where the particular slave segment manager becomes the master segment manager. Control then proceeds to state  where the election number is incremented.","As described above, slave segment managers are generally responsible for servicing their assigned VSFs and allocating new VSFs in response to instructions from the master segment manager. Slave segment managers are also responsible for checking on the master segment manager and electing a new master segment manager if necessary.",{"@attributes":{"id":"p-0134","num":"0133"},"figref":"FIG. 11","b":["1100","1102","1102","1104","1104","1106","1106","1106","1102"]},"In state  if no timely master response is received, then control proceeds to state . In state , a message is broadcast to other slave segment managers to indicate that the master segment manager did not respond to the ping. Control then returns to start state . Note that if a sufficient number of slave segment managers do not receive a response from the current master segment manager, then a new master segment manager is elected as described herein.","From start state , control proceeds to state  upon receipt of a request from the master segment manager to restart a VSF. In state , a VSF is restarted and control returns to start state .","As described above, a master segment manager is generally responsible for ensuring that VSFs in the computing grid controlled by the master segment manager are adequately serviced by one or more slave segment managers. To accomplish this, the master segment manager performs regular health checks on all slave segment managers in the same control plane as the master segment manager. According to one embodiment, master segment manager  periodically requests status information from slave segment managers . The information may include, for example, which VSFs  are being serviced by slave segment managers . If a particular slave segment manager  does not respond in a specified period of time, master segment manager  attempts to restart the particular slave segment manager . If the particular slave segment manager  cannot be restarted, then master segment manager  reassigns the farm managers  from the failed slave segment manager  to another slave segment manager . Master segment manager  may then instantiate one or more additional slave segment managers  to re-balance the process loading. According to one embodiment, master segment manager  monitors the health of the computing platforms on which slave segment managers  are executing. If a computing platform fails, then master segment manager  reassigns the VSFs assigned to farm managers  on the failed computing platform to farm managers  on another computing platform.",{"@attributes":{"id":"p-0138","num":"0137"},"figref":"FIG. 12","b":["1200","1202","1202","1204","908","910","902","1204","910","1202","910","908","910","910","910","1206"]},"In state , master segment manager  attempts to restart the failed slave segment managers . This may be accomplished in several ways. For example, master segment manager  may send a restart message to a non-responsive or failed slave segment manager . From state , if all slave segment managers  respond as expected, i.e., have been successfully restarted, then control returns to state . For example, when a failed slave segment manager  is successfully restarted, the slave segment manager  sends a restart confirmation message to master segment manager . From state , if one or more slave segment managers have not been successfully restarted, then control proceeds to state . This situation may occur if master segment manager  does not receive a restart confirmation message from a particular slave segment manager .","In state , master segment manager  determines the current loading of the machines on which slave segment managers  are executing. To obtain the slave segment manager  loading information, master segment manager  polls slave segment managers  directly or obtains the loading information from another location, for example from database . The invention is not limited to any particular approach for master segment manager  to obtain the loading information for slave segment managers .","Control then proceeds to state  where the VSFs  assigned to the failed slave segment managers  are re-assigned to other slave segment managers . The slave segment managers  to which the VSFs  are assigned inform master segment manager  when the reassignment has been completed. For example, slave segment managers  may send a reassignment confirmation message to master segment manager  to indicate that the reassignment of VSFs  has been successfully completed. Control remains in state  until reassignment of all VSFs  associated with the failed slave segment managers  has been confirmed. Once confirmed, control returns to state .","Instead of reassigning VSFs  associated with a failed slave segment manager  to other active slave segment managers , master segment manager  may allocate additional slave segment managers  and then assign those VSFs  to the new slave segment managers . The choice of whether to reassign VSFs  to existing slave segment managers  or to new slave segment managers  depends, at least in part, on latencies associated with allocating new slave segment managers  and latencies associated with reassigning VSFs  to an existing slave segment manager . Either approach may be used depending upon the requirements of a particular application and the invention is not limited to either approach.","3. Administrative Functions","According to one embodiment, control plane  is communicatively coupled to a global grid manager. Control plane  provides billing, fault, capacity, loading and other computing grid information to the global grid manager.  is a block diagram  that illustrates the use of a global grid manager according to an embodiment.","In , a computing grid  is partitioned into logical portions called grid segments . Each grid segment  includes a control plane  that controls and manages a data plane . In this example, each data plane  is the same as the computing grid  of , but are referred to as \u201cdata planes\u201d to illustrate the use of a global grid manager to manage multiple control planes  and data planes , i.e., grid segments .","Each grid segment is communicatively coupled to a global grid manager . Global grid manager , control planes  and computing grids  may be co-located on a single computing platform or may be distributed across multiple computing platforms and the invention is not limited to any particular implementation.","Global grid manager  provides centralized management and services for any number of grid segments . Global grid manager  may collect billing, loading and other information from control planes  used in a variety of administrative tasks. For example, the billing information is used to bill for services provided by computing grids .","4. Policy and Security Considerations","As described herein, a slave segment manager in a control plane must be able to communicate with its assigned VSFs in a computing grid. Similarly, VSFs in a computing grid must be able to communicate with their assigned slave segment manager. Further, VSFs in a computing grid must not be allowed to communicate with each other to prevent one VSF from in any way causing a change in the configuration of another VSF. Various approaches for implementing these policies are described hereinafter.",{"@attributes":{"id":"p-0150","num":"0149"},"figref":"FIG. 14","b":["1400","1","1402","1","1404","1406","1406","1","2","1408","1408","1402","1404","1408"]},{"@attributes":{"id":"p-0151","num":"0150"},"figref":"FIG. 15","b":["1500","1","2","1502","502","1504","1502","1504","502","1502","1502","1506","1506","17","504","1508","1502","502"]},{"@attributes":{"id":"p-0152","num":"0151"},"figref":"FIG. 16","b":["1600","1602","1","2","1","2","1602","1","2","1604"]},"SAN mesh  includes SAN ports So, Sp that are communicatively coupled to storage devices  that contain data that is private to control plane . Storage devices  are depicted in  as disks for purposes of explanation. Storage devices  may be implemented by any type of storage medium and the invention is not limited to any particular type of storage medium for storage devices . Storage devices  are logically located in a control plane private storage zone . Control plane private storage zone  is an area where control plane  maintains log files, statistical data, current control plane configuration information and software that implements control plane . SAN ports So, Sp are only part of the control plane private storage zone and are never placed on any other SAN zone so that only computing elements in control plane  can access the storage devices . Furthermore, ports S, S through Sn, So and Sp are in a control plane SAN zone that may only be communicatively coupled to computing elements in control plane . These ports are not accessible by computing elements in VSFs (not illustrated).","According to one embodiment, when a particular computing element CP CPU, CP CPU through CP CPUn needs to access a storage device, or a portion thereof, that is part of a particular VSF, the particular computing element is placed into the SAN zone for the particular VSF. For example, suppose that computing element CP CPU  needs to access VSFi disks . In this situation, port s, which is associated with control plane CP CPU , is placed in the SAN zone of VSFi, which includes port Si. Once computing element CP CPU is done accessing the VSFi disks  on port Si, computing element CP CPU is removed from the SAN zone of VSFi.","Similarly, suppose computing element CP CPU  needs to access VSFj disks . In this situation, computing element CP CPU is placed in the SAN zone associated with VSFj. As a result, port S is placed in the SAN zone associated with VSFj, which includes the zone containing port Sj. Once computing element CP CPU is done accessing the VSFj disks  connected to port Sj, computing element CP CPU is removed from the SAN zone associated with VSFj. This approach ensures the integrity of control plane computing elements and the control plane storage zone  by tightly controlling access to resources using tight SAN zone control.","As previously described, a single control plane computing element may be responsible for managing several VSFs. Accordingly, a single control plane computing element must be capable of manifesting itself in multiple VSFs simultaneously, while enforcing firewalling between the VSFs according to policy rules established for each control plane. Policy rules may be stored in database  () of each control plane or implemented by central segment manager  ().","According to one embodiment, tight binding between VLAN tagging and IP addresses are used to prevent spoofing attacks by a VSF since (physical switch) port-based VLAN tags are not spoofable. An incoming IP packet on a given VLAN interface must have the same VLAN tag and IP address as the logical interface on which the packet arrives. This prevents IP spoofing attacks where a malicious server in a VSF spoofs the source IP address of a server in another VSF and potentially modifies the logical structure of another VSF or otherwise subverts the security of computing grid functions. Circumventing this VLAN tagging approach requires physical access to the computing grid which can be prevented using high security (Class A) data centers.","A variety of network frame tagging formats may be used to tag data packets and the invention is not limited to any particular tagging format. According to one embodiment, IEEE 802.1q VLAN tags are used, although other formats may also be suitable. In this example, a VLAN\/IP address consistency check is performed at a subsystem in the IP stack where 802.1q tag information is present to control access. In this example, computing elements are configured with a VLAN capable network interface card (NIC) in a manner that allows the computing elements to be communicatively coupled to multiple VLANs simultaneously.",{"@attributes":{"id":"p-0159","num":"0158"},"figref":"FIG. 17","b":["1700","1702","1704","1","2","1706","1708","1710","1706","1712","1714","1","2","1706"]},"A Wide Area Computing Grid","The VSF described above can be distributed over a WAN in several ways.","In one alternative, a wide area backbone may be based on Asynchronous Transfer Mode (ATM) switching. In this case, each local area VLAN is extended into a wide area using Emulated LANs (ELANs) which are part of the ATM LAN Emulation (LANE) standard. In this way, a single VSF can span across several wide area links, such as ATM\/SONET\/OC-12 links. An ELAN becomes part of a VLAN which extends across the ATM WAN.","Alternatively, a VSF is extended across a WAN using a VPN system. In this embodiment, the underlying characteristics of the network become irrelevant, and the VPN is used to interconnect two or more VSFs across the WAN to make a single distributed VSF.","Data mirroring technologies can be used in order to have local copies of the data in a distributed VSF. Alternatively, the SAN is bridged over the WAN using one of several SAN to WAN bridging techniques, such as SAN-to-ATM bridging or SAN-to-Gigabit Ethernet bridging. SANs constructed over IP networks naturally extend over the WAN since IP works well over such networks.",{"@attributes":{"id":"p-0165","num":"0164"},"figref":"FIG. 18"},"Example Uses of VSFs","The VSF architecture described in the examples above may be used in the context of Web server system. Thus, the foregoing examples have been described in terms of Web servers, application servers and database servers constructed out of the CPUs in a particular VSF. However, the VSF architecture may be used in many other computing contexts and to provide other kinds of services; it is not limited to Web server systems.\u2014","\u2014A Distributed VSF as Part of a Content Distribution Network","In one embodiment, a VSF provides a Content Distribution Network (CDN) using a wide area VSF. The CDN is a network of caching servers that performs distributed caching of data. The network of caching servers may be implemented, for example, using TrafficServer (TS) software commercially available from Inktomi Corporation, San Mateo, Calif. TS is a cluster aware system; the system scales as more CPUs are added to a set of caching Traffic Server computing elements. Accordingly, it is well suited to a system in which adding CPUs is the mechanism for scaling upwards.","In this configuration, a system can dynamically add more CPUs to that portion of a VSF that runs caching software such as TS, thereby growing the cache capacity at a point close to where bursty Web traffic is occurring. As a result, a CDN may be constructed that dynamically scales in CPU and I\/O bandwidth in an adaptive way.","\u2014A VSF for Hosted Intranet Applications","There is growing interest in offering Intranet applications such as Enterprise Resource Planning (ERP), ORM and CRM software as hosted and managed services. Technologies such as Citrix WinFrame and Citrix MetaFrame allow an enterprise to provide Microsoft Windows applications as a service on a thin client such as a Windows CE device or Web browser. A VSF can host such applications in a scalable manner.","For example, the SAP R\/3 ERP software, commercially available from SAP Aktiengesellschaft of Germany, allows an enterprise to load balance using multiple Application and Database Servers. In the case of a VSF, an enterprise would dynamically add more Application Servers (e.g., SAP Dialog Servers) to a VSF in order to scale up the VSF based on real-time demand or other factors.","Similarly, Citrix Metaframe allows an enterprise to scale up Windows application users on a server farm running the hosted Windows applications by adding more Citrix servers. In this case, for a VSF, the Citrix MetaFrame VSF would dynamically add more Citrix servers in order to accommodate more users of Metaframe hosted Windows applications. It will be apparent that many other applications may be hosted in a manner similar to the illustrative examples described above.\u2014","\u2014Customer Interaction With a VSF","Since a VSF is created on demand, a VSF customer or organization that \u201cowns\u201d the VSF may interact with the system in various ways in order to customize a VSF. For example, because a VSF is created and modified instantly via the control plane, the VSF customer may be granted privileged access to create and modify its VSF itself. The privileged access may be provided using password authentication provided by Web pages and security applications, token card authentication, Kerberos exchange, or other appropriate security elements.","In one exemplary embodiment, a set of Web pages are served by the computing element, or by a separate server. The Web pages enable a customer to create a custom VSF, by specifying a number of tiers, the number of computing elements in a particular tier, the hardware and software platform used for each element, and things such as what kind of Web server, application server, or database server software should be pre-configured on these computing elements. Thus, the customer is provided with a virtual provisioning console.","After the customer or user enters such provisioning information, the control plane parses and evaluates the order and queues it for execution. Orders may be reviewed by human managers to ensure that they are appropriate. Credit checks of the enterprise may be run to ensure that it has appropriate credit to pay for the requested services. If the provisioning order is approved, the control plane may configure a VSF that matches the order, and return to the customer a password providing root access to one or more of the computing elements in the VSF. The customer may then upload master copies of applications to execute in the VSF.","When the enterprise that hosts the computing grid is a for-profit enterprise, the Web pages may also receive payment related information, such as a credit card, a PO number, electronic check, or other payment method.","In another embodiment, the Web pages enable the customer to choose one of several VSF service plans, such as automatic growth and shrinkage of a VSF between a minimum and maximum number of elements, based on real-time load. The customer may have a control value that allows the customer to change parameters such as minimum number of computing elements in a particular tier such as Web servers, or a time period in which the VSF must have a minimal amount of server capacity. The parameters may be linked to billing software that would automatically adjust the customer's bill rate and generate billing log file entries.","Through the privileged access mechanism the customer can obtain reports and monitor real-time information related to usage, load, hits or transactions per second, and adjust the characteristics of a VSF based on the real-time information. It will be apparent that the foregoing features offer significant advantages over conventional manual approaches to constructing a server farm. In the conventional approaches, a user cannot automatically influence server farm's properties without going through a cumbersome manual procedure of adding servers and configuring the server farm in various ways.\u2014","\u2014Billing Models for a VSF","Given the dynamic nature of a VSF, the enterprise that hosts the computing grid and VSFs may bill service fees to customers who own VSFs using a billing model for a VSF which is based on actual usage of the computing elements and storage elements of a VSF. It is not necessary to use a flat fee billing model. The VSF architecture and methods disclosed herein enable a \u201cpay-as-you-go\u201d billing model because the resources of a given VSF are not statically assigned. Accordingly, a particular customer having a highly variable usage load on its server farm could save money because it would not be billed a rate associated with constant peak server capacity, but rather, a rate that reflects a running average of usage, instantaneous usage, etc.","For example, an enterprise may operate using a billing model that stipulates a flat fee for a minimum number of computing elements, such as 10 servers, and stipulates that when real-time load requires more than 10 elements, then the user is billed at an incremental rate for the extra servers, based on how many extra servers were needed and for the length of time that they are needed. The units of such bills may reflect the resources that are billed. For example, bills may be expressed in units such as MIPS-hours, CPU-hours, thousands of CPU seconds, etc.","\u2014A Customer Visible Control Plane API","In another alternative, the capacity of a VSF may be controlled by providing the customer with an application programming interface (API) that defines calls to the control plane for changing resources. Thus, an application program prepared by the customer could issue calls or requests using the API to ask for more servers, more storage, more bandwidth, etc. This alternative may be used when the customer needs the application program to be aware of the computing grid environment and to take advantage of the capabilities offered by the control plane.","Nothing in the above-disclosed architecture requires the customer to modify its application for use with the computing grid. Existing applications continue to work as they do in manually configured server farms. However, an application can take advantage of the dynamism possible in the computing grid, if it has a better understanding of the computing resources it needs based on the real-time load monitoring functions provided by the control plane. An API of the foregoing nature, which enables an application program to change the computing capacity of a server farm, is not possible using existing manual approaches to constructing a server farm.","\u2014Automatic Updating and Versioning","Using the methods and mechanisms disclosed herein, the control plane may carry out automatic updating and versioning of operating system software that is executed in computing elements of a VSF. Thus, the end user or customer is not required to worry about updating the operating system with a new patch, bug fix, etc. The control plane can maintain a library of such software elements as they are received and automatically distribute and install them in computing elements of all affected VSFs.","Request Queue Management",{"@attributes":{"id":"p-0191","num":"0190"},"figref":"FIG. 19","b":["1900","1902","1904","1906","1902","1904","1906","1902","1904","1906"]},"To have work performed on its behalf, client  conventionally generates and sends a request  to server  over link . Server  processes the request and performs the requested operations. Server  typically maintains state information throughout the processing of request . Server  may also generate and provide a response , e.g., work results, to client over link . Various mechanisms have traditionally been used to implement this approach, for example, remote method invocation (RMI) and remote procedure calls (RPCs).","One significant drawback with these approaches is that a failure of server  can cause request  to be lost. Additionally, any state information maintained by server  may also be lost, resulting in any work performed by server  also being lost. Thus, in many situations, client  will have to submit request  to another server to be completely processed again. Another drawback with these approaches is they do not provide for human intervention in the processing of work requests. For example, it may be desirable to allow the processing of a request to be conditioned upon operator approval. As another example, in the context of data center operations, it may be desirable to not process a request until an operator has an opportunity to reconfigure a VSF.","A. Queue Architecture",{"@attributes":{"id":"p-0195","num":"0194"},"figref":"FIG. 20","b":["2000","2002","2004","2006","2008","2010","2002","2006","2006","2004","2004","2006","2006","2002"]},"For purposes of explanation, arrangement  depicts only a single client , server  and queue , although the invention is applicable to any number of clients, servers and queues. Links ,  may be implemented by any medium or mechanism that provides for the exchange of data between client  and queue  (for link ) and between queue  and server  (for link ). Examples of links ,  include, without limitation, a network such as a Local Area Network (LAN), Wide Area Network (WAN), Ethernet or the Internet, or one or more terrestrial, satellite or wireless links.","Queue  may be co-located on the same node with client  or server , or may be located on a different node than client  and server , e.g., in a distributed computing environment, depending upon the requirements of a particular application. Furthermore, queue  may be implemented as part of client  or server . Queue  may be implemented by any combination of mechanisms or processes to achieve the desired functionality. For example, queue  may be implemented as a set of one or more database tables in a database management system. According to one embodiment, queue  is a persistent queuing mechanism implemented in computer hardware, computer software, or any combination of computer hardware and software. The persistency characteristic of queue  may be provided by a variety of implementations and the invention is not limited to any particular implementation. For example, queue  may be implemented using redundant storage devices, such as mirrored disks. According to one embodiment, queue  is implemented as a persistent database management system.","In operation, queue  manages a set of one or more requests , depicted in  as R, R through Rn. As requests are received from client , queue  stores the requests. Queue  periodically selects stored requests and provides the selected requests to server  for processing. Requests  may be selected for processing using different approaches, depending upon the requirements of a particular application, and the invention is not limited to any particular approach. For example, a first-in-first-out (FIFO) or first-in-last-out (FILO) approach may be used. Alternatively, one or more selection criteria may be used to select a request  to be processed. The selection criteria may include, for example, a priority attribute associated with each request .","B. Request Blocking","According to one embodiment, a request includes an attribute that requires some type of human intervention before processing of the request is permitted. The particular type of human intervention required may vary depending upon the requirements of a particular application and the invention is not limited to any particular type of human intervention. For example, human intervention may be required to approve a request before the request is processed. As another example, human intervention may be required to change a particular computer hardware or software configuration to allow the request to be completely processed. Thus, processing of the request is blocked until the required human intervention is satisfied.","Consider the following example. Suppose that client  submits to queue  over link  a request R to perform specified work. Queue  stores request R with the other requests . Queue  selects requests  for processing according to the particular selection mechanism employed. Suppose that request R is selected for processing. According to one embodiment, queue  determines whether request R includes any attributes that require human intervention before request R is processed. In this situation, request R includes an attribute that requires an operator to establish a particular configuration or condition before request R can be processed. Notification to queue  that the required operator intervention is complete may take many forms depending upon the requirements of a particular application. For example, the operator may actuate a physical switch on a console or select an object on a graphical user interface (GUI) to indicate that the operator intervention has been completed. Once the operator intervention is complete, queue  provides request R to server  for processing. After processing request R, server  may provide results of processing request R to queue , that are in turn provided back to client .","According to one embodiment, all request processing is suspended until the required human intervention is satisfied, not just the request having the attribute that requires human intervention. Thus, in the prior example, the processing of all requests  in queue  is suspended until the required human intervention is satisfied. A timeout or other similar mechanism may be employed to prevent an unsatisfied condition from permanently blocking queue . For example, after the expiration of a specified period of time without a particular condition being satisfied for request R, request R is removed from queue  and a message is sent to client  indicating that the required condition cannot be satisfied and that the request cannot be processed. In this situation, queue  then processes other requests .","C. Queue Tables",{"@attributes":{"id":"p-0204","num":"0203"},"figref":"FIG. 21","b":["2100","2006","2100","2006","2102","2104","2106","2100","2102","1","1","1","1"]},"D. Example Applications","The aforementioned queuing model for processing requests has many applications. One such application is as a persistent inter-process communications service for use in virtual server farm (VSF) arrangements described herein. For example, referring to , the queuing model may be used to provide communications between entities in control plane . As another example, the queuing model may be used to provide communications between entities in control plane  and entities in computing grid . In this context, queue  may be implemented as part of control plane , as part of computing grid , or as a separate mechanism apart from control plane  and computing grid .","Consider the following example. Suppose that master segment manager  monitors the load of a particular VSF  and determines that additional resources are needed for the particular VSF . Specifically, master segment manager  determines that an additional server and an additional disk that is a copy of an existing disk should be allocated for the particular VSF . Master segment manager  generates a request for slave segment manager  to allocate the additional server and disk to the particular VSF . In some situations, the request may contain all data and methods required to process the data. In the present example, the request may contain all data and methods necessary to allocate the additional server and disk to the particular VSF . Master segment manager  sends the request to queue . Queue  generates an entry for the request and stores the entry in queue table .","When the entry is selected for processing according to the particular selection mechanism employed, queue  determines whether the entry requires human intervention before the entry can be processed. This may be determined by inspection of the attributes stored in the entry. For example, if request R is selected for processing, then queue  examines attributes ATTR for entry  to determine whether human intervention is required before request R can be completely processed. In the present example, an instant data center operator may need to prepare computing grid  so that the additional server and disk can be added to the particular VSF . As another example, the instant data center operator may need to approve the additional server and disk allocation. As described herein, the request is not provided to slave segment manager  until the required human intervention is completed. In addition, processing of other requests from queue table  may also be suspended pending the completion of the required human intervention.","Once the required human intervention is completed, or if no human intervention was required, queue  provides the request to slave segment manager . Alternatively, slave segment manager  may periodically poll queue  to determine that the request is ready for processing. Slave segment manager  performs the steps necessary to cause the additional server and disk to be allocated to the particular VSF . Once the additional server and disk have been successfully allocated to the particular VSF , slave segment manager  may generate a reply message to master segment manger  to indicate the changed status. Slave segment manager  sends the reply to queue  and queue  generates an entry in queue table  for the reply message. Again, when the reply message is ready for processing, queue  determines whether any human intervention is required before the reply message can be processed. If so, then the required human intervention is performed and queue  provides the reply message to master segment manager .","In the foregoing example, the use of queue  as an inter-process communication mechanism was described with respect to communications between master segment manager  and slave segment manager . To have the additional server and disk added to the particular VSF , slave segment manager  instructs the farm manager  responsible for the particular VSF  to add the additional server and disk. The communications between slave segment manager  and the farm manager  responsible for the particular VSF  may also be facilitated using queue . Thus, the queuing model described herein may be used to facilitate communications between any elements in control plane , or between elements in control plane  and computing grid .","The persistency characteristics of the present approach provide several advantages over prior approaches. Since queue  and queue table  may be implemented using persistent mechanisms, requests and state information are not lost if a particular element in control plane  fails. In the prior example, if the slave segment manager  processing the request to add a server and disk fails, then master segment manager  can modify the request in queue  or otherwise request queue  to have the request processed by a different slave segment manager .",{"@attributes":{"id":"p-0212","num":"0211"},"figref":"FIG. 22","b":["2200","908","910","906","2202","908","2006","2008","910","906"]},"In block , queue  receives the request and creates a new entry in queue table  for the request. In block , the request is selected for processing. This may be determined, for example, based upon the priority of the request, or some other selection mechanism.","In block , a determination is made whether the request requires human intervention. If so, then in block , processing of the request is suspended until the required human intervention is satisfied. As described previously, human intervention may be required, for example, to approve the new configuration for the particular VSF , or to actually implement the new configuration for the particular VSF . According to one embodiment of the invention, the processing of other requests contained in queue  is also suspended pending the completion of the required human intervention. Once the required human intervention is satisfied, then control proceeds to block . As previously described herein, safeguards such as a timeout or failsafe may be employed to ensure that control is permanently blocked by a required human intervention not being satisfied.","In block , queue  provides the request from queue table  to slave segment manager . This may be done by queue  autonomously, or may be provided in response to a request by slave segment manager .","In step  slave segment manager  processes the request by causing the additional server and disk to be added to the particular VSF . As previously described, this may involve slave segment manager  instructing the farm manager  responsible for the particular VSF  to add the additional server and disk.","In block , if a reply is to be provided, then slave segment manager  generates and provides a reply to queue . In step , the reply is then processed and the results provided to master segment manager . As is illustrated by this example, the queuing model can be used to provide persistent bi-directional inter-process or inter-mechanism communications.","Implementation Mechanisms","The computing elements and control plane may be implemented in several forms and the invention is not limited to any particular form. In one embodiment, each computing element is a general purpose digital computer having the elements shown in  except for nonvolatile storage device , and the control plane is a general purpose digital computer of the type shown in  operating under control of program instructions that implement the processes described herein.",{"@attributes":{"id":"p-0220","num":"0219"},"figref":"FIG. 23","b":["2300","2300","2302","2304","2302","2300","2306","2302","2304","2306","2304","2300","2308","2302","2304","2310","2302"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for processing requests for work to be performed. According to one embodiment of the invention, the processing of requests for work to be performed is provided by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. One or more processors in a multi-processing arrangement may also be employed to execute the sequences of instructions contained in main memory . In alternative embodiments, hardwired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio wave and infrared data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector coupled to bus  can receive the data carried in the infrared signal and place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the worldwide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . In accordance with the invention, one such downloaded application provides for the processing of requests for work to be performed as described herein.","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","The computing grid disclosed herein may be compared conceptually to the public electric power network that is sometimes called the power grid. The power grid provides a scalable means for many parties to obtain power services through a single wide-scale power infrastructure. Similarly, the computing grid disclosed herein provides computing services to many organizations using a single wide-scale computing infrastructure. Using the power grid, power consumers do not independently manage their own personal power equipment. For example, there is no reason for a utility consumer to run a personal power generator at its facility, or in a shared facility and manage its capacity and growth on an individual basis. Instead, the power grid enables the wide-scale distribution of power to vast segments of the population, thereby providing great economies of scale. Similarly, the computing grid disclosed herein can provide computing services to vast segments of the population using a single wide-scale computing infrastructure.","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":"200"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 4A","FIG. 4B","FIG. 4C","FIG. 4D"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 23"}]},"DETDESC":[{},{}]}
