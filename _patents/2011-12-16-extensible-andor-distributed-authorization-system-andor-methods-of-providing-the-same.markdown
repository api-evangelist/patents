---
title: Extensible and/or distributed authorization system and/or methods of providing the same
abstract: In certain example embodiments, an extensible and/or distributed security system is provided. In certain example embodiments the security system provides authorization to a resource of a first application. In the first application, a security context is created and a client is authenticated to the first application. A request is accepted in the first application to access at least one resource. The first application communicates with an authorization application to determine authorization to the at least one resource. In the authorization application, an authorization process is executed which communicates with another application that defines a step of the authorization process for this resource. Based on that step, it is determined whether the first application allows access to the at least one resource for the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09449185&OS=09449185&RS=09449185
owner: SOFTWARE AG
number: 09449185
owner_city: Darmstadt
owner_country: DE
publication_date: 20111216
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND AND SUMMARY OF EXAMPLE EMBODIMENTS OF THE INVENTION","DETAILED DESCRIPTION OF EXAMPLE EMBODIMENTS OF THE INVENTION"],"p":["Certain example embodiments described herein relate to extensible and\/or distributed security systems. More particularly, certain example embodiments relate to extensible and\/or distributed authorization techniques for use in connection with computer systems.","Computer applications are becoming increasingly prevalent in society. Pencil and paper, mechanical systems, and others have been replaced by electronics that are controlled by computer programs. These computer applications now handle financial information, automobile assembly processes, power systems, and many other types of functionality, systems, and processes.","At a basic level, computer applications include processes (e.g., approval of a financial transaction, steering of a robotic arm in an automobile assembly line) and data (e.g., how much is a transaction, who will approve a transaction, coordinates and\/or velocity for how a robotic arm moves). With such applications both the processes that operate and the data that is being operated on are of value and should be protected.","As the prevalence of computer applications has grown, the need for techniques to secure such applications also has grown. Security can be broken down into two sub-disciples, namely, authentication and authorization.","Authentication may be performed to verify that the person (or process) is who it says it is. For example, a person that logs into a website authenticates that that person is that user. This is a fairly straightforward form of authentication, as it may be possible that the person logging in is not, in fact, the person \u201cassociated\u201d with that account. Accordingly, more stringent forms of authentication may be employed (e.g., such as 2-factor authentication) in order to increase the reliability that the person is who he\/she says he\/she is.","A second aspect of security is called authorization, which may be used to grant access to resources (e.g., processes, data, etc.). One element of authorization that relates to how such access is granted is known as a security context. Security contexts can include information related to the user, assigned roles, permission data that may be provided when the user authenticates, etc. These contexts can then be used to determine whether the user (or other entity) associated with the context is authorized to interact with a given piece of data (or process).","Given that determining what users (and their associated contexts) can access may be application-specific for the resources involved, in certain instances it may not be possible to provide an abstract authorization scheme (e.g., a framework). A newly developed application may include application-specific logic regarding how\/what users or objects can access or view the processes and data of the application. For example, in a cluster of applications in a cloud computing scenario, the applications that are sharing data may not have knowledge of other algorithms, processes, etc., that facilitate authorization of the use (or view) of such data.","Some existing frameworks work with authentication and authorization, for example:","1) Spring Security (formerly Acegi): The Spring framework provides first class collaboration with other parts of the Spring framework, a dependency injection pattern, and aspect oriented programming facilities. Both authentication and authorization capabilities on top of them are provided. Both are declarative (with XML) and stored in LDAP, RDBMS, or XML files. Authorization uses Access Control Lists (ACL). The ACLs are stored within client databases in a preconfigured schema that are installed on behalf of the customer. Authorization is implemented by annotating a method or calling the authorization API inside a method directly. The security context is provided through a static method and stored inside a thread local variable for distinction. This behavior sets a prerequisite that one request is always processed with one thread. The synchronization sink is the database, which means every application could read these ACLs and doing authorization.","2) JEE security: JEE includes the Java Authentication and Authorization Service (JAAS) based credentials that are managed by a central container. The credentials include users and roles and are used for authorization through programmatic or annotation techniques. An authorization property file is provided which holds entries written in a domain specific language (DSL) that describes granting rules of assets with a predefined permission set. The rules are applied declaratively and executed automatically through the provided security manager inside the containers.","3) Apache Shiro: This framework provides authorization on a permission level. Users can describe permissions, store the permissions as properties of the user, apply them on assets, and check whether access could be granted by matching the user defined permissions with the permissions defined on the assets.","These traditional solutions try to solve the authentication and authorization problems for simple and perhaps the most common requirements in a single application.","However, the above (and other) techniques may have one or more disadvantages in providing application security:","1) In certain instances, XML configuration and static ACL tables in an RDBMS maybe somewhat less flexible and may not be extensible. The permissions may be more static or fixed and not as flexible to define. Even though a user may configure the checking policies of an authorization flow, extension of the authorization flow may be impossible.","2) In certain instances, the credentials may include principals (users) and roles. This role-based approach may be too restrictive on the authorization process and may not support some common use cases. Further, the property file may be static and not able to be extended by other component at runtime to provide extensible authorization extensions.","3) In certain instances, the permission may be static checks that only define whether the permission matches or does not. Further, there may be no extensible, interpreted rules that may be contributed from other components\/applications\/systems.","Thus, it will be appreciated that there is a need in the art for improved techniques of providing security to applications in, for example, a business or technical process environment in which multiple processes and\/or applications communicate with one another. Certain example embodiments may provide functionality for registering extensions to authorization checks and\/or may provide distributed authorization checks for security in a non-application specific way and in conjunction with application-specific security.","In certain example embodiments, an authorization system is provided that allows for flexibility of how authorization for a given resource takes place. In certain example embodiments, the authorization system provides extension points that allow abstraction with respect to the component that implements the authorization rules for an implemented component. Accordingly, certain example embodiments may be unobtrusive and may provide for implementation of the authorization component on the component that extends a given extension point.","Certain example embodiments may delegate authorization requests to extending components in order to fulfill such authorization request. This may include forwarding the current security context to the extending component. Certain example embodiments may register responsible components in a registry (or other similar implementation) to provide a way to find and\/or delegate authorization requests. Certain example embodiments may provide hooks for extensibility, which may be used by the extending component so that application-specific (e.g., localized) process or data authorization requests may be realized.","In certain example embodiments, a computer implemented method is provided for distributed authorization. The method is provided on a processing system that includes at least one processor and a memory for executing plural software applications. A security context is created for a client of a first application. In the first application, a connection is accepted from a client of the first application. The client is authenticated and a request from the client to access at least one resource in the first application is accepted. The first application communicates with the second application to determine whether the authenticated client is authorized to access the at least one resource. In the second application, an authorization process is executed on the processing system based on the communication from the first application and the security context. For at least one step in the authorization process, the second application communicates with another application to determine whether the client is authorized to access the at least one resource. Based on this determination, the first application allows or does not allow access.","In certain example embodiments, an authorization system for granting access to a resource of a computing application is provided. The system includes a storage medium that is configured to store a three part permission structure that is associated with the resource. The three part permission structure includes: (1) a first part that includes a domain or type of the resource; (2) a second part that defines at least one action that is done on the resource; and (3) a third part that includes a regular expression that, upon evaluation, produces output including an indication of the resource. The system includes a processing system configured to evaluate an authorization request to the resource based on the three part permission structure.","In certain example embodiments, a computer implemented method of evaluating an authorization request in an authorization application is provided. The authorization request is made from a first computing application. The authorization request is received from the first computing application. A security context is created based on the authorization request. The security context includes information on: a requesting client; a resource associated with the request, and at least one permission associated with the resource. At least one rule is retrieved that is associated with a callback function that calls an authentication process that is defined in a second computing application. An abstract syntax tree is built based on the security context and the at least one rule. The abstract syntax tree is evaluated. A callback is performed to the authentication process defined in the second computing application during the evaluation of the abstract syntax tree. A result of the authorization request is returned based on the evaluation of the abstract syntax tree to the first computing application.","Non-transitory computer readable storage mediums tangibly storing instructions for performing the above-summarized and\/or other methods also are provided by certain example embodiments, as well as corresponding computer programs.","Systems and\/or computer based apparatus may also be configured or adapted to implement the above-summarized and\/or other methods provided in certain example embodiments.","These features, aspects, advantages, and example embodiments may be used separately and\/or applied in various combinations to achieve yet further embodiments of this invention.","Certain example embodiments provide flexibility for authorization logic that is used by an application. In particular, certain example embodiments provide extension points, which are easy, abstract, and powerful for the component that extends the functionality provided by the base implementation. These extension points may also be open and\/or independent of who implements the rules for authorization. Accordingly, in certain instances, that implementation may be unobtrusive and may allow substantial (or sometimes even complete) implementation of the authorization logic on the extending component side. Thus, certain example embodiments may provide a distributed, extensible authorization scheme on a computing system.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1","b":["100","102","102","104","106","108","104","102"]},"The client  may continue to interact with the process flow  inside the web application  in order to fulfill some client request. In certain instances, some particular business logic may require some form of authorization (e.g., a feature or asset) before the process may continue. In such cases, the authorization API  in the UMC  may be used to determine whether or not the loaded security context is authorized for a given resource (e.g., features, process subset, data, etc.).","When authorization is requested, the authorization process flow  is executed to determine whether or not the requesting entity is allowed to access a given resource. The process flow  may use stored permissions, the security context, and\/or rules run through the rules Service Provider Interface (SPI) . In certain instances, the SPI may be used to extend and\/or implement classes\/interfaces\/methods\/etc to achieve a goal.","The rules for the rules SPI  may be taken from the UMCRules  database and\/or the rules database  in the web application . Rules defined in the hosting application (e.g., web application ) may facilitate of provision of application-specific business logic for authorization. In this case the UMC  may call this rule extension during the authorization flow  as a callback that is enhanced with the security context. The result of this context may be the outcome for the authorization determination.","Accordingly, hosting applications (e.g., web application ) may use the authorization API  of an example UMC , but may also provide extensions for how the authorizations are determined based on the needs of the given application. Such scenarios may also work in a distributed application environment.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 2","b":["200","202","208","200","202","202","212","204","216","214","202","206","206","202","206","202","204"]},"Based on the association, the Rules SPI may interact with application  and the rules database  defined therein to resolve the authorization request from application .","Accordingly, in certain example embodiments, when the application  disappears or is offline, all client requests that involve rules defined in application  may be defined. In certain example embodiments, such features may provide another safety net such that when no component is found that could grant the access, that access is denied.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 3","b":["302","310","304","302","308","312"]},"The search list component  may provide data about models and mashups. These may be secured assets that may not be accessible to every user or client. Accordingly, an authorization scheme may be implemented to control access to these resources. In certain example embodiments, the portal  may not know how to grant access to these resources. Further, as determination of access to the resources may require business logic, the backend UMC may also not be able to provide a determination (e.g., because it is business logic agnostic). Thus, in certain instances, the UMC may \u201cfind\u201d the <model> and <mashup> extensions and delegate the authorization checks to these extensions (e.g., as implemented in the ABS and AMZ components  and ). The results of these extensions may determine whether or not the assets are shown to a client\/user.","Permissions","The determination as to whether a client is authorized to access a given resource may include specification of permissions. In certain example embodiments, a permission object may include three parts that are delineated by colons. For example, <part1>:<part2>:<part3>.","With such an implementation, the parts may describe the permission so that general aspects as well as more specific ones may be described in a non redundant and combinable way.","In certain example embodiments,","<part1> describes the domain in which the permission is applied or the type of asset to which it is applied.","<part2> describes the action(s) which are done in the domain or the asset type.","<part3> describes the ID of the asset and\/or a regular expression that may be evaluated to filter types.","In certain example embodiments, one or more of the following symbols may be used:","1) Symbols allowed (inside parts):\n\n","2) Forms not allowed: <part1>::<part3>","3) Optional Parts: <part2>, <part3>",{"@attributes":{"id":"p-0056","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"<Part 1>","<Part2>","<Part 3>"]},{"entry":["Permission #","Domain\/Type","Action","ID\/RegEx"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Process","manage",{}]},{"entry":["2","Process","manage, exec"]},{"entry":["3","Mashup","read, write","ID01, ID02"]},{"entry":["4","Report","*","GUID1, GUID2, etc"]},{"entry":["5","Document","write","\u2014"]},{"entry":["6","Document","read","\/T123-\\\\d*\/"]},{"entry":["7","Explorer","read, write","GUID12345"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"As shown above in Table 1, various permissions may be defined. Such permissions may be used in association with certain example embodiments. Permissions 1 and 2 show where either one or two actions are allowed in the domain of process (e.g., manage or exec). In certain example embodiments, by leaving \u201cpart 3\u201d blank, the system may automatically fill in a blank part 3 with * that means \u201call.\u201d","Permission number 3 includes multiple actions with a list of IDs. The fourth permission is set up to allow all actions on a list of IDs. The fifth permission shows an example of the \u201c\u2212\u201d symbol. Specifically, usage of the minus symbol states that all write action in the domain \u201cdocument\u201d are allowed as long as no ID is specified. Such a permission may be used, for example, in scenarios where document creation is allowed for everyone but the updating of an existing document specified by an ID. Such an example may be used for ownership protection scenarios.","The sixth permission shows an example of a regular expression that filters the list of IDs so that only IDs that are prefixed with T123\u2014are selected and granted. The seventh permission may be used for extending the authorization logic. Given the assumption that \u201cGUID12345\u201d is the ID for the root node in a tree, an extension module may then check whether a certain folder that has to be granted is a subfolder of this node in order to grant access. Such scenarios may be used for permission inheritance where the permission is placed with the parent asset and an extension is used to determine whether or not to grant access to a child.","Authorization Flow","In certain example embodiments, an authorization flow is provided as a generic process. This process may then interpret the optionally extended abstract rules syntax tree for a given security context. The generic process may have no notion of implemented extensions and may be agnostic as to how many there are and where the extension reside. Thus, the process may be flexible without the need to know where every special implementation resides. In certain example embodiments, only the registry is asked at runtime in order to provide registered callbacks. Any number of callbacks may be implemented and may be subsequently provided on any host.",{"@attributes":{"id":"p-0061","num":"0064"},"figref":["FIG. 4","FIG. 4","FIG. 4","FIG. 2"],"b":["400","406","402","408","404"]},"Once the user, the permissions, and the rules are loaded, the security context for this authorization may be complete. With the completed security context, the authorization check may be performed by proceeding from  to the check permission step . As noted above, in certain cases, other applications may provide authorization processing for an application. In such cases, if the other application that is set to provide the authorization logic is not available the process may proceed to  where authorization is denied for the given resource.","If, however, the application is available, the permission in question for the resource is checked at . If the check was successful at , then permission is granted in step . If the permission was not successful, the process may circle around to see if permission is granted via another rule.","In certain example embodiments, the process of granting authorization such that if there is an express ban (e.g., do not allow user X to access resource T) then the processing may stop and proceed to .","Security and Logging","In certain example embodiments, preventing outside attacks on hosted components may be desirable. In such cases, the application interfaces may send requests to\/from authorization demands\/requests through locally deployed interfaces reachable only within a running JVM or through HTTPS to remote clients. Furthermore, in certain example embodiments, requests to hosted components may be filtered through a security filter according to a servlet specification that is responsible for proper authentication. If the provided credentials are not sufficient such a request may be denied, filtered out, and sent back to the client with appropriate error messages and HTTP status code. However, if the security filter is passed successfully, an authorization request may be made.","In certain example embodiments, an authorization process may provide error messages with corresponding HTTP response codes if an authorization request is not granted. These failing authorization requests may be logged out with a default log level of warning so that an administrator or other user may easily monitor such requests. In certain instances, granted authorization request may be logged out with a lower log level (e.g., debug). In certain example embodiments, such an event log may be turned off for a production environment.","Flexibility","In certain example embodiments, an authorization system may have features that improve the flexibility of how the system is used, designed, developed, called, extended, and the like.","For example, permission requests may include permissions such as \u201cdomain\/action\/*.\u201d Alternatively, or in addition, permissions may have more complex permissions such as, for example, \u201cdomain\/action, action\/<regex>.\u201d These \u201ccomplex\u201d permissions can facilitate the usage of a range of possibilities as to how an authorization request may be handled.","In certain example embodiments, the extension and\/or plug-in capability can facilitate flexibility for system designers in how to implement authorization logic at the points where the needs for protection on a given resource in a given context may be more specifically fulfilled (or defined).","In certain example embodiments, an authorization implementation could be used and deployed in a wide range of architectures. Such architectures may range from a local JVM scenario inside one application, to a cluster of applications spread over more than one JVM, or even up to complete cloud scenarios in which applications are started and shut down on demand.","Example Implementation","An example implementation may include one or more of the following features that facilitate a non-intrusive application, flexibility, and showing some kind of migration path to adopt existing applications with the techniques described herein.","An implementation may include a UMC (User Management Central) component inside an ARIS server that manages all of the permissions by default.","Applications may then have a choice as to how authorization is handled for the application. In one scenario, the application may manage all of the authorization and only using the authentication context provided by the UMC. In another implementation, the application may use the UMC as a generic authorization provider, but with extra extensions in the form of custom rules (that may be related to this and\/or other applications). This may be considered a hybrid approach. Yet another approach may be that the application uses only UMC provided functionality for administration, storage of rules, etc.","In certain example embodiments, there may be little or no difference as to whether permissions are related to a feature or an asset (e.g., as asset permissions may be a more specific form of a feature permission).","A central user interface may be hosted by the UMC and in certain example embodiments may be a web-based interface. In certain example embodiments, the storage of permission may be done in the UMC, and then an application that extends such functionality may store permissions of a user through this interface in the UMC and interpret it during runtime.","Application Programming Interface","In certain example embodiments, an application programming interface to an example UMC may be provided in order to facilitate external application interaction with the UMC provided functionality.","In certain example embodiments, when using authorization at runtime there may be a declarative API that uses annotations. Such declarations may facilitate delegation of an authorization request to UMC. In certain example embodiments, the delegation may be done programmatically. This example technique may provide a higher level of control (but at the possible expensive of being more intrusive on the users interacting with the UMC. Thus, in a preferred embodiment, a declarative annotation may be used with the option for also using the programmatic technique.","A declarative implementation may have the following or similar structure (e.g., Declarative per @Annotation):","@is InRole(String role)","@is Permitted(String permission)","A programmatic implementation may be made using the following or similar example interface:",{"@attributes":{"id":"p-0080","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface authorization"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"boolean hasRole(User user, String role);"]},{"entry":[{},"boolean hasRole(User user, Role role);"]},{"entry":[{},"boolean hasPermission(User user, String permission);"]},{"entry":[{},"boolean hasPermission(User user, Permission permission);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In certain example embodiments, the UMC API may provide CRUD operations (Create, Read, Update, Delete) on permissions for storage and the like.","Certain example embodiments may also provide for the ability to build up an abstract syntax tree (AST) that includes the rules defined in an extension in a fluid way that leads to a DSL built upon the well known builder pattern.","In certain example embodiments, an AST may be built upon one or more components. For example, the components shown in  (discussed below) may be used to construct an AST. Such a tree structure may have the following format, <MATCH><perm1><OR><NOT><REGEX><perm1> . . . . Or may be similar to the following permission check logic,","IF (perm1 matches exactly) OR NOT(perm1 matches <RegEx>)","THEN grant","ELSE not grant","While \u201cmatch\u201d and \u201cregex\u201d expressions are shown in , other types of extensions may be included in the AST to, for example, facilitate authorization checks. In certain example embodiments, a builder pattern may allow for a DSL (Domain Specific Language) building of the tree. An example is","Authorization.match(Perm1).or( ).not( ).regex(Perm1).check( ).","Such an expression of the above noted tree may be used to facilitate a \u201cfluent\u201d style for building of the tree.",{"@attributes":{"id":"p-0089","num":"0092"},"figref":"FIG. 5","b":["504","502","506"]},{"@attributes":{"id":"p-0090","num":"0093"},"figref":"FIG. 6","b":["604","606","608","602","604","610"]},"Grammar","In certain example embodiments, the rules are defined as interfaces that are used to build up an abstract syntax tree (AST) that is used to determine whether or not permissions are granted.","Thus,  is an illustration of an example class diagram used in defining authorizations according to certain example embodiments. UmcContext , Matcher Expression , and RegexExpression  may be functionalities that are provided from a UMC implementation. Also, third part predicate  may be an extension point that is implemented for authorization defined within a hosting component. Interface  may have functionality that implements the interface such as, for example, AndExpression , OrExpression , and\/or NotExpression . Other types of expression may also be implemented, for example an XOR expression. Abstract class  may have various expressions that are implemented. In this example, matcher  and regex expressions may be implemented. However, again, additional expressions may be implemented depending on a given implementation.","For a given grammar, the AST may be built at runtime based on the default rules found in the UMC and any extension rules defined in a hosting application. Based on the built AST, a given permission may be evaluated to determine if an authorization request is to be granted or not. For example, if no rule grants the permission the outcome may be returned as \u201cfalse\u201d (e.g., authorization is denied).","Optional rules that have been extended are predicates and may be registered as a callback. Thus, these may be called back at runtime with the correct security context (see above). As the basic building blocks are a mix of a decision table applied in an extensible interpreter pattern, the ASTs are powerful and facilitate the provision of expressions for component-specific authorization needs.",{"@attributes":{"id":"p-0095","num":"0098"},"figref":"FIG. 8","b":["800","802","210","804"]},"Rules may also be extensible via the rules interface . Applications that implement their own rules may register with the rules registry  in the UMC .",{"@attributes":{"id":"p-0097","num":"0100"},"figref":["FIG. 9","FIG. 8"],"b":["900","800","904","906","912","908","910","906","902"]},{"@attributes":{"id":"p-0098","num":"0101"},"figref":["FIG. 10","FIG. 2"],"b":["1000","1002","1004","1008","1006","1004","1010","1012","1018","1000","1018","1014","1018","1016","1020","1022","1020","1000","206"]},"Certain example embodiments may relate to providing security for Business Process Models","It will be appreciated that as used herein, the terms system, subsystem, service, programmed logic circuitry, and the like may be implemented as any suitable combination of software, hardware, firmware, and\/or the like. It also will be appreciated that the storage locations herein may be any suitable combination of disk drive devices, memory locations, solid state drives, CD-ROMs, DVDs, tape backups, storage area network (SAN) systems, and\/or any other appropriate tangible computer readable storage medium. It also will be appreciated that the techniques described herein may be accomplished by having at least one processor execute instructions that may be tangibly stored on a non-transitory computer readable storage medium.","While the invention has been described in connection with what is presently considered to be the most practical and preferred embodiment, it is to be understood that the invention is not to be limited to the disclosed embodiment, but on the contrary, is intended to cover various modifications and equivalent arrangements included within the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other features and advantages may be better and more completely understood by reference to the following detailed description of exemplary illustrative embodiments in conjunction with the drawings, of which:",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
