---
title: Systems and methods for autonomous broadcasting
abstract: Computer-implemented systems and methods provide for the autonomous broadcasting of video data, audio data, or video and audio data during an event, wherein the broadcasting can be schedule in advance and from a remote location (i.e., over a network).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09167275&OS=09167275&RS=09167275
owner: BoxCast, LLC
number: 09167275
owner_city: Cleveland
owner_country: US
publication_date: 20110311
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","FIELD","BACKGROUND","SUMMARY","DESCRIPTION"],"p":["The present application is being filed as a U.S. non-provisional patent application claiming priority\/benefit under 35 U.S.C. \u00a7119(e) from the U.S. provisional patent application entitled SYSTEMS AND METHODS FOR AUTONOMOUS BROADCASTING, having Ser. No. 61\/312,773 and filed on Mar. 11, 2010, the entire disclosure of which is incorporated herein by reference.","The general inventive concepts relate to data transmission and, in particular, to scheduling the autonomous broadcasting of data.","Various systems exist for broadcasting a live or pre-recorded video stream over the Internet. These conventional systems, however, have numerous drawbacks.","For example, in conventional systems, broadcast devices cannot be controlled remotely when the devices are situated behind a user's firewall.","One attempt to address this drawback involves configuring the user's router to give access to the broadcast device. This approach involves, for example, creating or otherwise exploiting a \u201chole\u201d in the firewall, such as by forwarding Transmission Control Protocol (TCP) or User Datagram Protocol (UDP) ports to the broadcasting device so that the user could use Hypertext Transfer Protocol (HTTP), SSH, Remote Procedure Call (RPC), or the like to control the broadcasting device remotely, or designing the user's network to include a demilitarized zone (DMZ), wherein the broadcast device is placed in the DMZ so it can be controlled remotely. This approach, however, requires technical expertise that the average user may not possess. Furthermore, this approach also exposes the broadcast device to unauthorized and\/or malicious use by allowing others to potentially access the broadcast device behind the firewall. For example, the broadcast device could be subject to denial of service attacks, rendering the device useless or otherwise ineffective. Further still, certain broadband routers\/firewalls do not allow broadcast streaming, wherein users with these routers\/firewalls installed often have no way of knowing that this is the reason they cannot broadcast.","Another attempt to address this drawback involves installing a virtual private network (VPN) relay server. Again, this approach requires a degree of technical expertise that the average user may not possess, and is often performed by an information technology (IT) specialist. Furthermore, the VPN server and software are expensive, which may present a cost barrier to implementation for many users. Additionally, this approach requires that VPN credentials be maintained between VPN clients and VPN servers, which adds complexity and overhead. As noted above, because certain broadband routers\/firewalls do not allow broadcast streaming, users with these routers\/firewalls installed often have no way of knowing that this is the reason they cannot broadcast.","Yet another attempt to address this drawback involves controlling the broadcast device on-site (i.e., not remotely). This approach, however, requires that an administrator or other authorized user be on site to control the broadcast device. Additionally, if the administrator delegates someone else to control the broadcast device, there is a risk that the person may knowingly or unknowingly alter the desired configuration, given the complexity of setting the proper broadcast parameters. As noted above, because certain broadband routers\/firewalls do not allow broadcast streaming, users with these routers\/firewalls installed often have no way of knowing that this is the reason they cannot broadcast.","As another drawback of conventional broadcasting systems, the broadcasting systems utilize a broadband connection (for network traffic) that provides an insufficient or otherwise poorly sufficient upload speed.","One attempt to address this drawback involves using broadcast software running on a general purpose computer to compress the video before transmitting it. However, if the broadcast device is the general purpose computer, the computer may not be powerful and\/or fast enough to effectively perform the compression and transmit the video. Computers that are powerful and fast enough to perform the compression and transmission are likely to be expensive, which may present a cost barrier to implementation for many users. Additionally, users are required to spend time and\/or money to purchase, download, install, and maintain the compression software. Furthermore, the broadcast software may require a steep learning curve of its users. Since the average user does not know how the broadcast software functions work and\/or which settings are important in the broadcast software, the user may become frustrated and\/or waste a significant amount of time.","Another attempt to address this drawback involves using dedicated broadcasting hardware. Such dedicated hardware is likely to be expensive, which may present a cost barrier to implementation for many users. Furthermore, the hardware may require a steep learning curve of its users. Since the average user does not know how the broadcast software functions work and\/or which settings are important for the hardware, the user may become frustrated and\/or waste a significant amount of time.","As yet another drawback of conventional broadcasting systems, the broadcasting systems may not adequately prevent unauthorized access to the video being broadcast. Users often want broadcasts to be viewable only by certain viewers to control privacy and\/or insure that paid broadcasts cannot be stolen or otherwise misappropriated.","One attempt to address this drawback involves security through obscurity. For example, when an event is being promoted through an e-mail or similar invite, the e-mail includes an invitation link containing a long complex web address having enough complexity such that the chance of guessing the link becomes acceptably small. However, when a viewer prints out the e-mail invite, the process of typing in the long complex web address is onerous and it is very difficult for the viewer to accurately type in the long complex web address. Consequently, the viewer is apt to become frustrated and to forego accessing or otherwise viewing the video.","Another attempt to address this drawback involves authenticating a viewer requesting access to an event by requiring a username and password. However, if any unauthorized viewers obtain these credentials, then the unauthorized viewers and\/or anyone else they provide the information can view the video being broadcast for the event. Additionally, even without obtaining the credentials, an unauthorized viewer situated between a video player for playing the video and a media server for providing the video could \u201csniff\u201d for the video data (i.e., the video stream) as it is transmitted from the media server to the player. In this manner, the unauthorized viewer could view the video stream without anyone else knowing.","As still another drawback of conventional broadcasting systems, an event to be broadcast may be so popular that a server delivering the video of the event reaches its capacity or breaks, such that viewers that want to view the video cannot.","An attempt to address this drawback involves using a content delivery network (CDN) to provide the ability to service any size event. However, in using the CDN, overall capacity may not be dynamically adjustable. Accordingly, an administrator may be forced to set a predefined limit on the capacity, which results in either wasted server capacity or rejecting certain viewers who wish to view the video.","As another drawback of conventional broadcasting systems, the broadcasting systems require someone to be on-site to turn the camera on and off for an event to be broadcast. No known attempts have been made to address this drawback.","The general inventive concepts contemplate systems, methods, and apparatuses for use in scheduling and otherwise carrying out the autonomous broadcasting of video data. Exemplary embodiments of the general inventive concepts, including those disclosed herein, may or may not address one or more of the aforementioned drawbacks and\/or any other drawbacks of conventional broadcasting systems.","The general inventive concepts contemplate computer-implemented systems and methods, as well as apparatuses for use therein, for remotely scheduling autonomous broadcasting of video data in advance.","In one exemplary embodiment, a system for scheduling broadcasting of video data is disclosed. The system includes scheduling logic, a video acquisition device, a broadcasting device, a plurality of media servers, and a network. The scheduling logic is in data communication with the broadcasting device and the media servers over the network. The scheduling logic interfaces with a first user to allow the first user to set a start time and an end time (or duration) for an event. The scheduling logic transmits the start time and the end time to the broadcasting device over the network. The scheduling logic manages an actual bandwidth on the media servers during the event. At the start time, the broadcasting device powers on the video acquisition device and transmits video data acquired by the video acquisition device to the media servers over the network. The media servers transmit the video data as a live video stream to a second user over the network. At the end time, the broadcasting device powers off the video acquisition device.","In one exemplary embodiment, a method of scheduling broadcasting of video data is disclosed. The method includes the steps of receiving a start time and an end time (or duration) for an event from a first user; transmitting the start time and the end time to a broadcasting device remote from the first user, the broadcasting device being interfaced with a video acquisition device; reserving an estimated bandwidth on at least one media server for the event; at the start time, powering on the video acquisition device and transmitting video data acquired by the video acquisition device during the event to the at least one media server; transmitting the video data from the at least one media server as a live video stream to a second user remote from the broadcasting device; and at the end time, powering off the video acquisition device.","In one exemplary embodiment, a method of broadcasting video data is disclosed. The method includes providing an autonomous broadcasting device and a video acquisition device. After the autonomous broadcasting device is manually activated (e.g., powered on, connected to the Internet), it automatically (i.e., without any user intervention at the site of the autonomous broadcasting device) establishes communication with a website over a network; downloads scheduling data from the website, the scheduling data defining at least one event to be broadcast by the autonomous broadcasting device; determines a start time and an end time for an event from the scheduling data; at the start time, powers on the video acquisition device; receives video data corresponding to the event from the video acquisition device; uploads the video data to a server contemporaneously with the event; and at the end time, powers off the video acquisition device.","In one exemplary embodiment, a broadcasting device for broadcasting video data in accordance with a user-defined schedule is disclosed. The broadcasting device includes a processor, a memory, a video input, an audio input, and a network connector. The network connector is operable to interconnect the broadcasting device to a network. The processor is operable to cause storage of a start time and an end time (or duration) for an event in the memory; to power on a video acquisition device at the start time; to manage receipt of video data by the video input from the video acquisition device; to manage receipt of audio data by the audio input from the video acquisition device; to manage transmission and encoding (e.g., compression, optimization, formatting) of the video data to a server over the network; to manage transmission and encoding (e.g., compression, optimization, formatting) of the audio data to the server over the network; and to power off the video acquisition device at the end time.","In accordance with exemplary broadcasting systems and methods disclosed herein, a user can remotely schedule a broadcasting device to autonomously broadcast video data at a scheduled time, even when the broadcasting device is situated behind a firewall or router. In particular, the general inventive concepts encompass broadcasting devices that sit within a firewall and allow broadcasting to be controlled without breaking any IT department regulations and without requiring any configuration changes to the firewall or router. Additionally, the general inventive concepts encompass a mechanism by which the broadcasting device can determine if the firewall or router is preventing broadcasting and, if so, notifying the user of how to resolve the issue. Accordingly, no IT personnel need to be on site for initial hardware, software, or network setup nor ongoing operation of the autonomous broadcasting systems and methods.","In accordance with exemplary broadcasting systems and methods disclosed herein, the broadcasting devices utilize dedicated hardware that is optimized for video and audio compression, which results in improved performance and lower costs (as expensive general purposes computers are not required). The broadcasting devices can dynamically optimize the live stream quality to provide the best picture and resolution for a given uplink speed. Furthermore, the broadcasting devices can record the event at a higher quality while streaming the event at a lower quality. Here, higher quality can mean, for example, any one or any two or more of the following: higher video resolution, lower video compression loss; increased audio quality, larger size, and\/or increased frame rate. Then, after the event has completed, the higher quality video is compressed and uploaded to a server at any upload speed the network connection supports. The recorded streams can be made available at the lower live stream quality until the higher quality stream is fully uploaded and saved.","In accordance with exemplary broadcasting systems and methods disclosed herein, unauthorized access to the broadcast video is discouraged, prevented, made more difficult, or otherwise reduced. In one exemplary embodiment, the systems and methods control access to the video using streams that are encrypted or otherwise protected, such that only authorized viewers can watch the video. In one exemplary embodiment, the video streams are protected using RTMP\/RTSP (Real Time Messaging Protocol\/Real Time Streaming Protocol) authentication or the like to prevent unauthorized streaming. In one exemplary embodiment, the video streams each require a Session Description Protocol (SDP) configuration on the media server which is uploaded from the scheduling logic via secure copy. In one exemplary embodiment, the video streams are encrypted using Encrypted Real Time Messaging Protocol (RTMPE) or another encryption protocol. In one exemplary embodiment, access to the video streams is only available through a secure token that must match between the viewer and the streaming server, which prevents access to video streams using an unauthorized client. In combination with encryption, this prevents a \u201cmiddle man\u201d from \u201csniffing\u201d the video stream and viewing or redistributing its content. This could be implemented, for example, using the SecureToken module for Wowza Media Server. In one exemplary embodiment, a video stream may be restricted by single-access tokens, which prevents a viewer from sharing his URL with a friend. Only one client can view the video stream at a time given for a unique token (like a ticket to an event).","In accordance with exemplary broadcasting systems and methods disclosed herein, the systems and methods utilize cloud computing or similar services in order to provide for the dynamic scaling of server bandwidth. In this manner, user demand for the video, whether streaming or pre-recorded, can be dynamically accommodated.","In accordance with exemplary broadcasting systems and methods disclosed herein, the broadcasting devices include or are interfaced with logic that allows any video and\/or audio acquisition device (e.g., a digital camera) to be remotely powered on and powered off based on scheduled events. In one exemplary embodiment, the broadcasting devices include a USB port through which an automatic camera power controller is attached to the broadcasting device. The automatic camera power controller comprises a wall plug that itself acts as a plug for the camera that switches power ON to the camera plug when the broadcasting device is ready to acquire and transmit data and switches power OFF to the camera plug when the broadcasting has completed.","In accordance with exemplary broadcasting systems and methods disclosed herein, a commissioning process and a registration process are contemplated. The commissioning process involves adding software onto a processor representing broadcasting hardware to form a broadcasting device (e.g., a device capable of transmitting live video data to a server). During the commissioning process, unique credentials are assigned to the broadcasting device and shared with scheduling logic. By sharing these credentials between the broadcasting device and the scheduling logic, the broadcasting device can be securely authenticated by the scheduling logic when a content provider seeks to deploy the broadcasting device in the broadcasting systems and methods. Likewise, the registration process is a process by which the broadcasting device is recognized (based on its unique credentials) and added to the broadcasting systems and methods. The broadcasting device must be registered before a content provider can schedule broadcasting events for it. Upon activation (i.e., being connected to the Internet and powered on), the broadcasting device is capable of registering itself without further user intervention by automatically exchanging data (e.g., HTTP messages) with the scheduling logic.","Numerous advantages and features attributable to the general inventive concepts will become readily apparent from the following detailed description of exemplary embodiments, from the claims and from the accompanying drawings.","While the general inventive concepts are susceptible of embodiment in many different forms, there are shown in the drawings and will be described herein in detail specific embodiments thereof with the understanding that the present disclosure is to be considered as an exemplification of the principles of the general inventive concepts. Accordingly, the general inventive concepts are not intended to be limited to the specific embodiments illustrated herein.","The following includes definitions of exemplary terms used throughout the disclosure. Both singular and plural forms of all terms fall within each meaning:","\u201cLogic,\u201d synonymous with \u201ccircuit\u201d as used herein includes, but is not limited to, hardware, firmware, software and\/or combinations of each to perform a function(s) or an action(s). For example, based on a desired application or needs, logic may include a software controlled microprocessor, discrete logic such as an application specific integrated circuit (ASIC), programmed logic device, or other processor. Logic may also be fully embodied as software.","\u201cSoftware,\u201d as used herein, includes but is not limited to one or more computer readable and\/or executable instructions that cause a computer or other electronic device to perform functions, actions, and\/or behave in a desired manner. The instructions may be embodied in various forms such as routines, algorithms, modules or programs including separate applications or code from dynamically linked libraries. Software may also be implemented in various forms such as a stand-alone program, a function call, a servlet, an applet, instructions stored in a memory, part of an operating system or other type of executable instructions. It will be appreciated by one of ordinary skill in the art that the form of software is dependent on, for example, requirements of a desired application, the environment it runs on, and\/or the desires of a designer\/programmer or the like.","\u201cComputer\u201d or \u201cprocessor\u201d as used herein includes, but is not limited to, any programmed or programmable electronic device or coordinated devices that can store, retrieve, and process data and may be a processing unit or in a distributed processing configuration.","In accordance with the general inventive concepts, disclosed herein are exemplary embodiments of systems and methods for scheduling broadcasting of video data.  shows a computer  (e.g., a general purpose desktop or laptop computer) for use in a video broadcasting system and\/or a video broadcasting method, according to one exemplary embodiment.","The computer  includes a processing means, such a CPU , and memory, such as RAM , for use by the processing means. The computer  also includes input means, such as a keyboard  and a mouse , and output means, such as a monitor . The monitor can be, for example, an LCD or CRT display. The output means can include any device or mechanism for outputting signals generated by the computer . For example, the output means could include speakers (not shown) for outputting audio.","The computer includes a permanent and\/or semi-permanent storage means, such as a hard disk drive . The hard disk drive  can be used to store software applications, such as an operating system , and\/or data in the form of electronic files . The computer  further includes a networking means, such as a network port or adapter . The network adapter  can be, for example, an Ethernet adapter. The network adapter  allows the computer  to be connected to and communicate over a network, such as the Internet. The network adapter  can support, for example, wired or wireless communication over the network.","Various modifications could be made to the computer  without departing from the spirit and scope of the general inventive concepts. The computer  can be configured and used as a client and\/or a server computer.","As shown in , an autonomous broadcasting system , according to one exemplary embodiment, includes scheduling software  installed on a server computer . The server computer  can be a general purpose computer, such as computer . The server computer  is in data communication with a data store . In one exemplary embodiment, the data store  is installed in the server computer .","The autonomous broadcasting system  also includes a broadcasting node or device , a video acquisition device , and a plurality of media servers . In one exemplary embodiment, a content delivery network (CDN) may be used. Additionally, the autonomous broadcasting system  includes a network, such as a wide area network (WAN) or the Internet , over which the server computer  with the scheduling software , the broadcasting device , and the media servers  can communicate.","In one exemplary embodiment, the broadcasting device  utilizes a processor system such as a Leopardboard  (hereinafter, the \u201cLeopardboard\u201d), as shown in , and as described in the Leopardboard  Hardware Guide (Rev. 1.0), the entire disclosure of which is hereby incorporated by reference in its entirety. The Leopardboard is a processor system designed to provide a feature rich and economical solution based on Texas Instruments' Digital Media (DM) DM365 processor. This processor is dedicated, specialized hardware designed to support the acquisition, encoding, compression, etc. of video and audio data. Since the Leopardboard does not use a digital signal processor (DSP), the DM365 processor is used for video and audio encoding. The Leopardboard supports a wide range of peripherals and, thus, provides a useful tool for digital media and storage applications The Leopardboard has a generally low power consumption level. The Leopardboard includes an internal memory controller supporting a wide range of memories including DDR2\/MDDR\/SDRAM\/NOR & NAND FLASH. The Leopardboard has a built-in Multimedia Card\/Secure Digital (MMC\/SD) controller which could be used to provide an instant add on storage for personal collections. The Leopardboard includes an expansion port and\/or other connectors that provide an interface to other cards, devices, peripherals and the like. The Leopardboard also includes a universal serial bus (USB) port that provides a wide variety of peripheral connectivity.","Many other processor systems may be used in accordance with the teachings herein. A minimum configuration for the broadcasting device  processor system includes a processor (e.g., the DM365 processor and\/or some other processor optimized for video and audio compression), a memory, a bus interface circuit permitting the processor to communicate with the various servers described herein via the Internet, and a bus interface circuit permitting the processor to accept video and audio from the video acquisition device . Additionally, the processor system can include a bus interface circuit permitting the processor to communicate with a power controller associated with the video acquisition device .","The use of such a processor system (e.g., the Leopardboard) in the broadcasting device, as contemplated by the general inventive concepts, provides many advantages over the use of a general purpose computer (e.g., the computer ). For example, the processor system can have a much smaller footprint than the computer. In one exemplary embodiment, the processor system is enclosed in a housing measuring less than 5 inches by 5 inches by 2 inches, e.g., approximately 4.5 inches by 4.5 inches by 1.5 inches. This allows the broadcasting device to be deployed in manners and locations that would otherwise not be possible. Furthermore, a manufacturing cost of the processor system is much lower than a manufacturing cost of the general purpose computer. Further still, the reliability of the processor system will, on average, exceed that of the general purpose computer because, for example, because the processor system, unlike the computer, typically uses no moving parts (e.g., fans, disk drives). Furthermore, the processor system on average has a much lower power consumption than the general purpose computer. In one exemplary embodiment, the broadcasting device including the processor system consumes less than 5 W of power during normal operation. In addition to providing a cost savings in the form of energy savings, this low power consumption results in the generation of less heat, which further increases the reliability of the processor system relative to the computer. Yet further still, the processor system is less likely to be exposed to intentional or incidental manipulation of its data stream than the computer. In particular, because general purpose computers are designed to interact with users, they typically interface with input devices (e.g., keyboard , pointing device ). These input devices conceivably allow a user to directly or indirectly affect the data stream. Conversely, because the process system is design to work without any direct user interaction therewith and, thus, includes no interfaced input devices, users are unable to affect its data stream.","In one exemplary embodiment, the video acquisition device  is a digital camera capable of capturing audio and video data. The video acquisition device  interfaces with the broadcasting device  to transfer data acquired by the video acquisition device  to the broadcasting device . In one exemplary embodiment, a USB cable is used to connect the video acquisition device  and the broadcasting device  so that the data can be transferred from the video acquisition device  to the broadcasting device .","In one exemplary embodiment, the media servers  are general purpose computers, such as computer . In one exemplary embodiment, the media servers  are implemented as a dynamically scalable server cloud that provides the necessary server functionality. In this manner, the capital expenditure associated with the purchasing and maintaining the media servers  can be avoided, as the autonomous broadcasting system merely rents usage of the media servers  from a third-party provider of a cloud computing service (e.g., Amazon EC2) and\/or a cloud storage service (e.g., Amazon S3).","The autonomous broadcasting system  simplifies the task of broadcasting a secure live or pre-recorded video stream over the Internet. A content provider  using the autonomous broadcasting system  may securely broadcast live video by installing the broadcasting device  and subsequently scheduling events via the scheduling software  implemented as a scheduler website on the server computer . In the autonomous broadcasting system , the content provider  is remote from the scheduling software  and, thus, accesses the scheduling software  over the Internet . However, in an autonomous broadcasting system , according to an alternative exemplary embodiment, as shown in , the content provider  is at the same physical location as the scheduling software  (i.e., the server computer ). Accordingly, in the autonomous broadcasting system , the content provider  can directly access the scheduling software , for example, by using an input device (not shown) of the server computer .","To further illustrate the general inventive concepts, autonomous broadcasting systems, according to other exemplary embodiments, are shown in .  shows an autonomous broadcasting system , according to one exemplary embodiment.  shows an autonomous broadcasting system , according to one exemplary embodiment.  shows an autonomous broadcasting system , according to one exemplary embodiment.  shows an autonomous broadcasting system , according to one exemplary embodiment.","At the time that an event is scheduled to begin, the broadcasting device  automatically powers on any other required hardware (i.e., the video acquisition device ) and begins encoding and publishing (i.e., uploading) a secure live video stream to the media servers . The media servers , as streaming servers, make this live video stream available to as many viewers  as possible by dynamically growing resources as the number of viewers  increases. This all happens automatically via the scheduling logic  as explained herein with no configuration or interaction required by the content provider  beyond the initial scheduling of the event. In one exemplary embodiment, the broadcasting system  supports the establishment of business rules to impose bandwidth growth \u201climits.\u201d For example, the broadcasting system  can set (or have as a default) a sensible limit on new accounts, say no more than 5,000 viewers allowed for the account unless and until its account status is upgraded.","Additionally, the scheduling logic  is responsible for directing a request from a viewer  to a specific media server  and monitoring loads of individual media servers . Based on these factors, the scheduling logic  dynamically allocates resources using the cloud computing service.","During the broadcast of the live video stream, the media servers , as streaming servers, may also record the broadcast onto the media servers , as storage servers. The recorded broadcast can then be accessed on-demand by the viewers  within any limits established by the content provider . Since the live broadcast data being uploaded essentially in real-time may be a lower quality than desired, as a result of upload bandwidth restrictions on the connection between the broadcasting device  and the Internet , the broadcasting device  may also record a higher quality (e.g., any one or any two or more of the following: higher video resolution, lower video compression loss; increased audio quality, larger size, and\/or increased frame rate) version of the broadcast than uploaded in real-time, which it then uploads to the media servers , as storage servers, at some time after completion of the broadcast. Additionally, since a local copy of the video data stored on the broadcasting device  may be a lower quality than desired, as a result of insufficient processing power, storage limits, etc., the local copy of the video data could be used to create the higher quality (e.g., any one or any two or more of the following: higher video resolution, lower video compression loss; increased audio quality, larger size, and\/or increased frame rate) version of the broadcast than uploaded in real-time, which is uploaded to the media servers , as storage servers, at some time after completion of the broadcast.","In the autonomous broadcasting system , the server computer  with the scheduling software , as well as any associated data store , form scheduling logic . A single scheduling logic  acts as the central hub for all the activity of the autonomous broadcasting system . The scheduling logic  houses the primary database (e.g., data store ) of events and related information. Content providers  interact with the scheduling logic  to manage and configure events. Broadcasting devices  interact with the scheduling logic  to coordinate with the event schedule and find out where video streams should be directed.","The media servers  can be provided as part of a media server cloud . The media server cloud  is completely monitored and managed by the scheduling logic  which may acquire new instances, change configuration on instances, or release instances as needed. The viewers  must gain access to live or pre-recorded broadcasts through the scheduling logic .","The primary responsibilities of the scheduling logic  are to: (1) maintain the schedule of events by providing a user-interface that allows content providers  to manage their respective events; (2) manage the scaling of the media server cloud  by acquiring and releasing server instances as the needs of the system  change; (3) manage access of the broadcasting device  to the media servers ; and (4) manage access by the viewers  to the secure video streams. Other responsibilities of the scheduling logic  may include any one or any two or more of the following: accepting a payment (e.g., by a credit card, a debit card, a PayPal account) from a viewer on behalf of a content provider for video the content provider has made available for purchase; initiating mailing of video in the form of a DVD directly from a DVD printing and fulfillment house to a viewer; coordinating and\/or enforcing video sharing rules between viewers; and providing an API that allows other websites to access the scheduling logic. Additionally, any one or any two or more of these other responsibilities could be implemented via separate logic.","Accordingly, as shown in , the scheduling logic  includes four access points labeled as data flows or connections , , , and . A first access point (connection ) is a website (and web-service API) for content providers  to manage their respective events. A second access point (connection ) is a web-service API for broadcasting devices  to coordinate with the event schedule and open up channels for broadcasting. A third access point (connection ) is a protocol for managing the media servers  and monitoring their usage. A fourth access point (connection ) is a web interface for viewers  to request access to live or pre-recorded video streams.","In the autonomous broadcasting system , each broadcasting device  is an embedded device which can capture a video feed from a local source (e.g., a digital camera), encode that feed and stream it to media servers  provided by the media server cloud . The broadcasting device  interacts with the scheduling logic  in order to synchronize its event schedule, coordinate a live broadcast and later to upload a higher quality (e.g., any one or any two or more of the following: higher video resolution, lower video compression loss; increased audio quality, larger size, and\/or increased frame rate) version of captured video to the media server cloud .","The primary responsibilities of the broadcasting devices  are to: (1) capture and encode a video feed for a scheduled event; (2) publish its video stream to a designated streaming server; and (3) manage any hardware that is needed for capturing the local video feed. Other responsibilities of the broadcasting devices  may include any one or any two or more of the following: automatically registering itself with the scheduling logic , uploading an improved quality (e.g., any one or any two or more of the following: higher video resolution, lower video compression loss; increased audio quality, larger size, and\/or increased frame rate) version of the video data to the media server cloud ; and providing a preview of the video at the broadcasting device , for example, using an external display (e.g., monitor) connected via a video output (e.g., VGA connector) of the broadcasting device  or using a display (e.g., LCD screen) integrated with the broadcasting device. Additionally, any one or any two or more of these other responsibilities could be implemented using a separate device.","The media server cloud  includes at least two types of resources: (1) streaming servers and (2) storage servers. A streaming server is able to stream a live or pre-recorded video to a viewer  from a broadcasting device's live stream, from another streaming server, or from a storage server. Instances of the media servers  can be dynamically created, deleted and configured at the discretion of the scheduling logic . The streaming servers are acquired as discrete server instances from a third-party cloud computing service (e.g., Amazon EC2). The storage servers are acquired as discrete data buckets from a third-party cloud storage service (e.g., Amazon S3).","The primary responsibilities of the media server cloud  are to: (1) make the video streams from the broadcasting devices  available to many individual viewers  on various types of viewing devices (e.g., televisions, personal computers, cell phones); (2) maintain secure access to live and pre-recorded video streams; (3) record live broadcasts onto a storage server; and (4) facilitate the uploading of higher quality (e.g., any one or any two or more of the following: higher video resolution, lower video compression loss; increased audio quality, larger size, and\/or increased frame rate) broadcast recordings from the broadcasting devices  to storage servers. Other responsibilities of the media server cloud  may include any one or any two or more of the following: running initialization and shutdown scripts, running channel configuration and deletion scripts for each live broadcast, logging usage statistics (e.g., number of open viewer sessions, bandwidth usage, viewer IP addresses) back to the scheduling logic , and enforcing single-token security for preventing a ticketed viewer from opening two or more simultaneous views of the event. Additionally, any one or any two or more of these other responsibilities could be implemented separately.","The streaming servers are configured to serve five primary functions: (1) receive an originating stream from a broadcasting device  for recording and re-streaming (Origin); (2) relay a stream from one streaming server to another (Relay); (3) send a stream to an end-client for viewing (Edge); (4) send a recorded stream file from a storage server to an end-client for viewing as video-on-demand (VOD); and (5) receive a high-quality (e.g., any one or any two or more of the following: higher video resolution, lower video compression loss; increased audio quality, larger size, and\/or increased frame rate) recording from a broadcasting device  and store it on a storage server (e.g., via a trickle upload process). Other responsibilities of the streaming servers may include any one or any two or more of the following: logging viewer usage information with the scheduling logic such as how long each viewer watched the video (e.g., for billing purposes), the IP address for each viewer (e.g., for geographical analysis of viewer base), and how much raw video data was used (e.g., for accounting purposes), converting the video, splicing and cropping the video, and filtering and excerpting the video (e.g., based on features of interest such as motion, facial recognition). Additionally, any one or any two or more of these other responsibilities could be implemented separately.","The storage servers have a single primary function, which is to maintain recorded stream-files for later viewing on-demand by viewers . Other responsibilities of the storage servers may include any one or any two or more of the following: performing authentication prior to granting access to stored video files, logging access to stored video files, providing an interface for managing stored video files (e.g., uploading, downloading, making available to third parties such as DVD manufacturers).","Additionally, any one or any two or more of these other responsibilities could be implemented separately.","The interactions between the content provider  and the scheduling logic  are depicted in  as data flow or connection , labeled \u201cevent management.\u201d This is the primary interaction that the content provider  has with the scheduling logic .","In one exemplary embodiment, the content provider  manages events through a website interface. The website interface allows the content provider  to securely log in to the website associated with the scheduling logic  and see a list of broadcasting devices  belonging to or otherwise associated with the content provider , as well as any past, current, or future events that are scheduled to broadcast from those devices. Each event is defined by the broadcasting device  it streams from, a name assigned to it by the content provider , a start date\/time and the duration of the broadcast (or an end date\/time). Each event also has parameters for the licensing type that will be used for the content.","When a content provider  receives a new broadcasting device , the content provider  must register that broadcasting device  before broadcasting from it. The registration process is designed to be extremely simple. The content provider  is assumed to already have an account on the website implemented by the scheduling logic . This account may have been setup at the time that the broadcasting device  hardware was purchased.","From the perspective of the content provider , a registration process  for registering the new broadcasting device , according to one exemplary embodiment, is shown in .","In step , the broadcasting device  is connected to the network . For example, the broadcasting device  is plugged into an active Internet connection using an Ethernet port on the broadcasting device  via a physical link such as a cable. As another example, the broadcasting device  is brought into range of an open wireless network, e.g., a WiFi connection, if the broadcasting device  supports WiFi. If the wireless network includes security preventing a ready connection (e.g., a WEP code), the broadcasting device  can be commissioned using the physical link to the Internet and, after registration, the security wireless network code(s) (e.g., a router WEP code) can be transmitted to the broadcasting device  via the physical link, after which the broadcasting device  can be disconnected from the physical link and connected to the Internet via the wireless network. Also in step , power is applied to the broadcasting device, for example, by plugging in a power cord of the broadcasting device .","In step , the content provider  uses a computer (e.g., computer ) to navigate to the website of the scheduling logic . Then, the content provider  logs into his account.","In step , the content provider  is provided with an indication (e.g., via a pop-up message or a flash message) on the website indicating that an unregistered broadcasting device from a recognized WAN IP address has been detected. In particular, in step , the scheduling logic  determines if it is able to auto-detect the broadcasting device .","If the scheduling logic  is able to auto-detect the broadcasting device , the website will prompt the content provider , in step , to check whether a light (e.g., LED) on a case of the broadcasting device  is flashing. The broadcasting device  can have any number of status indicators including visual status indicators (e.g., LEDs) and\/or audio status indicators (e.g., speakers). These status indicators can be used to provide a visual and\/or audible indication of various conditions relating to the broadcasting device  and\/or the system in which it is deployed. In one exemplary embodiment, the visual status indicators include one or more of a power indicator, a network connection indicator, an online indicator (which indicates, for example, that the broadcasting device  can reach the scheduler website), a WiFi indicator, and a battery charge level indicator.","The broadcasting device  can also have means or structure for facilitating control of all or part of the streaming operation. For example, the broadcasting device  can include means for allowing an on-site operator to start, pause, and resume the streaming operation at their own discretion. The means can include any structure supporting input from the operator, such as a button, switch, or the like. In one exemplary embodiment, an administrator can toggle this functionality on and off.","In step , the content provider determines if the light is flashing. If the content provider  sees the flashing light, he selects YES to confirm the flashing light and the broadcasting device  is successfully registered in step . The registration process  then ends (i.e., the remaining steps are skipped).","If the content provider  does not see the flashing light, he selects NO to indicate the light is not flashing. In response to the content provider  indicating that the light is not flashing (or the scheduling logic  being unable to auto-detect the broadcasting device  in step ), the scheduling logic  prompts the content provider  to manually register the broadcasting device . Manual registration requires that the content provider  find an identifier on the bottom of the case of the broadcasting device  and enter it via the website. This identifier can be any numeric data, alphanumeric data, or other code that uniquely identifies the broadcasting device. In one exemplary embodiment, the identifier is or is based on the die ID of the processor of the broadcasting device . In one exemplary embodiment, the identifier is one of a plurality of non-consecutive serial numbers. In one exemplary embodiment, at least a portion of the identifier is randomly generated. After the content provider  finds the identifier on the case, he enters it via the website in step .","The identifier must be entered by the content provider  so that the scheduling logic  knows which broadcasting device  is being registered, since the scheduling logic  was unable to auto-detect the broadcasting device . The scheduling logic  maintains records (e.g., a list) of unregistered broadcasting devices  from a commissioning process, as described below. In step , the scheduling logic  compares the identifier input by the content provider  to a record including data previously associated with the particular broadcasting device . In one exemplary embodiment, the record is created by the manufacturer interfacing with the website of the scheduling logic  after the broadcasting device is manufactured. The comparison in step  insures that only expected broadcasting devices are registered with the scheduling logic , thereby reducing if not eliminating the possibility that unauthorized broadcasting devices will be introduced into the system. Thus, the unique identifier allows the scheduling logic  to identify the broadcasting device .","As described below, the unique identifier is also used in communications with the scheduling logic  by the broadcasting device  to communicate its identity, which is authenticated using the shared credentials that were established during the commissioning process.","If the scheduling logic  is able to find a record with data matching the identifier of the broadcasting device , then the broadcasting device  is successfully registered in step . The registration process  then ends (i.e., the remaining steps are skipped).","If the scheduling logic  does not find a record with data matching the identifier input by the content provider , the scheduling logic  prompts the content provider , in step , to double-check that the broadcasting device  has power, the broadcasting device  is properly connected to the Internet, and the content provider  entered the identifier correctly.","If the content provider  finds one of these problems, he corrects it and clicks \u201cRetry,\u201d in step , which causes the registration process  to return to the auto-detection stage (i.e., step ). Alternatively, if the content provider  does not find one of these problems or otherwise wishes to abort the registration process , he can choose to not select \u201cRetry,\u201d in step . Thereafter, the broadcasting device  remains unregistered in step . The content provider  can then elect to call a provided support number for further troubleshooting or assistance.","The registration process  for registering a broadcasting device , as shown in , can also be viewed from the perspective of the broadcasting device . As noted above, the registration process  is a process by which the broadcasting device  becomes associated with a particular content provider .","Upon powering up (step ), the broadcasting device  sends a \u201cstatus request\u201d (e.g., an HTTP GET request) to the scheduling logic  (see ). For additional security. any of the communications between the broadcasting device  and the scheduling logic  might be done using Secure Hypertext Transfer Protocol (HTTPS). The broadcasting device  is authenticated using its unique identifier (described above) and secret password (described below). In one exemplary embodiment, each \u201cstatus request\u201d is sent through a RESTful web-service API. The status request can take the form of GET\/nodes\/[NODE-ID].xml and return an XML packet which minimally includes, for example, <node><status>unregistered<\/status><\/node>. The status request is used to send the unique identifier of the broadcasting device  to the scheduling logic . The status request also allows the broadcasting device  to request the current status that the scheduling logic  has for itself. For example, the status could be \u201cunregistered,\u201d in which case the broadcasting device  would do nothing but keep checking in with the scheduling logic ; \u201cprobing,\u201d in which case the broadcasting device  would know that someone is trying to register it, so the broadcasting device  would flash its LED; or \u201cready\u201d or \u201cbroadcasting,\u201d in which case the broadcasting device  is registered and can proceed to broadcast video (see ).","A combined process  for registering the broadcasting device  and performing post-registration processing (e.g., broadcasting) using the broadcasting device , according to one exemplary embodiment, is shown in . Steps , , , , and  relate to the autonomous registration of the broadcasting device  with the scheduling logic . Steps , , , , , , , , , , and  are all directed to post-registration processing by the broadcasting device . In particular, steps , , , , and  form a processing loop wherein the broadcasting device  periodically checks with the scheduling logic  to determine if an event schedule stored on the broadcasting device  is stale (i.e., no longer matches the event schedule stored at the scheduling logic ). If so, the broadcasting device  updates the local copy of its event schedule (step ). Furthermore, steps , , , , , , , and  relate to broadcasting of events by the broadcasting device .","In addition to being useful during the registration process , the returned status is also useful for synchronizing expected behavior when a connection between the broadcasting device  and the scheduling logic  is interrupted. For example, the status request could tell the broadcasting device  whether or not there is an open broadcast session for that broadcasting device . An open broadcasting session means that the scheduling logic  believes that the broadcasting device  should be streaming video to a specific media server  on specific ports. If power was lost at the broadcasting device , the scheduling logic  will use this information to resume a broadcast when power is restored to the broadcasting device .","Since the broadcasting device  is not registered, the scheduling logic  logs its network address (e.g., WAN IP) and returns a status of \u201cunregistered.\u201d The WAN IP refers to the IP address from which traffic appears to originate on the Internet or wide-area network. The broadcasting device  waits (e.g., for a few seconds) and then re-checks the status of the broadcasting device .","If the content provider  is logged into the website of the scheduling logic  (step ) and follows the hyperlink labeled \u201cRegister a New Node\u201d (step ), then the scheduling logic  compares the WAN IP address of the content provider  with the last know WAN IP address of its unregistered broadcasting devices.","If the scheduling logic  finds a unique match (i.e., finds exactly one of its unregistered broadcasting devices with the same last known WAN IP address as the content provider ), then the scheduling logic  changes that status of the broadcasting device  to \u201cprobing.\u201d Otherwise, the scheduling logic  prompts the content provider  to enter the unique code from the bottom of the case of the broadcasting device  (step ).","When the broadcasting device  sees a status of \u201cprobing,\u201d the broadcasting device  begins flashing its light (e.g., LED). The broadcasting device  waits (e.g., for a few seconds) and then re-checks the status of the broadcasting device  by sending another \u201cstatus request.\u201d In this manner, prior to being registered, the broadcasting device  continues to query the scheduling logic  until it discovers that it is registered (e.g., \u201cready,\u201d \u201cbroadcasting\u201d).","If the content provider  is eventually successful in registering the broadcasting device , the scheduling logic  will set the broadcasting device's status to \u201cready.\u201d The registration process  then ends (i.e., the remaining steps are skipped). Once the broadcasting device  is registered, it enters its normal life cycle and can stream video in accordance with its user-defined schedule.","If, however, the content provider  elects to give up on the registration process , or the registration process  otherwise fails, the scheduling logic  will set the status of the broadcasting device  to \u201cunregistered.\u201d Thereafter, as noted above, since the broadcasting device  is not registered, the scheduling logic  logs its WAN IP address and returns a status of \u201cunregistered,\u201d and the registration process  can continue from this point. In the embodiment described herein, an unregistered broadcasting device cannot be used for anything with respect to the scheduling logic or the media servers, since it is not associated with a user account. No events can be scheduled for the unregistered broadcasting device and no video can be streamed through it. The purpose of the registration process  is to tie the broadcasting device  to a specific account. After registration, a user (e.g., the content provider ) can schedule events for the broadcasting device  and broadcast from it.","The broadcasting device  is fully automated and interacts with the scheduling logic  through a web-server API in order to auto-register itself, to coordinate its schedule, to initiate event broadcasting and to coordinate the uploading of high-quality (e.g., any one or any two or more of the following: higher video resolution, lower video compression loss; increased audio quality, larger size, and\/or increased frame rate) video. Prior to shipping each broadcasting device , a secret password is installed on the broadcasting device  via a commissioning process and the scheduling logic  receives a record for that broadcasting device  with its secret password. This secret password can be any numeric data, alphanumeric data, or other code for use in authenticating the broadcasting device  with respect to the scheduling logic . By sharing the secret password, the broadcasting device  can be securely authenticated (using its unique identifier and secret password) by the scheduling logic  using HTTP authentication over an SSL connection.","A commissioning process is a process by which software is loaded onto the broadcasting hardware to form the broadcasting device . During the commissioning process, a user name and a secret password are assigned to the broadcasting device  and shared with the scheduling logic . In one exemplary embodiment, the username is the unique identifier described above. The commissioning process typically occurs at a manufacturing site of the broadcasting device . The software is loaded onto the broadcasting hardware using any suitable means, method, and\/or mechanism. In one exemplary embodiment, described below, the software is loaded onto the broadcasting hardware using a bootable mini-SD card. The manufacturer has a special account (i.e., a manufacturer account) on the website of the scheduling logic .","A commissioning process, according to one exemplary embodiment, includes the following six steps:","Step 1. A bootable mini-SD card is inserted into or otherwise interfaced with (e.g., via a USB-based card interface communicating via a USB port of) the broadcasting device . The bootable mini-SD card contains a software image that will be installed on the broadcasting device .","Step 2. The broadcasting device  is turned on, which results in the broadcasting device  booting from the mini-SD card.","Step 3. A boot program on the mini-SD establishes a network connection (e.g., a wired or wireless Internet connection) and contacts the website of the scheduling logic  over an SSL connection using the manufacturer's account information or other credentials (found on the boot image). The scheduling logic  authenticates the manufacturer and also verifies its IP address.","Step 4. The boot program makes a commissioning request to the scheduling logic  passing in the broadcasting device's ID as the broadcasting device name.","Step 5. The scheduling logic  responds with an auto-generated password that is stored on a flash disk of the broadcasting device  as well as at the scheduling logic .","Step 6. The boot program writes the software (i.e., the management software) to the flash disk of the broadcasting device , which concludes the commissioning process.","In one exemplary embodiment, a testing device (e.g., the computer ) can be used to verify that the software was correctly installed on the broadcasting hardware during the commissioning process and is functioning properly. This testing device, or another device, could be used to print a label including the unique identifier for the broadcasting device , wherein the label is affixed to a housing or case of the broadcasting device .","Each broadcasting device  keeps a local copy of its schedule of events, but makes frequent requests to the scheduling logic  to check for changes to its schedule. In particular, the broadcasting device  sends an \u201cevent schedule request\u201d (e.g., an HTTP GET request) to the scheduling logic , using its unique identifier and secret password for authentication. In this manner, the broadcasting device  obtains a copy of its event schedule maintained by the scheduling logic . In one exemplary embodiment, the response from the scheduling logic  that includes the event schedule is formatted in XML.","In one exemplary embodiment, the broadcasting device  sends an \u201cevent schedule request\u201d to the scheduling logic  approximately every 5 seconds. In one exemplary embodiment, the broadcasting device  sends an \u201cevent schedule request\u201d to the scheduling logic  every 30 to 60 seconds. In one exemplary embodiment, a delay of more than 60 seconds is present between successive \u201cevent schedule requests\u201d sent by the broadcasting device  to the scheduling logic  no more frequent than every 60 seconds.","For each event in the event schedule, the web service returns a unique identifier, a start date, a start time, and a duration. Additionally, each event entry in the event schedule includes an \u201cupdated-at\u201d timestamp. The broadcasting device  stores (e.g., caches) this event schedule locally and uses it to determine when to begin and end each broadcasting session. In one exemplary embodiment, a token made by hashing event updated-at timestamps is used to minimize traffic (i.e., the event schedule requests) with the scheduling logic. At the scheduling logic , the token is recalculated whenever the schedule changes. At the broadcasting device , the token is recalculated whenever an updated schedule is downloaded from the scheduling logic . A difference between the tokens indicates that a change in the schedule maintained as the scheduling logic . Thus, if the tokens match, an HTTP status code indicating that there are no changes to the schedule is returned to the broadcasting device by the scheduling logic . If the tokens do not match, XML content containing the updated schedule is returned to the broadcasting device  by the scheduling logic . In this manner, the \u201cevent schedule request\u201d is sent by the broadcasting device  with its token, and the scheduling logic  compares the token from the broadcasting device  to its own token, only returning the full schedule if the tokens are different.","When one of the events on the schedule of the broadcasting device  is scheduled to begin, the broadcasting device  powers up the video acquisition device  and any other related devices, early enough in advance for them to go through their respective power-up processes, and sends a \u201cchannel creation request\u201d to the scheduling logic . This request contains the scheduled event's unique ID and results in the creation of a new broadcasting channel. The broadcasting device  then polls this channel by issuing a \u201cview channel request\u201d to the scheduling logic  to determine completion of the channel creation. In particular, the broadcasting device  must wait until the returned channel is available. Once the channel is available, the web-service responds with values for the media server name\/URL, the stream name, and the video and audio ports to broadcast to. Once these values are obtained, the broadcasting device  begins capturing and encoding its video stream. The stream is configured to broadcast to the media servers  and ports given in the channel. From an encoder, a configuration file is created in SDP format and this configuration file is sent to the scheduling logic  in a \u201cconfigure channel request.\u201d The configure channel request establishes the connection between the broadcasting device  and the designated media servers . The scheduling logic  passes this information on to the correct media servers . Thereafter, the broadcasting device  begins streaming to the media servers  on the correct ports. Once streaming of the video data for the event is complete and a corresponding higher quality (e.g., any one or any two or more of the following: higher video resolution, lower video compression loss; increased audio quality, larger size, and\/or increased frame rate) file is saved, the broadcasting device  can begin a trickle upload process for the video data, as described below.","When the currently broadcasting event is scheduled to end, the broadcasting device  sends a \u201cdelete channel request\u201d to the scheduling logic  and powers down any related devices (i.e., the video acquisition device ). This request contains the open channel's unique ID, and results in the destruction (i.e., deletion) of the broadcasting channel. Upon deletion of the channel, the video session is converted into a video recording corresponding to a standardized or proprietary format for playback (e.g., VOD) on a standardized or proprietary player, respectively. The video recording is stored in the media server cloud  and is associated with the event for later rebroadcast.","The scheduling logic  manages the media server cloud  by acquiring, configuring and releasing media servers , for example, as streaming server instances from a third-party cloud computing service (e.g., Amazon EC2) as needed. The scheduling logic  also monitors the server instances for changes in usage or errors, and manages secure access to the media servers .","For each streaming server instance, the scheduling logic  maintains a record of both estimated or otherwise reserved bandwidth for the event and actual bandwidth being used by the event. All decisions about scaling the resources of the media server cloud  are based on actual and expected fluctuations in bandwidth, which is the limiting performance factor for streaming media. In order to preserve service quality, each streaming server instance is utilized only up to a threshold bandwidth. The threshold bandwidth is set to insure that service quality is good while the actual bandwidth usage remains at or below this level.","New streaming server instances are requested from the third-party cloud computing service whenever there is a need for more bandwidth than can be supported easily by the current streaming servers that are active in the media server cloud . This need can be triggered by an event that is scheduled to start soon, or by an increase in the number of view requests for existing live broadcasts and\/or pre-recorded broadcasts.","Before a scheduled event begins, the amount of bandwidth required is estimated. The bandwidth estimate is then increased by a scaling factor (e.g., two standard deviations) in order to accommodate the bandwidth needs of the event in the vast majority of cases (i.e., the view bandwidth). The viewer bandwidth is then increased by another scaling factor (e.g., 20%) to accommodate unexpected scaling to other servers. Application of these scaling factors provides a total bandwidth to be reserved for the event (i.e., the reserved bandwidth).","Assuming the reserved bandwidth is not greater than the threshold bandwidth for a single streaming server, then all active streaming servers are checked for available bandwidth. If an available server is found, then this amount of bandwidth is reserved on the available server. Additionally, the available server is then configured to act as an Origin server for the event. If a streaming server with enough available bandwidth is not found, then the scheduling logic  acquires a new streaming server instance, configures it, and reserves the requested bandwidth on this new server which becomes the Origin server for the event.","If the reserved bandwidth is greater than the threshold bandwidth for a single streaming server, then the necessary bandwidth is reserved on multiple servers. The scheduling logic  first reserves a complete server to act as the Origin server for the event. The scheduling logic  then reserves one or more Edge servers to supply all of the needed bandwidth to the viewers , with the number of Edge servers being determined by dividing the reserved bandwidth by a server's threshold bandwidth (rounding up to a whole number). If the Origin server can support all of the Edge servers directly, then the Edge servers are configured to pull from the Origin server. The number of Edge servers that can be supported by an Origin server is determined by dividing the threshold bandwidth by the event stream's bandwidth (rounding down to a whole number) and then scaling down further (e.g., 10%) to allow room for unexpected growth. If the Origin server cannot support all of the Edge servers, then a number of Relay servers will be reserved to bridge the gap. This is a simple fanout configuration including as many layers of Relay servers as necessary to support the Edge servers without exceeding the threshold bandwidth on any one server.","During a live event broadcast, the bandwidth being used by viewers  is monitored to make sure it stays within the viewer bandwidth range for the event. If a view request arrives that would cause the bandwidth to exceed this limit, then the scheduling logic  will attempt to reserve more bandwidth on the same server for the event. If the server has bandwidth available, then it is reserved and the viewer bandwidth limit is adjusted to serve the outstanding view request. If the server does not have available bandwidth, then a new Edge server is reserved which relays from the reserved bandwidth on the Origin server. If the amount of reserved bandwidth is smaller than some limit, then a Relay server is also reserved to stand between the Origin server and the new Edge server. This same mechanism is used with bandwidth usage on the new Relay server, so that the network can readily scale in size and, in theory at least, scale indefinitely.","As far as management of the media server cloud  is concerned, video-on-demand (VOD) streaming is treated as an ongoing event. This is true in that the bandwidth usage history for viewing pre-recorded events is tracked and used to estimate future bandwidth needs in the same way that event bandwidth usage is estimated. The VOD pseudo-event then reserves bandwidth in the same way as regular (i.e., live) events, with the exception that all servers can send VOD directly, so there is no need for an Origin\/Relay\/Edge configuration. As bandwidth increases beyond the threshold bandwidth of a single server, more servers are reserved directly.","After a streaming server is acquired and is running on a disk image that contains streaming server software, additional configuration must be performed. This is done by uploading an initialization package to the server and then running an initialization script of the package. This includes activities such as performance tuning of the specific server instance, mounting a storage server disk image, and configuring security parameters.","When a particular event is ready to begin broadcasting, the server also needs to be configured for that event. This configuration is accomplished by running scripts that were installed as part of the initialization package. The configuration includes, for example, information indicating: (1) whether the server should act as an Origin, Relay, or Edge for the broadcast; (2) whether or not to record the broadcast; (3) what licensing restrictions to use for the broadcast (e.g., limiting the number of viewers ); and what security token and parameters to use for the broadcast.","When a streaming server is first acquired, a scheduled checkup is set to assess whether or not the server is still necessary. At each checkup, the server is checked for reserved bandwidth. If no bandwidth is reserved on the server, then it is released. Otherwise, it is left running and another checkup is scheduled for later (e.g., in one hour). By keeping the streaming servers in order and allocating bandwidth according to that ordering, a server will rarely remain in use long if it is not needed.","The bandwidth usage for an event is estimated based on the history of actual bandwidth usage for the particular broadcasting device  that is streaming the event and may also be influenced by other factors, such as the content provider's market segment, the starting date, time, and duration of the event, and\/or hard limits on the number of viewers  or bandwidth setup by the content provider  when configuring the event. The estimate may also be influenced by promotional advertising analytics, such as a number of people who indicated interest on a Facebook page setup for the event. In one exemplary embodiment, some or all of these influencing factors are combined into a Bayesian probability model, and the amount of bandwidth is estimated as the mean of the probability distribution.","When an event is underway, the broadcasting device  transmits video and audio data to the media servers . In one exemplary embodiment, the video and audio data are transmitted using the Real-time Transport Protocol (RTP). The video data and\/or the audio data may be encoded\/compressed prior to transmission. In one exemplary embodiment, the video data is encoded according to the H.264 standard, using the Baseline Profile (BP). In one exemplary embodiment, the audio data is encoded according to the Advanced Audio Coding (AAC) standard, using the Low Complexity (LC) profile. As part of starting an event, the scheduling logic  places an SDP file on the designated media servers , which allows the media servers  to know how to receive and process the RTP data being sent to it by the broadcasting device .","After a live broadcast is completed, the broadcasting device  may upload to the storage servers a higher quality (e.g., any one or any two or more of the following: higher video resolution, lower video compression loss; increased audio quality, larger size, and\/or increased frame rate) video that was recorded locally during the live broadcast. This is done so that later re-broadcasting does not suffer from the same quality limitations that uplink bandwidth imposes on the initial live broadcast. Accordingly, depending on the configuration of an event, the broadcasting device  may store a high-resolution copy of an event that it broadcast. In one exemplary embodiment, the broadcasting device  stores a high-resolution copy of an event in addition to broadcasting the event live. In one exemplary embodiment, the broadcasting device  stores a high-resolution copy of an event instead of broadcasting the event live.","When the broadcasting device  is not busy broadcasting events, a background process running on the broadcasting device  sends higher quality (e.g., any one or any two or more of the following: higher video resolution, lower video compression loss; increased audio quality, larger size, and\/or increased frame rate) data acquired by the video acquisition device  to one or more of the media servers  instantiated as storage servers in the media server cloud  for storage thereof. A \u201ctrickle upload\u201d process  for storing the higher quality data, according to one exemplary embodiment, is shown in .","According to the upload process , the broadcasting device  encrypts the higher quality (e.g., any one or any two or more of the following: higher video resolution, lower video compression loss; increased audio quality, larger size, and\/or increased frame rate) media file with a public key that the scheduling logic  has issued to the applicable media servers , in step . Next, in step , the broadcasting device  sends a UDP \u201cstart\u201d packet to the media server  with the event identifier, a checksum of the original higher quality media file, and the length of the encrypted file, telling the server that the broadcasting device  is initiating the trickle upload process.","If the media server  successfully receives the \u201cstart\u201d packet from the broadcasting device  (steps  and ), the media server  stores the checksum for later validation and allocates space to hold the encrypted file, in step . The media server  then sends a UDP \u201cstart response\u201d packet to the broadcasting device , indicating that the server is ready to receive data (step ).","Next it is determined whether the broadcasting device  successfully receives the \u201cstart response\u201d packet from the media server  (steps  and ). If acknowledgment isn't received within a predetermined timeout, the broadcasting device  repeats sending of the UDP \u201cstart\u201d packet (step ). If the broadcasting device  receives the \u201cstart response\u201d packet from the media server , the broadcasting device  determines the Path Maximum Transmission Unit (PMTU) between the broadcasting device  and the media server , in step , to reduce the chances that packets will be fragmented at the Internet Protocol (IP) layer. The broadcasting device  divides the encoded higher quality data file up into blocks of PMTU minus H bytes of data, in step , where H is the number of bytes in the headers of the \u201csend\u201d packet, including the application, UDP, and IP headers.","In step , the broadcasting device  starts a predetermined number of threads based on a number of outstanding packets the broadcasting device  is willing to tolerate. Each of the threads will then perform the following four steps: (1) choose an unsent block from the file in step ; (2) mark the block as being in transit in step ; (3) send a UDP \u201csend\u201d packet to the media server  with the event identifier, the starting offset of the block into the file, the data length, and the data chunk, in step ; and (4) wait a predetermined amount of time for a response from the server in step . If the server sends a response, mark the packet as delivered in step . If no response is received, the thread processing returns to step . Next, in step , it is determined if any unsent blocks remain. If unsent blocks do remain, the thread processing restarts at step . If there are no more unsent blocks, the thread exits and processing of the upload process  continues at step .","The media server  listens for UDP \u201csend\u201d packets from the broadcasting device , in step . Upon receipt of a UDP \u201csend\u201d packet (step ), the media server  writes the content into the pre-allocated storage at the requested offset (step ) and sends a UDP \u201csend response\u201d to the broadcasting device  (step ).","Once all blocks are sent (step ), the broadcasting device  sends a UDP \u201cstop\u201d packet to the media server  with the event identifier, telling the server that the broadcasting device  has sent the entire higher quality file, in step .","If the media server  successfully receives the UDP \u201cstop\u201d packet (steps  and ), the media server  decrypts the received data with its private key and calculates a checksum of the unencrypted file (step ). In step , it is determined if this checksum matches the checksum sent by the broadcasting device  (in step ). If the checksums match, in step , the media server  will begin to store the higher quality file in the media server cloud  (step ). If the checksums do not match, then the decrypted data will be discarded in step . The media server  will send a UDP \u201cstop response\u201d packet to the broadcasting device  indicating its success or failure (steps  and , respectively).","If the broadcasting device  successfully receives the \u201cstop response\u201d packet (steps  and ), the \u201cstop response\u201d packet is evaluated to determine if the file was successfully delivered (step ). Thus, if the status in the \u201cstop response\u201d packet indicates that the file delivery was successful, the broadcasting device  considers this transfer complete. If the status in the \u201cstop response\u201d packet indicates that the file delivery was unsuccessful, the broadcasting device  will restart processing of the upload process  at step . If the broadcasting device  does not receive the \u201cstop response\u201d packet (steps  and ), processing of the upload process  continues at step .","The viewer  views an event through a URL provided by the content provider . The URL could be provided, for example, as a hyperlink in an e-mail or on the a website (e.g., the content provider's site). The URL is constructed for the broadcast by an API of the scheduling logic . The URL points to a customized video player (e.g., Flash with ActionScript) that holds a secure token, the URL, and parameters for the event's VOD or Edge server. If the event is ticketed, it also supplies a unique token within the parameters. These tokens are available according to the content provider's licensing configuration. This is the only interaction between the viewer  and the scheduling logic , i.e., to retrieve a customized viewer based on the broadcast requested and the viewer's access privileges.","The viewer  similarly has no direct access to the media servers . The viewer  can only access the video stream on a media server  (Edge or VOD) through the customized video player (e.g., Flash and ActionScript) that was supplied by the scheduling logic . The video steam is encrypted and authenticated by a secure token (and optionally a unique viewer token) to prevent any unauthorized access to the video content.","As noted above, a broadcast can be configured to require unique tokens or tickets. In order to view such a broadcast, each viewer  must pass a unique token to the media server  which will lookup the token and insure that it is not a violation of its restrictions to allow viewing of the video. If the token is not found in a lookup database of the media servers , then access to the video is refused.","If the token is found in the lookup database, it can be used to impose various restrictions, for example: (1) restrictions on the number of simultaneous viewers (e.g., a restriction on one simultaneous viewer would allow the viewer if there were no open viewers using the same token, but would refuse access if such a viewer was already open); (2) restrictions on viewer time, such as restricting viewing to a specific time period and\/or a specific amount of cumulative viewing time; (3) restrictions on the amount of bandwidth consumed by viewers with the token; (4) group restrictions wherein a group of tokens are cumulatively restricted according to simultaneous viewer count, specific date\/time ranges, cumulative viewing time, and\/or bandwidth limits; and (5) restrictions that differ for viewing an event live and viewing a pre-recorded version of the event.","The unique tokens and their corresponding restrictions are managed by the scheduling logic  as part of the account and event setup. A user interface provided by the scheduler website keeps this management simple by providing sets of common restrictions for different types of events. The selected restrictions are then communicated to the media server  as part of event configuration.",{"@attributes":{"id":"p-0155","num":"0154"},"figref":"FIGS. 18-22","b":["1800","202","204","220","216","200"]},"In this example, the administrator shares a link (corresponding to a URL) with potential viewers of a video stream. It is assumed that a broadcasting device of the autonomous broadcasting system has already been registered with the website. If the broadcasting device and any related hardware (e.g., a video acquisition device) are working, the event will automatically be broadcasted as the live video stream to as many of the potential viewers as request or otherwise connect to the live video stream. The autonomous broadcasting system is readily scalable based on many factors (e.g., a number of requesting viewers) since the system uses cloud computing to dynamically add servers as needed.","The user interface  includes a webpage  shown in , which is displayed as a result of a user (e.g., the content provider ) visiting the scheduler website (e.g., at www.boxcast.com) using a computer (e.g., the computer ) running a web browser. The webpage  represents a home page of the scheduler website that initially appears, unless the user had selected \u201ckeep me signed in\u201d during his last session. The webpage  includes a login link .","If the user clicks on or otherwise selects the login link , the user interface  displays a webpage , as shown in , which prompts the user to login to the scheduler website by entering a username  (e.g., an e-mail address) and a password .","Once the user inputs his credentials (i.e., the username  and password ) and the credentials are authenticated by the system, the user is taken to his main webpage  as shown in . This main page  shows, for example, a status of broadcasting devices  (including any events that are currently being broadcast), a list of upcoming events , and a list of recent events , associated with the user. The main webpage  includes a \u201cschedule an event\u201d link .","If the user clicks on or otherwise selects the \u201cschedule an event\u201d link , the user interface  displays a webpage , as shown in , which prompts the user to input information for the new event to be scheduled. This information includes a name , a location or associated broadcasting device , a description , a broadcast date , a start time , and a duration , for the event. The webpage  also includes a save link  and a cancel link . If the user clicks or otherwise selects the cancel link , the event scheduling ends and the user is returned to his main page . If the user clicks or otherwise selects the save link , the new event is scheduled and the user is returned to a webpage  representing an updated version of his main page . The webpage , as shown in , includes the newly scheduled event in the list of upcoming events .","The selected broadcasting device  of the autonomous broadcasting system will broadcast the event to one or more media servers on the selected broadcast date and start time for the selected duration. Accordingly, users will be directed from a link corresponding to the new event, as displayed, for example, on the webpage  or a similar page at www.boxcast.com or as a link in an e-mail, to view the live video stream being broadcast for the event.","The systems and methods of the present invention can be implemented on a variety of platforms including, for example, networked computer systems and stand-alone computer systems. Additionally, the logic and databases shown and described herein preferably reside in or on a computer readable medium such as, for example, a Read-Only Memory (ROM), Random-Access Memory (RAM), programmable read-only memory (PROM), electrically programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), magnetic disk or tape, and optically readable mediums including CD-ROM and DVD-ROM. Still further, the processes and logic described herein can be merged into one large process flow or divided into many sub-process flows. The order in which the process flows herein have been described is not critical and can be rearranged while still accomplishing the same results. Indeed, the process flows described herein may be rearranged, consolidated, and\/or re-organized in their implementation as warranted or desired.","The above description of specific embodiments has been given by way of example. From the disclosure given, those skilled in the art will not only understand the general inventive concepts and their attendant advantages, but will also find apparent various changes and modifications to the structures and methods disclosed. For example, although the above exemplary embodiments reference streaming of video data and video data including audio data, the general inventive concepts can be extended to include the acquiring and streaming of audio data only. It is sought, therefore, to cover all such changes and modifications as fall within the spirit and scope of the general inventive concept, as defined by the appended claims and equivalents thereof."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a fuller understanding of the nature and advantages of the general inventive concepts, reference should be had to the following detailed description taken in connection with the accompanying drawings, in which:",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 10","FIG. 9"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 11","FIG. 10"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 12","FIG. 10"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 13","FIG. 10"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 14","FIG. 10"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIGS. 15A and 15B"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIGS. 16A and 16B"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIGS. 17A","b":["17","17","17","17","17"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 22","FIG. 20"]}]},"DETDESC":[{},{}]}
