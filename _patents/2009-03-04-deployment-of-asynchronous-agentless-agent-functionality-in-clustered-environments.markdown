---
title: Deployment of asynchronous agentless agent functionality in clustered environments
abstract: A mechanism for the deployment of asynchronous agentless agent functionality in clustered environments. An agentless agent execution node in an agentless agent execution node cluster receives a context message comprising an asynchronous operation request and an execution context from a messaging service. The agent node determines if an entry for the execution context exists in an execution context state table of the agent node. If no entry exists, the agent node creates an execution context entry in the execution context state table of the agent node. The agent node retrieves an asynchronous code module associated with the asynchronous operation from a central repository. The asynchronous code module is then executed on a managed resource to detect asynchronous code events occurring on the managed resource. When asynchronous code events are detected at the managed resource, the agent node sends a message comprising the asynchronous code events to a management server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08266301&OS=08266301&RS=08266301
owner: International Business Machines Corporation
number: 08266301
owner_city: Armonk
owner_country: US
publication_date: 20090304
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field","The disclosure relates generally to an improved data processing system, and more specifically to deployment of asynchronous agentless agent functionality in clustered environments.","2. Description of the Related Art","In a computer management environment, one or more central servers or controllers are used to manage a plurality (and often a large number) of other target resources. Target resources can be any type of computer device, including personal computer systems, servers, workstations, mainframes, peripherals, network devices, etc. The servers may perform work on multiple target resources within a network by interrogating, configuring, controlling, or otherwise communicating with the target resources. Common methods for managing target resources fall into two broad categories: agent-based and agentless methods.","In an agent-based method, specific agent applications are installed on each target device that needs to be managed. A central management server communicates with the locally-installed agent, which then communicates with the local OS to coordinate the desired management process on the target resource. However, agent-based methods can introduce management problems because the agents must themselves be deployed, installed, and updated on the target resources, which results in increased cost and complexity in managing the agents on each resource.","Agentless agents, or agents with a zero footprint, are a common form of agents in management systems. In an agentless method, the management system has knowledge of target devices on the network it manages. This knowledge may be derived through manual user registration, automatic discovery, or a combination of both. An agentless agent has a zero footprint in that the agent does not have an execution module installed on the managed target resource, but rather on an execution point external to the target resource.","Agentless agents provide an interface abstraction of the target resource to be managed. In particular, an agentless agent relies on a remote administration capability in the form of an exposed application programming interface (API) or remote console for the managed resource. Because the agent is not installed on the target device, the agent typically performs operations on the target device in a synchronous manner. For instance, to conduct a management operation on a target resource, execution code is retrieved from a repository, and temporarily installed on an execution point. Depending on the nature of the managed resource, the execution point may be a separate node or in a node cluster. The code is executed, and a response is sent to the management system before the execution code is removed from the execution point. This agentless method may be augmented by temporarily storing or caching the execution code at the execution point to improve performance if the code is used frequently. If, after a predetermined period the execution code is not used, the code is removed from the cache.","The illustrative embodiments provide a mechanism for the deployment of asynchronous agentless agent functionality in clustered environments. An agentless agent execution node in an agentless agent execution node cluster receives a context message from a messaging service. The context message includes a management operation request comprising an asynchronous operation and an execution context of the asynchronous operation. The agent node determines if an entry for the execution context exists in an execution context state table of the agent node. If no entry for the execution context exists, the agent node creates an entry for the execution context in the execution context state table of the agent node. The agent node retrieves an asynchronous code module associated with the asynchronous operation in the management operation request from a central repository. The asynchronous code module is then executed on a managed resource to detect asynchronous code events occurring on the managed resource. Responsive to detecting asynchronous code events at the managed resource, the agent node sends a message comprising the asynchronous code events to a management server.","As will be appreciated by one skilled in the art, the embodiments in the disclosure may be embodied as a system, method or computer program product. Accordingly, the embodiments in the disclosure may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, the embodiments in the disclosure may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.","Any combination of one or more computer usable or computer readable medium(s) may be utilized. The computer-usable or computer-readable medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CDROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device. Note that the computer-usable or computer-readable medium could even be paper or another suitable medium upon which the program is printed, as the program can be electronically captured via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in a computer memory. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The computer-usable medium may include a propagated data signal with the computer-usable program code embodied therewith, either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc.","Computer program code for carrying out operations of the embodiments in the disclosure may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","The embodiments in the disclosure are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions.","These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks. These computer program instructions may also be stored in a computer-readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable medium produce an article of manufacture including instruction means which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","With reference now to the figures and in particular with reference to , exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that  are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["100","100","102","100","102"]},"In the depicted example, server  and server  connect to network  along with storage unit . In addition, clients , , and  connect to network . Clients , , and  may be, for example, personal computers or network computers. In the depicted example, server  provides information, such as boot files, operating system images, and applications to clients , , and . Clients , , and  are clients to server  in this example. Network data processing system  may include additional servers, clients, and other devices not shown.","Program code located in network data processing system  may be stored on a computer recordable storage medium and downloaded to a data processing system or other device for use. For example, program code may be stored on a computer recordable storage medium on server  and downloaded to client  over network  for use on client .","In the depicted example, network data processing system  is the Internet with network  representing a worldwide collection of networks and gateways that use the Transmission Control Protocol\/Internet Protocol (TCP\/IP) suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, governmental, educational and other computer systems that route data and messages. Of course, network data processing system  also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN).  is intended as an example, and not as an architectural limitation for the different illustrative embodiments.","With reference now to , a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system  is an example of a computer, such as server  or client  in , in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example, data processing system  includes communications fabric , which provides communications between processor unit , memory , persistent storage , communications unit , input\/output (I\/O) unit , and display .","Processor unit  serves to execute instructions for software that may be loaded into memory . Processor unit  may be a set of one or more processors or may be a multi-processor core, depending on the particular implementation. Further, processor unit  may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example, processor unit  may be a symmetric multi-processor system containing multiple processors of the same type.","Memory  and persistent storage  are examples of storage devices . A storage device is any piece of hardware that is capable of storing information, such as, for example without limitation, data, program code in functional form, and\/or other suitable information either on a temporary basis and\/or a permanent basis. Memory , in these examples, may be, for example, a random access memory or any other suitable volatile or non-volatile storage device. Persistent storage  may take various forms depending on the particular implementation. For example, persistent storage  may contain one or more components or devices. For example, persistent storage  may be a hard drive, a flash memory, a rewritable optical disk, a rewritable magnetic tape, or some combination of the above. The media used by persistent storage  also may be removable. For example, a removable hard drive may be used for persistent storage .","Communications unit , in these examples, provides for communications with other data processing systems or devices. In these examples, communications unit  is a network interface card. Communications unit  may provide communications through the use of either or both physical and wireless communications links.","Input\/output unit  allows for input and output of data with other devices that may be connected to data processing system . For example, input\/output unit  may provide a connection for user input through a keyboard, a mouse, and\/or some other suitable input device. Further, input\/output unit  may send output to a printer. Display  provides a mechanism to display information to a user.","Instructions for the operating system, applications and\/or programs may be located in storage devices , which are in communication with processor unit  through communications fabric . In these illustrative examples the instruction are in a functional form on persistent storage . These instructions may be loaded into memory  for execution by processor unit . The processes of the different embodiments may be performed by processor unit  using computer implemented instructions, which may be located in a memory, such as memory .","These instructions are referred to as program code, computer usable program code, or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media, such as memory  or persistent storage .","Program code  is located in a functional form on computer readable media  that is selectively removable and may be loaded onto or transferred to data processing system  for execution by processor unit . Program code  and computer readable media  form computer program product  in these examples. In one example, computer readable media  may be in a tangible form, such as, for example, an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage  for transfer onto a storage device, such as a hard drive that is part of persistent storage . In a tangible form, computer readable media  also may take the form of a persistent storage, such as a hard drive, a thumb drive, or a flash memory that is connected to data processing system . The tangible form of computer readable media  is also referred to as computer recordable storage media. In some instances, computer readable media  may not be removable.","Alternatively, program code  may be transferred to data processing system  from computer readable media  through a communications link to communications unit  and\/or through a connection to input\/output unit . The communications link and\/or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non-tangible media, such as communications links or wireless transmissions containing the program code.","In some illustrative embodiments, program code  may be downloaded over a network to persistent storage  from another device or data processing system for use within data processing system . For instance, program code stored in a computer readable storage medium in a server data processing system may be downloaded over a network from the server to data processing system . The data processing system providing program code  may be a server computer, a client computer, or some other device capable of storing and transmitting program code .","The different components illustrated for data processing system  are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in  can be varied from the illustrative examples shown. The different embodiments may be implemented using any hardware device or system capable of executing program code. As one example, the data processing system may include organic components integrated with inorganic components and\/or may be comprised entirely of organic components excluding a human being. For example, a storage device may be comprised of an organic semiconductor.","As another example, a storage device in data processing system  is any hardware apparatus that may store data. Memory , persistent storage  and computer readable media  are examples of storage devices in a tangible form.","In another example, a bus system may be used to implement communications fabric  and may be comprised of one or more buses, such as a system bus or an input\/output bus. Of course, the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally, a communications unit may include one or more devices used to transmit and receive data, such as a modem or a network adapter. Further, a memory may be, for example, memory  or a cache such as found in an interface and memory controller hub that may be present in communications fabric .","As previously mentioned, in an agentless management environment, execution code for operating on target resources may be executed in a synchronous manner. A synchronous management operation is one that is initiated from a central management server in the networked environment and \u2018pushed out\u2019 to the agentless agent for execution. The agentless agent translates the management request into a form which is understood by the target managed resource. This form typically leverages the remote API capabilities of the managed resource, and enables the agent to reside on the host machine separate from the managed resource. In a synchronous management operation, data flows from the central management server to the managed resource. The central management server expects a response to be returned from the synchronous operation before initiating another synchronous operation. In contrast, an asynchronous management operation is one that detects events occurring on the managed resource. In an asynchronous management operation, data flows from the managed resource to the central management server. A challenge in an agentless management environment is in how asynchronous operations may be executed at a managed resource, and how their resulting events are to be detected by an agentless agent. For example, the execution of a synchronous operation may result in a long running process workflow on the target managed resource. During this synchronous execution, the central management system should be notified asynchronously about events that occur on the managed resource. In the particular example case of scheduled data reconciliation operations or real-time event notification, the synchronous management execution code needs to run constantly on one of the resources. A further example case is when a user or automated processes synchronously execute actions on the target managed resource. These actions may trigger events which the central management server is notified of asynchronously via the agentless agent.","Existing solutions to enable asynchronous operations to be executed in an agentless management environment include performing the installation of the asynchronous execution code at the agentless agent execution point and the execution of the code as separate distribution modules, thereby enabling the asynchronous operations to be executed. However, as the installations of synchronous and asynchronous agent functionality are implemented and executed separately, this solution is prone to error and more complex to maintain. Another existing solution to enable asynchronous operations to be executed in an agentless management environment is performed in a clustered network environment. In a clustered environment, every node of the system is a potential execution point, where resource management execution code may be installed, executed, and deleted as required. In existing clustered environment methods, execution code modules comprising the execution code are installed and run on one clustered node. However, this approach does not provide high availability, as the clustered node in which the execution modules are installed becomes a single point of failure. Alternatively, an instance of execution code can be installed on each clustered node and started with a failover mechanism implemented separately. However, this approach suffers from complexity of deployment when upgrades to each node are required.","The illustrative embodiments provide a solution to the problems above by providing a computer management environment that utilizes existing components of a management system with agentless agents in a clustered environment to provide deployment of all agent functionality from a single central location and in a single combined code module (i.e., both synchronous and asynchronous code) while ensuring high availability. A clustered network environment is one in which the workload of a server may be distributed across multiple machines to support high availability. High availability relates to assigning redundant computing resources to replace allocated computing resources in a failover mode so as to ensure availability of application logic irrespective of any failure conditions which may arise. In clustered environments, a cluster of nodes supports a single computing mission whereas a lead node normally handles the computing mission while the remaining auxiliary nodes remain in waiting for a failover condition arising in the lead node. During node failover, an auxiliary node can be assigned responsibility to continue handling the computing mission so as to relieve the failed lead node. In this regard, the auxiliary node becomes the lead node. To the extent that multiple auxiliary nodes support the lead node in a failover condition, a policy can determine which of the auxiliary nodes should become the lead node during a failover condition.","The agentless management system in the illustrative embodiments enables execution code comprising all synchronous and asynchronous agent functionality to be managed and stored at a central repository in a central management server. As the execution code is maintained in a single, central repository, the agent functionality is easier to maintain than in existing systems. The agentless agents and upgrades to the agentless agents are managed as standard agentless agent installation\/upgrades. When the management operation code is executed on arbitrary execution nodes in the agent execution cluster, the agentless agents will upload\/retrieve and execute any new versions of the management operation code. As a result, the agentless agent management system does not require upgrading of the execution code on nodes throughout the cluster.","To manage target resources in the agentless management system, the solution described in the illustrative embodiments implements and packages the synchronous and asynchronous agent functional components in execution code modules at a central location (e.g., at a central management server). The execution code modules and the standard agentless agents may be persisted in the central repository at the management server. At the central management server, a user may deploy synchronous and asynchronous code in a single combined module to an agent execution point, and the code may be executed by a code executor running on an execution point (e.g., a clustered node). In a synchronous operation, an agentless agent deployed to an execution point in the node cluster operates in the standard manner by uploading an execution code module to the execution point, executing the synchronous operation in the execution code module on the managed resource, and then sending a response from executing the synchronous operation back to the management server. In one embodiment, the execution code may be cached at the execution point. In an asynchronous operation, the agentless agent deployed to the execution point uploads an execution code module to the execution point and executes the asynchronous operation in the execution code module to detect events occurring on the managed resource.","Additionally, the solution described in the illustrative embodiments utilizes an agentless agent execution cluster and messaging service to provide multiple code execution points and ensure high availability in the event of a node failure during an asynchronous operation. An execution context state table is maintained at each execution point. The execution context comprises information that may be used to identify or manage a particular asynchronous operation. Information within the execution context of an asynchronous operation may be used to indicate the current execution state of the operation. As an asynchronous operation executes at an agent node to monitor and detect events occurring on a target resource, an execution context state manager in the node updates the operation's execution context in that node's execution context state table. The execution context state manager then propagates the updated execution state context to the other nodes in the cluster. Thus, by maintaining the execution context of asynchronous operation code at each of the execution points, the execution state information of the asynchronous operations is managed in a non-central location and manner. When the asynchronous operation has completed, the operation code is removed from the node, the execution state of the operation is updated in the node's execution state table as \u201ccomplete\u201d, and the updated execution state of the completed operation is also propagated to other cluster nodes.","The other nodes may use the information in the operation's execution context to upload and restart the asynchronous operation code if necessary. For instance, if a clustered node that is an execution point fails, the agentless management system in the illustrative embodiment allows another node in the clustered environment to assume the role of the failed node and deploy all asynchronous code identified in the node's execution context state table as having an \u201cincomplete\u201d execution state. In other words, if the clustered node executing the code (lead node) fails during execution of an asynchronous operation code, the execution code module comprising the asynchronous operation code can be uploaded from the management servers code repository and executed on another node (auxiliary node). Context distribution and failover mechanism of the operational code may be facilitated through the method described in U.S. patent application Ser. No. 11\/944,574, entitled \u201cDe-Centralized Nodal Failover Handling\u201d, filed on Nov. 23, 2007, and herein incorporated by reference in its entirety.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 3","FIG. 1"],"b":["300","100","300","300","302","304","306","308","300","300"]},"Management server  is an example of a server-side data processing system, such as server  and  in . Management server  is responsible for providing a single, central location for managing and storing synchronous and asynchronous system management execution code. The synchronous and asynchronous execution code is used to manage one or more resources in agentless management system , such as managed resource . Managed resource  is an example of any type of computer device or peripheral, including personal computers such as clients , , and  in , other servers, workstations, mainframes, or other network devices.","Management server  provides a central repository  for storing the synchronous and asynchronous execution code in execution code module packages, as well as for storing the standard agentless agents. Management server  may deploy the agentless agents to execution points in agentless management system . For example, the agentless agents may be deployed to nodes - in agentless agent execution cluster . Management server  may also provide the synchronous and asynchronous execution code to one of nodes - in agentless agent execution cluster  for execution by the agentless agents.","Agentless agent execution cluster  is coupled to management server  and comprises a collection of one or more synchronous and asynchronous code execution points for managing resources in agentless management system . In this illustrative example, the execution points are nodes - coupled to one another in a cluster over computer communications network . Nodes - are examples of any type of computer device or peripheral, including personal computers, other servers, workstations, mainframes, or other network devices. An agentless agent deployed by management server  to an execution point may upload an execution code module comprising the synchronous or asynchronous execution code from management server . For example, as previously mentioned, an asynchronous management operation is one that detects an event that has occurred on the managed resource. In an asynchronous management operation, data flows from the managed resource to the central management server. For example, management server  may deploy asynchronous execution code  to node  in agentless agent execution cluster  to monitor managed resource . The agentless agent deployed to node  invokes a code executor which runs the asynchronous execution code to detect asynchronous events  occurring at managed resource . When execution code detects the occurrence of asynchronous events  at managed resource , the agentless agent sends the detected asynchronous event data  back to management server , which may take various actions based on the event data received. The action(s) taken by the management server may depend on the type of the management system.","Agentless agent execution cluster  is maintained and managed to ensure high availability in case of nodal failover. Agentless agent execution cluster  may include an initial lead node (e.g., node ) and remaining auxiliary nodes (e.g., nodes -). Agentless agent execution cluster  may provide de-centralized nodal failover handling in which an auxiliary node is assigned responsibility to continue handling a computing operation so as to relieve a failed lead node using messaging service  coupled to each of the nodes.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 4","b":["400","400","402","404","408","400"]},"In agentless management system , management server  and agent execution cluster  are started as required. Management server  sends a management operation request  to an arbitrary agent node in agent execution cluster . The arbitrary agent node may be a lead execution node (e.g., lead node ) or an auxiliary execution node (e.g., auxiliary nodes , , or ). Management operation request  may comprise synchronous and asynchronous operations. If the management operation request includes an asynchronous operation, the request will contain an initial execution context for the required asynchronous operation.","An execution context may include information that may be used to identify or manage a particular asynchronous operation. For example, an execution context may comprise, but is not limited to, one or more of the following information elements: an asynchronous code module reference, an execution state indicator, configuration or connection information of the managed resource, and execution module specific data. An asynchronous code module reference may comprise an identifier (e.g., name) known by management server . The execution state indicator reflects the current state of the associated management operation. Execution states are dependent on the given application or embodiment. Example execution states include, but are not limited to, \u201cnot started\u201d, \u201cstarted\u201d, \u201clast record processed\u201d, \u201ccomplete\u201d, and \u201cincomplete\u201d. The configuration or connection information of the managed resource may be utilized by the agent node when executing synchronous code against the resource or when monitoring the resource for asynchronous events. This information is used by the agent to identify the managed resource, and to initialize and provide execution parameters for the execution code module.","When the arbitrary execution node (lead or auxiliary) receives management operation request  containing an execution context from management server , a distributed execution context manager (ECM)  within the arbitrary execution node creates a new execution context entry in the execution context state table  within the node. An instance of the distributed execution context manager  runs within each node in agent execution cluster . The distributed execution context manager  in each node is responsible for managing the execution context state for the management operation executed by the node, recording any changes in the execution context state in the node's execution context state table, and distributing these changes to the other nodes in agent execution cluster  in a new context message (e.g., message ) The arbitrary execution node uses messaging service  to propagate the newly created context entry in a new context message (e.g., messages ) throughout the other nodes in the cluster.","Any one of the nodes in agent cluster environment  may be designated the lead node , while the remaining nodes may be designated as auxiliary nodes , , . In one embodiment, management server  may issue a new asynchronous operation execution request to any node in the cluster. When lead execution node  receives a context message (e.g., message ) containing the new context entry from messaging service , lead execution node  uploads (e.g., ) the asynchronous code corresponding to the execution context in the message from the central repository at management server . This asynchronous execution code may be removed from the node after the code is run or if the lead node fails (e.g., ). Lead execution node  then executes the asynchronous execution code. As lead execution node  executes the asynchronous code, asynchronous event data from the managed resource (such as managed resource  in ) is sent (e.g., ) to management server . Additionally, execution context manager  on lead execution node  updates the execution state of the asynchronous operation in execution context state table .","Each of nodes , , ,  may include a messaging interface to messaging service , for example a Java\u2122 Messaging Service (JMS) server. (Java and all Java-based trademarks and logos are trademarks of Sun Microsystems, Inc. in the United States, other countries, or both). Through their respective messaging interfaces, each node may subscribe to and receive messages from messaging service  and also publish messages to messaging service  for receipt by the other nodes in the cluster. For example, if the execution state of an asynchronous operation executed by lead execution node  changes, the execution context manager at the node updates the node's execution context state table and sends a context state change message (e.g., message ) containing the updated context state to messaging service . Messaging service  propagates the updated context state of the asynchronous operation by sending a context state change message (e.g., message ) containing the updated context state to each of auxiliary nodes , , and . Each auxiliary node then records this context information in its own execution context state table.","Each of the nodes and messaging service  may comprise nodal failover handling logic which includes program code enabled to periodically receive, from message service , heartbeat messages published by lead node  to messaging service . When a lapse in the heartbeat messages is detected by the auxiliary nodes, the failover handling logic of the auxiliary nodes individually publishes a request message to messaging service to become a replacement lead node. In one embodiment, messaging service  may include a queue  into which inbound published messages are stored and queued prior to distribution to the other nodes in the cluster. If queue  processes messages on a first-in first-out basis, the first of the replacement request messages received in queue  will also be received by auxiliary nodes , , , causing the remaining auxiliary nodes to acquiesce the replacement lead node status to the auxiliary node that send the first request message. Thus, if at any point in the execution of the asynchronous operation the lead execution node  fails, one of auxiliary execution nodes , ,  in the cluster may assume the lead execution node role as a replacement lead node.","On nodal failover, the replacement lead node is assigned. The replacement lead node checks the node's execution context state table execution context state to identify all asynchronous operations executing on the failed lead node that did not complete. For example, replacement lead node  may determine if execution context state table  indicates that execution state of any asynchronous operations that were executing on the failed lead node are in an incomplete state. An incomplete state is an execution state of the asynchronous operation at which the lead node's code module execution was in prior to failure. For those asynchronous operations having an incomplete execution state, the replacement lead node uploads the corresponding asynchronous execution code modules from management server . Once uploaded, the asynchronous execution code modules are restarted by the replacement lead node based on the associated current execution context of each asynchronous operation. In this manner, the replacement lead node may use the information in the operation's execution context to upload and restart the asynchronous operation code if necessary to provide high availability.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 5","FIG. 5","FIG. 3"],"b":["310","312","314","316","304"]},"The process begins with an agentless agent deployed at an arbitrary agent node in the agent execution cluster connecting to the messaging service, such as messaging service  in  (step ). For example, during initialization of the execution code module, configuration parameters will provide the details of how to subscribe to the messaging service. The agent node receives a management operation request from the management server, such as management server  in  (step ). For instance, the management operation request may comprise an asynchronous operation to be executed against a managed resource. Upon receiving the operation request, the agent node determines if an execution state context entry for the operation request already exists in the agent node's execution state context table (step ). For example, the agent node may check if the context entry with the request reference identifier or asynchronous code module name reference already exists in the table. The execution context of an operation comprises information indicating the current state of the requested operation. If an execution context entry for the particular operation request already exists in the execution state context table (\u2018yes\u2019 output of step ), the process returns to step  to wait for another operation request from the management server. However, if there is no execution state context for the particular operation request in the execution state context table (\u2018no\u2019 output of step ), the agent node creates a new context entry in the node's execution state context table for the operation request and populates the new context entry with context information (including the execution state) for the requested operation (step ). The agent node then sends the new context to the messaging service to propagate this new context entry to all other agent nodes in the agent execution cluster (step ), and returns to step .",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 6","FIG. 6","FIG. 3"],"b":["308","602","604","606"]},"If the received message is not an execution context message (\u2018no\u2019 output of step ), the process returns to step  to wait for another message from the messaging service. However, if the received message is an execution context message (\u2018yes\u2019 output of step ), the lead agent node determines if a context entry for the management operation request specified in the message already exists in the execution context state table in the agent node (step ). If a context for the management operation request already exists in the execution context state table in the lead agent node (\u2018yes\u2019 output of step ), the process returns to step  to wait for another message from the messaging service. However, if there is no context entry for the management operation request in the execution context state table (\u2018no\u2019 output of step ), the lead agent node creates a new context entry in the node's execution state context table for the management operation request specified in the message (step ). The lead agent node then retrieves the asynchronous execution code for performing the requested management operation from the central repository at the management server (step ). The agentless agent in the lead agent node executes the retrieved asynchronous code to detect events occurring on the managed target resource (step ).","At step , the lead agent node branches in two processes\u2014the node returns to step  and continues to listen for messages from other nodes in the agent execution cluster via the messaging service, as well as monitor and receive asynchronous code events from the managed resource (step ). Upon receiving the asynchronous code events, the agent node sends the event data back to the management server (step ). The agent node maintains the execution context state table by updating the context entry with the current context state of the management operation request (step ). For example, when the event data is sent to the management server, the agent node may update the context entry for the management operation to reflect a completed state. Once the context for the management operation is updated in the lead agent node's execution context state table, the lead agent node sends the updated context to the message service to propagate the updated context to all other agent nodes in the agent execution cluster (step ).",{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 7","FIG. 6"]},"The process begins with an auxiliary agent node in the agent execution cluster connecting to the messaging service (step ). The auxiliary agent node then receives a message from the messaging service (step ). Upon receiving the message, the auxiliary agent node determines if the received message indicates a failover procedure is to be performed by the auxiliary agent node (step ). A failover may comprise a backup operational mode in which management operations executed by the lead agent node are assumed by an auxiliary agent node in the agent execution cluster when the lead node becomes unavailable through either failure or scheduled down time. If the received message does not indicate a failover procedure is to be performed by the auxiliary agent node (\u2018no\u2019 output of step ), the process returns to step  to wait and listen for other messages from the messaging service. However, if the message received by the auxiliary agent node indicates the auxiliary agent node is to assume the management operations running on the lead agent node (\u2018yes\u2019 output of step ), the auxiliary agent node (now the replacement lead node) retrieves the asynchronous execution code from the central repository at the management server for each execution context specified in the node's execution context state table (step ). The replacement lead node executes the retrieved asynchronous code module to detect events occurring on the managed target resource (step ).","At step , the replacement lead node branches in two processes\u2014the node returns to step  to continue to wait and listen for messages from other nodes in the agent execution cluster via the messaging service, as well as monitor and receive asynchronous code events from the managed resource (step ). When the replacement lead node receives asynchronous code events from the managed resource, the replacement lead node sends the event data in a message back to the management server (step ). The replacement lead node maintains the node's execution context state table by updating the context entries with the current context states of the management operation requests (step ). Once the context for the management operation is updated in the replacement lead node's execution context state table, the replacement lead node sends the updated context to the message service to propagate the context to all other agent nodes in the agent execution cluster (step ).","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the disclosure. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustrations, and combinations of blocks in the block diagrams and\/or flowchart illustrations, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cand\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the embodiments in the disclosure has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","The invention can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment, the invention is implemented in software, which includes but is not limited to firmware, resident software, microcode, etc.","Furthermore, the invention can take the form of a computer program product accessible from a computer-usable or computer-readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description, a computer-usable or computer readable medium can be any tangible apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.","The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation medium. Examples of a computer-readable medium include a semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk-read only memory (CD-ROM), compact disk-read\/write (CD-R\/W) and DVD.","The invention can also take the form of a computer program product which has been downloaded over a network from one device to another for use in the other device. For instance, the program code stored in a computer readable storage medium in a server data processing system may be downloaded over a network from the server to a remote data processing system, such as a client or another server. Likewise, the program code stored in a computer readable storage medium in a client data processing system may be downloaded over a network from the client to a remote data processing system, such as a server or another client.","A data processing system suitable for storing and\/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Input\/output or I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers.","Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems and Ethernet cards are just a few of the currently available types of network adapters.","The description of the embodiments in the disclosure has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
