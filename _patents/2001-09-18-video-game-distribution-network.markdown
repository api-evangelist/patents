---
title: Video game distribution network
abstract: A video game distribution network for use in airlines, trains, hotels, cruise ships, set top boxes, cable television systems, satellite and other wireless systems or other communications systems, distributes special purpose game binary image files to general purpose computing/display devices. Software emulators running on the general purpose computing/display devices model the game source platform and interpret and/or compile the game files to provide interactive video game play. Software emulators for emulating a handheld video game platform such as GAME BOY®, GAME BOY COLOR® and/or GAME BOY ADVANCE® on a low-capability target platform (e.g., a seat-back display for airline or train use, a personal digital assistant, a cell phone) may provide any number of features and optimizations to provide high quality graphics and sound that nearly duplicates the game playing experience on the native platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06884171&OS=06884171&RS=06884171
owner: Nintendo Co., Ltd.
number: 06884171
owner_city: Kyoto
owner_country: JP
publication_date: 20010918
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","FIELD OF THE INVENTION","BACKGROUND AND SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PRESENTLY PREFERRED EXAMPLE EMBODIMENTS","EXAMPLE GAME DOWNLOADS","EXAMPLE CORE MICROPROCESSOR EMULATION ENGINE ","EXAMPLE MEMORY MANAGER EMULATION ENGINE ","EXAMPLE VIDEO EMULATOR ENGINE ","EXAMPLE SOUND EMULATOR ENGINE ","EXAMPLE USER CONTROLLER INPUTS","EXAMPLE TECHNICAL DETAILS AND SPECIFICATIONS","EXAMPLE TARGET PLATFORM","EXAMPLE EMULATOR ARCHITECTURE","EXAMPLE EMULATOR IMPLEMENTATION DETAILS"],"p":["Priority is claimed from provisional application number 60\/233,622 filed Sep. 18, 2000 entitled \u201cMethod and Apparatus for Emulating a Portable Game Machine,\u201d incorporated herein by reference.","This application is related to the following copending commonly-assigned patent applications:\n\n","Not applicable.","This invention relates to delivering video game entertainment over a network, and more particular, to allowing passengers on airplanes, trains, and cruise ships to play video games via a network-based distribution system. Still more particularly, the invention relates to the use of a generic computing network for downloading video game platform emulators and associated video games for interpretation by such emulators.","There are advantages to be gained by delivering entertainment services to airline passengers, passengers aboard trains and cruise ships, and hotel guests. Passengers onboard airplanes and trains often have to spend many hours in their seats with little or nothing to do. Hotels and cruise ships tend to offer more activities, but guests often have a difficult time trying to entertain their children (and sometimes themselves)\u2014especially in the evenings and early mornings when most hotel services are closed. Hotels, airlines, train operators and cruise ship operators have long understood that having a relatively captive audience provides a number of business opportunities but also imposes responsibilities to provide their guests with entertainment and amenities to keep them occupied and happy.","Several decades ago, airlines began providing in flight entertainment such as movies, television reruns and news. The airlines have found that their customers are happier when they are kept occupied and interested during long flights. By creating a more satisfying in-flight experience, passengers are happier and less likely to be irritable or cause problems. By providing such in-flight entertainment to their passengers, the airlines receive several benefits and their passengers have also significantly benefited.","As technology has advanced, increasingly more powerful computing devices are now able to be cost-effectively installed within smaller and smaller packages. This has allowed some airlines to deploy relatively sophisticated seat-back controllers and display units within the seat backs and\/or armrests of newer jet airplanes. Many transcontinental aircraft now have color liquid crystal displays at each passenger seat. These individual seat-back or arm-rest displays can allow each passenger to have an individual choice of several different movies or other entertainment programs.","To take advantage of such individual color displays on airlines, trains and other environments, Nintendo some time ago launched a series of product offerings that allowed people to play video games. Details of such arrangements may be found, for example, in U.S. Pat. No. 5,581,270 to Smith et al and U.S. Pat. No. 5,959,596 to McCarten et al. These arrangements have been successful, but further improvements are possible.","One area of possible improvement relates to the ability to do without specialized game playing hardware while nevertheless offering people a full range of interesting video game experiences over a more generic network. Airlines, cruise ships, hotels, trains, cable operators, satellite television operators, and the like may be reluctant to deploy specialized video game playing hardware components. Rather, they may be interested in providing a general-purpose infrastructure that enables a wide range of different applications\u2014e.g., everything from stock market trading to web surfing to mass media displays including but not limited to playing video games. While a prior approach has been to use specialized video game playing hardware technology to provide a wider range of applications beyond video games, there are potential problems with reliability and cost that makes it attractive in some environments to install a purely generic networked computing environment, and to adapt that network by using software for playing video games.","As the computing power of airline seat back controllers, set top boxes and other more general purpose equipment has increased, we have found that it is now possible to develop a video game playing network that is based on emulating special-purpose video game playing platforms using software running on more general-purpose networked computing platforms.","As one particular example, Nintendo's GAME BOY\u00ae hand-held video game platforms have been extraordinarily successful. Nintendo released the first GAME BOY\u00ae in the late 1980s. Since then, this product and its successors (GAME BOY COLOR\u00ae and GAME BOY ADVANCE\u00ae) have captured the imaginations of millions of video game players throughout the world. A wide number of different software applications (including but not limited to video games) have been designed to run on these platforms. People throughout the world enjoy these applications every day. One can see them being used on subways, at sports arenas, after school, and in a number of other contexts. See FIG. A.","Nintendo's GAME BOY\u00ae, GAME BOY COLOR\u00ae and GAME BOY ADVANCE\u00ae are examples of platforms having specialized hardware that is optimized for low cost, excellent performance and good graphics. These devices are not really general purpose computers; rather, they are special-purpose devices with specialized capabilities particularly adapted to video game play. These special capabilities provide low cost and exciting video game play action with good graphics and sound.","While GAME BOY\u00ae platforms are inexpensive and have long battery life, there may be situations (as described above) in which it would be desirable to play or use applications developed for GAME BOY\u00ae on other, more general purpose platforms. For example, an airline, train or other vehicle passenger might want to play video games during a long journey. As shown in , airlines are installing general purpose computer-based seat-back computer displays into the backs of airline seats and\/or into armrests of airline seats. Trains, buses and other mass transport vehicles are expected to do the same. Such seat-back\/armrest displays may provide a low cost personal computer including a processor, random access memory, liquid crystal display and input device(s). Similar displays could be installed in other vehicles (e.g., ships, vans, cars, etc.) or in other contexts (e.g., at walk-up kiosks, within hotel rooms, etc.). It would be desirable under certain circumstances to allow users to execute all sorts of different applications including GAME BOY\u00ae video games and other applications using the general-purpose computer capabilities of such seat-back or similar display devices.","Personal computers have also proliferated throughout the world and are now available at relatively low cost. A trend has shifted some entertainment from the home television set to the home personal computer, where children and adults can view interesting web pages and play downloaded video games and other applications. In some circumstances, it may be desirable to allow users to play GAME BOY\u00ae video games on their home personal computers (see FIG. C).","A wide variety of so-called personal digital assistants (PDA's) and \u201cpocket PCs\u201d have become available in recent years. Such devices now comprise an entire miniature computer within a package small enough to fit into your pocket. Mobile cellular telephones are also becoming increasingly computationally-intensive and have better displays so they can access the World Wide Web and perform a variety of downloaded applications. Similarly, there are now satellite television receivers, cable set top boxes, and other general purpose computing-capable devices deployed throughout the U.S. In some circumstances, it may be desirable to enable people to play GAME BOY\u00ae video games and other GAME BOY\u00ae applications on a personal digital assistant, cellular telephone, set top boxes or other such devices (see FIG. D).","The special-purpose sound and graphics circuitry provided by the GAME BOY\u00ae platforms is not generally found in the various other platforms shown in , C and D. Providing these missing capabilities is one of the challenges to running a GAME BOY\u00ae video game (or other GAME BOY\u00ae application) on these other target platforms.","Another challenge relates to instruction set compatibility. Nintendo's GAME BOY\u00ae platform is based on an older, relatively inexpensive microprocessor (the Zilog Z80) that is no longer being used in most modern general purpose computer systems such as personal computers, seat-back displays, set top boxes, and personal digital assistants. The Z80 instruction set (the language in which all GAME BOY\u00ae games and other GAME BOY\u00ae applications are written in) is not directly understood by the more modern Intel microprocessors (e.g., the 8086, 80286, 80386, Pentium and other processors in the Intel family) that are now widely used and found in most personal computers, seat-back displays, personal digital assistants, and the like. We have found that it is possible to \u201cport\u201d certain GAME BOY\u00ae games or other applications to different microprocessor families (e.g., by cross-compiling the source code to a different target microprocessor). Also, there is an advantage in certain contexts to being able to play or execute the same binary images stored in GAME BOY\u00ae cartridges on target platforms other than GAME BOY\u00ae.","One way to provide a cross-platform capability is to provide a GAME BOY\u00ae software emulator on the target platform. Generally, a software emulator is a computer program that executes on a desired target platform (e.g., a seat-back display device, a personal computer or a personal digital assistant shown in ) and uses software to supply native platform capabilities that are missing from the target platform. For example, a software emulator may perform some or all of GAME BOY\u00ae's specialized graphics functions in software, and may interface with whatever graphics resources are available on the target platform to display resulting images. A software emulator may translate or interpret Z80 instructions so the microprocessor of the target platform can perform the functions that GAME BOY\u00ae would perform if presented with the same instructions. The software emulator may include software code that emulates hardware capabilities within the GAME BOY\u00ae circuitry (e.g., audio and\/or graphics processing) and\/or translate associated GAME BOY\u00ae application requests into requests that can be handled by the hardware resources available on the target platform. For example, the target platform may include a graphics adapter and associated display that is incompatible with GAME BOY\u00ae's graphics hardware but which can perform some of the basic graphics functions required to display GAME BOY\u00ae graphics on a display.","A number of video game emulators have been written for a variety of different platforms ranging from personal digital assistants to personal computers. However, these have not been adapted to airlines, hotels and other such environments. Therefore, further improvements are possible and desirable.","The present invention solves these and other problems by providing a unique software emulator-based networked video game playing system capable of providing acceptable speed performance and good image and sound quality on even a low-capability target platform such as a seat back display or set top box for example. The preferred embodiment software emulator provided by this invention maintains high-quality graphics and sound in real time across a wide variety of video games and other applications\u2014and nearly duplicates the graphics and sound that would be experienced by a user of the GAME BOY\u00ae, GAME BOY COLOR\u00ae and\/or GAME BOY ADVANCE\u00ae platform running the same game or other application.","In accordance with one aspect of an example illustrative embodiment, a software emulator is provided for a seat-back in-flight (or in-cruise, or in-room) computer entertainment system that controls the entertainment system to emulate a portable handheld (or other) game system. The emulation software may provide a number of capabilities that ensure an interesting and authentic game playing experience. The following are example features provided in accordance with aspects of the present invention:\n\n","The preferred embodiment emulator achieves this through a unique combination of features and optimizations including, for example:\n\n",{"@attributes":{"id":"p-0064","num":"0105"},"figref":"FIG. 2","b":["1","1"]},"Servers S may in one particular embodiment comprise conventional file servers, but in other embodiments could comprise web servers, cable television head ends, wireless computing device servers, satellites, or any other convenient server architecture.","Devices D in the preferred illustrative embodiment comprise any sort of general or special purpose device with some computing capability and including a display, a user input device and preferably also a sound reproduction capability, for example:\n\n","In the example embodiment, devices D may each include, for example, a display device  such as, for example, a black and white or color liquid crystal display, a CRT, or any other convenient display. In the example and illustrative embodiment, devices D may also include preferably some ability to reproduce sound (e.g., audio amplifiers and associated headphones H or loudspeakers). In the exemplary and illustrative embodiment, devices D may each include a user input device  that allows users to interact with the device D in order to play interactive video games. As one example, user input device  may have a configuration shown in , and may be a multi-purpose device that provides both the telephone capability and a general-purpose control interface including special-purpose video game controls. In other exemplary configurations, user input device  may provide any convenient means for inputting user interactions to device D including, for example, keyboards, wireless television controllers, the controls on personal digital assistants, or the like.","In the example illustrative embodiment, servers S have mass storage devices M associated therewith. Such mass storage devices M (e.g., magnetic hard drives, optical disks, etc.) store software emulators  that servers S can download onto devices D over network N for execution on devices D. Additionally, mass storage devices M may also store a library of games G that can be interpreted or otherwise \u201cexecuted\u201d by emulator  running on devices D.","In the example embodiment, emulator  and each of the game files G is assigned an individual part number that conforms with predetermined quality assurance procedures. Additionally, depending on the load process that the exemplary system is able to support, there may also be a need for a part number for individual load sets. Such part numbers will allow, for example, an airline to confirm what software is loaded onto an aircraft by using a conventional cabin maintenance terminal coupled to server(s) S.","In the example embodiment, the process of loading emulator  and game files G onto server(s) S conform with a conventional software loading process, with the main practical limit being the amount of free disk space on the mass storage device M of file server S. In practice, this may or may not be an issue depending upon the size of mass storage devices M. For airlines that have a compact disk optical drive fitted to their aircraft, the load process may be performed in a single software load with all the available games and the emulator  being loaded together. For airlines that do not use an optical disk drive, the load operation is preferably performed (i.e., in order to load the emulator  onto the mass storage device M of file server S) using a floppy disk (multiple floppy disks will probably have to be used). A complete load by floppy diskette may in some circumstances have the advantage of requiring only a single part number to cover the entire load and all of the available games are loaded at once allowing the airline flexibility. However, a disadvantage is that the load process may take considerably longer than if just the required games are loaded. To improve loading time, the disk loader may detect games already loaded and only extract and load new games if the target system provides this functionality. A partial load by floppy has the advantage that the load process will be quicker, but the disadvantage that individual part numbers may be required to cover each of the load disks (meaning an individual part number for the emulator  and for each of the games).","In the exemplary, illustrative embodiment, servers S also may provide and download a variety of other applications to devices D, such applications including but not limited to:\n\n","Loading of game and other application software may be provided via conventional mass storage device M via network N.  shows an illustrative flowchart of exemplary steps performed by a general purpose computing device D in the preferred embodiment, and  show exemplary corresponding screen displays.","Referring to , device D typically upon power up will generally display a general menu providing a number of different selection options that may vary depending upon the particular application. For example, in a flight-based entertainment system, this main selector screen might display in-flight movies, stock trading, world wide web access, airplane position tracking, weather, and \u201cplay video games.\u201d Upon the user selecting the \u201cplay video games\u201d option, the device D generates a request across network N to one of servers S requesting loading of emulator  (, block ). In the exemplary embodiment, the emulator  authenticates the device D to ensure that the device D is appropriate for running the emulator (, block ). In one exemplary embodiment, this authentication can be relatively unsophisticated, i.e., the emulator  is written for a specific hardware platform and will not run on any other hardware platform. However, in other embodiments, there may be positive authentication tests of various sorts (e.g., checking for the presence of appropriate machine codes, encrypted information, pass words, or the like) implemented to ensure that the device D is appropriate for running emulator .","If the device D is not appropriate (\u201cno\u201d exit to decision block ), the emulator  will fail and an error message may be generated (block ). Otherwise, the emulator  will begin loading (\u201cyes\u201d exit to decision block ). During this loading process, a \u201cloading\u201d informational screen (see ) may be displayed. The emulator  may then display a game selector menu (, block \u2014see  for an example) allowing the user to choose a particular game or type of game to play. A number of nested menus may be displayed (e.g., see illustrative ) that allows the user to pick a particular game (see , decision block ).","Once the user has selected a particular game to play (see FIG. E), the device D generates a request message across network N that requests a server S to download all files associated with that particular game (, block ). In the example embodiment, this request may be in the form of a particular string (e.g., the name of a particular game). A small executable on server S may provide a lookup table that associates this particular game name with a list of one or a number of files (e.g., the \u201cgame ROM\u201d binary image corresponding to the particular game code, and associated help file and any other auxiliary data files). These files are then downloaded by server S to the requesting device D upon request.","In the example embodiment, one or more of these files may be encrypted with some form of encryption. As an example, an initial portion of the game binary image may be encrypted using any conventional encryption mechanism. Upon downloading the game, the device D decrypts the file (block ), and loads the resulting binary image (and any other files associated therewith) into the work space of emulator  for interpretation (block ). If the initial part of the game is not successfully decrypted, the game will \u201ccrash\u201d when emulator  tries to interpret it. A checksum check may also be used for both error correction and as a security measure. If a checksum test performed by emulator  fails, the emulator may refuse to execute the emulator. In one example embodiment, all executable binary files to be performed by the  emulator may be encrypted prior to distribution. The emulator may decrypt the instructions on-the-fly before executing them. The executable may be decrypted before executing it. In other arrangements, encryption may not be provided and the emulator may simply execute the binary ROM image without decrypting it first.","In one example embodiment, the emulator emulates the security system of the original platform. For example, a splash screen (see ) including certain information (e.g., \u201cNINTENDO\u201d ) may be displayed prior to game play. The code to display this screen is stored in each game or other application binary file. This code is compared to code in the master file located on a hard drive or within the emulator itself. Game play is allowed only if codes match. In another example, this security arrangement may be disabled to allow any compatible application to execute.","During the loading process, in the exemplary embodiment, an image of what a Nintendo GAME BOY COLOR looks like is displayed on the display  of device D (see , F) for security reasons, and also in order to simulate as closely as possible that the user is playing on a real GAME BOY. This image of a GAME BOY is, in one illustrative embodiment, used to \u201cframe\u201d the game play in order to provide a more realistic game playing experience and also use the excess area of the display for constructive purpose (as opposed to simply blanking it out).","In the example embodiment, emulator  may also display a special \u201chelp\u201d file contents customized for the play of the selected game on the device D in order to help the user understand the emulated user interface (see , H). Such help file contents can be provided in different languages (e.g., English, French, Japanese, German, Spanish, other) to accommodate different native speakers. Selecting a different language may be relatively straightforwardly accomplished by having server S send down a \u201chelp\u201d file in a different language upon user request or selection of a \u201clanguage\u201d menu pick.","Additional control provided by preferred exemplary embodiment emulator  allows the user at any point to pause the game play (see FIG. I). Upon pausing game play, the user may choose to continue the current game, view game information, choose another game, or quit playing games (FIG. I). In some airline embodiments, game play may also be paused automatically in response to in flight announcements (e.g., when the pilot or crew speaks over the airplane intercom system). In particular, one use of the  system is to execute video games within a seat-back controller of an in flight airplane entertainment system. In such an arrangement, if there is a public address announcement (e.g., from the pilot) to the cabin, the emulator may institute a pause operation and display a message informing the passenger that the game is paused. Once the announcement has ended, the emulator may remain paused and display a message instructing a passenger to press any handset button to proceed. Game play may then resume from where the game was paused. In an exemplary embodiment for airline or other use, there may be a further control input provided by network N to devices D (e.g., via the same interface used for the user input device(s)) that provides a \u201chalt\u201d or \u201cterminate\u201d command. Upon receiving such a \u201chalt\u201d command, emulator  may exit and return control back to the operating system (if any).","The example emulator may need to be integrated with other applications and\/or operating systems. To provide such integration, the emulator may be launched by an interactive menu application (e.g., with a specific game name). Such launching may be achieved by passing game name to the emulator on the command line. This may mean that the emulator needs to be shut down and restarted between selected games. Other embodiments may provide dynamic loading of games without a need to shut down the emulator between loads. In one example embodiment, emulator  provides a \u201cwatchdog\u201d function of writing to a predetermined hardware register or other location within device D periodically in order to satisfy the device that an active application is running and that the application has not \u201ccrashed\u201d or otherwise terminated abnormally. Different devices D may have different requirements.","The maximum game size the emulator may support is limited by a combination of physical memory of the new platform and the amount of memory used by the emulator itself. If there is available free memory, the emulator may support up to the maximum game size that the original platform supports. For example, the emulator may support at minimum 32 megabit games. Some original platform games use a memory management chip. The emulator in the example embodiment supports various versions of this memory management chip if adequate resources are available on the new platform.",{"@attributes":{"id":"p-0083","num":"0144"},"figref":["FIG. 2J","FIG. 2J"],"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":{"@attributes":{"id":"ul0008-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0009","list-style":"none"},"li":["microprocessor core emulation engine ,","memory manager emulation engine ,","sound synthesizer emulation engine , and","video emulation engine ."]}}}},"In the example embodiment, these various engines , , ,  communicate with one another via C or x86 assembly function calls. Each engine , , ,  is preferably implemented as a separate state machine using one or more virtual device drivers (V\u00d7D) to communicate with the input\/output vectors and other structures of the platform executing the emulator.","The main task performed by the core microprocessor emulation engine  in the example embodiment is to simulate\/emulate instruction op codes. As described above, the original handheld video game platform microprocessor core comprises a Z80 microprocessor that executes the Z80 instruction set. However, the example platform on which emulator runs may use a completely different microprocessor (e.g., a 386 or 486 microprocessor or equivalent executing the x86 instruction set). Because video games and other applications written for the original platform are compiled into the Z80 instruction set that is incompatible with the Intel x86 instruction set, the example embodiment microprocessor emulation engine  simulates a Z80 microprocessor by interpreting the Z80 op codes and translating them appropriately into the new platform (e.g., x86) instruction set\/op codes.","In some instances, the microprocessor emulation engine  may perform a single instruction corresponding to an instruction in the Z80 instruction set. In other situations, the microprocessor emulation engine  may need to perform multiple instructions to complete the task specified by a single Z80 instruction. There are also situations in which the microprocessor emulation engine  might be able to perform fewer instructions to accomplish the same result as a corresponding set of Z80 instructions.","In some instances, it may be desirable for microprocessor emulation engine  to selectively replace sections of game and emulator code for certain games. To accomplish this, the microprocessor emulation engine  may include an interface that examines a file (e.g., rplc.tcl) and replaces code according to a predefined scripting language (e.g., TCL or equivalent). For example, if it is desirable to replace a Z80 instruction \u201cLD H, L\u201d with a block of predefined code, the microprocessor emulation engine  during binary parsing may look for the file (e.g., rplc.tcl) for the target game. If the file exists, then the microprocessor emulation engine  may read the file and replace the code as specified in that file. For example, the emulator code for \u201cLD H, L\u201d might be replaced with any desired code from the file.","In addition to simulating Z80 op codes, the microprocessor emulation engine  in the example embodiment maintains three counters:\n\n","The microprocessor emulation engine  must also simulate\/emulate interrupts that would be generated on the original platform. In the example embodiment, the original platform has four different types of interrupts:\n\n","In the example embodiment, all interrupts except the keyboard\/controller are handled with countdown timers. An interrupt handler function is called when an appropriate count reaches 0. Detection of keyboard\/controller data occurs in a conventional manner using an operating system in the personal computer serial port. Emulation engine  must yield to the operating system periodically to give the operating system the opportunity to detect serial port data and pass it to the memory manager engine .","The memory manager emulation engine  in the example embodiment simulates the original platform object attribute memory and creates video memory images in the new platform system memory (e.g., in an off-screen buffer). The example embodiment memory manager engine  maintains two off-screen buffers. Memory manager emulation engine  maintains a buffer pointer to point to the off-screen buffer representing the current display. Once a flag is set for one of the buffers, no data will be moved to that buffer and only read operations will occur. This frees the video engine  to BLIT the buffer to the new platform video memory for display. Once the second buffer is built with a full screen of display information, the buffer pointer is changed to point to this buffer and the off-screen buffer is then transferred to video memory by the video engine  during the next vertical blanking interval.","The moving object (OBJ) and background (BG) characters and pointers are maintained while monitoring and enforcing overlay rules.","A VGA color palette is maintained to match the colors of the original platform. This palette is changed on-the-fly as required. If such on-the-fly matching is inadequate to provide correct colors for particular games, then additional control information may be provided on a game-by-game basis and associated with particular games to supply the correct color information.","The memory manager engine  in the example embodiment maintains and simulates RAM and ROM memory areas. Memory manager engine  also keeps track of paged memory. This requires extra work when the 0xFFxx page is accessed\u2014since hardware registers are mapped into this page. If a timer is enabled as a result of a series of writes to this page, memory manager engine  \u201cpokes\u201d a value into a timer table corresponding to the number of Z80 clock ticks for the timer value. In the example embodiment, this timer can be programmed to fire every n clock tick. The timer table may include six entries\u2014four corresponding to the four possible timers and one for each h sync and v sync of the original platform (see FIG. ). The microprocessor emulator engine  as well as the remainder of the emulator performs all necessary processing between vertical blanking periods at a rate equivalent to the original platform processor clock. If this processing overlaps any given vertical blanking period, the screen update is skipped for that period. In the example embodiment, the frame rate is thirty frames per second. If interframe processing cannot be completed before the next vertical sync, then the frame is skipped to allow the emulator to catch up. This allows certain games to run properly at a reduced frame rate. Reductions in required frame rate may be altered on a title-by-title basis. In the example embodiment, the smallest value of the x\u2032 column is passed to the microprocessor emulator engine , where it is counted down to zero. When zero is reached, the microprocessor emulator engine  instructs memory manager engine  to update the timer table values shown in FIG. . At this point, all table values are updated and a software function is called to handle the timer interrupt.","Memory manager engine  also handles all direct memory access requests in the example embodiment. This may be done in-line with assembly language if necessary for speed performance. The following types of direct memory access requests are serviced by memory manager engine  in the example embodiment:\n\n","In the example embodiment, the video emulator engine  includes a pair of off-screen buffers as described above and is responsible for transferring (e.g., using a conventional BLIT operation) the off-screen screen buffer contents to active video memory on vertical blanking interval. The video emulator engine  is also responsible for maintaining color palette information. As explained above, the color palette for the game or other application currently being emulated is created by the emulator at run time.","Vertical synchronization in the new platform may be asynchronous (as it is in the original platform). The microprocessor emulator engine  and memory manager  preferable keep track of vertical blanking as it would have occurred on the original platform, and also keep track of vertical blanking as it is actually occurring on the new platform. A BLIT from the current screen buffer to the active video memory may occur during any vertical blanking interval on the new platform as long as a vertical blank is not being simulated at the same time for the original platform. Example minimum display resolution of 160\u00d7144 pixels may be provided.","The video emulator engine  in the example embodiment maps each original platform color palette to the closest matching SVGA controller color palette for each screen based on subjective criteria. This mapping is performed in a manner that maintains optimal game play with no color jitter or irregularities.","In the example embodiment, sound emulator engine  simulates the four sound synthesizers of the original platform using a conventional sound blaster sound synthesizer. The sound emulator engine  interprets sound instructions on-the-fly and translates them into sound blaster commands compatible with the sound blaster API. Adequate time must be allowed to program the sound blaster registers (for example, the FM synthesizer requires over 200 set up instructions). Additionally, it is desirable to synchronize sound generation with real time (e.g., latency between when sounds should start and when they actually do start should not differ by more than about 16 milliseconds to ensure proper synchronization between sound and display).","While not shown in , the emulator also receives and processes user-manipulable control inputs in real time. In one example, a game controller input provided in the original platform is simulated using a personal computer keyboard. For example, key up and key down messages received from the conventional keyboard controller can be translated into particular control inputs as would appear based upon depression or other operation of control switches and other configurations of the original platform.","One example emulator is to take Game Boy Color (hereafter known as \u201cCGB\u201d) and Game Boy (hereafter known as \u201cDMG\u201d) binary files and execute these files natively on all Intel based seat box computers for Matsushita system 2000E and 3000 in-flight systems including compatibility with all controllers on the Matsushita systems.","One example illustrative emulator  is compatible with the MAS S3000 32 Mb or 64 Mb DSEB and the MAS 2000E 486 16 Mb IVASEB made by Matsushita, and may also run on the original MAS 2000E IVASEBs 386s\u00d725 4 Mb to 386s\u00d733 16 Mb. There can be 2 versions of the CGB emulator to support both Win 3.1 and Linux. The MAS 2000E 486 IVASEB runs Win 3.1 in enhanced mode. The MAS S3000 DSEB will run either Win 3.1 in enhanced mode or Linux.","Additional design considerations for CGB emulator  are as follows:\n\n","Some GAME BOY\u00ae cartridges use one of a variety of memory management chips (called MBC1-5). The following cartridge issues are addressed in the exemplary emulator :\n\n","The device D in the example embodiment uses a modified Z80 microprocessor with certain specialized hardware. The input\/output, clock generator, timing control, data buffer and address buffer are not shown in , but are part of the system. Shown are the example hardware elements that emulator  emulates.","DSEB PC\n\n","I\/O","Types of I\/O:\n\n","Windows 16-bit:\n\n","Linux:","32-bit\n\n","The emulator system described above might include software and\/or hardware components that emulate or simulate some or all of hardware and\/or software components of the system for which the application software was written. For example, the emulator system could comprise a general-purpose digital computer such as a personal computer, which executes a software emulator program that simulates the hardware and\/or firmware of the system. The emulator could also comprise a personal digital assistant (PDA) that simulates the hardware and\/or firmware of the system. An emulator may execute the game software so that a particular game functions and\/or appears somewhat differently from how it functions and\/or appears on its intended platform. Thus, the emulator may show a color game in monochrome or a play a game without its accompanying sound. Emulation as used herein is intended to include emulation that results in these and other such differences in functions and\/or appearance.","Some general purpose digital computers (e.g., IBM or MacIntosh personal computers and compatibles) are now equipped with 3D graphics cards that provide 3D graphics pipelines compliant with DirectX or other standard 3D graphics command APIs. They may also be equipped with stereophonic sound cards that provide high quality stereophonic sound based on a standard set of sound commands. Such multimedia-hardware-equipped personal computers running emulator software may have sufficient performance to approximate the graphics and sound performance of the system. Emulator software controls the hardware resources on the personal computer platform to simulate the processing, graphics, sound, peripheral and other capabilities of the portable game machine platform for which the game programmer wrote the game software. Similarly, PDAs running emulator software may have sufficient performance to approximate the graphics and sound performance of the system.",{"@attributes":{"id":"p-0114","num":"0217"},"figref":"FIG. 2M","b":["1201","1303","42","1201","1303","1201","62","1201","1303","10","42","1201"]},"As one example, in the case where the software is written for execution on a platform using an IBM PowerPC or other specific processor and the host  is a personal computer using a different (e.g., Intel) processor, emulator  fetches one or a sequence of binary-image program instructions from storage medium  and converts these program instructions to one or more equivalent Intel binary-image program instructions. The emulator  also fetches and\/or generates graphics commands and audio commands intended for processing by the graphics and audio processor , and converts these commands into a format or formats that can be processed by hardware and\/or software graphics and audio processing resources available on host . As one example, emulator  may convert these commands into commands that can be processed by specific graphics and\/or or sound hardware of the host  (e.g., using standard DirectX, OpenGL and\/or sound APIs).","An emulator  used to provide some or all of the features of the video game system described above may also be provided with a graphic user interface (GUI) that simplifies or automates the selection of various options and screen modes for games run using the emulator. In one example, such an emulator  may further include enhanced functionality as compared with the host platform for which the software was originally intended.",{"@attributes":{"id":"p-0117","num":"0220"},"figref":"FIG. 2M","b":["1201","100","1201","1203","1205","1207","1205","1203","1207","1207","1252","1254","1256","1201","1252"]},"System  may further include optional additional drives and associated computer-readable media. For example, a hard disk drive  reads from and writes to a (typically fixed) magnetic hard disk . An additional (optional) magnetic disk drive  reads from and writes to a removable \u201cfloppy\u201d or other magnetic disk . An optional optical disk drive  reads from and, in some configurations, writes to a removable optical disk  such as a CD ROM or other optical media. Hard disk drive  and optical disk drive  can be connected to system bus  by a hard disk drive interface  and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer-readable instructions, data structures, program modules, game programs and other data for personal computer system . In other configurations, other types of computer-readable media that can store data that is accessible by a computer (e.g., magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs) and the like) may also be used. Note that these additional peripheral devices are generally not used in airline seat back controllers or set top boxes, but could be present in other configurations.","A number of program modules including emulator  may be stored on the hard disk , removable magnetic disk , optical disk  and\/or the ROM  and\/or the RAM  of system memory . Such program modules may include an operating system providing graphics and sound APIs, one or more application programs, other program modules, program data and game data. A user may enter commands and information into personal computer system  through input devices such as a keyboard , pointing device , microphones, joysticks, game controllers, satellite dishes, scanners, or the like. These and other input devices can be connected to processing unit  through a serial port interface  that is coupled to system bus , but may be connected by other interfaces, such as a parallel port, game port Fire wire bus or a universal serial bus (USB). A monitor  or other type of display device is also connected to system bus  via an interface, such as a video adapter .","System  may also include an optional modem  or other network interface means for establishing communications over a network  such as the Internet. Modem , which may be internal or external, is connected to system bus  via serial port interface . A network interface  may also be provided for allowing system  to communicate with a remote computing device  (e.g., another system ) via a local area network  (or such communication may be via wide area network  or other communications path such as dial-up or other communications means). System  will typically include other peripheral output devices, such as printers and other standard peripheral devices.","In one example, video adapter  may include a 3D graphics pipeline chip set providing fast 2D or 3D graphics rendering in response to graphics commands issued based on a standard graphics application programmer interface such as Microsoft's DirectX 7.0 or other version. A set of stereo loudspeakers  is also connected to system bus  via a sound generating interface such as a conventional \u201csound card\u201d providing hardware and embedded software support for generating high quality stereophonic sound based on sound commands provided by bus . These hardware capabilities allow system  to provide sufficient graphics and sound speed performance to play software stored in storage medium .","An emulator  used to provide some or all of the features of the video game system described above may also be provided with a graphic user interface (GUI) that simplifies or automates the selection of various options and screen modes for games run using the emulator. In one example, such an emulator  may further include enhanced functionality as compared with the host platform for which the software was originally intended.",{"@attributes":{"id":"p-0123","num":"0226"},"figref":["FIG. 2N","FIG. 2N"],"b":["1201","100","1201","1503","1505","1507","1505","1503","1505","1252","1254","1201","1252","1505","1201","1509","1507","1511","1509","1513","1507","1515","1201","100","1505","1521","1201"]},"One or more speakers or headphones  are connected to system bus  via an audio interface  to output sounds. A communication circuit  is connected to system bus  via a communications interface  to permit communication with other devices. By way of illustration, communication circuit  may, for example, be a modem and\/or communications interface  such as a serial port. Generally speaking, communication circuit  may be configured for wired or wireless communication in accordance with any conventional communication protocol. A power supply  provides power for the components of system '.",{"@attributes":{"id":"p-0125","num":"0228"},"figref":"FIG. 20","b":["100","100"]},"In the example embodiment, the target platform includes:\n\n","Emulator  (which executes on the target platform microprocessor and uses the resources of the target platform) receives the binary image of a game (or other application) file  stored on disk or other file system . Emulator  parses and interprets this binary image. Emulator  also receives user inputs from handheld controller  via target platform keypad interface . In response to these inputs, emulator  generates sound commands for the audio adapter  and generates graphics commands for application to the video graphics adapter \u2014creating sounds on audio transducer  and images on display . These sounds and images nearly duplicate what one would hear and see if running file  on a native GAME BOY\u00ae platform.","In the example embodiment, the game file binary image  can be a video game or any other application that can run on a GAME BOY\u00ae, COLOR GAME BOY\u00ae or GAME BOY ADVANCE\u00ae. Binary image  includes binary audio commands and binary graphics commands, compatible with a GAME BOY\u00ae native platform but which are not compatible with the application programming interface features of audio interface  and VGA adapter . Emulator  interprets those graphics commands and sound commands, and generates a corresponding sequence of graphics and sound commands that are understandable by and compatible with the audio and sound capabilities of the target platform.","In the example embodiment, emulator  includes a virtual machine including a virtual microprocessor core . Virtual microprocessor core  interprets instructions within the binary game file  that would be executed by the actual GAME BOY\u00ae native platform (Z80) microprocessor, and provides a corresponding sequence of microprocessor instructions for execution by the target platform microprocessor (which in the general case, is different from the microprocessor found in GAME BOY\u00ae and does not understand and is incompatible with the native platform microprocessor instruction set).","Virtual microprocessor core  receives inputs from a keypad emulation block . Block  in turn, receives interactive inputs from the user via target platform keypad interface . Keypad emulator block  emulates the GAME BOY\u00ae control input circuitry and associated functionality and translates inputs received from the target platform keypad interface\u2014which may have a different set of control inputs and configurations from that found in a GAME BOY\u00ae native platform.","Virtual microprocessor core  also communicates with sound emulation block  and graphics emulation block . Sound emulation block  emulates or simulates the sound generation circuitry within a GAME BOY\u00ae, GAME BOY COLOR\u00ae and\/or GAME BOY ADVANCE\u00ae to provide a set of sound commands for application to the target platform sound adapter . Graphics emulation block  emulates or simulates the hardware acceleration and other graphics circuitry found within a GAME BOY\u00ae, GAME BOY COLOR\u00ae and\/or GAME BOY ADVANCE\u00ae platform to provide a set of graphics commands for application to a target platform graphics adapter .","In the example embodiment, virtual microprocessor core  also includes a virtual liquid crystal display controller  used for the purpose of maintaining timing. Events within the GAME BOY\u00ae, GAME BOY COLOR\u00ae, and GAME BOY ADVANCE\u00ae native platforms are generally driven by activities relating to updating the liquid crystal display every one-sixtieth of a second. The example embodiment of emulator  emulates the native platform liquid crystal display controller in order to synchronize events occurring within the emulator with emulated events that would occur within a GAME BOY\u00ae, GAME BOY COLOR\u00ae, and\/or GAME BOY ADVANCE\u00ae native platform. As will be described below in detail, the virtual liquid crystal display controller  of the example embodiment does not actually perform any display functions, but rather is used to tell emulator  what would be going on in terms of display timing on a real GAME BOY\u00ae, GAME BOY COLOR\u00ae, or GAME BOY ADVANCE\u00ae. A virtual liquid crystal display controller  allows emulator  to synchronize its pace with what the pace of a real GAME BOY\u00ae, GAME BOY COLOR\u00ae, and\/or GAME BOY ADVANCE\u00ae native platform would be running the same application file . Virtual liquid crystal display controller  may be viewed as a software-implemented model of the event timing sequence of a GAME BOY\u00ae, GAME BOY COLOR\u00ae, and\/or GAME BOY ADVANCE\u00ae (native platform.","Emulator  also includes an emulated random access memory , an emulated read only memory , and an emulated memory bank controller (MBC) . Emulated random access memory  and emulated read only memory  provide memory storage locations within the (read\/write) random access memory  of the target platform. The emulated random access memory  emulates or simulates the random access memory of a GAME BOY\u00ae, GAME BOY COLOR\u00ae and\/or GAME BOY ADVANCE\u00ae, and the emulated read only memory  emulates or simulates the read only memory within the game cartridge of a GAME BOY\u00ae, GAME BOY COLOR\u00ae and\/or GAME BOY ADVANCE\u00ae. The emulated memory bank controller  emulates or simulates the hardware memory bank controller (bank switching) circuitry found within certain a GAME BOY\u00ae, GAME BOY COLOR\u00ae and\/or GAME BOY ADVANCE\u00ae game cartridges.","In one example embodiment, emulator  may provide certain game-specific functionality, i.e., it may change or optimize its emulation characteristics dynamically depending on the particular game G being played, in order to achieve better speed performance, audio playback, or other characteristics. This can be implemented in a variety of ways. In one preferred illustrative embodiment, header information associated with each game file G includes a set of \u201cflags\u201d that instructs the emulator  to set certain characteristics (e.g., enable within-frame color palette swaps, disable frame skipping, change virtual clock speed, enable full color, or any number of other values). In other example embodiments, emulator  could dynamically adjust its operation to accommodate different requirements based on tests performed before or during game execution.",{"@attributes":{"id":"p-0135","num":"0243"},"figref":"FIGS. 3-29","b":"100"},"In yet another embodiment, rather than creating a virtual machine, emulator  could operate based on dynamically compiling the game binary image into a different format. In this example, a compiler is written to accept a game binary image as source code and to generate an executable. The compile could be fully custom or could be a front end to an existing compiler (e.g., like the FORTRAN front end to the Gnu GCC compiler). In this example, one executable is generated for each game and no ROM files are required at run-time. This compilation process eliminates the overhead of interpreting opcodes and can result in higher efficiencies\u2014since the output from the compiler is native target code that can execute directly on the microprocessor of device D. In one compiler embodiment, emulator  can be based on a precompilation procedure that requires game binary images to be preprocessed by running them through a compiler ahead of time. The resulting native target code is then downloaded from server S over network N to devices D for execution. In this example, there may still be a need for emulating non-CPU tasks as separate tasks, but the fact that native code can be executed by the device D microprocessor means that there is no need to emulate the source platform CPU. Of course, it may also be possible to match the microprocessor within device D so it is the same as the microprocessor within the source platform\u2014obviating the need to emulate the CPU.","While the invention has been described in connection with what is presently considered to be the most practical and preferred embodiment, it is to be understood that the invention is not to be limited to the disclosed embodiment. For example, while the preferred embodiment has been described in connection with Nintendo's GAME BOY\u00ae handheld video game platform, the invention is not limited to GAME BOY\u00ae but could be used to emulate any other video game platform (e.g., Nintendo's NES, SNES or N64 game playing platforms, or platforms made by other manufacturers). Thus, the invention is intended to cover various modifications and equivalent arrangements included within the scope of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other features and advantages provided by the invention will be better and more completely understood by referring to the following detailed description of presently preferred illustrative but non-limiting embodiments in conjunction with the drawings, of which:",{"@attributes":{"id":"p-0025","num":"0066"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0026","num":"0067"},"figref":["FIGS. 1B-1D","FIG. 1"]},{"@attributes":{"id":"p-0027","num":"0068"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0028","num":"0069"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0029","num":"0070"},"figref":"FIGS. 2B-2I"},{"@attributes":{"id":"p-0030","num":"0071"},"figref":"FIG. 2J"},{"@attributes":{"id":"p-0031","num":"0072"},"figref":"FIG. 2K"},{"@attributes":{"id":"p-0032","num":"0073"},"figref":"FIG. 2L"},{"@attributes":{"id":"p-0033","num":"0074"},"figref":"FIG. 2M"},{"@attributes":{"id":"p-0034","num":"0075"},"figref":"FIG. 2N"},{"@attributes":{"id":"p-0035","num":"0076"},"figref":"FIG. 2O"},{"@attributes":{"id":"p-0036","num":"0077"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0037","num":"0078"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0038","num":"0079"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0039","num":"0080"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0040","num":"0081"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0041","num":"0082"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0042","num":"0083"},"figref":"FIGS. 9A-9B"},{"@attributes":{"id":"p-0043","num":"0084"},"figref":"FIG. 9C"},{"@attributes":{"id":"p-0044","num":"0085"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0045","num":"0086"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0046","num":"0087"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0047","num":"0088"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0048","num":"0089"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0049","num":"0090"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0050","num":"0091"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0051","num":"0092"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0052","num":"0093"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0053","num":"0094"},"figref":"FIGS. 19A and 19B"},{"@attributes":{"id":"p-0054","num":"0095"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0055","num":"0096"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0056","num":"0097"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0057","num":"0098"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0058","num":"0099"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0059","num":"0100"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0060","num":"0101"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0061","num":"0102"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0062","num":"0103"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0063","num":"0104"},"figref":"FIG. 29"}]},"DETDESC":[{},{}]}
