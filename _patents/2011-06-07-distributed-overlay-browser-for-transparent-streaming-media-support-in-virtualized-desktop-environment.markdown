---
title: Distributed overlay browser for transparent streaming media support in virtualized desktop environment
abstract: Techniques are provided for establishing an integrated and transparent overlay of a browser window for rendering data such as streaming media on a client endpoint device. A web browser on a Hosted Virtual Desktop (HVD) draws HVD display image comprising a browser window and communicates it to the client endpoint device for display, via a virtual desktop interface (VDI) protocol. The browser window comprises zero or more host-provided window elements such as a window frame and at least one placeholder element where a client-provided frameless browser window may be rendered. A browser (or browser extension) on the HVD works together with a browser server on the client endpoint device to render data such as streaming media in the client-provided frameless browser window in place of the placeholder, before displaying the frameless browser window and the HVD display as an integrated display at the client endpoint device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09225763&OS=09225763&RS=09225763
owner: Cisco Technology, Inc.
number: 09225763
owner_city: San Jose
owner_country: US
publication_date: 20110607
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["The present disclosure relates generally to virtualized desktop environments and more particularly to providing integrated and transparent rendering of media such as streaming media in an overlay browser on a client endpoint device.","Web browsing is an increasingly popular activity in business and personal settings, and with the growth of network-connected devices such as personal computers, web-capable mobile phones and tablets has come increased demand for the provision of media over the web. For example, users may desire to conduct web-based audio and video conferencing, buy or rent movies or television shows over the web, view video or animation encoded for Adobe Flash, listen to streaming radio stations, or even play games with users around the world via the Internet.","When virtual or cloud-based desktops are used, web browsing may be virtualized along with other hosted applications. That is, a browser application may run in a hosted virtual desktop (HVD), or run as a hosted virtual application (HVA) while the browser window is displayed to a user on a remote client endpoint device such as a computer or mobile phone. Virtualized browsing presents a set of unique problems in that media such as streaming media may be more difficult to virtualize than simple text and graphics.","Overview","Techniques are provided for establishing an integrated and transparent overlay of a browser window for rendering data such as streaming media on a client endpoint device. A web browser on a Hosted Virtual Desktop (HVD) draws a HVD display image comprising a browser window and communicates it to the client endpoint device for display, via a virtual desktop interface (VDI) protocol. The browser window comprises zero or more host-provided window elements such as a window frame and at least one placeholder where a client-provided frameless browser window may be rendered. A browser (or browser extension) on the HVD works together with a browser server on the client endpoint device to render data such as streaming media in the client-provided frameless browser window in place of the placeholder, before displaying the frameless browser window and the HVD display as an integrated display at the client endpoint device.","Example Embodiments","Referring now to the Figures, an example of a block diagram showing a VDI environment in which VDI connectivity can be established between client endpoint devices and one or more hosted virtual desktops is shown in . The depicted VDI environment  includes host device , client endpoint devices , , web server , content servers , , content distribution cache servers , , and policy agent  which are connected over network  to each other. The VDI environment may include additional servers, clients, and other devices not shown, and individual components of the system may occur either singly or in multiples, for example, there may be more than one host device , and other networking components, e.g., routers and switches, may be used in the VDI environment . Similarly, web server , content servers , , and content cache servers , may be embodied in a single device.","Network  represents any hardware and\/or software configured to communicate information via any suitable communications media (e.g., WAN, LAN, Internet, Intranet, wired, wireless, etc.), and may include routers, hubs, switches, gateways, or any other suitable components in any suitable form or arrangement. The various components of the VDI environment  may include any conventional or other communications devices to communicate over the networks via any conventional or other protocols, and may utilize any type of connection (e.g., wired, wireless, etc.) for access to the network.","Web server  is a conventional or other server for serving web pages including Hypertext Markup Language (HTML) documents and other content such as images or style sheets to the web browser . Content source servers , are conventional or other servers for serving data to a client or a content distribution cache server, e.g., a Darwin Streaming Server, Flash Media Server, Unreal Media Server, or the like. The content servers may provide any type of data, for example media such as streaming video and\/or streaming audio, games or simulations, animations, scripts, or the like. Content data may be encapsulated as HTML or XHTML documents, or may be represented in a non-HTML format. Content cache servers -, e.g. Cisco Wide Area Application Engine (WAE) servers running the Application and Content Network System (ACNS), act as intermediate repositories for content received from content servers -. As is further described with respect to , the present embodiments transport data directly from content source servers  and\/or content cache servers  to the client endpoint devices , without the data passing through the host device . By placing cache servers  at key points in network  and caching content (e.g., media content) from a content source server -, client endpoint may receive content from the cache servers  instead of the content source , thereby reducing bandwidth consumption over the core portions of network  and reducing streaming latency. It is understood that many types of content servers  and distribution caches  stream media to clients; however, any type of content may be streamed.","Policy agent  may be a separate network service as is depicted in , or it may reside locally on host device  (e.g., in hosted virtual desktops  or as a separate resident of memory ) and client devices  as is depicted in . As is further described with respect to , ,  and , the policy agent  is presented with a Uniform Resource Locator (URL), (e.g., via a query) and it applies one or more policies to report (e.g., via a query response) whether the URL should be rendered on the HVD  or the client endpoint device .","Host device  comprises one or more processors , a network interface unit , and memory . The processor  is, for example, a data processing device such as a microprocessor, microcontroller, system on a chip (SOC), or other fixed or programmable logic, that executes instructions for process logic stored in memory . The network interface unit  enables communication throughout the VDI environment, as shown in . Memory  may be implemented by any conventional or other memory or storage device, and may include any suitable storage capacity. For example, memory  may comprise read only memory (ROM), random access memory (RAM), erasable programmable read-only memory (EPROM), magnetic disk storage media devices, optical storage media devices, flash memory devices, electrical, optical, or other physical\/tangible memory storage devices. The memory  may comprise one or more computer readable storage media (e.g., a memory device) encoded with software comprising computer executable instructions and when the software is executed (by processor ) it is operable to perform the operations described herein in connection with .","The host device  may be, for example, a computing blade, a blade server comprising one or more solid state drives, or a blade center comprising one or more blade servers together with a blade chassis comprising common resources such as networking connections, input\/output device connections, power connections, cooling devices, switches, etc. The host device  may be a component of a larger system, such as a Cisco Unified Computing System, or a data center that centralizes enterprise computing resources.","Resident in memory  are hypervisor , and multiple hosted virtual desktops (HVDs) -. The hypervisor or virtual machine monitor  presents a virtual operating platform to the HVDs -, and manages access to the host processor , network interface unit , memory  and other host resources, so that the HVDs -have access to appropriate host resources without disrupting each other's operation. Each HVD  operates independently of the other HVDs  and runs as a separate virtual machine on the host device , and each HVD  may run a different operating system if desired. Further operation of the HVDs is explained below with reference to .","Each example client endpoint device comprises one or more processors , a network interface unit , memory , and display rendering hardware . The processor  is, for example, a data processing device such as a microprocessor, microcontroller, system on a chip (SOC), or other fixed or programmable logic, that executes instructions for process logic stored in memory . The network interface unit  enables communication throughout the VDI environment, as shown in . Memory  may be implemented by any conventional or other memory or storage device, and may include any suitable storage capacity. For example, memory  may comprise ROM, RAM, EPROM, magnetic disk storage media devices, optical storage media devices, flash memory devices, electrical, optical, or other physical\/tangible memory storage devices. The memory  may comprise one or more computer readable storage media (e.g., a memory device) encoded with software comprising computer executable instructions and when the software is executed (by processor ) it is operable to perform the operations described herein in connection with . Display rendering hardware  may be a part of processor , or may be, e.g., a separate graphics processor, e.g., a Graphics Processor Unit (GPU).","The example client endpoint device  may be any conventional or other computer system or device, such as a thin client, computer terminal or workstation, personal desktop computer, laptop or netbook, tablet, mobile phone, set-top box, networked television, or other device capable of acting as a client in the described VDI environment.","The example client endpoint device  interfaces with display device , input device(s) , and output device(s) , and communicates with these devices in any suitable fashion, e.g., via a wired or wireless connection. The display device  may be any suitable display, screen or monitor capable of displaying information to a user of a client endpoint device, for example the screen of a tablet or the monitor attached to a computer workstation. Input device(s)  may include any suitable input device, for example, a keyboard, mouse, trackpad, touch input tablet, touch screen, camera, microphone, remote control, speech synthesizer, or the like. Output device(s)  may include any suitable output device, for example, a speaker, headphone, sound output port, or the like. The display device , input device(s)  and output device(s)  may be separate devices, e.g., a monitor used in conjunction with a microphone and speakers, or may be combined, e.g., a touchscreen that is a display and an input device, or a headset that is both an input (e.g., via the microphone) and output (e.g., via the speakers) device.","The functions of the processors  and  may each be implemented by a processor or computer readable tangible (non-transitory) medium encoded with instructions or by logic encoded in one or more tangible media (e.g., embedded logic such as an application specific integrated circuit (ASIC), digital signal processor (DSP) instructions, software that is executed by a processor, etc.), wherein the memories  and  each store data used for the computations or functions described herein (and\/or to store software or processor instructions that are executed to carry out the computations or functions described herein). Alternatively, one or more computer readable storage media are provided and encoded with software comprising computer executable instructions and when the software is executed operable to performing the techniques described herein. Thus, functions of the process logic as described with reference to , for example, may be implemented with fixed logic or programmable logic (e.g., software or computer instructions executed by a processor or field programmable gate array (FPGA)).",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIGS. 2A","b":["150","205","20","30","35","100","100","150","205","150","205","205","150","105","20","30","35","100"]},"The example HVD  comprises a VDI server , host operating system(s) , hosted web browser  (also referred to as \u201chost web browser\u201d or \u201cHVD web browser\u201d), and may also comprise one or more other application(s) . In the example of , an HVD browser server  and HVD browser extension  are associated with the host web browser . The example client endpoint device  comprises a VDI client , operating system(s) , and client endpoint browser  (also referred to as \u201cendpoint browser\u201d or \u201cclient browser\u201d), all of which reside in memory  (as shown in ). Associated with client endpoint browser  are endpoint browser server  and, in the example of , endpoint browser extension , which are also resident in memory . The client endpoint device  also comprises a display , input devices including keyboard and mouse , and output devices including speakers . The host web browser  and endpoint browser  may be any browser software capable of use in conjunction with the host operating system , for example Mozilla Firefox, Google Chrome, Microsoft Internet Explorer, Opera Software Opera, Apple Safari, etc.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2A","FIG. 2B","FIGS. 2A and 2B","FIG. 2B","FIG. 2B"],"b":["320","360","324","364","322","40","320","360","322","40","150","205","320","360","40","324","364","320","360","362","322","320","324"]},"The VDI server  interacts with the host operating system  to provide virtual desktop interface functionality to the client endpoint device  over VDI session , which is a VDI protocol link that is established using any suitable VDI protocol, for example Citrix Independent Computing Architecture (ICA), VMWare PC over IP (PCoIP), Microsoft Remote Desktop Protocol (RDP), or other suitable protocol. For example, any application with which a user of the client endpoint device  is interacting is hosted by the HVD , while the window associated with the application is rendered by the client endpoint device . The windows are depicted and further described with reference to . The VDI server  on the host may, for example, receive HVD display output from the host operating system  and send it to the VDI client  as an HVD display over VDI session . The VDI session may, for example, represent all windows in the HVD display as a single image, or it may indicate the position and size of each host-provided window element and placeholder in the HVD display, and\/or the position and size of each client-provided window element and placeholder to be overlaid in the HVD display.","The VDI client  interacts with client operating system  to render the received HVD display for display on the client endpoint device . As will be further described with reference to , the endpoint browser , endpoint browser server  and endpoint browser extension  may also modify the received HVD display, for example by rendering a client-provided frameless browser window over a placeholder portion of the HVD display, in the course of rendering it to display . The VDI client  also receives user input from the user interface, for example, the user types on keyboard or exercises mouse , and these inputs are translated by the VDI client  and sent to the VDI server  via VDI session .","After it receives the user input, VDI server  translates it into virtual keyboard and mouse inputs, and feeds it via host operating system  to host web browser  or another application , as if the applications and the input devices  were running on a single desktop computing device. The user inputs are processed by the appropriate application at the HVD, and HVD display images are generated by the operating system  and VDI server  for transmission back to the VDI client , which renders the HVD display and client-generated user elements for display to the user on display .","In another embodiment, host device  may execute hosted virtual applications (HVAs) from its memory , rather than full hosted virtual desktops . In this embodiment, client endpoint device  may use its VDI client  to interact with multiple host devices , each executing one or more HVAs, and use the client operating system  to composite the output of the HVAs to present a full windowed desktop on display .","The host web browser  and endpoint browser  work together with their respective browser servers ,  and browser extensions ,  to render web pages. For example, when a user of client endpoint device  interacts with a displayed browser window, the appropriate browser extension ,  implements an application programming interface (API) defined by the browsers , , for use by browser extensions , . For example, some of the APIs allow the extensions ,  to filter events associated with the user's interaction. For example, if the user is viewing a web page rendered by the HVD in a displayed browser window, and navigates to a different web page using, e.g., a web address such as a Uniform Resource Locator (URL), the HVD browser extension  filters the navigation request and queries policy agent , and policy agent  consults one or more policies to determine whether this URL should be rendered by the host web browser  or the endpoint browser . If the URL should be rendered by the host web browser , then the host web browser  requests and receives from HTML server , for example, an HTML- or XHTML-encoded web page associated with the URL, over HTTP session , and renders the page for display.","If, however, the URL should be rendered by the endpoint browser, then the HVD browser extension  establishes a connection  with the endpoint browser server , and requests that the endpoint browser server  instantiate a new instance of the endpoint browser . Endpoint browser  is deployed as a frameless browser, i.e., it does not render window framing, menus, or other browser controls. The instantiated endpoint browser  establishes a content transport session , for example an HTTP session, directly with content server  (or content cache server ), requests and receives the appropriate data, and renders it for a user, for example as described with respect to . If the user then navigates to a different web page, e.g., by opening up a new browser tab with a new URL, the endpoint browser extension  filters the navigation request and queries policy agent , and policy agent  consults one or more policies to determine whether this URL should be rendered by the host web browser  or the endpoint browser . If the URL should be rendered by the endpoint browser , then the current instance of endpoint browser  is signaled to render the new URL and the appropriate data associated with the new URL is rendered in the current instance of the endpoint browser . Alternatively, if the filtered URL is to be rendered in a separate window, for example if a new browser tab or browser instance is to render the URL, then a new instance of the endpoint browser  will be instantiated and requested to render the URL. If the URL should be rendered by the host browser , however, then the endpoint browser extension  establishes a connection  with the HVD browser server , and notifies the HVD browser server  to request and render the appropriate data associated with the new URL.","The policy agent  may implement one or more policies to determine which browser should render a particular URL. For example, in one embodiment, the policy agent  may utilize a policy that compares the Fully Qualified Domain Name (FQDN) of the URL with domain name data (e.g., a list of domain name records) on the policy agent. If a match is found, the policy agent  examines the located data (e.g., a record) to determine if the URL should be rendered by the HVD or endpoint. If no matching data is found, then the policy agent  may use a default value (e.g., a default record) to determine whether the HVD or endpoint should render the URL. In another embodiment, the policy agent  may use a partial FQDN matching policy, where if the queried FQDN is a child of an FQDN having domain name data (e.g., a record), the policy agent  uses the parent data to determine whether the HVD or endpoint should render the URL. In a different embodiment, the policy agent  may scan the page associated with the URL for particular content, for example a tag such as an <object> or <embed> tag whose URL references content server , or whose Multipurpose Internet Mail Extension (MIME) type indicates a type of object (e.g., audio, video, Java, etc.) that is designated to be rendered on the endpoint , or that is not renderable on the client, etc. In yet another embodiment, the policy agent  may scan the page associated with the URL for specialized (e.g., proprietary) tags inserted into the HTML that indicate whether the page should be rendered by the HVD or endpoint.","In another embodiment, the activity of the policy agent is suppressed if the browser request originates from an anchor located inside an inline frame, e.g., in an <iframe> element, so that such requests are always handled by the browser attempting to access the anchor. In a different embodiment, the activity of the policy agent is suppressed if the browser request is associated with a conferencing or screen sharing application, such as Cisco WebEx, IBM LotusLive Meetings, Microsoft Office Live Meeting, Skype Screen Sharing, etc., so that such requests are always handled by the HVD browser. In these embodiments, the policy suppression provides an improved browser quality because it avoids having an individual web page partially rendered by the host browser and partially rendered by the client endpoint browser. Policy suppression may also permit a set of pages that share local data via a scripting language, for example javascript, to function properly by ensuring that the pages are all executed within a single browser instance.","The one or more policies may indicate that streaming media and other similar data should be rendered by the endpoint . For example, in one embodiment the policies may indicate that particular types of content data, such as animations, applications, audio, games, graphics, models, simulations, telephony, video, and web-based push-to-talk should be rendered by the endpoint . Or, in another embodiment, the policies may indicate that particular URLs should be rendered by the endpoint , for example URLs for video content servers (e.g., YouTube) or audio content servers (e.g., streaming radio stations), etc.","The browser servers ,  (also called browser masters or browser services) and browser extensions ,  may each be, for example, a software module or an element of a software module, and may be, for example, a stand-alone module, a part of another software module, or a combination of both. For example, the HVD browser server  and HVD browser extension  may each be individual software modules (as depicted in ), or may be combined together into a software module, or one or both may be combined together with host browser . Similarly, the endpoint browser server  and endpoint browser extension  may each be individual software modules (as depicted in ), or may be combined together into a software module, or one or both may be combined together with endpoint browser . Generally, when host browser  is instantiated, HVD browser extension  (if present) and HVD browser server  are also instantiated. In another embodiment, browsers , , may be implemented so that the functionality expressed by browser extensions ,  is executed natively by the browsers (e.g., as depicted in ).","In one embodiment, an instance of endpoint browser  is created for each browser tab or browser window rendering a web page that policy determines should be rendered on the client endpoint device . However, because policy agent  may have determined that all current web pages should be rendered in HVD browser tabs and windows, it is possible that zero instances of endpoint browser  may be present on client endpoint device . In this case, endpoint browser server  should still be present, so that connection requests from HVD browser extension  may still be received, and so endpoint browser server  can create an instance of endpoint browser . Hence, for some embodiments, endpoint browser server  should be permanently resident on client endpoint device , even if the endpoint browser  is not yet instantiated. Then, when HVD browser extension  notifies endpoint browser server  to instantiate an endpoint browser  instance, the endpoint browser  generally instantiates the endpoint browser extension , and the HVD browser server  is instantiated as well.","The content transport session  is established directly between the endpoint browser  and the content server  or content cache server -. Thus, the content (e.g., media) data flows directly to client endpoint device , rather than flowing through the HVD  and thus requiring a very high bitrate from the VDI session . When the endpoint browser  decodes and renders the data, the rendered data is sent to client operating system  to be overlaid as a frameless browser window on the rest of the HVD display, which is being rendered by VDI client . The data transported by content transport session  may be encoded or compressed in any suitable fashion, and transmitted via any suitable protocol, for example HTTP, Microsoft Media Services (MMS), MPEG-Transport Stream (MPEG-TS), the Real-time Transport Protocol (RTP), User Datagram Protocol (UDP), or any other suitable protocol. In some embodiments, content server  or content cache server  are HTTP servers and therefore are functionally no differently from a web server .","The communication session  is established between endpoint browser server  and its opposing HVD browser extension  if present (as depicted in ), or if no browser extensions are present, with the opposing HVD browser  (as depicted in ). Similarly, communication session  is established between HVD browser server  and its opposing endpoint browser extension , if present (as depicted in ) or, if no browser extensions are present, with the opposing endpoint browser  (as depicted in ). If HVD browser server  is not present (as depicted in ), then communication session  is established between the HVD browser  and opposing endpoint browser extension , if present (as depicted in ) or, if no browser extensions are present, with the opposing endpoint browser . The communication sessions ,  may be established using any suitable protocol, for example HTTP, TLS, TCP, or any other suitable protocol. In one embodiment, one or both of the communication sessions ,  are multiplexed into a virtual channel transported by VDI session , and in another embodiment one or both of the communication sessions ,  are transported independently from VDI session .","The communication sessions ,  may comprise requests to load particular web pages, to instantiate a client endpoint browser  instance, to describe the location of one or more placeholder objects over which the endpoint browser  should render a particular frameless browser instance, to identify a URL describing the location of the content server , , to report changes to the page history of endpoint browser , and to display or hide browser tabs or browser windows.","As can be seen from  and the preceding description, the present embodiments provide an improved system architecture as compared to conventional systems delivering content to HVDs. In conventional systems, content such as streaming media is transported from content servers to a host device, where it is decoded and rendered by a browser in an HVD using a host plugin, e.g., an Adobe Flash plugin, before being re-encoded and transmitted to a client device over a VDI session. These conventional systems exhibit a number of disadvantages, such as high network loads, inefficient use of content cache servers, degraded HVD scalability due to increased computational load on host devices, etc.","As compared to conventional methods that route content such as media from content servers through the HVD and over a VDI session to the client endpoint, the present embodiments use the content transport session  to directly transport content data to the client endpoint  in certain circumstances, according to the system policies implemented by the policy agent . This direct transportation of content to client endpoint devices has several benefits. First, using the content transport session  consumes less network bandwidth because it can maintain the native encoding of the content server, rather than forcing it to be transcoded to conform to the encoding used by the VDI session . Second, use of the content transport session  allows for Quality of Service (QoS) differentiation between regular VDI services and content delivery services. Third, transmitting content data directly to the client endpoints avoids needless concentration of bandwidth at a centralized location such as a host device  where multiple HVDs may be located. Fourth, using the content transport session  avoids placing high computing loads (e.g., media decode\/encode loads) on the HVD, and thus avoids scalability problems on the HVD devices. Fifth, because the VDI session , HTTP session , communication sessions , , and content transport session  may be separate from each other, different network paths may be used for VDI communication, remote procedure calls, and content transmission. Sixth, the transport of content directly to the client endpoint devices allows efficient usage of content cache server topology to reduce overall bandwidth across the network.","The various operating systems mentioned with reference to  and , such as the host operating system(s)  and the client operating system(s)  may be any suitable operating system for use in the VDI environment , such as, for example, a FreeBSD, Linux, OS X, UNIX, Windows, or other operating system. The operating system may be a standard operating system, an embedded operating system, or a real-time operating system. For example, the host operating system  may be a Linux operating system such as Ubuntu or Red Hat Enterprise Linux, a Mac operating system such as OS X or OS X Server, or a Windows operating system such as Windows 7 or Windows Server 2008 R2. The client operating system  may be, for example, a Blackberry, Linux, OS X, Windows, or other operating system. In one embodiment, the client operating system  is a flavor of Linux, such as Android, MeeGo, ThinStation, Ubuntu, webOS, or the like. In another embodiment, the client operating system  is an Apple operating system, such as OS X, iOS, or the like, or a Windows operating system, such as Windows 7, Windows CE, Windows Vista, Windows XP, or Windows XPe. It will be appreciated that the host browser  should be compatible with host operating system  and that the endpoint browser  should be compatible with client operating system . Hence, host browser  and endpoint browser  need not be the same browsers. As long as each browser is capable of rendering data from content server  or cache server , the user's experience of the rendering should be unaffected.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIGS. 3A through 3C","FIG. 3B","FIG. 3A"],"b":["400","535","510","400","400","410","420","400","430","440","450","400","460","470","480","490"]},"If a particular web page of the active tab is rendered by the host browser, then the host browser window  of  is displayed to a user of the client endpoint device . If, however, a particular web page is rendered by the endpoint, then an instance of the frameless client browser window , shown in , is instantiated. The frameless client browser window  does not contain any of the window decorations or framing of host browser window , but does comprise a web page rendering area ; horizontal and vertical scroll bars , , which are present if the content of the web page exceeds the current size of the rendering area, and a page status bar , which displays the execution state of the current page.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 3C","FIG. 5"],"b":["535","400","510","410","450","400","465","495","535","535","400","205","205","360","400"]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 4A","FIGS. 4B and 4C"],"b":["500","510","540","550","505","500","310","370"]},"In particular,  is an example of an HVD display  comprising a browser window  rendered by a hosted web browser, windows ,  drawn by other HVD applications, and HVD background desktop image  which serves as the background image for the HVD display . The browser window  comprises host-provided window elements  (e.g., window decorations, framing elements, and controls  through  of host browser window  as shown in ) and a placeholder element  for rendering elements (e.g., web page rendering area , scroll bars ,  and page status bar ). The placeholder element  acts as a placeholder where a client-rendered frameless browser window may be overlaid if a web page is rendered by the client endpoint device . Or, if the displayed web page is to be rendered by the HVD, the HVD may render the web page instead of the placeholder element , however such scenario is not depicted in . The HVD  may send the HVD display  including a placeholder element  over the VDI session . Information about the size and placement of placeholder element  for a client-provided frameless browser window may be sent over the communication session , for example placeholder information such as the position of the placeholder in the browser window, the size of the placeholder, and a description of regions of the placeholder that are occluded by other HVD applications in the HVD display.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 4B","b":["505","205","530","535","205","535","205","535","530","505","535","505","535","505","535"],"i":["a ","a","a ","a "]},"In the depicted example, the frameless browser window  is a frameless window displaying a web page that may comprise media data such as video data (e.g., CCTV, H264, mp4, QuickTime, etc.), but may also be any other type of data, such as Flash, JavaScript, or Silverlight. Furthermore, users may interact directly with the frameless browser window  using endpoint input devices such as a mouse or keyboard, rather than interacting with the HVD through the VDI session . Such interaction may occur when it is determined that the frameless browser window has been granted focus, i.e. when the operating system determines that user input should be directed at a web page rendered by the client endpoint .",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 4C","b":["505","205","510","510","510","510","530","535","535","205","510","510","520","520","535","535","360","510","520","520","510","410","420","430","440","450"],"i":["b ","a","b","a","b","a","b","a","b ","a","b","a","b ","b ","b ","a ","a"]},"Although the depicted examples are of visual display elements, it will be understood that a similar compositing process takes place for audio. Client endpoint device  may receive audio, comprising, for example, application tones, music, voice, or alerts, from HVD , via VDI session . Client endpoint device  may also receive audio content from a content server \/, via content transport session . Client endpoint device  should combine the audio from these two sources and render a coherent audio waveform to speakers . The two sources may, for example, be mixed by operating system , using audio rendering hardware in client endpoint device .",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 5","FIG. 5","FIG. 4B"],"b":["505","205","510","540","550","540","550","510","510","205","360","310","150","205","530","535","355","205","505","535","355","240"],"i":"c "},"In particular, it is the responsibility of the client operating system  to accomplish compositing. In most windowed operating systems, compositing is accomplished by the operating system drawing each individual window according to a z-order, which describes the relative depth of the various windows. Windows with the deepest (lowest) z-order are drawn first, and each window with a successively shallower (higher) z-order is drawn subsequently, which may result in the deeper windows being partially or fully occluded on the display. The assignment of higher-valued integers to shallower windows is somewhat arbitrary, but higher z-order shall herein be understood to imply shallower windows, i.e., windows stacked closer to the user's eyes. For example, if the host browser window  is from an HVD , then the frameless client browser window  will have a higher z-order than the window used to render the HVD display . If the host browser window  is from a hosted virtual application (HVA), then the frameless client browser window  will have a higher z-order than that of the window used to render the HVA display (e.g., the host browser window ) but lower than that of any HVA windows or endpoint application windows that may fully or partially occlude the HVA display.","It should be appreciated, however, that the VDI client  may receive all virtual display information (i.e., the HVD display comprising browser window  with host-provided window elements  and placeholder element , other HVD application windows , , and the HVD background desktop image ) from VDI session  and may request the client operating system  to render the entire virtual display as a single rectangular window. Thus, although window  or  may have a higher z-order on the HVD than the browser window , the client endpoint device  may composite the frameless client browser window  so that the composited images have a higher z-order than the HVD display.","The client endpoint device  creates the appearance that frameless client browser window  is partially occluded, however, by rendering either the frameless client browser window  or the remainder of display as non-rectangular shapes. For example, the client endpoint device  may composite the frameless client browser window  in only the non-occluded portions of the placeholder element . This means that the frameless client browser window  may be rendered as a non-rectangular shape, for example the irregular octagonal shape shown in  that results from the occlusion of the lower right corner by the window  and upper left corner by window . Alternatively, the client endpoint device  may render the frameless client browser window  as a rectangular shape, and render the remainder of display with a non-rectangular \u201chole\u201d over the portion of the frameless client browser window  desired to be displayed.","To efficiently render display , the client operating system  should be able to accept requests to render non-rectangular images without interfering with the images on the rest of the display. The endpoint browser server  should therefore be able to be informed of the non-rectangular geometry, so that this information may be communicated to the operating system . In one example, the HVD browser extension  interacts with HVD operating system  to compute the geometry of the non-occluded portions of the placeholder window and communicates that window geometry information to the endpoint browser server  over the communication session . In another example, HVD browser extension  fills placeholder element  with a placeholder image, for example a low bandwidth image such as a monochrome page, so that endpoint browser server  and operating system  may compute the non-rectangular region by detecting what portions of the virtual display contain the placeholder image. Operating system  should also be able to render the non-rectangular images at high speed and at a low impact to the CPU of the client endpoint device . In one example of such an efficient rendering, operating system  is aware of display rendering hardware , which comprises, for example, a graphics processing unit (GPU) capable of rendering non-rectangular images.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIGS. 6 and 7","FIG. 6","FIG. 7","FIG. 2B"],"b":["600","700","324","362","205","600","700","324","362","626","718","724","600","700","324","600","320","322","600"]},"Although not depicted here, it is understood that processes ,  operate in conjunction with the host sending an HVD display image  from the HVD to the client endpoint, where the HVD display comprises at least one placeholder element , as previously described with respect to . The client endpoint device  may receive the HVD display image via VDI client  and the VDI session . The HVD display image may be transported as a single window comprising the entire HVD display image, or as a separate virtual image for each hosted virtual application, or a combination of the two.","Referring now to , process  starts in step  by the HVD browser extension  establishing a communication session  to the endpoint browser server , which may take many embodiments, including, but not limited to, use of HTTP, TLS, TCP, or multiplexing onto a virtual channel of VDI session . In step  the HVD browser extension determines if the host web browser  is active. If not, the process  ends at step , e.g., by terminating process  or returning to wait for the browser to become active, but if yes, then in step  the HVD browser extension waits to receive an event from the browser. An event may be generated by user interactions with the web page, or scripting associated with the web page, or callback requests from the client endpoint device .","When an event is received, the HVD browser extension proceeds to step , where it locates the current tab information, that is, information about the tab currently active in the HVD browser. The tab information is maintained by the HVD and endpoint browser servers ,  and the HVD and endpoint browser extensions , , and may be in any suitable form, for example a list of tab information structures keyed by tab identifiers. The tab information is passed back and forth in the messages sent between each browser server ,  and its respective browser extension , . For the endpoint browser server , the tab information points at the instance of the endpoint browser  that is currently in use for this particular tab. For HVD browser extension , the tab information maintains a marker indicating whether the current tab is being rendered by the HVD or the endpoint.","In step  the HVD browser extension determines the type of event received in step , and processes the event according to a particular path before returning to step .  presents a few examples of common events that may occur in the same or similar form in many conventional web browsers, and it is understood that the depicted events may be modified or varied from those depicted. The depicted events include page load intercepts, tab switching, geometry changes, and tab deletion.","A page load intercept event is received when the browser is loading a new page, which may result from user actions such as clicking a link in the current page, requesting a bookmarked page, requesting a page from the browser history, using the navigation controls (e.g., a forward or back button), typing a URL in an address bar, etc. For a page load intercept event, the HVD browser extension in step  queries the policy agent with the URL of the page desired to be loaded, and in  determines whether the policy agent specified whether the HVD or the endpoint should render the new page. If the HVD should render the new page, then the HVD browser extension in step  checks to determine if the currently active tab is being rendered by the endpoint, if yes, in step  sends a \u201cdestroy browser\u201d message containing the current tab identifier to the endpoint browser server  and proceeds to step , and if not, proceeds to step . In step , the HVD browser extension marks the new tab as rendered by the HVD, and returns to step .","If the endpoint should render the new page, then the HVD browser extension in step  checks to determine if the currently active tab is being rendered by the HVD, and if yes, in step  sends a \u201ccreate browser\u201d message containing the new tab identifier to the endpoint browser server . The \u201ccreate browser\u201d message also contains the new URL, and information about the size and location of the placeholder element , occluding window(s), etc. In step , the HVD browser extension marks the new tab as rendered by the endpoint, and in step  substitutes a page containing placeholder element  for the currently displayed web page, and returns to step . If the determination in step  is no, then the HVD browser extension in step  sends an \u201cupdate page\u201d message containing the current tab identifier and the new URL to the endpoint browser server , and proceeds to step .","Turning to events processed in , a switch tab event is an event when the browser switches from the current tab to a different active tab in the browser, which may result from user actions such as clicking on a different tab or using navigation controls to move from tab to tab. For a switch tab event, the HVD browser extension in step  determines if the current tab is being rendered by the endpoint, if yes proceeds to step  and if no proceeds to step . In step , the HVD browser extension sends a \u201csleep browser\u201d message containing the current tab identifier to the endpoint browser server , and proceeds to step . In step , the HVD browser extension determines if the new tab should be rendered by the endpoint, if yes proceeds to step  and if no proceeds to step . In step , the HVD browser extension sends a \u201cwakeup browser\u201d message containing the new tab identifier to the endpoint browser server , and proceeds to step . In step , the HVD browser extension switches to the new tab, and returns to step .","A geometry change event is an event when the browser window  or other application windows ,  are altered, for example moved to a different location in the HVD display, altered in size, occluded by another window, etc., which may result from user actions such as clicking on different application windows, using keyboard navigation commands to move from application window-to-window, moving or resizing one or more windows, etc. For a geometry change event, the HVD browser extension in step  sends an \u201cupdate geometry\u201d message to the endpoint browser server , which contains the current tab identifier, the window geometry, which may comprise window coordinates and size for the frameless client browser window , and information about what sections of the frameless client browser window  are occluded, etc. The HVD browser extension then returns to step .","A delete tab event is an event when a tab in the browser is closed, which may result from user actions such as clicking on a \u201ctab close\u201d control, etc. For a delete tab event, the HVD browser extension in step  determines if the current tab is being rendered by the endpoint, if yes proceeds to step  and if no returns to step  (because the host web browser will delete the tab). In step , the HVD browser extension sends a \u201cdestroy browser\u201d message containing the current tab identifier to the endpoint browser server , and returns to step .","Referring now to , endpoint server process  starts in step  by the endpoint browser server  waiting for and accepting the establishment of communication session  by the HVD browser extension. It will be understood that, even if no endpoint browser instances  are currently active, process  should still be active to listen for incoming connection requests from HVD browser extensions . In one embodiment, process  is started as part of the bootstrap process for client endpoint device , and remains active throughout the period that client endpoint device  is operational. In step  the endpoint browser server determines if the endpoint device  is active, e.g., is connected to a host via a VDI session, etc. If not, the process  ends at step , e.g., by terminating process  or returning to wait for the endpoint device  to become active, but if yes, then in step  the endpoint browser server waits to receive a message from the HVD browser extension, for example one of the messages sent by HVD extension process . When a message is received, the endpoint browser server proceeds to step , where it locates the tab information based on the tab identifier in the message. In step  the endpoint browser server looks for the identified tab, and if none is found, creates new tab information using the received tab identifier in step , before proceeding to step . If the identified tab is found, then the endpoint browser server proceeds to step . In step , the endpoint browser server processes the received message according to its type, before returning to step .","For a \u201ccreate browser\u201d message, the endpoint browser server in step  converts the window coordinates and size contained in the message to coordinates suitable for the display  associated with client endpoint device . In step , the endpoint browser server creates a new instance of the endpoint browser , which renders the new URL in a frameless browser window , that is, a drawing rectangle or a window with no framing decorations associated with it, as specified according to the received message. The frameless browser window  has a higher z-order than the HVD browser window , which in turn may be a portion of, for example, HVD display  (separately received by the client endpoint device , for example via VDI session ). In step  the endpoint browser server saves the frameless browser instance reference (in some embodiments, a process or thread identifier) in the tab information, thereby forming an association between the tab identifier and the browser instance reference, and in step  sends information about regions of the HVD display that occlude the frameless browser window  to the endpoint operating system . In sum, the drawing rectangle and occlusion information allows endpoint browser server  to interact with operating system  to display only those portions of the rendered data that are currently visible in the HVD display, resulting in a endpoint display similar to those depicted in  as elements or . The endpoint browser server then returns to step .","For an \u201cupdate page\u201d message, the endpoint browser server in step  sends the new URL to the endpoint browser instance associated with the received tab identifier, and returns to step . For a \u201cdestroy browser\u201d message, the endpoint browser server in step  terminates the endpoint browser instance associated with the received tab identifier, and in step  removes the occluding window information for this browser instance from the endpoint operating system , and returns to step . Turning now to , for a \u201csleep browser\u201d message, the endpoint browser server in step  forces the endpoint browser instance associated with the received tab identifier into the background, where it stops rendering data and remains minimized (\u201casleep\u201d). In step  the endpoint browser server removes the occluding window information for this browser instance from the endpoint operating system , and returns to step .","For a \u201cwakeup browser\u201d message, the endpoint browser server in step  restores the endpoint browser instance associated with the received tab identifier into the foreground, causing it to recommence rendering data on the endpoint display, and in step  sends information about occluding regions of the HVD display to the endpoint operating system . The endpoint browser server then returns to step . For an \u201cupdate geometry\u201d message, the endpoint browser server in step  converts the window coordinates and size contained in the message to coordinates suitable for the display  associated with client endpoint device , and in step  forces the endpoint browser instance associated with the received tab identifier to update its position and size. In step  the endpoint browser server sends information about occluding regions of the HVD display to the endpoint operating system , and returns to step .",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIGS. 8 and 9","FIGS. 8A and 8B","FIG. 9","FIG. 2B","FIG. 2B"],"b":["800","900","364","205","322","800","900","364","322","818","914","800","900","364","800","360","362","800","322","900","320","324","900"]},"Although not depicted here, it is understood that processes  and  operate in conjunction with the host sending an HVD display image  from the HVD to the client endpoint, where the HVD display comprises at least one placeholder element , as previously described with respect to . The client endpoint device  may receive the HVD display image via VDI client  and the VDI session . The HVD display image may be transported as a single window comprising the entire HVD display image, or as a separate virtual image for each hosted virtual application, or a combination of the two. The processes  and  may also run concurrently with processes  and . It should be noted that because multiple instances of frameless client browser  may be active at the same time, there may be multiple processes  also active at the same time, each process  being associated with a particular instance of frameless client browser .","Referring now to , process  starts in step  by the endpoint browser extension  determining if a communication session  with the HVD browser server  has been established, and if no proceeding to step  and if yes proceeding to step . In step , the endpoint browser extension establishes communication session  to the HVD browser server , which may take many embodiments, including, but not limited to, use of HTTP, TLS, TCP, or multiplexing onto a virtual channel of VDI session . In step , the endpoint browser extension obtains the tab information for the browser instance associated with the current process, for example by querying the endpoint browser server . In step  the endpoint browser extension determines if its associated browser instance is active. If not, the process  ends at step , e.g., by terminating process  or returning to wait for the browser instance to become active, but if yes, then in step  the HVD browser extension waits to receive an event from the browser. An event may be generated by user interactions with the web page, or scripting associated with the web page, or requests from the HVD.","In step  the endpoint browser extension determines the type of the received event, and processes it according to a particular path before returning to step .  present a few examples of common events that may occur in the same or similar form in many conventional web browsers, and it is understood that the depicted events may be modified or varied from those depicted. The depicted events include page load intercepts, downloading files and uploading files.","For a page load intercept event, the endpoint browser extension in step  queries the policy agent with the URL of the intercept page desired to be loaded, and in step , determines whether the response from the policy specifies whether the HVD or the endpoint should render the new page. If the HVD should render the new page, then the endpoint browser extension in step  sends a \u201crender tab on HVD\u201d message containing the tab identifier and the URL to the HVD browser server , in step  terminates the associated browser instance, and in step  destroys the tab information associated with the browser instance, for example by interacting with the endpoint browser server . In step  the endpoint browser extension removes occluding window information for this browser instance from the endpoint operating system , and returns to step . If the endpoint should render the new page, then the endpoint browser extension in step  sends a \u201cURL changed\u201d message containing the new tab identifier and the URL to the HVD browser server , and in step  loads the new page, and returns to step . Because all files should be downloaded and uploaded on the HVD side, for a file download event, the endpoint browser extension in step  sends a \u201cdownload file\u201d message containing the new tab identifier and the URL to the HVD browser server , and returns to step . For a file upload event, the endpoint browser extension in step  sends an \u201cupload file\u201d message containing the new tab identifier and the URL to the HVD browser server , and returns to step .","Referring now to , process  starts in step  by the HVD browser server  waiting for and accepting the establishment of communication session  by the endpoint browser extension. In step  the HVD browser server determines if the endpoint device  is active, e.g., is connected to a host via a VDI session, etc. If not, the process  ends at step , e.g., by terminating process  or returning to wait for the endpoint device  to become active, but if yes, then in step  the HVD browser server waits to receive a message from the endpoint browser extension, for example one of the messages sent by process . When a message is received, the HVD browser server proceeds to step , where it locates the tab information based on the tab identifier in the message. In step  the HVD browser server processes the received message according to its type, before returning to step .","For a \u201crender tab on HVD\u201d message, the HVD browser server in step  replaces the placeholder element  with the rendered page of the new URL from the message, in step  removes the placeholder page  from the browser history, and in step  marks the current tab as rendered by the HVD, and returns to step . It will be understood that, by removing the placeholder page  from the browser history, if the user invokes the browser's \u201cback\u201d control, the display will smoothly switch between the current page rendered on the HVD and the previous page rendered on the endpoint without anomalously viewing the placeholder page, which should not be seen by the user, because the endpoint composites the endpoint's frameless browser instance in its place. For a \u201cURL changed\u201d message, the HVD browser server in step  updates the browser history with the current URL, so that the user may use the \u201cback\u201d control to access more than one page that has been consecutively rendered on the endpoint, and in step  updates the current tab information with the new URL from the message, and returns to step . For a \u201cdownload file\u201d message, the HVD browser server in step  starts a download dialog using the new URL from the message to download the file, and returns to step . For an \u201cupload file\u201d message, the HVD browser server in step  starts an upload dialog using the new URL from the message to upload the file, and returns to step .",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIG. 10","FIG. 2A","FIG. 2B"],"b":["1000","40","1005","324","364","600","800","1010","1015","1020","1025","1030","1025","1030","1030","1035","1040","1035","1040","1005"]},"The above description is intended by way of example only. The description of has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the embodiments in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more features, integers, steps, operations, elements, components, and\/or groups thereof. The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed.","With respect to the Figures, which illustrate the architecture, functionality, and operation of possible implementations of methods, apparatuses, and computer readable media encoded with instructions, each block in the flowcharts or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometime be executed in the reverse order, depending on the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIGS. 2A"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 3C","FIG. 3B","FIG. 3A"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 7A and 7B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 8A and 8B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
