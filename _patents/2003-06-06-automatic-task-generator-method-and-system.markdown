---
title: Automatic task generator method and system
abstract: An automatic task generation mechanism provides generation of tasks such as maintenance tasks for a computer system. A set of tasks is set up along with rules for performing the tasks. The rules may be associated with metadata that allow the tasks to be mapped to the tasks. Events may be detected that are related to database operations such as a create, modify, delete or add command. Upon event detection by the system, the system may store the event and associated metadata. Another process may query the event and metadata storage and compare those items to the rules previously set up. If there is a match between the rules and the event, one or more tasks may be established which correspond to an action that is desired to be taken. The task may then be inserted into a computer system for subsequent execution.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07912820&OS=07912820&RS=07912820
owner: Microsoft Corporation
number: 07912820
owner_city: Redmond
owner_country: US
publication_date: 20030606
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["The invention relates generally to the field of computer databases and more specifically to the field of automatic task generation for objects in database management systems.","Computer system administrators are under constant pressure to perform a variety of tasks within a short amount of time. These tasks include everything from routine maintenance tasks such as performing a database backup, to more critical issues such as hardware failure. There are some events requiring subsequent system maintenance, such as the creation of a new database by a user that may go unnoticed by a system administrator. Therefore some maintenance tasks such as a backup of a newly created file may not be immediately recognized for the maintenance tasks it may require. In addition, each system environment and installation into an enterprise environment directs a unique set of rules for performing maintenance tasks. But since such maintenance efforts are unique, system administrators often spend time and energy resources generating their own tailored set of maintenance tasks based on the rules or policy of the computing environment and utilization.","Thus, there is a need for a way to automatically invoke tasks concerning automatic maintenance tasks and other related functions on a computer system. It would be useful if such automatic tasks were to utilize metadata as well as event data to trigger the development and deployment of such tasks. The invention addresses the aforementioned needs and solves them with various systems, methods and techniques to generate tasks that can act within a computer system. The invention is valid for all automatic task generation functions and, for example, may be embodied in the form of an auto task enlistment function applicable to database management.","The invention includes an automatic task generation mechanism to generate tasks such as maintenance tasks for a computer system. The invention includes the setup of a set of tasks and rules for performing the tasks. The rules may be associated with metadata that allow the tasks to be mapped to the rules. When an event is detected by the system, the system may store the event and the associated metadata. Another string may query the event and metadata storage and compare those items to the rules previously set up. If there is a match between the rules and the event, one or more tasks may be established which correspond to an action that is desired to be taken.","For example, if a database is created, an event is triggered along with metadata and is compared to a set of rules, should the rules indicate that the event is one which should be subsequently backed up for maintenance purposes, then a series of commands is generated to implement the rule.","Overview","The invention involves a task generator which may operate automatically to generate commands to a computer system, specifically to a database management system. The automatic task generator receives an indication that a database-related operation has occurred. The invention compares the database operation and related metadata with a set of stored rules to determine if an automatic task need be generated. If an automatic task is desired, it may be formed from stored tasks relating to the rules which correspond to the database operation which was originally detected. Such tasks are generally object related and corresponding object metadata may be used in the task comparison and generation steps.","This invention may be resident as part of one or more computer systems or components. As such, a description of an exemplary computer device and its environment is provided hereinbelow.","Exemplary Computing Device",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},"Although not required, the invention can be implemented via an operating system, for use by a developer of services for a device or object, and\/or included within application software that operates according to the invention. Software may be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, appliances, lights, environmental control elements, minicomputers, mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network\/bus or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices, and client nodes may in turn behave as server nodes.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer system . Components of computer system  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer system  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer system  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, Random Access Memory (RAM), Read Only Memory (ROM), Electrically Erasable Programmable Read Only Memory (EEPROM), flash memory or other memory technology, Compact Disk Read Only Memory (CDROM), compact disc-rewritable (CDRW), digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer system . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer system , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer system  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM, CDRW, DVD, or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer system . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer system  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory (not shown). In addition to monitor , computer systems may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer system  may operate in a networked or distributed environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer system , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks\/buses. Such networking environments are commonplace in homes, offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer system  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer system  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer system , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web-enabled interface for applications and computing devices, making computing activities increasingly Web browser or network-oriented.","For example, MICROSOFT\u00ae's .NET\u2122 platform, available from Microsoft Corporation, One Microsoft Way, Redmond, Wash. 98052, includes servers, building-block services, such as Web-based data storage, and downloadable device software. While exemplary embodiments herein are described in connection with software residing on a computing device, one or more portions of the invention may also be implemented via an operating system, application programming interface (API) or a \u201cmiddle man\u201d object between any of a coprocessor, a display device and a requesting object, such that operation according to the invention may be performed by, supported in or accessed via all of .NET\u2122's languages and services, and in other distributed computing frameworks as well.","Exemplary Embodiments of the Invention","The invention provides automatic task enlistment systems and methods that alleviate some of the burden on administrators by performing intelligent routine maintenance tasks based on user-defined policies or rules and object meta-data. The ability to automatically enlist an object into a routine maintenance task based on a set of rules would allow administrators to spend more time handling the more active portions of their system-related work rather than performing the mundane tasks of maintenance.","A database management system automatic task generator may automatically perform maintenance tasks, among other tasks, by automatically detecting maintenance-related commands and relating those tasks to commands through the use of object metadata and policy rules.","In one embodiment, the invention is implemented in conjunction with a SQL database. The invention may be described in terms of its general applicability as well as in terms of the SQL environment embodiment. An example of the task command output is a Transact-SQL command set. The automatic task generator may use operations that are implemented by the database management system.","For example, the structured query language (SQL) is an American National Standards Institute (ANSI) standard used to communicate with a relational database. SQL is the standard language for relational database management systems. SQL statements are used to perform tasks such as update data or retrieve data from a relational database. Although many database systems use SQL, many of them also have their own additional proprietary extensions that are usually only used on their system. However, the standard SQL commands such as \u201cSelect\u201d, \u201cInsert\u201d, \u201cUpdate\u201d, \u201cDelete\u201d, \u201cCreate\u201d, and \u201cDrop\u201d can be used to accomplish many things that one desires to do with a relational database. Additionally, such command statements may lead to the introduction of data structures within a database that require system maintenance. Therefore, it may be possible to utilize such commands as event triggers for the construction of tasks for maintenance or other required or desired system functions.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["200","210","215","220"]},"Examples of such tasks are backup a file, defragment a hard disk, or rebuild a database. Tasks may be useful in the performance of maintenance on database systems or of operations related to objects while the system is being used. Examples of objects are a database, a table, a column, an index, a view, a trigger, a stored procedure, and a user program. An example of a task operating on an object may be to perform a full backup entitled \u201cmidnight backup\u201d on a database daily starting at midnight.","Rules may be generated and entered via the user\/program interface  and placed into the task and rule storage area . Rules may be generated that leverage the tasks in conjunction with database object metadata. Examples of object metadata for a database object are size, location, users, language, number of files, free space and custom attributes to name a few.","An example of a rule which uses this metadata is that if a database is created on the G drive and is larger than 100 MB and if the database has no backups relating to it then a new instance of the defined and stored task \u201cmidnight backup\u201d is to be executed. The object metadata for this task is the drive letter G: the size of greater than 100 MB, and the fact that no backups exist.","The block diagram of  also includes a server  containing a database management system , such as a SQL relational database and its related management system and a separate program for the detection of server events  and an event queue . The database management system , such as SQL Server\u2122, available via Microsoft Corporation in Redmond, Wash., is capable of full access to the underlying database (not shown). The server event detector  is able to detect events relevant to the operation of the database management system. For example, events referred to as data definition language (DDL) events, such as CREATE, ALTER and DROP commands may be detected by the server event detector . Additionally, other more generic events such as CREATE DATABASE commands may also trigger the server event detector  to respond. The server event detector  responds to these database related events by registering the event in an event queue . This queue allows the server to retain a record of the events that have occurred in response to the database management system  operations. The server event detector  also stores in the event queue  relevant metadata concerning the event detected. An example of a detected event and its related metadata is as follows:",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Event:","Database NEW created"]},{"entry":[{},"Metadata:","time\/date = 11:30 AM Nov. 01, 2003;"]},{"entry":[{},{},"Drive G;"]},{"entry":[{},{},"Size 200 MB;"]},{"entry":[{},{},"Collation Default"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"A server agent , which may be running independently from the server , samples  the event queue in an effort to discover relevant database management system  activity. The event queue  responds to the server agent request for new event reformation by sending  a payload of information. The payload may contain an identification of the event as well as the metadata stored corresponding to the detected event. The payload information may be transferred  from the event queue  to the server agent  as an extensible markup language (XML) payload. This XML payload is easily identified and deciphered by the server agent because of the clearly tagged information contained therein.","The server agent , upon receipt of the XML payload, attempts to determine if the XML payload contains information that matches any of the rules previously stored. The server agent  thus reads  the task and rule storage  to access rules compatible with the present content of the XML payload. The comparison of the XML payload information and the recovered rules may be accomplished within the server agent .","In one embodiment, the server agent  may be a service that runs constantly and contains a series of dedicated threads. One of these threads is dedicated to listening to the event queue . Another thread is dedicated to the comparison of XML payload data and retrieved rule data.","In one embodiment, the access of the correct rule for comparison may be accomplished by using at least some of the data in the XML payload. For example, the XML payload may contain the identification of the operation occurring in the database management system as being CREATE DATABASE. In addition, the payload may include some relevant metadata. This operation identifier command and metadata may be used by the server agent to query the task and rule storage device to return all rules associated with the CREATE DATABASE command identifier. The returned rules from the task and rule storage device  are then compared in the server agent  using some or all of the XML payload information obtained from the event queue .","If there is no match, then the server agent takes no action relative to the XML payload. If there is a match with the XML payload and the information retrieved from the task and rule storage module , then the server agent accesses the tasks associated with the rules which were matched and accesses  a task command generator  which assembles those tasks. The command generator  may produce commands which can be entered  into the database management system .","In an example flow, if the server agent  accessed the event queue  to discover an XML payload that contained an event of CREATE DATABASE had occurred within a SQL Server\u2122, it would compare that command with command rules from the task and storage module . If the command and accompanying metadata from the XML payload corresponded to a stored rule, then the server agent would access the task data associated with the rule data in the storage module . The task data may indicate that a \u201cmidnight backup\u201d task should be invoked. The task command generator  would assemble the task, place the appropriate constraints on the task as to what command, what parameters and when to execute the task and then deliver  the task to the SQL Server\u2122 database management system  as a Transact-SQL command for system maintenance.","There may be many embodiments of the invention as it relates to the location of the various elements of . For example, in one embodiment, the server queue  may be embodied inside SQL Server\u2122 program code manifested as a database table wherein entries in the server queue become rows in the table.","In another embodiment, the server agent  may be a program running on the server  as opposed to on a separate computer. In yet another embodiment, the task generator  may be a function located inside the server agent . The functional structure of  is not a barrier to implementation combinations of the invention.","In another embodiment, the invention may generate task commands that are directed towards hardware or software commands that may or may not be a part of a database management system (not shown in ). Although the event generated may be a result of a database management system event such as a create, delete, or update of an object within the database, the task commands generated by the event may include acts seemingly unrelated to the triggering database event. For example, a database event, such as an object create, may occur that triggers examination of metadata indicating that a disk drive is full. As a result, an immediate backup of the database may be desired. The invention may generate a command which activates a hardware or software command that may call a third party hardware or software module to assist with the backup function. The command generated may be executed outside of the database management system and be seemingly unrelated to the database management function. However, the command actually serves database management function use by making available more system resources for the database function.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3","b":["300","310"]},"The process  continues setup by accepting an input of rules  which leverage upon the tasks earlier defined. Such rules also accommodate the use of object metadata to define the requirements for the utilization of the earlier defined rules. The rules are thereafter stored  such that both tasks and rules are available for subsequent use. It is noted that the tasks and rules stored in this procedure can be generated at any time prior to the need for accessing such items and there is no need to generate such tasks and rules immediately prior to their use.","The process of automatic task generation  continues by awaiting for a database management system event  such as a creation or change of a database object. When such an event occurs, the event is logged along with relevant metadata. The event occurrence of the event triggers the next steps which are to read the event payload (metadata)  and compare the payload and event  with the rules earlier generated and stored. If there is not a match , then the process returns to await the next notification of an event . If there is a match  between the event detected and the stored rules, then the tasks that are associated with the matched rules are collected and organized . Typically, the tasks may then be sent  to the database management system for subsequent execution.","The process of automatic task generation  continues by awaiting a database management system event  such as a creation or change of a database object. When such an event occurs, the event is logged along with relevant metadata. The occurrence of the event triggers the next steps which are to read the event payload (metadata)  and compare the payload and event  with the rules earlier generated and stored. If there is not a match , then the process returns to await the next notification of an event . If there is a match  between the event detected and the stored rules, then the tasks that are associated with the matched rules are collected and organized . Typically, the tasks may then be sent  to the database management system for subsequent execution.","As mentioned above, while exemplary embodiments of the invention have been described in connection with various computing devices and network architectures, the underlying concepts may be applied to any computing device or system in which it is desirable to implement an automated task generator. Thus, the methods and systems of the present invention may be applied to a variety of applications and devices. While exemplary programming languages, names and examples are chosen herein as representative of various choices, these languages, names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code that achieves the same, similar or equivalent systems and methods achieved by the invention.","The various techniques described herein may be implemented in connection with hardware or software or, where appropriate, with a combination of both. Thus, the methods and apparatus of the invention, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers, the computing device will generally include a processor, a storage medium readable by the processor (including volatile and non-volatile memory and\/or storage elements), at least one input device, and at least one output device. One or more programs that may utilize the signal processing services of the present invention, e.g., through the use of a data processing API or the like, are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer. However, the program(s) can be implemented in assembly or machine language, if desired. In any case, the language may be a compiled or interpreted language, and combined with hardware implementations.","The methods and apparatus of the present invention may also be practiced via communications embodied in the form of program code that is transmitted over some transmission medium, such as over electrical wiring or cabling, through fiber optics, or via any other form of transmission, wherein, when the program code is received and loaded into and executed by a machine, such as an EPROM, a gate array, a programmable logic device (PLD), a client computer, a video recorder or the like, or a receiving machine having the signal processing capabilities as described in exemplary embodiments above becomes an apparatus for practicing the invention. When implemented on a general-purpose processor, the program code combines with the processor to provide a unique apparatus that operates to invoke the functionality of the discussed invention. Additionally, any storage techniques used in connection with the invention may invariably be a combination of hardware and software","While the present invention has been described in connection with the preferred embodiments of the various figures, it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. Furthermore, it should be emphasized that a variety of computer platforms, including handheld device operating systems and other application specific operating systems are contemplated, especially as the number of wireless networked devices continues to proliferate. Therefore, the invention should not be limited to any single embodiment, but rather should be construed in breadth and scope in accordance with the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary, as well as the following detailed description of preferred embodiments, is better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention, there is shown in the drawings exemplary constructions of the invention; however, the invention is not limited to the specific methods and instrumentalities disclosed. In the drawings:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
