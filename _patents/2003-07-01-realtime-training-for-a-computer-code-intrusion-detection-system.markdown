---
title: Real-time training for a computer code intrusion detection system
abstract: Systems, methods, and computer-readable media for training a computer code intrusion detection system in real time. A method embodiment of the present invention comprises the steps of observing (), in real time, commands () that are accessing the computer code (); and deriving () from said commands (), in real time, a set () of acceptable commands.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07568229&OS=07568229&RS=07568229
owner: Symantec Corporation
number: 07568229
owner_city: Mountain View
owner_country: US
publication_date: 20030701
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND ART","DISCLOSURE OF INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This invention pertains to the field of thwarting intrusions perpetrated by malicious attackers to computer code (e.g., databases).","The background art includes systems where the computer code being attacked is a database. Such systems are called database intrusion detection systems. Some of these systems utilize offline non-real-time training in order to detect suspicious or anomalous activity. These systems use database log files external to the database, or audit tables internal to the database, in conjunction with the training. Since these database intrusion detection systems are trained during normal usage of the database, the amount of logged data may be extensive\u2014potentially many gigabytes in size over the course of the training. Requiring the system administrator to collect multiple gigabytes of logged data to train the system is expensive in terms of storage needs, and requires constant monitoring by the system administrator to ensure that the logged entries do not fill up the storage area of the computer used for the training. In addition, many database systems override older logged entries when the number of entries exceeds a pre-allocated storage limit. This causes entries to be overwritten and thus lost before training can occur. Furthermore, if the audit logs are stored within the database itself (to be used later during an operational step), such storage uses up valuable resources on the database and negatively impacts the database's performance.","Examples of offline non-real-time database intrusion detection systems are described in Lee, et al., \u201cLearning Fingerprints for a Database Intrusion Detection System\u201d, 2002, pp. 264-279, published in November 2002 by Springer-Verlag, Berlin and Heidelberg, Germany; and , et al., \u201cDEMIDS: A Misuse Detection System for Database Systems\u201d, Department of Computer Science, University of California at Davis, Davis, Calif., Oct. 1, 1999.","The present invention comprises systems, methods, and computer-readable media for training a computer code intrusion detection system in real time. A method embodiment of the present invention comprises the steps of observing (), in real time, commands () that are accessing the computer code (); and deriving () from said commands (), in real time, a set () of acceptable commands.","This invention has applicability to any code intrusion detection system, i.e., any system in which computer code  is susceptible to being attacked by commands  which may be malicious, due to malicious intent on the part of the user  who issues the command . As used herein, \u201cuser\u201d can refer to a client computer  and\/or to a human who has control of computer . As illustrated in , there can be a plurality N of users , where N is any positive integer.","Most of the following description illustrates the special case where the computer code  is a database . Database  can be any type of database, such as a relational database or a flat file. When database  is a relational database, commands  are typically written in a SQL language. As used herein, \u201cSQL\u201d is taken in the broad sense to mean the original language known as SQL (Structured Query Language), any derivative thereof, or any structured query language used for accessing a relational database. In the case where computer code  is not a relational database, the commands can be written in another language such as XML. Database  may have associated therewith an internal audit table  and\/or an external database log file  for storing audit and\/or ancillary information pertaining to database . Database  is typically packaged within a dedicated computer known as a database server , which may also contain database communications module  and other modules not illustrated. Modules , , , , , , , , , , and  can be implemented in software, firmware, hardware, or any combination thereof, and are typically implemented in software.","Computer code intrusion detection system  (and its special case, database intrusion detection system ) encompasses modules , , , , , , and .  illustrates the case where these modules are stand-alone modules separate from database server . However, they could just as well be incorporated within database server , e.g., they could be incorporated within database communications module . Thus, intrusion detection system  could be published by a third party as a standalone package on any type of computer-readable medium, or bundled by the manufacturer of the database  with module . The purpose of intrusion detection system  is to protect computer code  from users  that have nefarious intent. For example, such users may desire to steal credit card information from database , modify database  to credit their account with additional money, modify database  to spread a computer worm, etc.","With respect to , it can be seen that intrusion detection system  operates in three phases. Phase one is a training phase and encompasses steps  through . Phase two is an optional reporting phase and encompasses step . Phase  is an operational phase and encompasses steps  through .","In order for intrusion detection system  to be used, it must be first trained. The training phase is initiated at step . This is done by system administrator  flipping a switch (which may be located, for example, on database server  or on training module ); by means of a preselected event occurring (e.g., the first of each month or the addition of a new table within database ); or by any other means known to one of ordinary skill in the art for starting a software or other computer system.","At step , training module  observes, in real time, commands  that users  send to database . As used herein, \u201creal time\u201d means \u201cduring a short time interval surrounding an event\u201d. Thus, observing a command  in real time means that the command  is observed during a short time interval surrounding the instant that the command  enters the database .","Examples of commands  include querying the database , adding an entry to the database , deleting an entry from the database , and modifying an entry in the database . There are two major ways in which the observing step  is performed: real-time auditing and in-line interception.","Real-time auditing is typically used in cases where database  has an auditing feature. The auditing information may be placed into an audit table  internal to database  or into an external database log file . In real-time auditing, training module  instructs the database  to generate a new event every time a command enters database . Each event can include such items as the text of the command , a date\/time stamp, information on the user that issues the command , the IP (Internet Protocol) address of the issuing computer , the application that issued the command , etc.","The event data can appear in string or binary form, and can be extracted using a number of different techniques, depending on the implementation of the IDS , including APIs (Application Programming Interfaces) that access the computer code . One example is to use ODBC (Open DataBase Connectivity), a set of C language API's that allows one to examine or modify data within database . If the JAVA programming language is used, JDBC (JAVA DataBase Connectivity) can be used instead. Another way of extracting the needed information from database  is to use code injection or patching to inject logic into one or more modules , within database server , to transfer control to training module . In another embodiment, called \u201cdirect database integration\u201d, the database  vendor, who has access to the commands  in conjunction with the normal operation of the database , makes the commands  available to intrusion detection system . In yet another embodiment, in cases where database  supports it, external database log file  may be examined without the need to resort to special software. Once an event has been processed by the IDS , it can optionally be expunged from any table or log file it is stored in, to make room for subsequent events.","In in-line interception, at least one of a proxy, firewall, or sniffer  is interposed between database  and users . The proxy, firewall, or sniffer  examines packets of information emanating from users  and extracts the relevant information therefrom. Proxy, firewall, or sniffer  may need to decrypt the communications emanating from users  if these communications are encrypted.","After a command  has been captured in step , at step  training module  analyzes the command  and updates a set  of acceptable commands, again in real time. In other words, set  is updated command-by-command. In one embodiment, the deriving step  comprises grouping the commands  into categories and updating statistical information pertaining to the categories, all in real time. The categories are pre-selected, and can be fed to training module  via prestored but modifiable training parameters . The categories can include one or more of the following: canonicalized commands; the dates and times at which the commands access the computer code ; logins (user IDs, passwords, catch phrases, etc.) of users  issuing the commands ; the identities of users  issuing the commands ; the departments of the enterprise in which the users  work, or other groups to which the users  belong; the applications (i.e., software programs or types of software programs) that issue the commands ; the IP addresses of the issuing computers ; frequency of issuing a given command  by a given user ; identities of users  accessing a given field or fields within the computer code ; the times of day that a given user or group of users  accesses a given field or fields within the computer code ; the fields or combination of fields being accessed by given commands ; tables or combinations of tables within the computer code  accessed by the commands.","The invention will now be further described with respect to the special case in which the commands  are grouped into categories comprising canonicalized commands. A canonicalized command is a command  stripped of its literal field data. Thus, for example, let us assume that the command  is:","SELECT NAME FROM PATIENTS WHERE NAME LIKE \u2018FRANK\u2019 AND AGE >25","Literal field data is defined as a specific value of a parameter. In this case, the literal field data is \u201cFRANK\u201d and \u201c25\u201d. Thus, a canonicalized form of the command  is:","SELECT NAME FROM PATIENTS WHERE NAME LIKE * AND AGE > *","Literal fields can include literal numbers (plain numbers), dates, times, strings, and potentially named ordinal values (symbolic words used to represent numbers, e.g., \u201cJanuary\u201d represents the first month, \u201cFinance\u201d represents department , etc.). Training module  uses the canonicalized command as an index to group and categorize the commands . Even in a large database , the number of command categories is usually less than 20,000 or so.","To continue with our example, the following commands  would all be placed into the same command category:","SELECT NAME FROM PATIENTS WHERE NAME LIKE \u2018FRANK\u2019 AND AGE >25","SELECT NAME FROM PATIENTS WHERE NAME LIKE \u2018BILL\u2019 AND AGE >40","SELECT NAME FROM PATIENTS WHERE NAME LIKE \u2018ED\u2019 AND AGE >25","In one embodiment, the command","SELECT NAME FROM PATIENTS WHERE NAME IS \u2018FRANK\u2019 AND AGE >25 would be treated differently from the command","SELECT NAME FROM PATIENTS WHERE NAME LIKE \u2018FRANK\u2019 AND AGE >25. In an alternative embodiment, a list of synonyms is kept, so that \u201cIS\u201d is treated the same as \u201cLIKE\u201d, and thus these two commands are treated as falling within the same command category.","In the last example, instead of using \u201cED\u201d, one could use \u201cED %\u201d where % is a wildcard character. (Other wildcard characters might include #, ?, or _, depending upon the language variant used.) Thus, \u201cED %\u201d would pick up \u201cEDWARD\u201d, \u201cEDDIE\u201d, and \u201cEDWINA\u201d, as well as \u201cED\u201d. Wildcards are tracked by field and by command category, to give information needed to determine whether the use of the wildcard is innocuous or suspicious (see the following discussion with respect to step ).","The fact that a wildcard is not observed in a given field during the training phase can be saved in the set  of acceptable commands, along with canonicalized data as described above. Then, during the operational phase, the presence of a wildcard character in that field is flagged as being suspicious.","For a given command , training module  examines the value of each literal field and determines whether its value is in the set of values seen thus far for that field, or whether it constitutes a new value. Continuing with our example based upon the three commands  given above, training module  stores the following information in NAME and AGE fields associated with the given canonicalized command category:","CANONICALIZED COMMAND CATEGORY:\n\n","NAME statistics:\n\n","AGE statistics:\n\n","Notice from the above that the actual names are stored because there aren't too many. Alternatively, all names having fewer than a preselected number of characters could be stored.","In one embodiment, whenever, for a given literal field, the number of observed values is greater than or equal to a preselected threshold value S, the training module  sets a flag for this field in this canonicalized command category, indicating that the field should be generalized, allowing any legitimate value. Thus, for example, if S=4 and training module  observes a fourth query:","SELECT NAME FROM PATIENTS WHERE NAME LIKE \u2018STEVE\u2019 AND AGE >25, training module  determines that it has already seen three distinct values (Frank, Bill, and Ed) in the NAME field, and it has just been presented with Steve. This now pushes the number of distinct cases for the NAME field to four, which meets or exceeds the preselected threshold. In this case, training module  automatically sets the generalize flag for this field in this command category, indicating that any value is acceptable. The entry then changes to:","CANONICALIZED COMMAND CATEGORY:\n\n","NAME statistics:\n\n","AGE statistics:\n\n","This technique may be advantageously used when there are a constrained number of values for that field. For example, if the field represents the month of the year, there are a maximum number of 31 days in any month, so S should be set to 31.","Similarly, if the field represents the year, there are a maximum of 12 months in any year, so S should be set equal to 12. Once a given field within a given canonicalized command category has been generalized, there is no need to save all observed valued for this field anymore. Thus, the code intrusion detection system  uses less memory as more items are generalized.","In addition to the field attributes \u201cgeneralize\u201d and \u201cwildcard\u201d, other attributes e.g., \u201clength of string\u201d, can be used. The \u201cgeneralize\u201d attribute can be a partial or conditional \u201cgeneralize\u201d, e.g., any name is allowed in the NAME field as long as it contains fewer than a preselected number of characters.","The training phase is ended, at step , by any one of a number of means. For example, system administrator  can flip a switch on database server  or training module . Alternatively, the training phase may end by a statistical technique, e.g., training module  monitors the occurrence or frequency of new canonicalized command categories being established or new fields being established, and determines that a preselected frequency threshold has been met. As with all of the preselected parameters, the preselected frequency threshold may be stored in training parameters . Alternatively, the training phase may end by the occurrence of a preselected elapsed or absolute time, or by any other means known to one of ordinary skill in the art.","At the conclusion of the training phase, the set  of acceptable commands that has been gradually built up in real time during the training phase becomes used as the basis for comparison during the subsequent operational phase (phase  in ). Based upon the above example, the set  of acceptable commands contains the following two commands:","SELECT NAME FROM PATIENTS WHERE NAME LIKE * AND AGE >25","SELECT NAME FROM PATIENTS WHERE NAME LIKE * AND AGE >40","In the above, * means that the field can hold any valid string value. These two commands in set  represent all valid SQL commands  observed during the training phase. This real-time system  has now built up a table of canonicalized commands, determined which fields in these commands should be generalized, and has done this using a limited amount of memory. Even with 20,000 commands , only megabytes of storage are needed. This is in contrast to the off-line non-real-time systems of the prior art where logs ,  may grow to gigabytes in length. For example, in the present invention, if the following command  was issued 5 million times:","SELECT NAME FROM PATIENTS WHERE NAME LIKE somename AND AGE >25 it would require less than a kilobyte to represent this command data. On the other hand, off-line non-real-time training systems of the prior art would have to keep a full audit log ,  of all 5 million occurrences as input to the off-line training process.","Returning to , optional step  is invoked. When step  is used, suspicious activity is tracked during the training phase. For example, the number or percentage of times a wildcard character is used for a particular field for a particular command category can be tracked. If this number or percentage exceeds a preselected threshold (again, provided by parameters ), the activity is deemed to be suspicious. This suspicious activity can then be reported to the system administrator . A wildcard may be either innocuous or suspicious, based upon where it is used. For example, if a wildcard is used in a NAME OF AUTHOR field in a database  of library books, that is probably innocuous. On the other hand, if a wildcard is used in the PASSWORD field in a database  of credit card information, that most likely would be deemed suspicious. The system administrator can then selectively remove from the set  of acceptable commands such suspicious commands .","After the training phase and the optional suspicious activity reporting phase have been completed, the intrusion detection system  operates in the operational phase. At step , commands  that are currently accessing database  are compared by comparing module  against commands in the set  of acceptable commands. Module  can extract the current commands  in the same manner as described above for training module . The current command  is pre-processed similarly to the way the corresponding command  was pre-processed in the training phase, if this is needed to facilitate the comparison. For example, in the illustration described above, the command  is first canonicalized.","The basic rule by which module  operates is that if the current command  matches a command in the set  of acceptable commands, comparing module  allows the current command  to access database  (at step ). If, on the other hand, the current command  does not match a command  in the set  of acceptable commands, comparing module  flags the current command  as being suspicious (at step ). Then a post-flagging protocol is performed at step . This protocol entails execution of at least one of the following steps: an alert is sent to the system administrator ; the command  is not allowed to access the computer code ; the command  is allowed to access the computer code , but the access is limited in some way (for example, the amount of data sent back to user  is limited, or wildcard characters are removed from certain fields); the command  is augmented, e.g., investigational code is inserted into the command  to provoke an audit trail; the user  sending the command  is investigated. Such an investigation can be performed by computer means (e.g., sending out a digital trace to determine the identity of the user ) and\/or by off-line means (sending a human private investigator to spy on user ).","It will be seen from the above discussion that the present invention may offer, inter alia, the following advantages over prior art systems:\n\n","The above description is included to illustrate the operation of the preferred embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion, many variations will be apparent to one skilled in the art that would yet be encompassed by the spirit and scope of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other more detailed and specific objects and features of the present invention are more fully disclosed in the following specification, reference being had to the accompanying drawings, in which:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
