---
title: Method for developing gaming programs compatible with a computerized gaming operating system and apparatus
abstract: The present invention in various embodiments provides a computerized wagering game method and apparatus that features an operating system kernel, a system handler application that loads and executes gaming program shared objects and features nonvolatile storage that facilitates sharing of information between gaming program objects. The system handler of some embodiments further provides an API library of functions callable from the gaming program objects, and facilitates the use of callback functions on change of data stored in nonvolatile storage. The nonvolatile storage also provides a nonvolatile record of the state of the computerized wagering game, providing protection against loss of the game state due to power loss. The system handler application in various embodiments includes a plurality of device handlers, providing an interface to selected hardware and the ability to monitor hardware-related events.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07618317&OS=07618317&RS=07618317
owner: 
number: 07618317
owner_city: 
owner_country: 
publication_date: 20020910
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["NOTICE OF COPENDING APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is a non-provisional application claiming priority from Provisional Patent Application Ser. No. 60\/318,369 filed Sep. 10, 2001, entitled: Method for Developing Gaming Programs Compatible with a Computerized Gaming Operating System and Apparatus.","1. Field of the Invention","The present invention relates to wagering games, particularly computer based wagering games, computer based wagering games running on an operating system, and methods for developing games on a standard gaming operating system.","2. Background of the Art","Games of chance have been enjoyed by people for thousands of years and have enjoyed increased and widespread popularity in recent times. As with most forms of entertainment, players enjoy playing a wide variety of games and new games. Playing new games adds to the excitement of \u201cgaming.\u201d As is well known in the art and as used herein, the term \u201cgaming\u201d and \u201cgaming devices\u201d are used to indicate that some form of wagering is involved, and that players must make wagers of value, whether actual currency or some equivalent of value, e.g., token or credit. This is an accepted distinction in the art from the playing of games, which implies the lack of value depending upon the outcome and in which skill is ordinarily an essential part of the game. On the contrary, within the gaming industry, particularly in computer based gaming systems, the absence of skill is a jurisdictional requirement in the performance of the gaming play.","One popular gaming system of chance is the slot machine. Conventionally, a slot machine is configured for a player to wager something of value, e.g., currency, house token, established credit or other representation of currency or credit. After the wager has been made, the player activates the slot machine to cause a random event to occur. The player wagers that particular random events will occur that will return value to the player. A standard device causes a plurality of reels to spin and ultimately stop, displaying a random combination of some form of indicia, for example, numbers or symbols. If this display contains one of a pre-selected number of winning symbol combinations, the machine releases money into a payout chute or increments a credit meter by the amount won by the player. For example, if a player initially wagered two coins of a specific denomination and that player achieved a payout, that player may receive the same number or multiples of the wager amount in coins of the same denomination as wagered.","There are many different formats for generating the random display of events that can occur to determine payouts in wagering devices. The standard or original format was the use of three reels with symbols distributed over the face of the reel. When the three reels were spun, they would eventually each stop in turn, displaying a combination of three symbols (e.g., with three reels and the use of a single horizontal payout line as a row in the middle of the area where the symbols are displayed). By appropriately distributing and varying the symbols on each of the reels, the random occurrence of predetermined winning combinations can be provided in mathematically predetermined probabilities. By clearly providing for specific probabilities for each of the pre-selected winning outcomes, precise odds that would control the amount of the payout for any particular combination and the percentage return on wagers for the house could be reasonably controlled.","Other formats of gaming apparatus that have developed in a progression from the pure slot machine with three reels have dramatically increased with the development of video gaming apparatus. Rather than have only mechanical elements such as wheels or reels that turn and stop to randomly display symbols, video gaming apparatus and the rapidly increasing sophistication in hardware and software have enabled an explosion of new and exciting gaming apparatus. The earlier video apparatus merely imitated or simulated the mechanical slot games in the belief that players would want to play only the same games. Early video gaming systems therefore were simulated slot machines. The use of video gaming apparatus to play new gaming applications such as draw poker and Keno broke the ground for the realization that there were many untapped formats for gaming apparatus. Now casinos may have hundreds of different types of gaming apparatus with an equal number of significant differences in play. The apparatus may vary from traditional three reel slot machines with a single payout line, video simulations of three reel video slot machines, to five reel, five column simulated slot machines with a choice of twenty or more distinct pay lines, including randomly placed lines, scatter pays, or single image payouts. In addition to the variation in formats for the play of gaming applications, bonus plays, bonus awards, and progressive jackpots have been introduced with great success. The bonuses may be associated with the play of gaming applications that are quite distinct from the play of the original gaming format, such as the video display of a horse race with \u201cbets\u201d on the individual horses randomly assigned to players that qualify for a bonus, the spinning of a random wheel with fixed amounts of a bonus payout on the wheel (or simulation thereof), or attempting to select a random card that is of higher value than a card exposed on behalf of a virtual \u201cdealer.\u201d","Examples of such gaming apparatus with a distinct bonus feature includes U.S. Pat. Nos. 5,823,874; 5,848,932; 5,836,041; U.K. Patent Nos. 2 201 821 A; 2 202 984 A; and 2 072 395A; and German Patent DE 40 14 477 A1. Each of these patents differs in fairly subtle ways as to the manner in which the bonus round is played. British Patent 2 201 821 A and DE 37 00 861 A1 describe a gaming apparatus in which after a winning outcome is first achieved in a reel-type gaming segment, a second segment is engaged to determine the amount of money or extra games awarded. The second segment gaming play involves a spinning wheel with awards listed thereon (e.g., the number of coins or number of extra plays) and a spinning arrow that will point to segments of the wheel with the values of the awards thereon. A player will press a stop button and the arrow will point to one of the values. The specification indicates both that there is a level of skill possibly involved in the stopping of the wheel and the arrow(s), and also that an associated computer operates the random selection of the rotatable numbers and determines the results in the additional winning game, which indicates some level of random selection in the second gaming segment.","U.S. Pat. Nos. 5,823,874 and 5,848,932 describe a gaming device comprising:","a first, standard gaming unit for displaying a randomly selected combination of indicia, said displayed indicia selected from the group consisting of reels, indicia of reels, indicia of playing cards, and combinations thereof; means for generating at least one signal corresponding to at least one select display of indicia by said first, standard gaming unit; means for providing at least one discernible indicia of a mechanical bonus indicator, said discernible indicia indicating at least one of a plurality of possible bonuses, wherein said providing means is operatively connected to said first, standard gaming unit and becomes actuatable in response to said signal. In effect, the second gaming event simulates a mechanical bonus indicator such as a roulette wheel or wheel with a pointing element.","A video terminal is another form of gaming device. Video terminals operate in the same manner as a conventional slot and video machine, except that a redemption ticket rather than an immediate payout is dispensed. The processor may be present in the terminal or in a central computer.","The vast array of electronic video gaming apparatus that is commercially available is not standardized within the industry or necessarily even within the commercial line of apparatus available from a single manufacturer. One of the reasons for this lack of uniformity or standardization is the fact that the operating systems that have been used to date in the industry are primitive. As a result, the programmer must often create code for each and every function performed by each individual apparatus.","Attempts have been made to create a universal gaming engine for a gaming machine and are described in Carlson U.S. Pat. No. 5,707,286. This patent describes a universal gaming engine that segregates the random number generator and transform algorithms so that this code need not be rewritten or retested with each new game application. All code that is used to generate a particular game is contained in a rule EPROM in the rules library. Although the step of segregating random number generator code and transform algorithms has reduced the development time of new games, further improvements were needed.","One significant economic disadvantageous feature with commercial video wagering gaming units that maintains an artificially high price for the systems in the market is the use of unique hardware interfaces in the various manufactured video gaming systems. The different hardware, the different access codes, the different pin couplings, the different harnesses for coupling of pins, the different functions provided from the various pins, and the other various and different configurations within the systems has prevented any standard from developing within the technical field. This is advantageous to the equipment manufacturer, because the gaming formats for each system are provided exclusively by a single manufacturer, and the entire systems can be readily rendered obsolete, so that the market will have to purchase a complete unit rather than merely replacement software, and aftermarket gaming designers cannot easily provide a single gaming application that can be played on different hardware.","The invention of computerized gaming systems that include a common or \u201cuniversal\u201d video wagering game controller that can be installed in a broad range of video gaming apparatus without substantial modification to the gaming apparatus controller has made possible the standardization of many components and of corresponding gaming software within gaming systems. Such systems desirably will have functions and features that are specifically tailored to the unique demands of supporting a variety of gaming applications and gaming apparatus types, and doing so in a manner that is efficient, secure, and cost-effective to operate.","What is desired is an architecture and method of providing a gaming-specific platform that features reduced game development time and efficient gaming operation, provides security for the electronic gaming system, and does so in a manner that is cost-effective for gaming software developers, gaming apparatus manufacturers, and gaming apparatus users. An additional advantage is that the use of the platform will speed the review and approval process for gaming applications with the various gaming agencies, bringing the gaming formats and gaming applications to market sooner.","The nature of gaming systems and the stringent controls applied to gaming systems and gaming applications by jurisdictional controls (e.g., the Nevada State Gaming Commission, the New Jersey State Gaming Commission, the Mississippi State Gaming Commission, the California State Gaming Commission, the United Kingdom Gaming Commission, etc.) makes the development of a standard operating system and the ability of the game developers to work with such gaming operating systems unique within the field of computer based designer\/developer interactions.","One of the reasons that Microsoft Windows\u00ae became the leading operating system throughout the world for personal computers was based upon its business strategy of providing access to Microsoft Windows\u00ae on-line to developers using an Application Program Interface (API) through which developers could communicate with the Windows\u00ae operating system, without being able to modify the underlying operating system (OS). This enabled Windows\u00ae to be supported by a vast network of private developers so that significant amounts of software became available for Windows\u00ae while other competing operating systems (e.g., Mac OS, Unix and Linux) had much fewer numbers of software programs available to use with these systems. However, the Microsoft Windows\u00ae operating system was not designed to support gaming systems and does not contain the essential software components needed for a gaming jurisdiction approvable operating system or gaming application.","Some game systems (as opposed to gaming systems) also attempted an on-line approach to assisting developers in using proprietary game operating systems for development of games compatible with the game operating system. One such on-line system was Adventurebuilder, which has apparently been removed from active on-line operation, even though its API addressable OS has been archived at http:\/\/archive.wustl.edu.languages\/smalltalk\/Smalltalk\/st80_CastleMS\u2014 . . . \/CastleMS.s and the entire 195 pages of text can be accessed at that site.","Additionally, U.S. Pat. No. 6,181,336 B1 (Chiu et al.) describes a system for providing an integrated, efficient and consistent production environment for the shared development of multimedia productions. Examples of multimedia productions include feature animation films, computerized animation films, interactive video games, interactive movies, and other types of entertainment and\/or educational multimedia works. The development of such multimedia products typically involves heterogeneous and diverse forms of multimedia data. Further, the production tools and equipment that are used to create and edit such diverse multimedia data are in and of themselves diverse and often incompatible with each other. The incompatibility between such development tools can be seen in terms of their methods of operation, operating environments, and the types and\/or formats of data on which they operate. The common utilities, methods and services disclosed therein, are used to integrate the diverse world of multimedia productions. By using the common utilities, methods and services provided, diverse multimedia production tools can access, store, and share data in a multiple user production environment in a consistent, safe, efficient and predictable fashion.","The present invention provides a method for a developer to access a unique gaming operation system that can support a wide variety of gaming applications. The developer can access the operating system through an Application Program Interface (API), respond to input from the developer without alteration of the gaming components stored in the operating system, and then enables the developer, by communication with the operating system, to develop a chip, gaming unit or other software that can be communicationally connected to the operating system to play or execute a gaming application, using the operating system as the primary engine for running the gaming application. The developer is capable of using any desired software system to develop the gaming application (e.g., Windows\u00ae 98, Windows\u00ae NT, Windows\u00ae XP, Mac OS, Unix, Linux, etc.) and still communicate to the gaming operating system through the API. The developed chip or software stored on one or more different media, such as EPROM flash memory, CD ROM, etc. or other software containing the gaming play content of a new gaming format may then be inserted into any gaming box with the host operating system by simply replacing a gaming chip CD ROM, disc or other storage media that has been developed through use of access to the operating system through the API, and that gaming application is assured of performance and can have a significantly reduced approval time through jurisdictional gaming agencies.","The present invention in various embodiments provides such a method to be practiced on a computerized wagering gaming operating system and apparatus that features a proprietary operating system, such as, for a preferred example, an operating system kernel. The apparatus also may include selected device handlers and system libraries, and have other device handlers that are disabled or removed. The present invention features a system handler application that may be part of the operating system. The system handler loads and executes gaming program objects that are part of the operating system and features nonvolatile storage that facilitates sharing of information between gaming program objects. The system handler of some embodiments further provides an API library of functions callable from the gaming program shared objects, and may in some embodiments facilitate the use of callback functions on change of data stored in nonvolatile storage. A nonvolatile record of the state of the computerized wagering gaming application is stored on the nonvolatile storage, providing protection against loss of the gaming state due to power loss. The system handler application in various embodiments includes a plurality of device handlers, providing an interface to selected hardware and the ability to monitor hardware-related events.","In the following detailed description of sample embodiments of the invention, reference is made to the accompanying drawings that form a part hereof, and in which is shown by way of illustration specific sample embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention, and it is to be understood that other embodiments may be utilized and that logical, mechanical, electrical, and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope of the invention is defined only by the appended claims. It is essential to an appreciation of the practice of the present invention that the jurisdictional approval requirements and the industry standards of the gaming industry be considered in determination of the skill and technical sophistication of the present technology and invention.","In this document, the term \u201csoftware component\u201d can refer to any software module or grouping of modules. Under this definition a protocol module could be considered to be a type of software component, as could a complete operating system, or even a piece of an operating system. For the purposes of this document, a \u201csoftware component\u201d will be considered to be the set of code that an individual operating system provider provides.","The Nevada Gaming Control Board defines a gaming-related software component and uses a simple test to determine if a software subsystem falls under the definition of a gaming device. A primary element of a \u201cGaming Device\u201d under NRS 463.0155 is a component that must be used remotely or directly in connection with a game (gaming application) and that affects the result of a wager by determining win or loss (based on a probability). Taking into account this definition, the Nevada Gaming Control Board uses a simple test: if an operating system or other software component can be shown to be usable in other fields or applications and the component is not involved in the calculation of wagering win or loss, then it is not a gaming-related piece of software. Those software components that relate to the presentation, decision-making and storage of win\/loss information are the ones that are of primary concern to the Commission.","Nevada gaming laws and regulations require that the \u201cManufacturer\u201d of a gaming device must be licensed. Manufacturer is defined in NRS 463.0172 as one who: \u201cmanufactures, assembles, programs or makes modifications to a gaming device or cashless wagering system . . . or who designs, controls the design or maintains a copyright over the design of a program which can't be reasonably demonstrated to have any use other than in a gaming device or cashless wagering system.\u201d","Therefore, where a gaming device contains software written by multiple vendors, an analysis must be made as to whether a gaming license is required by each vendor depending on whether the component provided by each vendor is gaming related. It may be that a vendor that supplies certain code may not have to be licensed in order for a licensed vendor to include that code on a gaming device. The complications arise when considering the different possibilities that can occur, as considered below.","The concept of trust or authenticity is the basis of all gaming regulations. To have a high degree of confidence in the fairness, integrity and security of a gaming device, it is necessary to be able to trust that the software components really do what they have been tested for and approved to do. There are different ways to establish such trust. Providing source code and other documentation of the software component is one such method. Other methods include public key infrastructure (PKI) to authenticate game code and data, requiring that the physical storage location for the code be on unwritable media, etc. In the case of PKI authentication, it is critical that the software component that provides the authentication service has the highest level of trust. If this is not true, then the purpose is entirely lost. For the purposes of this document, it will help with clarity to refer to the software component that provides authentication services as the operating system, or just OS. This is mainly for readability and understanding, but it is important that in systems that contain multiple software components, an OS\/application type-relationship between the components is just one configuration.","Most gaming jurisdictions require devices that contain code that is stored in writable media to have an approved method to verify the integrity of the code that is stored there. Using PKI signatures is a commonly used and accepted method for such authentication. This implies that one software component inherently has a higher trust level than the one being authenticated. In gaming jurisdictions, read-only storage on EPROM with available source code has the highest level of trust because the code can be easily verified by spot-checking devices in the field. The code that exists on the EPROM will in turn check the signatures for the code stored on the writable media. Assuming things check out, the device may now proceed with operation. U.S. Pat. Nos. 6,149,552; 6,106,396; 6,104,859; and 5,643,086 (The Alcorn Patents) describe various authentication techniques for use in gaming systems. Although authentication and\/or encryption systems are essential for commercial computer based gaming products, they need not be present on the system that is provided for access to the developer. The absence of the authentication system at this point in the development procedure may simplify communication and additionally speed up development. The authentication system and the encryption processes attendant thereto may be added into the commercial gaming apparatus without adversely affecting the ability of the developed gaming application or gaming rules chip to operate on the operating system.","The availability of source code mentioned above is extremely important when one considers this hierarchy of trust between software components that has to be strictly enforced in order to not compromise the integrity of the system. Only those software components that have the highest level of trust should be in a position to certify or authenticate other components. Those components that exist on writable media or do not have source code availability automatically have a lower level of trust. In the case of unlicensed vendors of operating systems with no source code available, for example, you have a situation where an untrusted, unproven software component provides authentication to a component on writable media, which is questionable at best. That provides a complication in the development of gaming application software and hardware to be used on a proprietary operating system, particularly on-line (over the internet) where identification of users may be problematic and control over secondary distribution or redistribution of the operating system and its source codes are problematic. Such uncontrolled distribution could compromise the ultimate security of the gaming apparatus in the casinos, and could lead to a refusal of gaming operators for the proprietary gaming operating system and for gaming applications provided on that operating system.","As indicated above, an API, or Application Programming Interface, is a set of methods used to interface from one communicator (e.g., a developer operating on its own computer and operating system) to a distal information component such as a software component (distal meaning over the internet, on-line, off a memory source such as compact disk, floppy disk, connected hard drive, or other information storage media with which the developer can communicate). These methods may be implemented using message passing, function calls using static or dynamic linking, or some other way. The important common function of every API is to isolate the data and low-level functions in one software component from being accessed except through the use of a common set of access methods.","The primary problem with having a number of software components existing on a single system has to do with defining the boundaries between the components. The only way the components can be separated into completely contained pieces is to define an API to which all the components conform. As long as this is the only way in which the pieces interact, the security of the distal information component is satisfactory.","One way of overcoming the delays and difficulties in introducing gaming applications to the industry is by practicing a method within the scope of the present invention. As a first step, a gaming operating system is provided that contains objects that can be used in gaming applications and gaming apparatus (whether video gaming or reel-type gaming apparatus). This gaming operating system would include functions in a secure computing system (e.g., computer, server, microprocessor, etc.) or memory system (floppy disk, compact disk, optical disk, hard drive, etc.), these functions being useful in gaming apparatus. The developer provides gaming application specific data (that is rules, directions, payout schedules, numbers of rounds, player activity requirements, and the like) to the Application Programming Interface, creates and ultimately compiles the information needed to direct the gaming operating system to execute the functions necessary to play the gaming application, and provide that compiled information to a gaming apparatus with the operating system in a commercial environment to practice the game.","The method comprises assisting in the development of a computer based wagering gaming application with at least the steps of:","providing a gaming operating system comprising a library of at least two software gaming callback functions and\/or primary gaming states;","providing an Application Programming Interface enabling communication from a distal intelligence source to the gaming operating system;","communicating with the Application Programming Interface to the functions and\/or primary gaming states in the library of the gaming operations;","providing gaming specific data relating to at least one specific gaming application; and","compiling a program specific to at least one gaming application that is compatible with the gaming operating system through the use of the gaming operating system API.","This method could have the compiled program specific to at least one gaming application provided on a storage device. Some gaming applications have multiple games, and\/or bonus rounds that can be included on the storage device. The method may be practiced either with or without security features enabled when communicating with the Application Programming Interface is performed. Security features can be added later when the commercial product is introduced or qualified by the regulatory commissions.","Another way of describing the method would be as assisting in the development of a computer based wagering gaming application comprising the steps of:","providing a gaming operating system comprising a library of at least two software gaming elements selected from the group consisting of a random number generator, a game initiation sequence, a value module (e.g., one or more modules providing controls relating to coin changing, coin recognition, currency recognition, credit recognition\/storage, ticket recognition\/printout, etc.), a bonus module (e.g., bonus, jackpot, additional play, alternative play), a video gaming module (e.g., including actual image files, image sequencing files, clip art files, video storage files [e.g., empty or partial files], color files, etc.), an audio gaming module (sound files, sound sequence files, sound files tied to video events, volume controls, etc.), a jackpot module, a graphics conversion tool, a debugging tool, a pay-out table module, a value-handling module, a power-loss back-up module, a gaming payout history module, a player history module, and a user interaction module (e.g., handle controls, button controls, touch-screen controls, joystick controls, etc.);","providing an Application Programming Interface enabling communication from a distal intelligence source to the gaming operating system;","communicating with the Application Programming Interface to functions and\/or primary gaming states in the library of the gaming operating system; and","compiling a program specific to at least one gaming application that is compatible with the gaming operating system.","The method may affect compiling of the program including writing a program that comprises gaming application specific commands that communicate with the gaming operating system. The method may be practiced in conjunction with a user manual with directions on accessing files in the library and is used by using specific commands in the user manual to access specific files or functions in the operating system through the Application Programming Interface.","For those software components which use PKI (public key infrastructure) for authentication of other components in the system, it is desirable to create a new pair of public\/private keys for each software release. There are several reasons for this:\n\n","In the software development process, small inconsistencies and incompatibilities will creep into an API as new features are added and changes are made to the internal workings of a software component. This is true especially in an embedded environment where it is not cost effective or space effective to have multiple sections of redundant code. One way to ensure that the devices in the field are using compatible software components is to somehow prevent incompatible versions from co-existing. Revving the public\/private key pairs with each release of a trusted software component is one such method.","One significant delay in the introduction of gaming applications to the market has involved the complexity and length of regulatory approval. For example, consider a circumstance where there are hundreds of games deployed with a certain OS. Each of these games runs on a certain version of the software (most likely the latest version) but not necessarily so. When a new version of that OS is released, gaming regulations require that approval is obtained for all possible game configurations which exist in the field. This means that if every version of OS uses the same keys, it would be necessary to test and submit for approval every old game that existed in the field with old versions, because there would be no mechanism preventing someone from using an old version with new game code.","With a different key pair for every OS version, only new games would ever have to be submitted for approval, since the old games would automatically not work with the new keys and consequently, the new operating system.","If someone wanted to discover a private key and did not have a mathematical way of doing so (for the encryption technique described above, there are no such known methods) they would try to discover the key by guessing. This may be hard to do with a key length of 512 bits, but someone with a lot of computer power might eventually be able to guess the correct key. By using very long keys, this approach has been made as impractical as possible. For this reason, the more impractical it is to guess keys the better, as far as security of keys is concerned. Therefore, if new keys are generated every time a version of software is released, it will be that much more impractical for someone to try to guess the keys. This makes the overall system more secure.","One of the most important aspects to consider with the PKI method of using signatures for the verification of gaming chips is that regulatory agencies base their approval on the confidence that exists in maintaining the secrecy of the private key. Since anyone who might want to cheat the gaming application must modify the game code, if they do not know the private key, they will be unable to generate signatures for the gaming application to work. If a private key is lost, the integrity of every machine in the field which uses that public\/private key set is compromised. The only way to correct this compromise in security is to generate a new public\/private key pair and upgrade every machine with the new public key. If the same set of keys has been used for every software release, this means the manufacturer must generate a new public\/private key pair and upgrade every version of OS in the field. With a different public\/private key set for each OS version, only a subset of machines in the field will have to be upgraded if a key is compromised, which translates to less cost and less disruption to the casino's business.","Another important issue to consider is the fact that some manufacturers may use the same software component in several different jurisdictions. It is desirable to ensure that a gaming application written for one jurisdiction will not operate in a machine in a different jurisdiction. Also, vendors that are licensed in one jurisdiction should not have the keys to produce gaming applications for another jurisdiction. It will be desirable, therefore, to have different sets of keys for different gaming jurisdictions as well as for each software release.","When software components that exist on a system are the property of different vendors, complications arise in the case where one piece is found to have a serious security hole or other bug that causes the regulatory agency to have to disapprove the software. When any software component on a gaming device is disapproved, the gaming device as a whole will be disapproved. There are several issues with this set of circumstances, including at least liability, procedures and unlicensed vendor complications.","The timing of re-submission versus deadlines to remove the disapproved software from the field causes a potential liability issue when a bug fix cannot be found quickly enough. There should most likely be procedures that vendors should follow for tracking software installation and revisions in the field. Without such procedures, it would be impossible to do a coordinated software upgrade if the need arises.","If more than one software component interacts with a third component through the same API, there can be side effects known as couplings. For example, if a software function enables or disables a software feature, then an outside module could call the function to turn the feature on and a second module may then turn the feature off. Unless the two modules are communicating with each other, there will be problems with the two modules existing on the same system.","In systems where there is an OS\/application relationship between software components, there can be a time coupling between all API calls, especially if there is an ability to preemptively multitask the application processes in the system. Because the multitasking can happen at any time, the order in which API calls can happen may change from run to run. This means that the application code needs a layer of error checking to prevent race condition bugs that would otherwise be unnecessary. For this reason, having a single thread of execution for which the order that API calls are made is always the same will automatically have a greater level of trust than will a multitasking QS. This is not to say that a multitasking OS cannot overcome this deficiency by correctly using mutexes, but this obviously is more complicated to test and therefore is harder to trust and obtain approval.","There can also exist couplings between API calls. These couplings are different from the interaction couplings pointed out earlier. These couplings are inherent in the way the API operates. The classic example of this type of coupling is the following API for a voltmeter:\n\n","One method of verifying software components is to define a series of regression tests and expected test results for the individual pieces. This method is useful for identifying programming errors and bounds checking problems with the API implementation, but is less useful in identifying system-level weaknesses which my be inherent in the design.","A front-end code verifier or pre-parser may be written that allows developer code to be scanned before compiling to identify errors in the code as it relates to the gaming operating system API. This type of scanner can be used to find couplings and other errors that a regression tester may not find.","In the past, vendor collaboration by defining a standard API specification in the gaming industry has been difficult and unsuccessful. A good example of this is the various protocol implementations that exist which are not always 100% compatible. With software components co-existing on the same machine, there can be no way around the fact that if something is not 100% compatible with the API specifications, there could easily be bugs introduced which would compromise the integrity of the device, which is clearly unacceptable in any jurisdiction.","For purposes of this disclosure, the following terms have specialized meaning, and are defined below:","\u201cMemory\u201d for purposes of this disclosure is defined as any type of media capable of read\/write capability. Examples of memory are RAM, tape, flash memory, disc on chips and floppy disc.","\u201cShared or Game Program Objects\u201d for purposes of this disclosure are defined as self-contained, functional units of game code that define a particular feature set or sequence of operation for a game. The personality and behavior of a gaming machine of the present invention are defined by the particular set of shared objects called and executed by the operating system. Within a single game, numerous game objects may be dynamically loaded and\/or executed.","\u201cArchitecture\u201d for purposes of this disclosure is defined as software, hardware or both.","\u201cDynamic Linking\u201d for purposes of this disclosure is defined as linking at run time.","\u201cAPI\u201d for purposes of this disclosure is an Application Programming Interface. The API includes a library of functions.","\u201cSystem Handler\u201d for purposes of this disclosure is defined as a collection of code written to control non-gaming specific device handlers. Examples of device handlers include I\/O, sound, video, touch screen, nonvolatile RAM and network devices.","\u201cGaming Data Variables\u201d for purposes of this disclosure includes at a minimum any or all data needed to reconstruct the gaming state in the event of a power loss.","The present invention comprises various elements to enable the use and installation of a novel gaming operating system that in turn enables more rapid development and deployment of novel gaming games. One element of the invention is a computerized wagering game apparatus comprising:\n\n","load a gaming program and execute the new gaming program; c) an API with functions callable from the game program; d) an event queue; e) a game personality described in a selected mode; and f) a combination of an event queue that determines the order of execution of each specified device handler; an API having a library of functions; an event queue capable of queuing on a first come, first serve basis; and an event queue capable of queuing using more than one criteria. The computerized wagering game apparatus may have game data modified by gaming program objects that are stored in nonvolatile storage or wherein the system handler and kernel work in communication to hash system handler code and operating system kernel code. By way of non-limiting examples, the game data modified by gaming program objects may be stored in nonvolatile storage and changing game data in nonvolatile storage causes execution of a corresponding callback function in the system handler application. The computerized wagering game apparatus may have the operating system kernel as a Linux operating system kernel having customized proprietary modules and the kernel has at least one modification wherein each modification is selected from the group consisting of: 1) accessing user level code from ROM, 2) executing from ROM, 3) zeroing out unused RAM, 4) testing and\/or hashing the kernel, and 5) disabling selected device handlers. The computerized wagering game apparatus may have the apparatus contain a machine-readable element with machine-readable instructions thereon, the instructions when executed operable to cause the processor to manage at least one gaming program object via a system handler application and to execute a single gaming program object at any one time, wherein gaming program objects are operable to share game data in nonvolatile storage within the processor in the computerized wagering game system.","The computerized wagering game apparatus may have programming direct the gaming apparatus to effect a procedure selected from the group consisting of a) only one gaming program object executes at any one time, b) there are instructions operable when executed to cause a computer to provide functions through an API that comprises a part of the system handler application, and c) when instructions are executed, the instructions are operable to store game data in nonvolatile storage, such that the state of the computerized wagering game system is maintained when the machine loses power.","A method of assisting in the development of a computer based wagering gaming application can utilize any of the apparatus described herein by the steps of:","providing a gaming operating system comprising a library of at least two software gaming callback functions and\/or primary gaming states;","providing an Application Programming Interface enabling communication from a distal intelligence source to the gaming operating system;","communicating with the Application Programming Interface to the functions and\/or primary gaming states in the library of the gaming operating system by providing a Makefile or other procedure for building a gaming application, and a configuration file for running the gaming operation system on a proximal computing system;","providing gaming specific data relating to at least one specific gaming application; and","compiling a program specific to at least one gaming application that is compatible with the gaming operating system.","This method of assisting in the development of a computer based wagering gaming application may also comprise using a library of at least two software gaming elements comprising gaming elements selected from the group consisting of random number generator, game initiation sequence, bonus module, video gaming module, audio gaming module, jackpot module, graphics conversion tool, debugging tool, pay-out table module, value-handling module, power-loss recovery module, gaming payout history module, player history module, and user interaction module. Also, the process may have public and\/or private authentication keys revved and different public and\/or private authentication keys are provided to each of at least two different legal jurisdictions.","A method of managing data in a computerized wagering game apparatus as described herein can be practiced via a system handler application in a method of loading a shared object, executing the shared object, and accessing and storing game data in nonvolatile storage. This method may have further steps of a) unloading the first program object, and loading a second program object or b) executing a corresponding callback function upon alteration of game data in nonvolatile storage.","The present invention also includes a machine-readable memory storage element with instructions thereon, the instructions when executed operable to cause a computer to: load a first program shared object, execute a first program shared object, store gaming data in nonvolatile storage, such that a second program object later loaded can access gaming data variables in nonvolatile storage, unload the first program shared object from system memory, and load the second program shared object to system memory so that the second program shared object is accessible to the computer as instructions. This machine-readable memory storage element may have additional instructions operable when executed to cause a computer to perform a task selected from the group consisting of a) executing a corresponding callback function upon alteration of game data in the nonvolatile storage; and b) managing events via the system handler application.","Another aspect of the present invention includes a universal operating system stored in a memory storage component that may be operatively inserted along with game identity data into an electronic or electromechanical gaming device having ancillary functions so that the gaming device can effect play of the game provided in the game identity data. The operating system will control at least one ancillary function selected from the group consisting of coin acceptance, credit acceptance, currency acceptance and boot up, the gaming device having at least one system handler application, and the operating system comprising a system handler and an operating system kernel. This operating system may also have at least one of a plurality of APIs, an operating system kernel customized for gaming purposes, and an event queue, or a system handler having a plurality of device handlers or the operating system controls a networked on-line system or control a progressive meter. The operating system may also have a kernel customized for gaming purposes utilizing a method of operation selected from the group consisting of: 1) accessing user level code from ROM, 2) executing from ROM, 3) zero out unused RAM, 4) test and\/or hash the kernel, and 5) disabling selected device handlers.","Another method within the scope of the invention can be generally described as a) customizing an operating system kernel and b) providing the customized kernel of the operating system into a gaming apparatus, at least one customization being effected to obtain functionality of the gaming apparatus, the customization being a kernel modification for a process selected from the group consisting of:","1) accessing user level code from ROM;","2) executing user level code from ROM;","3) zeroing out unused RAM;","4) testing and\/or hashing the kernel; and","5) disabling selected device handlers.","Another method within the scope of the invention can be generally described as converting a first game that operates on a first gaming system so that the game operates on a universal gaming system, the method comprising: removing a first game operating system from the gaming system, the first game operating system including hardware and software; installing the universal gaming system in place of the game operating system, the universal gaming system including a game program layer, an open operating system, and a game controller for running the game program layer on the open operating system; providing functional interfaces between the universal gaming system and game devices; and installing a second game specific program in the game program layer configured to operate with the open operating system. This method may have at least one step selected from the group consisting of:\n\n","Another aspect of the method of the present invention is a method of configuring a game program layer for a universal gaming system that is configured for a game program layer and an open operating system, the method comprising: configuring the game program layer on a computer remote from a first non-universal gaming system; and downloading the game program layer into the universal gaming system and performing at least one sequence comprising:\n\n","The present invention may also comprise a gaming system suitable for use in a casino comprising: a game controller configured to operate the gaming system; and a first nonvolatile memory and a second nonvolatile memory for storing critical gaming information, wherein the first nonvolatile memory and the second nonvolatile memory are configured to communicate with the game controller as a gaming RAID system for redundant storage of critical gaming information. RAID not defined in text, the gaming system enabling redundant NVRAM storage to be replaceable while operating power for the system is on.","The present invention includes a method of accessing a computerized gaming operating system by a method and apparatus. The operating system has novel gaming-specific features that improve security, make development of game code more efficient, and do so using an apparatus and software methods that are cost-effective and efficient. The present invention also reduces the amount of effort required to evaluate and review new game designs by gaming regulators, because the amount of code to be reviewed for each game is reduced by at least as much as 40%, preferably at least 50%, more preferably at least 60% or even at least 10%, and as much as 80% or more over known, machine-specific architecture that one skilled in the art might wish to insert into gaming systems. That is, in the practice of the present invention, rather than having every line of code or software screened, certain software is essentially \u2018pre-approved\u2019 by previous inspection and only game code additions (and the like) need to be reviewed for approval. The invention provides, in various embodiments, features such as a nonvolatile memory for storing gaming application variables and game state information, provides a shared object architecture that allows individual game objects to be loaded and to call common functions provided by a system handler application, and in one embodiment provides a custom operating system kernel that has selected device handlers disabled.","Incorporated by reference in this description is the Shuffle Master Gaming, Game Operating System \u201cSGOS\u201d Developer's Manual, revised May 2001 comprising 175 pages that are attached hereto and incorporated herein as part of this specification. This Developer's Manual has not been published, but has been provided under limited access under confidentiality agreements with potential developers, and does not constitute prior art. No commercial products have been introduced using this manual or the development procedures and systems of the present invention as of 10 Sep. 2001.",{"@attributes":{"id":"p-0110","num":"0130"},"figref":"FIG. 1","b":["100","101","102","103","104","105","105","106","107","101","108"]},"The gaming system  further comprises a computerized game controller  and I\/O interface , connected via a wiring harness . The universal game controller  need not have its software or hardware designed to conform to the interface requirements of various gaming system user interface assemblies, but can be designed once and can control various gaming systems via the use of machine-specific I\/O interfaces  designed to properly interface an input and\/or output of the universal computerized game controller to the harness assemblies found within the various gaming systems.","In some embodiments, the universal game controller  is a standard IBM Personal Computer-compatible (PC compatible) computer. Still other embodiments of a universal game controller comprise general purpose computer systems such as embedded controller boards or modular computer systems. Examples of such embodiments include a PC compatible computer with a PC\/104 bus that is an example of a modular computer system that features a compact size and low power consumption while retaining PC software and hardware compatibility. The universal game controller  provides all functions necessary to implement a wide variety of games by loading various program code on the universal controller, thereby providing a common platform for game development and delivery to customers for use in a variety of gaming systems. Other universal computerized game controllers consistent with the present invention may include any general-purpose computers that are capable of supporting a variety of gaming system software, such as universal controllers optimized for cost effectiveness in gaming applications or that contain other special-purpose elements yet retain the ability to load and execute a variety of gaming software. Examples of special purpose elements include elements that are heat resistant and are designed to operate under less than optimal environments that might contain substances such as dust, smoke, heat and moisture. Special purpose elements are also more reliable when used 24 hours per day, as is the case with most gaming applications.","The computerized game controller of some embodiments of the present invention is a computer running an operating system with a gaming application-specific kernel. In alternative or further embodiments, a game engine layer of code executes within a non-application specific kernel, providing common game functionality. The gaming program shared object in such embodiments is therefore only a fraction of the total code, and relies on the game engine layer and operating system kernel to provide a library of gaming functions. A preferred operating system kernel is the public domain Linux 2.2 kernel available on the Internet. Still other embodiments will have various levels of application code, ranging from embodiments containing several layers of game-specific code to a single-layer of game software running without an operating system or kernel but providing its own computer system management capability.",{"@attributes":{"id":"p-0114","num":"0134"},"figref":["FIG. 2","FIG. 1"],"b":["300","201","202","201","202","203","204","205","204","206"]},"The OS kernel  in some embodiments may be a Linux kernel, but in alternate embodiments may be any other operating system providing a similar function. The Linux 2.2 operating system kernel in some further embodiments may be modified for adaptation to gaming architecture. Modifications may comprise erasing or removing selected code from the kernel, modifying code within the kernel, adding code to the kernel or performing any other action that renders certain device handler code inoperable in normal kernel operation. By modifying the kernel in some embodiments of the invention, the function of the computerized gaming apparatus can be enhanced by incorporating security features, for example. In one embodiment, all modifications to the kernel are of the form of proprietary kernel modules loadable at run-time.","In one embodiment, the system is used to execute user level code out of ROM. The use of the Linux operating system lends itself to this application because the source code is readily available. Other operating systems such as Windows and DOS are other suitable operating systems.","Embodiments of the invention include hard real time code  beneath the kernel providing real time response such as fast response time to interrupts. The hard real time code  is part of the operating system in one embodiment.","In one embodiment of the invention, all user interface peripherals such as keyboards, joysticks and the like are not connected to the architecture so that the operating system and shared objects retain exclusive control over the gaming machine. In another embodiment, selected device handlers are disabled so that the use of a keyboard, for example, is not possible. It is more desirable to retain this functionality so that user peripherals can be attached to service the machine. It might also be desirable to attach additional user peripherals such as tracking balls, light guns, light pens and the like.","In another embodiment, the kernel is further modified to zero out all unused RAM. This function eliminates code that has been inserted unintentionally, such as through a Trojan horse, for example.","In one embodiment, the kernel and operating system are modified to hash the system handler and shared object or gaming program object code or both, and to hash the kernel code itself. These functions in different embodiments are performed continuously, or at a predetermined frequency.","The system handler application is loaded and executed after loading the operating system, and manages the various gaming program shared objects. In further embodiments, the system handler application provides a user Application Program Interface (API)  that includes a library of gaming functions used by one or more of the shared objects . For example, the API in one embodiment includes functions that control graphics, such as color, screen commands, font settings, character strings, 3-D effects, etc. The device handler callbacks  are preferably handled by an event queue . The event queue schedules the event handlers in sequence. The shared object  calls the APIs  in one embodiment. The system handler application  in various embodiments also manages writing of data variables in the \u201cgame.state\u201d file  into the nonvolatile storage , and further manages calling any callback functions associated with each data variable changed.","The system handler  application of some embodiments may manage the gaming program shared objects by loading a single object at a time and executing the object. When another object needs to be loaded and executed, the current object may remain loaded or can be unloaded and the new object loaded in its place before the new object is executed. The various shared objects can pass data between objects by storing the data in nonvolatile storage . For example, a \u201cgame.so\u201d file may be a gaming program object file that is loaded and executed to provide operation of a feature set of a computerized wagering game, while a \u201cbonus.so\u201d gaming program object file is loaded and executed to provide a feature set of the bonus segment of play. Upon changing from normal game operation to bonus, the bonus.so is loaded and executed upon loading. Because the relevant data used by each gaming program object file in this example is stored in nonvolatile storage , the data may be accessed as needed by whatever gaming program object is currently loaded and executing.","The system handler application in some embodiments provides an API that comprises a library of gaming functions, enabling both easy and controlled access to various commonly used functions of the gaming system. Providing a payout in the event of a winning round of game play, for example, may be accomplished via a payout function that provides the application designer's only access to the hardware that pays out credit or money. Restrictions on the payout function, such as automatically reducing credits stored in nonvolatile storage each time a payout is made, may be employed in some embodiments of the invention to ensure proper and secure management of credits by the computerized gaming system. The functions of the API may be provided by the developer as part of the system handler application, and may be a part of the software provided in the system handler application package. The API functions may be updated as needed by the provider of the system handler application to provide new gaming functions as desired. In some embodiments, the API may simply provide functions that are commonly needed in gaming, such as computation of odds or random numbers, an interface to peripheral devices, or management of cards, reels, video output or other similar functions.","The system handler application  in various embodiments also comprises a plurality of device handlers  that monitor for various events and provide a software interface to various hardware devices. For example, some embodiments of the invention have handlers for nonvolatile memory , one or more I\/O devices , a graphics engine , a sound device , or a touch screen . Also, gaming-specific devices such as a pull arm, credit receiving device or credit payout device may be handled via a device handler . Other peripheral devices may be handled with similar device handlers, and are to be considered within the scope of the invention. In one embodiment, the device handlers are separated into two types. The two types are: soft real time A and regular device handlers B. The two types of device handlers operate differently. The soft real time handler A constantly runs and the other handler B runs in response to the occurrence of events.","The nonvolatile storage  used to store data variables may be a file on a hard disc, may be nonvolatile memory, or may be any other storage device that does not lose the data stored thereon upon loss of power. In one embodiment the nonvolatile storage is battery-backed RAM. In another embodiment, the non-volatile storage is flash memory. The nonvolatile storage in some embodiments may be encrypted to ensure that the data variables stored therein cannot be corrupted. Some embodiments may further include a game.state file , which provides a look-up table for the game data stored in nonvolatile storage . The game.state file is typically parsed prior to execution of the shared object file. The operating system creates a map of NVRAM by parsing the game.state file. The look-up table is stored in RAM. This look-up table is used to access and modify game data that resides in NVRAM . This game data can also be stored on other types of memory.","In some embodiments, a duplicate copy of the game data stored in NVRAM  resides at another location in the NVRAM memory. In another embodiment, a duplicate copy of the game data is copied to another storage device. In yet another embodiment, two copies of the game data reside on the NVRAM and a third copy resides on a separate storage device. In yet another embodiment, three copies of the game data reside in memory. Extra copies of the game data are required by gaming regulations in some jurisdictions.","Data written to the game state device must also be written to the nonvolatile storage device, unless the game state data device is also nonvolatile, to ensure that the data stored is not lost in the event of a power loss. For example, a hard disc in one embodiment stores a file that contains an unencrypted and nonvolatile record of the encrypted data variables in nonvolatile storage flash programmable memory (not shown). Data variables written in the course of game operation may be encrypted and stored in the nonvolatile storage , upon normal shutdown. Loss of power leaves a valid copy of the most recent data variables in the non-volatile storage.","In an alternate embodiment, a game state device  such as a game.state file stored on a hard disc drive provides variable names or tags and corresponding locations or order in nonvolatile storage , in effect, providing a variable map of the nonvolatile storage. In one such embodiment, the nonvolatile storage may then be accessed using the data in the game state file , which permits access to the variable name associated with a particular nonvolatile storage location. Such a method permits access to and handling of data stored in nonvolatile storage using variable names stored in the game state file , allowing use of a generic nonvolatile storage driver where the contents of the nonvolatile storage are game-specific. Other configurations of nonvolatile storage such as a single nonvolatile storage are also contemplated, and are to be considered within the scope of the invention.","Callback functions that are managed in some embodiments by the system handler application  may be triggered by changing variables stored in NVRAM . For each variable, a corresponding function may be called that performs an action in response to the changed variable. For example, every change to a \u201ccredits\u201d variable in some embodiments calls a \u201cdisplay_credits\u201d function that updates the credits as displayed to the user on a video screen. The callback function may be a function provided by the current gaming program shared object or can be called by a different gaming program object.","The gaming program's shared objects in some embodiments of the invention define the personality and function of the game. Program objects provide different game functions, such as bookkeeping, game operation, game setup and configuration functions, bonus displays and other functions as necessary. The gaming program objects in some embodiments of the invention are loaded and executed one at a time, and share data only through NVRAM  or another game data storage device. The previous example of unloading a game.so gaming program object and replacing it with a bonus.so file to perform bonus functions is an example of such use of multiple gaming program shared objects.","Each gaming program object may require certain game data to be present in NVRAM , and to be usable from within the executing gaming program shared object . The game data may include meter information for bookkeeping, data to recreate game on power loss, game history, currency history, credit information, and ticket printing history, for example.","The operating system of the present application is not limited to use in gaming machines. It is the shared object library rather than the operating system itself that defines the personality and character of the game. The operating system of the present invention can be used with other types of shared object libraries for other purposes.","For example, the operating system of the present invention can be used to control networked on-line systems such as progressive controllers and player tracking systems. The operating system could also be used for kiosk displays or for creating \u201cpicture in picture\u201d features in gaming machines. A gaming machine could be configured so that a video slot player could place a bet in the sports book, then watch the sporting event in the \u201cpicture in picture\u201d feature while playing his favorite slot game.","The present invention provides a computerized gaming apparatus and method that provides a gaming-specific platform that features reduced game development time and efficient game operation via the use of a system handler application that can manage independent gaming program objects and gaming-specific API, provides game functionality to the operating system kernel, provides security for the electronic gaming system via the nonvolatile storage and other security features of the system, and does so in an efficient manner that makes development of new software games relatively easy. Production and management of a gaming apparatus is also simplified, due to the system handler application API library of gaming functions and common development platform provided by the invention.",{"@attributes":{"id":"p-0135","num":"0155"},"figref":"FIG. 3","b":["400","300","402","203","400","406","408","410","402","412","404","402","300","404","404","300","404","203","406","408","410","206"]},"As previously described herein universal operating system  is an open operating system which allows for conversion of the gaming system  into different types of games, and also allows for future expandability and upgrading of associated hardware in the gaming system  due to its open architecture operating system.","In operating system , device handlers  provide the interface between the operating system  and external gaming system input and output devices, such as a button panel, bill acceptor, coin acceptor, mechanical arm, reels, speaker, tower lights, etc. Each device handler  is autonomous to the other. The device handlers or drivers  operate as protocol managers, which receive information from a gaming system device (typically in the gaming system device protocol) and convert the information to a common open operating system protocol usable by operating system . Similarly, the device drivers or handlers  receive information from the open operating system and convert the information to a gaming device specific protocol. The specific device handlers or drivers used are dependent upon what game you are using, and may be loadable or unloadable as independent, separate objects or modules. The exemplary embodiment shown includes total I\/O device handler , sound device handler , serial device handler , graphics device handler , memory manager device handler , NVRAM device handler , protocols device handler , resource manager device handler  and network device handler . Other suitable device handlers for adapting the operating system  to other gaming systems will become apparent to one skilled in the art after reading the present application.",{"@attributes":{"id":"p-0138","num":"0158"},"figref":"FIG. 4","b":["400","300","400","400","300","402"]},"At , the existing game operating system is removed from the game. The existing game operating system is typically a proprietary operating platform consisting of computer hardware and software which is specific to the game being changed out. At , a universal gaming system  including an open operating system  is installed in the game. At , functional interfaces are provided between the open operating system and the existing gaming system devices. At , a game specific program (i.e., game layer ) is installed in the universal gaming system. The game specific program is configured to communicate with the open operating system .","In one exemplary embodiment, the gaming system according to the present invention is used in a mechanical reel-based slot machine, either in a new slot machine or in converting an existing slot machine to an open operating system according to the present invention. Exemplary conventional reel-based slot machines include an IGT S-plus slot machine or a Bally\u2122 slot machine.",{"@attributes":{"id":"p-0141","num":"0161"},"figref":"FIG. 5","b":["402","462","466","468","470","472","462","400"]},"Output devices  receive information from operating system  which provides an output via the I\/O device driver to gaming devices . In the example shown, output devices  include reels device  which receives an output to the stepper motors controlling the reels. Credit displays device  which receives an output to the LED driven credit displays. Speaker device  which receives a sound output to the game speakers. On-line system protocol devices  are communication interfaces between the open operating system  and the game on-line system. Tower light devices  receive an interface between the open operating system  and the game tower lights.",{"@attributes":{"id":"p-0143","num":"0163"},"figref":"FIG. 6","b":["500","502","504","504"]},"In one embodiment, the resource manager  stores the file  in the form of a lookup table. In one preferred embodiment, the resource manager reads the configuration files at startup, parses the configuration files and stores them in memory . The resource manager file  may then be accessed by the rest of the operating system  software applications. The resource manager operates to map digital I\/O lines, corn ports, game specific resources, kernel modules to load, etc.",{"@attributes":{"id":"p-0145","num":"0165"},"figref":"FIG. 7","b":["506","500","1","510","20","512","2","514","3","516","3","518","38","520","4","522","10","524","5","526","11","528","6","530","12","532","7","534","13","536","538","51","540"]},"The gaming system  according to the present invention is adaptable for use as a cashless gaming system. As such, it is useable for converting existing coin-based or token-based gaming systems into a cashless gaming system.",{"@attributes":{"id":"p-0147","num":"0167"},"figref":["FIG. 8","FIGS. 1-7"],"b":["400","550","552","550","552","400","554","300","550","556","300","552","550","400","556","560"]},{"@attributes":{"id":"p-0148","num":"0168"},"figref":"FIG. 9","b":["400","300","402","400","580","402","302","580","580","582","582","400","402","580","582"]},{"@attributes":{"id":"p-0149","num":"0169"},"figref":"FIG. 10","b":["400","402","580","402","402","580","584","580"]},"The removable media  is removed from remote computer  and inserted in gaming system . In one aspect, removable media  can be \u201chot-inserted\u201d directly into the controller board of gaming system . The removable media  contains game layer  including the game specific code and program files. As such, removable media  remains inserted into gaming system  during operation of the gaming system. In an alternative embodiment, the game layer  can be transferred (e.g., via a memory download) from removable media  to memory inside of gaming system .","In one embodiment, the removable media  is maintained in gaming system  during operation of the gaming system. As such, the gaming system program files may be verified for authenticity by gaming officials by simply removing the removable media  and inserting it in a computer or controller used for verifying\/authenticating game code, indicated at .",{"@attributes":{"id":"p-0152","num":"0172"},"figref":"FIG. 11","b":["400","402","600","602","604","606","606","610","604","606","612","610","612","602","608","608","606","604","606","608","402","402","400","400","610"]},"The system  also allows other user interfaces  for configuring games which may be assembled by controller  for use in other gaming systems. Alternatively, other user interface  may be representative of a gaming official checking the game  and authorizing use of the game  and gaming system . As such, the game layer  may be transferred to the gaming system  via controller , or via a communication link with user interface , which may be a direct connection or may be a network. Alternatively, game layer  may be transferred from controller  or user interface  by putting it on a flash memory device (e.g., Disk on a Chip or CompactFlash card) and physically inserted into gaming system .","Network , as used herein, is designed to include an internet network (e.g., the Internet), intranet network, or other high-speed communication system. In one preferred embodiment, network  is the Internet. While the exemplary embodiment and this detailed description refers to the use of web pages on the Internet network, it is understood that the use of other communication networks or next generation communication networks or a combination of communication networks (e.g., and intranet and the Internet) are within the scope of the present invention. The configuration information received from user interface  can be assembled into game layer  using hardware via a microprocessor, programmable logic, or state machine, in firmware, and in software within a given device. In one aspect, at least a portion of the software programming is web-based and written in HTML and\/or JAVA programming languages, including links to the web pages for data collection, and each of the main components communicate via network  using a communication bus protocol. For example, the present invention may or may not use a TC\/IP protocol suite for data transport. Other programming languages and communication bus protocols suitable for use with the system  according to the present invention will become apparent to those skilled in the art after reading the present application.",{"@attributes":{"id":"p-0155","num":"0175"},"figref":["FIG. 12","FIG. 11"],"b":["1","622","2","624","606","602","610","610","626","602","628","402"]},{"@attributes":{"id":"p-0156","num":"0176"},"figref":"FIG. 13","b":"400"},"A RAID system configuration as defined by different RAID levels. The different RAID levels range from LEVEL 0 which provides data striping (spreading out of data blocks of each file across multiple hard disks) resulting in improved disk drive speed and performance but no redundancy. RAID LEVEL 1 provides disk mirroring, resulting in 100 percent redundancy of data through mirrored pairs of hard disks (i.e., identical blocks of data written to two hard disks). Other drive RAID levels provide variations of data striping and disk mirroring, and also provide improved error correction for increased performance and fault tolerance.","In , one exemplary embodiment of RAID data storage system used in a gaming system  according to the present invention is generally shown at . The RAID storage system  includes a controller or control system  and multiple nonvolatile RAM data storage units, indicated as RAMA  and RAMB . In one aspect, RAMA  and RAMB  each include a backup power system PWR  and PWR . In one aspect, backup power systems PWR  and PWR  are battery backup systems. RAMA  and RAMB  are configured to communicate with control system  as a redundant array of storage devices. Preferably, nonvolatile memory RAMA  and nonvolatile memory RAMB  are configured similar to a RAID level configuration used in the disk drive industry (i.e., as a \u201cmirrored pair\u201d). Nonvolatile memory RAMA  and nonvolatile memory RAMB  communicate with control system  via communication bus , using a communication bus protocol. One exemplary embodiment of a communication bus suitable for use as communication bus  is an industry standard ATA or uniform serial bus (USB) communication bus. Control system  includes a microprocessor based data processing system or other system capable of performing a sequence of logical operations. In one aspect, control system  is configured to operate the RAID system  nonvolatile memories RAMA  and RAMB  as a mirrored pair. As such, read\/write to nonvolatile memory RAMA  are mirrored to nonvolatile RAMB , providing redundancy of crucial gaming specific data stored in nonvolatile memory RAMA  and RAMB . Alternatively, the nonvolatile memory RAMA  and nonvolatile memory RAMB  may be configured to communicate with control system  similar to other RAID storage system levels, such as RAID LEVEL 0, RAID LEVEL 2, RAID LEVEL 3, RAID LEVEL 4, RAID LEVEL 5, RAID LEVEL 6, etc. Further, the RAID system  may include more than the two nonvolatile memories RAMA  and RAMB  shown.","Although specific embodiments have been illustrated and described herein, it will be appreciated by those of ordinary skill in the art that any arrangement which is calculated to achieve the same purpose may be substituted for the specific embodiments shown. This application is intended to cover any adaptations or variations of the invention. It is intended that this invention be limited only by the claims, and the full scope of equivalents thereof."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
