---
title: Methods and apparatus for processing markup language messages in a network
abstract: A markup language processing device processes markup language messages by receiving a message containing portions of tagged data formatted in a markup language and applying a transform selection rule set to at least one tagged rule selection data portion in the message to select at least one markup language transformation to apply to the tagged pre-transform data portion within the message. The markup language processing device applies the selected markup language transformation to transform the tagged pre-transform data portion to a tagged post-transform data portion according to a transformation function and then conditionally forwards the message. The markup language processing device operates on behalf of a computerized device that is not required to process the message due to operation of the at least one markup language transformation within the markup language processing device. The markup language processing device can process XML message for security and other purposes thus offloading such processing requirement from server computer systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07774831&OS=07774831&RS=07774831
owner: International Business Machines Corporation
number: 07774831
owner_city: Armonk
owner_country: US
publication_date: 20031222
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM TO BENEFIT OF EARLIER FILED PROVISIONAL APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Example Simplified Rule Set Structure","Appendix A: Example Simplified Rule Set ","End of Appendix A: Example Simplified Rule Set ","Beginning of Appendix B: Example Transform Primitive Code ","End of Appendix B: Example Transform Primitive Code ","Beginning of Appendix C: Example XSLT Defining Example Security Transformations ","End of Appendix C: Example XSLT Defining Example Security Transformations "],"p":["This Utility patent application claims the benefit of the filing date of the following seven (7) earlier filed and co-pending U.S. Provisional Patent Applications:","1: \u201cNETWORK SYSTEM APPARATUS FOR FLEXIBLE HIGH-PERFORMANCE XML\/WEB-SERVICES SECURITY\u201d filed Dec. 24, 2002 having U.S. Ser. No. 60\/436,619;","2: \u201cSYSTEM FOR DYNAMIC XML\/SOAP PARSING AND SCHEMA VALIDATION OR OTHER PROCESSING\u201d filed Dec. 24, 2002 having U.S. Ser. No. 60\/436,614;","3: \u201cSYSTEM FOR IMPROVING THE PERFORMANCE AND\/OR SECURITY OF XML CRYPTOGRAPHIC OPERATIONS UTILIZING CRYPTOGRAPHIC PROCESSOR AND\/OR NEW XML ACCELERATION TECHNOLOGY\u201d filed Dec. 24, 2002 having U.S. Ser. No. 60\/436,618;","4: \u201cXML CRYPTOGRAPHY TOOLKIT SYSTEM\u201d filed Dec. 24, 2002 having U.S. Ser. No. 60\/436,617;","5: \u201cFLEXIBLE SYSTEM FOR ASSOCIATING A DATA STREAM WITH ONE OR MORE SECURE CONFIGURATION FILES BASED ON MAPPING SELF-DECLARED IDENTIFIER TO TRUSTED IDENTIFIER\/LOCATOR\u201d filed Dec. 24, 2002 having U.S. Ser. No. 60\/436,620;","6: \u201cSYSTEM FOR UNIFIED (NETWORK LAYER TO APPLICATION LAYER) XML\/SOAP FILTERING AND ROUTING\u201d filed Dec. 24, 2002 having U.S. Ser. No. 60\/436,615; and","7: \u201cSYSTEM FOR FLEXIBLE DYNAMIC HIGH-PERFORMANCE NETWORK OR APPLICATION SECURITY UTILIZING INTERPRETER AND\/OR RUNTIME (DYNAMIC) CODE GENERATION\u201d filed Dec. 24, 2002 having U.S. Ser. No. 60\/436,616.","This utility patent application shares co-inventorship with the above-identified Provisional Patent Applications and is assigned to the same assignee as these Provisionals. The entire teachings and contents of the above-referenced Provisional Patent Applications are hereby incorporated herein by reference in their entirety.","Conventional computer networking environments support the exchange of information and data between many interconnected computer systems using a variety of mechanisms. In an example computer networking environment such as the Internet, one or more client computer systems can operate client software applications that transmit data access requests using one or more data communications protocols over the computer network to server computer systems for receipt by server software application(s) executing on those servers. The server software application(s) receive and process the client data access requests and can prepare and transmit one or more responses back to the client computer systems for receipt by the client software applications. In this manner, software applications can effectively exchange data over a network using agreed-upon data formats.","One example of a conventional information exchange system that operates between computer systems over a computer network such as the Internet is provided by a set of applications and protocols collectively referred to as the World Wide Web. In a typical conventional implementation of the World Wide Web, client computer systems operate a client software application referred to as a web browser. A typical web browser operates to provide hypertext transport protocol (HTTP) requests for documents, referred to as \u201cweb pages,\u201d over the computer network to web server computer systems. A web server software application operating in the web server computer system can receive and process an HTTP web page request and can return or \u201cserve\u201d a corresponding web page document or file specified (i.e., requested) in the client request back to the requesting client computer system over the computer network for receipt by the client's web browser. The web page is typically formatted in a markup language such as the hypertext markup language (HTML) or the extensible markup language (XML) that allows the web browser to receive and interpret the markup language information within the document in order to process the server response. The browser in the course of rendering the page on the computer screen may fetch more than one individual resource. Such client processing can include, for example, rendering information (or references to it) such as text, graphics or multimedia information to the user of the web browser on a display of the client computer system. A collection of related web page documents at a common network address or domain name is generally referred to as a web site.","In addition to simply accessing web pages, more recent conventional software and networking technologies that work in conjunction with protocols such as HTTP provide complete web-based applications or services, known as \u201cweb services\u201d, over a computer network such as the Internet. Conventional web services architectures allow server-to-server connectivity for business applications.","In a conventional web services architecture, a server computer system can provide access to processing functionality using a web services interface that is defined in a machine-readable interface description, such as Web Services Description Language (WSDL). A particular service expressed or described in WSDL can provide some predefined and specific processing functionality. Other computer systems (e.g., other servers) that want to access web service functionality can discover and invoke the web service offered by the web services server by submitting requests for the service to the server using, for example, XML data encoded in a remote method invocation protocol such as the Simple Object Access Protocol (SOAP). A requesting computer system can transfer XML\/SOAP requests to the server providing the web service over HTTP (or over secure HTTP, known as HTTPS). When a server receives an invocation of a web service via an XML message or stream of message encoded using SOAP\/HTTP, the server decodes and process the XML encoded data, performs the web service processing (i.e., the application processing) on the decoded data, and can formulate an XML\/SOAP\/HTTP response. The server then returns the response to the requesting computer system (i.e., a client or another server) in XML format via HTTP. The XML\/SOAP\/HTTP web services computing paradigm thus allows distributed computing servers to share processing functionality with other computers, such as other servers and\/or clients. Using web services, companies have found that enterprise applications can be interconnected in less time and at a lower cost with XML that is possible with conventional propriety middleware solutions.","Conventional XML processing technologies embedded within a web server allow the web server to interpret and process the XML-encoded data in a variety of ways. Several conventional XML technologies allow a software application to access (e.g., extract) XML-encoded data for application processing purposes. As an example, a server can use XML software processing technologies such as the Document Object Model (DOM) or Simple Application programming interface for XML (SAX) to parse XML encoded data (referred to sometimes as XML documents) to gain access to the XML encoded data. In addition, other XML-related technologies such as XPath and the eXtensible Stylesheet Transformation Language (XSLT) allow a developer of an XML-aware software application to define transformations of XML encoded data from one data format to another. Extensible Stylesheet Transformations (XSLT) is a language originally intended for converting, or transforming, documents written in XML into other formats, including HTML and other XML vocabularies. An XSL document is used to transform an XML document. A schema is a description in a metalanguage specifying the acceptable syntax or structure of an XML document. A schema document is used to validate an XML document and guarantee that its syntax is correct. Several schema languages exist. A filter is one or more XPath expressions (which may optionally be contained in an XSLT document or other overarching control structure) used to extract data from an XML document. This data can be used to produce a decision on the acceptability of the input XML document based on an arbitrary set of criteria as expressed in the query expressions. A filter verifies the input document based on semantic or other content (transformed or not transformed) not typically related to syntax, and so differs from a schema validation in this way.","An XSLT document can be used to transform an XML document, and also to schema validate the XML document at the same time using a schema specified in the XML document (or other out-of-band mechanism). As an example, a developer that creates an XML-aware application (e.g., for use on a web services server platform) can create an XSLT transformation to convert XML encoded data to HTML encoded data. A web server process that receives XML encoded data can apply such an XSLT transformation to the XML-encoded data to convert this data, for example, from XML to HTML and the server can return this data to the client thus allowing the client browser to render the XML-encoded data as HTML within a web browser.","If data security is a concern when performing transactions of XML encoded data between computer systems, conventional standards and common practices have emerged to allow a web server to use some of the above XML processing tools (e.g., DOM, SAX, etc.) to perform XML processing such as digital signature validation, encryption, and decryption upon XML encoded data.","Conventional mechanisms and techniques for processing data encoded in a markup language such as, for example, XML, suffer from a variety of deficiencies. In particular, such conventional markup language processing techniques are quite verbose and burdensome on the processing resources of server computer systems, resulting in the introduction of bottlenecks in the flow of information between enterprise applications. Conventional applications that use XML encoded data are required to receive, parse, transform and otherwise process the XML data using the standard set of software tools available for such purposes, thus resulting in significant overhead to such applications.","As an example, there are numerous XML processing operations that a server may be required to apply on a received XML document prior to being able to perform the intended application level processing provided by that server on the data encoded within the XML document. By way of example, depending upon the robustness of the server application, when XML data is received at a server, the server may be required to determine if the XML document is well-formed (i.e., that it meets the syntax and semantic constraints defined in the XML speficiation). In addition, the server may perform XML schema validation processing to ensure that the server is properly equipped to process all of the relevant tagged XML data in the document. Still further, a server may be required to perform security processing such as performing XML signature validation, decryption or encryption of XML encoded data, authentication of XML encoded secure digital certificates, and so forth. Since XML encoded data is inherently text-based, XML documents can become very large in size. All of this overhead XML processing can place a significant burden on memory and processing resources within a server when dealing with large documents, or when dealing with heavy volumes of smaller documents. However, all of this processing is often required when dealing with XML encoded data in order to provide robust and fault tolerant data processing.","Furthermore, conventional markup language processing techniques are typically implemented in software applications within a server computer system. As an example, software implementations of XML processing tend to be tightly integrated with operation of the server application, such as an XML-based web services application. As XML standards evolve and change over time, re-engineering of the software application to take advantage of, or adapt to, changing XML standards can be quite costly. An organization must either purchase and re-install a new version of the XML processing software to adapt the software to changing XML standards, or if the software is developed in-house, the organization must undertake the task of re-tooling (designing, coding, testing and debugging) the application code to account for changing XML standards. Either situation can be very costly to an organization operating XML-based applications. Further, as many organizations have multiple systems from multiple vendors, it is rarely feasible to upgrade all affected systems at the same time.","In addition, conventional techniques for processing of XML data reside in server computer system deep inside a corporation's network infrastructure and therefore present significant security risks. Since SOAP and XML-remote procedure calls are built on top of HTTP and carried as payload data in packets, such information can easily slip past conventional network firewall data communications devices (e.g., load balancers or content routers or switches). Such conventional network devices cannot detect much less process XML-encoded data or the new protocols that accompany such information. This means that XML payloads pass through conventional network-based security systems into the heart of the organization's computing infrastructure (i.e., to its servers) before any system can detect, process and filter such traffic. Thus not only are such conventional markup language processing approaches inefficient since they are server-based, they are inherently very insecure and introduce significant security threats and exposures.","Generally then, conventional applications use XML-encoded data in a great variety of applications. For example, where security is a concern, standards and common practices have emerged for performing digital signature (sign\/verify) and encryption (encrypt\/decrypt) operations on XML-encoded data. However, conventional implementation of these specifications incurs significant overhead due to the need of a server to parse and manipulate XML-encoded data, a data encoding format that is text-based, verbose and inefficient, to perform cryptographic operations on such data, including, for example the cryptographic algorithms DES, 3DES, AES, RC4, and RSA or others. The performance overhead of such operations performed within a conventional server-based implementation can negate the business advantages of their deployment. Moreover, it is not easy or straightforward to perform a sequence of actions on an XML document consisting of one or more transformations, schema validations, and filters in a server-based architecture due to the significant software complexities of such operations. Also, managing web services security or any other security functions across a large number of heterogeneous servers is difficult. While IP-layer security functions are usually performed on a centralized network device (such as IP firewall) that is configured, managed and monitored by the network operations center, this is not presently possible for web services security.","Embodiments of the invention significantly overcome these and other deficiencies associated with conventional markup language processing implementations. To do so, embodiments of the invention provide a markup language processing device that includes a markup process. The markup language processing device resides within a networking environment and operates to process messages within the network that contain tagged data portions (e.g., markup language portions) according to rule-based processing that selects and applies transforms (i.e,. processing that can operate on message data) to such messages to provide a variety of functions.","As an example, in a security implementation, the markup language processing device is capable of parsing XML data streams, performing encryption, decryption, digital signing, digital signature verification or other cryptographic operations on XML-encoded data streams within a network, thus offloading such tasks from a server. As such, security-related embodiments of the invention dramatically enhance the performance of XML cryptography operations by means of novel application of existing encryption acceleration technology combined with XML processing technology (with optional acceleration). Embodiments of the invention configured for security processing enhance the security of XML cryptography operations by performing some or all sensitive cryptographic algorithms in hardware and optionally enhance security further by storing key material in hardware. These embodiments can also provide a centralized, easy-to-manage XML security gateway that serves to enforce organizational security policies across a broad range of XML-enabled applications without software coding. If deployed at the edge of a network for an organzation, the device of this invention can operate as an XML security gateway for all other computer systems within the corporate network.","The markup processor may, for example, include a chipset designed, in part, to accelerate Secure Socket Layer (SSL) protocol, IPSec protocol or other non-XML-specific cryptographic operations, or may be an integrated module designed specifically with XML cryptography in mind. Extensions of this invention can adapt such a processor to perform XML security or other transform processing operations as explained herein. Such an apparatus can be deployed on the network and provide out-of-process XML cryptographic acceleration functionality as a proxy (by processing traffic flowing through the markup language processing device on the network, as a transparent or non-transparent interceptor), or as an API-based coprocessor (by offering an Application Programming Interface to application software, which could then perform cryptographic operations using familiar interfaces and gain advantages of acceleration), or alternatively as a loopback-based coprocessor (by offering systems the opportunity to execute requests, e.g. HTTP POST requests, and returning the processed results, without the need for either intercepting traffic or configuring any new API toolkits).","Another embodiment of the markup language processing device is an apparatus such as the one described above that is combined with an \u201cXML firewall\u201d, \u201caccess control system\u201d and other filtering\/routing\/acceleration functions in a corporate local area network. Such an apparatus can offer acceleration of SSL, IPSec or other non-XML cryptographic operations as well.","The markup language processing device is capable of parsing and pre-processing one or more rule sets and can dynamically generate code by compiling the rules and a set of transformations. The transformations can be static, dynamically generated by previous rules, or dynamically generated according to configuration data and a template. In operation in a network, the markup language processing device applies a series of rules to incoming data streams by means of executing the compiled code directly on hardware or an interpreter. The execution of the rules allows the markup language processing device to provide enhanced application or network security by means of deep inspection of data streams for security purposes, such as: validation, filtering, routing, data-protection data-obfuscation, and\/or cryptographically verifying data streams of messages. Accordingly, enhanced network security is accomplished due to tactical advantages during incident-response or threat-response offered by a flexible, just-in-time configuration of security policies (or rules) that can be applied dynamically and at greatly improved performance as compared to conventional server-based systems.","More specifically, the markup language processing device provides a message transformation process module capable of dynamically compiling user-defined security policies and generating optimized byte-code, machine code, FPGA\/PLD-programs or other codes for execution on a markup processor. The markup processor is capable of efficiently executing the dynamically generated security policies that perform filtering and\/or routing steps. In addition, the markup processor can optionally performing additional data processing such as, for example, data interchange, encryption, digital-signing, data-obfuscation (e.g., URL re-writing) and service virtualization. Application of transformations can include \u201cmultistep\u201d application, which allows one or more transformations to be composed in arbitrary ways, where the output of preceding transformation can be optionally fed into any subsequent transformation. A rule processor provides control of step invocation by means of separate rule-matching (for example, URL wildcards).","Another embodiment provides specific application to XML Web Services security in which the markup language processing device includes an XPath compiler module which processes user-defined or vendor-supplied XML-content-based filtering or routing rules into an optimized form (e.g., machine code, bytecode, FPGA code, etc.) for use as transformations. The markup processor executes the compiled XPath filtering or routing instructions on network data streams or on a given data stream and can perform operations, such as, for example, redirecting a network data stream to a specific network node based on result of one or more XPath filtering\/routing operations.","Embodiments explained herein further provide mechanisms that efficiently invoke and execute extension functions referred to as transform primitives from within XPath or XSLT instructions. This can be done within XSLT, for example, using C calling conventions or other dispatch methods. The transform primitive extension functions provide access to additional context information in the form of low-level transformation function processing such as cryptographic functions or other data processing operations (e.g., security capabilities, network filter capabilities, and so forth).","A markup language processing device configured according to embodiments of the invention can further provide a system providing a set of cryptographic or other security Application Programming Interfaces for the XSLT programming language or another XPath-based programming language. Such embodiments provide data signing, encryption, etc., as particular special types of transformations. Such embodiments further provide a necessary set of cryptographic transform primitives so that an entire XML Security policy can be expressed as a set of XML transformations. Such embodiments can treat certain operations as operating on the *input* tree of message data. For example, the decrypted data can be inserted into the source tree and all relevant templates re-applied and resultant message can contain the decrypted data.","Still other embodiments provide the ability of an end user or developer to modify or reconfigure the transformation templates to implement custom policies, specifications or make changes to conform to new versions of existing standards.","Embodiments of the invention thus provide a new class of network service provided by a program and\/or markup language processing device that provides XML-aware network and application processing, such as security, including content-filtering (XPath, XSLT, XDoS protection, etc.), content-based-routing (XPath, XSLT, etc.), access control (via SAML, LDAP, RADIUS, lookup file, filter), SSL, IPSec, non-repudiation, secure-logging, digital signing and verification, field-level security (signing & encryption at data-field level), and other XML Web Services functions. These functions are combined and\/or enabled in the markup language processing device with XML Acceleration primitive functions, including compression, parsing acceleration, transformation acceleration, and others. The markup language processing device is capable of composing and combining these functions at runtime in a flexible manner as explained herein.","In one embodiment, the markup processor operates a markup language transformation process that includes (1) a module for performing XSLT transformations, (2) a module for performing schema validation, (3) a module for performing filtering, and (4) a module for specifying and controlling arbitrary sequences of arbitrary length consisting of actions which include transform, validate, and filter, using the modules (1), (2), and (3). Module (4) allows for the specification of a sequence of actions, any of which may be a transformation, a schema validation, or a filter. Each action takes an input, operates on it, and optionally produces an output. In some cases the output is a document which may be further operated on, in some cases it is a decision on whether to continue processing. If the output is a document this may be operated on by later actions (used as input for later applied transformations or primitives), or output as the final result of the sequence of actions for either insertion into a resultant message, or for making a decision on final disposition of the message. In this way the actions in the sequence together form a \u201cmulti-step transformation rule\u201d or transform sequence (defining application of a set of transformations) which otherwise would not be possible using the conventional mechanisms provided in XML, XSLT, and schema.","The ability to reuse the output of one transformation as input for another enables such complex behavior as: transformation of document A into another document B which is used as the transforming document in a subsequent step; and\/or, the ability to perform multiple cryptographic transformations (encryption\/decryption, digital signing and verification) on a document (i.e., contained in one or more message) in which intermediate document state must be maintained (for example, a sequence such as decrypt, verify data (e.g., verify signature or other portions of message), transform, digitally sign, and encrypt).","Other embodiments of the invneiton provide a markup language processing device configured as a system for receiving and analyzing a network data stream the at all layers (e.g., network, application, others) simultaneously. The markup language processing device applies one or more user-defined filtering or routing steps defined within transformations and can either rejecting all or part of the data stream (i.e., all or portions of messages) or can route the data stream of messages to another destination.","This embodiment can use, for example XPath (and the programming language XSLT) as the policy language for customers to define transformations that can determine if a message should be allowed or not, for example, into a network. Such transformations operate off-server and can be configured as vendor-neutral independent standards designed for XML examination and manipulation. The transformations can use XSLT extension mechanisms referred to herein as primitives to provide a wide variety of message meta-data within a consistent XPath\/XSLT-based policy framework. For example, a primitive provides an extension function dp:client-ip-addr( ) to provides the IP Address of the originating host. This information returned by this primitive can be used in the transformation to make logic decisions on message handling.","Such embodiments improve on the current state of the art by making it possible for the user to consider both Layer7 and Layer2 in the same filter and device (i.e., within the markup language processing device). In other words, the markup language processing device of this invention makes a filtering\/routing decision on high-level application-layer variables (e.g., XML data field contents) and low-level network-layer variables (e.g., source IP address or SSL certificate name). For example, the markup language processing device makes it easy, practical and very efficient to construct a single business\/security policy which says: \u201call Purchase Orders (POs) with amounts over $50,000 coming from IP address 10.1.1.1 are to be rejected from the corporate netowrk, while all POs coming from elsewhere (i.e., another IP address) or using SSL or under $50,000 from 10.1.1.1 would be accepted\u201d. The transformation can be defined to apply this logic and can use primitive to perform the low level operations, such as obtaining the IP address of the message. Using standards-based approaches ensures that users familiar with XML processing languages can easily take advantage of the flexibility of the system of this invention and do so without becoming locked into totally proprietary technologies.","Embodiments of the Intention may be in a variety of forms both in hardware apparatus and as a software system. Transoformaion can use primitives that perform extension functions accessible from within the transformation templates or rule sets executing on the markup processor (i.e., an XML processing module) to provide access to network or context data, such as HTTP headers, transport-layer encryption status, SSL certificate data fields, indication of direction of the message being processed (inbound\/outbound\/request\/response), client IP, destination IP, stateful velocity\/XDoS counters, and so on. Such primitives can be written in a programming language such as C++ or Java and the transformations can reference such primitives as needed to \u201cbuild\u201d a logic transformation that operates as required on message data passing throught he markup language processing device. In addition, embodiments provide a means for the end user to modify or reconfigure the transformations (e.g. stored as XSLT templates) to implement or modify custom policies, specifications or make changes to conform to new versions of existing standards. Thus the design and architecture of the system of this invention supports future changes in markup langague processing industry trends.","Other embodiments of the invention include a markup language processing device that is any type of computerized device such as a network device, switch, router or the like configured with software and\/or circuitry (e.g., a processor as summarized above) to process any or all of the method operations disclosed herein as embodiments of the invention. Still other embodiments of the invention include software programs that can operate alone or in conjunction with each other in a computerized device to perform the method embodiment steps and operations summarized above and disclosed in detail below.","One such embodiment comprises a computer program product that has a computer-readable medium including computer program logic encoded thereon that, when performed in a computerized device having a coupling of a memory and a processor, programs the processor to perform the operations disclosed herein as embodiments of the invention to carry out message processing. Such arrangements of the invention are typically provided as software, code and\/or other data (e.g., data structures) arranged or encoded on a computer readable medium such as an optical medium (e.g., CD-ROM), floppy or hard disk or other medium such as firmware or microcode in one or more ROM or RAM or PROM chips or as an Application Specific Integrated Circuit (ASIC). The software or firmware or other such configurations can be installed onto the computerized device (e.g., during operating system for execution environment installation) to cause the computerized device to perform the techniques explained herein as embodiments of the invention.","It is to be understood that the system of the invention can be embodied strictly as a software program, as software and hardware, or as hardware alone. Example embodiments of the invention may be implemented within computer systems, network devices, processors, and computer program products and\/or software applications manufactured by Datapower Technology, Inc. of Cambridge, Mass., USA. Specific examples of Datapower Technology, Inc. products that may contain embodiments of the invention are the XS40 XML Security Gateway network device and\/or the XA35 XML Accelerator network device.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 1","b":["100","100","101","120","130","110","120","102","110","120","110","130"]},"In this example, a client computer system  operates (e.g., executes) a client application  that transmits one or more communication messages  containing markup language tagged data portions (e.g., , ) onto the network  for receipt by a server application  operating (e.g., executing) within the server computer system . The client application  and the server application  may be any type of data communications software applications that require the ability to exchange data within messages ,  (from the client computer  to the server computer ) and ,  (the server computer  to decline computer ). As an example, the client application  may be a web browser application that provides markup language messages  (e.g., formatted in HTML or XML or another markup language) for processing by the server application  which may be a web server. As another example, the client computer system  may itself be a server computer system that operates the client application  as an application server that requires access to a web service provided by the server application  within the server computer system .","The markup language processing device  includes a markup processor  that accesses rule set(s)  and transformation and other data , as will be explained in accordance with embodiments of the invention. The markup language processing device  and markup process  in the illustrated example operate in a proxy mode (to be explained in more detail) and reside within the communications path between the client computer system  and the server computer system . The markup language processing device  in a preferred embodiment is purpose-built data communications device that resides within a network infrastructure (e.g., between the client and server computer systems  and  in this example) and operates the markup processor  to allow communications messages  and  such as packets of data to be received and processed and forwarded toward their eventual destination. In other configurations, the markup language processing device  can receive, process, and return messages with the same computer system to operate in co-processing and loopback modes, as will be explained. In other configurations or embodiments, the markup language processing device may include other modules (e.g., within the transformations and other data database ) that perform additional security functions on transport procotols, messages or portions of messages, such as traditional IP firewall, Intrusion Detection System (IDS), Intrusion Prevention System (IPS), SQL Injection protection, Virus scanner.","In the illustrated example proxy-mode configuration in , the markup language processing device  operates as a firewall, gateway or other entry point into a corporate local area network (LAN) within which the server computer system  operates. In such a configuration, the markup language processing device  operates to perform (i.e., apply) markup language processing operations and data transformations  on one or more various portions of information within messages  to create resultant messages  (from client  to server ) and can likewise perform similar processing on messages  originating from the server  that are destined for the client  to create resultant messages . The processing performed by the markup processor  can include, for example, applying transformations (or other data used in message processing)  upon markup language encoded data (or other data, such as packet headers) within the messages  and  for a variety of purposes as will be explained herein. In addition, as also will be explained the markup processor  can access rule sets  that define rules that the markup processor  is able to match against various tag portions ,  of a message  as that message arrives and is parsed by the markup processor . The rules  allow the markup processor  to select a sequence of zero or more specific rule sets  to apply to message data within the message .","Other embodiments of the invention as will be explained allow an operator of the markup language processing device  such as a network administrator to create custom rule sets  and transformations  to define application specific mechanisms for processing of tag data portions within the messages  and . Creation or modification of transformations  is simplified by embodiments of the invention and does not require complex reprogramming and retesting of custom source code. Operation of the markup processor  is dynamic such that if transformations change , the markup processor can dynamically (i.e., in real-time after the change) adjust its processing to account for such changes. This allows embodiments of the markup language processing device  to adapt to changing data encoding formats such as changes in XML encoding techniques or changes in security standards or processes.","The markup processor  may be implemented as either one or more software processes, one or more hardware processors or circuits (e.g., programmable gate arrays or other types of microprocessors, programmable microcontrollers, custom application specific integrated circuits (ASICs), or other type of processing unit), or as a combination of hardware and software components.","As an example, in one configuration the markup processor  can operate as a security processor to handle security related processing operations on markup language data within messages  transferred from the client application  to the server application . In such a capacity, the markup language processing device  can offload markup language security processing requirements and operations from the server application  and server computer system  thus greatly enhancing the performance of the server computer . This provides the advantage that developers of the server application  can focus processing development efforts on the applications intended purpose, rather than being burdened with implementation specific details related to processing markup language security data encoded within messages  and . In other configurations, the markup processor  that may operate to perform network routing operations based upon tagged markup language data portions ,  within the message  in order to direct the message  to one of the number of server computer systems  (not shown in the illustrated example). There are many other examples that will be discussed in detail herein to illustrate processing capabilities of the markup processor  to perform complex processing operations on tagged markup language encoded data within messages  and .","Further details of processing operations provided by various embodiments of the markup language processing device  equipped with the markup processor  in accordance with this invention will now be explained with respect to the remaining figures.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 2","FIG. 1"],"b":["120","140","110","115","140","140","130","110","120","150","102","120","101","110"]},"In step , the markup language processing device  (i.e., the markup process ) receives a message  containing portions of tagged data  formatted in a markup language. As an example, the message  may be formatted in the eXtensible Markup Language (XML) and may be received using a transport protocol such as HTTP over a connection  (e.g., a TCP\/IP connection) between the client computer  and the markup language processing device . In one configuration, the message  is created by the client application  in order to access Web services provided by the server application  and contains XML encoded data as well as data encoded according to the Simple Object Access Protocol (SOAP). In proxy mode, the connection  (e.g., a TCP connection) can be terminated at the markup language processing device  and the markup language processing device  can establish a second connection  to the server computer system  over which message  is transmitted.","In step , the markup language processing device  (i.e., the markup processor  within the device ) applies a transform selection rule set  to at least one tagged rule selection data portion  in the message  to select at least one markup language transformation  to apply to at least one tagged pre-transform data portion  within the message . The transform selection rule sets  generally defines one or more rules by which to process tagged data portions contained within a message  to identify specific transformations  to apply to tagged pre-transform data portions  within the message . The markup processor  can use the tagged selection data portions  (obtained via parsing the message , as will be explained) as applied to a rule set  as a selection criteria to identify specific transformations  to apply to tagged message data within the message . The actual tagged data to which those transforms  are applied is referred to in the example in  as tagged pre-transform data portions . It is to be understood that a portion of tagged data  that the markup processor  matches against a rule set  may also be the tagged message data to which a transform  is applied. In other words, a tagged portion  may tag or otherwise delineate the same message data used as tagged data portion  for application of a transform .","As an example, if the markup language processing device  is used as a security device, rules within the rule set  can match tagged data portions within the message  such as portions of an HTTP header (e.g., URL domain names or other URL information), portions of a SOAP header, or other XML tagged data portions (e.g., XML signature or certificate data) and upon such a match to such tagged data portions (i.e., upon detecting such information in a message ), the markup processor  can select an appropriate rule set  that contains rules that specify application of specific transformations  to apply to these tagged data portions or to other tagged data portions contained elsewhere within the message . In one embodiment, the markup language transformations  are XML stylesheets defined in an extensible stylesheet transformation language (XSLT). As will be explained later, transformations defined in accordance with the invention reference primitive functions such as specific security functions implemented, for example, in a programming language such as C++ or Java. The markup processing can dynamically compile (e.g., using just-in-time compiling techniques) the most recent version of the XSLT transformations (and can detect any changes, such that the most up to date transformations are applied) in conjunction with the primitive functions to provide machine executable markup language processing code. This code can be programmed into a programmable processing device (e.g., into an FPGA) to provide wire-speed XML processing of data within messages .","A simplified example rule set  generally contains entries that match XML tagged values discovered during parsing of the message  (as will be explained) and for each matching tag, specifies one or more transformation operations to be performed on the tagged data (or on other specified tagged data in the message). A simplified example pseudocode format or representative structure for entries in a rule set appears as follows:","Rule-1: XML_Tag_Value1=Resultant_Transformations1(Transform_Tag1)","Rule-2: XML_Tag_Value2=Resultant_Transformations2(Transform_Tag2)","Rule-3: XML_Tag_Value3=Resultant_Transformations3(Transform_Tag3)",". . .","Rule-N: XML_Tag_ValueN=Resultant_TransformationsN(Transform_TagN)","In the above example rule set structure, \u201cRule-N:\u201d is a rule number, \u201cXML_Tag-ValueN\u201d is a set of one or more XML search or start tags that are to be searched for within the message  in order to invoke one or more transformations specified by the transformation set  \u201cResultant_-TransformationN.\u201d The \u201cTransform_Tag\u201d represents an ability of the markup processor  to apply a transform(s) to a different tagged portion of the message  other than a the portion of tagged data matching the XML_Tag_ValueN used to select the rule. Note that the aforementioned example rule syntax is given by way of example only. An actual XML formatted rule set used in one implementation of a markup language processing device  configured in accordance with embodiment of the invention is provided in Appendix A at the end of this detailed description.","As a specific example of application of the above example rule set, if a message  were to begin arriving in a communications port within the markup language processing device  and a portion of tagged data ,  within the message  contained an XML tag data value corresponding to \u201cXML_Tag_Value3\u201d, application of the above rule set would indicate that one or more transformations specified within the indicated transformation set Resultant_Transformations3(Transform_Tag3) are to be applied to tagged message data identified by the XML tag Transform_Tag3. In this manner, the above example simplified rule set illustrates how embodiments of the invention can identify specific transformations to be applied to tag message content within the message  as the message  is received at (e.g., streamed into) the markup line of processing device . Note that in preferred embodiments of the invention, application of the rule set and corresponding application of transformations to the message data occurs during continual receipt of the message data (e.g., as the message data is streamed into the markup language processing device ) from the computer network ).","In step , the markup language processing device  applies the selected markup language transformation(s) to the tagged pre-transform data portions  to transform the tagged pre-transform data portion(s)  in the original message  to at least one tagged post-transform data portion  in the resultant message  (i.e., in a corresponding message producing from this processing). This transformation process is performed according to at least one transformation function associated with the markup language transformations . As an example, using the above simplified rule set, the Resultant_Transformations3 can specify a set of XSLT transformations to be applied to message data corresponding to the XML tag that matches the rule (or that matches the Transform_tag specified in parentheses after the transform set). In this manner, transformations  can be defined as XSLT stylesheets that are dynamically applied to matching tagged data within the message  as it passes through the markup language processing device  on route to the server computer system . Further details of this processing will be explained shortly.","In step , after application of one or more transformations  to one or more tagged portions ,  of message data , the markup language processing device  conditionally forwards the message  containing the tagged post-transform data portion(s)  to the recipient computerized device  (i.e., the server in this example). As such, the recipient computerized device  is not required to process the message  (i.e., is not required to process the pre-transform data portions  according to the operations of the transform(s) ) due to operation of the markup language transformation(s)  within the markup language processing device .","In one configuration, the markup language processing device  can perform the operations of applying a transform selection rule set  and applying the selected markup language transformation(s)  asynchronously, thus invoking application of extensible markup language stylesheets transformations to tagged data portions ,  of the message  (or  if processing messages in the other direction) as the message arrives over a connection at the markup language processing device . In this manner, the processing and mechanisms of the invention are not required to wait until the entire message  containing XML is received before applying operation of the transformations  on tagged data potions ,  that stream into the markup language processing device . Instead, transformation of data can begin during concurrent receipt of the message data thus speeding processing of XML or other data to be transformed.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 3","FIG. 1"],"b":["120","125","120","171","172","140","150","101","102","125","126","173","174","175"]},"Generally, the parser  is a markup language processor such as, for example, a callback-event based (similar to SAX) XML parser. The parser  operates to identify tagged XML data elements within an incoming message ,  and passes these data elements to the rule processor . The rule processor  can consult the rule set database  to identify appropriate rules (i.e., to select a rule set) that match the tagged data portions , . There can be, for example, a generic rule set that then selects another domain specific rule set to apply to a stream of messages. Based on the matching rules in the rule set , specific transforms  are selected for activation or operation by the transform processor  as explained. As illustrated by processing paths  and , successive or repetitive application of rule sets  (via path ) by the rule processor  and\/or transformations  (via path ) can take place to select multiple transformations  that are applied to one or more tagged data portions  and  within an incoming message  or  (e.g., in a serial or concurrent manner). As such, multiple transformations  can be applied in a cascaded manner to the same tagged data if more than one transformation to this data is required or specified by rules within the rule sets . Alternatively, different tagged data portions can be processed by transformations concurrently, such as in situation where the User Datagram Protocol (UDP, RFC 768) is used to receive a large portion of data and the messages  carrying the data arrive out of order.","Further details of the aforementioned processing operations will be explained with the flow charts in  and with reference to the markup language processing device  architecture in .",{"@attributes":{"id":"p-0081","num":"0080"},"figref":"FIG. 4","b":["120","140","128","141","140","120","129","142","140"]},"In step , the markup language processing device  obtains the tagged application layer within portions of the message . In addition in this example the markup language processing device  obtains network layer protocol data  as well from the message, such as an IP address of the message, as will be explained.","To obtain such data, in step , the markup language processing device  initially identifies an application layer protocol portion of the message . By identifying application layer protocol portions of incoming messages or packets, embodiments of the invention allow transformation and processing of data that can include the entire message  itself, based upon application layer protocol information such as HTTP header, message queue name, or XML\/SOAP header information, or transformations may be applied to any other application layer information or message data that can be encoded within the message  traveling within a communications network.","In sub-step , in this example embodiment, the markup language processing device  identifies a hypertext transport protocol portion of the message. The HTTP protocol portion of a message can be used to make rule set selection decisions as will be explained.","In sub-step , in this example embodiment the markup language processing device  obtains a uniform resource locator (URL) within with hypertext transport protocol portion of the message. This URL or a portion of the URL can be matched, as will be explained, to uniform resource locator rule definitions in a rule set . As a specific example, embodiments of the invention can match a domain identification of an Internet domain (e.g., domainname.com) specified within a URL in an HTTP header (i.e., a tagged rule selection data portion ) in order to select a specific rule set  to apply to this message for application of transforms . Thus there can be a plurality of rule sets  each applicable for application of certain transform sequences based upon web or Internet domains to which those messages relate. Other fields of HTTP and a URL can be used as well to select a rule set and to perform rule-based processing to apply transformation(s) .","In step , in this example embodiment the markup language processing device  also identifies at least one network layer protocol portion of the message . The network layer protocol portion of the message may be, for example, an Internet Protocol (IP) address associated with the message and\/or a TCP or UDP port number upon which the message ,  was received. Any other network layer information can be obtained from the message as well. Note that use of network layer information to perform rule processing and transformation selection in conjunction with tagged data (e.g., HTTP or URL information) is optional and is not required in all embodiments of the invention. This alternative configuration is explained here for completeness.","In step , the markup language processing device  matches at least a portion of the tagged application and network layer protocol data (e.g., HTTP URL and\/or network information) from the message to a rule set database  to identify an applicable rule set  that defines an ordered sequence of transformations  to be applied to the tagged pre-transform data portions  in the message .","In sub-step , the markup language processing device  matches a portion of the uniform resource locator within with hypertext transport protocol portion of the message to uniform resource locator rule definitions in an initial rule set  in the rule set database to select an applicable rule set  to transform the tagged pre-transform data portions  in the message according to the sequence of transformations  defined in the selected applicable rule set  having an associated matching uniform resource locator rule definition. In other words, in step , the markup language processing device  applies a master rule set of sorts that is used to select, based on URL and network information, one or a number of available rule sets  that is applicable to this message (e.g., for a certain domain).","In sub-step , in addition (or in the alternative), the markup language processing device  also matches the at least one network layer protocol portion (e.g., IP address or port number) of the message  in combination with the uniform resource locator information within with hypertext transport protocol portion of the message to select the applicable rule set  that defines one or more transformations  that are to be applied to tagged message data portions . The application of such transforms  will now be explained with respect to the flow chart of processing steps shown in .",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 5","b":["120","140","129","142","142","140","147","145","129"]},"In step , the markup language processing device  configures a message parser  with a set of search tags (e.g., XML tags that match each rule) associated with a transformation (e.g., associated via a rule set ) in the sequence of transformations (one or more) to be applied to the tagged pre-transform data portions  in the message . Each search tag is capable of being matched to a tagged data portion of the message that is to be transformed according to a transformation function of the transformation  in the sequence of transformations (i.e., specified by a matching rule or rules in the rule set ). In other words, the message parser  is configured to identify XML tags that apply for rule set selection. In addition, the application of rules in a particular rule set  associate a set of one or more transformations  to those tags configured within the parser . In an embodiment that uses an XML parser  such as SAX, the SAX parser identifies all XML tags defined by one or more XML namespaces and can pass each portion of tagged data ,  to the rule processor . The rule processor  determines if that portion of tagged data is applicable to selection of a rule set and can match the tagged data from the parser against particular rules in the selected rule set .","In step , the markup language processing device , using the parser, parses the message  to identify, within the message, at least one start search tag of the set of search tags that indicates a start of tagged pre-transform data  in the message . As an example, the SAX parser  can be configured with special XML tags that cause invocation of the rule processor , such as HTTP tags in HTTP header that identify the URL, or SOAP\/XML tags identify security information such as XML signatures or other information within the message . As an example, one rule in an initially applied rule set  may match a portion of a domain name of a URL along with an IP address and\/or TCP port number of the message to as matching tagged data  to select a rule set applicable to messages  from that domain. Once it is determined that this rule set  is to be used, the rules in that rule set  are applied to the same or to other matching tagged data portions ,  (that is being streamed into the markup language processing device ) in the message  to select transformation(s)  to apply to those tagged data portions.","In step , in response to identifying a start search tag (e.g., the beginning of XML signature portion of the message), the markup language processing device  applies the at least one transformation function  (e.g., a transformation function  to perform XML signature validation) to pre-transform message data  (e.g., the XML signature data) in the message, beginning at the start of the tagged pre-transform data in the message and continuing until the parser  identifies an end search tag in the message that indicates the end of the tagged pre-transform data  in the message (e.g., the end of the XML signature data) such that application of the transformation function produces post-transform data . The post transform data  may be, for example, a signal or other indication as to whether or not the XML signature was validated within the message .","Construction of transformations  and example embodiments of their specific processing functionality will be explained shortly. It is to be understood that application of a transformation  can include such processing as converting the tagged data from one format to another (e.g., encryption, decryption, filtering and removal of portions of a message), or merely processing the tagged data to verify its authenticity (e.g., certificate or signature validation) without actually changing the tagged data. Another example is a transformation  to examine the tagged data and make decisions about how to process a message ,  (some other portions or all of it) based on the tagged value applied to the transformation . As an example, embodiments of the invention can conditionally route a message  to one server  or another based on content defined in XML tags. Thus the term transformation as used herein does not require that the data be actually modified for a transformation to be applied. In this example, the pre-transform tagged data  identified by a start search tag may be data to be decrypted and thus resultant post-transform transformation data  is produced that is to replace the encrypted pre-transform tagged data  in the message .","In step , the markup language processing device  integrates the post transform data  into a transformed message  to replace the tagged pre-transform data  originally received in the original message . In this manner, this example embodiment of the invention operates to identify tagged XML fields or data portions ,  within an original message  and can apply XML transformations  to those data portions ,  at wire speed while the message  is passing through (i.e., streaming into) the markup language processing device  in order to provide real-time and high-speed XML processing to the message data. A resultant message  contains the post-transform data portions . As noted above, embodiments of the invention are not required to actually modify data portions within a message  and transformations can simply perform logic processing on the message using information in such data portions to perform tasks such as access control (accepting or denying the message) or routing of messages. In this example embodiment however, transformations convert (e.g., encrypt or decrypt) the matching tagged data portions .","In step , the markup language processing device  repeats the operations of identifying a start search tag (step ), applying the at least one transformation function to pre-transform message data in the message from the start search tag to the end search tag (step ), and integrating the post-transform data into the message for each start search tag encountered when parsing the message (step ), such that application of the transformations is performed to transform each portion  of the message  delineated by the start and end search tags according to the transformation  associated with those search tags.","In this manner, through the use of a rule set  that designates the sequence of transformations  to apply to one or more portions of tagged message data , , a variety of different processing operations can be performed in the message data as determined by the availability of different transformations . Since embodiments of the invention support application of multiple transformations  either on the same or on different portions of data within a message, complex XML processing operations such as XML schema validation, access control and security processing, message routing and manipulation of other message information, such as rewriting URLs in an HTTP header, can be accomplished by embodiments of the invention via the application of the transforms .","In one configuration, parsing the message to identify a start transformation tag, applying the at least one transformation function, and integrating the tagged post transform data into the received portions of the message are performed asynchronously in real-time as the message  arrives at the markup language processing device such that transformation of pre-transform data according to a transformation function (i.e., a specific processing task) of a transformation in the sequence of transformations commences during streaming and prior to completely receiving the entire message .","In another configuration, the rule set  defining a sequence of transformations  to be applied to the tagged pre-transform data portions in the message defines application of a plurality of transformations  to the message in a sequence. In such cases, each transformation  in the sequence is operable to match a specific tagged portion of data ,  in the message and each transformation in the sequence has a transformation function that performs a specific data processing task on the specific tagged portion of data ,  in the message.","To illustrate this point, consider an example in which the sequence of transformations specified in the rule set identifies a first transformation (e.g. decryption) and a second transformation (e.g., signature validation). In such a sequential application of transformations , the first transform can be applied to a tagged data portion  to decrypt its contents to produce post-transform message data. The markup language processing device  can then use this post-transform message data that is output from the operation of applying the first decryption transformation function as pre-transform message data for input to an operation of applying the second signature validation transformation on the decrypted signature data, such that the first and second transformation are applied in a sequential manner to this same data in a streaming manner (i.e., as the data is received).","Embodiments of the invention greatly assist in the interoperability of recipient devices  of the messages  that are not typically equipped with complex XML processing capabilities such as XML signature validation, cryptographic security operations and so forth. Embodiments of the invention can off-load such processing requirements from these lightweight or thin client devices and provide the required ability to interact with computer systems that do require such capabilities in order for the lightweight clients to access those computer systems. In other words, if a relatively simple device  such as a cell phone or personal digital assistant (PDA) is not equipped to perform, for example, XML signature processing but a device  communicating with this PDA  requires this exchange or communication would be disallowed, embodiments of the invention can provide such processing on behalf of such a lightweight PDA or cell phone device .",{"@attributes":{"id":"p-0102","num":"0101"},"figref":["FIG. 6","FIG. 6"],"b":["129","128","141","142"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["Decryption of the tagged portion of message data.","Encryption of the tagged portion of message data.","Authentication of the tagged portion of message data.","Signature generation on the tagged portion of message data.","Signature verification on the tagged message data.","Certificate generation or lookup for the tagged portion of message data.","Application of a secure communications protocol between the markup language processing device and a device that originated the message in response to detecting the tagged portion of message data."]}}}},{"@attributes":{"id":"p-0103","num":"0109"},"figref":"FIG. 7","b":["128","141","142"],"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":["Application of access control policy to the tagged portion of message data  to determine portions of the message (e.g., some or all or none) that are to be allowed to be received by the recipient computerized device .","Filtering of the tagged portion of data from the message prior to forwarding the message to the recipient computerized device. In the case of filtering, the transformation function operates to filter the tagged portion of the data based on content, payload size or other tagged data portions received within the message.","Verifying acceptability (e.g., well formedness) of the tagged portion of data in the message prior to forwarding the message to the recipient computerized device.","Identification of a non-allowed or missing tagged portion of data in the message and in response not forwarding the message to the recipient computerized device .","Identification of a non-allowed or missing tagged portion of data in the message and in response not forwarding the message to the recipient computerized device and providing a rejection of the message to an originating computerized device  that transferred the message to the markup language processing device .","Identification of the originating computerized device  that transferred the message to the markup language processing device  based on the tagged portion of data in the message (e.g., using network address or signature, etc.).","Application of virus detection to the tagged portion of the message or to the entire message itself.","Application of schema validation to the tagged portion of the message or to the entire set of tagged data within the message.","Detection of a denial of service attempt by the originating computerized device that transferred the message for receipt by the recipient computerized device. Detection of denial of service attempts can be performed by the markup language processing device  using transformations that track, for example, from message to message for occurrence of specific values or portions of data."]}}}},{"@attributes":{"id":"p-0104","num":"0119"},"figref":"FIG. 8","b":["129","128","120"],"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["Application of a network routing operation (e.g., redirection, load balancing, etc.) to the message based on tagged portion(s) of data in the message.","Application of a combination of a filtering operation on tagged portion(s) of data (e.g., removal of a portion of the tagged data) and a network routing operation on a filtered version of the message based on tagged portion(s) of data in the message.","Application of a combination of a filtering operation on the tagged portion of data, a cryptographic operation on the tagged portion of data and a network routing operation on the message based on tagged portion(s) of data in the message.","Activation of a network service (e.g., providing a web service from within the markup language processing device ) in relation to the recipient computerized device  (e.g., that may not be equipped to provide the requested web service) and the originating computerized device that transferred the message for receipt by the recipient computerized device (i.e., the device  that requested the network service) based on the tagged portion of data in the message."]}}}},{"@attributes":{"id":"p-0105","num":"0124"},"figref":"FIG. 9","b":["120","110","140","120"],"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":{"@attributes":{"id":"ul0007-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":["Transformation of hypertext transport protocol metadata (e.g., URL modification to convert one value in the URL to another value, such as domain name conversion)","Transformation of secure sockets layer metadata.","Transformation of transmission control protocol data."]}}}},{"@attributes":{"id":"p-0106","num":"0128"},"figref":"FIG. 10","b":["120","120","140","110","150","110","150","140"]},"As an example of operation in loopback mode, in one embodiment the markup language processing device  operates a web services interface protocol  to exchange the extensible markup language messages ,  with the computer system  to perform processing that the computer  could not otherwise perform (e.g., decryption, virus scanning, etc.). Perhaps the computer  is not equipped with the logic to perform the required service. Thus the markup language processing device  can provide the service and can allow the computer  to have data received in message  that can then be used to effectively communicate with the client computer .",{"@attributes":{"id":"p-0108","num":"0130"},"figref":"FIG. 11","b":["120","120","153","120","120","110","158","140","145","150","155","120","158","153","120","158","120"]},{"@attributes":{"id":"p-0109","num":"0131"},"figref":["FIG. 12","FIG. 12","FIG. 13"],"b":["120","199","129","180","185","186","120"]},{"@attributes":{"id":"p-0110","num":"0132"},"figref":["FIG. 13","FIG. 12"],"b":["120","125"]},"In step , the markup language processing device  defines (i.e., from creation by the developer ) a plurality of transform primitives , each transform primitive  is operable to perform a specific data processing task on data extracted from a tagged data portion ,  of the message . The transform primitives  may be, for example, software routines written by the developer  to perform low level processing tasks such as producing a signature on a portion of data, encrypting or decrypting a portion of data according to a specific data encryption or decryption algorithm, and so forth. Each transform primitive  is written and fully tested by the developer  in a language such as C++, Java or other programming language. Once created, they collectively form a library of low-level software functions that can be applied alone or in combination with each other via invocation from within a transformation . Appendix B contains an example of source code interfaces (i.e., function calls for security functions) to transform primitive functions. Those skilled in the art understand that there can be many ways to specifically implement the source code to carry out the processing of a transform primitive  and those shown in Appendix B are given by way of example only. Examples of transform primitive operations are to compute a hash of data, verify a public key, decrypt or encrypt data according to a specific encryption algorithm, and so forth. Using encryption and decryption as an example, there may be many different encryption and decryption transform primitives, one for each algorithm that may be used, there may also be different cryptographic keys used within an algorithm.","In step , the markup language processing device  defines at least one markup language transformation  in a markup language transformation language, such as XSLT. Each markup language data transformation  is operable to match a tagged portion of data (e.g., XML tags within , ) in the message (e.g., ) and to specify application of at least one of the transform primitives  of the plurality of transform primitives to a tagged portion of data (i.e., to data delineated by the matched tags) in the message  to accomplish the transformation function associated with that markup language transformation .","The transformations  are preferably XSLT scripts, written in XML. An example of some sample XSLT transforms configured in accordance with embodiments of the invention are provided in Appendix C. The developer  creates (i.e., writes) the transformations  in this example as XSLT scripts that match strings found within the tagged markup language data of an incoming message. When a string is found, the XSLT transformation  can specify invocation of one of more transform primitives  to apply the tagged message data ,  that matches the specified string.","As an example, if the XML message data contains a digital signature section designated by the start and end tags <XML_Signature>, <\/XML_Signature>, an XSLT transformation can \u201cprogram\u201d the parser  to look for the start tag <XML_Signature> and to invoke operation of a specific digital signature validation transform primitive  (i.e., a C++ or Java program written to validate digital signature data according to a standard signature validation algorithm) on the signature data within the message  beginning at the start tag and continuing on the message data until the parser  detects the end tag <\/XML_Signature>, indicating the end of the digital signature data within the message .","In step , the markup language processing device  compiles (via compiler ), into executable machine code, the markup language data transformations  in combination with the plurality of transform primitives  (and the rule sets, which are expressed in XML as well) to produce the markup language message transformation process .","In more detail, in sub-step , the markup language processing device  compiles, via the compiler , a rule set definition  defining the transform selection rule set in conjunction with the plurality of markup language data transformations  and the plurality of transform primitives  to produce the markup language message transformation process.","In step , the markup language processing device  executes the markup language message transformation process.","The flow chart of processing steps from  continues processing operations at the top of . Generally the markup language message transformation process  operates in the markup processor  to perform the aforementioned processing steps to process messages as explained herein. However, in this embodiment (i.e., in ), the markup language processing device  is adaptable to detect changes that the developer  (or some other software process) may have made to the transformations . When a change is detected, the markup language processing device  can cause the compiler  to re-produce a version of the markup language message transformation process  that accounts for the altered transformations. As such, the markup language processing device  of this invention can detect any changes to the transformations  and can account for such changes in real-time and can apply the transformation changes to messages ,  being processed without having to be reconfigured with an entirely new software application.","As an example, suppose a particular client computer system  operates a client application  that requires the ability for a recipient device  to be able to decrypt data using a certain decryption algorithm (e.g., RSA or DES) that uses a certain sized key. If the actual recipient device  does not have decryption capability itself, the developer  can create a transformation  within the markup language processing device  that looks for the encrypted data within messages from the client device  and applies security primitives as explained above to decrypt the data. The XSLT transformation  to do this task can specify the specific parameters such as key size for the agreed upon encryption\/decryption algorithm that the client  plans to use. Now suppose the operator of the client  decides to use a different key size or decides to change encryption algorithms altogether. Conventional server computer systems that contained the server application  that performs the decryption process themselves would have to be completely reprogrammed, recompiled, re-tested and re-installed, all using human effort, hard work and significant human intelligence (and would be prone to error), in order to accommodate a radical change such as this.","Conversely, the markup language processing device  configured in accordance with embodiments of the invention allows a developer  to simply make a small change to the XSLT transformation that specifies the key size to use for the encryption\/decryption algorithm, or that specifies application of a different security primitive that implements that newly selected algorithm. In response to the developer  making such a small change to the XSLT transformation (expressed in simple XML terms), as explained below, the markup language processing device  can detect the changed transformation  (the modified XSLT) and can, in real-time, operate the compiler  to perform a just-in-time compilation operation on the rules sets , the newly modified XSLT transformations , and the transform primitives , in order to create a new executable markup language message transformation process  that accounts for the changes. The effort expended by the developer  to implement this change is minimal, and the developer must install no new software. In a further enhancement to the embodiment, a graphical user interface can provide means of defining XML processing behavior (for example: encryption algorithm, location of SOAP header elements, desired RPC methods to be allowed or filtered, section of message to apply field-level digital signature, and so on). The markup language processing device can then accept user input via a graphical or text user interface, process it and generate XSLT, XPath, XQuery or other XML processing instructions. The operation is then proceed as explained above as a changed transformation , but with no hand-editing required (i.e., all changes created as a result of the user operating the GUI). As such, embodiments of the invention greatly simplify accommodation of changes to XML processing techniques. As such, as standards change and new features are added to XML processing technologies, the markup language processing device  of this invention can be readily and easily adapted to account for such advancements without significant re-engineering of software.","Returning attention now to the flow chart in , this adaptability feature of embodiments of the invention is illustrated in steps  through .","In step , the markup language processing device  identifies, using code (i.e., within the markup language message transformation process ) generated from the plurality of markup language data transformations , a start tag associated with the at least one tagged pre-transform data portion ,  in the message  () that matches one of the plurality of markup language data transformations .","In step , the markup language message transformation process  determines if the markup language transformation  defined in the markup language transformation language has been modified since a most recent operation of the markup language message transformation process . This can be done via date comparisons of the XSLT files and the executable version of the markup language message transformation process .","In step , if a markup language transformation  has been modified, the markup language processing device  performs a compiling operation on the markup language transformation (as well as the rule sets  and transformation primitives ) to produce a current version of the markup language message transformation process  that takes into account any changes resulting from the modification to the markup language transformations (and\/or changes in security primitives). In this step, the markup language processing device  also load the new version of the markup language message transformation process  into the markup processor  and executes the new version.","In step , in response to identifying the start tag, the new version of the markup language message transformation process  is activated and applies at least one of the transform primitives  specified by the matching markup language data transformation  (that might contain a change from the former version) to the pre-transform tagged portion of data  to transform the tagged portion of data according to the specific data processing task of that transform primitive into the post-transform data portion  in the message .","The example embodiment of the invention shown in the processing steps in  and as illustrated in  is also able to dynamically generate extensible markup language stylesheets  during application of transformations  by the transform processor  based on detected tagged message data , . The newly generated extensible markup language stylesheets  essentially define a new transformation  that may then be compiled  and dynamically applied  (e.g., into the set of transformations  available for use by the markup language message transformation process .","To illustrate this feature of the invention, in step  the extensible markup language message transformation process  applies a first transformation  to a first tagged pre-transform data portion of an incoming message  to produce the at least one tagged post-transform data portion that is an extensible markup language style sheet  (e.g., defining a new transform) that is dynamically generated based on the tagged pre-transform data. The compiler  automatically detects  this new dynamically generated stylesheet  and performs a just-in-time compilation  of this new dynamically generated stylesheet  and integrates this into the set of transformations  available for use by the currently operating markup language message transformation process  to allow this new transformation  to be applied to tagged message data portions of the message .","Then, in step , the currently operating markup language message transformation process  applies the dynamically generated extensible markup language style sheet  (i.e., via its compiled form as a new transformation ) to a second tagged pre-transform data portion (i.e., to other message data, perhaps subsequently received) of the message  to produce the at least one tagged post-transform data portion. This post-transform data portion may replaces the second tagged pre-transform data in the message  to product the new or resultant message .","In this manner, a markup language processing device  configured according to embodiments of the invention supports the dynamic ability to allow transformations  to change during runtime while accounting for such changes in message processing. The speed at which this occurs, and since the markup processor  is programmed with the markup language message transformation process  to operate in wire speed as the message  arrives (streams) into the interface . Further still, the aforementioned embodiment allows the markup language processing device  to dynamically generate entirely new transformations  based on received message data that can thereafter be applied to other data within the message , or to subsequently received messages.","Those skilled in the art will understand that there can be many variations made to the embodiments explained above while still achieving the same objective of those embodiments and the invention in general. As an example, it is to understood that embodiments of the invention are not limited to modifying or transforming only markup language portions of a message , . Rather, transformations can be applied to any portions of such messages, including, for example, packet headers containing protocol information (e.g., TCP\/IP packet information), binary (non-XML) data (e.g., ASN.1\/DER-encoded information) or traditional RPC encodings (e.g. Microsoft DCOM). The term tagged data portions is thus intended to be general in nature as used herein and includes, for example, headers fields of protocol headers as well as traditional XML tagged data and may include the data itself (without associated XML or other field header or tags). Accordingly, embodiments of the invention are not intended to be limiting to the aforementioned discussion, but rather, equivalents to the aforementioned processing steps are intended to be included as embodiments of the invention.",{"@attributes":{"id":"p-0131","num":"0153"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"## Annotated XML Rule set 128 configuration excerpt."},{"entry":"## XML manager; limits on size of messages, caching control, etc."},{"entry":"xmlmgr mgr2"},{"entry":"xml parser limits mgr2"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"bytes-scanned 200000000"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"exit"},{"entry":"## Specifies an example URL \u2033matching rule\u2033 where ALL matches"},{"entry":"anything"},{"entry":"## that IS_MSGCAT matches"},{"entry":"## a URL that has \u2033msgcat\u2033 in it somewhere will match this rule."},{"entry":"matching ALL"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"urlmatch *"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"exit"},{"entry":"matching IS_MSGCAT"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"urlmatch *msgcat*"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"exit"},{"entry":"## Here is a style policy, showing two different sets of rules"},{"entry":"## depending on what the input URL looks like."},{"entry":"stylepolicy madorfilter"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"rule IS_MSGCAT"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"filter INPUT store:\/\/\/filtermsgcat.xsl"]},{"entry":[{},"xform INPUT store:\/\/\/identity.xsl OUTPUT"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"exit"]},{"entry":[{},"rule ALL"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"filter INPUT store:\/\/\/madorfilter.xsl"]},{"entry":[{},"xform INPUT store:\/\/\/identity.xsl OUTPUT"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"exit"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"exit"},{"entry":"## Here is a firewall rule that listen on TCP port 9303 and applies the"},{"entry":"policy"},{"entry":"## transormation called \u2033madorfilter\u2033 to packets received on this port"},{"entry":"and then loops"},{"entry":"## the result of this transformation (i.e., policy output) back to the"},{"entry":"client."},{"entry":"xmlfirewall madorfilter"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"local-address 0 9303"]},{"entry":[{},"remote-address %loopback%"]},{"entry":[{},"xml-manager mgr1"]},{"entry":[{},"stylesheet-policy madorfilter"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"exit"},{"entry":"## A sample coprocoessor configuration for doing transformations."},{"entry":"## The input data will specify (via an XML processing instruction)"},{"entry":"## which stylesheet to run. Here we're listening on port 6001,"},{"entry":"## and using caching\/parse control mgr2"},{"entry":"xslcoproc sample-coproc 0 6001 mgr2"},{"entry":"## Similar to the above, but here we are acting as a proxy, but"},{"entry":"## rewriting the URL via config language."},{"entry":"urlrewrite rule1"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"rewrite (.*)TemplateName*(.*) $1$3 http:\/\/10.10.1.33:90\/wamu\/$2"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"exit"},{"entry":"xslproxy proxy1"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"local-address 0 8888"]},{"entry":[{},"remote-address 10.10.1.33 90"]},{"entry":[{},"xml-manager mgr1"]},{"entry":[{},"urlrewrite-policy rule1"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"exit"},{"entry":"## A more complicated firewall that maps maps URLs to input"},{"entry":"## format. For example, we can turn base64 into XML, URL query"},{"entry":"## strings into XML, and so on."},{"entry":"input-conversion-map normal-map"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"default urlencoded"]},{"entry":[{},"rule \u2033xml$\u2033 xml"]},{"entry":[{},"rule \u2033base64$\u2033 base64"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"exit"},{"entry":"## A policy that has one set of actions on the request, and another"},{"entry":"## on the response. HAS_TEST1 is a URL match pattern (not shown"},{"entry":"here)."},{"entry":"stylepolicy http-post-example"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"request-rule HAS_TEST1"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"xform INPUT store:\/\/\/query2doc.xsl OUTPUT"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"exit"]},{"entry":[{},"request-rule ALL"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"# extract the parameters"]},{"entry":[{},"convert-http INPUT TEMP-PARAMETERS normal-map"]},{"entry":[{},"# pass them on to the backend"]},{"entry":[{},"xform TEMP-PARAMETERS store:\/\/\/identity.xsl OUTPUT"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"exit"]},{"entry":[{},"response-rule ALL"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"xform INPUT store:\/\/\/identity.xsl OUTPUT"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"exit"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"exit"},{"entry":"xslproxy XMLifier"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"local-address 0 5710"]},{"entry":[{},"remote-address 10.10.1.101 5711"]},{"entry":[{},"xml-manager mgr1"]},{"entry":[{},"stylesheet-policy http-post-example"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"exit"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0132","num":"0154"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Is this a \u2033known\u2033 URI in the XML DSIG namespace?"},{"entry":"static bool"},{"entry":"dsiguri(const char* uri, const char* tail)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"static char uribase[] = \u2033http:\/\/www.w3.org\/2000\/09\/xmldsig#\u2033;"]},{"entry":[{},"return strncmp(uri, uribase, sizeof uribase \u2212 1) == 0"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"&& strcmp(uri + sizeof uribase \u2212 1, tail) == 0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"enum SigMechType"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MECH_TYPE_RSA_SHA1,"]},{"entry":[{},"MECH_TYPE_DSA_SHA1,"]},{"entry":[{},"MECH_TYPE_HMAC_SHA1,"]},{"entry":[{},"MECH_TYPE_UNKNOWN"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":"static SigMechType"},{"entry":"GetMechType(const char* mechanism)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (dsiguri(mechanism, \u2033rsa-sha1\u2033))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return MECH_TYPE_RSA_SHA1;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (dsiguri(mechanism, \u2033dsa-sha1\u2033))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return MECH_TYPE_DSA_SHA1;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (dsiguri(mechanism, \u2033hmac-sha1\u2033))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return MECH_TYPE_HMAC_SHA1;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return MECH_TYPE_UNKNOWN;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/"},{"entry":"\/\/"},{"entry":"\/\/ XML Signature extension functions"},{"entry":"\/\/"},{"entry":"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/"},{"entry":"char*"},{"entry":"drSOAPProcessor::Sign(drSOAPProcessor* self,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dpHeap h,"]},{"entry":[{},"const char* mechanism,"]},{"entry":[{},"const char* digest, const char* keyid)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SigMechType smt = GetMechType(mechanism);"]},{"entry":[{},"if (smt == MECH_TYPE_UNKNOWN)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return drXMLMsgCat::Find(\u2033badsignmech\u2033, h);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (strncmp(keyid, \u2033name:\u2033, 5) != 0)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return drXMLMsgCat::Find(\u2033badkeyid\u2033, h);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"keyid += 5;"]},{"entry":[{},"unsigned char buff[SHA_DIGEST_LENGTH];"]},{"entry":[{},"if (dcBase64Encoder::Decode(digest, buff, sizeof buff) != sizeof buff)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return drXMLMsgCat::Find(\u2033decodehashfailed\u2033, h);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"drCryptoKey* key = drMgmtStore::getMgmtStore( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2212>GetCryptoKeyObject(keyid);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (key == NULL)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return drXMLMsgCat::Find(\u2033namedkeynotfound\u2033, h);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (!self\u2212>KeyAllowed(key))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return drXMLMsgCat::Find(\u2033namedkeynotallowed\u2033, h);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"char* result = NULL;"]},{"entry":[{},"switch (smt)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"default:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"result = drXMLMsgCat::Find(\u2033signmechnothandled\u2033, h);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case MECH_TYPE_RSA_SHA1:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"RSA* rsa = EVP_PKEY_get1_RSA(key\u2212>getPrivKey( ));"]},{"entry":[{},"if (rsa == NULL)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return drXMLMsgCat::Find(\u2033rsakeynotretriev\u2033, h);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"result = dcSigning::Sign(buff, SHA_DIGEST_LENGTH, rsa, h);"]},{"entry":[{},"RSA_free(rsa);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case MECH_TYPE_DSA_SHA1:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DSA* dsa = EVP_PKEY_get1_DSA(key\u2212>getPrivKey( ));"]},{"entry":[{},"if (dsa == NULL)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return drXMLMsgCat::Find(\u2033dsakeynotretrievable\u2033, h);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"result = dcSigning::Sign(buff, SHA_DIGEST_LENGTH, dsa, h);"]},{"entry":[{},"DSA_free(dsa);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"dpLogInfo (DP_LOG_EVENT_CRYPTO,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CRYPTO_EVENT_SIGNATURE_GENERATE_DONE);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return result;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/"},{"entry":"\/\/"},{"entry":"\/\/ Registration"},{"entry":"\/\/"},{"entry":"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/"},{"entry":"void"},{"entry":"drSOAPProcessor::RegisterXSLTExtensions (xjExtensionsManager *xpr)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dpTraceDebug2 (\u2033drSOAPProcessor RegisterExtensionFunctions\\n\u2033);"]},{"entry":[{},"qname_pool* qp = xpr\u2212>GetQnamePool ( );"]},{"entry":[{},"xjExtensionElement *e;"]},{"entry":[{},"xjExtensionFunction *f;"]},{"entry":[{},"e = xpr\u2212>CreateElement("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"qname_createAbsolute(qp, DP_EXTFUNC_ABS_QNAME(\u2033reject\u2033)),"]},{"entry":[{},"(xjExtFuncPtr)Reject, xjExtension::kSideEffects);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"e\u2212>AddUserDataArgument(soapkey);"]},{"entry":[{},"e\u2212>AddStringValueArgument(\u2033.\u2033);"]},{"entry":[{},"e\u2212>AddTrueFalseArgument(\u2033@override\u2033, \u2033false\u2033);"]},{"entry":[{},"f = xpr\u2212>CreateFunction("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"qname_createAbsolute(qp, DP_EXTFUNC_ABS_QNAME(\u2033sign\u2033)),"]},{"entry":[{},"(xjExtFuncPtr)Sign, ketString, 0);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"f\u2212>AddUserDataArgument(soapkey);"]},{"entry":[{},"f\u2212>AddHeapArgument( );"]},{"entry":[{},"f\u2212>AddCallArguments(3, ketString, ketString, ketString);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0133","num":"0155"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version=\u20331.0\u2033?>"},{"entry":"<xsl:stylesheet version=\u20331.0\u2033"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"xmlns:xsl=\u2033http:\/\/www.w3.org\/1999\/XSL\/Transform\u2033"]},{"entry":[{},"xmlns:SOAP=\u2033http:\/\/schemas.xmlsoap.org\/soap\/envelope\/\u2033"]},{"entry":[{},"xmlns:wsse=\u2033http:\/\/schemas.xmlsoap.org\/ws\/2002\/07\/secext\u2033"]},{"entry":[{},"xmlns:dp=\u2033http:\/\/www.datapower.com\/extensions\u2033"]},{"entry":[{},"xmlns:dpconfig=\u2033http:\/\/www.datapower.com\/param\/config\u2033"]},{"entry":[{},"extension-element-prefixes=\u2033dp\u2033"]},{"entry":[{},"exclude-result-prefixes=\u2033dp dpconfig\u2033"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":">"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:output method=\u2033xml\u2033\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<!--"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Signing templates take the following parameters (they're strings"]},{"entry":[{},"unless noted otherwise):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1. node: what to sign; a nodeset."]},{"entry":[{},"2. refuri: the uri to put in the References element."]},{"entry":[{},"3. keyid: the identifier of the signing key."]},{"entry":[{},"4. certid: the identifier of the signing certificate; if not"]},{"entry":[{},"\u2003empty, it is used to populate KeyInfo\/X509Data elements"]},{"entry":[{},"5. sigalg: signing algorithm, either \u2033rsa\u2033 (default) or \u2033dsa\u2033"]},{"entry":[{},"6. c14nalg: C14N type, either \u2033c14n\u2033 (default) or \u2033c14n-exc\u2033"]},{"entry":[{},"7. keyinfo: optional nodeset to output in the KeyInfo element"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"-->"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<!-- Select the signature mechanism based on $sigalg -->"]},{"entry":[{},"<xsl:template name=\u2033select-sigmech\u2033>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsl:param name=\u2033sigalg\u2033\/>"]},{"entry":[{},"<xsl:choose>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsl:when test=\u2033$sigalg = \u2032rsa\u2032\u2033>http:\/\/www.w3.org\/2000\/09\/xmldsig#rsa-sha1<\/xsl:when>"]},{"entry":[{},"<xsl:when test=\u2033$sigalg = \u2032dsa\u2032\u2033>http:\/\/www.w3.org\/2000\/09\/xmldsig#dsa-"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"sha1<\/xsl:when>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:otherwise>UNKNOWN SIGNING ALGORITHM<\/xsl:otherwise>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsl:choose>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/xsl:template>"]},{"entry":[{},"<!-- Select the canonicalization mechanism based on $c14nalg -->"]},{"entry":[{},"<xsl:template name=\u2033select-c14nmech\u2033>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsl:param name=\u2033c14nalg\u2033\/>"]},{"entry":[{},"<xsl:choose>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:when test=\u2033$c14nalg = \u2032c14n\u2032\u2033>http:\/\/www.w3.org\/TR\/2001\/REC-xml-c14n-"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"20010315<\/xsl:when>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:when test=\u2033$c14nalg = \u2032exc-c14n\u2032\u2033>http:\/\/www.w3.org\/2001\/10\/xml-exc-"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"c14n#<\/xsl:when>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:otherwise>UNKNOWN CANONICALIZATION MECHANISM<\/xsl:otherwise>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsl:choose>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsl:template>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<!-- Generate the KeyInfo block from $certid and $keyinfo \u2212>"},{"entry":"<xsl:template name=\u2033generate-keyinfo-block\u2033>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsl:param name=\u2033certid\u2033\/>"]},{"entry":[{},"<xsl:param name=\u2033keyinfo\u2033\/>"]},{"entry":[{},"<xsl:if test=\u2033$keyinfo\u2033>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<KeyInfo xmlns=\u2033http:\/\/www.w3.org\/2000\/09\/xmldsig#\u2033><xsl:copy-of"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"select=\u2033$keyinfo\u2033\/><\/KeyInfo>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/xsl:if>"]},{"entry":[{},"<xsl:if test=\u2032$certid!=\u2032\u2033\u2033>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<KeyInfo xmlns=\u2033http:\/\/www.w3.org\/2000\/09\/xmldsig#\u2033>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<X509Data>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<X509Certificate>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<xsl:value-of select=\u2033dp:base64-cert($certid)\u2033\/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/X509Certificate>"]},{"entry":[{},"<X509IssuerSerial>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<X509IssuerName><xsl:value-of select=\u2033dp:get-cert-"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"issuer($certid)\u2033\/><\/X509IssuerName>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<X509SerialNumber><xsl:value-of select=\u2033dp:get-cert-"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"serial($certid)\u2033\/><\/X509SerialNumber>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/X509IssuerSerial>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/X509Data>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/KeyInfo>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsl:if>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/xsl:template>"},{"entry":"<!--"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"dp-sign: A detached signature"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"-->"},{"entry":"<xsl:template name=\u2033dp-sign\u2033>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsl:param name=\u2033node\u2033\/>"]},{"entry":[{},"<xsl:param name=\u2033refuri\u2033\/>"]},{"entry":[{},"<xsl:param name=\u2033keyid\u2033\/>"]},{"entry":[{},"<xsl:param name=\u2033certid\u2033\/>"]},{"entry":[{},"<xsl:param name=\u2033sigalg\u2033 select=\u2033\u2032rsa\u2032\u2033\/>"]},{"entry":[{},"<xsl:param name=\u2033c14nalg\u2033 select=\u2033\u2032c14n\u2032\u2033\/>"]},{"entry":[{},"<xsl:param name=\u2033keyinfo\u2033\/>"]},{"entry":[{},"<!-- The various mechanisms we're using. -->"]},{"entry":[{},"<xsl:variable name=\u2033sigmech\u2033>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:call-template name=\u2033select-sigmech\u2033>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:with-param name=\u2033sigalg\u2033 select=\u2033$sigalg\u2033\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsl:call-template>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/xsl:variable>"]},{"entry":[{},"<xsl:variable name=\u2033c14nmech\u2033>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:call-template name=\u2033select-c14nmech\u2033>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:with-param name=\u2033c14nalg\u2033 select=\u2033$c14nalg\u2033\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsl:call-template>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/xsl:variable>"]},{"entry":[{},"<xsl:variable name=\u2033digmech\u2033>http:\/\/www.w3.org\/2000\/09\/xmldsig#sha1<\/xsl:variable>"]},{"entry":[{},"<xsl:variable name=\u2033digest\u2033>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:choose>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:when test=\u2033$c14nalg = \u2032exc-c14n\u2032\u2033>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:value-of select=\u2033dp:exc-c14n-hash(\u2033, $node, false( ))\u2033\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/xsl:when>"]},{"entry":[{},"<xsl:otherwise>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:value-of select=\u2033dp:c14n-hash($node, false( ))\u2033\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsl:otherwise>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsl:choose>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsl:variable>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsl:variable name=\u2033namespaces\u2033 select=\u2033dp:output-namespaces( )\u2033\/>"]},{"entry":[{},"<xsl:variable name=\u2033signedinfo-subdocument\u2033 xml:space=\u2033preserve\u2033>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<SignedInfo xmlns=\u2033http:\/\/www.w3.org\/2000\/09\/xmldsig#\u2033><xsl:copy-of"},{"entry":"select=\u2033$namespaces[name(.)]\u2033\/>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<CanonicalizationMethod Algorithm=\u2033{$c14nmech}\u2033\/>"]},{"entry":[{},"<SignatureMethod Algorithm=\u2033{$sigmech}\u2033\/>"]},{"entry":[{},"<Reference URI=\u2033{$refuri}\u2033>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Transforms>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Transform Algorithm=\u2033{$c14nmech}\u2033\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Transforms>"]},{"entry":[{},"<DigestMethod Algorithm=\u2033{$digmech}\u2033\/>"]},{"entry":[{},"<DigestValue><xsl:value-of select=\u2033$digest\u2033\/><\/DigestValue>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Reference>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<\/SignedInfo>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/xsl:variable>"]},{"entry":[{},"<xsl:variable name=\u2033signedinfo-hash\u2033>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:choose>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:when test=\u2033$c14nalg = \u2032exc-c14n\u2032\u2033>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:value-of select=\u2033dp:exc-c14n-hash(\u2033, $signedinfo-subdocument\/*, false( ))\u2033\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/xsl:when>"]},{"entry":[{},"<xsl:otherwise>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:value-of select=\u2033dp:c14n-hash($signedinfo-subdocument\/*, false( ))\u2033\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsl:otherwise>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsl:choose>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsl:variable>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Signature xmlns=\u2033http:\/\/www.w3.org\/2000\/09\/xmldsig#\u2033>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsl:copy-of select=\u2033$signedinfo-subdocument\u2033\/>"]},{"entry":[{},"<SignatureValue>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:value-of select=\u2033dp:sign($sigmech,$signedinfo-hash,$keyid)\u2033\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/SignatureValue>"]},{"entry":[{},"<xsl:variable name=\u2033kib\u2033>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:call-template name=\u2033generate-keyinfo-block\u2033>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsl:with-param name=\u2033certid\u2033 select=\u2033$certid\u2033\/>"]},{"entry":[{},"<xsl:with-param name=\u2033keyinfo\u2033 select=\u2033$keyinfo\u2033\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsl:call-template>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/xsl:variable>"]},{"entry":[{},"<xsl:copy-of select=\u2033$kib\u2033\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<\/Signature>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/xsl:template>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/xsl:stylesheet>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0134","num":"0156"}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular description of embodiments of the invention, as illustrated in the accompanying drawings and figures in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, with emphasis instead being placed upon illustrating the embodiments, principles and concepts of the invention.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIGS. 6 through 9"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
