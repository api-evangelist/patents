---
title: Distributed extract, transfer, and load (ETL) computer method
abstract: The present invention is a distributed extract, transform and load (ETL) method for delivering information within a computing environment, comprising extracting information from an information source and transforming the extracted information. The transformed information is isolated by wrapping the transformed information into a message envelope having a standard format. The message envelope is routed to at least one information target, unwrapped to reveal the received information, preferably transformed again, and loaded into the information target. The extraction, transformation, and adaptation steps on the source side are isolated from the routing step such that the extraction, transformation, and adaptation steps on the source side may be executed simultaneously for a plurality of information sources distributed across the computing environment to produce a plurality of message envelopes. The routing, unwrapping, mapping, transformation, and loading steps on the target side are repeated for each of the plurality of message envelopes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07051334&OS=07051334&RS=07051334
owner: Sprint Communications Company L.P.
number: 07051334
owner_city: Overland Park
owner_country: US
publication_date: 20010427
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","REFERENCE TO A MICROFICHE APPENDIX","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["Not applicable.","Not applicable.","Not applicable.","The invention is a distributed extract, transfer, and load (ETL) computer method (hereinafter referred to as Distributed ETL) for linking together multiple information domains residing across an enterprise-wide computing environment in order to share corporate information, while reducing the time required to deliver that information. The invention overcomes the many-to-many relationships that exist between information sources and targets residing within each domain by implementing a central router to deliver information to and from these domains.","Today, better integration of business information systems throughout the enterprise and incorporating more recent database management technologies results in real managerial competitive advantages. Information to support management decision making typically is extracted from operations systems and loaded into a data warehouse. Information as used herein includes data internal to a corporation that is generated in the day-to-day business operations of the corporation, aggregations and summaries of the internal data, and external information such as demographic and geospatial data that can be related to the internal data. A data warehouse is a large storage facility within the information technology, IT, system that typically holds the current and historical information across an entire enterprise. It most likely consists of numerous databases and may exist on multiple platforms (operating systems). A database can be defined as a collection of information organized in such a way that a computer program can quickly select desired pieces of data. One can think of a database as an electronic filing system.","In the past, it was only viewed as necessary to capture periodic data extracts supplied by operational computing systems to update the data warehouse on a weekly or monthly basis. Strategic dependence on data warehousing was viewed as long-term and historical, not as a real time activity. In contrast, today's business environment is worldwide and does not stop at five o'clock P.M. For example, the Internet allows commerce to continue 24 hours a day, seven days a week. As a result, customer service support and normal telephony operations within many business organizations likewise operate around the clock.","Furthermore, marketing practices have evolved from mass media advertising to more personalized target marketing, which cuts expenses while providing customized treatment. To enable customized marketing, companies must know and understand their customers. Much of this understanding is made possible through groups such as Decision Support Services (DSS), the business group within an enterprise that has traditionally supported data warehousing. To be effective in supporting the extended operating and marketing efforts of an enterprise, information should be processed and pushed back from DSS into the customer contact areas such as customer service support, telemarketing and advertising campaign management as rapidly as possible. Thus, it is preferred that DSS be capable of receiving, processing, and providing information on an ongoing, near real time basis.","This invention, referred to as Distributed ETL, improves on current DSS services by providing the advantages of scalability of an extract, transfer and load (ETL) application and the near real time event processing of an enterprise application integration (EAI) application without the disadvantages associated with each.","The present invention is a distributed extract, transform and load (ETL) method for delivering information within a computing environment, comprising extracting information from an information source and transforming the extracted information. The transformed information is isolated by wrapping the transformed information into a message envelope having a standard format. The message envelope is routed to at least one information target, unwrapped to reveal the received information, preferably transformed again, and loaded into the information target. The extraction, transformation, and adaptation steps on the source side are isolated from the routing step such that the extraction, transformation, and adaptation steps on the source side may be executed simultaneously for a plurality of information sources distributed across the computing environment to produce a plurality of message envelopes. The routing, unwrapping, mapping, transformation, and loading steps on the target side are repeated for each of the plurality of message envelopes.","Within the enterprise, information takes many forms depending on its usage. In other words, the business usage of the information drives its resultant structure. This information can be grouped into information domains according to its business usage or function as shown diagrammatically in . The information domains include operations  used for daily operation information such as on-line transaction processing (OLTP); exploration zones  which includes data mining; data warehouse  which is the consolidated information store; and summarized views  used for predefined queries and on-line analytical processing (OLAP) reports.","As shown in , the information domains overlap, indicating that the boundaries between business information domains are not absolutely crisp. Some warehouse information can be summarized, a characteristic of OLAP summary reporting, while OLAP tools sometimes drill down into detailed warehouse tables. Because of the differing data structures required to support the differing business uses for the data, the same information may be used for multiple business functions. Therefore, the information domains are interdependent upon each other. The relationship between information domains can become a complex web linking information sources and information targets. These relationships can be intermixed and multidirectional, thus defining a many-to-many relationship between business information domains.","Current enterprise application integration (EAI) applications, such as IBM's MQ Series, Tibco's Rendezvous or Saga's Saga Vista, are available to coordinate information flow between information domains to facilitate business processes. These traditional EAI systems are synchronous, transaction driven systems that operate in real time or near-real time, but have certain other disadvantages (e.g., scalability limitations). An alternative tool is a standard extract, transform and load (ETL) application, which is an asynchronous, batch driven system that can be scaled up but typically suffers from delayed event processing.","Traditional EAI applications direct the flow of information between domains through a center point called a hub, or more commonly a message broker to manage many-to-many relationships in a scalable manner. The hub and spoke architecture is applicable to managing ETL needs that exist between information domains as well.  is a diagrammatic representation of a basic hub and spoke architecture. The staging hub  is at the center of the hub and spoke figure with connecting spokes , , , and  to the various information domains, namely operations , exploration zones , data warehouse , and summarized views , respectively.","In contrast to the traditional EAI and standard ETL applications which rely on the basic hub and spoke architecture described above, this invention is a distributed extract, transfer, and load (ETL) computer application to address the need for linking multiple information sources and targets together to deliver shared corporate information, while reducing the time required to deliver that information. The Distributed ETL overcomes the many-to-many relationships that exist between information sources and targets by implementing a spartan central router passing information to and from these domains through \u201cthick spokes.\u201d",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3","b":["20","50","100","130","75"]},"The \u201cthick\u201d spokes , ,  and  are used to manage specific source\/target information processing (also referred to as staging processes, which comprise extraction, transformation, adaptation, and loading functions) as may be required prior to and\/or after routing of the information. In contrast, the router component  is spartan in that it primarily manages delivery (i.e., routing) the information and does not perform processing steps thereon. Staging processes that are specific to a source or target are pushed out closer to where the spoke connects to that source or target, in contrast to being performed by the router component. By isolating the router component to purely delivery functions, the entire architecture is streamlined, enhancing its speed, efficiency, parallelism, and scalability. In sum, the architecture of the present invention comprises: 1) the staging processes to manipulate the information (in the \u201cthick\u201d spokes), and 2) the spartan router component to deliver the information. Therefore, the overall architecture can best be referred to as a Distributed ETL (extract, transform and load).","The staging processes, or the \u201cthick\u201d spokes of the Distributed ETL, are comprised of several software components to process information as necessary prior to and\/or after routing it. Referring to , a Distributed ETL architecture is shown wherein information is being routed from any one of two information sources  and  to any one of two information targets  and . Any operable number of information sources and targets can be linked using the Distributed ETL of this invention, and the number of sources and targets shown in  was chosen for convenience purposes only. On the information source side of the router component  (i.e., the source \u201cthick\u201d spoke), the Distributed ETL comprises extract components  and ; transform components  and ; and source adapter components  and . On the information target side of the router component  (i.e., the target \u201cthick\u201d spoke), the Distributed ETL comprises target adapter components  and ; transform components  and ; and load components  and . Additional adapter components  and  may optionally be used on the source spoke and the target spoke, respectively. Combined, these components insolate the information sources and targets from the router component and provide a standard interface for the router.","The first step, beginning at an information source locations  or  involves the extraction of information by the extract component  or . The extract component is a software program that functions as a connector to an external information source for retrieving information from the source. Information can be pulled or pushed from the source, and preferably the source pushes the information to the Distributed ETL environment. In most cases, it is desirable to retrieve only updates, revisions, changes and the like to the information (\u201cinformation changes\u201d), as this limits the amount of information that needs to be delivered to the targets. Methods to extract the information changes from the source include:\n\n","The extracted information is then passed from extract component  or  to the transform component  or , respectively. Operational systems are the primary information sources in an enterprise and typically employ highly normalized data structures that optimize OLTP performance critical to real time, customer facing processes. Normalized data structures tend to use multiple tables to minimize recurring data forms and data redundancy. Data redundancy and recurring formats within records\/rows can cause severe performance penalties in an environment having a high number of information updates. The fragmentation of normalized design, useful in operational systems, creates problems when shipping the information in a normalized format to remote targets. The target must know the business rules, or referential integrity, that logically ties the several table structures together as an integrated, functioning whole. In order to pass the normalized data in a message format, each piece of information must be tagged in a way that relates it to the other associated information so they can all be delivered together and assembled according to the master blueprint to a state of referential integrity, which is very impractical. Thus, in order to implement message based transport, denormalization of the data to some extent is required so that sufficient information is contained in each message to allow interested targets to easily identify and subscribe to events they wish to receive. This is the essence of packet based messaging, i.e., that each packet is self-addressed by the information contained within it. The denormalization process required to create these packets relies on transformation steps, with full knowledge of the source referential integrity rules (i.e., business rules governing the information structure).","The transform component's function is to perform transformations on the extracted information. As described above, transformation refers to the application of specific business rules governing the structure of the information. For example, captured information such as the price of a certain product and the quantity sold to a customer may need to be transformed. The desired form of this information might be the extended price. By applying the business rule for extended price, e.g., product price multiplied by quantity sold, the information has been transformed to the desired structure. Another example of information transformation is where a source captures customer names in the form of full name including the middle initial, e.g., John D. Smith. But, the desired form of this information for one specific target could be first and middle initials followed by the last name, e.g., J. D. Smith. Additionally, a different target may desire the same information in yet another format, such as last name first, followed by first name, followed by middle initial, e.g., Smith, John D. The last two examples demonstrate how two different targets can access the same source information and transform it in different ways that are acceptable to their business needs.","Transformations are used whenever the format of the information at the target, as defined by the business needs, does not match the format of the information extracted or arriving from the source. Stated alternatively, transformations are used to apply business rules that are common to the enterprise on the source side, and specific to the target on the target side. Typically, a source-side transformation is performed in order to facilitate packet based messaging, as discussed previously. Also, a target-side transformation typically is performed in order to facilitate the incorporation of information from multiple sources into a single target. In other words, a benefit of information targets is that they consolidate information from multiple sources, which frequently involves transformation. Even where a target receives information only from a single source, typically the target adds value by creating different perspectives of that information through aggregation and summarization, which also involve transformation. Where the target only displays detailed data without further transformation, such information may be read (i.e., queried) directly from an enterprise data warehouse, which typically has all source rules already applied. However, a data warehouse typically uses a normalized data structure, and thus a transformation may be required in SQL queries to return information in a meaningful format.","The transformed information is now ready to be delivered to the target but must first pass through the source adapter component  or . The source adapter component functions asynchronously as a connector to the router component  thereby isolating transformations from the router component and ensuring that the router component's primary function is delivery of the information (in contrast to the pre-routing information processing in the \u201cthick\u201d source spokes and the post-routing information processing in the \u201cthick\u201d target spokes). Herein lies (both for the source adapter and as discussed below, for the target adapter) the adapter component's primary function, to standardize and simplify the connection to the router component. The source adapter component  or  is implemented in software and wraps the transformed information in a standard message format, preferably a structured event format such as CosNotification, which is part of the publicly available CORBA standard. The CosNotification structured event is supported by various application server platforms such as WebLogic available from BEA Systems, Inc. Hereinafter, the adapted information is referred to as a message envelope.","The message envelope is sent to a message queue by the adapter to await distribution via the router component . The source adapter must be intimately aware of content of the extracted and transformed information given that a single source may provide multiple types of information such as an addition, a revision, or a deletion of information. Because some targets may wish to subscribe to, or receive, only some of these information types, the source adapter must provide the specific information type for each message envelope sent to the router. To do this, the source adapter must have access to the business rules that define how to identify each type of information. For example, a certain code or date value may differentiate between an addition and a revision. Once the information type is identified, the source adapter tags the message envelope header with the proper message name (also referred to as the source ID) that will then be used for routing to the appropriate subscribing targets.","Meta data is used for control and management of information within the Distributed ETL application. Meta data is defined as \u201cdata about data\u201d or facts about the information architecture within an organization. Meta data describes how, when, and by whom a particular set of information was collected, and how the information is formatted. Meta data is essential for understanding information stored in data warehouses, and the meta data is stored in a meta data repository. An example of meta data stored in the repository is transformation rules that describe how to move information from a transactional source database to a multidimensional target database and the aggregations and calculations that are applied to the information coincident to such a move. Another example of meta data in the repository is business rules (such as the definition of revenue or a common list of product codes) that multiple software components may want to access. Another example is when moving information from a source to a target, the meta data is checked to determine the appropriate characteristics of the data. For example, where a numeric field is required, an alpha numeric information piece would be rejected. When the adapter component detects such an error, the adapter may either route the information to an error queue rather than sending it on to the router component, or alternatively correct the information on the fly according to predetermined business rules. In sum, meta data provides transparent access to information.","Because the information processing within the thick spokes of the Distributed ETL runs in parallel, synchronization is important and can be accomplished by tracking the information with meta data. The source adapter component utilizes a meta data repository to provide a \u201croad map\u201d and rules for the information that it processes. The meta data stored within the meta data repository can be referred to as the content definition. Analogous to a COBOL copybook in a COBOL program, the content definition specifies the structure and naming conventions for the content, that is how specific fields are names, field sizes, formats, etc. within the record content. The key associated with this content definition that defines where in the meta data repository the full content definition can be found is referred to as the content definition ID. These are the keys to the meta data and only the keys need to be passed through the router component rather than the whole content definition.","In a preferred embodiment, the target knows the source that it will be subscribing to in advance and simply references the content definition from the metadata repository when the target adapter is constructed. Thus, no content definition IDs (i.e., keys) need to be passed at all. Alternatively, where the content of each message may rely on a different document type definition (DTD) format, for example source information comprising extended markup language (XML) files, the key for the DTD may be sent with the message for retrieval on the target side rather than shipping the entire DTD with each message envelope. This significantly reduces the data transmitted and increases efficiency.","The utilization of the meta data repository by the adapter components of the Distributed ETL application and a parsing of the message envelope that is distributed by the router component are depicted in . The source adapter component  pulls the content definition  from the meta data repository . The adapter then uses the content definition  to help process the transformed information (referred to as content ) passed to it from the transform component as previously described in . The content is the information extracted from the source, expanded and\/or modified by the transform, and its definition is stored in the metadata store. Preferably, the content definition is defined and stored prior to the processing of any information by the adapter. The adapter creates the message envelope (using a structured event format) by performing simple mapping of the content to a uniform format and by building header information such as the message name and source ID, which is used to route the message envelope.","The adapter component attaches a header to the content creating a message envelope . The header includes a source ID  used to route the content to the appropriate targets by the router component. The message envelope  may also contain the content definition ID  and preferably will include the content . The router component delivers the message envelope  by utilizing a router table  as shown in  and discussed below. The router table  is stored in local memory to do an address lookup to find the subscribing target  and match its source ID  with the source ID  in the message envelope .","Referring to  on the exiting side of the routing function (i.e., the thick target spoke), near the target or targets, additional adapters  and\/or  implemented in software read the router component output queue and remove the envelope from the distributed information. Referring to  the adapter  retrieves the content definition  from the meta data repository  by reference to the content definition ID  of the retrieved message envelope . Referring to  transformations can be made in the target thick spoke (i.e., post-delivery by the router component), if necessary, according to the target requirements, with an additional transform component  or . The information is then passed to the respective load component  or . The load component preferably uses an Application Programming Interface (API) software function to load the information into the target  and . An API is useful to abstract the load operation from the specific characteristics of a given physical datastore\/file. In a typical embodiment, the target is a data warehouse and\/or a data mart.","Multiple adapters are possible in the source and target thick spokes, as shown in . On the source side, additional source adapter  is shown between the extract component  and transform component . On the target side, additional target adapter  is shown between transform component  and load component . These additional adapters allow for different technologies to coexist without requiring extensive and costly integration. For example, an additional adapter may be used on the source side for transporting an extracted file to a different platform for transformation. Another example, an additional adapter may be used to enable a transactional system to flow events directly into a transformation process in near-real-time (shown as process  in ).","The router component  is an important component in the Distributed ETL, because all information sources and targets are connected through it. The key function of the router component is to successfully route each message envelope from its publishing source to a single subscribing target or multiple subscribing targets. It is comprised of multiple software components that are message based, reading input from and writing output to message queues, and should be generalized to the extreme. Ideally, routing should be easy to change and require a minimal time to execute.","The router component  uses memory-based messaging to transfer information between publishing sources and subscribing targets. More specifically, messaging occurs on the source side between the source adapter and the router and on the target side between the router and the target adapter. In summary, information is extracted from a source and transformed. The adapter component creates the message envelope and publishes the source message to the router via a message queuing mechanism. The router subscribes to all source queues, thereby receiving the message envelopes to be routed. The router performs a lookup in the routing tables using the source ID as a key. The router publishes the message envelope to one or more target destination queues. The target adapter subscribes to a message queuing mechanism, unwraps the message envelope, and passes the information to a target transformation component. The information is then passed to a load component where it is written directly to the ultimate target. Linking distributed sources or targets with messaging functionality enables a minimum handling time per unit of information. Pairing transactional information extraction and loading with messaging enables near real time processing of extraction and loading functions.","Guaranteed message delivery as a part of the publish and subscribe functionality is important to ensure system reliability and verify that during exchange of messages no information packets are lost. When the network is available, messages will be delivered immediately. When the network is down, messages are still guaranteed to be delivered, eventually, but with some latency. In the latter case, middleware guarantees that messages are delivered as long as the network becomes available within a specified time period. In addition, messaging should provide the assurance of non-duplicate delivery, meaning the messages are only delivered once.","Messaging utilizes a queue system, which allows for a plurality of information sources to simultaneously publish to a router component inbox queue, preferably where each of the sources is capable of publishing independently of the others. A source (via the extract, transform, and adapt components discussed previously) can publish to an inbox queue while the router component is subscribing to that inbox queue. Unlike a sequential file, the router component can read message envelopes from the front of the inbox queue at the same time that the source is publishing new message envelopes into the back of the inbox queue. This allows faster aggregate throughput than a traditional batch environment. A router component can then publish a message envelope to a subscribing target's queue, which the target can access (as discussed previously with regard to the target adapter) and store for later retrieval matching its business cycle needs.","Performing its functionality in memory keeps the router component robust, as memory is hundreds to thousands of times faster to access than disk. Thus, it is preferred to use routing tables that can be maintained in memory for the control of routing destinations. The routing tables are backed up by persistent storage such that the tables may be reloaded to memory when the power is restored after a failure, or to update the content of the table when target subscriptions are changed.",{"@attributes":{"id":"p-0047","num":"0050"},"figref":"FIG. 5","b":["75","82","12","13","14","182","183","184","84","86","86","84","94","96","90","92","88","86","97","98","99"]},"Downstream of the routing function another adapter  reads the message envelope . It uses the content definition  retrieved from the meta data repository  to extract the content  from the distributed information, as described previously. The information is subsequently processed in the thick target spoke on its way to the appropriate target as described previously in relation to .",{"@attributes":{"id":"p-0049","num":"0052"},"figref":"FIG. 7","b":["12","7","22","26","28","75"]},"On the output side of the router component , the adapter component  reads the information from a message queue and takes the information out of the message envelope (removes the header). In a preferred embodiment, the source information (including the type of information such as an addition, deletion, etc.) contained within the message envelope is specific enough such that the router component can route the message envelope only to targets desiring (i.e., subscribing) such information, thereby eliminating the need for filtering. In a non-preferred embodiment, the adapter component  passes the information through an optional filter component . The filter component's function is to only accept information required by the target and to reject non-conforming information. The filtered information may now undergo more transformations by the transform component  that can be applied at the event level, i.e., one message at a time. In other words, all information need not be made available at the same time such as sorting a group of records, all of which must be made available in order to perform the search. In contrast for example, a trunk code could be used in a message to perform a lookup and the trunk location returned to update the same record. Where the information has been acquired continuously over a period of time, the information in a preferred embodiment is passed to the time-period aggregator component . Here the information can be accumulated in an \u201cactive\u201d partition or file and later retrieved by toggling the \u201cactive\u201d partition  to an \u201cinactive\u201d state , allowing it to be read into the target transformation. The information can be held to accommodate a business time cycle, e.g., weekly or monthly reporting. When the partition is toggled to an inactivate state , the accumulated information can now be passed on for additional transformations by an additional target transform component  where necessary. This level of aggregation (in contrast to a time period aggregation) accommodates business aggregations, e.g. by region, product, salesperson, etc. as well as other transformation logic such as any matching operations if multiple information sources are received for consolidation. The information is then passed to the loading component  where the information is finally loaded into the target  typically as a batch process.",{"@attributes":{"id":"p-0051","num":"0054"},"figref":"FIG. 8","b":["12","13","14","330","122","123","124","335","182","183","184","340","340","12","13","14","330","75","335","340","122","123","124","182","183","184","340","75","335","122","123","124"]},"In contrast to the single platform structure of ,  is a diagrammatic representation of a preferred embodiment of the Distributed ETL routing environment across multiple platforms. A plurality of sources and targets \u2013, \u2013, \u2013, \u2013, \u2013, \u2013 within an enterprise can be logically grouped into multiple platforms as shown with platform A , platform B , and platform C . By introducing multiple routers ,  and  into the overall architecture which deliver message envelopes to one another a represented by arrows , , and , better utilization of bandwidth between devices can further enhance efficiency as well as make the design easier to scale up to very large business intelligence integration systems.","Integration of the various business enterprise information domains from  with the Distributed ETL architecture of  is depicted in . The information domains , ,  and  link to a logical hub  to resolve their many-to-many relationships. Platforms A , B , and C  show the physical means by which this is accomplished within the logical hub. The physical platforms contain multiple source and target spokes, which could connect to any of the information domains. Information is shared between physical platforms through the routers that exist on each platform , , .  shows how the physical solution fits into the larger logical\/conceptual picture.","In a typical embodiment, the information target comprises a data warehouse and a data mart. Since it can be quite cumbersome to access information from the data warehouse because of the large amounts of data and typically normalized data structures, a common IT design feature is to provide smaller information storage places that focus on a particular subject or department, called data marts. Historically, these can either be dependent data marts, which are subsets of the data warehouse, or independent data marts, which load information directly from operations (point to point). Data marts function to provide easier access to stored information. The data marts are highly indexed and optimized for query. Where one knows in advance the questions to be asked, data marts can be structured accordingly.","Legacy systems utilizing dependent data marts tend to be slow because it takes time to first load the data warehouse and then initiate another process to load the data marts. To reduce latency, an efficiency feature of the Distributed ETL invention loads information directly into \u2018co-dependent\u2019 data marts instead of the data warehouse. Co-dependent data marts are built using information that is dependent upon the same rules as the data warehouse but does not require the latency involved in writing to a data warehouse structure followed by extraction, transport and\/or transformation and a final write to the dependent data mart."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
