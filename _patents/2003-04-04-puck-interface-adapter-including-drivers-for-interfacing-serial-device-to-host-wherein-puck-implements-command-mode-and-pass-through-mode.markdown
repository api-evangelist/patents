---
title: Puck interface adapter including drivers for interfacing serial device to host wherein puck implements command mode and pass through mode
abstract: The invention provides a plug-and-work sensor interface device named “puck” for fast and easy deployment of various types of serial devices, which include commercial off-the-shelf and custom-made sensors and instruments, in a distributed, dynamic oceanic observing network. In an embodiment, each puck is removably attached and electrically coupled to a specific sensor to be deployed. The puck comprises a non-volatile memory for associating and storing arbitrary binary information about the sensor and a microprocessor for controlling how the information is read from and written into the non-volatile memory. The sensor information may include unique sensor identifier, sensor metadata, sensor device driver, etc. The puck itself does not execute any of the device code; rather, a host retrieves the sensor information from the puck when the puck is plugged in. The retrieval can be done automatically or semi-automatically with user interaction. After introducing the sensor to the host, the puck retires into a pass mode, allowing the host to communicate directly with the sensor. According to an aspect of the invention, the deployment of any serial device essentially consists of the steps of removably attaching a puck to the serial device and plugging the puck into a host.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06901464&OS=06901464&RS=06901464
owner: Monterey Bay Aquarium Research Institute
number: 06901464
owner_city: Moss Landing
owner_country: US
publication_date: 20030404
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","DESCRIPTION OF THE BACKGROUND ART","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims priority to a provisional patent application No. 60\/370,741, filed Apr. 5, 2002, which is hereby incorporated by reference in its entirety.","This invention generally relates to interface devices. More particularly, it relates to an interface device, system, and architecture for fast and simple plug-and-work instrument deployment in a distributed, dynamic network environment.","A distributed dynamic sensor network such as an ocean sensor network typically comprises at least one host connected to a plurality of monitoring devices. These monitoring devices, which may comprise commercial off-the-shelf sensors as well as custom-made or one-of a-kind instruments, often operate on very diverse software protocols, including serial communication protocols such as RS-232 and RS-485. As such, to deploy a sensor in the network requires complicated, manual, time-consuming, tedious, and error-prone device software installation and platform configuration.","For example, the MBARI (Monterey Bay Aquarium Research Institute) Ocean Observing Systems (MOOS) provide capabilities to instrument locations of scientific interest in various geographical sites. The capabilities include cable laying and connection, satellite based bi-directional communications, instrumentation interface, data management, event detection and response, as well as integration, interfacing, and operation with other platforms including autonomous underwater vehicles (AUV's) and vertical profilers. Accordingly, as shown in , a MOOS network  may include various instruments and sensors such as fluorometers, radiometers, spectroradiometers, seismic sensors, Acoustic Doppler Current Profilers (ADCP's), and Conductivity-Temperature-Depth (CTD) instruments. A computer with an ADCP graphic user interface (GUI) hosts a plurality of servers\/drivers for the various instruments and sensors coupled thereto. The computer may be located onboard a ship allowing a user on the ship to monitor the instruments and sensors as well as using the database and services at shore.","Currently, there are more than one hundred MOOS candidates, including commercial off-the-shelf sensors as well as custom-made, one-of a-kind instruments. These MOOS candidates come with diverse software protocols. As such, to deploy a monitoring device in the MOOS network , one must first configure the device by plugging the device into a host port, installing onto the host the device software and configuration files, etc., and modifying the host's configuration file, e.g., port number, baud rate, etc. As a result, the deploying process is often time consuming, tedious, and prone to errors.","U.S. Pat. No. 4,695,955, issued to Faisandier of Paris, France, discloses an electronic device that provides a universal interface between sensors and an acquisition and processing system of the signals originating from the sensors. In Faisandier, various sensors are connected to standardized terminals, appearing all identical to the user. Developed for medical applications, Faisandier's universal interface is limited to the generation of a signal reflecting correctly the activity of the sensor. Faisandier's patent does not address or solve the aforementioned problems related to deploying sensing instruments in a distributed, dynamic network.","In the case of an ocean sensor network, the presence of water, e.g., immersion of hardware in saltwater, adds to the difficulty of sensor deployment. U.S. Pat. No. 5,821,405, issued to Dickey et al. of Texas, USA, discloses a modular water quality measurement apparatus and method. The modularized sensor system comprises a sealed or unsealed housing to which is attached a universal sensor interface cap having mechanical sensor connections thereon for receiving removably attachable sensors. The removably attachable uniform sensors are conformed so as to fit within and to seal the mechanical sensor connections. Dickey et al.'s invention essentially solves the aforementioned problems related to diverse sensor software protocols and platform configuration by providing a specially designed uniform sensor apparatus.","Currently, there are no viable plug-and-work solutions to deploying sensing\/monitoring instruments of various types and software protocols in a distributed, dynamic sensor network, particularly in an oceanic environment.","The present invention addresses the challenging requirements of deploying monitoring instruments in a distributed, dynamic network, such as an ocean sensor network, with an innovative plug-and-work architecture. The plug-and-work architecture includes an easily removable\/attachable sensor interface device, hereinafter referred to as \u201cpuck\u201d, that enables fast and simple plug-and-work sensor deployment.","The puck utilizes relatively simple software and provides low-level hardware solutions to the plug-and-work requirements. According to an embodiment of the present invention, a puck can be potentially very small and could fit inside of an instrument connector or cable. Each puck associates data with a specific sensor closely coupled thereto. In an embodiment of the present invention, a puck comprises a persistent storage for storing sensor information and a microprocessor for controlling writing and reading the sensor information to and from the persistent storage. According to an aspect of the present invention, the sensor information, e.g., unique sensor ID, sensor metadata, sensor \u201cdriver\u201d code, etc., is packed into, i.e., written to, the sensor's puck during sensor configuration.","According to the principles of the present invention, when the puck is plugged into a host computer for the sensor's deployment, the host computer automatically retrieves the sensor information from the puck. The host can then utilize that information where appropriate. For example, the host may retrieve the sensor \u201cdriver\u201d code from the puck and execute that code. According to an aspect of the present invention, the host computer communicates with the puck via a communication port such as a serial port and invokes simple ASCII commands such as READ, WRITE, and PASS. The READ command returns a packet of data from the puck. The WRITE command writes a packet of data to the puck. The PASS command puts the puck into a pass-through mode. The host computer comprises a cross-platform port monitor software capable of continuously monitoring the host computer's communication ports, detecting and responding to any \u201cplug-in\u201d events on the ports, retrieving and extracting sensor information from the puck, and starting sensor software based on the extracted sensor information.","The plug-and-work architecture has three main requirements. First, the host must be able to retrieve, automatically or in response to a user command, information from a serial interface at a time when the interface is plugged-in. Second, a persistent storage or non-volatile memory is needed on or very near the interface. Third, a serial protocol is needed for writing and reading information to and from the persistent storage.  illustrates a puck concept that conforms to the plug-and-work requirements. As shown in , a puck  associates data with a specific serial device  removably closely coupled thereto. The puck  always travels with the serial device . The puck  can be customized for virtually any serial device. In , the serial device  is a sensor, but it could also be an instrument equipped with more than one sensor. The serial device  may be a monitoring instrument used in open sea, space, underground, or on land. Examples of possible serial devices include fluorometers, radiometers, spectroradiometers, Acoustic Doppler Current Profilers (ADCP's), Conductivity-Temperature-Depth (CTD) instruments, and the like.","The puck  contains information about the serial device . The information can be any information about the serial device , including, but not limited to, device driver, unique device identifier, calibration data, and instrument history. The information can be in a form of binary data or other types of data format. The host retrieves device information from the puck  when the puck  is plugged in.","This puck concept realizes a plug-and-work solution to the aforementioned problems related to deploying monitoring instruments in a distributed, dynamic network. The deployment process is essentially reduced to two main steps: a) physically plugging a puck, which is removably attached to a serial device to be deployed, to a host port; and b) the puck and the host cooperate to configuring the serial device, i.e., installing device software and calibration files, modifying platform configuration, and running necessary software to monitor the serial device, and so on. The configuring step can be performed automatically upon the host port detecting a plug-in event. However, for underwater deployment, the configuring step is preferably user interactive, i.e., physically plugging-in the puck first and then wait for a user command to start retrieving information from the puck.","In this plug-and-work architecture, the puck performs three important roles: it provides a standardized connection between the serial device and the host; it introduces the serial device to the host; and, after the introduction, it acts as a relay between the two.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 3","FIG. 2"],"b":["300","300","300","310","320","310"]},"When the sensor is ready for deployment, the puck is plugged into a host computer (not shown). The host computer retrieves the sensor information from the memory . The host computer can then utilize that information where appropriate. For example, the host computer may retrieve the sensor \u201cdriver\u201d code from the puck  and execute that code. In this embodiment, the host computer communicates with the microcontroller  via the RS-232 serial port and invokes simple ASCII commands such as READ, WRITE, and PASS. The READ command returns a packet of data from the puck . The WRITE command writes a packet of data to the puck . The PASS command puts the puck  into a pass-through mode. Exemplary puck commands are listed in Table 1 below.",{"@attributes":{"id":"p-0028","num":"0027"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Command","Purpose"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["READ","Read data from puck's memory"]},{"entry":["WRITE","Write data to puck's memory"]},{"entry":["FLUSH","Force puck to write any data in its"]},{"entry":[{},"write buffer to memory"]},{"entry":["ERASE PUCK","Erase all of the puck's memory"]},{"entry":["PUCK OUT","Switch puck into pass-through mode"]},{"entry":["PUCK IN","Switch puck into command mode"]},{"entry":["SET H [entry number][64","Set one of the puck's four [0-3]64"]},{"entry":["bytes entry data]","byte header entries"]},{"entry":["GET H[entry number]","Return one of the puck's four [0-3]64"]},{"entry":[{},"byte header entries"]},{"entry":["SET RP [location]","Set the position in memory from where"]},{"entry":[{},"the puck will READ data"]},{"entry":["GET RP","Get the position in memory from where"]},{"entry":[{},"the puck will READ data"]},{"entry":["SET WP [location]","Set the position in memory to where"]},{"entry":[{},"the puck will WRITE data"]},{"entry":["GET WP","Get the position in memory to where"]},{"entry":[{},"the puck will WRITE data"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIGS. 4 and 5","FIGS. 3"],"b":["300","4","5","320","320","320","320","320"]},"In addition to controlling the puck's modes via the serial communication interface means, these simple ASCII puck commands allow the host computer to communicate with the puck's microcontroller  to access puck's memory  and obtain information stored therein, e.g., a java archive (JAR) file containing a device driver and any type of binary data such as calibration data and instrument history.  is a flowchart illustrating the puck's simple serial protocol.","Preferably, the entire instrument driver is archived into a single JAR file. JAR files support compression while preserving directory structure. In addition, a JAR file contains a manifest describing contents and is easy to use with java application programming interface (API) executing on a host computer. The puck API is illustrated in FIG. . In short, PuckInputStream is a java class that allows the binary data to be extracted from the puck; PuckOutputStream is a java class used to write binary data to the puck's memory; and PuckUtils is a class containing other puck manipulation methods.","Using the puck API, utility applications can be created to configure a puck from a host computer. For example, put_it is a java application that writes binary data to the puck's memory; get_it is a java application that reads binary data from the puck's memory; and chk_it determines if the puck is programmed and how much memory is used.","In some embodiments, the host computer includes cross-platform \u201cport monitor\u201d software for continuously monitoring the host computer's communication ports, detecting and responding to any \u201cplug-in\u201d events on the ports, retrieving and extracting sensor information from the puck, and starting sensor software based on the extracted sensor information. In an embodiment, an event listener such as a java serial port event listener is used to listen for a specific event to detect plug in. Exemplary events include break interrupt, data set ready, and ring indicator.","The host port monitor program can be very generic since it does not need a priori knowledge of which sensing instrument is plugged into which port. That is, there is no need to pre-install the sensing instrument's device driver, as the port monitor retrieves the driver from the puck at plug-in time. According to the plug-and-work architecture of the present invention, through the puck, the host computer can configure and communicate with the sensing instrument on-the-fly, i.e., at the time of deploying the sensing instrument. The same generic port monitor software can thus run on all host platforms. In some embodiments, the puck stores a graphic user interface (GUI) which can be retrieved and executed on the host computer. In an embodiment, the GUI is an ADCP GUI which is stored in the ADCP's puck.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIGS. 8A-8D","FIG. 8A"]},"Each puck has, at one end, a standardized connector for coupling with the host's standard serial port, e.g., a 7-pin connector from SEA CON\u00ae Brantner & Associates Inc., San Diego, Calif. Each puck has, at the other end, a customizable connector that can be fitted for coupling with a specific sensor. For example, sensor A could be a generic RS-232 instrument, with or without handshaking, while sensor B could be a generic half-duplex RS-485 instrument and sensor C could be a generic half-duplex RS-485 multi-drop instrument.","Referring back to , a new sensor C is plugged into the host via puck C, which is removably attached to the new sensor C. The port monitor detects the plug-in event and reads the sensor information from puck C, as shown in FIG. B. Next, the port monitor extracts the server\/driver code from the sensor information and executes the code, as shown in FIG. C. The sensor C then joins the rest of the existing sensors in the distributed object network as shown in FIG. D. As  demonstrate, the deployment of sensor C in the distributed object network is essentially accomplished by the simple steps of removably attaching puck C to sensor C and plugging puck C to the host computer. The host computer and puck C cooperate to configure sensor C automatically or with minimal user interaction. After introducing sensor C to the host computer, puck C retires into the pass-through mode, i.e., acting as a relay, to allow the host computer to communicate directly with sensor C.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 9","FIG. 9"]},"Although the present invention and its advantages have been described in detail, it should be understood that the present invention is not limited to or defined by what is shown or discussed herein. In particular, the tables, drawings, description, and discussion disclosed herein illustrate technologies related to the invention, show examples of the invention, and provide examples of using the invention and are not to be construed as limiting the present invention. Known methods, procedures, systems, elements, or components may be discussed without giving details, so to avoid obscuring the principles of the invention. As it will be appreciated by one of ordinary skill in the art, various changes, substitutions, modifications, and alternations can be made and\/or implemented without departing from the principles and spirit of the present invention.","Accordingly, the scope of the invention should be determined by the following claims and their legal equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 8A-8D"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
