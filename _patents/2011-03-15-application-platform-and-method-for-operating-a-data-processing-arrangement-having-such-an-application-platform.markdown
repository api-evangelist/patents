---
title: Application platform and method for operating a data processing arrangement having such an application platform
abstract: An application platform is disclosed together with a method for operating a data processing arrangement on which the application platform is implemented along with at least one application which is executable on the application platform by accessing at least one programming interface of the application platform. In at least one embodiment, in the course of a change of version of the application platform or of a part of the platform, a check is carried out by way of an update module to determine whether a newly-to-be-installed more recent version of the application platform or of the part of the platform is consistent with the existing older version of the application platform or of the part of the platform in terms of the interface specification and/or the behavior of the or each programming interface. If necessary, the update module overwrites the older version with the more recent version. Otherwise the update module installs the more recent version or at least its programming interface in parallel with the existing version or its programming interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09063817&OS=09063817&RS=09063817
owner: Siemens Aktiengesellschaft
number: 09063817
owner_city: Munich
owner_country: DE
publication_date: 20110315
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["PRIORITY STATEMENT","FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF THE EXAMPLE EMBODIMENTS","LIST OF REFERENCE SIGNS"],"p":["The present application hereby claims priority under 35 U.S.C. \u00a7119 on German patent application number DE 10 2010 011 658.0 filed Mar. 17, 2010, the entire contents of which are hereby incorporated herein by reference.","At least one embodiment of the invention generally relates to a method for operating a data processing arrangement, in particular a computer or a computer network, on which an application platform has been implemented along with at least one (software) application which is executable on the application platform through access to at least one programming interface of the application platform.","The term \u201capplication platform\u201d denotes a (generic or domain-specific) software platform, i.e. an inter-application software solution that is interposed between the computer hardware with the operating system running thereon on the one hand and the applications, i.e. the actual application programs, on the other hand. A widely established example of such an application platform is J2EE (Java Platform, Enterprise Edition).","An application platform typically provides basic functions that are required by a multiplicity of applications, e.g. the reading, writing, deleting and archiving of data. Often an application platform also provides a user interface, i.e. functions such as graphical control elements, etc., via which applications can interact with a user for the purpose of inputting and outputting data. An application platform that is specialized for software applications in the medical field often also provides medically relevant basic functions in addition, e.g. algorithms for inspecting, analyzing and processing medical images. The function portfolio that is made available by an\u2014in particular specialized\u2014application platform enables the development time for software applications to be shortened significantly, in particular in the medical environment.","To allow easy access to the functions of an application platform, the latter generally provides what is termed an application programming interface (API) or a plurality of such programming interfaces (APIs), the functions of which can be integrated into the applications that are to be created. Furthermore an application platform sometimes provides what is termed an (application) container in which an application or, in the case of multi-layered applications, a layer of an application runs in encapsulated form. In this case the container controls the execution sequence of the application, in particular the program start and the termination of the application. In addition at least part of the API(s) is typically implemented as a component part of the container. Often, however, the APIs also include additional functions which are implemented independently of the container and which the applications can also access accordingly independently of the container.","The term \u201cfunction\u201d signifies both here and in the following description in general a functional component of a software program. Such a function can also be realized as a \u201cmethod\u201d within the context of object-oriented programming or in another form.","By providing a container a correspondingly embodied application platform particularly effectively supports the development of multi-layered, distributed applications, in other words applications that comprise a plurality of mutually independently running parts (layers) which interact with one another via the application platform. In this case medical engineering applications frequently include in particular a so-called frontend layer, the primary purpose of which is interaction with the user, and a so-called backend layer, in which most of the actual calculations are performed. In a computer network, as commonly used these days in medical institutions, the backend layer is in this case implemented mostly in a central server, while the frontend layer is implemented on a client, i.e. a workstation. The application platform is in this case implemented both on the server side and on the client side and also supports the communication between these hardware devices. In this arrangement the frontend layer and the backend layer are encapsulated by the application platform usually in a separate container in each case.","In a typical data processing system of a contemporary medical institution a multiplicity of different medical engineering applications are often implemented on a shared, cross-network application platform. A full or partial update of the application platform, i.e. a change from an older version of the application platform or a part of the platform to a more recent version of the same application platform or part of the platform often proves to be problematic in the case of such a complex system. This is because when there is change of version of an application platform, frequently the specification and\/or behavior of an API or a plurality of APIs is also changed to a greater or lesser degree, as a result of which the compatibility of the (new) API(s) with the applications already present before the update is sometimes compromised or destroyed altogether. In order to ensure error-free operation of these applications, the existing applications must in this case be \u201cmigrated\u201d to the new platform version, i.e. adapted to match the specification and\/or behavior of the new API(s).","Where there are a large number of applications based on a common application platform the amount of effort involved in performing a platform update is often considerable because usually all of the applications must be migrated. In the case of applications which are subdivided into frontend and backend components it is necessary in addition to update both application layers of each application when the application platform is updated. Following the update full tests of every modified application must be run, the tests being particularly exhaustive and time-consuming most notably in the medical field. This causes a heavy workload on the one hand. In the worst case an update of the application platform can also lead to a comparatively long downtime of the medical institution. The development advantage achieved through the use of the application platform is often substantially diminished as a result.","In at least one embodiment the invention, a method is disclosed for operating a data processing arrangement having an application platform and at least one application running thereon, which method enables a flexible and easy-to-handle version change (update) of the application platform or a part of the same. A further embodiment of the invention discloses an application platform that is particularly suitable for performing the method.","With regard to at least one embodiment of the method, advantageous embodiment variants and developments of the invention will emerge from the claims and the following description.","According to at least one embodiment of the invention, the application platform includes at least one programming interface (API), though generally it includes a plurality of functionally delimited programming interfaces (APIs), by accessing which at least one application is executable on the application platform. The application platform additionally includes an update module.","In the event of a change of version of the application platform or of a part of the platform, a check is carried out by the update module to determine whether a more recent version of the application platform that is to be newly installed is consistent with the existing older version of the application platform in terms of the interface specification or the interface behavior of the or each API.","What is to be understood as \u201c(interface) specification\u201d in this context is the totality of criteria that an application accessing the API must comply with in order to be compatible with the API. These criteria include for example the nomenclature for the functions of the API and the definition of arguments (i.e. variables) of these functions.","What is referred to as \u201c(interface) behavior\u201d in this context is the totality of those characteristics of an API which become apparent only at platform runtime. In this case the behavior of an API is determined in particular by the response time or computing time associated with the invocation of each API functionality, the accuracy of return values of such functionalities, etc.","Provided the APIs or each API of the more recent and older version of the application platform are consistent in terms of the interface specification and interface behavior it is thereby ensured that the applications running on the older version of the application platform are also compatible with the more recent version. In this case the update module causes the older version of the application platform or part of the platform to be overwritten by the more recent version. Alternatively, if it is established by the update module that the more recent version of the application platform or part of the platform is not consistent in terms of the interface specification or interface behavior with an API of the older version, in other words exhibits compatibility-breaking modifications, the update module initiates the installation of the more recent version of the application platform or part of the platform or at least of the API that has been modified in a compatibility-breaking manner in parallel (side-by-side) with the existing, older version of the application platform or part of the platform or of the API.","Generally, the application platform is a software product whose component parts are configured for the purpose of performing the above-described method or one of its below-described variants by programming means, such that the method is automatically performed when the application platform is implemented on a data processing arrangement and executed. The update module and the API or each API are software components of the application platform.","Owing to the possibility of installing multiple versions of the application platform or its API(s) in parallel it is made possible for each of the applications implemented on the data processing arrangement to access a corresponding compatible version of the API(s) in accordance with its respective interface compatibility. If a plurality of applications are implemented on the data processing arrangement, then in this case in particular some of the applications can access the API(s) associated with the older platform version, while other applications access the API(s) associated with the more recent platform version. In the event of an update of the application platform in which at least one API is modified in a compatibility-breaking manner there is therefore no necessity to migrate the applications running on the application platform immediately. Rather, the applications can be migrated progressively and successively to the more recent version or even left long-term in the previous state. In this way it is ensured that the platform update does not lead, or at least leads only to a negligible degree, to downtimes of the data processing arrangement or the applications implemented thereon. In addition the workload associated with the migration of the applications can be divided up in a flexible manner, in particular can be \u201cstretched\u201d over time. Furthermore one and the same application can also be implemented in multiple versions in parallel. For example, in addition to a version migrated to a new platform version of a particular application the older version of the same application running on an older platform version can be maintained.","Furthermore the compatibility check of the API(s) performed by the update module ensures that the different platform versions are not installed \u201cblind\u201d next to one another, but are installed only when this is necessary due to the established incompatibility of the API(s). The number of versions of the application platform that are implemented on the data processing arrangement over the long term is thus limited to a minimum, thereby saving memory space and reducing the complexity of the overall software structure implemented on the data processing arrangement.","The compatibility check performed by the update module can basically be carried out in different ways. In a simplest method variant, and therefore one that is used by preference, the more recent, newly-to-be-installed version of the application platform includes a specific indication, attached by the vendor, relating to its compatibility with one or more previous versions of the application platform. This information, which directly indicates whether the interface specification and\/or the interface behavior of the two API versions are consistent, is in this case read out by the update module.","In an alternative method variant each version of the application platform includes details concerning the corresponding interface specification and\/or the interface behavior which the update module in this case reads out and compares with one another. Again as an alternative hereto it is conceivable for the update module to test the API(s) of the more recent version for compatibility. Hybrid forms of these three alternatives are also conceivable within the scope of at least one embodiment of the invention. In particular it can be provided that the compatibility in terms of the interface specification is determined on the basis of stored information, while the compatibility in terms of the interface behavior is established by way of tests.","Insofar as multiple versions of the application platform, individual platform components and\/or API(s) have already been installed in parallel in the course of a single or multiple platform update, a check is carried out by a version management module during the loading of each application to determine with which of the installed platform versions the application is compatible. In this case the API(s) of the corresponding compatible version is (are) selected by the version management module, which is a further software component of the application platform that is provided in this case, and made available. The loaded application is in this case executed in particular in a container originating from the corresponding platform version and containing the API(s), or at least a part thereof. The container in this case contains in particular the API(s) which include functions for what is referred to as the \u201clifecycle\u201d of the associated application, in particular the starting, stopping, suspending or reawakening of the application.","The version management module communicates with the containers preferably using a specific protocol defined by corresponding specifications. In an example embodiment of the invention, if multiple versions of the protocol exist, multiple versions of the version management module are implemented in parallel, each of these versions of the version management module using one of the different versions of the protocol in each case. The protocol versions do not necessarily correspond to the versions of the application platform in this case. In particular it is conceivable that the continuing development of the protocol used progresses at a slower pace than that of the application platform, with the result that a number of succeeding versions of the application platform will use the same protocol version.","The different versions of the version management module are preferably cascaded internally, i.e. implemented in a specified access sequence. In this case all requests for starting and managing a container instance are always addressed initially to the most recent version of the version management module, the version of the version management module first checking whether it tallies with the container required for the affected application in terms of the protocol version used. If incompatibility is established the most recent version of the version management module delegates the request to that older version of the version management module which is compatible with the application, in other words the one which is compatible in terms of the protocol used with a container which is in turn compatible with the application.","In an example embodiment of the method, multi-layer applications having a frontend layer and a backend layer are supported by the application platform. In this case the frontend layer and the backend layer are each provided with one or more API(s) and if necessary a container instance by the application platform. It is ensured by the version management module in this case that the frontend layer and the backend layer of the same application are always assigned API(s) or containers of the same version. In other words the version management module ensures that the frontend layer and the backend layer are not provided with API(s) or containers which come from different versions of the application platform.","Basically, the API(s) or containers assigned in each case to the frontend layer and the backend layer can have a different structure. Alternatively hereto, in a particularly simple method variant, essentially identically structured API(s) and where applicable identically structured containers are made available both for the frontend layer and for the backend layer of an application. In this case the version management module accordingly allocates the frontend layer and the backend layer of the application two instances of the same API(s) or of the same container in each case.","The application platform beneficially supports the simultaneous execution of a plurality of applications. Each of the parallel-running applications or application layers (in the case of multi-layer applications) together with the possibly assigned container forms a separate (operating system) process in each case, such that a plurality of such processes regularly run in parallel.","In order to make it easier for a user of the data processing arrangement to handle the concurrently running processes, in a beneficial variant of at least one embodiment of the invention the application platform additionally includes a process connection module which generates an inter-process user interface by means of which the parallel-running processes collectively interact with the user of the data processing arrangement. Notwithstanding this, however, in multi-layered applications having a frontend layer and a backend layer this relates only to the processes assigned to the frontend layer, especially since the processes assigned to the backend layer by definition have no direct user interaction.","As a result of the shared, inter-process user interface the plurality of processes (or, as the case may be, the underlying applications in each case) appear externally like a single process. The user can switch between different processes or applications via the shared user interface without being aware of it. In a beneficial embodiment of the invention, in particular a common frame is provided in this case for the parallel-running processes by the inter-process user interface. In this case the user interface is for example part of a special container which controls the output functions of the containers of the remaining (frontend) processes, in particular allocating an output position within the frame to the containers.","All the above-described variants and embodiments of the method according to the invention and of the associated application platform can\u2014as far as possible\u2014be used with one another in any combination.","Parts, quantities and structures corresponding to one another are labeled consistently with the same reference signs in all the figures.","Various example embodiments will now be described more fully with reference to the accompanying drawings in which only some example embodiments are shown. Specific structural and functional details disclosed herein are merely representative for purposes of describing example embodiments. The present invention, however, may be embodied in many alternate forms and should not be construed as limited to only the example embodiments set forth herein.","Accordingly, while example embodiments of the invention are capable of various modifications and alternative forms, embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that there is no intent to limit example embodiments of the present invention to the particular forms disclosed. On the contrary, example embodiments are to cover all modifications, equivalents, and alternatives falling within the scope of the invention. Like numbers refer to like elements throughout the description of the figures.","It will be understood that, although the terms first, second, etc. may be used herein to describe various elements, these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example, a first element could be termed a second element, and, similarly, a second element could be termed a first element, without departing from the scope of example embodiments of the present invention. As used herein, the term \u201cand\/or,\u201d includes any and all combinations of one or more of the associated listed items.","It will be understood that when an element is referred to as being \u201cconnected,\u201d or \u201ccoupled,\u201d to another element, it can be directly connected or coupled to the other element or intervening elements may be present. In contrast, when an element is referred to as being \u201cdirectly connected,\u201d or \u201cdirectly coupled,\u201d to another element, there are no intervening elements present. Other words used to describe the relationship between elements should be interpreted in a like fashion (e.g., \u201cbetween,\u201d versus \u201cdirectly between,\u201d \u201cadjacent,\u201d versus \u201cdirectly adjacent,\u201d etc.).","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of example embodiments of the invention. As used herein, the singular forms \u201ca,\u201d \u201can,\u201d and \u201cthe,\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. As used herein, the terms \u201cand\/or\u201d and \u201cat least one of\u201d include any and all combinations of one or more of the associated listed items. It will be further understood that the terms \u201ccomprises,\u201d \u201ccomprising,\u201d \u201cincludes,\u201d and\/or \u201cincluding,\u201d when used herein, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and\/or groups thereof.","It should also be noted that in some alternative implementations, the functions\/acts noted may occur out of the order noted in the figures. For example, two figures shown in succession may in fact be executed substantially concurrently or may sometimes be executed in the reverse order, depending upon the functionality\/acts involved.","Spatially relative terms, such as \u201cbeneath\u201d, \u201cbelow\u201d, \u201clower\u201d, \u201cabove\u201d, \u201cupper\u201d, and the like, may be used herein for ease of description to describe one element or feature's relationship to another element(s) or feature(s) as illustrated in the figures. It will be understood that the spatially relative terms are intended to encompass different orientations of the device in use or operation in addition to the orientation depicted in the figures. For example, if the device in the figures is turned over, elements described as \u201cbelow\u201d or \u201cbeneath\u201d other elements or features would then be oriented \u201cabove\u201d the other elements or features. Thus, term such as \u201cbelow\u201d can encompass both an orientation of above and below. The device may be otherwise oriented (rotated 90 degrees or at other orientations) and the spatially relative descriptors used herein are interpreted accordingly.","Although the terms first, second, etc. may be used herein to describe various elements, components, regions, layers and\/or sections, it should be understood that these elements, components, regions, layers and\/or sections should not be limited by these terms. These terms are used only to distinguish one element, component, region, layer, or section from another region, layer, or section. Thus, a first element, component, region, layer, or section discussed below could be termed a second element, component, region, layer, or section without departing from the teachings of the present invention.","The data processing arrangement  shown in rough schematic form in  is provided by way of example for use in a medical institution such as e.g. a clinic. The data processing arrangement  comprises a plurality of clients  (only one of which is depicted for the sake of simplicity) and a central server . The clients  and the server  are connected for data transmission purposes by means of a (data communication) network  such as e.g. a so-called LAN (Local Area Network).","In this arrangement an application platform  is implemented on each client  and on the server . Within the framework of the software architecture built on the clients  and the server  the application platform  is interposed between an operating system  and a plurality of (software) applications in each case. Three applications , and are shown by way of example in this case in .","In the example shown the application platform  does not sit directly on top of the operating system  of the clients  or of the server . Rather, a runtime environment  is interposed here between it and the application platform  in each case. Examples of the runtime environment  used are the so-called JAVA Runtime Environment or the .NET Framework.","Each of the applications -itself comprises two layers in each case which are implemented distributed over the clients  and the server , namely a frontend layer  implemented on the client side and a backend layer  implemented on the server side. For the purpose of communicating with the applications -the application platform  provides a plurality of programming interfaces, both on the client side and on the server side, which are accessed by the frontend layers  and backend layers  of the applications -. For reasons of simplification reference is made in the following, without loss of generality, to just one programming interface (referred to below as API ) by way of example.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 1","b":["1","5","5","1","1","2","5"]},"During the update of the application platform  an automatic check, described in more detail below, is now carried out to determine whether the API  of the more recent version V that is to be installed is consistent in terms of the interface specification and the interface behavior with the API  of the existing version V. If this is the case, the existing version V of the application platform  is overwritten both on the client side and on the server side by the more recent version V. In this case the end state of the data processing arrangement  upon completion of the update continues to correspond to the representation according to , notwithstanding the fact that the application platform  is now present in version V on both the client side and the server side.","If, on the other hand, it is established during the update that the API  of version V of the application platform  is not consistent in terms of its interface specification or interface behavior with the API  of the existing version V, then the more recent version V of the application platform  is implemented in parallel (side-by-side) with the existing version V. In this case, upon completion of the update both versions V and V of the application platform  are therefore present in each case\u2014as shown in FIG. \u2014both on the client  and on the server .","Immediately after the update the applications -that are compatible with the older version V of the application platform  still access the API  of the older version V as previously. Thanks to the parallel implementation of the two versions V and V the applications -can now, as shown in  based on the example of the application , be updated to the more recent version V by means of migration M, i.e. by means of corresponding code changes.  shows by means of continuous lines an intermediate state in which the applications and still access the API  of the older version V, while the application has already been migrated to the more recent version V.","As can be seen from , both the frontend layer  and the backend layer  of the application must be migrated.","It can be provided that all the component parts of the application platform  are always implemented in both versions V and V in parallel. Preferably, however, the continuing development of individual components and modules of the application platform  is always carried out on a backward-compatible basis by virtue of predefined specification. In this case preferably only the remaining components of the application platform , in particular the API , are implemented in parallel in both versions V and V in a compatibility-breaking version transition. The backward-compatible components of version V are overwritten without a separate check by the corresponding components of version V and interact as necessary with the remaining components of version V or version V.","As is evident from , the application platform  includes an update module  which controls the update process. The update module  is shown by way of example in  as a fixed software component of the application platform  implemented on the server side. Alternatively thereto, however, the update module  can also be implemented separately from the actual application platform . In particular the update module  can be part of a setup program which is assigned to the application platform  and which is no longer required following completion of the update and accordingly can be deleted from the memory assigned to the data processing arrangement .","The application platform  also includes an application start module . This software module is configured by programming measures to initiate the start of the applications -running on the application platform . The software module is likewise implemented on the server side in the example according to . Alternatively hereto, however, the application start module  could also be implemented on the client side.","The application platform  additionally includes a version management module  as a central component on the server side. The main function of the software module resides in selecting, starting and managing the API  and container instances ,  in a compatible version V or V for each application -that is to be started during the operation of the application platform .","In order to start the respective associated container instances ,  the application platform  includes a container start module  of the invention disclosure, the software module being implemented both on the client side and on the server side.","During the operation of the application platform  a container instance  is generated both on the client side and on the server side for each application -running thereon, which container instance  encapsulates the frontend layer  and\/or the backend layer  of the respective application -. The API  is implemented in part as a component of the container instances , . In addition, however, the API  also includes components which are independent of the container instances , .","Essentially, identical container instances , in other words instances (i.e. embodiments or exemplars) of the same container, are used on both client side and server side. Thus, in particular the container instances  encapsulating the frontend layer  and the backend layer  of the same applications and are identical in each case. In a departure from the basic principle, presented with reference to the applications and , that frontend layers  and backend layers  are always encapsulated by means of identical container instances , the frontend layer  of the first application is encapsulated in a modified container instance . The container instance  additionally includes a user interface  which provides a common frame  () for the frontend-side containers  and  of all the running applications , and . In order to generate and control the container instance  the application platform  includes on the client side a software module referred to as a process connection module .","For each application to , the version management module  always selects the API  and the container instances ,  in the version V,V that is compatible with the respective application -. Analogously to the example according to , in which the applications and are compatible with version V, and the application following its migration M is compatible with version V, the API and the container instances ,  are therefore selected in version V for the applications and , while the API and the container instances  are selected in version V for the application ","The version management module  communicates with the container instances  and  using a specific protocol which may possibly be present in different protocol versions P and P. Solely by way of example, the container instances ,  in version V use protocol version P, whereas the container instances ,  in version V use protocol version P. In order to be able to manage both container versions, the version management module  is therefore also implemented in multiple versions V and V in parallel, the version management module  in version V in this case, by way of example, supporting protocol version P, while the version management module  in version V supports protocol version P.","Referring to , the principle of operation of the application platform  is described in more detail with the aid of a schematically simplified flowchart which represents a typical process workflow during the update of the application platform  and the subsequent loading of the applications to ","According thereto, in the course of the update process the update module  reads out in a first step  information which is assigned to the newly-to-be-implemented version V of the application platform  and which specifies the interface compatibility of version V with the existing version V. In a following step  the update module  checks the information that has been read out. If the result of this check is that the API  of version V has been modified in a compatibility-breaking manner compared to the API  of the existing version V, then in a following step  the update module  initiates the parallel implementation of the application platform \u2014or at least of the parts thereof that are not backward-compatible\u2014in versions V and V. In so doing the update module  installs in particular the API , the containers and the version management module  of version V in parallel with the corresponding software components of the existing version V, as indicated by means of dotted arrows  in .","If, on the other hand, the check performed in step  reveals that the API  of version V has not been changed, or has been changed merely in a non-compatibility-breaking manner compared to the API  of version V, then in step  the update module  installs the new version V over the existing version V. The update process is therewith completed.","One of the applications -is started directly or indirectly succeeding in time by the application start module , which in a step  commences with the loading of the application -that is to be launched (arrow  in ). The application start module  simultaneously issues a request to the version management module  of the most recent available version V to generate container instances ,  (arrow  in ). In a following step  the version management module  reads out specifications relating to the interface configuration of the loaded application -","In a further step  the version management module  checks in the initially active version V whether the container version required by the loaded application -is compatible with the protocol version P supported by it.","If this is the case, then in a step  the version management module  present in version V activates the container start modules  implemented on the server side and client side (as indicated by an arrow  in ). Otherwise, in a step , the version management module  present in version V passes on the request to the version management module  corresponding to the older version V, which now for its part activates the container start modules  (step  in  or arrow  in ).","The container start modules  now generate on the client side and server side one container instance ,  each of version V or V required by the respective application -(step  in , indicated by arrows  in ).","In this case, at the start of the first application , the container instance  is started on the frontend side by the container start module  through the medium of the process connection module  (arrow  in ). All subsequently started applications and and their frontend-side container instances  are allocated an associated position in the common frame  or window created by the user interface  by the container instance  (arrow  in ).","The screen output generated by the user interface  is shown by way of example and in schematically simplified form in . The common frame  is in this case shown by way of example in the style of an MS-Windows window. In the frame  the operating system processes running in parallel on the frontend side, which processes were created by the frontend layers  of the applications to with the associated frontend-side container instances  and , are each assigned an output field\u2014shown by way of example in the style of a tab. To express it more graphically, a separate operating system process therefore runs in each tab. In the diagram according to , for example, the process assigned to the application is displayed in the foreground, while the processes assigned to the applications and run in the background of the screen output.","By being displayed in the common frame the operating system processes assigned to the applications -are represented as a single process. The user can therefore switch between these processes, for example by means of a mouse click, without noticing the process or application changeover.","Switching from process to process or, as the case may be, from application to application is effected by means of algorithms which the container instance  makes available within the scope of the user interface .","As can be gathered from , the process connection module  and the higher-order container instance  started by it also connect in particular processes that run on different versions V, V of the application platform  and\/or use different protocol versions P,P. By this means it is ensured in particular that the output behavior of the applications -does not change fundamentally as a result of an update of the application platform  and partial performed migration of the applications -running thereon. Rather, it is suggested to the user by the process connection module  that the applications -operate like a single process at least on the frontend side even after partial migration to the new version V.","The patent claims filed with the application are formulation proposals without prejudice for obtaining more extensive patent protection. The applicant reserves the right to claim even further combinations of features previously disclosed only in the description and\/or drawings.","The example embodiment or each example embodiment should not be understood as a restriction of the invention. Rather, numerous variations and modifications are possible in the context of the present disclosure, in particular those variants and combinations which can be inferred by the person skilled in the art with regard to achieving the object for example by combination or modification of individual features or elements or method steps that are described in connection with the general or specific part of the description and are contained in the claims and\/or the drawings, and, by way of combinable features, lead to a new subject matter or to new method steps or sequences of method steps, including insofar as they concern production, testing and operating methods.","References back that are used in dependent claims indicate the further embodiment of the subject matter of the main claim by way of the features of the respective dependent claim; they should not be understood as dispensing with obtaining independent protection of the subject matter for the combinations of features in the referred-back dependent claims. Furthermore, with regard to interpreting the claims, where a feature is concretized in more specific detail in a subordinate claim, it should be assumed that such a restriction is not present in the respective preceding claims.","Since the subject matter of the dependent claims in relation to the prior art on the priority date may form separate and independent inventions, the applicant reserves the right to make them the subject matter of independent claims or divisional declarations. They may furthermore also contain independent inventions which have a configuration that is independent of the subject matters of the preceding dependent claims.","Further, elements and\/or features of different example embodiments may be combined with each other and\/or substituted for each other within the scope of this disclosure and appended claims.","Still further, any one of the above-described and other example features of the present invention may be embodied in the form of an apparatus, method, system, computer program, non-transitory computer readable medium and non-transitory computer program product. For example, of the aforementioned methods may be embodied in the form of a system or device, including, but not limited to, any of the structure for performing the methodology illustrated in the drawings.","Even further, any of the aforementioned methods may be embodied in the form of a program. The program may be stored on a non-transitory computer readable medium and is adapted to perform any one of the aforementioned methods when run on a computer device (a device including a processor). Thus, the non-transitory storage medium or non-transitory computer readable medium, is adapted to store information and is adapted to interact with a data processing facility or computer device to execute the program of any of the above mentioned embodiments and\/or to perform the method of any of the above mentioned embodiments.","The non-transitory computer readable medium or non-transitory storage medium may be a built-in medium installed inside a computer device main body or a removable non-transitory medium arranged so that it can be separated from the computer device main body. Examples of the built-in non-transitory medium include, but are not limited to, rewriteable non-volatile memories, such as ROMs and flash memories, and hard disks. Examples of the removable non-transitory medium include, but are not limited to, optical storage media such as CD-ROMs and DVDs; magneto-optical storage media, such as MOs; magnetism storage media, including but not limited to floppy disks (trademark), cassette tapes, and removable hard disks; media with a built-in rewriteable non-volatile memory, including but not limited to memory cards; and media with a built-in ROM, including but not limited to ROM cassettes; etc. Furthermore, various information regarding stored images, for example, property information, may be stored in any other form, or it may be provided in other ways.","Example embodiments being thus described, it will be obvious that the same may be varied in many ways. Such variations are not to be regarded as a departure from the spirit and scope of the present invention, and all such modifications as would be obvious to one skilled in the art are intended to be included within the scope of the following claims.",{"@attributes":{"id":"p-0086","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":[{"@attributes":{"id":"ul0001-0001","num":"0085"},"b":"1"},{"@attributes":{"id":"ul0001-0002","num":"0086"},"b":"2"},{"@attributes":{"id":"ul0001-0003","num":"0087"},"b":"3"},{"@attributes":{"id":"ul0001-0004","num":"0088"},"b":"4"},{"@attributes":{"id":"ul0001-0005","num":"0089"},"b":"5"},{"@attributes":{"id":"ul0001-0006","num":"0090"},"b":"6"},{"@attributes":{"id":"ul0001-0007","num":"0091"},"b":"7","i":"a,b,c "},{"@attributes":{"id":"ul0001-0008","num":"0092"},"b":"8"},{"@attributes":{"id":"ul0001-0009","num":"0093"},"b":"9"},{"@attributes":{"id":"ul0001-0010","num":"0094"},"b":"10"},{"@attributes":{"id":"ul0001-0011","num":"0095"},"b":"11"},{"@attributes":{"id":"ul0001-0012","num":"0096"},"b":"12"},{"@attributes":{"id":"ul0001-0013","num":"0097"},"b":"13"},{"@attributes":{"id":"ul0001-0014","num":"0098"},"b":"14"},{"@attributes":{"id":"ul0001-0015","num":"0099"},"b":"15"},{"@attributes":{"id":"ul0001-0016","num":"0100"},"b":"16"},{"@attributes":{"id":"ul0001-0017","num":"0101"},"b":"17"},{"@attributes":{"id":"ul0001-0018","num":"0102"},"b":"18"},{"@attributes":{"id":"ul0001-0019","num":"0103"},"b":"19"},{"@attributes":{"id":"ul0001-0020","num":"0104"},"b":"20"},{"@attributes":{"id":"ul0001-0021","num":"0105"},"b":"21"},{"@attributes":{"id":"ul0001-0022","num":"0106"},"b":"22"},{"@attributes":{"id":"ul0001-0023","num":"0107"},"b":"23"},{"@attributes":{"id":"ul0001-0024","num":"0108"},"b":"24"},{"@attributes":{"id":"ul0001-0025","num":"0109"},"b":"25"},{"@attributes":{"id":"ul0001-0026","num":"0110"},"b":"26"},{"@attributes":{"id":"ul0001-0027","num":"0111"},"b":"27"},{"@attributes":{"id":"ul0001-0028","num":"0112"},"b":"28"},{"@attributes":{"id":"ul0001-0029","num":"0113"},"b":"29"},{"@attributes":{"id":"ul0001-0030","num":"0114"},"b":"30"},{"@attributes":{"id":"ul0001-0031","num":"0115"},"b":"31"},{"@attributes":{"id":"ul0001-0032","num":"0116"},"b":"32"},{"@attributes":{"id":"ul0001-0033","num":"0117"},"b":"33"},{"@attributes":{"id":"ul0001-0034","num":"0118"},"b":"34"},{"@attributes":{"id":"ul0001-0035","num":"0119"},"b":"35"},{"@attributes":{"id":"ul0001-0036","num":"0120"},"b":"36"},{"@attributes":{"id":"ul0001-0037","num":"0121"},"b":"40"},"M Migration","P Protocol version","P Protocol version","V Version","V Version"]}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["An example embodiment of the invention is explained in more detail below with reference to the drawings, in which:",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
