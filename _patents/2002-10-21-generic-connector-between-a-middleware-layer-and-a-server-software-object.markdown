---
title: Generic connector between a middleware layer and a server software object
abstract: A method is described for constructing a generalized connector for use in an object-oriented program system, the connector being a middleware service logic mechanism between an event monitor and transmission sub-system and an application system having an application system Application Program Interface (API), wherein the connector can recognize events provided by the event monitor as event objects and can automatically determine which corresponding ENTERPRISE JAVA BEAN (EJB) software object is associated with the event object, and can invoke methods on the EJB software object in a specified order, and can collect the results of the method invocations for return to the event monitor. A connector for performing these functions is also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07627853&OS=07627853&RS=07627853
owner: Accenture Global Services GmbH
number: 07627853
owner_city: Schaffhausen
owner_country: CH
publication_date: 20021021
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED INVENTIONS","COPYRIGHT AUTHORIZATION","TECHNICAL FIELD","BACKGROUND ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","DESCRIPTION OF AN EXEMPLARY EMBODIMENT"],"p":["This application claims priority from provisional United States patent application titled \u201cA GENERIC CONNECTOR BETWEEN VITRIA AND AN EJB COMPLIANT API FOR AN APPLICATION,\u201d Ser. No. 60\/343,614 filed on Oct. 29, 2001.","A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","This invention relates to the field of computer systems. More particularly, the present invention relates to a method and system for using presentations of middleware data structures to represent how to interact with ENTERPRISE JAVA BEAN software objects to permit dynamic bridging of a middleware application to an EJB software object API without knowledge of the underlying functionality.","A technical problem presently exists in the attempt to prepare a connector between systems such as Vitria Business Ware to an ENTERPRISE JAVA BEAN (EJB) software object Application Program Interface (API) for an interfacing application, in that the underlying functionality of the application must be known and explicit code must be written to control an interaction\/session with the JAVA BEAN software object. This is excessively detail oriented and time consuming and therefore subject to error.","In the past, attempts have been made to solve similar problems to permit creation of live applications or applets by using graphical representations of program modules. One such attempt is taught in U.S. Pat. No. 6,044,218 issued Mar. 28, 2000 titled \u201cSystem, method and article of manufacture for creating a live application or applet development environment.\u201d This patent teaches software that cooperatively promotes and permits immediate socialization of new components with existing components as the new components are instantiated or dropped onto the development desktop. This is achieved by registering a new component being instantiated with the development environment's kernel. Registration, in turn, invokes an initialization method derived from the class template that yielded the new component. The initialization method appropriately personalizes the new component when it executes its associated logic. The initialization method provides an editor for the new component if its properties are to be made editable. The software environment, its kernel, templates, components, editor and methods are preferably programmed in the JAVA programming language or a JAVA compatible language.","Another earlier system is taught in U.S. Pat. No. 5,913,065, issued Jun. 15, 1999, titled \u201cSystem, method and article of manufacture for creating hierarchical folder components for use in a JAVA programming language application or applet.\u201d This patent teaches a system and method for creating hierarchical folder components for use with other object oriented based components, including other folder components, and component assemblies. Each hierarchical folder is provided with an editor that pops up upon its instantiation and permits a user to edit the folder component name as well as the number and type of ports assigned to the folder component.","Both of these patents teach systems to use representations of program modules or objects to graphically create an application by automatically connecting these modules or objects to form an executable object oriented program. Neither of these systems or methods describe a way of allowing the message definition of a middleware module to dictate the business logic of interacting with an EJB software object to fulfill the programmed requirements\/events without knowledge of the underlying application functionality.","These is a need in the art for a system and method for a more cost efficient and less error prone system of creating a connector in an object-oriented system by using representations of middleware data structures to represent how to interact with an ENTERPRISE JAVA BEAN software object to permit dynamic bridging of a middleware application to an EJB software object API without knowledge of the underlying application functionality.","The present invention provides a solution to the needs described above through a system and method for creating a connector in an object-oriented system by using representations of middleware data structures to represent how to interact with an ENTERPRISE JAVA BEAN software object to permit dynamic bridging of a middleware application to an EJB software object API without knowledge of the underlying application functionality.","A method is described for constructing a generalized connector for use in an object-oriented program system, the connector being a middleware service logic mechanism between an event monitor and transmission sub-system and an application system having an application system API, wherein the connector can recognize events provided by the event monitor as event objects and can automatically determine which corresponding EJB software object is associated with the event object, and can invoke methods on the EJB software object in a specified order, and can collect the results of the method invocations for return to the event monitor. A connector for performing these functions is also described.","A connector is disclosed which provides for dynamic bridging of a middleware application to an EJB software object API, without knowledge of the underlying procedural functionality of the new application, and includes logic mechanisms for determining the interfacing signature of an EJB software object, determining the new data structures, and logic mechanisms for matching the interfacing signature with the data structures using the JAVA programming language Reflection capability.","Still other embodiments of the present invention will become apparent to those skilled in the art from the following detailed description, wherein is shown and described only the embodiments of the invention by way of illustration of the best modes contemplated for carrying out the invention. As will be realized, the invention is capable of modification in various obvious aspects, all without departing from the spirit and scope of the present invention. Accordingly, the drawings and detailed description are to be regarded as illustrative in nature and not restrictive.","The present invention provides a solution to the needs described above through a system and method for using representations of middleware data structures to represent how to interact with an ENTERPRISE JAVA BEAN software object to permit dynamic bridging of a middleware application to an EJB software object API without knowledge of the underlying application functionality.","The invention and its best mode are described in the following detailed embodiment descriptions.","An exemplary embodiment of the invention is described by means of a description of the installation and use of the Amdocs-Vitria Connector flow and an exemplary description of how to support Vitria connector models that use this flow.","In the following description of the exemplary embodiment, reference is made to a number of external documents, which are known to those skilled-in-the-art, including specifically the following references which are hereby specifically incorporated herein by reference:","External Document References",{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Document","Date","Version"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"API Link Technical Specification"]},{"entry":[{},"Amdocs API Link Authorization and"]},{"entry":[{},"Authentication"]},{"entry":[{},"Java 2 Standard Edition v1.2.2"]},{"entry":[{},"Documentation"]},{"entry":[{},"BusinessWare 3.1.2 Foundations"]},{"entry":[{},"BusinessWare 3.1.2 Connector"]},{"entry":[{},"Programming Guide"]},{"entry":[{},"BusinessWare 3.1.2 Connector"]},{"entry":[{},"Architecture Guide"]},{"entry":[{},"BusinessWare 3.1.2 Programming Guide"]},{"entry":[{},"BusinessWare 3.1.2 Connector Samples"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Also in the following description of the exemplary embodiment, reference is made to various acronyms which are defined as follows:","Terminology",{"@attributes":{"id":"p-0034","num":"0033"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Acronym","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"API","Application Programming Interface"]},{"entry":[{},"COM","Common Object Model\u2009\u2122"]},{"entry":[{},"CORBA","Common Object Request Broker Architecture\u2009\u2122"]},{"entry":[{},"EAI","Enterprise Application Integration"]},{"entry":[{},"EJB","ENTERPRISE JAVA BEANS\u2009\u2122"]},{"entry":[{},"EMT","Error, Messaging, and Trace framework (Vitria)"]},{"entry":[{},"RMI","Remote Method Invocation"]},{"entry":[{},"IDL","Interface Definition Language"]},{"entry":[{},"J2EE","JAVA 2 Platform Enterprise Edition\u2009\u2122"]},{"entry":[{},"CSM","Customer Service Management"]},{"entry":[{},"JDNI","JAVA Naming and Directory Interface\u2009\u2122"]},{"entry":[{},"JDBC\u2009\u2122","JAVA API for executing SQL statements."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Referring now to , a typical BEA\u2122 Tuxedo product architecture  is displayed. In , a CORBA interface is shown allowing Remote CORBA clients  to connect to the CORBA interface system  for passing transaction event objects to the BEA tuxedo infrastructure . Also shown is an application to transaction monitor interface (ATMI) , whereby workstation clients  can pass event transaction objects to the BEA Tuxedo infrastructure .","The present invention will be described with reference to an exemplary system using a VITRIA\u2122 based system. In  a typical Vitria system architecture  is shown. In  a client\/trading partner  receives and passes event objects through the Internet , generally passing an event notice to an application , via the communicator , by means of a Source Connector . Similarly the client  will receive the results of the event or perhaps an error notice, from the application , via the communicator , by means of a Target Connector  and the Internet .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 3","FIG. 3"],"b":["313","301","305","307","307","301","303","317","307","317","315","315","319","307","307","301","311","309"]},"It is the creation and use of generalized Target-Source Connectors that is the subject of the current invention, which is described in more detail below. Such systems are typically constructed using Object Oriented Programming techniques and methods, using the JAVA programming language and system, related object systems, object IDL, ENTERPRISE JAVA BEAN (EJB) software objects, JAVA BEAN software objects, and related technologies, all of which are known to those skilled in theses arts.","General Overview","Building a Vitria connector to an API made available as a set of ENTERPRISE JAVA BEAN software objects, the main design goal is to enable generic handling of these beans by specially formed Vitria events without need of generating JAVA programming language code for each business event defined. A business event can be defined as an event that can have one or more system events interacting with an end system to achieve the overall transaction goal for the business event. For example, a business event could be one of \u201ccreate billing account\u201d where several system events could be: \u201clook for account already created, find parent account, create tentative account holder, add name, add address, add credit class, etc.\u201d Vitria will contain the single business event to be fulfilled while the connector would process the event and handle each system event that is required to complete the overall transaction. The scope of this connector can handle an entire business event as long as it only has to interact with a single session bean. The methods of this session bean enable various system events to be executed as well as the final commit.","Since Vitria connectors manage Vitria events as JAVA programming language value objects (stubs generated from IDL definitions) with no methods, a design pattern is devised to allow this connector to traverse a hierarchy of these objects to determine the business logic needed to be executed. This logic includes which bean to call, the methods (i.e. system events) on the bean to call and the order of method invocation, the simple or complex (value data objects) parameter lists to be passed to these methods and any expected results to be processed and stored in the new event.","The following EJB software object handling capabilities are enabled in this design that are configurable by the way the Vitria event definition is configured:","Selection of an EJB software object method by business event\n\n","Methods on the EJB software object\n\n","Data type parameters for each method\n\n","Handling information returned by the methods\n\n","Handling local value container data type validation exceptions and EJB software object remote exceptions in a generic fashion to either capture the errors in the returned event or by means of the Vitria error event framework and either continue or stop due to connector flow settings.","Configurable special events that will invoke special plug-in classes for EJB software object that do not conform to the assumptions of the generic case or for performance consideration.","The connector framework is broken into several object classes\/areas:\n\n","The Vitria-Amdocs connector enables manipulation of Amdocs APIs (Weblogic ENTERPRISE JAVA BEAN software objects) by means of well-defined Vitria events. For each of these Vitria events, the connector will obtain a bean, invoke methods on the bean in a pre-defined order with data from the event, and collect the results from the method invocations to pass on to the next flow in the Vitria connector model. All of this is done without need of knowledge of the beans themselves by the connector, their methods or the business logic in how to use them. The details on these points are kept in the event definitions that are controlled in IDL specification used by Vitria. The connector \u201cwalks\u201d through the Vitria event data object, attempting to match the fields and sub-fields against EJB software object methods, their parameters and return values. Business logic validation is performed by the EJB software objects themselves (such as used in Amdocs APILink) and data\/requests that fail the validation are passed transparently back through the Vitria connector and into Vitria's error handling processes.","1.1 System Background","1.1.1 Amdocs APILink","APILink is a standardized interface for the Amdocs Ensemble products as it overlays on top of the Ensemble CSM Tuxedo services in the form of Weblogic EJB software objects using BEA's JOLT. This enables HTML web pages to perform the same operations as available in the CSM PowerBuilder client thus making a \u201cthin\u201d client version of the product(s) available. However, APILink can also be used for interfacing directly to other applications by use of its EJB software objects. Due to the highly customized nature of an Ensemble installation for each client, separate installations of APILink usually vary in available method calls, data types, etc. Additionally, the APILink interface has been going through revisions over time and it cannot be guaranteed that an existing client will be using the latest version of the interface\u2014thus having different interfacing signatures.","To overcome these obstacles, this connector handles these EJB software objects generically without need of specific knowledge of an implementation, provided that Amdocs continues to follow certain EJB software object framework guidelines. The connector uses details in the Vitria event data definition itself to walk through the population of method parameters and capturing of results from bean method invocations.","1.1.2 Weblogic Enterprise Java Bean Software Objects","APILink is currently running under Weblogic Application Server v5.1. Weblogic EJB software objects that form APILink are accessible via an environment context that is achieved once a client is logged into the Weblogic environment. Each API EJB software object has a home interface bean that is available through the context that can create remote (server-side) instances of the bean.","As part of its component-based design, the Weblogic environment handling is abstracted from the main Vitria connector logic (flow). This connector component enables the connector to log into a Weblogic environment at start-up and each Vitria event causes the creation\/process\/removal of these EJB software object instances.","1.1.3 Vitria Connector Flow","A connector flow is an object used in a Vitria connector model to receive, process and send Vitria events through the connector model. A target flow is a flow that accepts a Vitria event and passes this information to an external application (usually by means of the application's API). The Vitria connector flow for connecting Vitria to Amdocs is a Target-Source flow which will accept specially designed events with data, manipulate the Amdocs API via Weblogic EJB software objects, and the results will be passed back into an event of the same format (IDL specification) to be further processed by the connection model. Vitria uses flows to encourage re-usability of components and work between connection models as they participate in the transaction of passing\/changing\/formatting the events without knowledge of the other flows operating in the same connection model.","1.2 Implementation Obstacles\/Needs in Integration","The following limitations of the participating systems (Vitria, Amdocs, etc.) are described below to illustrate the scope of functionality needed by the connector design\/functionality.","1.2.1 Handling Business Logic Generically in the Connector","To keep transparency from business logic, the connector handles all incoming Vitria events in a fashion that is not hard-coded into its logic. If defined correctly (in IDL), each event can specify which EJB software object to use, the methods to invoke on the EJB software object, and the data to be passed between Vitria and the EJB software object without need of coding. The use, ordering and data are all provided in the structure defined in the event itself. In addition to normal operations, the connector can also capture business-level data validation errors that are thrown as exception by the EJB software objects and perform special user-defined handling.","1.2.2 Transaction Participation\/Control","Amdocs APILink does not currently implement a form of transaction control. The transaction boundary extends from the Ensemble database(s) to Tuxedo\/Weblogic only where consistency is maintained from the Weblogic environment to the back-end database(s). Due to this limitation, external systems using their EJB software objects cannot guarantee transactional behaviour for the complete event nor each individual EJB software object method invocation that calls the database. Fundamental architecture changes are required by Amdocs to effectively address this issue. A potential problem that could arise is the failure during the process of creating an entity, between the store\/commit and then calling methods to get the results. If this occurs, the key could be unknown and thus may require manual intervention.","To address this issue, the connector enables certain behaviours to improve the manageability of such exception cases. These range from how the connector should behave when the machine(s) running Vitria BusinessWare fail to record additional logging of the entire event itself. Some of these behaviours are controllable as parameters on the flow bean interface.","1.2.3 Handling Default\/Optional Parameter Values","EJB software objects could receive and return values of null in place of arrays, JAVA programming language Strings, JAVA programming language Dates and other complex data types (objects). However, Vitria event data are always initialised and therefore cannot hold null values. The connector facilitates handling of null in the data exchange between Vitria and the EJB software objects by a series of rules controllable as connection flow parameters. Based on the desired preferences, the connector will pass null and will handle values that return null from the EJB software object.","1.2.4 Solution Expansion for Performance and Future Needs","There may be cases in the future where Amdocs chooses to deviate from the assumptions listed in this document. Also, events with large number of calls that are complex can sometimes require duplicate information to be provided to several events, etc. Due to these points, a special process is available to deal with these cases.","The connector allows for \u201cspecial\u201d event handling that will identify the incoming events and call the corresponding plug-in class for handling this special case.","Transaction control, handling NULL values and special case handling are discussed in more detail below.","2. Connector Functional Scope\/Capabilities","The following outlines the functional capabilities available in the exemplary embodiment of the invention and those areas that are not possible or not in scope for this exemplary embodiment.","2.1 EJB Software Object Constraints Handled by this Connector","The EJB software object characteristics supported by this exemplary connector embodiment are as follows. This framework is intended to support Amdocs EJB software objects. However if other EJB software object vendors adhere to this framework this connector should be compatible.","2.1.1 EJB Software Object Access and Handling","The EJB software objects are accessed first by obtaining an environment context via Weblogic methods. This is done using a URL for the Weblogic server, a user name and a password.","From the Weblogic context, the connector will support all beans with the same JNDI name prefix (i.e. \u201camdocsBeans\u201d in amdocsBeans.NewCustomerConvHome, etc.). Beans available under different naming prefixes will require separate connector flows to be defined to handle beans in different namespaces. At least one JNDI prefix is mandatory in order to make the EJB software objects available thought the Amdocs connector. Examples of full valid JNDI names are\n\n","Access to the remote interface is achieved by invoking the \u201ccreate\u201d method on the EJB software object home object with no parameters. The creates method is a typically implemented by EJB software object application vendors though not required. When this method is present, it will invoke the standard \u201cejbCreate\u201d method as dictated by the EJB software object framework to obtain the remote interface\/session.","The connector only manipulates public methods on the bean. It will not attempt to access data members if available. Therefore all data members to be accessed on a bean require public accessory bean methods.","At the completion of a transaction, the connector will call the \u201cremove\u201d method on the bean to attempt to clean up the server-side memory of the session.","2.1.2 EJB Software Object Methods and Method Invocation","The connector uses the IDL\/Vitria event data structure to understand the order of method invocation on a bean. In cases of method overloading where multiple EJB software object methods with the same name are available, the connector will try to isolate a match first by number parameters and if needed, parameter types. Parameter types are limited to identification of class names only (not the full qualifying name including its package).","Bean methods supported can accept one or more input parameters, return values, or both.","Bean methods are supported if they all input parameters and return values that follow the supported data types below.","2.1.3 EJB Software Object Data Types Supported","All primitive data types are supported: boolean, byte, char (character), short, int (integer), long, float, and double.","JAVA programming language Strings and Dates are supported (java.lang.String and java.util.Date).","Complex data types are supported if they follow the following:\n\n","Where applicable, valid accessory methods exist as the data member name prefixed by either \u201cget\u201d or \u201cset\u201d.","Valid get accessory methods take no parameters and return the private member. The private member has to be a valid data type listed in this section.","Valid set accessory methods return nothing (void), and accept only one parameter of the same type as the private member. The private member has to be a valid data type listed in this section.","Valid data types can also be single-dimensional arrays of the mentioned data types in this section (i.e. primitive, String, Date, complex).","2.2 Known EJB Software Object Variants Which may not be Supported by a Particular Connector Implemented in Accordance with the Present Invention\n\n","3. Installation Process","In the preferred embodiment, the majority of the connector is built in the JAVA programming language and thus should be transparent between operating systems. Even though this is the case for most of the source code, the environment settings, variables, JAVA programming language class paths, etc. differ slightly. The following sub-sections detail the process for both Windows NT\u2122 and Solaris\u2122 environments as sanctioned by Vitria.","3.1 Connector Details","The following connector details describe the requirements and components of the installation:","3.1.1 Connector Requirements","The following system configuration is required",{"@attributes":{"id":"p-0101","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Operating System","Windows NT or Solaris Unix as supported"]},{"entry":[{},"by Vitria"]},{"entry":["Vitria BusinessWare version","3.1.x"]},{"entry":["JAVA Runtime Environment","1.2.2 (Java 2)"]},{"entry":["EJB Environment","Weblogic 5.1 Service Pack 10. The"]},{"entry":[{},"machine that runs the connector needs the"]},{"entry":[{},"Weblogic files to be in the class path in"]},{"entry":[{},"order to successfully connect to the"]},{"entry":[{},"Weblogic server."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"3.2 Installation Differences on Windows NT vs. Solaris UNIX","The primary differences found for connector installation on Solaris UNIX (8.0) from Windows NT are as follows:\n\n","The only system-dependent file that is required by Vitria for this connector is a linked library called \u201cvtAmdocsLocale3_o2r.dll\u201d under the (Vitria . . . ).backslash.bin path on NT and called \u201clibvtAmdocsLocale3_o3gri.so\u201d on Solaris 8.0.","All provided \u201c.class\u201d files are system-independent (as per the JAVA programming language specification) and therefore require only copying to the correct location on the Solaris machine. The files will work on either system.","3.3 Connector Files","The following files are deployed at the successful completion of the connector installation. All files assume to be deployed to Vitria installation path specified by system variable % VITRIA % in Windows and $VITRIA in Solaris (for example: data.backslash.install could be C:.backslash.Program Files.backslash.Vitria.backslash.BW31.backslash.data-.backslash.install where % VITRIA %=C:.backslash.Program Files.backslash.Vitria.backslash.BW31 on NT and $VITRIA=.backslash.usr.ba-ckslash.local.backslash.BW31 on Solaris):",{"@attributes":{"id":"p-0108","num":"0140"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["File Path\/Area","File(s)","Operation","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["bin\\win32","vtAmdocsLocale3","File","File Library executable that is"]},{"entry":[{},"_o2r.dll","Added","specific to Windows NT\/2000"]},{"entry":["bin\/sparc_solaris","libvtAmdocsLocale","File","File Library executable that is"]},{"entry":[{},"3_o3 gri.so","Added","specific to Solaris UNIX"]},{"entry":["data\\install or","AmdocsConnector","File","Connector INI for use by"]},{"entry":["data\/install",".ini","Added","Vitria"]},{"entry":["interdef","(IDL file)","File","Example IDL that could be"]},{"entry":[{},{},"Added","used by the connector"]},{"entry":["java\\win32 or","getBeans.class","File","IDL building tool that"]},{"entry":["java\/sparc_solaris",{},"Added","connects to a Weblogic"]},{"entry":[{},{},{},"server and compiles a list of"]},{"entry":[{},{},{},"available beans"]},{"entry":["java\\win32 or","IDLBuild.class","File","IDL building tool that"]},{"entry":["java\/sparc_solaris",{},"Added","allows for user interaction to"]},{"entry":[{},{},{},"automate the IDL generation"]},{"entry":[{},{},{},"process"]},{"entry":["java\\win32\\. . . or","Connector Java","File","JAVA class files that"]},{"entry":["java\/sparc_solaris\/. . .","class files","Added","implement the Connector in"]},{"entry":[{},{},{},"in the package com.accenture"]},{"entry":[{},{},{},".vitria.amdocs.connector and"]},{"entry":[{},{},{},"com.accenture.vitria.amdocs."]},{"entry":[{},{},{},"connector.tools"]},{"entry":["java\\local or","Java files(s)","File","This process is normal during"]},{"entry":["java\/local","generated by the","Generated","the importing and registering"]},{"entry":[{},"Vitria jstubgen",{},"IDL for events in Vitria."]},{"entry":[{},"utility"]},{"entry":["data\\install or","vtInstalled.cfg","File","This file lists the connectors"]},{"entry":["\/data\/install",{},"Modified","installed. On initial"]},{"entry":[{},{},{},"installation, this connect"]},{"entry":[{},{},{},"requires the line"]},{"entry":[{},{},{},"\u201cAmdocsConnector\u201d"]},{"entry":[{},{},{},"Appended."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"4. Building a Connector Model: General Use Case","Referring now to , a general process of the present invention is depicted, for how to implement\/configure a generalized connector for an object oriented business system environment, as in the exemplary Amdocs-Vitria connector . In , the following steps need to take place:\n\n","Then configure its parameters for connecting to an application system environment  (such as the exemplary Weblogic environment) and to dictate options desired in connector flow behaviour.\n\n","4.1 Defining Business Events","Though most tool and connector processes automate the majority of the effort of defining events (such as the exemplary Vitria events)  and supporting IDL data structures, they still require definition of the business events that is a step required to be defined by the implementer. This step requires an understanding of which EJB software object will process the business event and which methods on the EJB software object that need to be invoked in a particular order . An event (such as the exemplary Vitria event) will represent this business event and this event cannot span processing over multiple EJB software objects for completion. It is valid for multiple events to use the same EJB software object (many to one).","4.2 IDL Generation","Once the business events are defined (event names given for each event, the bean assigned, and the bean method invocation order defined, etc.), IDL needs to be defined . This IDL needs to be imported and stubs generated in the event generating sub-system (such as Vitria) so that the connector can successfully identify the business events, process the data against the related EJB software object and return the results. A series of JAVA programming language tools provided with the connector automates most of this process. The following section(s) contain information on the IDL requirements and IDL tool generator.","4.3 Connection Model Configuration","To create a new connection model  to be used with the application system environment's EJB software objects (such as the exemplary Amdocs APILink EJB software objects), one can create, for example, a \u201cNew Amdocs Connection Model\u201d that will create the following set-up:","Referring to , the basic connection model has a Vitria Channel Source , an Accenture-Amdocs APILink Flow , and a Vitria Channel Target  wired together as shown. The basic process is that an incoming event, properly defined, will be used by the APILink flow to process against a corresponding EJB software object, and the results and the flow then passes an event of the same kind as the incoming event that is essentially a copy of the original with results of method calls being added to the event data. This output event is then passed on to the next flow (which will be to a destination channel in the example above).","Before this model can be used, the APILink flow properties need to be configured as described in the following section. To do this, in the present invention one right-clicks on the flow selected (see ) and selects the option \u201cProperties.\u201d","4.3.1 EJB Software Object\/Amdocs Flow Properties","The diagram in  shows the property sheet for the APILink  and the default values . At a minimum one needs to specify the Weblogic server URL  (if not already the default), User name  and Password . If desired, one can optionally provided a top-level module name  (Allow only events that belong to module) that will cause the flow to filter and only process events that belong in the module to be.","The following properties listed in the Property column  are configurable in the Amdocs APILink flow. Properties listed as \u201cAdvanced Settings.\u201d (The descriptions provided are also available on the Flow Property sheet at the bottom of the dialogue box .)",{"@attributes":{"id":"p-0123","num":"0159"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Property","Description","Default"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Accept values that are","Advanced Setting: This","True"]},{"entry":["null from Bean","setting indicates if the"]},{"entry":[{},"connector will accept null"]},{"entry":[{},"values from EJB data types."]},{"entry":[{},"If an object that may be a"]},{"entry":[{},"String, Data, other data"]},{"entry":[{},"types or arrays is received"]},{"entry":[{},"as null, the Connector will"]},{"entry":[{},"treat them as pre-"]},{"entry":[{},"established default values in"]},{"entry":[{},"Vitria data as empty strings,"]},{"entry":[{},"empty arrays, etc. Please"]},{"entry":[{},"refer to section 4.5.2"]},{"entry":[{},"(Accepting Null Return"]},{"entry":[{},"Values from Bean Methods)"]},{"entry":[{},"for more details."]},{"entry":["Allow to specify","Advanced Setting: This","False"]},{"entry":["optional complex","setting enables or disables"]},{"entry":[{},"support for specially"]},{"entry":[{},"defined Vitria event data to"]},{"entry":[{},"pass as null to EJB methods"]},{"entry":[{},"for input method"]},{"entry":[{},"parameters expecting"]},{"entry":[{},"complex data class types."]},{"entry":[{},"True will enable this"]},{"entry":[{},"support. False will treat"]},{"entry":[{},"these event data during the"]},{"entry":[{},"processing as mapping"]},{"entry":[{},"errors. Please refer to"]},{"entry":[{},"section 4.5.1 (Providing"]},{"entry":[{},"Null Parameter Values to"]},{"entry":[{},"Bean Methods from Vitria)"]},{"entry":[{},"for more details."]},{"entry":["Allow only events that","Optional. This prefix","(None)"]},{"entry":["belong to module","should reference the"]},{"entry":[{},"highest-level module you"]},{"entry":[{},"defined that contains the"]},{"entry":[{},"events the flow will accept."]},{"entry":[{},"Leaving this blank will"]},{"entry":[{},"cause the flow to not filter"]},{"entry":[{},"the incoming event. Please"]},{"entry":[{},"refer to earlier in this"]},{"entry":[{},"section for more details."]},{"entry":["Commit after","Vitria default (determines","False"]},{"entry":[{},"who initiates the"]},{"entry":[{},"transaction). Not discussed"]},{"entry":[{},"here."]},{"entry":["JNDI Binding Name","Required. This value is the","amdocsBeans"]},{"entry":["Prefix","prefix that will be appended"]},{"entry":[{},"all bean names defined in"]},{"entry":[{},"the event spec. This"]},{"entry":[{},"<prefix>.<bean> is used to"]},{"entry":[{},"locate the Weblogic"]},{"entry":[{},"Container to use during"]},{"entry":[{},"event processing. Only one"]},{"entry":[{},"prefix can be used per"]},{"entry":[{},"instance of this connection"]},{"entry":[{},"flow. Please refer to"]},{"entry":[{},"section 6.2 (IDL"]},{"entry":[{},"\u201cWalkthrough\u201d Process)"]},{"entry":[{},"for more details."]},{"entry":["Log Level","Vitria standard. Setting the","(Vitria's default)"]},{"entry":[{},"log level to the highest"]},{"entry":[{},"setting is recommended"]},{"entry":[{},"when trouble-shooting"]},{"entry":[{},"Weblogic connection and\/or"]},{"entry":[{},"event processing problems."]},{"entry":["No Dates Pass Null","Advanced Setting: This","True"]},{"entry":["To Bean","setting controls connector"]},{"entry":[{},"flow behaviour when data"]},{"entry":[{},"from a Vitria event supplies"]},{"entry":[{},"a blank String value that"]},{"entry":[{},"will be converted to a JAVA"]},{"entry":[{},"Date object for input to a"]},{"entry":[{},"bean method. A setting of"]},{"entry":[{},"True passes to the bean null"]},{"entry":[{},"for the Date value. A value"]},{"entry":[{},"of False passes the current"]},{"entry":[{},"system date\/time of the"]},{"entry":[{},"environment running the"]},{"entry":[{},"connector. Please refer to"]},{"entry":[{},"section 4.5.1 (Providing"]},{"entry":[{},"Null Parameter Values to"]},{"entry":[{},"Bean Methods from Vitria)"]},{"entry":[{},"for more details."]},{"entry":["Password","Password that the connector","(None)"]},{"entry":[{},"will use to gain access to"]},{"entry":[{},"the EJB environment."]},{"entry":["Participates in","Advanced Setting: this","True"]},{"entry":["transactions","setting allows the connector"]},{"entry":[{},"to either implement the"]},{"entry":[{},"\u201cone-phase\u201d transactions"]},{"entry":[{},"process or not implement"]},{"entry":[{},"any form of transaction"]},{"entry":[{},"control inside the"]},{"entry":[{},"connection model."]},{"entry":[{},"A connection model can"]},{"entry":[{},"have only one source or"]},{"entry":[{},"target flow that uses a one-"]},{"entry":[{},"phase transaction resource."]},{"entry":[{},"Therefore, if two Amdocs"]},{"entry":[{},"connectors are needed in the"]},{"entry":[{},"same connection model"]},{"entry":[{},"only one can have this"]},{"entry":[{},"property set to true."]},{"entry":["Prefix for names of","Advanced Setting: Prefix","\u201cspec_\u201d"]},{"entry":["Plug-In Events","for identifying events that"]},{"entry":[{},"should be treated with a"]},{"entry":[{},"special plug-in class."]},{"entry":[{},"Warning: modification to"]},{"entry":[{},"this setting should be done"]},{"entry":[{},"prior to any IDL and\/or"]},{"entry":[{},"JAVA plug-in classes are"]},{"entry":[{},"developed. Please refer to"]},{"entry":[{},"section 5.2 (Process of"]},{"entry":[{},"Creating a New Plug-In)"]},{"entry":[{},"for more details."]},{"entry":["Rollback events being","To guarantee that events are","True"]},{"entry":["processed during","not lost, set to (true) else"]},{"entry":["machine failure","(false) will help avoid"]},{"entry":["on start-up","duplicate processing."]},{"entry":[{},"Please refer to section 4.6"]},{"entry":[{},"(Recovery Behaviour) for"]},{"entry":[{},"more details."]},{"entry":["Send bean application","Flag to determine what","False"]},{"entry":["errors to connector","happens when a bean"]},{"entry":["error model","throws an exception"]},{"entry":[{},"(usually when the bean's"]},{"entry":[{},"business\/application logic"]},{"entry":[{},"determines invalid data,"]},{"entry":[{},"etc.) Setting to true will"]},{"entry":[{},"cause an error to be sent to"]},{"entry":[{},"the connector error model."]},{"entry":[{},"False will treat it as normal"]},{"entry":[{},"(the status parameter in the"]},{"entry":[{},"event will still contain the"]},{"entry":[{},"error information for use"]},{"entry":[{},"later). Please refer to"]},{"entry":[{},"section 4.4.1 (Bean"]},{"entry":[{},"Application Errors) for"]},{"entry":[{},"more details."]},{"entry":["Send data mapping","Flag to determine what","True"]},{"entry":["errors to connector","happens if data mapping"]},{"entry":["error model","failures occur between an"]},{"entry":[{},"event and a bean. True"]},{"entry":[{},"sends the error to the"]},{"entry":[{},"connection error model"]},{"entry":[{},"(normal case). A value of"]},{"entry":[{},"false will cause the flow to"]},{"entry":[{},"ignore the error and instead"]},{"entry":[{},"pass-through the original"]},{"entry":[{},"event to the next flow in the"]},{"entry":[{},"connector model. Please"]},{"entry":[{},"refer to section 4.4.2"]},{"entry":[{},"(Mapping Errors) for more"]},{"entry":[{},"details."]},{"entry":["String Value If Null","Advanced Setting: If null","\u201cnull\u201d"]},{"entry":[{},"values can be passes as"]},{"entry":[{},"String values to bean, the"]},{"entry":[{},"connector will do so when"]},{"entry":[{},"the value of the String"]},{"entry":[{},"matches this value. Please"]},{"entry":[{},"refer to section 4.5.1"]},{"entry":[{},"(Providing Null Parameter"]},{"entry":[{},"Values to Bean Methods"]},{"entry":[{},"from Vitria) for more"]},{"entry":[{},"details."]},{"entry":["Strings Values Can Be","Advanced Setting: This","False"]},{"entry":["Passed as Null","setting indicates if the"]},{"entry":["To Bean","connector will look for a"]},{"entry":[{},"specific String value to tell"]},{"entry":[{},"it to pass null to the bean"]},{"entry":[{},"instead of a String value. If"]},{"entry":[{},"this setting is True the"]},{"entry":[{},"connector will compare the"]},{"entry":[{},"\u2018String Value If Null\u2019"]},{"entry":[{},"parameter value to the value"]},{"entry":[{},"provided by the Vitria"]},{"entry":[{},"Event and the connector"]},{"entry":[{},"will send null on matches."]},{"entry":[{},"If this setting is False, the"]},{"entry":[{},"connector will ignore the"]},{"entry":[{},"\u2018String Value If Null\u2019"]},{"entry":[{},"setting and always pass the"]},{"entry":[{},"String. Please refer to"]},{"entry":[{},"section 4.5.1 (Providing"]},{"entry":[{},"Null Parameter Values to"]},{"entry":[{},"Bean Methods from Vitria)"]},{"entry":[{},"for more details."]},{"entry":["URL","URL and port number of","\u201chttp:\/\/localhost:"]},{"entry":[{},"the Weblogic Server","7001\u201d"]},{"entry":[{},"environment that the"]},{"entry":[{},"connector will use to gain"]},{"entry":[{},"access. The default"]},{"entry":[{},"assumes a firewall"]},{"entry":[{},"tunnelling is required. If"]},{"entry":[{},"not, the t3 protocol should"]},{"entry":[{},"be used to obtain a"]},{"entry":[{},"connection to the Server."]},{"entry":[{},"HTTP is used when firewall"]},{"entry":[{},"tunnelling is needed. If the"]},{"entry":[{},"Weblogic server is not"]},{"entry":[{},"accepting HTTP tunnelling,"]},{"entry":[{},"please refer to the"]},{"entry":[{},"troubleshooting section"]},{"entry":[{},"later on in this document."]},{"entry":["User","User ID that the connector","(None)"]},{"entry":[{},"will use to gain access to"]},{"entry":[{},"the EJB environment."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"4.3.2 Error Model Configuration","When creating a connector model (such as for example, an Amdocs Connector Model), it is suggested to always configure the error connection model to treat abnormal connector behaviour, EJB software object data errors, etc. At a minimum, it is suggested to specify a dedicated log file name and path. See  to see how this can be achieved:\n\n","The APILink flow will send errors to this module of the following kind:\n\n","As a default, the Error Model will \u201cstop on\u201d (i.e. stop the connection model execution) on all events sent to it. This behaviour can be changed, for example as per normal Vitria BusinessWare connector configuration steps specified in vendor documentation.","4.3.3 Connection Model Properties","To correctly access the application system as for example, the Weblogic environment, additional directories may need to be specified to use vendor's classes if not already available in the CLASSPATH of the user used by Vitria BusinessWare. For convenience, one could assign a system variable such as \u201cEXTRA\u201d to make available these directories. Referring now to , if these directories are required to be added for correct functioning of the connection model:\n\n","In the exemplary embodiment, at minimum, the following classes\/paths need to be specified in the EXTRA classpath:\n\n","It is relevant to note that none of the EJB software object classes, neither home interfaces nor remote interfaces classes, are required on the connector side. Therefore, as long as there are not any plug-ins implemented (see the description below) it is recommended to avoid adding these classes in the EXTRA classpath.","4.4 Error Model Features","There are three classes of errors handled by the exemplary connector:\n\n","All three can be sent to the Error Model in the Connection Model to allow for flexible handling of different errors that occur (such as stopping the connector flow execution that will halt event processing, reporting errors to error-handling routines via special channels, etc. The following subsections describe each class of error separately.","4.4.1 Bean Application Errors","Exceptions thrown by the EJB software objects during method invocations are handled as bean application errors (also known as \u201cBean Unhappy\u201d errors). These exceptions are thrown when event data provided is invalid or for other reasons determined by the application business logic. The connector is transparent to application business logic and will not directly throw such exceptions. Instead the connector flow will capture these exceptions thrown, obtain the error details and pass the information back without treating the error.","The connector flow is configurable on how to direct the application error. It can either treat the error as normal behaviour and record the error in an updated status parameter for the event that will be passed on to the next flow in the connection model (default) or send the error to the error model. This behaviour is dictated as a flow property called \u201cSend bean application errors to connector error model\u201d ( in ) where true will send the event to the error model and false will not.","For bean application errors that are sent to the Error Model, in the exemplary embodiment, they will have the following error code and sub-code: Major Code=101200, Minor Code=101210.","4.4.2 Mapping Errors","Mapping errors occur when the connector fails to find proper EJB software objects, bean methods, data parameters, or method results using the Weblogic environment while processing an event. Most errors will be due to poorly defined IDL definitions or due to changes in EJB software objects on new deployments to the server. The handling of these errors is to send them to the Error Model (default) or to simply specify them in the status event parameter for another flow or recipient application to process. This behaviour can be specified with the flow property called \u201cSend data mapping errors to connector error model\u201d ( in ) where true will send the error to the error model and false will not. The level of tolerance for what constitutes a \u201cmismatch\u201d is adjustable via advanced flow property settings (such as handling null values, etc). When such error occurs, no further method invocations will occur for the event.","For mapping errors that are sent to the Error Model, in the exemplary embodiment, they will have the following error code and sub-code: Major Code=101200, Minor Code=007.","Note: Such errors should not occur during production if thorough testing has been performed during development\/configuration.","4.4.3 System Errors","System errors occur due to unexpected internal failure of the connector, application system (such as Weblogic) server failure, invalid application system (such as Weblogic) logins, bad URL, etc. These errors are not due to application data problems and all system errors will be sent to the Error Model in the exemplary embodiment with a default error sub-code of 911. In most Error Model configurations, this will stop the connection model processing (in some cases, foe example, throwing the light indicator on the console to yellow).","All system errors will be sent to the Error Model. In the exemplary embodiment, the error will have the following error code and sub-code: Major Code=101200, Minor Code=911.","4.5 Handling Null (Advanced Property Settings)","As mentioned above, in the exemplary embodiment, Vitria does not hold values of null in their event data structure. However there will be times where the connector expects null to be passed to its methods when its parameter(s) are optional or unused. Conversely, bean methods and\/or bean data type accessory methods could return null that will need to be handled. The following sub-sections describe the options available that can be set on the connector flow to handle such behaviour. These behaviours can only be configurable at the flow level and not at the event level. To accommodate event-level behaviour, it is suggested that separate flows are used with different configuration settings and that the events requiring particular treatment be routed ahead of time to the specific flow. In the exemplary embodiment, in all cases, there will never be null values either required or returned by the EJB software object for primitive data types. Primitive data types will always be initialised (as per the JAVA programming language specification).","4.5.1 Providing Null Parameter Values to Bean Methods from Vitria","In the exemplary embodiment, except for \u201coptional\u201d array parameters (null), the connector can be configured to pass null to EJB software object methods by specially defined event data in Vitria. When optional values are not provided, these usually exist as \u201cnull\u201d (i.e. not initialised). These null values can be in place of bean method parameters or member fields of complex data types. The following table describes the behaviour of each data type supported by the connector to pass null:",{"@attributes":{"id":"p-0150","num":"0201"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[{},{},"Default"]},{"entry":["Data Type","Vitria event format for passing null","Behaviour"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JAVA primitive","(Not applicable)","(Not"]},{"entry":["types",{},"applicable)"]},{"entry":["JAVA String","When the connection flow property","String are"]},{"entry":["Objects","\u201cString Values Can Be Passed As","always defined"]},{"entry":["(java.lang.String)","Null To Bean\u201d is set to true and a","(non-null)"]},{"entry":[{},"Vitria event string data field equals"]},{"entry":[{},"the value of the connection flow"]},{"entry":[{},"property \u201cString Value If Null\u201d"]},{"entry":[{},"(such as \u201cnull\u201d), the connector will"]},{"entry":[{},"ignore the Vitria string and instead"]},{"entry":[{},"pass null in its place."]},{"entry":["JAVA Date","JAVA Date objects are represented as","Blank string"]},{"entry":["Objects","strings in Vitria. When the con-","fields in Vitria"]},{"entry":["(java.Util.Date)","nection flow property \u201cNo Dates Pass","will be passed"]},{"entry":[{},"Null to Bean\u201d is set to true, empty","as null to bean"]},{"entry":[{},"(\u201c\u2009\u201d) string fields in Vitria event","method"]},{"entry":[{},"data will be passed as null in place","parameters"]},{"entry":[{},"of a Date object to the bean method.","expecting"]},{"entry":[{},"A value of false will default the","Dates"]},{"entry":[{},"Date object to the system date."]},{"entry":["Complex Data","Since Vitria always initialises its","Complex"]},{"entry":["Objects (EJB","event data stub class members, to","objects will"]},{"entry":["data classes)","handle them as optional requires them","always be"]},{"entry":[{},"to be represented in IDL as","passed"]},{"entry":[{},"<sequences> (i.e. arrays). When the","(property set"]},{"entry":[{},"flow property \u201cAllow to specify","to false)"]},{"entry":[{},"optional complex\u201d is set to true, the"]},{"entry":[{},"connector will allow a Vitria"]},{"entry":[{},"IDL - EJB method signature array"]},{"entry":[{},"mapping mismatch as follows: empty"]},{"entry":[{},"array passes null as the parameter,"]},{"entry":[{},"otherwise array of size one will be"]},{"entry":[{},"passed as the component type."]},{"entry":[{},"When setting the flow property to"]},{"entry":[{},"false, the connector expects a com-"]},{"entry":[{},"plex data object (non-array) to"]},{"entry":[{},"represent the EJB method parameter."]},{"entry":[{},"Regardless of property setting, if the"]},{"entry":[{},"array size is greater than one or the"]},{"entry":[{},"component type of the array is not"]},{"entry":[{},"complex, a mapping error will still be"]},{"entry":[{},"generated."]},{"entry":[{},"Note: supporting optional complex"]},{"entry":[{},"data classes imply that a Vitria trans-"]},{"entry":[{},"former creating the input event will"]},{"entry":[{},"need to handle array creation for"]},{"entry":[{},"this parameter which may not be"]},{"entry":[{},"possible to be handled with the Vitria"]},{"entry":[{},"Transformer 2.0 flow."]},{"entry":["Arrays","Not supported.","(Will always"]},{"entry":[{},"(This would require a similar","pass an empty"]},{"entry":[{},"approach to complex data objects that","array to the"]},{"entry":[{},"would imply multi-dimensional","EJB method)"]},{"entry":[{},"arrays in Vitria).",{}]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"4.5.2 Accepting Null Return Values from Bean Methods","Similar to the previous section, the connector is configurable in behaviour in accepting return values from EJB software object method invocations to be passed back to Vitria. This capability is not symmetric due to the fact that the data types in Vitria and used by the EJB software object are not symmetric (i.e. no null vs. null). For return values from the EJB software object, the flow property that dictates connector behaviour is called \u201cAccept values that are null from Bean\u201d ( in ). When set to true (the default), the connector will handle null return values from EJB software object methods except in cases where null is present and the expected return is a JAVA programming language primitive (indicating that the EJB software object data type was not primitive). A property setting of false will cause the connector to indicate a mapping error. In the exemplary embodiment, the following table describes what will result in Vitria when null is returned based on Vitria data type:",{"@attributes":{"id":"p-0153","num":"0204"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Data Type","Event Data for Returned Values"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JAVA","(Not applicable. Will cause mapping error)."]},{"entry":"primitive"},{"entry":"types"},{"entry":["JAVA String","Empty (\u201c\u2009\u201d) string"]},{"entry":"Objects"},{"entry":"(java.lang.String)"},{"entry":["JAVA Date","Empty (\u201c\u2009\u201d) string since Vitria is representing these"]},{"entry":["Objects","EJB data types as strings in its event data."]},{"entry":"(java.Util. Date)"},{"entry":["Complex","Default value that was set on default on the new"]},{"entry":["Data Objects","initialised Vitria event data object. This means the"]},{"entry":["(EJB data","members of this default object are 0 for primitive"]},{"entry":["classes)","members, empty (\u201c\u2009\u201d) for strings, empty sequences"]},{"entry":[{},"(arrays) and initialised sub-event data classes for"]},{"entry":[{},"complex (recursion process)"]},{"entry":["Arrays","Empty [ ]"]},{"entry":"(sequences)"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"4.6 Recovery Behaviour","In the exemplary embodiment, for all source and target flows in Vitria, they participate in transaction control via use of a transaction resource. When an application system (such as a BusinessWare server) server failure occurs, this transaction resource is queried for the last state known prior to failure. The resource can respond by telling BusinessWare that the transaction was being prepared or was committed. The BusinessWare server will rollback and reattempt processing of the same event handled during the failure if the flow reports \u201cPrepared\u201d. BusinessWare will drop events that have been reported \u201cCommitted.\u201d","In the preferred embodiment, the normal behaviour for target flows is to report \u201cPrepared\u201d when the actual status is undetermined. This avoids loss of any events due to BusinessWare server failure. However, there may be important events where one would desire to \u201close\u201d the event rather than to send duplicates. This could be the case where duplicate information will cause damage to the application behaviour or require significant manual intervention. In this case \u201cCommitted\u201d could be specified.","The APILink\/EJB software object connector flow allows for some flexibility in this participation and can be configured to support either \u201cPrepared\u201d or \u201cCommitted\u201d. This configuration is done as a flow property called: \u201cRollback events being processed during machine failure on start-up\u201d ( in ). If this parameter is set to true, during such a failure the flow will report to BusinessWare \u201cPrepared\u201d (i.e. retry the event). Otherwise the flow will report \u201cCommitted,\u201d thus avoiding the possibility of duplicates. The default setting is true (as conforming to standard target flows).","5. Building a Connector Flow Plug-In: Advance Use","There may be cases where the Amdocs EJB software objects available may not conform to the general-case handling described in the base case. There may be situations when using the default processing is not convenient, efficient or possible to use. Addressing these cases, the connector framework is extensible to allow for special cases to be processed as in the form of plug-ins.","5.1 Plug-In Concept","The plug-in concept is quite simple: allow the end user to build extensions to the connector flow for special-treatment of handling an EJB software object. Plug-in extensions use the same facilities as the general case handling (determining which bean to call, maintaining log-in to the Weblogic environment, etc) while enabling a developer to add some limited business logic to the bean handling. All that is required is for the JAVA programming language plug-in to extend a provided base plug-in and to implement an abstract method specified on the base class. The implemented method on the plug in will access the EJB software object directly, invoking the methods, catching the exceptions, and collecting the return data from the APILink EJB software object methods. All logging, event system (such as for example Vitria) flow characteristics, application system (such as for example Weblogic) environment, etc. will still be handled automatically as in the base case.","When encountering an event with the name that has the special-event prefix, the connector will attempt to re-use the corresponding plug-in class to handle the event if it has already been used once during the connector operation (for performance reasons). If not found, it will attempt to dynamically load the JAVA programming language class. If the class is unavailable during runtime due to it not existing, bad CLASSPATH setting or invalid event name (misspelled) the connector will throw a system error (exception).","If the plug-in class is available, the method \u201cprocess\u201d will be invoked with request input parameter of the Vitria event, for example, and the obtained bean. The implemented \u201cprocess\u201d method will then directly manipulate the bean, passing data available in the request parameter to the bean methods, capturing method results and assigning them back to the request object, and catching and handling bean exceptions. An available method for changing the status object of the Vitria event, for example, is available to the \u201cprocess\u201d method for updating the status of the business event. Once completed, the \u201cprocess\u201d method will return the modified request object and control back to the connector flow.","5.2 Process of Creating a New Plug-In","The process of creating a new plug-in is as follows:\n\n","6. Building IDL to Handle Logic for Business Events","Since the connector relies on the module definition used for the incoming event to determine which bean and order of the bean method invocation to fulfil the business event, care on defining the IDL should be taken. A separate set of JAVA programming language tools available with the connector can automate the process of creating the IDL to represent the EJB software objects, data structures and event processing that is mentioned below. Further details on these tools are described below along with a full example of an IDL file.","6.1 Entity Components Represented in IDL","In the exemplary system, the following entities need to be represented in the IDL to enable the connector to apply data from Vitria correctly in the Weblogic environment (EJBs, etc.).",{"@attributes":{"id":"p-0170","num":"0226"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Entity","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["IDL","At the top level, all business events used by the connector can"]},{"entry":[{},"neatly be organized within one top-level module. The Amdocs"]},{"entry":[{},"connection flow has a parameter that can be used to specify"]},{"entry":[{},"filtering of events\/interfaces to those that belonging only"]},{"entry":[{},"to this module. The contents of this IDL module"]},{"entry":[{},"definition are:"]},{"entry":[{},"1. Data types- struct definitions of data type classes used by"]},{"entry":[{},"the beans to pass information other than primitive data types"]},{"entry":[{},"2. Sub-modules- used to separate and declare entities used for"]},{"entry":[{},"processing EJBs by each bean by module. These sub-modules"]},{"entry":[{},"are necessary to allow uniqueness between bean methods on"]},{"entry":[{},"different beans that have the same method name but may have"]},{"entry":[{},"different parameters or return values. The connector relies on"]},{"entry":[{},"the name of the method to do a method invocation."]},{"entry":[{},"3. Status struct- used on every event by the connector to"]},{"entry":[{},"communicate errors within the event's data body. These errors"]},{"entry":[{},"will typically capture information from exceptions thrown by"]},{"entry":[{},"the beans themselves due to data validation problems."]},{"entry":["Bean","For each EJB that will be manipulated by the connector, there"]},{"entry":[{},"is a defined sub-module in IDL reserved for the bean to"]},{"entry":[{},"localize the naming of related methods, etc. This is necessary"]},{"entry":[{},"since different beans may have the same method names (i.e."]},{"entry":[{},"store) but different parameters. Each sub-module is named the"]},{"entry":[{},"same as the class name of the home interface of its related"]},{"entry":[{},"EJB. If the connector were to support 10 deployed beans,"]},{"entry":[{},"there would be 10 sub-module definitions in the IDL. Included"]},{"entry":[{},"in the sub-module are supporting IDL struct definitions, an"]},{"entry":[{},"event interface, and all events that will use this bean. The"]},{"entry":[{},"struct definitions in the sub-module represent the bean's"]},{"entry":[{},"methods (see Method) and represent the ordering of the"]},{"entry":[{},"method invocation for each event (see Event). All events are"]},{"entry":[{},"grouped together into an event interface with the same name"]},{"entry":[{},"as the sub-module (and thus the bean home interface class"]},{"entry":[{},"name). The result is an event specification signature that"]},{"entry":[{},"looks like this: <Top Module>\/<Sub-Module-"]},{"entry":[{},">\/<Interface>#<Event> such as \u201caccentureAmdocsAPILink\/"]},{"entry":[{},"NewCustomerConvHome\/"]},{"entry":[{},"NewCustomerConvHome#EventA . . .\u201d"]},{"entry":[{},"With this signature, the connector will be able determine the"]},{"entry":[{},"bean to use by looking for its home interface in the event"]},{"entry":[{},"specification."]},{"entry":["Method","Each method on the bean that will be use by the connector is"]},{"entry":[{},"represented in IDL as a \u201cstruct\u201d defined in the sub-module for"]},{"entry":[{},"the involved bean. The members of the struct are the"]},{"entry":[{},"parameters and\/or return value of the method. Parameter"]},{"entry":[{},"ordering is achieved by use in name-sorted order of these"]},{"entry":[{},"members. Typical conventions for this makeup are to use"]},{"entry":[{},"names with a reserved prefix like \u201cp01_....\u201d, \u201cp02_...\u201d,"]},{"entry":[{},"etc. and suffixed by the data type of the parameter"]},{"entry":[{},"(i.e. p01_int or p01_AddressInfo, etc.) The type"]},{"entry":[{},"of the member is that of the primitive or defined complex data"]},{"entry":[{},"type, single or arrayed (see Data Type)."]},{"entry":["Event","Events are user- defined components of the IDL that define"]},{"entry":[{},"business events to a bean (EJB). Each event has a declared"]},{"entry":[{},"name that will be implemented by Vitria as a Vitria event."]},{"entry":[{},"Each event is declared in the event interface (see Bean) and"]},{"entry":[{},"passes two parameters: request and status. The request is"]},{"entry":[{},"named \u201crequest\u201d and the type is a special struct defined in"]},{"entry":[{},"the bean IDL sub-module. This special struct declares"]},{"entry":[{},"methods to be called by the event and is typically named the"]},{"entry":[{},"event name suffixed with \u201c_Data\u201d (ex."]},{"entry":[{},"CreateAccount event would have a struct called"]},{"entry":[{},"CreateAccount_Data). The members of the struct have a"]},{"entry":[{},"naming convention like \u201cm01_...\u201d, \u201cm02_...\u201d, etc. and are"]},{"entry":[{},"suffixed with the name of the method to call. The type of each"]},{"entry":[{},"member is that represented by the corresponding struct that"]},{"entry":[{},"defines the bean method (found in the bean sub-module)."]},{"entry":["Data","Data types are represented as structs in the IDL at the top-"]},{"entry":["Types","level module. These data types represent an equivalent pattern"]},{"entry":[{},"to the bean's complex data types used for parameters and"]},{"entry":[{},"return values on each bean method. Complex data types can"]},{"entry":[{},"contain other complex data types that would also be declared"]},{"entry":[{},"in the IDL. Members of these struct definitions represent"]},{"entry":[{},"the valid data members of the data type."]},{"entry":["Variable","Variables are represented as data members on complex data"]},{"entry":[{},"types (structs) in IDL. These members can be of primitive"]},{"entry":[{},"type, JAVA strings (java.lang.String) and JAVA Dates"]},{"entry":[{},"(java.util.Date) and other complex data types. These"]},{"entry":[{},"members can be single instances or in an array. In pseudo"]},{"entry":[{},"text, the array is signified as \u201ctype[ ] name\u201d and in IDL as"]},{"entry":[{},"\u201csequence<type> name\u201d."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"6.2 IDL \u201cWalkthrough\u201d Process","In the exemplary embodiment, the following process is used by the Vitria connector flow to execute a business event.\n\n","IDL Build Tools","Overview","IDL tools were built to facilitate the creation of IDL from beans available to a WebLogic client (such as Vitria). They consist of \u201cgetBeans\u201d and \u201cIDLBuild\u201d. \u201cgetBeans\u201d searches a Weblogic environment for available beans while \u201cIDLBuild\u201d will process the list generated by \u201cgetBeans\u201d to begin completing the picture to represent valid events in IDL for these beans. For a complete start-to-finish using these tools, the \u201cIDLBuild\u201d tool will be executed several times with an input file containing pseudo-script like declarations of beans, data types, methods and events. An example is given below of this pseudo-IDL script after several iterations prior to final generation of the IDL. The final IDL is shown below.","Pseudo-IDL Script Example:",{"@attributes":{"id":"p-0177","num":"0247"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Generated by: (editing stage3.txt file)"},{"entry":"OPTIONS"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DataTypePackages = amdocs.csm3g.datatypes,"]},{"entry":[{},"amdocs.csm3g.appservices"]},{"entry":[{},"JNDIBindingNamePrefix = amdocsBeans"]},{"entry":[{},"allowValidateMethodsOnDataTypes = false"]},{"entry":[{},"MODULE accentureAmdocsAPILink"]},{"entry":[{},"BEAN NewCustomerConvHome:amdocs.csm3g.sessions."]},{"entry":[{},"implementation.NewCustomerConvBeanEOImpl_WLStub {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"METHODS"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"getAddresslnfo {"]},{"entry":[{},"RETURNS AddressInfo"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"getContactInfo {"]},{"entry":[{},"RETURNS ContactInfo"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}","getCustomerGeneralInfo {"]},{"entry":[{},{},"RETURNS CustomerGeneralInfo"]},{"entry":[{},"}","getCustomerIdInfo {"]},{"entry":[{},{},"RETURNS CustomerIdInfo"]},{"entry":[{},"}","getCustomerTypeInfo {"]},{"entry":[{},{},"RETURNS CustomerTypeInfo"]},{"entry":[{},"}","getNameInfo {"]},{"entry":[{},{},"RETURNS NameInfo"]},{"entry":[{},"}","setAddressInfo {"]},{"entry":[{},{},"PARAMETER AddressInfo"]},{"entry":[{},"}","setContactInfo {"]},{"entry":[{},{},"PARAMETER ContactInfo"]},{"entry":[{},"}","setCustomerGeneralInfo {"]},{"entry":[{},{},"PARAMETER CustomerGeneralInfo"]},{"entry":[{},"}","setCustomerTypeInfo {"]},{"entry":[{},{},"PARAMETER CustomerTypeInfo"]},{"entry":[{},"}","setNameInfo {"]},{"entry":[{},{},"PARAMETER NameInfo"]},{"entry":[{},"}","store {"]},{"entry":[{},{},"RETURNS int"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} EVENTS"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"generalCreateCustomer"]},{"entry":[{},"\/\/ << OPTIONAL: Edit method list below (auto-added) >>"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"setAddressInfo"]},{"entry":[{},"getAddressInfo"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"spec_CreateCustomer"]},{"entry":[{},"\/\/ << OPTIONAL: Edit variable examples below for"]},{"entry":[{},"special event (auto-added) >>"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AddressInfo addressInfo"]},{"entry":[{},"ContactInfo contactInfo"]},{"entry":[{},"CustomerGeneralInfo customerGeneralInfo"]},{"entry":[{},"CustomerIdInfo customerIdInfo"]},{"entry":[{},"CustomerTypeInfo customerTypeInfo"]},{"entry":[{},"NameInfo nameInfo"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"DATATYPE AddressInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int AddressId"]},{"entry":[{},"String AdrPrimaryLn"]},{"entry":[{},"String AdrPrmLineElem1"]},{"entry":[{},"String AdrPrmLineElem2"]},{"entry":[{},"String AdrPrmLineElem3"]},{"entry":[{},"String AdrPrmLineElem4"]},{"entry":[{},"String AdrPrmLineElem5"]},{"entry":[{},"String AdrSecLineElem1"]},{"entry":[{},"String AdrSecLineElem2"]},{"entry":[{},"String AdrSecLineElem3"]},{"entry":[{},"String AdrSecLineElem4"]},{"entry":[{},"String AdrSecLineElem5"]},{"entry":[{},"String AdrSecondaryLn"]},{"entry":[{},"Date AdrSinceDate"]},{"entry":[{},"String CityLine"]},{"entry":[{},"String CityLineElem1"]},{"entry":[{},"String CityLineElem2"]},{"entry":[{},"String CityLineElem3"]},{"entry":[{},"String CityLineElem4"]},{"entry":[{},"String CityLineElem5"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DATATYPE ContactInfo {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String ContactCountryCd"]},{"entry":[{},"String ContactFaxno"]},{"entry":[{},"int ContactId"]},{"entry":[{},"String ContactName"]},{"entry":[{},"String ContactRole"]},{"entry":[{},"String ContactTelno"]},{"entry":[{},"String ContactTnExtno"]},{"entry":[{},"String Email"]},{"entry":[{},"String HomeTelno"]},{"entry":[{},"String MobileTelno1"]},{"entry":[{},"String MobileTelno2"]},{"entry":[{},"String WorkTelno"]},{"entry":[{},"String WorkTnExtno"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DATATYPE CustomerGeneralInfo {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String AssistantId"]},{"entry":[{},"int LegacyCustNo"]},{"entry":[{},"String MarketingChannel"]},{"entry":[{},"Date OpenDate"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DATATYPE CustomerIdInfo {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int CustomerId"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DATATYPE CustomerTypeInfo {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"byte CustomerType"]},{"entry":[{},"}"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DATATYPE NameInfo {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"byte Gender"]},{"entry":[{},"int NameId"]},{"entry":[{},"String NameLine1"]},{"entry":[{},"String NameLine1Elem1"]},{"entry":[{},"String NameLine1Elem2"]},{"entry":[{},"String NameLine1Elem3"]},{"entry":[{},"String NameLine1Elem4"]},{"entry":[{},"String NameLine1Elem5"]},{"entry":[{},"String NameLine2"]},{"entry":[{},"String NameLine2Elem1"]},{"entry":[{},"String NameLine2Elem2"]},{"entry":[{},"String NameLine2Elem3"]},{"entry":[{},"String NameLine2Elem4"]},{"entry":[{},"String NameLine2Elem5"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This input file can be mostly generated automatically except for declaring the business events and defining the order of method invocation on the bean for these events. For this information, the tool will output to the screen the partially completed file still in pseudo-language format (as shown above) that can be redirected to a new file (such as IDLBuild example1.txt>example2.txt). Once captured, a user can edit this new file to specify the events to the beans and then process this edited file again with the utility. This process can be re-executed in an iterative approach to complete more details of how the connector will process the event to the EJB software object. Once all the data is supplied, the user can specify the \u201c-idl\u201d flag as a parameter to generate the final IDL output.","Command Line Usage: getBeans","The following command line executes the EJB software object search utility (\u201cgetBeans\u201d):\n\n","An example output from this process is shown below from a successful Weblogic connection finding one related EJB software object:\n\n","Command Line Usage: IDLBuild","The following command line executes the IDL generation tool (\u201cIDLBuild\u201d):\n\n",{"@attributes":{"id":"p-0184","num":"0265"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Option","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["-IDL","This flag indicates that the output of the tool is final (not"]},{"entry":[{},"to be used via STDOUT redirection to a file) and there-"]},{"entry":[{},"fore should be in the standard IDL format used by Vitria."]},{"entry":["-c[lassinfo] <","Display information on methods and members of a class"]},{"entry":["full class","(assuming the class is available from the current class"]},{"entry":["name>","path). This option can be specified as either \u201c-c\u201d or"]},{"entry":[{},"\u201c-classinfo\u201d and the class name must be fully"]},{"entry":[{},"qualified (i.e. use \u201cjava.lang.String\u201d not \u201cString\u201d."]},{"entry":["-dateformat","This option allows a user to determine the date format"]},{"entry":[{},"used on machine running the operating system and"]},{"entry":[{},"should be executed on the machine running the Vitria"]},{"entry":[{},"BusinessWare server that uses the connector. Use of this"]},{"entry":[{},"option will allow an end user to understand the"]},{"entry":[{},"String format to use to set date fields represented in"]},{"entry":[{},"Vitria event data as Strings. Test data should be passed"]},{"entry":[{},"to the connector in this way."]},{"entry":["-m[odule] <","This option allows the user to override the default"]},{"entry":["module name>","module name that is generated by the tool for the top-"]},{"entry":[{},"level IDL module. This option can be either specified by"]},{"entry":[{},"\u201c-m\u201d or \u201c-module\u201d and requires a string parameter"]},{"entry":[{},"valid for the module name."]},{"entry":["-addbean <","This option allows the user to add an additional bean to"]},{"entry":["JNDI Binding","the configuration file being parsed (new output is"]},{"entry":["Name : <Full","standard-out). Use of this option requires a JNDI"]},{"entry":["Class Name for","binding name for lookup on the Weblogic server and"]},{"entry":["the Bean Home","the full class name of the home interface separated by"]},{"entry":["Interface>","a colon (\u201c:\u201d). The tool needs both to first represent the"]},{"entry":[{},"JNDI name in IDL and second to investigate and auto-"]},{"entry":[{},"matically script the representation of the EJB software"]},{"entry":[{},"object without need of a Weblogic connection. This"]},{"entry":[{},"requires that the environment class path has access"]},{"entry":[{},"to both the Weblogic javax classes as well as the Jar"]},{"entry":[{},"file(s) for the deployed beans and supporting data classes."]},{"entry":["-addevent <","This option allows the user to specify a new event to"]},{"entry":["JNDI Binding","be added at the command line and requires the JNDI"]},{"entry":["Name> : <","Binding Name of an existing bean (that is defined for"]},{"entry":["new Event","the tool) and the name of the new event. The added"]},{"entry":["Name>","event will be inserted and will be part of the new output"]},{"entry":[{},"(standard-out to the screen)."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Pseudo-IDL Input File Syntax","Ideally, the user should not have to manually edit the final IDL directly but instead the pseudo-IDL file. Below describes the syntax of this file format:","The file is segmented into four components: OPTIONS, MODULE, BEAN, and DATATYPE. Ordering of these reserved words are not important though their contents may be. The OPTION and MODULE section will be automatically defaulted if not specified.","The input file requires a specific syntax for the tool to process the intended bean and data type configurations correctly. The syntax consists of keywords, braces (\u201c{\u201d and \u201c}\u201d) for sub-sectioning, name and value sets and other special tokens. The following syntax components are defined below by text file subsection:\n\n","OPTIONS:","Options are listed in the following order with examples:\n\n","Each option is declared as option name, \u201c=\u201d and a string for the parameter. The following options, if declared, are shown:",{"@attributes":{"id":"p-0192","num":"0280"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Option","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["DataTypePackages","This option defines the data type packages"]},{"entry":[{},"that all complex data type(s) used by the EJB"]},{"entry":[{},"software objects for method parameters and\/"]},{"entry":[{},"or return values to be represented in IDL for"]},{"entry":[{},"the connector to operate. Commas (\u201c,\u201d)"]},{"entry":[{},"separate multiple class packages."]},{"entry":["JNDIBindingNamePrefix","This option defines the prefix of the JNDI"]},{"entry":[{},"binding name for beans used by the con-"]},{"entry":[{},"nector. These prefixes are not needed when"]},{"entry":[{},"declaring each bean and this name prefix"]},{"entry":[{},"should be the same specified on the con-"]},{"entry":[{},"nector's flow properties."]},{"entry":["AllowValidateMethodsOn-","This Boolean option indicates if special void"]},{"entry":["Data Types","methods with no parameters are identified"]},{"entry":[{},"and represented on the bean complex data"]},{"entry":[{},"types. If set true, these methods will be"]},{"entry":[{},"included in the final IDL as type = \u201cany\u201d"]},{"entry":[{},"(Vitria data type). These methods are in-"]},{"entry":[{},"tended to allow for additional validation of"]},{"entry":[{},"the data objects created by client applications"]},{"entry":[{},"prior to passing them to the bean instance."]},{"entry":[{},"The presence of these method names are"]},{"entry":[{},"allowed in IDL to indicate to the connector"]},{"entry":[{},"that they should be called prior to passing"]},{"entry":[{},"them to a bean for processing. Default is"]},{"entry":[{},"false (do not use\/look for them)."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"MODULE:","This top-level key word describes the module name for the top-level module to be defined in the final IDL output. The syntax is as follows:\n\n","BEAN:","The bean declaration contains the following:\n\n","The JNDI Binding name is used for specifying in the final IDL. In order for the tool to perform bean analysis for automatic IDL generation, it uses the Home bean class name to investigate. The optional subsection specified by braces is used to associate method and event definitions that the tool should create for the bean in IDL. If the subsection is not specified, the tool will attempt to look up the bean home class and complete most of this section (the user still has to specify the event or events).","In the subsection, the following key words are used:\n\n",{"@attributes":{"id":"p-0199","num":"0294"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BEAN <bean name>"]},{"entry":[{},"{"]},{"entry":[{},"\u2003METHODS"]},{"entry":[{},"\u2003\u2003..."]},{"entry":[{},"\u2003EVENTS"]},{"entry":[{},"\u2003\u2003..."]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"\u201cMETHODS\u201d","Methods need to be declared first before events since events will have definitions of which bean events in which order should be used to execute the event. The following names following this key word will be the method names that will be represented in the final IDL. If syntax for each method is as follows:\n\n","If the optional subsection is not provided (\u201c{\u201d and \u201c}\u201d) following a method name, the tool will attempt to complete this section. This will be done populating the appropriate method parameters and\/or return value definition(s). Neither parameters nor a return value is required so that the method is valid. A void bean method with no parameters can be represented with an empty subsection (\u201c{ }\u201d). However the order of the parameters will be important. The following key word and token definitions are used to define this subsection:",{"@attributes":{"id":"p-0203","num":"0299"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":[{},"METHODS"]},{"entry":[{},"\u2003<method name>{"]},{"entry":[{},"\u2003\u2003[PARAM[ETER]] <parameter type> [\u201c[ ]\u201d]"]},{"entry":[{},"\u2003\u2003[PARAM[ETER]] <parameter2 type>[\u201c[ ]\u201d]"]},{"entry":[{},"\u2003\u2003..."]},{"entry":[{},"\u2003\u2003\u2003RETURNS <return type>[\u201c[ ]\u201d]"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"PARAM or PARAMETER is optional and not required to be specified for declaring a parameter (however for the return value type, its keyword is required).\n\n","\u201cEVENTS\u201d","Following the \u201cMETHODS\u201d declaration, Vitria events that should be associated to the bean are specified following the keyword \u201cEVENTS\u201d. Events names are specified in the same way as the methods and contain sub-sections.",{"@attributes":{"id":"p-0207","num":"0306"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":[{},"EVENTS"]},{"entry":[{},"\u2003<regular event name> {"]},{"entry":[{},"\u2003\u2003<method name>"]},{"entry":[{},"\u2003\u2003\u2003<method2 name>"]},{"entry":[{},"\u2003\u2003\u2003..."]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2002(Or for special events- advanced use)"]},{"entry":[{},"\u2003\u2003<special handling event name> {"]},{"entry":[{},"\u2003\u2003<sub-parameter name><sub-parameter type> [\u201c[ ]\u201d]"]},{"entry":[{},"\u2003\u2003<sub-parameter2 name><sub-parameter2 type>[\u201c[ ]\u201d]"]},{"entry":[{},"\u2003\u2003\u2003..."]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"For special event handling, the sub-section defines not the bean methods to invoke but is a handle for sub-parameter(s) that will be passed as a special \u201cstruct\u201d object in IDL to the specific plug-in handling the special event. The sub-parameter names, types and array (\u201c[ ]\u201d) indicators are defined in the same way as DATATYPE members (see DATATYPES). Please refer to the section(s) in this document that discuss \u201cPlug-Ins\u201d or handling Special Cases for more information on this advanced use.","DATATYPE:\n\n","The data type declaration is used to represent EJB software object data classes in Vitria. These \u201crepresentative\u201d Vitria struct definitions will share the same name as the EJB software object data type (minus the package prefix). Each data type will have data members representing the EJB software object data class members. The subsection mentioned above will list these data members as follows:",{"@attributes":{"id":"p-0211","num":"0313"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DATATYPE <data type class name> {"]},{"entry":[{},"\u2003<member type> [\u201c[]\u201d] <member name>"]},{"entry":[{},"\u2003<member2 type> [\u201c[]\u201d] <member2 name>"]},{"entry":[{},"\u2003..."]},{"entry":[{},"\u2003}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"For each member, a member type and member name is required. If the member is an array of the declared member type, an array (\u201c[ ]\u201d) indicator is placed between the type and name. When the tool generates the final IDL, the array would be represented as:\n\n","In case a DATATYPE has a member that is a DATATYPE too, the final IDL looks like:",{"@attributes":{"id":"p-0214","num":"0317"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":[{},"\u2003\u2003struct CustomerIdInfo {"]},{"entry":[{},"\u2003\u2003long CustomerId;"]},{"entry":[{},"\u2003};"]},{"entry":[{},"\u2003struct CustIdInfoExample{"]},{"entry":[{},"\u2003\u2003CustomerIdInfo CustomerIdInfo;"]},{"entry":[{},"\u2003};"]},{"entry":[{},"..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In this situation, trying to import the idl would produce the error:\n\n","Therefore the struct CustIdInfoExample needs to be manually modified as follows:\n\n","If allowed, validation methods that may be available on an EJB software object data class can be represented. These are represented as type=\u201cvoid\u201d with the full method name. In IDL, they will be represented as the Vitria defined type \u201cany.\u201d","Example IDL for APILink Connector",{"@attributes":{"id":"p-0219","num":"0324"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Generated by: \u201cjava IDLBuild stage4.txt -id1\u201d"},{"entry":"module accentureAmdocsAPILink {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"module NewCustomerConvHome {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface NewCustomerConvHome;"]},{"entry":[{},"interface NewCustomerConvHome {"]},{"entry":[{},"event void generalCreateCustomer(in generalCreateCustomer"]},{"entry":[{},"Data request, in event_response_status status);"]},{"entry":[{},"event void spec_CreateCustomer(in spec"]},{"entry":[{},"CreateCustomer_Data request, in event_response_status"]},{"entry":[{},"status);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct getAddressInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"AddressInfo method_results;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct getContactInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ContactInfo method_results;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct getCustomerGeneralInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CustomerGeneralInfo method_results;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct getCustomerIdInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CustomerIdInfo method_results;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct getCustomerTypeInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CustomerTypeInfo method_results;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct getNameInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"NameInfo method_results;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct setAddressInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"AddressInfo p01_AddressInfo;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct setContactInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ContactInfo p01_ContactInfo;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct setCustomerGeneralInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CustomerGeneralInfo p01_CustomerGeneralInfo;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct setCustomerTypeInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CustomerTypeInfo p01_CustomerTypeInfo;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct setNameInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"NameInfo p01_NameInfo;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct store {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"long method_results;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct generalCreateCustomer_Data {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"setAddressInfo m01_setAddressInfo;"]},{"entry":[{},"getAddressInfo m02_getAddressInfo;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct spec_CreateCustomer_Data {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"AddressInfo addressInfo;"]},{"entry":[{},"ContactInfo contactInfo;"]},{"entry":[{},"CustomerGeneralInfo customerGeneralInfo;"]},{"entry":[{},"CustomerIdInfo customerIdInfo;"]},{"entry":[{},"CustomerTypeInfo customerTypeInfo;"]},{"entry":[{},"NameInfo nameInfo;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"};"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct AddressInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"long AddressId;"]},{"entry":[{},"string AdrPrimaryLn;"]},{"entry":[{},"string AdrPrmLineElem1;"]},{"entry":[{},"string AdrPrmLineElem2;"]},{"entry":[{},"string AdrPrmLineElem3;"]},{"entry":[{},"string AdrPrmLineElem4;"]},{"entry":[{},"string AdrPrmLineElem5;"]},{"entry":[{},"string AdrSecLineElem1;"]},{"entry":[{},"string AdrSecLineElem2;"]},{"entry":[{},"string AdrSecLineElem3;"]},{"entry":[{},"string AdrSecLineElem4;"]},{"entry":[{},"string AdrSecLineElem5;"]},{"entry":[{},"string AdrSecondaryLn;"]},{"entry":[{},"string AdrSinceDate;"]},{"entry":[{},"string CityLine;"]},{"entry":[{},"string CityLineElem1;"]},{"entry":[{},"string CityLineElem2;"]},{"entry":[{},"string CityLineElem3;"]},{"entry":[{},"string CityLineElem4;"]},{"entry":[{},"string CityLineElem5;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct ContactInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"string ContactCountryCd;"]},{"entry":[{},"string ContactFaxno;"]},{"entry":[{},"long ContactId;"]},{"entry":[{},"string ContactName;"]},{"entry":[{},"string ContactRole;"]},{"entry":[{},"string ContactTelno;"]},{"entry":[{},"string ContactTnExtno;"]},{"entry":[{},"string Email;"]},{"entry":[{},"string HomeTelno;"]},{"entry":[{},"string MobileTelno1;"]},{"entry":[{},"string MobileTelno2;"]},{"entry":[{},"string WorkTelno;"]},{"entry":[{},"string WorkTnExtno;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct CustomerGeneralInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"string AssistantId;"]},{"entry":[{},"long LegacyCustNo;"]},{"entry":[{},"string MarketingChannel;"]},{"entry":[{},"string OpenDate;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct CustomerIdInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"long CustomerId;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct CustomerTypeInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"octet CustomerType;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct NameInfo {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"octet Gender;"]},{"entry":[{},"long NameId;"]},{"entry":[{},"string NameLine1;"]},{"entry":[{},"string NameLine1Elem1;"]},{"entry":[{},"string NameLine1Elem2;"]},{"entry":[{},"string NameLine1Elem3;"]},{"entry":[{},"string NameLine1Elem4;"]},{"entry":[{},"string NameLine1Elem5;"]},{"entry":[{},"string NameLine2;"]},{"entry":[{},"string NameLine2Elem1;"]},{"entry":[{},"string NameLine2Elem2;"]},{"entry":[{},"string NameLine2Elem3;"]},{"entry":[{},"string NameLine2Elem4;"]},{"entry":[{},"string NameLine2Elem5;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct event_response_status {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"string error_text;"]},{"entry":[{},"long error_code;"]},{"entry":[{},"octet severity;"]},{"entry":[{},"long error_type;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"};"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Connector Plug-In Template",{"@attributes":{"id":"p-0221","num":"0326"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"399pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/*"},{"entry":"This file is a Template for a plugin Class to be used by the Amdocs Connector."},{"entry":"The following rules already provided in this template are essential for correct"},{"entry":"development of a plugin and should not be modified..."},{"entry":"----------------------------"},{"entry":"1. This class must belong to the package: com. accenture.vitria.amdocs.connector.plugins"},{"entry":"2. This class must import the BaseEjbPlugIn, AmdocsLogger and AmdocsConst classes of the amdocs"},{"entry":"\u2003\u2009connector package: com.accenture.vitria.amdocs.connector"},{"entry":"3. The abstract method called \u201cprocess\u201d as defined in the class BaseEJBPlugIn must be"},{"entry":"\u2003\u2009implemented in the plugIn class. This method accepts the Vitria event data component"},{"entry":"\u2003\u2009\u201crequest\u201d and the remote interface for the EJB, both as generic Java Objects"},{"entry":"\u2003\u2009(java.lang.Object). \u201cprocess\u201d throws exceptions of type \u201cException\u201d."},{"entry":"4. The updateStatus( ) inherited from the BaseEJBPlugIn should be used to update the Status"},{"entry":"\u2003\u2009parameter of your event."},{"entry":"The following four steps are required to be performed to correctly finish the plug-in from"},{"entry":"this template."},{"entry":"----------------------------"},{"entry":"1. Rename the following strings in the code list below with the appropriate settings"},{"entry":"\u2003\u2009#PLUG_IN_CLASS_NAME# \u2003\u2003the name of the this plug-in class that should be the same as the event name..."},{"entry":"\u2003\u2009#TOP_MODULE# \u2003\u2003the name of the top-level module declared in IDL handling this special event"},{"entry":"\u2003\u2009#EJB_HOME_INTERFACE# \u2003\u2003the name of the home interface that is used to obtain the bean"},{"entry":"\u2003\u2009#EJB_REMOTE_INTERFACE# \u2003the full class name of the actual remote EJB interface\/object to be used."},{"entry":"2. Identify all the classes from Amdocs and Vitria that you need to import as you'll be using a bean,"},{"entry":"\u2003\u2009creating datatypes to populate that bean, and Vitria event stub data classes used."},{"entry":"\u2003\u2009(The location for this is labeled below as TODO_1)"},{"entry":"3. Identify what your process method is going to implement and what actions it is going to perform"},{"entry":"\u2003\u2009on the bean and use the JavaDoc comment area to describe this process"},{"entry":"\u2003\u2009(This should be done in TODO_2 below)"},{"entry":"4. In the TODO_3 section is where you should implement your process. You should use accessor methods to"},{"entry":"\u2003\u2009do each task of your process and then in the main code of process, around a try-catch statement"},{"entry":"\u2003\u2009call these methods."},{"entry":"\u2003\u2009In the base plug in class (super class to this one), there is an updateStatus method that allows"},{"entry":"\u2003\u2009the user to manipulate the Vitria Status parameter directly. The signature is as follows:"},{"entry":"\u2003\u2009updateStatus(String error_text, Integer error_code, Byte severity, Integer error_type))"},{"entry":"\u2003\u2009(An example of this is used at the end of the code to specify a \u201csuccess\u201d.) error_type == null"},{"entry":"\u2003\u2009indicates a successful event."},{"entry":"\u2003\u2009You can also use the logger methods provided by the BaseEJBPlugIn class to log information and errors"},{"entry":"\u2003\u2009to Vitria's logFile. You have access to the following methods on the logger:"},{"entry":"\u2003\u2003\u2009logger.logError(String),"},{"entry":"\u2003\u2003\u2009logger.logNormal(String),"},{"entry":"\u2003\u2003\u2009logger.logException(Throwable, String),"},{"entry":"\u2003\u2003\u2009logger.logDebug(String),"},{"entry":"\u2003\u2003\u2009logger.logVerbose(String),"},{"entry":"\u2003\u2003\u2009logger.logWarning(String)."},{"entry":"\u2002\u2003\u2009(For more details check the detailed design documentation of AmdocsLogger class (JavaDoc))"},{"entry":"*\/"},{"entry":"\/\/ START OF PLUG-IN CODE:"},{"entry":"package com.accenture.vitria.amdocs.connector.plugins;"},{"entry":"import com.accenture.vitria.amdocs.connector.BaseEjbPlugIn;"},{"entry":"import com.accenture.vitria.amdocs.connector.AmdocsLogger;"},{"entry":"import com.accenture.vitria.amdocs.connector.AmdocsConst;"},{"entry":"\u2003\u2003\u2003\/\/ import the data classes for the top-level class"},{"entry":"import #TOP_MODULE#.#EJB_HOME_INTERFACE#.#PLUG_IN_CLASS_NAME#_Data;"},{"entry":"\u2003\u2003\u2003\/\/ import the status struct definition (assumed name)"},{"entry":"import #TOP_MODULE#.event_response_status;"},{"entry":"\u2003\u2003\u2003\/\/ import the class defn. of the EJB remote instance"},{"entry":"import #EJB_REMOTE_INTERFACE#;"},{"entry":"\/\/... add your additional Vitria event data classes and EJB data classes here..."},{"entry":"\/\/"},{"entry":"\/\/#TODO_1: \u2003ADD ALL VITRIA RELATED TO THE IDL STUBS USED BY THIS SPECIAL EVENT AND"},{"entry":"\/\/ \u2003\u2003\u2003AMDOCS IMPORTS FOR DATA CLASSES THAT YOU WOULD NEED FOR IMPLEMENTING YOUR PLUGIN CLASS"},{"entry":"\/\/ As an example this is what you could do:"},{"entry":"\u2003\u2003\/\/ Vitria IDL data class stubs used by special Vitria event"},{"entry":"\/\/import AmdocsBeans.NameInfo;"},{"entry":"\/\/import AmdocsBeans.CustomerGeneralInfo;"},{"entry":"\/\/import AmdocsBeans.CustomerTypeInfo;"},{"entry":"\u2003\u2003\/\/ Amdocs EJB data types and exceptions (such as used in an Amdocs Java client"},{"entry":"\/\/import amdocs.csm3g.exceptions.*;"},{"entry":"\/\/import amdocs.csm3g.datatypes.*;"},{"entry":"\/**"},{"entry":"\u2002* This Plug-In class is a template for all plugIns to be used in Amdocs Connector."},{"entry":"\u2002* \/\/#TODO_2: PUT HERE COMMENTS TO YOUR CLASS"},{"entry":"\u2002*"},{"entry":"\u2002* @author Accenture"},{"entry":"\u2002* @since 05 June 2001"},{"entry":"\u2002*\/"},{"entry":"public class #PLUG_IN_CLASS_NAME#"},{"entry":"extends BaseEjbPlugIn {"},{"entry":"\u2003\u2003\/**"},{"entry":"\u2003\u2003* This method is the required signature for the implementation"},{"entry":"\u2003\u2003*"},{"entry":"\u2003\u2003* @param request holds the request data that you want to manipulate"},{"entry":"\u2003\u2003* @param The bean object, that represents the bean you wish to use"},{"entry":"\u2003\u2003* @return An object of the same type that came in but maybe modified with new data"},{"entry":"\u2003\u2003* @exception An exception for the flow to handle error that you are not able to handel, mainly related to"},{"entry":"system failures"},{"entry":"\u2003\u2003*"},{"entry":"\u2003\u2003* @since 05 June 2001"},{"entry":"\u2003\u2003*\/"},{"entry":"\u2003\u2003public Object process( Object request,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Object beanObj)"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003throws Exception{"},{"entry":"\u2003\u2003\u2003\/\/ Declaring the \u201cbean\u201d variable as the EJB remote interface and casting the generic"},{"entry":"\u2003\u2003\u2003\/\/ beanObj passed in as this remote interface to have direct access to the EJB methods"},{"entry":"\u2003\u2003\u2003\/\/ directly in the code. From this point forward, you should be able to simply manipulate"},{"entry":"\u2003\u2003\u2003\/\/ the EJB by using the variable name \u201cbean\u201d. (Example: bean.store( ), bean.getAddressInfo( )..."},{"entry":"\u2003\u2003\u2003\/\/"},{"entry":"\u2003\u2003\u2003#EJB_REMOTE_INTERFACE# bean = null;"},{"entry":"\u2003\u2003\u2003if(beanObj instanceof #EJB_REMOTE_INTERFACE#) {"},{"entry":"\u2003\u2003\u2003\u2002bean = (#EJB_REMOTE_INTERFACE#)beanObj;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2003\/\/ Declaring the \u201cdata\u201d variable as the Vitria event body date that is the request parameter"},{"entry":"\u2003\u2003\u2003\/\/ of the event to the Vitria stub generated for this event. From this point forward, you"},{"entry":"\u2003\u2003\u2003\/\/ be able to simply access and modify the Vitria data by using the variable name \u201cdata\u201d."},{"entry":"\u2003\u2003\u2003\/\/ (Example: data.FirstName or data.return_results, etc... assuming they are declared in IDL)"},{"entry":"\u2003\u2003\u2003\/\/"},{"entry":"\u2003\u2003\u2003#TOP_MODULE#.#EJB_HOME_INTERFACE#.#PLUG_IN_CLASS_NAME#_Data data = null;"},{"entry":"\u2003\u2003\u2003if(request instanceof #TOP_MODULE#.#EJB_HOME_INTERFACE#.#PLUG_IN_CLASS_NAME#_Data) {"},{"entry":"\u2003\u2003\u2003\u2002data = (#TOP_MODULE#.#EJB_HOME_INTERFACE#.#PLUG_IN_CLASS_NAME#Data)request;"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\/\/"},{"entry":"\/\/ \u2003\u2003\u2003#TODO_3: IMPLEMENT THE CODE TO BE USED BY THE process METHOD for accessing the EJB"},{"entry":"\/\/ \u2003\u2003\u2003\u2003\u2003\u2003(Remember to use try-catch statements if you want to handle specific remote"},{"entry":"\/\/ \u2003\u2003\u2003\u2003\u2003\u2003remote EJB exceptions specifically. To intentionally throw an exception"},{"entry":"\/\/ \u2003\u2003\u2003\u2003\u2003\u2003explicitly in your code, throw a \u201cnew Exception\u201d. Exceptions will be handled"},{"entry":"\/\/ \u2003\u2003\u2003\u2003\u2003\u2003by this connector in a manner consistent with the general event handling"},{"entry":"\/\/ \u2003\u2003\u2003\u2003\u2003\u2003processes."},{"entry":"\/\/"},{"entry":"\/\/ \u2003\u2003\u2003Example code could look like...:"},{"entry":"\/\/ \u2003\u2003\u2003try{"},{"entry":"\/\/ \u2003\u2003\u2003\u2003setSomething(data);"},{"entry":"\/\/ \u2003\u2003\u2003\u2003storeData( );"},{"entry":"\/\/ \u2003\u2003\u2003\u2002logger.logVerbose(\u201cProcess finished correctly\u201d);"},{"entry":"\/\/ \u2003\u2003\u2003}"},{"entry":"\/\/ \u2003\u2003\u2003catch(Exception e){"},{"entry":"\/\/ \u2003\u2003\u2003\u2002updateStatus(error_text, error_code, severity, error_type);"},{"entry":"\/\/ \u2003\u2003\u2003\u2002logger.logError(\u201cCaught exception will setting customer type\u201d);"},{"entry":"\/\/ \u2003\u2003\u2003\u2002throw e;"},{"entry":"\/\/ \u2003\u2003\u2003}"},{"entry":"\/\/"},{"entry":"\u2003\u2003\u2003\/\/ Update the status request object with success if no errors occur."},{"entry":"\u2003\u2003\u2003updateStatus(\u201cSuccess\u201d, new Integer(0), new Byte((byte)\u2018I\u2019), null);"},{"entry":"\u2003\u2003\u2003\/\/ DO NOT REMOVE. The following statement allows event data updates to be passed back"},{"entry":"\u2003\u2003\u2003\/\/ to the main flow body for continued processing in the connector model. Not executing"},{"entry":"\u2003\u2003\u2003\/\/ the statement below will prevent this special event from gathering return information"},{"entry":"\u2003\u2003\u2003\/\/ from the manipulated EJB."},{"entry":"\u2003\u2003\u2003return (Object)data;"},{"entry":"\u2003\u2003} \/\/ END OF PROCESS METHOD"},{"entry":"\u2003} \/\/ END OF CLASS"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Troubleshooting in the Exemplary Embodiment","The following symptoms and suggested troubleshooting tips are used in the exemplary Vitria-Amdocs architecture. In preparing a specific connector for another similar system, the implementer will likely need to specify specific troubleshooting tips in addition or in place of the following.",{"@attributes":{"id":"p-0224","num":"0329"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["SYMPTOM","CORRECTIVE ACTION"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Connection model does not start","Make sure all the following points are"]},{"entry":["(yellow indicator).","verified: EXTRA classpath includes"]},{"entry":[{},"Weblogic Classes. User, password and"]},{"entry":[{},"URL are correctly defined in the flow"]},{"entry":[{},"properties."]},{"entry":[{},"If http is the protocol used to connect to"]},{"entry":[{},"the server make sure the line"]},{"entry":[{},"weblogic.httpd.tunnelingenable"]},{"entry":[{},"d = true is specified in the"]},{"entry":[{},"weblogic.properties file."]},{"entry":["Java.lang.ClassCastException","EXTRA classpath does not contain"]},{"entry":["while invoking a method.","jar file for WL Service Pack 10"]},{"entry":["Connection to the server is","(weblogic510sp10.jar)"]},{"entry":"through http."},{"entry":["Java.lang.ClassCastException","EXTRA classpath does not contain"]},{"entry":["while attempting to create an","jar file for WL Service Pack 10"]},{"entry":["instance of a Bean remote","(weblogic510sp10.jar)"]},{"entry":"interface. Connection to"},{"entry":"the server is through t3."},{"entry":["Connection model stops when","Field \u201cJNDI Binding Name Prefix\u201d"]},{"entry":["sending an event through.","in flow properties could be"]},{"entry":["Log message is:","misspelled"]},{"entry":"Bean not defined in Weblogic"},{"entry":"Server, cannot process event."},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"7. Design","7.1 Vitria Framework Implementation","In the exemplary embodiment, building a new Vitria target-source flow entails building the classes or interfaces represented in  that are the building blocks of the Connector and must be implemented. The classes , ,  and , and the Base FlowDef interface  are Vitria defined classes that the connector implementation must extend. A more detail description of these classes is made below in the section titled \u201cBasic Connector Classes\u201d. All other classes (, , ,  and ) are created for the connector. The Vitria SDK wizard generates some files automatically (labelled as \u201cgenerated\u201d) (, , , and ). The AmdocsConnector Flow implementation  is built from","7.1.1 Basic Connector Classes","In this section we describe the Basic Vitria Classes and Interfaces that compose a Vitria connector. The APILink connector must extend these classes.","BaseFlowDef ","A connector definition defined as a JAVA programming language interface, lists the user configurable properties for the connector (i.e. any information for a user to enter before the connection model is started). It also defines the signature of setter and getter methods for these properties to be implemented by the FlowRep .","This interface  is the common interface for all Flow definitions of any connector. It treats the logLevel property common to all flows and deals with the bad event routing. The AmdocsConnectorDef  must extend this interface (See section \u201cAmdocs Connector Classes\u201d below for more details).","BaseFlowRep ","The connector representation class implements the definition interface. Its primary responsibilities is handling and storing its listed properties and instantiating the corresponding flow implementation object when the connector model is started. This class is the base Rep for all Vitria connectors and implements the BaseFlowDef . The AmdocsConnectorRep  must extend this class (See section \u201cAmdocs Connector Classes\u201d below for more details).","SimpleBeanInfo ","The flow's property sheet bean defines and displays information such as property names and descriptions and is responsible for the configuration of the flow. To a large extent, the purpose of the flow definitions, flow representations, and BeanInfo  objects are to enable a human user to configure a flow. These objects are not involved in the processing of flow data and are only involved in the configuration of the Flow's properties. By using the SimpleBeanInfo  the basic properties defined in Flow Def  are configured and saved in Vitria's repository using the connector's tag, defined in FlowRep , to link this data to the correct connector.","Base Flow ","The processing of flow data is the sole domain of the flow implementation class. It's in the flow that all of the work of connecting to the external system and sending and receiving information (events) is accomplished.","The following is the expected behaviour for the Flow and its interaction with the FlowRep  and Vitria Flow Manager, which is the object instance that controls all flows in a Vitria Connection Model:\n\n","The Base Flow  is simply responsible to guarantee that all the necessary methods are implemented by the child class, in this case the AmdocsConnectorBase  and AmdocsConnector , that will extend this class, and that the method signatures are correctly enforced.","7.1.2 Amdocs Connector Classes","The following classes are needed to create the Amdocs Connector . These files can be automatically generated by the Connector Wizard tool provided by Vitria's SDK if one defines a specific file with the parameters needed (see section \u201cWizard Files\u201d below for the file name) or they can be implemented from scratch following the correct Vitria interfaces. As these classes mainly deal with the flow properties the tool easily generates them.","All the files below are automatically generated except for AmdocsConnector  that contains the connector logic where all the work of processing the events is done.","AmdocsConnectorDef ","The AmdocsConnectorDef  is a JAVA programming language interface that extends the BaseFlowDef . It lists the entire user configurable properties defined for the Amdocs connector . These Properties and their description can be seen in the table of section on \u201cFlow Properties\u201d below. It sets out the signature of each property setter and getter methods that will be implemented by the AmdocConnectorRep .","AmdocsConnectorRep ","The AmdocsConnectorRep  extends the Base Representation class BaseFlowRep  and implements all accessory methods for the Amdocs Connector properties. When the AmdocsConnectorRep  is instantiated by the FlowManager, it reads all the properties saved in the repository and saves each of them in its correct member. It is the responsibility of this class to handle the flow's properties.","The FlowManager must also call a method on this class to save the properties held by the AmdocsConnectorRepBeanInfo .","It is also the responsibility of this class to create the AmdocsConnector class  when a Connection Model with this flow is started.","AmdocsConnectorRepBeanInfo ","The AmdocsConnectorRepBeanInfo  class extends the SimpleBeanInfo . Its responsibility is defining and displaying the Amdocs Connector properties. By using the Amdocs Connector Flow's property sheet you're actually manipulating this Bean Class that will interact with AmdocsConnectorRep  and save the properties defined in Vitria's repository.","AmdocsConnectorBase ","The AmdocsConnectorBase  is a simple class that gets the flow's properties that will be provided to the AmdocsConnector  class from the AmdocsConnectorRep . As AmdocsConnector  will extend the AmdocsConnectorBase  we can then implement AmdocsConnector  without knowledge of the calls to the AmdocsConnectorRep .","AmdocsConnector ","This is the main class of the Connector. It is in this class that all Amdocs APILink Events are treated. This class is responsible to connect to the Weblogic Server and sending and receiving events to the APILink. It's also in this class, as one will see in the next section, that the correct handling of events received are decided, the logging is initiated and the connection with the Weblogic Server and it's deployed beans is maintained.","7.1.3 Amdocs Connector Flow","The AmdocsConnector  class is the implementation class of the Vitria Flow. This class is responsible for connections to the external system one wishes to communicate with (Amdocs APILink) and of processing all events received from the connection model that interacts with the External System.",{"@attributes":{"id":"p-0258","num":"0369"},"figref":"FIG. 11","b":"1015"},"The Amdocs Connector is designed to be reusable, flexible and modular. Each object defined separates dependencies of various application environments (Weblogic, Vitria, etc.) wherever possible. Based on this premise the AmdocsConnector class  integrates these other objects together and controls their interaction.","The AmdocsConnector class  in  contains five modular classes with dedicated functionality.","AmdocsResource ","As the AmdocsConnector participates in transaction it must have a transaction resource. The AmdocsResource class  is this transaction resource. It handles the calls to the appropriate methods to handle transaction with the external system. It also implements Vitria's One-Phase Transaction Resource Interface .","In section on \u201cAmdocs Transaction Resource\u201d below more details of this class will be given.","AmdocsLogger ","This class is responsible for logging all the informational and error messages of the connector. It uses the Vitria Logger object provided by the Amdocs Connector Flow  and the Error, Messaging and Tracing (EMT) framework API [described in section 7.1.6 and para  below describes it's implementation] to create and log messages to the Error Model. After the flow creates this object during runtime, all the other classes to log their own messages use it. This class allows other participating generic classes to use Vitria's logger facilities without using any of Vitria's API.","In section on \u201cAmdocs Logger\u201d and on \u201cLogging & Messaging Framework\u201d below more details are given on this class.","EJBEnvironment ","This class is responsible for all the interactions between the flow and the external system such as the Amdocs APILink. No call is actually made to Weblogic server from the Amdocs flow directly. It is used to open and close a connection with the Weblogic server, to identify the EJB software object deployed in the server, and to create and remove running instance of these EJB software object for use by the Flow.","In section on \u201cEJB software object Environment\u201d below more details are given on this class.","Event Processing Classes","All the previous classes dealt with the Vitria or APILink environment. The following are related to the main purpose of the Amdocs Connector Flow , which is processing the events received by transmitting or receiving information from the External System.","EventToBean ","This class is responsible for the default processing of the Amdocs Events. This class will use the JAVA programming language Reflection API to parse the incoming event data object and invoke the correct methods on the EJB software object in the pre-defined order specified in this object. It parses through the Vitria event data object, attempting to match the fields and sub-fields against the EJB software object methods, their parameters and return values.","It will create dynamically all the parameters needed for making the method invocation (as defined in the structure of the IDL of the event) and then it will invoke the EJB software object methods, retrieve its results and create the Vitria structures on the Event data object that will hold the results.","For more details on how this class maps the Event object to the EJB software object calls please see section 7.4 \u201cEvent to Application EJB software object Processing\u201d below.","This class also catches all business level exceptions (such like Validation or Invalid Date errors) and wraps them in a special defined exception called BeanUnhappyException that will be treated at the flow level or in the error model. All other failures related to mapping\/parsing errors are wrapped in MappingFailureException and the unexpected internal errors are wrapped in a SystemFailureException.","For details on how the Connector handles Business, Mapping or System failure please see section on \u201cException Handling\u201d below and as somewhat described above.","BaseEJBPlugIn  and Plug-Ins ","There may be situations when using the default processing is not convenient, efficient or possible to use. It is given to the Vitria developer the possibility to create custom plug-ins that will process only one type of event. Each plug-in class extends the BaseEJBPlugIn class  for obtaining basic processing functionalities and to conform to a specific method signature, allowing this way, the plug-in to be called by the Amdocs Flow.","\u201cPlug-Ins\u201d  were described above and more details about the Plug-In classes are given below.","The AmdocsConnector class  has an expected behaviour to Vitria and it must implement the following methods to conform to the BaseFlow signature.","init( )","The init method is called during the initialisation of a runtime instance of the flow. This method is responsible for initialising the flow. The AmdocsConnector init method will then create an AmdocsResource object  and set the duplicates field, which is the property \u201cRollback events being processed during machine failure on start-up\u201d defined in the Flow Properties (See  in ), and pass this object to the Transaction Service. It will also create the AmdocsLogger object  to provide the flow with the logging facilities.","startEvents( )","This method is called when the connection model is started. It is responsible to create the connection to the external system we wish to connect and prepare the flow to receive events. In startEvents the EJBEnvironment object is created. This opens a connection to APILink and retrieves information about all the beans deployed in Weblogic Server. An instance of class EventToBean  is also created so that everything is prepared for receiving events.","doPush( )","The doPush method is responsible for processing all the events received by the Flow. This method is called by the FlowManager to process the incoming events of the Amdocs Flow.","The implementation of this method does the following:\n\n","stopEvents( )","This method is called when the connection model is paused or stopped. It is responsible to close the connection to the external system. This is achieved by calling a method in the EJBEnvironment object  that closes the session with the Weblogic server.","7.1.4 Amdocs Logger ","As said in the previous section where the Flow is described, this Class is responsible for logging all the informational and error messages.","In  the class diagram of AmdocsLogger  can be seen.","This class contains a reference to the Vitria Logger  that is passed in by the Amdocs Connector flow during its initialisation. It also receives the logLevel property, (See \u201cFlow properties\u201d for more details) defined during the configuration of the flow. It's according to the logLevel that the AmdocsLogger  sends or not the correct messages to the EventLogger flow in the Error Model.","The EventLogger flow accepts as event interfaces the DiagEventsInterface or the LoggerEventsInterface. The AmdocsLogger uses the DiagEventsInterface to send all messages to the EventLogger (See Logging & Messaging Framework below for more details).","To create and send the Diagnostic or DiagError events that are accepted by the EventLogger flow, the AmdocsMessages class  is used. This class is the messaging API defined by the Error, Messaging & Tracing Framework implemented. More details on this framework are shown below.","By using this class, simple methods (that receive our message and other relevant information) can be used to construct the Diagnostic or DiagError event. This event is then sent, using Vitria's Logger API, to the EventLogger flow that will then take the relevant steps to process the event.","The Error Model can also be modified to treat these events accordingly to different methods that the Amdocs Connection Model developer must implement.","The following table shows the relationship between Vitria's LogLevel and the AmdocsLogger methods to call. If the Flow's logLevel is lower than the one specified in this table the method would not create and send the message.",{"@attributes":{"id":"p-0300","num":"0416"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Methods","Log Level"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LogError","1 - Log major, serious errors"]},{"entry":[{},"LogException","1 - Log major, serious errors"]},{"entry":[{},"LogWarning","2 - Log warnings"]},{"entry":[{},"LogNormal","3 - Log major normal occurrences"]},{"entry":[{},"LogVerbose","4 - Log all occurrences"]},{"entry":[{},"LogDebug","5 - Log full detail of occurrences"]},{"entry":[{},"LogObject","5 - Log full detail of occurrences"]},{"entry":[{},"LogFieldNames","5 - Log full detail of occurrences"]},{"entry":[{},"LogMethodNames","5 - Log full detail of occurrences"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Flexibility","As seen in \u201cAmdocs Connector Flow\u201d above, all the classes implemented use the AmdocsLogger . This class is intended to provide all the logging facilities to the Connector classes by wrapping all Vitria's Logger API and turning the logging in other class independent from Vitria.","This object when used in the Vitria Environment logs messages, errors and exceptions to the Logger object that will then forward these messages to the EventLogger flow in the Error Model.","But this object can also be used outside the Vitria Environment. The AmdocsLogger class  provides a constructor method that does not need the Vitria Logger or logLevel. When this object is created with this constructor all the messages are sent to Standard out. This is very useful for testing or for tools purposes.","By using the AmdocsLogger constructed in this way we can test the EventToBean  in  or the EJBEnvironment  classes outside the Vitria environment or even use these classes in other tools without having to change the logging code.","7.1.5 Amdocs Transaction Resource","Every connector that participates in transactions requires a transaction resource that handles the calls to the appropriate methods to handle transactions in the external system. The implementation of this transaction resource in the exemplary embodiment is class AmdocsResource  in .","When Vitria or other Flows need to commit or abort a transaction, it sends a request to the Transaction Service, which serves the whole connection model. The Transaction Service does not have the functionality to implement transactions in the external system. Instead, it relies on the transaction resources of each flow in the connection model to execute the necessary methods when needed. These methods must call the appropriate methods in the external system's API to commit or abort.","The AmdocsResource class  implements Vitria's OnePhaseTransaction Interface. This enables the AmdocsConnector to participate in One Phase Transactions.","A more careful discussion of the limitations of the AmdocsResource implementation, due to limitations of Amdocs APILink in the exemplary embodiment is done in section \u201cTransactionality\u201d below.","The AmdocsResource implements the four required methods as defined in the Vitria's OnePhaseTransaction Interface.","prepareToCommit( )","This method returns a transaction id that is then used by the commit resource method. As the Amdocs APILink doesn't have a transaction id, we use a DATETIME stamp as a transaction id.","commitResource( )","Due to APILink's Transaction limitations (see below) this method always returns success. It cannot fully participate in Amdocs APILink transactions because we always default that the transaction is successful.","abortResource( )","If the Transaction Service calls the abort resource method, and as we don't have any way to rollback a transaction in APILink, this method logs the processed event to the Error Logger. In the Error Model actions must be taken to guarantee that APILink successfully handles the event.","getPreparedStatus( )","As we cannot have information from APILink regarding the last transaction, there is a property called \u201cRollback events being processed during machine failure on start-up\u201d ( in ) defined in the Flow properties where you can define the behaviour of this method. if this property is set to true the status returned is PREPARED. This means that in case there is a system fail over during an event processing, on start-up, the previous event will be re-processed. If the property is set to false the status returned is COMMITTED and you will guarantee that the event's processing is not duplicated.","Logging & Messaging Framework","Vitria BW 3.1 provides an Error, Messaging, and Tracing Framework (EMT) framework (Please refer to Vitria document Connector Programming Guide, which is hereby incorporated fully herein by reference, for more details), that is a messaging infrastructure that facilitates the delivery of portable and easy to localize code.","This framework is used by Amdocs Logger  to log messages, using Vitria's Diagnostic interface.","7.1.6 Amdocs Connector's Error, Messaging & Tracing Framework","As said previously, the EMT Framework is Vitria's Messaging Framework that enables the localization of code. Implementing the EMT Framework involved creating a resource file, AmdocsRes.txt, (Please see section on \u201cWizard Files\u201d below) that is a simple text file that contains all the text strings for the system, and then compiling the file using a special utility program called rescomp, or \u201cresource compiler\u201d. The resource compiler generates several other files that can be then compiled and linked with several other Vitria classes, producing the shared library file vtAmdocsLocale3_o2r.dll (in NT) or libvtAmdocsLocale3_o2r.so (in Solaris) called a \u201clocale bundle.\u201d This locale bundle essentially comprises a messaging API, called AmdocsMessages  to which we can embed calls in our connector code.","The Amdocs Resource File developed is a simple and flexible Framework. To simplify the development process only general messages and errors are logged in the exemplary embodiment. In alternative embodiments these messages can be extended and more detailed as needed.",{"@attributes":{"id":"p-0326","num":"0442"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Message Name","Category","Message Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["GenericError","ERROR","ERROR: \u201cthe message to log\u201d"]},{"entry":["GenericErrorWithNumb","ERROR","ERROR, code: \u201cthe error"]},{"entry":[{},{},"code\u201d; severity: \u201cthe severity"]},{"entry":[{},{},"of the error\u201d; msg: \u201cthe error"]},{"entry":[{},{},"message\u201d"]},{"entry":["GenericException","EXCEPTION","EXCEPTION CAUGHT:"]},{"entry":[{},{},"\u201cThe exception message\u201d"]},{"entry":["GenericWarning","WARNING","WARNING: \u201cthe warning"]},{"entry":[{},{},"message\u201d"]},{"entry":["GenericNormal","TRACE","MSG: \u201cthe message to log\u201d"]},{"entry":["GenericDebug","TRACE","DEBUG: \u201cthe debug infor-"]},{"entry":[{},{},"mation to log\u201d"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"7.1.7 Amdocs Logger and the Amdocs EMT","As seen in above, the Amdocs Logger class  uses the AmdocsMessages classes  that is the messaging API for the locale defined, and the Vitria Logger to send Diagnostic and DiagError events to the Error Model. The Diagnostic messages will be logged to the log File defined in the EventLogger Flow and the DiagError can be dealt with by a user defined Error Connection Model.","7.2 Exception Handling","All the exceptions thrown by the Amdocs Connector classes  are one of the following 3 types. These exceptions wrap up all other kinds of exceptions that can be thrown during the event processing. This is done to classify clearly the type of errors and to easily identify the type of error the exception has originated from (as already described in some detail above).","7.2.1 SystemFailureException","This exception wraps all exceptions that are due to unexpected internal errors of the connector or to Weblogic environment problems like connection failure, bad user name or password.","This failure will stop the connection model as their origin in not correctly identifiable and doesn't allow the flow to continue correctly and will rollback the current transaction if possible.","7.2.2 MappingFailureException","This exception wraps all exceptions that are due to unexpected failures during the event processing. They represent mainly Event-EJB mismatches, data type mismatches, unavailability of a desired EJB software object, or mismatch errors that may arise from typos in Vitria's IDL creation.","These failures should only be happening in an initial phase of the development of the connector, as we suppose that the system in production has fully been tested for them not to happen.","The handling of this exception at the level of the Flow is based on the parameter (\u201cSend data mapping errors to connector error model\u201d) defined in the Flow properties  in . This flag will indicate if these errors should be sent to the Error Model, causing, according to error model rules, the abortion or not of the connection model.","7.2.3 BeanUnhappyException","This exception is the more complex and deals with all the errors that are thrown from invoking the EJB software object or the Amdocs Data types. When manipulating data on the Amdocs APILink during event processing, these objects indicating invalid data or operation can throw exceptions. These are the exceptions that are wrapped in a BeanUnhappyException. Unlike the other two Amdocs Connector exceptions, this exception saves the original exception thrown by the EJB software object in one of its fields.","As these errors indicate a failure at the application level, there are successful from the connector perspective. The connection model should handle these events in a different manner, probably in an automatic way.","These exceptions are then handled in the Amdocs Connector flow, so that the status parameter of all events is populated with the correct error message and code. This exception will be handled based on a parameter in the flow properties. This property, as in the case of a MappingFailureException, allows the Vitria user to configure where an event that generated this exception is handled.","7.3 EJB Software Object Environment","The EJBEnvironment class  handles all interactions with the Weblogic environment (i.e. the Amdocs' EJB software object Container). This class is responsible for opening a connection to the Weblogic server, identifying all the beans deployed in the EJB software object container and obtain references to them.","This class provides methods to open and close a session with Weblogic server and provides methods to control the life cycle of the bean's remote interface object: create and remove. It also logs relevant information about the number and which beans are currently deployed and accessible by the Vitria user.","The connection to the Weblogic Server is done in the startEvents phase of the flow. In the user configurable properties of the flow, all the necessary information to connect to Weblogic will be inserted by the connection model designer. These properties are \u201cURL\u201d, \u201cUser\u201d and \u201cPassword\u201d (,  and  in ). These properties will then be used by the startEvents method of the flow to initialise the connection to the external application.","In the stopEvents method the flow closes correctly the session with the Weblogic Container by using the stopSession method in the EJBEnvironment class.","7.3.1 Code Reusability","As the class EJBEnvironment has no knowledge of the Vitria Environment it is possible to use it outside this environment to connect to the APILink Weblogic Environment.","This is quite useful as it gives one the possibility to use this class for other goals, for example, small utility tools were created to check the deployed EJB software object in the APILink environment (getbeans) or test EJB software object clients and can be created to verify if all the bean calls are working properly. By using the EJBEnvironment the opening and closing of the connection can be shifted to the EJBEnvironment object.","Another advantage of not handling the EJBEnvironment inside the flow is that one can modularise its tests and perform them without using the Vitria Environment.","7.4 Event to Application EJB Software Object Processing","This section outlines in more detail the two processes that implement the processing of the events received by the AmdocsConnector Flow.","7.4.1 General Mapping","The default mapping\/processing of the Amdocs Events is performed in the EventToBean class . This class uses the JAVA programming language Reflection API to introspect the Vitria event data object. By using this API one can construct new class instances and new arrays, access and modify fields of objects, invoke methods on objects and access and modify elements of arrays based on the object's run-time class. This enables one to implement the EventToBean class to be used by different Vitria and Amdocs objects.","The EventToBean  will parse the incoming event data object and invoke the correct methods on the EJB software object in the pre-defined order specified in this object. It parses through the Vitria event data object, attempting to match the fields and sub-fields against the EJB software object methods, their parameters and return values.","In the exemplary embodiment, all of this process is done in four steps.\n\n","All the exceptions caught in this class are of 3 types and will be wrapped in one of these 3 exceptions: BeanUnhappyException, SystemFailureException and MappingFailureException. All the business level exceptions (such like Validation or Invalid Date errors) are wrapped in a BeanUnhappyException, the failures related to mapping\/parsing errors are warped in MappingFailureException and the unexpected internal errors are wrapped in a SystemFailureException.","As Vitria doesn't allow for null references in its objects, the behaviour of the class can be customized by user defined properties to allow null values to be passed to the Bean Data types and to represent null values in the Vitria Data objects. The first property allows String values to be passed as null (property \u201cStrings Values Can Be Passed as Null To Bean\u201d). If this property is set to true all strings that are equal to the property \u201cString value for null\u201d will be set to null during the Amdocs Data type creation. The other two properties related to the creation of the Amdocs Data type are \u201cAllow to specify optional complex\u201d, that allow to set null to Amdocs Data types that are contained in other Data types and \u201cNo Date pass null to bean\u201d that specifies if it is possible to pass null to Date object in the Amdocs Data types in case the sting that represents them in Vitria is empty.","The last property (\u201cAccept values that are null from Bean\u201d) indicates if the EventToBean class should accept Amdocs Data types with null members as a result to the method invocation. If set to true, the default values of the members in the Vitria object are: Strings are empty, Strings representing Date are empty and the structures representing Amdocs Data types are initialised with default values.","More detail on these properties was described above.","Plug-Ins","It is given to the Vitria developer the possibility to create custom plug-ins that allows the user to build extensions to the AmdocsConnector for special-treatment of handling an EJB software object.","Each plug-in class extends the BaseEJBPlugIn class for obtaining basic processing functionalities, like logging, and to conform to a specific method signature, allowing this way, the plug-in to be called by the Amdocs Flow.","The BaseEJBPlugIn class is an abstract class with several utility methods implemented and one abstract method. Each Plug-In class must extend this class and implement the abstract method.","This method is called process. This is the method that will be invoked by the AmdocsConnector class  in , in case a special event is received that should be processed by a plug in.","The implementation of this method will directly manipulate the bean and the event \u201crequest\u201d object. These objects can be cast to their correct class and be dealt as simple known classes. The implementation should then use the event object data to call the bean methods one wishes and the event \u201crequest\u201d object should be updated with return data from the method calls.","This object must be returned at the end of the process method because the output event of the Flow will be created with this object.","All exceptions caught during the processing of the plug-in event can be thrown, but they should be treated inside the plug-in. If an exception is thrown from the process method it will be wrapped in a SystemFailureException in the Amdocs Flow and will cause the connection model to stop.","Implementation of plug-ins is described above.","7.4.2 Handling Amdocs API Exceptions","As described above, the application related exceptions are always wrapped in a BeanUnhappyException. The Amdocs exceptions may contain an error code, error text and severity code that are handled at the Flow level by the method treatBeanUnhappyException( ).","7.5 Transactional Behaviour","Each connection model has a Transaction Service that handles transactions across all flows in the connection model. When the connection model is started, each flow that participates in the transaction creates an object called a Transaction Resource and passes it to the Transaction Service. When the Transaction Service needs to commit or abort a transaction for the connection model, it calls the appropriate methods in each flow's transaction resource. The Transaction Service is needed because each individual flow is written as a reusable component and is not written to be aware of all the other flows in the connection model.","So every connector flow that participates in transactions must have a Transaction Resource and the Transaction Service relies on these to call the appropriate methods in the external system's API to commit or abort.","7.5.1 Limits to this Approach in the Exemplary Embodiment","Amdocs APILink does not implement a form of transaction control.","Although in other EJB software object transactions that have persistence the boundary of an EJB software object call begins with the create method of the EJB software object and ends with the store method, APILink doesn't follow these conventions. The transaction boundary for an EJB software object call to Amdocs APILink extends from the Ensemble database(s) to Tuxedo\/Weblogic only.","This is a limitation that cannot be addressed at the connector level and can only be solved at the application system (in this case Weblogic) level since it is fundamental to the Tuxedo database transaction process. Fundamental architecture changes are required by Amdocs to effectively address this issue. Potential problems that could arise is the failure during the process of creating an entity, between the store\/commit and then calling methods to get the results. If this occurs, the key could be unknown and thus may require manual intervention.","Due to the previous limitations described, the AmdocsResource implementation cannot guarantee an abort on APILink transactions. If the failure that caused the Connection to call an abort is due to other flows than the Amdocs Flow and if the event being processed involved a persistent transaction, the AmdocsResource cannot rollback the transaction. In the exemplary embodiment, the connection model designer is given the facility to treat that event in a different way because this event would be sent to the Error Model.","Also due to the existence of the \u201cRollback events being processed during machine failure on start-up\u201d property (see  in ) the user can configure the behaviour of the flow in system failure situations.","7.6 Wizard Files",{"@attributes":{"id":"p-0382","num":"0502"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["File Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["AmdocsGenConnector.gen","This file enables us to create automatically"]},{"entry":[{},"most of the classes needed for the Amdocs"]},{"entry":[{},"Connector. This file can be generated by"]},{"entry":[{},"using the Connector Wizard utility provided"]},{"entry":[{},"by the Vitria SDK."]},{"entry":[{},"You may define using this file the user con-"]},{"entry":[{},"figurable properties of you flow, the type of"]},{"entry":[{},"flow you wish to create (Source, Target,"]},{"entry":[{},"SourceTarget) and some other important"]},{"entry":[{},"properties."]},{"entry":[{},"(see com.vitria.connectors.generator.Connec-"]},{"entry":[{},"torWizard utility in Vitria documentation for"]},{"entry":[{},"more information)"]},{"entry":["AmdocsRes.txt","This is your resource file used to define your"]},{"entry":[{},"log messages and text strings used in the"]},{"entry":[{},"implementation classes of your connector."]},{"entry":[{},"With this file you'll create the local bundle"]},{"entry":[{},"and the messaging API needed to log"]},{"entry":[{},"messages through your connector. (see the"]},{"entry":[{},"section \u201cUsing the EMT Framework for Log"]},{"entry":[{},"Messages\u201d in the BusinessWare Connector"]},{"entry":[{},"Programming Guide)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"8. Additional Possible Limitations on the Preferred Embodiment.","8.1 Different Lifecycle Bean Methods","There may be a possibility that the lifecycle methods for creating a remote interface bean object from the home interface bean object do not follow the EJB software object conventions. These conventions indicate that\n\n","If another signature is provided for these methods the Amdocs Connector in the exemplary embodiment doesn't support it.","For changing this implementation to support different signatures the classes AmdocsConnector , EJBEnvironment  and EventToBean  must be changed.","The following steps must be taken to support this feature:\n\n","8.2 Dynamic Status","At a minimum, any Bean exception thrown due to business logic will have the error message text available in the return Vitria event. All exceptions have this text and it is assumed that Amdocs will use this value in all cases when defining their exceptions. Additionally, the connector looks for specific fields related to severity and \u201cerror_type\u201d available on current Amdocs validation exceptions for additional data. However this cannot always be guaranteed.","A different approach could be taken by using a similar approach used in discovering fields and methods on EJB software object data types already done for Vitria event to bean data exchanges. Based on an exception thrown, the connector could try to match members and\/or fields via introspection to discover matches and then attempt to pass data. The difference with exceptions are that one \u201cstatus\u201d object in Vitria would have fields representing all possible fields of exceptions that could be thrown by the beans. In this case, missing fields would not produce additional errors. If fields of the same name exist on different exceptions with different types, the Vitria object could represent a data type that would be \u201cwider\u201d in the JAVA programming language terms than the all but the widest type on the exceptions. For example if two exceptions have a field called X, one as a byte and one as an integer, the Vitria event could hold \u201cinteger\u201d and the byte would be casted up in this example. String could be used to hold any type possible basic type on an exception.","This approach could allow one to design the status object component in Vitria IDL to conform to a particular vendor exception list without need of changes to the code to have this connector framework support them.","While the invention has been described in terms of a specific exemplary embodiment, it will be clear to those skilled in the art that such connectors for Enterprise Application Integration (EAI) and business-to-business solutions which use similar object-oriented programming systems can be easily created following the processes described herein, wherein such business solutions can be created in less time and with less risk."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
