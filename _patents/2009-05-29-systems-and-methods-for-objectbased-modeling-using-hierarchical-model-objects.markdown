---
title: Systems and methods for object-based modeling using hierarchical model objects
abstract: Embodiments relate to systems and methods for object-based modeling using hierarchical model objects. A modeling client can host modeling logic and an application programming interface (API) to create, access, manipulate, and import/export modeling objects used in modeling applications, such as engineering, medical, financial, and other modeling platforms. In aspects, the source data accepted into the modeling client can include consumer or business-level applications, whose spreadsheet, database or other content can be extracted and encapsulated in extensible markup language (XML) or other object-oriented format. Various model objects can be extracted from source data, and aggregated into a hierarchical model object encapsulating and preserving the underlying object layers. In aspects, one or more of the model object layers can functionally combine at least two other layers, to relate levels of data in hierarchical fashion. The modeling client can exchange composite or other modeling objects with external platforms on a programmatic basis.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08417739&OS=08417739&RS=08417739
owner: Red Hat, Inc.
number: 08417739
owner_city: Raleigh
owner_country: US
publication_date: 20090529
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND OF RELATED ART","DESCRIPTION OF EMBODIMENTS"],"p":["The present teachings relate to systems and methods for object-based modeling using hierarchical model objects, and more particularly to platforms and techniques for dedicated modeling of technical, medical, financial, and other systems which are configured to generate a model object constituted of a set of nested or hierarchical objects which can be accessed, viewed or manipulated at various depths, and which hierarchical model object is capable of being programmatically imported and exported objects to external mainframe platforms, and other resources.","A spectrum of modeling platforms and options exist today for engineers, managers, developers and other professionals. In the case of engineering, medical, technical, financial, and other advanced modeling resources, a range of platforms are available for users interested in setting up, running and maintaining financial modeling systems. For example, organizations interested in relatively sophisticated modeling applications, such as geophysical models for detecting oil reserves or other geologic features or equity market analysis based on Black-Sholes option pricing models, a company or other organization may choose to install advanced modeling software on mainframe-class computers to run those classes of models and obtain various projections, reports, and other results. Such mainframe-level or other large-scale installations, however, can involve costs on the order of millions of dollars or more, and may require the full time attention of highly skilled professionals, including programmers and managers with advanced training. As a consequence, putting a mainframe-based modeling operation into place may not be practical or possible for many organizations or users.","On the other end of the spectrum, managers, engineers and others may employ widely available entry-level applications to capture operational data and attempt to develop predictive models for engineering, financial, medial, and other applications. That class of applications can include, for example, consumer or business-level spreadsheet, database, or data visualization programs for technical, financial, and other purposes. For instance, a manager of a manufacturing facility may use a commercially available spreadsheet application to enter production numbers, schedules, and other details of that site. However, attempting to extract useful modeling outputs from those classes of applications can be difficult or impossible. For one, spreadsheet, database, and other widely available applications are typically built to produce reports based on already existing data, but not to generate modeling outputs or objects that represent predictive outputs or scenarios. For another, existing spreadsheet, database, and other applications typically involve limitations on cell size, number of dimensions, overall storage capacity, and other program parameters which, in the case of large-scale modeling operations, may be insufficient to operate on the data sets necessary to produce and run meaningful models.","For another, the data structures and outputs of existing spreadsheet, database and other entry-level or commonly available applications are typically arranged in proprietary format, rather than a widely interoperable object-based or other universal format. As still another drawback, the cells, rows, columns, and other data elements within commonly available spreadsheets, databases, and other entry-level programs can not be extracted as separate units and exported to other modeling or analytic tools, nor can slices of spreadsheets or databases be independently updated from within conventional application tools.","One result of these limitations is that copied cells or other data elements lose finer-resolution data when copied or moved to another data location, so that, for instance, the individual sales figures which combine to create a gross sales number are all lost when the cell containing the gross figure is copied or moved. In short, the use of spreadsheet, database, and other consumer or business-level applications to conduct modeling operations involves significant shortcomings, due in part to the fact that those classes of platforms are not designed to reliable handle modeling functionality. At present, therefore, a manager, developer, engineer, or other professional or user with modeling requirements is faced with a choice between installing a large and expensive mainframe-based solution with its attendant infrastructure, a spreadsheet or database-based entry level solution with its attendant limitations on power and data handling, or a combination of those two types of platforms. It may be desirable to provide object-based or object-compatible modeling platforms capable of generating modeling objects which encapsulate various modeling features, which preserve multi-layer data attributes, which are exportable to other external modeling tools, and which can be readily extracted from existing database sources.","Embodiments of the present teachings relate to systems and methods for object-based modeling using a hierarchical model object having multiple object layers. More particularly, embodiments relate to platforms and techniques that can access, extract, and generate modeling objects in a native object-based or object-compatible format from a spreadsheet, database, or other source source. The modeling objects produced via a modeling client or other modeling tool according to the present teachings can encapsulate both source data describing a physical, medical, technical, financial, or other process or phenomena, and modeling attributes that relate the source data to predictive scenarios, specific models, and other features. In embodiments, the modeling objects can be extracted or \u201clifted\u201d from data sources such as database programs or others, and stored to local storage of a local modeling client. The model objects can be made visible or available via the desktop or other user interface of the modeling client. In various embodiments, the model objects can themselves be built out of a layered set of component model objects which are stored, linked, or associated together in a resulting composite hierarchical model object. These and other embodiments described herein address the various noted shortcomings in known modeling technology, and provide a user or operator with enhanced modeling power on a desktop or other client, allowing the extraction and generation of a hierarchical model object whose constituent or component model objects can be independently accessed, updated, and stored at different levels of the hierarchy and corresponding levels of detail or granularity, as object-based entities. Systems and methods according to the present teachings also allowing seamless generation, local storage, and communication of model objects to backend mainframe platforms or data centers, middleware servers, other modeling clients, and\/or other local or remote modeling, storage, or data processing resources.","Reference will now be made in detail to exemplary embodiments of the present teachings, which are illustrated in the accompanying drawings. Where possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["102","202","112","102","112","202"]},"Mainframe platform  can include modules, logic, and functionality to perform an array of computation and data storage tasks, including data warehousing, data mining, statistical analyses, financial planning, inventory management, customer resource management, engineering design, and other applications. In implementations as shown, mainframe platform  can host or communicate with a variety or resources including, merely illustratively a mainframe data store , and logic or applications including an analytic module . Mainframe platform  can contain, host, support, or interface to other data processing hardware, software, and other resources. In embodiments, modeling client  can likewise communicate with other local or remote resources, such as a middleware server  hosting or interfacing to a set of data stores for online analytical processing (OLAP) or other functions. Modeling client  can also communicate or interface with other local or remote servers, services, data stores, or other resources.","In embodiments as shown, modeling client  can operate under an operating system , such as a distribution of the Linux\u2122, Unix\u2122, or other open source or proprietary operating system. Modeling client  can present a user interface , such as a graphical user interface or command line interface, operating under operating system  to receive commands and inputs from a user, and operate modeling client . Modeling client  can communicate with storage resources including a modeling store , such as a local or remote database or data store. Modeling store  can store a set of modeling objects , in which data, functions, procedures, attributes, and\/or other information related to one or more modeling object  can be encapsulated and stored. In embodiments, modeling object  can be encoded in extensible markup language (XML) format. In embodiments, modeling object  can be encoded in other object-based or object-compatible formats or data structures. Modeling client  can communicate with mainframe platform  via a modeling application programming interface (API) . Modeling application programming interface (API)  can include, for instance, defined function calls or calls to other routines, calculations, or features, as well as data structures and parameters associated with modeling operations. For example, modeling application programming interface (API)  can include a function call to invoke a Monte Carlo simulation model based on a set of supplied data, such as an identified set of dimensions extracted from a spreadsheet or database. Other functions, routines, resources, and features can be called, invoked, or instantiated via modeling application programming interface (API) . According to embodiments in various regards, one or more local or remote modeling packages, modules, or other supporting applications can be instantiated via modeling module  and modeling application programming interface (API)  to manipulate source data and resulting one or more modeling object .","In embodiments, a user of modeling client  can access, modify, or add data modeling objects to a set of data modeling object  via a modeling module  hosted in modeling client . Set of data modeling objects  can include data objects that the user of modeling client  has directly entered, or, in aspects, which the user of modeling client has imported or extracted from sources such as consumer or business-level spreadsheet, database, and\/or other applications or platforms. Modeling module  can itself be or include applications, software modules or hardware modules, or other logic or resources to operate on set of modeling objects . Modeling module  can, merely illustratively, include or access logic or modules for invoking and manipulating a variety of scientific, technical, engineering, medical, financial, manufacturing, or other modeling operations. For instance, modeling module  can be or include applications or logic for performing Monte Carlo simulations, finite element analyses, Black-Scholes option pricing or other market analyses, epidemiological projections, geophysical models or simulations, or other simulations, models, trend mappings, projections, or other predictive processes. In embodiments in one regard, after invoking modeling module  and performing any modeling task, the user of modeling client  can locally store and\/or export one or more modeling object  to external platforms or resources.","In embodiments as shown, the user of modeling client  can for instance export or communicate one or more modeling object  to mainframe platform  via modeling application programming interface (API) , for storage and use at a local or remote location from within that platform. In aspects, mainframe platform  can receive modeling object  directly, without a necessity for translation, re-formatting, or invoking any spreadsheet, database, or other application from which data encapsulated in one or mode modeling object  originated. In aspects, mainframe platform  can operate on one or more modeling object , and transmit or return that data or other results to modeling client  via modeling application programming interface (API) . Thus, according to aspects of the present teachings, modeling objects can be exchanged directly and programmatically between modeling client , mainframe platform  or other larger-scale or remote platforms, including for instance middleware server  or other comparatively large-scale or higher-capacity modeling or analytic tools.","In terms of operating on source data and generating one or more modeling object  for local storage and\/or exchange with mainframe platform  or other platforms, and as shown for instance in , according to various embodiments, a user of modeling client  can invoke modeling module  to manipulate a set of source data  to identify, configure, and\/or extract the functional objects, attributes, or other features of a set of data to produce a modeling output. In embodiments as shown, modeling module  can access a set of source data , from which data, attributes, and\/or other metadata can be extracted to generate one or more modeling object . In aspects, set of source data  can be generated, hosted, or stored by or in a local application , such as a spreadsheet, database, accounting, word processing, presentation, or other application or software. In aspects, set of source data  can comprise data previously or newly generated in the form of an object-based modeling object, such as a modeling object entered, imported, or specified by the user of modeling client . In aspects, set of source data  can comprise data originally stored or generated in a consumer or business-level spreadsheet, database, and\/or other application or software. In aspects, set of source data  can be initially formatted or encoded in a non-object oriented format, such as in a cellular array or in a relational database format. In aspects, set of source data  can be initially formatted or encoded in an object-oriented format, such as extensible markup language (XML) format. In aspects, a user of modeling client  can highlight, select, or otherwise specify all or a portion of set of source data  to generate one or more extracted functional object . For instance, a user can highlight a column of set of source data  to identify and extract data as well as functional relationships of interest, to the user, as a unified object. Thus, purely illustratively and as shown, a user may wish to obtain a view on a current month's sales figures including gross sales, tax, production or delivery costs, and cost basis, as well as other parameters related to sales activity. In aspects as shown, a user can, for instance, highlight those functional relationships by dragging a cursor or otherwise selecting a set of cells to group together, and form one or more extracted functional object . In aspects, selection can include the extraction of set of data elements , such as values stored in spreadsheet cells or database entries. In aspects, once a set of data elements  are selected, the functional, computational, or other modeling parameters associated with that data can be stored or associated with one or more extracted functional object . For instance, modeling module  can store associated routines, computations, processes, or other attributes or functional specifications for one or more extracted functional object  in set of attributes , which can be stored or associated with one or more extracted functional object . In aspects, set of attributes  can include the identification of or linkage to any routines, interfaces, or other functional or computational resources that will be associated with one or more extracted functional object. According to various embodiments, analytic module  of mainframe platform , or other resource or platform receiving one or more extracted functional object  from modeling client  can thereby obtain both data values derived or obtained from set of source data , as well as functional or procedural resources and relationships associated with that data. One or more extracted functional object  along with any associated set of attributes  can be encoded or stored in one or more modeling object , which can thereby be transparently exported to mainframe platform , middleware server , or other platforms or destinations for further modeling operations.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3","FIG. 3"],"b":["102","112","202","208","102","124","126","118","118","124","104","106","124","128","112","124","120","108","102","102","102","102","102"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4","b":["402","404","102","120","406","120","104","110","106","408","110","410","110","120","110","106","104"]},"In , modeling application programming interface (API)  can be invoked by modeling module , by mainframe platform , or other resources to transfer one or mode modeling object  to mainframe platform . In embodiments, one or more modeling object  can for instance be communicated to mainframe platform  via a secure connection or channel, such as a secure socket layer (SSL) connection, via a channel encrypted using a public\/private key infrastructure, or other channel or connection. In , one or more model object  can be received in modeling module  from mainframe platform  or other resource, as appropriate. For example, an updated version of one or more model object  reflecting new data, new modeling results, or other information can be received in modeling module . In , the resulting new, updated, or modified one or more model object  can be stored to set of modeling objects  in model store , as appropriate. In embodiments, one or more model objects  can in addition or instead be stored to mainframe data store , to middleware server , to another modeling client or other client, or other site or destination. In , modeling module  can convert one or more model objects  to spreadsheet, database, or other format, and export any converted data as a set of cell-formatted information, or data encoded in other formats. For instance, modeling module  can convert or translate one or more model objects to cell data values or database entries, and export that data to client-level applications on modeling client  or other local or remote devices or storage. In , processing can repeat, return to a prior processing point, jump to a further processing point, or end.","According to various embodiments of the present teachings, and as for example generally illustrated in , in implementations modeling module  can generate one or more hierarchical model object  set of source data  and extract multiple constituent objects. In embodiments as shown, a user of modeling client  can access a set of source data , such as spreadsheet, database, or other data, and select data elements, functions and other attributes, and other information to generate a set of model object layers . In embodiments, each model object making up set of model object layers  can be extracted and configured according to techniques described herein. In embodiments, each model object making up set of model object layers  can have data elements, dimensions, functions or other attributes which are in common, overlapping, and\/or separate from each other. In embodiments, modeling module  can aggregate set of model object layers  into a hierarchical model object . Hierarchical model object  can aggregate, store or link the set of model object layers  to create a joined or combined hierarchical model object. In various embodiments, each layer in set of model object layers  can be linked to or associated with a next layer in the order or hierarchy of hierarchical model object . In embodiments, different layers in set of model object layers  can be linked to or associated with one or more layers at different levels in hierarchical model object . According to embodiments in various regards, the hierarchical model object  can in one regard permit a user, for instance, to traverse the various layers or levels in set of model object layers , and access, view, manipulate, update, and\/or store data at those various levels. In embodiments, therefore, a user can for example view data extracted from a source cell that represents a gross sales figure for a product or company, and move up or down set of model object layers  to view or update different component sales figures from which the gross sales value is derived. Various other layers, attributes, and calculations can be performed via the hierarchical encoding of data in hierarchical model object .","According to embodiments in further regards, and in contrast to views on conventional spreadsheet, database, or other data structures, each layer of model objects in set of model object layers  making up hierarchical model object  can be accessed, updated, and stored independently of the other constituent objects, while maintaining all linkages and functionality of hierarchical model object . In embodiments, a user in one regard can independently updated a selected component model object, without having to overwrite the entire hierarchical model object  and all remaining objects in set of model object layers . In embodiments, the component objects in set of model object layers  can also be independently updated via multiple modeling tools or other logic, operating simultaneously or otherwise.","It may be noted that while hierarchical model object  encapsulating the set of model object layers  can be stored or hosted in modeling client , in embodiments, model object  can also or instead be transmitted to other local or remote platforms, such as mainframe platform , middleware servers, other modeling or other clients, or other destinations.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 6","b":["138","114","602","604","114","606","120","116","114","608","140","120","114","610","138","140","612","138","120","614","140","104","140","140","138","140","616"]},"The foregoing description is illustrative, and variations in configuration and implementation may occur to persons skilled in the art. For example, while embodiments have been described wherein one or more model object  is accessed and manipulated via one modeling client , in embodiments, one or more users can use multiple modeling clients, or networks including modeling clients or other resources, to operate on model object data. For further example, while embodiments have been described in which modeling client  may interact with one mainframe platform  and\/or one middleware server , in embodiments, one or more modeling client  can interact with multiple mainframe platforms, data centers, middleware servers, and\/or other resources, in various combinations. Yet further, while embodiments have been described in which a modeling client  interacts with a mainframe platform  and\/or middleware server , in embodiments, rather than interact with large-scale mainframe platforms, data centers, or middleware servers, modeling client  can interact with other local or remote modeling clients, networks of those clients, or, in embodiments, can operate to perform modeling operations on a stand-alone basis, without necessarily communicating with other modeling platforms. Other resources described as singular or integrated can in embodiments be plural or distributed, and resources described as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate embodiments of the present teachings and together with the description, serve to explain the principles of the present teachings. In the figures;",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
