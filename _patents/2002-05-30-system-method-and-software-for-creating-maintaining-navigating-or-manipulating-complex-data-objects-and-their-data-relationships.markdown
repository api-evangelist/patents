---
title: System, method and software for creating, maintaining, navigating or manipulating complex data objects and their data relationships
abstract: The invention provides systems, methods and software for creating, maintaining, accessing, navigating and persisting complex data objects and associated data stores. In one aspect, the invention also provides an application programming interface (“API”) useful for creating, maintaining, accessing, navigating and persisting complex data objects and associated data stores as a CDOG model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07043481&OS=07043481&RS=07043481
owner: Thought, Inc.
number: 07043481
owner_city: San Francisco
owner_country: US
publication_date: 20020530
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["Based on Provisional Applications: 60\/295,012 filed on Jun. 1, 2001; 60\/300,754 filed on Jun. 25, 2001; and, 60\/305,841 filed on Jul. 16, 2001.","The field of the present invention relates generally to computer systems, computer data stores and to methods and software for accessing and utilizing data stores. More particularly, the present invention relates to a system, methods and software for creating, maintaining, accessing, navigating and persisting complex data objects and associated data stores. In one aspect, the invention also relates to an application programming interface (\u201cAPI\u201d) useful for creating, maintaining, accessing, navigating and persisting complex data objects and associated data stores as a complex data object graph, or as a set of complex data object graphs.","Systems for accessing data stores from object oriented languages have been used for many years. A frequent approach to accomplish access of data stores involves writing and embedding custom access code within an object application needing the access. This approach is generally limited to having the custom code access only a single relational table within a relational database or similar construct within any other data store (hereinafter collectively \u201cdata store\u201d). Under the circumstances where a developer has control over the design and creation of a data store from its inception, it is possible to design and store meaningful information in a single table. Such design opportunities are usually rare, however.","Generally, the design goals of a properly normalized relational data store or specific object data store, for example conflict with those of object application models. An object application model may exist in one or more of a computer's memory, an application data store and an application information storage repository that may be independent of the data store organization or object definitions. Whether a data source is a relational database, an object database or a flat file (text) base, procedures and systems exist for converting retrieved data to a data object, or to a data object definition, that is mapped to the data source. Advancements in the art have been made with respect to tools for conveniently mapping objects to systems of tables and maps in order to expedite accessing, changing and updating data stores. See, for example, U.S. Pat. No. 5,857,197 (and its associated programming interfaces (\u201cAPIs\u201d)) describes tools for translating object data to relational data, relational data to object data, and object data to object data to expedite the use of data stores. One or more of such data stores, data objects, data object definitions, may be utilized by an object programming application and may be illustrated as a model of data objects or as a model of data object definitions.","A further problem complicates the creation, access, changing or deleting of an object application model that utilizes such data stores. The object application model may be distributed over multiple physical computer machine locations or even distributed over multiple Internet website locations that may be independent of the data stores. The object application model may utilize a different set of data objects or different set of definitions for relationships between data objects than that of one or more of its data sources. In most situations, the respective structures of the data sources and of the object applications model simply do not conveniently allow for mapping, accessing or changing of an overall schema of application data objects as well as any associated definitions of relationships between two or more data objects or elements within a data object.","Importantly, relationships may exist between a data object and one or more of the other data objects found in the object application model or in a data object of the data source. A relationship between one data object and another data object or with a data source may be member selected from the group of three relationship types consisting of 1 to 1 (1\u20141), 1 to many (1-M) or many to many (M\u2014M). Complex combinations of these relationships may exist as a data object relationships definition for a given data object. These relationships are described or illustrated in further detail later in this document.","Objects may logically span multiple relational tables or multiple object databases, and may even be distributed over a logical (or hypothetical) computer system involving multiple physically independent computer systems or even multiple website locations. Creating, accessing, maintaining or updating an object application model can require working with multiple translation modules and require tedious and repetitive updating of multiple individual computer systems or multiple data sources in order to do useful work and keep the object application model synchronized. Such approaches are both costly and unwieldy in terms of computing and development resources, particularly with respect to Internet based electronic commerce (eCommerce) object application models.","Data objects of an object application model are often a feature of eCommerce object programming applications, where information is obtained from a data source and the data is defined as a data object (e.g., as a Java class) for use with another computer application. In practice, a data object or model of data objects may exist only in the random access memory of a computer memory system, or may be saved to either a data source or to some other type of retrievable information repository. A programmer or administrator of an object data application may not be able to exhaustively display the overall model or diagram of data objects for an object application model or to display some of its specific elements. Unfortunately, tools for accessing and displaying data objects and associated data object relationships as a complex data object graph model have not been well implemented in the field of object language programming.","A computer application can execute one or more of the following non-limiting actions with respect to one or more of the members selected from the group consisting of data, a data object, and a data object definition: access data, change data, create data, create a new relationship between one or more data objects by creating or changing at least one data object relationship definition, change or delete a relationship between one or more data objects by changing or deleting at least one data object relationship definition, access a data object relationship definition and use its parameters to access a data source or a data object, and access one or more data object relationship definitions or data objects to create a new data object or data object relationship. Any changes executed by a computer application with respect to one or more of the members selected from the group consisting of data, data object or data object definition may need to be properly persisted (permanently stored) to preserve any changes to one or more of the members selected from the group consisting of data, a data object and a data object definition.","A data object and an associated data object relationship definition may be represented by a complex data object graph (\u201cCDOG\u201d). A CDOG, for the purposes of this document, may be thought of as a computer program data object graph that represents a data object having at least one relationship with at least one other data object or with itself via a circular link. When the data object of a CDOG is implemented in the Java computer program language, the CDOG may be further defined as being a Java Data Object Graph (\u201cJDOG\u201d).","There is a need for an easily navigable tool for detecting any relationships of a data object in order to provide a CDOG definition and for persisting any changes to at least one member selected from the group consisting of a data object, any data associated with the related object, or any associated CDOG definition (i.e., an changes to the data object, data or to a relationship of the data object with another data object). For example, there is a need to be able to properly sever relationships between at least two data objects in a convenient and efficient manner by simply making a change to the CDOG definition for one of the two related data objects.","An illustration of this might be a customer account CDOG of a company where the customer has become insolvent. Using the technology presently available, a computer applications programmer or administrator would ordinarily need to individually delete or update the data in the data source, in any instances of the data object and in any instances of any associated data objects, as well as to delete or update any associated data object relationship definitions, which would be particularly tedious and repetitive in a distributed application model. There is currently no computer programmer or system administrator tool that is efficiently adapted for an object applications CDOG model with features that permit convenient and efficient accessing and deleting of a single instance of a complex data object and (without further input) results in the tool automatically deleting all existing associated data objects and relationships and the tool automatically updating all local and distributed instances of the CDOG and its associated data, data objects and data object relationships on the local or distributed computer system.","Accordingly, there is a strong need in the art for a computer applications programmer tool designed to assist a programmer or administrator in the actions of deleting, inactivating or updating of a CDOG, wherein the computer applications programmer tool can be configured to automatically delete, inactivate or update at least one member selected from the group consisting of associated data, associated data objects and associated data object relationship definitions to reflect the deleting, inactivating or updating of a CDOG. A particularly strong need exists for such a tool having the further ability to be configured to persist, propagate and reflect system wide (in a local or distributed computer system) any such changes to a CDOG instance to all instances of the CDOG and to all instances of associated data, data objects and data object relationships.","The following non-exhaustive list of definitions is used herein to define terms that may otherwise be confusing or can sometimes have multiple meanings. Each occurrence of a defined term in the above text, in the text that follows, or in the claims of this document, is to be given the meaning ascribed to it in the list of definitions below.","\u201cInstance\u201d as referred to in this document in the context of computer software applications is a single occurrence of a software logical element in the memory of a computer system, such as a \u201cclass\u201d, an \u201cobject\u201d, a \u201cdata object\u201d, and the like.","\u201cClass\u201d as referred to in this document in the context of computer software applications is a logic unit in a computer application or a computer software program where the application or program is based upon an objected oriented programming language (e.g., Java). In practice, a class is a logical unit used as a logical template in an object oriented language from which to allocate new instances of objects.","\u201cObject\u201d as used in the context of this document is a general term referring to a logic unit in a computer application or a computer software program where the application or program is based upon an objected oriented programming language (e.g., Java). The term \u201cobject\u201d may ordinarily be used interchangeably with the term \u201cclass\u201d as a template or as an instance depending on the context.","\u201cData object\u201d as referred to in the context of this document represents the concept of the occurrence of an object that holds data within a specific computer application domain and is likely to have its contents stored in a persistent data source of a computer system (e.g., a database server, a binary file, a text file, or even in a combination of two or more of such a persistent data sources of a computer system). A data object may exist as an independent data object without any relationship to any other data object or it may have one or more relationships with itself or with one or more other data objects.","\u201cComplex data object\u201d (or \u201cCDO\u201d) as used in the context of this document refers to the occurrence of a data object that has at least one or more relationships with itself, or at least one or more relationships with one or more other data object(s). In a given instance of a CDO at least one relationship is populated as a link, as defined below. A CDO may have a multiplicity of different relationships with itself or with one or more additional CDOs.","\u201cRelationship\u201d or \u201cdata relationship\u201d as used in the context of a CDO refers to the type of logical combination that occurs between a data object with itself, or refers to the type of logical combination that occurs between a data object and at least one another data object. Among other references or descriptions, such a relationship is always referred to or partially described by a \u201crelationship type\u201d. This term is used in an object oriented language context to reference or describe any expectations, actions and limitations possible between two or more data objects.","\u201cRelationship type\u201d in the context of this document is a label that specifies the possible multiple combinations that can occur between a CDO and itself or with at least one other CDO. The possible relationship type labels are 1\u20141 (one to one), 1-M (one to many) and M\u2014M (many to many). A given CDO may be simultaneously related to more than one other CDO through several different types of relationship.","\u201cLink\u201d as used in this document with respect to a CDO identifies a particular occurrence of a relationship between a CDO and itself, between a CDO and another CDO. The occurrence of at least one populated link results in an instance of the CDO.","\u201cCircular link\u201d as used in this document with respect to a CDO identifies a particular occurrence of a relationship between a CDO and itself that may be direct or indirect (e.g., linked to itself through another CDO).","\u201cRelationship definition\u201d or \u201crelationship description\u201d in the context of this document and computer software applications refers to information, or an abstraction of information, regarding a \u201crelationship\u201d, \u201cdata relationship\u201d \u201crelationship type\u201d or a \u201clink\u201d that can be stored, accessed, transferred, communicated, displayed or edited.","\u201cComplex data object graph\u201d or \u201cCDOG\u201d is a term employed herein as an abstraction to logically represent a set of complex data objects and a set of their corresponding relationships.","\u201cJava data object graph\u201d or \u201cJDOG\u201d is a term employed herein as an abstraction to logically represent a set of complex data objects and a set of their corresponding relationships that are part of a Java programming application.","\u201cApplication model\u201d or simply \u201cmodel\u201d are essentially interchangeable terms employed herein as abstractions to logically convey a collective description or other representation for a set of complex data objects and a corresponding description or other representation of their relationships. In one respect, these terms are used logically herein provide a general way of efficiently communicating when referring to set of metadata (i.e., data about data) that describes possible data entities (e.g., objects, database tables, maps, etc,) data relationship types, and data constraints involved in a computer system or application, or in a specific instance of an application. It is important to understand the context in which the terms \u201capplication model\u201d and \u201cmodel\u201d are used in this document. Ordinarily computer engineers refer to the \u201cmodel\u201d as an abstraction rather than a specific possibility or instance of the model as applied. However, in this document for the ease of communication abstractions of the model, possible implementations of the model and instances of the model are all referred to generally as \u201capplication model\u201d or \u201cmodel\u201d. From the context of its use the term will be clear.","\u201cNavigation\u201d, \u201cnavigating\u201d or \u201cnavigated\u201d in the context of the present document refers to an action implementing at least one object to interact with a set of related objects for a certain purpose, such as creation, access, insertion, modification and deletion of an object, or of one of its relationships.","\u201cNavigation model\u201d as used herein is a special type of application model that is applied specifically to a description (or other representation) of how objects can relate to each other and what might be the expected behavior when a CDOG is navigated for a certain purpose.","\u201cObject schema\u201d is a term employed herein as an abstraction referring to the set of data object classes that describe the possible data objects that can be created, modified or maintained in an application, or describing an instance of a set of data object classes in an application.","An object of the present invention is to provide a system for creating, maintaining, accessing, navigating and persisting complex data objects as a complex data object graph (CDOG) model. In a preferred embodiment, an object of the present invention is to provide such a system that can display the CDOG model as a graph or table of complex data objects. A further object is to provide such a system is located on, or is part of, a local or distributed computer system.","An object of the present invention is to provide a method for creating, maintaining, accessing, navigating and persisting complex data objects stores as a complex data object graph. In a preferred embodiment, an object of the present invention is to provide such a method having the step of displaying or printing a representation of the CDOG model as a graph or table of complex data objects. In a further object, such a method involves a local or distributed computer system.","An object of the present invention is to provide a computer software program having at least one user interface and having at least one feature for at least one action selected from the group consisting of creating, maintaining, accessing, navigating and persisting complex data objects as a CDOG model. In a preferred aspect, an object of the present invention is to provide software program with a module or associated software program having a feature for displaying or printing a representation of the CDOG model as a graph or table of complex data objects. In a preferred object of the invention, such a software program has an editing interface for editing a CDOG model, or an editable input or source, such as a file, that can be modified to implement changes to a CDOG model. A further object is to provide such a software program adapted for a local or distributed computer system.","An object of the present invention is to provide an application programming interface (\u201cAPI\u201d), as a preferred embodiment of the invention, wherein the API can be accessed to create, maintain, access, navigate and persisting complex data objects as a CDOG model, or as an object schema. In one aspect the API can be accessed by a computer software program, or by a computer software program module that is part of a software package including the API, to provide at least one action selected from the group consisting of creating, maintaining, accessing, navigating and persisting complex data objects as a CDOG model. In a preferred aspect, an object of the present invention is to provide such an API as part of a software tool package having a component or method for displaying or printing a representation of the CDOG model as a graph or as table(s) of complex data objects. In another preferred object, such a software tool package including the API would be provided with an editing interface for editing the CDOG model, or has an editable input or source, such as a file, that can be modified to implement changes to the complex data object model. It is a particularly preferred object to provide such an interface as a point and click graphical user interface that may be displayed and\/or edited. A further object is to provide such a API for operation on a local or distributed computer system.","A preferred object of the present invention is to provide a software tool comprising the API according (as described above), adapted for a local network or a distributed network environment, wherein said software tool provides persistence in an object oriented language environment transparently by implementing a configurable network component capable of acquiring and persisting CDOGs through network APIs.","A further object of the present invention is to a software tool capable of reading a source programming object logic model or a database file in a format selected from the group consisting of a UML data file, m a XMI data file, and a XML file and converting the information into a target member selected from the group consisting of a database definition XML file, a database mapping definition file, and a CDOG definition file. In a preferred object, the software can automatically generate a persistence layer that corresponds to the object model information of the source file.","The present invention provides a system for creating, maintaining, accessing, navigating and persisting complex data objects as a complex data object graph model. In one embodiment, the system comprises a computer system having a user interface, a working memory storage area and at least one device for permanently storing information, and said system being loaded with at least one portion of a computer software program, wherein said software program comprises at least one user access interface and a set of programming routines designed for creating, maintaining, accessing, navigating and persisting complex data objects as a CDOG model. In a preferred embodiment, the present invention provides such a system that can display the CDOG model as a graph or set of tables of complex data objects and provides a creating or editing interface for the CDOG model. Most preferred is such a system providing a point and click graphical user interface.","The present invention provides a method for creating, maintaining, accessing, navigating and persisting complex data objects stores as a CDOG model, comprising the steps of:\n\n","In a preferred embodiment, the present invention provides such a method providing the additional step of displaying or printing a representation of the CDOG model as a graph or set of tables representing complex data objects and their relationships.","The present invention provides a computer software program having at least one user interface and having at least one feature that provides for at least one action selected from the group consisting of creating, maintaining, accessing, navigating and persisting complex data objects as a CDOG model. In a preferred aspect of the invention, the present invention provides a software program, or an association with a software program, having a feature for displaying, printing or displaying and printing a representation of the CDOG model as a graph, or as a set of tables representing a CDOG model. In a further preferred embodiment, such a software program has an editing interface for editing the CDOG model, or has an editable input or source, such as a file, that can be modified to implement changes to the complex data object CDOG model (or has both an interface for editing and an editable input or source, such as a file).","The present invention also provides an application programming interface (\u201cAPI\u201d), as a preferred embodiment, wherein the API can be accessed to create, maintain, access, navigate and persisting complex data objects as a CDOG model. In one aspect the API can be accessed by an independent computer software program, or by a computer software program module that is part of a software package including the API, to provide at least one action selected from the group consisting of creating, maintaining, accessing, navigating and persisting complex data objects as a CDOG model. In a preferred aspect, the present invention provides such an API as part of a software tool package that provides a method for displaying or printing a representation of the CDOG model as a graph or set of tables representing the CDOG model (or providing methods for both displaying and printing a representation of the CDOG model). In another preferred aspect, such a software tool package that includes the API provides an editing interface for editing the CDOG model, or has an editable input or source, such as a file, that can be modified to implement changes to the CDOG model (or provides both an editing interface and an editable input or source, such as a file,).","A preferred embodiment of the present invention provides a software tool comprising the API according (as described above), adapted for a local network or a distributed network environment, wherein said software tool provides persistence in an object oriented language environment transparently by implementing a configurable network component capable of acquiring and persisting CDOGs through network APIs.","In another preferred embodiment, the CDOG API is the CocoNavigator API which provides support for manipulating complex objects in conjunction with the THOUGHT Inc. CocoBase Enterprise Object\/Relational (O\/R) database (hereinafter \u201cCocoBase\u201d) mapping tool (see U.S. Pat. No. 5,857,197 (incorporated herein in its entirety), for concepts upon which the CocoBase mapping tool is based). An object is considered to be complex when it has established or potential relationships (i.e. links) to other objects. For instance, a Company object instance may be linked to an instance of its corporate address and instances of a Department object, which in turn may be linked to a set of instances of Employee objects. An example of such an CDOG is shown in , for example. The combination of these objects and their links constitute a graph of objects (CDOG model) that can be manipulated using the CocoNavigator API. Since the CocoNavigator API works in a Java Programming language environment, this CDOG example may also be referred to as a JDOG example.","In another preferred embodiment, the invention provides a software tool comprising the API according to the invention or interfacing therewith, wherein the software is adapted for performing the following steps:\n\n","In a further preferred embodiment, the present invention provides a software tool as described above that is adapted for performing at least one of the following additional steps:\n\n","In a still further preferred embodiment the software tool described above provides target information that is at least one member selected from the group consisting a CocoBase database definition repository file, a CocoBase map, a CocoNavigate CDOG definition, a CocoNavigate object link descriptor, and a CDOG object graph definition data file. Further preferred is such software, wherein the source is a UML\/XMI document containing sufficient DTD information to exchange modeling information with a UML modeling tool.","In one embodiment of the software tool according to the invention, the software tool can be set to automatically generate a persistence layer that corresponds to the source UML class diagrams provided by an exported source file from a case tool capable of exporting UML\/XMI, such as Rational Rose, Together and ArgoUML.","An easy way to understand the job performed by a CDOG Navigator API, such as the CocoNavigator API, is to imagine it as a monitor that can provide at least one object to intercept any accesses to the data objects and their relationships that constitute the CDOG, as well as any changes to the data source upon which the CDOG depends, in order to provide a means to persist any changes to the CDOG (or CDOG model) or related data in the data source. Any changes to the CDOG (or CDOG model) can then be propagated by the CDOG Navigator API to a persistent data source through a CocoBase Enterprise O\/R connection. Similarly, persistent data that updates a data source can be utilized to create a CDOG model or to update a CDOG model.","Each CDOG (or CDOG model) managed by the CDOG Navigator API can be associated by the CDOG Navigator API with a CDOG descriptor (such as a file) that may be utilized to represent all or part of a \u201cnavigation model\u201d. In this respect, a navigation model may be abstractly described as essentially a namespace in which a set of data objects and a set of link descriptions (i.e., relationship types between data objects) are each defined. In a preferred embodiment, a data source, data field, data field size and data field type are listed for each data object in the set of data objects. In another preferred embodiment, at least one link description for two data objects, or for a single data object having a circular link (where the link description is utilized in conjunction with the CocoNavigator API and CocoBase mapping tool) contains one or more of the following types of information (however other related information may be utilized):\n\n","Some preferred features provided by the CocoNavigator API and its associated software, when utilized with the CocoBase mapping tool, or with a similar mapping tool, are as follows:\n\n","Some examples of preferred features that can be provided by the CocoNavigator API and its associated software, which are particularly enhanced when utilized with the currently existing CocoBase mapping tool, are as follows:\n\n","From the above description of features of the API, and the features of the CocoNavigator API programming routines described below, an object computer language programmer can produce an API have the functionality of the CocoNavigator API described herein. Essentially the CocoNavigator API has an at least one user access interface, at least one data source access interface and at least three main programming modules consisting of the following programming modules or routines:\n\n","In a more preferred embodiment, the CDOG API according to the invention, (a preferred embodiment is the CocoNavigator API) can be written with an interface that accesses and uses functionalities of the CocoBase mapping tool, associated programming routines, or associated class libraries. Both the object code and the source code of the CDOG API are contemplated as part of this invention.","In another preferred embodiment, the above described CDOG API can be accessed to create, maintain, access, navigate and persisting complex data objects as a CDOG model. In a particularly preferred aspect, the API can be accessed by a computer software program such as the CocoBase mapping tool, or by a computer software program module that is part of a software package including the API, to provide at least one action selected from the group consisting of creating, maintaining, accessing, navigating and persisting complex data objects as a CDOG model. In an even more preferred aspect, the present invention provides such an API as part of a software tool package having a feature or method for displaying or printing a graph or set of tables representing a CDOG or a CDOG model. In yet another preferred aspect, such a software tool package including the API provides an interface for editing a CDOG, a CDOG model, or for editing a representation definition for a CDOG or a CDOG model to provide a modification that implements a change to a CDOG, or to its definition.",{"@attributes":{"id":"p-0059","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"thought.CocoBase.navapi"]},{"entry":[{},"Class Navigator"]},{"entry":[{},"java.lang.Object"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"|"]},{"entry":[{},"+--thought.CocoBase.navapi.Navigator"]},{"entry":[{},"public class Navigator"]},{"entry":[{},"extends java.lang.Object"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":[{},{}]},"Navigator provides support for manipulating complex objects with CocoBase. A object is considered to be complex when it has established relationships (i.e. links) to other objects. For instance, a object company may be linked to instances of Departament, which in turn may be linked to a set of Employee objects. The combination of these objects and their links contitute a graph of objects that can be manipulated using the Navigator class.","A navigator is basically a container that keeps track of the links between objects and allows operations to be performed at the graph level. Thus, it is possible to load, insert, delete or update an entire graph of objects provided a CocoBase connection is given. An easy way of understanding the job performed by a Navigator is to imagine it a monitor of object graphs. For each of these graphs, the Navigator keeps has a memory image and a persistent image. When the Navigator is first used, both the memory and persistent images are empty. As links are populated, the memory image grows. A method (e.g., updateAllLinks ( . . . )) can be then invoked to propagate changes and synchronize the persistent image with the state of the memory image. Conversely, a persistent graph image can be loaded into memory by invoking loadAllLinks ( . . . ).\n\nThe funcionality available in the Navigator class is similar to that available in the old CocoNavigate class, but it is provided here at an instance level. Thus, it is possible to have several Navigator instances associated to the same or different models. Further, all memory resources can be reclaimed by the garbage collector once the instance is no longer needed.\n\nFeatures implemented in this version:\n\nmultiple navigation models \u2014a navigation model is essencially a namespace in which a set of link descriptions is defined. Each model is identified and defined by the properties file that describes the link information and is associated to set of object graphs. A model can be specified by invoking the method setmodel ( . . . ). Once a model is defined, description contained in the model_name.properties file or in the CocoBase repository (not available yet) is translated into CBLink link descriptors (see class CBLink for details). If no model is specified, a model called \u201cCocoNavLinks\u201d is automatically created from the description contained in CocoNavLinks.properties. It is possible to work with more than one model (and properties files) at the same time and to switch between those models as well.\n\nThe basic format of a properties file that describes a model is the following:\n",{"@attributes":{"id":"p-0062","num":"0111"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":";list of links defined for MapName1"},{"entry":"MapName1_LINKS=linkName1, [,linkName1 [, . . .]]"},{"entry":";the list of field labels used as navigation key in"},{"entry":"MapName1"},{"entry":"MapName1_linkName1_KEY=keyName1 [,keyName2 [, . . . ]]"},{"entry":";the name of the map that maps the target object"},{"entry":"MapName1_linkName1_TARGET_MAP=mapName"},{"entry":";the list of field labels used as navigation key in the"},{"entry":"target map"},{"entry":"MapName1_linkName1_TARGET_KEY=keyName1"},{"entry":"[, keyName2 [, . . . ]]"},{"entry":";the full class name of the java class corresponding to"},{"entry":"the target map"},{"entry":"MapName1_linkName1_TARGET_CLASS=pkgname.class name"},{"entry":";the type of the link (one-to-many, one-to-one, many-to-"},{"entry":"one, many-to-many)"},{"entry":"MapName1_linkName1_TARGET_TYPE=1_M(default)"},{"entry":"|1_1|M_1|M_M"},{"entry":";the qualifier of the link (used for code generation"},{"entry":"purposes)"},{"entry":"MapName1_linkName1_TARGET_QUALIFIER=STD_LINK(default)"},{"entry":"|BEAN_LINK"},{"entry":";will the target object be automatically loaded (use false"},{"entry":"for \u201clazy\u201d load)"},{"entry":"MapName1_linkName1_AUTONAV=true)default) |false"},{"entry":";will this link cascade deletion to the target object?"},{"entry":"MapName1_linkName1_TARGET_DELETE=true(default) |false"},{"entry":";will this link cascase updates to the target object?"},{"entry":"MapName1_linkName1_TARGET_UPDATE=true|false(default)"},{"entry":";will this link cascade insertion to the target object?"},{"entry":"MapName1_linkName1_TARGET_INSERT=true(default) |false"},{"entry":";specify this link definition as inverse of another"},{"entry":"(optional when type is 1_1, 1_M, M_1)"},{"entry":"MapName1_linkName1_INVERSE_OF=mapName_linkName"},{"entry":";the name of the associative map for many-to-many links"},{"entry":"(requires _INVERSE_OF entry)"},{"entry":"MapName1_linkName1_M_TO_M_MAP=mapName"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0063","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":". . ."},{"entry":"Department_LINKS=employees"},{"entry":"Department_employees_KEY=ID"},{"entry":"Department_employees_TARGET_KEY=DEPARTMENT"},{"entry":"Department_employees_TARGET_MAP=Employee"},{"entry":"Department_employees_TARGET_CLASS=com.foo.Employee"},{"entry":"Department_employees_TARGET_TYPE=1_M"},{"entry":"Department_employees_TARGET_QUALIFIER=STD_LINK"},{"entry":"Department_employees_AUTONAV=true"},{"entry":"Department_employees_TARGET_DELETE=true"},{"entry":"Department_employees_TARGET_INSERT=true"},{"entry":"Department_employees_TARGET_UPDATE=true"},{"entry":". . ."},{"entry":"Employee_LINKS=dependents"},{"entry":". . ."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0064","num":"0113"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":". . ."},{"entry":"Employee_LINKS=department"},{"entry":". . ."},{"entry":"Employee_department_INVERSE_OF=Department_employees"},{"entry":". . ."},{"entry":"Employee_LINKS=employees"},{"entry":". . ."},{"entry":"Department_employees_INVERSE_OF=Employee_department"},{"entry":". . ."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0065","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"class Employee implements CBProp {"},{"entry":"\u2002LinkObjProxy department;"},{"entry":". . ."},{"entry":"}"},{"entry":"class Department implements CBProp {"},{"entry":"\u2002Vector employees;"},{"entry":"\u2003. . ."},{"entry":"}"},{"entry":"Navigator n = new Navigator (myBase);"},{"entry":"Department hardware = myBase.select (new"},{"entry":"Department (100, \u201cHARDWARE\u201d, aCompany));"},{"entry":"\/\/ load a graph of objects from a given department"},{"entry":"n.loadAllLinks (hardware);"},{"entry":"\/\/ add this point hardware.employees is populated with a"},{"entry":"special dynamic Vector"},{"entry":"Employee john = new Employee (10010, \u201cJohn\u201d, \u201c123 Main St\u201d);"},{"entry":"\/\/ at this point john.department is null and"},{"entry":"hardware.employees.contains(john)==false"},{"entry":"hardware.employees.addElement(john);"},{"entry":"\/\/ at this point john.department is a special dynamic"},{"entry":"proxy containing hardware"},{"entry":"\/\/ and hardware.employees.contains(john)==true"},{"entry":"john.department.set (null);"},{"entry":"\/\/ at this point john.department.get( )==null and"},{"entry":"hardware.employees.contains(john)==false"},{"entry":"n.addLink(john, \u201cdepartment\u201d, hardware);"},{"entry":"\/\/ at this point john.department.get( )==hardware"},{"entry":"\/\/ and hardware.employees.contains(john)==true"},{"entry":". . ."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":[{},{},{}]},{"@attributes":{"id":"p-0066","num":"0115"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public class Employee {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String name;"]},{"entry":[{},"Vector dependents;"]},{"entry":[{},". . ."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public class Dependent {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String name;"]},{"entry":[{},"Employee parent;"]},{"entry":[{},". . ."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},". . ."]},{"entry":[{},"Employee anEmp = new Employee (\u201cJohn Foo\u201d);"]},{"entry":[{},"Dependent aChild = new Dependent (\u201cLori Foo\u201d);"]},{"entry":[{},"anEmp.dependents = new java.util.Vector( );"]},{"entry":[{},"anEmp.dependents.addElement (aChild);"]},{"entry":[{},"\/\/ at this point aChild.parent==null and"]},{"entry":[{},"anEmp.dependents.contains (aChild)==true"]},{"entry":[{},". . ."]},{"entry":[{},"Navigator n = new Navigator (myBase);"]},{"entry":[{},"n.updateAllLinks (anEmp, \u201cDepartment\u201d, true);"]},{"entry":[{},"\/\/ at this point the object graph contains a link between"]},{"entry":[{},"anEmp and aChild"]},{"entry":[{},"\/\/ and aChild.parent==anEmp"]},{"entry":[{},". . ."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0067","num":"0116"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[". . .",{}]},{"entry":"n.visitAllLinks (hardware,"},{"entry":"\u2002new LinkVisitor( ) {"},{"entry":"\u2002public void"},{"entry":"visitLink (CocoDriverInterface cdi,"},{"entry":[{},"CBLink"]},{"entry":"cbLink,"},{"entry":[{},"Object obj,"]},{"entry":[{},"String"]},{"entry":"mapName,"},{"entry":[{},"String"]},{"entry":"linkName,"},{"entry":[{},"Object"]},{"entry":"target,"},{"entry":[{},"int"]},{"entry":"distance,"},{"entry":[{},"boolean"]},{"entry":"hasBeenVisited) {"},{"entry":"\u2002\u2002for (int i=0; i < distance+1;"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"i++) System.out.pring (\u201c\\t\u201d); \/\/ we use tabs to indicate the"},{"entry":"level in the tree"},{"entry":"\u2002\u2002System.out.println (\u201c[\u201c+"},{"entry":"linkName +\u201d]\u201d + target + (hasBeenVisited ? \u201c++\u201d : \u201c\u201d));"},{"entry":"\u2002\u2002}"},{"entry":"\u2002};"},{"entry":"\u2002false);"},{"entry":". . ."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{}]},{"@attributes":{"id":"p-0068","num":"0117"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class Employee implements CBProp {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"long id;"]},{"entry":[{},"String name;"]},{"entry":[{},"Employee lmanager;"]},{"entry":[{},"Vector lsubordinates;"]},{"entry":[{},"LinkObjProxy ldepartment;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"class Department implements CBProp {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"long id;"]},{"entry":[{},"String name;"]},{"entry":[{},"Vector lemployees;"]},{"entry":[{},"LinkObjProxy lcompany;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"class Company implements CBProp {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"long id;"]},{"entry":[{},"String name;"]},{"entry":[{},"Vector ldepartments;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0069","num":"0118"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CREATE TABLE COMPANY ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ID NUMERIC (15),"]},{"entry":[{},"NAME VARCHAR (15) )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CREATE TABLE DEPARTMENT ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ID NUMERIC (15),"]},{"entry":[{},"NAME VARCHAR (15),"]},{"entry":[{},"COMPANY NUMERIC (15 ) )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CREATE TABLE EMPLOYEE ("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ID NUMERIC (15),"]},{"entry":[{},"NAME VARCHAR (15),"]},{"entry":[{},"DEPARTMENT NUMERIC (15),"]},{"entry":[{},"MANAGER NUMERIC (15) )"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0070","num":"0119"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#This is the navigation properties file"},{"entry":"Company_LINKS=ldepartments"},{"entry":"Company_ldepartments_KEY=ID"},{"entry":"Company_ldepartments_TARGET_KEY=COMPANY"},{"entry":"Company_ldepartments_TARGET_MAP=Department"},{"entry":"Company_ldepartments_TARGET_CLASS=com.foo.Department"},{"entry":"Company_ldepartments_TARGET_TYPE=1_M"},{"entry":"Company_ldepartments_TARGET_QUALIFIER=STD_LINK"},{"entry":"Company_ldepartments_AUTONAV=true"},{"entry":"Company_ldepartments_TARGET_DELETE=true"},{"entry":"Company_ldepartments_TARGET_UPDATE=false"},{"entry":"Company_ldepartments_TARGET_INSERT=true"},{"entry":"Company_ldepartments_INVERSE_OF=Department_lcompany"},{"entry":"Department_LINKS=lcompany, lemployees"},{"entry":"Department_lcompany_KEY=COMPANY"},{"entry":"Department_lcompany_TARGET_KEY=ID"},{"entry":"Department_lcompany_TARGET_MAP=Company"},{"entry":"Department_lcompany_TARGET_CLASS=com.foo.Company"},{"entry":"Department_lcompany_TARGET_TYPE=M_1"},{"entry":"Department_lcompany_TARGET_QUALIFIER=STD_LINK"},{"entry":"Department_lcompany_AUTONAV=true"},{"entry":"Department_lcompany_TARGET_DELETE=false"},{"entry":"Department_lcompany_TARGET_UPDATE=false"},{"entry":"Department_lcompany_TARGET_INSERT=false"},{"entry":"Department_lcompany_INVERSE_OF=Company_ldepartments"},{"entry":"Department_lemployees_KEY=ID"},{"entry":"Department_lemployees_TARGET_KEY=DEPARTMENT"},{"entry":"Department_lemployees_TARGET_MAP=Employee"},{"entry":"Department_lemployees_TARGET_CLASS=com.foo.Employee"},{"entry":"Department_lemployees_TARGET_TYPE=1_M"},{"entry":"Department_lemployees_TARGET_QUALIFIER=STD_LINK"},{"entry":"Department_lemployees_AUTONAV=true"},{"entry":"Department_lemployees_TARGET_DELETE=true"},{"entry":"Department_lemployees_TARGET_INSERT=true"},{"entry":"Department_lemployees_TARGET_UPDATE=true"},{"entry":"Department_lemployees_INVERSE_OF=Employee_ldepartment"},{"entry":"Employee_LINKS=ldepartment, lmanager, lsubordinates"},{"entry":"Employee_ldepartment_KEY=DEPARTMENT"},{"entry":"Employee_ldepartment_TARGET_KEY=ID"},{"entry":"Employee_ldepartment_TARGET_MAP=Department"},{"entry":"Employee_ldepartment_TARGET_CLASS=com.foo.Department"},{"entry":"Employee_ldepartment_TARGET_TYPE=M_1"},{"entry":"Employee_ldepartment_TARGET_QUALIFIER=STD_LINK"},{"entry":"Employee_ldepartment_AUTONAV=true"},{"entry":"Employee_ldepartment_TARGET_DELETE=false"},{"entry":"Employee_ldepartment_TARGET_UPDATE=false"},{"entry":"Employee_ldepartment_TARGET_INSERT=false"},{"entry":"Employee_ldepartment_INVERSE_OF=Department_lemployees"},{"entry":"Employee_lmanager_KEY=MANAGER"},{"entry":"Employee_lmanager_TARGET_KEY=ID"},{"entry":"Employee_lmanager_TARGET_MAP=Employee"},{"entry":"Employee_lmanager_TARGET_CLASS=com.foo.Employee"},{"entry":"Employee_lmanager_TARGET_TYPE=M_1"},{"entry":"Employee_lmanager_TARGET_QUALIFIFER=STD_LINK"},{"entry":"Employee_lmanager_AUTONAV=true"},{"entry":"Employee_lmanager_TARGET_DELETE=false"},{"entry":"Employee_lmanager_TARGET_UPDATE=false"},{"entry":"Employee_lmanager_TARGET_INSERT=false"},{"entry":"Employee_lmanager_INVERSE_OF=Employee_lsubordinates"},{"entry":"Employee_lsubordinates_KEY=ID"},{"entry":"Employee_lsubordinates_TARGET_KEY=MANAGER"},{"entry":"Employee_lsubordinates_TARGET_MAP=Employee"},{"entry":"Employee_lsubordinates_TARGET_CLASS=com.foo.Employee"},{"entry":"Employee_lsubordinates_TARGET_TYPE=1_M"},{"entry":"Employee_lsubordinates_TARGET_QUALIFIFER=STD_LINK"},{"entry":"Employee_lsubordinates_AUTONAV=true"},{"entry":"Employee_lsubordinates_TARGET_DELETE=false"},{"entry":"Employee_lsubordinates_TARGET_INSERT=true"},{"entry":"Employee_lsubordinates_TARGET_UPDATE=false"},{"entry":"Employee_lsubordinates_INVERSE_OF=Employee_lmanager"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0071","num":"0120"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":". . ."},{"entry":"Company company = myBase.select (new"},{"entry":"Company (1, \u201cFOO\u201d), \u201cCompany\u201d);"},{"entry":"n = new Navigator (myBase)"},{"entry":"\/\/ load a graph of objects from a given department"},{"entry":"n.loadAllLinks (company, \u201cCompany\u201d);"},{"entry":"int hdwidx = company.ldepartments.indexOf (new"},{"entry":"Department (100, \u201chardware\u201d));"},{"entry":"Department hardware ="},{"entry":"company.ldepartments.elementAt (hdwIdx);"},{"entry":"\/\/ let us make some changes to the graph using the proxy"},{"entry":"fields"},{"entry":"Employee john = new Employee (10010, \u201cJohn Foo\u201d, \u201c123 Main"},{"entry":"St\u201d);"},{"entry":"hardware.lemployees.addElement (john);"},{"entry":"\/\/ at this point, john.ldepartment.get ( ) == hardward and"},{"entry":"\/\/ hardware.lemployees.contains (john) == true"},{"entry":"\/\/ let us remove some of the links using the proxy fields"},{"entry":"hardward.lemployees.removeElementAt (0);"},{"entry":"company.ldepartments.removeElement (new"},{"entry":"Department (200, \u201cACCOUNT\u201d));"},{"entry":"\/\/ let us update all changes"},{"entry":"n.updateAllLinks (company, \u201cCompany\u201d);"},{"entry":"\/\/ let us now make some more changes to the graph using"},{"entry":"the navigator"},{"entry":"mary = new Employee (10010, \u201cJohn Foo\u201d, \u201c123 Main"},{"entry":"St\u201d, hardware);"},{"entry":"\/\/ the line below will create a link between \u201cmary\u201d and"},{"entry":"\u201chardware\u201d and automatically"},{"entry":"\/\/ add \u201cmary\u201d to the \u201chardward.lemployees\u201d Vector and"},{"entry":"\/\/ assign \u201chardware\u201d to the \u201cmary.ldeparment\u201d field"},{"entry":"n.addLink (mary, \u201cEmployee\u201d, \u201cldeparment\u201d, hardware);"},{"entry":"\/\/ the line below has no effect since \u201cmary\u201d and"},{"entry":"\u201chardward\u201d are already linked"},{"entry":"n.addLink (hardware, \u201cDepartment\u201d, \u201clemployees\u201d, mary);"},{"entry":"\/\/ let us set john as mary's supervisor"},{"entry":"n.addLink (john, \u201cEmployee\u201d, \u201clsubordinates\u201d, mary);"},{"entry":"\/\/ we can also retrieve all employees subordinated to john"},{"entry":"using the navigator"},{"entry":"Object [ ] johnsSubordinates ="},{"entry":"n.getAllLinkedTo (john, \u201cEmployee\u201d, \u201clsubordinates\u201d);"},{"entry":"\/\/ and remove one of his subordinates"},{"entry":"Employee fstJohnSubordinate = (Employee)"},{"entry":"john.subordinates.firstElement( );"},{"entry":"n.removeLink (fstJohnSubordinate, \u201cEmployee\u201d, \u201clmanager\u201d, john)"},{"entry":";"},{"entry":"\/\/ which has the exact same effect as"},{"entry":"n.removeLink (john, \u201cEmployee\u201d, \u201clsubordinates\u201d, fstJohnSubordinate);"},{"entry":"\/\/ or as removing from the Vector directly"},{"entry":"john.subordinates.removeElement (fstJohnSubordinate);"},{"entry":"\/\/ let us now update all changes since the last call to"},{"entry":"updateAllLinks"},{"entry":"n.updateAllLinks (company);"},{"entry":"\/\/ at this point both the memory and persistent graph"},{"entry":"images are synchronized"},{"entry":". . ."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0019","list-style":"none"},"li":{"@attributes":{"id":"ul0019-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0020","list-style":"none"},"li":["thought.CocoBase.navapi, CBLink\n\nConstructor Summary\n","Navigator ( )\n\nConstructs a Navigator instance using the default model\n\nNavigator (CocoDriverInterface cdi)\n","Constructs a Navigator instance using the default model and sets its CocoBase connection to a persistent data source.\n\nNavigator (CocoDriverInterface cdi, java.lang.String model)\n","Constructs a Navigator instance using the given model and sets its CocoBase connection to a persistent data source.\n\nNavigator (java.lang.String model)\n","Constructs a Navigator instance using the given model."]}}}},{"@attributes":{"id":"p-0072","num":"0126"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Method Summary"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["void","addLink (java.lang.Object object,"]},{"entry":[{},"java.lang.String linkName,"]},{"entry":[{},"java.lang.Object target)"]},{"entry":[{},"Invokes addLink (Object, String, String, Object)"]},{"entry":[{},"sending object.getClass ( ).getName ( ) as the"]},{"entry":[{},"map name."]},{"entry":["void","addLink (java.lang.Object obj,"]},{"entry":[{},"java.lang.String mapName,"]},{"entry":[{},"java.lang.String linkName,"]},{"entry":[{},"java.lang.Object target)"]},{"entry":[{},"Establishes a link between two objects in the"]},{"entry":[{},"object graph of this Navigator"]},{"entry":["void","clear ( )"]},{"entry":[{},"Clears the memory and persistent graph images"]},{"entry":[{},"held by this Navigator and resets all information"]},{"entry":[{},"about loaded links."]},{"entry":["int","deleteAllLinks (java.lang.Object object)"]},{"entry":[{},"Invokes"]},{"entry":[{},"deleteAllLinks (Object, String, boolean)"]},{"entry":[{},"sending object.getClass ( ).getName ( ) as the"]},{"entry":[{},"map name and true as the deleteRoot flag."]},{"entry":["int","deleteAllLinks (java.lang.Object object,"]},{"entry":[{},"java.lang.String mapName)"]},{"entry":[{},"Invokes"]},{"entry":[{},"deleteAllLinks (Object, String, boolean)"]},{"entry":[{},"sending true as the deleteRoot flag."]},{"entry":["int","deleteAllLinks (java.lang.Object obj,"]},{"entry":[{},"java.lang.String mapName, boolean deleteRoot)"]},{"entry":[{},"Deletes all objects linked to a given object,"]},{"entry":[{},"recusively, from the persistent data source."]},{"entry":["java.lang.Object","findObject (java.lang.Object object,"]},{"entry":[{},"java.lang.String mapName)"]},{"entry":[{},"Finds the object instance in the memory graph"]},{"entry":[{},"image of this Navigator that is equal to the given"]},{"entry":[{},"object."]},{"entry":["java.lang.Object [ ]","getAllLinkedTo (java.lang.Object object,"]},{"entry":[{},"java.lang.String linkName)"]},{"entry":[{},"Invokes getAllLinkedTo (Object, String,"]},{"entry":[{},"String) sending object.getClass ( ).getName ( )"]},{"entry":[{},"as the map name."]},{"entry":["java.lang.Object [ ]","getAllLinkedTo (java.lang.Object obj,"]},{"entry":[{},"java.lang.String mapName,"]},{"entry":[{},"java.lang.String linkName)"]},{"entry":[{},"Returns an array containing the objects linked to a"]},{"entry":[{},"given object through a given link."]},{"entry":["CocoDriverInterface","getConnection ( )"]},{"entry":[{},"Returns the CocoBase connection to a persistent"]},{"entry":[{},"data source associated to this Navigator"]},{"entry":["static int","getDebugLevel ( )"]},{"entry":[{},"Returns the current debug level."]},{"entry":["static Navigator","getInstance (java.lang.String instanceId)"]},{"entry":[{},"Returns a Navigator object registered in the"]},{"entry":[{},"internal static pool."]},{"entry":["java.lang.String","getModel ( )"]},{"entry":[{},"Returns the current model associated to this"]},{"entry":[{},"Navigator."]},{"entry":["static","getRegisteredIds ( )"]},{"entry":["java.util.Enumeration","Returns an Enumeration object containing with all"]},{"entry":[{},"the ids of instances registered in the internal static"]},{"entry":[{},"pool."]},{"entry":["Transaction","getTransaction ( )"]},{"entry":[{},"Returns the CocoBase transaction this Navigator"]},{"entry":[{},"should use to bind objects when updating the"]},{"entry":[{},"persistent data source."]},{"entry":["int","insertAllLinks (java.lang.Object object)"]},{"entry":[{},"Invokes"]},{"entry":[{},"insertAllLinks (Object, String, boolean)"]},{"entry":[{},"sending object.getClass ( ).getName ( ) as the"]},{"entry":[{},"map name and true as the insertRoot flag."]},{"entry":["int","insertAllLinks (java.lang.Object object,"]},{"entry":[{},"java.lang.String mapName)"]},{"entry":[{},"Invokes"]},{"entry":[{},"insertAllLinks (Object, String, boolean)"]},{"entry":[{},"sending true as the insertRoot flag."]},{"entry":["int","insertAllLinks (java.lang.Object obj,"]},{"entry":[{},"java.lang.String mapName, boolean insertRoot)"]},{"entry":[{},"Inserts all objects linked to a given object"]},{"entry":[{},"recusively, in the persistent data source."]},{"entry":["java.lang.Object","loadAllLinks (java.lang.Object object)"]},{"entry":[{},"Invokes loadAllLinks (Object, String, boolean)"]},{"entry":[{},"sending object.getClass ( ).getName ( ) as the"]},{"entry":[{},"map name and true as the bindObjects flag"]},{"entry":["java.lang.Object","loadAllLinks (java.lang.Object object,"]},{"entry":[{},"java.lang.String mapName)"]},{"entry":[{},"Invokes loadAllLinks (Object, String, boolean)"]},{"entry":[{},"sending true as the bindObjects flag."]},{"entry":["java.lang.Object","loadAllLinks (java.lang.Object obj,"]},{"entry":[{},"java.lang.String mapName, boolean bindObjects)"]},{"entry":[{},"Loads all objects linked to a given object,"]},{"entry":[{},"recusively, from the persistent data source."]},{"entry":["java.lang.Object","loadLink (java.lang.Object object,"]},{"entry":[{},"java.lang.String mapName,"]},{"entry":[{},"java.lang.String linkName)"]},{"entry":[{},"Invokes"]},{"entry":[{},"loadLink (Object, String, String, boolean,"]},{"entry":[{},"boolean) sending object.getClass ( ).getName ( )"]},{"entry":[{},"as the map name, true as the bindObjects flag and"]},{"entry":[{},"true as the forceLoad flag."]},{"entry":["java.lang.Object","loadLink (java.lang.Object obj,"]},{"entry":[{},"java.lang.String mapName,"]},{"entry":[{},"java.lang.String linkName, boolean bindObjects,"]},{"entry":[{},"boolean forceLoad)"]},{"entry":[{},"Loads all objects linked to a given object through"]},{"entry":[{},"the specified link from the persistent data source."]},{"entry":["java.lang.Object","loadLinks (java.lang.Object object)"]},{"entry":[{},"Invokes loadLinks (Object, String, boolean)"]},{"entry":[{},"sending object.getClass ( ).getName ( ) as the"]},{"entry":[{},"map name and true as the bindObjects flag."]},{"entry":["java.lang.Object","loadLinks (java.lang.Object object,"]},{"entry":[{},"java.lang.String mapName)"]},{"entry":[{},"Invokes loadLinks (Object, String, boolean)"]},{"entry":[{},"sending true as the bindObjects flag."]},{"entry":["java.lang.Object","loadLinks (java.lang.Object obj,"]},{"entry":[{},"java.lang.String mapName, boolean bindObjects)"]},{"entry":[{},"Loads all objects linked to a given object from the"]},{"entry":[{},"persistent data source."]},{"entry":["static void","registerInstance (java.lang.String instanceID,"]},{"entry":[{},"Navigator nav)"]},{"entry":[{},"Adds a Navigator object to the internal static"]},{"entry":[{},"pool."]},{"entry":["void","removeLink (java.lang.Object object,"]},{"entry":[{},"java.lang.String linkName,"]},{"entry":[{},"java.lang.Object target)"]},{"entry":[{},"Invokes"]},{"entry":[{},"removeLink (Object, String, String, Object)"]},{"entry":[{},"sending object.getClass ( ).getName ( ) as the"]},{"entry":[{},"map name."]},{"entry":["void","removeLink (java.lang.Object obj,"]},{"entry":[{},"java.lang.String mapName,"]},{"entry":[{},"java.lang.String linkName,"]},{"entry":[{},"java.lang.Object target)"]},{"entry":[{},"Removes a link between two objects."]},{"entry":["void","removeLinks (java.lang.Object obj)"]},{"entry":[{},"Invokes removeLinks (Object, String) sending"]},{"entry":[{},"object.getClass ( ).getName ( ) as the map name."]},{"entry":["void","removeLinks (java.lang.Object obj,"]},{"entry":[{},"java.lang.String mapName)"]},{"entry":[{},"Removes an object from the object graph by"]},{"entry":[{},"removing all existing links to that object."]},{"entry":["void","setConnection (CocoDriverInterface cdi)"]},{"entry":[{},"Associates the CocoBase connection to a"]},{"entry":[{},"persistent data source with this Navigator."]},{"entry":["static void","setDebugLevel (int level)"]},{"entry":[{},"Sets the current debug level."]},{"entry":["void","setModel (java.lang.String modelName)"]},{"entry":[{},"Sets the model to be used by this Navigator."]},{"entry":["void","setProperties (java.util.Properties properties)"]},{"entry":[{},"Sets the properties that control the behavior of"]},{"entry":[{},"this Navigator."]},{"entry":["void","setTransaction (Transaction transaction)"]},{"entry":[{},"Sets the transaction to which objects should be"]},{"entry":[{},"bound by this Navigator when updating the"]},{"entry":[{},"persistent data source."]},{"entry":["static void","unregisterInstance (java.lang.String instanceId)"]},{"entry":[{},"Removes a Navigator object from the internal"]},{"entry":[{},"static pool."]},{"entry":["int","updateAllLinks (java.lang.Object object)"]},{"entry":[{},"Invokes"]},{"entry":[{},"updateAllLinks (Object, String, boolean)"]},{"entry":[{},"sending object.getClass ( ).getName ( ) as the"]},{"entry":[{},"map name and true as the updateRootflag."]},{"entry":["int","updateAllLinks (java.lang.Object object,"]},{"entry":[{},"java.lang.String mapName)"]},{"entry":[{},"\/**Invokes"]},{"entry":[{},"updateAllLinks (Object, String, boolean)"]},{"entry":[{},"sending true as the updateRoot flag."]},{"entry":["int","updateAllLinks (java.lang.Object obj,"]},{"entry":[{},"java.lang.String mapName, boolean updateRoot)"]},{"entry":[{},"Updates the persistent data source with all"]},{"entry":[{},"changes made to memory graph image that are"]},{"entry":[{},"not yet propagated to the persistent graph image."]},{"entry":["int","visitAllLinks (java.lang.Object object,"]},{"entry":[{},"LinkVisitor visitor, boolean sync)"]},{"entry":[{},"Invokes"]},{"entry":[{},"visitAllLinks (Object, String, LinkVisitor,"]},{"entry":[{},"boolean) sending object.getClass ( ).getName ( )"]},{"entry":[{},"as the map name."]},{"entry":["int","visitAllLinks (java.lang.Object obj,"]},{"entry":[{},"java.lang.String mapName, LinkVisitor visitor,"]},{"entry":[{},"boolean sync)"]},{"entry":[{},"Visits a given object and invokes"]},{"entry":[{},"visitor.visitLink (. . .) for each of the target"]},{"entry":[{},"objects linked to it, recusively."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{},{},{}],"ul":{"@attributes":{"id":"ul0021","list-style":"none"},"li":["public Navigator( )\n    \n    ","public Navigator (CocoDriverInterface cdi)\n    \n    ","public Navigator(CocoDriverInterface cdi, java.lang.String model)\n    \n    ","public Navigator(java.lang.String model)\n    \n    "]}},{"@attributes":{"id":"p-0073","num":"0142"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void addLink","(java.lang.Object obj,"]},{"entry":[{},{},"java.lang.String mapName,"]},{"entry":[{},{},"java.lang.String linkName,"]},{"entry":[{},{},"java.lang.Object target)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0026","list-style":"none"},"li":["Establishes a link between two objects in the object graph of this Navigator. Does not have any effect if the link already exists or if a corresponding link is not defined in the current model. In order to make the link persistent, either the method updateAllLinks . . . ) or the method insertAllLinks( . . . ) must be invoked.","If the class of the object being linked has a property (getter\/setter pair or public field) with a name that matches the given link name, that property will be set with the object being linked. Also, any \u201cspecial\u201d Vector or proxy fields that populate such object property will be notified to add the new linked object.","Parameters:","obj\u2014the source object","mapName \u2014the map name corresponding to the class of obj","linkName \u2014the name of the link that connects obj to the target","target \u2014the target object","See Also:","updateAllLinks(Object,String,boolean), insertAllLinks (Object, String)\n\ndeleteAllLinks\n"]}},{"@attributes":{"id":"p-0074","num":"0152"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public int deleteAllLinks","(java.lang.Object object,"]},{"entry":[{},{},"java.lang.String mapName)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0027","list-style":"none"},"li":["Invokes deleteAllLinks(Object,String,boolean) sending true as the deleteRoot flag.","Parameters:","object \u2014the object used as entry-point for navigating in the object graph","mapName \u2014the map name corresponding to the class of object","Returns:","the number of objects deleted","See Also:","deleteAllLinks(Object,String,boolean)\n\ngetAllLinkedTo\n"]}},{"@attributes":{"id":"p-0075","num":"0161"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["public java.lang.Object[ ] getAllLinkedTo","(java.lang.Object obj,"]},{"entry":[{},"java.lang.String mapName)"]},{"entry":[{},"java.lang.String linkName)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0028","list-style":"none"},"li":["Returns an array containing the objects linked to a given object through a given link. An empty array is returned if no linked object is found or if a corresponding link is not defined in the current model.","Parameters:","obj \u2014Object the source object","mapName \u2014String the map name corresponding to the class of obj","linkname \u2014String the link name that identifies the link","Returns:","Object[] the array of linked objects\n\ninsertAllLinks\n"]}},{"@attributes":{"id":"p-0076","num":"0169"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public int insertAllLinks","(java.lang.Object object,"]},{"entry":[{},{},"java.lang.String mapName)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0029","list-style":"none"},"li":["Invokes insertAllLinks (Object, String,boolean) sending true as the insertRoot flag.","Parameters:","object \u2014the object used as entry-point for navigating in the object graph","mapName \u2014the map name corresponding to the class of object","Returns:","the number of objects inserted","See Also:","insertAllLinks(Object,String,boolean)\n\nloadAllLinks\n"]}},{"@attributes":{"id":"p-0077","num":"0178"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["public java.lang.Object loadAllLinks","(java.lang.Object object,"]},{"entry":[{},"java.lang.String mapName)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0030","list-style":"none"},"li":["Invokes loadAllLinks(Object,String,boolean) sending true as the bindObjects flag.","Parameters:","object \u2014the object used as entry-point for navigating in the object graph","mapName \u2014the map name corresponding to the class of object","Returns:","the modified instance of the object passed in","See Also:","loadAllLinks(Object,String,boolean)\n\nremoveLink\n"]}},{"@attributes":{"id":"p-0078","num":"0187"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void removeLink","(java.lang.Object obj,"]},{"entry":[{},{},"java.lang.String mapName,"]},{"entry":[{},{},"java.lang.String linkName,"]},{"entry":[{},{},"java.lang.Object target)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0031","list-style":"none"},"li":["Removes a link between two objects. Does not have any effect if the link does not exist or if a corresponding link is not defined in the current model.","If the class of the object being unlinked has a property (getter\/setter pair or public field) with a name that matches the given link name, any \u201cspecial\u201d proxy fields that populate such object property will be notified to remove the unlinked object.","Parameters:","obj \u2014the source object","mapName \u2014the map name corresponding to the class of obj","linkName \u2014the name of the link that connects obj to the target","target \u2014the target object","See Also:","updateAllLinks(Object,String,boolean)\n\nupdateAllLinks\n"]}},{"@attributes":{"id":"p-0079","num":"0197"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public int updateAllLinks","(java.lang.Object object,"]},{"entry":[{},{},"java.lang.String mapName)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0032","list-style":"none"},"li":["\/**InvokesupdateAllLinks(Object,String,boolean) sending true as the updateRoot flag.","Parameters:","object \u2014the object used as entry-point for navigating in the object graph","mapName \u2014the map name corresponding to the class of object","Returns:","the total number of objects updated, deleted or inserted","See Also:","updateAllLinks(Object,String,boolean)\n\nvisitAllLinks\n"]}},{"@attributes":{"id":"p-0080","num":"0206"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public int visitAllLinks","(java.lang.Object obj,"]},{"entry":[{},{},"java.lang.String mapName,"]},{"entry":[{},{},"LinkVisitor visitor,"]},{"entry":[{},{},"boolean sync)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0033","list-style":"none"},"li":["Visits a given object and invokes visitor. visitLink( . . . ) for each of the target objects linked to it, recusively. This method is provided as a generic mechanism to implement customized behavior that can be aplied to all objects of an object graph that are reachable from a given navigation entry point. If this method is used to propagate changes to a persistent data source, the flag sync should be set to true.","Parameters:","obj \u2014the object used as entry-point for navigating in the object graph","mapName \u2014the map name corresponding to the class of obj","visitor \u2014LinkVisitor the visitor object","sync \u2014boolean indicates if the memory image graph should be synchronized the persistent image in the end of the process","Returns:","int the number of objects visited\n\naddLink\n"]}},{"@attributes":{"id":"p-0081","num":"0215"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void addLink","(java.lang.Object object,"]},{"entry":[{},{},"java.lang.String linkName,"]},{"entry":[{},{},"java.lang.Object target)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0034","list-style":"none"},"li":["Invokes addLink(Object,String,String,Object) sending object.getclass( ) .getname( ) as the map name.","Parameters:","object \u2014the source object","linkName \u2014the name of the link that connects object to the target","target \u2014the target object","See Also:","addLink(Object,String,String,Object)\n\ndeleteAllLinks\n\npublic int deleteAllLinks(java.lang.Object object)\n","Invokes deleteAllLinks (Object, String, boolean) sending object.getClass( ) .getName( ) as the map name and true as the deleteroot flag.","Parameters:","object \u2014the object used as entry-point for navigating in the object graph","Returns:","the number of objects deleted","See Also:","deleteAllLinks(Object,String,boolean)\n\ndeleteAllLinks\n"]}},{"@attributes":{"id":"p-0082","num":"0230"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public int deleteAllLinks","(java.lang.Object obj,"]},{"entry":[{},{},"java.lang.String mapName,"]},{"entry":[{},{},"boolean deleteRoot)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0035","list-style":"none"},"li":["Deletes all objects linked to a given object, recusively, from the persistent data source. The object given as parameter will also be deleted if the deleteRoot flag is true. Note that only the objects to which deletion should cascade (according to the current model) will be deleted. In case a CocoBase Transaction is defined, the objects will be bound to be deleted instead. The deleted object will also be removed from object graph and both persistent and memory graph images will be synchronized to the persistent data source with respect to the deleted objects. Note that objects to be inserted will not be added to the persistent image so that a subsequent call to insertAllLinks( . . . ) or updateAllLinks( . . . ) will insert such objects.","If the class of the object given as parameter has a property (getter\/setter pair or public field) with a name that matches a given link name, the referred objects reachable by that link will recursively \u201cmerge\u201d into the object graph before the deletion phase takes place. Also, any \u201cspecial\u201d Vector or proxy fields that populate such object property will be notified to remove the deleted links.","Parameters:","obj \u2014the object used as entry-point for navigating in the object graph","mapName \u2014the map name corresponding to the class of obj","deleteRoot \u2014indicates if obj must be deleted","Returns:","the number of objects deleted","See Also:","insertAllLinks(Object,String,boolean), updateAllLinks(Object,String,boolean)","getAllLinkedTo"]}},{"@attributes":{"id":"p-0083","num":"0242"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["public java.lang.Object [ ] getAllLinkedTo","(java.lang.Object object,"]},{"entry":[{},"java.lang.String linkName)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0036","list-style":"none"},"li":["Invokes getAllLinkedTo(Object, String, String) sending object.getclass ) getName( ) as the map name.","Parameters:","object \u2014the source object","linkName \u2014the name of the link that connects object to the target linked objects","Returns:","the array containing the linked objects","See Also:","getAllLinkedTo(Object, String, String)\n\ngetConnection\n\npublic CocoDriverInterface getconnection ( )\n","Returns the CocoBase connection to a persistent data source associated to this Navigator.","Returns:","CocoDriverInterface the CocoBase connection","getDebugLevel","public static int getDebugLevel( )","Returns the current debug level. 0 means debug is not enabled.","Returns:","the debug level\n\ngetModel\n\npublic java.lang.String getModel( )\n","Returns the current model associated to this Navigator.","Returns:","the String representing the current model\n\ninsertAllLinks\n\npublic int insertAllLinks(java.lang.Object object)\n","Invokes insertAllLinks (Object, String, boolean) sending object. getClass ( ) .getName ( ) as the map name and true as the insertRoot flag.","Parameters:","object \u2014the object used as entry-point for navigating in the object graph","Returns:","the number of objects inserted","See Also:","insertAllLinks(Object,String,boolean)\n\ninsertAllLinks\n"]}},{"@attributes":{"id":"p-0084","num":"0269"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public int insertAllLinks","(java.lang.Object obj,"]},{"entry":[{},{},"java.lang.String mapName,"]},{"entry":[{},{},"boolean insertRoot)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0037","list-style":"none"},"li":["Inserts all objects linked to a given object, recusively, in the persistent data source. The object given as parameter will also be inserted if the insertRoot flag is true. Note that only the objects to which insertion should cascade (according to the current model) and that are not yet in the persistent graph image will be inserted. In case a CocoBase Transaction is defined, the objects will be bound to be inserted instead. After a successful invocation of this method, the persistent and memory graph images will be synchronized to the persistent data source with respect to the deleted objects. Note that objects to be deleted will not be included in the persistent image so that a subsequent call to deleteAllLinks( . . . ) or updateAllLinks ( . . . ) will delete such objects.","If the class of the object given as parameter has a property (getter\/setter pair or public field) with a name that matches a given link name, the referred objects reachable by that link will recursively \u201cmerge\u201d into the object graph before the insertion phase takes place.","Parameters:","cdi \u2014the CocoBase connection","obj \u2014the object used as entry-point for navigating in the object graph","mapName \u2014the map name corresponding to the class of obj","insertRoot \u2014indicates if obj must be inserted","Returns:","the number of objects inserted","See Also:","deleteAllLinks(Object,String,boolean), updateAllLinks(Object,String,boolean)","loadAllLinks","public java.lang.Object loadAllLinks(java.lang.Object object)","Invokes loadAllLinks (Object,String,boolean) sending object.getclass( ) .getName( ) as the map name and true as the bindobjects flag.","Parameters:","object \u2014the object used as entry-point for navigating in the object graph","Returns:","the modified instance of the object passed in","See Also:","loadAllLinks(Object,String,boolean)\n\nloadAllLinks\n"]}},{"@attributes":{"id":"p-0085","num":"0290"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["public java.lang.Object loadAllLinks","(java.lang.Object obj,"]},{"entry":[{},"java.lang.String mapName,"]},{"entry":[{},"boolean bindObjects)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0038","list-style":"none"},"li":"Loads all objects linked to a given object, recusively, from the persistent data source. Note that only the objects to which load should cascade (according to the current model) will be loaded. If a CocoBase transaction is defined and the flag bindObjects is true, the loaded objects will be bound to that transaction. All objects loaded will be add to both the memory and persistent graph images. The links followed will be marked as visited for the object being loaded and will not be followed again for the same object. Thus, any subsequent call to loadAllLinks( . . . ),loadLinks( . . . ) or loadLink( . . . ) for the object being loaded will have no effect on the visited links."}},"If the class of the object being loaded has a property (getter\/setter pair or public field) with a name that matches a given link name, that object property will be set with the object loaded through that link. Also, if such property is declared as a java. util. Vector or a LinkObj Proxy, a special \u201cdynamic\u201d proxy will be used to populate the property, so that it can not only be notified about changes in the link but also propagate such changes to other proxies monitoring that same link.\n\n",{"@attributes":{"id":"p-0087","num":"0302"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public java.lang.Object loadLink","(java.lang.Object object,"]},{"entry":[{},{},"java.lang.String linkName)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0040","list-style":"none"},"li":["Invokes loadLink(Object,String,String,boolean,boolean) sending object.getclass ( ) .getName( ) as the map name, true as the bindObjects flag and true as the forceLoad flag.","Parameters:","object \u2014the object of which the given link will be loaded","linkName \u2014the name of the link to be followed","Returns:","the modified instance of the object passed in","See Also:","loadAllLinks(Object,String,boolean), loadLinks(Object,String,boolean)\n\nloadLink\n"]}},{"@attributes":{"id":"p-0088","num":"0311"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public java.lang.Object loadLink","(java.lang.Object object,"]},{"entry":[{},{},"java.lang.String mapName,"]},{"entry":[{},{},"java.lang.String linkName)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"ul":{"@attributes":{"id":"ul0041","list-style":"none"},"li":["Parameters:","object \u2014the object of which the given link will be loaded","mapName \u2014the map name corresponding to the class of object","linkName \u2014the name of the link to be followed","Returns:","the modified instance of the object passed in","See Also:","loadAllLinks(Object,String,boolean), loadLinks(Object,String,boolean)\n\nloadLink\n"]}},{"@attributes":{"id":"p-0089","num":"0320"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public java.lang.Object loadLink","(java.lang.Object obj,"]},{"entry":[{},{},"java.lang.String mapName,"]},{"entry":[{},{},"java.lang.String linkName,"]},{"entry":[{},{},"boolean bindObjects,"]},{"entry":[{},{},"boolean forceLoad)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0042","list-style":"none"},"li":["Loads all objects linked to a given object through the specified link from the persistent data source. If forceLoad is false, the objects will be loaded only if load should cascade to those objects (according to the current model). However, forceLoad is true, the link will be followed regardless of the direction specified in the model. If a CocoBase transaction is defined and the flag bindObjects is true, the loaded objects will be bound to that transaction. All objects loaded will be add to both the memory and persistent graph images. The given link will be marked as visited for the object being loaded and will not be followed again for the same object. Thus, any subsequent call to loadAllLinks ( . . . ), loadLinks( . . . ) or loadLink( . . . ) for the object being loaded will have no effect on the given link.","If the class of the object given as parameter has a property (getter\/setter pair or public field) with a name that matches a given link name, that object property will be set with the object loaded through that link. Also, if such property is declared as a java. util. Vector or a LinkObjProxy, a special \u201cdynamic\u201d proxy will be used to populate the property, so that it can not only be notified about changes in the link but also propagate such changes to other proxies monitoring that same link.","Parameters:","obj \u2014the object of which the given link will be loaded","mapName \u2014the map name corresponding to the class of obj","linkName \u2014the name of the link to be followed","bindobjects \u2014indicates if the loaded objects will be bound to the current CocoBase transaction","forceLoad \u2014indicate if the link should be followed regardless of the direction specified in the model","Returns:","the modified instance of the object passed in","See Also:","loadAllLinks(Object,String,boolean), loadLinks(Object,String,boolean),LinkObjProxy\n\nloadLinks\n\npublic java.lang.Object loadLinks(java.lang.Object object)\n","Invokes loadLinks(Object,String,boolean) sending object.getclass ( ) .getName( ) as the map name and true as the bindObjects flag.","Parameters:","object \u2014the object of which links will be loaded","Returns:","the modified instance of the object passed in","See Also:","loadLinks(Object,String,boolean)\n\nloadLinks\n"]}},{"@attributes":{"id":"p-0090","num":"0340"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public java.lang.Object loadLinks","(java.lang.Object object,"]},{"entry":[{},{},"java.lang.String mapName)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0043","list-style":"none"},"li":["Invokes loadLinks (Object, String, boolean) sending true as the bindObjects flag.","Parameters:","object \u2014the object of which links will be loaded","mapName \u2014the map name corresponding to the class of object","Returns:","the modified instance of the object passed in","See Also:","loadLinks(Object,String,boolean)","loadLinks"]}},{"@attributes":{"id":"p-0091","num":"0350"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public java.lang.Object loadLinks","(java.lang.Object obj,"]},{"entry":[{},{},"java.lang.String mapName,"]},{"entry":[{},{},"boolean bindObjects)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0044","list-style":"none"},"li":["Loads all objects linked to a given object from the persistent data source. Note that only the objects to which load should cascade (according to the current model) will be loaded and that these objects will NOT be processed recursively. If a CocoBase transaction is defined and the flag bindObjects is true, the loaded objects will be bound to that transaction. All objects loaded will be add to both the memory and persistent graph images. The links followed will be marked as visited for the object being loaded and will not be followed again for the same object. Thus, any subsequent call to loadAllLinks ( . . . ), loadLinks( . . . ) or loadLink( . . . ) for the object being loaded will have no effect on the visited links.","If the class of the object given as parameter has a property (getter\/setter pair or public field) with a name that matches a given link name, that object property will be set with the object loaded through that link. Also, if such property is declared as a java. util. Vector or a LinkObj Proxy, a special \u201cdynamic\u201d proxy will be used to populate the property, so that it can not only be notified about changes in the link but also propagate such changes to other proxies monitoring that same link.","Parameters:","obj \u2014the object of which links will be loaded","mapName \u2014the map name corresponding to the class of obj","bindobjects \u2014indicates if the loaded objects will be bound to the current CocoBase transaction","Returns:","the modified instance of the object passed in","See Also:","loadAllLinks(Object,String,boolean), loadLink(Object,String,String,boolean,boolean),LinkObjProxy\n\nremoveLink\n"]}},{"@attributes":{"id":"p-0092","num":"0361"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void removeLink","(java.lang.Object object,"]},{"entry":[{},{},"java.lang.String linkName,"]},{"entry":[{},{},"java.lang.Object target)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0045","list-style":"none"},"li":["Invokes removeLink(Object,String,String,Object) sending object.getClass( ) getName( ) as the map name.","Parameters:","object \u2014the source object","linkName \u2014the name of the link that connects object to the target","target \u2014the target object","See Also:","removeLink (Object, String, String,Object)\n\nremoveLinks\n"]}},{"@attributes":{"id":"p-0093","num":"0369"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void removeLinks","(java.lang.Object obj,"]},{"entry":[{},{},"java.lang.String mapName)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0046","list-style":"none"},"li":["Removes an object from the object graph by removing all existing links to that object. Linked objects are not followed, that is, the removal of links is NOT a recusive procedure.","If the class of the object being unlinked has a property (getter\/setter pair or public field) with a name that matches the name of the link being removed, any \u201cspecial\u201d Vector fields that populate such object property will be notified to remove the unlinked objects.","Parameters:","obj \u2014Object the source object","mapName \u2014String the map name corresponding to the class of obj\n\nsetConnection\n","public void setConnection(CocoDriverInterface cdi)\n    \n    ","public static void setDebugLevel(int level)\n    \n    ","public void setModel(java.lang.String modelName)\n    \n    ","public int updateAllLinks(java.lang.Object object)\n    \n    "]}},{"@attributes":{"id":"p-0094","num":"0395"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public int updateAllLinks","(java.lang.Object obj,"]},{"entry":[{},{},"java.lang.String mapName,"]},{"entry":[{},{},"boolean updateRoot)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0051","list-style":"none"},"li":["Updates the persistent data source with all changes made to memory graph image that are not yet propagated to the persistent graph image. If the updateRoot flag is true, the object given as parameter will be inserted (if it is not in the persistent graph image) or updated (if it is already in the persistent graph image).","All current and removed links will be followed recursively and marked for deletion, update or insertion, depending on if the link being followed was removed or not from the memory graph image. Deletion has priority over insertion and updates, which means that, if an objects is supposed to be deleted through a link and updated through another, that object will be marked for deletion. Note that deletion will cascade through a given link only if the object being marked for deletion is supposed to do so according to the current model. The same holds for insertion and update. After a successful invocation of this method, both memory and persistent graph images are synchronized.","If the class of the object given as parameter has a property (getter\/setter pair or public field) with a name that matches a given link name, the referred objects reachable by that link will recursively \u201cmerge\u201d into the object graph before the update phase takes place.","Parameters:","obj \u2014the object used as entry-point for navigating in the object graph","mapName \u2014the map name corresponding to the class of obj","updateRoot \u2014indicates if obj must be inserted\/updated","Returns:","the total number of objects updated, deleted or inserted\n\nvisitAllLinks\n"]}},{"@attributes":{"id":"p-0095","num":"0405"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public int visitAllLinks","(java.lang.Object object,"]},{"entry":[{},{},"LinkVisitor visitor,"]},{"entry":[{},{},"boolean sync)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0052","list-style":"none"},"li":["Invokes visitAllLinks (Object,String,LinkVisitor,boolean) sending object.getclass ( ).getName( ) as the map name.","Parameters:","object \u2014the object used as entry-point for navigating in the object graph","visitor \u2014LinkVisitor the visitor object","sync \u2014boolean indicates if the memory image graph should be synchronized the persistent image in the end of the process","Returns:","int the number of objects visited","See Also:","visitAllLinks (Object,String,LinkVisitor,boolean)\n\nclear\n\npublic void clear ( )\n","Clears the memory and persistent graph images held by this Navigator and resets all information about loaded links. This method is provided as a facility to re-initialize an instance, instead of having to create a new one. Note that the CocoBase connection and model associated to this Navigator remains unchanged.\n\ngetInstance\n\npublic static Navigator getInstance(java.lang.String instanceId)\n","Returns a Navigator object registered in the internal static pool. This method is provided as a facility to manage shared Navigator instances. Note, however, that this class is not thread safe and any necessary synchronizations must be properly implemented externally.","Parameters:","instanceId \u2014the String that identifies the instance in the pool\n\ngetRegisteredIds\n\npublic static java.util.Enumeration getRegisteredIds( )\n","Returns an Enumeration object containing with all the ids of instances registered in the internal static pool. This method is provided as a facility to manage shared Navigator instances. Note, however, that this class is not thread safe and any necessary synchronizations must be properly implemented externally.\n\ngetTransaction\n\npublic Transaction getTransactions ( )\n","Returns the CocoBase transaction this Navigator should use to bind objects when updating the persistent data source.","Returns:","the CocoBase transaction; null if no transaction should be used","See Also:","setTransaction(thought.CocoBase.Transaction)\n\nregisterInstance\n"]}},{"@attributes":{"id":"p-0096","num":"0425"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public static void registerInstance","(java.lang.String instanceId,"]},{"entry":[{},{},"Navigator nav)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0053","list-style":"none"},"li":["Adds a Navigator object to the internal static pool. This method is provided as a facility to manage shared Navigator instances. Note, however, that this class is not thread safe and any necessary synchronizations must be properly implemented externally.","Parameters:","instanceId \u2014the String that identifies the instance in the pool","nav \u2014the Navigator instance to be registered\n\nremoveLinks\n\npublic void removeLinks(java.lang.Object obj)\n","Invokes removeLinks (Object, String) sending object.getclass( ) .getName( ) as the map name.","Parameters:","obj \u2014the source object","See Also:","removeLinks (Object, String)\n\nsetTransaction\n\npublic void setTransaction(Transaction transaction)\n","Sets the transaction to which objects should be bound by this Navigator when updating the persistent data source. If this method is never called, this Navigator will check if there is a global transaction currently defined and the default behavior is to bind objects to that transaction. The default behavior can be overriden by calling setProperties( . . . ).","Parameters:","transaction \u2014the CocoBase transaction","See Also:","setProperties(java.util.Properties)\n\nunregisterInstance\n\npublic static void unregisterInstance(java.lang.String instanceId)\n","Removes a Navigator object from the internal static pool. This method is provided as a facility to manage shared Navigator instances. Note, however, that is class is not thread safe and any necessary synchronizations must be properly implemented externally.","Parameters:","instanceId \u2014the String that identifies the instance in the pool\n\nfindObject\n"]}},{"@attributes":{"id":"p-0097","num":"0443"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public java.lang.Object findObject","(java.lang.Object object,"]},{"entry":[{},{},"java.lang.String mapName)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0054","list-style":"none"},"li":["Finds the object instance in the memory graph image of this Navigator that is equal to the given object. The method equals is used for comparison.","Parameters:","object \u2014the object to look for","Returns:","the object in this Navigator that is equal to the given object; null, if no instance is found\n\nsetProperties\n","public void setProperties(java.util.Properties properties)","Sets the properties that control the behavior of this Navigator. Currently supported properties are:","useCurrentTransaction =\u201ctrue\u201d (default) | \u201cfalse\u201d\u2014a String indicating that this Navigator will try to bind objects to the global Transaction currently defined (when updating the persistent data source) in case no other transaction was assigned using the setTransaction (Transaction) method.","alwaysCreateProxies =\u201ctrue\u201d | \u201cfalse\u201d (default) \u2014a String indicating that this Navigator will create link proxies for object properties (field or get\/set method pair) even when the property is already populated (i.e. is not null).","Parameters:","properties \u2014the properties to be assigned","See Also:","setTransaction(Transaction)"]}},"A CD ROM is incorporated herein by reference to provide a list of the Java source code. properties definition and script files (text of the files) that may be utilized as a representative example with CocoNavigate. The CD incorporated by Reference is entitled Example 2 (and including a duplicate) included on a single disk with a single file titled Example 2, and sized at 370 KB.","The present invention may be embodied in specific forms other than those particularly described above or illustrated by the appended drawings. Upon viewing the present application preferred embodiments and other descriptions herein of the present invention, variations and other implementations that do not depart from the spirit and scope of the present invention will be apparent to one of routine skill in this field. Such variations and other implementations are considered part of the present invention and within the scope of the appended claims. Accordingly, reference should be made to the appended claims, rather than to the forgoing specification and drawings, as indicating the scope of the present invention."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DEFINITIONS","SUMMARY OF THE INVENTION","DISCRIPTION THE INVENTION","EXAMPLE 1","EXAMPLE","EXAMPLE 2","Company Example"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For the non-limiting purpose of illustrating some of the concepts of complex data objects CDOs, i.e., data objects and their relationships to one another, according to the invention, two CDO graph drawings FIG.  and  are provided.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 1","FIG. 1"],"b":["1","5","10","15","25","35","20","30","40","20","45","55","50","60","30","30","65","70","40","75","85","80","90"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["100","650","700","150","250","350","200","300","400","200","300","400","425","450","550","575","500","600","500","200","300","600","300","400"]}]},"DETDESC":[{},{}]}
