---
title: Computing of a resulting closed triangulated polyhedral surface from a first and a second modeled objects
abstract: The invention is directed to a computer-implemented process, in a computer-aided geometric design system, for computing a resulting closed triangulated polyhedral surface from a first and a second modeled objects. The first modeled object is modeled by a first closed triangulated polyhedral surface and the second modeled object is modeled by a second closed triangulated polyhedral surface. The process according to the invention comprises:


url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08854367&OS=08854367&RS=08854367
owner: Dassault Systemes
number: 08854367
owner_city: Velizy Villacoublay
owner_country: FR
publication_date: 20110519
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATION(S)","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE EMBODIMENTS"],"p":["This application claims priority under 35 U.S.C. \u00a7119 or 365 to European Application No. 10305555.4, filed May 25, 2010. The entire teachings of the above application(s) are incorporated herein by reference.","The invention relates to the field of computers programs and systems, and more specifically to the field of computer-aided geometric design (CAGD) and simulation of three-dimensional polyhedral solids.","Computer-aided techniques are known to include Computer-Aided Geometric Design or CAGD, which relates to software solutions for representing objects in forms suitable for computer computations in CAD and CAM systems. Computer-aided design (or CAD) relates to software solutions for authoring product design. Similarly, CAE is an acronym for Computer-Aided Engineering, e.g. it relates to software solutions for simulating the physical behavior of a future product. CAM stands for Computer-Aided Manufacturing and typically includes software solutions for defining manufacturing processes and operations.","A number of systems and programs are offered on the market for the design of parts, assemblies of parts and products thereof, such as the one provided by Dassault Systemes under the trademark CATIA (Computer Aided Three Dimensional Interactive Application). CATIA is a multi-platform CAGD\/CAD\/CAM\/CAE software suite, commonly referred to as a 3D Product Lifecycle Management (PLM) software suite. It supports multiple stages of product development (CAx), ranging from conceptualization of objects shapes (CAGD), through design (CAD) and manufacturing (CAM), until analysis (CAE). This software suite is customizable via application programming interfaces (API). Some versions can be adapted in various programming languages, under dedicated APIs.","These so-called CAGD\/CAD systems notably allow a user to construct and manipulate complex three dimensional (3D) models of objects or assemblies of objects. CAD systems thus provide a representation of modeled objects using edges or lines, in certain cases with faces. These CAD systems manage parts or assemblies of parts as modeled objects, which are mainly specifications of geometry. In particular, CAD files contain specifications, from which geometry is generated. From geometry, a representation is generated. Specifications, geometry and representation may be stored in a single CAD file or multiple ones. CAD systems include graphic tools for representing the modeled objects to the designers; these tools are dedicated to the display of complex objects\u2014the typical size of a file representing an object in a CAD system extending up to the range of a Mega-byte for part, and an assembly may comprise thousands of parts. A CAD system manages models of objects, which are stored in electronic files.","Designing a mechanical part with a known CAGD\/CAD system can be seen as defining the geometrical shape and dimensions of said part so as to fit functional and manufacturing requirements. Mainly, the resulting shape is a combination of basic features such as pad, pocket, groove, shaft etc. created by the designer. Through complex geometrical and topological computations, the CAGD\/CAD system yields the boundary representation of the solid (mechanical part) as e.g. a closed and oriented surface.","One knows the concept of swept volumes, e.g. in the field of geometric design (CAGD), machining simulation, robotics, or digital mockup. Given a solid, called \u201cprofile\u201d in the following, and a trajectory thereof, we call the swept volume the union of all positions of the profile along the said trajectory. The representation of swept volumes can be used to design shapes, simulate the process of material removal or addition, detect collisions and compute clearance in moving parts and mechanisms. For instance the calculation of a swept volume is useful to determine the required space of a vehicle motor that is vibrating during its functioning. Also, the calculation of a swept volume is useful to determine the required space of a wheel of a vehicle while said wheel turns left and right and moves up and down thanks to shock absorbers. Also, the swept volume is useful to determine the required space of a manufacturing tool.","Computation of so-called swept volumes has been presented in the European Patent Application No. 08291047.2 of Nov. 7, 2008.","Polyhedral modeling and processing is ubiquitous in the context of CAGD. Indeed performing robust and accurate Boolean operations (e.g. union, intersection, subtraction) on polyhedral solids is an essential requirement in this context. Industrial implementation of such operators makes use of floating point representations or integer representations of coordinates together with so called epsilon-programming heuristics.","Roughly speaking, epsilon-programming is to replace equality tests x=y by \u201cup to epsilon\u201d equality tests |x\u2212y|\u2266\u03b5, where \u03b5 is the traditional numerical threshold notation. Details can be found in \u201cRobustness and Randomness\u201d, D. Michelucci, J. M. Moreau, S. Foufou\u2014Lecture Notes In Computer Science, 2008, Springer.","From a theoretical point of view, usual geometric modeling and processing based on the floating point paradigm lack rigorous and scientific foundation. In practice, developing a robust Boolean operator based on floating point framework is difficult, costly and is more an art than a science. Indeed, the floating point rounding errors may induce combinatorial inconsistencies, e.g. topological inconsistencies.","The epsilon-programming paradigm allows overcoming these inconsistencies but, the techniques based on the epsilon-programming are not supported by a sound theoretical framework: indeed, they require case by case expertises which make the achievement of complete robustness a never ending task.","Alternatively recent implementations use the exact computation paradigm based on the exact predicates technology, as detailed in \u201cRobustness in geometric computations\u201d, C. M. Hoffmann, Journal of Computing and Information Science in Engineering, 1:143, 2001, \u201cRobust geometric computation\u201d, C. K. Yap, Handbook of discrete and computational geometry, pages 653-668, 1997, and \u201cEfficient Delaunay triangulation using rational arithmetic\u201d, M. Karasick, D. Lieber, and L. R. Nackman, ACM Transactions on Graphics (TOG), 10(1):71-91, 1991.","In the exact computation paradigm, when some geometry has to be constructed, one has to use rational or algebraic numbers representations in the result which leads to time and space consuming algorithms. As, in real life CAGD applications, the input of a geometric processing algorithm is generally the output of a previous one, a pure exact computation approach is not possible since it would produce an exponential growth of the number representations.","It is therefore necessary to \u201cround\u201d the coordinates of the output from rational to floating point numbers. Unfortunately, such a rounding procedure is not safe in general. Indeed, this rounding may create local self-intersections, as illustrated on . The polygon  is a valid one because there is no self-intersection. The background grid represents the rounded numerical values. Rounding is to replace each vertex of the initial polygon by its closest point of the grid. The dotted polygon  is the rounding result of the black polygon, and this polygon  is invalid because of a self intersection .","Such a self-intersection invalidates the result because no self intersection is allowed. Moreover, a self-intersection is likely to make further algorithms fail.","The natural relationship between conventional polyhedral representations of solids with polyhedral chains have been highlighted in the two following papers: \u201cConvex polyhedral chains: a representation for geometric data\u201d, O. Gunther and E. Wong, Computer Aided design, volume 21 number 3 April 1989 and \u201cGeometric modelling Based on simplicial chains\u201d, F. R. Feito and M. Rivero, Comput. & Graphics, Vol. 22, No. 5, pp. 611-619, 1998.","In the first paper, the authors suggest to represent the solid through a kind of CSG (constructive solid geometry). The chains are expressed as linear combinations of polytopes, each polytope being represented by its associated finite family of half-spaces. Implementing modeling operators such as Boolean operations on this representation does not require the construction of any explicit vertex, since the robustness of the approach consists precisely on avoiding vertex based representations.","The second paper shows simple relationships between Boolean operators and algebraic operations on the corresponding chains and in particular on a representation called \u201cnormal chain\u201d, where a chain is expressed as linear combinations of oriented simplices sharing all the origin as one of their vertices. For example, the intersection of two solids, represented by chains formal sum of respectively n and m tetrahedra, consists in a formal sum of n*m triangulation of the intersection of the corresponding n*m pairs of tetrahedra.","Both papers highlight the natural relationship between conventional polyhedral representations of solids with polyhedral chains. However, these papers rely on Boolean operations which are not generalized Boolean operators.","In fact, all CAGD systems implement Boolean operations through the same structure. Details of the algorithm may change from a CAGD system to another, but the main steps are the same. The inputs of the Boolean operation are two solids A and B defined by their valid boundary representation. Valid boundary representation means that the boundary of the solid is a closed surface with no self-intersection. Standard Boolean operations are union, intersection and subtraction, which are in general noted \u222a, \u2229 and \u2212.","Traditional algorithms strongly rely on the hypothesis that the input solids are valid, and provides a valid solid. In other words, the boundary solids A and B do not have any self intersection. The steps of a tradition algorithm are the following, in relations with :","1. Input two solids A and B defined by their valid boundary representation ();","2. Trim the boundary of solid A with the boundary of solid B, and inversely ().","3. Position each portion of the boundary of solid A with respect to solid B. Portions of boundary of solid A are inside or outside solid B ().","4. Position each portion of the boundary of solid B with respect to solid A. Portions of boundary of solid B are inside or outside solid A ().","5. Depending on the Boolean operation type, discard the useless portions of boundary:\n\n","6. Synthesize the resulting solid by merging the portions of boundary provided by previous step ().","To summarize the above analysis, the prior art shows too much sensitivity with respect to rounding errors because usual polyhedral representations depend on numerical values. Indeed, a state of the art polyhedron may produce self-intersections, thus making the result inconsistent according to the state of the art validity criterion. Consequently, there is a lack of robustness of the solutions of the prior art as their validity may be affected.","Accordingly, there remains a need for a robust and generalized Boolean operators and an accurate method of computing a boundary of a modeled object thanks to these robust and generalized Boolean operators.","According to a first aspect, the invention is embodied as a computer-implemented process, in a computer-aided geometric design system, for computing a resulting closed triangulated polyhedral surface from a first and a second modeled objects, the first modeled object being modeled by a first closed triangulated polyhedral surface and the second modeled object being modeled by a second closed triangulated polyhedral surface, the process comprising:\n\n","In embodiments, the process may comprise on or more of the following features:\n\n","According to another aspect, the invention is embodied as a computer program, stored on a computer readable medium, for computing a resulting closed triangulated polyhedral surface from a first and a second modeled objects, the first modeled object being modeled by a first closed triangulated polyhedral surface and the second modeled object being modeled by a second closed triangulated polyhedral surface, the computer program comprising code means for causing a computer to take the steps of the process.","According to another aspect, the invention is embodied as an apparatus for computing a resulting closed triangulated polyhedral surface from a first and a second modeled objects, the first modeled object being modeled by a first closed triangulated polyhedral surface and the second modeled object being modeled by a second closed triangulated polyhedral surface, the apparatus comprising means for implementing the steps of the process.","The teachings of all patents, published applications and references cited herein are incorporated by reference in their entirety.","The invention is directed to a computer-implemented process, in a computer-aided geometric design system, for computing a resulting closed triangulated polyhedral surface from a first and a second modeled object. The first modeled object is modeled by a first closed triangulated polyhedral surface and the second modeled object is modeled by a second closed triangulated polyhedral surface. The process comprises a step of computing intersections between triangles of the first modeled object and triangles of the second modeled object. Next, triangles of the first and second modeled objects are split into polygonal facets adjacent to said intersections. Then, two couples of winding numbers (noted p and q) are computed for each triangle and each polygonal facet. The first winding number of each couple of winding numbers is computed from the first closed triangulated polyhedral surface and the second winding number of each couple of winding numbers is computed from the second closed triangulated polyhedral surface. Then, a coefficient (noted k) is computed for each triangle and each polygonal facet. This coefficient is computed with a function \u03c6 which has as inputs the two couples of winding numbers (noted p and q) of each triangle and each polygonal facet. Next, triangles and polygonal facets are selected according to the computed coefficients. The polygonal facets are triangulated, and the resulting closed triangulated polyhedral surface is obtained with the selected triangles and the triangulated selected polygonal facets.","Advantageously, the invention provides a general, efficient and robust method suited to compute quickly and accurately a Boolean operation between a first and a second modeled objects that are modeled by a closed triangulated polyhedral surface and represented as a polyhedral cycle such as for example a simplicial 2-cycle. Operands validity checking is faster as it is no more necessary to verify whether the first and\/or the second modeled objects have self-intersections. Accordingly, the unique criterion to check is the watertightness of the first and the second modeled objects. Moreover, if this criterion of watertightness is respected, the invention can therefore guaranty a quality of the result. In other terms, successive operation on the first and\/or the second modeled objects can be performed without introducing a failure. The robustness is thus increased as several operations can be successively performed. Furthermore, the operations are generalized thanks to the concept of inner and outer space obtained via the computating of couples of winding numbers, e.g. by keeping only positive winding numbers.","A simplicial complex is a topological space constructed by \u201cgluing together\u201d points, line segments, triangles, and more generally, their p-dimensional equivalents. One of the advantages of using simplicial complexes is that their properties can be generalized for any dimension m. Simplicial complexes make it possible to compute a boundary of a modeled object thanks to simple mathematic operations, what requires less resources than other methods described in the European Patent Application No. 08291047.2 of Nov. 7, 2008 on pages 2 to 5. In particular, a simplicial complex provides a closed and topologically consistent polyhedral representation. Though this representation may intersect itself, it is combinatorial watertight. In particular, if a small perturbation or a floating point rounding is applied to the output, it remains valid (topologically correct and watertight), hence providing robustness.","A simplicial 2-chain is a particular case of a simplicial complex. A simplicial 2-chain in the three-dimensional Euclidean space is defined by a finite set of vertices given by their coordinates in 3D space together with a set of triangles. Each triangle is defined by an ordered triple of indexes of vertices and an integer number defining its multiplicity. The operation consisting of simultaneously changing the sign of the multiplicity of a triangle and the order of the triple defining it does not change the chain. A simplicial 2-cycle is a simplicial 2-chain satisfying the zero boundary condition defined below.","Advantageously, the invention provides robustness compared to the prior art because the validity criterion of a simplicial 2-cycle representing a solid is purely combinatorial: unlike usual polyhedral representation it does not depend on numerical values.","In particular, the proposed generalized Boolean operator is numerical rounding resistant and the rounding of coordinates does not affect the validity of an operand. For example, applying a rotation, using floating point arithmetic, on the vertices of an operand maintains the combinatorial structure and so does not affect its validity. Conversely, applying the same rotation (a very usual operation indeed) to a state of the art polyhedron may produce self-intersections, thus making the result inconsistent according to the state of the art validity criterion (as discussed above in reference to ).","In other words, the invention is a generalized Boolean operator, applying on representations of solids by simplicial 2-cycles whose vertices coordinates use fixed length number representations such as integers or floating points. Roughly speaking, a simplicial 2-cycle is a closed triangulated polyhedral surface that may feature self intersections.","Referring now to , given a simplicial 2-cycle noted C, the support |C| of C is defined as the union of all the triangles of the simplicial 2-cycle C. The support |C| is a therefore a subset of the 3D space R. In , |C| is the support of C that features two self intersections  and .","It is defined the \u201csupport\u201d of a \u201cpolyhedral cycle\u201d (e.g. simplicial 2-cycle noted C) which is the union of all triangles of the polyhedral cycle. The connected components of the complement of the support of the polyhedral cycle \u25a1 in 3D space are called 3D cells. Only one 3D cell is not bounded and is called the \u201couter cell\u201d.","Referring now to , the 3D complement of |C|, noted R\u2212|C|, includes at least two connected components. The grey area represents the connected components of the complement of |C|. There are four connected components , , , and . Beyond the four components, the \u201coutside\u201d  is unbounded.","To each point of the complement of |C| is associated a well defined integer number called the winding number, as illustrated on . The winding number is a constant number over each connected component of the complement of |C| , , and , and any winding number is not defined on |C|.","Given a polyhedral cycle such as the simplicial 2-cycle noted C, recall that each triangle of C is oriented by the ordering of its three vertices and this ordering defines a normal vector. Furthermore, each triangle of C has an integer multiplicity. Given a point X in 3-space which does not belong to any triangle from C, the winding number of X with respect to C is an integer number W defined as follows.","For the sake of explanation, one reminds that a polyhedral-cycle (e.g. a simplicial 2-cycle) respects a condition called zero boundary condition. When a polyhedral-cycle meets the zero boundary condition, the watertight property is conferred to polyhedral-cycle. Indeed, a polyhedral-cycle is a set of oriented simplices with a signed integer, called multiplicity, assigned to each simplex. For instance, the multiplicity of an edge is the number of multiple edges sharing the same end vertices.","Consider an oriented half line \u0394 starting at X and intersecting no edge from C\u25a1, as represented on . Such a half line \u0394 always exists. Call \u03b4 the unit vector defining the direction of \u0394 pointing from X toward infinity. When \u0394 intersects a triangle T from C, we say that \u0394 crosses T forward if the dot product of \u03b4 with the normal \u03b7of T is positive and backward if it is negative. It cannot be zero, as this would imply that \u0394 intersects at least one edge from C.","One initializes the integer W with the value W=0. Each time \u0394 crosses a triangle T from C with multiplicity \u03bc, increment W of \u03bcif \u0394 crosses T forward and decrement W of \u03bcif \u0394 crosses T backward. This may be noted W:=W+sign(n\u00b7\u03b4)\u03bc.","The resulting number W(X,C) is called the winding number (some time also called 3D winding number) of the given point a point X in 3-space with respect to C. It does not depend on half-line A and it is constant in any 3D cell, meaning that W(X,C) has the same value for all points X within the same 3D cell. In particular, W(X,C)=0 for all points X within the outer cell.","The invention makes use of the winding number concept. The two-dimensional version of the concept of winding number is well documented in prior art. The three-dimensional winding number is also documented in prior art as an application of the mathematical \u201ctopological degree\u201d, see for example chapters 4 and 5 of John Willard Milnor's book \u201cTopology from the differentiable point of view\u201d, Princeton University Press; Revised edition (Nov. 24, 1997), ISBN-13: 978-0691048338. In the rest of the description, the terms winding number and three-dimensional winding number will be indifferently used.",{"@attributes":{"id":"p-0068","num":"0090"},"figref":"FIG. 10"},"As a result of the winding number computation, a simplicial 2-cycle C defines a solid in the following manner: the solid is the closure of the set of points with positive winding number, as illustrated on . The set of such simplicial 2-cycles includes the set of oriented boundary of usual polyhedrons whose vertices have floating point coordinates. However, unlike classical polyhedron boundaries, simplicial 2-cycles are allowed to self intersect in general.","Before moving further, some definitions are necessary to generalize the familiar concepts of \u201cinside\u201d, \u201coutside\u201d and Boolean operations.","A simplicial 2-cycle A is represented on , and a two simplicial 2-cycle B on . Three-dimensional objects are discussed in  and -, but, for simplicity, only two dimensional objects are illustrated. Incidentally,  respectively show three-dimensional representations of the objects represented on , , and . A is a rectangle and B is a double triangle. A and B are represented independently together with their respective orientation and winding numbers. A is regular and represent the boundary of a regular solid. B has a self intersection and is therefore regular according to prior art validity criterion of solids, as discussed previously.","One notes w: R\u2212|A|\u2192Z and w: R\u2212|B|\u2192Z their respective winding number functions. Let \u03c6: Z\u00d7Z\u2192Z be a function that computes an integer number given two integer numbers. Let us define the function \u03c8: D\u2192Z by composing function \u03c6 and winding numbers, \u03c8(x)=\u03c6(w(x),w(x)), where D=R\u2212(|A|\u222a|B|) is the 3D domain where both wand ware well defined. Clearly, function \u03c8 is constant over each connected component of D=R\u2212(|A|\u222a|B|). Function \u03c8 is said to be locally constant in the neighbourhood of point x\u03b5|A|\u222a|B| if there exist a real number \u03b5>0 such that for all 0<\u03b5\u2266\u03b5, the restriction of \u03c8 to the \u03b5-radius open ball centered at x, noted O(x,\u03b5), is a single valued function. In other words, function \u03c8 has the same constant value on \u201ceach side\u201d of x\u03b5|A|\u222a|B|.","Then, by definition, the boundary \u03b4\u03c8 of function \u03c8 is the set of points x\u03b5|A|\u222a|B| where \u03c8 is not locally single valued. This defines a geometrical locus of the resulting simplicial 2-cycle. Let x\u03b5\u03b4\u03c8 be a point where \u03c8 is locally two valued. Let \u03c8 and \u03c8 be these two values where \u03c8 (respectively \u03c8) is the value on the positive side of \u03b4\u03c8 (respectively the opposite side of \u03b4\u03c8) according to the orientation resulting from initial operands. Then, the difference \u03c8\u2212\u03c8 defines a signed multiplicity at point x. Consequently, a multiplicity for all triangles of \u03b4\u03c8 is set.","Consequently, defining a generalized Boolean operation between two simplicial 2-cycles A and B is to define the function \u03c6. The resulting simplical 2-cycle is then \u03b4\u03c8, associated with triangles multiplicities.","Referring now to , the two simplicial 2-cycles A and B are represented in position for an operation, e.g. computing the union of A and B, together with a couples of values (w, w) over each connected components of D=R\u2212(|A|\u222a|B|). The first number of the couple of value is computed from the simplicial 2-cycle A and the second winding number of each couple of winding numbers is computed from the simplicial 2-cycle B. On , the couples of values (w, w) are replaced by the results through a function \u03c6, which is, in the example, defined as the product \u03c6(w, w)=ww.","On , the dotted lines represent the portions of |A|\u222a|B| where function \u03c8(x)=w(x)w(x) is locally single valued, meaning that |A|\u222a|B| locally separates two regions where \u03c8 has the same value.","On , the drawing represents the result of the operation performed on the two simplicial 2-cycles A and B: a new cycle is obtained by retaining the portions of |A|\u222a|B| where function \u03c8 is not locally single valued. According to the initial orientations and to the values of function \u03c8, the multiplicity of the upper triangle edges is 0\u2212(\u22121)=1 for edges inherited from operand B and \u22121\u22120=\u22121 for edges inherited from operand A. Multiplicity of the lower triangle edges is 1\u22120=1.","Therefore, given two simplicial 2-cycles A and B and given a function \u03c6, the process according to the invention computes the resulting simplical 2-cycle defined by \u03b4\u03c8. One understands that the following functions \u03c6 redefine usual Boolean operations on regular solids: the union of two solids is defined by the function \u03c6(p,q)=min(1, p+q), the intersection by the function \u03c6(p,q)=pq, and the subtraction by the function \u03c6(p,q)=max(0, p\u2212q).","Moreover, a boolean operator may simplify the result obtained by applying an edge collapse procedure driven by some chordal error criterion. For example, edges whose length is of the same order of magnitude than the perturbation induced by the rounding of the coordinates may be collapsed without significant loss of geometric information. Advantageously, even if the operation on the two simplicial 2-cycles A and B is likely to induce self-intersections of the boundary, the result is not invalidated as the simplicial 2-cycle resulting from the process of the invention is a closed triangulated polyhedral surface that may feature self intersections.","Referring now to , an embodiment of the process according to the invention is described.","At steps S and S, a first modeled object being modeled by a first closed triangulated polyhedral surface and a second modeled object being modeled by a second closed triangulated polyhedral surface are input. Typically, the first and the second modeled objects are simplical 2-cycles. If required, signed integers can be associated to triangles of the first and second closed triangulated polyhedral surfaces in order to capture orientation inversion and\/or multiplicity.","At steps S, a function \u03c6: Z\u00d7Z\u2192Z is selected. The selection of a function \u03c6 allows selecting an operation to perform between the first and second modeled objects. In general, the function \u03c6 redefines usual Boolean operations such as the union, the intersection, and the subtraction of two solids. Any function \u03c6 can be defined, depending on the purpose of the application using the invention. For example, when dealing with self-intersected objects (resulting from a spatial sweeping), a definition of function \u03c6 can decide that the spatial region of interest is where the winding number is positive, while another definition of function \u03c6 may decide that the spatial region of interest is where the winding number is non-zero. Beyond redefining usual Boolean operations, unrestricted definition of the function \u03c6 is a design flexibility provided by the invention.","In practice, the function \u03c6 is selected by the user during a design session. A function \u03c6 may also be selected by default by the CAGD system.","Then, at step S, intersections between triangles of the first modeled object and triangles of the second modeled object are computed. An intersection is a point, an edge or a polygon where two triangles meet. Thus the step S consists in finding all the intersections of triangles which does not consist in a common edge or vertex of triangles of the first or second modeled object.","Several methods may be used for computing the intersections: for example, using standard floating point arithmetic together with epsilon-programming. In practice, the computing of the intersections is performed by using exact arithmetic. Exact arithmetic does not make use of rounding and truncating when performing numerical computations. The exact arithmetic approach is used for making numerically robust geometric algorithms. Advantageously, exact arithmetic enables to obtain correct topological structures of objects which are therefore free from inconsistency.","Moreover, as seen previously, a simplicial 2-cycle is a closed triangulated polyhedral surface that may feature self intersections. In practice, the first and\/or the second modeled objects may comprise a self intersection, and therefore, the computing of the intersections between triangles further comprises computing intersections between triangles of the first modeled object and\/or between triangles of second modeled objects.","Referring to now , two simplicial 2-cycle A and B have been input. The first object A is the rectangle depicted in , and the second object B is the double triangle comprising a self-intersection depicted in . One reminds that the objects A and B are three-dimensional objects, as illustrated on ; but for simplicity, two dimensional objects are used in drawings -. In practice, the user inputs the two objects as known in the art. Moreover, the objects A and B have been positioned each other so that the object B is over the object A. Typically, this is also performed by the user.","On , intersections points , , , and  between objects A and B are represented. Moreover, the self-intersection point  of the object B is also represented. One reminds that, for the sake of simplicity, the representations of the objects A and B are 2D representations in  and that the intersections which are computed between triangles of the 3D objects A and B are edges or vertices. The computing of the intersections is performed as known in the art, e.g. by using exact arithmetic.","Referring back to , at step S, the triangles of the first and second modeled objects are split into polygonal facets adjacent to said computed intersections. This amounts to say that the first and second modeled objects A and B are subdivided according to the intersections computed at the step S.","For instance, on , the computed intersections points between the objects A and B subdivide the objects A into four adjacent portions (2, 10, 4, 5) and the object B is divided into six adjacent portions (1, 7, 9, 3, 8, 6).","Next, at step S, at least one region is computed. A region comprises a set of triangles and\/or polygonal facets which are adjacent to each other and which are delimited by one of the computed intersections. In other terms, a region is a part of the boundary of the first and second modeled objects A and B along the computed intersections. This amounts to say that a set of triangles and\/or polygonal facets adjacent to vertices or edges on which the first and second modeled objects A and B meet or self-intersect, form a region.","In practice, an overlay of an arrangement of the computed intersections that splits each triangle into polygonal facets is built. Building the overlay amounts to combining the computed intersections, as known in the art. At this stage, each triangle of the initial objects A and B is subdivided into polygonal facets such that a new representation defining mathematically the same polyhedral cycles of objects A and B is obtained. Advantageously, the supporting complex of the polyhedral cycle is embedded in the ambient three-dimensional space. In other words, any intersecting pair of polygonal facet or edges of the new cycles intersects along a common edge or vertex. This construction is done \u201cexactly\u201d, which advantageously implies that vertices resulting from the intersection of an edge and a triangle or of three triangles have rational coordinates. The construction of the new representation is managed symbolically, which implies that in most cases, these rational coordinates are not computed explicitly. Advantageously, resources of the CAGD system are preserved (e.g. CPU, memory, . . . ) as these rational coordinates do not need to be computed.","Non generic situations may occur and they are solved as known in the art. For instance, triangles may overlap, several edges intersecting a triangle at the same point or more than three triangles meeting in a single point may happen. Among these non-generic situations, there is the particular situation in which an overlapping triangle produces new polygonal facet. In such a case, the new computed coefficient k (discussed at step S) is the sum of the respective coefficients k of the two overlapping triangles.","Next, at step S, two couples of winding numbers (that is, 3D winding number) p and q are computed for each triangle and each polygonal facet. A winding number (or 3D winding number) of a three-dimensional object provides a generalization of the concept of inner and outer space of a polygonal-cycle. For each couple of winding numbers, the first winding number is computed from the first closed triangulated polyhedral surface and the second winding number is computed from the second closed triangulated polyhedral surface. At least one ray-tracing is performed on a triangle at this step. Advantageously, for a complete robustness, this step requires both exact arithmetic and \u201csimulation of simplicity\u201d. The \u201csimulation of simplicity\u201d is a technique to cope with degenerate cases in geometric algorithms, as taught for instance in the document \u201csimulation of simplicity\u201d, H. Edelsbrunner, E P. M\u00fccke\u2014ACM Transactions on Graphics (TOG), Volume 9, Issue 1, January 1990, pages: 66-104, ISSN:0730-0301.","In practice, the first and the second couple of winding numbers are respectively computed for each side of a triangle and a polygonal facet. The first side of a polygonal facet (the same applies for a triangle) is called below, and the second side is called above. The notion of below and above of a polygonal facet relies on an arbitrary convention based on a normal vector of each polygonal facet. Indeed, one recalls that each triangle of a polyhedral cycle (e.g. a simplicial 2-cycle) is oriented by the ordering of its three vertices, the ordering of the three vertice being an arbitrary choice. And this ordering defines a normal vector.","For instance on , a set of triangle having a common edge E is displayed. Each triangle has its own normal vector, as depicted. The triangle  is oriented, and based on this orientation, a normal vector is defined and indicates the \u201cabove\u201d of the triangle.","Hence, the first couple of winding numbers, noted C, is below said triangle and polygonal facet according to a normal vector of said triangle and polygonal facet. Inversely, the second couple of winding numbers, noted C, is above said triangle and polygonal facet according to the normal vector of said triangle and polygonal facet.","Referring to , couples of values (w, w) of winding numbers of the first and second modeled objects A and B are depicted. The portion  of the object B has two couples of winding numbers. The first couple of the portion  is noted C=(0,0) and the second one is noted C=(0, \u22121). In this example, the normal vector of the portion  (represented on ) involves that the couple (0,\u22121) is arbitrary considered as being above the portion . Other portions of objects A and B are discussed in the table below.","In practice, one associates to each region computed at the step (S) two couples of (3D) winding numbers. The first couple of winding numbers is C=(w, w) immediately below (the normal vector of) the computed region and the second couple of winding numbers is C=(w, w) immediately above (the normal vector of) region. The two couples C=(w, w) and C=(w, w) associated to each computed region are the two couples of winding numbers computed for a polygonal facet (or a triangle) which belongs to the region. Then, the couples of (3D) winding numbers Cand Care propagated to adjacent regions and triangles. The term propagation means that a first couple Cand a second couple Cspread into new computed polygonal facets and or triangles. In other terms, a dedicated algorithm is used for computing the couples of (3D) winding numbers of the other polygonal facets of the region. This algorithm thus relies on the computed regions in order to perform the computing of the couples of winding numbers of the polygonal facets that belong to the region. This algorithm is detailed now.","The algorithm starts with the computation of Cand Cof a polygonal facet (or triangle) which belongs to a first computed region. The choice of a polygonal facet is arbitrary and does not influence the output of this algorithm. Then the values of these two couples of winding numbers Cand Care computed (one could also say that they are propagated) to adjacent polygons facet. At this stage, adjacent polygons facet may be another computed region or a triangle. One recalls that by definition, two polygons are adjacent if they share at least one edge. In addition, and still by definition, an edge shared by exactly two polygons is a manifold edge, as represented on . Also by definition, an edge shared by three polygons or more is a non-manifold edge. On , a non-manifold edge is drawn with four incident polygons.","Now, and in reference to , the computing (or propagation) of the couples of winding numbers Cand Cof adjacent facets is detailed.","In , let E be a non-manifold edge, shared by four polygons. This edge is a computed intersection between the first and second modeled objects A and B: the two horizontal polygons  and  belong to the first modeled object A, and the two perpendicular polygons  and  belong to the second modeled object B. Incidentally, on can notice that each polygon is equipped with a normal vector according to its geometry and orientation, as discussed previously.","In reference now to : let suppose that two couples of winding numbers Cand Care known for one adjacent polygon, e.g. couples of winding numbers C=(w, w) and C=(w, w) of the polygon . The polygons are sorted in a radial order around the edge E. The radial order may be chosen according to a rotation around the edge E. For instance, starting from the polygon  and a counter-clockwise rotation , the radial order of the polygons adjacent to the edge E is , , , and .","Then, starting from a given triangle or a given polygonal facet, a rotation is performed according to the radial order around the computed intersection. This amounts to say that, starting from the polygon , the polygons , , and  are successively crossed.","Next, the crossings of the other triangles and\/or polygonal facets adjacent to the computed intersection are detected. After each crossing detecting, the two couples of winding numbers are updated. The update is performed according to the orientation of the normal vector of the crossed triangle and\/or polygonal facet.","The update may be carried out based on the three following rules:\n\n",{"@attributes":{"id":"p-0107","num":"0132"},"figref":"FIG. 27","sub":["above","A","B","above","A","B","B ","B","above","A","B","above","A","B","above","A","B"],"b":["260","266","266","266","262","262","264","264"]},"Consequently, since the winding numbers variations are known, it is easy to update the couples of winding number Cand Cof all computed regions adjacent to a manifold or a non-manifold computed intersection. One understands that an advantage of this algorithm is that the number of computing of winding number is decreased. This is particularly advantageous as resources of the system are preserved, and the computation time is highly reduced.","The computation of the couples of winding numbers may also be performed on extended regions. An extended region does not comprise the sets of triangles and\/or polygonal facets adjacent of a region. An extended region is comprised of the set of adjacent triangles of a first modeled object which are neither in contact with polygons of a second modeled object nor in contact with self-intersections. Thus, one understands that initial values of Cand Cof a triangle in an extended region is the same for all triangles in the same extended region. This amounts to say that an extended region comprises the maximum number of connected triangles of a modeled object having the same Cand C. Thus, within an extended region, initial computed couples of winding number Cand Ccan be easily computed (one could also say propagated) to the whole connected triangles of the modeled object. Consequently, the computing procedure within an extended region is repeated for each connected triangle of the modeled object. Again, one understands that it advantageously allows increasing the performances of the process according to the invention as well as preserving the resources of the CAGD system.","Then, at step S of , a coefficient k is computed for each triangle and each polygonal facet of the first and second modeled object. Let remind that, by definition, the boundary \u03b4\u03c8 of function \u03c8 is the set of points x\u03b5|A|\u222a|B| where \u03c8 is not locally single valued, thus defining a geometrical locus of the resulting simplicial 2-cycle \u03b4\u03c8, and that \u03c8 and \u03c8 are two values where \u03c8 (respectively \u03c8) is the value on the positive side of \u03b4\u03c8 (respectively the opposite side of \u03b4\u03c8) according to the orientation resulting from initial operands. Then, the difference \u03c8\u2212\u03c8 defines a signed multiplicity at point x, and consequently, a multiplicity for all triangles of \u03b4\u03c8 is set. The resulting simplical 2-cycle is then \u03b4\u03c8, associated with triangles multiplicities. One understands that the multiplicity advantageously allows to obtain a simplical 2-cycle in the case of a function \u03c8 having integer values; otherwise, the function \u03c8 would have only 0 or 1 as values.","The coefficient k is computed with a function \u03c6 having as inputs the two couples of winding numbers p and q computed for each triangle and each polygonal facet of the first and second modeled objects. In practice, the coefficient k is computed as follow: k=\u03c6(C)\u2212\u03c6(C), which amounts to computing a signed multiplicity for each triangle and each polygonal facet of the first and second modeled objects.","Next, at step S, triangles and polygonal facets of the first and second modeled objects are selected according to the computed coefficients. Selection here means that the selected triangles and polygonal facets are kept for obtaining the resulting simplical 2-cycle. In practice, the triangles and polygonal facets are selected when the computed coefficient k is different from zero.","Next, at step S, the polygonal facets, which are not triangles, are triangulated. The triangulation is performed as known in the art.","Then, at step , the resulting closed triangulated polyhedral surface is obtained with the selected triangles and the triangulated selected polygonal facets.","The steps S to S are illustrated by .","At , the intersections points , , , , and  between objects A and B and the self-intersection point  of object B are represented and the first and second modeled objects A and B are subdivided according to the intersections computed.","Then, at , the extended regions are shown. The extended regions are identified on the figure with numerical values 1 to 10. In this example, the four adjacent portions (2, 10, 4, 5) of object A and the six adjacent portions (1, 7, 9, 3, 8, 6) of portion B are extended regions. It is now possible to associate to each extended region all the coefficients used to select the resulting simplicial 2-cycle: C, Cand k=\u03c6(C)\u2212\u03c6(C), as gathered in next table. In the example in next table, one takes \u03c6(w, w)=ww. Extended regions belonging to the resulting simplicial 2-cycle are visible in the rightmost column.",{"@attributes":{"id":"p-0118","num":"0143"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"56pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":[{},"Extended",{},{},"\u03c6(C) \u2212 ","Belongs to the"]},{"entry":["Operand","region","C","C","\u03c6(C)","resulting 2-cycle?"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["B","\u20021","(0, 0)","(0, \u22121)","\u20020 \u2212 0 = 0","No"]},{"entry":["A","\u20022","(1, 0)","(0, 0)","\u20020 \u2212 0 = 0","No"]},{"entry":["B","\u20023","(0, 1)","(0, 0)","\u20020 \u2212 0 = 0","No"]},{"entry":["A","\u20024","(1, 0)","(0, 0)","\u20020 \u2212 0 = 0","No"]},{"entry":["A","\u20025","(1,\u22121) ","(0, \u22121)","\u22121 \u2212 0 = \u22121","Yes, opposite"]},{"entry":[{},{},{},{},{},"orientation"]},{"entry":["B","\u20026","(1, 0)","(1, \u22121)","\u20020 \u2212 (\u22121) = \u22121","Yes, initial"]},{"entry":[{},{},{},{},{},"orientation"]},{"entry":["B","\u20027","(1, 0)","(1, \u22121)","\u20020 \u2212 (\u22121) = 1","Yes, initial"]},{"entry":[{},{},{},{},{},"orientation"]},{"entry":["B","\u20028","(1, 1)","(1, 0)","\u20021 \u2212 0 = 1","Yes, initial"]},{"entry":[{},{},{},{},{},"orientation"]},{"entry":["B","\u20029","(1, 1)","(1, 0)","\u20021 \u2212 0 = 1","Yes, initial"]},{"entry":[{},{},{},{},{},"orientation"]},{"entry":["A","10","(1, 1)","(0, 1)","\u20021 \u2212 0 = 1","Yes, initial"]},{"entry":[{},{},{},{},{},"orientation"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}}}},"On  is illustrated the resulting simplicial 2-cycle defined by extended regions ,,,, and . One can notice that the extended region  must be involved according to the opposite orientation (new orientation is illustrated), which is captured by the sign of \u03c6(C)\u2212\u03c6(C) in the previous table. This allows to insure that the orientation of the surface of the resulting simplicial 2-cycle is globally consistent.","It is to be understood that the foregoing method can be applied to any CAGD system. The invention may be embodied as a system, method, or computer program such as in client\/server computers ,  illustrated in -. The invention may be implemented as a in digital electronic circuitry, or in computer hardware, firmware, resident software, micro-code, software, or in combinations of them at , , . Apparatus of the invention may be implemented in a computer program product tangibly embodied in a machine-readable storage device ,  for execution by a programmable processor ; and method steps of the invention may be performed by a programmable processor , ,  executing a program of instructions  to perform functions of the invention by operating on input data  and generating output .","The invention may advantageously be implemented in one or more computer programs that are executable on a programmable system ,  including at least one programmable processor  coupled to receive data and instructions from, and to transmit , ,  data and instructions to, a data storage system , at least one input device , and at least one output device . The application program  may be implemented in a high-level procedural or object-oriented programming language or in assembly or machine language if desired; and in any case, the language may be a compiled or interpreted language.","Generally, a processor  (, ) will receive instructions  and data  from a read-only memory  and\/or a random access memory . Any combination of one or more computer readable medium(s) ,  may be utilized to store instructions . The computer readable medium may be a computer readable storage medium . A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of nonvolatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM disks. Any of the foregoing may be supplemented by, or incorporated in, specially designed ASICs (application-specific integrated circuits).","The computer readable medium may be a computer readable signal medium . A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","The preferred embodiment of the present invention has been described. It will be understood that various modifications may be made without departing from the spirit and scope of the invention. Therefore, other implementations are within the scope of the following claims.","For instance, it is possible to increase the performances of the whole process according to the invention with optimizations. A first optimization may consist in using the notion of filtered predicate, described for instance in the documents \u201cPolyhedral modelling with multiprecision integer arithmetic\u201d, S. Fortune, Computer Aided Design, 29 (2), pages 123-133, 1997, \u201cEfficient exact arithmetic for computational geometry\u201d, S. Fortune and C. J. Van Wyk, Proceedings of the ninth annual symposium on Computational geometry, pages 163-172, ACM New York, N.Y., USA, 1993, and \u201cA lazy exact arithmetic\u201d, Mohand Ourabah Benouamer, P. Jaillon, Dominique Michelucci, and Jean-Michel Moreau, IEEE Symposium on Computer Arithmetic, pages 242-249, 1993.","Moreover, the barycentric coordinates of the constructed vertices are computed in interval arithmetic. Each time a predicate is called, typically returning the sign of a determinant, it tries to determine the sign using these interval coordinates and if this is not possible, it calls the rational arithmetic version of the predicate, which, if this has not been done previously, computes first the required barycenric coordinates of the impacted constructed vertices.","In the step S of the process as depicted in , the computing of intersections between triangles of the first modeled object and triangles of the second modeled object can be accelerated using a partition of the operands in set of triangles, called patches, defined as follows:\n\n","Indeed, it can be shown that in this case, the patch has no self-intersection and it is sufficient to test the possible intersections between triangles of distinct patches. If these patches are localized in a spatial partition structure such as voxels or octrees, it can significantly speed up the step S, as described in the documents \u201cSolid Representation and Operation Using-Extended Octrees\u201d, P. Brunet and I. Navazo, ACM Transactions on Graphics, 9(2) pages 170-197, 1990, \u201cFundamental techniques for geometric and solid modeling\u201d, and C. M. Hoffmann and G. Vanecek, Manufacturing and Automation Systems: Techniques and Technologies, 48 pages 347-356, 1990. Paragraph II.B.","For example, if a voxel contains only one patch, there can be no intersection.","Furthermore, another optimization may consist in simplifying the resulting closed triangulated polyhedral surface (S) by a sequence of edge collapses driven by a chordal error. Indeed, since the operations performed in former steps S-S are exact, extremely small triangles may occur, possibly much smaller than the weight of the last digit of the floating point numbers defining the coordinates of the vertices of the input operands. In process of the present invention, this simplification procedure is the combinatorial counterpart of the rounding of number in floating points."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing will be apparent from the following more particular description of example embodiments of the invention, as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale, emphasis instead being placed upon illustrating embodiments of the present invention.","A system embodying the invention and a process according to the invention will now be described, by way of non-limiting example, and in reference to the accompanying drawings, where:",{"@attributes":{"id":"p-0038","num":"0060"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0039","num":"0061"},"figref":"FIGS. 2 to 7"},{"@attributes":{"id":"p-0040","num":"0062"},"figref":"FIGS. 8 and 9"},{"@attributes":{"id":"p-0041","num":"0063"},"figref":["FIG. 10","FIGS. 8 and 9"]},{"@attributes":{"id":"p-0042","num":"0064"},"figref":["FIG. 11","FIG. 10"]},{"@attributes":{"id":"p-0043","num":"0065"},"figref":"FIGS. 12 to 17"},{"@attributes":{"id":"p-0044","num":"0066"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0045","num":"0067"},"figref":["FIGS. 19 to 23","FIG. 18"]},{"@attributes":{"id":"p-0046","num":"0068"},"figref":"FIGS. 24 and 25"},{"@attributes":{"id":"p-0047","num":"0069"},"figref":"FIGS. 26 and 27"},{"@attributes":{"id":"p-0048","num":"0070"},"figref":["FIGS. 28 to 30","FIGS. 12 to 15","FIGS. 19 to 22"]},{"@attributes":{"id":"p-0049","num":"0071"},"figref":"FIGS. 31","i":["a","b "],"b":"31"}]},"DETDESC":[{},{}]}
