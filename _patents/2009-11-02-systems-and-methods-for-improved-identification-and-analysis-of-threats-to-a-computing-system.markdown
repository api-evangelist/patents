---
title: Systems and methods for improved identification and analysis of threats to a computing system
abstract: A security tool can access a tagging tool and the history generated by the tagging tool in order to identify potential threats and analyze the identified threats. When a potential threat is detected or an actual threat is identified, the security tool can request the history of actions from the tagging tool corresponding to the threat. The security tool can compare the potential or actual threat with the history of any action recorded by the tagging tool in order to classify a potential threat as an actual threat or determine the source or cause of an actual threat.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08607339&OS=08607339&RS=08607339
owner: Red Hat, Inc.
number: 08607339
owner_city: Raleigh
owner_country: US
publication_date: 20091102
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","DESCRIPTION OF THE RELATED ART","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["This invention relates generally to computer software installation, configuration management, and security for a computing system.","Today, a person using a computing system has a variety of avenues for obtaining software and installing the software on the computing system, such as purchasing physical media and downloading the software over a network. When downloading the software over a network, the person can acquire and install the software using a software package management system. The software package management system typically consists of a software repository which stores and maintains various software packages. The software packages typically consist of software stored in an archive format that includes data for installing the software.","To obtain the software package, the person can utilize a package manager. The package manager is responsible for retrieving the software package and installing the software package on the computing system. Typically, the package manager maintains a record of how the software package was installed. For example, the package manager may maintain data used to install the software package. However, the package manager does not maintain an accurate and complete history of why the software package was installed and the effect the installation had on the computing system. For example, if a user installs a software package, which causes the package manager to install software X and update software library Y, the user has no mechanism, at a later time, to determine why software library Y, was updated. Moreover, if library Y is later altered, the user has no mechanism to identify that the alteration of software library Y may affect software X.","In addition to the package manager, other software programs can alter the computing system. For example, the computing system can be under the control of a configuration management system. The configuration management system can be responsible for changing the configuration and settings of the computing systems. Likewise, the configuration management system can alter files on the computing system and install software on the computing systems. As with the package manager, the configuration management system does not maintain an accurate and complete history of why it has made changes to the computing systems. Additionally, the package manager and configuration management systems may not be aware of the changes that each makes.","In addition to software installation and configuration management, computer security is of paramount concern in a computing environment. Computer security typically includes identifying and preventing attacks on computing systems. In computer security, it can be difficult to distinguish between legitimate activity and malicious activity. Often, computer security applications and programs mistake legitimate activity, such as software installation and configuration management, with malicious activity.","For simplicity and illustrative purposes, the principles of the present teachings are described by referring mainly to exemplary embodiments thereof. However, one of ordinary skill in the art would readily recognize that the same principles are equally applicable to, and can be implemented in, all types of information and systems, and that any such variations do not depart from the true spirit and scope of the present teachings. Moreover, in the following detailed description, references are made to the accompanying figures, which illustrate specific embodiments. Electrical, mechanical, logical and structural changes may be made to the embodiments without departing from the spirit and scope of the present teachings. The following detailed description is, therefore, not to be taken in a limiting sense and the scope of the present teachings is defined by the appended claims and their equivalents.","Embodiments of the present teachings relate to systems and methods for identifying and analyzing threats to a computing system. More particularly, a security tool can utilize a history of software package installations and configuration management actions in order to more effectively identify and analyze threats to a computing system.","According to embodiments, in order to track actions performed by a package manager and a configuration management system, a computing system can be configured to include a tagging tool. The tagging tool can be configured to cooperate with the package manager and the configuration management tool in order to determine and generate a history of the actions performed by the package manager and the configuration management system. The history can include a description of the actions, the reasons why the actions were performed, and a list and description of the software programs, files, and software libraries that are affected by the actions.","According to embodiments, a security tool can be configured to access the tagging tool and the history generated by the tagging tool in order to identify potential threats and analyze the identified threats. In particular, when a potential threat is detected or an actual threat is identified, the security tool can be configured to request, from the tagging tool, any actions in the history that may be associated with the threat. The security tool can be configured to compare the potential or actual threat with the history of any action recorded by the tagging tool in order to classify a potential threat as an actual threat or determine the source or cause of an actual threat.","By utilizing the tagging tool, the security tool can utilize a history of all actions performed by the package manager and the configuration management system when identifying and analyzing potential and actual threats to a computing system. Accordingly, the security tool can more efficiently and effectively eliminate legitimate activity as potential threats. Additionally, the security tool can more efficiently and effectively determine the source or cause of actual threats to the computing system.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 1","FIG. 1"],"b":["100","100"]},"In embodiments, as illustrated in , the software package delivery and management system  can be designed to allow a computing system  to communicate with a software repository , via one or more networks , in order to obtain one or more software packages . The software repository  can be implemented as any type of open-source or proprietary software repository, which can store the software packages  and provide the software packages to computing systems, such as the computing system , requesting the software packages via the one or more networks . For example, the software repository  can be implemented as a Yellowdog Updater, Modified (Yum) repository, Debian\u2122 repository, or any other type of conventional software repository.","In embodiments, as described herein, the software packages , can include one or more software programs that are packaged together in a format that allows a package manger or package installer to install the software programs, contained in the software packages , on a computing system. The software programs included in the software packages  can be any type of software programs such as operating systems (OS), application programs, and the like. The software packages  can also include metadata that describes the software package, such as the name of the software package, the software programs included in the package, version of the software package, description of the purpose of the software package, etc. The software packages  can also include metadata that aids in the installation of the software programs contained in the software packages , such as checksums and a list of dependencies of the software package. The list of dependencies can describe the relationship of the software programs contained in the software packages  and any other software programs, file, software libraries, etc. required by the software packages .","In embodiments, the software repository  can store the software packages  in any type of open-source or proprietary format depending on the type of software repository . For example, the software packages  can be in conventional formats such as RPM format for a Yum repository, .deb format for a Debian\u2122 repository, or other conventional formats.","In embodiments, the software package delivery and management system  can also include one or more software repository mirrors , coupled to the network . The software repository mirrors  can be configured to maintain copies of the software packages . The software repository mirrors  can be configured to backup the software repository . For example, the software repository mirrors  can provide the software packages  to computing systems, such as computing system , in the event that the software repository  is unavailable or the software repository  is experiencing high traffic.","In embodiments, the software repository  and the software repository mirrors  can be supported by any type of computing system capable of storing the software packages , capable of communicating with the one or more networks , and capable of running a repository application for cooperating with a package manager or package installer in order to deliver the software packages . For example, the software repository  and the software repository mirrors  can be supported by conventional computing systems or other devices such as such as servers, personal computers, laptop computers, network-enabled media devices, networked stations, etc. As such, the computing system supporting the software repository  and the software repository mirrors  can include conventional hardware such as processors, memory, computer readable storage media and devices (CD, DVD, hard drive, portable storage memory, etc.), network devices, and the like.","In embodiments, the one or more networks  can be or include the Internet, or other public or private networks. The one or more or more networks  can be or include wired, wireless, optical, and other network connections. One skilled in the art will realize that the one or more networks  can be any type of network, utilizing any type of communication protocol, to connect computing systems.","In embodiments, the computing system  can be any type of conventional computing system or other device such as such as servers, personal computers, laptop computers, network-enabled media devices, networked stations, etc. As such, the computing system  can include conventional hardware such as processors, memory, computer readable storage media and devices (CD, DVD, hard drive, portable storage memory, etc.), network devices, and the like.","In embodiments, the computing system  can be configured to include a package manager . The package manager  can be configured to cooperate with the software repository  to perform various actions associated with the software packages . For example, the package manager  can be configured retrieve one or more of the software packages  and configured to install the software packages on the computing system . Likewise, the package manager  can be configured to retrieve updates to software packages , already installed on the computing system , and install the updates on the computing system .","In embodiments, the package manager  can be configured to cooperate with manager tools  to perform actions related to the software packages . For example, the manager tools  can be configured to install and update particular application programs, files, or software libraries maintained by the software repository . As such, the manager tool  can be configured to provide a request to the package manager  to perform the installation or update.","In embodiments, the package manager  can be configured to allow a user of the computing system  to request the various actions associated with the software repository  to be performed. To achieve this, the package manager  can be configured to provide command line or graphical user interfaces (GUIs) that allow the user to direct the package manager  to perform the actions. For example, the package manager  can provide GUIs that display the software packages , such as new software packages and software package updates, available in the software repository  and that allow the user to select the action to be performed related to the software packages .","In embodiments, in order to perform the various actions, the package manager  can be configured communicate with the software repository  and retrieve data from the software repository . For example, when providing the GUIs to a user of the computing system , the package manager  can retrieve a list of the software packages  from the software repository . Likewise, for example, when installing or updating a particular software package , the package manager  can retrieve the particular software package  and any other data associated with the particular software package .","In embodiments, when performing the various actions, the package manager  can be configured to utilize the metadata associated with the software packages  in order to perform the actions. For example, when installing a particular software package  or updating a particular software package , the package manager  can access the metadata associated with the particular software packages  in order to properly install or update the software packages on the computing system . For instance, the package manager  can utilize the list of dependencies in the metadata in order to identify the software programs, files, and software libraries that are affected. Additionally, when performing the various actions, the package manager  can be configured to store the metadata in a database .","In embodiments, the package manager  can be any application program that is capable of executing on the computing system  to perform the actions related to the software repository . For example, the package manager  can be any type of conventional open-source or proprietary package manager such as Yum package manager, Debian\u2122 package manager, and the like. The package manager  can be stored on computer readable storage devices or media (CD, DVD, hard drive, portable storage memory, etc.) of the computing system  and executed by the computing system .","In embodiments, in order to track actions performed by the package manager , the computing system  can be configured to include a tagging tool . The tagging tool  can be configured to cooperate with the package manager  in order to determine and generate a history of the actions performed by the package manager . The history can include a description of the actions, the reasons why the actions were performed, and a list and description of the software programs, files, and software libraries that are affected by the actions. As such, the package manager  or a user of the computing system  can utilize the tagging tool  to track a history of all actions performed by the package manager  and the reasons the actions were performed. Additionally, the user of the computing system  and\/or the package manager  can utilize the history of the action in order to access what effect additional actions will have on the computing system .","In embodiments, the tagging tool  can be configured to include an application programming interface (API) that the package manager  can call in order to invoke the tagging tool . For example, when the package manager  performs a particular action (software package  installation, software package  update, etc.), the package manager  can call the tagging tool . Once invoked, the tagging tool  can determine and generate the history of the particular action performed by the package manager tool  when called.","In embodiments, in order to determine the history, the tagging tool  can be configured to acquire the metadata and any other information associated with the action performed by the package manager . For example, when the package manager  invokes the tagging tool , the package manager  can be configured to provide, via the API, the metadata for the software package  associated with the action. Likewise, when the package manager  invokes the tagging tool , the package manager  can be configured to provide, via the API, other information such as a description of the action (e.g. action selected by the user via a GUI, description of the action, and the like). Additionally, the tagging tool  can be configured to retrieve, via the API, the metadata and any other information, associated with the action, from the database .","In embodiments, the tagging tool  can be configured to acquire, from a user of the computing system , additional information about the actions being performed by the package manager . To achieve this, the tagging tool  can be configured to generate GUIs that allow a user to enter information about the actions, such as comments on the actions, a description of the actions, etc. The tagging tool  can be configured to provide the GUIs and receive information entered into the GUIs via the API. For example, when the package manager  invokes the tagging tool , the tagging tool  can be configured to generate the GUIs and provide the GUIs, via the API.","In embodiments, once the metadata and any other information is acquired, the tagging tool  can be configured to identify specific information required to build the history of the actions performed by the package manager . The tagging tool  can be configured to parse the metadata and the other information associated with the action in order to extract any information that describes the action, the reasons the action was performed, and any software programs, files, and software libraries affected by the action. For example, the tagging tool  can parse and extract information such as the name of the software package , the version of the software package , the version of the previous software package  if updating, the reason the package manager  is performing the action (e.g. new software installation, software installation update), date and time of the action, and a list of software programs, files, and software libraries affected by the action.","In embodiments, once the information is identified, the tagging tool  can be configured to store the information in records reflecting the history of the actions performed by the package manager . The tagging tool  can be configured to store the information in a package event record  and a set  of change records . The tagging tool  can be configured to maintain the package event record  and the set  of change records  in a repository , such as a database.","In embodiments, the tagging tool  can be configured to utilize the package event record  to store the complete history of each action performed by the package manager . For each particular action, the tagging tool  can be configured to create an entry in the package event record . The tagging tool  can be configured to assign each entry in the package event record  a unique event identification. For each particular action, the tagging tool  can be configured to store in the entry, the unique event identification, any information that describes the particular action, the reasons the particular action was performed, the date and time, and any software programs, files, and software libraries affected by the particular action. As such, for each actions preformed by the package manager , the tagging tool  can maintain a complete history of the actions.","In embodiments, the tagging tool  can be configured to utilize the set  of change records  to store a history of how each action affects particular software programs, files, and software libraries. The tagging tool  can be configured to generate and maintain a separate change record  for each application program, file, or software library affected by an action of the package manager . Each time an entry is created in the package event record  for a particular action, the tagging tool  can be configured to create an entry in one or more change records  associated with the software programs, files, and software libraries affected by the particular action. For each entry, the tagging tool  can be configured to store, in each change record , the unique event identification, the effect of the action of the software programs, files or software libraries, a description of the action by the package manager , the date and time of the action, and the reasons for the action. As such, the tagging tool  can store a history of how each action effects particular software programs, files, and software libraries. Likewise, because the entries in the package event record  and the set  of the change records  share a unique event identification, the tagging tool  can identify and retrieve all the information associated with a particular action based on any information associated with the action.","In embodiments, the software package delivery and management system  can be configured to include a configuration management system , coupled to the network . The configuration management system  can be configured to perform various actions on the computing system . The action can include actions such as altering a configuration and settings of the computing system , installing and removing software packages on the computing system , installing and removing software programs on the computing system , modifying software programs, files, and software libraries on the computing system , and the like.","In embodiments, the configuration management system  can perform the actions in order to maintain consistency and reliability of the software package delivery system and management system . The actions can include tracking the types and configurations of the computing system . Additionally, the actions can include managing, setting, and altering the configurations of the computing system  utilizing management classes. A management class can include a description of rules, profiles, data, files, or configurations that can be applied to the computing system .","In embodiments, the configuration management system  can be configured to cooperate with a configuration management client  on the computing system . The configuration management client  can be configured to cooperate with the configuration management system  to perform the actions mentioned above. The configuration management client  can be implemented as an application program that is capable of executing on the computing system  to perform the processes as described above. In either case, the configuration management client  can be stored on computer readable storage devices or media (CD, DVD, hard drive, portable storage memory, etc.) of the computing system  and executed by the computing system .","In embodiments, the configuration management system  and the configuration management tool  can be configured as any type of open-source or proprietary configuration management system, protocol and\/or tool, and configured to support any type of configuration management services, protocols, or methods. For example, the configuration management system  and the configuration management tool  can be implemented utilizing known configuration management systems and tools such as Puppet\u2122, cfengine, bcfg2, chef, capistrano, fabric, spine, or any other type of proprietary or open-source systems or tools.","In embodiments, the tagging tool  can be configured to cooperate with the configuration management system  and the configuration management tool  in order to determine and generate a history of the actions performed by the configuration management system . The history can include a description of the actions, the reasons why the actions were performed, and a list and description of the software programs, files, and software libraries that are affected by the actions. As such, the configuration management system , the configuration management tool  or a user of the computing system  can utilize the tagging tool  to track a history of all actions performed by the configuration management system  and the reasons the actions were performed. Additionally, the user of the computing system , the configuration management system , and\/or the configuration management tool  can utilize the history of the action in order to access what effect additional actions will have on the computing system .","In embodiments, the configuration management system  and\/or the configuration management tool  performs a particular action, the configuration management system  and\/or the configuration management tool  can call the tagging tool , via the API. Once invoked, the tagging tool  can determine and generate the history of the particular action performed by the configuration management system  and\/or the configuration management tool  when called.","In embodiments, in order to determine the history, the tagging tool  can be configured to acquire any information associated with the action performed by the configuration management system  and\/or configuration management tool . For example, when the configuration management system  and\/or the configuration management tool  invokes the tagging tool , the configuration management system  and\/or the configuration management tool  can be configured to provide, via the API, the details of the action taken. The information can include information that describes the action, the reasons the action was performed, and any software programs, files, and software libraries affected by the action. For example, the information can include the type of management action taken, the management classes used, the reasons for the action, the date of the action, identification of the software programs, files, and software libraries affected by the action, and details of the actions effect on the software programs, files, and software libraries.","In embodiments, the tagging tool  can be configured to acquire, from a user of the computing system  or the configuration management system , additional information about the actions being performed by the configuration management system  and\/or the configuration management tool . To achieve this, the tagging tool  can be configured to generate GUIs that allow a user to enter information about the actions, such as comments on the actions, a description of the actions, reason for the action, etc. The tagging tool  can be configured to provide the GUIs and receive information entered into the GUIs via the API. For example, when the configuration management system  and\/or the configuration management tool  invokes the tagging tool , the tagging tool  can be configured to generate the GUIs and provide the GUIs, via the API.","In embodiments, once the information is identified, the tagging tool  can be configured to store the information in records reflecting the history of the actions performed by the configuration management system  and\/or the configuration management tool . The tagging tool  can be configured to store the information in a configuration event record  and the set  of change records . The tagging tool  can be configured to maintain the configuration event record  in the repository .","In embodiments, the tagging tool  can be configured to utilize the configuration event record  to store the complete history of each action performed by the configuration management system  and\/or the configuration management tool . For each particular action, the tagging tool  can be configured to create an entry in the configuration event record . The tagging tool  can be configured to assign each entry in the configuration event record  a unique event identification. For each particular action, the tagging tool  can be configured to store in the entry, the unique event identification, any information that describes the particular action, the reasons the particular action was performed, the date and time, and any software programs, files, and software libraries affected by the particular action. As such, for each action preformed by the configuration management system  and\/or the configuration management tool , the tagging tool  can maintain a complete history of the actions.","In embodiments, for each of the actions preformed by the configuration management system  and\/or the configuration management tool , the tagging tool  can be configured to create an entry in the change record  associated with the software programs, files and software libraries affected by the action. For each entry, the tagging tool  can be configured to store, in each change record , the unique event identification, the effect of the action of the software programs, files or software libraries, a description of the action preformed by the configuration management system  and\/or the configuration management tool , the date and time of the action, and the reasons for the action.","In embodiments, the action performed by the configuration management system  and\/or the configuration management tool  can include an action to be performed by the package manager . As such, the tagging tool  can be configured to create an entry in the package event record . The entry can include the unique event identification of the action of the configuration management system  and\/or the configuration management tool , the details of the action performed by the package manager  as described, and the reasons (e.g. at the direction of the configuration management system  and\/or the configuration management tool ).","In embodiments, to provide the history, the tagging tool  maintains the same unique event identification for a single action across the package event record , the configuration event record , and the set  of the change records . As such, the tagging tool  can store a history of how each action effects particular software programs, files, and software libraries. Likewise, because the entries in the package event record , the configuration event record , and the set  of the change records  share a unique event identification, the tagging tool  can identify and retrieve all the information associated with a particular action based on any information associated with the action.","In embodiments, the tagging tool  can be configured to retrieve the information stored in the package event record , the configuration event record , and the set  of change records , and organize and output the retrieved information in one or more reports. For example, the tagging tool  can be configured to receive requests, from the package manager , the configuration management system , the configuration management tool  and\/or the user of the computing system , to view information on a particular action, a particular software package , and\/or software programs, files, and software libraries. The tagging tool  can be configured to receive the request and generate one or more reports based on the request. The tagging tool  can be configured to provide the reports in GUIs, via the API. Likewise, the tagging tool  can be configured to generate and provide GUIs, via the API, that allows the user of the computing system  to request the reports and specify the subject of the reports.","In embodiments, the tagging tool  can be implemented as an application program that is capable of executing on the computing system  to perform the processes as described above. Likewise, the tagging tool  can be implemented as a portion of the package manager . In either case, the tagging tool  can be stored on computer readable storage devices or media (CD, DVD, hard drive, portable storage memory, etc.) of the computing system  and executed by the computing system . Likewise, the repository  can be stored on a computer readable storage devices or media (CD, DVD, hard drive, portable storage memory, etc.) of the computing system .",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["116","116","205","210","215","220","225","116"]},"In embodiments, the API  can be configured to communicate with the package manager , the configuration management system  and\/or the configuration management tool . In particular, the package manager , the configuration management system  and\/or the configuration management tool  can utilize the API  to call and invoke the tagging tool  when an action is taken by the package manager , the configuration management system  and\/or the configuration management tool . Likewise, the API  can be configured to communicate with the package manager , the configuration management system  and\/or the configuration management tool  in order to receive or to retrieve information associated with the actions taken by the package manager , the configuration management system  and\/or the configuration management tool . Once information is received, the API  can pass the information to the appropriate component such as records module  and reports module , which are coupled to the API .","In embodiments, the API  can also be configured to generate and provide various GUIs  associated with the tagging tool . For example, the API  can be configured generate and provide GUIs  that allow the user of the computing system  to request the reports and specify the subject of the reports. The API  can pass the information to the appropriate component such as records module  and reports module . Likewise, the API  can be configured to provide the reports via the GUIs , for example, reports generated by the reports module . Additionally, the API  can be configured to generate and provide GUIs that allow the user to enter information about the action of the package manager . The API  can be configured to generate the GUIs  in any format that can be presented, by the computing system , to the user, for example displayed to the user.","In embodiments, the records module  can be configured to receive the metadata and any other information which is acquired by the API . The records module  can be configured to identify specific information required to build the history of the actions performed by the package manager , the configuration management system  and\/or the configuration management tool . The records module  can be configured to parse the metadata and the other information associated with the action in order to identify and extract any information that describes the actions, the reasons the action was performed, and any software programs, files, and software libraries affected by the action.","For example, for action by the package manager , the records module  can parse and extract information such as the name of the software package , the version of the software package , the version of the previous software package  if updating, the reason the package manager  is performing the action (e.g. new software installation, software installation update), the date and time of the action, and a list of software programs, files, and software libraries affected by the action. Likewise, for example, for action by the configuration management system  and\/or the configuration management tool , the records module  can parse and extract information such as information that describes the particular action, the reasons the particular action was performed, the date and time, and any software programs, files, and software libraries affected by the particular action.","In embodiments, the records module  can be coupled to the search module  and the repository interface . Once the information is identified, the records module  can be configured store the information in records reflecting the history of the actions performed by the package manager , the configuration management system  and\/or the configuration management tool . The records module  can be configured to store the information in the package event record , the configuration event record , and the set  of change records .","In embodiments, the records module  can be configured to utilize the package event record  to store the complete history of each action performed by the package manager . For each particular action, the records module  can be configured to create an entry in the package event record . The records module  can be configured to assign each entry in the package event record  a unique event identification. For each particular action, the records module  can be configured to store in an entry, the unique event identification, any information that describes the particular action, the reasons the particular action was performed, and any software programs, files, and software libraries affected by the particular action.","In embodiments, the records module  can be configured to utilize the configuration event record  to store the complete history of each action performed by the configuration management system  and\/or the configuration management tool . For each particular action, the records module  can be configured to create an entry in the configuration event record . The records module  can be configured to assign each entry in the configuration event record  a unique event identification. For each particular action, the records module  can be configured to store in an entry, the unique event identification, any information that describes the particular action, the reasons the particular action was performed, and any software programs, files, and software libraries affected by the particular action.","In embodiments, the records module  can be configured to utilize the set  of change records  to store a history of how each action effects particular software programs, files, and software libraries. The records module  can be configured to generate and maintain a separate change record  for each software program, file, or software library affected by an action of the package manager , the configuration management system  and\/or the configuration management tool . Each time an entry is created in the package event record  for a particular action, the tagging tool  can be configured to create an entry in one or more change records  associated with the software programs, files, and software libraries affected by the particular action. For each entry, the records module  can be configured to store, in each change record , the unique event identification, the effect of the action of the software programs, files or software libraries, a description of the action by the package manager , the date and time of the action, and the reasons for the action.","In embodiments, to create a new entry and store data in the package event record , the configuration event record , and change records  for software programs, files, and software libraries affected by an event, the records module  can be configured to cooperate with the search module  and the repository interface  to identify if the records exist. In particular, the records module  can pass a request to the search module  that identifies the package event record , the configuration event record , and change records  sought. The search module  can be configured to search the repository for the package event record , the configuration event record , and change records  sought via the repository interface . If the records exist, the search module  can be configured to retrieve the package event record , the configuration event record , and change records  sought, via the repository interface , and configured to pass the package event record , the configuration records , and change records  sought to the records module . If one or more of the records do not exist, the search module  can be configured to notify the records module , and the records module  can be configured to create the non-existent records. Once entries are made, the records module  can be configured to store the records in the repository , via the repository interface .","In embodiments, the reports module  can be coupled to the search module . The reports module  can be configured to receive a request for information stored in the repository and generate reports. In particular, the reports module  can be configured to cooperate with the search module  to identify the package event record , configuration records  and change records , which contain information relevant to the request. The search module  can be configured to search the repository, via the repository interface , and retrieve the package event record , the configuration event record , and any change records  relevant to the request. The search module  can pass the retrieved records to the reports module . As such, the reports module  can generate reports and pass the reports to the API  to provide in the GUIs .","As mentioned above, the tagging module  can track and record the history of actions performed by the package manager . For example, the package manager  can receive a request from a user of the computing system  to update a particular software package , such as updating Open Office from version 1 (v. 1) to version (v. 2). When the package manager  takes the action, the package manager  can call the tagging tool  via the API . Then, the package manager  can provide the tagging tool  with the metadata for the Open Office v. 2 and any other information relevant to the action.","In this example, the API  can pass the metadata for the open office v. 2 and any other information relevant to the action to the records module . The records module  can parse the metadata for the open office v. 2 and any other information relevant to the action and extract information describing the action and reason for the action such as the name of the software package  (Open Office), the version of the software package  (Open Office v. 2), the version of the previous software package  (Open Office v. 1), the reason the package manager  is performing the action (updating Open Office v. 1 to v. 2), the date and time (Jan. 1, 2009, 9:17 A.M.), and a list of software programs, files, and software libraries affected by the action (e.g. Open Office writer, Open Office spreadsheet, software library X, software library Y).","In this example, after extracting the information, the records module  can cooperate with the search module  and the repository interface  in order to retrieve the package event record  and the change records  for software programs, files, and software libraries affected by the action, such as the change records  for Open Office writer, Open Office spreadsheet, software library X, software library Y. The records module  can add a new entry in the package event record  and the change records  for Open Office writer, Open Office spreadsheet, software library X, software library Y.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 3A","b":["300","118","118","305","310","305"]},"In this example, the records module  can create the new entry  and assign the new entry  a unique event identification , such as \u201c00002\u201d. The records module  can then populate the new entry with the information detailing the action, such as the name of the software package, the reason for the action, software programs, files, and software libraries affected by the action, the date and time of the action, and comments supplied by the user.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 3B","b":["350","122","122","355","355","310"]},"In this example, the records module  can create the new entry  in order to detail the actions effect on library X. The records module  can populate the new entry  with the information of the action such as the unique event identification \u201c00002\u201d, the actions effect on library X (\u201cupdated\u201d), version of library X (\u201cv. 2\u201d) the reasons for the action (\u201cOpen Office v. 1 updated to Open Office v. 2 installed\u201d), and date (\u201c1\/1\/2009, 9:17 A.M.\u201d).","Continuing this example, the tagging module  can track and record the history of actions performed by the configuration management system  and\/or the configuration management tool . For example, the configuration management system  and\/or the configuration management tool  can initiate performing an action on the computing system , for instance, upgrading the operating system due to a change in the management class associated with the computing system . In this example, upgrading the operating system can cause the software library X to be upgraded to version 3 (v. 3). When the configuration management system  and\/or the configuration management tool  takes the action, the configuration management system  and\/or the configuration management tool  can call the tagging tool  via the API . Then, the configuration management system  and\/or the configuration management tool  can provide the tagging tool  with the information related to the action such as a description of the action (upgrading the operating system), the reasons (a change in the management class), and the software programs, files, and software libraries affected by the action (software library X), and the details of the effect (software library X upgraded to v. 3).","In this example, the API  can pass the information relevant to the action to the records module . The records module  can parse the information and extract information describing the action and reason for the action such as the information related to the action such as a description of the action (upgrading the operating system), the reasons (a change in the management class), and the software programs, files, and software libraries affected by the action (software library X), and the details of the effect (software library X upgraded to v. 3).","In this example, after extracting the information, the records module  can cooperate with the search module  and the repository interface  in order to retrieve the configuration event record  and the change records  for software programs, files, and software libraries affected by the action, such as the change records  for software library X. The records module  can add a new entry in the configuration event record  and the change records  for software library X.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 4A","b":["400","126","128","130","130","405","410","405"]},"In this example, the records module  can create the new entry  and assign the new entry  a unique event identification , such as \u201c10001\u201d, which details the update of the management class. The records module  can then populate the new entry with the information detailing the action, such information as the action performed, the reason for the action, software programs, files, and software libraries affected by the action, the date and time of the action, and comments supplied by the user.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 4B","b":["450","126","128","122","122","355"]},"In this example, the records module  can create the new entry  in order to detail the actions effect on library X. The records module  can populate the new entry  with the information of the action such as the unique event identification \u201c10001\u201d, the actions effect on library X (\u201cupdated\u201d), version of library X (\u201cv. 3\u201d) the reasons for the action (\u201cupdate of management class A\u201d), and date and time (\u201c2\/1\/2009, 4:51 A.M.\u201d).","As described above, the tagging tool  can be configured to generate a history of the actions performed related to software package installation and updates as well as configuration management. In embodiments, the tagging tool  can be configured to cooperate with other applications, programs, and tools of the computing system . The tagging tool  and the history generated by the tagging tool  can be utilized by the applications, programs, and tools of the computing system  to improve the performance of the computing system .",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 5","FIG. 5"],"b":["100","102","502","116","102","100"]},"In embodiments, the security tool  can be configured to identify and prevent security threats to the computing system . In particular, the security tool  can be configured to identify potential threats to the computing system  and classify the potential threats as actual threats. Likewise, the security tool  can be configured to analyze the identified threats in order to determine the cause or source of the identified threats. The threats can be any activity that could possibly harm the computing system , such as access to malicious network addresses or web sites, activity by malicious programs (Trojans, viruses etc.), attacks by malicious agents (hacking, spamming, phishing etc.), and the like.","In embodiments, in order to identify the threats, the security tool  can be configured to monitor the resources of the computing system . In particular, the security tool  can be configured to monitor the file system of the computer readable storage media of the computing system , for instance, monitor for attempted access to privileged or restricted files, directories, programs, etc. Likewise, the security tool  can be configured to monitor the network resources of the computing system , for instance, monitor for attempted access to or communication from restricted network ports, attempted access to restricted network addresses or web sites, abnormal log-in behavior of the users of the computer system , and the like.","In embodiments, the security tool  can be configured to maintain a security record . The security record  can be configured to store lists of privileged or restricted files, directories, programs, etc., restricted network ports, restricted network addresses or web sites, access information for the users of the computing system , known malicious agents, and the like. As the security tool  monitors the resources of the computing system , the security tool  can be configured to access the security record  in order to identify and analyze potential threats to the computing system .","In embodiments, the security tool  can be implemented as an application program that is capable of executing on the computing system  to perform the processes as described above. Likewise, the security tool  can be implemented as a portion of another application program of the computing system , such as the OS. In either case, the security tool  can be stored on computer readable storage devices or media (CD, DVD, hard drive, portable storage memory, etc.) of the computing system  and executed by the computing system .","In embodiments, the security tool  can be configured to access the tagging tool  and the history generated by the tagging tool  in order to identify potential threats and analyze the identified threats. In particular, when a potential threat is detected or an actual threat is identified, the security tool  can be configured to request, from the tagging tool , information from the package event record , the configuration event record , and any change records . The security tool  can be configured to compare the potential or actual threat with the history of any action recorded by the tagging tool  in order to classify a potential threat as an actual threat or determine the source or cause of an actual threat. To access the tagging tool , the security tool  can be configured to invoke the tagging tool  via the API, such as API  illustrated in , of the tagging tool  and configured to request information via the API.","In embodiments, the security tool  can be configured to request information from the tagging tool  based on any number of parameters associated with the potential or actual threat. For instance, the security tool  can be configured to request information from the package event record , the configuration event record , and any change records  based on the date and time of the potential or actual threat. Likewise, the security tool  can be configured to request information from the package event record , the configuration event record , and any change records  based on the computing resources (file, directory, network port, network address, etc.) associated with the potential or actual threat.","In embodiments, the security tool  can be configured to utilize the information provided by the tagging tool  to classify a potential threat as an actual threat. In particular, if the security tool  detects activity that can potentially be a threat, the security tool  can compare the information provided by the tagging tool  to determine if the detected activity corresponds to actions recorded by the tagging tool . As such, the security tool  can eliminate activity recorded by the tagging tool  as actual threats.","In embodiments, for example, the security tool  can designate software library X as a restricted file. In this example, the security tool  can detect a change to software library X on the date \u201c2\/1\/2009\u201d at the time \u201c4:57 A.M.\u201d Once detected, the security tool  can invoke the tagging tool  and request any information recorded for software library X on the date \u201c2\/1\/2009\u201d. In response, the tagging tool  can retrieve information from the entry  from the change record  of the software library X (e.g. a change occurred due to an update of management class A) and provide the information to the security tool . Accordingly, the security tool  can classify the detected change to software library X as not being an actual threat because it corresponds to an authorized action e.g. an update to the management class A.","In embodiments, the security tool  can be configured to utilize the information provided by the tagging tool  to determine the cause or source of an actual threat. In particular, if the security tool  detects activity and identifies the activity as a threat, the security tool  can compare the information provided by the tagging tool  to determine if the detected activity identified as an actual threat corresponds to actions recorded by the tagging tool . As such, the security tool  can identify the sources or causes of identified threats and mitigate the threats.","In embodiments, for example, the security tool  can detect an attempted access to a restricted network address from the security record  on the date \u201c11\/3\/2008\u201d at the time \u201c3:00 P.M.\u201d. Because the network address is restricted, the security tool  can identify the attempted access as an actual threat. Once detected, the security tool  can invoke the tagging tool  and request any information recorded for the date \u201c11\/3\/2008\u201d. In response, the tagging tool  can retrieve information from the entry  from the event record  (e.g. \u201cOpen Office v. 1\u201d was installed at \u201c2:42 P.M.\u201d) and provide the information to the security tool . Accordingly, the security tool  can determine that the installation of \u201cOpen Office v. 1\u201d or one of the files associated with \u201cOpen Office v. 1\u201d can potentially be the source of the actual threat.","In embodiments, once the security tool  identifies an actual threat, the security tool  can be configured to take various actions. The security tool  can be configured to block or prevent the activity associated with the actual threat. Likewise, the security tool  can be configured to notify the user of the computing system  of the actual threat. In the notification, the security tool  can be configured to provide the information received from the tagging tool  to the user of the computing system .",{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 6","b":["102","104","126","106","102","602","604","606","606","602","608","606","110","128","116","502","124","602","610","106"]},"Processor  also communicates with the package manager , the configuration management client , the tagging tool , and the security tool  to execute control logic and allow performance of the security and threat detection processes as described above and below. Other configurations of the computing system , associated network connections, and other hardware and software resources are possible.","While  illustrates the computing system  as a standalone system including a combination of hardware and software, the computing system  can include multiple systems operating in cooperation. The security tool  can be implemented as a software application or program capable of being executed by the computing system , as illustrated, or other conventional computer platforms. Likewise, the security tool  can also be implemented as a software module or program module capable of being incorporated in other software applications and programs, such as the operating system of the computing system  or the tagging tool . In any example, the security tool  can be implemented in any type of conventional proprietary or open-source computer language. When implemented as a software application or program code, the security tool  can be stored in a computer readable storage medium, such as storage , accessible by the computing system . Likewise, during execution, a copy of the security tool  can be stored in the memory .",{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 7A","b":["702","704","502","102","102","502","102","502","102","502","102","102"]},"In , the security module  can invoke the tagging tool  and request information corresponding to the potential threat. The security tool  can request information from the tagging tool  based on any number of parameters associated with the potential threat. For instance, the security tool  can request information from the package event record , the configuration event record , and any change records  based on the date and time of the potential threat. Likewise, the security tool  can request information from the package event record , the configuration event record , and any change records  based on the computing resources (file, directory, network port, network address, etc.) associated with the potential threat.","In , the security module  can receive the information from the tagging tool . In , the security module  can compare the information to the potential threat to determine if the potential threat is an actual threat. For example, if the tagging tool  provides information that corresponds to the potential threat, the security module  can eliminate the potential threat as an actual threat.","In , the process can end, but the process can return to any point and repeat.",{"@attributes":{"id":"p-0102","num":"0101"},"figref":"FIG. 7B","b":["752","754","502","102","102","502","102","502","102","502","102","102"]},"In , the security module  can invoke the tagging tool  and request information corresponding to the actual threat. The security tool  can request information from the tagging tool  based on any number of parameters associated with the actual threat. For instance, the security tool  can request information from the package event record , the configuration event record , and any change records  based on the date and time of the actual threat. Likewise, the security tool  can request information from the package event record , the configuration event record , and any change records  based on the computing resources (file, directory, network port, network address, etc.) associated with the actual threat.","In , the security module  can receive the information from the tagging tool . In , the security module  can compare the information to the actual threat to determine a cause or source of the actual threat. For example, if the tagging tool  provides information that corresponds to the actual threat, the security module  can classify the software package and\/or configuration management action provided in the information as potentially the cause or source of the actual threat.","In , the process can end, but the process can return to any point and repeat.","Certain embodiments may be performed as a computer application or program. The computer program may exist in a variety of forms both active and inactive. For example, the computer program can exist as software program(s) comprised of program instructions in source code, object code, executable code or other formats; firmware program(s); or hardware description language (HDL) files. Any of the above can be embodied on a computer readable medium, which include computer readable storage devices and media, and signals, in compressed or uncompressed form. Exemplary computer readable storage devices and media include conventional computer system RAM (random access memory), ROM (read-only memory), EPROM (erasable, programmable ROM), EEPROM (electrically erasable, programmable ROM), and magnetic or optical disks or tapes. Exemplary computer readable signals, whether modulated using a carrier or not, are signals that a computer system hosting or running the present teachings can be configured to access, including signals downloaded through the Internet or other networks. Concrete examples of the foregoing include distribution of executable software program(s) of the computer program on a CD-ROM or via Internet download. In a sense, the Internet itself, as an abstract entity, is a computer readable medium. The same is true of computer networks in general.","While the teachings have been described with reference to the exemplary embodiments thereof, those skilled in the art will be able to make various modifications to the described embodiments without departing from the true spirit and scope. The terms and descriptions used herein are set forth by way of illustration only and are not meant as limitations. In particular, although the method has been described by examples, the steps of the method may be performed in a different order than illustrated or simultaneously. Furthermore, to the extent that the terms \u201cincluding\u201d, \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description and the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d As used herein, the term \u201cone or more of\u201d with respect to a listing of items such as, for example, A and B, means A alone, B alone, or A and B. Those skilled in the art will recognize that these and other variations are possible within the spirit and scope as defined in the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Various features of the embodiments can be more fully appreciated, as the same become better understood with reference to the following detailed description of the embodiments when considered in connection with the accompanying figures, in which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 7A and 7B"}]},"DETDESC":[{},{}]}
