---
title: Processing a data stream by accessing one or more hardware registers
abstract: Disclosed are a method, a system, and a program product for processing a data stream by accessing one or more hardware registers of a processor. In one or more embodiments, a first program instruction or subroutine can associate a hardware register of the processor with a data stream. With this association, the hardware register can be used as a stream head which can be used by multiple program instructions to access the data stream. In one or more embodiments, data from the data stream can be fetched automatically as needed and with one or more patterns which may include one or more start positions, one or more lengths, one or more strides, etc. to allow the cache to be populated with sufficient amounts of data to reduce memory latency and/or external memory bandwidth when executing an application which accesses the data stream through the one or more registers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08108616&OS=08108616&RS=08108616
owner: International Business Machines Corporation
number: 08108616
owner_city: Armonk
owner_country: US
publication_date: 20090416
---

{"@attributes":{"id":"description"},"GOVINT":[{},{}],"p":["This invention was made with United State Government support under Agreement No. HR0011-07-9-002, awarded by DARPA. THE GOVERNMENT HAS CERTAIN RIGHTS IN THE INVENTION.","1. Technical Field","The present invention generally relates to processing data streams. More specifically, the present invention relates to processing data streams that repetitively access hardware registers of a processor to process a data stream.","2. Description of the Related Art","Typically, streaming processors are coprocessors that interact with a host processor and are generally implemented as an application specific integrated circuit (ASIC). For example, the ASIC can include forty-eight arithmetic logic units (ALUs) that access a register file of the ASIC, and a streaming memory unit transfers streaming data between the register file of the ASIC and an off-chip memory. Using ASIC coprocessors, flexibility is sacrificed. For example, a computing model that is data-centric can work well for a traditional graphical processing unit (GPU) or digital signal processing (DSP) type applications; however, this computing model that is data-centric typically performs poorly for general purpose processing where data access can be more randomized or where memory access patterns are less predictable. Moreover, while an ASIC streaming coprocessor can use arrays, array dimension, array word length, stride, etc. are fixed when processing a specific data stream. Furthermore, there can be additional latency in an application executing on the host processor accessing data processed by the ASIC streaming coprocessor.","Disclosed are a method, a system, and a program product for processing a data stream by accessing one or more hardware registers of a processor. In one or more embodiments, a first program instruction or subroutine can associate a hardware register of the processor with a data stream. With this association, the hardware register can be used as a stream head which can be used by multiple program instructions to access the data stream. For example, data from the data stream can be automatically pre-fetched and used to populate a cache of the processor such that the cache can be used in automatically populating the hardware register with data from the data stream to be used by subsequent program instructions. Since the cache and the register are automatically populated with data from the data stream, memory latency and\/or external memory bandwidth can be reduced when executing an application that accesses the data stream through one or more hardware registers of the processor. In one or more embodiments, the data stream can be referred to as a pattern such that the data pattern can include a start, a length, a stride, etc. to describe how the data is fetched and used to populate the cache. Data from the data stream can be fetched automatically as needed to allow the cache to be populated with sufficient amounts of data to reduce memory latency and\/or external memory bandwidth when executing the application which accesses the data stream through the one or more hardware registers.","Disclosed are a method, a system, and a program product for processing a data stream by accessing one or more hardware registers of a processor. In one or more embodiments, a first program instruction or subroutine can associate a hardware register of the processor with a data stream. With this association, the hardware register can be used as a stream head which can be used by multiple program instructions to access the data stream. For example, data from the data stream can be automatically pre-fetched and used to populate a cache of the processor such that the cache can be used in automatically populating the hardware register with data from the data stream to be used by subsequent program instructions. Since the cache and the register are automatically populated with data from the data stream, memory latency and\/or external memory bandwidth can be reduced when executing an application that accesses the data stream through one or more hardware registers of the processor. In one or more embodiments, the data stream can be referred to as a pattern such that the data pattern can include a start, a length, a stride, etc. to describe how the data is fetched and used to populate the cache. Data from the data stream can be fetched automatically as needed to allow the cache to be populated with sufficient amounts of data to reduce memory latency and\/or external memory bandwidth when executing the application which accesses the data stream through the one or more hardware registers.","Turning now to , there is depicted a block diagram representation of a processor system, according to one or more embodiments. As is illustrated, a processor system  includes at least one chip-level multiprocessor (CMP)  (only one of which is illustrated in ), each of which includes one or more processors A-D (e.g., cores). In one or more embodiments, CMP  can correspond to a node (or a portion of a node) of a high performance computing (HPC) cluster.","Processors A-D can, for example, operate in a simultaneous multithreading (SMT) mode or a single thread (ST) mode. When processors A-D operate in the SMT mode, processors A-D can employ multiple separate instruction fetch address registers to store program counters for multiple threads. In one or more embodiments, each of processors A-D include a respective first level (L1) cache memory A-D that is coupled to a shared second level (L2) cache memory , which is coupled to a shared third level (L3) cache memory  and a fabric controller . In one or more embodiments, fabric controller  can support an interconnect fabric by which processor  can communicate with and share data with other processors.","As is illustrated, fabric controller  is coupled to a memory controller (e.g., included in a Northbridge) , which is coupled to a memory subsystem . For example, memory subsystem  can provide storage where data and\/or processor instructions\/code can be stored and\/or retrieved. In one or more embodiments, memory subsystem  can include a random access memory and\/or computer system memory such as DRAM, SRAM, EDO RAM, Rambus RAM, NVRAM, EPROM, EEPROM, flash memory, etc. Memory subsystem  can include other types of memory as well, or combinations thereof. Memory subsystem  includes an application appropriate amount of volatile and\/or non-volatile memory. For example, memory subsystem  can include an amount of volatile and\/or non-volatile memory to store utility or application  such that application  can be executed by processor .","In one or more embodiments, fabric controller  can be omitted and, in this case, the L2 cache  can be directly connected to memory controller . Fabric controller , when implemented, can facilitate communication between different CMPs and between processors A-D and memory subsystem  and can function as in interface in this manner.","It should be appreciated that the various techniques disclosed herein are equally applicable to systems that employ separate L2 caches for each of processors A-D, as well as systems that employ separate L2 and L3 caches for each of processors A-D. Each of the L1, L2, and L3 caches can be combined instruction and data caches or correspond to separate instruction and data caches. As is shown in , main memory controller  can also coupled to an I\/O channel controller (e.g., included in a Southbridge) .","In one or more embodiments, I\/O channel controller  can provide connectivity and control for one or more input devices and\/or one or more output devices. In one example, the one or more input devices can include a pointing device (e.g., mouse) and\/or a keyboard, among others. In another example, the one or more output devices can include a display, among others. Additionally, a multimedia drive (e.g., compact disk read\/write (CDRW), digital video disk (DVD) drive, etc.) and\/or an USB (universal serial bus) port can be coupled to I\/O channel controller . The multimedia drive and the USB port enable insertion of a removable storage device (e.g., optical disk, \u201cthumb\u201d drive, etc.) on which data\/instructions\/code can be stored and\/or from which data\/instructions\/code can be retrieved. Furthermore, I\/O channel controller  can be coupled to various non-volatile memory such as a magnetic media, e.g., a hard drive, floppy drive, etc., where data\/instructions\/code can be stored and\/or from where data\/instructions\/code can be retrieved. In one or more embodiments, I\/O channel controller  can be coupled to a network interface (e.g., a wired network interface, a wireless network interface, etc.) that can be coupled to a network (e.g., a local area network, a wide area network, a public network such as an Internet, etc.).","In one or more embodiments, various features are completed\/supported via software, firmware, microcode, code, and\/or logic are implemented in processor  and\/or memory . In one example, software\/program instructions\/code\/logic (SPCL)  can be stored in memory  and executed by processor  to complete and\/or implement various features described herein. In one or more embodiments, an operating system (OS)  (e.g., Microsoft Windows\u00ae OS, a trademark of Microsoft Corp, GNU\u00ae\/Linux\u00ae OS, registered trademarks of the Free Software Foundation and The Linux Mark Institute, or Advanced Interactive Executive (AIX) OS, among others) can be used in conjunction with or include SPCL . In a second example, microcode and\/or combinational logic can be used to implement various features. For instance, processors A-D can include respective microcode and\/or combinational logic (MCL) A-D that can be used to implement various features described herein. In one or more embodiments, microcode, microinstructions, and\/or microprogramming can include instructions that control a data path and\/or control flow of processor .","In one example, microcode can be used to implement a processor instruction (e.g., a processor instruction of an instruction set architecture) of processor . For instance, when processor  executes the processor instruction, microcode is executed to implement the processor instruction. In other words, microcode can be referred to as firmware for processor  which can allow processor  to change behavior(s) of or implement new processor instructions available in an instruction set architecture (ISA) of processor . In one or more embodiments, hardware and\/or hardware costs can be reduced using microcode to implement one or more processor instructions of an ISA of a processor.","Turning now to , there is depicted a block diagram representation of hardware registers that produce data or consume data of a data stream through a cache, according to one or more embodiments. As illustrated, registers A-C can be logically coupled to a cache  via MCL  (e.g., one of MCLs A-D), and cache  can be coupled to data stream . As illustrated, cache  can include a queue . In one or more embodiments, MCL  can maintain a mapping between one or more of register A-C and queue .","Turning now to , there is depicted a block diagram representation of hardware registers that produce data or consume data of a data stream through a cache, according to one or more embodiments. As illustrated, registers A-C can be logically coupled to a cache  via MCL  which can be coupled to SPCL . In one or more embodiments, SPCL  can implement an application programming interface (API) that interfaces with and\/or controls MCL . As illustrated, cache  that can include a queue .","In one or more embodiments, SPCL  implements an API that interfaces with MCL  or can implement one or more functionalities of MCL  if MCL  is absent or otherwise not available. In one example, SPCL  can implement at least a portion of a virtual machine that implements MCL  or can implement logic\/code\/functionality of MCL  such that when MCL  is absent or otherwise not available the API of SPCL  functions as though MCL  were present or available. This is further illustrated in .","Turning now to , there is depicted a block diagram representation of hardware registers that produce data or consume data of a data stream through a cache, according to one or more embodiments. As illustrated, registers A-C can be logically coupled to cache  via SPCL , and cache  can be coupled to data stream . As shown, cache  can include a queue . In one or more embodiments, SPCL  can implement at least a portion of a virtual machine and\/or a virtual stream processor that implements MCL . In one or more embodiments, SPCL  can determine whether or not MCL  is available for use.","With reference to , registers A-C can be included in a processor such as a processor of A-D. Cache  can be or be included in a cache of cache , cache , or a first level (L1) cache included in a processor such as one of caches A-D. In one or more embodiments, data stream  can include data from and\/or to memory , data from and\/or to I\/O channel controller , etc. For example, the data from and\/or to I\/O channel controller  can be received from a source and\/or transmitted to a target external to processing system  which is coupled to processing system  via I\/O channel controller . In one instance, processing system  can be coupled to measurement hardware via I\/O channel controller . Measurement hardware can include sensors, transducers, a video acquisition device, an audio acquisition device, a machine vision device, an electric and\/or magnetic field acquisition device, a data acquisition (DAQ) card, and\/or actuators, among others. In a second instance, processing system  can be coupled to devices that output various fields and\/or signals and\/or devices that provide physical control of objects via I\/O channel controller . In one or more embodiments, measurement hardware, devices that output various fields and\/or signals, and\/or devices that provide physical control of objects can be coupled to I\/O channel controller  via a PCI (Peripheral Component Interconnect) bus, a PXI (PCI eXtensions for Instrumentation) bus, VXI (VME (VERSA-module Europe) eXtensions for Instrumentation) bus, a GPIB (General Purpose Interface Bus), a parallel port, and\/or a serial port (e.g., RS-232 port, RS-485 port, UART port, universal serial bus port, IEEE 1394 port, Ethernet port, etc.), among others.","Turning now to , a method for processing a data stream with a hardware register is illustrated, according to one or more embodiments. The method begins at block  where processor  receives a first program instruction. For example, the first program instruction can be from application . The first program instruction can be associated with a hardware register of processor , e.g., one of registers A-C, and a data stream, e.g., data stream . In one example, the program instruction can include a processor instruction of processor  that accesses the hardware register for first data of the data stream. In a second example, the program instruction can include a call to an application programming interface (API) that associates a hardware register of processor  and a data stream. In one or more embodiments, the first program instruction can include a processor instruction from an ISA of processor . At block , MCL  can populate a cache of processor , e.g., cache , with at least a first portion of data from the data stream, where the first portion of the data stream includes the first data. In one example, MCL  can populate a queue implemented in the cache, e.g., queue .","At block , MCL  populates the hardware register with the first data. In one or more embodiments, the first program instruction can cause one or more of blocks  and  to be performed. For example, one or more of blocks  and  can be implemented in a subroutine of MCL . At block , processor  receives a second program instruction that accesses the hardware register. For example, the second program instruction can include a processor instruction from the ISA of processor  that accesses and\/or uses data from the hardware register. In one or more embodiments, a processor instruction accessing a register (e.g., using the register as a source operand) can include \u201cadd\u201d, \u201csubtract\u201d, \u201cdivide\u201d, \u201cmultiply\u201d, \u201ctest\u201d (equality, zero, non-zero, etc.), \u201cmove\u201d, \u201cand\u201d, \u201cor\u201d, \u201cxor\u201d, \u201cshift\u201d, etc. At block , processor  executes the second program instruction.","At block , MCL  populates the hardware register with second data from the first portion of the data. At block , processor  receives a third program instruction, where the third program instruction accesses the hardware register. For example, the third program instruction can include a processor instruction from the ISA of processor  that accesses and\/or uses data from the hardware register. At block , processor  executes the third program instruction. In one or more embodiments, two or more of the first, second, and third program instructions are included in a same thread and\/or application (e.g., application ). In the fashion of the method of , the hardware register is automatically populated with successive data from the data stream which is available for successive program instructions of the thread or application which is illustrated in more detail in .","Turning now to , a method for processing a data stream with a hardware register is illustrated, according to one or more embodiments. The method begins at block  where MCL  populates cache  with data from the data stream. In one example, MCL  can populate queue  with the data from the data stream. At block , MCL  populates the hardware register with data of the data stream from cache . In one or more embodiments, MCL  populates the hardware register with data of the data stream from queue  of cache . At block , processor  receives a program instruction that accesses the hardware register. For example, the program instruction can include a processor instruction from the ISA of processor  that accesses and\/or uses data from the hardware register. At block , processor  executes the second program instruction and the method proceeds to block . In one or more embodiments, block - can be repeated a number of times.","As illustrated in the method of , the hardware register is automatically populated with successive data from the data stream which is available for successive program instructions. In other words, the hardware register can be referred to as a stream head which can be used by multiple program instructions in a sequence. Moreover, since the cache and the register are automatically populated with data from the data stream, memory latency and\/or external memory bandwidth can be reduced when executing application  that accesses a data stream through one or more hardware registers of a processor. In one or more embodiments, the data stream can be referred to as a pattern such that the data pattern may include a start, a length, a stride, etc. to describe how the data is fetched and used to populate the cache. Data from the data stream can be fetched automatically as needed to allow the cache to be populated with sufficient amounts of data to reduce memory latency and\/or external memory bandwidth when executing application  which accesses the data stream through one or more hardware registers.","As  are described above with reference to MCL , one or more of MCL A-D can be used where MCL  is referenced. In one or more embodiments, SPCL  could be used were MCL  is referenced or SPCL  can interface with and\/or control MCL . In one example, SPCL  can provide an API through a library to which application  can be linked. In one or more embodiments, application  and SPCL  can be combined, e.g., at compile and\/or assemble time. For example, application  can be assembled and\/or compiled in such a way that SPCL  is integrated into application  using macros of a macro assembler and\/or pre-processing instructions of a compiler to use macros and\/or to call one or more subroutines of an API of SPCL  when the hardware register would have been accessed by application .","Turning now to , a method for producing a data stream with a hardware register is illustrated, according to one or more embodiments. The method begins at block  where processor  receives a first program instruction. For example, the first program instruction can be from application . For instance, the first program instruction can include a processor instruction of the ISA of processor . At block , processor  executes the first program instruction. When the first program instruction is executed, an associated between a cache of processor , e.g., cache , and a hardware register of processor , e.g., one of registers A-C, can be created. In one or more embodiments, the data stored in the hardware register is transferred (e.g., copied) to the cache of processor . For example, the data stored in the hardware register can be transferred to the cache when a program instruction from a first thread uses the hardware register to store data. In this fashion, if a program instruction from a second thread uses the hardware register to store data, that data will not be transferred to the cache. In one or more embodiments, data stored in the hardware register is transferred (e.g., copied) to a queue implemented in the cache of processor .","At block , processor  receives a second program instruction, where the second program instruction stores data in the hardware register. At block , processor  executes the second program instruction, and processor  stores the data in the hardware register, at block . At block , MCL  transfers (e.g., copies) the data stored in the hardware register to the cache of processor . In one example, MCL  can populate a queue implemented in the cache, e.g., queue , with the data stored in the hardware register. In one or more embodiments, the data stored in the hardware register can be transferred to the cache when a program instruction from a first thread uses the hardware register to store data. In this fashion, if a program instruction from a second thread uses the hardware register to store data, that data will not be transferred to the cache.","At block , processor  receives a third program instruction, where the third program instruction stores data in the hardware register. At block , processor  executes the second program instruction, and processor  stores the data in the hardware register, at block . At block , MCL A transfers (e.g., copies) the data stored in the hardware register to the cache of processor . In the fashion of the method of , the cache is automatically populated with successive data stored in the hardware register which is illustrated in more detail in .","Turning now to , a method for producing a data stream with a hardware register is illustrated, according to one or more embodiments. The method begins at block  where processor  receives a program instruction. For example, the program instruction can be from application . For instance, the program instruction can include a processor instruction of the ISA of processor . At block , processor  executes the program instruction, where the program instruction causes processor  to store data in the hardware register at block . At block , MCL  transfers (e.g., copies) the data stored in the hardware register to cache , and the method proceeds to block . As illustrated in , the cache is automatically populated with successive data stored in the hardware register. In one or more embodiments, block - can be repeated a number of times.","As  are described above with reference to MCL , one or more of MCL A-D can be used where MCL  is referenced. In one or more embodiments, SPCL  could be used were MCL  is referenced or SPCL  can interface with and\/or control MCL . In one example, SPCL  can provide an API through a library to which application  can be linked. In one or more embodiments, application  and SPCL  can be combined, e.g., at compile and\/or assemble time. For example, application  can be assembled and\/or compiled in such a way that SPCL  is integrated into application  using macros of a macro assembler and\/or pre-processing instructions of a compiler to use macros and\/or to call one or more subroutines of an API of SPCL  when the hardware register would have been accessed by application .","Although the methods illustrated in  describe one hardware register, multiple hardware registers can be used instead of the one hardware register, according to one or more embodiments. In one example, the data stream can include frames, where each frame may include a length that exceeds a length of the hardware register. Accordingly, multiple hardware register can be populated such that each frame can be available via the multiple registers for a sequence of program instructions of application . In a second example, one or more of processors A-D can be superscalar processors, and multiple hardware registers can be automatically populated with data from the data stream. Multiple program instructions from application  can operate simultaneously on different portions of the data stream via the multiple registers. In one or more instances, one or more of processors A-D can operate in single instruction multiple data (SIMD) mode and\/or multiple instructions multiple data (MIMD) mode in executing application  to simultaneously process different portions of the data stream via the multiple registers. Although the methods illustrated in  may be described with reference to components shown in , it should be understood that this is merely for convenience and alternative components and\/or configurations thereof can be employed in one or more implementations.","In one or more embodiments, application  can use and\/or interface with MCL  and\/or SPCL  in processing and\/or producing various data streams. In one example, the data stream may be in accordance with a Motion Picture Editors Guild (MPEG) standard (or proposed standard) and\/or one or more audio and\/or video codecs. In a second example, the data stream may include various signals. In one instance, a discrete Fourier transform may be performed on the signal. In a third example, the data stream can include biometric data. For instance, the biometric data can include facial and\/or audio information of one or more human beings' data, and application  can be used to determine patterns to identify and\/or isolate one or more human beings and\/or words (written or spoken) included in the data stream.","In one or more embodiments, application  can use the API of SPCL  to dynamically configure access patterns of the data stream. For example, the data stream can include audio and video data, and application  can use the API of SPCL  to dynamically adjust to processing audio portions and video portions of the data stream. For instance, the data stream can include a first data structure that includes audio data of the data stream and include a second data structure that includes video data of the data stream. The data embodied in the first data structure can be made available through a first set of hardware registers (e.g., the first two hardware registers) of a processor, and the data embodied in the second data structure can be made available through a second set of hardware registers (e.g., the next three hardware registers) of the processor.","In one or more embodiments, the data stream can be dependent upon a data structure. For example, the data structure can include a linked list, a binary tree, a multi-branch tree, an indexed hash table, etc., and the methods described above can automatically access the data structure without an application (e.g., application ) accessing the data structure directly. In one or more embodiments, the data stream can be dependent upon a data processing scheme and\/or method. In one example, the data stream can include a compressed file. For instance, the methods described above can access the compressed file and automatically present uncompressed portions of the data of the compressed file through one or more hardware registers to an application. In another example, data stored in one or more hardware registers can be compressed when the data is transferred to the cache or when the data is transferred from the cache to the data stream.","In the flow charts above, one or more of the methods and\/or processes are embodied in a computer readable medium including computer readable code such that a series of steps are performed when the computer readable code is executed by a processor. In one or more implementations, certain processes of the methods and\/or processes are combined, performed simultaneously, concurrently (e.g., scheduled quickly enough in time to appear simultaneous to a person), or in a different order, or perhaps omitted, without deviating from the spirit and scope of the invention. Thus, while the method(s) and\/or process(es) are described and illustrated in a particular sequence, use of a specific sequence of processes is not meant to imply any limitations on the invention. Changes may be made with regards to the sequence of processes without departing from the spirit or scope of the present invention. Use of a particular sequence is therefore, not to be taken in a limiting sense, and the scope of the present invention extends to the appended claims and equivalents thereof.","As will be appreciated by one skilled in the art, the present invention may be embodied as a method, process, system, and\/or computer program product. Accordingly, the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule,\u201d \u201clogic\u201d, and\/or \u201csystem.\u201d Furthermore, the present invention may take the form of an article of manufacture having a computer program product with a computer-usable storage medium having computer-executable program instructions\/code embodied in or on the medium.","As will be further appreciated, the method(s) and\/or process(es) in embodiments of the present invention may be implemented using any combination of software, firmware, microcode, and\/or hardware. As a preparatory step to practicing the invention in software, the programming code (whether software or firmware) will typically be stored in one or more machine readable storage mediums such as fixed (hard) drives, diskettes, magnetic disks, optical disks, magnetic tape, semiconductor memories such as RAMs, ROMs, PROMs, EPROMs, EEPROMs, etc., thereby making an article of manufacture, in one or more embodiments. The medium may be electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation medium. Further, the medium may be any apparatus that may include, store, communicate, propagate, or transport the program for use by or in connection with the execution system, apparatus, or device. The method(s) and\/or process(es) disclosed herein may be practiced by combining one or more machine-readable storage devices including the code\/logic according to the described embodiment(s) with appropriate processing hardware to execute and\/or implement the code\/logic included therein. In general, the term computer, computer system, or data processing system can be broadly defined to encompass any device having a processor (or processing unit) which executes instructions\/code from a memory medium.","While the invention has been described with reference to exemplary embodiments, it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition, modifications may be made to adapt a particular system, device or component thereof to the teachings of the invention without departing from the essential scope thereof. Therefore, it is intended that the invention not be limited to the particular embodiments disclosed for carrying out this invention, but that the invention will include all embodiments falling within the scope of the appended claims. Moreover, use of the terms first, second, etc. can denote an order if specified, or the terms first, second, etc. can be used to distinguish one element from another without an ordered imposed."],"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention itself, as well as advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1D"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3B"}]},"DETDESC":[{},{}]}
