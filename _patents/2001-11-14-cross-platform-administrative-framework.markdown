---
title: Cross platform administrative framework
abstract: An event service system includes an administrative framework utilizing CORBA interfaces, an administrative system interface coupled to the administrative framework, and at least one language-specific interface coupled to the administrative system interface and configured to provide a mechanism for communication between the administrative system interface and a customer administration application. The administrative system interface is configured to enable clients to manage the event service system. The administrative framework includes a system administrative subsystem, a data management subsystem, and an event service framework.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06976241&OS=06976241&RS=06976241
owner: Intel Corporation
number: 06976241
owner_city: Santa Clara
owner_country: US
publication_date: 20011114
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention is related to cross platform administrative framework in a system for providing various services. More specifically, the present invention is related to architectural mechanisms for administrative software for performing administration, configuration, system initialization, fault monitoring and event notification in such a system.","Presently, Windows NT\u2122 is the only operating system with any type of architecture. However, the Windows NT\u2122 framework is operating system specific and cannot be converted or extended to the Unix operating system.","The Common Object Request Broker Architecture (CORBA) is an architecture and specification standard for creating, distributing, and managing distributed program objects in a network. CORBA is a software backend architecture. CORBA allows programs at different locations and developed by different vendors to communicate in a network through an \u201cinterface broker.\u201d The International Organization for Standardization (ISO) has sanctioned CORBA as the standard architecture for distributed software objects (which are also known as network components).","One essential concept in CORBA is the Object Request Broker (ORB). ORB support in a network of clients and servers on different computers means that a client program (which may itself be a network component) can request a service (e.g., a collection of cohesive software functions that together present a server-like capability to multiple clients; services may be, for example, remotely invokable by its clients) from a server program or object without regard for its physical location or its implementation. A service may be thought of as a software program that provides specific functionality. For example, the term network services may refer to software programs that transmit data or provide for conversion of data in a network. Similarly, database services may provide for the storage and retrieval of data in a database. In CORBA, the ORB is the software that acts as a \u201cbroker\u201d between a client request for a service from a distributed software object or network component and the completion of that request. In this way, network components can find out about each other and exchange interface information as they are running.","For reference and clarification of the explanation of the exemplary embodiment of the invention, the following explanation of terminology is provided. An event service framework allows subsystems of a service system to send events to each other without having the supplier of the event be required to know the consumers of the event. A consumer is any entity in the event service framework that receives asynchronous events by registering for the event. A supplier is any entity in the event service framework that injects events into the event service framework. A channel is the event service entity that couples consumers with supplier events. A device is a computer telephone device, e.g., a hardware card.","Cross platform administrative frameworks designed in accordance with embodiments of the invention provide extensible, generic frameworks to perform administrative functions. Such cross platform administrative frameworks provide architectural mechanisms for administrative software that performs administration, configuration, system initialization, fault monitoring and event notifications in a system for providing various services, i.e., a service system.","Such event service frameworks may also enable translation into a single source code base for all operating systems. As a result, development time for operating systems may be reduced along with product cycles and maintenance efforts.","These event service frameworks may make use of and\/or be compatible with standards-based CORBA. Utilizing CORBA provides a fault tolerance framework, a distributed system, interprocess communication, cross-platform tools and multithreading policies. CORBA provides the underlying framework for the cross platform frameworks designed in accordance with at least one embodiment of the invention. As a result of implementing the framework using CORBA, these frameworks may provide improved system fault tolerance.","These event service frameworks may also allow for implementation of systems in a distributed manner, e.g., based on distributed programming network principles. As a result, the event service frameworks may serve as mechanisms to solve problems associated with administration and configuration of remote systems.","These event service frameworks may also provide high availability rather than a specific entry level of ability provided by Windows NT based architecture.","The structure of these event service frameworks may also provide the ability to easily extend the event service framework to include new technologies using plug-in applications. As a result, new technologies may be integrated into the frameworks more easily.","Such event service frameworks may also provide the ability to replace components that perform clocking and time slot management.","Administrative frameworks designed in accordance with the embodiments of the invention may be used to provide cross platform solutions for system initialization, configuration, management and fault monitoring for a service system. The administrative frameworks designed in accordance with at least one embodiment of the invention may support various operating system versions including, for example, LINUX starting with Redhat version 6.2, Solaris\u2122 versions 7 and 8, and Windows\u2122 2000.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","120","110","112","114","116","118","112","118","110","130"]},"The administrative system interface  provides a facade that enables clients to manage the event service system. The administrative system interface  component saves the client from dealing with the CORBA interfaces, which are used by the administrative framework . The administrative system interface  provides a mechanism to specify and retrieve configuration attributes for devices, start and stop the service system and retrieve and specify time slot information. The constituent interfaces of the administrative system interface  can be categorized into initialization, device management and time slot management categories. All calls into the administrative system interface  may go through to the system controller (explained below) for further processing.","The various third party tools  may include, for example, an ORBacus\u2122 ORB , Orbacus\u2122 Java threads , an IBM XML parser , a Ramia Database , etc.","The administrative framework  may include a system administrative subsystem , a fault detection subsystem , a device detection framework , a live insertion\/removal subsystem  (supported by a live insertion\/removal server), a data management subsystem , device initialization framework  various technology specific utilities including a time slot assignment utility (which may be uspported by one or more servers) , a clustering utility , an event service framework , a system logger , various libraries, and replaceable management applications, e.g., a clock daemon framework  and a clocking service , a downloader framework  and a database . These subsystems, frameworks, components, utilities, libraries and applications participate in the administrative framework by performing specific functions.","Plug-in frameworks for a device detection application or for a device initialization application, associated with the device detection framework  or device initialization framework  illustrated in , respectively, need not expose any CORBA implementation to the customer. The detection frameworks may be mainly responsible for device detection and retrieval of device configuration information in the case of a device detection application or device initialization and retrieval for the device initialization application. Both a detector C++ application and an initializer C++ application may be system-specific or a third party detector application supplied by an external customer.","Administrative frameworks designed in accordance with at least one embodiment of the invention, e.g., administrative framework  illustrated in , may maintain a large quantity of system initialization and configuration data. As administrative framework software may grow from a downloader to ELHA to high availability, such data may increase from simple one-time configuration data to a large quantity of run-time data as well. As a result, a service system may have increased utility as a result of incorporating a centralized data storage device(s) to store data reliably.","The event service framework  allows service system subsystems to send events to each other without having the supplier of the event be required to know the consumers of the event. However, the event service framework  may also include an event notification service that may provide the capability of a user-friendly layer on top of the service, which may make the service more easily usable. This event service framework  may make use of an event mechanism provided by a CORBA ORB vendor.","A database  may be used in the administrative framework  and supplied as part of the administrative framework . This administrative framework database  may be used, for example, if there is a need for centralized, persistent and reliable storage for all administrative framework data. Alternatively, the database  may be used if there is a need for a database that is cross-platform and is not tied down to operating system specific abstractions such as file system, etc. Moreover, the use of such a database  may be advisable if the administrative framework  utilizes a large quantity of relational data. Further, as administrative frameworks evolve, the administrative data may increase due to additional system requirements and functionalities. As a result, such a database structure may provide necessary room for growth.","The system administrative subsystem  is the entry point into the administrative framework . The administrative service interface  uses the system administrative subsystem  to perform specific administrative functions. The system administrative subsystem  may be implemented as a collection of services that perform various system functions. The primary role of this subsystem  is the initialization of administrative services and invocation of appropriate services for performing administrative activities.","An embodiment of the system administrative subsystem  is illustrated in  in greater detail. As shown in , the IMR  may be needed to manage both system startup and shutdown. The IMR  may control the system startup via a system configuration file written XML and may be invoked on system startup by RC script on a UNIX platform. Otherwise, the IMR  may be an NT\/2000 service that may be automatically started by the system controller . As a result, the NT\/2000 service may have the responsibility of starting up all the administrative services in the appropriate sequence during system startup.","The system controller , which may be supported by one or more servers, may be responsible for various system level functionality in the administrative framework  (illustrated in FIG. ). For example, all requests from the customer administration application , illustrated in , via the administrative system interface  may first arrive at the system controller . The system controller  may have the responsibility of handling requested tasks by delegating the requests to appropriate services for action. While doing this, the system controller  may apply necessary business logic and system level synchronization rules required to process the requests. The system controller  may also consume and manage live insertion and removal events. The system controller  may also load and manage system configuration data via a XML file.","The system controller  may synchronize and manage the service system's business rules and logic using various system level synchronization rules that may be applied to accept, reject or block system requests coming into the administrative framework, e.g., during system detection, when a customer request for a system shutdown gets rejected, etc. All requests from the administrative system interface  may be handled by the functionality of the system controller . Given an administrative system interface request, the controller  may mediate the request by finding and invoking the appropriate services that are responsible for such a requested functionality.","The system controller  may also handle live, device insertion or removal events via eventing framework (which may include a CORBA implemented event notification service) included or utilized by the event service framework  (explained in detail below). Depending on the state of the administrative framework , the system controller  may be responsible for processing the live, device insertion or removal events.","The fault detection subsystem  illustrated in  may include a fault detector proxy loader component and a fault detector proxy component. The fault detector proxy loader component is the component that initiates fault detection. The fault detection subsystem  may be a collection of components that aid in the detection of, for example, Time Division Multiplexing (TDM) bus faults and processor failures.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 3","b":["145","1","310","310"]},"The fault detector proxy component  may be configured to be the component that starts up during system startup. The fault detector proxy loader component  may also be configured to control the fault monitoring startup. The fault detector proxy component  may monitor processor faults and TDM bus faults by talking to an operating system kernel. The proxy component  may be configured to communicate these faults to the rest of the administrative framework  via the event service framework  (as illustrated in FIG. ). The proxy component  may be configured to start monitoring the processor faults when triggered by the system monitor (supported by, for example, a system monitor server) upon a download processor complete event. The proxy component  starts monitoring the TDM bus faults when triggered by the proxy loader component  upon a bus configuration complete event.","The device detection framework  illustrated in  may be configured to be responsible for detecting devices and storing the device information in the framework-specific database . The services of this device detection framework  may be invoked during auto-detection of devices at system startup. The services may also get invoked during a live insertion and removal event.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4","FIG. 4"],"b":["150","1","410","420","430","410","430","410","410","205","7"]},"The device detection framework  may be supported by one or more device detection servers.","For every technology supported by the framework, a specific detector factory  may be implemented and registered with the detector controller . The main task of the detector factory  may be to create and control the life cycle of the detector service .","The detector service  may be configured to gather the device capabilities and updates the database with the discovered device. The detector service  may also be configured to perform the requested action and terminate that action. The detector service  may also be the component that actually performs device detection at the physical level. The detector factory  may be the component that creates the requested detector component for the specific instance of detection activity. The detector controller  may be a service that controls the process of detection of devices. Any business rules or logic to be applied during the process of detection may reside in the detector controller .","A library of the device detection framework  may include, for example a detector controller server component that provides a mechanism for the administrative framework  to locate and communicate with a device detector application via a CORBA mechanism. The library of the device detection framework  may be, for example, a C++ library that is linked by an associated detector application. This framework  may run under its own thread that is managed by the ORB.","The device detection framework  may communicate with a corresponding detector application via a detection controller adaptor. The detection controller adapter may be a C++ abstract class that defines the generic interfaces that a detection application must implement to participate in the detection functionalities. The detector framework  may communicate with the administrative framework, e.g., administrative framework  illustrated in , requests to the detection application by adapting to the adapter interfaces.","An adaptor agent detection sub-framework may also be used, e.g., a library, which is a subsystem of the device detection main framework. Customer applications are not required to extend this sub-framework. However, DM3 and springware detection applications required to make use of this sub-framework.","A device detection controller adaptor agent may also be implemented, which is a virtual base class that is implemented by the Detection Application. The actual device detection for DM3 and Springware devices may be implemented here. Each adaptor agent runs in its own thread of execution that is different from the device detection controller adaptor. The adaptor agent is instantiated by the device detector factory  that maintains a pool of these agents. Since each agent runs in its own thread of execution, parallel detection of devices can be accomplished.","A detector customer application configuration framework automatically registers with the device detector controller . Therefore, adding a third party detector component is easy since the detector framework register itself with the administrative frameworks' detector controller.","The components in the device detection framework  may be configured to follow a controller factory pattern, e.g., the controller factory pattern illustrated in FIG. . The factory pattern allows the administrative framework to abstract different types of technologies. Two examples of such abstractions may be found in the detection and initialization subsystems , , respectively.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 5","b":["510","520","510","510","520","530","520","520","530","510"]},"The factory pattern illustrated in  solves various problems including isolation of the functionality associated with technology downloading. As a result of isolating the downloading functionality, maintenance and troubleshooting are simplified. Additionally, the use of such a factory pattern ensures that a downloader controller incorporated in the downloader framework  is not concerned with technology related objects. As a result, ease of maintenance is improved. To add a new technology into the downloader framework , a developer may simply create the pattern given for the new technology. The rest of the system need not be disturbed.","The use of factories adds more flexebility for future operation. For example, factories can keep count of the all created objects. As a result, this information can be used for gathering statistics about how many downloaders are employed at any given time. As a result, a load balancing infrastructure may then be implemented to make use of this information.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 6","FIG. 6","FIG. 1"],"b":["155","610","610","610","100","180","1"]},{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 7","FIG. 7"],"b":["160","1","710","205","1","710","205"]},"The data manager  may provide data retrieval and storage functionality. This data manager  also handles all the device related data actions, e.g., inserting new data, retrieving existing data, deleting and updating device data in the database . By incorporating the data manager component  in the administrative framework , the database  may be insulated from direct access by other administrative components. In other words, administrative components need not and may not be permitted to access the database  directly. Rather, the device data manager  may be the single point of entry into the database  both for data storage and retrieval. With such a configuration, all administrative components need not be required to write database specific code.","Additionally, external customers need only access the database  via administrative framework business components, never needing to directly access the database . Another advantage resulting from this insulation is that changes to the database  only require that the device data manager  be altered accordingly. As a result, the interfaces between the device data manager  and the other administrative components, which are much more numerous and difficult to manage, may continue unchanged.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 8","FIG. 8"],"b":["165","5","810","820","830"]},"The one or more initialization services  may perform technology-specific initialization of devices. The one or more initialization factories  may be configured to create these technology-specific initialization services. The initialization controller  may be configured to apply business rules on how to initiate the initialization of multiple technologies so as to control the initialization of these technology-specific initialization services.","The factories  may be configured to create the requested initialization components for the specific instances of initialization activity. The initialization services  may be the components that actually perform the initialization at the physical level. The initialization services  may be configured to perform the requested actions and terminate those actions.","The controller  may be configured to also locate the appropriate technology initialization service  to perform the requested initialization task by using the initialization factories . The controller  may also support a service that controls the process of downloading via the downloader framework  of FIG. . Any business rules or logic to be applied during that process of initialization may reside in the controller .","The plug-in framework for the device initialization (i.e., downloading) does not expose any CORBA implementation to the customer. The initialization framework  (of ) is mainly responsible for device downloading and other initialization steps. For example, DM3 initialization process is composed of DM3 device firmware downloading, device cluster allocation and virtual device configuration via a RegVox application.","The initialization framework library may contain an initializer controller server component that provides a mechanism for the administrative framework  (of ) to locate and communicate with the initialization application via a CORBA mechanism. The initialization framework  may be a C++ library that gets linked by the initialization application. This initialization framework may run under its own thread that is managed by the ORB POA. The initialization framework may communicate with the initialization application via a device initializer controller adaptor. An initializer controller server component may expose various interfaces, e.g., InitializeAll, InitializeDevice, UninitializeAll, UninitializeDevice, etc.","The initialization controller adapter may be, for example, a C++ abstract class that defines the generic interfaces that an initializer application must implement to participate in the initialization functionalities. The framework may communicate administrative framework requests to the initialization application by adapting to adapter interfaces.","The initialization framework may also use an adaptor agent intialization subframework, which is a library. Customer applications are not required to extend this subframework. However, DM3 and Springware initialization applications are required to make use of this sub-framework. The initialization adaptor agent is a virtual base class that is implemented by the initialization application. The actual device initialization for DM3 and Springware devices may be implemented here. Each initialization adaptor agent runs in its own thread of execution that is different from the device initialization controller adaptor. The initialization adaptor agent is instantiated by the device initialization factory that maintains a pool of these agents. Since each agent runs in its own thread of execution, parallel device initialization (i.e., downloading) can be accomplished.","A device initialization customer application configuration framework automatically registers with the main administrative framework initialization framework  (illustrated in FIG. ). Therefore, adding a third party initializer component is simple and manageable via this framework.","Returning to , the time slot assignment framework  may be configured to be used to initialize time slots required for various devices in the service system. This timeslot assignment framework  may be invoked during service system initialization after the devices have been started up. This assignment framework  may also interface with a time slot manager application included in the replaceable management applications discussed below to claim or release time slots. The timeslot assignment framework  may be used for, for example, Springware\u2122 timeslot assignment.","The clustering framework  illustrated in the administrative framework  shown in  may be used for DM3 clustering. The clustering framework  may be configured to perform clustering of components on the devices in the service system. The clustering framework  may include, for example, a utility that is executed upon service system startup once the initialization of the constituent devices is complete. The clustering framework  may also interact with the device data manager  of the data management subsystem, e.g., , illustrated in , to retrieve cluster configuration parameters. The framework  may also be configured to interact with the time slot assignment framework  to claim or release time slots.","The event service framework  may be configured to provide event notification for the service system. The event service framework  may utilize a model that includes channels, suppliers and consumers for event notification.","The system logger  may be configured to log information, errors and other messages sent by components belonging to the administrative framework  illustrated in FIG. . The system logger  may provide a service that allows for components of the administrative framework  to log informational, warning and error messages.","As illustrated in , the administrative system interface  is the interface that provides administrative functionality including, for example, device management, timeslot allocation, etc. The administrative system interface  forwards calls from the customer administrative application  to the system administrative subsystem .","The administrative system interface  may also be used by customers that are external to the service system so that the customers may manipulate the administrative framework . The administrative system interface  may also work in combination with and utilize an Simple Network Management Protocol (SNMP) agent that may expose administrative interfaces that can be invoked to perform administrative related activities, e.g., starting and\/or stopping devices, diagnosing devises, etc. The administrative system interface may also shield out these customers from the ORB and other layers of the administrative framework.","Such an SNMP agent and a language specific wrapper library may be linked with an administrative system interface library (not shown). Such a library may be utilized by the system controller  of the system administrative subsystem  to retrieve administration commands. As such, such an administrative system interface library may be configured as a single entry point for all administration functionalities.","The timeslot assignment framework , clocking daemon framework  and clocking service  may be service replaceable management applications that may be implemented as administrative plug-in applications. Each of these applications may be thought of as a customer of the administrative framework. The clock daemon framework  may be configured to provide a service that configures the bus once the devices have been detected. The clock daemon framework  may also apply rules to the device capabilities and arrive at a bus configuration. The daemon framework  may also interface with the device data manager  of the data management subsystem  illustrated in  to retrieve and save time slot data configurations.","Administrative frameworks designed in accordance with at least one the exemplary embodiments of the invention may utilize a mechanism for identifying and advertising services, i.e., a naming service. Such a mechanism allows customers to discover services provided by the framework. The naming service provided by the ORB vendor may be used to implement this advertising and resolving service.","Applications not belonging to administrative framework can be invoked during system startup and shutdown. External customers to the administrative framework  illustrated in  have at least two ways to hook to the framework. First, an executable application may be written and added to a system configuration file. Second, a plug-in application may be implemented using CORBA.","If an external customer has an executable application written and added to the system configuration file, third party executable applications may be integrated into the administrative framework. Thus, a system configuration XML file may allow a system administrator to enter control information related to system\/device starts and stop sequences. The system administrator may also able to enter various types of control information including what applications are to be run during system initialization and shutdown, when the applications are to be run, command line options (if any), and specification of system global parameters.","The attached Appendix includes an XML file representing one implementation of the configuration files for a cross-platform administrative framework designed in accordance with at least one exemplary embodiment of the invention. This XML file contains global definitions, system startup sequences and initialization rules.","In accordance with the second way of hooking up external customers to the framework, e.g., implementing a plug-in application\/framework, the clock daemon, time slot administration, device detection, and device initialization frameworks may all implement a CORBA component, i.e., a CORBA servant, that may be used by the administrative framework to locate requested services and communicate.","The CORBA implementation may be hidden from the customer. As a result, the customer may be spared from having to understand CORBA concepts in detail. In addition, all of these four frameworks, i.e., clock daemon, time slot administration device detection and device initialization frameworks, may have a default implementation that may be a configuration provided with the administrative framework. The customer can choose to replace the clock daemon and time slot manager applications with its own implementation by simply linking with their respective framework libraries. In addition, the customer can also hook up their technology device detection and initialization applications. This allows the administrative frameworks to handle third party devices.","A plug-in framework for the clock daemon application need not expose any CORBA implementation to the customer. Rather, the clock daemon application may be system-specific, a customer-developed or a third-party clock daemon application. The administrative framework does not have to differentiate between these clock daemon applications.","The configuration shown in  illustrates one example of a clock daemon application  running on top of a clock daemon framework. The clock daemon application  may use a clock API library  to communicate clocking API commands to the hardware included in the administrative framework . The clock daemon framework library  may provide a mechanism for the administrative framework  to locate and communicate to the clock daemon application  via a CORBA mechanism. The framework of the clock daemon framework library  may be a C++ library that gets linked by the clock daemon application . The clock daemon framework may contain a clock daemon proxy server that allows the administrative framework  to locate and communicate with the clock daemon application via the clock daemon adapter object .","The clock daemon adapter object  may be a C++ abstract class that defines the generic interfaces that a clock daemon application implements to participate in the clock daemon functionalities. The administrative framework  may be configured to communicate administrative framework requests to the clock daemon application  by adapting to the adapter interfaces, e.g., the C interface , administrative service interface Internal C++ interface  and event C++ interface .",{"@attributes":{"id":"p-0093","num":"0092"},"figref":["FIG. 10","FIG. 10"],"b":["1000","1010","190","1","1020","1030","1030","1040","100","1"]},"The system controller, e.g., the system controller included in the system administrative subsystem  of , can then find the clock daemon via the naming service. Once the system controller has a reference to the clock daemon framework service, it can make calls to its interface at  via the CORBA interface. The clock daemon framework may also use the adapter object to delegate the actual request to the clock daemon application.","At , the clock daemon application may perform Time Division Multiplexing (TDM) calculations, using the data manager service, e.g., the data manager service  of the data management framework  illustrated in FIG. . Control then proceeds to , at which the clock daemon framework saves the new TDM configuration in the administrative framework database. The downloader controller, e.g., included in the downloader  in the administrative framework  of  may use this information.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 11","b":["1100","1110","1110","1110"]},"The library included in the time slot manager daemon framework  provides a mechanism for the administrative framework  (e.g., the administrative framework  illustrated in ) to locate and communicate with the time slot manager daemon application  via a CORBA mechanism. The time slot manager daemon framework  may be a C++ library that gets linked by the time slot manager application . The framework may contain a time slot manager daemon proxy server that allows the administrative framework to locate and communicate with the time slot manager daemon via the time slot manager daemon adapter .","The time slot manager adapter  may be a C++ abstract class that defines the generic interfaces that a time slot manager daemon application  must implement to participate in the time slot manager functionalities. The time slot manager framework  may communicate administrative framework requests to the time slot manager application by adapting to the adapter interfaces, e.g., the event C++ interface .","The configuration for the external time slot manager daemon may be specified by the system administrator in the system configuration XML files similar to the clock daemon. The configuration may be the executable name and command line options.","Returning to the IMR illustrated as part of the system administration subsystem  illustrated in , the IMR is the application that starts up the naming service and all the administrative framework servers in the order given in the system configuration file written in, e.g., XML. In the case of the time slot manager daemon application, the time slot manager daemon application upon startup, instantiates the time slot framework object. The application must supply the domain name or IP address of the system host. The time slot framework creates a thread that binds to the ORB and registers this CORBA service with the naming service. At this point, it waits for time slot management request from the administrative frameworks or run time applications. An application can allocate or deallocate time slot interfaces to the time slot manager application via the time slot framework. The time slot framework makes use of the time slot manager adapter object to carry the actual commands. The customer who wishes to override the default system-specific time slot manager application may implement the adapter object.","When a device is to be stopped either from an explicit API command or from a live, device removal request, a particular protocol sequence of commands is executed, i.e., a stop device protocol. This protocol is designed to allow external applications to clean up their respective applications to account for a removal or stopping of a device. For example, during device removal, the protocol may be implemented when a device is about to be stopped.","One example of a method for implementing the stop device protocol is illustrated in FIG. . As shown in , the method begins at , and control proceeds to  at which an operator removes a device from its chassi or issues a stop command via the NCM API. Subsequently, at , the system controller component is invoked to stop a single device. Control then proceeds to , at which the system controller component sends out an \u201cAbout To Stop\u201d event via the event service. The event carries a Device Addressable Unit Identifier (AUI).","The AUI allows the administrative framework to uniquely identify service system entities. These entities may range from a physical device to processors, recorders, players etc. Conventionally, the AUI includes a combination of the family name and the device name. To the contrary, in accordance with the exemplary embodiments of the invention, the AUI is simply a sequential key generated by the database engine. The sequential key may be an unsigned long value, which is sufficiently large to guarantee uniqueness. The AUI can only be obtained via certain function calls to the device data manager subsystem.","In accordance with the exemplary embodiments of the invention, any customer or subsystem that manipulates administrative framework resources uses the AUIs when calling into the device data manager The device data manager may build its data relations based on the AUIs and may allow various query types based on AUIs. The node ID may be incorporated in the AUI.","Control then proceeds to , at which the system controller component included in the system administration subsystem calls a Stop Device Protocol Component (SDPC) BeginAboutStopProtocol with the device AUI to start executing an \u201cAbout To Stop\u201d sequence.","The SDPC may be a cross platform component that may be implemented, for example, as a DLL in Windows\u2122, as a LIB.SO in UNIX, etc. The SDPC may be composed of a SDPC controller and a customer component. The SDPC controller component may expose all external interfaces used by customers such as the system controller. The SDPC may start the \u201cAbout To Stop Protocol\u201d sequence process.","Control then proceeds to , at which the SDPC starts a \u201cWait for Stop Complete\u201d timer component, which is set with a predefined value. Any customer application interested in the \u201cAbout to Stop\u201d event, must answer back as soon as they received this event. Sending a \u201cWait for Stop Complete\u201d event via the event service does this. Control then proceeds to , at which the SDPC enables a customer component to catch \u201cWait for Stop Complete\u201d and \u201cStopComplete\u201d events. The customer component is an event service consumer that consumes events generated by those applications that participate in the \u201cAbout to Stop\u201d protocol. Such events may relate to whether clean up has been completed. The SDPC returns control back to the system service component. Note that the customer component may run in its own thread.","Control then proceeds to , at which the system controller calls a SDPC \u201cWait For Final Completion\u201d API and waits. The \u201cWait For Final Completion\u201d simply waits for a semaphore to be raised by the SDPC when the entire stop protocol method has been executed.","Control then proceeds to , at which the customer component waits for the respective asynchronous events in its own thread. At , for each \u201cWait For Stop\u201d event received, this customer component may call a registration counter SDPC subsystem to increment a \u201cWait Interested\u201d count. This count must be protected with some kind of synchronization object. The customer component performs continuous listening for its assigned event until the timer expires.","When the timer component expires, at , the SDPC component receives the timer event and acts by requesting a registration counter component to set the registration period flag to \u201cTrue\u201d. Control then proceeds to , at which these operations for implementing the stop device protocol end.","The registration period flag may be used later on to determine the state of the \u201cStop Wait Complete\u201d phase. The timer component must be abstracted in order for it to run in multiple platforms. This component may be added in the OS layer subsystem. In this framework, two timers may be created and monitor the time that external applications have to register themselves with the SDPC subsystem and the maximum time that those applications have to complete the stop device cleanup.","It should be understood that various events are generated by the administrative framework including clocking event messages, hardware processor faults, system administration event messages, device administration event messages, stop device protocol events and internal framework exclusive events.","Clocking event messages may include events generated by the administrative framework's fault detection subsystem  indicating that various lines on various buses of when the PLL are bad. Potential event customers for such events include the clock daemon framework and clock daemon application. Hardware processor faults may include events generated by the administrative framework's fault detection subsystem  that indicate when various processors on a board fail.","System administration event messages may include events generated by the system controller  (of ) included in the system administration subsystem  (of ) that indicate when the system has started, e.g., after detection and initialization of all devices, the system has stopped, e.g., all devices have stopped, before the system has started, before the system engages in a stop sequence. Potential event customers for such events include any customers that are external.","Device administration event messages may include events generated by the detector service  (illustrated in ) included in the device detection framework  (illustrated in ) that indicate when a new device is detected and the device configuration is read from the hardware or when a device is removed. Additionally, device administration event messages may include events generated by the system controller  included in the system administration subsystem  (of ) that indicate when a device is initialized, when a device is stopped, just before the device initialization process is engaged, just before the device is stopped, etc. Potential customers for such events include any customers that are external","Stop device protocol events may include, for example, events generated by any external customers participating in an about to stop device protocol.","Internal framework exclusive events may include events generated by one or more initializer servers supporting the device initialization framework  (illustrated in ) to advise one or more system monitor servers (supporting the system administrative subsystem  of ) to either start or stop a fault detector component associated with a server supporting the device initialization framework .","While this invention has been described in conjunction with the specific embodiments outlined above, it is evident that many alternatives, modifications and variations will be apparent to those skilled in the art. Accordingly, the exemplary embodiments of the invention, as set forth above, are intended to be illustrative, not limiting. Various changes may be made without departing from the spirit and scope of the invention.","For example, a system error framework may be included in the administrative frameworks designed in accordance with at least one exemplary embodiment of the invention. This system error framework may act as a mechanism that is used to identify errors, warning and other types of message IDs that are returned to a called party. Additionally, the system error framework may act as a mechanism for storing message strings that are associated with the message IDs.","Moreover, the cross platform frameworks designed in accordance with the exemplary embodiments of the invention may be used in conjunction with cross platform software. In developing such software, is may be beneficial to use XML to abstract file operations. Additionally, it may be advantageous to make use of all possible components from the ORB Vendor. Further, cross-platform database agents described in this framework may be advantageously used. Moreover, the Jthread cross-platform library API may be beneficially used for all threads, semaphores, mutex, and other thread synchronization components. It may be easier to ensure a cross-platform framework by minimizing operating system specific calls. Also any part of the software code that cannot be made operating system independent should be abstracted using \u201c#define\u201d etc. . . .",{"@attributes":{"id":"p-0121","num":"0120"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"thead":{"row":[{"entry":"APPENDIX"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"*\/"},{"entry":"<AdminConfigRoot>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"427pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/*"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"413pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"This is the System Configuration Global Parameters Section. Default values"]},{"entry":[{},"are in bold letters."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"364pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["DoAutoDetection","set to false to skip auto detection. Otherwise set to true."]},{"entry":["DoAutoDeviceInit","set to false to skip device initialization. Otherwise set to true."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"427pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"*\/"]},{"entry":[{},"<SysConfigParams>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<DoAutoDetection>","true\/false","<\/DoAutoDetection>"]},{"entry":[{},"<DoAutoDeviceInit>","true\/false","<\/DoAutoDeviceInit>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"427pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/SysConfigParams>"]},{"entry":[{},"\/*"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"This section contains all the servers that must be started by the IMR. The order of execution"},{"entry":"is defined by the order of definition. Each Server section contains a Path tag that identifies"},{"entry":"the application that must be started with the command line defined under the CmdLine tag. If"},{"entry":"the Server is a CORBA Server and a Fault Tolerance server, then the RunningInstance tag"},{"entry":"should be set to a value bigger then one. A CORBA Server uses the ORB to bootstrap to the"},{"entry":"ORB framework. A CORBA Server serves as a host for CORBA components (i.e., CORBA"},{"entry":"servants). The max value allowed is 5."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"427pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"*\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<SystemStartup>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"427pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Server>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"294pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Path>","\u201c \u201d","<\/Path>"]},{"entry":[{},"<Cmdline>","\u201c \u201d","<\/Cmdline>"]},{"entry":[{},"<RunningInstances>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"427pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/RunningInstances>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"413pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Server>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/ServerStartup>"},{"entry":"\/*"},{"entry":"This section describes the Initialization (Downloading) rules. The Initialization Controller"},{"entry":"and the Device Initialization Controller Framework typically process this section. User"},{"entry":"specifies what and when to run external application during the device initialization."},{"entry":"*\/"},{"entry":"<\/DeviceInitalizationRules>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"413pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/*"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Add here any external application that must be executed during Initialization process."},{"entry":"Note only one value is allow per tag."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"343pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Technology - { *, DM3, Springware } [Note *= applies to all technologies]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Product - {*, . . .}"},{"entry":"RunLevel - { \u201cPRESTART\u201d, \u201cPOSTSTART\u201d, \u201cPRESTOP\u201d, \u201cPOSTSTOP\u201d }"},{"entry":"Frequency - {\u201cSYS_INIT\u201d, \u201cPER_DEVICE\u201d, \u201cANY_TIME\u201d}"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"385pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"*\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<ExternalApplication>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Path ","\u201c\u2009\u201d","<\/Path>"]},{"entry":[{},"<Cmdline>","\u201c\u2009\u201d","<\/Cmdline>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"329pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["<RunLevel>","\u201c\u2009\u201d","<\/RunLevel>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"259pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Technology>","\u201c\u2009\u201d","<\/Technology>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Product>","\u201c\u2009\u201d","<\/Product>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"343pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["<Frequency>","\u201c\u2009\u201d","<\/Frequency>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"413pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ExternalApplication>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/DeviceInitalizationRules>"},{"entry":"<\/AdminConfigRoot>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"413pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"The following is a simple example of the System XML Configuration File."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<AdminConfigRoot>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"413pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<SysConfigParams>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<DoAntoDetection>","true","<\/DoAutoDetection>"]},{"entry":[{},"<DoAutoDevicelnit>","true","<\/DoAutoDeviceInit>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"413pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/SysConfigParams>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<SystemStartup>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"413pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Server>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Path>","\u201c\/Dialogic\/bin\/NamingServer.exe\u201d","<\/Path>"]},{"entry":[{},"<Cmdline>","\u201c-OBPort 2400\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"413pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Cmdline>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<RunningInstances>","1"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"413pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/RunningInstances>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"385pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Server>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Server>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Path>","\u201c\/Dialogic\/bin\/SystemCtl.exe\u201d","<\/Path>"]},{"entry":[{},"<Cmdline>","\u201c-OBPoolSize 20\u201d","<\/Cmdline>"]},{"entry":[{},"<RunningInstances>","2"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"413pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/RunningInstances>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"385pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Server>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/ServerStartup>"},{"entry":"<\/DeviceInitalizationRules>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"385pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/* Run regvox.exe-v after the initialization all technology devices during"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"System Init*\/"},{"entry":"<ExternalApplication>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Path","\u201c\/Dilaogic\/bin\/regvox.exe\u201d","<\/Path>"]},{"entry":[{},"<Cmdline>","\u201c-v\u201d","<\/Cmdline>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["<RunLevel>","\u201cPOST_START\u201d","<\/RunLevel>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Technology>","\u201c*\u201d","<\/Technology>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Product>","\u201c*\u201d","<\/Product>"]},{"entry":[{},"<Frequency>","\u201cSYS_INIT\u201d","<\/Frequency>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"413pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ExternalApplication>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/* Run regvox.exe-d after the initialization of a single technology device*\/"},{"entry":"<ExternalApplication>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Path","\u201c\/Dialogic\/bin\/regvox.exe\u201d","<\/Path>"]},{"entry":[{},"<Cmdline>","\u201c-d\u201d","<\/Cmdline>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["<RunLevel>","\u201cPOST_START\u201d","<\/RunLevel>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Technology>","\u201c*\u201d","<\/Technology>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Product>","\u201c*\u201d","<\/Product>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Frequency>","\u201cPER_DEVICE\u201d","<\/Frequency>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"413pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ExternalApplication>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/* Run ipconFigureexe-g after initialization of DM3 technology devices during System Init"},{"entry":"only. *\/"},{"entry":"<ExternalApplication>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Path","\u201c\/Dialogic\/bin\/ipconFigureexe\u201d","<\/Path>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Cmdlme>","\u201c-g\u201d","<\/Cmdline>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"287pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["<RunLevel>","\u201cPRE_START\u201d","<\/RunLevel>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Technology>","\u201cDM3\u201d","<\/Technology>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"273pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Product>","\u201c\u2009\u201d","<\/Product>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"301pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["<Frequency>","\u201cSYS_INIT\u201d","<\/Frequency>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"413pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ExternalApplication>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"441pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/DeviceInitalizationRules>"},{"entry":"<\/AdminConfigRoot>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The exemplary embodiments of the present invention will be readily appreciated and understood from consideration of the following detailed description of the invention, when taken with the accompanying drawings, in which same numbered elements are identical and:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 8","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 17"}]},"DETDESC":[{},{}]}
