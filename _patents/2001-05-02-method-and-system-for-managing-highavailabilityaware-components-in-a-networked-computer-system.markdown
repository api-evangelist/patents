---
title: Method and system for managing high-availability-aware components in a networked computer system
abstract: The present invention describes a method and system for managing high-availability-aware components in a networked computer system. In particular, the method includes registering components and dynamically allocating roles and assignments to one or more of the registered components to achieve a desired level of redundancy based on component type information. The method may include an additional step of performing administrative actions on the registered components in response to a request from an external management agent in order to increase the availability of services provided by the high-availability-aware components. Further, the method may additionally include responding to an error by changing roles and assignments of one or more of the registered components, providing information to registered components so that related components may communicate to achieve a desired redundancy level, and/or maintaining additional information relevant to managing high-availability-aware components. Such additional information may include information regarding software release domains, component relationships, and/or protection groups.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07143167&OS=07143167&RS=07143167
owner: Sun Microsystems, Inc.
number: 07143167
owner_city: Palo Alto
owner_country: US
publication_date: 20010502
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application claims the benefit of U.S. Provisional Application Nos. 60\/201,098, 60\/201,099, and 60\/201,106, which were all filed on May 2, 2000, and which are hereby incorporated by reference.","1. Field of the Invention","The present invention relates to a method and system for managing components in a networked computer system. In particular, the present invention relates to a method and system that dynamically allocates assignments and roles to components to maintain the availability of services provided by the components.","2. Discussion of the Related Art","Networked computer systems enable users to share resources and services. One computer can request and use resources or services provided by another computer. The computer requesting and using the resources or services provided by another computer is typically known as a client, and the computer providing resources or services to another computer is known as a server.","A group of independent network servers may be used to form a cluster. Servers in a cluster are organized so that they operate and appear to clients, as if they were a single unit. A cluster and its network may be designed to improve network capacity, by among other things, enabling the servers within a cluster to shift work in order to balance the load. By enabling one server to take over for another, a cluster may be used to enhance reliability and minimize downtime caused by an application or system failure.","Today, networked computer systems are used in many different aspects of our daily lives. They are used, for example, in business, government, education, entertainment, and communication. As the use of networked computer systems becomes more prevalent and our reliance on them increases, it has become increasingly more important to achieve the goal of always-on computer networks, or \u201chigh-availability\u201d systems.","High-availability systems need to detect and recover from a failure in a way transparent to its users. For example, if a server in a high-availability system fails, the system must detect and recover from the failure with no or little impact on clients.","Various methods have been devised to achieve high availability in networked computer systems. For example, one method known as triple module redundancy, or \u201cTMR,\u201d is used to increase fault tolerance at the hardware level. Specifically, with TMR, three instances of the same hardware module concurrently execute and by comparing the results of the three hardware modules and using the majority results, one can detect the failure of the hardware modules. However, TMR does not detect and recover from the failure of software modules. Another method for achieving high availability is software replication, in which a software module that provides a service to a client is replicated on at least two different nodes in the system. While software replication overcomes some disadvantages of TMR, it suffers from its own problems, including the need for complex software protocols to ensure that all of the replicas have the same state.","The use of replication of hardware or software modules to achieve high-availability raises a number of new problems including management of replicated hardware and software modules. The management of replicas has become increasingly difficult and complex, especially if replication is done at individual software and hardware levels. Further, replication places a significant burden on system resources. Thus, there is a need for a system and method to efficiently manage replicas of software and hardware modules to achieve high availability.","The present invention provides a system and method for managing high-availability-aware (\u201cHA-aware\u201d) components in a networked computer system. In particular, the present invention, by cooperating with HA-aware components, effectively manages such components and their relationships in a wide range of networked computer systems to achieve high availability.","To achieve these and other advantages and in accordance with the purposes of the present invention, as embodied and broadly described herein, a method for managing HA-aware components in a networked computer system includes registering the HA-aware components to be managed. The method also includes dynamically allocating roles and assignments to one or more of the registered components of the HA-aware components to achieve a desired redundancy level based on component type information.","In another aspect, the invention includes a method for allocating an assignment in a networked computer system. The method includes registering components. The components are high-availability aware. The method also includes allocating roles to registered components among the components, allocating the assignment to a first component selected from the registered components based on component type information of the first component, and changing a role of the first component to primary. The method further includes determining a redundancy level based on the component type information, allocating the assignment to a predetermined number of secondary components selected from the registered components based on component type information of the secondary components. The predetermined number is based on the redundancy level. In addition, the method includes changing roles of the predetermined number of secondary components to secondary and notifying the first component about the predetermined number of secondary components and the predetermined number of secondary components about the first component.","In yet another aspect, the invention includes a method of allocating an assignment HA-aware components in a networked computer system. The method includes registering the HA-aware components, allocating roles to registered components of the HA-aware components, and maintaining component relationship information. The method also includes selecting a first component from the registered components based on component type information and the component relationship information, allocating the assignment to the first component, and changing a role of the first component to primary. It further includes determining a redundancy level based on the component type information, selecting a predetermined number of secondary components from the registered components based on component type information of the secondary components and the component relationship information. The predetermined number is based on the redundancy level. Finally, the method includes changing roles of the predetermined number of secondary components to secondary and notifying the first component about the predetermined number of secondary components and the predetermined number of secondary components about the first component.","In further aspect, the invention includes a computer program product for managing high-availability-aware components in a networked computer system. Such computer program product includes computer readable program codes configured to: (1) register the high-availability-aware components to be managed and (2) dynamically allocate roles and assignments to one or more of the registered components among the high-availability-aware components to achieve a desired redundancy level based on component type information. It also includes a computer readable medium having the computer readable program codes embodied therein.","In another aspect, the invention includes a computer readable medium configured to embody computer programming instructions for managing high-availability-aware components in a networked computer system. The computer programming instructions include registering the high-availability-aware components to be managed and dynamically allocating roles and assignments to one or more of the registered components of the high-availability-aware components to achieve a desired redundancy level based on component type information.","In yet another aspect, the invention includes a computer program product for allocating an assignment in a networked computer system. The computer program product includes computer readable codes configured to: (1) register high-availability-aware components; (2) allocate roles to registered components of the high-availability aware components; (3) allocate the assignment to a first component selected from the registered components based on component type information of the first component; and (4) change a role of the first component to primary. It also includes computer readable codes configured to determine a redundancy level based on the component type information, and allocate the assignment to a predetermined number of secondary components selected from the registered components based on component type information of the secondary components. The predetermined number is based on the redundancy level. In addition, it includes computer readable program codes configured to change roles of the predetermined number of secondary components to secondary and notify the first component about the predetermined number of secondary components and the predetermined number of secondary components about the first component. Finally, it includes a computer readable medium having the computer readable program codes embodied therein.","Further, the invention includes a system for managing high-availability-aware components in a networked computer system. The system includes means for registering the high-availability aware components to be managed and means for dynamically allocating roles and assignments to one or more of registered components of the high-availability-aware components to achieve a desired redundancy level based on component type information.","In yet further aspect, the invention includes a system for allocating an assignment in a networked computer system. The system includes means for registering high-availability-aware components, means for allocating roles to registered components of the high-availability-aware components, means for allocating the assignment to a first component selected from the registered components based on component type information of the first component, and means for changing a role of the first component to primary. The system further includes means for determining a redundancy level based on the component type information, means for allocating the assignment to a predetermined number of secondary components selected from the registered components based on component type information of the secondary components. The predetermined number is based on the redundancy level. The system also includes means for changing roles of the predetermined number of secondary components to secondary and means for notifying the first component about the predetermined number of secondary components and the predetermined number of secondary components about the first component.","Finally, the invention also includes a mechanism configured to manage a high-availability-aware components in a networked computer system. Such mechanism includes mechanisms configured to: (1) register the high-availability aware components to be managed and (2) dynamically allocate roles and assignments to one or more of registered components of the high-availability-aware components to achieve a desired redundancy level based on component type information.","Additional features and advantages of the invention are set forth in the description which follows, and in part are apparent from the description, or may be learned by practice of the invention. The objectives and other advantages of the invention are realized and attained by the structure particularly pointed out in the written description and claims hereof as well as the appended drawings.","It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are intended to provide further explanation of the invention as claimed.","Reference is now made in detail to the preferred embodiment of the present invention, examples of which are illustrated in the accompanying drawings.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 1","FIG. 1"]},"The system of  has two independent shelves  and , which are interconnected by a network. Each shelf may include: (1) one compact PCI back-plane ( and ); (2) redundant power supplies and fans; (3) one dual-ported, hot-swap controller (\u201cHSC\u201d) ( and ), which manages the power to the slots, as well as the power supplies, fans, and environment alarms; (4) a bus-switch, permitting the bus to be managed by one of two host-slot processors; (5) two hot-swap-able host-slot processors (\u201cHSPs\u201d), one active ( and ) and one standby ( and ); (6) two line cards (\u201cL-cards\u201d), which are hot-swap-able (, , , and ); and (7) two non-host-slot processors (\u201cNHSPs\u201d) (, , , and ).","Nodes within a single shelf would communicate across the compact PCI (\u201ccPCI\u201d) back-plane. Communication between nodes on different shelves may use a network, which, for example, can be dual-redundant 100 Mhz ethernets. The HSP nodes would act as gateways, relaying packets between their cPCI back-planes and the ethernets. Further, L-cards may be made 2N-redundant, for example, by making the L-cards  and  standbys for the L-cards  and , respectively. NHSPs may be made N+1 redundant, for example, by making the NHSP  act as a standby for the other three NHSPs , , and .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 2","b":"201"},"A component is an encapsulation of a logical aggregation of functions provided by software, hardware, or both that is designated to behave as a unit of deployment, redundancy, and manageability within a networked computer system. A component may have various states (\u201ccomponent states\u201d). It may be uniquely identified by its type (\u201ccomponent type\u201d), representing the functional semantic of the component. A component type may be instantiated into one or multiple component instances. A component instance, which may be referred to as a component for simplicity, acts as the unit of manageability of the CRIM.","Components are HA-aware, if they are aware of their execution in a highly available environment. In other words, they are capable of cooperating and complying with the highly available environment. They may also facilitate the environment to achieve high availability more efficiently and effectively. Further this cooperation between the components and the environment may increase the flexibility and scalability of the environment to deal with the components and their relationships in more realistic settings of distributed applications.","The various aspects of components, including (1) component states, (2) component assignment, (3) component role, (4) component types, and (5) component categories are now discussed.","(1) Component States: Various state types may be associated with components\u2014they include availability state, administrative state, operational state, usage state, and presence state. It is not necessary for all of the five state types to be supported to implement the present invention.","For each state type, there are several possible values. As to the availability state type, its values may include primary, quiescing, secondary, spare, and off-line. The availability state type and its values are explained below in more detail when discussing . The values of the availability state type reflect roles assigned by the CRIM to components within a networked computer system. The CRIM is responsible for changing the role of each component and for implementing and recording it. The operational state type may be used to represent that an object is usable. This state results from the state of a component and the state of one of its parents in containment and\/or dependency relationships. This state type is explained further when discussing relationships.","The administrative state type describes the condition of an object from a manager's perspective. Its state values may include, locked, unlocked, and shutting-down. The CRIM may be used to implement and record this state. Preferably, this state is persistent and recorded in Lightweight Direct Access Protocol (\u201cLDAP\u201d) in order to be preserved through a board, shelf, or network element reset.","The usage state type may be used to define whether or not a component is actively in use at a specific instant, and if so, whether or not it has spare capacity for additional uses at that instant. If it has spare capacity, it is active; if not, it is busy. This state, if used, is typically owned and maintained by a component itself.","Finally, the presence state type may be used to give information about the physical presence of hardware or software associated to a component. Its values may include present and missing. Like the administrative state type, this state may preferably be in LDAP so that it can be preserved through a board, shelf, or network element reset.","(2) Component Assignments: Each component type is typically assumed to be capable of providing a generic functionality. This generic functionality is instantiated with further specialization. For example, a component type C-T may be capable of providing a radio-channel control function. However, the radio-channel control function can be applied to three different frequency ranges, for example Freq, Freq, and Freq. A component C of type C-T can be assigned to provide one specific frequency, such as Freq. This specialized functionality is called component assignment.","The CRIM is responsible for giving assignments to registered components. A component type is usually designed to provide one or multiple assignments. A component instance may be given at most one assignment with a primary role at any given time. A component instance may be given one or more assignments with a secondary role. Spare and off-line components are not given any assignment.","A protection group may be implemented as a specialization of the component assignment for hardware components. According to network management standards, a protection group is a set of hardware components that together provide a highly available service. Members of a protection group facilitate fail-over, load balancing, or both. Members of a protection group are determined in the system configuration. In other words, to add or remove a member from a protection group, the configuration needs to be modified. Based on the above semantics of the protection group construct, a protection group can be implemented as a specialization of the component assignment for hardware components.","(3) Component Roles: Turning to , there are five possible roles for components\u2014they are primary (), secondary (), spare (), quiescing (), and off-line (). As discussed earlier, roles correspond to values of the availability state of a component. The CRIM is responsible for implementing the availability state of a component. Thus, the CRIM assigns, updates, and records an availability state value (or role) to a component.","The CRIM may issue one of the following five role assignment requests to a component: go-off-line, go-spare, go-secondary, go-quiescing, and go-primary. These role assignment requests change the availability state of the component that receives it to off-line, spare, secondary, quiescing, and primary, respectively.","A component is in the off-line state , if it can run diagnostics or respond to external management commands but is not available to perform services. A component may be initially given the off-line state  by default after registering with the CRIM. The CRIM may immediately instruct the component to go into the spare state . Alternatively, the CRIM may instruct the component to go directly into the primary  or secondary  state. For example, during a restart cycle, the CRIM may request the component to go directly to the state it had before the restart (i.e., the primary  or secondary  state) from the off-line state  to make the restart cycle faster. As indicated by arrows in , a component in the spare (), primary (), secondary (), or quiescing () state can be instructed to return to the off-line state .","The CRIM may place a component in the off-line state  for various reasons. As discussed above, the off-line state  may serve as a default state for registered components. The CRIM may place a component in the locked administrative state to the off-line state  until it is asked to unlock the component. When the component is unlocked, it may be placed in the spare state . The CRIM may also place a component whose operational state becomes disabled to the off-line state . In this case, the component may stay in the off-line state , until the CRIM is asked to enable the component. If a component is in the disabled state at the time of registration with the CRIM, the CRIM may keep the component in the off-line state  (instead of moving it to the spare state , for example), until the component is enabled.","A component is in the spare state , if it is not currently performing any services but is available to do so at any time. A component in the primary state  is active and provides a service. It may also prepare checkpoints (for example, by saving checkpoints, if a replicated checkpoint service is used) to be used by its secondary component. A component in the secondary state  may not actually be providing services, but is acting as a standby for its associated primary component. A secondary component is typically prepared to assume the primary role at any time.","Finally, a component is in the quiescing state , if it is still a primary provider of some functionality but serves only those client requests that have been submitted before receiving a go-quiescing command from the CRIM. While in this state, the component may queue new client requests and process pending ones. A component can go to the quiescing state  only from the primary state . While in the quiescing state , a component has information and capability to resume its primary state  if it is ordered to do so by the CRIM. A component in the quiescing state  is ready to resume its primary state  because it has an updated checkpoint as well as unprocessed client requests. The CRIM may ask the quiescing component to go to the primary (), secondary (), spare (), or off-line () state.","For a component to be functional, a component may need both an assignment and a role.","It is important to note that the above descriptions of component roles are based on one embodiment of component roles of the present invention. As such, they are given as examples and other implementations of component roles would be known to those skilled in the art and are within the scope of the invention.","(4) Component Type: As stated above, each component may be uniquely identified by its type, representing the functional semantic of a component. The functionality offered by a component type may require a specific degree of high availability. To achieve the required high availability for a component type, all components of that type may need to be executed in a redundant manner. In other words, a redundancy model may need to be assigned to each component type. The CRIM may have a responsibility of guaranteeing that all assignments of a component type are available according to a specified redundancy model, if possible.","For any supported redundancy models, the CRIM may apply the following assignment rules: (1) at most one primary component for an assignment; (2) at most one secondary component for an assignment; and (3) any number of spare components for the assignments supported by a component type.","In addition to functional attributes (such as program object files, etc.), a component type may have the following component type level attributes shown in Table 1 below.",{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Attribute","Sub-attribute","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Recovery","Restart attribute","Indicates if restart is an appropriate"]},{"entry":["parameter",{},"recovery action"]},{"entry":[{},"Fail-over attribute","Indicates when to do fail-over, and"]},{"entry":[{},{},"how it affects the rest of the node"]},{"entry":[{},"Redundancy model","Preferred redundancy model of the"]},{"entry":[{},{},"component type (for example, 2N, or"]},{"entry":[{},{},"N + 1)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"In addition, there may be at least two additional types of attributes that are related to component types\u2014component instance level attributes and component assignment level attributes. Component instance level attributes are those attributes specific to each component instance, such as input parameters, and environment. Component assignment level attributes include those attributes of a component type that can vary for different assignments of the component type. For example, component assignment level attributes may specify where and how various assignments of a component type should run or hardware units on which the components of different assignments can run. Table 2 shows several component assignment level attributes that may be used.",{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Attribute","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Component type","Identifies the component type to which the"]},{"entry":[{},"assignment belongs"]},{"entry":["Assignment name","Distinguishes the assignment from other"]},{"entry":[{},"assignments of the same component type"]},{"entry":["Assignment Priority","Used for prioritizing assignments of a component"]},{"entry":[{},"type"]},{"entry":["Node group","A node group includes all nodes that are dedicated"]},{"entry":[{},"to run a specific assignment of a component type"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"It is important to note that the component attributes discussed above are merely an example of what and how the information may be structured to represent the concepts of component type and assignment. As such, the present invention is not limited to specific component attributes discussed above and includes other attributes and methods of representing the concepts of component type and assignment that are known to those skilled in the art.","(5) Component Categories: As shown in , components of the present invention may be classified into the three categories. A standalone component  runs on a peer node of a networked computer system . A component is a standalone component, if it provides a component management interface of its own. For example, call-processing applications are typically standalone components.","A proxied component  is not directly managed by the networked computer system . In general, proxied components do not provide management interfaces of their own. Examples of proxied components may include transceiver payload cards, shelves, and software running on a payload card.","In general, a proxied component is associated with one or more proxy components. In , the proxied component  is associated with a proxy component . The proxy component  acts as a management interface between the networked computer system  and the proxied component . While a proxied component may be managed (or made accessible) by a number of redundant proxy components at any given time, typically one active proxy component is assigned to a proxied component. A proxy component may serve one or multiple proxied components.","Having explained components in detail, examples are used to describe operations performed by the CRIM to allocate roles and assignments to components.","Turning back to , the CRIM  may allocate an assignment to a spare component.  shows a set of spare components  with three spare components C, C, and C, or , , and , respectively. In , two assignments  and  are allocated using four components\u2014Assignment  is given to PCand SCand Assignment  is given to PCand SC. For each assignment, there is one component playing a primary role (PCand PC) and one component playing a secondary role (SCand SC). The primary components, PCand PC, are active and actually provide a service. The secondary components, SCand SC, on the other hand, act as a standby for the primary components, PCand PC, respectively. Secondary components, in general, are prepared so that they may assume a primary role at any time. To enable secondary components to assume a primary role, primary components may prepare checkpoints, which are made available to corresponding secondary components.","While  shows only two components per assignment, one may assign any number of components to each assignment. For example, there may be one primary component and three secondary components for an assignment. In other words, appropriate numbers of primary and secondary components may depend on a desired level of redundancy, such as hot-restart, 2N, and N+1, for example. Different redundancy models may be used for different components. Further, decisions to bring individual components in and out of service may be based on various factors, including conditions within a network element or commands received from an external source such as a network management center.","It is understood that an assignment is available when a component is made primary for that assignment. For redundancy reasons, another component may be given a secondary role for the same assignment. Because a secondary role is generally not very resource intensive, it is possible that a component, while being a secondary for an assignment, can also be a secondary for some other assignments of the same component type. Then, when the secondary component becomes primary for an assignment, it could be relieved of the secondary roles for the other assignments.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIGS. 7","FIG. 7"],"b":["8","9","705","1","701","2","702","1","703","704","1"]},{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIG. 8","b":["1","2","3","4","1","2","3","808","809","810","808","1","808","809","810","811","1","2","3","4","804","805","806","807"]},"Further, proxy components of a specific component type are created to manage the component of type TRX. Specifically, there are four assignments of a TRX_Proxy component type\u2014namely TRX , TRX, TRX, and TRX. They correspond to components , , , and , having a component type name of TRX-Proxy and a primary role. The components , , , and  have assignments of TRX, TRX, TRX, and TRX respectively. To protect the proxy service from peer node failures, components associated to these four assignments are created in a PROC  and a PROC . In other words, components , , , and  are assigned secondary roles for assignments TRX, TRX, TRX, and TRX, respectively.","If the radio channel control on the TRX  fails, the TRX  takes over the channel Freq, and provides services through the TRX-Proxy . On the other hand, if the PROC  fails over to the PROC , the proxies TRX-Proxy , TRX-Proxy , TRX-Proxy , and TRX-Proxy  running in the PROC  take over the service interface and the management for the TRX , TRX , TRX , and TRX , with no role changes among the TRX components.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 9","FIG. 9"],"b":["903","1","901","1","903","904","2","902","903"]},"Next, functionalities involved in the interaction between individual components and the CRIM are discussed.","Initially, components may register with a CRIM. The registration of a component with the CRIM may allow the CRIM to manage the availability of the component and execute administrative and operational commands, such as commands issued by an external management agent. It is preferable that all components register with the CRIM for availability management, regardless of whether they are high-availability managed or not.","Once registered, components may query the CRIM to obtain information maintained by the CRIM. This includes availability management, administrative states, and operational states. The CRIM may also provide information about components representing a given assignment.","Components can also inform the CRIM of its own predetermined role, if any. Some components may be allowed to claim their own initial role to reduce an interruption of component functions due to interactions with the CRIM. These components are called self-determining components. Self-determining components may directly assume a primary role for a particular assignment after being started and then report that fact to the CRIM.","An example of a self-determining component may include a node component on each of two System Controllers (\u201cSCs\u201d) of a single cPCI shelf. Once started these components may arbitrate among them so that one of the SCs assumes the control of the cPCI bus to allow the rest of the shelf to be powered on. The node component on this SC may want to inform the CRIM that it has assumed control so that appropriate assignments are made. If the CRIM decides to perform a node fail-over recovery, it instructs the SC with a primary role to yield the cPCI bus control and the other SC to take over the primary role.","The CRIM may issue various commands to components. These commands may include changes in assignments and changes in one of the states managed by the CRIM including availability management, administrative states, and operational states. Components may inform the CRIM of a result of a command execution.","The CRIM may notify components of assignment status changes. This keeps a component informed of a status of relevant assignments, including an assignment in which it participates and assignments on which it depends.","It is not necessary for a component to report its failure status directly to the CRIM. In other words, the CRIM may find out about errors indirectly from other sources.","When a registered component wants to be dismissed from an availability management service, it may request the CRIM to unregister it. For example, a component may want to be dismissed from an availability management service so that it can terminate gracefully. However, there are situations in which components cannot execute the unregistration process. For example, a component may be terminated unexpectedly due to a fatal error condition. In these situations, the CRIM may detect termination by other means. For example, it might receive a termination notice from other sources. Upon receiving a termination report for a previously registered component, the CRIM may perform an implicit unregistration for the component.","Overall, the interface between a component and the CRIM may include both invocations from the component to the CRIM, and invocations from the CRIM to the component. The CRIM may export functions that the component may call to invoke its services. The component may be held responsible for exporting function calls expected by interfaces using, for example, a registration process, so that the CRIM can interact with the component. Preferably, requests from the CRIM to the component are asynchronous operations because the component takes a command from one of the callbacks, but may indicate the completion of the command by a specific invocation to the CRIM.","Table 3 contains various interfaces that the CRIM may have for communicating with components.",{"@attributes":{"id":"p-0089","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["Interface","Type","Caller","Called by","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["crim_register","API","Com-","CRIM","Registration with the"]},{"entry":[{},{},"ponent",{},"CRIM"]},{"entry":["crim_unregister","API","Com-","CRIM","Unregistration from"]},{"entry":[{},{},"ponent",{},"the CRIM"]},{"entry":["hastate_assign","Call-","CRIM","Component","The CRIM commands"]},{"entry":[{},"back",{},{},"the component to take"]},{"entry":[{},{},{},{},"a role and assignment"]},{"entry":["hastate_abort","Call-","CRIM","Component","The CRIM asks for the"]},{"entry":[{},"back",{},{},"pending assignment"]},{"entry":[{},{},{},{},"command to be"]},{"entry":[{},{},{},{},"aborted"]},{"entry":["hastate_notify","Call-","CRIM","Component","The CRIM informs the"]},{"entry":[{},"back",{},{},"component of changes"]},{"entry":[{},{},{},{},"within the current"]},{"entry":[{},{},{},{},"assignments"]},{"entry":["crim_hastate","API","Com-","CRIM","The component noti-"]},{"entry":["completed",{},"ponent",{},"fies the CRIM of the"]},{"entry":[{},{},{},{},"completion of the on-"]},{"entry":[{},{},{},{},"going command."]},{"entry":["crim_state","API","Com-","CRIM","Retrieves a specified"]},{"entry":["query",{},"ponent\/",{},"state of a component"]},{"entry":[{},{},"systems"]},{"entry":["crim_hastate","API","Com-","CRIM","The component claims"]},{"entry":["claim",{},"ponent",{},"a role and assignment"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIG. 5","FIG. 5"],"b":["500","503","504","503","504","502","511","500","513","503"],"sub":["1 ","1 ","2 ","1 ","2 ","1 ","1 "]},"Once the CRIM  issues the goquiescing command  to the component C, the component C acknowledges the command , sets a timeout for a completion of the ongoing activities, and enters the quiescing state. During the quiescing state, the component C is still the primary provider of the service\u2014the component C attempts to process clients' requests that have been submitted before the go_quiescing command  is issued. In this case, the component C sends a reply of request N  to the client of A. As to client requests issued while in the quiescing state, the component C receives them and stops processing them. To allow a smooth transition from the component C to the component C, the component C may flush its checkpoint and close it before sending the go_quiescing completion notification  to the CRIM .","When the CRIM  receives the completion of go_quiescing  from the component C, it requests the component C, which is the associated secondary component, to go primary by issuing a go_primary command . The component C acknowledges the command  and notifies the completion of go_primary  to the CRIM . After becoming primary, the component C inserts its service endpoint  in the name service , thus becoming ready to serve the client of A, which has asked for an endpoint for Afrom the name service  before issuing a request N+1 .","When the CRIM  receives the completion notice  from the component C for the go_primary command , it sends a go_spare request  to the component C. The component C acknowledges the command . Upon receiving the gospare command , the component C rejects all queued requests from the client of A. The client of A gets a new endpoint from the name service  and reissues the rejected requests to the new primary component C. After receiving the new endpoint in response to a request for an endpoint , the client of A issues the request N+1  to the component C, which in turn sends a reply of the request N+1  to the client of A. As to C, it notifies the completion of the go_spare command  to the CRIM .","Turning to , some components are not intended to be managed for high availability by a CRIM. Such components are referred to as non-HA-managed (or \u201cnon-HA\u201d) components. Non-HA-managed components may not have a full availability state because they do not represent a replicated service. In one preferred embodiment of the present invention, non-HA-managed components may register with the CRIM in order to be managed by an external management.","For the uniformity purpose and for ease of the CRIM implementation, non-HA components may also have their own availability states. However, non-HA components may not be able to have all five availability states devised for HA-components. Non-HA components may accept one of the following availability states: a off-line state  and a primary state . A non-HA component is in the off-line state , when it does not provide its specified service. A non-HA component is in the off-line state if it is locked or disabled. When a non-HA component provides its specified functionality, it is said to be in the primary state . The CRIM either allows or disallows non-HA-components to provide services.","Next, various recovery procedures performed by the CRIM to maintain high-availability are explained.","The CRIM manages availability aspects of components and orchestrates recovery procedures upon detection of errors. The CRIM may be programmed to receive information about possible errors and recommend recovery actions received from an external source. The CRIM may also be programmed to consider the current cluster configuration and recovery policies in devising recovery procedures.","One example of recovery procedures involves switching a secondary component to a primary role in order to replace a failing or failed primary component. Indeed, there are at least two different scenarios during which a secondary component may switch to the primary role. Two scenarios are called fail-over and switch-over. Fail-over occurs, when a current primary component has failed. In this case, a secondary component takes over the primary role without expecting any cooperation or coordination from its primary partner. Switch-over occurs, when the primary partner is healthy, but it expects to lose its primary role as a part of a wider recovery and\/or administrative action. For example, the CRIM may simply prefer to switch a secondary component into a primary role, although the current primary component is healthy. During switch-over, the current primary component can help the secondary component\u2014for example, it may explicitly close checkpoints and flush its caches for shared files.","The same concept may be used at a node level as well. Specifically, when a node fails, the CRIM may orchestrate a node fail-over during which the secondary partners of all primary components of the failed node become primary through fail-over. Also, a node can be switched over, for example, when the node is locked, by switching over all primary components of the locked node.","When an external management agent requests an administrative action on a specific component, the CRIM may put the corresponding component (and probably the relevant components) in the off-line state. However, the component itself does not need to know the reasons for becoming off-line. The CRIM may maintain information about the administrative and operational states of the component. Administrative operations that external management agents may issue include lock, unlock, and shutdown. Moreover, to perform necessary diagnoses and repair actions, the CRIM may be requested to enable, disable, or terminate a component.","The CRIM may also participate in a recovery phase that involves system services. For some escalated recovery actions for a specific failure scenario involving centralized system services, the CRIM may first orchestrate the application component's recovery (if possible or necessary), then initiate the system services recovery by requesting relevant system services to carry out the system-service level actions such as a node switch-over or fail-over.","Recovery actions for some failures may be to terminate and possibly to restart a component. To support this, the CRIM may issue a command necessary to begin operations for terminating and restarting a component.","The CRIM may be programmed to handle a software upgrade mechanism by using a concept called software release domain (\u201cSRD\u201d). Each node in a cluster may be a member of one SRD. A cluster may be made up of one or more SRDs when the cluster is in the process of a software upgrade. Thus, in order to support software upgrade, the CRIM may need to keep information about the SRDs for various components and be aware of discrepancies between the SRDs of the components implementing an assignment.","During a rolling software upgrade process, there may be times when primary and secondary components of an assignment belong to different software release domains\u2014that is, the primary and secondary components may run different versions of software. Components implementing an assignment need to know about a possible intra-assignment version discrepancy to co-exist. For example, when a software upgrade is in progress and the primary component is in a higher version than its secondary counterpart, it may be beneficial to make the primary component aware of the situation.","The CRIM may maintain information about SRDs and warn components that a software upgrade is in progress. In other words, the CRIM may warn a component that its SRD may be different from those of its partners so that it may take actions to work with its partners. For example, components with newer versions may be required to take actions to work with their older-version partners.",{"@attributes":{"id":"p-0106","num":"0105"},"figref":["FIGS. 10A and 10B","FIG. 10A"],"b":["1000","1002","1003","1001","1004","1000","1002","1002","1002"],"sub":["1 ","\u2014","1.2","\u2014","1.1","1.1"]},"In , the node B is rebooted and now belongs to the SRD2 , which means that the secondary component  is now using V. The CRIM  may recognize that the primary component and its secondary partner are running in the same software release domain and notify the primary component  of the fact. The primary component  may readjust its functions to accommodate this change in the node B's software release domain. In other words, the primary component  may use a V-formatted checkpoint.","The CRIM may also manage component relationships. Further, the CRIM may provide component relationships to other processes or management agents. For example, the CRIM may provide an API for retrieving and browsing relationship information on various entities such as components and assignments. System services such as management agents may use this API to investigate relationships between components.","There may be at least two types of relationships managed by the CRIM\u2014constellation relationship (or co-location relationship) and containment relationship. While these two types of relationships are related, they have some differences as discussed in detail below.","The constellation relationship may arise among components that require frequent communication and coordination among them. Specifically, the constellation relationship may be found in cases in which multiple assignments of the same or different component types have frequent communication or coordination patterns. The close inter-assignment interaction may make it impossible or inefficient to run components implementing these assignments in different nodes for many reasons, including a potential overhead of a cluster-wide communication. Thus, it may be desirable to co-locate such assignments by forming an assignment constellation.","The CRIM may be programmed to guarantee that the primary members of a constellation are located in the same node, if possible. This means, among other things, that a fail-over of a component representing a member of the constellation may cause a switch-over of the other members of the constellation.","The concept of constellation may be viewed as co-locating components implementing tightly coupled assignments. A component may or may not participate in a constellation depending on its current assignment and role. More precisely, a constellation of assignments means that: (1) the primary components of these assignments are co-located in the same node, if possible and (2) the secondary components of these assignments are also co-located in the same node, if possible.","The constellation relationship may be represented as an ordered set of assignments. The order in the set may be used to specify the order in which the components implementing the member assignments are brought into service. For example, if {D, G} is a constellation, during initialization, fail-over, and switch-over, the component implementing the D1 assignment may be ordered to become primary first. Then; the component implementing the G1 assignment may be brought into service.","More generally, the constellation relationship may impose the following constraints on the CRIM. First, when the CRIM attempts to assign an initial role to a component C implementing a member A of a constellation, the CRIM is to postpone the role assignment to the component C1 until the initial roles of all components implementing the preceding members (or members with higher order than the member A1 in the constellation) have been assigned. Second, when the CRIM needs to switch over the members of a constellation, it needs to first make all associated primary components off-line, and then switch the secondary components to primary. Thus, the switch-over and initialization of a constellation are quite different from the switch-over and initialization of a set of independent components.","The CRIM may also be programmed to keep track and use other types of relationships among different entities as discussed in detail below.","Relationships managed by the CRIM may include assignment-level, component-level, and assignment-to-component relationships.","Assignment-level Relationships: Assignment-level relationships may include an assignment-level functional dependency and an assignment constellation. An assignment-level functional dependency exists between assignments A and B, if the assignment A functionally depends on the assignment B. In other words, a primary component implementing the assignment A depends on a primary component implementing the assignment B in order to function.","The CRIM may use assignment-level functional dependency relationships to determine the order of giving assignments to components. For example, if the assignment A depends on the assignment B, the CRIM may allocate components for the assignment B before allocating components for the assignment A.","The CRIM may also use assignment-level functional dependency relationships to make more effective management decisions. For example, if the assignment A depends on the assignment B, and if no component for the assignment B is available, the CRIM may decide that there is no need to allocate a component for the assignment A.","Finally, as discussed earlier, assignment constellations define co-location relationships among multiple assignments. The CRIM may use them to guarantee that primary and\/or secondary components of member assignments are located on the same node, if possible.","Component-level Relationships: The component level is another level that may capture several relationships including a physical containment relationship and a component-level compulsory functional dependency.","A physical containment relationship may be used to capture containment relationships among components. Such components are typically hardware. The CRIM may use a physical containment relationship for executing management commands affecting administrative\/operational states of a given component or for replying to queries issued by an external management on various states of given components.","In a component-level compulsory functional dependency, a component (not necessarily its given assignment) depends on another component. For example, a board may depend on a specific connection. This relationship is more applicable to hardware\/software components that interact with the environment. The CRIM may use this relationship for propagating changes in administrative and\/or operational states. For example, if a component A depends on a component B, then when the component B is asked to be locked, then the component A may be disabled.","Assignment-to-component Relationships: Assignment-to-component relationships may include an assignment relationship, a component-to-assignment dependency, and a proxied-by relationship.","First, the assignment relationship exists, when one or more components are allocated to an assignment. In other words, the assignment relationship represents cases in which the assignment has an \u201cinstantiation\u201d relationship with the allocated components. The CRIM may use the assignment relationship to keep track of an availability status of a high availability assignment and for answering queries about current states of assignments, including those issued by an external management.","Second, when a component depends on an assignment or a protection group, there may be a component-to-assignment dependency. For example, when a component A depends on a protection group PG, the disabling or locking members of the protection group PG may disable the component A. This relationship may be used for propagating operational states to the dependents of a protection group.","Third, the proxied-by relationship exists, when a component outside of the cluster is proxied by a service. Such component may be hardware or software, including a payload card and software running on it, for example. The CRIM may use it to associate between proxy and proxied components.","It will be apparent to those skilled in the art that various modifications and variations can be made in the present invention without departing from the spirit or scope of the invention. Thus, it is intended that the present invention covers the modifications and variations of this invention provided that they come within the scope of any claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are included to provide further understanding of the invention and are incorporated in and constitute a part of this specification, illustrate embodiments of the invention and together with the description serve to explain the principles of the invention. In the drawings:",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIGS. 10A and 10B"}]},"DETDESC":[{},{}]}
