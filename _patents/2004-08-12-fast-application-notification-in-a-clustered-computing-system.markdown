---
title: Fast application notification in a clustered computing system
abstract: With fast notification of changes to a clustered computing system, through which a number of events are published for system state changes, applications can quickly recover and sessions can quickly be rebalanced. When a resource associated with a service experiences a change in status, such as a termination or a start/restart, a notification event is immediately published. Notification events contain information to enable subscribers to identify, based on matching a session signature, the particular sessions that are affected by the change in status, and to respond accordingly. This allows sessions to be quickly aborted and ongoing processing to be quickly terminated when a resource fails, and allows fast rebalancing of work when a resource is restarted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07747717&OS=07747717&RS=07747717
owner: Oracle International Corporation
number: 07747717
owner_city: Redwood Shores
owner_country: US
publication_date: 20040812
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","Clustered Computing System","Services for Managing Applications According to Service Levels","Database Sessions","High Availability","DETAILED DESCRIPTION OF EMBODIMENTS OF THE INVENTION","Functional Overview of Embodiments","Operating Environment","Clustered Computing Environment","Notification Events","Notification Event Payload","Event Processing","Implementation Mechanisms","Extensions and Alternatives"],"p":["This application claims the benefit of priority to U.S. Provisional Patent Application No. 60\/500,096 filed on Sep. 3, 2003, entitled \u201cService Based Workload Management and Measurement In a Distributed System\u201d; and claims the benefit of priority to U.S. Provisional Patent Application No. 60\/495,368 filed on Aug. 14, 2003, entitled \u201cComputer Resource Provisioning\u201d; and is related to U.S. patent application Ser. No. 10\/917,663 filed on Aug. 12, 2004, entitled \u201cFast Reorganization of Connections in Response to an Event in a Clustered Computing System\u201d; and is related to U.S. patent application Ser. No. 10\/917,715 filed on Aug. 12, 2004, entitled \u201cMeasuring Workload By Service\u201d; the contents of all of which are incorporated by this reference in their entirety for all purposes as if fully set forth herein.","The present invention relates generally to clustered computing systems and, more specifically, to techniques for fast notification of a change in state in a clustered system, using events.","A clustered computing system is a collection of interconnected computing elements that provide processing to a set of client applications. Each of the computing elements is referred to as a node. A node may be a computer interconnected to other computers, or a server blade interconnected to other server blades in a grid. A group of nodes in a clustered computing system that have shared access to storage (e.g., have shared disk access to a set of disk drives or non-volatile storage) and that are connected via interconnects is referred to herein as a work cluster.","A clustered computing system is used to host clustered servers. A server is combination of integrated software components and an allocation of computational resources, such as memory, a node, and processes on the node for executing the integrated software components on a processor, where the combination of the software and computational resources are dedicated to providing a particular type of function on behalf of clients of the server. An example of a server is a database server. Among other functions of database management, a database server governs and facilitates access to a particular database, processing requests by clients to access the database.","Resources from multiple nodes in a clustered computing system can be allocated to running a server's software. Each allocation of the resources of a particular node for the server is referred to herein as a \u201cserver instance\u201d or instance. A database server can be clustered, where the server instances may be collectively referred to as a cluster. Each instance of a database server facilitates access to the same database, in which the integrity of the data is managed by a global lock manager.","Services are a feature for database workload management that divide the universe of work executing in the database, to manage work according to service levels. Resources are allocated to a service according to service levels and priority. Services are measured and managed to efficiently deliver the resource capacity on demand. Source high availability service levels use the reliability of redundant parts of the cluster.","Services are a logical abstraction for managing workloads. Services can be used to divide work executing in a database cluster into mutually disjoint classes. Each service can represent a logical business function, e.g., a workload, with common attributes, service level thresholds, and priorities. The grouping of services is based on attributes of the work that might include the application function to be invoked, the priority of execution for the application function, the job class to be managed, or the data range used in the application function of a job class. For example, an electronic-business suite may define a service for each responsibility, such as general ledger, accounts receivable, order entry, and so on. Services provide a single system image to manage competing applications, and the services allow each workload to be managed in isolation and as a unit. A service can span multiple server instances in a cluster or multiple clusters in a grid, and a single server instance can support multiple services.","Middle tier and client\/server applications can use a service by, for example, by specifying the service as part of the connection. For example, application server data sources can be set to route to a service. In addition, server-side work sets the service name as part of the workload definition. For example, the service that a job class uses is defined when the job class is created, and during execution, jobs are assigned to job classes and job classes run within services.","In order for a client to interact with a database server on a database cluster, a session is established for the client. A session, such as a database session, is a particular connection established for a client to a server, such as a database instance, through which the client issues a series of requests (e.g., requests for execution of database statements). For each database session established on a database instance, session state data is maintained that reflects the current state of a database session. Such information contains, for example, the identity of the client for which the session is established, the service used by the client, and temporary variable values generated by processes executing software within the database session. An application may \u201cborrow\u201d a connection from a connection pool and put the connection back into the pool when the session is ended. Generally, a session is a vehicle to perform work with a database. Each session may each have its own database process or may share database processes, with the latter referred to as multiplexing.","Certain changes occur within clustered computing systems which reduce high availability and cause client applications to waste time. Such changes can be generally classified as either a \u201cdown\u201d change, an \u201cup\u201d change, or a \u201cnot restarting\u201d change. A down change occurs when a service, a server instance, or a node machine (generally, a \u201ccomponent\u201d) terminates, or \u201cgoes down.\u201d An up change occurs when a service, a server instance, or a node initializes, or \u201ccomes up.\u201d A \u201cnot restarting\u201d change occurs when a service, instance or node can no longer start. Some changes may affect the existing sessions, as well as connections that are not currently in use but that are already created and associated with a service, instance or node.","Applications waste significant amounts of time and resources in their interactions with a clustered system, via a session, when the state of the clustered system changes. In particular, client applications of a clustered database waste time and resources when the state of the clustered system changes. For example, when a node or a server instance that the session is using \u201cgoes down,\u201d the application may not be interrupted for a long period of time. Specifically, if the node or network fails to close the session sockets, the application waits for a TCP\/IP timeout error from the local TCP\/IP stack. For another example, work may not be distributed across all instances supporting a service when a new service, node or instance becomes available, i.e., \u201ccomes up.\u201d In other words, time is wasted by not connecting with a service, node or instance when it becomes available. One other way in which time and resources are wasted is when clients keep retrying to communicate with a component that will not be coming back up, or has not restarted.","In general, traditional systems perform very poorly when a node goes down. Application sessions can wait up to two hours to be interrupted. In general, traditional systems function poorly in allocating work to a restored entity when a failed system entity is restored (i.e., an entity that has come up). Thus, traditional systems provide reduced availability, and potentially reduced service times, from what such a system could provide. Furthermore with traditional systems, following repair or restore of a failed component, traditional cold-failover systems typically offer fallback of the entire workload to the restored entity, rather than offering load balancing across the complement of components in the cluster.","During runtime, sessions typically are in one of four states in relation to respective database server instances. A session may be (1) actively connecting to an instance, i.e., establishing a session with the instance; (2) actively issuing a command to the instance, such as issuing SQL statements; (3) passively blocked, waiting for a response to issued SQL statements; and (4) processing a previous request, e.g., a SQL statement. State (1) is distinct from the other states because the client is entering the TCP\/IP stack. In the other states, the client is inside the TCP\/IP stack.","Clients of servers waste significant amounts of time and resources in their interactions with a clustered system, via a session, when the state of the clustered system changes. In particular, client applications of a clustered database waste time and resources when the state of the database cluster changes. For example, work may not be distributed across all instances supporting a service when a new service, node or instance becomes available, i.e., \u201ccomes up.\u201d In other words, time is wasted by not connecting with a node or instance when a service on the node or instance becomes available. One other way in which time and resources are wasted is when clients keep retrying to communicate with a component that will not be coming back up (i.e., communicating with a dead node) or has not yet restarted. For example, when a node or a server instance that the session is using \u201cgoes down,\u201d the application may not be interrupted for a long period of time (e.g., two hours is typical). Specifically, if the node or network fails to close the session sockets, the application waits for a TCP\/IP timeout error from the local TCP\/IP stack.","Scenario (1) can be alleviated by using a virtual IP address that is always available. This is because the client is outside the TCP\/IP stack. Thus, when a node goes down the IP address fails over to a different node. However, when the node comes back up, there is no similar solution to address the change in system state. In general, the vast majority of problems occur when a session is in states (2), (3) or (4). The vast majority of wasted time occurs when an application and\/or session must wait for resolution of problems when the session is in state (3). Even worse, applications are in state (3) approximately 90% of the time. In addition, with connection pool clients, time is wasted by providing dead connections to applications.","In general, traditional systems function poorly in allocating work to a restored entity when a failed or otherwise terminated system entity is restored. Thus, traditional systems provide reduced availability, and potentially reduced service times, from what such a system could provide. Furthermore with traditional systems, following repair or restore of a failed component, traditional cold-failover systems typically offer fallback of the entire workload to the restored entity, rather than offering load balancing across the complement of components in the cluster. Furthermore, when there is only one node configured for cold-failover, standby, and the like, there is no redundancy in the system. Such a system is referred to as an \u201cactive\/passive\u201d system, in which all resources are available to all the connected applications.","Based on the foregoing, there is room for improvement in reacting to system state changes in a clustered computing system.","Techniques for fast notification of changes to a clustered computing system are described, in which a number of events are published for system state changes, for enabling fast application recovery and fast rebalancing of sessions with the clustered system. One example of such a clustered computing system is a database cluster comprising multiple instances of a database server executing on multiple node machines, configured to access and manipulate shared data from a database in response to requests from multiple client applications.","When a resource associated with a service experiences a change in status, a notification event is immediately published for use by various subscribers to the event. For example, a notification event is issued whenever a service becomes available on an instance and whenever a service becomes unavailable on an instance. The notification events occur for status changes for services and for the resources that support the services, such as a particular instance, an instance, a node or a database cluster. When a service offered by one or more instances starts, a notification event (UP) is issued that may be used to start applications that are dependent on the service. When the service offered by one or more instances terminates, and also when an instance or node terminates, a notification event (DOWN) is issued to halt the dependent applications. When managing clusterware can no longer manage the service because the service has exceeded its failure threshold, a notification event (NOT_RESTARTING) is issued to interrupt applications retrying the service. In one embodiment, the NOT_RESTARTING event initiates switching to a disaster service.","Upon connecting to the cluster, a unique signature (i.e., a locator) is generated for an associated session and recorded on a handle as part of the connection. In an embodiment, the signature comprises a service identifier, a node identifier, and database unique name, and an instance identifier, each of which is associated with the session. In the context of a database cluster, notification events contain information to enable subscribers to identify the particular sessions that are affected by the change in status, i.e., the signatures of the affected sessions. For some types of events, information used to identify affected sessions includes identification of the service and the database associated with the status change. For other types of events, the information used to identify affected sessions additionally includes identification of the instance and node associated with the status change. The affected sessions are the sessions with signatures that match the signature included in the event payload.","Consequently, applications and sessions are quickly notified when a relevant resource changes state. With use of these techniques, notification events can be used to overcome the problems with traditional systems, previously described herein.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["102","102","106","106","108","108","110","110"],"i":["a","n","a","n","a","n","a","n"]},"One or more clients -are communicatively coupled to a server cluster  (\u201cserver\u201d) that is connected to a shared database . Server  refers collectively to a cluster of server instances -and nodes -on which the instances execute. Other components may also be considered as part of the server , such as a notification service daemon  and an event handler . However, the actual architecture in which the foregoing components are configured may vary from implementation to implementation. Clients -may be applications executed by computers interconnected to an application server or some other middleware component between clients and server  via, for example, a network. In addition, one server instance may be a client of another server instance. Any or all of clients -may operate as subscribers of published events, as described herein.","In the context of a database cluster, database  comprises data and metadata that is stored on a persistent memory mechanism, such as a set of hard disks that are communicatively coupled to nodes -, each of which is able to host one or more instances -, each of which hosts at least a portion of one or more services. Such data and metadata may be stored in database  logically, for example, according to relational database constructs, multidimensional database constructs, or a combination of relational and multidimensional database constructs. Nodes -can be implemented as a conventional computer system, such as computer system  illustrated in .","As described, a database server is a combination of integrated software components and an allocation of computational resources (such as memory and processes) for executing the integrated software components on a processor, where the combination of the software and computational resources are used to manage a particular database, such as database . Among other functions of database management, a database server typically facilitates access to database  by processing requests from clients to access the database . Instances -, in conjunction with respective nodes -, host services -","Services ","As previously described herein, services are, generally, a logical abstraction for managing workloads. More specific to the context of embodiments of the invention, a service, such as service -, has a name and a domain, and may have associated goals, service levels, priority, and high availability attributes. The work performed as part of a service includes any use or expenditure of computer resources, including, for example, CPU processing time, storing and accessing data in volatile memory, read and writes from and\/or to persistent storage (i.e. disk space), and use of network or bus bandwidth.","In one embodiment, a service is work that is performed by a database server during a session, and typically includes the work performed to process and\/or compute queries that require access to a particular database. The term query as used herein refers to a statement that conforms to a database language, such as SQL, and includes statements that specify operations to add, delete, or modify data and create and modify database objects, such as tables, objects views, and executable routines. A system, including a clustered computing system, may support many services.","Services can be provided by one or more database server instances. Thus, multiple server instances may work together to provide a service to a client. In , service (e.g., FIN) is depicted, with dashed brackets, as being provided by instance , service (e.g., PAY) is depicted as being provided by instances and , and service is depicted as being provided by instances -","Generally, the techniques described herein are as service-centric, where events occurring within server  can be identified and\/or characterized based on the service(s) which is affected by the event. The payload of notification events is described hereafter.","Notification System","In general, a daemon is a process that runs in the background and that performs a specified operation at predefined times or in response to certain events. In general, an event is an action or occurrence whose posting is detected by a process. Notification service daemon  is a process that receives system state change information from server , such as from clusterware that is configured to manage the cluster of instances -. Such state change information may include, for example, service, instance and node up or down event information. The server  posts events when conditions change within the cluster, as described herein.","Notification service daemon  has a publisher-subscriber relationship with event handler  through which system state change information that is received by daemon  from server  is transmitted as notification events to event handler . In general, an event handler is a function or method containing program statements that are executed in response to an event. In response to receiving event information from daemon , event handler  at least passes along the event type and attributes, which are described herein. A single event handler  is depicted in  as serving all subscribers. However, different event handlers may be associated with different subscribers. The manner in which handling of notification events is implemented by various subscribers to such events is unimportant, and may vary from implementation to implementation.","Transmission of event information from server  to notification service daemon , and from notification service daemon  to event handler , is \u201cout-of-band\u201d. In this context, out-of-band means that such transmission is not through the session communication path because that path may be blocked due to the event. For example, the out-of-band notifications may be issued asynchronously through gateway processes that are not part of the clusterware that manages the cluster. For a non-limiting example, notification service daemon  may use the Oracle Notification System (ONS) API, which is a messaging mechanism that allows application components based on the Java 2 Platform, Enterprise Edition (J2EE) to create, send, receive, and read messages.","\u201cSubscribers\u201d represents various entities that may subscribe to and respond to notification events for various respective purposes. Non-limiting examples of subscribers include clients -, connection pool managers, mid-tier applications, batch jobs, callouts, paging and alert mechanisms, high availability logs, and the like.","When the state of a given service changes, i.e., when the state of a cluster resource that participates in performing the work of the given service changes, the new state is notified to interested subscribers through notification events. Applications can use this notification, for example, to achieve very fast detection of failures in order to stop processing previous results, to clean up connection pool sessions, and for balancing of connection pools following failures and when the failed components are repaired. For example, when the service starts at an instance, the events may be used to immediately trigger work executing on the instance. When the service terminates at an instance, the event may be used to interrupt applications using the service at that instance.","Use of notification events by various client subscribers eliminates, for example, the client waiting for TCP timeouts or wasted processing of the last result at the client after a failure and before being interrupted. Without such notifications, if a node fails without closing sockets, any sessions that are blocked in I\/O wait (read or write) could wait minutes to hours for a timeout, and sessions processing last results would not receive an interrupt until the next data is requested.","In an embodiment, notification events include identification of an event type and event properties. Table 1 describes parameters associated with notification events, according to an embodiment of the invention.",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Parameter","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Event type","The event type for the cluster component: service,"]},{"entry":[{},"service_member, database, instance, node."]},{"entry":["Service name","The service name."]},{"entry":["Database name","The unique database supporting the service."]},{"entry":["Instance","The name of the instance supporting the service."]},{"entry":["Node name","The node name supporting the service or the node that"]},{"entry":[{},"has gone down."]},{"entry":["Status","The new status: UP, DOWN, NOT_RESTARTING."]},{"entry":["Incarnation","Date and time stamp; can be used to order notification"]},{"entry":[{},"events."]},{"entry":["Cardinality","The number of instances supporting the service."]},{"entry":["Reason","The reason for the system change: planned or unplanned."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"A \u201cservice\u201d event type is triggered when an entire service goes down, i.e., when the service goes down on every instance supporting the service. A \u201cservice_member\u201d event type is triggered when a service goes down on a particular instance. A \u201cdatabase\u201d event type is triggered when the entire database goes down, i.e., every instance managing the database goes down. A \u201cnode\u201d event type is triggered when a node machine goes down and, consequently, the instances running on that node are unavailable to support any services. The \u201cnode name\u201d is the name of the node as known by the managing clusterware. DOWN events are often followed by UP events, such as when service members failover to another instance upon a failure of a supporting instance and when failed components are repaired.","It is not necessary that event payloads for each event type contain each of the event properties. Table 2 denotes the properties that are included in event payloads for each event type, according to an embodiment of the invention.",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"49pt","align":"center"}}],"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}},{"entry":["Event","Service","Database","Instance","Node",{},"Time",{}]},{"entry":["Type","Name","Name","Name","name","Status","stamp","Cardinality"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Service","x","x",{},{},"x","x",{}]},{"entry":["Service","x","x","x","x","x","x","x"]},{"entry":"member"},{"entry":["Database","x","x",{},{},"x","x","x"]},{"entry":["Instance","x","x","x","x","x","x"]},{"entry":["Node",{},{},{},"x","x","x"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]}}}}},"According to embodiments, events may be published to the notification system described herein (which provides a programmatic interface to events), to server-side callouts, and to call interface callbacks.","Some examples of system state change scenarios follow.","When an instance fails, several notification events are published: (1) one with an event type=instance, to notify that the instance is down; (2) one for each service that was running on the terminated instance, with event type=service_member, to notify that the service is down on that particular instance. In addition, if a service restarts on another supporting instance (i.e., an instance available as a backup instance to support a service), an event is published with an event type=service_member, to notify that the service is newly available on a particular instance. If and when the terminated instance is repaired and comes back up, notification events may be published for each service that had no available supporting instances (i.e., no backup instances to support the service): (1) one with an event type=instance, to notify that the previously terminated instance is up; and (2) one with an event type=service_member, to notify that the service is up on the previously terminated instance.","Since each of the notification events for the preceding scenario are either an \u201cinstance\u201d or \u201cservice_member\u201d type, Table 2 shows that all of the properties are included in the event payload. If the database is configured with a database domain, such as us.acme.com, then the domain name qualification is expected to appear for the database and service names in the event property. For example, database=databaseX.us.acme.com and service=serviceY.us.acme.com. In addition, by using the cardinality in response to an UP event, work can be redistributed to use available resources in a balanced manner.","When all the instances that support a service go down, i.e., an entire service is down, then several notification events are published: (1) events are triggered with an event type=service_member for each instance that supports the service, to notify that the service is down on each respective instance; (2) an event is triggered with an event type=service, to notify that the entire service is down; and (3) events are triggered with an event type=instance for each instance that supports the service, to notify that that each respective instance is down. Likewise, when the terminated instances are restarted, then similar events are triggered with an UP status, to notify that the service is up on each respective instance, that the entire service is up, and that the instance are up.","For \u201cservice\u201d type events, Table 2 shows that the instance name, node name and cardinality properties can be excluded from the event payload for this type of event. This is because, by definition, a \u201cservice\u201d type event means that the entire service is up or down, i.e., the service is up or down on all instances and associated nodes supporting the service, where the supporting instances and nodes for a given service is mapped and available elsewhere. Therefore, the instance, node and cardinality properties are unnecessary for responding to such an event. Similarly, for \u201cdatabase\u201d type events, Table 2 shows that the instance name and node name properties can be excluded from the event payload for this type of event. This is because, by definition, a database type event means that the entire database is up or down, i.e., all instances and nodes in the database are up or down, where the configuration of the database cluster is available elsewhere.","When a node fails, an event with event type=node is triggered, notifying that the node is down. In one embodiment, no other events are triggered, i.e., no service, service_member or instance type events are necessary due to the available mapping of nodes to instances and services. The node event includes the cluster incarnation, thereby facilitating the elimination of duplicate processing of duplicate events. Table 2 shows that the service name, database name, instance name and cardinality properties can be excluded from the event payload for this type of event. If for any reason, a particular node is unable to be restarted, then an event with event type=node and status NOT_RESTARTING is triggered, indicating that intervention is required.","Generally, a given subscriber responds to notification events by identifying one or more sessions that are affected by the system state change and that are associated with the given subscriber, by matching the information in the event payload with session location information that is recorded when a session connection is established. Session location information (i.e., session signature) identifies the location of a session, such as what service, database, instance, node and database are associated with the session. A similar \u201cevent\u201d signature is provided as part of the event payload, which can be precisely matched with the signature of one or more sessions that was recorded upon session establishment, to determine the sessions that are affected by the system state change.","The manner in which session location information is recorded may vary from implementation to implementation. For non-limiting examples, session location information may be posted on a \u201cbulletin board\u201d mechanism that is accessible to various subscribers, or the session location information may be stored in an indexed table or a hash table. Detailed actions that various subscribers may perform in response to notification events are beyond the scope of this description.","For example, a connection pool manager is described as one potential subscriber, or client, of notification events that are published in response to state changes to a resource in the cluster. A connection pool manager is a software component that manages connection pools and requests for connections for sessions with server  (). Manners in which a connection pool manager may respond to various types of notification events, such as to redistribute connections from connection pools across instances -of server , are described in detail in U.S. patent application Ser. No. 10\/917,663 entitled \u201cFast Reorganization of Connections In Response To An Event In a Clustered Computing System.\u201d","For example, a connection pool manager maintains, for each service, a mapping of connections to physical location, i.e., instances, nodes, databases. Thus, the location of each session, including client-server sessions and batch sessions, are uniquely identified. Whenever a connection is established, the connection pool manager records the location for the connection. These data are used for fast redistribution of the connection pool, whenever a system status change notification event is received. A fast redistribution of the connections in response to events benefits the runtime distribution of work in the cluster by ensuring that the pool has connections that are ready to use when session requests are received.","For other non-limiting examples, (1) in response to server-side callouts, jobs and batch processes can be stopped when a service stops for any reason, and started\/restarted immediately when a service starts; (2) callouts can be used for paging and e-mail alerting mechanisms; and (3) callouts can be used for high availability uptime recording, where uptime and downtime can be distinguished, along with the reason for the system change, such as \u201cplanned\u201d (e.g., initiated by a user) or \u201cunplanned\u201d (e.g., initiated by a failure).","The techniques for fast application notification in a clustered computing system, as described herein, may be implemented in a variety of ways and the invention is not limited to any particular implementation. The approach may be integrated into a system or a device, or may be implemented as a stand-alone mechanism. Furthermore, the approach may be implemented in computer software, hardware, or a combination thereof.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 2","b":"200"},"HA system  executes start and stop actions for resources, i.e., Services, Databases and Instances. The start action posts UP events, and the stop action posts DOWN events. The HA system  posts NOT_RESTARTING events when a resource can no longer execute.","Hardware Overview",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 3","b":["300","300","302","304","302","300","306","302","304","306","304","300","308","302","304","310","302"]},"Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface .","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","Alternative embodiments of the invention are described throughout the foregoing description, and in locations that best facilitate understanding the context of the embodiments. Furthermore, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. For example, embodiments of the invention are described herein in the context of a server; however, the described techniques are applicable to any clustered computing system over which system connections are allocated or assigned, such as with a system configured as a computing cluster or a computing grid. Therefore, the specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.","In addition, in this description certain process steps are set forth in a particular order, and alphabetic and alphanumeric labels may be used to identify certain steps. Unless specifically stated in the description, embodiments of the invention are not necessarily limited to any particular order of carrying out such steps. In particular, the labels are used merely for convenient identification of steps, and are not intended to specify or require a particular order of carrying out such steps."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the present invention are depicted by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
