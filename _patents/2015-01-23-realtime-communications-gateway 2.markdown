---
title: Real-time communications gateway
abstract: A system performs Real-Time Communications (“RTC”). The system establishes a signaling channel between a browser application and a rich communications services (“RCS”) endpoint. The system then queries RCS capabilities of the RCS endpoint via the signaling channel, and initiates the RTC between the browser application and the RCS endpoint via the signaling channel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09648052&OS=09648052&RS=09648052
owner: ORACLE INTERNATIONAL CORPORATION
number: 09648052
owner_city: Redwood Shores
owner_country: US
publication_date: 20150123
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND INFORMATION","SUMMARY","DETAILED DESCRIPTION","Capability Exchange","Standalone Messages","Chat (1-1 or Group)","MSRP Over WebSocket","Image\/File Transfer","Video Transfer","MSRP-over-WebSocket Interface"],"p":["One embodiment is directed generally to a communications network, and in particular, to delivering real-time media over a communications network.","Voice communications are increasingly shifting to web and Internet based applications that are outside of traditional telephony networks. Enterprise users desire to access their unified communications applications with their own Internet connected mobile devices and consumers increasingly prefer internet based communications channels to access contact centers.","Some communications service providers (\u201cCSPs\u201d) and enterprises have deployed real-time communications (\u201cRTC\u201d) applications based on a technology known as WebRTC. WebRTC is an open internet standard for embedding real-time multimedia communications capabilities (e.g., voice calling, video chat, peer to peer (\u201cP2P\u201d) file sharing, etc.) into a web browser. For any device with a supported web browser, WebRTC can use application programming interfaces (\u201cAPIs\u201d) to equip the device with RTC capabilities without requiring users to download plug-ins. By using WebRTC, CSPs may create new web based communications services and extend existing services to web based clients.","While WebRTC protocols enable RTC between web browser applications, many mobile devices perform RTC according to a different technology defined by a Rich Communications Services (\u201cRCS\u201d) program. RCS is a Global System for Mobile Communications (\u201cGSM\u201d) Association (\u201cGSMA\u201d) program for the creation of inter-operator communications services based on IP Multimedia Subsystem (\u201cIMS\u201d).","One embodiment is a system that performs Real-Time Communications (\u201cRTC\u201d). The system establishes a signaling channel between a browser application and a rich communications services (\u201cRCS\u201d) endpoint. The system then queries RCS capabilities of the RCS endpoint via the signaling channel, and initiates the RTC between the browser application and the RCS endpoint via the signaling channel.","Embodiments provide a flexible gateway for Real-Time Communications (\u201cRTC\u201d) between a browser operating according to WebRTC and a Rich Communications Services (\u201cRCS\u201d) endpoint. Embodiments implement a Message Session Relay Protocol (\u201cMSRP\u201d) over WebSocket that is generally hidden from application developers and can interact with an RCS client. Also, enhancements to application programming interface (\u201cAPI\u201d) and signaling are provided to support RCS device capability discovery. Accordingly, embodiments give the developers the possibility of implementing WebRTC and RCS applications quickly using a JavaScript SDK. Further, by using a Groovy script in the signaling engine, web applications can control the flexibility of a WebRTC session controller (\u201cWSC\u201d) gateway.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1","b":["100","100","102","104","102"]},"In one embodiment, WebRTC application  performs RTC with an RCS endpoint  connected to an Internet Protocol (\u201cIP\u201d) Multimedia Subsystem (\u201cIMS\u201d) network . RCS is a Global System for Mobile Communications (\u201cGSM\u201d) Association (\u201cGSMA\u201d) program for the creation of inter-operator communications services based on IMS. IMS is an architectural framework for delivering IP multimedia services. RCS defines a set of communications services which, apart from voice and video communications, include 1-1 and 1-Many chats, file transfer, etc. RCS clients are usually present in mobile devices. RCS endpoint  may be any mobile phone equipped with RCS capability.","Network  further includes a WSC  that is a gateway that connects a web application with another communications network. A gateway translates a protocol to another protocol. In , WSC  connects WebRTC application  to IMS network . WSC  provides interoperability for web-to-web and web-to-network RTC. WSC  includes a signaling engine  and a media engine  that bridge WebRTC application  to existing networks such as IMS network . In , signaling engine  bridges WebRTC signaling to Session Initiation Protocol (\u201cSIP\u201d) signaling, and media engine  bridges WebRTC media to existing Voice over IP (\u201cVoIP\u201d) system media. SIP is a signaling communications protocol, conventionally used for controlling multimedia communications sessions such as voice and video calls over IP networks.",{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["10","10","10","10","10","24"]},"System  includes a bus  or other communications mechanism for communicating information, and a processor  coupled to bus  for processing information. Processor  may be any type of general or specific purpose processor. System  further includes a memory  for storing information and instructions to be executed by processor . Memory  can be comprised of any combination of random access memory (\u201cRAM\u201d), read only memory (\u201cROM\u201d), static storage such as a magnetic or optical disk, or any other type of computer readable media. System  further includes a communications device , such as a network interface card, to provide access to a network. Therefore, a user may interface with system  directly, or remotely through a network, or any other method.","Computer readable media may be any available media that can be accessed by processor  and includes both volatile and nonvolatile media, removable and non-removable media, and communications media. Communications media may include computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism, and includes any information delivery media.","Processor  may further be coupled via bus  to a display , such as a Liquid Crystal Display (\u201cLCD\u201d). A keyboard  and a cursor control device , such as a computer mouse, may further be coupled to bus  to enable a user to interface with system  on an as needed basis.","In one embodiment, memory  stores software modules that provide functionality when executed by processor . The modules include an operating system  that provides operating system functionality for system . The modules further include WSC module  for providing RTC, and all other functionality disclosed herein. System  can be part of a larger system, such as added functionality to the \u201cOracle Communications WebRTC Session Controller\u201d from Oracle Corp. Therefore, system  can include one or more additional functional modules  to include the additional functionality. A database  is coupled to bus  to provide centralized storage for modules  and .","Referring again to , with known systems, WebRTC technology enables RTC in a Web browser as defined in IETF and W3C standards. However, many users perform RTC according to the protocols defined by an RCS program. Since WebRTC merely enables real-time media and data transfer, there are technical challenges for a WebRTC application that needs to communicate with an RCS endpoint. Further, in order to be RCS compliant, an application needs to discover the capabilities of the endpoint it is communicating with. RCS capability discovery includes determining which device supports what services.","One known solution to provide RTC between a WebRTC application and an RCS compliant device is to support MSRP over web friendly protocols such as \u201cWebSocket\u201d and \u201cdata channel.\u201d MSRP is a protocol for transmitting a series of related instant messages in the context of a communications session. An application instantiates the session with the Session Description Protocol (\u201cSDP\u201d) over SIP or other rendezvous methods. SDP is a format for describing streaming media initialization parameters. A rendezvous protocol is a computer network protocol that enables resources or peer to peer (\u201cP2P\u201d) network peers to find each other. A socket is a bidirectional communications endpoint for sending\/receiving data to\/from another socket. It is the fundamental technology for programming software to communicate on a TCP\/IP network. A WebSocket is a protocol providing full duplex communications channel over a single transmission control protocol (\u201cTCP\u201d) connection.","One disadvantage with this known approach is that it does not encapsulate an application developer from the complexities associated with interoperating with RCS endpoints, and applications may need to work on low level protocol abstractions.","In contrast to the known solutions, one embodiment of the present invention provides an MSRP over WebSocket implementation that is generally hidden from the application developers and can interact with an RCS client. Embodiments also provide API and signaling enhancements to support RCS device capability discovery.","Referring again to , in one embodiment, WebRTC application  establishes a signaling channel with WSC signaling engine  over a JavaScript Object Notation (\u201cJSON\u201d) protocol for RTC (\u201cJsonRTC\u201d). JSON (JavaScript Object Notation) is a lightweight data-interchange format. JsonRTC establishes the sessions (i.e., persistent communications sessions) and subsessions (i.e., logical session activities within a session, such as a call or a file transfer) used to pass messages between WSC  and its client applications inside WebSocket connections. WebRTC application  uses this signaling channel for querying RCS endpoint  for discovering its capabilities. Accordingly, this capability discovery is an extension over the JsonRTC protocol which is translated by WSC signaling engine  to SIP. In one embodiment, WebRTC application  uses a JavaScript software development kit (\u201cSDK\u201d) for capability discovery.","Once the capability discovery is complete, WebRTC application  utilizes the SDK again to use the signaling channel for initiating RTC with RCS endpoint . During RTC, media engine  in WSC  creates a WebSocket listener for Message Session Relay Protocol (\u201cMSRP\u201d) communications by looking at the SDP that is transferred. MSRP is a protocol for transmitting a series of related instant messages in the context of a communications session. An application instantiates the session with the Session Description Protocol (\u201cSDP\u201d) over SIP or other similar methods. SDP is a format for describing streaming media initialization parameters. The complete uniform resource identifier (\u201cURI\u201d) of the created WebSocket listener includes an ephemeral port and a unique context root. A URI is a string of characters used to identify a name of a resource. An ephemeral port is a short-lived transport protocol port for IP communications allocated automatically from a predefined range. A context root determines the uniform resource locator (\u201cURL\u201d) of a deployed application. A URL is a specific character string that constitutes a reference to a resource. The complete URI of the WebSocket listener (i.e., including the ephemeral port and the unique context root) is communicated to the JavaScript SDK in the client (i.e., WebRTC application ) using the signaling channel.","The JavaScript SDK is then ready for performing RTC with RCS endpoint  (e.g., chat, file transfer, audio\/video communications, etc.). In one embodiment, WebRTC application  uses APIs in the JavaScript SDK to send messages\/files or start an audio\/video communications that is compliant with RCS.","In one embodiment, WSC  supports APIs and call flows that match RCS requirements and call flows. Such APIs and call flows include capability exchange, standalone messaging, 1-1 chat, group chat, file transfer, image\/video sharing, etc. These APIs and call flows may not include any RCS specific feature tags or message payloads. Accordingly, an RCS compliant user agent is readily implemented by extending\/using Groovy scripts and JavaScript APIs. Groovy is a dynamic language that can be used as a scripting language for the Java Platform, is dynamically compiled to Java Virtual Machine (\u201cNM\u201d) bytecode, and interoperates with other Java code and libraries. Further, embodiments are aligned with Joyn device API functionality where possible. \u201cJoyn\u201d refers to the Rich Communications Services program that is a Global System for Mobile communications (\u201cGSM\u201d) Association (\u201cGSMA\u201d) program for creation of inter-operator communications services based on IMS.","In one embodiment, RCS capability exchange can be implemented by a capability discovery process through a message (e.g., an \u201cOPTIONS\u201d message), or by capability discovery via presence.  illustrates an example call flow  for device capability exchange via \u201cSIP OPTIONS\u201d message  in accordance with one embodiment. User A  initiates the capability discovery by sending \u201cSIP OPTIONS\u201d message  intended for users B, C, or D (not shown). User A  implements phone logic  and client logic . Phone logic  specifies an options message mechanism  to interpret the response received after sending \u201cSIP OPTIONS\u201d message  and determine the RCS capabilities of a user. In the example of , User B is \u201cREGISTERED,\u201d user C is \u201cNOT REGISTERED,\u201d and user D is \u201cNOT an RCS-e user\u201d (i.e., user D is not RCS enhanced). \u201cSIP OPTIONS\u201d message  is transmitted over a mobile network operators (\u201cMNO\u201d) core network  and through an MNO IMS core . MNO IMS core  includes an RCS application server (\u201cAS\u201d) , which in turn includes a presence server  and an Extensible Markup Language (\u201cXML\u201d) document management server (\u201cXDMS\u201d) . RCS AS  is a server that handles RCS server side requirements in a SIP network. Presence Server  is a server in the network which manages the presence status (e.g., online, busy, offline, etc.) of each user. XDMS  is a server used by the network for keeping information such as buddy list (i.e., friends list), white list, black list, etc.","During RCS capability discovery, client logic  handles the transmission of \u201cSIP OPTIONS\u201d message  and the reception of corresponding responses at user A . For user B that is \u201cREGISTERED,\u201d client logic  receives a \u201cSIP  OK\u201d response  including capabilities of user B. For user C that is \u201cNOT REGISTERED,\u201d client logic  receives an \u201cERROR  TEMPORARILY UNAVAILABLE\/ REQUEST TIMEOUT\u201d message . For user D that is \u201cNOT an RCS-e user,\u201d client logic  receives an \u201cERROR  NOT FOUND\u201d message . Accordingly, based on the response received for \u201cSIP OPTIONS\u201d message , RCS capabilities of a client may be determined.","In one embodiment, a \u201ccapability\u201d package is added to Json-RTC protocol to send capability queries between WSC clients. Further, an \u201cenquiry\u201d action is added that represents the message for querying capabilities. An action is an object used to separate functionality and state from a component. For example, if there are two or more components that perform the same function, an action object can be used to implement the function. Further, an \u201cenquiry_data\u201d general header is provided to send header information specific to enquiry. A header indicates what value types, if any, a method will return. Capability exchange may also happen within an existing subsession that is part of another package (e.g., a call). In that case, the action and general header are reused for the same purpose.","In one embodiment, \u201cenquiry\u201d action uses control types \u201crequest\u201d and \u201cresponse\u201d. The following functionality provides example JSON messages for capability enquiry request and response in accordance with one embodiment.",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003\u201ccontrol\u201d: {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201cpackage_type\u201d: \u201ccapability\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201ctype\u201d:\u201crequest\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201csequence\u201d:\u201c2\u201d,"]},{"entry":[{},"\u2003\u2003},"]},{"entry":[{},"\u2003\u2003\u201cheader\u201d: {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201caction\u201d:\u201cenquiry\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201cenquiry_data\u201d: \u201cIM\/CHAT,VS\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201cinitator\u201d:\u201cbob@att.com\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201ctarget\u201d:\u201calice@att.com\u201d,"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"}"]},{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003\u201ccontrol\u201d: {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201cpackage_type\u201d: \u201ccapability\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201ctype\u201d:\u201cresponse\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201csequence\u201d:\u201c2\u201d,"]},{"entry":[{},"\u2003\u2003},"]},{"entry":[{},"\u2003\u2003\u201cheader\u201d: {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201caction\u201d:\u201cenquiry\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201cenquiry_data\u201d: \u201cIM\/CHAT\u201d"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201cinitator\u201d:\u201cbob@att.com\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201ctarget\u201d:\u201calice@att.com\u201d,"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, a JavaScript class \u201cCapabilityExchange\u201d is created using a constructor \u201cCapabilityPackage(session, packageType)\u201d (with a default packageType \u201ccapability\u201d), or with a call to a method \u201ccreateCapabilityExchange\u201d that creates a fresh \u201cCapabilityExchange\u201d instance. In object-oriented programming (\u201cOOP\u201d), a class is an extensible program code template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions, methods). A method is a subroutine associated with an object of a class that forms its interface through which the outside members of the class (i.e., other objects) can access its private members (e.g., the encapsulated data). A constructor in a class is a subroutine called to create an object.","In one embodiment, constructor \u201cCapabilityExchange(subSession)\u201d creates a \u201cCapabilityExchange\u201d with a \u201csubSession\u201d object instance as parameter. Table 1 shows the methods used for capability discovery and Table 2 provides properties for \u201ctype Definition: Query\u201d in accordance with one embodiment.",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Capability discovery methods"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["enquiry(selfCapability, target)","Query the capability of peer side, also"]},{"entry":[{},"carry self capability in query request."]},{"entry":["respond(Query, selfCapability)","Response peer's capability query"]},{"entry":[{},"with self capability, self capability may"]},{"entry":[{},"be empty, e.g. query from blacklist."]},{"entry":["onQueryRequest(Query)","callback function for incoming"]},{"entry":[{},"capability query request."]},{"entry":["onQueryResponse(Query)","callback function for capability"]},{"entry":[{},"query response."]},{"entry":["onError(Error)","callback function for error response"]},{"entry":[{},"such as unreachable or time out."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Properties for \u201ctype Definition: Query\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Properties","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["ssid","String","the subSession id, it is generated by SDK."]},{"entry":["initiator","String","the initiator of the capability enquiry."]},{"entry":["target","String","the capability enquiry target."]},{"entry":["initiatorCapability","String","the capability description of the enquiry"]},{"entry":[{},{},"initiator."]},{"entry":["targetCapability","String","the capability description of the enquiry"]},{"entry":[{},{},"target."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The following example functionality provides an example capability exchange in accordance with one embodiment.",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/Create fresh"},{"entry":"var capabilityPackage = new wsc.CapabilityPackage(wscSession);"},{"entry":"var capabilityExchange = capabilityPackage.createCapabilityExchange( );"},{"entry":"\/\/Create inside a call"},{"entry":"var capabilityExchange = new CapabilityExchange(call);"},{"entry":"\u2003\/\/Interface to send a capability query message"},{"entry":"\u2003capabilityExchange.enquiry(\u201cFile transfer\u201d, \u201cbob1@example.com\u201d);"},{"entry":"\u2003\/\/Interface to listen for the query response"},{"entry":"\u2003capabilityExchange.onQueryResponse = function (Query){"},{"entry":"\u2003\u2003\u2003console.log(\u201cThere is a capability query response"},{"entry":"\u2003\u2003\u2003from: \u201d+Query.target);"},{"entry":"\u2003};"},{"entry":"\u2003\/\/Interface to listen for the query request"},{"entry":"\u2003capabilityExchange.onQueryRequest = function (Query){"},{"entry":"\u2003\u2003\u2003console.log(\u201cThere is a capability query from: \u201d+Query.initiator);"},{"entry":"\u2003\u2003\u2003var selfCapability= \u201cImage share\u201d;"},{"entry":"\u2003\u2003\u2003self.respond(Query, selfCapability);"},{"entry":"\u2003};"},{"entry":"\u2003capabilityExchange.onError = function(err){"},{"entry":"\u2003\u2003\u2003console.log(\u201cError action: \u201d+err-action);"},{"entry":"\u2003\u2003\u2003console.log(\u201cError code: \u201d+err.errorCode);"},{"entry":"\u2003\u2003\u2003console.log(\u201cError reason: \u201d+err.errorReason);"},{"entry":"\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, Groovy scripts (i.e., pseudo codes) are added to handle capability discovery criteria based on the package (e.g., capability or call), action (e.g., enquiry), and SIP method (e.g., \u201cOPTIONS\u201d). The following functionality provides an example Groovy script configured in a \u201ccall\u201d package or a new \u201ccapability\u201d package to support capability discovery on the server side in accordance with one embodiment.",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"FROM_APP\/request\/enquiry"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"def sipRequest = context.sipFactory.createSipRequest(\u201cOPTIONS\u201d)"]},{"entry":[{},"def tags ="]},{"entry":[{},"mapToSipTags(context.webMessage.header.enquiry_data) \/\/"]},{"entry":[{},"TODO, this is mock method. mapping"]},{"entry":[{},"sipRquest.addHeader(\u201cAccept-contact\u201d, tags)"]},{"entry":[{},"sipRequest.setSipContactParameter(tags, null)"]},{"entry":[{},"sipRequest.send( )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"FROM_NET\/response\/OPTIONS"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"def sipRequest = context.originatingSipMessage"]},{"entry":[{},"def webMessage ="]},{"entry":[{},"context.webFactory.createWebResponse(\u201cenquiry\u201d)"]},{"entry":[{},"webMessage.header = ["]},{"entry":[{},"\u2003\u2003initiator : sipAddressToString(sipRequest.from),"]},{"entry":[{},"\u2003\u2003target : sipAddressToString(sipRequest.to)"]},{"entry":[{},"]"]},{"entry":[{},"\/\/parse \u201ccontact\u201d tags and mapping them to Web \u201cenquriy_data\u201d"]},{"entry":[{},"webMessage.header.enquiry_data = <capabilities data>"]},{"entry":[{},"webMessage.send( )"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"One embodiment determines the \u201cpackage\u201d type for an incoming \u201cSIP OPTIONS\u201d in an initial request. For example, in \u201cScript Library,\u201d embodiments add logic in \u201cresolvePackageType\u201d method to resolve \u201cOPTIONS\u201d request according to certain headers. In the following example functionality the user checks for specific headers in accordance with one embodiment.",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String resolvePackageType(final WscSipRequest sipRequest) {"]},{"entry":[{},"\u2003\u2003..."]},{"entry":[{},"\u2003\u2003if (\u201cOPTIONS\u201d.equalsIgnoreCase(sipRequest.method) &&"]},{"entry":[{},"\u2003\u2003sipRequest.getHeader(\u201cAccept-Contact\u201d).contains(\u201c+"]},{"entry":[{},"\u2003\u2003\u2003\u2003packageType = \u201ccapability\u201d"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003\u2003..."]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, WSC uses \u201cPager Mode\u201d to implement sending standalone messages, while on the network side \u201cSIP MESSAGE\u201d request is used. A \u201cmessaging\u201d package is defined and used on its own subsession, and a \u201csend\u201d action is defined for sending messages using control type \u201cmessage.\u201d The following functionality provides an example JSON message for \u201cmessaging\u201d package in accordance with one embodiment.",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003\u201ccontrol\u201d: {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201cpackage_type\u201d: \u201cmessaging\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201ctype\u201d:\u201crequest\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201csequence\u201d:\u201c2\u201d,"]},{"entry":[{},"\u2003\u2003},"]},{"entry":[{},"\u2003\u2003\u201cheader\u201d: {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201caction\u201d:\u201csend\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201cinitator\u201d:\u201cbob@att.com\u201d,"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201ctarget\u201d:\u201calice@att.com\u201d,"]},{"entry":[{},"\u2003\u2003},"]},{"entry":[{},"\u2003\u2003\u201cpayload\u201d: {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u201ccontent\u201d: \u201c<message data>\u201d"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, an API is used to send the standalone message. The content of the message is provided by the application, and WSC does not modify or understand the message content. A JavaScript class \u201cmessaging\u201d is created using constructor \u201cMessagingPackage(session, packageType)\u201d for which the default packageType is \u201cmessaging.\u201d Method \u201ccreateMessaging\u201d is also used to create a messaging instance. Table 3 provides methods of class \u201cmessaging\u201d and Table 4 provides properties for \u201cType Definition: MessagingMessage\u201d in accordance with one embodiment.",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"\u201cMessaging\u201d methods"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["send(textMsg, target)","Send text message to target,"]},{"entry":[{},"return the msgId of the sent message."]},{"entry":["accept(message)","Accept the message, the message is"]},{"entry":[{},"type of MessagingMessage"]},{"entry":["reject(message, code, reason)","Reject the incoming message,"]},{"entry":[{},"the message is type of MessagingMessage"]},{"entry":["getMessage(msgId)","Get the pending message from wsc"]},{"entry":[{},"Session by given msgId, the msgId is"]},{"entry":[{},"returned by invoke the send method"]},{"entry":["onNewMessage(message)","Callback function for new message,"]},{"entry":[{},"the message is type of MessagingMessage"]},{"entry":["onSuccessResponse(message)","Callback function for sending message"]},{"entry":[{},"success response, the message is type"]},{"entry":[{},"of MessagingMessage"]},{"entry":["onErrorResponse(message,","Callback function for sending"]},{"entry":["code, reason)","message error response, the message is"]},{"entry":[{},"type of MessagingMessage"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Properties for \u201cType Definition: MessagingMessage\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Properties","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["msgId","String","the message id that is genereated by SDK"]},{"entry":["initiator","String","the sender of the message"]},{"entry":["target","String","the receiver of the message"]},{"entry":["content","String","the text message content"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The following example functionality sends a stanalone message in accordance with one embodiment.",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Create Messaging package"]},{"entry":[{},"messagingPackage = new wsc.MessagingPackage(wscSession);"]},{"entry":[{},"var messaging = MessagingPackage.createMessaging( );"]},{"entry":[{},"\/\/ Messaging interfaces"]},{"entry":[{},"messaging.send(textMsg, target);"]},{"entry":[{},"messaging.onNewMessage = onNewMessage;"]},{"entry":[{},"function onNewMessage(msg) {"]},{"entry":[{},"\u2003\u2003var"]},{"entry":[{},"\u2003\u2003\u2003\u2003initiator = msg.initiator,"]},{"entry":[{},"\u2003\u2003\u2003\u2003content = msg.content;"]},{"entry":[{},"\u2003\u2003\u2003\u2003messaging.accept(msg);"]},{"entry":[{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, Groovy scripts (i.e., pseudo codes) are added to handle messaging criteria based on the package \u201cmessaging\u201d, action (e.g., send), and SIP method (e.g., \u201cMESSAGE\u201d). In order to support sending a standalone message on the server side, the following example Groovy scripts may be configured for a new \u201cmessaging\u201d package in accordance with one embodiment.",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"FROM_APP\/message\/send"},{"entry":"\u2003\u2003def sipRequest = context.sipFactory.createSipRequest(\u201cMESSAGE\u201d,"},{"entry":"\u2003\u2003getFromAddress(context), getToAddress"},{"entry":"\u2003\u2003if (context.webMessage?.payload?.content) {"},{"entry":"\u2003\u2003\u2003\u2003sipRequest.setContent(context.webMessage.payload.content,"},{"entry":"\u2003\u2003\u201ctext\/plain\u201d)"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003sipRequest.send( )"},{"entry":"FROM_NET\/request\/MESSAGE"},{"entry":"\u2003\u2003def sipRequest = context.originatingSipMessage"},{"entry":"\u2003\u2003def webMessage = context.webFactory.createWebMessage(\u201csend\u201d)"},{"entry":"\u2003\u2003webMessage.header = ["},{"entry":"\u2003\u2003\u2003\u2003initiator : sipAddressToString(sipRequest.from),"},{"entry":"\u2003\u2003\u2003\u2003target : sipAddressToString(sipRequest.to)"},{"entry":"\u2003\u2003]"},{"entry":"\u2003\u2003webMessage.payload = [\u201ccontent\u201d : sipRequest.content.toString( )]"},{"entry":"\u2003\u2003context.sipFactory.createSipResponse(200).send( )"},{"entry":"\u2003\u2003webMessage.send( )"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"One embodiment provides chat functionality that represents a \u201csession-mode\u201d messaging (i.e., a conversational exchange of messages with a definite beginning and end). For browser to RCS client communications, the SDK uses MSRP and SIP SDP to perform a negotiation with a target and setup a WebSocket connection with media engine . The SDK then chunks data according to the MSRP specification and passes them through the WebSocket to media engine . Accordingly, chunking is performed within the client and media engine  does not need to re-chunk data. For group chat, a \u201cparticipant list\u201d is added to the message by using corresponding APIs. Group chat is created by a server in the network by taking the participant list and creating a mixer. For browser to browser chat, MSRP is not necessary and a Web application can use a \u201cCallPackage\u201d data channel function. The Web application can first use the capability exchange function to query target capability and then choose the appropriate way to implement a chat.","In order to provide MSRP over WebSocket, in accordance with one embodiment, constructor \u201cChatPackage (session, packageType)\u201d is used for which the default packageType is \u201cchat.\u201d Tables 5 and 6 show example methods used for providing MSRP over WebSocket and example methods used for \u201cchat,\u201d respectively, in accordance with one embodiment. Tables 7 and 8 show example properties for \u201ctype Definition: ChatConfig\u201d and \u201ctype Definition: ChatMessage,\u201d respectively, in accordance with one embodiment.",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Methods used for MSRP over WebSocket"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method",{}]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["createChat(target)","Create a 1-1 or Group Chat."]},{"entry":["prepareChat(session, callee)","used to create a extended Chat object."]},{"entry":["onIncomingChat(chat)","callback function for incoming chat request."]},{"entry":["close( )","Terminate all the Chat sessions and release"]},{"entry":[{},"the resources"]},{"entry":["getChats( )","Get all the chat sessions."]},{"entry":["onMessage(msg)","callback function for the JSON message to"]},{"entry":[{},"the ChatPackage."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Methods used for \u201cchat\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["start(chatConfig, extHeader)","start the chat."]},{"entry":["addParticipants( )","Add participants into the chat."]},{"entry":[{},"By doing this, the SDK will add a"]},{"entry":[{},"participants header to the JSON"]},{"entry":[{},"protocol."]},{"entry":["send(message)","Send message, return the msgId."]},{"entry":["accept(chatConfig, extHeaders)","Accept the chat request."]},{"entry":["end( )","End the chat session."]},{"entry":["decline(code, reason, extHeaders)","Decline the chat request with the"]},{"entry":[{},"reason code."]},{"entry":["setSecure(isSecure)","Set the transport layer to be secure"]},{"entry":[{},"or not."]},{"entry":["getInitiator( )","Gets the initiator of the Chat."]},{"entry":["getTarget( )","Gets the target of the Chat."]},{"entry":["onChatMessage(chatMessage)","callback function for incoming chat"]},{"entry":[{},"message."]},{"entry":["onMessageSendSuccess(msgId)","callback function for message"]},{"entry":[{},"send success."]},{"entry":["onMessageSendFailure(msgId, status,","callback function for message"]},{"entry":["reason)","send failure."]},{"entry":["onStateChange( )","callback function for chat"]},{"entry":[{},"signalling state change."]},{"entry":["onConnectionStateChange( )","callback function for the chat"]},{"entry":[{},"connection state changes."]},{"entry":["onMessageTyping( )","Callback function that indicates the"]},{"entry":[{},"other side is typing message.."]},{"entry":["onMessageTypingStop( )","Callback function that indicates the"]},{"entry":[{},"other side stopped typing message.."]},{"entry":["onMessage(msg)","callback function for the JSON"]},{"entry":[{},"message to the Chat."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 7"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Properties for \u201ctype Definition: ChatConfig\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Properties","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["acceptTypes","Array","The \u201caccept-types\u201d attribute contains"]},{"entry":[{},{},"a list of media types that the endpoint is"]},{"entry":[{},{},"willing to receive. It may contain zero"]},{"entry":[{},{},"or more registered media-types, or \u201c\u2009\u201d"]},{"entry":["acceptWrappedTypes","Array","The \u201caccept-wrapped-types\u201d attribute"]},{"entry":[{},{},"contains a list of media types that the"]},{"entry":[{},{},"endpoint is willing to receive in an"]},{"entry":[{},{},"MSRP message with multipart content,"]},{"entry":[{},{},"but may not be used as the outermost"]},{"entry":[{},{},"type of the message. It may contain"]},{"entry":[{},{},"zero or more registered media-types,"]},{"entry":[{},{},"or \u201c\u2009\u201d"]},{"entry":["maxSize","Number","The \u201cmax-size\u201d attribute indicates"]},{"entry":[{},{},"the largest message an endpoint wishes"]},{"entry":[{},{},"to accept. It may take any whole"]},{"entry":[{},{},"numeric value, specified in octets."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 8"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Properties for \u201ctype Definition: ChatMessage\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Properties","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"contentType","String","The type of the chat message."]},{"entry":[{},"content","String","The content of the chat message."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"The following example functionality provides a chat in accordance with one embodiment.",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"var chatPackage = new wsc.ChatPackage(mSession);"]},{"entry":[{},"chatPackage.onIncomingChat = onIncomingChat;"]},{"entry":[{},"var wscChat = chatPackage.createChat(callee);"]},{"entry":[{},"wscChat.onSessionStateChange = onChatSessionStateChange;"]},{"entry":[{},"wscChat.onChatMessage = onChatMessage;"]},{"entry":[{},"wscChat.onMessageSendSuccess = onMessageSendSuccess;"]},{"entry":[{},"wscChat.onMessageSendFailure = onMessageSendFailure;"]},{"entry":[{},"wscChat.onMessageTyping = onMessageTyping;"]},{"entry":[{},"wscChat.onMessageTypingStop = onMessageTypingStop;"]},{"entry":[{},"var chatConfig = {...};"]},{"entry":[{},"wscChat.start(chatConfig);"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"One embodiment provides functionality for image or file transfer as an MSRP file transfer. As described herein with reference to a session mode chat, embodiments provide APIs for communications between a browser application and an RCS client. Browser to browser communications can use the data channel. A \u201cFileTransferPackage (session, packageType)\u201d constructor is provided with a default packageType of \u201cfileTransfer.\u201d Tables 9 and 10 provide example methods for \u201cFileTransferPackage\u201d and \u201cFileTransfer,\u201d respectively, in accordance with one embodiment.",{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 9"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"\u201cFileTransferPackage\u201d methods"},{"entry":"Method"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["createFileTransfer(target)","Create a 1-1 or 1-N file transfer."]},{"entry":["prepareFileTransfer( )","used to create a extended File Transfer"]},{"entry":[{},"object."]},{"entry":["onFileTransfer(fileTransfer)","callback function for transfer files request."]},{"entry":["close( )","Terminate all the FileTransfer sessions"]},{"entry":[{},"and release all resources"]},{"entry":["getFileTransfers( )","Get all the FileTransfer sessions."]},{"entry":["onMessage(msg)","callback function for the JSON message to"]},{"entry":[{},"the FileTransferPackage."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 10"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"\u201cFileTransfer\u201d methods"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["start(fileConfig, extHeaders)","Start file transfer with single file,"]},{"entry":[{},"the default operation is push file"]},{"entry":[{},"to target, if set "]},{"entry":[{},"fileConfig.props.direction"]},{"entry":[{},"to \u2018receive\u2019, the operation is pull"]},{"entry":[{},"file from target. After invoke this"]},{"entry":[{},"method, the SDK will set the"]},{"entry":[{},"\u2018fileTransferId\u2019 to the fileConfig"]},{"entry":[{},"object."]},{"entry":["start(fileConfigs, extHeaders)","Not Supported yet. Start file trans-"]},{"entry":[{},"fer with multiple files, the default"]},{"entry":[{},"operation is push file to target, if"]},{"entry":[{},"set fileConfig.props.direction"]},{"entry":[{},"to \u2018receive\u2019, the operation"]},{"entry":[{},"is pull file from target. After"]},{"entry":[{},"invoke this method, the SDK"]},{"entry":[{},"will set the \u2018fileTransferId\u2019"]},{"entry":[{},"to each fileConfig object."]},{"entry":["addParticipants( )","Add participants into the"]},{"entry":[{},"fileTransfer. By doing"]},{"entry":[{},"this, the SDK will add a"]},{"entry":[{},"participants header to the"]},{"entry":[{},"JSON protocol."]},{"entry":["accept(fileConfigs, extHeaders)","Accept the chat request."]},{"entry":["decline(code, reason, extHeaders)","Decline the chat request."]},{"entry":["abort( )","Aborts the ongoing file transfer"]},{"entry":["setSecure(isSecure)","Set the transport layer to be"]},{"entry":[{},"secure or not."]},{"entry":["getInitiator( )","Gets the initiater of the"]},{"entry":[{},"FileTransfer."]},{"entry":["getTarget( )","Gets the target of the FileTransfer."]},{"entry":["onFileData(fileData)","callback function for file data."]},{"entry":["onProgress(fileProgressData)","callback function send file"]},{"entry":[{},"progress."]},{"entry":["onStateChange( )","callback function for file transfer"]},{"entry":[{},"signalling state change."]},{"entry":["onConnectionStateChange( )","callback function for file transfer"]},{"entry":[{},"connection state changes."]},{"entry":["onFileTransferSuccess(fileTransferId)","callpack function for file transfer"]},{"entry":[{},"success."]},{"entry":["onFiieTransferFailure(fileTransferId,","callback function for file transfer"]},{"entry":["status, reason)","failure."]},{"entry":["onMessage(msg)","callback function for the JSON"]},{"entry":[{},"message to the FileTransfer."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Tables 11, 12, 13, 14, and 15 provide example properties for \u201cType Definition: FileConfig\u201d \u201cType Definition: FileProperty,\u201d \u201cType Definition: FileData,\u201d \u201cType Definition: FileDataRange,\u201d and \u201cType Definition: FileProgressData,\u201d respectively, in accordance with one embodiment.",{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 11"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Properties for \u201ctype Definition: FileConfig\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Properties","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"file","window.File","The js File instance"]},{"entry":[{},"props","FileProperty","The file properties."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 12"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Properties for \u201ctype Definition: FileProperty\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Properties","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["name","String","The file name"]},{"entry":["size","Number","The file size in octets."]},{"entry":["type","String","The MIME type of the file."]},{"entry":["hashes","Array","Hash computation of the file, it includes a"]},{"entry":[{},{},"set of hash algorithm and its value that"]},{"entry":[{},{},"in format: {algorithmName : \u201c, value : \u201d}"]},{"entry":["dispositon","String","t is the suggestion to peer point how"]},{"entry":[{},{},"to handle the file. there are 2 options:"]},{"entry":[{},{},"\u2018render\u2019 indicates that a file should be"]},{"entry":[{},{},"automatically rendered; \u2018attachment\u2019"]},{"entry":[{},{},"indicate to the file receiver that the file"]},{"entry":[{},{},"should not be rendered at the reception"]},{"entry":[{},{},"of the file. the default value is \u2018render\u2019."]},{"entry":["description","String","The description of the file."]},{"entry":["creationTime","String","The file creation time"]},{"entry":["modificationTime","String","The file modification time."]},{"entry":["readTime","String","The file read time."]},{"entry":["icon","String","cid-url for icon of the file (for image files in"]},{"entry":[{},{},"general)."]},{"entry":["startOffset","String","Start offset of file range, refers to"]},{"entry":[{},{},"the octet position of the file where the file"]},{"entry":[{},{},"transfer should start. The first octet of a"]},{"entry":[{},{},"file is denoted by the ordinal number"]},{"entry":[{},{},"\u201c1\u201d."]},{"entry":["stopOffset","String","Stop offset of file range, refers to"]},{"entry":[{},{},"the octet position of the file where the file"]},{"entry":[{},{},"transfer should stop, inclusive of this octet."]},{"entry":[{},{},"The \u201cstop offset\u201d value MAY contain a"]},{"entry":[{},{},"\u201c\u2009\u201d if the total size of the file is not known"]},{"entry":[{},{},"in advance."]},{"entry":["direction","String","Direction of the file transfer. There are two"]},{"entry":[{},{},"options: \u2018send\u2019 if to push file, and"]},{"entry":[{},{},"\u2018receive\u2019 if to pull the file."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0066","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 13"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Properties for \u201ctype Definition: FileData\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Properties","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["fileTransferId","String","The file transfer id."]},{"entry":["range","FileDataRange","The range of the data in the total file."]},{"entry":["content","UInt8Array","The content."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0067","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 14"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Properties for \u201ctype Definition: FileDataRange\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Properties","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"start","Number","The start byte of the data."]},{"entry":[{},"end","Number","The end byte of the data."]},{"entry":[{},"total","Number","The total file data byte number."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0068","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 15"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Properties for \u201ctype Definition: FileProgressData\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Properties","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["fileTransferId","String","The file transfer id."]},{"entry":["range","FileDataRange","The range of the data in the total file."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The following example functionality provides a file transfer in accordance with one embodiment.",{"@attributes":{"id":"p-0070","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"var fileTransferPackage = new wsc.FileTransferPackage(mSession);"},{"entry":"fileTransferPackage.onFileTransfer = onFileTransfer;"},{"entry":"var wscFileTransfer = fileTransferPackage.createFileTransfer(callee);"},{"entry":"wscFileTransfer.onCallStateChange = onCallStateChange"},{"entry":"wscFileTransfer.onSessionStateChange = onSessionStateChange"},{"entry":"wscFileTransfer.onFileData = onFileData;"},{"entry":"wscFileTransfer.onProgress = onFileProgress;"},{"entry":"wscFileTransfer.onFileTransferSuccess = onFileTransferSuccess;"},{"entry":"wscFileTransfer.onFileTransferFailure = onFileTransferFailure;"},{"entry":"var fileConfigs = [...];"},{"entry":"wscFileTransfer.start(fileConfigs);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"One embodiment uses a SDK for providing video transfer through RTP by adding another stream to an existing call.","One embodiment provides an interface between WSC media engine  and a browser JavaScript delivered by signaling engine . The interface allows WebRTC browsers and RCS clients using MSRP to chat and transfer files. In this WebSocket connection model, the WebRTC browser initiates the WebSocket connection. In one example embodiment, media engine  supports both WebSocket and WebSocket secure (\u201cWSS\u201d) connections from the browser, but only MSRP\/WSS are used in WSC deployments.","In one embodiment, WSC media engine  does not have any static listening ports for MSRP, and MSRP listeners are created during MSRP session setup. Media engine  determines an appropriate local interface to use to reach the remote MSRP client and requests allocation of a media port for the MSRP connection from the media port pool of media engine . When media engine  is the passive end of the connection (WS\/WSS and inbound MSRP), the listener is activated and transport information for this local listener is returned in the SDP that is modified by media engine . When media engine  is the active end of the connection (outbound MSRP), media engine  initiates the connection from the allocated media port and transport information is again returned in the SDP that is modified by media engine .","In one embodiment, for authentication of the browser by media engine , the WebRTC MSRP client creates a direct WSS connection between the browser and media engine . Creation of transport layer security (\u201cTLS\u201d) connection between browser and media engine  involves the following functionality. Media engine  is provisioned with a certificate issued by a browser-preloaded trusted root certification authority (\u201cCA\u201d). In cryptography, a public key certificate (also known as a digital certificate or an identity certificate) is an electronic document used to prove ownership of a public key. A CA is an entity that issues digital certificates. A root CA certificate may be the base to issue multiple intermediate CA certificates with varying validation requirements. The media engine MSRP inLeg and outLeg configurations reference corresponding certificates. The media engine certificate common name (\u201cCN\u201d) must match the fully qualified domain name (\u201cFQDN\u201d) used by the browser to initiate the WSS connection. This also applies for MSRP and TLS. FDQN (also called absolute domain name) is a domain name that specifies an exact location in the tree hierarchy of the Domain Name System (\u201cDNS\u201d). DNS is a hierarchical distributed naming system for computers, services, or resource in a network. WSC deployment provides the ability for browsers to DNS-resolve the media engine FQDN, even when media engine clusters are present, and the DNS resolver may be independent of WSC.","In one embodiment, once a TLS connection is established, the browser can contact media engine  using the path component of a WSS resource name supplied via a SDP attribute \u201ca=ws-resource-path\u201d. This resource name path component is dynamically generated by media engine  and is ephemeral and unique. Media engine  allows an inbound WSS connection via this path component for a short interval after its creation. The interval is configurable on media engine . The combination of SDP integrity protection and the short lived unique WSS resource name allows media engine  to determine that the browser is authentic.","In one embodiment, and as described later herein with reference to support in SDP, in order to provide the WSS resource name, media engine  adds a \u201cws-resource-path\u201d attribute to the anchored SDP returned to signaling engine according to \u201cwss-URI=\u201cwss:\u201d \u201c\/\/\u201d host [\u201c:\u201d port] path [\u201c?\u201d query],\u201d as in RFC6455 standard, section 3. \u201cHost\u201d is the media engine FQDN as supplied in the certificate passed to the browser during TLS establishment, \u201cpath\u201d is the value supplied by the \u201cws-resource-path\u201d SDP attribute, and the query component is empty. The WebSocket connection remains open via \u201cWebSocket keepalives\u201d as in RFC6455 5.5.2\/5.5.3.","One embodiment provides WebSocket subprotocols. The WebSockets client adds a \u201cSec-WebSocket-Protocol\u201d header indicating \u201cmsrp\u201d to the \u201cHTTP GET\u201d request initiating the WebSockets connection. The WebSockets server includes an identical header in the corresponding HTTP responses.","One embodiment provides MSRP over WebSockets on both call legs. A MSRP interworking call has one MSRP over WebSocket media connection when WebRTC datachannel is used for WebRTC calls. When media engine  encounters a call with multiple MSRP over WebSocket media connections, the media must remain anchored since the WebRTC endpoints have no WebSocket server capability.","One embodiment provides support in SDP for MSRP over WebSockets via two additions to SDP. A \u201cws\u201d transport parameter appears in the URI in the SDP \u201cpath\u201d attribute when MSRP is transported over WebSockets. A \u201cwss\u201d transport parameter appears in the URI when MSRP is transported over secure WebSockets. Media engine  interprets all SDP MSRP m-lines with path attributes containing a \u201cws\u201d (or \u201cwss\u201d) transport as having originated from an endpoint that supports MSRP over WebSockets. Similarly, media engine  generates path attributes containing a \u201cws\u201d or \u201cwss\u201d transport for all SDP MSRP m lines being forwarded to an endpoint supporting MSRP over WebSockets, as indicated by the associated session-config delivered to media engine . Media engine \u201cin-msrp-session-leg\u201d and \u201cout-msrp-session-leg\u201d configuration properties have \u201cleg-transport\u201d set to WS, WSS, TCP, or TLS as appropriate. Media engine  inspects the received SDP offer \u201cm=message\u201d path attribute and insures the MSRP URI transport parameter matches \u201cleg-transport\u201d in the \u201cin-msrp-session-leg\u201d configuration property. When forwarding the SDP offer (SDP being anchored), the path attribute MSRP URI transport parameter is set based on \u201cout-msrp-session-leg\u201d configuration property. Similar functionality is used when processing the received SDP answer and forwarding the SDP answer (SDP being anchored).","In one embodiment, media engine  supplies the WebSockets resource path via a SDP \u201cws-resource-path\u201d attribute. The \u201cws-resource-path\u201d is required for the WebSockets client to subsequently send a correct \u201cHTTP GET\u201d request to media engine . For an MSRP media stream, when anchoring MSRP, media engine  modifies the following attributes:\n\n","One embodiment performs MSRP traffic forwarding. Media engine  adjusts only \u201cTo-Path\u201d and \u201cFrom-Path\u201d headers to indicate that it is anchoring the traffic. Other MSRP headers remain unchanged. MSRP message bodies carrying chunked traffic are forwarded exactly as received. \u201cSuccess\u201d and \u201cFailure\u201d reports are generated by the MSRP endpoints, except if transport failure is encountered during media engine MSRP traffic forwarding.","One embodiment provides listener creation for MSRP over WebSockets. Media engine  creates a WS\/WSS listener socket if session-config for the leg indicates WS\/WSS transport. This WS\/WSS listener is active before media engine anchored SDP (offer or answer) containing the listener address and port is returned to signaling engine. The WS client should use the IP and port in the media engine anchored offer\/answer SDP (i.e., the path attribute) to initiate a WS connection to media engine . In addition to the WS\/WSS listener information, the returned SDP includes a ws-resource-path attribute. This resource path is used by the WS client when issuing an HTTP GET to request the WS connection. The WS\/WSS listener is valid for the configured number of seconds, and failure to create a connection in that time causes media engine  to reclaim WS\/WSS listener resources.","One embodiment provides connection termination for MSRP over WebSockets. Media engine  terminates a connection to the WebRTC browser if either the connection to the RCS client terminates or signaling engine sends a CallTerminate event to media engine .","The MSRP session manager provides a synchronous API for creation of sessions and session legs. Other session operations including connection control, receiving traffic, forwarding traffic, updating session leg state, and deleting session legs and sessions are asynchronous. This allows the session manager to queue multiple events on a particular MSRP session, support multiple sessions on a connection, and guarantee that the processing of those events is correctly serialized.","The MSRP mstream support runs as part of SDP processing. It activates when one or more \u201cm=message\u201d media-lines with MSRP indicated by protocol are seen in the received SDP. The following are example typical SDP offers for MSRP based instant messaging (\u201cIM\u201d) and file transfer in accordance with one embodiment.",{"@attributes":{"id":"p-0086","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"IM:"},{"entry":"m=message 49477 TCP\/MSRP * c=IN IP4 10.138.237.214"},{"entry":"a=path:msrp:\/\/10.138.237.214:49477\/4299961;tcp a=connection:new"},{"entry":"a=setup:actpass"},{"entry":"a=accept-types:text\/plain message\/CPIM a=accept-wrapped-types:text\/"},{"entry":"plain image\/jpeg image\/gif image\/bmp image\/png a=sendrecv"},{"entry":"File Transfer:"},{"entry":"m=message 8935 TCP\/MSRP * c=IN IP4 10.138.238.49"},{"entry":"a=path:msrp:\/\/10.138.238.49:8935\/25106179;tcp a=connection:new"},{"entry":"a=setup:actpass"},{"entry":"a=accept-types:message\/CPIM application\/octet-stream a=accept-wrapped-"},{"entry":"types:application\/octet-stream image\/jpeg image\/gif image\/bmp image\/png"},{"entry":"a=sendonly"},{"entry":"a=file-selector:name:\u201clog4net.dll\u201d type:application\/octet-stream"},{"entry":"size:270336 a=file-transfer-id:25102438 a=file-disposition:attachment"},{"entry":"a=file-icon:cid:test@msrp.org"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"One embodiment provides functionality for mstream-integration as described in IETF RFC4975 Section 8 and RFC5547 regarding using MSRP with SIP and SDP. For IM and file transfer, the media-line proposing MSRP is accompanied by a mandatory \u201cpath\u201d attribute. This attribute includes one or more URIs visited between the user agent and the WSC media engine . The leftmost URI is the element closest to the WSC media engine . The rightmost URI is the endpoint that initially generated the SDP offer or answer. The rightmost URI supplies the session-id for this session. The media-line proposing MSRP is accompanied by an \u201caccept-types\u201d attribute which specifies media types acceptable to the endpoint which generated the SDP. Media types and subtypes may be wild-carded (specified via \u201c*\u201d). Accept-types may include Multipurpose Internet Mail Extensions (\u201cMIME\u201d) formats that include internal types.","The media-line proposing MSRP may be accompanied by an \u201caccept-wrapped-types\u201d attribute, which specifies media-types that is wrapped inside a container type (the container type being included in the \u201caccept-types\u201d attribute). MSRP media-lines include a protocol field of either \u201cTCP\/MSRP\u201d or \u201cTCP\/TLS\/MSRP.\u201d MSRP media-lines include a port that matches the endpoint's MSRP URI in the path attribute. The exception is a media-line port value of zero indicating a user agent that has declined the MSRP media-line. The RFC allows multiple MSRP media-lines to use a single port.","MSRP connections are made using transport information from the MSRP URI in the path attribute. Transport information from m-lines and c-lines are not used to create MSRP connections. Media-lines proposing MSRP may be accompanied by connection-oriented media attributes specified in IETF RFC4145 (e.g., \u201csetup\u201d and \u201cconnection\u201d), however MSRP connection setup is simplified to default, with the party sending the original being responsible for connecting to its peer, except where MSRP\/WSS is on the MSRP session outleg. The media-line proposing MSRP may be accompanied by \u201cmax-size,\u201d \u201cmax-size-label,\u201d and \u201cmax-size-value\u201d attributes and media format entries. Media flow direction attributes may be present, specifically \u201csendonly,\u201d \u201crecvonly,\u201d \u201cinactive,\u201d and \u201csendrecv.\u201d These attributes indicate permissible direction(s) for MSRP SEND requests.","In one embodiment, as an MSRP B2B relaying MSRP session content, WSC media engine  is minimally involved in processing MSRP specific SDP attributes. The MSRP mstream support code in media engine  for each MSRP media-line provides the following functionality in accordance with one embodiment.\n\n",{"@attributes":{"id":"p-0091","num":"0099"},"figref":["FIG. 4","FIG. 2","FIG. 4"],"b":"16"},"At , WebRTC session controller module  establishes a signaling channel between a browser application and an RCS endpoint. The browser application is a WebRTC application, and the signaling channel supports MSRP communications over WebSockets. In one embodiment, the WebRTC application establishes the signaling channel with a signaling engine within a WSC according to JsonRTC.","At , WebRTC session controller module  queries RCS capabilities of the RCS endpoint via the signaling channel. In one embodiment, the querying of the RCS capabilities of the RCS endpoint is performed via an API in an SDK of the browser application. In one embodiment, the querying of the RCS capabilities of the RCS endpoint is further implemented by Groovy scripts executed in a signaling engine within the WSC.","At , WebRTC session controller module  initiates the RTC between the browser application and the RCS endpoint via the signaling channel. The RTC is an RCS compliant RTC with the RCS endpoint via an API in a JavaScript SDK. The RCS compliant RTC may include standalone messaging, 1-1 chat, group chat, file transfer, image sharing, or video sharing.","At , WebRTC session controller module  creates a WebSocket listener by a media engine  of the WSC for the MSRP communications. The WebSocket listener is created based on a SDP communications received by the signaling engine over a SIP from the RCS endpoint. In one embodiment, the WebSocket listener has a complete URI comprising an ephemeral port and a unique context root.","As disclosed, embodiments implement a flexible WebRTC-RCS gateway. This gives the developers the possibility of implementing WebRTC and RCS applications quickly using the JavaScript SDK. Further, by using a Groovy script in the signaling engine, web applications can control the flexibility of the WSC gateway. Embodiments further provide an MSRP over WebSocket implementation that is transparent to client applications.","Several embodiments are specifically illustrated and\/or described herein. However, it will be appreciated that modifications and variations of the disclosed embodiments are covered by the above teachings and within the purview of the appended claims without departing from the spirit and intended scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 4","FIG. 2"]}]},"DETDESC":[{},{}]}
