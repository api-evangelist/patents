---
title: Dynamic data-driven application integration adapters
abstract: Systems and methods of application integration, including constructing an application integration adapter in dependence upon a profile including data describing the adapter, receiving instructions to alter the adapter, and altering the adapter in dependence upon the instructions. Exemplary embodiments of the invention include communicating integration messages among applications through the adapter as altered. In typical embodiments, receiving instructions to alter the adapter includes detecting changes in the adapter profile. In such embodiments, detecting changes in the adapter profile includes creating a copy of the profile, and periodically comparing the profile and the copy. In other exemplary embodiments, receiving instructions to alter the adapter includes receiving from an application an administrative integration message bearing the instructions to alter the adapter. In such embodiments, altering the adapter in dependence upon the instructions includes updating the profile.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07895589&OS=07895589&RS=07895589
owner: International Business Machines Corporation
number: 07895589
owner_city: Armonk
owner_country: US
publication_date: 20030226
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS","Introduction","DEFINITIONS","Application Integration","Dynamic Alteration of Application Integration Adapters"],"p":["1. Field of the Invention","The field of the invention is data processing, or, more specifically, methods, systems, and products for software application integration.","2. Description of Related Art","Software applications integration is crucial in improving productivity and reducing costs. By streamlining and integrating business processes, companies can greatly reduce operational overhead. By connecting business support systems and operational support systems, applications are able to work in harmony without costly intervention. By moving away from point-to-point messaging, companies gain the benefits of a centralized messaging infrastructure: greater control over business processes and increased operational efficiency.","In the past, software applications integration has been achieved only with high cost. Components of business support systems and operational support systems are often developed and manufactured by separate manufacturers or developers, utilize disparate data structures to encode the same data and utilize disparate modes of data communications. An inventory control application from one developer may post inventory changes, for example, across TCP\/IP to a general ledger developed by an entirely different company. The same inventory control application may post in HTML through HTTP to a purchasing system from a third vendor using a third set of data structures. The purchasing system may post to the general ledger, using a third combination of data structures. And so on. The combinations are endless. And in the past, each such integration was accomplished by hiring systems analysts, software development project managers, software system architects, senior programmers, junior programmers, and so on, to build application integration adapters to convert the data structures and administer the data communications among all these disparate software application systems.","Such application integration adapters have typically been implemented in a so-called \u2018point-to-point\u2019 fashion. That is, an adapter is developed to couple this particular inventory application through this particular data communications coupling using this particular data communications protocol to this particular general ledger. Adding a new application to the mix required all the same new develop costs as for the first two applications to be integrated. For all these reasons, it would be advantageous to have improved means and methods for application integration.","Exemplary embodiments of the invention implement methods of application integration. Exemplary embodiments include constructing an application integration adapter in dependence upon a profile including data describing the adapter, receiving instructions to alter the adapter, and altering the adapter in dependence upon the instructions. In such embodiments, the application integration adapter includes data communications transports, including senders and receivers, and optionally, data transfer managers. In typical embodiments, the data describing the adapter includes data identifying communications protocols, and data identifying applications programs.","Exemplary embodiments of the invention include communicating integration messages among applications through the adapter as altered. In typical embodiments, receiving instructions to alter the adapter includes detecting changes in the adapter profile. In such embodiments, detecting changes in the adapter profile includes creating a copy of the profile, and periodically comparing the profile and the copy. In other exemplary embodiments, receiving instructions to alter the adapter includes receiving from an application an administrative integration message bearing the instructions to alter the adapter. In such embodiments, altering the adapter in dependence upon the instructions includes updating the profile.","The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.","The present invention is described to a large extent in this specification in terms of methods for software application integration. Persons skilled in the art, however, will recognize that any computer system that includes suitable programming means for operating in accordance with the disclosed methods also falls well within the scope of the present invention.","Suitable programming means include any means for directing a computer system to execute the steps of the method of the invention, including for example, systems comprised of processing units and arithmetic-logic circuits coupled to computer memory, which systems have the capability of storing in computer memory, which computer memory includes electronic circuits configured to store data and program instructions, programmed steps of the method of the invention for execution by a processing unit. The invention also may be embodied in a computer program product, such as a diskette or other recording medium, for use with any suitable data processing system.","Embodiments of a computer program product may be implemented by use of any recording medium for machine-readable information, including magnetic media, optical media, or other suitable media. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that, although most of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware, nevertheless, alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.","In this specification, the terms \u201cfield,\u201d \u201cdata element,\u201d and \u201cattribute,\u201d unless the context indicates otherwise, generally are used as synonyms, referring to individual elements of digital data. Aggregates of data elements are referred to as \u201crecords\u201d or \u201cdata structures.\u201d Aggregates of records are referred to as \u201ctables\u201d or \u201cfiles.\u201d Aggregates of files or tables are referred to as \u201cdatabases.\u201d Complex data structures that include member methods, functions, or software routines as well as data elements are referred to as \u201cclasses.\u201d Instances of classes are referred to as \u201cobjects\u201d or \u201cclass objects.\u201d","\u201c802.11\u201d refers to a family of specifications developed by the IEEE for wireless LAN technology. 802.11 specifies an over-the-air interface between a wireless client and a base station or between two wireless clients.","\u201cAPI\u201d is an abbreviation for \u201capplication programming interface.\u201d An API is a set of routines, protocols, and tools for building software applications.","\u201cBluetooth\u201d refers to an industrial specification for a short-range radio technology for RF couplings among client devices and between client devices and resources on a LAN or other network. An administrative body called the Bluetooth Special Interest Group tests and qualifies devices as Bluetooth compliant. The Bluetooth specification consists of a \u2018Foundation Core,\u2019 which provides design specifications, and a \u2018Foundation Profile,\u2019 which provides interoperability guidelines.","\u201cCORBA\u201d means the Common Object Request Broker Architecture, a standard for remote procedure invocation first published by the Object Management Group (\u201cOMG\u201d) in 1991. CORBA can be considered a kind of object-oriented way of making \u201cRPCs\u201d or remote procedure calls, although CORBA supports many features that do not exist in RPC as such. By use of CORBA technology, remote method invocations effected in object-oriented programming languages such as Java and C++ look like invocations of local member methods in local objects.","CORBA data communications are administered by middleware applications known as Object Request Brokers or \u2018ORBs.\u2019 ORBs communicate with \u201cGIOP,\u201d the General Inter-ORB Protocol, the CORBA protocol that defines structures and formats for passing messages among heterogeneous computers and their various architectures. GIOP is not based on any particular network protocol, such as IPX or TCP\/IP. GIOP defined to function over its most widely used communication transport platform, TCP\/IP, is called \u201cIIOP,\u201d the Internet Inter-ORB Protocol. Because of the general usefulness of tcp\/ip, this disclosure, in describing example embodiments, tends to use the terms GIOP and IIOP more or less interchangeably, although the use of the term IIOP is not intended to limit application of embodiments of the present invention to the single transport protocol suite TCP\/IP.","\u201cCGI\u201d means \u201cCommon Gateway Interface,\u201d a standard technology for data communications of resources between web servers and web clients. More specifically, CGI provides a standard interface between servers and server-side \u2018gateway\u2019 programs which administer actual reads and writes of data to and from file systems and databases. The CGI interface typically sends data to gateway programs through environment variables or as data to be read by the gateway programs through their standard inputs. Gateway programs typically return data through standard output.","\u201cCoupled for data communications\u201d means any form of data communications, wireless, 802.11b, Bluetooth, infrared, radio, internet protocols, HTTP protocols, email protocols, networked, direct connections, dedicated phone lines, dial-ups, serial connections with EIA232 (RS-232), IEEE 1394 (often called \u2018Firewire\u2019 connections, a trademark of Apple Computer, Inc.), Universal Serial Buses (\u201cUSB\u201d), hard-wired parallel port connections, and other forms of data communications as will occur to those of skill in the art. Couplings for data communications include sharing of files, including transferring files from application to application, from an adapter to an application, or from an application to an adapter, including flat files, binary files, text files, database files, HTML files, XML documents, and so on.","\u201cDCOM\u201d means \u2018Distributed Component Object Model,\u2019 an extension of Microsoft's Component Object Model (\u201cCOM\u201d) to support objects distributed across networks. DCOM is part of certain Microsoft operating systems, including Windows NT, and is available for other operating systems. DCOM serves the same purpose as IBM's DSOM protocol, which is a popular implementation of CORBA. Unlike CORBA, which runs on many operating systems, DCOM is currently implemented only for Windows.","\u201cFormat\u201d or \u201cdata format\u201d refers to the overall form of data encoding for data processing and data communications. Examples of data formats include data encoded in the form of HTML documents, XML documents, Java data structures, C++ data structures, C data structures, and so on. In addition to format, computer data has structure, including data element names, data element types, and data element values. In this disclosure, changing or converting the format of data is referred to as \u201cdata translation,\u201d \u201ctranslation,\u201d or \u201ctranslating.\u201d In this disclosure, changing or converting the structure of data is referred to as \u201cdata transformation,\u201d \u201ctransformation,\u201d or \u201ctransforming.\u201d","\u201cHTML\u201d stands for \u2018HyperText Markup Language,\u2019 a standard markup language for displaying web pages on browsers.","\u201cHTTP\u201d stands for \u2018HyperText Transport Protocol,\u2019 the standard data communications protocol of the World Wide Web.","\u201cJMS\u201d means \u2018Java Message Service,\u2019 a Java API specifically designed for application integration messaging. JMS provides a kind of Java enterprise bean that supports asynchronous administration of message traffic. JMS sends and receives can participate in transactions controlled through the Java Transaction API (\u201cJTA\u201d). The JTA operates in coordination with the Java Transaction Service (\u201cJTS\u201d). JTA allows applications and application servers to access transactions. JTS specifies the implementation of a Transaction Manager that supports JTA and implements the Java mapping of the OMG Object Transaction Service (\u201cOTS\u201d) at the level below the API. JTS propagates transactions using IIOP.","\u201cIMAP\u201d means \u2018Internet Message Access Protocol.\u2019 IMAP is a protocol for retrieving email messages from Internet email servers. In \u201coffline\u201d operation, an email client fetches messages from an email server to the client machine where the email client program is running, and then deletes the email messages from the server. In \u201conline\u201d operation, messages can be left on the email server and manipulated remotely by email client programs. POP supports offline email operations. IMAP, the newer protocol, supports both offline and online email operations.","\u201cLAN\u201d means \u2018local area network.\u2019","\u201cNetwork\u201d is used in this specification to mean any networked coupling for data communications among computers or computer systems. Examples of networks useful with the invention include intranets, extranets, internets, local area networks, wide area networks, and other network arrangements as will occur to those of skill in the art.","\u201cPOP\u201d means \u2018Post Office Protocol.\u2019 POP is a protocol used by an email client to retrieve email from a mail server. There are two versions of POP. POP2 requires SMTP to receive email messages from clients or other servers. The newer version, POP3, can be used with or without SMTP.","\u201cPseudocode\u201d is exemplary source code in a programming language or examples of markup in a markup language that is used for explanation in this disclosure. Pseudocode is not represented as conforming strictly to the requirements of any particular programming language or markup language, so that there is no representation that pseudocode examples from this disclosure will compile or execute. Pseudocode examples will, however, help with explanation so as to enable persons of skill in the art to make and use application integration adapters according to embodiments of the present invention.","\u201cRMI\u201d refers to \u2018Remote Method Invocation,\u2019 a protocol set developed by Sun Microsystems to enables Java objects to communicate remotely with other Java objects. RMI is a relatively simple protocol, but unlike more complex protocols such as CORBA and DCOM, it works only with Java objects. CORBA and DCOM support networked communications and remote procedure calls among objects created in any language.","\u201cServer\u201d in this specification refers to a computer or device comprising automated computing machinery on a network that manages resources and requests for access to resources. A \u201csecurity server\u201d can be any server that manages access to resources by use of security objects according to the present invention. A \u201cweb server,\u201d or \u201cHTTP server,\u201d in particular is a server that communicates with browsers by means of HTTP in order to manage and make available to networked computers documents in markup languages like HTML, digital objects, and other resources.","A \u201cServlet,\u201d like an applet, is a program designed to be run from another program rather than directly from an operating system. \u201cServlets\u201d in particular are designed to be run on servers from a conventional Java interface for servlets. Servlets are modules that extend request\/response oriented servers, such as Java-enabled web servers. Java servlets are an alternative to CGI programs. The biggest difference between the two is that a Java servlet is persistent. Once a servlet is started, it stays in memory and can fulfill multiple requests. In contrast, a CGI program disappears after it has executed once, fulfilling only a single a request for each load and run. The persistence of Java servlets makes them generally faster than CGI because no time is spent on loading servlets for invocations after a first one.","\u201cSMTP\u201d means \u2018Simple Message Transfer Protocol.\u2019 SMTP is a protocol for sending email messages between server. Internet email traffic largely travels over SMTP from server to server. After email arrives at a target server, email messages are then retrieved from the server with an email client using either POP or IMAP or. SMTP also is used to send messages from mail clients to mail servers.","\u201cSOAP\u201d is the Simple Object Access Protocol, a protocol for applications communications over the Internet, independent of platform. SOAP includes a convention for representing remote procedure calls and responses. SOAP can potentially be used with a variety of transport protocols, although as a practical matter to date, it is used mostly with HTTP. SOAP generally uses XML to define message formats and then adds HTTP headers for data communications.","\u201cTCP\/IP\u201d refers to two data communications protocols implementing the network layer and the transport layer of the standard ISO protocol stack for data communications protocols. Strictly speaking, \u201cTCP,\u201d the \u201cTransmission Control Protocol,\u201d is a separate layer residing above \u201cIP,\u201d the \u201cInternet Protocol.\u201d The two are often spoken of together, however, as the \u2018TCP\/IP protocol suite.\u2019","A \u201cURI\u201d or \u201cUniversal Resource Identifier\u201d is an identifier of a named object in any namespace accessible through a network. URIs are functional for any access scheme, including for example, the File Transfer Protocol or \u201cFTP,\u201d Gopher, and the web. A URI as used in typical embodiments of the present invention usually includes an internet protocol address, or a domain name that resolves to an internet protocol address, identifying a location where a resource, particularly a web page, a CGI script, or a servlet, is located on a network, usually an internet, a net work using the Internet Protocol in its ISO network layer. URIs directed to particular resources, such as particular HTML files, CGI scripts, or servlets, typically include a path name or file name locating and identifying a particular resource in a file system coupled through a server to a network. To the extent that a particular resource, such as a CGI file or a servlet, is executable, for example to store or retrieve data, a URI often includes query parameters, or data to be stored, in the form of data encoded into the URI. Such parameters or data to be stored are referred to as \u2018URI encoded data.\u2019","\u201cURLs\u201d or \u201cUniversal Resource Locators\u201d comprise a kind of subset of URIs, wherein each URL resolves to a network address. That is, URIs and URLs are distinguished in that URIs identify named objects in namespaces, where the names may or may not resolve to addresses, while URLs do resolve to addresses. Although standards today are written on the basis of URIs, it is still common to such see web-related identifiers, of the kind used to associate web data locations with network addresses for data communications, referred to as \u201cURLs.\u201d This specification refers to such identifiers generally as URIs.","\u201cWAN\u201d means \u2018wide area network.\u2019 An example of a WAN is the Internet.","\u201cWorld Wide Web,\u201d or more simply \u201cthe web,\u201d refers to a system of internet protocol (\u201cIP\u201d) servers that support specially formatted documents, documents formatted in markup languages such as HTML, XML (eXtensible Markup Language), WML (Wireless Markup Language), or HDML (Handheld Device Markup Language). The term \u201cWeb\u201d is used in this specification also to refer to any server or connected group or interconnected groups of servers that implement a hyperlinking protocol, such as HTTP or WAP (the \u2018Wireless Access Protocol\u2019), in support of URIs and documents in markup languages, regardless of whether such servers or groups of servers are coupled to the World Wide Web as such.","\u201cXML\u201d refers to the \u2018eXtensible Markup Language,\u2019 a known standard for structuring data. XML is designed to provide flexible and adaptable information formatting and identification. XML is called extensible because it has no fixed format like HTML, the Hypertext Markup Language, which is a set of predefined markups. Instead, XML is actually a \u2018metalanguage\u2019\u2014a language for describing other languages\u2014which allows users to design customized markup languages for many different types of documents. XML is not, however, a programming language as such; it is a markup standard for structuring data. In this disclosure, however, because XML has the effect of encoding or structuring computer data, preparation of XML documents and XSL specifications, although they may not be carried out by computer programmers as such, nevertheless are considered computer programming or software development.","Like HTML, XML makes use of elements, tags, and attributes. Elements are content segements identified by tags. Elements have possibly empty values, the value of an instance of an element being the string between the beginning and ending tags for the instance of the element. \u2018Tags\u2019 are words bracketed by \u2018<\u2019 and \u2018>,\u2019 and attributes are defined characteristics of elements having for example the form: AttributeName=\u201cvalue\u201d. While HTML specifies what each tag and attribute means, and often how the text between them will look in a browser, XML uses the tags only to delimit pieces of data, and leaves the interpretation of the data completely to the application that reads it. In other words, although in the predefined syntax of HTML, \u201c<p>\u201d means \u2018paragraph,\u2019 \u201c<p>\u201d in an XML file means whatever the reading application says it means. Depending on the context, it may be a price, a parameter, a person, or in many cases it represents an entity having nothing to do with Ps.","\u201cXSL\u201d refers to the \u2018Extensible Style Language,\u2019 a specification for separating style from content when creating HTML or XML pages. XSL specifications work much like templates, allowing users and designers to apply single style documents to multiple pages. XSL is the second style specification to be offered by the World Wide Web Consortium. The first, called Cascading Style Sheets, is similar to XSL but does not include two major XSL's innovations\u2014allowing developers to dictate the way Web pages are printed, and, an innovation particularly useful in many embodiments of the present invention, specifications allowing users or developers to transfer XML documents across different applications. That is, XSL has the capability of specifying transformations of data structures expressed in XML.","\u201cXSLT\u201d refers to the Short for \u2018Extensible Style Language Transformation,\u2019 the language used in XSL style sheets to transform XML documents into other XML documents. An XSL processor reads the XML document and follows the instructions in the XSL style sheet; then it outputs a new XML document or XML-document fragment. This is particularly useful in various embodiments of the present invention, where the same data formats need to be converted into different structures represented in XML.","Exemplary embodiments of the present invention provide application integration adapters capable of data transformation, data translation, and data communications in a variety of computer architectures. , , and illustrate several architectural arrangements supported by, or useful with, application integration adapters (\u201cadapters\u201d) according to various embodiments of the present invention. These figures also present certain architectural aspects of the adapters themselves according to various embodiments of the present invention.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 1","FIG. 1"],"b":["102","106","128","116","128","118","126","116","128","106","116","128","104","102"]},"Couplings for data communications include any method, device, or protocol for data communications, optical, electrical, mechanical, or other. Couplings for data communications certainly include all data communications protocols and remote procedure protocols such as HTTP, CORBA, DCOM, IIOP, GIOP, RMI, SOAP, and so on.","Couplings for data communications include messaging to wireless pager clients identified by telephone numbers over the Simple Network Paging Protocol or \u2018SNPP,\u2019 version 3 of which is an enhanced, two-way protocol as defined in RFC1861. RFC1861 is an Internet protocol suite specification document promulgated by the Network Working Group in the Internet Engineering Task Force.","Couplings for data communications include messaging to wireless pager clients WCTP, the \u2018Wireless Communication Transfer Protocol.\u2019 WCTP is another two-way messaging protocol. WCTP is designed with the particular intention of using HTTP as its transport mechanism. WCTP is an open, non-proprietary industry standard promulgated by members of the PCIA, the Personal Communications Industry Association.","Couplings for data communication include messaging transmitted over HTTP through any of a number of proprietary instant messaging protocols, all of which have application programming interfaces (\u201cAPIs\u201d) available just for this purpose, that is, for use in messaging applications such as PVRs. Examples of such instant messaging protocols having APIs include those available from American On-Line (\u201cAOL\u201d), Microsoft Network (\u201cMSN\u201d), Yahoo, Imici, Inc., and ICQ, Inc.","Couplings for data communications include transmitting messages as email through SMTP, POP, IMAP or other email protocols, between adapters and applications on any kind of device, personal computers, laptops, handhelds, cell phones, servers, and so on.","Couplings for data communications include the Small Message Service (\u201cSMS\u201d) as supported by any telecommunications or telephone service. SMS provides a mechanism for transmitting short messages to and from wireless devices. SMS supports the transmission of short text messages from an adapter to an application a manner similar to alpha-numeric paging. SMS makes use of a Small Message Service Center or \u2018SMSC,\u2019 which acts as a store-and-forward system for short messages. In contrast to other existing text-message transmission services such as alphanumeric paging, SMS is a reliable system, providing mechanisms to guarantee delivery of text messages to destinations. Additionally, SMS supports several input mechanisms that allow interconnection with different message sources and destinations. An adapter, or it sender or receiver, can, for example, function as a so-called \u2018External Short Message Entity,\u2019 or \u2018ESME,\u2019 and transmit SMS messages as HTTP forms or email messages. An adapter can function as a mobile originator, or \u2018MO,\u2019 that is, an SMS-enabled client device or, in effect, a cellular telephone. A distinguishing characteristic of SMS is that an SMS-enabled client is able to receive or submit a short message at any time, regardless whether a voice or data call is in progress.","Couplings for data communications include methods of data coupling other than data communications protocols as such, including, for example, shared memory segments, which could very well be the method utilized in an architecture in which an adapter () is installed on the same server () with an application () integrated by the adapter. A communications module within the application () and a communications module with the adapter (), such as the receivers and senders discussed in more detail below in this disclosure, can be implemented as synchronized Java methods or C or C++ threads communicating messages through shared memory segments with mutual exclusion administered by use of semaphores.","As described above, couplings for data communications include wired network protocols as well as wireless network protocols and messaging systems. In addition, however, couplings for data communications include non-networked couplings as well, including wired serial couplings according to RS-232 (EIA232), IEEE 1394 (often called \u2018Firewire\u2019 connections, a trademark of Apple Computer, Inc.), hard-wired parallel port connections, and other direct, wired couplings as will occur to those of skill in the art.","According to a further exemplary architecture of , an adapter () on a client workstation () integrates functions of an application (), installed on the same workstation, with an application () on a server coupled () for data communications through a LAN () to the workstation. The coupling for data communications () between the adapter () and the application (), because the adapter () and the application () are on the same computer, can be implemented as local calls to software programs or modules on the work station, even through shared memory segments, or through other methods as will occur to those of skill in the art for programs or threads of execution on the same computer to communicate with one another. Although this particular architectural example is shown with a LAN () coupling between the server () and the workstation (), readers by now will understand that the workstation can be a notebook computer and the coupling for data communications () can be an RS232 or USB connection direct through a wire between the server () and the workstation ().","According to a further exemplary architecture of , an adapter () integrates functions of three applications (, , ). The adapter () is coupled () for data communications through a WAN () to one application (). The adapter () is coupled () for data communications to another application () installed on the same server () with the adapter. And the adapter () is coupled () for data communications through a LAN () to a third application () on a second server () behind the same firewall () with the adapter (). In such an architecture, if the application () were an inventory control program in a refinery, the application () was a general ledger on a server in a corporate headquarters, and the application () were a purchasing system in another building on the same corporate campus as the headquarters, then the purchasing system can transmit posting messages for inventory changes via HTTP to the adapter () which can forward them via a shared memory segment to the general ledger and via SOAP, IIOP, or RMI to the purchasing system. The purchasing system and the general ledger can respond with acknowledgment messages to the inventory control program. The purchasing system can transmit posting messages for new purchases to the general ledger only, without copying the inventory control system. And the general ledger can send acknowledgements to the purchasing system only, without copying the inventory control program. All three applications can utilize completely different data structures in their messages, developed with no coordination by three different software development companies.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"i":["a ","a ","a ","a"],"b":["102","106","112","116","140","142","144","105","102","105"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["posting messages from the purchasing system are routed only to the general ledger and not to the inventory control program;","purchase posting acknowledgment messages from the general ledger are routed only to the purchasing system, not to the inventory control program;","posting messages from the inventory control program are routed to both the general ledger and to the purchasing system;","inventory posting acknowledgment messages from the general ledger are routed only to the inventory control program; and","inventory posting acknowledgement messages from the purchasing system are routed only to the inventory control program."]}}}},"A simple adapter, having only two transports and integrating only two applications, may advantageously operate without a route map, routing all messages from either application to the other application, regardless of message type. The example of illustrates the usefulness of a route map in an adapter, however, with, in this example, the route map keyed by message type, source, and destination. The example of illustrates only three applications integrated with only three adapters, and this disclosure discussed only a few messages types. The usefulness of route maps is clear then in light of the fact that in adapters according to embodiments of the present invention there is no limitation regarding the number of transports in an adapter or the number of applications that can usefully be integrated.",{"@attributes":{"id":"p-0074","num":"0078"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"i":["b ","b","b"],"b":["102","112","116","142","144","312","316","118","119","126","127","312","142","316","142"]},{"@attributes":{"id":"p-0075","num":"0079"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["204","202","210","214","218","210"]},"The method of  also includes communicating () integration messages () among applications (, ) through the adapter (). In many embodiments of the method of , providing () an adapter profile further comprises providing an adapter profile comprising a route map () of data routes among the transports () within the adapter, and communicating () integration messages among applications is carried out in dependence upon the route map (). In the method according to , constructing () an integration adapter also includes creating () the transports () identified in the adapter profile () and configuring () the transports () in accordance with the configuration parameters ().","A profile is a data structure that represents an adapter structure and has data elements that identify and describe the adapter's components. An adapter according to embodiments of the present invention uses the profile to effectively construct itself according to the descriptions of its components set forth in the profile. Because profiles are data structures, profiles can be implemented in any way that any data structure can be implemented, in any programming language, in any kind of encoding, in any kind of file format or database record structure. This disclosure represents profiles in XML, not as a limitation, but because XML is conveniently comprehensible to human readers where many implementations of profiles, for example in binary machine-readable formats would not be so convenient for use in explanation. Also in this disclosure, examples tend to be presented in object oriented terms, in terms of Java and C++ in particular. But once again, there is within the present invention no limitation to any particular programming paradigm or to any particular programming language or languages. With these cautionary notes in view, here is an XML example of a profile:",{"@attributes":{"id":"p-0078","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<adapter>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<transportmodules>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<transport class=\u201cInventoryControl.java\u201d"]},{"entry":[{},"id=\u201cinventoryControl\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<receiver>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/receiver>"]},{"entry":[{},"<sender>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/sender>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transport>"]},{"entry":[{},"<transport class=\u201cGeneralLedger.java\u201d"]},{"entry":[{},"id=\u201cgeneralLedger\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<receiver>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/receiver>"]},{"entry":[{},"<sender>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/sender>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/transport>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transportmodules>"]},{"entry":[{},"<transfermodules>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<transferManager class=\u201cxfrMgr1.java\u201d order=\u201c1\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transferManager>"]},{"entry":[{},"<transferManager class=\u201cxfrMgr2.java\u201d order=\u201c2\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transferManager>"]},{"entry":[{},"<transferManager class=\u201cxfrMgr2.java\u201d order=\u201c3\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/transferManager>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/transfermodules>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/adapter>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This exemplary XML profile identifies two transports, one named \u2018inventoryControl\u2019 and one named \u2018generalLedger.\u2019 Each transport has a receiver and a sender. Each receiver and sender has a configuration parameter. Many implementations of profiles will identify and define more than two transports, and many implementations of senders and receivers will have more than one configuration parameter. The numbers in this example are picked for clarity and brevity of explanation, not for limitation.","In the case of senders and receivers for dial-up telephone communications protocols, for example, configuration parameters can include telephone numbers, modems speeds, login identification codes, passwords, and so on. In the case of senders and receivers for the HTTP communication protocol, configuration parameters include one or more URIs. In the case of senders and receivers implementing data communications with JMS, for example, configuration parameters can include identifications of JMS queues, queue connections, queue senders, queue connection factory objects or factory methods, naming directory contexts, and so on. In the case of senders and receivers implementing data communications over plain TCP\/IP, configuration parameters include internet protocol addresses and port numbers. For senders and receivers implementing data communications through flat files in file systems, configuration parameters include path names and filenames.","The example XML profile identifies and provides configuration parameters for three transfer managers. A transfer manager is essentially self-contained program code that is allowed to manipulate message received or sent by an adapter. Transfer managers allow for arbitrary processing on messages to support advanced routing, translation, security, logging, or any other function of message processing as will occur to those of skill in the art. The transfer managers and the order in which they are run are defined in the adapter profile. Adapters according to this invention typically support an arbitrary number of transfer managers. There are no processing limitations applied to transfer managers. Any transfer manager is free to manipulate message content of any message passed to it in any way, including manipulation of the message body and any header parameters.","More particularly, this example XML profile identifies and provides configuration parameters for three transfer managers but contains no express route map. An adapter built in dependence upon this example profile routes all messages received in the inventoryControl transport to all transfer managers and then to the sender in the generalLedger transport. In such an adapter, all messages received in the generalLedger transport are routed to all transfer managers and then to the sender in the inventoryControl transport. The \u2018class\u2019 attribute in the <transferManager> tags identifies a Java class from which each transfer manager can be instantiated. The \u2018order\u2019 attribute in the <transferManager> tags identifies the order in which message events are to be passed to the transfer managers, so that the transfer managers can be designed and programmed to depend on one another or not to interfere with one another, as needed.","Not all transfer managers will process all messages, despite the fact that in this particular model, all messages are passed to all transfer managers. That is, a transfer manager programmed to transform the data structure of an accounting entry in a posting message will perform no processing whatsoever on an ACK, an acknowledgment message. In this model, it is part of the programming of the transfer managers themselves to infer from the parameters in message events which messages are to be processed by a particular transfer manager. Given a message event object similar to that illustrated for example at reference () in , a transfer manager is programmed to infer from a destinationID code (), possibly combined with a sourceId code () or a messageType code (), that, for example, a posting message traveling from an inventory control program to a general ledger is a message to be processed or ignored by the particular transfer manager. If the routing structure is simple and only one type of message travels to a particular destination, the destinationID () alone may be sufficient. If routing alternatives in a particular adapter are complex and many message types travel to the same destination, a transfer manager may need more information to determine whether a particular message is its to process.","Route maps in profiles are aids in addressing such complexity. Consider, for example, the following exemplary XML profile:",{"@attributes":{"id":"p-0085","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<adapter>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<transportmodules>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<transport class=\u201cInventoryControl.java\u201d"]},{"entry":[{},"id=\u201cinventoryControl\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<receiver>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/receiver>"]},{"entry":[{},"<sender>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/sender>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transport>"]},{"entry":[{},"<transport class=\u201cGeneralLedger.java\u201d id=\u201cgeneralLedger\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<receiver>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/receiver>"]},{"entry":[{},"<sender>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/sender>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transport>"]},{"entry":[{},"<transport class=\u201cPurchasing.java\u201d id=\u201cpurchasingSystem\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<receiver>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/receiver>"]},{"entry":[{},"<sender>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/sender>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/transport>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transportmodules>"]},{"entry":[{},"<transfermodules>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<transferManager class=\u201cxfrMgr1.java\u201d mapID=\u201croute1\u201d"]},{"entry":[{},"order=\u201c1\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transferManager>"]},{"entry":[{},"<transferManager class=\u201cxfrMgr2.java\u201d mapID=\u201croute3\u201d"]},{"entry":[{},"order=\u201c2\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transferManager>"]},{"entry":[{},"<transferManager class=\u201cxfrMgr3.java\u201d mapID=\u201croute3\u201d"]},{"entry":[{},"order=\u201c3\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transferManager>"]},{"entry":[{},"<transferManager class=\u201cxfrMgr4.java\u201d mapID=\u201croute2,"]},{"entry":[{},"route4, route5\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"order=\u201c4\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/transferManager>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transfermodules>"]},{"entry":[{},"<routemaps>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<map id=\u201croute1\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<msgType>post<\/msgType>"]},{"entry":[{},"<from>purchasingSystem<\/from>"]},{"entry":[{},"<to>generalLedger<\/to>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/map>"]},{"entry":[{},"<map id=\u201croute2\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<msgType>ACK<\/msgType>"]},{"entry":[{},"<from>generalLedger<\/from>"]},{"entry":[{},"<to>purchasingSystem<\/to>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/map>"]},{"entry":[{},"<map id=\u201croute3\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<msgType>post<\/msgType>"]},{"entry":[{},"<from>inventoryControl<\/from>"]},{"entry":[{},"<to>generalLedger<\/to>"]},{"entry":[{},"<to>purchasingSystem<\/to>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/map>"]},{"entry":[{},"<map id=\u201croute4\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<msgType>ACK<\/msgType>"]},{"entry":[{},"<from>generalLedger<\/from>"]},{"entry":[{},"<to>inventoryControl<\/to>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/map>"]},{"entry":[{},"<map id=\u201croute5\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<msgType>ACK<\/msgType>"]},{"entry":[{},"<from>purchasingSystem<\/from>"]},{"entry":[{},"<to>inventoryControl<\/to>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/map>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/routemaps>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/adapter>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"This exemplary XML profile identifies and describes three transports named respectively \u201cinventoryControl\u201d, \u201cgeneralLedger\u201d, and \u201cpurchasingSystem\u201d. The exemplary XML profile describes four transfer managers identified by unique order numbers 1, 2, 3, and 4. The transfer manager elements now have a new attribute, \u2018mapID,\u2019 in the <transferManager> tag to tie the transfer managers to route maps. \u2018mapID\u2019 takes as its value a route map identification code.","This exemplary XML profile also describes five route maps identified by unique identification codes \u201croute1\u201d, \u201croute2\u201d, \u201croute3\u201d, \u201croute4\u201d, and \u201croute5\u201d. Route map \u201croute1\u201d describes a message route for messages of type \u2018post\u2019 from a purchasing system to a general ledger. Route map \u201croute2\u201d defines a message route for acknowledgement messages from the general ledger to the purchasing system. Route map \u201croute3\u201d defines a message route for posting messages from the inventory control program to both the general ledger and to the purchasing system. Route map \u201croute4\u201d defines a message route for inventory posting acknowledgment messages from the general ledger to the inventory control program. Route map \u201croute5\u201d defines a message route for inventory posting acknowledgement messages from the purchasing system to the inventory control program.","An exemplary adapter built in dependence upon a profile like this XML example routes posting messages from the purchasing system to the general ledger through only on of the transfer managers, the one identified by the attribute \u2018order=1.\u2019 In this example, it is the adapter that must examine the message event parameters such as destinationID, sourceID, messageType, and so on, to determine which route to use and therefore which transfer manager will process which messages. That is, in this example, only one message type is routed to the transfer manager having <transferManager> attribute \u2018order=1,\u2019 thereby eliminating any need for the transfer manager to analyze whether it is to process the messages it receives: It simply processes all messages it receives.","Similarly in this example, all acknowledgment messages or \u2018ACKs\u2019 are routed to the transfer manager with <transferManager> attribute \u2018order=4.\u2019 In some exemplary embodiments of such a transfer manager, the transfer manager will process all ACK messages in a similar fashion. To the extent that ACK message processing differs according to destination or source, then it is to the transfer manager to make that determination by reference to the destinationID ( on ) or the sourceID () in each message event passed to it. Still in this example, the determination whether to process a message is removed from the transfer manager and placed in the programming of the adapter itself in dependence upon a route map from its profile.","The processing of posting messages from the inventory control program to both the general ledger and to the purchasing system is also instructive in this example XML profile. Route map \u201croute3\u201d defines a message route from the inventory control program to both the general ledger and to the purchasing system. Two transfer managers are described in the profile as being on \u201croute3,\u201d the transfer manager having <transferManager> attribute \u2018order=2\u2019 and the transfer manager having <transferManager> attribute \u2018order=3.\u2019 In this example, both the general ledger and the purchasing system are from different software developers and use completely different data structures for account postings. Assume that the transfer manager having <transferManager> attribute \u2018order=2\u2019 transforms the data structure of an incoming message from the inventory control structure to the general ledger structure and that the transfer manager having <transferManager> attribute \u2018order=3\u2019 transforms the data structure of an incoming message from the inventory control structure to the purchasing system structure. The adapter in this example makes a copy of the incoming posting message event from the inventory control transport, sends the original to the transfer manager having <transferManager> attribute \u2018order=2\u2019 and the copy to the transfer manager having <transferManager> attribute \u2018order=3.\u2019 On return of the call to the transfer manager having <transferManager> attribute \u2018order=2,\u2019 the adapter forwards the original message event, now structured for use in the general ledger, to the sender in the transport for the general ledger. On return of the call to the transfer manager having <transferManager> attribute \u2018order=3,\u2019 the adapter forwards the copy of the message event, now structured for use in the purchasing system, to the sender in the transport for the purchasing system. In all cases in this example, the transfer manager receiving a message simply processes the message without deciding whether to do so. The processing burden of deciding which transfer manager is to process which message is effectively shifted to the adapter object itself in dependence upon destination, source, and type information in the message event itself (references , , , for example, on ).","In some embodiments, a transfer manager is called on more than one route through an adapter. Rather than effect multiple routings by use of multiple entries of transfer managers in a transfer modules element (speaking in terms of our XML example), in alternative exemplary embodiments it is advantageous to list the transfer mangers directly in the route map descriptions, as illustrated by the following example:",{"@attributes":{"id":"p-0092","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<adapter>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<transportmodules>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<transport class=\u201cInventoryControl.java\u201d"]},{"entry":[{},"id=\u201cinventoryControl\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<receiver>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/receiver>"]},{"entry":[{},"<sender>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/sender>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transport>"]},{"entry":[{},"<transport class=\u201cGeneralLedger.java\u201d"]},{"entry":[{},"id=\u201cgeneralLedger\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<receiver>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/receiver>"]},{"entry":[{},"<sender>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/sender>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transport>"]},{"entry":[{},"<transport class=\u201cPurchasing.java\u201d"]},{"entry":[{},"id=\u201cpurchasingSystem\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<receiver>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/receiver>"]},{"entry":[{},"<sender>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/sender>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/transport>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transportmodules>"]},{"entry":[{},"<transfermodules>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<transferManager class=\u201cxfrMgr1.java\u201d"]},{"entry":[{},"id=\u201cxfrMgrName1\u201d order=\u201c1\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transferManager>"]},{"entry":[{},"<transferManager class=\u201cxfrMgr2.java\u201d"]},{"entry":[{},"id=\u201cxfrMgrName2\u201d order=\u201c2\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transferManager>"]},{"entry":[{},"<transferManager class=\u201cxfrMgr3.java\u201d"]},{"entry":[{},"id=\u201cxfrMgrName3\u201d order=\u201c3\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transferManager>"]},{"entry":[{},"<transferManager class=\u201cxfrMgr4.java\u201d"]},{"entry":[{},"id=\u201cxfrMgrName4\u201d order=\u201c4\u201d>;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<configParm>parmValue<\/configParm>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/transferManager>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/transfermodules>"]},{"entry":[{},"<routemaps>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<map id=\u201croute1\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<msgType>post<\/msgType>"]},{"entry":[{},"<from>purchasingSystem<\/from>"]},{"entry":[{},"<to>generalLedger<\/to>"]},{"entry":[{},"<transferManager>"]},{"entry":[{},"xfrMgrName1<\/transferManager>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/map>"]},{"entry":[{},"<map id=\u201croute2\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<msgType>ACK<\/msgType>"]},{"entry":[{},"<from>generalLedger<\/from>"]},{"entry":[{},"<to>purchasingSystem<\/to>"]},{"entry":[{},"<transferManager>"]},{"entry":[{},"xfrMgrName4<\/transferManager>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/map>"]},{"entry":[{},"<map id=\u201croute3\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<msgType>post<\/msgType>"]},{"entry":[{},"<from>inventoryControl<\/from>"]},{"entry":[{},"<to>generalLedger<\/to>"]},{"entry":[{},"<to>purchasingSystem<\/to>"]},{"entry":[{},"<transferManager>"]},{"entry":[{},"xfrMgrName2<\/transferManager>"]},{"entry":[{},"<transferManager>"]},{"entry":[{},"xfrMgrName3<\/transferManager>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/map>"]},{"entry":[{},"<map id=\u201croute4\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<msgType>ACK<\/msgType>"]},{"entry":[{},"<from>generalLedger<\/from>"]},{"entry":[{},"<to>inventoryControl<\/to>"]},{"entry":[{},"<transferManager>"]},{"entry":[{},"xfrMgrName4<\/transferManager>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/map>"]},{"entry":[{},"<map id=\u201croute5\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<msgType>ACK<\/msgType>"]},{"entry":[{},"<from>purchasingSystem<\/from>"]},{"entry":[{},"<to>inventoryControl<\/to>"]},{"entry":[{},"<transferManager>"]},{"entry":[{},"xfrMgrName4<\/transferManager>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/map>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/routemaps>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/adapter>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This example profile implements the exact same routes among senders and receivers as the earlier example profile. That is, route map \u201croute1\u201d describes a message route for messages of type \u2018post\u2019 from a purchasing system to a general ledger, including routing through the first listed transfer manager, here identified with its identification name \u201cxfrMgr1.\u201d Route map \u201croute2\u201d defines a message route for acknowledgement messages from the general ledger to the purchasing system, including routing through the second listed transfer manager, here identified with its identification name \u201cxfrMgr2.\u201d And so on for the remaining three route maps. Unlike the first example, however, in this example the route identifiers in the transfer managers, mapID=\u201croute1\u201d, mapID=\u201croute2\u201d, and so on, are removed, and the transfer managers are associated with map routes by placing the names of the transfer managers directly in the map definitions as <transferManager>xfrMgrName1<\/transferManager>, <transferManager>xfrMgrName2<\/transferManager>, and so on. The fourth transfer manager, the one named \u201cxfrMgr4,\u201d is called on three routes through the adapter, the three identified as \u201croute2,\u201d \u201croute4,\u201d and \u201croute5.\u201d","Creating () the transports () identified in the adapter profile () and configuring () the transports () in accordance with the configuration parameters () are carried out in many adapters according to embodiments of the present invention as illustrated by the exemplary class structures set forth in -.  illustrates relations among exemplary classes from which adapters are constructed according to embodiments of the present invention.","Often in this disclosure, software modules are described as \u2018comprising\u2019 other software modules, as when an adapter is described of as \u2018comprising\u2019 or \u2018including\u2019 a transport, a sender, a receiver, or a transfer manager. It is useful to note that in the object oriented paradigm used most often in this disclosure to describe various exemplary embodiments of the invention, that one module comprises or includes another usually means that the first module possesses a reference or a pointer to the second module, as in a transport \u2018has a\u2019 receiver, meaning that the transport holds in its member data elements a reference to the receiver object. In C++ it might be more common to administer references as pointers to objects, but for brevity and clarity in this disclosure, such relationships are usually described in terms of references. The arrows in  generally indicate the object-oriented \u2018has-a\u2019 relationship, that is, which class will typically possess references to other classes.","An adapter () according to the example of  has a reference to a profile (), although as a practical matter, the profile () often will not be a class object at all, but will be a file in a file system instead. Administration of data in a file system is much slower than in computer memory, of course, so that most adapters () according to embodiments of the present invention therefore parse the profile () into an internal class object more convenient for reference within a running software system, here illustrated as a parsed profile class (). The adapter () instantiates the transports () and the transfer managers () identified in the profile (). In this example, the transport () instantiates the receiver () and the sender () and returns references to them to the adapter so that the adapter also possesses references to the receiver class () and the sender class (). The adapter uses its reference to the receiver to register an event listener () with the receiver (). The event listener () is shown in  as a separate class, but as a practical matter many adapters will register the adapter itself as an event listener. When a receiver () receives a message, the receiver encapsulates the message in a message event () and passes a reference to the message event back through the event listener to the adapter (), or directly to the adapter if the adapter is the event listener. The adapter passes the message event object, or actually the reference to the message event object, to the transfer managers () and then to the sender () to process the message and then send it on to its destination. Hence the transfer manager class (), the receiver (), the sender (), and the adapter () all gain references to the message event class ().","Again with reference to  and in terms of the class diagrams of -, constructing () an application integration adapter, where the constructing is carried out in dependence upon a profile () comprising data describing the adapter, is in many example initiated by a command line interface entry having a form similar to the following example:\n\n","This example command instructs a Java Virtual Machine to load and instantiate an adapter name Adapter and run its member method named \u2018main( )\u2019 (reference  on ). In this disclosure, descriptions of actions or processing steps carried out by adapter objects are, unless context requires otherwise, generally descriptions of the operation of a main( ) member method in an adapter object of the kind illustrated at reference () on . In this example, main( ), or the adapter rather, optionally, but typically, proceeds by opening a profile in a file named \u201cProfileName\u201d and parsing it into internal memory in a data structure similar to the one illustrated at reference () on . The parsed profile class of provides parsed storage for a list of transfer managers (), a list of transports including their configuration parameters (), and a list of route maps (). In addition to the structured memory provided by the lists, the parsed profile class of also provides member methods for adding to the lists (, , ) and member methods for retrieving the lists (, , ) when they are needed by other cooperating objects.","The list of transfer managers (), the list of transports including their configuration parameters (), and the list of route maps () are all described in as having the datatype \u2018List\u2019. This description of datatype is not limiting. A variety of datatype can be used for such data structures, and for all data structures discussed in this disclosure, as will occur to those of skill in the art, including, for example, vectors, arraylists, sets, containers, and so on.","In the method according to , constructing () an integration adapter also includes creating () the transports () identified in the adapter profile () and configuring () the transports () in accordance with the configuration parameters (). In this example, Adapter.main( ) creates transports by instantiating each transport listed in the transport list () in the parsed profile (). Configuring () the transports () in accordance with the configuration parameters () typically comprises creating the receivers and senders for each transport and configuring the receivers and senders with the configuration parameters.",{"@attributes":{"id":"p-0101","num":"0106"},"figref":["FIG. 3","FIG. 3","FIG. 5","FIG. 5","FIG. 3","FIG. 5"],"b":["556","222","306","556","558","222","212","318","316","212"],"i":["c","c","c"]},"Here is an explanatory pseudocode example of a factory method:",{"@attributes":{"id":"p-0103","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/"},{"entry":"\/\/ Transport Class"},{"entry":"\/\/"},{"entry":"\/\/ Illustrating a parameterized factory method for creating"},{"entry":"receiver objects"},{"entry":"\/\/"},{"entry":"class TransportClass"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public static Receiver createReceiver(ConfigParm1, ConfigParm2,"]},{"entry":[{},"and so on . . . )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if(ConfigParm1=\u2009=HTTP &&"]},{"entry":[{},"ConfigParm2=\u2009=INVENTORYCONTROL)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"receiverID = \u201creceiver1\u201d;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"else if(ConfigParm1=\u2009=IIOP &&"]},{"entry":[{},"ConfigParm2=\u2009=INVENTORYCONTROL)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"receiverID = \u201creceiver2\u201d;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"else if(ConfigParm1=\u2009=HTTP &&"]},{"entry":[{},"ConfigParm2=\u2009=GENERALLEDGER)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"receiverID = \u201creceiver3\u201d;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"else if(ConfigParm1=\u2009=JMS &&"]},{"entry":[{},"ConfigParm2=\u2009=GENERALLEDGER)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"receiverID = \u201creceiver4\u201d;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"else if(ConfigParm1=\u2009=HTTP &&"]},{"entry":[{},"ConfigParm2=\u2009=PURCHASINGSYSTEM)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"receiverID = \u201creceiver5\u201d;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"else if(ConfigParm1=\u2009=IIOP &&"]},{"entry":[{},"ConfigParm2=\u2009=PURCHASINGSYSTEM)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"receiverID = \u201creceiver6\u201d;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Receiver aReceiver = null; \/\/ empty reference for new"]},{"entry":[{},"receiver object"]},{"entry":[{},"switch(receiverID)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"case \u201creceiver1\u201d: aReceiver = new receiver1.class;"]},{"entry":[{},"break;"]},{"entry":[{},"case \u201creceiver2\u201d: aReceiver = new receiver2.class;"]},{"entry":[{},"break;"]},{"entry":[{},". . . . . . . . ."]},{"entry":[{},"case \u201creceiverN-1\u201d: aReceiver = new receiver5.class;"]},{"entry":[{},"break;"]},{"entry":[{},"case \u201creceiverN\u201d: aReceiver= new receiver6.class;"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} \/\/ end switch( )"]},{"entry":[{},"return aReceiver;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} \/\/ end createReceiver( )"]},{"entry":[{},"public static Sender createSender(ConfigParm1, ConfigParm2,"]},{"entry":[{},"and so on . . . )"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Exemplary Transport classes also support factory"]},{"entry":[{},"methods for senders"]},{"entry":[{},"\/\/ similar to the one for receivers set forth just above,"]},{"entry":[{},"createReceiver( )."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} \/\/ end class TransportClass"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In this pseudocode example, createReceiver( ) is a parameterized factory method. CreateReceiver( ) is called by, for example, Adapter.main( ) with a set of configuration parameter as parameters for the call. CreateReceiver( ) can be overloaded and called with any combination of configuration parameters supported by any receiver class supported in the factory method createReceiver( ). CreateReceiver( ) can support any number of concrete receiver classes. CreateReceiver( ) functions by selecting a receiver identification through a series of IF statements based upon the configuration parameters. CreateReceiver( ) then operates a switch( ) statement in dependence upon the receiver identification to select a concrete receiver class and instantiate from it a new receiver object.","In this example, the class named \u201cReceiver\u201d is an abstract class from which all the other receiver classes inherit, thereby enabling createReceiver( ) to returns a reference of type \u2018Receiver\u2019 that can in fact be a reference to any receiver class object. Calls to receiver objects from cooperating objects in an adapter can therefore be polymorphic. In this way, neither the transport, the adapter itself, nor any cooperating object or software module comprised within the adapter knows or cares which applications are being integrated nor which communications protocols are used to integrate them. All cooperation among objects within the adapter is rendered completely neutral, transparent, and modular with respect to application identities and communications protocols.","The method illustrated in  includes registering () a transport event listener with each receiver. In some adapters that create receivers according to the method of , the integration adapter () itself comprises a transport event listener (). That is, in some embodiments, registering () a transport event listener with each receiver, is carried out by registering the adapter itself as an event listener. In such embodiments, the adapter itself will contain a member method for the receiver to call to hand off an incoming message, such as, for example, the transportEvent( ) method shown at reference () in the exemplary adapter class () on . In embodiments in which the event listener () is a separate object from the adapter itself, a constructor first creates () a transport event listener () by instantiating a separate object of an event listener class such as the one illustrated at reference () on ",{"@attributes":{"id":"p-0107","num":"0112"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["210","202","402","406","404","204","102","408","406","402","202","410","406","404"]},"In terms of the exemplary data structures of , the adapter () comprises a factory method named createTransferManagers( ) () for creating a transfer manager. In this example, the transfer manager list () in the parsed profile class () contains definitions for all the transfer managers defined in the profile, as well as configuration parameters for each transfer manager. Constructing such an exemplary adapter includes calling the factory method for transfer managers once for each transfer manager in the transfer manager list () with the configuration parameters for the transfer manager and receiving in return a reference to a new transfer manager. The references to the new transfer managers along with their attributes such as route map identifiers and calling order numbers are then stored in the transfer manager list () in the adapter () for the adapter's use in routing messages.",{"@attributes":{"id":"p-0109","num":"0114"},"figref":["FIG. 6","FIG. 6","FIG. 6"],"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":"Java com.adapters.Adapter <ProfileName>"}}}},"A member method in the adapter, either its constructor or its main( ) method, parses the profile identified as <ProfileName> by calling () the add methods (: , , ) in a parsed profile ( on ). The add methods insert descriptions of the transfer managers (), the transports (), and any route maps () into the member data elements of the parsed profile.","The adapter () constructs () each transport described in the parsed transport list ( on ). The adapter calls createReceiver( ) () in each transport constructed, and each createReceiver( ) call results in construction () of a receiver for a transport. Each createReceiver( ) call () returns to the adapter a reference to the receiver created. The adapter stores a reference to each receiver in a receiver list ( on ) in the adapter, particularly for use in configuring receivers and registering event listeners. The adapter calls createSender( ) () in each transport constructed, and each createSender( ) call results in construction () of a sender for a transport. Each createSender( ) call () returns to the adapter a reference to the sender created. The adapter stores a reference to each sender in a sender list ( on ) in the adapter for use in configuring senders and in routing messages.","The adapter calls () a configure( ) method ( on ) in each receiver (), passing the receiver configuration parameters as call parameters, so that each receiver can self-configure. The adapter registers, in each receiver in its receiver list, either itself or another object as an event listener with a call () to a method such as addEventListener( ) ( on ). The adapter calls () a configure( ) method ( on ) in each sender (), passing sender configuration parameters as call parameters, so that each sender can self-configure.","The adapter constructs () each transfer manager () identified in the profile or in the transfer manager list ( on ) in a parsed profile ( on ). For use in routing messages, the adapter retains references to each transfer manager in a transfer manager list ( on ) in the adapter ().","The adapter calls () a run( ) method ( on ) in each receiver to advise each receiver to begin data communications operations in accordance with whatever protocol the receiver uses. More than one receiver must run at the same time in typical embodiments of the present invention, so that calls () to run( ) methods () advantageously are non-blocking calls that trigger a new, parallel process or thread of execution and return control promptly to the caller. More particularly, in terms of Java for example, receiver classes in such exemplary embodiments advantageously are defined to inherit from the \u2018thread\u2019 class with its start( ) interface method. Then in such embodiments, a call to a run( ) method is implemented as a call to SomeReceiverClass.start( ), which in turn executes the run( ) method in a separate thread of execution and returns promptly to the caller. Here is an example:",{"@attributes":{"id":"p-0115","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"class HTTPReceiver extends Thread {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private Port ListenPort = 80;"]},{"entry":[{},"public void run( ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ control code to operate"]},{"entry":[{},"\/\/ a receiver over the HTTP protocol"]},{"entry":[{},"\/\/ for data communication from"]},{"entry":[{},"\/\/ a particular software application"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This example declares HTTPReceiver as a subclass of Thread and overrides the run( ) method from the Thread class, well known in current Java. The following exemplary Java code then can create a separate thread of execution and start it running:",{"@attributes":{"id":"p-0117","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HTTPReceiver aReceiver = new HTTPReceiver( );"]},{"entry":[{},"aReceiver.start( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This exemplifies one particular way to implement a receiver's run( ) method as a separate thread of execution, presented for explanation, not for limitation. There are many ways to start separate threads of execution for receivers as will occur to those of skill in the art, and all of them are well within the scope of the present invention. It is in this way generally, however, that an adapter instantiates and activates any number of receivers which then operate asynchronously with the adapter by, for example, use of event listeners as described in more detail below in this disclosure.","Implementing receivers' run( ) methods asynchronously as parallel separate threads of execution, however, is not a general limitation for all embodiments of the invention. Some adapters according to embodiments of the present invention in fact do not implement receiver's run( ) methods asynchronously as parallel separate threads of execution. Some adapters according to embodiments of the present invention poll receiver's run( ) methods sequentially with blocking calls. In such embodiments, an adapter's main( ) method, for example, polls each receiver in turn through a blocking call to the receiver's run( ) method. Execution of the calling method pauses until the call to the run( ) method returns. Typically in such embodiments, the receiver's run( ) method checks for incoming messages, translates the encoding format of any incoming messages as needed, encapsulates the incoming message in a message event object, and returns to the calling adapter a reference to any message event object so created. Then the adapter calls the next receiver on its receiver list. In such embodiments, event listeners optionally and advantageously may not be used\u2014or may be used less often than in asynchronous embodiments.","At this point in processing, the receivers in our example adapter, having configured themselves with their configuration parameters and begun data communications operations in their protocols, are operating in accordance with their protocols, ready to receive messages, place the messages in message events, and hand them off to an event listener for processing through the adapter. That is, at this point, the adapter is constructed and running.",{"@attributes":{"id":"p-0121","num":"0127"},"figref":["FIG. 7","FIG. 2","FIG. 7","FIG. 5"],"b":["206","208","106","116","102","702","106","208","712","714","5"],"i":["a","h"]},"The method of  includes translating () the integration message () from the source message format () to a destination message format () useful to a destination application (). In terms of the exemplary class structure of , translating () is carried out by a call from a run( ) method () to a translation method () in a receiver class (). The operation of the translation method () is to convert the format of the message, not the data structure of the message. That is, the translation method converts the overall form of the message leaving unchanged the internal data structure, the data element names, types, and values. Converting the internal data structure, if needed, is the job of a transformation method in a transfer manager, not the job of the receiver or its translation method. Examples of format translation include translating from stringified Java to XML, from binary C++ data format to XML, and so on. As particular example of format translation is a receiver programmed to translate the following C structure:",{"@attributes":{"id":"p-0123","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"struct address"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"char *name = \u201cJohn Smith\u201d;"]},{"entry":[{},"char *address = \u201c100 Main Street\u201d"]},{"entry":[{},"char *city = \u201cSmallville\u201d;"]},{"entry":[{},"char *state = \u201cIowa\u201d;"]},{"entry":[{},"char *zip = \u201c10101\u201d;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0124","num":"0130"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<address>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<name>John Smith<\/name>"]},{"entry":[{},"<address>100 Main Street<\/address>"]},{"entry":[{},"<city>Smallville<\/city>"]},{"entry":[{},"<state>Iowa<\/state>"]},{"entry":[{},"<zip>10101<\/zip>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/address>."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Such a receiver proceeds by reading each C data elements and creating a corresponding XML element having the same name, type, and value. The C structure can be transmitted in compiled form, that is, encoded binary, or in uncompiled text appearing just as shown above. The transformation to XML preserves all structure in the data, the names, types, and values of the data elements, changing only the format from C to XML.","As practical matter, in support of asynchronous operations inside the adapter, adapters implementing the method of  typically also include encapsulating () the integration message in a message event () and passing () the message event (), or a reference to the message event, to at least one event listener. An exemplary structure for a message event is illustrated at reference () on . The message event class () contains only one member method, a constructor () whose only functions are to record the message parameters in the message even object and return to the calling receiver a reference to the message event. The message event parameters include its destination (), its source (), its message type (), a message identification code (), a security tag (), a status code (), and, usefully, the body of the message itself (), shown here as of datatype \u2018stringified,\u2019 but alternatively of any useful datatype as will occur to those of skill in the art.","Passing () the message event () to an event listener is carried out in our exemplary class structures by from a receiver to a transportEvent( ) method ( on ) in an event listener (). A transportEvent( ) method () is shown in the adapter class () on also as a reminder that the adapter optionally registers itself as an event listener. It is typically then the event listener, either itself or through other cooperating objects, that causes the message event to be circulated among any transfer mangers and ultimately to a send( ) method in a sender object. In typical embodiments, the sending () includes unencapsulating the integration message from the message event and reencapsulating it in whatever message structure is required by the data communication protocol used by the send( ) method ( on ) of the destination transport ().","The method of  also includes sending () the integration message to a destination application (), implemented in our exemplary class structures by call to a send( ) method ( on ) in a sender object (). More particularly, the method of  includes no data structure transformation and no translation to a destination format. This means that the method of  is useful, for example, in cases where a source application and a destination application are capable of working with the same data structures, but the source application exports the data structures in binary form, stringified Java, C++ structures, or any form other than XML, and the destination application requires to import them in XML.",{"@attributes":{"id":"p-0129","num":"0135"},"figref":["FIG. 8","FIG. 2","FIG. 8","FIG. 8"],"b":["206","208","106","116","102","702","106","208","712","714","802","208","712","804"]},"The method of  further includes transforming () the integration message () from the source data structure () to a destination data structure (). In data transformation, as distinct from data translation, the data structure itself is altered, as when the following structure from a source application:",{"@attributes":{"id":"p-0131","num":"0137"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<address>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<lastName>Smith<\/lastName>"]},{"entry":[{},"<firstName>John<\/firstName>"]},{"entry":[{},"<addressLine1>100 Main Street<\/addressLine1>"]},{"entry":[{},"<addressLine2>Suite 5<\/addressLine2>"]},{"entry":[{},"<city>Smallville<\/city>"]},{"entry":[{},"<state>Iowa<\/state>"]},{"entry":[{},"<mailCode>10101<\/mailCode>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/address>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0132","num":"0138"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<address>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<name>John Smith<\/name>"]},{"entry":[{},"<address>100 Main Street, Suite 5<\/address>"]},{"entry":[{},"<city>Smallville<\/city>"]},{"entry":[{},"<state>Iowa<\/state>"]},{"entry":[{},"<zip>10101<\/zip>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/address>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The data format is the same for both structures, the interim format for translation, in this example, XML. The data structure itself, however, is altered in its data element names and values.","In many exemplary embodiments of the method of , the transforming () is carried out through a transfer manager. Continuing with XML as an explanatory example of interim data format for data translation: transforming () the integration message () from the source data structure () to a destination data structure () is carried out in terms of our exemplary class structures by passing to transfer manager ( on ) through a call to a member method such as process( ) ( on ) a messageEvent object such as that illustrated at reference () on carrying the message structure () as well as processing parameters needed by the transfer manager to carry out the translation.","In this example, the process(messageEvent) method () uses the source identification () and the destination identification () from the message event () to infer the filename of an XSLT style sheet from an arraylist () stored for that purpose in the transfer manager (). The process( ) method () proceeds by calling an XSL processor (not shown), passing the name of the style sheet and the input XML as call parameters. The XSL processor reads the input XML and follows the instructions in the XSL style sheet; then it outputs the translated XML as its return to the process( ) method. Many XSL processors are readily available off-the-shelf from a variety of manufacturers including, for example, the well known \u2018Xalan\u2019 XSLT processor available from the Apache Software Foundation.","The method of  includes sending () the integration message to a destination application ().  illustrates two exemplary execution paths for sending an integration message.  discloses the alternative of sending () the message directly without additional translation (, , ). This alternative is useful particularly when the interim message format () used for transforming the data structure of the message is the same as the format expected by a destination application. That is, for example, sending without additional translating is useful when, for example, the interim format () is XML and the destination application is capable of receiving and using an integration message in XML.",{"@attributes":{"id":"p-0137","num":"0143"},"figref":["FIG. 8","FIG. 8"],"b":["810","208","804","812","116","810","208","804","812","116","710","804","806"]},{"@attributes":{"id":"p-0138","num":"0144"},"figref":["FIG. 9","FIG. 2","FIG. 9","FIG. 6","FIG. 5"],"b":["206","312","902","575"],"i":"d"},"The receiver () constructs () a message event object (, class structure at  on ) to use as a container for the message as the message is passed around among objects with in the adapter for further processing and transmission to its destination. The constructor of the message event object accepts as call parameters descriptive parameters of the message as well as the body of the message itself, returning to the receiver a reference to the message event object.","The receiver () passes the message event object through a call () to a transportEvent( ) method ( on ), or rather passes a reference to the message event object, to an event listener object listed in an event listener list ( on ) in the receiver.","The transportEvent( ) method in the event listener calls () each transfer manager listed in a transfer manager list ( on ) in the adapter, through a process( ) method ( on ,  on ) in each transfer manager, passing as a call parameter a reference to the message event object. Alternatively, the transportEvent( ) method infers a route map identification from a route map list and then calls the process( ) method in each transfer manager identified by the inferred route map identification. Either way, each transfer manager called in turn performs upon the body of the message in the message event object whatever processing each transfer manager is designed to perform, including for example data structure transformation, security checks, source authentication, encryption, decryption, validation of digital signatures, and other functions as will occur to those of skill in the art. is presented as an example of a concrete transfer manager class optimized for data translation with XSLT. is presented as an example of an abstract transfer manager class providing only an interface from which many concrete transfer manager classes can inherit. Using concrete transfer managers to implement classes for various processing purposes each of which inherits from an abstract transfer manger class supports an adapter's use of a factory method such as createTransferManager( ) ( on ). Use of a factory class and transportEvent( ) ( on ) processing against a transfer manager list () means that the adapter object itself need never know nor care what any particular transfer manager does to the body of any message, thereby supporting cooperation among objects within the adapter that is rendered neutral, transparent, and modular with respect to processing of message content.","The transportEvent( ) method in the sequence of  identifies from a list of senders ( on ) in the adapter the sender in the transport for the destination of the message and calls () a send( ) method () in the destination sender (class structure illustrated at reference  on ). The send( ) method calls () as needed a translate( ) method ( on ) in the sender to get the message body into the form needed by its destination application. Then the send( ) transmits the message to the destination application using whatever data communications protocol the sender is configured to use.",{"@attributes":{"id":"p-0143","num":"0149"},"figref":["FIG. 10","FIG. 10"],"b":["204","102","202","150","152","156","154","156"]},"Application integration adapters according to the method  are like the other exemplary adapters described above in this disclosure, comprising generally data communications transports, senders, receivers, optionally data transfer managers, and so on. Adapters according to , however, also include the capabilities of receiving and carrying out instructions to alter themselves, and such adapters can carry out such alterations dynamically, while they are running, as part of their normal operations, with no need to stop, pause, reinstall, or reboot anything.","In fact, the method of  also includes communicating () integration messages () among applications (, ) through the adapter () as altered. That is, after an adapter is altered according to the method of , adapter operations continue normally except that they now include the alterations. Normal adapter operations include receiving integration messages from applications, translating the format of the messages if needed, encapsulating the messages in message event objects, routing the message event objects through the adapter, through transfer managers, to a sender, translating format again as needed, and sending messages to destinations, all as described in detail above in this disclosure.","Alterations can affect all adapter elements, transports, receivers, senders, transfer managers, and so on. Alterations can affect all adapter operations influenced by configuration parameters, telephone numbers, port numbers, network addresses, URIs, and so on. Some changes in configuration parameters are so drastic as to effectively require the entire replacement of a component, such as a complete change from one communications protocol to another. Alterations can include such changes: Adding to a running adapter integration support for an entirely new application with a new transport, new receiver, new sender, and zero or more new transfer managers. Alternations can include deleting or stopping operation of an existing receiver, sender, or transport manager while the remainder of the adapter continues operations without pausing, stopping, or restarting. Excluding pausing, stopping, or restarting, however, is not a limitation of the invention. Embodiments can include pausing, stopping, or restarting, and in fact administration integrations messages themselves can include instructions for alteration effecting pausing, stopping, or restarting of components of an adapter or an entire adapter.","In the method of , the data describing the adapter () comprises data identifying communications protocols and data identifying applications programs. The \u2018data describing the adapter\u2019 () is generally the identifications of transports, sender, receivers, transfer managers, map routes, and their configuration parameters set forth in a profile (), all as described in detail earlier in this disclosure. Configuration parameters for the data communications modules, senders and receivers, are \u2018data identifying communications protocols\u2019 in the sense that both the data communications modules and their configuration parameters are protocol-specific. A receiver using HTTP has configuration parameters has IP addresses and port numbers for configuration parameters. A sender that transmits files over phone lines has filenames and telephone numbers for configuration parameters. And so on. Similarly, both the identities and the configuration parameters of transports, senders, and receivers are generally \u2018data identifying applications programs,\u2019 in the sense that they too are application-specific. A receiver generally expects to receive messages in a particular data format, having a particular data structure, and generally such particularities are associated with a particular application program. It is within the scope of the invention that a transport, receiver, or sender is used with more than one application, but even then its implementation is expected to be generally applications-specific in that separate instances of such modules will need to be specified in a profile and dedicated to communicating with particular instances of the applications. For all these reasons, even if the name of a particular application or protocol as such does not appear in a profile, nevertheless, generally speaking, data describing an adapter () typically does, directly or indirectly, expressly or implicitly, identify communications protocols and applications programs.","In many adapters implemented according to the method of , receiving () instructions () to alter the adapter () includes detecting () changes in the adapter profile (). In many such embodiments, the adapter profile is an editable file residing at some path location on a file system. In many embodiments, the adapter profile is an easily editable text file such as an XML file. Users authorized to do so can edit such a file at any time with a text editor or word processor. In fact, user authorized to do so can edit the profile while the adapter is running, thereby creating a profile that no longer accurately describes its adapter.","In such embodiments, detecting () changes in the adapter profile () often also includes creating () a copy () of the profile and periodically () comparing () the profile () and the copy (). That is, one way to receive instructions to alter an adapter is for the adapter itself to keep a copy of its profile and periodically compare the copy of the profile to the profile itself. If the profile changes between comparisons, then the changes in the profile are interpreted as instructions for alterations. That is, in such embodiments, changes in the profile comprise instructions for alterations.","If, for example, in such an embodiment, the copy () of the profile is this:",{"@attributes":{"id":"p-0151","num":"0157"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<adapter>"},{"entry":"\u2003<transportmodules>"},{"entry":"\u2003\u2003<transport class=\u201cInventoryControl.java\u201d id=\u201cinventoryControl\u201d>"},{"entry":"\u2003\u2003\u2003<receiver configParms=\u201cabc\u201d><\/receiver>"},{"entry":"\u2003\u2003\u2003<sender configParms=\u201cxyz\u201d><\/sender>"},{"entry":"\u2003\u2003<\/transport>"},{"entry":"\u2003\u2003<transport class=\u201cGeneralLedger.java\u201d id=\u201cgeneralLedger\u201d>"},{"entry":"\u2003\u2003\u2003<receiver configParms=\u201cdef\u201d><\/receiver>"},{"entry":"\u2003\u2003\u2003<sender configParms=\u201cuvw\u201d><\/sender>"},{"entry":"\u2003\u2003<\/transport>"},{"entry":"\u2003<\/transportmodules>"},{"entry":"\u2003<transfermodules>"},{"entry":"\u2002\u2003\u2003<transferManager class=\u201cxfrMgr1.java\u201d"},{"entry":"\u2002\u2003\u2003order=\u201c1\u201d><\/transferManager>"},{"entry":"\u2002\u2003\u2003<transferManager class=\u201cxfrMgr2.java\u201d"},{"entry":"\u2002\u2003\u2003order=\u201c2\u201d><\/transferManager>"},{"entry":"\u2003<\/transfermodules>"},{"entry":"<\/adapter>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"202"},{"@attributes":{"id":"p-0152","num":"0158"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<adapter>"},{"entry":"\u2003<transportmodules>"},{"entry":"\u2003\u2003<transport class=\u201cInventoryControl.java\u201d id=\u201cinventoryControl\u201d>"},{"entry":"\u2003\u2003\u2003<receiver configParms=\u201cabc\u201d><\/receiver>"},{"entry":"\u2003\u2003\u2003<sender configParms=\u201cxyz\u201d><\/sender>"},{"entry":"\u2003\u2003<\/transport>"},{"entry":"\u2003\u2003<transport class=\u201cGeneralLedger.java\u201d id=\u201cgeneralLedger\u201d>"},{"entry":"\u2003\u2003\u2003<receiver configParms=\u201cdef\u201d><\/receiver>"},{"entry":"\u2003\u2003\u2003<sender configParms=\u201cuvw\u201d><\/sender>"},{"entry":"\u2003\u2003<\/transport>"},{"entry":"\u2003\u2003<transport class=\u201cPurchasing.java\u201d id=\u201cpurchasingSystem\u201d>"},{"entry":"\u2003\u2003\u2003<receiver configParms=\u201cghi\u201d><\/receiver>"},{"entry":"\u2003\u2003\u2003<sender configParms=\u201crst\u201d><\/sender>"},{"entry":"\u2003\u2003<\/transport>"},{"entry":"\u2003<\/transportmodules>"},{"entry":"\u2003<transfermodules>"},{"entry":"\u2002\u2003\u2003<transferManager class=\u201cxfrMgr1.java\u201d"},{"entry":"\u2002\u2003\u2003order=\u201c1\u201d><\/transferManager>"},{"entry":"\u2002\u2003\u2003<transferManager class=\u201cxfrMgr2.java\u201d"},{"entry":"\u2002\u2003\u2003order=\u201c2\u201d><\/transferManager>"},{"entry":"\u2002\u2003\u2003<transferManager class=\u201cxfrMgr2.java\u201d"},{"entry":"\u2002\u2003\u2003order=\u201c3\u201d><\/transferManager>"},{"entry":"\u2003\u2003<\/transfermodules>"},{"entry":"<\/adapter>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"156"},{"@attributes":{"id":"p-0153","num":"0159"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<add>"]},{"entry":[{},"\u2003<transportmodules>"]},{"entry":[{},"\u2003\u2003<transport class=\u201cPurchasing.java\u201d id=\u201cpurchasingSystem\u201d>"]},{"entry":[{},"\u2003\u2003\u2003<receiver configParms=\u201cghi\u201d><\/receiver>"]},{"entry":[{},"\u2003\u2003\u2003<sender configParms=\u201crst\u201d><\/sender>"]},{"entry":[{},"\u2003\u2003<\/transport>"]},{"entry":[{},"\u2003<\/transportmodules>"]},{"entry":[{},"\u2003<transfermodules>"]},{"entry":[{},"\u2003\u2003\u2002<transferManager class=\u201cxfrMgr2.java\u201d"]},{"entry":[{},"\u2003\u2003\u2002order=\u201c3\u201d><\/transferManager>"]},{"entry":[{},"\u2003<\/transfermodules>"]},{"entry":[{},"<\/add>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"If, for another example, the copy () of the profile is this:",{"@attributes":{"id":"p-0155","num":"0161"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<adapter>"},{"entry":"\u2003<transportmodules>"},{"entry":"\u2003\u2003<transport class=\u201cInventoryControl.java\u201d id=\u201cinventoryControl\u201d>"},{"entry":"\u2003\u2003\u2003<receiver configParms=\u201cabc\u201d><\/receiver>"},{"entry":"\u2003\u2003\u2003<sender configParms=\u201cxyz\u201d><\/sender>"},{"entry":"\u2003\u2003<\/transport>"},{"entry":"\u2003\u2003<transport class=\u201cGeneralLedger.java\u201d id=\u201cgeneralLedger\u201d>"},{"entry":"\u2003\u2003\u2003<receiver configParms=\u201cdef\u201d><\/receiver>"},{"entry":"\u2003\u2003\u2003<sender configParms=\u201cuvw\u201d><\/sender>"},{"entry":"\u2003\u2003<\/transport>"},{"entry":"\u2003\u2003<transport class=\u201cPurchasing.java\u201d id=\u201cpurchasingSystem\u201d>"},{"entry":"\u2003\u2003\u2003<receiver configParms=\u201cghi\u201d><\/receiver>"},{"entry":"\u2003\u2003\u2003<sender configParms=\u201crst\u201d><\/sender>"},{"entry":"\u2003\u2003<\/transport>"},{"entry":"\u2003<\/transportmodules>"},{"entry":"\u2003<transfermodules>"},{"entry":"\u2002\u2003\u2003<transferManager class=\u201cxfrMgr1.java\u201d"},{"entry":"\u2002\u2003\u2003order=\u201c1\u201d><\/transferManager>"},{"entry":"\u2002\u2003\u2003<transferManager class=\u201cxfrMgr2.java\u201d"},{"entry":"\u2002\u2003\u2003order=\u201c2\u201d><\/transferManager>"},{"entry":"\u2002\u2003\u2003<transferManager class=\u201cxfrMgr2.java\u201d"},{"entry":"\u2002\u2003\u2003order=\u201c3\u201d><\/transferManager>"},{"entry":"\u2003<\/transfermodules>"},{"entry":"<\/adapter>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"202"},{"@attributes":{"id":"p-0156","num":"0162"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<adapter>"},{"entry":"\u2003<transportmodules>"},{"entry":"\u2003\u2003<transport class=\u201cInventoryControl.java\u201d id=\u201cinventoryControl\u201d>"},{"entry":"\u2003\u2003\u2003<receiver configParms=\u201cabc\u201d><\/receiver>"},{"entry":"\u2003\u2003\u2003<sender configParms=\u201cxyz\u201d><\/sender>"},{"entry":"\u2003\u2003<\/transport>"},{"entry":"\u2003\u2003<transport class=\u201cGeneralLedger.java\u201d id=\u201cgeneralLedger\u201d>"},{"entry":"\u2003\u2003\u2003<receiver configParms=\u201cdef\u201d><\/receiver>"},{"entry":"\u2003\u2003\u2003<sender configParms=\u201cuvw\u201d><\/sender>"},{"entry":"\u2003\u2003<\/transport>"},{"entry":"\u2003<\/transportmodules>"},{"entry":"\u2003<transfermodules>"},{"entry":"\u2002\u2003\u2003<transferManager class=\u201cxfrMgr1.java\u201d"},{"entry":"\u2002\u2003\u2003order=\u201c1\u201d><\/transferManager>"},{"entry":"\u2002\u2003\u2003<transferManager class=\u201cxfrMgr2.java\u201d"},{"entry":"\u2002\u2003\u2003order=\u201c2\u201d><\/transferManager>"},{"entry":"\u2003<\/transfermodules>"},{"entry":"<\/adapter>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"156"},{"@attributes":{"id":"p-0157","num":"0163"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<delete>"]},{"entry":[{},"\u2003<transportmodules>"]},{"entry":[{},"\u2003\u2003<transport class=\u201cPurchasing.java\u201d id=\u201cpurchasingSystem\u201d>"]},{"entry":[{},"\u2003\u2003\u2003<receiver configParms=\u201cghi\u201d><\/receiver>"]},{"entry":[{},"\u2003\u2003\u2003<sender configParms=\u201crst\u201d><\/sender>"]},{"entry":[{},"\u2003\u2003<\/transport>"]},{"entry":[{},"\u2003<\/transportmodules>"]},{"entry":[{},"\u2003<transfermodules>"]},{"entry":[{},"\u2003\u2003\u2002<transferManager class=\u201cxfrMgr2.java\u201d"]},{"entry":[{},"\u2003\u2003\u2002order=\u201c3\u201d><\/transferManager>"]},{"entry":[{},"\u2003<\/transfermodules>"]},{"entry":[{},"<\/delete>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"If, for still another example, the copy () of the profile is this:",{"@attributes":{"id":"p-0159","num":"0165"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<adapter>"},{"entry":"\u2003<transportmodules>"},{"entry":"\u2003\u2003<transport class=\u201cInventoryControl.java\u201d id=\u201cinventoryControl\u201d>"},{"entry":"\u2003\u2003\u2003<receiver configParms=\u201cabc\u201d><\/receiver>"},{"entry":"\u2003\u2003\u2003<sender configParms=\u201cxyz\u201d><\/sender>"},{"entry":"\u2003\u2003<\/transport>"},{"entry":"\u2003\u2003<transport class=\u201cGeneralLedger.java\u201d id=\u201cgeneralLedger\u201d>"},{"entry":"\u2003\u2003\u2003<receiver configParms=\u201cdef\u201d><\/receiver>"},{"entry":"\u2003\u2003\u2003<sender configParms=\u201cuvw\u201d><\/sender>"},{"entry":"\u2003\u2003<\/transport>"},{"entry":"\u2003<\/transportmodules>"},{"entry":"\u2003<transfermodules>"},{"entry":"\u2002\u2003\u2003<transferManager class=\u201cxfrMgr1.java\u201d"},{"entry":"\u2002\u2003\u2003order=\u201c1\u201d><\/transferManager>"},{"entry":"\u2002\u2003\u2003<transferManager class=\u201cxfrMgr2.java\u201d"},{"entry":"\u2002\u2003\u2003order=\u201c2\u201d><\/transferManager>"},{"entry":"\u2003<\/transfermodules>"},{"entry":"<\/adapter>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"202"},{"@attributes":{"id":"p-0160","num":"0166"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<adapter>"},{"entry":"\u2003<transportmodules>"},{"entry":"\u2003\u2003<transport class=\u201cInventoryControl.java\u201d id=\u201cinventoryControl\u201d>"},{"entry":"\u2003\u2003\u2003<receiver configParms=\u201cjkl\u201d><\/receiver>"},{"entry":"\u2003\u2003\u2003<sender configParms=\u201cmno\u201d><\/sender>"},{"entry":"\u2003\u2003<\/transport>"},{"entry":"\u2003\u2003<transport class=\u201cGeneralLedger.java\u201d id=\u201cgeneralLedger\u201d>"},{"entry":"\u2003\u2003\u2003<receiver configParms=\u201cdef\u201d><\/receiver>"},{"entry":"\u2003\u2003\u2003<sender configParms=\u201cuvw\u201d><\/sender>"},{"entry":"\u2003\u2003<\/transport>"},{"entry":"\u2003<\/transportmodules>"},{"entry":"\u2003<transfermodules>"},{"entry":"\u2002\u2003\u2003<transferManager class=\u201cxfrMgr1.java\u201d"},{"entry":"\u2002\u2003\u2003order=\u201c1\u201d><\/transferManager>"},{"entry":"\u2002\u2003\u2003<transferManager class=\u201cxfrMgr3.java\u201d"},{"entry":"\u2002\u2003\u2003order=\u201c2\u201d><\/transferManager>"},{"entry":"\u2003<\/transfermodules>"},{"entry":"<\/adapter>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"156"},{"@attributes":{"id":"p-0161","num":"0167"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<changeParms>"},{"entry":"\u2003<transportmodules>"},{"entry":"\u2003\u2003<transport class=\u201cInventoryControl.java\u201d id=\u201cinventoryControl\u201d>"},{"entry":"\u2003\u2003\u2003<receiver configParms=\u201cjkl\u201d><\/receiver>"},{"entry":"\u2003\u2003\u2003<sender configParms=\u201cmno\u201d><\/sender>"},{"entry":"\u2003\u2003<\/transport>"},{"entry":"\u2003<\/transportmodules>"},{"entry":"<\/changeParms>"},{"entry":"<delete>"},{"entry":"\u2003<transfermodules>"},{"entry":"\u2003\u2003<transferManager class=\u201cxfrMgr2.java\u201d"},{"entry":"\u2003\u2003order=\u201c2\u201d><\/transferManager>"},{"entry":"\u2003<\/transfermodules>"},{"entry":"<\/delete>"},{"entry":"<add>"},{"entry":"\u2003<transfermodules>"},{"entry":"\u2003\u2003<transferManager class=\u201cxfrMgr3.java\u201d"},{"entry":"\u2003\u2003order=\u201c2\u201d><\/transferManager>"},{"entry":"\u2003<\/transfermodules>"},{"entry":"<\/add>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"This example of instructions for altering an adapter includes instructions to change the operating parameters of the sender and receiver for an inventory control application. Changing parameters can be carried out by additional calls to configuration methods, such as, for example, those shown for receivers at reference () on , for senders at reference () on , and for transfer managers at reference () on and . For a sender and receiver effecting data communications over HTTP, then, for example, the parameter changes could include changes in port numbers or IP addresses.","In addition, the example instructions for alterations set forth just above in this disclosure include an instruction to delete a transfer manager embodied as Java class xfrMgr2.java and replace it with a transfer manager embodied as Java class xfrMgr3.java. Such a deletion can be carried out by use of a change detector class similar to the one described in the following pseudocode:",{"@attributes":{"id":"p-0164","num":"0170"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Class ChangeDetector extends Thread{"]},{"entry":[{},"\u2003private String aProfile, aCopy;"]},{"entry":[{},"\u2003private String instructionsForAlterations;"]},{"entry":[{},"\u2003private Adapter myAdapter;"]},{"entry":[{},"\u2003public void setAProfile( );"]},{"entry":[{},"\u2003public void setMyAdapter( );"]},{"entry":[{},"\u2003public void run( ) {"]},{"entry":[{},"\u2003\u2003while(1) { \/\/ run forever"]},{"entry":[{},"\u2003\u2003\u2003aCopy = createCopy(aProfile);"]},{"entry":[{},"\u2003\u2003\u2003sleep(60,000); \/\/ wait a minute: 60,000 milliseconds"]},{"entry":[{},"\u2003\u2003\u2003instructionsForAlterations = compare(aProfile, aCopy);"]},{"entry":[{},"\u2003\u2003\u2003alter(Adapter myAdapter, String"]},{"entry":[{},"\u2003\u2003\u2003\u2003instructionsForAlterations);"]},{"entry":[{},"\u2003\u2003}"]},{"entry":[{},"\u2003}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"This examplary pseudocode declares ChangeDetector as a subclass of Thread and overrides the run( ) method from the Thread class, so that the change detector can operate asynchronously within the adapter to detect changes as they occur, or in this example at least, within one minute after they occur. The following exemplary Java pseudocode, typically called from a main( ) method in an adapter object ( on ) or even from an adapter's constructor, then can create a separate thread of execution for the change detector and start it running:",{"@attributes":{"id":"p-0166","num":"0172"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ChangeDetector aChangeDetector = new ChangeDetector( );"]},{"entry":[{},"aChangeDetector.start( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Such a change detector object can obtain references or filenames for profiles through its constructor or through an accessor method such as setAProfile( ). This example of a change detector object gets a reference to its adapter, again, from its constructor or from an accessor method such as setMyAdapter( ). Accessor methods can be called from Adapter.main( ) by the following exemplary pseudocode:",{"@attributes":{"id":"p-0168","num":"0174"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"aChangeDetector.setAProfile(String profileFilename);"]},{"entry":[{},"aChangeDetector.setMyAdapter(Adapter myAdapter);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The method of  includes altering () the adapter in dependence upon the instructions (). Altering an adapter can be carried out as shown in the pseudocode change detector class set forth above which contains a call to an exemplary method:\n\n","The alter( ) method accepts as call parameters a reference to an adapter and a string containing instructions for altering the adapter. The alter( ) method in this example is programmed to operate in accordance with the instructions for altering the adapter to create new adapter components, delete existing adapter components, or change the operating parameters of existing adapter components.","In some embodiments, a method like the alter( ) example creates new adapter components in a manner similar to that described above in this disclosure for constructing adapters. That is, in altering an adapter according to the following instructions for alteration:",{"@attributes":{"id":"p-0172","num":"0179"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<add>"]},{"entry":[{},"\u2003<transportmodules>"]},{"entry":[{},"\u2003\u2003<transport class=\u201cPurchasing.java\u201d id=\u201cpurchasingSystem\u201d>"]},{"entry":[{},"\u2003\u2003\u2003<receiver configParms=\u201cghi\u201d><\/receiver>"]},{"entry":[{},"\u2003\u2003\u2003<sender configParms=\u201crst\u201d><\/sender>"]},{"entry":[{},"\u2003\u2003<\/transport>"]},{"entry":[{},"\u2003<\/transportmodules>"]},{"entry":[{},"\u2003<transfermodules>"]},{"entry":[{},"\u2003\u2003\u2002<transferManager class=\u201cxfrMgr2.java\u201d"]},{"entry":[{},"\u2003\u2003\u2002order=\u201c3\u201d><\/transferManager>"]},{"entry":[{},"\u2003<\/transfermodules>"]},{"entry":[{},"<\/add>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"In some embodiments, a method like the alter( ) example deletes existing adapter components by calling member methods in the components themselves. That is, in altering an adapter according to the following instructions for alteration:",{"@attributes":{"id":"p-0174","num":"0181"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<delete>"]},{"entry":[{},"\u2003<transportmodules>"]},{"entry":[{},"\u2003\u2003<transport class=\u201cPurchasing.java\u201d id=\u201cpurchasingSystem\u201d>"]},{"entry":[{},"\u2003\u2003\u2003<receiver configParms=\u201cghi\u201d id=\u201crcv1\u201d><\/receiver>"]},{"entry":[{},"\u2003\u2003\u2003<sender configParms=\u201crst\u201d id=\u201csnd1\u201d><\/sender>"]},{"entry":[{},"\u2003\u2003<\/transport>"]},{"entry":[{},"\u2003<\/transportmodules>"]},{"entry":[{},"\u2003<transfermodules>"]},{"entry":[{},"\u2002\u2003\u2003<transferManager class=\u201cxfrMgr2.java\u201d id= \u201cxfrMgr2\u201d"]},{"entry":[{},"\u2002\u2003\u2003order=\u201c3\u201d><\/transferManager>"]},{"entry":[{},"\u2003<\/transfermodules>"]},{"entry":[{},"<\/delete>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["514","516","518"],"figref":"FIG. 5","i":"a"},"More particularly, in this example, the alter( ) method is programmed to call Adapter.deleteSender(String \u201csnd1\u201d) (reference  on ) to delete senders. The deleteSender( ) method is programmed to look up the sender named \u201csnd1\u201d in its sender list ( on ) and remove it from the list. In Java, that is all there is to it. Java garbage collection will clean away the unused sender object. In C++, deleteSender( ) would get a reference to the sender from the sender list, call the sender's destructor, and remove the sender from the sender list. In such exemplary embodiments, deleting a transfer manager is carried out in the same fashion: alter( ) calls deleteTransferManager(String \u201cxfrMgr2\u201d) ( on ) which in turn removes the transfer manager from the transfer manager list (), calling the transfer manager's destructor if needed.","Polled receivers are deleted in the same way, but asynchronous receivers operating in separate threads of execution advantageously have their threads stopped also. Java objects that inherit from Java's \u2018Thread\u2019 class include a stop( ) method which abruptly halts operation of a Java thread. Java threads can also be stopped by including in them a separate method for signaling the need to stop by setting some member flag so that the run( ) method in such objects can check the flag regularly, detect the need to stop, and make an orderly return from the run( ) method.","In the scope of the present invention, there is more than one way to receive instructions to alter an adapter.  sets forth a data flow diagram illustrating a further exemplary method of application integration in which receiving () instructions () to alter an adapter () comprises receiving from an application () an administrative integration message () bearing the instructions () to alter the adapter.","Applications sending administrative messages can be any application programmed to support administrative messages, such as, for example, a new application programmed to transmit upon its own startup an XML message over HTTP requesting adding to an adapter one or more transports, one or more receivers, one or more senders, and zero or more transfer managers to support integration of the new application with one or more other applications, including route mapping instructions. Because such a new application would have not yet have its own receiver to send the message, some embodiments provide and make public the network address of a receiver dedicated to listening for administrative messages. After a new application is coupled to its own receiver, then the new application thereafter can send its administrative messages directly to its own receiver in an adapter.","For further explanation of the method of , the receive function () is considered to be implemented as a run( ) method ( on ) in a receiver object of a receiver class similar to the one shown at reference () on , inheriting from Java's \u2018Thread\u2019 class, with the run( ) method operating asynchronously in its own thread of execution. This exemplary receiver administers an administrative integration message () very much like any other message. That is, this exemplary receiver operates just like the asynchronous receivers described in more detail above in this disclosure, receiving the message, translating its format as needed, encapsulating it in a message event, passing the message event to an event listener, and so on. Administrative integration messages are distinguished in their treatment by the receiver, however, in that the receiver writes in the messageType fields ( on ) of message event objects a code value identifying them as administrative integration messages, a value such as, for example, \u201cadmin.\u201d In addition, the receiver writes in the destinationID field ( on ) of the message event objects for such messages an indication that the destination of the message is the adapter itself rather than a destination application. The receiver stores the instructions for altering the adapter as the body () of the message in the message event object. Just as it would for other message types, the receiver passes a reference to the message event object by calling a transportEvent(messageEvent) method ( on ) in an event listener registered ( on ) in the receiver.","In this example, the transportEvent( ) method, having available to it the source, destination, and type of the administrative message in the message event, can identify, in dependence upon the source, destination, and message type values, a route map for the message event and route the message event carrying the instructions for altering the adapter to one more transfer managers just as would be done for any other message. Transfer managers can be programmed and organized in a route to carry out the details of altering the adapter, creating new components, deleting or changing parameters for existing components, and so on.","As an alternative to using transfer managers to carry out alterations of adapters, in some embodiments, the transportEvent( ) method is programmed to note the messageType code of messageEvents passed to it and pass on the administrative messages to a member method designed to carry out the instructions for altering the adapter, such as, for example, the member method alter( ) ( on ), which operates in a manner similar to that described above for the alter( ) method in the class ChangeDetector. That is, Adapter.alter( ) can be called by the transportEvent( ) method as:\n\n","Adapter.alter( ) operates a little differently from ChangeDetector.alter( ). ChangeDetector.alter( ) accepts as call parameters a reference to an adapter and a string containing instructions for altering the adapter. Adapter.alter( ), however, is a member method within the adapter object of the adapter to be altered, so does not need a call parameter reference to the adapter. Also, the transportEvent( ) method in the event listener is programmed only to hand off the administrative message event, not to process it any further. The transportEvent( ) method, therefore, in this example, does not extract the message body, the instructions for altering the adapter, and pass it to Adapter.alter( ) as a String. Instead, the transportEvent( ) method passes to Adapter.alter( ) the entire message event, leaving it up to Adapter.alter( ) to extract the body of the message from the messageEvent object as a String comprising the instructions for altering the adapter. Subject to these exceptions, however, the operations of Adapter.alter( ) are similar to those of ChangeDetector.alter( ) described in detail above in this disclosure. That is, Adapter.alter( ) method is programmed to operate in accordance with the instructions for altering the adapter to create new adapter components, delete existing adapter components, or change the operating parameters of existing adapter components, as described in detail for ChangeDetector.alter( ) above in this disclosure.","Receivers for administrative messages can be polled as well as asynchronous. In a typical polled embodiment, there would be no event listener and no transportEvent( ) method. Instead, the run( ) method in a receiver would return messageEvent directly to the polling function, in this example, the main( ) method in the adapter ( on ). The polling function would note messageEvent.messageType==\u201cadmin\u201d and pass the messageEvent to the alter( ) method ( on ) to carry out alterations to the adapter according to the instructions encapsulated in the body String of the message event ( on ).","In adapters according to the method of , altering () the adapter in dependence upon the instructions () typically further comprises updating () the profile () to reflect the instructions, so that the profile maintains a currently correct description of the adapter as altered. In embodiments that use an XML document as a profile, updating can be carried out manually though a text editor or word processor. Alternatively, updating for such embodiments often is automated through an update( ) method programmed to combine both the instructions for altering a profile as well as the old profile into an updated profile, a new XML document. In embodiments that maintain a parsed profile ( on ) in working memory, altering () the adapter often includes parsing ( on ) the updated profile into a parsed profile in working memory, so that the parsed profile also is maintained with currently correct content depicting the adapter components as altered in accordance with the instruction ().","It will be understood from the foregoing description that various modifications and changes may be made, and in fact will be made, in the exemplary embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1","i":"a "},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","i":"b "},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 5","i":["a","h "],"b":"5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
