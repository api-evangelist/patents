---
title: Performance analysis during visual creation of graphics images
abstract: In general, this disclosure relates to techniques for using graphics instructions and state information received from a graphics device to visually create a graphics image. Performance analysis may also be conducted to identify potential bottlenecks during instruction execution on the graphics device. One example device includes a display device and one or more processors. The one or more processors are configured to receive a plurality of graphics instructions from an external graphics device, wherein the graphics instructions are executed by the external graphics device to display a graphics image, and to receive state information from the external graphics device, wherein the state information is associated with execution of the graphics instructions on the external graphics device. The one or more processors are further configured to display, on the display device, a representation of the graphics image according to the graphics instructions and the state information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08587593&OS=08587593&RS=08587593
owner: QUALCOMM Incorporated
number: 08587593
owner_city: San Diego
owner_country: US
publication_date: 20090722
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY UNDER 35 U.S.C. \u00a7119","REFERENCE TO CO-PENDING APPLICATIONS FOR PATENT","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present Application for Patent claims priority to Provisional Application No. 61\/083,656 entitled PERFORMANCE ANALYSIS DURING VISUAL CREATION OF GRAPHICS IMAGES filed Jul. 25, 2008, and assigned to the assignee hereof and hereby expressly incorporated by reference herein.","The present Application for Patent is related to the following co-pending U.S. Patent Applications:\n\n","This disclosure relates to display of graphics images.","Graphics processors are widely used to render two-dimensional (2D) and three-dimensional (3D) images for various applications, such as video games, graphics programs, computer-aided design (CAD) applications, simulation and visualization tools, and imaging. Display processors may be used to display the rendered output of the graphics processor for presentation to a user via a display device.","OpenGL\u00ae (Open Graphics Library) is a standard specification that defines an API (Application Programming Interface) that may be used when writing applications that produce 2D and 3D graphics. Other languages, such as Java, may define bindings to the OpenGL API's through their own standard processes. The interface includes multiple function calls, or instructions, that can be used to draw scenes from simple primitives. Graphics processors, multi-media processors, and even general purpose CPU's can then execute applications that are written using OpenGL function calls. OpenGL ES (embedded systems) is a variant of OpenGL that is designed for embedded devices, such as mobile wireless phones, digital multimedia players, personal digital assistants (PDA's), or video game consoles.","Graphics applications, such as 3D graphics applications, may describe or define contents of a scene by invoking API's, or instructions, that in turn use the underlying graphics hardware, such as one or more processors in a graphics device, to generate an image. The graphics hardware may undergo a series of state transitions that are exercised through these API's. A full set of states for each API call, such as a draw call or instruction, may describe the process with which the image is rendered by the hardware.","In general, this disclosure relates to techniques for capturing and analyzing graphics instructions, or call streams, along with state information that is sent from a graphics device, such as a mobile device. The graphics instructions may be generated or compiled from application programming interface (API) instructions. The graphics instructions and state information may be transmitted across a communication medium to an application computing device, such as a personal computer, and used to display a graphics image (such as a 3D image) within a simulation environment.","The displayed graphics image may be a representation of an image that is displayed on the graphics device. The simulation environment is capable of re-creating the image, or scene (which may comprise a series of images). Because the simulation environment may create a scene as it is presented on the graphics device, application developers can isolate performance issues or bottlenecks in their graphics application and prototype modifications that may improve the overall performance of such applications.","In one aspect, a method comprises receiving a plurality of graphics instructions from an external graphics device, wherein the graphics instructions are executed by the external graphics device to display a graphics image, and receiving state information from the external graphics device, wherein the state information is associated with execution of the graphics instructions on the external graphics device. The method further includes displaying a representation of the graphics image according to the graphics instructions and the state information. In certain cases, the method further includes repeating the receiving of the graphics instructions, receiving of the state information, and displaying the representation of the graphics image for multiple frames of the graphics image. In certain cases, the method further includes receiving performance information from the external graphics device, wherein the performance information is associated with execution of the graphics instructions on the external graphics device, and analyzing the performance information to identify one or more performance issues on the external graphics during its execution of the graphics instructions.","The techniques described in this disclosure may be implemented in hardware, software, firmware, or any combination thereof. If implemented in software, the software may be executed in a processor, which may refer to one or more processors, such as a microprocessor, application specific integrated circuit (ASIC), field programmable gate array (FPGA), or digital signal processor (DSP), or other equivalent integrated or discrete logic circuitry. Software comprising instructions to execute the techniques may be initially stored in a computer-readable medium and loaded and executed by a processor.","Accordingly, this disclosure also contemplates computer-readable media comprising instructions to cause a processor to perform any of a variety of techniques as described in this disclosure. In some cases, the computer-readable medium may form part of a computer program product, which may be sold to manufacturers and\/or used in a device. The computer program product may include the computer-readable medium, and in some cases, may also include packaging materials.","The details of one or more aspects are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.",{"@attributes":{"id":"p-0029","num":"0030"},"figref":"FIG. 1","b":["2","30","32","20","2","2","2","2"]},"In some cases, graphics device  may be capable of executing various applications, such as graphics applications, video applications, audio applications, and\/or other multi-media applications. For example, graphics device  may be used for graphics applications, video game applications, video playback applications, digital camera applications, instant messaging applications, video teleconferencing applications, mobile applications, or video streaming applications.","Graphics device  may be capable of processing a variety of different data types and formats. For example, graphics device  may process still image data, moving image (video) data, or other multi-media data, as will be described in more detail below. The image data may include computer-generated graphics data. In the example of , graphics device  includes a graphics processing system , a storage medium  (which comprises memory), and a display device .","Programmable processors , , , and  may be included within graphics processing system . Programmable processor  is a control, or general-purpose, processor. Programmable processor  is a graphics processor, programmable processor  is a vertex processor, and programmable processor  is a display processor. Control processor  may be capable of controlling graphics processor , vertex processor , and\/or display processor . In one aspect, graphics processing system  may include other forms of multi-media processors.","In graphics device , graphics processing system  is coupled both to storage medium  and to display device . Storage medium  may include any permanent or volatile memory that is capable of storing instructions and\/or data, such as, for example, synchronous dynamic random access memory (SDRAM), read-only memory (ROM), non-volatile random access memory (NVRAM), embedded dynamic random access memory (eDRAM), static random access memory (SRAM), or flash memory. Display device  may be any device capable of displaying image data for display purposes, such as an LCD (liquid crystal display), plasma display device, or other television (TV) display device.","Vertex processor  is capable of managing vertex information and processing vertex transformations. In one aspect, vertex processor  may comprise a digital signal processor (DSP). Graphics processor  may be a dedicated graphics rendering device utilized to render, manipulate, and display computerized graphics. Graphics processor  may implement various complex graphics-related algorithms. For example, the complex algorithms may correspond to representations of two-dimensional or three-dimensional computerized graphics. Graphics processor  may implement a number of so-called \u201cprimitive\u201d graphics operations, such as forming points, lines, and triangles or other polygon surfaces, to create complex, three-dimensional images on a display, such as display device .","Graphics processor  may carry out instructions that are stored in storage medium . Storage medium  is capable of storing application instructions  for an application (such as a graphics or video application), as well as one or more graphics drivers . Application instructions  may be loaded from storage medium  into graphics processing system  for execution. For example, one or more of control processor , graphics processor , and display processor  may execute instructions . In one aspect, application instructions  may comprise one or more downloadable modules that are downloaded dynamically, over the air, into storage medium . In one aspect, application instructions  may comprise a call stream of binary instructions that are generated or compiled from application programming interface (API) instructions created by an application developer.","Graphics drivers  may also be loaded from storage medium  into graphics processing system  for execution. For example, one or more of control processor , graphics processor , and display processor  may execute certain instructions from graphics drivers . In one example aspect, graphics drivers  are loaded and executed by graphics processor . Graphics drivers  will be described in further detail below.","As also shown in , graphics processing system  includes one or more buffers . Control processor , graphics processor , vertex processor , and\/or display processor  each have access to buffers , and may store data in or retrieve data from buffers . Buffers  may comprise cache memory, and may be capable of storing both data and instructions. For example, buffers  may include one or more of application instructions  or one or more instructions from graphics drivers  that have been loaded into graphics processing system  from storage medium . Buffers  and\/or storage medium  may also contain graphics data used during instruction execution.","Applications instructions  may, in certain cases, include instructions for a graphics application, such as a 3D graphics application. Application instructions  may comprise instructions that describe or define contents of a graphics scene that includes one or more graphics images. When application instructions  are loaded into and executed by graphics processing system , graphics processing system  may undergo a series of state transitions. One or more instructions within graphics drivers  may also be executed to render or display graphics images on display device  during executing of application instructions .","A full set of states for instruction, such as a draw call, may describe a process with which an image is rendered by graphics processing system . However, an application developer who has written application instructions  may often have limited ability to interactively view or modify these states for purposes of debugging or experimenting with alternate methods of describing or rendering images in a defined scene. In addition, different hardware platforms, such as the platform of graphics processing system  shown in , may have different hardware designs and implementations of these states and\/or state transitions.","Thus, in one aspect, an application developer may use application computing device , shown in , to assist in the processing of debugging and experimenting with alternate methods for describing or rendering images in a scene. Application computing device  is coupled to graphics device . For example, in one aspect, application computing device  is coupled to graphics device  via a Universal Serial Bus (USB) connection. In other aspects, other types of connections, such as wireless or other forms of wired connections, may be used.","Application computing device  includes one or more processors , a display device , and a storage medium . Processors  may include one or more of a control processor, a graphics processor, a vertex processor, and a display processor, according to one aspect. Storage medium  may include any permanent or volatile memory that is capable of storing instructions and\/or data, such as, for example, synchronous dynamic random access memory (SDRAM), read-only memory (ROM), non-volatile random access memory (NVRAM), static random access memory (SRAM), or flash memory. Display device  may be any device capable of displaying image data for display purposes, such as an LCD (liquid crystal display), plasma display device, or other television (TV) display device.","Application computing device  is capable of capturing and analyzing graphics instructions , along with state and\/or performance information , that is sent from graphics device . In one aspect, graphics drivers  are configured to send graphics instructions  and state\/performance information  to application computing device . Graphics instructions  may include one or more of application instructions , and state\/performance information  may be generated or captured during execution of graphics instructions  within graphics processing system .","State\/performance information  includes information about the state and performance of graphics processing system  during instruction execution, and will be described in more detail below. State\/performance information  may include graphics data (e.g., primitive and\/or rasterized graphics data) that may be used, or is otherwise associated, with graphics instructions . Graphics processing system  may execute graphics instructions  to display an image, or a scene of images, on display device . Application computing device  is capable of using graphics instructions , along with state\/performance information , to create the graphics image or scene that is also shown on display device  of graphics device .","Simulation application  may be executed by processors  of application computing device  to create the graphics image or scene upon receipt of graphics instructions  and state\/performance information , and display the image, or scene of images, on display device . Simulation application  may comprise a software module that contains a number of application instructions. Simulation application  is stored in storage medium , and may be loaded and executed by processors . Simulation application  may be pre-loaded into storage medium , and may be customized to operate with graphics device . In one aspect, simulation application  simulates the hardware operation of graphics device . Different versions of simulation application  may be stored in storage medium  and executed by processors  for different graphics devices having different hardware designs. In some cases, software libraries may also be stored within storage medium , which are used in conjunction with simulation application . In one aspect, simulation application  may be a generic application, and specific hardware or graphics device simulation functionality may be included within each separate library that may be linked with simulation application  during execution.","In one aspect, a visual representation of state\/performance information  may be displayed to application developers on display device . In addition, a visual representation of graphics instructions  may also be displayed. Because, in many cases, graphics instructions  may comprise binary instructions, application computing device  may use instruction mapping information  to generate the visual representation of graphics instructions  on display device . Instruction mapping information  is stored within storage medium  and may be loaded into processors  in order to display a visual representation of graphics instructions .","In one aspect, instruction mapping information  may include mapping information, such as within a lookup table, to map graphics instructions  to corresponding API instructions that may have been previously compiled when generating graphics instructions . Application developers may write programs that use API instructions, but these API instructions are typically compiled into binary instructions, such as graphics instructions  (which are included within application instructions ), for execution on graphics device . One or more instructions within graphics instructions  may be mapped to an individual API instruction. The mapped API instructions may then be displayed to an application developer on display device  to provide a visual representation of the graphics instructions  that are actually being executed.","In one aspect, a user, such as an application developer, may wish to change one or more of the graphics instructions  to determine, for example, the effects of such changes on performance. In this aspect, the user may change the visual representation of graphics instructions . Mapping information  may then be used to map these changes within the visual representation of graphics instructions  to binary instructions that can then be provided back to graphics device  within requested modifications , as will be described in more detail below.","As described above, the graphics image that is displayed on display device  of application computing device  may be a representation of an image that is displayed on graphics device . Because simulation application  may use graphics instructions  and state\/performance information  to create an image or scene exactly as it is presented on graphics device , application developers that use application computing device  may be able to quickly identify potential performance issues or bottlenecks during execution of graphics applications , and even prototype modifications to improve the overall performance of graphics applications .","For example, an application developer may choose to make one or more requested modifications  to graphics instructions  and\/or state\/performance information  during execution of simulation application  on application computing device  and display of the image on display device . Any such requested modifications  may be based upon observed performance issues, or bottlenecks, during execution of graphics instructions  or analysis of state\/performance information . These requested modifications  may then be sent from application computing device  to graphics device , where they are processed by graphics processing system . In one aspect, one or more of graphics drivers  are executed within graphics processing system  to process requested modifications . Requested modifications , in some cases, may include modified instructions. In some cases, requested modifications may include modified state and\/or performance information.","Upon processing of requested modifications , updated instructions and\/or information  is sent back to application computing device , such as by one or more of graphics drivers . Updated instructions\/information  may include updated graphics instructions for execution based upon requested modifications  that were processed by graphics device . Updated instructions\/information  may also include updated state and\/or performance information based upon the requested modifications  that were processed by graphics device .","The updated instructions\/information  is processed by simulation application  to update the display of the image information on display device , and also to provide a visual representation of updated instructions\/information  to the application developer (which may include again using instruction mapping information ). The application developer may then view the updated image information on display device , as well as the visual representation of updated instructions\/information , to determine if the performance issues have been resolved or mitigated. The application developer may use an iterative process to debug graphics instructions  or prototype modifications to improve the overall performance graphics applications .",{"@attributes":{"id":"p-0052","num":"0053"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 2"],"b":["52","80","82","20","52","2","20","52","29","28","2","29","52"]},"As is shown in , graphics device  includes graphics processing system , display device , and storage medium . Unless graphics processing system  (), graphics processing system  does not include a vertex processor. Graphics processing system  includes a control processor , a graphics processor , a display processor , and one or more buffers . Control processor  may control graphics processor  and\/or display processor . Each of control processor , graphics processor , and display processor  has access to buffers , which may contain data or instructions.","Similar to storage medium  (), storage medium  of graphics device  is capable of storing instructions and drivers. As is shown in , storage medium (comprising memory) includes application instructions  and one or more graphics drivers . Application instructions  may comprise instructions for a graphics application, and graphics drivers  may comprise instructions for display of image data on display device  and instructions for communicating with application computing device . Application instructions  and graphics drivers  may be loaded into and executed by control processor , graphics processor , and\/or display processor  in graphics processing system . In some cases, one or more of application instructions  and one or more instructions from graphics drivers  may be loaded into buffers  for execution within graphics processing system .","During execution of application instructions  within graphics processing system , one or more of graphics drivers  may also, during execution, send graphics instructions  and state and\/or performance information  to application computing device . Graphics instructions  may comprise a portion or subset of application instructions . State\/performance information  may be based upon execution of graphics instructions  within one or more of control processor , graphics processor , and display processor .","Simulation application  may be loaded into and executed by one or more of processors  to process graphics instructions  and state\/performance information . As noted above, simulation application  may be designed specifically to simulate the operation of graphics device . Various types of designs of graphics devices may be simulated on application computing device  through creation and execution of corresponding simulation applications.","Simulation application  may cause processors  to display a representation of a graphics image or scene on display device  according to the received graphics instructions  and state\/performance information . This image or scene may originally have been displayed on display device  of graphics device , but its representation is displayed on display device . In addition, simulation application  may cause processors  to display a visual representation of state\/performance information  on display device . Application computing device  may also use instruction mapping information  to provide a visual representation of graphics instructions  in display device .","An application developer may also choose to make one or more requested modifications  to graphics instructions  and\/or state\/performance information  during execution of simulation application . Any such requested modifications  may be based upon observed performance issues, or bottlenecks, during execution of graphics instructions  or analysis of state\/performance information . These requested modifications  may then be sent from application computing device  to graphics device , where they may be processed by one or more of graphics drivers .","Upon processing of requested modifications , updated instructions and\/or information  is sent back to application computing device  by the one or more of graphics drivers . Updated instructions\/information  may include updated graphics instructions, updated state information, and\/or updated performance information.","The updated instructions\/information  is processed by simulation application  to update the display of the image information on display device , and also to provide a visual representation of updated instructions\/information  to the application developer. The application developer may view the updated image information on display device , as well as the visual representation of updated instructions\/information , to determine if the performance issues have been resolved or mitigated. The application developer may use an iterative process to debug graphics instructions  or prototype modifications to improve the overall performance graphics applications .",{"@attributes":{"id":"p-0061","num":"0062"},"figref":["FIG. 3","FIG. 1","FIG. 3","FIG. 2"],"b":["4","18","20","20","4","2","20","54","52"]},"As shown in , graphics processing system  includes four programmable processors: control processor , vertex processor , graphics processor , and display processor , which are also shown in . Control processor  may control any of vertex processor , graphics processor , or display processor . In many cases, these processors , , , and  may be part of a graphics processing pipeline within system .","Control processor  may control one or more aspects of the flow of data or instruction execution through the pipeline, and may also provide geometry information for a graphics image to vertex processor . Vertex processor  may manage vertex transformation or geometry processing of the graphics image, which may be described or defined according to multiple vertices in primitive geometry form. Vertex processor  may provide its output to graphics processor , which may perform rendering or rasterization operations on the graphics image. Graphics processor  may provide its output to display processor , which prepares the graphics image, in pixel form, for display. Graphics processor  may also perform various operations on the pixel data, such as shading or scaling.","Often, graphics image data may be processed in this processing pipeline during execution of graphics instructions , which may be part of application instructions  (). As a result, graphics instructions  may be executed by one or more of control processor , vertex processor , graphics processor , and display processor . Application developers may typically not have much knowledge or control of which particular processors within graphics processing system  execute which ones of graphics instructions . In some cases, one or more of control processor , vertex processor , graphics processor , and display processor  may have performance issues, or serve as potential bottlenecks within the processing pipeline, during the execution of graphics instructions . In these cases, overall performance within graphics processing system  may be deteriorated, and the application developer may wish to make changes the graphics instructions  to improve performance. However, the developer may not necessarily know which ones of processors , , , or  may be the ones that have performance issues.","To assist with the problem of identifying performance bottlenecks and potential solutions, the graphics driver A of graphics device  may capture, or collect, graphics instructions  from graphics processing system  and route them to application computing device , as shown in . Graphics driver A is part of graphics drivers  shown in . Graphics driver A may be loaded and executed by one or more of control processor , vertex processor , graphics processor , and display processor . In addition, graphics driver A may also collect state and\/or performance information  from one or more of control processor , vector processor , graphics processor , and display processor  and route this information  to application computing device , as well. In one aspect, graphics driver A may comprise an OpenGL ES driver when graphics instructions  include binary instructions that may have been generated or compiled from OpenGL ES API instructions.","Various forms of state data may be included within state\/performance information . For example, the state data may include graphics data used during execution of, or otherwise associated with, graphics instructions . The state data may be related to a vertex array, such as position, color, coordinates, size, or weight data. State data may further include texture state data, point state data, line state data, polygon state data, culling state data, alpha test state data, blending state data, depth state data, stencil state data, or color state data. As described previously, state data may include both state information and actual data. In some cases, the state data may comprise data associated with one or more OpenGL tokens.","Various forms of performance data may also be included within state\/performance information . In general, this performance data may include metrics or hardware counter data from one or more of control processor , vertex processor , graphics processor , and display processor . The performance data may include frame rate or cycle data. The cycle data may include data for cycles used for profiling, command arrays, vertex and index data, or other operations. In various aspects, various forms of state and performance data may be included within state\/performance information  that is collected from graphics processing system  by graphics driver A.","As described previously, application computing device  may display a representation of a graphics image according to received graphics instructions  and state\/performance information . Application computing device  may also display a visual representation of state\/performance information . By viewing and interacting with the re-created graphics image and\/or the visual representation of the state\/performance information , an application developer may be able to quickly identify and resolve performance issues within graphics processing system  of graphics device  during execution of graphics instructions . For example, the application developer may be able to identify which specific ones of processors , , , and\/or  may have performance issues.","In an attempt to identify a workaround or resolution to any identified performance issues, the developer may initiate one or more requested modifications  on application computing device . For example, the developer may interact with the re-created image or the representation of state\/performance information  to create the requested modifications . In some cases, the developer may even directly change the state\/performance information , as described in more detail below, to generate the requested modifications . In certain cases, requested modifications  may include one or more requests to disable execution of one or more of graphics instructions  in graphics processing system  of graphics device , or requests to modify one or more of graphics instructions .","Requested modifications  are sent from application computing device  to graphics driver A, which handles the requests for graphics device  during operation. In many cases, the requested modifications  may include requests to modify state information, which may include data, within one or more of processors , , , or  within graphics processing system  during execution of graphics instructions . Graphics driver A may then implement the changes within graphics processing system  that are included within requested modifications . These changes may alter the flow of execution amongst processors , , , and\/or  for execution of graphics instructions . In certain cases, one or more of graphics instructions  may be disabled during execution in graphics processing system  according to requested modifications .","Graphics driver A is capable of sending updated instructions and\/or information  to application computing device  in response to the processing of requested modifications . Updated instructions\/information  may include updated state information collected from graphics processing system  by graphics driver A, including performance information. Updated instructions\/information  may also include updated graphics instructions.","Application computing device  may use updated instructions\/information  to display an updated representation of the graphics image, as well as a visual representation of updated instructions\/information . The application developer may then be capable of assessing whether the previously identified performance issues have been resolved or otherwise addressed. For example, the application developer may be able to analyze the updated image, as well as the visual representation of updated instructions\/information  to determine if certain textures, polygons, or other features have been optimized, or if other performance parameters have been improved.","In such fashion, the application developer may be able to rapidly and effectively debug or analyze execution of graphics instructions  within an environment on application computing device  that simulates the operation of graphics processing system  on graphics device . The developer may iteratively interact with the displayed image and state\/performance information on application computing device  to analyze multiple graphics images in a scene or multiple image frames to maximize execution performance of graphics instructions . Examples of such interaction and displayed information on application computing device  will be presented in more detail below.",{"@attributes":{"id":"p-0074","num":"0075"},"figref":["FIG. 4","FIG. 4"],"b":["10","12","14","16","100","102","10","14","12","16","30"]},"As described previously, control processor  may control one or more aspects of the flow of data or instruction execution through the graphics processing pipeline, and may also provide geometry information to vertex processor . As shown in , control processor  may perform geometry storage at . In some cases, geometry information for one or more primitives may be stored by control processor  in buffers  (). In some cases, geometry information may be stored in storage medium .","Vertex processor  may then obtain the geometry information for a given primitive provided by control processor and\/or stored in buffers  for processing at . In certain cases, vertex processor  may manage vertex transformation of the geometry information. In certain cases, vertex processor  may perform lighting operations on the geometry information.","Vertex processor  may provide its output to graphics processor , which may perform rendering or rasterization operations on the data at . Graphics processor  may provide its output to display processor , which prepares one or more graphics images, in pixel form, for display. Display processor  may perform various operations on the pixel data, including fragment processing to process various fragments of the data, at . In certain cases, this may include one or more of depth testing, stencil testing, blending, or texture mapping, as is known in the art. When performing texture mapping, display processor  may incorporate texture storage and filtering information at . In some cases, graphics processor  may perform other operations on the rasterized data, such as shading or scaling operations.","Display processor  provides the output pixel information for storage into a frame buffer at . In some cases, the frame buffer may be included within buffers  (). In other cases, the frame buffer may be included within storage medium . The frame buffer stores one or more frames of image data, which can then be displayed at , such as on display device .","As described previously, graphics instructions  may be executed by one or more of control processor , vertex processor , graphics processor , and display processor . Application developers may typically not have much knowledge or control of which particular processors within graphics processing system  execute which ones of graphics instructions . In certain cases, one or more of control processor , vertex processor , graphics processor , and display processor  may have performance issues, or serve as potential bottlenecks within the processing pipeline, during the execution of graphics instructions . It may often be difficult for an application developer to pinpoint the location of a bottleneck, or how best to resolve or mitigate the effects of such a bottleneck. Thus, in one aspect, graphics instructions  and\/or state information may be provided from graphics device  to an external computing device, such as application computing device . The state information may include data from one or more of control processor , vertex processor , graphics processor , and display processor  with respect to various operations, such as those shown in , that occur during the execution of graphics instructions . Application computing device  may create a graphics image that is shown on device  in order to help identify and resolve bottlenecks in an efficient and effective manner.",{"@attributes":{"id":"p-0080","num":"0081"},"figref":["FIG. 5","FIG. 3"],"b":["18","18","4","10","14","12","16","18","18","4","20","18","54","68"]},"Graphics driver A, when executed, includes various functional blocks, which are shown in  as transport interface , processor usage module , hardware counter module , state\/performance data module  that can manage other state and\/or performance data, API trace module , and override module . Graphics driver A uses transport interface module  to communicate with application computing device .","Processor usage module  collects and maintains processor usage information for one or more of control processor , vertex processor , graphics processor , and display processor . The processor usage information may include processor cycle and\/or performance information. Cycle data may include data for cycles used for profiling, command arrays, vertex and index data, or other operations. Processor usage module  may then provide such processor usage information to application computing device  via transport interface module . In some cases, processor usage module  provides this information to device  as it receives the information, in an asynchronous fashion. In other cases, processor usage module  may provide the information upon receipt of a request from device .","Hardware counter module  collects and maintains various hardware counters during execution of instructions by one or more of control processor , graphics processor , vertex processor , or display processor . The counters may keep track of various state indicators and\/or metrics with respect to instruction execution within graphics processing system . Hardware counter module  may provide information to device  asynchronously or upon request.","State\/performance data module  collects and maintains other state and\/or performance data for one or more of control processor , graphics processor , vertex processor , and display processor  in graphics processing system . For example, the state data may, in some cases, comprise graphics data. The state data may include data related to a vertex array, such as position, color, coordinates, size, or weight data. State data may further include texture state data, point state data, line state data, polygon state data, culling state data, alpha test state data, blending state data, depth state data, stencil state data, or color state data. Performance data may include various other metrics or cycle data. State\/performance data module  may provide information to device  asynchronously or upon request.","API trace module  manages a flow and\/or trace of graphics instructions that are executed by graphics processing system  and transported to application computing device  via transport interface module . As described previously, graphics device  provides a copy of graphics instructions , which are executed by graphics processing system  in its processing pipeline, to device . API trace module  manages the capture and transport of these graphics instructions . API trace module  may also provide certain information used with instruction mapping information  () to map graphics instructions  to a visual representation of graphics instructions , such as API instructions that may have been used to generate graphics instructions .","Override module  allows graphics driver A to change, or override, the execution of certain instructions within graphics processing system . As described previously, application computing device  may send one or more requested modifications, such as modifications , to graphics device . In certain cases, requested modifications  may include one or more requests to disable execution of one or more of graphics instructions  in graphics processing system , or requests to modify one or more of graphics instructions . In some cases, requested modifications  may include requests to change state\/performance information .","Override module  may accept and process requested modifications . For example, override module  may receive from device  any requests to modify one or more of graphics instructions , along with any requests to modify state\/performance information , and send such requests to graphics processing system . One or more of control processor , graphics processor , vertex processor , and display processor  may then process these requests and generate updated instructions\/information . Override module  may then send updated instructions\/information  to application computing device  for processing, as described previously.","In such fashion, graphics driver A provides an interface between graphics device  and application computing device . Graphics driver A is capable of providing graphics instructions and state\/performance information  to application computing device , and also receiving requested modifications  from application computing device . After processing such requested modifications , graphics driver A is subsequently able to provide updated instructions\/information  back to application computing device .",{"@attributes":{"id":"p-0089","num":"0090"},"figref":["FIG. 6","FIG. 1","FIG. 2","FIG. 6"],"b":["2","52","2"]},"Graphics device  may send a plurality of graphics instructions to a computing device, such as application computing device  (). The graphics instructions, such as graphics instructions , are executed by graphics device  to display a graphics image. Graphics instructions  may comprise binary instructions that are generated from application programming interface (API) instructions. In one aspect, graphics device  may send graphics instructions  using API trace module  of graphics driver A (). Graphics device  also sends state\/performance information  to application computing device  (). State\/performance information  is associated with execution of graphics instructions  by graphics device . In one aspect, graphics device  may send state\/performance information  using state\/performance data module  of graphics driver A. State\/performance information  may comprise state information or data from one or more of processors , , , or  of graphics device  that executes graphics instructions , and may include graphics data. State\/performance information  may also comprise performance metrics gathered from one or more of these processors , , , or . In these cases, graphics device  may send state\/performance information  using processor usage module  and\/or hardware counter module  of graphics driver A.","Graphics device  is also capable of receiving one or more requested modifications  from application computing device  (). These requested modifications  may cause graphics device  to modify the execution of graphics instructions  by graphics device . Requested modifications  may include one or more of a request to disable execution of one or more of graphics instructions  on graphics device , a request to modify one or more of graphics instructions  on graphics device , or a request to modify state information on graphics device . In one aspect, graphics device  may receive requested modifications  using override module , API trace module , and\/or state\/performance data module  of graphics driver A.","Upon processing of requested modifications , graphics device  may send updated instructions and\/or state information  to application computing device  based upon requested modifications  (). In one aspect, graphics device  may send updated instructions\/information  using API trace module  and\/or state\/performance data module  of graphics driver A.","If graphics device  has not finished processing information for one or more graphics image or image frames (), graphics device may repeat the sending of graphics instructions , sending of state\/performance information , receiving of requested modifications , and sending of updated instructions\/information  for multiple images or frames of a graphics image. In some cases, graphics device  may display one or more graphics images on display device  according to graphics instructions  and the state\/performance information .",{"@attributes":{"id":"p-0094","num":"0095"},"figref":["FIG. 7","FIG. 1","FIG. 2"],"b":["20","28","29","22","20","30","2","130","30","2","6","30"]},"Application computing device  may receive state and\/or performance information  from graphics device  (). State\/performance information  is associated with execution of graphics instructions  on graphics device . State\/performance information  may include state information that indicates one or more states of graphics device  as it renders a graphics image. The state information may include state information from one or more processors of graphics device  that execute graphics instructions , such as control processor , graphics processor , vertex processor , and\/or display processor . State\/performance information  may, in some cases, include graphics data (e.g., primitive data and\/or rasterized data).","Application computing device  may display a representation of one or more graphics images according to graphics instructions  and the state\/performance information  (). In such fashion, application computing device  is capable of displaying a representation of these graphics images within a simulated environment that simulates graphics device . The simulated environment may be provided via execution of simulation application  on processors  of application computing device .","Application computing device  displays at least a portion of graphics instructions  and state\/performance information  on display device  (). In some cases, when graphics instructions  include binary instructions, application computing device  displays a visual representation of graphics instructions . As described previously, application computing device  may use instruction mapping information  to map graphics instructions  to a representation of instructions . The representation may comprise associated graphics application programming interface (API) instructions that may be visually displayed on display device . A visual representation of state\/performance information  may also be displayed on display device . The receiving of the graphics instructions (), receiving of the state information (), displaying the representation of the graphics image (), and displaying of the instructions and state information () may be repeated for multiple image frames of the one or more graphics images if there are more frames to process (). In this fashion, application computing device  is capable of displaying both still and moving graphics images (including 3D images) on display device .","In one aspect, processors  may execute simulation application  to display a navigation controller on display device . A user, such as an application developer, may visually interact with the navigation controller within a graphical user interface displayed on display device . The graphical user interface may receive user input from the application developer to interact with the navigation controller to change a perspective view of the one or more displayed graphics images. A modified perspective view of the graphics image may then be displayed in the graphical user interface based upon the user input to the navigation controller.","In general, after the one or more graphics images are visually represented and displayed on display device , simulation application  (during execution on processors ) may receive user input to modify the graphics image. For example, as will be described in further detail below, application computing device  may receive user input specifying one or more requested modifications  to the execution of graphics instructions  by external graphics device  (where graphics device  is external with respect to application computing device ). Upon receipt of this user input, application computing device  sends requested modifications  to graphics device  for processing. Graphics device  may then process the requested modifications , as was described previously. In one aspect, requested modifications  may include at least one of a request to disable execution of one or more of graphics instructions  on graphics device , a request to modify one or more of graphics instructions  on graphics device , and a request to modify state\/performance information  on graphics device .","Application computing device  may subsequently receive a plurality of updated graphics instructions and\/or information  from graphics device . The updated graphics instructions\/information  may be associated with requested modifications . Updated instructions\/information  may include updated state information that is associated with the requested modifications  to the execution of graphics instructions  by graphics device . Upon receipt of updated instructions\/information , application computing device  may display an updated version of the one or more graphics images according to updated instructions\/information .",{"@attributes":{"id":"p-0101","num":"0102"},"figref":["FIG. 8","FIG. 1","FIG. 2"],"b":["20","28","29","22","20","30","2","150","20","32","2","152","30","32","20","30","32","154"]},"During or upon creation of these images, application computing device  may receive input to identify one or more performance issues (). For example, in some cases, application computing device  may automatically receive input from simulation application  to identify potential bottlenecks in the execution of graphics instructions  based upon the execution of graphics instructions  and\/or upon the analysis of state\/performance information  provided by graphics device . These bottlenecks may be associated with execution of graphics instructions  within the processing pipeline of graphics device , such as control processor , graphics processor , vertex processor , and\/or display processor . In some cases, application computing device  may receive input from a user, such as an application developer, that specifies or otherwise identifies one or more performance issues during execution of graphics instructions  on application computing device  to create the graphics images.","In one aspect, state\/performance information  includes performance information that is associated with execution of graphics instructions  on graphics device . Application computing device  may analyze the performance information to identify one or more performance issues on graphics device  during its execution of graphics instructions . In some cases, the performance information may include performance metrics gathered from one or more of processors , , , or  that may execute graphics instructions  on graphics device . When application computing device  analyzes the performance information received from graphics device , it may identify decreased performance in one or more of these processors , , , or .","Upon identification of such issues, application computing device  may send one or more requested modifications  to the execution of graphics instructions  to graphics device  (). In some cases, application computing device  may receive user input specifying one or more of the requested modifications . In one aspect, requested modifications  may include at least one of a request to disable execution of one or more of graphics instructions  on graphics device , a request to modify one or more of graphics instructions  on graphics device , and a request to modify state\/performance information  on graphics device .","After graphics device  has processed requested modifications  (such as was described previously), application computing device  may receive a plurality of updated instructions and\/or information  from graphics device  (). Updated instructions\/information  may include updated graphics instructions and\/or updated performance information. Any updated graphics instructions and\/or performance information may be associated with the requested modifications  to the execution of graphics instructions  by graphics device . Application computing device  may then display an updated representation of the one or more graphics images on display device  according to the updated graphics instructions and the updated performance information.","Application computing device  may then analyze the updated performance information to determine whether one or more of the previously identified performance issues have been resolved (). In some cases, application computing device  may be able to automatically analyze, or process, updated instructions\/information  to determine whether certain performance issues have been resolved or otherwise mitigated. In some cases, an application developer may be able to indicate to application computing device , via user input, that certain performance issues have been resolved or otherwise mitigated upon the developer's analysis of updated instructions\/information  and\/or review of the updated representation of the graphics images that have been displayed on display device .","Application computing device  repeats, in an iterative fashion, the acts of identifying existing performance issues, sending requested modifications  to graphics device , and receiving updated instructions and\/or information  until the identified performance issues have been resolved or otherwise mitigated. Application computing device  also repeats the acts shown in  for multiple image frames of the one or more graphics images that are visually represented on display device  (). In this fashion, application computing device  is capable of displaying both still and moving graphics images (including 3D images) on display device .",{"@attributes":{"id":"p-0108","num":"0109"},"figref":["FIG. 9","FIG. 1"],"b":["200","201","203","200","2","201","24","20","200","202","201","203","210","202","200"]},"Display device  may also be capable of displaying visual representations of these instructions and state\/performance information, such that a developer may change these instructions and information to modify graphics image  or an entire scene that includes graphics image . Display device  may be included within any type of computing device (not shown) that is coupled to graphics device  and is capable of receiving such instructions and state\/performance information from graphics device . For purposes of simplicity, the computing device that includes display device  has been left out of the conceptual diagram shown in .","As described previously, graphics device  is capable of display 3D graphics image  (which is a cube in the example of ). Graphics device  also has a keypad . A user may interact with keypad  to manipulate graphics device . Keypad  may include a number of keys and\/or buttons. Graphics device  is capable of sending graphics instructions and state\/performance information to a device (e.g., application computing device ) that includes graphics device  via connector . In one aspect, connector  comprises a Universal Serial Bus (USB) connector. In other aspects, different forms of connectors may be used, such as an Institute of Electrical and Electronic Engineers (IEEE) 1394 connector. In some aspects, wireless communication may replace connector .","As shown in the example of , display device  may display various types of information within a graphical user interface. In this example, display device  displays graphical window  within the graphical user interface. Window  includes a display area , a graphics instructions area , and a state\/performance information area . Display area  includes 3D graphics image , which, as described previously, is a representation of 3D graphics image . In this example, 3D graphics image comprises a cube. The information displayed on display device  comprises a representation, or simulation, of information displayed on graphics device  for purposes of debugging and testing, according to one aspect.","In the example of , graphics instructions area  includes a visual representation of one or more graphics instructions that have been received from graphics device . As described previously, the visual representation of such instructions may comprise a representation of such instructions. For example, if graphics device  sends binary graphics instructions, display device  may display a representation of such binary instructions in another form, such as higher-level application programming interface (API) instructions (e.g., OpenGL instructions). Mapping information (such as mapping information  shown in ) may be used to map received binary instructions into another format that may be displayed within graphics instructions area .","State\/performance information area  includes a visual representation of selected state and\/or performance information that has been received from graphics device . The received graphics instructions and state\/performance information may be used to display 3D graphics image  within display area. In one aspect, graphics device  may utilize a graphics driver that implements a state\/performance data module (such as state\/performance data module  shown in ) to provide various state and\/or performance data. The received state\/performance information may include graphics data (e.g., primitive data and\/or rasterized data).","Window  also includes one or more selectors A-N. A user may select any of these selectors A-N. Each selector A-N may be associated with different functions, such as statistical and navigation functions, as will be described in more detail below. Window  further includes selectors A-N and A-N, each of which may be selected by a user. Each selector A-N and A-N may also be associated with different functions, such as metric functions, override functions, and\/or texture functions, as will be described in more detail below in reference to .","A user, such as an application developer, may change information displayed within window . For example, the user may modify one or more of the instructions displayed within graphics instructions area , or any of the state\/performance information within state\/performance information area .","Any changes initiated by the user within window  may then be sent back to graphics device  as requested modifications. Graphics device  may then process these modifications, and provide updated instructions and\/or information which may then be displayed within graphics instructions area  and\/or state\/performance information area . The updated instructions and\/or information may also be used to display a modified version of 3D graphics image  within display area .","In one aspect, the state and\/or performance information that may be displayed within area  may be analyzed by the computing device that includes display device  (such as application computing device  shown in ) to identify potential bottlenecks during execution of the graphics instructions on graphics device . Ultimately, a user, such as an application developer, may wish to view the information presented in window  during a debugging process to optimize the execution of graphics instructions on graphics device . As described previously, bottlenecks may be introduced anywhere within the graphics processing pipeline in graphics device , and it may be difficult for an application developer to isolate such bottlenecks for performance optimization. Through analysis of state and\/or performance information, potential bottlenecks and possible workarounds can be displayed in window , such as within one or more sub-windows or pop-up windows, or within area  of window .","In one aspect, window  may display a report on the bottlenecks encountered in the call-stream of the graphics instructions received from graphics device , and may also display possible workarounds. In some cases, these possible workarounds may be presented as \u201cwhat-if\u201d scenarios to the user. For example, rendering a non-optimized triangle-list in a call-stream may be presented as one possible scenario, while pre-processing that list through a triangle-strip optimization framework may be presented as a second possible scenario. The user may select any of these possible workaround scenarios as requested modifications, and the requested modifications are then transmitted back to graphics device , where the performance may be measured. Graphics device  then sends updated instructions\/information, which may be presented within graphics instruction area  and\/or state\/performance information area . The user can then view the results, and compare results for various different potential workarounds to identify an optimum solution. The user can use this process to quickly identify a series of steps that can be taken in order to remove bottlenecks from their application.","The user may iteratively continue to make adjustments within window  for purposes of experimentation, or trial\/error debugging. The user may experiment with various different forms or combinations of graphics instructions and state\/performance information to identify changes in the images or scenes that are displayed within display area . The user can use the simulation environment provided by the contents of window  to interactively view and modify the graphics instructions, which may be part of a call-stream, and states provided by graphics device  without having to recompile source code and re-execute the compiled code on graphics device .","In some cases, the user may manipulate one or more of buttons A-N to manipulate a graphical navigation controller, such as graphical camera, to modify a perspective view of graphics image . Such manipulation may be captured as requested modifications that are then sent back to graphics device . The updated instructions\/information provided by graphics device  are then used to modify the perspective view of graphics image .","In some cases, various texture and\/or state information may be provided in area  of window  as modifiable entities. In addition, a user may even select, for example, a pixel of graphics image  within display area , such that one or more corresponding instructions within graphics instruction area  are identified. In this fashion, a user can effectively drill backwards to a rendering instruction or call that was used to render or create that pixel or other portions of graphics image . Because graphics device  may create image  in window  exactly as it is presented on graphics device , the user is able to quickly isolate issues in their application (which may be based on the various graphics instructions displayed in graphics instructions area ), and modify any states within state\/performance area  to prototype new effects.",{"@attributes":{"id":"p-0122","num":"0123"},"figref":"FIG. 10","b":["200","201","220","220"]},"For example, within graphics instructions area , various graphics instructions  are shown. Graphics instructions  may be a subset of graphics instructions that are provided by graphics device . For example, if graphics device  is part of graphics device , graphics instructions  may be a subset of graphics instructions . In some cases, mapping information (such as mapping information  shown in  or mapping information  shown in ) may be used to map incoming instructions received from graphics device  to a visual representation of these instructions, materialized as instructions  that are displayed within graphics instructions area . For example, if the received instructions are in binary form, instructions  may comprise API instructions that were used to generate the instructions in binary form.","As is shown in the example of , graphics instructions  include both high-level instructions and low-level instructions. A user, such as an application developer, may use scrollbar  to view the full-set of instructions . Certain high-level instructions may include one or more low-level instructions, such as lower-level API instructions. The application developer may, in some cases, select (e.g., such as by clicking) on a particular high-level instruction in order to view any low-level instructions that are part of, or executed by, the associated high-level instruction. As described previously, received graphics instructions, such as instructions , are used to generate the representation of graphics image , which comprises graphics image  shown in display area  of window .","Various selection buttons are shown below state\/performance information area  in . These selection buttons include a textures button , an override button , and a metrics button . In the example of , the application developer has selected the metrics button . Upon selection of this button, various metrics options may be displayed. For example, one or more metric buttons A-N may be displayed above state\/performance area . Each metric button A-N may be associated with a particular metric. In some cases, one or more of these metrics may be predefined or preconfigured metric types and, in some cases, the application developer may select or customize one or more of the metrics. Example metrics may include, for example, any one or more of the following: frames per second, % busy (for one or more processors), bus busy, memory busy, vertex busy, vertices per second, triangles per second, pixel clocks per second, fragments per second, etc. The application developer may select any of metric buttons A-N to view additional details regarding the selected metrics.","For example, if metric button A is associated with the number of frames per second, the application developer may select metric button A to view additional details on the number of frames per second (related to performance) for graphics image , or select portions of graphics image . The developer may, in some cases, select metric button A, or drag metric button A into state\/performance information area . The detailed information on the number of frames per second may be displayed within state\/performance information area . The developer also may drag metric button A into display area , or select a portion of graphics image  for application of metric button A. For example, the developer may select a portion of graphics image  after selecting metric button A, and then detailed information on the number of frames per second for that selected portion may be displayed within state\/performance information area . In such fashion, the developer may view performance data for any number of different metric types based upon selection of one or more of metric buttons A-N, and even possible selection of graphics image  (or a portion thereof).","In one aspect, metric data that may be displayed within window  may be provided by a graphics driver (e.g., graphics driver  shown in ) of graphics device . This graphics driver may implement a hardware counter module (e.g., hardware counter module  of ) and\/or a processor usage module (e.g., processor usage module  of ) to provide various data that may then be displayed as metric data within window .","The developer may, in some cases, also select textures button . Upon selection, various forms of texture information related to graphics image  may be displayed by graphics device . For example, texture information may be displayed within window , such as within state\/performance information area . In some cases, the texture information may be displayed within an additional (e.g., pop-up) window (not shown). The developer may view the displayed texture information, but may also, in some cases, modify the texture information. In these cases, any modifications to the texture information may be propagated back to graphics device  as requested modifications. Upon receipt of updated instructions\/information from graphics device , changes to graphics images  may be displayed within display area .  includes certain texture information that may be displayed upon selection of textures button .","The developer may, in some cases, also select override button . After selection of override button , certain information, such as instruction and\/or state information, may be displayed (e.g., within window  or another window) which may be modified, or overridden, by the developer. Any modifications or overrides may be included within one or more requested modifications that are sent to graphics device . In one aspect, graphics device  may implement a graphics driver, such as graphics driver A (), to process any requested modifications. For example, graphics device  may use override module  to process such requested modifications that comprise one or more overrides.","In some cases, the developer may override one or more over graphics instructions  that are shown within graphics instructions area . In these cases, the developer may type or otherwise enter information within graphics instructions area  to modify or override one or more of graphics instructions . These modifications may then be sent to graphics device , which will provide updated instructions\/information to update the display of graphics image  within display area . The developer may change, for example, parameters, ordering, type, etc., of graphics instructions  to override one or more functions that are provided by instructions . In one aspect, mapping information  () or mapping information  () may be used to map, or convert, changes to graphics instructions  into corresponding instructions of another format (e.g., binary instructions) that may then be provided to graphics device .","In some cases, the developer may also select override button  to override one or more functions associated with the processing pipeline that is implemented by graphics device .  shows an example of an override screen that may be displayed to the developer upon selection of override button .","Window  further includes selection buttons  and . Selection button  is a statistics button, and selection button  is a navigation button. The developer may select statistics button  to view statistical information associated with the display of graphics image . This statistical information may comprise one or more graphs, tables, or other forms of statistical information.  provides an example of certain statistical and texture information that may be displayed upon user selection of statistics button . The developer may view statistical information to obtain a better understanding of various performance or other related issues associated with the display of graphics image .","The developer may select navigation button  to navigate within display area , and even possibly to change a perspective view of graphics image  within display area . For example, upon selection of navigation button , a 3D graphical camera or navigation controller may be displayed. The developer may interact with the controller to navigate to any area within display area . The developer may also use the controller to change a perspective view of graphics image , such as by rotating graphics image  or zooming in\/out.","In one aspect, any developer-initiated changes through selection of navigation button  and interaction with a graphical navigation controller may be propagated back to graphics device  as requested modifications (e.g., part of requested modifications  shown in ). Updated instructions\/information then provided by graphics device  may then be used to update the display (e.g., perspective view) of graphics image . In addition, updated instructions may be displayed within graphics instructions area . Updated state\/performance information may also be displayed within state\/performance information area .","As a result, the developer may effectively and efficiently determine how alternate perspectives, orientations, views, etc., for rendering and displaying graphics image  may affect performance and state of graphics device . This may be very useful to the developer in optimizing the graphics instructions  that are used to create and render graphics image  in the simulation environment displayed on display device , and effectively of graphics image  that is displayed on graphics device . In one aspect, any changes in the position, perspective, orientation, etc., of graphics image , based upon developer-initiated selections and controls within window , may also be seen as changes for graphics image  that may be displayed on graphics device  during the testing process.","Through interaction with graphical window  within a graphical user interface, the application developer can attempt to identify performance issues and\/or bottlenecks during execution of graphics instructions , which are a visual representation of graphics instructions that are executed by graphics device  to create graphics image . A representation of graphics image  (i.e., graphics image ) is displayed within display area  based upon graphics instructions  and state\/performance data received by graphics device . By viewing graphics instructions , graphics image , and the state\/performance information, as well as the effects that are based upon user-initiated modifications to one or more of these, an application developer can interactively and dynamically engage in a trial-and-error, or debugging, process to optimize the execution of instructions on graphics device , and to eliminate or mitigate any performance issues (e.g., bottlenecks) during instruction execution.",{"@attributes":{"id":"p-0137","num":"0138"},"figref":["FIG. 11","FIG. 10"],"b":["250","201","250","236","250","230"]},"Statistical\/texture information  shown in  includes a number of example statistical and\/or texture fields that each may have one or more values. For example, information  includes a value for a number of render calls (associated with graphics instructions ) that may be needed to render and display graphics image . Because data shown in window  is based upon a simulation of graphics device , the number of render calls may effectively indicate the number of calls that may be needed to render and display graphics image  on graphics device . A render call may be associated with one or more of graphics instructions , such as one or more high-level and\/or low-level instructions.","Statistical\/texture information  also includes values for average texture changes per render call and average state changes per render call. These values may provide the developer with information regarding the number of texture and\/or state changes, which may affect overall performance.","For a particular frame of image data in graphics image , statistical\/texture information  may include values for the number of vertices and number of triangles for the primitives that were rendered to create the frame of image data. In addition, values for the average triangles per render call and average vertices per render call are also displayed. These values may be helpful for the application developer in evaluating the efficiency of the render calls that are implemented by the graphics instructions.","Statistical\/texture information  also includes texture size information. As shown near the bottom of , information  may provide values for one or more texture sizes (e.g., 64\u00d764, 64\u00d7128, 128\u00d7128, 256\u00d7256), indicating the number of each texture size for graphics image .","In addition, statistical\/texture information  also includes various values related to rendering performance and efficiency. For example, information  includes a value for the percent of optimized textures for graphics image . In some cases, the computing device that includes display device  (e.g., application computing device ) may compute this value based upon the graphics instructions and\/or state\/performance information that is received from graphics device . The application developer may typically want this percent value to be as high as possible. If it is lower than desired, the developer may manipulate or change graphics instructions, state information, performance information, or other parameters within window  to provide one or more requested modifications to graphics device . Upon receipt of updated instructions\/information from graphics device , an updated value may be displayed for the percentage of optimized textures. The developer may continue with this process, such as during a debugging or trial-and-error session, to optimize the textures within the simulation environment provided in window . The developer may be able to do so in an effective and efficient fashion, without necessarily having to re-compile any code\/instructions.","Statistical\/texture information  further includes values for the percentages of indexed and stripped vertices. These values may indicate a percentage of optimized triangles for the rendering and display or graphics image . The application developer may typically want the percent values of indexed and stripped vertices to be as high as possible. If they are lower than desired, the developer may manipulate or change graphics instructions, state information, performance information, or other parameters within window  to provide one or more requested modifications to graphics device . Upon receipt of updated instructions\/information from graphics device , updated values may be displayed for these percentage values. The developer may continue with this process to obtain an optimized number of triangles without having to re-compile any code\/instructions or engage in time-consuming or tedious debugging operations on graphics device .",{"@attributes":{"id":"p-0144","num":"0145"},"figref":["FIG. 12","FIG. 10"],"b":["260","201","260","260","200","200"]},"In some cases, override screen  may be displayed upon user selection of override button . Override screen  may be displayed as part of screen , or may be displayed as a separate window (e.g., pop-up window). Override screen  shows a visual representation of the graphics processing pipeline that may be implemented by graphics device . In one aspect, graphics device  may comprise graphics device  shown in , in which case it may include a control processor, a vertex processor, a graphics processor, and a display processor. As a result, the visual representation of the graphics processing pipeline shown in override screen  may include a control processor icon , a vertex processor icon , a graphics processor icon , and a display processor icon .","Each icon , , , and  is associated with a corresponding processor within graphics device . These icons may comprise graphical, textual, or other forms of icons. The application developer may select one or more of icons , , , or , such as by clicking on an icon within override screen . Upon selecting an icon, such as graphics processor icon , override screen  displays a corresponding menu , such as a drop-down menu, associated with icon .","In the example of , menu  includes four selectable options: option  (to disable alpha\/transparency operations), option  (to disable blending operations), option  (to disable Z-reject operations), and option  (to disable depth testing operations). Each of the operations associated with options , , , and  correspond to operations that may be performed by a graphics processor within graphics device .",{"@attributes":{"id":"p-0148","num":"0149"},"figref":["FIG. 12","FIG. 5","FIG. 1"],"b":["270","270","200","200","18","200","120","120","12"]},"Similarly, the application programmer may select option  to disable blending operations on the graphics processor. The developer may select option  to disable Z-reject operations. The developer may select option  to disable operations related to depth testing within the graphics processor.","In the example of , the developer may override one or more functions associated with the graphics processor of graphics device , such as by disabling one or more operations that may have been previously enabled. In some cases, the developer may use another menu, similar to menu , to re-enable any operations that were previously disabled, such as alpha, blending, Z-reject, and\/or depth testing operations.","Thus, the developer may continuously and iteratively override, or change, various functions and operations for graphics processor, and then determine how such changes affect performance. For example, the developer may disable alpha operations by selecting menu option , and then view updated state\/performance information that is provided by graphics device  upon disabling of such operations to determine if any prior performance issues, such as those related to the graphics processor of graphics device , have been resolved or mitigated. The developer may also review statistical information, such as the type of example information shown in , to assess changes or possible improvements in performance based upon the disabling of alpha operations. In addition, an updated version of graphics image  and updated instructions  may be displayed in window  () upon disabling of alpha operations.","Of course, in other scenarios, the application developer may disable or enable other functions that are associated with a graphics processor. In addition, the developer may disable or enable functions that are associated with other processors in graphics device , such as a control processor, vertex processor, and\/or display processor. For example, the developer may select control processor icon  to view a menu similar to menu , which may include one or more selectable options to disable or enable one or more functions associated with the control processor (e.g., control processor  shown in ). Any changes to these functions may be provided as one or more requested modifications that are sent to graphics device  for processing, such as by override module . Updated instructions and\/or other information, such as state and\/or performance information, may then be provided by graphics device  to update the information shown in window , such that the developer may determine whether any performance issues or bottlenecks related to the control processor have been resolved or otherwise mitigated.",{"@attributes":{"id":"p-0153","num":"0154"},"figref":["FIG. 13","FIG. 10","FIG. 10","FIG. 13"],"b":["201","280","210","211","210","211","238","280","238"]},{"@attributes":{"id":"p-0154","num":"0155"},"figref":["FIG. 13","FIG. 12"]},"Each override (Override A, Override B, and Override C) may have corresponding parameters or options that may be selected, or otherwise configured, by the user. For example, Override A has override parameters A, Override B has override parameters B, and Override C has override parameters C. The user may customize each of the overrides by modifying the corresponding parameters. For example, if Override A corresponds to an override to disable blending, the user may select or change override parameters A to modify or customize the override functionality for disabling blending. Override parameters A may also include an identification of one or more processors. For example, if the user wishes to disable blending on a graphics processor, override parameters A may include an identification of the graphics processor.","Any overrides requested by the user may be included within requested modifications  that are sent back to the graphics device. The graphics device may then process the requested modifications , as described previously, and provide updated instructions\/information . The updated instructions\/information  may be used to update the display of graphics image  within display area .",{"@attributes":{"id":"p-0157","num":"0158"},"figref":["FIG. 14","FIG. 10"],"b":["201","290","210","211","210","211"]},"For example, in , the user may select any of textures , , and\/or . In , it is assumed that the user has selected texture , as shown. Any number of different textures may be displayed and selected within window , and the ones displayed in  are shown for purposes of illustration only.","Upon user selection of texture , an enlarged representation of the selected texture  is shown in texture area . The user may then apply texture  to one or more portions of graphics image . In one scenario, the user may drag the texture  from texture area  into display area  and apply the texture to the desired portion(s) of graphics image . In the example of , the user has applied texture  to the indicated portion of graphics image . In this fashion, the user may select any of one or more textures (e.g., textures , , ) and apply such textures to graphics image , and also view the corresponding changes to graphics image  within display area .","Any textures selected or applied by the user may be included within requested modifications  that are sent back to the graphics device. The graphics device may then process the requested modifications , as described previously, and provide updated instructions\/information . The updated instructions\/information  may be used to update the display of graphics image  within display area .",{"@attributes":{"id":"p-0161","num":"0162"},"figref":["FIG. 15","FIG. 10","FIG. 15"],"b":["201","302","304","304"]},"By continuously monitoring performance graph , a user may be able to assess the effectiveness of any changes made or sent back to the graphics device within requested modifications . For example, the user may update graphics instructions, update state\/performance information, modify a perspective view of a graphics image, initiate one or more overrides, change textures, or make other modifications in an effort to resolve or otherwise mitigate any observed performance issues or bottlenecks during execution of a graphics application. Certain changes may improve performance by decreasing the percent usage (or processor utilization), while other changes may increase processor utilization. In order to help identify optimal or desirable solutions or changes to the graphics application, such as those that result in lower or decreased processor utilization, the user may continuously monitor performance graph  to ascertain the effects of any implemented changes, such as those included within requested modifications , over time.","The techniques described in this disclosure may be implemented within a general purpose microprocessor, digital signal processor (DSP), application specific integrated circuit (ASIC), field programmable gate array (FPGA), or other equivalent logic devices. Accordingly, the terms \u201cprocessor\u201d or \u201ccontroller,\u201d as used herein, may refer to any one or more of the foregoing structures or any other structure suitable for implementation of the techniques described herein.","The various components illustrated herein may be realized by any suitable combination of hardware, software, firmware, or any combination thereof. In the figures, various components are depicted as separate units or modules. However, all or several of the various components described with reference to these figures may be integrated into combined units or modules within common hardware and\/or software. Accordingly, the representation of features as components, units or modules is intended to highlight particular functional features for ease of illustration, and does not necessarily require realization of such features by separate hardware or software components. In some cases, various units may be implemented as programmable processes performed by one or more processors.","Any features described herein as modules, devices, or components, including graphics device  and\/or its constituent components, may be implemented together in an integrated logic device or separately as discrete but interoperable logic devices. In various aspects, such components may be formed at least in part as one or more integrated circuit devices, which may be referred to collectively as an integrated circuit device, such as an integrated circuit chip or chipset. Such circuitry may be provided in a single integrated circuit chip device or in multiple, interoperable integrated circuit chip devices, and may be used in any of a variety of image, display, audio, or other multi-media applications and devices. In some aspects, for example, such components may form part of a mobile device, such as a wireless communication device handset.","If implemented in software, the techniques may be realized at least in part by a computer-readable data storage medium comprising code with instructions that, when executed by one or more processors, performs one or more of the methods described above. The computer-readable medium may form part of a computer program product, which may include packaging materials. The computer-readable medium may comprise random access memory (RAM) such as synchronous dynamic random access memory (SDRAM), read-only memory (ROM), non-volatile random access memory (NVRAM), electrically erasable programmable read-only memory (EEPROM), embedded dynamic random access memory (eDRAM), static random access memory (SRAM), flash memory, magnetic or optical data storage media.","The techniques additionally, or alternatively, may be realized at least in part by a computer-readable communication medium that carries or communicates code in the form of instructions or data structures and that can be accessed, read, and\/or executed by one or more processors. Any connection may be properly termed a computer-readable medium. For example, if the software is transmitted from a website, server, or other remote source using a coaxial cable, fiber optic cable, twisted pair, digital subscriber line (DSL), or wireless technologies such as infrared, radio, and microwave, then the coaxial cable, fiber optic cable, twisted pair, DSL, or wireless technologies such as infrared, radio, and microwave are included in the definition of medium. Combinations of the above should also be included within the scope of computer-readable media. Any software that is utilized may be executed by one or more processors, such as one or more DSP's, general purpose microprocessors, ASIC's, FPGA's, or other equivalent integrated or discrete logic circuitry.","Various aspects have been described in this disclosure. These and other aspects are within the scope of the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0017"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0018"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0019"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0019","num":"0020"},"figref":["FIG. 6","FIG. 1","FIG. 2"]},{"@attributes":{"id":"p-0020","num":"0021"},"figref":["FIG. 7","FIG. 1","FIG. 2"]},{"@attributes":{"id":"p-0021","num":"0022"},"figref":["FIG. 8","FIG. 1","FIG. 2"]},{"@attributes":{"id":"p-0022","num":"0023"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0023","num":"0024"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0025"},"figref":["FIG. 11","FIG. 10"]},{"@attributes":{"id":"p-0025","num":"0026"},"figref":["FIG. 12","FIG. 10"]},{"@attributes":{"id":"p-0026","num":"0027"},"figref":["FIG. 13","FIG. 10"]},{"@attributes":{"id":"p-0027","num":"0028"},"figref":["FIG. 14","FIG. 10"]},{"@attributes":{"id":"p-0028","num":"0029"},"figref":["FIG. 15","FIG. 10"]}]},"DETDESC":[{},{}]}
