---
title: Dynamic server graphics
abstract: A method of dynamically generating a graphic includes receiving, at a vector graphics engine loaded on a server system, graphic template input; receiving, at the vector graphics engine loaded on the server system, data template input; and generating, at the server system, code in a standard format representative of a vector graphic. The generating includes identifying a special tag associated with the vector graphics engine, converting code associated with this tag from a first format associated with the vector graphics engine to a second standardized format, and binding data content based on the received data template input to graphic content based on the received graphic template input.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430195&OS=09430195&RS=09430195
owner: EMC Corporation
number: 09430195
owner_city: Hopkinton
owner_country: US
publication_date: 20110310
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","COPYRIGHT STATEMENT","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present application is a U.S. nonprovisional patent application of, and claims priority under 35 U.S.C. \u00a7119(e) to, U.S. provisional patent application Ser. No. 61\/342,651, filed Apr. 16, 2010, which provisional patent application is hereby incorporated by reference herein.","All of the material in this patent document is subject to copyright protection under the copyright laws of the United States and other countries. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in official governmental records but, otherwise, all other copyright rights whatsoever are reserved.","The present invention generally relates to graphics generation, such as, for example, techniques for dynamically serving vector graphics that include characteristics drawn from dynamic data.","The process of dynamically generating HTML pages has been common industry practice since 1997. Examples of this page server technology are Oracle\u2122's Java\u2122 Server Page (JSP\u2122) technology and Microsoft\u2122's Active Server Page (ASP\u2122) technology. These technologies allow a programmer to write code that is processed by a server engine to control the generation of HTML and CSS. This code is generally referred to as server-side code, is embedded within traditional HTML and CSS page markup, may draw on external resources such as a database, and is in effect a web template that is executed upon request of a client browser. Each page server technology has its own programming constructs which amount to a proprietary standard that describe engine instructions; however, the resulting output is based on generating HTML and CSS standard compliant output as defined by the various World Wide Web Consortium (W3C) standard committees.","Although the generation of these web templates allows page authors to generate dynamic presentations of data with relative ease, these technologies are oriented toward the formatting of text pages with graphics presentation limited to referencing images, not the dynamic creation of graphics themselves.","There are many application programming interfaces (APIs) that support the creation of graphics programmatically. Oracle's Java2D\u2122 and Microsoft's Graphic Device Interface (GDI\u2122) are two examples. These technologies support the programmatic creation of vector graphics. However, these interfaces are very granular and difficult to use (e.g., they may require programmatic instructions such as draw a line from point x1,y1 to x2,y2). This limits their industry use as foundational components that are leveraged by various drawing tools; they are not frequently used directly to develop dynamic graphic generation solutions due to the time intensive nature of such efforts and the related expense.","Various abstractions have been developed to provide a more manageable interface for the development, storage, and presentation of vector graphics. Most of these technologies are rooted in eXtensible Markup Language (XML). Examples of such technology include the Web Hypertext Application Technology Working Group's (WHATWG) Scalar Vector Graphics (SVG) and the proposed W3C Vector Markup Language (VML). SVG is the vector graphic analog to what HTML is to web pages. SVG uses XML tags to give a high-level description of instructions that can be interpreted by a SVG Interpreter to render a vector graphic image via low-level APIs, such as Java2D or GDI. SVG based images are generally created via SVG-based drawing tools, much like how HTML pages are created via HTML editors. The user of such tools is usually unaware of the underlying data's representation in XML. While the use of standard XML programming techniques to programmatically manipulate the underlying data structures of a vector graphic described via XML (e.g., via SVG) is possible, it is also a time intensive and costly process to develop solutions with.","To facilitate the editing of HTML to introduce server-side code, there is a design paradigm that allows the implementer to transition between views of different visualizations. These views include visualizations of raw HTML tags with server-side code, a design view that allows manipulation of underlying HTML, and a preview of a generated HTML visualization. This design paradigm facilitates multiple perspectives of the pieces that render the final output result. In vector graphic development tools, visualization is limited to drawing tools and static output. Adding programmatic manipulation of underlying XML is a separate task that happens within a coding tool. An integrated approach to manipulating vector graphics, such as those used in HTML development paradigms, does not exist, nor do traditional approaches to the creation of vector graphics easily fit this development model.","Unlike HTML, which has complex presentation layout constructs such as Tables or Lists, XML vector languages are limited to basic primitives such as Rectangles, Ellipses, or Text descriptors. The absence of these layout constructs further compounds the difficulty of programmatically creating complex vector graphics.","Adobe's Flex\u2122, Flash\u2122, and Shockwave\u2122 products do provide the means to programmatically manipulate vector graphics, but with a focus on vector animation. The mapping of data directly into vector graphic presentation can be accomplished, but with the use of proprietary low-level APIs and a scripting language. Similar to the XML vector languages, Adobe's proprietary approach is limited to basic drawing primitives with the addition of the integrated programming interface. The creation of the vector image itself is regulated to the use of drawing canvas such that each element must be drawn by hand or via low-level API calls, which is a time consuming process that requires a rare mix of graphical and programming talent, both of which can be prohibitively expensive for many implementations. These solutions do not supply complex compound primitives or high-level layout constructs needed to facilitate the rapid development of programmatic generation of vector graphics without having to use low-level API calls.","A need exists for improvement in dynamic graphic creation. This, and other needs, are addressed by one or more aspects of the present invention.","The present invention includes many aspects and features. Moreover, while many aspects and features relate to, and are described in, the context of dynamic vector graphic creation, the present invention is not limited to use only in this context, as will become apparent from the following summaries and detailed descriptions of aspects, features, and one or more embodiments of the present invention.","Accordingly, one aspect of the present invention relates to a method of rendering a dynamic graphic utilizing a vector graphics engine. The method includes receiving, at a vector graphics engine loaded on a computing device, a graphic template; receiving, at the vector graphics engine loaded on the computing device, a data template; binding, in a data binding process executed by a processor of the computing device, data identified via the data template to vector graphic content identified by the graphic template; and generating, by the processor of the computing device, vector graphic output that conforms to a particular format, the vector graphic output including the bound data identified via the data template in vector graphic form in accordance with the graphic template.","In a feature of this aspect, the particular format that the vector graphic output conforms to is the scalable vector graphic (SVG) standard.","In a feature of this aspect, the graphic template comprises a plurality of other graphic templates.","In a feature of this aspect, the graphic template comprises a plurality of other graphic templates associated together in an embedded hierarchy.","In a feature of this aspect, the method includes a step of parsing, by the vector graphics engine loaded on the computing device, source for one or more tags existing in a special namespace. In at least some implementations, the method includes a step of matching such one or more tags to one or more complex compound primitives programmatically enabled within the vector graphics engine loaded on the computing device.","In a feature of this aspect, the vector graphics engine loaded on the computing device is configured to convert code representative of high level constructs into the particular format. In at least some implementations, the high level constructs include an array construct, grid construct, list construct, and\/or stack construct.","In a feature of this aspect, the vector graphics engine is configured to pass through markup standard to the particular format.","In a feature of this aspect, the computing device is connected to a network. In at least some implementations, the vector graphics engine loaded on the computing device is configured to process received data asynchronously. In at least some implementations, the vector graphics engine loaded on the computing device is configured to process received data synchronously.","Another aspect of the present invention relates to a method of dynamically generating a graphic. The method includes receiving, at a vector graphics engine loaded on a server system, graphic template input; receiving, at the vector graphics engine loaded on the server system, data template input; and generating, at the server system, code in a standard format representative of a vector graphic. The generating includes identifying a special tag associated with the vector graphics engine, converting code associated with this tag from a first format associated with the vector graphics engine to a second standardized format, and binding data content based on the received data template input to graphic content based on the received graphic template input.","Another aspect of the present invention relates to a method for a tool for facilitating creation of dynamic graphics. The method includes receiving, at a computing device, information regarding a connection to a data source input by a user via a user interface utilizing one or more input devices; receiving, at the computing device, a query input by a user via a user interface utilizing one or more input devices; receiving, at the computing device, an indication of an executable query input by a user via a user interface utilizing one or more input devices, the indication including reference to the inputted information regarding a connection to a data source and reference to the inputted query; receiving, at the computing device, an indication to place a graphic component on a canvas, the indication to place a graphic component on a canvas being input by a user via a user interface utilizing one or more input devices; receiving, at the computing device, an indication to associate data obtainable via the executable query with the graphic component, the indication to associate such data being input by a user via a user interface utilizing one or more input devices; displaying, utilizing an electronic display coupled to the computing device, a user interface comprising a preview of the graphic component including data obtained via the executable query; and generating, at the computing device, code configured to allow for the later display of the graphic component including data dynamically obtained from the data source.","Another aspect of the present invention relates to a computer readable medium having software loaded thereon comprising instructions for executing one or more methods disclosed herein.","In addition to the aforementioned aspects and features of the present invention, it should be noted that the present invention further encompasses the various possible combinations and subcombinations of such aspects and features. Thus, for example, any aspect may be combined with an aforementioned feature in accordance with the present invention without requiring any other aspect or feature.","As a preliminary matter, it will readily be understood by one having ordinary skill in the relevant art (\u201cOrdinary Artisan\u201d) that the present invention has broad utility and application. Furthermore, any embodiment discussed and identified as being \u201cpreferred\u201d is considered to be part of a best mode contemplated for carrying out the present invention. Other embodiments also may be discussed for additional illustrative purposes in providing a full and enabling disclosure of the present invention. As should be understood, any embodiment may incorporate only one or a plurality of the above-disclosed aspects of the invention and may further incorporate only one or a plurality of the above-disclosed features. Moreover, many embodiments, such as adaptations, variations, modifications, and equivalent arrangements, will be implicitly disclosed by the embodiments described herein and fall within the scope of the present invention.","Accordingly, while the present invention is described herein in detail in relation to one or more embodiments, it is to be understood that this disclosure is illustrative and exemplary of the present invention, and is made merely for the purposes of providing a full and enabling disclosure of the present invention. The detailed disclosure herein of one or more embodiments is not intended, nor is to be construed, to limit the scope of patent protection afforded the present invention, which scope is to be defined by the claims and the equivalents thereof. It is not intended that the scope of patent protection afforded the present invention be defined by reading into any claim a limitation found herein that does not explicitly appear in the claim itself.","Thus, for example, any sequence(s) and\/or temporal order of steps of various processes or methods that are described herein are illustrative and not restrictive. Accordingly, it should be understood that, although steps of various processes or methods may be shown and described as being in a sequence or temporal order, the steps of any such processes or methods are not limited to being carried out in any particular sequence or order, absent an indication otherwise. Indeed, the steps in such processes or methods generally may be carried out in various different sequences and orders while still falling within the scope of the present invention. Accordingly, it is intended that the scope of patent protection afforded the present invention is to be defined by the appended claims rather than the description set forth herein.","Additionally, it is important to note that each term used herein refers to that which the Ordinary Artisan would understand such term to mean based on the contextual use of such term herein. To the extent that the meaning of a term used herein\u2014as understood by the Ordinary Artisan based on the contextual use of such term\u2014differs in any way from any particular dictionary definition of such term, it is intended that the meaning of the term as understood by the Ordinary Artisan should prevail.","Regarding applicability of 35 U.S.C. \u00a7112, \u00b66, no claim element is intended to be read in accordance with this statutory provision unless the explicit phrase \u201cmeans for\u201d or \u201cstep for\u201d is actually used in such claim element, whereupon this statutory provision is intended to apply in the interpretation of such claim element.","Furthermore, it is important to note that, as used herein, \u201ca\u201d and \u201can\u201d each generally denotes \u201cat least one,\u201d but does not exclude a plurality unless the contextual use dictates otherwise. Thus, reference to \u201ca picnic basket having an apple\u201d describes \u201ca picnic basket having at least one apple\u201d as well as \u201ca picnic basket having apples.\u201d In contrast, reference to \u201ca picnic basket having a single apple\u201d describes \u201ca picnic basket having only one apple.\u201d","When used herein to join a list of items, \u201cor\u201d denotes \u201cat least one of the items,\u201d but does not exclude a plurality of items of the list. Thus, reference to \u201ca picnic basket having cheese or crackers\u201d describes \u201ca picnic basket having cheese without crackers\u201d, \u201ca picnic basket having crackers without cheese\u201d, and \u201ca picnic basket having both cheese and crackers.\u201d Finally, when used herein to join a list of items, \u201cand\u201d denotes \u201call of the items of the list.\u201d Thus, reference to \u201ca picnic basket having cheese and crackers\u201d describes \u201ca picnic basket having cheese, wherein the picnic basket further has crackers,\u201d as well as describes \u201ca picnic basket having crackers, wherein the picnic basket further has cheese.\u201d","The use of relative terms, such as \u201csubstantially\u201d, \u201cgenerally\u201d, \u201capproximately\u201d, and the like, may be utilized herein to represent an inherent degree of uncertainty that may be attributed to a quantitative comparison, value, measurement, or other representation. These terms also may be utilized herein to represent the degree by which a quantitative representation may vary from a stated reference without resulting in a change in the basic function of the subject matter at issue.","Notably, any references herein to advantages, benefits, unexpected results, or operability are not intended as an affirmation of previous reduction to practice or testing. Likewise, unless stated otherwise, use of verbs in the past tense (or present perfect or preterit usage) is not intended to indicate or imply previous reduction to practice or testing.","Referring now to the drawings, one or more preferred embodiments of the present invention are next described. The following description of one or more preferred embodiments is merely exemplary in nature and is in no way intended to limit the invention, its implementations, or uses.","One or more aspects of the present invention relate to a vector graphic engine that is able to consume graphic templates as guides to generate dynamically assembled vector graphics that incorporate complex compound primitives, high-level layout constructs, and data discovered\/applied during the generation process via programmatic rules defined by an implementer.","In some preferred implementations, when a vector graphic engine request is invoked, a request object specifying a graphic template and a data template are passed into the vector graphic engine for processing according to embedded organizing controls and programmatic instructions. The vector graphic engine response is a well formed XML response, i.e. an XML response that conforms to a defined XML schema, compliant with the implemented vector graphic standard, such as, for example, the scalable vector graphic (SVG) standard.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 1","b":["101","101","102","103"]},"The vector graphics engine  includes a graphic template parser . When a graphic template  input is received at the vector graphics engine , it is fed into the graphic template parser  as input. The graphics template parser  consumes the input, processes any included file references, converts any complex compound primitives into one or more corresponding properly formatted standard XML vector graphic (e.g. SVG) counterparts, identifies various service-side code constructs to relate with run-time code objects, executes any pre-binding run-time code objects, and readies all binding variables for processing in a next stage of processing, namely a data binding process .","The vector graphics engine  further includes a data template parser . When a data template  input is received at the vector graphics engine , it is fed into the data template parser  as input. The data template parser  consumes the input; identifies various data sources, queries, and transformations from the content; reads any necessary data from specified data sources ; and readies retrieved data for processing in the next stage of processing, namely the data binding process .","The data binding process  combines execute service-side code instructions to bind various elements of data to the vector graphic XML (e.g. SVG) content of the graphic template  with the data identified from the data template . This data bind process  produces an interim result that is fed into a layout and scaling process , which executes instructions as defined by the high-level layout constructs, including associated scaling, and executes any post-binding run-time code objects. The resulting output is a generated vector graphic  output that conforms to the preferred XML vector graphic specification (e.g. SVG).","As depicted in , a graphic template  may include another graphic template  or other XML vector graphic . A graphic template can thus be characterized as being embeddable within another graphic template. A single graphic template might be reused in a plurality of other graphic templates, thus graphic templates can be characterized as being reusable. Accordingly, the use of graphic templates allows for the creation of reusable and embeddable hierarchies. A graphic template, or image, included within a graphic template may be included with or without a scale transformation depending on the implementer's requirements.","As noted above, during the graphic template parser  execution, conversion of complex compound primitives into properly formatted standard XML vector graphic tags (e.g. SVG) takes place.  depicts an example of conversion of a formatted text compound primitive into standard SVG objects.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 3","b":["105","101"]},"This source is converted into SVG output, as illustrated, although in at least some other implementations the source may be converted into other output. The SVG output preferably uses only standard SVG tags, with all server-side tags preferably being, already having been, or later being, converted and removed from the output. This allows for sophisticated output formatting through the use of compact custom tags that expand to the appropriate standard SVG tags.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 3"},"Notably, this formatted text example is merely exemplary in nature, and is representative of one of many possible complex compound primitives. Each complex compound primitive may be implemented via a code behind class in the vector graphics engine  and support inheritance such that additional layouts can be created and\/or extended as needed.","Further, as noted above, during the layout and scaling process  execution, the conversion of high-level layout constructs into properly formatted standard XML vector graphic tags (e.g. SVG) takes place.  depict, respectively, the conversion of array, grid, list, and stack constructs into standard SVG objects. In the illustrated implementations, the array and grid constructs include evenly distributed same size cells, while the stack construct includes evenly distributed variable size cells.","Each figure includes exemplary DSG source utilizing, respectively, an array, grid, list, or stack construct. In each case, the source is similarly parsed and associated with a matching high-level layout construct as described above with respect to the conversion of a compound primitive into standard SVG objects.","Such source is converted into SVG output, as illustrated. The SVG output preferably uses only standard SVG tags, and the inner coordinate system of the cells preferably is, has been, or will be scaled and translated to map into the outer coordinate system. Preferably, all server-side tags are, have been, or will be converted and removed from the output. This allows for sophisticated output formatting through the use of compact custom tags that expand to the appropriate standard SVG tags.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIGS. 4-7"},"As with the formatted text example, the array, grid, list, and stack examples are merely exemplary in nature, and are representative of but a few of many possible high-level layout constructs. Each layout construct, or control, may be implemented via a code behind class in the vector graphics engine  and support inheritance such that additional layouts can be created and\/or extended as needed.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 8"},"The exemplary graphical template contains a stack layout construct and a formatted text complex compound primitive along with data binding variables (e.g., \u201c$var\u201d and \u201c$list\u201d). The data from the exemplary data source contains a list of items to be used during the data binding process  described above.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 9","FIG. 8"]},"As illustrated, the SVG output is fully expanded with the integrated content shown embedded within the SVG content. Further, the stack and formatted text objects have been converted to the appropriate SVG primitives and scaled appropriately to fit within the bounding constraints defined in the stack definition. The rendered visualization shows how the stack dynamically adjusted itself to fit the varying length of the text strings without an implementer needing to take any special actions.","Notably, in preferred implementations, the length of server-side code required to be written by an implementer is significantly smaller than the expanded SVG version. In at least some preferred implementations, this dramatically reduces the number of lines of source materials that need to be maintained, and may provide significant cost savings. Any changes to the stylization of one stack cell could affect the entire rendering, thus allowing stylistic changes to be implemented quickly. Preferably, the entire rendering process takes place without the implementer having to write any low-level API drawing methods (e.g. Window's GDI+ or Java 2D).","Preferably, the vector graphic engine  only operates on tags it has been programmatically enabled to process, therefore any standard markup in the graphical template  is automatically passed through; for SVG, this includes all standard tags including primitives, CSSs, standard includes, and client-side scripting. The native advanced capabilities of SVG to support CSSs, client-side scripting, etc. are preferably left to the sole purview of the implementer, although in at least some preferred implementations they may not be. In at least some preferred implementations, the vector graphic engine  is extendable to include concepts of caching, state, and smart navigation such as may be found on various application servers (e.g. ASP and JSP).","The vector graphic engine  can have a physical instantiation as a machine connected to a network. The transport technology is not specific to systems and processes described herein, and would, for example, support simple connection based protocols, such as IBM's Systems Network Architecture (SNA) or TCP\/IP socket protocol. Data sent to, or received from, the vector graphics engine can be processed asynchronously, through message queuing, such as via Java Message Service (JMS), or asynchronous Remote Procedure Calls (RPC). By inclusion of the graphical template and data source, the system would run without manual intervention.","These basic capabilities will allow the technology to render dynamic images, which reflect data values set at run-time, while enabling a configuration interface that facilitates rapid development by a developer having a graphically inclined skill set, without the need for a seasoned programmer.","In one or more preferred implementations, a vector graphic engine is configured to generate output in .svg, .pdf, .jpeg, and\/or .png format.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 10"},"The image engine further includes a data engine module, which is configured to take as input a data template in the form of an .xml component. The data engine module is further configured to read a database. Based on the input .xml component, and data from the database, the data engine module generates a .xml data component.","The imagine engine still further includes a velocity engine, which is responsible for data binding processing. The velocity engine processes the .vm component generated by the parsing and processing module, and, referencing the .xml data component generated by the data engine module, generates an unscaled .svg component. The image engine still yet further includes a scaling module which processes this .svg component and generates a final .svg component.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":["FIG. 11","FIG. 11"]},"Another .dsg component includes both the generated first .svg component and another .svg component which describes an ellipse filled with text. The .dsg component describes the relationship between the content described by each .svg component, specifically, that the content described by the first .svg component is to be located atop the content described by the second .svg component, as illustrated.","This second .dsg component is processed by an image engine which references an .xml component to generate a final .svg component, which describes three rectangles filled with text atop an ellipse filled with text, i.e. contains scalable vector graphic instructions for the creation of such an image.",{"@attributes":{"id":"p-0094","num":"0093"},"figref":["FIG. 12","FIG. 12"]},"In one or more preferred implementations, graphic templates provide a number of useful functions, such as, for example, the ability to organize traditional XML vector markup, to support late binding of code objects identified by custom XML tags, to incorporate high-level layout constructs to be converted into complex graphical representations made up of standard XML primitives, to organize server-side programmatic instructions to the vector graphic engine, and to designate appropriate data bindings from dynamically acquired data sources to XML graphic primitives (e.g. rectangle, ellipse, text, etc.). A graphic template can be characterized as a holistic and abstract guide that defines parameters and behaviors for how the graphics to be rendered, and also supplies programmatic instructions to the vector graphic engine (as illustrated in  hereinbelow).","Since a graphic template incorporates high-level layout constructs, in at least some preferred implementations, much of the low-level API implementation steps required in a traditional approach are eliminated. Exemplary high-level layout constructs include group layout controls, such as arrays, grids, and stacks, as well as complex compound primitives, such as text with primitive boundaries (e.g. text encapsulated by a rectangle), text lists, and complex formatted text (e.g. a word wrapped paragraph). Some exemplary behaviors of these high-level layout constructs have been described herein. Each high-level layout construct may provide complex, yet standardized behavior. For example, an array construct group can replicates a group of other graphic primitives in ordered evenly spaced cells, similar to how an HTML table is made up of cells with nested HTML primitives. However, the detailed behaviors of the high-level layout constructs in a graphic context are very different than traditional HTML layout concerns. For example, it is very typical for graphical objects to overlap for specific visual effects, whereas this is generally undesirable behavior for HTML pages. The high-level layout constructs have the added benefit of abstracting away the lower-level calls required to manipulate the underlying XML or the granular drawing APIs.","The vector graphic engine is preferably extensible, such that additional high-level layout constructs can be created as needed, and therefore it is preferably possible to define additional graphic behaviors and their implementations as needed.  illustrate a variety of possible implementations\u2014each is a unique extension of the vector graphic engine. The possibilities are limited only to the ability of the implementer to mathematically model the extensions.","Preferably, a vector graphic engine is able to adjust complicated scale factors as needed to adjust for layouts, eliminating concerns of complicated math on behalf of an implementer. High-level layout constructs may contain multiple primitives that are laid out in a repeated pattern (e.g., see the array construct illustrated in ). To fit the outer layout constraints imposed on the layout construct, the inner content's size must be scaled to fit within the available space. This reduces complexity in graphic templates by enabling an implementer to work in multiple scales simultaneously without concern for manual scale conversion as object size and placement are relative to other objects in the same bounded area.","The use of these high-level layout constructs allows for the creation, and use, of tools which allow a user to create and edit graphic templates with various views to simplify the programming task. These tools preferably include a visualization of raw XML graphic tags (e.g. SVG) with server-side code, a design view that allows manipulation of the underlying XML graphic tags, and a preview of the generated graphic visualization. In a preferred implementation, one of these tools generally resembles IBM ILOG JViews software, and\/or utilizes one or more ILOG libraries.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":["FIG. 13","FIG. 13"]},"The exemplary editor of  allows for the use of data from various data sources, such as, for example, MySQL, MSSQL, Data Access Layer POJO objects (e.g. to provide data access without providing direct access to obviate security issues), web services, or object databases.  illustrates a user interface that allows a user to define connections by selecting a database driver, a database location, or URL, and provide authentication credentials for the database. Each connection can be named for easy reference thereafter, and can be defined for use in an environment, for example a connection might be associated with use in a quality assurance environment.","The exemplary editor of  also allows a user to define queries.  illustrates a user interface of the editor which can be utilized to define a query and assign a query ID thereto. Multiple queries can be added via this interface, each including their own query ID for easy reference thereto. In an exemplary use scenario illustrated in , a user utilizes this interface to create a query and assign it a \u201cdq\u201d query ID.","Following definition of a connection and a query, a query can be executed on a connection to generate query output.  illustrates a user interface of the exemplary editor which can be utilized to identify a query ID and a connection ID. A query execution ID and query execution output ID can then be provided by a user in association with the identified query ID and connection ID.  illustrates how a user interface allows for a preview of execute query output for a particular query on a particular connection. Returning to the exemplary use scenario, a user can utilize this interface to identify the previously defined \u201cdq\u201d query, and a previously defined \u201cdesignStudio-test\u201d connection, assign this combination a \u201cdq1\u201d ID, and assign the output to a \u201cdq-out\u201d output ID.","In preferred implementations, a user interface for data binding allows not just for the definition of database connections and queries, but additionally allows for the use of filters, conditions, and expressions.","Additionally, predefined, or user configurable, operations can be performed on execute query output.  illustrates a user interface that allows a user to select an operation, and identify operation input and output IDs. For example, a query execution output ID can be utilized as an operation input ID, and an operation output ID can be identified by a user. Preferably, multiple operations can be identified and performed in a sequence indicated by a user.","Returning to the exemplary use scenario, a user selects an operation type from a drop down menu (in this case a \u201clist\u201d operation), identifies the \u201cdq-out\u201d ID as an input ID for the operation, and identifies \u201cdq1_out\u201d as an output ID for the operation. Optionally, the user might identify one or more parameters, although in this exemplary use scenario the user does not do so. In one or more preferred implementations, parameters can be bound to variables and can be used in generating dynamic graphics based on the values of such variables. For example, in some preferred implementations, the value of a variable might be utilized to select a color for a cell or column of a FxGrid component.","Preferably, the user interface is configured to display a preview for both before and after application of such operations.  illustrates a preview of generated code both prior to, and subsequent to, modification in accordance with a list operation.","The output from this list operation can then be utilized in the FxGrid DSG component of . The FxGrid component can be so configured via use of one of its properties, a variable property.  illustrates how the variable property can be associated with the output from this list operation via reference to the \u201cdq1_out\u201d output ID from the list operation (as illustrated, reference is specifically made to \u201cdq1_out\u201d as a variable by referencing \u201c$var in $dq1_out\u201d).","A user interface of the exemplary editor further allows for specification of various properties of the FxGrid component, including columns of the FxGrid component. Each column can be associated with dynamic data from the source identified by the variable property.  illustrates use of the interface to define two columns, an \u201cID\u201d column associated with data from a first column of the \u201cdq1_out\u201d source, and a \u201cNAME\u201d column with data from a second column of the \u201cdq1_out\u201d source. The user interface preferably allows for formatting of the FxGrid and for each column of the FxGrid to be set via properties.","In a preferred implementation, the editor includes a plurality of tabs providing various views of defined DSG components.  illustrates a first tab displaying the FxGrid component defined via the user interface of . In this view, the structure of the FxGrid component is visible, but no dynamic data is displayed. In contrast,  illustrates a second tab displaying a dynamic preview of the FxGrid component rendered with data from the \u201cdq1_out\u201d source.","Based on the user's actions in creating this FxGrid component, DSG source code for such component is generated.  illustrates DSG source code for this FxGrid component. This source code can be utilized by a vector graphics engine to generate dynamic vector graphics in general accordance with the description herein.  illustrates how code input, input from a data source, and a parameter map can be utilized by a dynamic server graphic engine to generate a server vector graphic, .pdf, or image output.","Just as the editor can be utilized to create a dynamic vector graphic comprising an FxGrid component, more complex graphics can be built comprising multiple components utilizing multiple data sources. In preferred implementations, such components might include a FText component for formatted text, a FxGrid component representing a fixed column grid, a DGrid component representing a dynamic column grid, a Stack component representing a stack of other components, a List component, an Array component that is similar to the FxGrid component but supports scaling, and chart components, which may support, for example, pie, radar, and bar charts.","At least some preferred implementations may additionally include a layout component which may be utilized to organize data and\/or multiple other components according to predefined layouts, such as, for example, a hierarchical layout, a grid layout, or a circular layout.  illustrates the same data displayed in three different layouts. Preferably, a layout can be selected by setting a layout type property, as illustrated in .","In one or more preferred implementations, control components are utilized which allow third party programs and reports to be included in a dynamic graphic. For example, Microsoft reporting functionality might be incorporated into a dynamic graphic via use of a control that is placed on the canvas of the dynamic graphic. In preferred implementations, other third party programs, reports, and tools can similarly be incorporated into a dynamic graphic via a control. Preferably, such a control is implemented by wrapping such other program, report, or tool in tags specific to the dynamic graphic, e.g. DSG tags as described hereinabove. In some implementations, then, when a dynamic graphic containing such a control is later loaded, a handoff to a program responsible for rendering a report or other content occurs, and the results from that other program are then incorporated into a canvas of the dynamic graphic.","Further, at least some preferred implementations may utilize an include component, which allows for the inclusion of other files as a resource. For example, multipage DSG graphics may be created which include header and footer sections comprising include components referencing files to be utilized as header and footer images. In such an instance, the header and footer images would be present on each page of the DSG graphic, as illustrated in .","Generally, a single DSG page can be utilized to render results that span multiple pages. Controls, or components, utilized with DSG may be pagination enabled, i.e. configured to span multiple pages as needed. In at least some preferred implementations, one or more controls that are pagination enabled may be laid out with one or more controls that are not pagination enabled. For example, a first control A that is pagination enabled may be laid out in a left column, and a second control B that is not pagination enabled may be laid out in a right column. The first control A may include four pages worth of content to display. In preferred implementations, the first control A could be displayed in the left column on four pages, while the second control B would only be displayed in the right column on page one, as illustrated in . Alternatively, the content of the second control B could be duplicated on each page, as illustrated in . In at least some preferred implementations, a user configurable setting allows a user to select how controls that are not pagination enabled are displayed.","One or more methods comprising steps for generating code that can be utilized to render dynamic graphics is described hereinabove. In at least some implementations, each of these steps is performed, or confirmed, manually by a user using a user interface of an editor tool. In at least some preferred implementations, however, one, some or all of these steps are performed automatically without user input. In at least some preferred implementations, a user interface streamlines this process to enable less technologically savvy users to easily create and edit graphic templates.","Exemplary embodiments of the present invention are described above. No element, act, or instruction used in this description should be construed as important, necessary, critical, or essential to the invention unless explicitly described as such.","Based on the foregoing description, it will be readily understood by those persons skilled in the art that the present invention is susceptible of broad utility and application. Many embodiments and adaptations of the present invention other than those specifically described herein, as well as many variations, modifications, and equivalent arrangements, will be apparent from or reasonably suggested by the present invention and the foregoing descriptions thereof, without departing from the substance or scope of the present invention. Accordingly, while the present invention has been described herein in detail in relation to one or more preferred embodiments, it is to be understood that this disclosure is only illustrative and exemplary of the present invention and is made merely for the purpose of providing a full and enabling disclosure of the invention. The foregoing disclosure is not intended to be construed to limit the present invention or otherwise exclude any such other embodiments, adaptations, variations, modifications or equivalent arrangements, the present invention being limited only by the claims appended hereto and the equivalents thereof."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["One or more preferred embodiments of the present invention now will be described in detail with reference to the accompanying drawings, wherein the same elements are referred to with the same reference numerals, and wherein:",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIGS. 4-7"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 11","FIG. 10"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 12","FIG. 10"]},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 21","FIG. 20"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIGS. 24A-C"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIGS. 27A-B"},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 28"}]},"DETDESC":[{},{}]}
