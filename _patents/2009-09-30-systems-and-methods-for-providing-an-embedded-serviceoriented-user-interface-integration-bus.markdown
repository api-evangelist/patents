---
title: Systems and methods for providing an embedded service-oriented user interface integration bus
abstract: Embodiments of the invention can provide systems and methods for providing an embedded service-oriented user interface integration bus. According to one embodiment, a system can be provided having a memory for storing computer executable instructions and a processor in communication with the memory via a computer interface. The processor can be adapted to execute computer executable instructions for receiving a user interface service request from an application module associated with a first platform. The processor can also be adapted to transform the user interface service request from the application module to a user interface service request for a host platform. The processor can also be adapted to match the transformed user interface service request to a platform service on the host platform and to transform the platform service for the host platform into a platform service for the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08904375&OS=08904375&RS=08904375
owner: General Electric Company
number: 08904375
owner_city: Schenectady
owner_country: US
publication_date: 20090930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","BRIEF DESCRIPTION OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The invention relates generally to user interfaces, and more particularly, to systems and methods for providing an embedded service-oriented user interface integration bus.","Conventional user interface (\u201cUI\u201d) integration technologies allow a user to collaborate and interact with one or more computer applications. Examples of conventional UI integration technologies include ACTIVEX, for use with MICROSOFT WINDOWS, and OPEN SERVICES GATEWAY INITIATIVE (\u201cOSGi\u201d), for use with platforms like the Eclipse application framework. While these conventional UI integration technologies serve their intended purpose of allowing a user to interface with a particular component, they are technology dependent. For example, OSGi is language dependent, being written in JAVA code. ACTIVEX, meanwhile, is limited to MICROSOFT-based platforms. Consequently, because conventional UI integration technologies are not technology neutral, conventional UI integration technologies have limited interoperability and may require substantial redesign before they can be transferred between technologies.","In addition, conventional UI integration technologies have been directed to component integration rather than application integration. As initiatives emerge to integrate disparate systems for increased efficiencies, conventional UI integration technologies are having to be redesigned to allow users to interface with applications from these systems using a common platform. An example of such an initiative is the Smart Grid. The Smart Grid aims to integrate a new set of applications with legacy power grid systems for real time monitoring and control through a common platform. By enabling a common platform to make energy allocation decisions in place of multiple decision-makers at a more local level, the Smart Grid aims to increase efficiencies associated with the utility power grid. These increased efficiencies, however, require a user at the common platform to interact with various applications provided by legacy systems, and thus requires disparate applications to be integrated through the common platform. Conventional UI integration technologies are not adapted for application integration and therefore do not allow interaction by a user at a common platform.","Therefore, a need exists to enable users to interface, in a technologically neutral way, with various applications from disparate technologies using a common platform. More specifically, there is a need for systems and methods for providing an embedded service-oriented user interface integration bus.","Embodiments of the invention can address some or all of the needs described above. Certain embodiments of the invention are directed generally to systems and methods for providing an embedded service-oriented user interface integration bus. According to one embodiment, a method for providing an embedded service-oriented user interface integration bus within a client can be provided. The method can include receiving a user interface service request from an application module. The method can also include transforming the user interface service request from the application module into a user interface service request for the host platform. The method can further include matching the transformed user interface service request with one or more platform services for the host platform. The method can also include transforming the one or more platform services for the host platform into one or more platform services for the client to provide a user interface with the application module to a user on the client.","According to another embodiment, a system for providing an embedded service-oriented user interface integration bus can be provided. The system can include a memory for storing computer executable instructions and a processor in communication with the memory via a computer interface. The processor can be adapted to execute computer executable instructions for receiving a user interface service request from an application module associated with a first platform. The processor can also be adapted to transform the user interface service request from the application module to a user interface service request for a host platform. The processor can also be adapted to match the transformed user interface service request to a platform service on the host platform, and to transform the platform service for the host platform into a platform service for the client to provide an interface with the application module to a user on the client.","According to yet another embodiment of the invention, a computer program embodied on a computer-readable medium for providing an embedded service-oriented user interface integration bus within a client can be provided. The computer program can include instructions for adapting a processor to receive a user interface service request from an application module. The computer program can also include instructions for adapting the processor to transform the user interface service request from the application module into a user interface service request for the host platform. The computer program can further include instructions for adapting the processor to match the transformed user interface service request with one or more platform services for the host platform. The computer program can further include instructions for adapting the processor to transform the one or more platform services for the host platform into one or more platform services for the client to provide a user interface with the application module to a user on the client.","Other embodiments and aspects of the invention will become apparent from the following description taken in conjunction with the following drawings.","The invention now will be described more fully hereinafter with reference to the accompanying drawings, in which example embodiments of the invention are shown. This invention may, however, be embodied in many different forms and should not be construed as limited to the example embodiments set forth herein; rather, these embodiments are provided so that this disclosure will convey the scope of the invention to those skilled in the art. Like numbers refer to like elements throughout.","Certain embodiments of the invention can integrate user-interface (\u201cUI\u201d) applications from disparate technologies into a single, service oriented UI. In so doing, certain embodiments of the invention can provide a common platform for system developers to leverage existing applications or to provide new applications for a range of existing or developing technologies and\/or systems. In other words, certain embodiments of the invention can provide interoperability to disparate technologies whether such technologies were designed by different teams or acquired for different purposes such that they can be operated from a single, well-defined, and integrated runtime environment. For example, certain embodiments of the invention can be an enabling technology for Smart Grid, which leverages systems that enable a user to control and monitor an entire distribution network, often employing a wide range of dissimilar systems, from one consolidated graphical user interface. Hence, interoperability is at least one technical effect of certain embodiments of the invention.","In addition, certain embodiments of the invention can reduce redesign and increase efficiencies associated with systems integration. In certain embodiments, the access to applications in legacy systems can be provided, thus reducing the need to re-implement legacy applications in modern designs. In other embodiments, capabilities of legacy applications can be extended by enabling the implementation of more advanced UI applications that can leverage these legacy systems. Thus, in providing an interoperable interface to legacy applications, the need to re-implement already existing functionality is reduced. From a cost perspective, by enabling access to an existing application rather than re-implementing the existing application as a new application for a new system, certain embodiments of the invention can provide cost reductions associated with legacy systems integration. Therefore, systems integration at a reduced cost is at least one other technical effect of certain embodiments of the invention.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["100","100","100"]},"In general, system  can be described as a visualization platform . Visualization platforms can be used to provide users a data exploitation environment for the visualization of data, for the manipulation of data, and for interaction with data. When compared to conventional technologies, though, visualization platform  includes novel features that can enable existing, legacy UI application modules, which may be implemented on disparate application frameworks, and new UI application modules, which may or may not be implemented on the application framework of a host platform, to run and communicate in one or more UI runtime environments on the host platform. In the example embodiment, this functionality can be provided through the example high level architecture shown.","As part of this high level architecture, a service-oriented user interface integration bus can be provided. In the example embodiment, the visualization platform  can include one or more UI application modules adapted to interface with a module manager . In one embodiment, visualization platform  can include new application modules , which can correspond to one or more UI application modules that may be adapted for operation within a host platform or within a first platform. In another embodiment, visualization platform  can include existing application modules , which may correspond to one or more UI application modules also adapted for operation within the first platform. In one embodiment, the first platform can share a common application framework with the host platform. In other embodiments, the first platform and the host platform can accommodate disparate application frameworks.","In the example embodiment, UI application modules like new application modules  and existing application modules  can describe the UI services they can provide and the UI services they can consume to module manager . UI services describe the services utilized by a UI application module so that one or more displays can be provided to a user. In one embodiment, such as when the UI application module and the host platform share a common application framework, module manager  can match one or more UI services available from the host platform with one or more UI application modules after having received a UI service request from the one or more UI application modules. In another embodiment, such as when the UI application module and the host platform do not share a common application framework, module manager  can transform the UI service requests from the UI application module into a UI service request for the host platform. Having determined a UI service request for the host platform, module manager  can match the transformed UI service request with a UI service available from the host platform.","In providing a UI integration bus, module manager  can facilitate communication between existing UI application modules  and new UI application modules  with UI services available from the host platform, such as platform services . Once matching UI services with one or more application modules, module manager  can interface with platform services  to provide a visual interface to a user on the host platform. In at least this way, by matching UI services available from the host platform with the UI service requested by these disparate application modules to provide a common interface to a user, visualization platform  can be service-oriented.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 1"],"b":["200","102","112","250","104","114","200","200","200"]},"UI new application module  can include four components: (1) an extensible markup language (\u201cXML\u201d) schema library ; (2) a module definition library ; (3) a services module ; and (4) a platform implementation module . XML schema library  can define one or more objects for UI new application module . Module definition library  can contain one or more defining characteristics of the UI new application module , such as the module name, module version information, module dependencies, and\/or information associated with implementation of the UI new application module  on a host platform. Services module  can define local services for implementing one or more XML objects of XML schema library  of the UI new application module  on a host platform.","Platform implementation module  can provide the UI services requested by the services module  according to the application framework of the host platform. That is, in the example embodiment, platform implementation module  can implement the XML schema library  according to the local services module  of the UI new application module  on the host platform. To illustrate, one or more data objects defined in the XML schema library  could require one or more services modules  for implementation in a UI. To this end, platform implementation module  can implement the services module  on the host platform for the one or more data objects defined in the XML schema library .","It will be appreciated that, while in the example embodiment new application modules  and  can be integrated and\/or designed to operate on the application framework existing on the host platform, new application modules  and  can also be associated with an application framework that may exist for other platforms. That is, in some embodiments, platform implementation module  can be associated with an application framework that differs from the host platform. In such embodiments, when the platform implementation module  is associated with an application framework that differs from the host platform, one or more adapters may be further employed in combination with UI new application module  to provide technological neutrality and\/or independence. An example adapter is described below in relation to existing application module .","It will also be appreciated that, because in some embodiments, new application modules  and  can exhibit technologically independent features, these features can be associated with any one or more of the modules or libraries described above. That is, in embodiments where UI new application module  and UI new application module  can be declarative, one or more of XML schema library , module definition library , and services module , can exhibit technological independent features, such as through one or more programming languages. In the example embodiment, UI new application module  and UI new application module  can define UI services using a variation of web services description language (\u201cWSDL\u201d), except that rather than define web services, UI new application module  and UI new application module  can request UI local services from module manager  through platform implementation module  to provide a common UI through the host platform. More specifically, as a declarative module, services module  can request UI local services expressively, meaning that services module  can describe the services required of one or more XML schema libraries  without regard to implementation on the host platform. Platform implementation module , after receiving the expressive calls for services defined according to the services module , can then be associated with implementing these services on the host platform.","With continued reference to  and , existing application module  can correspond to an existing application module , like UI application module , which can be adapted for operation on an application framework different from the host platform, such as the MICROSOFT .NET application framework as in the example embodiment. In the example embodiment, existing UI application module  is shown as comprising one or more components that may be declarative, including XML schema , module definition library , and services definition library . It will be appreciated that while the example embodiment presents existing application module  as having declarative aspects, other embodiments of the invention can be associated with existing application modules having fewer, more, or no declarative aspects.","In addition to declarative modules, existing application module  can include an implementation module for implementation of the existing application module  on a platform that may differ from the host platform. In the example embodiment, the implementation module is presented as a MICROSOFT .NET implementation module  for implementing the existing application module  in a MICROSOFT .NET application framework. An implementation module like MICROSOFT .NET implementation module  can provide the UI services requested by the services module  according to the existing application framework for one or more host platforms. Because existing application module  is configured to operate on a single application framework, existing application module  is not technology neutral. In other words, in conventional systems, a user can not interact with existing application module  from a platform having an application framework that differs from the application framework provided by implementation module . Certain embodiments of the invention, however, can provide technological neutrality, such as through one or more platform adapters  shown in  and platform adapters , , and  shown in .","Platform adapter  presents an example embodiment of an adapter for implementing existing application module  on a host platform when the existing application module  is associated with an application framework that differs from the host platform. Platform adapter  provides a bridge between the MICROSOFT .NET implementation module  of the existing application module  and the application framework implemented on the host platform through the module manager .","For example, platform adapters  and  can allow module manager  to host application modules written in languages associated with multiple application frameworks, such as like MICROSOFT .NET and JAVA application frameworks as shown in the example embodiment. Adapters like web application adapter  can allow module manager  to integrate application modules from additional application frameworks and\/or platforms, such as a browser application module and a thick client. In both instances, module manager  can provide a single user interface as a part of visualization platform  that provides technological neutrality.","To illustrate with reference to visualization platform , at block  are provided existing application modules encompassed within one or more platform adapters. By bridging the implementation features of existing application modules  with implementation features of the host platform through module manager , adapters , , and  can allow visualization platform  to leverage existing application modules  while also leveraging new application modules  without requiring modifications to existing application modules . Such leverage can be associated with improving interoperability. In the example embodiment, existing application modules  can include any one or more of the following platform adapters: (1) platform adapter  can be associated with adapting MICROSOFT .NET application modules for integration with visualization platform ; (2) platform adapter  can be associated with adapting JAVA application modules for integration with visualization platform ; and (3) platform adapter  can be associated with adapting web-based and\/or internet browser application modules for integration with visualization platform .","Platform adapters , , and  can integrate existing application modules  with visualization platform  without modifying the functionality of existing application modules , even though these application modules may be designed and configured to run on multiple application frameworks associated with multiple platforms. To accomplish this end, platform adapters , , and  can bridge the UI services requested by an existing application module  to one or more UI services provided through visualization platform  through module manager . For instance, in one embodiment, module manager  can match one or more platform services  for the user interface provided by visualization platform  with one or more UI service requests from one or more application modules , , and  as provided to module manager  through one or more platform adapters , , and .","For example, if an existing application  has a well defined windowing system, then application adapters such a MICROSOFT .NET adapter  can transform UI service requests from existing application module  into an UI service request that corresponds to one or more windowing system application programming interfaces (\u201cAPIs\u201d). Module manager  can also map the transformed UI service requests provided by MICROSOFT .NET platform adapter  to one or more host platform services  provided by visualization platform  as more fully described below. In this way, existing application  can be integrated with visualization platform  without the core functionality of application module  being disturbed.","In addition to providing one or more UI services available from the host platform to existing application modules , module manager  can provide interoperability between one or more existing application modules , such as between application module \u2014which can be configured for a dynamic logic application framework such as a JAVA application framework\u2014and application module \u2014which can be configured for a software framework that runs primarily on WINDOWS such as MICROSOFT .NET application framework.","To illustrate with reference to , existing application module  can request a UI service from a legacy JAVA application framework. Platform adapter  can transform the UI service request from application module  into a UI service request for the host platform, which in the example embodiment, is shown as an XML-based UI service request. The XML-based UI service request can be provided to module manager . Module manager  can match the XML-based service request to one or more UI services of the host platform and then invoke the UI service request in application module  through platform adapter . Platform adapter  can be configured to transform the UI service request from module manager , which corresponds to a UI service of the host platform, into a UI service request for existing module , which is configured for the MICROSOFT .NET application framework, such as by using a JAVA Native Interface in one embodiment. When existing application module  corresponds to a web-based and\/or internet browser application module, a JAVA Native Interface can also be used to transform and map the UI service request from the web application module  to a UI service available through module manager . In at least these ways, visualization platform  can provide interoperability between one or more existing application modules .","In the example embodiment, module manager  is associated with providing interoperability between one or more application modules  and  and with implementing the application modules  and  on the host platform. Implementation of an application module can be done either directly, such as through the implementation module of the new application module , or indirectly, such as through the platform adapters , , and . When implementing an application module directly, which can occur when the new application module  includes an implementation module that corresponds to the application framework of the host platform, module manager  can pass UI service requests from the application module to the platform services module  of the host platform. When implementing an application module indirectly, which can occur when an existing application module  includes an implementation module that does not correspond to the application framework of the host platform, module manager  can identify the appropriate adapter and load the appropriate adapter with reference to the existing application module .","It will be appreciated that to interact with one or more suitable platform adapters and to provide the functionality described above, module manager  can be implemented and appropriately configured in any suitable programming language. For example, in one embodiment, module manager  can be implemented in JAVA. To interact with existing application module  in visualization platform , which is shown as being configured for a MICROSOFT .NET platform, a MICROSOFT .NET adapter  can be provided to bridge module manager  to existing application module . In one embodiment, MICROSOFT .NET adapter  can correspond to a JAVA Native Interface-based adapter for allowing the application module  to interact with the Java encoded module manager . A JAVA Native Interface-based adapter can also correspond to platform adapter . In this way, platform adapter  can transform the UI service requests from web application module  into a JAVA API for module manager .","Referring again to , at block  can be provided one or more platform services for platform support. Unlike conventional UI technologies that have been directed to component integration, visualization platform  can include a set of platform services that can be directed to solve issues related to UI application integration. That is, visualization platform  can provide one or more services to support UI integration with module manager .","These services can include, for example, windowing services provided by window manager . Window manager  can manage windows displayed to a user on the host platform and to provide the user an ability to modify the operation of one or more application modules, such as through the platform adapters described above. Window manager  can also allow a user to create window objects and to direct data between one or more application modules through module manager . In providing windowing services, window manager  can manage the integration of visualization platform  with a windows-based operating environment, or with other operating environments known within the art.","Platform services  can also include session management services provided by session management module . Session management module  can manage the system resources of the host platform to accommodate the UI service requests from the various application modules described above to provide reliable operation of the host platform. Session management module  can also allow one or more application modules to share session information as well as provide user services such as those associated with login, logoff, and user messages.","Platform services  can further include local message bus manager  for managing messages between one or more application modules through module manager . It will be appreciated that while platform services  are described in relation to the services described above, the particular services described are presented for example purposes only and are intended to convey a potential set of services to support UI integration with module manager . Accordingly, embodiments of the invention should not be construed as being limited to the particular platform services  described.","It will also be appreciated that while the high level architecture described in relation to  includes one or more adapters and methods for providing UI services in a technologically neutral way, additional architectures can be employed according to other embodiments of the invention. For example, disparate technologies can be integrated manually and in a point to point manner rather than through one or more of the adapters described. Therefore, it will be appreciated that other embodiments of the invention can exist in addition to the high level architecture shown and described with relation to .","Other embodiments of the invention, for example, can be embedded in a legacy platform rather than implemented on a new host platform. That is, in some embodiments, visualization platform  can be embedded in a legacy system, which can allow application modules designed for the service-oriented user integration bus of  to operate on the legacy system, thereby extending the functionality and utility of the legacy system without redesigning and re-implementing these application modules in the legacy system.","Such an embodiment is illustrated in  at system . System  can be part of a legacy application module or a computer system client  having an embeddable visualization platform microkernel . Microkernel  can run along side existing legacy application modules  in a client , thereby allowing legacy application modules  to interact with new application modules  that may be designed and implemented as part of a service-oriented user integration bus for a host platform that is not interoperable with the legacy system. In other words, legacy application modules  and legacy systems like client  that may desire to include language and platform neutral components can do so through the use of embedded microkernel .","Microkernel  can be integrated in the client  via several platform mechanisms depending on the technology associated with the legacy system or application module. For example, in one embodiment, a JAVA client can embed application modules for the service-oriented user integration bus via the JAVA Native Interface. In another embodiment, a MICROSOFT client can embed application modules for the service-oriented user integration bus via one or more MICROSOFT based technologies like Component Object Model (\u201cCOM\u201d) and ACTIVEX.","In one embodiment, visualization platform microkernel  can be embedded in client  and adapted to interface with legacy application modules  through one or more adapters  and . Adapters  and  can provide basic services for the legacy system, such as windowing, session management, and inter application communication. Adapters  and  can be configured as part of microkernel  to provide native functionality to application modules  contained within microkernel  without modifying the functionality or implementation of the new application modules . In one embodiment, adapters  and  can transform the one or more platform services for the host platform into one or more platform services for the legacy application modules  to provide interoperability. In another embodiment, adapters  and  can transform the one or more platform services for the host platform into one or more platform services for the client .","For example, window manager module  can be adapted via adapter  to enable native application modules  for the visualization platform  to be hosted inside the windowing system used by client . For instance, in one embodiment client  may be a MICROSOFT .NET client when the embedded microkernel  is a Java client. In this circumstance, adapter  can be associated with transforming the Java-based window service requests from window manager  into MICROSOFT .NET window service requests for the client . In other embodiments, such as those where client  may lack a windowing system, adapters  and\/or  can be optional.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 5","FIG. 5","FIG. 1"],"b":["500","500","505","102","112","100","102","108","110"]},"In another embodiment, the UI service request can be received from an application module associated with a first platform having an application framework different from the host platform. For example, in one embodiment, the UI service request can be received from an application module associated with a platform adapted to operate with a MICROSOFT .NET application framework, such as application module  in visualization platform . In another embodiment, the application module can be associated with a platform adapted to operate with a JAVA application framework, such as application module  in visualization platform . In another embodiment, the application module can be associated with a web-based and\/or internet browser platform, such as application module  in visualization platform . In still other embodiments, any one or more of the embodiments above could be used.","It will be appreciated that as application modules can be associated with platforms different from the host platform, application modules can also be declarative or have declarative features. In other words, in some embodiments, one or more aspects of the application modules need not be associated with any particular platform or application framework, meaning that such application modules can have technologically independent features. In still other embodiments, application modules can be associated with the application framework of the host platform.","Method  continues at block , where a UI service request from an application module can be transformed into a UI service request for the host platform. For example and with reference to visualization platform , a UI service request from application module  can be received by platform adapter  and transformed into a UI service request for the platform hosting visualization platform . In one embodiment, the application module and platform adapter can be associated with a MICROSOFT .NET application framework as are platform adapter  and application module . In another embodiment, the application module and platform adapter can be associated with a Java application framework like platform adapter  and application module . In another embodiment, the application module and platform adapter can be associated with a web-based application framework like platform adapter  and application module . In other embodiments, any combination of the above could be used and\/or combined with additional application frameworks.","At block , method  can continue where the transformed UI service requests from the application module can be matched with one or more platform services. In one embodiment, platform services can be associated with a host platform and the matching of services can provide a visual interface to a user, such as a graphical user interface, via the host platform. For example, and with reference to visualization platform , a transformed UI service request can be received by module manager  and matched by module manager  to one or more UI services available through platform services . In other embodiments, platform services can be associated with other application modules and the matching of services can be associated with facilitating communication between one or more UI application modules, such as application modules , , , and  illustrated as part of visualization platform  in . In other embodiments, any combination of the above could be provided.","In some embodiments, such as those embodiments that can be embedded in a legacy platform, application module, and\/or thin or thick client rather than implemented on a host platform, method  can continue at block  where the one or more platform services for the host platform can be further transformed into one or more platform services for the legacy platform, application module, and\/or client. For example, and with reference to , adapters  and  can be adapted to transform the one or more platform services for the host platform into one or more platform services for the legacy application modules  to provide interoperability. In another embodiment, adapters  and  can transform the one or more platform services for the host platform into one or more platform services for the client . In other embodiments, any combination of the above could be used.","It will be appreciated that embodiments of the invention can be technology independent and can allow different types of UI application modules to run in an integrated manner. For example, application modules implemented and designed for a thick client can operate in tandem with a web thin client in the same UI environment using one or more of the application modules and\/or components described above. Hence, while the invention is described above with reference to block and flow diagrams of systems, methods, apparatuses, and\/or computer program products, these references are provided only as example embodiments of the invention.","In addition, blocks of the block diagrams and flow diagrams support combinations of means for performing the specified functions, combinations of elements or steps for performing the specified functions and program instruction means for performing the specified functions. Some blocks of the block diagrams and flow diagrams may not necessarily need to be performed in the order presented, or may not necessarily need to be performed at all, according to some embodiments of the invention.","It will be understood that each block of the block diagrams and flow diagrams, and combinations of blocks in the block diagrams and flow diagrams, can be implemented by special purpose hardware-based computer systems that perform the specified functions or elements, or combinations of special purpose hardware and computer instructions. These embodiments also may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor based or programmable consumer electronics, mini-computers, mainframe computers, etc.","Certain embodiments of the invention may also be implemented through an application program running on an operating system of a computer. In addition, or in the alternative, the application program (in whole or in part) may be located in remote memory or in storage to allow for the practice of certain embodiments of the invention where tasks are performed by remote processing devices linked through a communications network.","It will also be understood that one or more blocks of the block diagrams and flow diagrams, and combinations of blocks in the block diagrams and flow diagrams, respectively, can be implemented by computer-executable program instructions. When implementing embodiments of the invention by computer-executable instructions, the computer program instructions may be loaded onto a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions which execute on the computer or other programmable data processing apparatus create means for implementing the functionality of each block of the block diagrams, or combinations of blocks in the block diagrams discussed herein. These computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner\u2014including implementing the functions specified in the block or blocks\u2014such that the instructions stored in the computer-readable memory produce an article of manufacture. This article of manufacture can include instruction means for implementing one or more functions specified in the flow diagram block or blocks.","Many modifications and other embodiments of the invention set forth herein will be apparent having the benefit of the teachings presented in the foregoing descriptions and the associated drawings. Therefore, it is to be understood that the invention is not to be limited to the specific embodiments disclosed and that modifications and other embodiments are intended to be included within the scope of the appended claims. Although specific terms are employed herein, they are used in a generic and descriptive sense only and not for purposes of limitation."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["Having thus described the invention in general terms, reference will now be made to the accompanying drawings, which are not necessarily drawn to scale, and wherein:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
