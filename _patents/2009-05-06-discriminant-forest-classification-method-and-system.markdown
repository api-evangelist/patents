---
title: Discriminant forest classification method and system
abstract: A hybrid machine learning methodology and system for classification that combines classical random forest (RF) methodology with discriminant analysis (DA) techniques to provide enhanced classification capability. A DA technique which uses feature measurements of an object to predict its class membership, such as linear discriminant analysis (LDA) or Andersen-Bahadur linear discriminant technique (AB), is used to split the data at each node in each of its classification trees to train and grow the trees and the forest. When training is finished, a set of n DA-based decision trees of a discriminant forest is produced for use in predicting the classification of new samples of unknown class.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08306942&OS=08306942&RS=08306942
owner: Lawrence Livermore National Security, LLC
number: 08306942
owner_city: Livermore
owner_country: US
publication_date: 20090506
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY IN PROVISIONAL APPLICATION","FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","REFERENCES","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Application No. 61\/050,796 filed May 6, 2008, entitled, \u201cDiscriminant-based Random Forest\u201d by Tracy Lemmond et al, and incorporated by reference herein.","The United States Government has rights in this invention pursuant to Contract No. DE-AC52-07NA27344 between the United States Department of Energy and Lawrence Livermore National Security, LLC for the operation of Lawrence Livermore National Laboratory.","The present invention relates to machine learning methodologies for classification, and in particular to a hybrid approach which combines classical random forest methodology with discriminant analysis techniques, such as linear discriminant analysis and Anderson-Bahadur linear discriminant technique.","Classification is a statistical process used to partition a collection of items (e.g. data samples) into homogeneous classes according to their measurable characteristics, or features. Generally speaking, a typical classifier (i.e. a computerized system for performing classification, and often referring to the classification methodology itself) is first trained to recognize and label key patterns in a set of available training samples, and is then used to predict the class membership of future data.","Classifiers, however, are known to take many different forms and make a variety of assumptions that impact their effectiveness when applied to specific problem domains. Some of the issues that arise from these assumptions include: (a) what is the impact of selecting specific distributional models of the data and error processes (e.g., does performance gracefully degrade as the assumptions become increasingly less valid, or is failure catastrophic)?; (b) is the methodology robust to data degradation, including the effects of noisy, correlated, sparse, or missing data?; (c) does the technique readily accommodate different types of data (e.g., interval-ratio, ordinal, categorical, scalar, non-scalar, etc)?; (e) is there resistance to overtraining?; (f) does the methodology explicitly incorporate identified error costs?; (g) what is the ease of use (e.g., are there extensive parametric tuning requirements)?; (h) are posterior probabilities generated whose presence impact both interpretability and confidence assessment?; (i) how computationally efficient is the technique? (specifically, does it readily scale and effectively accommodate large data sets?; and (j) is training an off-line process only or do in-line variants exists.","While many machine learning approaches to classification have been previously developed that address some of these issues, selection of the ideal classifier still relies heavily upon the problem domain, the nature of the underlying data, and the solution requirements imposed by the analyst or by the problem domain itself. Hence, no classifier can be said to outperform all others in all cases. That said, a classifier and classification methodology that successfully addresses most or all of the aforementioned issues in some fashion is highly desirable for general, practical use. Several previously developed classifiers and classification methodologies include, for example: regularized discriminant analysis (RDA); flexible discriminate analysis (FDA); neural networks; and support vector machines (SVMs).","Random Forest Methodology","One of the most recent advances in classification is the random forest (RF) methodology, which is a non-parametric ensemble approach to machine learning that uses bagging to combine the decisions of multiple classification trees to classify data samples. The random decision forest concept was first proposed by Tin Kam Ho of Bell Labs in 1995 (see [Ho1995]), and later extended and formalized by Leo Breiman, who coined the more general term random forest to describe the classification approach (see [Breiman2001]). As used herein and in the claims, the terms \u201crandom forest,\u201d \u201crandom forest methodology,\u201d and \u201cRF\u201d refer to the classification concept generally disclosed in the [Breiman2001] reference, and not to the statistical analysis software sold under the trademark RANDOM FORESTS\u00ae.","Of the many classifiers that have been developed, few have addressed the aforementioned issues as effectively as the RF, which has been demonstrated to be highly accurate, robust, easy to use, and resistant to overtraining, and to produce posterior class probabilities that enable intuitive interpretation of results. RFs readily address numerous issues that frequently complicate and impact the effectiveness of other classification methodologies leveraged across diverse application domains. In particular, the RF requires no simplifying assumptions regarding distributional models of the feature data and error processes. Thus, there are fewer restrictions on the applications and conditions in which the RF can be effectively applied. Moreover, it easily accommodates different types of data since there are no model parameters that must be estimated from the data. Hence, the RF can be viewed as a nonparametric classification\/detection methodology. In modern statistical analysis, this is a highly desirable trait, since parameter estimation is frequently complicated by issues related to data sparseness and imbalance, incorrectly specified models that cause bias or inflated variance, etc. Furthermore, RF is highly robust to overtraining with respect to forest size. As the number of trees in the RF increases, the generalization error, PE*, has been shown to converge and is bounded as follows,",{"@attributes":{"id":"p-0010","num":"0009"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"msup":{"mi":"PE","mo":"*"},"mo":"\u2264","mfrac":{"mrow":{"mover":{"mi":["\u03c1","_"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mn":"1","mo":"-","msup":{"mi":"s","mn":"2"}}}},"msup":{"mi":"s","mn":"2"}}}},{"mrow":{"mo":["(",")"],"mn":"1"}}]},{"mtd":[{"mrow":{"mi":"s","mo":"=","mrow":{"mn":"1","mo":"-","mrow":{"mn":"2","mo":"\u00b7","msubsup":{"mi":["PE","tree"],"mo":"*"}}}}},{"mrow":{"mo":["(",")"],"mn":"2"}}]}]}}},"br":{},"o":["\u03c1","\u03c1"],"sub":"tree "},"Bagging. From Eq. (1), it is apparent that the bound on generalization error decreases as the trees become stronger and less correlated. To reduce the mean correlation, , among trees in the forest, growth of the trees is generally randomized by using a technique called bagging, in which each tree is trained on a bootstrapped sample of the original training data set, which is typically referred to as its bagged training set. Even though each bagged training set (i.e. tree training set) contains the same number of samples as the original training data (i.e. forest training set), its samples are randomly selected with replacement and are representative of approximately two-thirds of the original data. The remaining samples are generally referred to as the out-of-bag (OOB) data and are frequently used to evaluate classification performance. In other words, for each tree, a tree training set of size N is randomly sampled (with replacement) from the original forest training set of size N. Thus, each tree will be trained on a set of data representative of approximately two-thirds of the original training set.","Node Splitting. At each node in a typical RF classification tree, m features are randomly selected from the available feature set, D, and the single feature producing the \u201cbest\u201d split (according to some predetermined criterion) is used to partition the training data into classes. As stated in the [Breiman2001] reference, small values of m, referred to as the split dimension, relative to the total number of features are normally sufficient for the forest to approach its optimal performance. Large values of m may increase the strength of the individual classification trees, but they also generally induce higher correlation among them, potentially reducing the overall effectiveness of the forest. It is notable that a typical RF node split is a univariate decision, based upon a single feature preferentially selected from a preferably small set of m randomly selected features. Such node splits are locally suboptimal due to the randomness injected by the feature selection scheme. However, this approach encourages diversity among the trees, ultimately improving the classification performance of the forest as a whole. Most efforts to enhance random forests have sought to inject additional randomness into the algorithm while preserving the strength of individual classifiers.","Prediction. Each tree in the forest is grown to the greatest extent possible, i.e. it is grown without pruning until the data at its leaf nodes (i.e. terminal nodes) are homogeneous (i.e. all samples are of a single class), or until some other predefined stopping criterion is satisfied. When the forest has been fully constructed, class predictions are then performed by propagating a new test sample through each tree and assigning a class label, or vote, based upon the leaf node that receives the sample. Typically, the sample is assigned to the class receiving the majority vote, although various voting thresholds may be used to tune the resulting error rates. It is notable that the resulting votes can be viewed as approximately independently and identically distributed (i.i.d.) random variables, and thus, the Laws of Large Numbers imply that the corresponding relative frequencies will converge to the true class-specific probabilities as the number of trees in the forest increases. Moreover, the empirical distribution function from which they are drawn will converge to the true underlying distribution function. Hence, the resulting relative frequencies of votes effectively estimate the true class-specific probabilities and we can threshold upon this distribution to make a classification decision. In other words, the class assignment frequencies resulting from this process can be interpreted as posterior class probabilities.","Random Forest Hybrids and Variants","The desirable characteristics of the random forest paradigm have inspired numerous variations and hybrids of this approach to be developed in an effort to enhance the ensemble classifier, with varying success. Because the performance of the random forest method has been shown to depend wholly upon the strength of its individual trees as classifiers and the correlation among them, as suggested by Eq. (1), enhancements to RF methodology have generally proceeded with an emphasis upon increasing the diversity of the tree classifiers while maintaining a high average strength. Example variations of random forests include, for example: Gini Impurity-based Node Splitting; Rotation Forests (and other techniques that involve a transformation of the feature data prior to building the forest); and CART forests and Logistic regression forests (i.e. forests that use alternative base classifiers).","Gini Impurity-based Node Splitting. As described above for the classical RF method, m features are randomly selected at each node, and the single feature that produces the \u201cbest\u201d split of the data is computed. While numerous measures have been used to determine the \u201cbest\u201d split (e.g., misclassification error, entropy), one popular criterion for node splitting in RFs is based upon Gini impurity, which measures the homogeneity (i.e., purity) of tree nodes. In training a typical decision tree, the ultimate goal is to partition the data into homogeneous regions that can be assigned a predicted class label. Hence, at a given node t, what is sought is the single feature and threshold that maximize the decrease in Gini impurity, which is given by:",{"@attributes":{"id":"p-0016","num":"0015"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mrow":{"mrow":[{"mi":"\u0394","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":{"mi":["I","G"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":{"mi":["x","j"]},"mo":",","mi":"t"}}}},{"mrow":[{"msub":{"mi":["I","G"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"t"}},{"msub":{"mover":{"mi":"p","mo":"^"},"mi":"tL"},"mo":"\u2062","mrow":{"msub":{"mi":["I","G"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"tL"}}},{"msub":{"mover":{"mi":"p","mo":"^"},"mi":"tR"},"mo":"\u2062","mrow":{"msub":{"mi":["I","G"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"tR"}}}],"mo":["-","-"]}],"mo":"="},"mo":["\u2062","\u2062"],"mstyle":{"mtext":{}},"mi":"where"}},{"mrow":{"mo":["(",")"],"mn":"3"}}]},{"mtd":[{"mrow":{"mrow":[{"msub":{"mi":["I","G"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"t"}},{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"numClasses"},"mo":"\u2062","mrow":{"msub":{"mover":{"mi":"p","mo":"^"},"mi":"ti"},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mn":"1","mo":"-","msub":{"mover":{"mi":"p","mo":"^"},"mi":"ti"}}}}}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"4"}}]}]}}},"br":{},"sub":["ti ","tL ","tR ","j","G","G"]},"Rotation Forests (and other techniques that involve a transformation of the feature data prior to building the forest). The Rotation Forest, described in the [Rodriguez2006] reference, is a random forest variant that uses Principal Component Analysis (PCA) to transform the training data prior to training the forest. Specifically, to create the training data for a single tree classifier, the feature set is randomly split into K subsets, and PCA is applied to each subset. All principal components are retained in order to preserve the variability information in the data. Thus, K axis rotations take place to form the new features for a single tree. Once the training data set for a base classifier has been determined, the classifier is trained as in the conventional RF algorithm. Class prediction is performed using the new transformed feature set.","CART forests, Logistic regression forests (i.e., forests that use alternative base classifiers). Because the ensemble paradigm leveraged by the RF is highly effective (i.e., the RF significantly outperforms a single tree classifier), many variations on this theme have been developed that utilize an alternative base classifier. For example, classification and regression trees (CARTs), support vector machines (SVMs), and logistic regression models have all been incorporated into an ensemble to improve performance (see [Ho1998]). Such efforts have generally met with limited success. Though each of these individual classifiers is more effective than the typical RF tree, this distinction does not guarantee a more effective ensemble classifier.","One aspect of the present invention includes a hybrid random forest (RF) and discriminant analysis (DA) method of training a computerized system to predict the class membership of a sample of unknown class, comprising: providing a forest training set to the computerized system comprising N feature vector ({circumflex over (x)}) and class label (\u0177) pairs ({circumflex over (x)}\u03b5,\u0177\u03b5{0,1}) for i=1 to N, and from D available features; and controlling the computerized system to repeat the following set of steps until a desired forest size having n decision trees has been reached: adding a decision tree to the forest, creating a tree training set associated with the added decision tree, said tree training set comprising N bootstrapped training samples randomly selected with replacement from the forest training set, and using the tree training set to train the added decision tree by using hierarchical DA-based decisions to perform splitting of decision nodes and thereby grow the added decision tree as a DA-based decision tree, whereby, upon reaching the desired forest size, the computerized system may predict the classification of a sample of unknown class using the n DA-based decision trees.","Another aspect of the present invention includes a hybrid random forest (RF) and discriminant analysis (DA) method of predicting the classification of a sample of unknown class, comprising: providing a forest-trained computerized system trained according to claim  with n DA-based decision trees; causing the forest-trained computerized system to: receive as input one or more samples of unknown class, characterized as sample feature vector(s) x; for each of the n DA-based decision trees and beginning with the root node of each decision tree, (a) determining if the current decision node is terminal; (b) if the current decision node is terminal, assigning x to the class of the current decision node and returning to step (a) for the next decision tree; (c) if the current decision node is not terminal, computing f(x\u2032)=wTx\u2032+b for the current decision node, determining if f(x\u2032) is greater than or equal to 0, selecting the left child node as the new current decision node if f(x\u2032)\u22670, selecting the right child node as the new current decision node if f(x\u2032)<0, and returning to step (a) for the current decision tree; computing the relative frequency of class assignments for x in the n DA-based decision trees; based on a predetermined threshold value, determining a final class prediction based on the relative frequency of class assignments in the n DA-based decision trees; and providing the final class prediction to a user.","Another aspect of the present invention includes a hybrid random forest (RF) and discriminant analysis (DA) method-based computerized system for predicting the classification of a sample of unknown class, comprising: computer input means for receiving one or more samples of unknown class, characterized as sample feature vector(s) x; computer processor means trained according to claim  with n DA-based decision trees, wherein for each of the n DA-based decision trees and beginning with the root node of each decision tree the computer processor means is adapted to: (a) determine if the current decision node is terminal; (b) if the current decision node is terminal, assigning x to the class of the current decision node and returning to step (a) for the next decision free; (c) if the current decision node is not terminal, computing f(x\u2032)=wTx\u2032+b for the current decision node, determining if f(x\u2032) is greater than or equal to 0, selecting the left child node as the new current decision node if f(x\u2032)\u22670, selecting the right child node as the new current decision node if f(x\u2032)<0, and returning to step (a) for the current decision tree; computer processor means for computing the relative frequency of class assignments for x in the n DA-based decision trees; computer processor means for, based on a predetermined threshold value, determining a final class prediction based on the relative frequency of class assignments in the n DA-based decision trees; and computer output means for providing the final class prediction to a user.","Splitting Decision Nodes via Discriminant Analysis (DA) Techniques, Generally","Generally, the present invention is directed to a hybrid machine learning methodology for classification (i.e. a classifier) that combines classical random forest (RF) methodology with discriminant analysis (DA) techniques to provide enhanced classification capability. In particular, the present invention incorporates DA techniques to split the data at each node in each of its classification trees to grow the trees and the forest, and is therefore characterized herein as the Discriminant Forest (DF) methodology. Two exemplary types of DA techniques used in the DF methodology of the present invention include linear discriminant analysis (LDA) and Anderson-Bahadur linear discriminant technique (AB). When grown according to the training methodology of the present invention, a discriminant forest comprising a set of n DA-based decision trees is produced for use in predicting the classification of a new sample of unknown class.","The DA-based node-splitting approach of the DF method of the present invention has been shown in empirical tests performed by Applicants at the Lawrence Livermore National Laboratory to produce forests which have consistently outperformed other classifiers (i.e. produced lower classification error rates when performing detection\/classification tasks), including the classical RF method. This is despite the fact that such DA methodologies add additional complexity and structure to the node splitting process, as well as being restrictive due to its assumption that the data distribution is multivariate normal, and in the particular case of LDA, its assumption of equal covariance structures for the classes of interest.","DA techniques, like other known classification methodologies, use feature measurements of an object to predict its class membership. Unlike the random forest, whose trees use hierarchical decisions to partition the feature space into successively smaller regions, DA techniques assume an underlying discriminant model whose parameters must be simultaneously estimated to produce the best possible separation of classes within feature space. In practice, linear and quadratic discriminant models are frequently used, assuming an underlying multivariate normal data distribution. In the quadratic case (i.e., quadratic discriminant analysis, QDA), the discriminant function (or rule) is defined for each class k by",{"@attributes":{"id":"p-0025","num":"0024"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"msub":{"mi":["d","k"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mi":"x"}},{"mrow":[{"mrow":[{"mo":"-","mfrac":{"mn":["1","2"]}},{"msubsup":{"mi":["S","k"],"mrow":{"mo":"-","mn":"1"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"mi":"x","mo":"-","msub":{"mi":["\u03bc","k"]}}}}],"mo":["\u2062","\u2062"],"msup":{"mrow":{"mo":["(",")"],"mrow":{"mi":"x","mo":"-","msub":{"mi":["\u03bc","k"]}}},"mi":"T"}},{"mfrac":{"mn":["1","2"]},"mo":["\u2062","\u2062"],"mi":"ln","mrow":{"mo":["\uf603","\uf604"],"msub":{"mi":["S","k"]}}},{"mi":"ln","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":["\u03c0","k"]}}],"mo":["-","+"]}],"mo":"="}},{"mrow":{"mo":["(",")"],"mn":"5"}}]}}}},"br":[{},{}],"sub":["k ","k ","k ","k"]},"In the two-class case, the function d(x)=d(x)\u2212d(x)=0 defines a quadratic decision boundary (i.e., parabolic, elliptical, or hyperbolic) that separates the two classes. Under the assumption of equal class covariances, d(x) reduces to a linear decision boundary. This approach is called Linear Discriminant Analysis (LDA), and was pioneered by R. A. Fisher (see [Fisher1936]). Generally, LDA is a discrimination technique that utilizes dimensionality reduction to classify items into two groups. Basically, the LDA approach makes class assignments by determining the linear transformation of the feature data that maximizes the ratio of the between-class variance to the within-class variance, resulting in the greatest separation between the classes. The result is a linear decision boundary that is optimal (in a Bayesian sense) when the underlying assumptions of multivariate normality and equal covariance matrices are satisfied. In a first preferred embodiment of the present invention, decision node splitting is performed using LDA, i.e. LDA-based decisions are used to split a non-terminal decision node (i.e. not a leaf node) into two decision nodes of a next level.","It can be shown that, in the two-class case, the maximum class separation occurs when the vector of coefficients, w, and intercept, b, used to define the linear transformation, wx+b, (where x is a coordinate in feature space) are as follows",{"@attributes":{"id":"p-0028","num":"0027"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mi":"w","mo":"=","mrow":{"msup":{"mi":"S","mrow":{"mo":"-","mn":"1"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"\u03bc","mn":"1"},{"mi":"\u03bc","mn":"0"}],"mo":"-"}}}}},{"mrow":{"mo":["(",")"],"mn":"6"}}]},{"mtd":[{"mrow":{"mi":"b","mo":"=","mrow":{"mrow":[{"mrow":[{"mo":"-","msup":{"mn":"0.5","mo":"*"}},{"msup":{"mi":"S","mrow":{"mo":"-","mn":"1"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"\u03bc","mn":"1"},{"mi":"\u03bc","mn":"0"}],"mo":"-"}}}],"mo":["\u2062","\u2062"],"msup":{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"\u03bc","mn":"1"},{"mi":"\u03bc","mn":"0"}],"mo":"+"}},"mi":"T"}},{"mrow":{"mi":"log","mo":"\u2061","mrow":{"mo":["(",")"],"mfrac":{"msub":[{"mi":"\u03c0","mn":"1"},{"mi":"\u03c0","mn":"0"}]}}},"mo":"."}],"mo":"+"}}},{"mrow":{"mo":["(",")"],"mn":"7"}}]}]}}},"br":{},"sup":["\u22121 ","th ","th ","\u22121 "],"sub":["k ","k ","W"]},{"@attributes":{"id":"p-0029","num":"0028"},"maths":{"@attributes":{"id":"MATH-US-00005","num":"00005"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"msub":{"mi":["S","W"]},"mo":"=","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"N"},"mo":"\u2062","msub":{"mi":["S","k"]}}}},{"mrow":{"mo":["(",")"],"mn":"8"}}]},{"mtd":[{"mrow":{"msub":{"mi":["S","k"]},"mo":"=","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"msub":{"mi":["N","k"]}},"mo":"\u2062","mrow":{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["x","ki"]},{"mi":["\u03bc","k"]}],"mo":"-"}},"mo":"\u2062","msup":{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["x","ki"]},{"mi":["\u03bc","k"]}],"mo":"-"}},"mi":"T"}}}}},{"mrow":{"mo":["(",")"],"mn":"9"}}]}]}}},"br":{},"sub":["ki ","k "],"sup":["th ","th ","th "]},"Typically when LDA is used as a standalone classifier, it is applied to data sets with sufficient non-dependent feature data in at least one class to yield a nonsingular pooled covariance estimate. The technique requires the inversion of this matrix to compute the discriminant function for class assignment. Used in the discriminate forest (DF) of the present invention, however, such a discriminant function is preferably computed at each node within each tree. Efficiency may not be at issue in most cases, particularly when the number of features considered at each node, m, is small. However, classification trees in a RF are typically grown to the greatest extent possible, and the same is true for the DF of the present invention. Frequently, near zero variance for both classes will likely be encountered particularly near the leaves of a tree, and therefore it is likely that nearly singular covariance matrices will also be encountered.","In order to handle these situations, one exemplary embodiment of the present invention incorporates a metric called the condition number, \u03ba, for determining whether a matrix is nearly singular. In order to compute the condition number for a matrix, A, the eigenvalues of the product of A with its conjugate transpose, AA, must first be determined which, for real matrices, is equal to the transpose of A. Since A is a pooled covariance matrix and is therefore symmetric, only the eigenvalues (\u03bb, i=1, . . . , n) of AA need to be found. The condition number, then, is given by",{"@attributes":{"id":"p-0032","num":"0031"},"maths":{"@attributes":{"id":"MATH-US-00006","num":"00006"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mi":"\u03ba","mo":"=","mfrac":{"msqrt":[{"mrow":{"mo":["\uf603","\uf604"],"msub":{"mi":["\u03bb","max"]}}},{"mrow":{"mo":["\uf603","\uf604"],"msub":{"mi":["\u03bb","min"]}}}]}},{"mi":"where","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"msqrt":{"mrow":{"mo":["\uf603","\uf604"],"msub":{"mi":["\u03bb","i"]}}}},{"mi":"i","mo":"=","mn":"1"},{"mi":["n","are","the","singular","values","of","AA"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}],"mo":[",",",",",","\u2062",",","\u2062"],"mi":"\u2026","mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mtext":{}}]}},{"mrow":{"mo":["(",")"],"mn":"10"}}]}}}}},"A large condition number indicates that a matrix is numerically ill-conditioned and either cannot be inverted, or inversion will lead to numerical instability. When this condition occurs at a node, rather than fit a decision boundary via LDA, a perpendicular bisector is fitted between the class means. It is notable that this problem is not limited to leaf nodes. For non-leaf nodes with large amounts data, the covariance matrix may not be invertible if some features are highly correlated. Therefore to mitigate this issue, features are first preferably culled prior to performing any analysis using this methodology. The elimination of redundant features is always recommended prior to the application of any classifier methodology.","Empirical tests have shown that, like the original RF ensemble classifier, the LDA-based, discriminant forest or the present invention exhibits performance superior to other methods, including support vector machines, neural networks, RDA, and FDA. In nearly all cases, the LDA-based discriminant forest outperformed the classic RF approach.","Splitting Forest Nodes via Anderson-Bahadur","The Anderson-Bahadur Linear Discriminant technique (AB), originally developed by Anderson and Bahadur [Anderson1962], is another exemplary linear discrimination technique (like LDA) for classifying items into two distinct categories. In another exemplary embodiment of the present invention, the AB method is used to split the data at each node in each of its classification trees.","AB is similar to the Linear Discriminant Analysis (LDA) technique in that it shares the same multivariate normality assumption on the distribution of the data. Unlike LDA, however, AB assumes that the covariance matrices are unequal. Thus, the AB algorithm yields the optimal linear decision boundary separating two classes, given the assumption of multivariate normality with unequal covariance matrices. The optimal linear decision boundary is given by:\n\n\u2003\u2003(11)\n\nwhere x is a coordinate in feature space,\n",{"@attributes":{"id":"p-0037","num":"0036"},"maths":{"@attributes":{"id":"MATH-US-00007","num":"00007"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mi":"w","mo":"=","mrow":{"msup":{"mi":"S","mrow":{"mo":"-","mn":"1"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"\u03bc","mn":"1"},{"mi":"\u03bc","mn":"0"}],"mo":"-"}}}}},{"mrow":{"mo":["(",")"],"mn":"12"}}]},{"mtd":[{"mrow":{"mi":"b","mo":"=","mrow":{"mo":"-","mrow":{"mfrac":{"mrow":[{"mrow":[{"msup":[{"mi":["w","T"]},{"mrow":[{"msub":{"mi":"\u03bc","mn":"0"},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msup":{"mi":["w","T"]},"mo":["\u2062","\u2062"],"msub":{"mi":"S","mn":"1"},"mi":"w"}}},{"mn":["1","2"],"mo":"\/"}]}],"mo":"\u2062"},{"msup":[{"mi":["w","T"]},{"mrow":[{"msub":{"mi":"\u03bc","mn":"1"},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msup":{"mi":["w","T"]},"mo":["\u2062","\u2062"],"msub":{"mi":"S","mn":"0"},"mi":"w"}}},{"mn":["1","2"],"mo":"\/"}]}],"mo":"\u2062"}],"mo":"+"},{"msup":[{"mrow":[{"mo":["(",")"],"mrow":{"msup":{"mi":["w","T"]},"mo":["\u2062","\u2062"],"msub":{"mi":"S","mn":"0"},"mi":"w"}},{"mn":["1","2"],"mo":"\/"}]},{"mrow":[{"mo":["(",")"],"mrow":{"msup":{"mi":["w","T"]},"mo":["\u2062","\u2062"],"msub":{"mi":"S","mn":"1"},"mi":"w"}},{"mn":["1","2"],"mo":"\/"}]}],"mo":"+"}]},"mo":"."}}}},{"mrow":{"mo":["(",")"],"mn":"13"}}]}]}}},"br":{},"sub":["k ","k "],"sup":"th "},{"@attributes":{"id":"p-0038","num":"0037"},"maths":{"@attributes":{"id":"MATH-US-00008","num":"00008"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"msub":{"mi":["S","k"]},"mo":"=","mrow":{"mfrac":{"mn":"1","mrow":{"msub":{"mi":["N","k"]},"mo":"-","mn":"1"}},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"msub":{"mi":["N","k"]}},"mo":"\u2062","mrow":{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["x","i"]},{"mi":["\u03bc","k"]}],"mo":"-"}},"mo":"\u2062","msup":{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["x","i"]},{"mi":["\u03bc","k"]}],"mo":"-"}},"mi":"T"}}}}}},{"mrow":{"mo":["(",")"],"mn":"14"}}]},{"mtd":[{"mrow":{"msub":{"mi":["\u03bc","k"]},"mo":"=","mrow":{"mfrac":{"mn":"1","msub":{"mi":["N","k"]}},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"msub":{"mi":["N","k"]}},"mo":"\u2062","msub":{"mi":["x","i"]}}}}},{"mrow":{"mo":["(",")"],"mn":"15"}}]}]}}}},"Unlike the pooled covariance estimate used by the LDA, AB's weighted pooled class covariance matrix, S, is computed with potentially unequal class weights. In AB, Sis computed via\n\n+(1=\u03bb)\u2003\u2003(16)\n","The Anderson and Baladur reference [Anderson1962] describes several ways to compute the weighting factor, \u03bb. One particular method for computing \u03bb utilized in the present invention, minimizes the maximum probability of error, yielding the following optimization criterion for computing \u03bb:",{"@attributes":{"id":"p-0041","num":"0040"},"maths":{"@attributes":{"id":"MATH-US-00009","num":"00009"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"\u03bb","mo":"=","mrow":{"munder":{"mi":["argmax","\u03bb"]},"mo":"\u2062","mrow":{"mo":["{","}"],"mfrac":{"mrow":[{"msup":{"mi":["w","T"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"\u03bc","mn":"1"},{"mi":"\u03bc","mn":"0"}],"mo":"-"}}},{"msup":[{"mrow":[{"mo":["(",")"],"mrow":{"msup":{"mi":["w","T"]},"mo":["\u2062","\u2062"],"msub":{"mi":"S","mn":"0"},"mi":"w"}},{"mn":["1","2"],"mo":"\/"}]},{"mrow":[{"mo":["(",")"],"mrow":{"msup":{"mi":["w","T"]},"mo":["\u2062","\u2062"],"msub":{"mi":"S","mn":"1"},"mi":"w"}},{"mn":["1","2"],"mo":"\/"}]}],"mo":"+"}]}}}}},{"mrow":{"mo":["(",")"],"mn":"17"}}]}}}}},"This approach requires covariance matrix inversion. Therefore, here also similar to the LDA-based node splitting, a metric called the condition number, \u03ba, is incorporated for determining whether a matrix is nearly singular (non-invertible). In order to compute the condition number for a matrix, A, the eigenvalues of the product of A with its conjugate transpose, AA, must first be determined which, for real matrices, is equal to the transpose of A. Since A is a pooled covariance matrix and is therefore symmetric, only the eigenvalues, (\u03bb, i=1, . . . , n), of AA need to be found. The condition number, then, is given by",{"@attributes":{"id":"p-0043","num":"0042"},"maths":{"@attributes":{"id":"MATH-US-00010","num":"00010"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mi":"\u03ba","mo":"=","mfrac":{"msqrt":[{"mrow":{"mrow":{"mo":["\uf603","\uf604"],"msub":{"mi":["\u03bb","max"]}},"mo":"\u2062","mstyle":{"mspace":{"@attributes":{"width":"0.2em","height":"0.2ex"}}}}},{"mrow":{"mo":["\uf603","\uf604"],"msub":{"mi":["\u03bb","min"]}}}]}},{"mi":"where","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"msqrt":{"mrow":{"mo":["\uf603","\uf604"],"msub":{"mi":["\u03bb","i"]}}}},{"mi":"i","mo":"=","mn":"1"},{"mi":["n","are","the","singular","values","of","AA"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}],"mo":[",","\u2062",",",",","\u2062",","],"mstyle":[{"mtext":{}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mi":"\u2026"}},{"mrow":{"mo":["(",")"],"mn":"18"}}]}}}}},"A large condition number indicates that a matrix is numerically ill-conditioned and either cannot be inverted, or inversion will lead to numerical instability. When this condition occurs at a node, rather than fit a decision boundary AB, we fit a perpendicular bisector between the class means. This results in a decision boundary defined by (1), where:",{"@attributes":{"id":"p-0045","num":"0044"},"maths":{"@attributes":{"id":"MATH-US-00011","num":"00011"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mi":"w","mo":"=","mrow":{"msub":[{"mi":"\u03bc","mn":"1"},{"mi":"\u03bc","mn":"0"}],"mo":"-"}}},{"mrow":{"mo":["(",")"],"mn":"19"}}]},{"mtd":[{"mrow":{"mi":"b","mo":"=","mrow":{"mrow":[{"mo":"-","mfrac":{"mn":["1","2"]}},{"mo":["(",")"],"mrow":{"msub":[{"mi":"\u03bc","mn":"0"},{"mi":"\u03bc","mn":"1"}],"mo":"+"}}],"mo":["\u2062","\u2062"],"msup":{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"\u03bc","mn":"1"},{"mi":"\u03bc","mn":"0"}],"mo":"-"}},"mi":"T"}}}},{"mrow":{"mo":["(",")"],"mn":"20"}}]}]}}}},"Thus, in a tree node where Sis near-singular (i.e., numerically ill-conditioned), the perpendicular bisector between the class means may be used as the linear decision boundary. In such cases, the linear transformation is defined by Eqs. (19) and (20).","Like the LDA-based node splitting previously described, empirical tests have shown that, like the original RF ensemble classifier, the AB-based, discriminant forest method of the present invention exhibits performance superior to other methods, including support vector machines (SVMs), neural networks, RDA, and FDA. In nearly all cases, the AB-based discriminant forest outperformed the classic RF approach.","Exemplary Data Source and Applications","The discriminant forest method of the present invention is suited for applications that require the ability to discriminate two classes of interest (e.g. signals, signatures or objects) from each other based upon a collection of measurable features. The DF classification method can be applied to any data consisting of tuples or feature vectors of continuous or discrete numbers. Given a training set consisting of feature vectors labeled as belonging to one class or another, the classification algorithms are able to automatically predict the class membership of a new feature vector. Because DF produces significantly lower error rates, it may be particularly valuable for applications in which errors can prove costly, such as medical and financial. The following is a representative list of example applications capable of using the DF of the present invention, including but not limited to the following:","Healthcare. Detection of diseases from X-Ray images, e.g. cancers, infections, coronary blockages. Detection of diseases from CT scans\/magnetic resonance imaging. Assessment of potential for developing various diseases based on patient history and metrics (e.g., height, weight, blood pressure, temperature, cholesterol, blood sugar, etc.) Diagnosis of diseases based upon observed symptoms.","Finance. Assessment of credit-worthiness of individuals based upon metrics like income, monthly debt, number of credit lines open, etc. Assessment of tax law compliance based upon metrics like deductions and amounts taken, income, past earnings and behaviors, etc. Predicting consumer purchases based on past history of consumer purchases and other consumer metrics.","Defense\/Homeland Security\/Counter-terrorism. Detection of shielded radiological sources from gamma ray spectra. Detection of chemical sources\/releases. Pathogen detection. Standoff detection of explosives based on Raman spectroscopy. Biometric identification based on, for example: images of faces, recordings of voice, fingerprints, gestures\/gait. Identification of important concepts from collected texts. Explosives detection from X-Rays.","Computer\/Information Technologies (including cyber-security). Detection of intrusions\/infiltration on computer networks. Detection of malicious code on computers. Detection of covert channels of communication over computer networks. Predicting whether a user will access a given website or web ad given a history of the user's past accesses.","Remote Sensing. Detection of chemicals in atmosphere based on various spectral measurements. Detection of land types based on overhead images. Detection of buildings, vehicles, structures, roads, and landmarks from overhead images. Obstacle avoidance (cars, planes, etc).","Manufacturing. Industrial parts inspection (including assembly line) to detect flaws and increase quality.","System aging\/failure source detection. Detection of defects on laser optics from images. Airframe inspection to detect emerging flaws indicative to potential failure. Infrastructure (e.g., tunnels, bridges, dams, buildings) inspection detect emerging flaws indicative to potential failure.","In addition, other illustrative applications may include: hidden signal detection; seismic event\/explosion discrimination and analysis; law enforcement: deployment strategies, hot spot detection\/prediction, handwriting identification; speech recognition\/speaker identification; natural language processing: document classification, POS tagging, semantic analysis.","The following references, cited herein, are incorporated by reference:\n\n","Turning now to the drawings,  generally shows a flowchart of an exemplary forest training method, indicated at reference character , used in the discriminant forest (DF) classification methodology and system of the present invention. Forest training begins at block , where a forest training set is first provided to a computerized system (not shown) for training the computerized system. In particular, the forest training set includes N feature vector and class label pairs, ({circumflex over (x)}\u03b5,\u0177\u03b5{0,1}) for i=1 to N, where {circumflex over (x)}is the feature vector selected from the available feature set, D, and \u0177, is the class label. It is appreciated that the forest training set may be provided in various ways, for example, as input from a user via a command-line or graphic user interface, or via access from a database having the forest training set stored thereon in a manner known in the art.","Next, at block , a determination is made whether to add a tree to the forest based on whether a desired forest size n has been reached or not.","If the desired forest size has not been reached, a new decision tree is added to the forest, and the algorithm proceeds to blocks  and . In this case, a tree training set is created at block  for training the added decision tree. In particular, as shown in block , N bootstrapped training samples are randomly selected with replacement from the forest training set to create the tree training set, (x\u03b5, y\u03b5{0,1}) for i=1 to N. As previously discussed in the Background, this technique is called bagging and is used to randomize growth of the trees. Even though each bagged training set (i.e. the tree training set) contains the same number of samples as the original training data (i.e. forest training set), its samples are randomly selected with replacement and are representative of approximately two-thirds of the original data.","And upon creating the tree training set, the added decision tree is then trained at block , which involves splitting tree nodes (i.e. decision nodes) and growing the tree. In particular, as will be described in  (for LDA-based node splitting) and in  (for AB-based node splitting), splitting of decision nodes is performed using a discriminant analysis (DA)-based technique, such as LDA or AB. In any case, upon completing training of the added decision tree, control is returned to block  to determine if additional trees are to be added and trained.","If in block  the desired forest size n has been reached, the algorithm proceeds to block  where forest training stops and n DA-based decision trees (either LDA-based or AB-based) of the discriminant forest are produced. At this point, the computerized system is trained and ready to perform classification using the n DA-based decision trees, as will be discussed for . In one exemplary embodiment, the computerized system may be further controlled to report statistics associated with the n LDA-based decision trees to a user, such as in a text-based format or visual format. In another exemplary embodiment, the computerized system may be controlled to provide the n LDA-based decision trees as machine-readable code capable of being executable on a second computerized system for predicting the classification of a sample of unknown class on the second computerized system. It is appreciated in this case that the second computerized second would then be considered \u201ctrained\u201d to perform classification predictions.","It is appreciated that the n DA-based decision trees of the discriminant forest produced in the course of training the computerized system, as well as the computerized system trained in accordance with the method described herein, may be embodied, implemented, and\/or functionalized in various ways known in the computational arts, such as for example software, hardware, firmware, integrated circuits, FPGA etc., (and having processor, memory, etc.) by which unknown data samples may be provided as input to the discriminant forest for predicting the classification of a sample of unknown class. For example, the DF method, including the training and predicting functionalities, may be embodied as software executable on a general purpose computer having a processor, memory, storage, and user interface (input, output).","LDA-Based Node Splitting and Tree Training",{"@attributes":{"id":"p-0072","num":"0077"},"figref":["FIGS. 2 and 3","FIG. 1","FIG. 2","FIG. 1","FIG. 3"],"b":["14","20","21","13","22","23","24","23","24","25"]},{"@attributes":{"id":"p-0073","num":"0078"},"figref":["FIG. 3","FIG. 3","FIG. 2","FIG. 2"],"b":["30","30","23","31","32","34","24","32"],"sub":["i","i","mode"],"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00004","he":"2.79mm","wi":"2.46mm","file":"US08306942-20121106-P00002.TIF","alt":"custom character","img-content":"character","img-format":"tif"}},"sup":"m"},"Next at Block , LDA coefficients, w and b, are computed by the computerized system over all Nsamples, x, contained in the non-terminal decision node projected onto the m features, x\u2032, to form a linear decision boundary defined by the LDA coefficients. In particular, w, is typically computed from:\n\n(\u03bc\u2032\u2212\u03bc\u2032)\u2003\u2003(21)\n\nand the intercept, b, is computed from:\n",{"@attributes":{"id":"p-0075","num":"0080"},"maths":{"@attributes":{"id":"MATH-US-00012","num":"00012"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mrow":[{"mi":"b","mo":"=","mrow":{"mrow":[{"mrow":[{"mo":"-","msup":{"mn":"0.5","mo":"*"}},{"msup":{"mi":"S","mrow":{"mo":"-","mn":"1"}},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msubsup":[{"mi":["\u03bc","\u2032"],"mn":"1"},{"mi":["\u03bc","\u2032"],"mn":"0"}],"mo":"-"}}}],"mo":["\u2062","\u2062"],"msup":{"mrow":{"mo":["(",")"],"mrow":{"msubsup":[{"mi":["\u03bc","\u2032"],"mn":"1"},{"mi":["\u03bc","\u2032"],"mn":"0"}],"mo":"+"}},"mi":"T"}},{"mi":"log","mo":"\u2061","mrow":{"mo":["(",")"],"mfrac":{"msub":[{"mi":"\u03c0","mn":"1"},{"mi":"\u03c0","mn":"0"}]}}}],"mo":"+"}},{"mi":"where","mo":"\u2062","mstyle":{"mtext":":"}}],"mo":["\u2062","\u2062"],"mstyle":{"mtext":{}}}},{"mrow":{"mo":["(",")"],"mn":"22"}}]},{"mtd":[{"mrow":{"msub":{"mi":["S","W"]},"mo":"=","mrow":{"msub":[{"mi":"S","mn":"0"},{"mi":"S","mn":"1"}],"mo":"+"}}},{"mrow":{"mo":["(",")"],"mn":"23"}}]},{"mtd":[{"mrow":{"msub":{"mi":["S","k"]},"mo":"=","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"msub":{"mi":["N","k"]}},"mo":"\u2062","mrow":{"mrow":{"mo":["(",")"],"mrow":{"msubsup":[{"mi":["x","ki","\u2032"]},{"mi":["\u03bc","k","\u2032"]}],"mo":"-"}},"mo":"\u2062","msup":{"mrow":{"mo":["(",")"],"mrow":{"msubsup":[{"mi":["x","ki","\u2032"]},{"mi":["\u03bc","k","\u2032"]}],"mo":"-"}},"mi":"T"}}}}},{"mrow":{"mo":["(",")"],"mn":"24"}}]},{"mtd":[{"mrow":{"msubsup":{"mi":["\u03bc","k","\u2032"]},"mo":"=","mrow":{"mfrac":{"mn":"1","msub":{"mi":["N","node"]}},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"msub":{"mi":["N","k"]}},"mo":"\u2062","msubsup":{"mi":["x","i","\u2032"]}}}}},{"mrow":{"mo":["(",")"],"mn":"25"}}]},{"mtd":[{"mrow":{"msub":{"mi":["\u03c0","k"]},"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}],"mi":["is","the","prior","probability","of","the","class"],"msup":{"mi":["k","th"]}}},{"mrow":{"mo":["(",")"],"mn":"26"}}]}]}}}},"It is appreciated, however, as discussed in the Summary, that for a large condition number, \u03ba, greater than a predetermined threshold value, the linear decision boundary is preferably a perpendicular bisector fitted between the class means. The condition number",{"@attributes":{"id":"p-0077","num":"0082"},"maths":{"@attributes":{"id":"MATH-US-00013","num":"00013"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mi":"\u03ba","mo":"=","mfrac":{"msqrt":[{"mrow":{"mrow":{"mo":["\uf603","\uf604"],"msub":{"mi":["\u03bb","max"]}},"mo":"\u2062","mstyle":{"mspace":{"@attributes":{"width":"0.2em","height":"0.2ex"}}}}},{"mrow":{"mo":["\uf603","\uf604"],"msub":{"mi":["\u03bb","min"]}}}]}},"mo":","}}},"br":{},"sub":["i","n\u00d7n "]},"And at block , the samples of the non-terminal decision node (\u201cparent node\u201d) are then split into two new decision nodes of a next level (\u201cchild nodes\u201d) by populating one of the child nodes with the samples of the parent node for which f(x\u2032)=wx\u2032+b\u22670 and the other child node with the samples of the parent node for which f(x\u2032)=wx\u2032+b<0.","For each terminal decision node of the current level of the added decision tree, the class of the terminal decision node is recorded as positive if its samples lie on the positive side of the linear decision boundary used to split its parent node. Otherwise the class of the terminal decision node is recorded as negative.","After node-splitting is performed for all non-terminal nodes of a current level at block , and all terminal nodes are recorded, the \u201ccurrent level\u201d is reset to the level of the child nodes, if any, and control returns to block  to determine if any non-terminal nodes exist in the new current level. In this manner, the added decision tree is grown as a LDA-based decision tree. Additional decision trees that are added to the discriminant forest at block  of , may be similarly grown according to the LDA-based node splitting and tree training described in , until a discriminant forest of n LDA-based decision trees is produced.",{"@attributes":{"id":"p-0081","num":"0086"},"figref":["FIG. 4","FIGS. 1-3"],"b":"40"},"In particular, the prediction operation begins at block  where sample feature vector, x, of unknown feature class is received as input from block . Additionally, at block , the root node of a first LDA-based decision tree is assigned as the current node, i.e. the variable \u201ccurrentNode.\u201d Next at block , each decision tree is considered, and at block , for a particular decision tree, a determination is made with the currentNode is terminal. If yes, then at block , x is assigned to the class of currentNode, a counter called \u201cclassCount\u201d for a particular class is incremented, and control is returned to block  to consider the next LDA-based decision tree. If at block  the currentNode is not terminal, then f(x\u2032)=wx\u2032+b is computed for the currentNode at block , and a determination is made at block  whether f(x\u2032) is greater than or equal to 0. If f(x\u2032) is greater than or equal to 0, then the left child node is selected at as the new current decision node, i.e. currentNode, at block . If f(x\u2032) is less than 0, the right child node is selected as the new current decision node, at block . In either case, control returns to block  to determine if the current decision tree is terminal. In this manner, additional votes for the various classes are accumulated. It is notable that the classCount values for the various feature classes is tracked at block  which computes the relative frequency of class assignments. A threshold  is used to make a final class prediction  based on the computed relative frequency of class assignments, i.e. the feature class having the most votes among all decision trees in the forest. The operation ends at block , at which point, the final class prediction may preferably be provided to a user. In this regard, it is notable that the prediction may be provided, for example, in graphical or text based format displayed on a computer monitor or provided in print form. The user may also be provided with, for example, performance assessment\/statistics in the form of ROC (Receiver Operating Characteristic) curve data, which describes the expected tradeoffs between false alarms and missed detections for general use of the classifier.","AB-Based Node Splitting and Tree Training","Similar to  discussed above,  illustrate a second exemplary case of AB-based node splitting employed in the tree training routine (block  of ) of the DF classification method of the present invention. In particular,  shows a flowchart of a second exemplary AB-based decision tree training method, generally indicated at reference character . At block , the AB-based decision tree training begins for the newly added decision tree with the tree training set created in block  of . A root node is then created at block  containing all samples in the tree training set. At block , new levels of decision nodes are then built by node splitting using a discriminate analysis technique, such as AB described in detail in . For purposes of node splitting, the root node is considered the first \u201ccurrent level,\u201d with subsequent current levels being progressively assigned to \u201cnext levels\u201d of newly formed \u201cchild nodes.\u201d As indicated by the return arrow from block  to block , additional levels of the decision tree are built by node splitting, until a determination is made at block  that all nodes in the current level are terminal, i.e. leaf nodes. It is appreciated that a decision node is terminal (i.e. a leaf node) if it is homogenous i.e. containing only samples of a single class, or some other predefined stopping criterion is satisfied, such as for example, containing fewer samples than a specified threshold, or exceeding a maximum count of decision nodes or tree levels (i.e. tree depth). If all nodes in the current level are terminal, then training of the added decision tree ends at block , and one AB-based decision tree is produced.",{"@attributes":{"id":"p-0084","num":"0089"},"figref":["FIG. 6","FIG. 6","FIG. 5","FIG. 5"],"b":["70","70","63","71","72","74","64","72"],"sub":["i","i","node"],"img":{"@attributes":{"id":"CUSTOM-CHARACTER-00005","he":"2.79mm","wi":"2.46mm","file":"US08306942-20121106-P00002.TIF","alt":"custom character","img-content":"character","img-format":"tif"}},"sup":"m"},"Next at Block , AB coefficients, w and b, are computed by the computerized system over all Nsamples, x, contained in the non-terminal decision node projected onto the m features, x\u2032, to form a linear decision boundary defined by the LDA coefficients. In particular, w, is computed from:\n\n(\u03bc\u2212\u03bc)\u2003\u2003(27)\n\nand the intercept, b, is computed from:\n",{"@attributes":{"id":"p-0086","num":"0091"},"maths":{"@attributes":{"id":"MATH-US-00014","num":"00014"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mrow":[{"mi":"b","mo":"=","mrow":{"mo":"-","mfrac":{"mrow":[{"mrow":[{"msup":[{"mi":["w","T"]},{"mrow":[{"msub":{"mi":"\u03bc","mn":"0"},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msup":{"mi":["w","T"]},"mo":["\u2062","\u2062"],"msub":{"mi":"S","mn":"1"},"mi":"w"}}},{"mn":["1","2"],"mo":"\/"}]}],"mo":"\u2062"},{"msup":[{"mi":["w","T"]},{"mrow":[{"msub":{"mi":"\u03bc","mn":"1"},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msup":{"mi":["w","T"]},"mo":["\u2062","\u2062"],"msub":{"mi":"S","mn":"0"},"mi":"w"}}},{"mn":["1","2"],"mo":"\/"}]}],"mo":"\u2062"}],"mo":"+"},{"msup":[{"mrow":[{"mo":["(",")"],"mrow":{"msup":{"mi":["w","T"]},"mo":["\u2062","\u2062"],"msub":{"mi":"S","mn":"0"},"mi":"w"}},{"mn":["1","2"],"mo":"\/"}]},{"mrow":[{"mo":["(",")"],"mrow":{"msup":{"mi":["w","T"]},"mo":["\u2062","\u2062"],"msub":{"mi":"S","mn":"1"},"mi":"w"}},{"mn":["1","2"],"mo":"\/"}]}],"mo":"+"}]}}},{"mi":"where","mo":"\u2062","mstyle":{"mtext":":"}}],"mo":["\u2062","\u2062"],"mstyle":{"mtext":{}}}},{"mrow":{"mo":["(",")"],"mn":"28"}}]},{"mtd":[{"mrow":{"msub":{"mi":["S","W"]},"mo":"=","mrow":{"mrow":[{"mi":"\u03bb","mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"msub":{"mi":"S","mn":"0"}},{"mrow":{"mo":["(",")"],"mrow":{"mn":"1","mo":"-","mi":"\u03bb"}},"mo":"\u2062","msub":{"mi":"S","mn":"1"}}],"mo":"+"}}},{"mrow":{"mo":["(",")"],"mn":"29"}}]},{"mtd":[{"mrow":{"msub":{"mi":["S","k"]},"mo":"=","mrow":{"mfrac":{"mn":"1","mrow":{"msub":{"mi":["N","k"]},"mo":"-","mn":"1"}},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"msub":{"mi":["N","k"]}},"mo":"\u2062","mrow":{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["x","i"]},{"mi":["\u03bc","k"]}],"mo":"-"}},"mo":"\u2062","msup":{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["x","i"]},{"mi":["\u03bc","k"]}],"mo":"-"}},"mi":"T"}}}}}},{"mrow":{"mo":["(",")"],"mn":"30"}}]},{"mtd":[{"mrow":{"mi":"\u03bb","mo":"=","mrow":{"munder":{"mi":["argmax","\u03bb"]},"mo":"\u2062","mrow":{"mo":["{","}"],"mfrac":{"mrow":[{"msup":{"mi":["w","T"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":"\u03bc","mn":"1"},{"mi":"\u03bc","mn":"0"}],"mo":"-"}}},{"msup":[{"mrow":[{"mo":["(",")"],"mrow":{"msup":{"mi":["w","T"]},"mo":["\u2062","\u2062"],"msub":{"mi":"S","mn":"0"},"mi":"w"}},{"mn":["1","2"],"mo":"\/"}]},{"mrow":[{"mo":["(",")"],"mrow":{"msup":{"mi":["w","T"]},"mo":["\u2062","\u2062"],"msub":{"mi":"S","mn":"1"},"mi":"w"}},{"mn":["1","2"],"mo":"\/"}]}],"mo":"+"}]}}}}},{"mrow":{"mo":["(",")"],"mn":"31"}}]},{"mtd":[{"mrow":{"msub":{"mi":["\u03bc","k"]},"mo":"=","mrow":{"mfrac":{"mn":"1","msub":{"mi":["N","k"]}},"mo":"\u2062","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"msub":{"mi":["N","k"]}},"mo":"\u2062","msub":{"mi":["x","i"]}}}}},{"mrow":{"mo":["(",")"],"mn":"32"}}]}]}}}},"It is appreciated, however, as discussed in the Summary, that for a large condition number, \u03ba, greater than a predetermined threshold value, the linear decision boundary is preferably a perpendicular bisector fitted between the class means, where",{"@attributes":{"id":"p-0088","num":"0093"},"maths":{"@attributes":{"id":"MATH-US-00015","num":"00015"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"mi":"w","mo":"=","mrow":{"msubsup":[{"mi":["\u03bc","\u2032"],"mn":"1"},{"mi":["\u03bc","\u2032"],"mn":"0"}],"mo":"-"}}},{"mrow":{"mo":["(",")"],"mn":"33"}}]},{"mtd":[{"mrow":{"mi":"b","mo":"=","mrow":{"mrow":[{"mo":"-","mfrac":{"mn":["1","2"]}},{"mo":["(",")"],"mrow":{"msubsup":[{"mi":["\u03bc","\u2032"],"mn":"0"},{"mi":["\u03bc","\u2032"],"mn":"1"}],"mo":"+"}}],"mo":["\u2062","\u2062"],"msup":{"mrow":{"mo":["(",")"],"mrow":{"msubsup":[{"mi":["\u03bc","\u2032"],"mn":"1"},{"mi":["\u03bc","\u2032"],"mn":"0"}],"mo":"-"}},"mi":"T"}}}},{"mrow":{"mo":["(",")"],"mn":"34"}}]}]}}},"br":{}},{"@attributes":{"id":"p-0089","num":"0094"},"maths":{"@attributes":{"id":"MATH-US-00016","num":"00016"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mrow":{"mi":"\u03ba","mo":"=","mfrac":{"msqrt":[{"mrow":{"mrow":{"mo":["\uf603","\uf604"],"msub":{"mi":["\u03bb","max"]}},"mo":"\u2062","mstyle":{"mspace":{"@attributes":{"width":"0.2em","height":"0.2ex"}}}}},{"mrow":{"mo":["\uf603","\uf604"],"msub":{"mi":["\u03bb","min"]}}}]}},"mo":","}}},"br":{},"sub":["i","n\u00d7n "]},"And at block , the samples of the non-terminal decision node (\u201cparent node\u201d) are then split into two new decision nodes of a next level (\u201cchild nodes\u201d) by populating one of the child nodes with the samples of the parent node for which f(x\u2032)=wx\u2032+b\u22670 and the other child node with the samples of the parent node for which f(x\u2032)=wx\u2032+b<0.","For each terminal decision node of the current level of the added decision tree, the class of the terminal decision node is recorded as positive if its samples lie on the positive side of the linear decision boundary used to split its parent node. Otherwise the class of the terminal decision node is recorded as negative.","After node-splitting is performed for all non-terminal nodes of a current level at block , and all terminal nodes are recorded, the \u201ccurrent level\u201d is reset to the level of the child nodes, if any, and control returns to block  to determine if any non-terminal nodes exist in the new current level. In this manner, the added decision tree is grown as a AB-based decision tree. Additional decision trees that are added to the discriminant forest at block  of , may be similarly grown according to the AB-based node splitting and tree training described in , until a discriminant forest of n AB-based decision trees is produced.",{"@attributes":{"id":"p-0093","num":"0098"},"figref":["FIG. 7","FIGS. 1"],"b":["5","6","80"]},"In particular, the prediction operation begins at block  where sample feature vector, y, of unknown feature class is received as input from block . Additionally, at block , the root node of a first AB-based decision tree is assigned as the current node, i.e. the variable \u201ccurrentNode.\u201d Next at block , each decision tree is considered, and at block , for a particular decision tree, a determination is made with the currentNode is terminal. If yes, then at block , x is assigned to the class of currentNode, and a vote is given, and control is returned to block  to consider the next AB-based decision tree. If at block  the currentNode is not terminal, then f(x\u2032)=wx\u2032+b is computed for the currentNode at block , and a determination is made at block  whether f(x\u2032) is greater than or equal to 0. If f(x\u2032) is greater than or equal to 0, then the left child node is selected at as the new current decision node, i.e. currentNode, at block . If f(x\u2032) is less than 0, the right child node is selected as the new current decision node, at block . In either case, control returns to block  to determine if the current decision tree is terminal. In this manner, additional votes for the various classes are accumulated. It is notable that votes for the various feature classes is thresholded at block  by a threshold value provided by block . This is used to make a final class prediction at . The operation ends at block , at which point, the final class prediction may preferably be provided to a user. In this regard, it is notable that the prediction may be provided, for example, in graphical or text based format displayed on a computer monitor or provided in print form. The user may also be provided with, for example, performance assessment\/statistics in the form of ROC (Receiver Operating Characteristic) curve data, which describes the expected tradeoffs between false alarms and missed detections for general use of the classifier.","While particular operational sequences, materials, temperatures, parameters, and particular embodiments have been described and or illustrated, such are not intended to be limiting. Modifications and changes may become apparent to those skilled in the art, and it is intended that the invention be limited only by the scope of the appended claims."],"GOVINT":[{},{}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated into and form a part of the disclosure, are as follows:",{"@attributes":{"id":"p-0059","num":"0064"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0060","num":"0065"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0061","num":"0066"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0062","num":"0067"},"figref":["FIG. 4","FIGS. 1-3"]},{"@attributes":{"id":"p-0063","num":"0068"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0064","num":"0069"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0065","num":"0070"},"figref":["FIG. 7","FIGS. 1"],"b":["5","6"]}]},"DETDESC":[{},{}]}
