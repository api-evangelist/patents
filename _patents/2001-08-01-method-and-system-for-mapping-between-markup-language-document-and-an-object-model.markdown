---
title: Method and system for mapping between markup language document and an object model
abstract: Mapping operations between a markup language document and an object model are executed in response to a request from a client application. The mapping operations include a read, write, update, or delete operation. To map the markup language document to the object model, mapping meta-data is used, which contains information as to how the markup language element maps to an attribute and/or a relationship of the object model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07089533&OS=07089533&RS=07089533
owner: OIC Acquisition I Corp
number: 07089533
owner_city: Redwood Shores
owner_country: US
publication_date: 20010801
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["This invention relates to the field of markup language and object models and, more specifically, to a method and a system for mapping data in a markup language document to an object model and for mapping an object in an object model to a markup language document document.","XML (extensible Markup Language) defines a standard language-independent textual format for representing data. On the other hand, object-oriented languages such as Java\u2122 (a trademark of Sun Microsystems), as well as other object-oriented languages such as those offered by Microsoft and Hewlett-Packard, represent data through objects and object models. An application object model or business object model represents an application's data through modelling the real-world domain objects of the application.","Using XML data in an object-oriented application through an application object model would be advantageous. However, the formats of XML data and object-oriented language are distinct. XML represents data as a plain text document composed of a series of elements in a hierarchical format whereas objects in an object-oriented application are composed of a rich set of data-types, pointers, application rules\/methods, inheritance and relationships to other objects.","XML parsers, such as Xerces\u2122 (a trademark of Apache), provide a prior solution for reading in and parsing XML data into Java. However, XML parsers only provide a mechanism for reading and parsing XML data into Java. For example, Simple API for XML (SAX) based parsers only produce a series of parse events. Document Object Model (DOM) based parsers only produce a parse tree representation of the data. These parsers do not provide application object models or provide support for inheritance or relationships in the object model.","It is therefore desirable to provide a method and system for mapping data in a markup language document to an object model as well as for mapping an object in an object model to a markup language document.","It is an object of the present invention to overcome one or more of the problems cited above.","It is an object of the invention to provide a method and system for mapping between markup language document and an object model.","The present invention uses mapping meta-data that defines how the data architecture of a markup language document maps to the object model system for mapping between the XML document and the object model","In accordance with an aspect of the present invention, there is provided a method for mapping data in a markup language document to an object model. The method comprises the steps of receiving a mapping request for mapping data in a markup language document having data architecture into an object model, and mapping, in response to the mapping request, the data into the object model using mapping meta-data which defines how the data architecture of the markup language document maps to the object model.","In accordance with another aspect of the present invention, there is provided a method for mapping an object in an object model to a markup language document. The method comprises the steps of receiving a mapping request for mapping one or more objects of an object model into a markup language document having data architecture and mapping, in response to the mapping request, the objects into the markup language document using mapping meta-data which defines how the object model maps to the data architecture of the markup language document.","In accordance with another aspect of the present invention, there is provided a mapping manager for mapping between a markup language document and an object model. The mapping manager comprises an executor for receiving a mapping request for mapping between a markup language document having data architecture and an object model, and a mapping executor for mapping, in response to the mapping request, between data of the markup language document and objects of the object model using mapping meta-data which defines how the data architecture of the markup language document maps to the object model. I","In accordance with an aspect of the present invention, there is provided a mapping system for mapping between a markup language document and an object model. The mapping system comprises an executor for receiving a mapping request for mapping between a markup language document having data architecture and an object model, a storage for storing mapping meta-data which defines how the data architecture of the markup language document maps to the object model, and a mapping executor for mapping, in response to the mapping request, between data of the markup language document and an object of the object model using the mapping meta-data.","Other aspects and features of the present invention will be readily apparent to those skilled in the art from a review of the following detailed description of preferred embodiments in conjunction with the accompanying drawings.","The present invention relates to mapping between a markup language document and an object model. A markup language document includes elements that are defined by tags, labels or similar indicators. The markup language may be XML, Standard Generalized Markup Language (SGML), Hyper Text Markup Language (HTML), Extensible HTML (XHTML). The following embodiments will be described using XML as an exemplary of the markup language. However, the applicability of the invention is not limited to XML or XML based technologies. An XML document has both a logical and a physical structure. Logically, the XML document is composed of declarations, elements, comments, character references, and processing instructions. The elements can contain text and other elements. XML documents are given a \u201ckey\u201d that uniquely identifies each XML document. Attributes in XML provide additional information regarding an element.","Embodiments of the present invention will be described using an XML file system which enables one to manipulate XML files, i.e., read, write, delete and update XML files.","An object model, such as Java, contains one or more object classes. An object class contains attributes, relationships and\/or methods. The attributes store primitive data such as integers, and also store simple types, such as String and Date. Relationships are references to other classes. The methods are paths of query execution. However, the applicability of the invention is not limited to Java or Java based technologies.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 4","FIG. 4"],"b":["400","420","440","400","420","440"]},"For example, the XML file  contains an employee element .The employee  contains four elements, employeeid , name , homeaddress , and phones . The data of the employeeid  shows that the employee's identification is \u201c1234\u201d. Each employee has unique identification. Thus, the data of the employeeid  is a key that can uniquely identify the XML file .","The homeaddress  contains one element, address . The address  contains two elements, city  and street . The phones  contains two elements, phone  and . Each of the phone  and  contains two elements, areacode  and number .","The employee  and the homeaddress  have a one to one relationship and the elements which construct the homeaddress  are contained within the employee . This relationship is referred to as an aggregate one-to-one relationship.","The employee  and the phones  have a one to many relationship and the elements which construct a collection of the phone ,  are contained within the employee . The relationship between the employee  and the phones  is referred to as an aggregate one-to-many collection relationship.","If the homeaddress  contains a key to identify another XML file which contains address data, the employee  and the homeaddress  have a one-to-one relationship.","If each of the phone  and the phone  has its own key to identify another XML file which contains a collection of phone data, the employee  and the phones  have a one-to-many relationship.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5","b":["500","400","420","440","500","502","504","506","502"]},"Employee  has a homeaddress attribute, the value of which references to a homeaddress object in Homeaddress .","Homeaddress  contains attributes, city and street. Phone#  contains the attributes, areacode and number.","The employee , homeaddress , and phone \u2013 correspond to Employee , Homeaddress  and Phone# , respectively.","Homeaddress  depends on Employee , and does not have a key that is used to identify a homeaddress object in Homeaddress . Employee  and Homeddress  have an aggregate one-to-one relationship. This relationship is shown in arrow ","Phone#  depends on Employee , and does not have a key that is used to identify a phone object in Phone# . Employee  and Phone#  have an aggregate one-to-many collection relationship. This relationship is shown in arrow ","If the employee  and the homeaddress  have a one-to-one relationship, Homeaddress  has a key to identify the homeaddress object of Homeaddress , and thus Employee  and Homeddress  have a one-to-one relationship.","If the employee  and the phones  have a one-to-many relationship, Phone#  has a key to identify the phone object, and Employee  and Phone#  have a one-to-many relationship.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 1","b":["100","100","101","102","103","104"]},"The XML session manager  maps XML files to an object model  of the application  and vice versa using mapping meta-data that defines how XML files map to the object model.","Using the exemplary XML file  illustrated in  and the exemplary object model  illustrated in , mapping meta-data will be described. The mapping meta-data defines how one or more elements in XML files map to the attributes and relationships in an object model.","(1) The mapping meta-data defines the XML element and the corresponding object class.","For example, the mapping meta-data includes information that Employee , Homeaddress  and Phone#  correspond to employee , homeaddress  and phones , respectively.","(2) The mapping meta-data defines the attribute of the object class and the corresponding XML element.","For example, the mapping meta-data defines that the attributes of Employee , employeeid, name, address, phones correspond to employeeid  of employee , name , homeaddress , phones . Similarly, the city attribute of Homeaddress  corresponds to city  of homeaddress , and the areacode attribute of Phone#  corresponds to areacode  of phones  and so on.","(3) The mapping meta-data may define the type of relationship that is represented by the attribute and its corresponding element if the attribute is a relationship.","The types of relationship may include a one-to-one, a one-to-many, an aggregate one-to-one, and an aggregate one-to-many collection relationship.","For example, mapping meta-data includes information that employee  and homeaddress  have an aggregate one-to-one relationship and Employee  and Homeddress  have an aggregate one-to-one relationship.","(4) For relationships, the mapping meta-data may define the referenced class and the XML elements used to define the relationship.","If the attribute is a relationship, the object class of the attribute is specified. This is one of the classes mapped by the mapping system . For one-to-one and one-to-many relationships, meta-data indicates which elements in this (source) class's XML document are used to construct a \u201ckey\u201d to the other (target) class's XML document. For aggregate one-to-one and aggregate one-to-many collection relationships, this information is not needed as referenced classes depend on parent classes.","(5) the mapping meta-data may have information regarding any transformations or conversion that should be applied to the XML data to convert it to the type of the object class. This information is used when the attribute is a simple attribute, such as a string, number or date, This information is being read from the XML file and the application object model does not provide enough information to the mapping system  to successfully perform the mapping. For example, in Java, an object may have an attribute that is declared of type \u201cNumber\u201d. \u201cNumber\u201d has a number of subclasses: Integer, Longer, Float.","The mapping system could generate any of these types from the XML data and put it in the corresponding object. However, in some cases, the developer may want to specify the exact type to be placed in the object. The mapping system allows the developer to specify the extract type to be placed in the object.","(6) The mapping meta-data may define the XML elements that defined the type of the object class, if the class is involved in inheritance.","Referring back to , the mapping meta-data storage  stores mapping meta-data, described above. As described above, mapping meta-data defines the relation between the architecture of an XML file and the architecture of an object model  of a client application .","The XML session manager  is a runtime component to manage an XML session object. The XML session object represents the application's point of contact into an XML system . The XML session object implements an XML session. The XML session includes mapping operations, such as read operations, write operations, delete operations and\/or update operations.","The XML session manager  manipulates objects or XML files to execute mapping operations.","In the read operation, the XML session manager  reads an XML file into the object model . In the write operation, the XML session manager  writes one or more objects of the object model into the corresponding one or more XML files.","When an object is changed in the object model, the update operation is executed. The XML session manager  updates the changes to the corresponding elements in one or more XML files. When an object is deleted from the object model, the delete operation is executed, The XML session manager  deletes the corresponding XML element or elements from the XML file.","Once the XML session is initialized, the XML session manager  executes the mapping operation using mapping meta-data. The functions of the XML session manager  are further describes in more detail below.","The client application  initializes the XML session by calling one or more methods implemented by the XML session object. When the XML session is initialized, the mapping meta-data is loaded to the XML session manager  from the mapping meta-data storage .","The runtime API  is an interface to link the client application  and the XML session manager . The runtime API  defines the XML session object.","The architecture mapping tool  is a tool that assists users in generating the mapping meta-data. Preferably, the mapping tool  has a graphical user interface (GUI). The mapping meta-data may be captured through an XML document that describes the mapping meta-data, or through an object model that represents the mapping meta-data. Further, the mapping meta-data may be specified through manually editing the XML file, or though application programming interface code.","The XML system  is a system that is able to manipulate XML data. It may be a file system that is capable of reading and writing. The XML system  may reside on the local hard drive, or on a server on a computer network, e.g., the Internet. In this embodiment, the XML system  is described as an XML file system containing XML files.","The XML parser  may be used to read the XML files.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 2","b":["102","102","201","202","203","204","205"]},"The XML session executor  is a runtime component to execute mapping operations. The XML query manager  is a runtime component to manage queries to the XML file system .The XML accessor  is a component to access an XML system. When the XML accessor  receives an XML file, the XML accessor  generates a row structure, such as a Hashtable or mapping table. An example of the row structure is shown in .",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 6","b":["400","602","602","604","604","602","606","606","1","2","1","606","608","2","606","610","608","610"]},"Referring back to , the XML descriptor  and the XML mapping manager  stores the mapping meta-data during the XML session. The XML descriptor  is a set of properties and mappings that describes how the object data is represented in an XML file. The XML descriptor  contains mappings from the class attribute to the XML element, as well as the transformation routines necessary for storing and retrieving attributes. The XML descriptor  acts as the link between the object model and the XML file system .","The XML mapping manager  accomplishes the storage and retrieval of an object's attributes in and from the XML representation. As shown in , the XML mapping manager  may include XML mappings , XML one-to-one mappings , XML one-to-many mappings , XML aggregate one-to-one mappings , and XML aggregate one-to-many collection mappings , when such relationships exist in the object model .","The XML mappings  handle the mapping between an object class and an XML element. The XML mappings  also handle the mapping between an attribute of an object class and an XML element.","The XML one-to-one mappings  handle the mapping of one-to-one relationships. The XML one-to-many mappings  handle the mapping of one-to-many relationships. The XML aggregate one-to-one mappings  handle the mapping of aggregate one-to-one relationships. The XML aggregate one-to-many collection mappings  handle the mapping of aggregation one-to-many collection relationships.","The following is one example of mapping operations. Referring to , the client application  requests the XML session manager  to read an object such as \u201cCUSTOMER\u201d object whose CUSTOMER NUMBER is \u201c5551212\u201d (step ). \u201c5551212\u201d is a key to uniquely identify the CUSTOMER object.","The key is passed to the XML file system  (step ). The XML file system  returns the XML file identified by this key to the XML session manager  (step ). This XML file contains the data corresponding to the CUSTOMER object with CUSTOMER NUMBER \u201c5551212\u201d.","The XML session manager  takes the XML file and constructs the appropriate CUSTOMER object (step ). More specifically, row structure corresponding to CUSTOMER is constructed. The XML descriptor  populates attributes with XML data. The data obtained from the XML file is inserted into the attributes as described in meta-data (step ). As a result, the object of CUSTOMER is outputted and passed to the client application .","Referring to , the client application  requests the XML session manager  to write CUSTOMER object whose CUSTOMER NUMBER is \u201c5551212\u201d (step ). As mentioned above, this CUSTOMER object has been defined in the object model  of the client application . The XML session uses the mapping meta-data that has been defined to map the CUSTOMER object and its attributes to an XML file for manipulate the object (step ). The mapping system  passes the corresponding XML document, along with its \u201ckey\u201d (5551212), to the XML file system  (step ).",{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 7","FIG. 4"],"b":["111","110","106","400","204","205"]},"In step , the application  requests the XML session manager  through the runtime API  () to read the XML file . The XML session executor  generates a read request to execute the read operation and forwards the request to the XML query manager  (step ).","In step , the XML query manager  queries the XML descriptor  the location of the XML file . The XML descriptor  uses the key to find the location of the XML file  and returns the location of the XML file  to the XML query manager  (step ).","The XML query manager  forwards the location of the XML file  to the XML accessor  (step ). The XML accessor  accesses the XML file system  to get the XML file (step ). The XML file system  returns to the XML accessor  the XML file  (step ).","The XML session manager  may use the XML parser  to read the XML file . When the XML parser  is used, the XML accessor  passes the XML files  to the XML parser  (step ). The XML parser  returns a parsed tree structure of the XML file  to the XML accessor  (step ). The XML accessor  generates row structure () of the XML file  based on the parse tree (step ).","The XML accessor  forwards the rows of the generated row structure to the XML query manager  (step ). The XML query manager  forwards these rows to the XML descriptor  (step ).","The XML descriptor  converts the rows into one or more objects (step ). The XML descriptor  then populates one or more attributes of the created objects (step ). The XML mapping manager  takes the value of each attributes and forwards it to the XML descriptor  (step ).","The XML descriptor  receives values and enters values to the attributes, and passes them to the XML query manager (step ). The XML query manager  then passes these objects to the XML session manager  (step ). The client application  obtains the objects associated with the XML file  whose employeeid is \u201c1234\u201d (step ).","The resultant objects are shown in . The objects include the four objects, employee , homeaddress , phone  and phone .The employee  has its unique key, employeeid \u201c1234\u201d.","The employee  corresponds to the employee . The homeaddress  corresponds to homeaddress . The phone  corresponds to the phone  and the phone  corresponds to the phone .",{"@attributes":{"id":"p-0092","num":"0091"},"figref":["FIG. 8","FIG. 9"],"b":["111","400","900","500"]},"In step , the application  requests the XML session manager  through the runtime API () to write the objects  of the object model . The XML session executor  generates a write request to execute the write operation and forwards it to the XML query manager  (step ).","In step , the XML query manager  queries to the XML descriptor  the location where the resultant XML file  is to be stored. The XML descriptor  uses the key to find the location and returns the location to the XML query manager  (step ).","The XML query manager  forwards the objects  along with the location to the XML accessor  (step ). The XML descriptor  takes a value of each attribute and forwards it to the XML mapping manager  (step ). The XML mapping manager  describes the relationship and forwards it to the XML descriptor  (step ).","The XML descriptor  creates row structure based on the mapping meta-data (step ). The XML descriptor  forwards the row structure to the XML query manager  (step ). The XML query manager  passes the row structure to the XML accessor  together with the location (step ). The XML accessor  creates XML file  based on the row structure (step S), and write it into the XML system  (step ).","The XML system  may return to the client application  an acknowledgement or an error message through the XML accessor  (step ), the XML query manager  (step ) and the XML session executor  (step ) (step ).","The update operation is executed through the similar process to the write operation. When an object is changed in the object model , the XML session executor  generates an update request to update the corresponding elements in the XML files.","The delete operation is executed thorough the similar process to the write operation. When an object is deleted from the object model, the XML session executor  generates a delete request to delete the corresponding elements in the XML files.","The meta-data storage  may be an XML file system. When the mapping meta-data is stored in XML files, the mapping system  may read the mapping meta-data into the XML descriptor  and the XML mapping manager  using a similar system as the XML session manager  as described above.","The following is another example showing mapping of a one-to-one relationship. A Project object has an attribute named \u201cmanager\u201d that represents a one-to-one relationship to a ProjectManager object. To map this relationship, the client application  indicates the Employee Number element as the \u201ckey\u201d for the XML document that will be used to build the ProjectManager.","The mapping meta-data for the attribute \u201cmanager\u201d indicates;\n\n","For example, the ProjectManagerEmployeeNumber element corresponds to the ProjectManager's EmployeeNumber element.","When reading in an XML document for a Project object, the mapping system  takes the value in the ProjectManagerEmployeeNumber element and uses it to create a \u201ckey\u201d to pass to the XML system . The XML system  returns the XML document corresponding to the appropriate element. The mapping system  then uses this XML document to build the ProjectManager object and places it into the Project's \u201cmanager\u201d attribute.","When writing a Project object into an XML document in the XML system , the mapping system  takes the ProjectManager object currently in the Project's \u201cmanager\u201d attribute and calculates the \u201ckey\u201d using the mapping meta-data for mapping ProjectManagerEmployeeNumber element.","According to the present invention, the XML data can be read into an object model and inheritance or relationships can be supported. Users can make use of XML data in an object-oriented application through an application object model. Also, the object model can be written into XML data.","The XML session manager of the present invention may be implemented by any hardware, software or a combination of hardware and software having the above described functions. The software code, either in its entirety or a part thereof, may be stored in a computer readable memory.","The above embodiments are described using XML as an example of a markup language. However, the applicability of the invention is not limited to XML or XML based technologies. The invention may be applied to other markup languages and technologies with or without appropriate modification as necessary or desired, and such application is within the scope of the invention.","Also, the above embodiments are described using Java technology as an example of an object based technology and language. However, the applicability of the invention is not limited to Java or Java based technologies. The invention may be applied to other object-based languages and technologies, such as those developed by Microsoft Corporation or Hewlett Packard, with or without appropriate modification as necessary or desired, and such application is within the scope of the invention.","Further, a computer data signal representing the software code which may be embedded in a carrier wave may be transmitted via a communication network. Such a computer readable memory and a computer data signal are also within the scope of the present invention, as well as the hardware, software and the combination thereof.","While particular embodiments of the present invention have been shown and described, changes and modifications may be made to such embodiments without departing from the true scope of the invention."],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will be further understood from the following description with reference to the drawings in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4","b":"400"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5","b":"400"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6","b":"400"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 9","b":"400"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
