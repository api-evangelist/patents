---
title: System, method, and computer program product for automatic power management verification
abstract: The present disclosure relates to a computer-implemented method for automatically generating a power management verification component. The method may include receiving one or more inputs including a power intent definition. The method may further include automatically generating a power management verification environment based upon, at least in part, the power intent definition, the power management verification environment including at least one of a driver and a monitor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08448112&OS=08448112&RS=08448112
owner: Cadence Design Systems, Inc.
number: 08448112
owner_city: San Jose
owner_country: US
publication_date: 20110408
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","DISCUSSION OF THE RELATED ART","SUMMARY OF INVENTION","DETAILED DESCRIPTION"],"p":["The present disclosure relates to power management, and more specifically, to a method for automatically generating a verification component for verifying power management aspects of an electronic design.","Most new chip designs have some low power features built in, for example the ability to turn off power to circuits that are not being used temporarily. Such designs may contain power management logic that performs the switching of supplies.","The power management design intent may be captured in a formal way using a standard format such as Common Power Format (CPF) or Unified Power Format (UPF). A variety of proprietary ad-hoc formats may be used as well. For the purposes of this disclosure, these formats and others are referred to herein as power intent definition files (PIDF). A PIDF file may define the various power domains, the different power modes each domain can be in, voltage levels associated with each mode and the sequences of operations needed to switch between power modes of each domain. It may also define interdependencies between modes of different domains.","Verifying that the design meets the specifications defined in the PIDF is a necessary task in the functional verification effort. Erroneous implementation of the power controller may likely impact functionality and may result in a catastrophic failure of the chip. Current state-of-the-art approaches for verifying power management are described below.","Modern system on chip (SoC) verification may be done in two distinct levels. For example, initial verification may be performed at the block or IP level, and final verification may be performed at the SoC level. At the block or IP level, power management may be external to the design under verification (DUV). It is therefore the responsibility of the test bench to supply the power control signals. This may be performed by a bus functional model (BFM) that provides an abstract implementation of the power management sub-system. The power management BFM may be manually created to match the PIDF specifications. Because the system needs to be verified in many operation modes, the power management BFM often include some randomization in picking the control operations and their timing.","At the SoC level, power management may be implemented by one or more controllers embedded in the DUV. At this level, the test bench needs to monitor the operation of the power management sub-system and ensure it adheres to the specification. A special monitor containing a shadow implementation of the power management logic may be added to the test bench. The monitor may report an error in case the DUV implementation disagrees with the monitors internal implementation. Such monitors are hand crafted, in view of the PIDF definition.","Metric driven functional verification is an advanced verification method that requires measuring the coverage achieved while executing the verification process. This type of verification is discussed in detail in \u201c\u201d, Carter, Hamilton B., and Hemmady, Shankar G., Springer, 2007. Coverage measurement is necessary to guide verification so that all functionally important combinations of features are exercised and verified. Because power management interacts with other aspects of functionality, it is important to measure the coverage of the power management operations. The code necessary to collect power management coverage is typically manually added to the test bench.","Low power design imposes a significant burden on the verification effort by requiring custom development of power management BFM, checker and coverage monitor. Because power management schemes tend to change between designs, little or no reuse of such verification components can be achieved.","In one or more embodiments of the present disclosure, a computer-implemented method for automatically generating a power management verification component is provided. The method may include receiving one or more inputs including a power intent definition and automatically generating a power management verification environment based upon, at least in part, the power intent definition, the power management verification environment including at least one of a driver and a monitor.","One or more of the following features may be included. In some embodiments, the driver may include a bus functional model (BFM) driver. The monitor may further include a coverage collector. The driver may include a driving controller configured to provide power control signals to a design under verification (DUV). The monitor may include a monitor controller configured to receive power control signals from a design under verification (DUV). The power management verification environment may further include a sequencer configured to generate one or more input test sequences. The power management verification environment may be generated, at least in part, using a parser configured to create an internal data structure representing one or more definitions found in the power intent definition. The internal data structure may undergo at least one of a synthesis phase and a code generation phase.","In one or more embodiments of the present disclosure, a system for automatically generating a power management verification component is provided. In some embodiments, the system may include a computing device having at least one processor configured to receive one or more inputs including a power intent definition. The processor may be further configured to automatically generate a power management verification environment based upon, at least in part, the power intent definition, the power management verification environment including at least one of a driver and a monitor.","One or more of the following features may be included. In some embodiments, the driver may include a bus functional model (BFM) driver. The monitor may further include a coverage collector. The driver may include a driving controller configured to provide power control signals to a design under verification (DUV). The monitor may include a monitor controller configured to receive power control signals from a design under verification (DUV). The power management verification environment may further include a sequencer configured to generate one or more input test sequences. The power management verification environment may be generated, at least in part, using a parser configured to create an internal data structure representing one or more definitions found in the power intent definition. The internal data structure may undergo at least one of a synthesis phase and a code generation phase.","In one or more embodiments of the present disclosure a computer-readable storage medium for automatically generating a power management verification component is provided. The computer-readable storage medium may have stored thereon instructions that when executed by a machine result in one or more operations. Operations may include receiving one or more inputs including a power intent definition and automatically generating a power management verification environment based upon, at least in part, the power intent definition, the power management verification environment including at least one of a driver and a monitor.","One or more of the following features may be included. In some embodiments, the driver may include a bus functional model (BFM) driver. The monitor may further include a coverage collector. The driver may include a driving controller configured to provide power control signals to a design under verification (DUV). The monitor may include a monitor controller configured to receive power control signals from a design under verification (DUV). The power management verification environment may further include a sequencer configured to generate one or more input test sequences. The power management verification environment may be generated, at least in part, using a parser configured to create an internal data structure representing one or more definitions found in the power intent definition. The internal data structure may undergo at least one of a synthesis phase and a code generation phase.","Additional features and advantages of embodiments of the present disclosure will be set forth in the description which follows, and in part will be apparent from the description, or may be learned by practice of embodiments of the present disclosure. The objectives and other advantages of the embodiments of the present disclosure may be realized and attained by the structure particularly pointed out in the written description and claims hereof as well as the appended drawings.","It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are intended to provide further explanation of embodiments of the invention as claimed.","Reference will now be made in detail to the embodiments of the present disclosure, examples of which are illustrated in the accompanying drawings. The present disclosure may, however, be embodied in many different forms and should not be construed as being limited to the embodiments set forth herein. Rather, these embodiments are provided so that this disclosure will be thorough and complete, and will fully convey the concept of the disclosure to those skilled in the art.","As will be appreciated by one skilled in the art, the present disclosure may be embodied as a method, system, or computer program product. Accordingly, the present disclosure may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, the present disclosure may take the form of a computer program product on a computer-usable storage medium having computer-usable program code embodied in the medium.","As used in any embodiment described herein, \u201ccircuitry\u201d may include, for example, singly or in any combination, hardwired circuitry, programmable circuitry, state machine circuitry, and\/or firmware that stores instructions executed by programmable circuitry. It should be understood at the outset that any of the operations and\/or operative components described in any embodiment herein may be implemented in software, firmware, hardwired circuitry and\/or any combination thereof.","Any suitable computer usable or computer readable medium may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer-usable, or computer-readable, storage medium (including a storage device associated with a computing device or client electronic device) may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer-readable medium may include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device. In the context of this document, a computer-usable, or computer-readable, storage medium may be any tangible medium that can contain, or store a program for use by or in connection with the instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program coded embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations of the present invention may be written in an object oriented programming language such as Java, Smalltalk, C++ or the like. However, the computer program code for carrying out operations of the present invention may also be written in conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","The present invention is described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","One or more hardware description languages may be used in accordance with the present disclosure. Some hardware description languages may include, but are not limited to, Verilog, VHDL, SystemC, SystemVerilog and Verilog-AMS. For example, one or more of the BFM's described herein may be written in using one or more of these languages. Various other hardware description languages may also be used as well. It should be noted that the verification component generated in accordance with the teachings of the present disclosure may be implemented in an HDL, or in a dedicated Hardware Verification Language (HVL) such as e, Vera or SystemVerilog test bench. In some embodiments, parts may be implemented using an assertion language such as PSL or SystemVerilog assertions (SVA).","Referring to , there is shown automatic power management verification process  that may reside on and may be executed by server computer , which may be connected to network  (e.g., the Internet or a local area network). Examples of server computer  may include, but are not limited to: a personal computer, a server computer, a series of server computers, a mini computer, and a mainframe computer. Server computer  may be a web server (or a series of servers) running a network operating system, examples of which may include but are not limited to: Microsoft\u00ae Windows\u00ae Server; Novell\u00ae NetWare\u00ae; or Red Hat\u00ae Linux\u00ae, for example. (Microsoft and Windows are registered trademarks of Microsoft Corporation in the United States, other countries or both; Novell and NetWare are registered trademarks of Novell Corporation in the United States, other countries or both; Red Hat is a registered trademark of Red Hat Corporation in the United States, other countries or both; and Linux is a registered trademark of Linus Torvalds in the United States, other countries or both.) Additionally\/alternatively, the automatic power management verification process may reside on and be executed, in whole or in part, by a client electronic device, such as a personal computer, notebook computer, personal digital assistant, or the like.","As will be discussed below in greater detail, automatic power management verification process  may receive one or more inputs including a power intent definition. Automatic power management verification process  may automatically generate a power management verification environment based upon, at least in part, the power intent definition, the power management verification environment including a driver and a monitor.","The instruction sets and subroutines of automatic power management verification process , which may include one or more software modules, and which may be stored on storage device  coupled to server computer , may be executed by one or more processors (not shown) and one or more memory modules (not shown) incorporated into server computer . Storage device  may include but is not limited to: a hard disk drive; a solid state drive, a tape drive; an optical drive; a RAID array; a random access memory (RAM); and a read-only memory (ROM). Storage device  may include various types of files and file types including but not limited, to hardware description language (HDL) files, which may contain the port type descriptions and executable specifications of hardware blocks.","Server computer  may execute a web server application, examples of which may include but are not limited to: Microsoft IIS, Novell Webserver\u2122, or Apache\u00ae Webserver, that allows for HTTP (i.e., HyperText Transfer Protocol) access to server computer  via network  (Webserver is a trademark of Novell Corporation in the United States, other countries, or both; and Apache is a registered trademark of Apache Software Foundation in the United States, other countries, or both). Network  may be connected to one or more secondary networks (e.g., network ), examples of which may include but are not limited to: a local area network; a wide area network; or an intranet, for example.","Server computer  may execute an electronic design automation (EDA) application (e.g., EDA application ), examples of which may include, but are not limited to those available from the assignee of the present application. EDA application  may interact with one or more EDA client applications (e.g., EDA client applications , , , ) for electronic design optimization.","Automatic power management verification process  may be a stand alone application, or may be an applet\/application\/script that may interact with and\/or be executed within EDA application . In addition\/as an alternative to being a server-side process, the automatic power management verification process may be a client-side process (not shown) that may reside on a client electronic device (described below) and may interact with an EDA client application (e.g., one or more of EDA client applications , , , ). Further, the automatic power management verification process may be a hybrid server-side\/client-side process that may interact with EDA application  and an EDA client application (e.g., one or more of client applications , , , ). As such, the automatic power management verification process may reside, in whole, or in part, on server computer  and\/or one or more client electronic devices.","The instruction sets and subroutines of EDA application , which may be stored on storage device  coupled to server computer  may be executed by one or more processors (not shown) and one or more memory modules (not shown) incorporated into server computer .","The instruction sets and subroutines of EDA client applications , , , , which may be stored on storage devices , , ,  (respectively) coupled to client electronic devices , , ,  (respectively), may be executed by one or more processors (not shown) and one or more memory modules (not shown) incorporated into client electronic devices , , ,  (respectively). Storage devices , , ,  may include but are not limited to: hard disk drives; solid state drives, tape drives; optical drives; RAID arrays; random access memories (RAM); read-only memories (ROM), compact flash (CF) storage devices, secure digital (SD) storage devices, and a memory stick storage devices. Examples of client electronic devices , , ,  may include, but are not limited to, personal computer , laptop computer , mobile computing device  (such as a smart phone, netbook, or the like), notebook computer , for example. Using client applications , , , , users , , ,  may access EDA application  and may allow users to e.g., utilize automatic power management verification process .","Users , , ,  may access EDA application  directly through the device on which the client application (e.g., client applications , , , ) is executed, namely client electronic devices , , , , for example. Users , , ,  may access EDA application  directly through network  or through secondary network . Further, server computer  (i.e., the computer that executes EDA application ) may be connected to network  through secondary network , as illustrated with phantom link line .","The various client electronic devices may be directly or indirectly coupled to network  (or network ). For example, personal computer  is shown directly coupled to network  via a hardwired network connection. Further, notebook computer  is shown directly coupled to network  via a hardwired network connection. Laptop computer  is shown wirelessly coupled to network  via wireless communication channel  established between laptop computer  and wireless access point (i.e., WAP) , which is shown directly coupled to network . WAP  may be, for example, an IEEE 802.11a, 802.11b, 802.11g, Wi-Fi, and\/or Bluetooth device that is capable of establishing wireless communication channel  between laptop computer  and WAP . Mobile computing device  is shown wirelessly coupled to network  via wireless communication channel  established between mobile computing device  and cellular network\/bridge , which is shown directly coupled to network .","As is known in the art, all of the IEEE 802.11x specifications may use Ethernet protocol and carrier sense multiple access with collision avoidance (i.e., CSMA\/CA) for path sharing. The various 802.11x specifications may use phase-shift keying (i.e., PSK) modulation or complementary code keying (i.e., CCK) modulation, for example. As is known in the art, Bluetooth is a telecommunications industry specification that allows e.g., mobile phones, computers, and personal digital assistants to be interconnected using a short-range wireless connection.","Client electronic devices , , ,  may each execute an operating system, examples of which may include but are not limited to Microsoft Windows, Microsoft Windows CE\u00ae, Red Hat Linux, or other suitable operating system. (Windows CE is a registered trademark of Microsoft Corporation in the United States, other countries, or both).","In some embodiments, automatic power management verification process  may provide for an automatic process of creating a power management universal verification component (UVC). The generated UVC may include a BFM-driver, checker and coverage monitor, which may all be configured to reflect one or more definitions found in a PIDF provided as an input. In this way, automatic power management verification process  may help to reduce development time by eliminating and\/or lessening manual development requirements. Automatic power management verification process  may also help to ensure that the verification code matches the design intent captured in the PIDF. In some embodiments, automatic power management verification process  may be used at all levels of verification, regardless of whether the power management sub-system is part of the design under verification (DUV).","In some embodiments, most of the information needed to construct the UVC may be available in the PIDF, however some degrees of freedom may remain (e.g., non-deterministic transitions, unspecified delays between transition, etc.). These may be further refined, optionally, by including a power definition constraint file as an additional input. The degrees of freedom that remain in the specification may be addressed in a number of ways. For example, for an input stimulus, constraint driven random generation of control values may be performed. For monitored signals, the monitor may accept any member of a non-deterministic transition set. When transition timing is unspecified, it may not be checked. When timing is specified in terms of bounds, timing may be checked to be within bounds. Features of automatic power management verification process  are provided in further detail hereinbelow.","Referring now to , an embodiment of the present disclosure depicting a power management UVC generator  is provided. As shown in , the main input file to the process may be a PIDF  (in this particular example a CPF file). One example of a CPF file is provided below.",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"7pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"set_cpf_version 1.0",{}]},{"entry":[{},"set_hierarchy_separator \u201c\/\u201d",{}]},{"entry":[{},"set_design top",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"7pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"create_power_domain ","-name domain_top -default",{}]},{"entry":[{},"create_power_domain ","-name domain_filter \\",{}]},{"entry":[{},{},"-instances fir31 \\",{}]},{"entry":[{},{},"-shutoff_condition {!pcm\/pso_en_}",{}]},{"entry":[{},"create_isolation_rule ","-name rule_iso_filter_default \\",{}]},{"entry":[{},{},"-from domain_filter \\",{}]},{"entry":[{},{},"-isolation_condition {!pcm\/iso_en_1} \\",{}]},{"entry":[{},{},"-exclude {fir31\/ack_1} \\",{}]},{"entry":[{},{},"-isolation_output low",{}]},{"entry":[{},"create_isolation_rule ","-name rule_iso_filter_high \\",{}]},{"entry":[{},{},"-from domain_filter \\",{}]},{"entry":[{},{},"-isolation_condition {!pcm\/iso_en_1} \\",{}]},{"entry":[{},{},"-pins {fir31\/ack_1} \\",{}]},{"entry":[{},{},"-isolation_output high",{}]},{"entry":[{},"create_state_retention_rule","-name rule_rtn_coef_reg \\",{}]},{"entry":[{},{},"-instances {fir31\/coef_reg} \\",{}]},{"entry":[{},{},"-restore_edge {pcm\/save_en_1}",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"7pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end_design",{}]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"In some embodiments, a hierarchical CPF file that may or may not have hierarchical outputs may be used. For example, a hierarchical block may have its own CPF and power modes that could be tracked separately from the system power mode. There may also be custom power mode control groups that may be tracked. The CPF may grouped hierarchically and by domain.","In some embodiments, UVC generator  may receive a secondary input in the form of an optional power definition constraint file . Power definition constraint file  may add timing information to the control transitions. In some embodiments, power definition constraint file  may contain additional information that is needed by the synthesis process and is not present in PIDF file . In some embodiments, the optional power definition constrain file  may specify minimal and maximal transition times as either absolute times, or clock cycles of a specified clock. An example constraint file is provided below.",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"\/\/ This file may contain the constraints to ",{}]},{"entry":[{},{},"synthesize power controllers",{}]},{"entry":[{},{},"\/\/ Each constraint may provide a minimal ",{}]},{"entry":[{},{},"and maximal time delay for",{}]},{"entry":[{},{},"\/\/ a specific transition",{}]},{"entry":[{},{},"pgen_constraints power_control",{}]},{"entry":[{},{},"begin",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"\u2003-iso_before_pwr_dn ","[2:6]",{}]},{"entry":[{},{},"\u2003-iso_after_pwr_up ","[2:4]",{}]},{"entry":[{},{},"\u2003-ret_after_iso ","[1:3]",{}]},{"entry":[{},{},"\u2003-pwr_dn_after_ret ","[3:5]",{}]},{"entry":[{},{},"\u2003-restore_after_pwr_up","[1:2]",{}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"end",{}]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"The example constraint file is provided above merely for exemplary purposes. In some embodiments, domain specific constraints may be included as well. For example, a large domain may allow more time for the transition from off-on than a small domain. Numerous other constraint file types are also within the scope of this disclosure. It should be noted that the power intent and constraint data may be captured in a single file, as well as split across multiple files without departing from the scope of the present disclosure.","In some embodiments, UVC generator  may include an input parser , which may be configured to receive at least one of PIDF file  and constraint file . Input parser  may create an internal data structure  representing the definitions found in PIDF file . Internal data structure  may list the power domains, the legal states each domain can be in and the legal transitions between the power states. If a constraint file is present (e.g., constraint file ), internal data structure  may be annotated by attributes and values found in constraint file . For example, the minimum and maximum transition times may be annotated on internal data structure  representing a transition between power domain states.","In some embodiments, internal data structure  may then be processed by a synthesis phase  that may determine the necessary control variables, the values representing each state and the constraints representing interdependent relationships. The output of synthesis phase  may be further annotation of the internal data structure  with the inferred results.  depicts some of the information inferred in internal data  structure as a result of processing the example inputs. The internal data structure  may be configured to capture the existing power domains, along with their rules and constraints. During synthesis phase  this information may be used to infer a controller state machine for each power domain. The controller state machine may have constraints imposed (illustrated by the interior lines inside the circle shown in the figure). These may be resolved dynamically for driving, and checked with respect to the actual execution timing.","In some embodiments, synthesis phase  may be followed by a code generation phase . The code generation phase  may traverse internal data structure  and create code  in a verification language that implements the UVC. In one particular embodiment, e code may be generated. However, code in other verification languages including but not limited to SystemVerilog and SystemC may be generated similarly.","In some embodiments, the information captured in PIDF file  may be provided as an input into an independent front end processor, such as a simulator front end. The independent front end processor may then provides an application programming interface (API), which may be used by UVC generator  to interrogate the power intent data and represent it in the internal data structures mentioned above.","Referring now to , an exemplary embodiment depicting a generated UVC architecture  is depicted. In some embodiments, the architecture may follow a methodology such as Universal Verification Methodology (UVM).","In some embodiments, generated UVC architecture  may include a BFM-driver  and a monitor  that may be activated independently. The driver path may be active in cases where the test bench needs to drive power control signals into the DUV (e.g., when the power management sub-system is external to the DUV).","In some embodiments, the driver path may consist of a sequencer  that may be configured to receive a list of commands from a test definition file  that is external to the UVC. Each such command may specify a desired change in the power control state, but may not specify the exact timing or intermediary steps necessary to achieve that state. In some embodiments, sequencer  may select commands from the list one at a time, perform necessary random generation to fill in details omitted by the command and pass the command on to BFM . In order to perform such functions, sequencer  may inspect the power state as maintained by BFM , and optionally perform search queries. Some search queries could include but are not limited to \u201cfind the shortest path from the current state to state X\u201d, \u201cfind the path least visited from current state to mode Y\u201d, etc.","In some embodiment, BFM  may include a driving controller, which may be configured as a state machine that encodes the required power control transitions. In this way, the driving controller may perform a sequence of operations to get the state machine to the state specified by the command. As a side effect the power control signals may be changing values, which may provide the power control stimuli needed to drive the DUV.","In some embodiments, sequencer  may be a software sequencer used to control power in systems where such control is implemented by embedded software. In this way, sequencer  may trigger a software module that is part of the embedded software implementation, in order to switch power modes in the system. Such triggering may be initiated by software sequencer , by means of writing to a memory mapped register or generating an interrupt.","In some embodiments, a virtual sequencer may be created. A virtual sequencer may be used to synchronize the operation of lower level sequences, such as a hardware control and a software control sequences.","In some embodiments, monitor  may contain a monitor controller, which may be an independent copy of the state machine encoding the power control transitions. The monitor path may always be on, and may be configured to passively monitor the power control signals. The monitor controller may switch states according to the power control signals value changes. In case a change is unexpected, within the current state of the machine, monitor  may issue an error message indicating that the implementation doesn't match the specified power management scheme. The monitor controller may further include coverage collector  that may register each state visitation and state transition the monitor controller performs. The coverage data collected may be saved to a standard coverage database for analysis.","One possible example of sample BFM code, implemented in e is provided below.",{"@attributes":{"id":"p-0071","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"7pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"package pcgen;",{}]},{"entry":[{},"unit pcgen_bfm {",{}]},{"entry":[{},"\u2003-- Reference to the signal map",{}]},{"entry":[{},"\u2003!p_smp\u2003 : pcgen_smp;",{}]},{"entry":[{},"\u2003-- Reference to the sequence driver",{}]},{"entry":[{},"\u2003!p_driver\u2003 : pcgen_driver_u;",{}]},{"entry":[{},"\u2003-- Current data item",{}]},{"entry":[{},"\u2003transaction\u2003 : pcgen_transaction;",{}]},{"entry":[{},"\u2003connect_pointers( ) is also {",{}]},{"entry":[{},"\u2003\u2003p_driver.p_smp = p_smp;",{}]},{"entry":[{},"\u2003};",{}]},{"entry":[{},"\u2003-- Run phase",{}]},{"entry":[{},"\u2003---------------------------",{}]},{"entry":[{},"\u2003run( ) is also { ",{}]},{"entry":[{},"\u2003\u2003start initiate_power_cycle( );",{}]},{"entry":[{},"\u2003};",{}]},{"entry":[{},"\u2003---------------------------",{}]},{"entry":[{},"\u2003-- Gets transactions from the driver",{}]},{"entry":[{},"\u2003-- and passes them to the BFM.",{}]},{"entry":[{},"\u2003initiate_power_cycle( ) @p_smp.clk is {",{}]},{"entry":[{},"\u2003\u2003while TRUE {",{}]},{"entry":[{},"\u2003\u2003\u2003wait @p_smp.powerdown_e;",{}]},{"entry":[{},"\u2003\u2003\u2003out(sys.time, \u201c --> pcgen_uvc: Start initiate_power_cycle...\u201d);",{}]},{"entry":[{},"\u2003\u2003\u2003power_sequence( );",{}]},{"entry":[{},"\u2003\u2003};",{}]},{"entry":[{},"\u2003};",{}]},{"entry":[{},"\u2003power_sequence( ) @p_smp.clk is {",{}]},{"entry":[{},"\u2003\u2003out(sys.time, \u201c --> pcgen_uvc: Receive powerdown-request ...\u201d);",{}]},{"entry":[{},"\u2003\u2003wait [5]*cycle;",{}]},{"entry":[{},"\u2003\u2003emit p_smp.start_pso_cycle_e;",{}]},{"entry":[{},"\u2003\u2003out(sys.time, \u201c --> pcgen_uvc: Start of PSO cycle...\u201d);",{}]},{"entry":[{},"\u2003\u2003wait [transaction.pctrl_params.initial_delay]*cycle ;",{}]},{"entry":[{},"\u2003\u2003out(sys.time, \u201c --> pcgen_uvc: ISO-en signal...\u201d);",{}]},{"entry":[{},"\u2003\u2003\u2002p_smp.iso_en_port_sig$ = 1;",{}]},{"entry":[{},"\u2003\u2003wait [transaction.pctrl_params.ret_after_iso]*cycle ;",{}]},{"entry":[{},"\u2003\u2003out(sys.time, \u201c --> pcgen_uvc: Retention-en signal...\u201d);",{}]},{"entry":[{},"\u2003\u2002\u2003p_smp.save_en_port_sig$ = 1;",{}]},{"entry":[{},"\u2003\u2003wait [transaction.pctrl_params.iso_before_pwr_dn]*cycle ;",{}]},{"entry":[{},"\u2003\u2003out(sys.time, \u201c --> pcgen_uvc: PSO-en signal...\u201d);",{}]},{"entry":[{},"\u2003\u2002\u2003p_smp.power_shutoff_port_sig$ = 1;",{}]},{"entry":[{},"\u2003\u2003wait [transaction.pctrl_params.pso_duration]*cycle ;",{}]},{"entry":[{},"\u2003\u2003out(sys.time, \u201c --> pcgen_uvc: Power-Up signal...\u201d);",{}]},{"entry":[{},"\u2003\u2003\u2002p_smp.power_shutoff_port_sig$ = 0;",{}]},{"entry":[{},"\u2003\u2003wait [transaction.pctrl_params.restore_after_pwr_up]*cycle ;",{}]},{"entry":[{},"\u2003\u2003out(sys.time, \u201c --> pcgen_uvc: Restore-en signal...\u201d);",{}]},{"entry":[{},"\u2003\u2003\u2002p_smp.save_en_port_sig$ = 0;",{}]},{"entry":[{},"\u2003\u2003wait [transaction.pctrl_params.iso_after_pwr_up]*cycle ;",{}]},{"entry":[{},"\u2003\u2003out(sys.time, \u201c --> pcgen_uvc: ISO-disable signal...\u201d);",{}]},{"entry":[{},"\u2003\u2002\u2003p_smp.iso_en_port_sig$ = 0;",{}]},{"entry":[{},"\u2003\u2003wait [4]*cycle;",{}]},{"entry":[{},"\u2003};",{}]},{"entry":[{},"};"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"One possible example of sample code used to implement the controller state machine of the monitor is provided below. Again, this sample code is merely provided as one possible example and is not intended to limit the scope of the present disclosure.",{"@attributes":{"id":"p-0073","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"7pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"package pcgen;",{}]},{"entry":[{},"type pcgen_mon_fsm_state_t: [",{}]},{"entry":[{},"\u2003PWR_UP_S, PSO_RQ1_S, PSO_RQ2_S, ISO_EN_S,",{}]},{"entry":[{},"\u2003RET_S, PSO_S, PSO_DIS_S, RES_S, ISO_DIS_S",{}]},{"entry":[{},"];",{}]},{"entry":[{},"unit pcgen_monitor {",{}]},{"entry":[{},"\u2003!p_smp : pcgen_smp;",{}]},{"entry":[{},"\u2003-- The following may be used to control whether checks and coverage",{}]},{"entry":[{},"\u2003-- collection are performed by the monitor.",{}]},{"entry":[{},"\u2003has_checks : bool;",{}]},{"entry":[{},"\u2003\u2003keep soft has_checks == TRUE;",{}]},{"entry":[{},"\u2003has_coverage : bool;",{}]},{"entry":[{},"\u2003\u2003keep soft has_coverage == TRUE;",{}]},{"entry":[{},"\u2003-- State variable for embedded state machine",{}]},{"entry":[{},"\u2003state :pcgen_mon_fsm_state_t;",{}]},{"entry":[{},"\u2003run( ) is also {",{}]},{"entry":[{},"\u2003\u2003state = PWR_UP_S; -- initial state",{}]},{"entry":[{},"\u2003\u2003start mon_fsm( );",{}]},{"entry":[{},"\u2003};",{}]},{"entry":[{},"\u2003mon_fsm( ) @p_smp.clk is {",{}]},{"entry":[{},"\u2003\u2003while TRUE {",{}]},{"entry":[{},"\u2003\u2003\u2003case state {",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003PWR_UP_S: {",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003wait @p_smp.powerdown_e;",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003state = PSO_RQ1_S;",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003};",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003PSO_RQ1_S: {",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003wait [5]; -- deterministic",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003state = PSO_RQ2_S;",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003};",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003PSO_RQ2_S: {",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003wait rise(p_smp.iso_en_port_sig$);",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003state = ISO_EN_S;",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003};",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003ISO_EN_S: {",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003wait rise(p_smp.save_en_port_sig$);",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003state = RET_S;",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003};",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003RET_S: {",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003wait rise(p_smp.power_shutoff_port_sig$);",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003state = PSO_S;",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003};",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003PSO_S: {",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003wait fall(p_smp.power_shutoff_port_sig$);",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003state = PSO_DIS_S;",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003};",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003PSO_DIS_S: {",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003wait fall(p_smp.save_en_port_sig$);",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003state = RES_S;",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003};",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003RES_S: {",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003wait fall(p_smp.iso_en_port_sig$);",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003state = ISO_DIS_S;",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003};",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003ISO_DIS_S: {",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003wait cycle;",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003state = PWR_UP_S;",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003};",{}]},{"entry":[{},"\u2003\u2003\u2003};",{}]},{"entry":[{},"\u2003\u2003};",{}]},{"entry":[{},"\u2003};",{}]},{"entry":[{},"};"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"One possible example of sample code used to perform monitor checking with an embedded state machine is provided below.",{"@attributes":{"id":"p-0075","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"extend has_checks pcgen_monitor {",{}]},{"entry":[{},"\u2003-- This part may implement checking, using the ",{}]},{"entry":[{},"embedded state machine",{}]},{"entry":[{},"\u2003run( ) is also {",{}]},{"entry":[{},"\u2003\u2003start mon_checker( );",{}]},{"entry":[{},"\u2003};",{}]},{"entry":[{},"\u2003mon_checker( ) @p_smp.clk is {",{}]},{"entry":[{},"\u2003\u2003while TRUE {",{}]},{"entry":[{},"\u2003\u2003\u2003check that state==PWR_UP_S => (",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.iso_en_port_sig$ == 0 and",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.power_shutoff_port_sig$ == 0 and",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.save_en_port_sig$ == 0",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003) ;",{}]},{"entry":[{},"\u2003\u2003\u2003check that state==ISO_EN_S => (",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.iso_en_port_sig$ == 1 and",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.power_shutoff_port_sig$ == 0 and",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.save_en_port_sig$ == 0",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003) ;",{}]},{"entry":[{},"\u2003\u2003\u2003check that state==RET_S => (",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.iso_en_port_sig$ == 1 and",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.power_shutoff_port_sig$ == 0 and",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.save_en_port_sig$ == 1",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003) ;",{}]},{"entry":[{},"\u2003\u2003\u2003check that state==PSO_S => (",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.iso_en_port_sig$ == 1 and",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.power_shutoff_port_sig$ == 1 and",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.save_en_port_sig$ == 1",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003) ;",{}]},{"entry":[{},"\u2003\u2003\u2003check that state==PSO_DIS_S => (",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.iso_en_port_sig$ == 1 and",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.power_shutoff_port_sig$ == 0 and",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.save_en_port_sig$ == 1",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003) ;",{}]},{"entry":[{},"\u2003\u2003\u2003check that state==RES_S => (",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.iso_en_port_sig$ == 1 and",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.power_shutoff_port_sig$ == 0 and",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.save_en_port_sig$ == 0",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003) ;",{}]},{"entry":[{},"\u2003\u2003\u2003check that state == ISO_DIS_S => (",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.iso_en_port_sig$ == 0 and",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.power_shutoff_port_sig$ == 0 and",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003p_smp.save_en_port_sig$ == 0",{}]},{"entry":[{},"\u2003\u2003\u2003\u2003) ;",{}]},{"entry":[{},"\u2003\u2003\u2003wait cycle; ",{}]},{"entry":[{},"\u2003\u2003};",{}]},{"entry":[{},"\u2003};",{}]},{"entry":[{},"};"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The code provided above is merely an example showing some of the possible checking approaches that may be utilized in accordance with this disclosure. For example, in some embodiments the checking may also check that clocks\/resets are stable during power off\/standby, etc. In some embodiments, a design aware tool may be configured to generate configuration information for the process described herein. This could be used to check that the clocks\/resets are stable and\/or may specify the clocks\/resets that may need to be stable when a domain powers off.","Additionally and\/or alternatively, in the case of multiple isolation rules, the process may be configured to check that once a control condition changes, all other control conditions may also change. Similarly, equivalent control signals may also be verified.","While the example above performs checking as imperative verification code in the e language, such checking can be constructed, in full or in part, by using assertion languages, which may include but are not limited to PSL and SVA.","One possible example of sample code used to perform monitor coverage of the power controller states is provided below.",{"@attributes":{"id":"p-0080","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"7pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"extend has coverage pcgen_monitor {",{}]},{"entry":[{},"\u2003-- This part may implement coverage of the power controller states",{}]},{"entry":[{},"\u2003event pcgen_mon_cov is @p_smp.clk;",{}]},{"entry":[{},"\u2003cover pcgen_mon_cov is {",{}]},{"entry":[{},"\u2003\u2003item state;",{}]},{"entry":[{},"\u2003\u2003transition state using illegal = not (",{}]},{"entry":[{},"\u2003\u2003\u2003(prev_state == PWR_UP_S and state == PSO_RQ1_S) or",{}]},{"entry":[{},"\u2003\u2003\u2003(prev_state == PSO_RQ1_S and state == PSO_RQ2_S) or",{}]},{"entry":[{},"\u2003\u2003\u2003(prev_state == PSO_RQ2_S and state == ISO_EN_S) or",{}]},{"entry":[{},"\u2003\u2003\u2003(prev_state == ISO_EN_S and state == RET_S) or",{}]},{"entry":[{},"\u2003\u2003\u2003(prev_state == RET_S and state == PSO_S) or",{}]},{"entry":[{},"\u2003\u2003\u2003(prev_state == PSO_S and state == PSO_DIS_S) or",{}]},{"entry":[{},"\u2003\u2003\u2003(prev_state == PSO_DIS_S and state == RES_S) or",{}]},{"entry":[{},"\u2003\u2003\u2003(prev_state == RES_S and state == ISO_DIS_S) or",{}]},{"entry":[{},"\u2003\u2003\u2003(prev_state == ISO_DIS_S and state == PWR_UP_S) or",{}]},{"entry":[{},"\u2003\u2003\u2003(prev_state == state)",{}]},{"entry":[{},"\u2003\u2003);",{}]},{"entry":[{},"\u2003};",{}]},{"entry":[{},"};"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"In some embodiments, the power management UVC may be suitable for integration in a verification environment for performing simulation based functional verification of low power design. The same UVC may serve to verify an IP block with external power management, as well as an SoC that integrates many blocks and a power management sub-system. Using a single UVC for the various test benches ensures consistency. Having the UVC automatically generated from a CPF specification ensures adherence to the specification.","Referring now to , an embodiment of a typical verification setup  for an IP block is provided. In some embodiments, power management UVC  may be integrated into a verification environment  that wraps around the IP block. Verification environment  may drive and monitor some or all of the blocks input and output ports, however this particular diagram only shows the power related ports. The power related ports may be hooked up to the outputs of the power management UVC BFM .","In some embodiments, test environment  may be driven by a test definition file  that may specify a top level sequence of events. The top level sequence may be executed by multi-channel sequencer , which may be the central point of control for all the DUV inputs. Power management related commands may be passed on to the power management UVC  for execution. In this way, a complex test involving multiple functional units as well as power management may be achieved.","In some embodiments, the power signals may be connected back to UVC monitor . Monitoring the sequence of operations may allow for coverage to be collected and stored. Coverage may then be analyzed to ensure power management was exercised sufficiently.","Referring now to , an embodiment of a typical verification setup  for a low power SoC is provided. In some embodiments, the SoC may include multiple power domains ,  and a power management sub-system  that may be configured to control the power supplied to each domain. Power management sub-system  may implement the CPF specification regarding existing power modes and the sequencing of operations for switching between modes. The SoC may have some control inputs that affect power modes, for instance a pin that can force the SoC into hibernation. These inputs may be connected to power management sub-system  internally. They may be driven by the test bench as determined by the executing test.","In some embodiments, power management UVC  may be integrated into the SoC test environment  in a passive mode (e.g., it may not drive values, only read them). As shown in , the power management UVC  may be operatively connected to the inputs and outputs of power management sub-system . Power management UVC  may be configured to monitor these inputs and outputs and to trace the control operations using the monitor's  internal controller state machine. In some embodiments, monitor  may report errors if the sequence of power control operations fails to match the specification. Monitor  may also collect power mode state visitation and state transition coverage. The coverage may be saved in a database for analysis.","Referring now to , exemplary output displays  and  are provided. Display  depicts an example of a waveform of power control signals from the power management UVC when it is in driving mode. More specifically, display  depicts the output of a driver BFM (the control signals switching power modes). Display  depicts a collected coverage example, which shows the coverage results collected by the monitor of the power management UVC.","Referring now to , an exemplary flowchart  depicting operations consistent with the present disclosure is provided. Operations may include receiving one or more inputs including a power intent definition (). Operations may further include automatically generating a power management verification environment based upon, at least in part, the power intent definition, the power management verification environment including a driver and a monitor (). Numerous additional operations are also within the scope of the present disclosure.","Some or all of the teachings of the automatic power management verification process described herein may be integrated with other universal verification components (e.g., verification components adhering to the Universal Verification Methodology (UVM)). Additionally, the automatic power management verification process may provide the ability to connect various power components to other verification components. For example, a particular subsystem unit may be related to one or more of the power units. Further, it should be noted that the power aspect described herein may be connected to other aspects of the verification environment. For example, upon a particular change in power\u2014issue a reset, etc. Moreover, the present disclosure is may be extended in a variety of different ways. For example, some users may want some checks that are not shown in this disclosure. In this way, the present disclosure may allow for additional changes not expressly described herein (e.g. alterations to the e code, etc.).","It will be apparent to those skilled in the art that various modifications and variations can be made in the embodiments of the present disclosure without departing from the spirit or scope of the present disclosure. Thus, it is intended that embodiments of the present disclosure cover the modifications and variations provided they come within the scope of the appended claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are included to provide a further understanding of embodiments of the present disclosure and are incorporated in and constitute a part of this specification, illustrate embodiments of the present disclosure and together with the description serve to explain the principles of embodiments of the present disclosure.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
