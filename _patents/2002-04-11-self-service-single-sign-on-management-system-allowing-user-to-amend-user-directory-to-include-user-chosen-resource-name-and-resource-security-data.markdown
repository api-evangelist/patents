---
title: Self service single sign on management system allowing user to amend user directory to include user chosen resource name and resource security data
abstract: A method for directory enabled, self service, single sign on user account management, the method implemented in conjunction with a directory, the directory comprising resource directory entries and user directory entries. Exemplary embodiments include receiving, from a user through a browser, an SSO user ID and SSO password of the user, the SSO password being known only to the user, retrieving from the directory, in dependence upon the SSO user ID and SSO password, a user directory entry for the user, and creating, in dependence upon the user directory entry, a new mapping of a resource to the SSO user ID.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07016959&OS=07016959&RS=07016959
owner: International Business Machines Corporation
number: 07016959
owner_city: Armonk
owner_country: US
publication_date: 20020411
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS","Introduction","Definitions","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","The field of the invention is data processing, or, more specifically, methods, systems, and products for directory enabled, self service, single sign on user account management.","2. Description of Related Art","Systems in present art provide single sign on services for users. One example of such a system is the IBM Secure Way Policy Director (\u201cPD\u201d) Single Sign On (\u201cSSO\u201d) solution which allows users access to resources, such as secure URIs requiring user authentication, regardless of the location of the resource, and the user's credentials (resource user ID and resource password) for that resource, all of which is accomplished using only one initial login with SSO logon credential, an SSO user ID and an SSO logon password. After an initial web browser login challenge to receive and verify the SSO logon credentials, any further login challenges or requirements, from different back-end servers or other means for accessing resources, are handled transparently for the user.","The usual transaction flow for SSO solution, again using the IBM PD SSO solution as an example of an SSO production environment, is normally as follows:\n\n","In such a system, it is expected that a URI presented to a front-end server such as IBM's PD\/WebSEAL, is to be interpreted by the server as a conventional URI containing a resource name that will not resolve directly to a network address and storage location. An additional interim step is required for full address resolution. That is, the front-end server uses the resource name from the URI as a search parameter to retrieve the actual address from a directory service such as an LDAP service or an X.500 service.","For all of this to work seamlessly, the PD System Administrators must handle all of the user management. User management includes all mappings of users' existing resource credentials, for all the various back-end servers and resources, to users' SSO IDs. Such a mapping effort can be a huge task for PD System Administrators and may require hiring many PD System Administrators.","More specifically, in typical examples of prior art, the PD System Admins have to perform the following tasks in mapping resource credentials to SSO IDs:\n\n","The initial roll-out and subsequent maintenance for a SSO solution for a large organization where there are potentially hundreds of thousands of existing users, each with multiple ids and passwords, each mapping to many resources on many different systems, all which are to be brought under the umbrella of a single user sign-on, may require many system administrators working many hours. Also, the end users may not feel comfortable divulging to another person their ID's and passwords on different systems. In fact, many organizations maintain general policies against users divulging passwords.","In present art there is no organized way for user themselves, as opposed to system administrators, to administer their own mappings of SSO IDs to system resources. It would be advantageous, in order to offload the crushing burden of SSO administration from system administrators, if there were a way for users themselves to perform their own SSO administration, including creating mappings from an SSO ID to system resources, updating such mappings, and deleting such mappings.","Exemplary embodiments of the invention typically include methods for directory enabled, self service, single sign on user account management, in which the methods are implemented in conjunction with a directory. In exemplary embodiments, the directory typically includes resource directory entries and user directory entries. Exemplary embodiments typically include receiving, from a user through a browser, an SSO user ID and SSO password of the user, the SSO password being known only to the user, and retrieving from the directory, in dependence upon the SSO user ID and SSO password, a user directory entry for the user, in which the user directory entry includes a mapped resource list including resource names of resources mapped to the user's SSO user ID.","Exemplary embodiments of the invention typically include creating, in dependence upon the user directory entry, a new mapping of a resource to the SSO user ID. In exemplary embodiments, the creating typically includes retrieving from the directory a full resource list including resource names of all resources available for SSO mappings, and deleting from the full resource list the resource names in the mapped resource list, thereby yielding an available resource list of resources presently available for mapping to the SSO user ID. In some embodiments, the creating includes displaying to the user through the browser the available resource list, and receiving a user's chosen resource name from the available resource list displayed to the user, including resource security data for the chose resource name. In other embodiments, the creating includes amending the user directory entry to include the chosen resource name and the resource security data for the chosen resource name, and storing the amended user directory entry in the directory.","In exemplary embodiments, the resource security data typically includes a resource user ID. In some embodiments, the resource security data includes a resource password. Exemplary embodiments typically include updating mappings of resources to the SSO user ID. In exemplary embodiments, the updating typically includes creating, in dependence upon the mapped resource list, an update resource list comprising resource names and resource security data of resources mapped to the user's SSO user ID, and displaying to the user through the browser, in a editable format, the update resource list. In some embodiments, the updating typically includes receiving user changes in resource security data of a resource in the update resource list displayed to the user, amending the user directory entry to include the user changes, and storing the amended user directory entry in the directory.","Exemplary embodiments of the invention typically include deleting mappings of resources to the SSO user ID. In exemplary embodiments, the deleting typically includes creating, in dependence upon the mapped resource list, a deletion resource list comprising resource names of resources mapped to the user's SSO user ID, and displaying, to the user through the browser, in a markable format, the deletion resource list. In some embodiments, the deleting typically includes receiving from the user a resource name of a resource marked for deletion from mappings to the user's SSO user ID, amending the user directory entry to exclude the resource name and resource security data for the resource marked for deletion, and storing the amended user directory entry in the directory.","The foregoing and other objects, features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.","The present invention is described to a large extent in this specification in terms of methods for directory enabled, self service, single sign on user account management. Persons skilled in the art, however, will recognize that any computer system that includes suitable programming means for operating in accordance with the disclosed methods also falls well within the scope of the present invention.","Suitable programming means include any means for directing a computer system to execute the steps of the method of the invention, including for example, systems comprised of processing units and arithmetic-logic circuits coupled to computer memory, which systems have the capability of storing in computer memory, which computer memory includes electronic circuits configured to store data and program instructions, programmed steps of the method of the invention for execution by a processing unit. The invention also may be embodied in a computer program product, such as a diskette or other recording medium, for use with any suitable data processing system.","Embodiments of a computer program product may be implemented by use of any recording medium for machine-readable information, including magnetic media, optical media, or other suitable media. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that, although most of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware, nevertheless, alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.","In this specification, the terms \u201cfield,\u201d \u201cdata element,\u201d and \u201cattribute,\u201d unless the context indicates otherwise, generally are used as synonyms, referring to individual elements of digital data. Aggregates of data elements are referred to as \u201crecords\u201d or \u201cdata structures.\u201d Definitions of complex data structures that include member methods, functions, or software routines in addition to data elements are referred to as \u201cclasses.\u201d Instances of complex data structures are referred to as \u201cobjects\u201d or \u201cclass objects.\u201d Aggregates of records are referred to as \u201ctables\u201d or \u201cfiles.\u201d Aggregates of files are referred to as \u201cdatabases.\u201d Because so much data communications in the scope of the present invention is oriented to the web, it is worthwhile to point out that \u2018files\u2019 or \u201cdata files\u201d in this specification include all browser-oriented markup documents including HTML documents, WML documents, HDML documents, XML documents, and the like, as well as text documents, word processing documents, spreadsheets, database records, graphic image files, video clips, audio files, JPEG files, MPEG files, MP3 files, and so on.","\u201cAccess credentials,\u201d or often simply \u201ccredentials,\u201d refers to user IDs and passwords required for access to resources. Accessing some resources requires only a user ID or a password. Many resources require both.","\u201cBrowser\u201d means a web browser, a software application for locating and displaying web pages. Browsers typically comprise both a markup language interpreter, web page display routines, and an HTTP communications client. Typical browsers today can display text, graphics, audio and video. Browsers are operative in web-enabled devices, including wireless web-enabled devices, including many hand-held devices. Browsers in wireless web-enabled devices often are downsized browsers called \u201cmicrobrowsers.\u201d Microbrowsers in wireless web-enabled devices often support markup languages other than HTML, including for example, the Wireless Markup Language (\u201cWML\u201d) and the Handheld Device Markup Language (\u201cHDML\u201d). Microbrowsers supporting WML, for example, also often support the Wireless Access Protocol (\u201cWAP\u201d), a secure specification particulary directed to wireless handhelds such as mobile phones, pagers, two-way radios, smart phones, and communicators.","\u201cCoupled for data communications\u201d means any form of data communications, wireless, infrared, radio, internet protocols, HTTP protocols, email protocols, networked, direct connections, dedicated phone lines, dial-ups, and other forms of data communications as will occur to those of skill in the art.","A \u201cdirectory,\u201d as the term is used in this specification, is a kind of database that tends to contain descriptive, attribute-based information. The information in a directory is generally read much more often than it is written. As a consequence, directories don't usually implement the complicated transaction or roll-back schemes regular databases use for doing high-volume complex updates. Directory updates are typically simple all-or-nothing changes, if they are allowed at all. Directories are tuned to give quick-response to high-volume lookup or search operations. They may have the ability to replicate information widely in order to increase availability and reliability, while reducing response time. When directory information is replicated, temporary inconsistencies between the replicas maybe acceptable to an extent not permitted in regular databases.","A \u201cdirectory service\u201d is a software access interface for a directory. There are many different ways to provide a directory service. Different methods allow different kinds of information to be stored in the directory, place different requirements on how that information can be referenced, queried and updated, how it is protected from unauthorized access, and so on. Some directory services are local, providing service to a restricted context, such as, for example, a the finger service on a single machine. Other directory services are global, providing service to a much broader context, such as, for example, the Domain Name Service for the entire Internet. Global services are usually \u2018distributed,\u2019 meaning that the data they serve is spread in directory storage across many machines, all of which cooperate to provide a global directory service. Typically a global directory service defines a uniform namespace which gives the same view of the data no matter a requesting user is located in relation to the data itself.","\u201cJNDI\u201d refers to the Java Naming and Directory Interface\u2122, an application programming interface (\u201cAPI\u201d) that provides naming and directory functionality to applications written in the Java\u2122 programming language. JNDI operates independently of any specific directory service implementation, so that a variety of directories can be accessed in a common way. The JNDI architecture consists of an API and a service provider interface (\u201cSPI\u201d). Java applications use the JNDI API to access a variety of naming and directory services. The SPI enables a variety of naming and directory services to be plugged in transparently, thereby allowing the Java application using the JNDI API to access their services. Naming and directory services operable with JNDI include various file systems as well as the directory services based upon the Lightweight Directory Access Protocol (\u201cLDAP\u201d), the Internet's Domain Name Service (\u201cDNS\u201d), implementations of the Network Information System (\u201cNIS\u201d), the Novell Directory Service (\u201cNDS\u201d), the Java Remote Method Invocation Registry (\u201cRMI\u201d), and the Common Object Request Broker Architecture (\u201cCORBA\u201d), and Enterprise JavaBeans (\u201cEJB\u201d). Readers interested in knowing more about JNDI are directed to Sun Microsystems' JNDI tutorial at http:\/\/java.sun.com\/products\/jndi\/tutorial\/.","\u201cLDPA\u201d refers to the Lightweight Directory Access Protocol, a set of protocols for accessing information directories. LDAP is based on the standards contained within the X.500 standard, but is significantly simpler. And unlike X.500, LDAP supports tcp\/ip, an important feature for Internet-oriented directory access.","A \u201cresource\u201d is anything amenable to access controls in or coupled for data communication to a computer system, including aggregations of computers coupled for data communications in a network. Examples of resources include data files, printers, computer systems other than a user's default domain, and communications links and logon access to other systems, subsystems, or domains, and access to application programs installed on such systems. Data files and printers may have associated user ID or password protection, but, even if they do not, accessing them may require cross-domain communications with servers that do. Computers and servers other than a user's default domain are computers for which a user needs an additional user ID and password for access. Application programs installed on such systems often require an additional user ID or password for access. Embodiments of the present invention administer such additional user IDs and passwords through use of an SSO ID. An \u201cSSO resource\u201d is a resource listed in a directory as available for SSO mapping. In this specification, it is usual to assume that all resources under discussion are SSO resources. Cross-domain servers supporting resources or supporting access controls for resources are sometimes referred to in this specification as \u201cback-end servers.\u201d","A \u201cURI\u201d or \u201cUniversal Resource Identifier\u201d is an identifier of a named object in any namespace accessible through a network. URI are functional for any access scheme, including for example, the File Transfer Protocol or \u201cFTP,\u201d Gopher, and of course the \u201cweb,\u201d the \u201cWorld Wide Web.\u201d \u201cURLs\u201d or \u201cUniversal Resource Locators\u201d comprise a kind of subset of URIs, wherein each URL resolves to a network address. That is, URIs and URLs are distinguished in that URIs identify named objects in namespaces, where the names may or may not resolve to addresses, while URLs do resolve to addresses. Although standards today are written on the basis of URIs, it is still common to see web-related identifiers, of the kind used to associate web data locations with network addresses for data communications, referred to as \u201cURLs.\u201d In this specification, we refer to such identifiers generally as URIs.","\u201cWorld Wide Web,\u201d or more simply \u201cthe web,\u201d refers to a system of internet protocol (\u201cIP\u201d) servers that support specially formatted documents, documents formatted in markup languages such as HTML, XML, WML, or HDML. The term \u201cWeb\u201d is used in this specification also to refer to any server or connected group or interconnected groups of servers that implement hypertext links through protocols supporting such links, including the Wireless Access Protocol (\u201cWAP\u201d) and the HyperText Transport Protocol (\u201cHTTP\u201d), in support of URIs and distribution of documents in markup languages, regardless whether such servers or groups of servers are coupled to the World Wide Web as such. \u201cWeb server\u201d refers to any such server in any such network.","\u201cX.500\u201d is an ISO and ITU standard defining structure for global directories. X.500 directories are hierarchical with different levels for each category of information, such as country, state, and city.","Embodiments of the present invention, the exemplary mapping applications as described in this specification, allow users to provide self service in mapping resource credential to SSO IDs. Using embodiments of the present invention, users utilize this SSO IDs to manage links to existing resource IDs & passwords on systems located anywhere. As a result, a mapping application based on this method allows the user to consolidate IDs on different systems under an SSO ID. Exemplary embodiments of the present invention, example mapping applications for mapping system resources to SSO IDs, are generally described in this specification as using Java Servlets and Java Server Pages (\u201cJSP\u201d), running on IBM WebSphere Application Servers, and using the Java Naming and Directory Interface (\u201cJNDI\u201d) Application Programming Interface (\u201cAPI\u201d) querying a Lightweight Directory Access Protocol (\u201cLDAP\u201d) directory. Other embodiments will utilize C++ or Visual Basic front ends with back ends that include CORBA objects or an X.500 directory service. In fact, persons of skill in the art will think of many ways to implement directory services, user interfaces, and data communications for various embodiments of methods, systems, and products of the present invention, and all such ways are well within the scope of the invention.","Turning now to , exemplary embodiments of the invention are shown as methods for directory enabled, self service, single sign on (\u201cSSO\u201d) user account management. In exemplary embodiments, the method is implemented in conjunction with a directory (), and the directory typically includes resource directory entries () and user directory entries (). Exemplary embodiments typically include receiving (), from a user () through a browser (), an SSO user ID () and SSO password () of the user (), the SSO password being known only to the user, and retrieving () from the directory (), in dependence upon the SSO user ID () and SSO password (), a user directory entry () for the user, wherein the user directory entry includes a mapped resource list () comprising resource names of resources mapped to the user's SSO user ID. Exemplary embodiments typically include creating (), in dependence upon the user directory entry (), a new mapping () of a resource to the SSO user ID.","In exemplary embodiments of the kind illustrated in , the creating () typically includes retrieving () from the directory () a full resource list () including resource names of all resources available for SSO mappings, and deleting () from the full resource list () the resource names in the mapped resource list (), thereby yielding an available resource list () of resources presently available for mapping to the SSO user ID. In some embodiments, the creating typically includes displaying () to the user () through the browser () the available resource list (), and receiving () a user's chosen resource name () from the available resource list displayed to the user, including resource security data for the chose resource name (). In other embodiments, the creating typically includes amending () the user directory entry () to include the chosen resource name () and the resource security data for the chosen resource name (), and storing () the amended user directory entry () in the directory ().","In exemplary embodiments of the kind illustrated in , the resource security data () typically includes a resource user ID. In some embodiments, the resource security data () typically includes a resource password.","Turning now to , further exemplary embodiments of the invention are illustrated as including updating () mappings of resources to the SSO user ID. In such embodiments, the updating typically includes creating (), in dependence upon the mapped resource list (), an update resource list () comprising resource names and resource security data of resources mapped to the user's SSO user ID. Embodiments of the kind shown in  typically include displaying () to the user () through the browser (), in a editable format, the update resource list (), and receiving () user changes () in resource security data of a resource in the update resource list displayed to the user. In such embodiments, updating typically includes amending () the user directory entry () to include the user changes (), and storing () the amended user directory entry in the directory ().","Turning now to , further exemplary embodiments of the invention are shown typically to include deleting () mappings of resources to the SSO user ID, in which the deleting typically includes creating (), in dependence upon the mapped resource list (), a deletion resource list () comprising resource names of resources mapped to the user's SSO user ID. In embodiments of the kind shown in , the deleting typically includes displaying (), to the user () through the browser (), in a markable format, the deletion resource list (), and receiving () from the user a resource name () of a resource marked for deletion from mappings to the user's SSO user ID. In such embodiments, the deleting typically includes amending () the user directory entry () to exclude the resource name and resource security data for the resource marked for deletion, and storing () the amended user directory entry in the directory ().","By way of further explanation of the structure and operation of embodiments of the invention, we present a discussion of an example embodiment, a mapping application developed in Java, presenting as an application front-end user interface screens to browsers, using JNDI, LDAP, and the IBM PD\/Webseal server. Various embodiments of the invention will naturally use different programming languages for the front-end including, for example, C, C++, or Visual Basic. Various embodiments of the invention will use methods of directory access other than JNDI, including for example, the C-language interface for LDAP described by the Internet Engineering Task Force in Request For Comment number RFC1823. Various embodiments of the invention will utilize an X.500 directory, or some other directory system, rather than LDAP. Persons of skill in the art will think of still other ways to implement mapping application front-ends, directory interfaces, and directory service for directory-enabled SSO mappings, and all such ways are well within the scope of the present invention. This specification's use of a Java front-end, a JNDI interface to the directory system, and an LDAP directory system is intended for explanation, not for limitation.","The example mapping application prompts the user for an SSO ID and password and calls a method named ValidateIRID to query an LDAP server to get the user's Distinguished Name (userDN) based on the entered SSO ID. A distinguished name (\u201cDN\u201d) is composed of a sequence of LDAP entry attributes separated by commas. For example DN cn=Mike Smith, ou=Austin, c=US represents a directory entry for a person with the common name (cn) Mike Smith under the organizational unit (ou) Austin in the organization (o) IBM in the country (c) US.","On the basis of the DN, the mapping application attempts to create a JNDI context object. The single parameter of the context object is a property object called \u2018pr\u2019 which contains the following information: the Java package name, the userDN, the password, and an LDAP server full path name including a port number. If the context object is successfully created, that is, the user's SSO credentials are valid, then the user is presented a user interface screen, referred to in this example as a \u2018Link ID Screen,\u2019 making available the functions of creating, updating, and deleting SSO mappings. If the context object is not successfully created, that is, user's credentials are not valid, the user will be asked to re-enter the SSO ID and password.","When the user selects, from the Link ID Screen, the function for creating a new mapping, the example mapping application performs the following logic before proceeding to display an additional screen for data entry for a new mapping, the additional screen being referred to in this example as the \u2018Create Link Screen.\u2019 The example mapping application uses a method called getTargetRecords(pdUserid) to retrieve all the SSO resources defined in the LDAP server for the particular userDN and store the returned values in s string array named \u2018credentials.\u2019","The SSO resources have resource names corresponding to junction names defined in IBM SecureWay Policy Director (PD). A further example method known as LDAPSearch.getFullFilteredSearchResultsVector( )will return the SSO resource names for resources already mapped based on the userDN.","The unmapped resources are then calculated and returned in method getTargetServicesFiltered( ), and the list of unmapped resources are displayed in the user's browser. Once the Create Link Screen is displayed, the user uses usual data entry fields to select a resource for mapping and creating a new mapping in the LDAP entry for the user's distinguished name by entering the selected resource name and password to associate with the LDAP entry identified by the user's SSO user ID.","From the user's point of view, after logging on the mapping application by providing the user's SSO user ID and password, the process of creating a new mapping of a resource to the user's SSO user ID proceeds in this example as follows: The user clicks on the a GUI button appropriately labeled, \u201cCreate New Mapping\u201d for example, on the main page of the mapping application. User chooses a resource name for which a new mapping is intended, making the choice from a drop-list box in the Create Link Screen. Note that only the resources that do not have defined mappings to the subject SSO ID appear in this drop-list box. The user is prompted for and enters the user's user ID for the resource or back-end server user ID and password for accessing the resource to be mapped. The user clicks a GUI button marked, for example, \u201cSubmit.\u201d The user ID and password are verified with the back-end server for the newly mapped resource, and the new mapping is entered with the user's entry in the LDAP. The user is presented with a confirmation message through the browser.","In the example described, when the user clicks the \u201cSubmit\u201d button, the system carries out the following logic before displaying the confirmation message. The getDN( ) method is invoked to retrieve a userDN based on the user's entered SSO user ID. If the userDN exists, it will add the resource name and password to the userDN string and store the newly amended userDN string into the LDAP directory. The resource ID and password will be verified by invoking the getDN( ) method again with the newly mapped resource data as parameters. More specifically, the following pseudocode illustrates a method of creating new mappings useful with various embodiments of the present invention:",{"@attributes":{"id":"p-0050","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"private String[] getTargetServicesFiltered( )"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Hashtable ht = new Hashtable( );"]},{"entry":[{},"String[] attrIDs = {\u201ctsName\u201d};"]},{"entry":[{},"String selections[] = null;"]},{"entry":[{},"try"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Get user's already defined SSO mappings"]},{"entry":[{},"String credentials[] = getTargetRecords(pdUserid);"]},{"entry":[{},"\/\/ Pull into hash table all SSO resources for entire system"]},{"entry":[{},"Vector results ="]},{"entry":[{},"LDAPSearch.getFullFilteredSearchResultsVector(gsoSuffix);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (results.size( ) > 0)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"selections = new String[results.size( )];"]},{"entry":[{},"for (int j = 0; j < results.size( ); j++)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String value = ((String[]) results.elementAt(j))[1];"]},{"entry":[{},"ht.put(value, value);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Remove from the hash table the user's already"]},{"entry":[{},"\/\/ defined SSO mappings, first testing whether the"]},{"entry":[{},"\/\/ user had in fact already mapped SSO resources"]},{"entry":[{},"if (credentials != null)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ If hashtable contains a defined SSO mapping,"]},{"entry":[{},"\/\/ then it needs to be excluded from the display"]},{"entry":[{},"\/\/ list in the Create Link Screen"]},{"entry":[{},"for (int j = 0; j < credentials.length; j++)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (ht.containsKey(credentials[j]))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ht.remove(credentials[j]);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/Generate selection list"]},{"entry":[{},"if (ht.size( ) > 0)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ If one or more SSO resources or \u2018TargetServices\u2019"]},{"entry":[{},"\/\/ are available, put them into a String array"]},{"entry":[{},"selections = new String[ht.size( )];"]},{"entry":[{},"int j = 0;"]},{"entry":[{},"for (Enumeration e = ht.elements( ); e.hasMoreElements( );)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String resource = (String) e.nextElement( );"]},{"entry":[{},"selections[j++] = resource;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else selections = null;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} \/\/end try"]},{"entry":[{},"catch (Exception e) e.printStackTrace( );"]},{"entry":[{},"\/\/ return list of available eTargetServices"]},{"entry":[{},"return selections;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"As shown in the example pseudocode, the getTargetServicesFiltered( ) method returns an array of string containing unmapped resource names. In this example, SSO resources are sometimes referred to as \u2018eTargetServices.\u2019 The getTargetRecords(pdUserid) method is invoked to return all the SSO's resource names defined in the LDAP server for that particular userDN and store the returned values in a string array named \u2018credentials.\u2019 The method LDAPSearch.getFullFilteredSearchResultsVector(gsosuffix) returns the all the SSO's resource names system wide which are already mapped based on the userDN. Next a for loop is iterated to remove all mapped resource names so the getTargetServicesFiltered( ) method will only return unmapped resource names.","Typical operation of the example method getTargetRecords( ) is illustrated in the following pseudocode:",{"@attributes":{"id":"p-0053","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"private String[]getTargetRecords(String userid)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int j=0;"]},{"entry":[{},"String selections[] = null;"]},{"entry":[{},"int connectRC = LDAPConnection.connect(ldapHost, \u201c389\u201d);"]},{"entry":[{},"String dn = getDN(userid);"]},{"entry":[{},"Vector results = LDAPSearch.getFullFilteredSearchResultsVector(dn);"]},{"entry":[{},"if (results.size( ) > 0)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"selections = new String[results.size( )];"]},{"entry":[{},"for (j = 0; j < results.size( ); j++)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"selections[j] = ((String[]) results.elementAt(j))[1];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return selections;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"More particularly, as shown in the example pseudocode for getTargetRecords( ), the input to getTargetRecords( ) is a string which contains userid, that is, the user's SSO user ID. The return value from getTargerRecords( ) is an array of string named \u2018selections.\u2019 The LDAP API LDAPConnection.connect(ldapHost, \u201c389\u201d) is invoked to connect to the LDAP server with two parameters, hostname=ldapHost and port#=389. A distinguished name (dn) is returned from the LDAP server using the method getDN( ). A dn is composed of a sequence of LDAP entry attributes separated by commas. For example dn cn=Mike Smith, ou=Austin, c=US represents a directory entry for a person with the common name (cn) Mike Smith under the organizational unit (ou) Austin in the organization (o) IBM in the country (c) US. The JNDI API call to LDAPSearch.getFullFilteredSearchResultsVector( ) is made with a distinguished name, \u2018dn,\u2019 as a parameter to search for a list of resource names associated with this user's distinguished name and store the returned resource names in the string array named \u2018selections.\u2019","As described above, the example method getDN( ) is called with the user's SSO user ID as a parameter and return the user's distinguished name from an LDAP directory. The getDN( ) method uses the SSO user ID as a search parameter to find a corresponding distinguished name in the LDAP directory. Typical operation of the example method getDN( ) is illustrated in more detail by the following pseudocode:",{"@attributes":{"id":"p-0056","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"private String getDN(String userid)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String[] attrIDs = 55 \u201cuid\u201d};"]},{"entry":[{},"String dn = null;"]},{"entry":[{},"\/\/Set option for \u201civadmin\u201d cmd to search"]},{"entry":[{},"String filter = \u201c(&(objectclass=ePerson)(uid=\u201c + userid + \u201d))\u201d;"]},{"entry":[{},"\/\/filter = (& (objectclass=ePerson)(uid=<userid>))"]},{"entry":[{},"Vector results = LDAP Search.getFullFilteredSearchResultsVector(gsoSuffix,"]},{"entry":[{},"filter, attrIDs, ctx);"]},{"entry":[{},"if (results.size( ) > 0) dn = ((String[]) results.elementAt(0))[0];"]},{"entry":[{},"if(dn == null)return null; \/\/If not found \u201cdn\u201d based on \u201cuserid\u201d"]},{"entry":[{},"else return dn + \u201c,\u201d+gsoSuffix;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"More particularly, as shown in the example pseudocode for getDN( ), the getDN( ) method will pass the userid (the user's SSO user ID) as a string search key and return the distinguished name for that userid as a string from the LDAP directory. The parameters for the API call to LDAPSearch.getFullFilteredSearchResultsVector( ) are gsosuffix, filter, attrIDs, and ctx. The value for \u2018geoSuffix\u2019 is obtained from the Init Method. Its value is normally equal to 1=world (one of the attributes of the distinguished name). \u2018Filter\u2019 is the cast conversion of userid string type to ePerson type. \u2018AttrIDs\u2019 is one of the attributes of the Ids. It normally has one of the values in this set: \u2018uid,\u2019 \u2018secactValid,\u2019 \u2018objectclasname,\u2019 \u2018secretkey.\u2019 \u2018Ctx\u2019 is static variable of DirContext object type. Ctx's value is obtained from this API call:\n\n","When the user selects, from the Link ID Screen, the function for updating a mapping, the example mapping application performs the following logic before displaying an \u201cUpdate Link Screen\u201d for data entry for edits of an existing mapping. The example mapping application retrieves a list of all resources that the user had already mapped using the method getTargetRecords(String userid) to get all the SSO resources defined in the LDAP server for the particular userDN, store the returned values in a string array, and display the returned values to the user. In this example, the SSO resources are resource names corresponding to junction names defined in the IBM SecureWay Policy Director (PD).","The user selects through the browser GUI one of the displayed resources for updating. When the user selects the resource for updating, the Update Link Screen is refreshed to display editable text boxes for the resource user Id and password associated with the chosen resource. Now user can change the resource user ID or password or both by changing the values in the text boxes and clicking on the submit button. When the user thus submits edited update data, the mapping application issues calls to JNDI member methods to update the LDAP entry for the user's SSO user ID to include the resource user ID and password as edited by the user. If the user credentials are successfully updated, a confirmation message is displayed. If the update fails, an error message is displayed. More particularly, the following pseudocode illustrates an example procedure, useful with various embodiments of the present invention, for updating LDAP entries with edited resource user IDs and passwords.",{"@attributes":{"id":"p-0060","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Private boolean updateTargetRecord(String userid, String password)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String dn = (String) session.getValue(\u201cdn\u201d);"]},{"entry":[{},"Hashtable ht = new Hashtable( );"]},{"entry":[{},"\/\/ set uid value"]},{"entry":[{},"String[] uid = new String[1];"]},{"entry":[{},"uid[0] = userid;"]},{"entry":[{},"ht.put(\u201cuid\u201d, uid);"]},{"entry":[{},"\/\/ set secretkey value"]},{"entry":[{},"String[] secretkey = new String[1];"]},{"entry":[{},"secretkey[0] = password;"]},{"entry":[{},"ht.put(\u201csecretkey\u201d, secretkey);"]},{"entry":[{},"if (LDAPUtilityObjects.updateObject(dn, ht, ctx) == 0)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return true;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"System.err.println(\u201cupdateTargetRecord: \u201d+LDAPUtilityObjects.getError( ));"]},{"entry":[{},"return false;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"If the user selects, from the Link ID Screen, the function for deleting a mapping, the example mapping application performs the following logic, before displaying a \u2018delete Link Screen.\u2019 The mapping application retrieves all SSO resources already mapped to the user's SSO user ID. The mapping application uses the method getTargetRecords(String userid), described in detail above in this specification, to return all the SSO resources defined in the LDAP server for that particular userDN, store the returned values in a string array, and display them to the user through the browser's GUI. The SSO resources in this example have resource names corresponding to junction names defined in the IBM SecureWay Policy Director (PD). The user selects a resource from the displayed list, clicks a GUI button labeled \u201cDelete\u201d (or double-clicks the list entry), and the mapping application performs the processing illustrated by the following pseudocode to delete the mapping of the selected resource to the user's SSO user ID. If the resource SSO mapping is deleted successfully, then a confirmation message is displayed to the user. If the deletion fails, an error message is displayed. More particularly, the following pseudocode illustrates an example procedure, useful with various embodiments of the present invention, for deleting user-selected LDAP entries.",{"@attributes":{"id":"p-0062","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Private boolean deleteTargetRecord(String pdUserid, resource)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String dn = getDN(pdUserid);"]},{"entry":[{},"if (dn != null)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dn = \u201ccn=T:\u201d + resource + \u201c,cn=\u201d + pdUserid + \u201c,\u201d + dn;"]},{"entry":[{},"if (LDAPUtilityObjects.deleteObject(dn, ctx) == 0) return true;"]},{"entry":[{},"else\u2003System.err.println(\u201cdeleteTargetRecord: \u201d +"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"LDAPUtilityObjects.getError( ));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"System.err.println(\u201cdeleteTargetRecord: Can't get user's dn\u201d);"]},{"entry":[{},"return false;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"It will be understood from the foregoing description that various modifications and changes may be made, and in fact will be made, in the exemplary embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0017","num":"0031"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0032"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0033"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0034"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
