---
title: Extending types hosted in database to other platforms
abstract: Aspects of the subject matter described herein relate to extending types hosted in a database to other platforms. In aspects, a database may store objects according to a one type system while an application accessing the database may store objects according to another type system. To allow the application to understand the types, a mapping mechanism may be employed that maps from the types of type system of the database to types of a type system of the application. The mapping mechanism may utilize metadata associated with the data in mapping between types. In conjunction with mapping a source type to a target type, a target object may be instantiated and populated with properties of a source object of the source type.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08341154&OS=08341154&RS=08341154
owner: Microsoft Corporation
number: 08341154
owner_city: Redmond
owner_country: US
publication_date: 20091028
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Definitions"],"p":["A database usually comes with several built-in data types. For example, a database may include integer, string, currency, date, and other types. In addition to the built-in data types, a column of a database may store custom or user-defined types. For example, the column may store a user-defined data type as a blob of binary data. The user-defined types in this binary data may not be understood when accessing the database with an application that did not create the binary data.","The subject matter claimed herein is not limited to embodiments that solve any disadvantages or that operate only in environments such as those described above. Rather, this background is only provided to illustrate one exemplary technology area where some embodiments described herein may be practiced.","Briefly, aspects of the subject matter described herein relate to extending types hosted in a database to other platforms. In aspects, a database may store objects according to a one type system while an application accessing the database may store objects according to another type system. To allow the application to understand the types, a mapping mechanism may be employed that maps from the types of type system of the database to types of a type system of the application. The mapping mechanism may utilize metadata associated with the data in mapping between types. In conjunction with mapping a source type to a target type, a target object may be instantiated and populated with properties of a source object of the source type.","This Summary is provided to briefly identify some aspects of the subject matter that is further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","The phrase \u201csubject matter described herein\u201d refers to subject matter described in the Detailed Description unless the context clearly indicates otherwise. The term \u201caspects\u201d is to be read as \u201cat least one aspect.\u201d Identifying aspects of the subject matter described in the Detailed Description is not intended to identify key or essential features of the claimed subject matter.","The aspects described above and other aspects of the subject matter described herein are illustrated by way of example and not limited in the accompanying figures in which like reference numerals indicate similar elements and in which:","As used herein, the term \u201cincludes\u201d and its variants are to be read as open-ended terms that mean \u201cincludes, but is not limited to.\u201d The term \u201cor\u201d is to be read as \u201cand\/or\u201d unless the context clearly dictates otherwise. The term \u201cbased on\u201d is to be read as \u201cbased at least in part on.\u201d The terms \u201cone embodiment\u201d and \u201can embodiment\u201d are to be read as \u201cat least one embodiment.\u201d The term \u201canother embodiment\u201d is to be read as \u201cat least one other embodiment.\u201d Other definitions, explicit and implicit, may be included below.","Exemplary Operating Environment",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["100","100","100","100"]},"Aspects of the subject matter described herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, or configurations that may be suitable for use with aspects of the subject matter described herein comprise personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microcontroller-based systems, set-top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, personal digital assistants (PDAs), gaming devices, printers, appliances including set-top, media center, or other appliances, automobile-embedded or attached computing devices, other mobile devices, distributed computing environments that include any of the above systems or devices, and the like.","Aspects of the subject matter described herein may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, and so forth, which perform particular tasks or implement particular abstract data types. Aspects of the subject matter described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing aspects of the subject matter described herein includes a general-purpose computing device in the form of a computer . A computer may include any electronic device that is capable of executing an instruction. Components of the computer  may include a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus, Peripheral Component Interconnect Extended (PCI-X) bus, Advanced Graphics Port (AGP), and PCI express (PCIe).","The computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer  and includes both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media.","Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Computer storage media includes RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile discs (DVDs) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer .","Communication media typically embodies computer-readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer-readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disc drive  that reads from or writes to a removable, nonvolatile optical disc  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include magnetic tape cassettes, flash memory cards, digital versatile discs, other optical discs, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disc drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media, discussed above and illustrated in , provide storage of computer-readable instructions, data structures, program modules, and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers herein to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball, or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, a touch-sensitive screen, a writing tablet, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A monitor  or other type of display device may also be connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  may include a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface  or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Type Mapping","As mentioned previously, user-defined types in a database may not be understood when accessing the user-defined types with a driver developed for another object system. For example, when Microsoft .Net user-defined data types are stored in a Microsoft SQL Server, these user-defined data types may not be understood (other than as bits) when accessing the data types using a Java\u00ae Database Connectivity (JDBC) driver.","A database may have standard types that are built-in to the database such as integer, character, string, currency, date, other types, and the like. Such built-in types are understood by the DBMS of the database and may be readily manipulated by the DBMS.","Other types, such as user-defined types, may take advantage of a type extensibility mechanism of the database. A user-defined type may include 1) zero or more standard types of the database, 2) zero or more types that are not standard types of the database, and 3) zero or more other user-defined types.","For example, a user may define a point type that has X and Y coordinates where X and Y are integers within certain ranges. Even though a database may include a built-in integer type, it may not include a built-in integer type that is restricted to the ranges above for X and Y. Thus, the point type may be a user-defined type that is not composed of standard types of the database.","As another example, a user may define a Boolean type that is not included in the standard types of a database. As another example, a user may define an array type that includes elements that are not found in the standard types of the database. As another example, a user may define a car type that includes components and characteristics of a car where characteristics of the car are standard types and components of the car are other user-defined types.","As another example, a user may define an e-mail type that defines sequences of characters that make up valid e-mail addresses. As another example, a user may define an URL type that defines sequences of characters that make up valid locations on the Internet. In these two examples, the database may include a character type as a built-in type but may not include URL and e-mail address types that indicates valid sequences of the characters.","A user-defined type may include methods that validate data, methods that manipulate data, methods that return data, and other methods. User-defined types may not initially be built into the database and may be added by a system administrator, developer, end-user, or the like (herein sometimes referred to as a user) via a type extensibility mechanism. The type extensibility mechanism may extend the types understood by a DBMS of the database.","One exemplary type extensibility mechanism that may be employed includes defining a column of a table to correspond to a user-defined type and storing data regarding the user-defined type in the column. Type information associated user-defined type may also be stored in the database. In an object-oriented database, the type system of the database may be extended with a user-defined type by adding type information regarding the user-defined type to the type system of the database. The above type extensibility mechanisms are not intended to be all-inclusive or exhaustive. Indeed, other extensibility mechanisms may also be employed to extend the types of a database beyond the built-in types without departing from the spirit or scope of aspects of the subject matter described herein.","As used herein, extended types include user-defined types and any other types that take advantage of a type extensibility mechanism of a database.","Furthermore, the above examples of user-defined types are not intended to be all-inclusive or exhaustive of the possible user-defined types that may be stored in a database via a type extensibility mechanism. The very nature of having a type extensibility mechanism implies the possibility of creating types that are not originally built into the database. Mapping from these user-defined types to types in another type system is described in more detail herein.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 2","b":["205","210","215","210","225","215","205"]},"The various entities (e.g., the application , the database driver , and the database ) may be located relatively close to each other or may be distributed across the world. For example, the application  and the database driver  may be located on the same machine, while the database  may be located on a different machine. In another example, the application  may be located on a first machine, while the database driver  may be located on an application server that provides application services. In yet another example, the three entities may be located on the same machine. The examples above are not intended to be all-inclusive or exhaustive. Indeed, based on the teachings herein, those skilled in the art may recognize other configuration that fall within the spirit and scope of aspects of the subject matter described herein.","Where a line connects one entity to another, it is to be understood that the two entities may be connected (e.g., logically, physically, virtual, or otherwise) via function\/method calls or any type of network including a direct connection, a local network, a non-local network, the Internet, some combination of the above, and the like.","The application  comprises any software that seeks access to the database. Such software may execute in user mode, kernel mode, or some combination thereof. In some embodiments, such software may be distributed across two or more machines. Access as used herein may include reading data, writing data, deleting data, updating data, a combination including two or more of the above, and the like.","The database driver  may comprise a software component that provides a set of application program interfaces (APIs) to the application . The APIs allow the application  to request data from the database  and to read the data once it is received. In one embodiment, the APIs may conform to the Java\u00ae Database Connectivity (JDBC) standard. In another embodiment, the APIs may conform to the Open Database Connectivity (ODBC) standard. In yet other embodiments, the APIs may conform to another standard or may provide a propriety interface.","The database  comprises a data source that is capable of storing data in a structure format. The term data is to be read broadly to include anything that may be represented by one or more computer storage elements. Logically, data may be represented as a series of 1's and 0's in volatile or nonvolatile memory. In computers that have a non-binary storage medium, data may be represented according to the capabilities of the storage medium. Data may be organized into different types of data structures including simple data types such as numbers, letters, and the like, hierarchical, linked, or other related data types, data structures that include multiple other data structures or simple data types, and the like. Some examples of data include program code, program state, program data, other data, and the like.","The database  may comprise a relational database, object-oriented database, hierarchical database, network database, other type of database, some combination or extension of the above, and the like. Data stored in a database may be organized in tables, records, objects, other data structures, and the like. The data stored in a database may be stored in dedicated database files, dedicated hard drive partitions, HTML files, XML files, spreadsheets, flat files, document files, configuration files, other files, and the like. A database may reference a set of data that is read-only to the database or may have the ability to read and write to the set of data.","Data in a database may be accessed via a database management system (DBMS). A DBMS may comprise one or more programs that control organization, storage, management, and retrieval of data of a database. A DBMS may receive requests to access data in a database and may perform the operations needed to provide this access.","In describing aspects of the subject matter described herein, for simplicity, terminology associated with relational databases is sometimes used herein. Although relational database terminology is sometimes used herein, the teachings herein may also be applied to other types of databases including those that have been mentioned previously.","The mapping components  of the database driver  map data types hosted by the database  into data types understood by the application . As used herein, the term component is to be read to include all or a portion of a device, a collection of one or more software modules or portions thereof, some combination of one or more software modules or portions thereof and one or more devices or portions thereof, and the like.","Data (including metadata) transferred between the database  and the application database driver  may be serialized. Serialization refers to placing the data in a format suitable for transferring the data via a network. Serialization may include encoding properties and metadata of an object in a series of bits.","In one embodiment, the database  may have a pre-defined way in which it serializes data including custom or user-defined objects. A driver receiving a serialized data is responsible for de-serializing the data.","In another embodiment, there may be a mechanism for registering serialization and de-serialization code. In this embodiment, the serialization code may determine how to encode properties and metadata of objects into bits suitable for transferring via a network. Likewise, the de-serialization code may determine how to decode properties and metadata of objects from their serialized form.","When the database driver  receives data corresponding to a user-defined or other type from the database , in conjunction with de-serializing the serialized stream received, the database driver  may use metadata associated with the data to map the type from the database  to a type understood by the application .","For example, metadata received from the database  for a type may indicate a name of a namespace. For illustrative purposes, for example, the metadata may include:","Microsoft.SQLServer.Types.SQLGeometry","In one embodiment, the namespace of a target type system may be constructed to be identical to or a superset of the type system of types stored in the database . In this embodiment, the mapping components  may locate a type name of the target type system using a one-to-one correspondence from the metadata returned from the database .","In another embodiment, just the last part of the metadata above may be used to map from the source type system to the target type system. For example, referring to the type name mentioned above, SQLGeometry may be used to map the type of the database  to a type of the target type system.","In the embodiments above, both the metadata and the data associated with a type may be stored in a column of a database. When obtaining data in the column, the driver  may receive the data and extract the metadata therefrom. Using the metadata, the mapping components  may map from the type indicated by the metadata to the target type system.","In addition to the metadata stored in the column, the database  may also include other metadata that pertains to a type. For example, the database  may store a type name for a column. The mapping components  may use the type name to map to a type of the target type system.","As another example, the database  may include other metadata about the column. Such other metadata may include, for example, whether fields in the column are nullable, a name of the column, a format of the column, other data about the column, and the like. The mapping components  may use this other metadata to map to a type of the target type system.","In one embodiment, a document may specify a specific mapping between extended types of the database  and types of the target type system. For example, a document may provide a mapping table that indicates mappings between extended types of the database and types included in a target type system. This document may, for example, be indicated by the application  when establishing a connection to the database .","In one embodiment, the mapping components  may use a combination of two or more of the above to map to a type of the target type system. For example, a combination of metadata included in a field of the column as well as other metadata that is indicated about the column may be used to map to a type of the target type system.","After a requested type in the database  has been mapped to a target type in the target type system, an object according to the target type may be instantiated and filled in with data received from the database . Filling in the properties of an object is sometimes referred to herein as populating the object. In one embodiment, a constructor of the object may be called to populate the object. In executing, the constructor may request data from a de-serializer and may use the data received from the de-serializer to fill in properties of the object.","As used herein, the term constructor is sometimes used in reference to populating an object. This term is meant to include any code (whether a part of the object or not) that may be called to populate the object and is not intended to be (but in one embodiment may be) limited only to code that is executed upon instantiation of an object.","The application , the database driver , and the database  may be hosted on one or more computing devices. Such devices may include, for example, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microcontroller-based systems, set-top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, cell phones, personal digital assistants (PDAs), gaming devices, printers, appliances including set-top, media center, or other appliances, automobile-embedded or attached computing devices, other mobile devices, distributed computing environments that include any of the above systems or devices, and the like. An exemplary device that may be configured to act as one of the above comprises the computer  of .","Although the environment described above includes various entities and related infrastructure, it will be recognized that more, fewer, or a different combination of these entities and others may be employed without departing from the spirit or scope of aspects of the subject matter described herein. Furthermore, the entities and communication networks included in the environment may be configured in a variety of ways as will be understood by those skilled in the art without departing from the spirit or scope of aspects of the subject matter described herein.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 3","FIG. 3","FIG. 3","FIG. 3"]},"Turning to , the apparatus  may include mapping components , a communications mechanism , and other components (not shown). The mapping components  correspond to the mapping components  of . The apparatus  may be implemented on or as a computer (e.g., as the computer  of ).","The mapping components  may include a mapping manager , a serializer , a de-serializer , a metadata manager , a code generator , an application programming interface (API) , and other components (not shown). In one embodiment, the mapping components  may operate as a database driver. In another embodiment, the mapping components  may operate as a database driver and may also include or reference other code for populating properties of objects from the driver and sending properties of objects to the driver for serialization.","The communications mechanism  allows the apparatus  to communicate with other entities. For example, the communications mechanism  may allow the apparatus  to communicate with the database  of . When the database  is also hosted on the apparatus , the mapping components  may use function\/method calls to communicate with the database . When the database  is hosted on the apparatus , the communications mechanism  may be omitted or used to communicate with entities not hosted on the apparatus . The communications mechanism  may be a network interface or adapter , modem , or any other mechanism for establishing communications as described in conjunction with .","The mapping manager  is operable to map between types. When given a source type (e.g., a type of an object of the database or a type of an object of the application), the mapping manager is operable to determine a target type (e.g., a type of an object of the application or a type of an object of the database) of a target type system that corresponds to the source type. For example, if the source type corresponds to a user-defined type, the mapping manager  may determine a corresponding target type of a Java\u00ae application. The mapping manager  may map between types using both type metadata as well as database metadata as has been described previously.","The serializer  is operable to generate an outgoing stream to send to a database. The outgoing stream may include values and metadata of an object to send to the database. A stream is a sequence of data elements. A stream may comprise a series of bits, bytes, or other data. The serializer  may operate under the instructions of code of an object. The code may invoke the serializer  to serialize the data. In one embodiment, the serializer  may provide serialization for primitive types only. In another embodiment, the serializer  may provide serialization for primitive and other types.","The de-serializer  is operable to receive an incoming stream from a database and to generate incoming data therefrom. The incoming stream includes objects and metadata associated with the objects. The metadata included in the incoming stream indicates types of a source type system for the objects.","To populate a target object, the de-serializer  may be called (e.g., by a constructor) to provide primitive types (e.g., numbers, characters, strings, dates, and the like) from the serialized stream. In response, the de-serializer  may extract and provide corresponding data (e.g., numbers, characters, strings, dates, and the like) from the serialized stream for use in a target type system. The corresponding data provided by the de-serializer  may be used (e.g., by a constructor) to populate properties of objects of the types in the target type system.","The metadata manager  is operable to identify the metadata from the incoming data generated by the de-serializer . In one embodiment, the metadata manager  may be part of the de-serializer .","The mapping manager  is operable to determine, via the metadata, a target type corresponding to the source type. The target type is a type used by the target type system. For example, referring to , a target type may include a type used by the application . When the target type system is the database , a target type may include a user-defined or other type included in a column of the database .","The mapping manager  may determine target types via metadata by any of the methods previously indicated. For example, the mapping manager may be operable to locate the target type in a target namespace that is identical to a source namespace that includes the source type. As another example, the mapping manager may be operable to obtain a name (having multiple parts) of the source type, to obtain a last part of the name, and to map the last part of the name to a target name in the target type system. Other methods of determining target types may also be used.","The code generator  may be operable to generate code in the target system that, when executed, populates an object from an incoming stream. In one embodiment, a driver may instantiate an object (e.g., of a user-defined type) that includes the code. Upon execution, the code may request data from the de-serializer that operates on the incoming stream from the database and populate the object using the data. The code generated may be of a type customarily used in the target system.","The API  may be used to communicate with the mapping components . The API  may receive requests to access data and may service these requests by calling appropriate components of the mapping components and returning responses therefrom. The requests received by the API  may come from a process that is located on the apparatus  or a process that is located on another apparatus. For example, the API  may receive requests from the application . The application  may be located on the apparatus  or may be located on another apparatus.","The term \u201cprocess\u201d and its variants as used herein may include one or more traditional processes, threads, components, libraries, objects that perform tasks, and the like. A process may be implemented in hardware, software, or a combination of hardware and software. In an embodiment, a process is any mechanism, however called, capable of or used in performing an action. A process may be distributed over multiple devices or a single device. In one embodiment, an entity comprises a process as defined above. In another embodiment, an entity comprises any one or more objects that is\/are capable of performing actions associated with or using or one or more processes.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIGS. 4-5","FIGS. 4-5"]},{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 4","FIG. 2"],"b":["405","205","215"]},"At block , a request for data from the database is received. For example, referring to , the database driver  may receive a request for data from the application . The request may indicate that the application  seeks to obtain data from the database .","At block , metadata is received. For example, referring to , the database driver  may access the database  to obtain data corresponding to the data requested by the application . The data received from the database may include metadata and data. The metadata indicates a source type of the data. The source type indicates how the data is represented in the database. The metadata may regard a type that is not included in native types of the database.","Receiving the metadata may include receiving an indication of a source name that has a plurality of parts (e.g., such as Microsoft.SQLServer.Types.SQLGeometry). This source name may be included in a source namespace.","As mentioned previously, the database  may serialize objects according to one representation (e.g., .Net) while the application  may include objects according to another representation (e.g., Java\u00ae). More generally, the database  may have metadata associated with a platform having instructions represented according a source language (e.g., C#, C++, C, Basic, an intermediate such as bytecode, some other language, or the like) while the application may be associated with a platform having instructions represented according to a target language (e.g., Java\u00ae or some other language). The metadata associated with the source platform and\/or the database metadata may be received when the metadata is received at block .","At block , the target type for providing the data to the application may be determined. For example, referring to , the mapping manager  may determine a target type. Determining the target type may be based on the metadata as previously described.","For example, a target namespace (e.g., for the application) that is identical or a superset of the source namespace (e.g., the one represented in the database) may be created. In this example, determining a target type for providing the data to the application may comprise using a target name in the target namespace where the target name is identical to the source name of the source namespace.","As another example, determining a target type for providing the data to the application may include mapping a last part of the source name to a target name of the target namespace.","As another example, determining a target type for providing the data to the application may include using the metadata to locate an association in the document. For example, as mentioned previously, a document may include mappings (e.g., associations) between source types and targets types. Each association may simply indicate a source type and the target type.","As yet another example, code may be generated for a target platform upon which the application executes. The code, when executed, may define the target type and populate the object using the data.","The above examples are not intended to be all-inclusive or exhaustive. Based on the teachings herein, those skilled in the art may recognize many other ways for determining a target type based on metadata that may be employed without departing from the spirit or scope of aspects of the subject matter described herein.","At block , the target object is instantiated. For example, referring to , the database driver  may allocate space for and initialize an object. Instantiating a target object may include traditional instantiation of an object-oriented, allocating memory for data of an object, resetting (e.g., zeroing out or otherwise resetting properties) an already-existing object, and the like. In conjunction with instantiating an object, a class may be determined that correspond to the target type. Instantiating the target object may involve instantiating the object in accordance with the class. This may involve creating and initializing the object according to a class definition.","At block , the target object is populated. Populating the target object refers to filling in the properties of the target object using the data received from the source object. For example, referring to , the database driver  may be used (e.g., by a constructor of a target object) to fill in properties of the object using data received from the database . Code in the target system (e.g., a constructor of a target object) may obtain data from the database driver  and may use this data to fill in properties of the target object.","At block , the target object is provided to the requestor. For example, referring to , the database driver  may provide an object to the application . Providing as referred to in this sense may involve sending the object to the application , allocating memory, placing the object in the allocated memory, and returning a pointer to the memory to the application , filling in memory provided by the application  with the object, indicating a location of the object, and the like.","Some other actions that may occur at various times include receiving a serialized stream that includes the data, determining an order and type of properties included in the serialized stream based on the metadata, and de-serializing the stream to obtain properties of the object.","At block , other actions, if any, may be performed.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIG. 5","FIG. 2"],"b":["505","205","215"]},"At block , a request to store data is received. For example, referring to , the database driver  may receive a request to store data in the database  from the application .","At block , the source type of the object is determined. The source type is included in a type system of the application. For example, referring to , the database driver  may determine a source type of the object received from the application .","At block , a target type of the object may be determined. The target type may be included in a type system of the database. For example, referring to , the mapping manager  may determine a target type to use for storing the object in the database.","At block , the object may be serialized according to the target type. Serializing the object for the target type may include placing data derived from properties of the object in an order in which the data is to be sent to the database. For example, referring to , the serializer  may be used to serialize properties of the object into a stream to send to a database.","At block , the serialized object is sent to the database. For example, referring to , the database driver  may send the serialized object to the database .","At block , other actions, if any, may be performed.","As can be seen from the foregoing detailed description, aspects have been described related to extending types hosted in a database to other platforms. While aspects of the subject matter described herein are susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit aspects of the claimed subject matter to the specific forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of various aspects of the subject matter described herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
