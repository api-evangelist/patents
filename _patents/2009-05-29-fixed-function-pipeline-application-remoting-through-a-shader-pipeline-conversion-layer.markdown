---
title: Fixed function pipeline application remoting through a shader pipeline conversion layer
abstract: Systems, methods and computer readable media are disclosed for sending a client graphics data across a remote session for an application, where the application makes fixed function pipeline API calls and the client and server support shader pipeline API calls for the remote session. fixed function pipeline graphics calls from sent from the application are intercepted, wrapped, converted into their fixed function pipeline equivalent graphics call or calls and then sent across the communications network to the client according to a protocol of the remote session.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08203566&OS=08203566&RS=08203566
owner: Microsoft Corporation
number: 08203566
owner_city: Redmond
owner_country: US
publication_date: 20090529
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["Although computers were once isolated and had minimal or little interaction with other computers, today's computers interact with a wide variety of other computers through communications networks, such as Local Area Networks (LANs) and Wide Area Networks (WANs). With the wide-spread growth of the INTERNET\u2122, connectivity between computers is becoming more important and has opened up many new applications and technologies. The growth of large-scale networks, and the wide-spread availability of low-cost personal computers, has fundamentally changed the way that many people work, interact, communicate, and play.","One increasing popular form of networking may generally be referred to as virtual computing systems, which can use protocols such as Remote Desktop Protocol (RDP), Independent Computing Architecture (ICA), and others to share a desktop and other applications with a remote client over a remote session. Such computing systems typically transmit the keyboard presses and mouse clicks or selections from the client to a server, relaying the screen updates back in the other direction over a network connection (e.g., the INTERNET). As such, the user has the experience as if their machine is operating as part of a LAN, when in reality the client device is only sent screenshots of the applications as they appear on the server side.","Some remote sessions support remoting graphics calls at the primitive level. This may increase the responsiveness of sessions that make those graphics calls. It may be that such a remote session supports only shader pipelines, so an application that uses a fixed function pipeline cannot take advantage of this technique in remote sessions.","It would therefore be an improvement provide in methods, systems and computer-readable storage media a mapping layer from a fixed function pipeline application programming interface (API) to a shader pipeline and to intercept graphics calls for the fixed function pipeline and convert them to shader pipeline calls that are then sent across the remote session. This would allow graphical output sent at the primitive level across the remote session from an application that uses a fixed function pipeline API to be sped up without altering the application itself.","In an exemplary embodiment, the graphics output associated with an application is being sent to a client across a remote session. All graphics calls made by an application that uses a fixed function pipeline are intercepted by a software component associated with the remote session. Those calls are then remapped to a shader pipeline. Some calls in the fixed function pipeline are identical to the shader pipeline, and thus do not need to be modified. Some calls in the fixed function pipeline have nearly equivalent calls in the shader pipeline, such as being identical, save for the name of the call. For those calls for which neither of the above two conversion methods apply, the drawing result that those calls will achieve is analyzed and a shader program that will cause the same drawing result is identified.","In a further exemplary embodiment, the graphics calls are optimized for use in a remote session. The resulting shader pipeline calls are sequenced so as to enhance remoting performance. For example, state set calls are batched together, small vertex formats are used, and meshes and vertex buffers are sent to the client only when they change","It can be appreciated by one of skill in the art that one or more various aspects of the disclosure may include but are not limited to circuitry and\/or programming for effecting the herein-referenced aspects of the present disclosure; the circuitry and\/or programming can be virtually any combination of hardware, software, and\/or firmware configured to effect the herein-referenced aspects depending upon the design choices of the system designer.","The foregoing is a summary and thus contains, by necessity, simplifications, generalizations and omissions of detail. Those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["120","120","120"]},"Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through an non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through a output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Referring now to , it generally illustrates an example environment wherein aspects of the present disclosure can be implemented. One skilled in the art can appreciate that the example elements depicted by  provide an operational framework for describing the present disclosure. Accordingly, in some embodiments the physical layout of the environment may be different depending on different implementation schemes. Thus the example operational framework is to be treated as illustrative only and in no way limit the scope of the claims. One skilled in the art can also appreciate that the following discussion is introductory and the elements depicted by  are described in more detail within the discussion of the operational procedures of .","Generally,  depicts a high level overview of a terminal server environment that can be configured to include aspects of the present disclosure. In reference to the figure, a server  is depicted that can include circuitry configured to effectuate a terminal server and for example, three example clients , , and  (while three clients are depicted the server  in embodiments can service more or less clients). The example clients - can include computer terminals effectuated by hardware configured to direct user input to the server  and display user interface information generated by the server . In other embodiments, clients - can be computers that include similar elements as those of computer  . In these example embodiments, clients - can include circuitry configured to effect operating systems and circuitry configured to emulate the functionality of terminals. In these examples one skilled in the art can appreciate that the circuitry configured to effectuate the operating systems can also include the circuitry configured to emulate terminals.","In the depicted example, the server  can be configured to generate one or more sessions for connecting clients , , and  such as sessions  through N (where N is an integer greater than 1). Briefly, a session in example embodiments of the present disclosure can generally include an operational environment that is effectuated by a plurality of subsystems, e.g., software code, that are configured to effectuate an execution environment and interact with a kernel  an operating system . For example, a session can include a shell and a user interface such as a desktop, the subsystems that track mouse movement within the desktop, the subsystems that translate a mouse click on an icon into commands that effectuate an instance of a program, etc. In another example embodiment the session can include an application. In this example while an application is rendered, a desktop environment may still be generated and hidden from the user. The session in this example can include similar subsystems as the session described above. Generally, a session can be generated by the server  on a user by user basis when, for example, the server  receives a connection request over a network connection from a client such as client . Generally, a connection request can first be handled by the transport logic  that can, for example, be effectuated by circuitry of the server . The transport logic  can in some embodiments include a network adaptor, firmware, and software that can be configured to listen for connection messages and forward them to the engine . As illustrated by , when sessions are generated the transport logic  can include protocol stack instances for each session. Generally, each protocol stack instance can be configured to route user interface output to an associated client and route user input received from the associated client to the appropriate session core .","As depicted by , during the session generation process the engine  can be configured to obtain a license for the session. For example, in one example embodiment the engine  can receive a license from the client  during the session generation process. In other example embodiments the engine  can receive a copy of a license from a license database . In some embodiments of the present disclosure the license database  can include a relational database management program that can be executed on an operating system of a computer such as computer  of . In an example embodiment that includes a license database , it can store one or more licenses that can be checked out when a client attempts to obtain a session from the server . In another embodiment each license can itself be associated with an account identifier, e.g., a username\/password combination, a smartcard identifier, etc., and each license can only be checked out if the correct account identifier is presented. Generally, the number of connections that a server  can generate can be dependent upon the number of licensees the entity that controls the server  has purchased from a service provider. If for example, the entity has purchased one license, then the server  can be configured to only allow one session. In this example if the license is associated with an account identifier, then only a user that presents the correct account identifier can obtain a session.","In example embodiments of the present disclosure each license can be validated by a service provider  before they can be used. For example, the service provider  can in example embodiments act as a certificate authority that aphorizes and activates licenses and servers. In these embodiments the service provider  can ensure that licenses are not stolen, copied, or pirated. The service provider  can also ensure that the license are only used by the server  they are purchased for by storing a copy of the licenses in a database and associating the licenses with server .","As illustrated by , a configuration manager  in an example embodiment of the present disclosure can include computer readable instructions that when executed instantiate a process that can receive a license during the session creation process and determine a service level for a newly spawned session by interfacing with various subsystems such as session manager . The session manager  in an embodiment can be configured to initialize and manage each session by for example, generating a session identifier for a session space; adding the session identifier to a table; assigning memory to the session space; and generating system environment variables and instances of subsystem processes in memory assigned to the session space. As illustrated by , in an embodiment the session manager  can instantiate environment subsystems such as a runtime subsystem  that can include a kernel mode part such as the session core . For example, the environment subsystems in an embodiment can be configured to expose a subset of services to application programs and provide an access point to the kernel  of the operating system . As illustrated by , in some embodiments the kernel  can include a security subsystem  and a resource manager . In an example embodiment the security subsystem  can enforce security policies of the server  by, for example, performing run-time object protection. In these embodiments the resource manager  in an embodiment can create and terminate processes and threads in response to requests from the runtime subsystem . More specifically, in an embodiment the runtime subsystem  can request the execution of threads and the session core  can send requests to the executive of the kernel  to allocate memory for the threads and schedule time for them to be executed.","Continuing with the description of , in an embodiment the session core  can include a graphics display interface  (GDI) and an input subsystem . The input subsystem  in an example embodiment can be configured to receive user input from a client  via the protocol stack instance associated with the session and transmit the input to the session core . The user input can in some embodiments include signals indicative of absolute and\/or relative mouse movement commands, mouse coordinates, mouse clicks, keyboard signals, joystick movement signals, etc. User input, for example, a mouse double-click on an icon, can be received by the session core  and the input subsystem  can be configured to determine that an icon is located at the coordinates associated with the double-click. The input subsystem  can then be configured to send a notification to the runtime subsystem  that can execute a process for the application associated with the icon.","In addition to receiving input from a client , draw commands can be received from applications and\/or a desktop and processed by the GDI . The GDI  in general can include a process that can generate graphical object draw commands. The GDI  in this example embodiment can be configured to pass the commands to the remote display subsystem  that can instantiate a display driver for the session. In an example embodiment the remote display subsystem  can be configured to include virtual display driver(s) that may not be associated with displays physically attacked to the server , e.g., the server  could be running headless. The virtual display driver in this embodiment can be configured to receive the draw commands and transmit them to the client  via a stack instance associated with the session.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3","b":["314","302","301","302","314","301"]},"Application  makes fixed function pipeline API calls to create graphics output to be displayed on a display device. Those calls are intended for a fixed function pipeline API library , but are intercepted by a library of the server's remote session application . This remote session library  may be loaded, for instance, when the application  first loads or when the application  first loads the fixed function pipeline API library . All fixed function pipeline API calls of the application  are intercepted by the remote session library , which then determines whether to direct the call to the originally intended fixed function pipeline API library  (such as where the graphics call is not intended to be sent over the remote session) or whether to transform the fixed function pipeline call into a shader pipeline call (such as where the graphics call is intended to be sent over the remote session).","A wrapper library  receives this intercepted fixed function pipeline call and wraps the result of the fixed function pipeline call, such that if the fixed function pipeline call causes the creation of a sub-object, then a wrapped version of that sub-object is generated.","The wrapped sub-object is then converted into a shader pipeline API call by the shader pipeline library . Where the fixed function pipeline comprises DIRECT3D 9, the DIRECT3D fixed-function-to-shader-pipeline converter may be used to convert the calls in the DIRECT3D 9 API that relate to the fixed function pipeline into DIRECT3D 9 compatible shaders. Then the DIRECT3D shader converter may be used to convert at runtime the DIRECT3D 9 shaders into DIRECT3D 10 compatible shaders.","The fixed function pipeline call may be mapped to a shader pipeline call in other ways. Some fixed function pipeline calls are identical to available shader pipeline calls. In that instance, the call may be used in its original state, without modification. Some fixed function pipeline calls are nearly identical to available shader pipeline calls. For instance, they may differ only in name, but have the same arguments and the same return value. Or, they may accept a subset of the arguments that the nearly identical shader pipeline call accepts, and any additional arguments may be provided as default values that cause the shader pipeline call to behave as the fixed function pipeline call does. In DIRECT3D 9, calls nearly identical to DIRECT3D 10 calls include SetTexture, SetVertexBuffer, SetRenderTarget, and SetStreamSource.","Some fixed function pipeline calls may be considered to influence the equivalent shader pipeline calls. For instance, these fixed function pipeline calls may be made to build up a chunk of state. In this case, an equivalent shader program that achieves the same result is identified and used. fixed function pipeline calls like this, in DIRECT3D 9, include SetTextureStageState, SetRenderState and other calls that affect state.","These shader pipeline calls are then sent to the remote session server , which transmits them to a remote session client  of a client  across a communications network . The client  generates an image corresponding to the primitive shader pipeline calls received and displays the image on display device .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 3B","FIG. 3"],"b":"306"},"A fixed function pipeline interceptor  intercepts all fixed function calls made by an application. Those calls that may be directly converted into their shader pipeline counterpart, such as where the calls are identical between the fixed function pipeline and the shader pipeline, or where the call maps to a similar call, may be sent directly to the fixed-function-pipeline-to-shader-pipeline-call converter . Otherwise, the call is sent to the fixed-function-to-shader-2.0 converter .","The fixed-function-to-shader-2.0 converter  converts calls in the fixed function pipeline API that relate to the fixed function pipeline into fixed function pipeline compatible shaders. In an embodiment, this converter maps DIRECT3D legacy fixed function rendering settings to the more modern programmable shader technology, such as version 2.0 of the programmable shader language. In an embodiment, this comprises the DIRECT3D 9 fixed-function-pipeline-to-shader converter. These fixed function pipeline compatible shaders output are then converted into shader pipeline-compatible shaders at . Shader-to-shader converter  maps an older version of a programmable shader language to a more recent version of the programmable shader language. In an embodiment, it maps from DIRECT3D programmable shader language version 2.0 to DIRECT3D programmable shader language 4.0. The shader pipeline-compatible shader  is then provided to the fixed-function-pipeline-call-to-shader-pipeline-call converter , and from there the received call, whether received directly from the fixed function pipeline interceptor  or the shader-2.0-to-shader-4.0 converter , is sent to the shader pipeline , where a remote session obtains it and transmits it across the communications network  to the client .","In an embodiment, fixed-function-to-shader-2.0 converter  and shader-to-shader converter  are combined and perform a single-step conversion from fixed function rendering to shader 4.0 rendering, or an even more recent version of the shader language in question. An embodiment may have several converters that do single-step translation from a source rendering language to a common target language. For example, it would be possible to use a fixed function to 4.0 mapping, a 2.0 to 4.0 mapping, and other intermediates as necessary (e.g. 1.0 to 4.0, 3.0 to 4.0, etc.).",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4"},"Operation  depicts intercepting a fixed function pipeline API call of the application.","In an embodiment, this comprises when the application attempts to load a fixed function pipeline API library corresponding to the fixed function pipeline API call, loading an interceptor library. In an embodiment this is accomplished via MICROSOFT DETOURS\u2122, which intercepts Windows 32 functions by rewriting the in-memory code for target functions. It also provides utilities to attach arbitrary dynamic-link libraries (DLLs) and data segments to any Windows 32 binary.","Operation  depicts wrapping the fixed function pipeline call. In an embodiment, this wrapping may be accomplished with Detours with the following code that wraps the fixed function pipeline entry points:",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT \u2003\u2003\u2003(* fnTrue_Direct3DCreate9Ex)(UINT"]},{"entry":[{},"SDKVersion, IDirect3D9Ex **ppD3D) = Direct3DCreate9Ex;"]},{"entry":[{},"\u2003DetourTransactionBegin( );"]},{"entry":[{},"\u2003DetourUpdateThread(GetCurrentThread( ));"]},{"entry":[{},"\u2003DetourAttach(&(PVOID&)fnTrue Direct3DCreate9Ex,"]},{"entry":[{},"WrapperDirect3DCreate9Ex); DetourTransactionCommit( )"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The above exemplary machine-readable instructions may be used to remap the entry point to the fixed function pipeline API set (i.e. the object that creates all other child objects) with a wrapper. So, if a call to the fixed function pipeline API creates a sub-object, such as an IVertexBuffer, then a wrapped version of that object is returned.","Operation  depicts mapping the wrapped call to a shader pipeline API call.","In an embodiment, this comprises using a DIRECT3D fixed-funtion-to-shader-pipeline converter to convert the calls in the DIRECT3D 9 API that relate to the fixed function pipeline into DIRECT3D 9-compatible shaders. In an embodiment, this comprises using the DIRECT3D fixed-funtion-to-shader-pipeline converter to runtime convert the DIRECT3D 9 shaders to DIRECT3D 10-compatible shaders.","In an embodiment, mapping the wrapped call to the shader pipeline API call comprises determining that the fixed function pipeline call has a name, at least one argument and a return value that equals a name, at least one argument and a return value of a shader pipeline call, and sending the shader pipeline API call to the client comprises: sending the wrapped call to the client.","In an embodiment, mapping the wrapped call to the shader pipeline API call comprises determining that the wrapped call has an equivalent shader pipeline call. In an embodiment, a wrapped call has an equivalent shader pipeline call when the two calls have the same return value and arguments, or the same return value and the wrapped call's arguments comprise a subset of equivalent shader pipeline call's arguments.","In an embodiment, mapping the wrapped call to the shader pipeline API call comprises determining a shader pipeline API call that is influenced by the wrapped call. In an embodiment, a shader pipeline API call is influenced by the wrapped call when the shader pipeline call corresponds to a shader program that produces the same graphical output as the wrapped call.","Optional operation  depicts intercepting a plurality of fixed function pipeline API calls; wrapping each of the plurality of fixed function pipeline API calls; mapping each wrapped call to a shader pipeline API call; optimizing the shader pipeline API calls; and sending the optimized shader pipeline API calls to the client.","In an embodiment, optimizing the shader pipeline calls comprises batching a plurality of state set calls. In an embodiment, optimizing the shader pipeline calls comprises using small vertex formats\u2014like using a 32-bit floating point number instead of a 64-bit double floating point number. In an embodiment, optimizing the shader pipeline calls comprises sending a mesh to the client after the mesh has changed, or sending a vertex buffer to the client after the vertex buffer has changed. In an embodiment, optimizing the shader pipeline calls comprises determining at least one second shader pipeline call that results in the same output as the shader pipeline calls; and substituting every second shader pipeline call for the shader pipeline calls. In an embodiment, optimizing comprises reducing extraneous information from the calls. For instance, where a call is made to determine the X, Y, and Z coordinates of a vertex, but only the X and Y coordinates are given values, and there is a similar call that takes only the X and Y values that requires fewer bits to transmit, that smaller call may be substituted for the larger call.","In an embodiment, optimizing comprises optimizing the fixed function pipeline to shader pipeline translation to focus on a current scenario. For instance, where a WINDOWS PRESENTATION FOUNDATION\u2122 application is the application, only those DIRECT3D 9 calls that that application makes need to have wrappers implemented.","Operation  depicts sending the shared pipeline API call to the client. In an embodiment, this is performed according to a remote desktop protocol (RDP).","Conclusion","While the present disclosure has been described in connection with the preferred aspects, as illustrated in the various figures, it is understood that other similar aspects may be used or modifications and additions may be made to the described aspects for performing the same function of the present disclosure without deviating there from. Therefore, the present disclosure should not be limited to any single aspect, but rather construed in breadth and scope in accordance with the appended claims. For example, the various procedures described herein may be implemented with hardware or software, or a combination of both. Thus, the methods and apparatus of the disclosed embodiments, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium. When the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus configured for practicing the disclosed embodiments. In addition to the specific implementations explicitly set forth herein, other aspects and implementations will be apparent to those skilled in the art from consideration of the specification disclosed herein. It is intended that the specification and illustrated implementations be considered as examples only."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The systems, methods, and computer readable media in accordance with this specification are further described with reference to the accompanying drawings in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3B","FIG. 3"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
