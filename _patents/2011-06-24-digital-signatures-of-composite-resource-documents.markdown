---
title: Digital signatures of composite resource documents
abstract: An embodiment of the disclosure can receive a composite resource document containing at least one resource. An updated manifest resource can be obtained. The updated manifest resource can list all resources in the composite resource document. A set of zero or more (0 . . . N) resources can be indicated. Each indicated resource is one that is to be subtracted from the list of resources in the updated manifest resource in order to create a generated signature reference list of identified resources to be signed. A hash token can be generated using the resources identified in the generated signature reference list to form a signature hash token. The signature hash token can be encrypted with a secret key.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856532&OS=08856532&RS=08856532
owner: International Business Machines Corporation
number: 08856532
owner_city: Armonk
owner_country: US
publication_date: 20110624
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates to security of resources in a data processing system.","A \u201cdocument\u201d may be a convenient metaphor for representing an instance of a web-based business transaction or collaborative business process. The document allows the end-user to save, email and digitally sign a complete digital representation of the end user's interactions with the information system and the full context of those interactions. The document is also a convenient metaphor for web application developers as it gives the developers a single digital asset that can be routed through a business process, encapsulate the full user experience definition for a rich interactive application, and contain all user input, attachments and digital signatures related to a business process transaction. Thus, via the document metaphor, an offline or disconnected form fill experience may be easily offered to end-users. Unresolved challenges exist with digital signatures for documents, which are composite resource documents.","An embodiment of the disclosure can receive a composite resource document containing at least one resource. An updated manifest resource can be obtained. The updated manifest resource can list all resources in the composite resource document. A set of zero or more (0 . . . N) resources can be indicated. Each indicated resource is one that is to be subtracted from the list of resources in the updated manifest resource in order to create a generated signature reference list of identified resources to be signed. A hash token can be generated using the resources identified in the generated signature reference list to form a signature hash token. The signature hash token can be encrypted with a secret key.","An embodiment of the disclosure can receive a composite resource document, containing a set of one or more (1 . . . N) resources, each having a digital signature. An updated manifest resource can be obtained. The updated manifest resource can list all resources in the composite resource document. A hash token can be generated using the resources identified in a generated signature reference list in the digital signature. An encrypted hash token contained within the digital signature can be decrypted using an obtained decryption key to form a signature hash token. Responsive to a comparison of the generated hash token and the signature hash token, a signature validity result can generated, which indicates whether the signatures of the composite resource document are valid or not.","Unresolved challenges exist with digital signatures for documents, which are composite resource documents, as will be detailed herein.  (Prior Art) shows a model of an interactive document flowing through a business process . The interactive document is provisioned to the various collaborators, such as collaborator  and collaborator . This enables the collaborators  and  to provide their input into the document using content repository . Contract template  can be used to create proposed contract . Proposed contracts may be reviewed and approved by approver  communicating through a network such as Internet  using check credit service  and electronic funds transfer service  to generate executed contract . Executed contract  may be stored in repository .","With reference to  a logical layering of an interactive document is presented. In essence, the \u201cinteractive document\u201d represents a web application as well as the experience of the web application by a particular user or set of users. The documents, such as executed contract , tend to be organized into several logical layers  typically comprising data layer, a business rule layer, a logical user interface layer, and a presentational layer. Interactive document  depicts a logically stratified approach of representing the components of an interactive document within a collaborative business process. Human interface  is an example of a logical user interface layer and presentation layer, while business logic and dynamic validation  represent a business rule layer.","The data layer, represented by data access and validation , represents underlying data often written in extensible markup language (XML) format, addressable by XML Path language (XPath), and intended to conform to an XML schema  of back-end transactions an information system is ultimately designed to drive. A goal of the application is the \u201cfill experience\u201d of the data layer. The data layer may include simple items of data, such as data instance , entered by the user, like names, dates, numbers, and amounts as well as file attachments and digital signatures. At key points of the business process, the data can be separated from the rest of the document and stored in databases and\/or used to drive workflow steps or completed transactions.","Business rules, logical user interface and presentation layer attach to the data layer providing interaction services. For example, a business rule using XML form definition language, XForms Model  may make certain parts of the data relevant only when the user is of a certain age, the XForms logical user interface  may provide binding mechanisms connecting the data and the business rule metadata to the presentation layer, and the presentation layer may divide the graphical user experience into multiple pages using multipage XFDL . Extensible Forms Description Language (XFDL) is a class of the extensible markup language (XML).","A digital signature over such a document protects the data provided by the user and also protects other layers simultaneously, thereby creating a protected binding between the data and the application context in which that data was collected. The digital signature is supported through security, auditability and interoperability  typically using XML and XML signature . For example, when the user enters a data value \u201c500\u201d, the digital signature protects not just the data value \u201c500\u201d but also the meaning of the data value, whether that data value means \u201cBuy 500 steel beams\u201d or \u201cSell 500 shares\u201d. This application requirement conforms to the W3C XML Signatures standard, which effectively states a conforming application should sign and validate what a user \u201csees\u201d, rather than just the underlying data being collected.","In a collaborative business process, there is a complicating factor for digital signatures. Simple digital signature applications tend to sign a document as a complete, opaque file, colloquially, a \u201cbucket of bits\u201d. The signature protects the whole file, and when any modifications are made to the file after the signature is affixed, the digital signature becomes invalid. However in a collaborative business process, there are often steps of workflow performed after a first digital signature is affixed. These workflow steps create additional information pertinent to the full transaction. Since the document is the representation of the full and completed business process transaction, these workflow steps must modify the document, which must be done without invalidating the digital signature.","The W3C XML Signatures standard provides a solution in the form of a digital signature transform. Without use of transforms, a single XML signature is capable of signing any number of URI-addressable resources. Any number of these resources can be binary, so an XML signature can sign XML content as well as non-XML content. A cryptographic hash of each resource is placed into the XML signature, and then a set of resource hashes is hashed and encrypted with private key material of a signer. However, the W3C XML signature standard also allows each resource to be transformed before it is hashed. XML resources in particular can be transformed using XPath Filter 2, which allows portions of the XML resource to be subtracted before the hash is calculated.","A filtering transform can also simply list what is to be signed, but this has less security value since anything not listed could be added to the resource without invalidating the signature. In collaborative business processes, it is a known best practice to use subtraction filters because the expression of what to subtract is also a characterization of what the rest of the business process is allowed to modify after the signature is affixed. Any other additions, changes or deletions not characterized by the subtraction filter would have the desired effect of invalidating the digital signature.","A single XML document may become less tenable over time as application authors create applications with more and more pages while also demanding higher form throughput per server. Known solutions have drawbacks for digitally signing an interactive document, including representing the document as a single XML file, which allows subtraction filtering but has poor performance, and representation of the document as a composite resource, which offers better performance and allows subtraction filtering within each resource but does not allow subtraction filtering of whole resources from the composite resource. The disclosure provides a solution (detailed herein) for digital signatures for composite resource documents, which overcomes at least a portion of the heretofore unresolved challenges with digital signatures for documents.","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","Referring to the figures,  depicts a pictorial representation of a network of data processing systems in which illustrative embodiments may be implemented. Network data processing system  is a network of computers in which the illustrative embodiments may be implemented. Network data processing system  contains network , which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network  may include connections, such as wire, wireless communication links, or fiber optic cables.","In the depicted example, server  and server  connect to network  along with storage unit . In addition, clients , , and  connect to network . Clients , , and  may be, for example, personal computers or network computers. In the depicted example, server  provides data, such as boot files, operating system images, and applications to clients , , and . Clients , , and  are clients to server  in this example. Network data processing system  may include additional servers, clients, and other devices not shown.","In the depicted example, network data processing system  is the Internet with network  representing a worldwide collection of networks and gateways that use the Transmission Control Protocol\/Internet Protocol (TCP\/IP) suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, governmental, educational and other computer systems that route data and messages. Of course, network data processing system  also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN).  is intended as an example, and not as an architectural limitation for the different illustrative embodiments.","Turning now to  a block diagram of a data processing system operable for various embodiments of the disclosure is presented. In this illustrative example, data processing system  includes communications fabric , which provides communications between processor unit , memory , persistent storage , communications unit , input\/output (I\/O) unit , and display .","Processor unit  serves to execute instructions for software that may be loaded into memory . Processor unit  may be a set of one or more processors or may be a multi-processor core, depending on the particular implementation. Further, processor unit  may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example, processor unit  may be a symmetric multi-processor system containing multiple processors of the same type.","Memory  and persistent storage  are examples of storage devices . A storage device is any piece of hardware that is capable of storing information, such as, for example without limitation, data, program code in functional form, and\/or other suitable information either on a temporary basis and\/or a permanent basis. Memory , in these examples, may be, for example, a random access memory or any other suitable volatile or non-volatile storage device. Persistent storage  may take various forms depending on the particular implementation. For example, persistent storage  may contain one or more components or devices. For example, persistent storage  may be a hard drive, a flash memory, a rewritable optical disk, a rewritable magnetic tape, or some combination of the above. The media used by persistent storage  also may be removable. For example, a removable hard drive may be used for persistent storage .","Communications unit , in these examples, provides for communications with other data processing systems or devices. In these examples, communications unit  is a network interface card. Communications unit  may provide communications through the use of either or both physical and wireless communications links.","Input\/output unit  allows for input and output of data with other devices that may be connected to data processing system . For example, input\/output unit  may provide a connection for user input through a keyboard, a mouse, and\/or some other suitable input device. Further, input\/output unit  may send output to a printer. Display  provides a mechanism to display information to a user.","Instructions for the operating system, applications and\/or programs may be located in storage devices , which are in communication with processor unit  through communications fabric . In these illustrative examples the instructions are in a functional form on persistent storage . These instructions may be loaded into memory  for execution by processor unit . The processes of the different embodiments may be performed by processor unit  using computer-implemented instructions, which may be located in a memory, such as memory .","These instructions are referred to as program code, computer usable program code, computer executable instructions or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media, such as memory  or persistent storage .","Program code  is located in a functional form on computer readable media  that is selectively removable and may be loaded onto or transferred to data processing system  for execution by processor unit . Program code  and computer readable media  form computer program product  in these examples. In one example, computer readable media  may be in a tangible form, such as, for example, an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage  for transfer onto a storage device, such as a hard drive that is part of persistent storage . In a tangible form, computer readable media  also may take the form of a storage media of persistent storage, such as a hard drive, a thumb drive, or a flash memory that is connected to data processing system . The tangible form of computer readable media  is also referred to as computer recordable storage media. In some instances, computer readable media  may not be removable.","Alternatively, program code  may be transferred to data processing system  from computer readable media  through a communications link to communications unit  and\/or through a connection to input\/output unit . The communications link and\/or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non-tangible media, such as communications links or wireless transmissions containing the program code.","In some illustrative embodiments, program code  may be downloaded over a network to persistent storage  from another device or data processing system for use within data processing system . For instance, program code stored in a computer readable storage medium in a server data processing system may be downloaded over a network from the server to data processing system . The data processing system providing program code  may be a server computer, a client computer, or some other device capable of storing and transmitting program code .","According to an illustrative embodiment using data processing system  of  as an example, processor unit  executes a computer-implemented process for creating a digital signature for a composite resource document receives the composite resource document containing at least one resource from a source including communications unit , storage devices  or input\/output unit . Processor unit  obtains an updated manifest resource, wherein the updated manifest resource lists all resources in the composite resource document, and indicates zero, one or a plurality of resources to subtract from the list of resources in the updated manifest resource to create a generated signature reference list of identified resources to be signed. Processor unit  generates a hash token using the resources identified in the generated signature reference list to form a signature hash token and encrypts the signature hash token with a secret key.","Processor unit  further processes the computer-implemented process to validate a digital signature for a composite resource document. Processor unit  receives the composite resource document, containing one or a plurality of resources, having a digital signature from a source including communications unit , storage devices  or input\/output unit . Processor unit  obtains an updated manifest resource, wherein the updated manifest resource lists all resources in the composite resource document. Processor unit  generates a hash token using the resources identified in a generated signature reference list in the digital signature to form a generated hash token and decrypts an encrypted hash token contained within the digital signature using an obtained decryption key to form a signature hash token. Processor unit  responsive to at least a comparison of the generated hash token and the signature hash token generates a signature validity result.","In an alternative embodiment, program code  of  containing the computer-implemented process may be stored within computer readable media  as computer program product . In another illustrative embodiment, the process for digitally signing a composite resource document may be implemented in an apparatus comprising a communications fabric, a memory connected to the communications fabric, wherein the memory contains computer executable program code, a communications unit connected to the communications fabric, an input\/output unit connected to the communications fabric, a display connected to the communications fabric, and a processor unit connected to the communications fabric. The processor unit of the apparatus executes the computer executable program code to direct the apparatus to perform the process.","With reference to  a block diagram of composite document system in accordance with one embodiment of the disclosure is presented. Composite document system  is an example of a set of components including support of an underlying operating system services typical of a system such as data processing system  of .","Composite document system  contains a number of interrelated components comprising enhanced signature generator , enhanced signature metadata , manifest resource , URI resolver , object element  and composite document structure .","Enhanced signature generator  provides a capability for processing XML statements to generate a digital signature conforming to the applicable XML standards used. The signature generator is enhanced to contain URI resolver , which locates resources required during the creation of the digital signature. URI resolver  uses universal resource identifiers to obtain specified resources included in the composite document. A URI inherently locates a referenced resource. Including the resolver with the signature generator allows the required resource entries to be found by a typical commercial XML signature processor, whether the resources are located locally within the composite resource document or remotely on a web server. The caller of the digital signal library function provides URI resolvers to a digital signal library. The URI resolver is typically part of (provided by) a programming language, such as Java.","Enhanced signature metadata  includes additional items that can be included as signature properties elements. The additional items include end user locale descriptor, local date and time of signing, and UTC date and time of signing.","Manifest resource  contains a listing of all resources contained within the composite resource document. Typically, the processor of the composite resource document updates Manifest resource  any time a resource is added to or deleted from the composite resource document. However, for the purposes of this disclosure, it is only necessary for Manifest resource  to reflect the resources in the composite resource document at the time of generating a digital signature and at the time of validating a digital signature. Object element  is a set of elements comprising one or more elements containing special content designed by an author within a signature element of the composite document. In the example embodiment object element  contains a specially recognized XML attribute declaring a list of resource descriptors that indicate resources to subtract from the list of reference elements generated into the signed information construct.","Composite document structure  defines a logical structure for a relative positioning of elements comprising a composite resource document representing an interactive web document format. Typical elements comprise a header, such as a mimetype identifier, resources of wizard pages, images, form pages, data instances, attachments format models, interaction controls and a manifest.  illustrates an example of a composite document structure.","With reference to  a block diagram of logical transition from a monolithic interactive document to a format of a composite document in accordance with one embodiment of the disclosure is presented. Structures  represent a logical transition that has evolved over time. The transition does not depict a transform that occurs during processing; rather the representation depicts similarities and differences of the different models. In the figure W represent wizard pages, F represents forms pages, D represent data instances, M represents a forms model and IC represents an interaction controller.","Structure  represents a document as a single XML file format using a monolithic model. Structure  represents a resource decomposition view of structure , with the addition of an optional interaction controller to help manage transitions among the wizard page and form page resources comprising the interactive user interface definition within Structure .","Structure  represents a compressed archive format of a composite resource document format using the open document format (ODF) packaging format as a compressed archive containing all resources needed for the interactive document. The document format of structure  internally contains various components of Structure , and hence Structure , as separate resources. Structure  also contains mimetype  information element and a Manifest  resource.","The compressed archive format is accessible via an application programming interface that permits additions, deletions and changes to resources and directories, and of course the ability to get the content of resources and directory lists. Typically, such additions, deletions and changes to resources and directories are reflected in the content of the Manifest  resource.","With reference to  a block diagram of a relationship between a composite document, a REST service that makes the composite document available on the web, the web application layer, and the end-user interaction layer in accordance with embodiments of the disclosure is presented. In an illustrative embodiment, enablement of web-based end-user interaction with composite documents uses a representational state transfer (REST) architected service front-end to the document. The service allows a document template to be copied and become the central artifact of an instance of a collaborative business process. Rather than the whole document being transmitted through the business process, the token of access control to the REST interface of the instantiated document is passed through the business process.","Relationship  applies for the duration of business process  to provide an association of application client layer  with application server layer , document interaction layer  and composite web resource layer . The document interaction layer  provides the Composite resource document processor, REST interface  for interacting with the logically unpacked composite resource document . Two endpoints in the REST interface  offer the ability to generate a specified XML digital signature in the composite resource document, and validate a specified XML digital signature in the composite resource document. Composite resource document processor, REST interface  provides access to interact with and modify the logically unpacked composite resource document  to both server  and client  logical layers.","With reference to , a block diagram of a logical location of an XML signature in relation to components of a composite resource document, in accordance with the disclosure is presented. An example implementation uses an Apache XML Signature library, (Apache is a trademark of the Apache Software Foundation), although implementations can also use XML signature facilities built into Java. Logical relationship  for composite resource document  in the example embodiment provides a URI resolver to the XML signature generator to allow the signature generator to find the resources of the composite resource document. Composite resource document  comprises logo , forms pages  and forms pages  with data instance  and data instance . Data instance  further contains XML signature .","Prior to generating XML signature , markup of the signature appears in the XML data of an XForms instance in the following form:",{"@attributes":{"id":"p-0071","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Signature xmlns=\u2033http:\/\/www.w3.org\/2000\/09\/xmldsig#\u2033>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<SignedInfo>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<CanonicalizationMethod Algorithm=\u201chttp:\/\/ www.w3.org\/TR\/2001\/REC-xml-"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"c14n-20010315\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<SignatureMethod Algorithm=\u201chttp:\/\/ www.w3.org\/2001\/04\/xmldsig-more#rsa-"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"sha256\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Reference URI?>...<\/Reference> +"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/SignedInfo>"]},{"entry":[{},"<SignatureValue>3H3K9TigFCzVDT4\/\/wbZpAHr0wEAAA==<\/SignatureValue>"]},{"entry":[{},"(<KeyInfo>)?"]},{"entry":[{},"(<Object Id?>)*"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Signature>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Within the SignedInfo element, an XML signature can use Reference elements to list one or more resources to sign or validate. The resources are indicated by a URI, which in the example implementation were resolved by the URI resolver of the disclosure. Logical relationship  depicts a logical location of XML signature  within the data layer as well as an ability of XML signature  to relatively reference resources within the composite resource document  regardless of where the composite resource document is stored. An implementation could use a get resource endpoint in the REST service, but the example implementation using the URI resolver directly accesses the composite resource document because the XML signature functionality is behind the REST interface  as part of the composite resource document processor  (the implementation of the REST interface).","The XML signature generator itself then provides an ability to further filter each resource using a Transforms element within the Reference element. Ultimately, the hash (digest) of the resource is calculated. During signature generation, the hash is stored in the DigestValue element. During validation, the calculated hash is compared to the DigestValue to determine whether the resource has been modified (which would invalidate the signature). When generating a signature, once the DigestValue of each resource has been calculated and stored within the Reference element, the hash of the entire containing SignedInfo element (see above) is calculated, encrypted with the signer's private key, base  encoded and stored in the Signature Value element. During signature validation, the DigestValue values are checked for equivalence with calculated hashes of the resources at the time of validation, and provided equality is achieved for each resource indicated by a Reference element, the hash of the SignedInfo is obtained and compared for equality with the base  decoded, decrypted hash value stored in the Signature Value element at the time of signature generation. On inequality of any DigestValue or the Signature Value with hashes calculated during validation, an invalid result is produced. Otherwise, core validation reports a successful result, and applications are free to perform secondary checks such as key expiry, key revocation, issuer validity, and membership in a trusted key list.","In addition to a custom URI resolver, the disclosed process overloads standard behavior of the XML signature generator by separating the DigestValue calculations from the final encryption of the Signature Value, which requires the private key material of an end user. The XML signature generator in the disclosed process is located on the server as part of the REST service implementation . The disclosed process provides a dummy private key to enable the XML signature generator to generate the Signature Value. The SignedInfo generated is returned to the client machine. The SignedInfo is hashed, and the hash is encrypted with the private key of the user. The disclosed process provides a separate REST endpoint within REST interface  enabling the setting of the final correct Signature Value into the digital signature. Signature validation requires no similar overload since validation only requires the public key of the signer.","A standard XML signature system provides for signing multiple resources, and is exploited to create basic digital signatures on composite documents. However, digital signatures on composite documents require a subtraction filter mechanism to be secure.","Using a default configuration, an example implementation of the disclosed process overloads the digital signature generation step for the composite document with a preprocessing step that builds a list of reference elements for the SignedInfo of the specified digital signature. In one example, a reference list may be created as follows:",{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"{"},{"entry":"For each resource R in the composite resource document,"},{"entry":"\u2003if R is content.xml or the resource containing the digital signature markup,"},{"entry":"\u2003\u2003do nothing"},{"entry":"\u2003else"},{"entry":"\u2003\u2009if there is not a Reference element for R, then"},{"entry":"\u2003\u2003add a Reference element indicating R in the URI attribute."},{"entry":"If the Reference list contains a same document (URI=\u201c\u201d) Reference SD, then"},{"entry":"\u2003Add to SD a Transform that subtracts the digital signature markup"},{"entry":"Else"},{"entry":"\u2003Add a same document Reference (URI=\u201c\u201d) that subtracts the digital signature markup.\u2003"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The conditional test for pre-existence of a reference for R (in the fifth textual line above) allows the digital signature markup to express transforms on specific resources within the composite resource document. Any resources not specifically referenced by digital signature markup are added to the digital signature markup and are therefore signed in entirety. Thus, in a default configuration, the SignedInfo is augmented to sign the entire composite resource document except as indicated by pre-existing references and respective possible transforms (which would likely be subtraction transforms for security of the individual resources).","In an example embodiment, content.xml contains only control structures related to managing page navigation and other interactions, so the example prototype does not automatically sign the content.xml resource, although an author of the digital signature markup can sign the content.xml resource or any portion of it by adding a reference element with URI=\u201ccontent.xml\u201d. The resource containing the digital signature markup is also omitted from the resources for which the example embodiment generates reference elements. This resource must change as part of generating the digital signature, so the resource must be handled specially as an \u201cenveloped\u201d signature.","One resource within a composite resource document is Manifest . Thus, if any resources are added to or deleted from the composite resource document after signing, then the Manifest  is changed such that DigestValue of the Reference that protects the Manifest  will not match, which will produce a signature validity result of invalid. The actual generated signature ensures no changes can be made to the resources that were present at the time of signing, except as permitted by any transforms expressed in the (signed) Reference elements. Since the Reference elements are signed, the only changes allowed to resources are those that were expressed by the author of the digital signature markup in Reference Transforms that existed at the time of signature generation.","The XML signature standard allows authors to include special content within a signature element using an Object element. The example design uses the capability to provide an override of default behavior of the example implementation. In the example, an Object element bearing a specially recognized XML attribute declares a list of resource descriptors indicating resources to subtract from the list of Reference elements generated into the SignedInfo. The resource descriptors allow wildcard match patterns as in the following example:",{"@attributes":{"id":"p-0082","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<Object compdoc:resourceFilter=\u201ctrue\u201d xmlns:compdoc=\u201c&compDocNS;\u201d>"},{"entry":"\u2003<compdoc:resourceDescriptor filter=\u201csubtract\u201d>attachments\/*<\/compdoc:resourceDescriptor>"},{"entry":"<\/Object>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"By allowing subtraction of resources that match given resource descriptors, the disclosed mechanism enables the author of the digital signature markup to enable end-users to add or delete specified resources to or from the composite resource document after the signature is affixed.","In the example design, the object is automatically added to the list of Reference elements of the SignedInfo and protected by the digital signature. The inclusion of the special Object causes the process to automatically add a subtraction Transform to the Reference for the Manifest  resource enabling addition and deletion of resources matching resource descriptors without invalidating the hash value produced for the Manifest  resource when a digital signature is generated.","In addition the example design automatically writes and signs additional information into the digital signature markup before signature generation. Another object element is added to record basic signature metadata in selected SignatureProperties elements. The specific metadata items recorded typically include an end-user (signer) locale descriptor, local date and time of signing and UTC date and time of signing. A reference to this metadata object is automatically added to the SignedInfo to protect the metadata by the digital signature. Illustrative embodiments also complete a KeyInfo element with X509Data, including the X509SubjectName and X509Certificate elements, and a reference to the KeyInfo element is also added to the SignedInfo. The signature metadata and the KeyInfo content help to meet basic security requirements specified by XML Advanced Electronic Signatures (XAdES). Further, since the design of the illustrative embodiments is based on XML signatures, (XAdES) requirements such as the addition of an authenticated timestamp to the signature are inherently supported.","With reference to , a code snippet example of a manifest, in accordance with the disclosure is presented. In terms of signature validation, an important aspect of the design of the example embodiment bases the composite resource document format on ODF packaging, which means that one of the resources in the composite resource document is a manifest listing all resources. Manifest  provides a list of all resources within the composite resource document. Resources in manifest  such as loan1.xhtml, loan2.xhtml and loan3.xhml provide a step-by-step user interface for collecting information that is placed in the data resource loanInstance.xml. Other files like gen-default.css and format.js contribute to the user interface appearance and run-time behaviors of the composite resource document.","With reference to , a code snippet example of XML data in a composite resource document template, in accordance with various embodiments of the disclosure is presented. In the example, when a document template is first instantiated to drive a specific business process on behalf of a user seeking a loan, the initial content of loanInstance.xml is as shown in the code snippet of .","In code snippet  the initial configuration of the <ds:Signature> element, element , does not include any <Reference> elements. Reference elements are absent because the disclosed design imparts a subtraction semantic on the XML signature Reference list, which means that the resources listed in the manifest will be included automatically at the time of signature generation and checked automatically at the time of validation.","With reference to , a code snippet example of XML Data in a filled composite resource document of , in accordance with various embodiments of the disclosure is presented. Once the user completes the data fill experience using loan*.xhtml, the data will look like code snippet . Data values now populate previously empty template fields .","With reference to , a code snippet example containing a composite resource document signature definition, in accordance with various embodiments of the disclosure is presented. Code snippet  represents a completed document having a set of references, manifest and digital signature using information from ,  and .","When a user invokes the Sign operation, as provided in element  of  the disclosed process adds the same document reference for loanInstance.xml, for example element , in which URI=\u201c \u201d enabling the signature being generated to be omitted from itself and adds reference elements for all other resources listed in the manifest, such as reference , reference  and reference . A reference for the manifest.xml file, manifest , is also added.","The digital SignatureValue of element  is also depicted. Element  illustrates the content of the signed info portion of the composite resource document definition before the core digital signature generation operation, which produces the content of the SignatureValue element after the disclosed process generates the Reference elements.","A signature validation operation ensures unwanted file additions or deletions have not occurred by validating the reference to the manifest.xml. An assumption that the ODF package document processor will not load a document when there is a conflict between the manifest and the actual archive content is also made. An alternate implementation may simply check for reference and manifest parity at the time of signature validation.","In another example, a grant application in which two or more grant applicants are expected to fill out respective personal information, attach a copy of a curriculum vitae, digitally sign the document and let the workflow system send the document to the next applicant for completion is presented. A digital signature created by the first user must subtract data file sub-trees corresponding to other applicants and attachments created by other applicants. Other than the two previous exceptions, all other files in the composite resource document describe the user interface, the user experience, or the data or attachments for the signing user, and hence all should be signed.","The arbitrary ability to attach files allows more XHTML pages, CSS files, JS files and so forth to be placed into the composite document resource. Further, since the content.xml file is omitted because the content.xml file contains control structures such as \u201cwhich xhtml page should be shown first\u201d, any newly added files could possibly add new alternative user experiences that could make false claims with respect to what the first signer signed. The possibility of making false claims is prevented by taking the notion of subtraction filtering up to the Reference list level of an XML signature.","With reference to , a code snippet example of a composite resource document signature definition illustrating reference list generation, in accordance with various embodiments of the disclosure is presented. The zero case of subtraction filtering provided by various embodiments of this disclosure is an important change of behavior relative to prior art. By default an XML signature requires an application designer to use Reference elements to list resources to be signed. In a composite resource document, the application designer creates a template and typically decides to include a digital signature feature. However, at run-time, an end-user may need to modify an instance of the template created to drive a business process. An expected end-user operation attaches new files into the composite resource document. Thus, it is not possible at application design time to list as Reference elements all of the resources that must be signed at the run-time moment of signature generation. Instead, it is necessary for the enhanced signature generator of the composite resource document processor to create the list of Reference elements at the time the digital signature is generated.","Therefore, it is important to augment the signing operation with a step that generates a Reference element generator for each resource in the composite resource document, including the manifest. This is the case of subtracting zero of the resources in the composite resource document from the signature. Code snippets of ,  and  showed an example of this case in which zero files were subtracted. However, the text only showed markup immediately before the signature generation process and immediately after the full signature generation process. The previous examples did not show the intermediate markup at the point after the digital signature augmentation that generates the Reference list and before the core digital signature generation.  provides an additional markup sample as code snippet . Element  defines a Signature element and element  defines one of the Reference elements automatically generated by various embodiments of the disclosed process.","A set of reference elements, including element  was generated into the SignedInfo, and each has an empty DigestValue element. As well the Signature Value is also empty. After the previously described signing augmentation, further steps can occur before core signature generation including for example, a step that adds a ds: Object to include basic signature properties such as signing time and locale, and another reference to sign. In another example, ds:KeyInfo would be added to store the digital signing certificate and subject name of the signer. A further Reference can be automatically added to sign the KeyInfo, as well. Ultimately, the core digital signature generator is invoked to produce the DigestValue content and the Signature Value content. An example of the final result of enhanced signature generation is shown in the markup example of code snippet  of .","With reference to , a code snippet example of a composite resource document definition having multiple signers and illustrating a means of specifying the transformed resources, in accordance with various embodiments of the disclosure is presented. As described above for , there is value in treating the XML signature reference list as a subtraction filter that subtracts zero elements by default. For example, the Reference list is generated programmatically as an augmentation to the signing operation rather than beforehand by an application designer (the creator of the template of the composite resource document). Thus, the disclosed capability enables implementation of a process to sign the whole document when the document is a composite resource document, in particular when end-users can add more resources to the document than were available in the original document template.","Moreover, the disclosed process adds auto-generated references to whatever Reference elements are already provided, enabling the application designer, the creator of the template for the composite resource document, to elect to sign information in addition to what is generates by the disclosed process. For example, application logic may generate information into a ds: Object in the signature, and the signature may be configured with a reference to sign the ds: Object.","Most importantly, the disclosed process merges the auto-generated Reference element list with a Reference element list in the SignedInfo, effectively adding a Reference for each resource only if it does not already have a pre-existing Reference in the SignedInfo. When an implementation of the disclosed process does add a Reference, the Reference results in signing the whole resource, so the disclosed process is responsive to any Transforms applied to specific resources by an application designer or alternative aspects of the composite resource document processor.","In an example, a \u201cloan\u201d application previously described is designed to satisfy a signer-cosigner scenario. The data in a loanInstance.xml file is represented in code snippet . A first Signature  is provided as well as a second Signature . The signature of second signer  is identical in form to the signature of the earlier examples, but first signer  already contains a Reference to URI=\u201c \u201d that subtracts not only itself (the enveloped signature) but also the signature of the second signer, which must be generated after the first signature is affixed. Hence, when the disclosed process generates Reference elements for first signer , the URI=\u201c \u201d Reference is not generated because it already exists.","With reference to , a code snippet example of specifying a pattern to control reference generation, in accordance with various embodiments of the disclosure is presented. The material in previous example code snippets describe a first step of a subtraction filter, in which a default context of signing everything available is used, rather than signing only what is explicitly listed. Fully enabling subtraction filtering at the composite resource document level allows the application designer to specify by pattern which additional References should not be generated when using the disclosed process.","In previous examples, wildcard regular expression syntax was used, but an XPath expression may also be used. In this example a signature is affixed enabling subsequent additions of files into the composite resource document, but only in a specific directory, such as an attachments directory. The markup of code snippet  provides an example in which element  specifies the explicit pattern for resource subtraction, which in this example matches all resources in an \u2018attachments\u2019 subdirectory into which a user is therefore permitted to add or delete resource attachments.","With reference to , a code snippet example of filtering specific resources from the generated signature reference list thereby suppressing the reference generation for the specific resources using an object of , in accordance with various embodiments of the disclosure is presented. The disclosed process, in response to the object defined in code snippet  of  adds a Reference to the special ds:Object so that the signature signs the filter, amends the manifest.xml Reference to subtract file-entry elements that match the descriptor and suppresses generation of Reference elements for resources that match the descriptor provided.","Another example using code snippet  filters files from a style subdirectory, due to the resource descriptor of element .","The generated URI=\u201c \u201d Reference element receives elements , a subtraction transform for the signature and a union for the resource descriptor object. Reference elements having URI attributes that begin with style\/ do not appear in the list. A Reference to manifest.xml, element , receives a subtraction filter that omits file-entry elements matching the description.","With reference to  a flowchart of a process of generating a digital signature for a composite resource in accordance with the disclosure is presented. Process  is an example of a process using composite document system  of .","Process  starts (step ) and receives a composite resource document containing at least one resource (step ). Process  obtains an updated manifest resource, wherein the manifest resource lists all resources in the composite resource document (step ). Process  indicates zero, one or a plurality of resources to subtract from the list of resources in the updated manifest resource to create a generated signature reference list of identified resources to be signed (step ). Identify now refers to the resources being signed, and does not include the resources being removed. In an embodiment, generating the generated signature reference list further comprises including a reference that indicates an object, wherein the object declares a list of resource descriptions indicating a list of resources subtracted from the resource list to create the reference list.","Process  generates a hash token using the resources identified in the generated signature reference list to form a signature hash token (step ). In an embodiment, generation of the hash token includes selection of one or a plurality of resources in the reference list to form selected transformed resources, wherein remaining resources from the reference list form untransformed resources, and applying digital signature transforms to the selected transformed resources to generate the hash token using the untransformed resources combined with the selected transformed resources. In particular, an embodiment that conforms to the current W3C XML Signatures standard analyzes the Signature SignedInfo element for preexisting Reference elements whose URI attributes indicate resources in the reference list, and the embodiment only generates Reference elements for reference list resources that do not correspond to any of the preexisting Reference elements. Thus, each preexisting Reference element, which may contain a Transforms element, overrides the Reference element that would otherwise be generated for the resource in step , and this resultant list of Reference elements from this process is used in step  to generate the signature hash token.","In an embodiment, generating a signature hash token may further comprise at least one of using a URI resolver to obtain the content of one or a plurality of resources in the reference list and generating the signature hash token using the digest value of at least one of the resources in the reference list. In particular, an embodiment that conforms to the current W3C XML Signatures standard calculates the SignatureValue hash token based on the digest values, rather than the actual content, of all of the resources in the reference list.","Process  encrypts the signature hash token with a secret key to create a digital signature (step ) and terminates thereafter (step ).","With reference to  a flowchart of a process of validating the digital signature for a composite resource of  in accordance with the disclosure is presented. Process  is an example of a process using composite document system  of .","Process  starts (step ) and receives a composite resource document, containing one or a plurality of resources, having a digital signature (step ). Process  obtains an updated manifest resource, wherein the updated manifest resource lists all resources in the composite resource document (step ).","Process  generates a hash token using the resources identified in the generated signature reference list in the digital signature to form a generated hash token (step ). Process  decrypts an encrypted hash token contained within the digital signature using an obtained decryption key to form a signature hash token (step ). Responsive to at least a comparison of the generated hash token and the signature hash token, process  generates a signature validity result (step ) and terminates thereafter (step ).","With reference to  a flowchart of a process of generating a signature validity result of  in accordance with the disclosure is presented. Process  is an example of a process comparing a generated resource hash token and a decrypted digital signature hash token in step  and generating a signature validity result in step  of .","Process  begins (step ) and determines whether the generated hash token is equal to the signature hash token (step ). When a determination is made that the generated hash token is equal to the signature hash token, a \u201cyes\u201d result is obtained. When a determination is made that the generated hash token is not equal to the decrypted digital signature hash token, a \u201cno\u201d result is obtained. When a \u201cno\u201d result is obtained, process  generates an invalid signature validity result (step ) and terminates thereafter (step ). The determination further comprises determining whether a list of resources from the updated manifest resource is not equal to a list of resources identified in the generated signature reference list in the digital signature. In an embodiment, the list of resources from the updated manifest resource comprises a list of resources from the updated manifest resource less those resources indicated by an object that declares a list of resource descriptions indicating a list of resources subtracted when forming the generated signature reference list.","When a \u201cyes\u201d result is obtained in step , process  determines whether the decryption key is valid (step ). When a determination is made that the decryption key is valid, a \u201cyes\u201d result is obtained. When a determination is made that the decryption key is not valid, a \u201cno\u201d result is obtained. A determination of whether the decryption key is valid includes testing validity of the decryption key using zero, one or a plurality of tests including a key expiry test, a key revocation test, a key issuer credential test and a trusted key list test. Responsive to a failure of a decryption key validity test, a signature validity result of invalid is generated.","When a \u201cyes\u201d is obtained in step , process  responds to the overall determination that the generated hash token is equal to the signature hash token and no failures of decryption key validity tests by generating a signature validity result of valid (step ) and terminates thereafter (step ). The determination further comprises determining whether a list of resources from the updated manifest resource is equal to a list of resources identified in the generated signature reference list in the digital signature. In an embodiment, the list of resources from the updated manifest resource comprises the list of resources from the updated manifest resource less those resources indicated by an object that declares a list of resource descriptions indicating a list of resources subtracted when forming the generated signature reference list. When a \u201cno\u201d result is obtained in step , process  generates a signature validity result of invalid (step ) and terminates thereafter (step ) as before.","Thus is presented in an embodiment computer-implemented process for creating a digital signature for a composite resource document that provides high security in digital signatures for composite resource documents by providing a resource subtraction filter capability absent from previous solutions for digitally signing multiple resources. The disclosed computer-implemented process receives the composite resource document containing at least one resource, obtains an updated manifest resource, wherein the updated manifest resource lists all resources in the composite resource document, indicates zero, one or a plurality of resources to subtract from the list of resources in the updated manifest resource to create a generated signature reference list of identified resources to be signed, generates a hash token using the resources identified in the generated signature reference list to form a signature hash token and encrypts the signature hash token with a secret key.","Generating the hash token may also include forming the reference list using previously specified reference elements for zero, one or a plurality of the resources, thereby enabling a capability to attach digital signature transforms to the processing of the resources indicated by the previously specified references elements.","Illustrative embodiments of the computer-implemented process further provide a capability of validating a digital signature for a composite resource document. The computer-implemented process further receives the composite resource document, containing one or a plurality of resources, having a digital signature, obtains an updated manifest resource, wherein the updated manifest resource lists all resources in the composite resource document, generates a hash token using the resources identified in a generated signature reference list in the digital signature to form a generated hash token, decrypts an encrypted hash token contained within the digital signature using an obtained decryption key to form a signature hash token and responsive to at least a comparison of the generated hash token and the signature hash token, generates a signature validity result.","Thus, illustrative embodiments disclose a composite resource document using a compressed archive and in which separate resources within the one document represent data records, attachments, pages and additional elements. The composite resource document retains the advantages of single document architecture while eliminating the need to perform XML parsing of the entire archive to obtain pieces needed to provide the page-by-page user experience. Support of multiple references to resources offered by the Worldwide web Consortium (W3C) XML signatures enables W3C XML signatures to be used in conjunction with composite resource documents to implement a digital signing function. However, the subtraction filtering capability is not limited to the processing of single XML resources. For a higher level of defining multiple resources to be simultaneously signed, the W3C XML signatures standard currently provides only a listing capability, specifically the list of resources obtained from the list of Reference elements in the Signature SignedInfo element.","Known prior solutions typically have drawbacks for digitally signing an interactive document including representing a document as a single XML file, which allows subtraction filtering but has poor performance, and representation of the document as a composite resource, which offers better performance but does not allow resource-level subtraction filtering.","A disclosed process combines the notion of a composite resource document with subtraction filtering to achieve a same level of digital signature security on composite resource documents in collaborative business processes while also achieving a significant advancement in performance offered by composite resource documents.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","While the invention has been described with reference to one or more specific embodiments, the description is intended to be illustrative of the invention as a whole and is not to be construed as limiting the invention to the embodiments shown. It is appreciated that various modifications may occur to those skilled in the art that, while not specifically shown herein, are nevertheless within the true spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 11","FIG. 10"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 18","FIG. 17"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 19","FIG. 18"]}]},"DETDESC":[{},{}]}
