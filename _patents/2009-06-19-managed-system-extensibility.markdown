---
title: Managed system extensibility
abstract: One or more extension registrations are received for each of multiple software components installed on a computing device. The one or more extension registrations identify the software components as providers of functionality. A record of the one or more extension registrations for each of the multiple software components is maintained. Requests are received, from other software components installed on the computing device, that identify particular functionality. In response to such requests, the information regarding one or more of the multiple software components that provide the particular functionality is returned to the other software components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08627284&OS=08627284&RS=08627284
owner: Microsoft Corporation
number: 08627284
owner_city: Redmond
owner_country: US
publication_date: 20090619
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["A computer typically runs an operating system that provides various functionality including allowing other applications to be installed and run on the computer. Such an operating system oftentimes provides a location where applications can store information serving to register the applications as providing certain functionality to other applications and thereby extending the functionality of the operating system. This location could be, for example, an operating system registry. While maintaining such information can be beneficial to the applications, current storage mechanisms are not without their problems.","One such problem is that different applications typically interact with the same location, allowing situations to arise where information stored by one application is deleted, overwritten, or otherwise corrupted by another application. Such situations can result in applications not running and providing their intended functionality. Another such problem is that applications are typically responsible for removing their information from that location when they are uninstalled. If applications do not remove their information correctly, at any given time the location can store information indicating certain applications are available to run even though those applications have been uninstalled and are not actually available to run.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","In accordance with one or more aspects, one or more extension registrations are received for each of multiple software components installed on a computing device. The one or more extension registrations identify the software components as providers of functionality. A record of the one or more extension registrations for each of the multiple software components is maintained. Requests are received, from other software components installed on the computing device, that identify particular functionality. In response to such requests, the information regarding one or more of the multiple software components that provide the particular functionality is returned to the other software components.","In accordance with one or more aspects, a new extension registration is obtained from an extension management module. The extension management module manages access to an extension registration database, and the new extension registration corresponds to an extension provider that communicates with the extension management module. Extension information based on the new extension registration can optionally be stored in a legacy store.","Managed system extensibility is discussed herein. An operating system includes an extension management module that operates as a broker between extension providers and extension consumers. An extension provider registers with the extension management module, giving the extension management module information describing the functionality provided by the extension provider. An extension consumer that desires information describing one or more extension providers that provide particular functionality makes a request to the extension management module for such information. In response to such a request, the extension management module reviews the information given by the extension providers and identifies one or more extension providers that provide the requested functionality. Information regarding these one or more extension providers is then returned to the requesting extension consumer.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","100","100"]},"Computing device  includes an operating system  having an extension management module  and an extension registration database . Computing device  also includes extension consumers  and extension providers . Each extension consumer  is a software component, and each extension provider  is a software component. A software component performs various operations and is included as part of a software application or software product. The same software component can be shared by multiple such applications or products. Although illustrated as separate from operating system , alternatively one or more extension consumers  and\/or one or more extension providers  can be components or modules of operating system .","Each software component includes instructions and data that can be run on computing device  and one or more software components provide the functionality of a software product or software application. Operating system  communicates with the individual software components when running, rather than with the software product as a whole.","Each extension provider  provides functionality that can be used by extension consumers . This functionality is in addition to or in place of functionality provided by operating system  and thus can be referred to as extending the functionality of operating system . It should be noted that a particular software component can be an extension consumer  for one type of functionality and an extension provider  for another type of functionality (or the same type of functionality).","Extension providers  can provide a variety of different types of functionality. Extension management module  is notified of the particular type of functionality that is provided by a particular software component when the software component is installed on computing device . Extension management module  can also be notified of additional functionality provided by a particular software component while that software component is running. A record of the particular type of functionality provided by each extension provider  is maintained by extension management module  in extension registration database . When an extension consumer  desires information regarding software components that provide particular functionality, the extension consumer  sends a request to extension management module  for such information.","For example, assume that multiple extension providers  provide functionality to interpret and operate on image files stored in the Joint Photographic Experts Group (JPEG) format. Each of these extension providers , when it is installed on computing device , notifies extension management module  that the extension provider  provides functionality to interpret and operate on image files stored in the JPEG format. A record of this functionality provided by these extension providers  is maintained in extension registration database . Subsequently, assume that an extension consumer  desires to run a software component that can interpret and operate on image files stored in the JPEG format. The extension consumer  sends a request to extension management module  for information identifying extension providers  that can interpret and operate on image files stored in the JPEG format. Extension management module  accesses extension registration database  to identify the extension providers  that can interpret and operate on image files stored in the JPEG format, and returns to the extension consumer  an indication of the extension providers  that can interpret and operate on image files stored in the JPEG format.","Generally, an extension refers to a first software component affecting the behavior of a second software component through an extension registration that is accessed by the second software component. This behavior can include, for example, invoking the first software component (e.g., invoking a traditional plug-in module), displaying information (e.g., shortcuts or menu items), and so forth. A variety of different types of extensions providing different types of functionality can be provided by extension providers .","Examples of such different types of extensions include file associations (e.g., software components that can interpret and operate on, also referred to as handle, particular types of files), language parsers (e.g., software components that can parse files in particular languages and\/or formats), spell checkers (e.g., software components that provide spellchecking functionality), and dynamic link libraries (e.g., software components to provide particular dynamic link libraries (DLLs)). Additional examples of such different types of extensions include help files (e.g., software components that provide help information), localization files (e.g., software components that are localized to a particular language or region), plug and play (PnP) drivers (e.g., software components that provide PnP drivers), menu items (e.g., software components that provide items to be included in a menu to be displayed to a user), shortcut items (e.g., software components that provide shortcuts or links to be displayed on a particular screen or in a particular window to a user), and so forth. It is to be appreciated that, although example types of extensions are discussed herein, the managed system extensibility is not limited to these example types and can be used with other types of extensions.","Extension registration database  is a record of extension registration declarations that have been made by extension providers . Extension management module  manages extension registration database , adding extension registrations to and removing extension registrations from database  as appropriate. Such additions and removals are performed by module  in response to requests from other components or modules. Oftentimes, an installer component or module that is installing (or uninstalling) a component provides such requests for adding and removing extension registrations. However, such requests can also be received from other components or modules, such as extension providers .","Extension providers  and extension consumers  do not have direct access to information stored in extension registration database . Rather, extension providers  and extension consumers  access the information stored in database  via extension management module . Extension registration database  can be implemented in a variety of different manners, such as using tables, lists, database records or entries, and so forth.","Furthermore, it should be noted that the managed system extensibility discussed herein provides a centralized and common model for the registration of extensions and the discovery of extensions across multiple different types of extensions. Extension management module  provides a common interface for accessing extension registrations regardless of the type of the extension.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["200","200","202","200","202","200","200"]},"Manifest  stores metadata describing software component . In one or more embodiments, manifest  includes an identifier of software component , one or more version numbers of software component , and one or more extension registration declarations  for software component . The identifier of software component  allows software component  to be distinguished from other software components installed on a device. The identifier can be generated in a variety of different manners, such as based on the name assigned by the developer of software component , an identifier of the developer of software component , an identifier of the publisher or distributor of software component , the version number of software component , and so forth.","The version number of software component  allows different versions of software component  to be readily identified. In one or more embodiments, two different version numbers are included in manifest : a contract version (also referred to as a generational version) number and a servicing version number. Alternatively, the contract version number and servicing version number can be combined together into a multi-element number with one or more elements being the contract version number and one or more elements being the servicing version number.","Multiple (m) extension registration declarations  are illustrated as being included in manifest . Each extension registration declaration describes particular extended functionality that is provided by software component . For example, one extension registration declaration  can describe a first file association, another extension registration declaration  can describe a second file association, another extension registration declaration  can describe a spellchecker and yet another extension registration declaration can describe a shortcut item. Although multiple extension registration declarations  are illustrated in , alternatively a manifest  can include a single extension registration declaration or even no extension registration declarations.","Each extension registration declaration  includes a category identifier , extension metadata , and extension data . Category identifier  identifies the category associated with extension registration declaration . Each type of extension corresponds to a different category. For example, file associations correspond to one category, spell checkers correspond to another category, and so forth. The type of extension being described by extension registration declaration  is identified by category identifier .","Category identifier  can be a variety of different letters, numbers, symbols, other characters, and so forth. In one or more embodiments, category identifier  is a string of characters that is known to both extension consumers and extension providers. Accordingly, extension providers can use a particular category identifier to identify a particular type of extension and know that extension consumers are aware of that particular category identifier and can request information regarding that particular type of extension by using that particular category identifier. This requesting of information regarding extensions based on category identifier is discussed in more detail below.","Extension metadata  includes information describing extension registration declaration . A variety of different information can be included in metadata . Examples of such information include a name of the extension registration declaration that allows the extension registration declaration to be distinguished from other extension registration declarations, another identifier of the extension registration declaration, and so forth.","Extension data  includes various data for extension registration declaration . The particular data included can vary for different types of extensions as well as for different extensions of the same type. For example, extension data  can include file paths to images of icons to be displayed, file paths to executable files, file paths to DLLs, firewall rules, information regarding the category to which the extension registration declaration corresponds (e.g., for a file association an indication that the extension registration declaration is for \u201c.jpg\u201d files), and so forth. When information regarding extension registration declaration  is to be returned to an extension consumer in response to a request for information, the data in extension data  is returned to the extension consumer.","In one or more embodiments, the data in extension data  includes one or more registration parameters. Each registration parameter includes a name, type, and value. The registration parameter name is an identifier of the registration parameter allowing the registration parameter to be distinguished from other registration parameters in the extension registration declaration. The registration parameter type identifies a type of data included in the registration parameter. A variety of different setting types can be supported, such as integers, floating point numbers, Boolean values, character strings, date and\/or time values, references to files or directories (e.g., by file paths), and so forth. The registration parameter value is a specific value for the registration parameter.","For example, a registration parameter could have a name of \u201cFileAssociationName\u201d, a type of \u201cstring\u201d, and a value of \u201c.jpg\u201d. By way of another example, a registration parameter could have a name of \u201cShortcutIcon\u201d, a type of \u201cpath\u201d, and a value of \u201cimage.gif\u201d.","In one or more embodiments, a category definition is defined for each category identifier. A category definition for a category identifier describes the information that is to be included in extension registration declarations having that category identifier. An extension management module (such as extension management module  of ) or other component or module can optionally monitor extension registrations and return, in response to requests regarding the extension registrations, only those extension registrations which conform to the category definition for their category identifiers. Alternatively, no verification of such conformance may be performed, with extension providers and extension consumers being relied on as adhering to the category definitions.","By way of example, a category definition can have a format that includes a name, a description, one more parameters, and zero or more arrays. The category name is a category identifier as discussed above. The category description is a description of the category designed to allow development tools to assist a developer in authoring extension registration declarations. Each parameter (e.g., a registration parameter as discussed above) describes data for an extension registration declaration. Each parameter can include one or more of a name of the parameter, a type of data supported by the parameter, a minimum value for the parameter, a maximum value for the parameter, an indication of whether the parameter is required for a valid extension registration declaration, and a user-friendly, human-readable description of the parameter. Each array is a collection of zero or more parameters. Each array can include one or more of a name of the array and a user-friendly, human-readable description of the array. It is to be appreciated that this category definition format is an example and other formats including additional information and\/or not including some of the information described in this example can be used.","Returning to , in order to run a software component on computing device , that software component is installed on computing device . The installation process is typically performed by an installation component or module, and typically includes storing files in various locations of a file system of operating system , storing various information describing the software component in various stores, and so forth. As part of the process of installing a software component on computing device , extension management module  is made aware of the extension registration declarations included in the manifest of the software component.","Extension management module  can be made aware of the extension registration declarations included in the manifest of a software component in a variety of different manners. In one or more embodiments, the manifest (or at least the extension registration declarations) is maintained in a location accessible to module . Accordingly, module  can retrieve the extension registration declarations when desired and add the extension registration declarations to extension registration database . Alternatively, module  can be made aware of the extension registration declarations in other manners, such as an installation component or module invoking a method of an application programming interface (API) exposed by module , an installation component or module using other operations or techniques to pass the extension registration declarations to module , and so forth.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 3","FIG. 1","FIG. 3","FIG. 2","FIG. 1"],"b":["300","300","106","300","302","304","302","312","304","314","300","204","104","300"]},"In the example of , the extension registrations ,  are organized by category. Each category corresponds to a category identifier (e.g., a category identifier  of ). When an extension management module (such as module  of ) adds an extension registration to database , the extension management module obtains the category identifier for the extension registration being added. If a category ,  already exists in database  for that category identifier, then the extension registration is added to that category. However, if no such category already exists in database , then a new category for that category identifier is created in database .","Each extension registration  includes extension metadata  and extension data . Similarly, each extension registration  includes extension metadata  and extension data . Extension metadata  and  are analogous to extension metadata  of . Extension data  and  are analogous to extension data  of . Accordingly, when the extension management module adds an extension registration to database , both the extension metadata and the extension data obtained from the extension registration declaration in the manifest of the software component (e.g., manifest  of ) can be copied to the extension registration in database . An extension registration declaration name or identifier included in extension metadata  becomes an extension registration name or identifier in extension metadata  or . The extension registration name or identifier allows the extension registration to be distinct from other extension registrations in database .","It should be noted that as the extension registrations are organized in database  by category, the category identifier obtained from the extension registration declaration in the manifest need not be maintained in the extension registration in database . Alternatively, the extension registrations ,  can include the category identifier copied from the extension registration declaration in the manifest of the software component. In situations where the extension registration in database  include the category identifiers, database  need not be organized by category, although alternatively database  can be organized by category with the category identifiers still be included in the extension registrations in database .","Additionally, when an extension registration is added to database , an indication is maintained of the software component that corresponds to that extension registration (e.g., the software component that included the extension registration declaration for that extension registration). This indication can be maintained in a variety of different manners, such as by adding to the extension metadata an identifier of the software component to which the extension registration corresponds, maintaining a separate list or record of which software components correspond to which extension registrations, storing extension registrations for different software components in different locations, and so forth.","Returning to , when an extension consumer  desires information regarding extension registrations in extension registration database , the extension consumer  sends a request for information to extension management module . This request includes, for example, an indication of the category (the type of extension) desired by the extension consumer . This request can also include additional information regarding the category (e.g., for a file association the request can include an indication that information regarding extension registrations for \u201c.jpg\u201d files is requested).","In one or more embodiments, multiple different versions of software components can be installed on computing device . As discussed above, the software component can have two different version numbers: a contract version number and a servicing version number. Operating system  can identify software components having the same software component identifier but different contract version numbers as different software components. Accordingly, two different software components having different contract version numbers can be installed on computing device  concurrently. Each of these two different software components can be an extension provider  and have extension registrations included in extension registration database .","However, the operating system  can identify software components having the same software component identifier and contract version number to be the same software components, even if the servicing version numbers are different. Although two such software component versions can be installed on computing device  concurrently, one of the software components is selected as an active software component. These two software component versions can be extension providers , and the active software component can have extension registrations included in extension registration database . The other non-active software component does not have extension registrations included in extension registration database . When a new version of a software component that is an extension provider  is installed on computing device , the extension registrations of the previous version of the software component are removed from extension registration database , and extension registrations of the new version of the software component are added to extension registration database .","The extension registrations obtained from extension registration declarations in a manifest of a software component can also be referred to as static extension registrations. In addition, extension management module  can also support dynamic extension registrations. A dynamic extension registration is an extension registration performed by a software component after being installed on computing device . The registration can be performed in response to a user request, or alternatively in response to settings or rules followed by the software component, or in response to a request from another component or module.","A dynamic extension registration is made by the software component (typically an extension provider ) submitting a request to add an extension registration to extension registration database . The request includes the metadata and data for the extension registration, including both an identifier of the corresponding software component and a category identifier, analogous to the extension registration declarations in the manifests discussed above. Extension management module  receives the request and adds the extension registration to extension registration database  in the same manner as module  adds static extension registrations to database .","By way of example, a particular extension provider  may be able to interpret and operate on image files in both the JPEG format and the Tagged Image File Format (TIFF) format. However, the default setting for the extension provider  may be to provide functionality for only images in the JPEG format. Accordingly, a static extension registration is made when the extension provider  is installed on computing device , the static extension registration indicating a file association to the JPEG format. Subsequent requests for information regarding extension registrations that provide functionality to interpret and operate on files in the JPEG format would return information regarding the extension provider , but requests for information regarding extension registrations that provide functionality to interpret and operate on files in the TIFF format would not return information regarding the extension provider .","Continuing with this example, assume that a user of the extension provider  subsequently inputs a request to have the extension provider  also be responsible for operating on images in the TIFF format. The extension provider  makes a request to extension management module  to add an extension registration to extension registration database . This extension registration to be added to database  indicates a file association of the extension provider  to the TIFF format. Accordingly, subsequent requests for information regarding extension registrations that provide functionality to interpret and operate on files in the JPEG format or the TIFF format would return information regarding the extension provider .","In addition to extension management module  adding extension registrations to extension registration database , module  can also remove or delete extension registrations from database . An extension deletion or removal is performed in response to a request by a component or module (e.g., by an uninstaller component), typically when a software component is being uninstalled from computing device . When uninstalling a software component, extension management module  deletes extension registrations from database  that correspond to that software component. Information indicating the software component to which each extension registration corresponds can be maintained in a variety of different manners as discussed above Accordingly, extension management module  can help ensure that extension registrations corresponding to a software component are removed from database  when the software component is uninstalled from computing device . Module  need not rely on the software component itself (or an uninstaller component associated with that software component) removing the extension registrations corresponding to that software component from computing device .","In one or more embodiments, various operations are supported by extension management module  allowing extension consumers  (and\/or other components or modules) to access extension registration database . These operations can be exposed as methods of an API or alternatively requests for these operations to be performed can be made to control module  in other manners. In one or more embodiments, such an API can also be used by extension providers  to add and\/or remove extension registrations from database . Alternatively, extension registrations can be added to database  in other declarative manners rather than via an API. Table I below describes an example of such operations supported by extension management module  in accessing extension registration database .",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE I"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Operation","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Enumerate","Returns a list of extension registrations in the extension registration"]},{"entry":["registrations","database. The caller typically specifies a category, in which case"]},{"entry":[{},"only extension registrations of the specified category are returned."]},{"entry":["Get registration","Looks up an extension registration. The caller provides a"]},{"entry":[{},"component identity and an extension registration name. If the"]},{"entry":[{},"specified extension registration is found, the extension registration"]},{"entry":[{},"information (e.g., the extension data and\/or extension metadata) is"]},{"entry":[{},"returned to the caller."]},{"entry":["Get registration","Returns the value of a specified extension registration parameter of"]},{"entry":["parameter","a specified registration. Extension data and\/or extension metadata"]},{"entry":[{},"can be specified and returned using this operation."]},{"entry":["Add registration","Specifies an extension registration to be added to the extension"]},{"entry":[{},"registration database."]},{"entry":["Get category change","Returns a change number for the category specified by the caller."]},{"entry":"number"},{"entry":["Request","Allows a caller to register for a notification when an extension"]},{"entry":["category change","registration of a specified category is added to or removed from the"]},{"entry":["notification","extension registration database. Changes to the extension"]},{"entry":[{},"registration database are monitored by the extension management"]},{"entry":[{},"module and a notification is sent to the caller when an extension"]},{"entry":[{},"registration is added to or removed from the extension registration"]},{"entry":[{},"database for the registered-for category."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Table I includes a reference to a change number for a category. In one or more embodiments, extension management module  maintains a different change number for each category in extension registration database . Module  modifies (e.g., increments) this change number each time an extension registration is added to or removed from extension registration database . A caller can use this change number in different manners. For example, an extension consumer  can obtain the change number for a category from extension management module . If the change number is the same as the previous change number that the extension consumer  obtained then the extension consumer knows that no changes have been made to the category since the extension consumer  last obtained the change number. However, if the change number is not the same as the previous change number, then the extension consumer  knows that an extension registration has been added to and\/or removed from the category since the extension consumer  last obtained the change number.","Alternatively, rather than using change numbers for a category, a caller (e.g., an extension consumer ) can determine when an extension registration has been added to and\/or removed from the category in other manners. For example, a timestamp can be associated with a category. This timestamp is updated each time an extension registration is added to and\/or removed from a category. The caller can obtain this timestamp and determine whether a change has been made to the category since the extension consumer last obtained the timestamp\u2014if the timestamps are the same then no changes have been made to the category, whereas if the timestamps are different then a change has been made to the category.","Thus, it can be seen that a variety of different types of extensibility can be provided by extension providers , with the extension registrations being stored in extension registration database . The different extensibility available on computing device  can be readily identified by extension consumers  via extension management module  (which in turn accesses the extension registrations stored in database ).","It can also be seen that extension management module  operates as a central authority via which extension providers  can register the extensibility that they provide and via which extension consumers  can access the extensibility provided by multiple extension providers . Rather than having extension consumers  provide a specific location (e.g., a particular file, a particular portion of a registry, etc.) that the extension providers  can modify, both consumers  and providers  interact with module . This centralized authority allows module  to, for example, maintain knowledge regarding the various extension providers  installed on computing device , and readily remove extension registrations if an extension provider  is uninstalled from computing device . This centralized authority also allows providers  and consumers  to be installed and uninstalled in different orders and at different times\u2014no constraints on the ordering of installation or uninstallation of providers  and consumers  need be imposed by module .","It is to be appreciated that the managed system extensibility discussed herein provides a variety of different system extensibility scenarios. For example, an extension consumer  can be an operating system shell program or module that displays a user interface for operating system  to a user of computing device . Different software components that can be run by the user can be included as extension providers . Each extension provider can have one or more extension registrations that have registration parameters identifying a path to or location of an icon to be displayed as a shortcut on the user interface, an entry in a menu of the user interface, and so forth. Additionally, the one or more extension registrations can include registration parameters identifying paths to locations where executable files for the corresponding software components are stored. In response to a user selection of such an icon or menu entry, the path to the executable file for the corresponding software component can be readily identified and the executable file run.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 4","FIG. 1"],"b":["400","400","104","400"]},"In process , one or more extension registrations for each of multiple software components is received (act ). These multiple software components are also referred to as extension providers as discussed above. These extension registrations can be received as extension registration declarations from software component manifest as discussed above. These extension registrations can also be received in different manners as discussed above, such as by the extension management module accessing the manifest or other declaration of the extension registration declarations, via an API of the extension management module being invoked, and so forth.","A record of the received extension registrations is maintained (act ). This record is an extension registration database as discussed above, such as database  of  or database  of . Extension registrations can be added to and\/or removed from the extension registration database at various times, as discussed above.","Additionally, requests are received from software components for information regarding the multiple software components that provide particular functionality (act ). These requests identify the particular functionality. These software components from which the requests are received are also referred to as extension consumers as discussed above. The requests can be received from the software components from which the extension registrations are received in act  and\/or other software components. The information being requested can be requested in a variety of different manners such as by submitting an enumerate registrations request to carry out the enumerate registrations operation discussed above. For example, following some of the examples above, a request received in act  can be a request for information identifying extension providers  that can interpret and operate on image files stored in the JPEG format.","In response to such requests, information regarding the multiple software components that provide the particular functionality is returned to the caller (act ). Information that is returned is obtained by the extension management module from the record of received extension registrations that is maintained. The information returned to the caller in act  can vary. In one or more embodiments, the information returned is the extension registrations that provide the particular requested functionality. In other embodiments, the information returned is one or more objects or handles corresponding to the extension registrations that provide the particular requested functionality, and these one or more objects or handles can subsequently be used by the caller to retrieve data or metadata from the extension registrations (via subsequent requests to the extension management module).","In one or more embodiments, the request received in act  identifies the particular functionality by including a category identifier in the request. In response to such a request, information regarding all the extension registrations in the identified category (or having the category identifier) of the extension registration database is returned in act . For example, the request could include a category identifier for shortcut items, and in response information regarding all the shortcut item extension registrations in the extension registration database is returned in act .","In other embodiments, the request received in act  identifies the particular functionality by including an indication of one or more registration parameter names and corresponding values (and optionally including a category identifier). In response to such a request, information regarding all the extension registrations having the identified one or more registration parameter names and corresponding values (and, if a category identifier is included in the request, that also are in the identified category or have the category identifier) is returned in act . For example, the request could include a category identifier for file associations, and a registration parameter name and value of a file association name of \u201c.jpg\u201d. In response to such a request, information regarding all the file association extension registrations in the extension registration database that have a registration parameter name and value of a file association name of \u201c.jpg\u201d is returned in act .",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 5","FIG. 1"],"b":["500","500","104","500"]},"In process , a request regarding an extension registration is received (act ). These requests can be received in different manners as discussed above, such as by the extension management module accessing the manifest or other declaration of the extension registration declarations, via an API of the extension management module being invoked, and so forth.","A type of the received request is identified (act ). A variety of different types of requests can be received. In one or more embodiments, the types of requests that can be received include add requests, delete requests, and information requests.","Add requests can be received at different times, such as when a software component is being installed on the computing device implementing process , or when a software component is dynamically registering an extension registration. In response to an add request, extension registration information regarding the request is obtained (act ). The extension registration information refers to the data and metadata of the extension registration that is to be added to the extension registration database. The extension registration information can be received as part of the request or alternatively can be obtained in other manners such as by accessing a manifest or other declaration that includes the extension registration information.","A category for the extension registration information is identified (act ). An identifier of this category is included in the extension registration information as discussed above.","The extension registration information is added to the extension registration database as an extension registration under the identified category (act ). Alternatively, if the extension registration database is not organized by category, the extension registration information including the category identifier is added to the extension registration database. As part of the adding of the extension registration information in act , a change number for the category for the extension registration can be updated as discussed above. Additionally, another component or module that has requested notification of changes to the extension registration database can also be notified of this added extension registration as discussed above. Process  then proceeds to act  to receive an additional request regarding an extension registration.","Returning to act , delete requests can be received at different times, such as when a software component is being uninstalled from the computing device implementing process . In response to a delete request, one or more extension registrations to be deleted from the extension registration database are determined (act ). The extension registrations that are to be deleted can be determined in different manners. For example, the delete request can include registration names identifying the particular extension registrations that are to be deleted. By way of another example, a manifest or other declaration that identifies particular extension registrations that are to be deleted can be accessed. By way of yet another example, the delete request can include an indication of a software component being uninstalled. The extension registration database can be searched to identify, as the particular extension registrations that are to be deleted, the extension registrations that correspond to that software component. Information indicating the software component to which each extension registration corresponds can be maintained in a variety of different manners as discussed above.","The one or more extension registrations determined in act  are deleted from the extension registration database (act ). As part of the deleting of the extension registration in act , a change number for the category for the extension registration can be updated as discussed above. Additionally, another component or module that has requested notification of changes to the extension registration database can also be notified of this deleted extension registration as discussed above. Process  then proceeds to act  to receive an additional request regarding an extension registration.","Returning to act , information requests can be received at different times, such as when an extension consumer desires to identify an extension provider that provides particular functionality. In response to an information request, the extension management module identifies one or more extension registrations corresponding to the request (act ). The one or more extension registrations corresponding to the request can be identified in different manners based on the particular request. The request can specify, for example, a particular category identifier, a particular extension registration, a particular registration parameter, and so forth. The one or more extension registrations in the extension registration database satisfying the parameters included in the request are identified in act .","The one or more extension registrations identified in act  are retrieved from the extension registration database (act ). Information regarding the retrieved one or more extension registrations is returned to the requester (act ). The information returned in act  can vary. In one or more embodiments, the information returned is the one or more extension registrations that are retrieved in act , or the particular requested data or metadata from the one or more extension registrations retrieved in act . In other embodiments, other information is returned, such as one or more objects or handles corresponding to the one or more extension registrations that are retrieved in act , and these one or more objects or handles can subsequently be used by the requester to retrieve data or metadata from the extension registrations (via subsequent information requests). Process  then proceeds to act  to receive an additional request regarding an extension registration.",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 6","FIG. 1"],"b":["600","600","104","600"]},"In process , a request for an extension provider associated with a particular file extension is received (act ). The request received in act  specifies (e.g., as a registration parameter) a particular file extension, such as a \u201c.jpg\u201d extension, a \u201c.gif\u201d, a \u201c.mp3\u201d extension, and so forth. The request is typically received from an extension consumer that is a component or module of the operating system on the device implementing process , although alternatively the request can be received from other components are modules.","In response to the request, an extension registration database is accessed (act ). The extension registration database includes a category of file association extensions. The extension registration database can be organized by category and\/or each extension registration can include a category identifier as discussed above.","One or more extension registrations in the extension registration database that correspond to the request received an act  are identified (act ). Each extension registration for a file association in the extension registration database includes an identifier of a file extension (e.g., as a registration parameter). Each extension registration that includes the file extension specified in the request received in act  is identified in act .","Information identifying the one or more extension providers associated with the registrations identified in act  is returned to the requester (act ). This information is obtained from the one or more extension registrations in act  (e.g., the extension data and\/or metadata). This information can include, for example, an identification or description of the one or more extension providers, file paths to executable files to execute the one or more extension providers, and so forth. The requester can then use this information as desired (e.g., to identify a file path to an extension provider that can be executed to interpret and operate on a file having the particular file extension identified in the request in act ).","Additionally, as discussed above one type of extension is a DLL. Extension registrations can be included in the extension registration database that identify particular DLLs. Each such extension registration typically includes an identifier of the corresponding software component as well as data identifying a location in a file system of the operating system where the DLL is stored.",{"@attributes":{"id":"p-0087","num":"0086"},"figref":["FIG. 7","FIG. 1"],"b":["700","700","104","700"]},"In process , a request for a path to a DLL is received (act ). A DLL is included as a resource file of a software component (e.g., a resource file  of ). The request received in act  specifies (e.g., as a registration parameter) the particular DLL desired as well as a corresponding software component that includes the DLL. The request is typically received from an extension consumer that is a component or module of the operating system on the device implementing process , although alternatively the request can be received from other components or modules.","In response to the request, an extension registration database is accessed (act ). The extension registration database includes a category of DLL extensions. The extension registration database can be organized by category and\/or each extension registration can include a category identifier as discussed above.","An extension registration in the extension registration database that corresponds to the request received in act  is identified (act ). Each extension registration for a DLL in the extension registration database includes an identifier of the DLL (e.g., as a registration parameter), an identifier of a corresponding software component that includes the DLL (e.g., as metadata), and the location in the file system where the DLL is stored (e.g., as a registration parameter). The extension registration that includes both an identifier of the DLL specified in the request received in act  and an identifier of the software component specified in the request received in act  as the corresponding software component is identified in act .","The location in the file system of the DLL is obtained from the extension registration identified in act  (act ). This location of the DLL obtained in act  is returned to the requester (act ). The requester can then access the DLL at the identified location and load or otherwise use the DLL as desired.","As can be seen in process , searching through one or more directories or folders in a file system to locate a particular DLL need not be performed. Rather, the location of the DLL is readily determined by the extension management module based on the extension registrations maintained in the extension registration database.","In the discussions herein, the extension management module is described as maintaining a record of one or more extension registrations in an extension registration database (e.g., database  of  or database  of ). Alternatively, no such separate record or database need be maintained. Rather, the manifest of each software component installed on the computing device (e.g., manifest  of ) can be maintained and searched in response to requests from extension consumers.","Additionally, it should be noted that situations can arise where an extension registration database (e.g., database  of  or database  of ) is accessed directly by another device. Such accesses need not be managed by an extension management module (e.g., module  of ). For example, referring to , a second computing device (not shown in ) coupled to computing device  can access a storage device of computing device  where extension registration database  is stored. This second computing device can be, for example, a computing device run by a system or network administrator, a third party that updates or manages computing device , and so forth. This second computing device can access database  directly, bypassing extension management module , and make changes to database . This allows, for example, the second computing device to add extension registrations to database , remove extension registrations from database , and\/or otherwise access extension registrations in database  without extension management module  running. Accordingly, extension registration database  can be updated even when \u201coffline\u201d (e.g., when no user is logged into computing device  and\/or extension management module  is not running).","In the discussions above, an extension management module operates as a broker between extension providers and extension consumers. Both extension providers and extension consumers have knowledge of the extension management module and how to communicate with the extension management module. However, situations can arise where a legacy provider and\/or legacy consumer is run on the computing device. A legacy provider or legacy consumer refers to a program or module that operates without making use of the extension management module. Accordingly, legacy providers and legacy consumers do not have the knowledge of how to communicate with the extension management module.","To resolve such situations, a legacy management system is employed. The legacy management system supports translation of legacy providers into a new model that understands how to communicate with the extension management module. The legacy management system further supports legacy registration stores, configurations, and communications to allow registrations performed by extension providers via the extension management module to be made available to legacy consumers.",{"@attributes":{"id":"p-0097","num":"0096"},"figref":["FIG. 8","FIG. 1","FIG. 1"],"b":["800","800","102","800","802","804","812","104","814","812","814"]},"As discussed above, extension registrations are added to an extension registration database by an extension management module such as module . This can occur when a software component is installed on a computing device as well as at other times. Adapter management module  detects when a change is made to the extension registration database by module . Adapter management module  can detect such changes in a variety of different manners. In one or more embodiments, module  registers with extension management module  to receive notifications of such changes. In response to such a registration, module  sends a notification to module  when a change is made to the extension registration database by module . Alternatively, module  can detect such changes in different manners, such as polling module  for the registrations in the extension registration database and checking whether any changes occurred since the last polling module , being informed of such changes by another component or module, and so forth.","When adapter management module  detects a change that is made to the extension registration database by module , module  notifies one or more adapter modules  of the change. Each adapter module  communicates with a corresponding legacy store . Each adapter module  has knowledge of how to communicate with the corresponding legacy store , as well as how to convert an extension registration from the extension registration database into a format used by the corresponding legacy store . In one or more embodiments, the developer of each adapter module  configures the adapter module  with the knowledge of how to perform this communication and conversion for particular types of extensions. Alternatively, one or more legacy extension registration declarations  can be provided to the adapter module  directly or via adapter management module . Each such legacy extension registration declaration  describes how to perform this communication and conversion for a particular type of extension.","Legacy stores  are stores used by legacy extension consumers and\/or legacy extension providers to store information regarding extensibility. A variety of different types of stores can be included as legacy stores . For example, legacy stores  can include an operating system registry, a service control manager store, a firewall, a file system, a configuration file, and so forth.","Accordingly, when an extension registration for a software component that is an extension provider is added to an extension registration database by module , this addition is detected by module . Module  obtains the added extension registration from module  and forwards the extension registration to an adapter module . The adapter module  receives the extension registration, analyzes the extension registration, and stores the appropriate information in a legacy store  based on the extension registration. As the extension registration information for the software component is now included in a legacy store , a legacy extension consumer can identify and invoke the extension provider.","The particular adapter module  to which the extension registration is forwarded can be determined in different manners. In one or more embodiments, different adapter modules  handle different types of extension registrations and these different types are known to module . Alternatively, module  can query an adapter module  for the types of extension registrations the adapter module  can handle. Accordingly, given an extension registration, module  can forward the extension registration to the appropriate adapter module  based on the type of the extension registration. Alternatively, module  can determine the adapter module  to which an extension registration is forwarded in different manners. For example, extension registrations can be forwarded to all of the adapter modules , and each adapter module  can determine the appropriate information, if any, from the extension registration to store in a legacy store .",{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIG. 9","FIG. 8"],"b":["900","900","800","900"]},"In process , an adapter management module detects a new extension registration (act ). This detection can be performed in a variety of different manners as discussed above, such as registering with an extension management module for changes to the extension registration database.","In response to a new extension registration being detected, the adapter management module obtains the new extension registration (act ). The adapter management module can obtain the new extension registration in a variety of manners, such as being passed the new extension registration with the notification of the change to the extension registration database, by requesting the new extension registration from the extension management module, by accessing a location where the new extension registration is known to be stored, and so forth.","The adapter management module then sends the new extension registration to an adapter module (act ). The particular adapter module or modules to which the new extension registration is sent can be determined in a variety of different manners as discussed above.","The adapter management module then updates a corresponding legacy store based on the new extension registration (act ). As discussed above, the adapter management module is able to communicate with the legacy store and store information from the new extension registration into the legacy store in a manner expected by the legacy store and legacy extension consumers.",{"@attributes":{"id":"p-0108","num":"0107"},"figref":["FIG. 10","FIG. 1"],"b":["1000","1000","100"]},"Computing device  includes one or more processors or processing units , one or more computer readable media  which can include one or more memory and\/or storage components , one or more input\/output (I\/O) devices , and a bus  that allows the various components and devices to communicate with one another. Computer readable media  and\/or one or more I\/O devices  can be included as part of, or alternatively may be coupled to, computing device . Bus  represents one or more of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, a processor or local bus, and so forth using a variety of different bus architectures. Bus  can include wired and\/or wireless buses.","Memory\/storage component  represents one or more computer storage media. Component  can include volatile media (such as random access memory (RAM)) and\/or nonvolatile media (such as read only memory (ROM), Flash memory, optical disks, magnetic disks, and so forth). Component  can include fixed media (e.g., RAM, ROM, a fixed hard drive, etc.) as well as removable media (e.g., a Flash memory drive, a removable hard drive, an optical disk, and so forth).","The techniques discussed herein can be implemented in software, with instructions being executed by one or more processing units . It is to be appreciated that different instructions can be stored in different components of computing device , such as in a processing unit , in various cache memories of a processing unit , in other cache memories of device  (not shown), on other computer readable media, and so forth. Additionally, it is to be appreciated that the location where instructions are stored in computing device  can change over time.","One or more input\/output devices  allow a user to enter commands and information to computing device , and also allows information to be presented to the user and\/or other components or devices. Examples of input devices include a keyboard, a cursor control device (e.g., a mouse), a microphone, a scanner, and so forth. Examples of output devices include a display device (e.g., a monitor or projector), speakers, a printer, a network card, and so forth.","Various techniques may be described herein in the general context of software or program modules. Generally, software includes routines, programs, objects, components, data structures, and so forth that perform particular tasks or implement particular abstract data types. An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available medium or media that can be accessed by a computing device. By way of example, and not limitation, computer readable media may comprise \u201ccomputer storage media\u201d and \u201ccommunications media.\u201d","\u201cComputer storage media\u201d include volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage media include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a computer.","\u201cCommunication media\u201d typically embody computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as carrier wave or other transport mechanism. Communication media also include any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.","Generally, any of the functions or techniques described herein can be implemented using software, firmware, hardware (e.g., fixed logic circuitry), manual processing, or a combination of these implementations. The terms \u201cmodule\u201d and \u201ccomponent\u201d as used herein generally represent software, although can alternatively also incorporate firmware and\/or hardware. In the case of a software implementation, the module or component represents program code that performs specified tasks when executed on a processor (e.g., CPU or CPUs). The program code can be stored in one or more computer readable memory devices, further description of which may be found with reference to . The features of the managed system extensibility described herein are platform-independent, meaning that the techniques can be implemented on a variety of commercial computing platforms having a variety of processors.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The same numbers are used throughout the drawings to reference like features.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
