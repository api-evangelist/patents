---
title: Wiring web widgets of a web mashup
abstract: For wiring web widgets of a web mashup application, a web widget registry may be generated based on one or more properties of the web widgets of the web mashup application. Based on the web widget registry, the web widgets of the web mashup application may be wired together, without requiring input from a user. Cycles among the web widgets may also be detected and removed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09058174&OS=09058174&RS=09058174
owner: International Business Machines Corporation
number: 09058174
owner_city: Armonk
owner_country: US
publication_date: 20101018
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Web mashups have become increasingly popular on the World Wide Web. A web mashup refers to a web application that combines content from multiple sources. A web mashup may include or provide, but does not necessarily include or provide, the following features. A web mashup typically includes web widgets that each retrieves, processes, and presents content from a respective source. Each web widget may communicate with the respective source via an application programming interface (API) specified by the respective source. Further, the web widgets may also interact with one another to retrieve and\/or present the content.","Web mashups represent a powerful paradigm of web development, permitting a user having minimal knowledge of software development to rapidly create customized web applications using existing sources of content. A user may create a new web mashup by placing one or more web widgets within a blank design canvas representing the web mashup. The user may then save the web mashup and publish the web mashup to a server for other users to access.","Embodiments of the invention provide a computer-implemented method, computer program product, and system for performing an operation that includes selecting, based on user input, a plurality of web widgets for inclusion in a mashup web application to be accessed by a first computer, wherein each of the plurality of web widgets comprises an embeddable web application that retrieves data from a respective computer other than the first computer. The operation also includes generating a web widget registry based on one or more properties of the selected plurality of web widgets. The operation also includes wiring the plurality of web widgets, based on the web widget registry.","Embodiments of the present invention generally provide techniques for wiring web widgets of a web mashup. One embodiment of the invention provides a widget manager module (WMM). The WMM generates a web widget registry based on a plurality of web widgets in a web mashup. The web widget registry describes resources consumed and\/or produced by each web widget and semantic tags associated with the respective web widget. Based on the web widget registry, the WMM wires the web widgets together without requiring any input from a user. The WMM also detects and removes cycles among the web widgets and provides an interface for the web widgets to communicate with one another. Further, as the user adds\/removes web widgets to\/from the web mashup, the WMM resolves dependencies among the web widgets. The WMM also allows the user to manually include or exclude one or more wirings between the web widgets. Advantageously, web widgets may be wired together more accurately and\/or efficiently. Accordingly, a user may create web mashups more conveniently and\/or efficiently.","In the following, reference is made to embodiments of the invention. However, it should be understood that the invention is not limited to specific described embodiments. Instead, any combination of the following features and elements, whether related to different embodiments or not, is contemplated to implement and practice the invention. Furthermore, although embodiments of the invention may achieve advantages over other possible solutions and\/or over the prior art, whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus, the following aspects, features, embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim(s). Likewise, reference to \u201cthe invention\u201d shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim(s).","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["100","100","102","170","130","170","102","102","130","130","130"]},"The computer  generally includes a processor  connected via a bus  to a memory , a network interface device , a storage , an input device , and an output device . The computer  is generally under the control of an operating system . Examples of operating systems include UNIX, versions of the Microsoft Windows\u00ae operating system, and distributions of the Linux\u00ae operating system. More generally, any operating system supporting the functions disclosed herein may be used. The processor  is included to be representative of a single CPU, multiple CPUs, a single CPU having multiple processing cores, and the like. Similarly, the memory  may be a random access memory. While the memory  is shown as a single identity, it should be understood that the memory  may comprise a plurality of modules, and that the memory  may exist at multiple levels, from high speed registers and caches to lower speed but larger DRAM chips. The network interface device  may be any type of network communications device allowing the computer  to communicate with other computers via the network .","The storage  may be a persistent storage device. Although the storage  is shown as a single unit, the storage  may be a combination of fixed and\/or removable storage devices, such as fixed disc drives, floppy disc drives, tape drives, removable memory cards, or optical storage. The memory  and the storage  may be part of one virtual address space spanning multiple primary and secondary storage devices.","The input device  may be any device for providing input to the computer . For example, a keyboard, keypad, light pen, touch-screen, track-ball, or speech recognition unit, audio\/video player, and the like may be used. The output device  may be any device for providing output to a user of the computer . For example, the output device  may be any conventional display screen or set of speakers, along with their respective interface cards, i.e., video cards and sound cards (not shown). Although shown separately from the input device , the output device  and input device  may be combined. For example, a display screen with an integrated touch-screen, a display with an integrated keyboard, or a speech recognition unit combined with a text speech converter may be used.","As shown, the memory  of the computer  includes a web browser . The web browser  refers to an application for accessing a plurality of interlinked hypertext documents over a network. Each hypertext document is identified by a Uniform Resource Identifier (URI) and may be a web page, a web application (e.g., a web mashup ), a graphical image, text, audio, video, etc. The hypertext documents may be interlinked using hyperlinks. A user of the web browser  may navigate from information resource to information resource by activating the hyperlinks via a graphical user interface (GUI) of the web browser . The user of the web browser may also access a web application for creating and\/or modifying one or more web mashups. The web application includes a palette of web widgets that may be added to a web mashup. The web application also includes one or more graphical user interface (GUI) screens for adding wiring between the web widgets. Examples of the web application include IBM\u00ae Lotus\u00ae Mashups, Yahoo\u00ae Pipes\u2122, and Microsoft\u00ae Popfly\u2122.","In one embodiment, the web mashup  (or mashup web application) is a web application that combines content from multiple content sources . The web mashup  includes a plurality of web widgets  that each retrieves, processes, and presents content from a respective source, using an application programming interface (API) specified by the respective source. The APIs exposed to the web widgets  for retrieving content may be web services. As used herein, web services refer to APIs that are accessed via Hypertext Transfer Protocol (HTTP) and executed on a remote system hosting the web services. Further, each web service adheres to one or more predefined web service protocols. The web mashup  further includes a widget manager module (WMM) . As further described below, the WMM  wires together the web widgets  without requiring any input from a user creating and\/or using the web mashup , thereby configuring the web widgets  to communicate with one another to provide functionality for the web mashup .","As shown, the storage  of the computer  includes a web widget registry  and an ontology . In one embodiment, in order to wires together the web widgets  without requiring any input from the user, the WMM  first generates the web widget registry  using information published by the web widgets . For each web widget , the web widget registry  stores a description of the respective web widget , a resource produced and\/or consumed by the respective web widget , and one or more semantic tags associated with the respective web widget . Each semantic tag characterizes a resource produced or consumed and may be selected from a predefined ontology  of semantic tags. During the wiring process, the WMM  uses at least the semantic tags to determine which resources (of distinct web widgets) are compatible with one another.","In one embodiment, upon being added to the web mashup , each web widget  publishes information to the WMM  for inclusion in the web widget registry . The information may be represented by a widget publication object and may describe one or more properties of the respective web widget . An exemplary class definition for the widget publication object is shown below.",{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE I"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary class definition for the widget publication object"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class Widget_publications"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Widget_description;"]},{"entry":[{},"res_prod_cons;"]},{"entry":[{},"Widget_reqs;"]},{"entry":[{},"Widget_prods;"]},{"entry":[{},"Widget_tag;"]},{"entry":[{},"Boolean cycle_id;"]},{"entry":[{},"Boolean availability;"]},{"entry":[{},"Hierarchy_id;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":"152"},"In one embodiment, a cycle refers to associations between two or more web widgets, where the associations form a cycle. Depending on the embodiment, cycles include only directed cycles among web widgets. Where producer-consumer relationships are represented as arrows originating at a producer and pointing to a consumer, directed cycles refer to associations between web widgets, where the arrows point in a single direction (either clockwise or counterclockwise, but not both). Further, depending on the embodiment, cycle_id is set to false by default (e.g., when a web widget is first added to the web mashup ). The boolean availability is a flag that specifies whether the web widget is set to active. Hierarchy_id stores an identifier to an ontology associated with the web widget.","As described above, in one embodiment, the class definition for the widget publication object includes a Widget_description object. An exemplary class definition for the Widget_description object is shown below.",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE II"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary class definition for the widget description object"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class Widget_description"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String ID;"]},{"entry":[{},"String TYPE;"]},{"entry":[{},"Object object;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"As described above, in one embodiment, the class definition for the widget publication object also includes a res_prod_cons object. An exemplary class definition for the res_prod_cons object is shown below.",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE III"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary class definition for the widget resources object"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class res_prod_cons"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String Res_Type;"]},{"entry":[{},"Set Widget_producing;"]},{"entry":[{},"Set Widget_consuming;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"As described above, in one embodiment, the class definition for the widget publication object also includes a Widget_tag object. An exemplary class definition for the Widget_tag object is shown below.",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE IV"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary class definition for the widget tag object"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class Widget_tag"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String ID;"]},{"entry":[{},"String TYPE;"]},{"entry":[{},"Array tags;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"As described above, the widget tag object stores one or more tags associated with a given web widget. In other words, the widget tag object stores a mapping from a web widget to one or more tags. In one embodiment, the WMM  also stores a reverse mapping\u2014i.e., from a tag to one or more web widgets. The reverse mapping may be represented by a tag_Widget object. An exemplary class definition for the tag_Widget object is shown below.",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE V"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary class definition for the tag widget object"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class tag_Widget"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String tag;"]},{"entry":[{},"Array Widget_description;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"In one embodiment, upon receiving each widget publication object, the WMM  identifies dependencies between the web widgets , based on the information published by the web widgets . A dependency refers to an association between a first web widget that produces a given resource and a second web widget that consumes the given resource. The dependency may be represented by a Widget_depends object. An exemplary class definition for the Widget_depends object is shown below.",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE VI"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary class definition for the widget dependency object"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class Widget_depends"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String ID;"]},{"entry":[{},"String TYPE;"]},{"entry":[{},"Array Widget_description;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"In one embodiment, the WMM  may be represented by a WMM object. An exemplary class definition for the WMM object is shown below.",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE VII"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary class definition for the WMM object"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class Widget_Module_Manager"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Array Widget_description;"]},{"entry":[{},"Array res_prod_cons;"]},{"entry":[{},"Array Widget_reqs;"]},{"entry":[{},"Array Widget_prods;"]},{"entry":[{},"Array Widget_depends;"]},{"entry":[{},"Array Widget_tag;"]},{"entry":[{},"Array tag_Widget;"]},{"entry":[{},"Array cycle_id;"]},{"entry":[{},"Array availability;"]},{"entry":[{},"Array hierarchy_id;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 2","FIG. 1"],"b":["148","148","152","150","150","150","150","150","152","152","150","150","150"],"sub":["1 ","2"]},{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 3","FIG. 1","FIGS. 4-7"],"b":["300","148","300","310","152","150","148","150","320","152","154","150","154","330","152","150","154","152","330","300","148"]},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 4","b":["400","150","148","400","410","150","148","148","420","150","152","430","152","154"]},"At step , the WMM  determines whether a suitable match exists (among the web widgets already added to the web mashup ). The suitable match refers to any web widget that can be wired to the web widget currently being added to the web mashup . In other words, the suitable match refers to any web widget that either produces a resource that is compatible with a resource consumed by the web widget being added\u2014or consumes a resource that is compatible with a resource produced by the web widget being added. If the WMM  identifies a suitable match (step ), the WMM  wires the suitable match to the web widget being added, without requiring any input from the user (step ). Otherwise, the WMM  outputs a notification that no match was found (step ). After the steps  or , the method  terminates.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 5","FIG. 1"],"b":["500","148","500","510","152","154","500","510","520","152","500","560","152","500"]},"At step , the WMM  determines whether the resource produced by the new web widget is known to the WMM  for the web mashup . To this end, the WMM  may determine whether the res_prod_cons array includes the resource. If the produced resource is known to the WMM , the WMM  updates the res_prod_cons array to include the new web widget as a producer of the resource (step ). The WMM  then wires the new web widget to all widgets consuming the resource (step ). To identify compatible widgets for wiring, the WMM  may compare semantic tags of the resource produced by the new web widget with semantic tags of the resource consumed by a candidate web widget.","However, if the resource produced by the new web widget is not yet known to the WMM  (step ), then the WMM  updates the res_prod_cons array to include the resource. To this end, the WMM  creates two empty sets: a first set representing web widgets producing the resource and a second set representing web widgets consuming the resource (step ). The WMM  then updates the first set with the new web widget (step ). The WMM  then determines which of the other web widgets in the web mashup  consume the resource (step ). If the WMM  identifies one or more web widgets that consume the resource, the WMM  updates the second set with the one or more web widgets and wires each of the one or more web widgets to the new web widget (step ).","If the web widget itself consumes one or more resources (step ), then the WMM  determines whether the consumed resource is known to the WMM  for the web mashup  (step ). To this end, the WMM  may determine whether the res_prod_cons array includes the consumed resource. If the consumed resource is not yet known to the WMM , the method  proceeds to the step , where the WMM  adds the consumed resource to the Widget_reqs array (which is described above) and stores an indication that a requirement of the new web widget\u2014namely, the consumed resource\u2014is not yet satisfied.","However, if the consumed resource is known to the WMM  (step ), the WMM  updates the res_prod_cons array to include the new web widget as a consumer of the resource (step ). The WMM  then wires the new web widget to all widgets producing the resource (step ). To identify compatible widgets for wiring, the WMM  may compare semantic tags of the resource consumed by the new web widget with semantic tags of the resource produced by a candidate web widget. After the step  or the step , the method  proceeds to step , where the WMM  may then identify and resolve cycles among the widgets, which is further described below in conjunction with . After the step , the method  terminates.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 6","b":["600","148","148","600","610","152","148","620","148","152","630","152","640","152","152","152"]},"At step , the WMM  stores indications of resources consumed and\/or produced by the web widget. For example, the WMM  updates the Widget_prods, Widget_reqs, and Widget_depends arrays accordingly. At step , the WMM  stores indications of semantic tags associated with the web widget. For example the WMM  updates the Widget_tag and tag_Widget arrays accordingly. At step , the WMM  wires the web widget with other web widgets in the web mashup  based on resources produced\/consumed by the respective web widgets and using the semantic tags associated with the respective web widgets. At step , the WMM  identifies and resolves any cycles among the web widgets, which is further described below in conjunction with . If the user adds another web widget is added to the web mashup  (step ), the WMM  returns to the step  to process another web widget. Otherwise, the WMM  saves the web mashup  (step ). After the step , the method  terminates.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 7","b":["700","148","700","710","152","720","152","152","152","730","152","148"]},"If a cycle is identified (step ), the WMM  prompts the user to delete the cycle or to mark the cycle as a desired cycle. The WMM  then returns to the step  to identify another cycle. If the user specifies to delete the cycle, the WMM  deletes at least one of the wirings in the cycle and\/or at least one web widget from the web mashup . The WMM  may also prompt the user to select which of the wirings to delete. If the user marks the cycle as the desired cycle, the WMM  allows the cycle to remain in the web mashup . Alternatively, the WMM  may determine whether a cycle is a desired cycle without requiring user input. The WMM  may make this determination based on one or more predefined rules. For example, the predefined rules may specify that a cycle with no exit condition is not a desired cycle. The exit condition may include a branch to another web widget (thereby breaking out of the cycle) or an output to a user (such as writing data to a file or displaying data on a GUI). Other rules are broadly contemplated.","If the WMM  does not identify any further cycles (step ), the WMM  stores an indication that the WMM  has checked for the existence of cycles involving the new web widget (step ). For example, the WMM  sets the cycle_id flag of the new web widget to TRUE. If the user adds another web widget is added to the web mashup  (step ), the WMM  returns to the step  to process another web widget. Otherwise, the method  terminates.","As described above, the WMM  stores information pertaining to the web widgets in the web widget registry . Advantageously, by storing the information in the web widget registry , the web widgets are no longer required to store information pertaining to the existence of other web widgets in the web mashup . Further, the web widgets are no longer required to determine suitable candidates for wiring. Instead, the logic for storing the information and for determining suitable candidates for wiring is encapsulated within the WMM . Accordingly, creation of web widgets and\/or web mashups may be simplified.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 8","b":["800","800","806","802","810","804","808","812","154"]},"In one embodiment, the WMM  provides two distinct modes for removing web widgets from the web mashup . The WMM  removes web widgets either as part of cycle removal or in response to user input. The two distinct modes include normal removal and cascaded removal. In normal removal mode, the WMM  only removes web widgets that are specified to be removed (either by the user or as determined by the WMM ). In cascaded removal mode, the WMM  removes web widgets that are specified to be removed, along with any web widgets that are dependent on the specified web widgets\u2014i.e., that consume a resource provided by the specified web widgets.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 9","b":["900","150","150","150","150","150","150","150","150","150","902","904","906","150","152","150","148","152","150","150","150","150","152"],"sub":["1","2 ","1","3 ","2","4 ","3","2","2 ","2 ","2","3 ","4"]},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 10","b":["1000","148","1000","148","150","150","150","150","150","150","150","150","150","150","152"],"sub":["1","2","3","4","5","2 ","3 ","1 ","1 ","4"]},"In one embodiment, the WMM  provides two distinct modes for wiring web widgets in the web mashup . The two distinct modes include automatic wiring and manual wiring. In automatic wiring mode, the WMM  wires together web widgets  of a web mashup  without requiring input from a user. In manual wiring mode, the WMM  wires together web widgets  of a web mashup  based on user input. The WMM  provides a toggle for the user to switch between the two distinct modes. Depending on the embodiment, the WMM  also toggles between the two distinct modes without requiring input from the user. For example, the WMM  may toggle between the two distinct modes based on a predefined set of parameters.","In one embodiment, the parameters may include a count of cycles formed upon adding a web widget to the web mashup . Alternatively or additionally, the parameters may include a count of wires formed upon adding the web widget to the web mashup . If either (or both) of these counts exceeds a predefined threshold, the WMM  switches from automatic wiring mode to manual wiring mode. The WMM  then notifies the user that the wiring mode has been changed. The user may review the wiring and\/or make any desired changes manually via the WMM . The user may then save the web mashup , upon which the WMM  may revert back to automatic wiring mode. The parameters and\/or thresholds may be retrieved from a configuration file associated with the WMM . In some embodiments, the parameters may also specify to disable either the automatic wiring mode or the manual wiring mode. Advantageously, web widgets  may be wired more conveniently and\/or efficiently using these distinct wiring modes.","In one embodiment, the WMM  may store, as a preset, the wirings among a given set of widgets. Upon subsequently encountering the same set of widgets, the user may request the WMM  to apply the preset to the widgets. In response, the WMM  may wire the widgets more efficiently than if the preset was not applied. Depending on the embodiment, the preset may include at least part of the web widget registry  and\/or may be exported as a configuration file associated with the WMM .","As described above, in one embodiment, the WMM  determines compatible web widgets  for wiring, based on semantic tags. The semantic tags may belong to one or more predefined ontologies. Each ontology specifies a plurality of semantic tags and the hierarchical relationships between the semantic tags. The hierarchical relationships may be used to determine whether a consumed resource is compatible with a produced resource.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 11","b":["1100","1100","1102","1104","1106","1100","1102","1104","1106","1102","1102","1102","1104","1104","152","150"]},{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 12","b":["148","152","152","152","152","152"]},{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 13","FIG. 12"],"b":["152","150","150","150","152","150","150","150"],"sub":["1","2 ","3 ","1","2 ","3"]},"Of course, those skilled in the art will recognize that one or more graphical user interface (GUI) screens of the web widgets and\/or web mashup may be provided by technologies such as Hypertext Markup Language (HTML), Extensible Hypertext Markup Language (XHTML), Cascading Style Sheets (CSS), JavaScript, and Asynchronous JavaScript and XML (Ajax). As described above, each web service adheres to one or more predefined web service protocols. The web service protocols may include XMLHTTPRequest (XHR), XML-RPC, JavaScript Object Notation RPC (JSON-RPC), Simple Object Access Protocol (SOAP), and Representational State Transfer (REST). Further still, to send, store, and\/or receive data, the web widgets and\/or the WMM may use technologies such as JSON, XML, and Keyhole Markup Language (KML).","Advantageously, embodiments of the invention provide techniques for wiring web widgets of a web mashup. One embodiment of the invention provides a widget manager module (WMM). The WMM generates a web widget registry based on one or more properties of web widgets of a web mashup. Based on the web widget registry, the WMM wires the web widgets together without requiring any input from a user. The WMM also detects and removes cycles among the web widgets and provides an interface for the web widgets to communicate with one another. The WMM also allows the user to manually specify to include or exclude one or more wirings between the web widgets. Advantageously, web widgets may be wired together more accurately and\/or efficiently. Accordingly, a user may create web mashups more conveniently and\/or efficiently.","While the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited aspects are attained and can be understood in detail, a more particular description of embodiments of the invention, briefly summarized above, may be had by reference to the appended drawings.","It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6","b":"600"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
