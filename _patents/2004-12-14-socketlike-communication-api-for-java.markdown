---
title: Socket-like communication API for Java
abstract: A system and method are described for performing data processing using shared memory and socket-like application programming interface. In one embodiment, a plurality of handles is employed and associated with a plurality of processes. The plurality of handles may serve as communication end-points for communication of data. Further, an application programming interface is employed to present the plurality of handles as the application programming interface for sockets for facilitating the communication of data compatible with a programming language. The data is communicated between the plurality of processes via the socket-like plurality of handles.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07600217&OS=07600217&RS=07600217
owner: SAP AG
number: 07600217
owner_city: Walldorf
owner_country: DE
publication_date: 20041214
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","This invention relates generally to data processing. More particularly, an embodiment relates to a system and method for performing data processing using shared memory and socket-like communication application programming interface.","2. Description of the Related Art","Traditional client-server systems employ a two-tiered architecture such as that illustrated in . Applications  executed on the client-side  of the two-tiered architecture are comprised of a monolithic set of program code including a graphical user interface (GUI) component, presentation logic, business logic and a network interface that enables the client  to communicate over a network  with one or more servers . A database  maintained on the server  provides non-volatile storage for the data accessed and\/or processed by the application .","As is known in the art, the \u201cbusiness logic\u201d component of the application represents the core of the application, i.e., the rules governing the underlying business process (or other functionality) provided by the application. The \u201cpresentation logic\u201d describes the specific manner in which the results of the business logic are formatted for display on the user interface. The \u201cdatabase\u201d  includes data access logic used by the business logic to store and retrieve data.","The limitations of the two-tiered architecture illustrated in  become apparent when employed within a large enterprise. For example, installing and maintaining up-to-date client-side applications on a large number of different clients is a difficult task, even with the aid of automated administration tools. Moreover, a tight coupling of business logic, presentation logic and the user interface logic makes the client-side code very brittle. Changing the client-side user interface of such applications is extremely hard without breaking the business logic, and vice versa. This problem is aggravated by the fact that, in a dynamic enterprise environment, the business logic may be changed frequently in response to changing business rules. Accordingly, the two-tiered architecture is an inefficient solution for enterprise systems.","In response to limitations associated with the two-tiered client-server architecture, a multi-tiered architecture has been developed, as illustrated in . In the multi-tiered system, the presentation logic , business logic  and database  are logically separated from the user interface  of the application. These layers are moved off of the client  to one or more dedicated servers on the network . For example, the presentation logic , the business logic , and the database  may each be maintained on separate servers, ,  and , respectively.","This separation of logic components and the user interface provides a more flexible and scalable architecture compared to that provided by the two-tier model. For example, the separation ensures that all clients  share a single implementation of business logic . If business rules change, changing the current implementation of business logic  to a new version may not require updating any client-side program code. In addition, presentation logic  may be provided which generates code for a variety of different user interfaces , which may be standard browsers such as Internet Explorer\u00ae or Netscape Navigator\u00ae.","The multi-tiered architecture illustrated in  may be implemented using a variety of different application technologies at each of the layers of the multi-tier architecture, including those based on the JAVA 2 PLATFORM ENTERPRISE EDITION\u2122 (J2EE) standard, the Microsoft\u00ae.NET\u2122 standard and\/or the ADVANCED BUSINESS APPLICATION PROGRAMMING\u2122 (ABAP) standard developed by SAP AG.","For example, in a J2EE environment, such as the one illustrated in , the business layer  is to handle the core business logic of the application having Enterprise JavaBean\u2122 (EJB or enterprise bean) components with support for EJB containers . While the presentation layer  is responsible for generating servlets and JAVA ServerPages\u2122 (JSP or JSP pages) interpretable with support for Web containers  by different types of browsers at the client  via a web server  a network  (e.g., Internet or intranet).","In recent years, as business application development projects have grown larger and more diversified, integration of business applications in terms of people, information, and processed is becoming increasingly important. SAP\u00ae NetWeaver\u2122 was developed and presented by SAP AG with core capabilities to provide a solution for the integration of people, information, and processes.","However, the integration of people, information, and process is resulting in an ever increasing demand for high-level planning, maintenance, and administration, which in turn, requires the underline architecture and environment to conform to, for example, platform independence, inter-process communication, increased security, development versioning, multi-user possibility, shared memory, and efficient classloading. For example, it would be useful to have an architectural environment that provides increased robustness, improved integration, better monitoring, reduced memory footprint, decreased internal threads, faster session failover, and shared memory.","A system and method are described for performing data processing using shared memory and socket-like application programming interface. In one embodiment, a plurality of handles is employed and associated with a plurality of processes. The plurality of handles may serve as communication end-points for communication of data. Further, an application programming interface is employed to present the plurality of handles as the application programming interface for sockets for facilitating the communication of data compatible with a programming language. The data is communicated between the plurality of processes via the socket-like plurality of handles.","Described below is a system and method for employing performing data processing using shared memory and socket-like communication application programming interface. Throughout the description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without some of these specific details. In other instances, well-known structures and devices are shown in block diagram form to avoid obscuring the underlying principles of the present invention.","In the following description, numerous specific details such as logic implementations, opcodes, resource partitioning, resource sharing, and resource duplication implementations, types and interrelationships of system components, and logic partitioning\/integration choices may be set forth in order to provide a more thorough understanding of various embodiments of the present invention. It will be appreciated, however, to one skilled in the art that the embodiments of the present invention may be practiced without such specific details, based on the disclosure provided. In other instances, control structures, gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the invention. Those of ordinary skill in the art, with the included descriptions, will be able to implement appropriate functionality without undue experimentation.","Various embodiments of the present invention will be described below. The various embodiments may be performed by hardware components or may be embodied in machine-executable instructions, which may be used to cause a general-purpose or special-purpose processor or a machine or logic circuits programmed with the instructions to perform the various embodiments. Alternatively, the various embodiments may be performed by a combination of hardware and software.","Various embodiments of the present invention may be provided as a computer program product, which may include a machine-readable medium having stored thereon instructions, which may be used to program a computer (or other electronic devices) to perform a process according to various embodiments of the present invention. A machine-readable storage medium includes floppy diskette, optical disk, compact disk-read-only memory (CD-ROM), magneto-optical disk, read-only memory (ROM), random access memory (RAM), erasable programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), flash memory. The machine-readable medium may include another type of media\/machine-readable medium suitable for storing electronic instructions. Moreover, various embodiments of the present invention may also be downloaded as a computer program product, wherein the program may be transferred from a remote computer to a requesting computer by way of data signals.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2","b":["200","200","200","202","204","206","208","202","212","214","210","212"]},"Information integration  refers to converting information into knowledge quickly and efficiently. Information integration  provides efficient business intelligence  and knowledge management  using SAP products like Business Information Warehouse (BW) and Knowledge Management (KM). Further, consolidation of master data management  beyond system boundaries is performed using SAP's Master Data Management (MDM). Process integration  refers to optimized process management using integration broker or SAP exchange infrastructure  and business process management  techniques. Examples of products to perform process integration  include Exchange Infrastructure (XI) and Business Process Management (BPM).","Application platform  refers to SAP's Web Application Server (Web AS), which is the basis for SAP applications. Web AS, which may be independent of the database and operating system , includes a J2EE engine  in combination with an already present ABAP engine or instance  to further enhance the application platform . The architecture  further includes a composite application framework  to provide various open interfaces (APIs) and a lifecycle management , which is an extension of the previous Transport Management System (TMS). As illustrated, the architecture  further provides communication with Microsoft .NET , International Business Machine\u00ae (IBM) WebSphere\u2122 , and the like .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 3","FIG. 2"],"b":["300","320","300","208","300","320","302","314","318","314","318","318","316"]},"The Web AS  having the ABAP engine  is further enhanced by including a J2EE engine . The J2EE engine  is in communication with the ABAP engine  via a fast Remote Function Call (RFC) connection . The two engines - are further in communication with an Internet Communication Manger (ICM) . The ICM  is provided for handling and distributing queries (e.g., Internet queries) to various individual components of the architecture . The architecture  further supports a browser , such as Microsoft Internet Explorer, Netscape Navigator, and other modified variations of mobile end devices, such as personal digital assistants (PDAs), pocket computers, smart cell phones, other hybrid devices, and the like. The Web AS  also supports various protocols and standards , such as HyperText Markup Language (HTML), eXtensible Markup Language (XML), Wireless Markup Language (WML), HyperText Transport Protocol (HTTP(S)), Simple Mail Transfer Protocol (SMTP), Web Distributed Authority and Versioning (WebDAV), Simple Object Access Protocol (SOAP), Single Sign-On (SSO), Secure Sockets Layer (SSL), X.509, Unicode, and the like.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 4","b":["400","410","420","430","410","420","430","410","420","430","410","420","430","400","400"]},"The presentation layer  serves as an interface between various applications and users or clients -. Here, the clients are illustrated as workstations or terminals - that are used to collect and gather user input and send it to the application layer  via a network connection. The network connection may be a wired or wireless connection to a LAN, a Wide Area Network (WAN), a Metropolitan Area Network (MAN), an intranet, and\/or the Internet. The terminals - include personal computers, notebook computers, personal digital assistants, telephones, and the like. In one embodiment in which the network connection connects to the Internet, one or more of the user terminals - may include a Web browser (e.g., Internet Explorer or Netscape Navigator) to interface with the Internet.","The presentation layer  allows the end user to interact with the relevant application using a GUI, such as the SAP GUI, which is a universal client widely used for accessing SAP R\/3 or mySAP functions. The GUI works as a browser and offers easy access to various SAP functions, such as application transactions, reports, and system administration functions. The SAP GUI, for example, is available in three different formats, each of which having its own unique selling point and is suited to a particular user. The three formats include SAP GUI for Windows\u00ae, SAP GUI for HTML, and SAP GUI for JAVA.","The presentation layer  may also includes various management applications, such as a JAVA Management Extension (JMX)-compliant management application, a JMX manager, and\/or a proprietary management application. The management applications include one or more graphical management applications, such as a visual administrator, operating to, for example, retrieve and display information received from the application layer  and\/or the database layer . The visual administrator includes a monitor viewer to display such and other information. The monitor viewer includes a GUI-based or Web-based monitor viewer. Management applications include third party tools, such as file systems, to store information.","The application layer  includes various application servers and computing devices to perform data processing. The application layer  includes a dispatcher , which refers to the central process on the application layer  for processing transactions. For example, the dispatcher  is used to distribute the request load to individual work processes -, organize communication between the work processes -, and establish connection to the presentation layer . For example, when a user makes processing entries from his computer using the menu on the presentation layer , the entries are converted into a special format (e.g., GUI protocol) and forwarded to the dispatcher . The dispatcher  then places this request in a dispatcher queue. The queue is then used to free work processes - that carry out the processing. The application layer  may be implemented in accordance with J2EE v1.3, final release Sep. 24, 2001, published on Jul. 18, 2002 (the J2EE Standard). An update of J2EE v1.3 was recently released, on Nov. 24, 2003, as J2EE v1.4. The management techniques described herein are used to manage resources within a \u201ccluster\u201d of server nodes. However, the underlying principles of the invention are not limited to any particular application server architecture.","The database layer  is used to optimize the data access without the being dependent on the underlying database and the operating system. The database independence is achieved using open standards, such as JAVA Database Connectivity (JDC). The presentation layer  is where the user interacts with the relevant application, which is then executed at the application layer , while the data processing - is managed at the database layer . The database layer  may include one or more database management systems (DBMS) and data sources. Furthermore, the database layer  is compatible with both the ABAP and J2EE environments and allows the two environments to communicate with each other. For example, the functions of ABAP (e.g., Open SQL for ABAP) are transferred to the functions of J2EE (e.g., Open SQL for JAVA) using a variety of APIs.","The database layer  may include one or more database servers, EJB servers, old systems, and mySAP components. The clients at the presentation layer  may access one or more of the applications via standalone JAVA programs and programs that help access an application via, for example, using Internet Inter-Object Request Broker Protocol (IIOP)\/Common Object Request Broker Architecture (COBRA) written using any number of programming languages (e.g., \u2212C, C, C++, JAVA).","The J2EE environment may also include various J2EE containers that are associated with various J2EE services and APIs, which include JAVA Naming Directory Interface (JNDI), JAVA Database Connectivity (JDBC), J2EE connector Architecture (JCA), Remote Method Invocation (RMI), JAVA Transaction API (JTA), JAVA Transaction Service (JTS), JAVA Message Service (JMS), JAVA Mail, JAVA Cryptography Architecture (JCA), JAVA Cryptography Extension (JCE), and JAVA Authentication and Authorization Service (JAAS). The J2EE services further include EJB_service, serviet_JSP, application_client_service, connector_service to provide (J2EE containers, namely) EJB containers, Web containers, application client containers, and connector containers, respectively.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 5","b":["500","520","530","500","512","514","502","506","520","530","502","506","502","506","502","506","520","530"]},"As illustrated, in a network-based architecture , the basic building blocks for communication are the sockets - associated with each of the processes -. Sockets - exist within the communication domain, which serves as an abstraction to bundle properties of processes - communicating through the sockets -. There are various types of sockets - that communication architectures  can adopt. Some examples of the various types of sockets - include stream sockets, datagram sockets, raw sockets, and sequenced packet sockets. Stream sockets provide bi-directional, reliable, sequenced, unduplicated flow of data. Message boundaries are not visible for stream sockets. Datagram sockets support bi-directional flow of data. Record boundaries are visible for datagram sockets. Raw sockets allow user processes to be used by normal applications. Sequenced packet sockets are similar to stream sockets, with the exception that record boundaries are preserved.","A socket - is created with a system call and terminated with a system call once a process - has finished using the socket. The sockets - are created and maintained on the OS level of the architecture . The sockets - are used to make the inter-process communication similar to file Input\/Output (I\/O), primarily because the network protocols are typically more complex than conventional I\/O devices. Various networks and protocols (e.g., socket interface, TCP\/IP) are used to exchange information in a conventional computer system without the use of a shared memory.","A process - refers to a task being run by a computer, which is often simultaneously with several other tasks. Many of the processes - exist simultaneously with each of them taking turns on the central processing unit (CPU). Typically, the processes - include operating system (OS) processes that are embedded in the operating system. The processes - take up time as opposed to the memory - that takes up space. This is typically the case for both the processes that are managed by the operating system and those processes that are defined by process calculi. The processes - further include specialized processes, such as ABAP work processes and J2EE worker nodes.","The operating system works to keep the processes - separated and allocates the resources to help eliminate the potential interferences of the processes - with each other when being executed simultaneously. Such potential interferences can cause system failures. Further, the operating system may also provide mechanisms for inter-process communication to enable processes to interact in safe and predictable manner. Typically, an OS process - consists of memory (e.g., a region of virtual memory for suspended processes), which contains executable code or task-specific data, operating system resources that are allocated to each of the processes which include file descriptor (for UNIX) and handles (for Windows), security attributes (e.g., process owner and the set of permissions), and the processor state (e.g., content of registers, physical memory addresses), which is stored in the actual registers when the process is executing.","The ABAP work processes and the J2EE worker nodes OS processes - are considered specialized processes that contain the attributes and behavior of the a typical OS process and are created, scheduled, and maintained by the operating system. For example, the ABAP work processes are specialized in that they are used to execute the ABAP-based transactions, and the J2EE worker nodes are specialized in that they are used to execute the JAVA-based transactions.","Having assigned individualized memory - to each of the processes - provides a relatively inefficient computing, which lacks robustness as the processes - do not communicate with each other and have to access the local memory - for information or data (e.g., an update or a datagram). Furthermore, such network-based communication using various network connections - also causes the data processing transactions to be time-consuming and less secure. For example, a typical data processing transaction may include retrieving of data from one local memory -, flowing of the data through various protocols (e.g., Transmission Control Protocol (TCP), User Datagram Protocol (UDP)), addresses (e.g., Internet Protocol (IP) address) and operating systems, before reaching its destination at another local memory -.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 6","b":["600","622","610","620","622","624","602","606","602","606","624","600","602","606","624","602","606","624"]},"The processes - refer to tasks embedded in the operating system. For example, each time a client initiates a program or a document (e.g., opening Microsoft Word\u00ae), a request is placed with the operating system regarding commencing the task of opening the document for the client. Several of such processes - can be performed simultaneously in the CPU by taking turns. Typically, an operating system provides the isolation of such processes -, so they are less likely to interfere with each other, such as when there is a crashed process, such as process , none of the other processes, such as processes -, are affected by it and so the potential system failure is avoided. For example, the operating system can increase isolation and robustness by allocating one process - for each user session, and running a VM for that user session within the allocated process -. However, in some situations (e.g., when there are a large number of user sessions), such operating system scheduling and allocation can add to the system overhead and consume valuable resources, such as time and space.","The processes - may contain some memory (e.g., a region of virtual memory for suspended processes which contains executable code or task-specific data), operating system resources that are allocated to such processes - (such as file descriptors, when referring to UNIX, and handles, when referring to Windows), security attributes, such as process owner and the process' set of permissions, and the processor state, such as the content of registers, physical memory addresses, etc.","Various enterprise servers and other large servers are considered request processing engines for processing large numbers of small user requests associated with user sessions. The user requests lead to the creation of processes -, which refer to processing of such user requests. The processing of the requests usually involves the running of a user code (e.g., JAVA servlets or EJBs) in a runtime system (e.g., a JAVA virtual machine (JVM)) executing on a server. In such a server, scalability can be achieved by using multiple threads, such as a multi-threaded VM, to process requests corresponding to a number of user sessions. However, running a large number of user sessions can be relatively cumbersome and wasteful of valuable resources.","In one embodiment, the shared memory  can provide a common access and a buffer for the process-attachable VMs, the OS processes - including ABAP work processes and J2EE worker nodes, as well as dispatcher processes. It is to be noted that the ABAP work processes at the ABAP engine are considered specialized processes that are used for processing the OS processes - with specialized functionality. The work processes have the attributes and behavior that are also common with the OS processes - and they may be created, scheduled, and maintained by the operating system. For example, the ABAP work processes are to execute ABAP transactions, while the J2EE worker nodes, also regarded as specialized processes having similar attributes as the processes -, are to execute the JAVA code.","Having introduced the FCA  to the architecture  facilitates an executable program (e.g., a program running on an OS process - executing the code) to use the FCA functionalities by binding the FCA library at the time of development and by calling the API for FCA communication in a programming language (e.g., C or JAVA). For example, at runtime, the executable program operates as a process - in the operating system, such as when a program (e.g., MS Word or Excel) is started several times, which creates several OS processes - associated with one program that are performed using the FCA functionalities. In one embodiment, the FCA  may remain independent of a particular programming language (e.g., ABAP or JAVA) or a particular operating system (e.g., UNIX or Windows). The FCA functionalities may be achieved by coding such functionalities in the program. Stated differently, the program, when running, is executed as an OS process - and as such it performs various tasks, such as reading\/writing data, processing data, and accessing the FCA functionalities.","In one embodiment, having the shared memory  helps eliminate the necessity for local memory or individually dispersed memory for performing processes - and for communicating data. Stated differently, the shared memory , as opposed to a local memory using a network connection, is used to create a buffer (e.g., for receiving and transmitting data) for various processes -. A request queue is created at the shared memory  and the recently-created request is then placed in the request queue. In one embodiment, the dispatcher then determines the availability of various work processes and, based on such availability, assigns the request to the available work process to handle. The work process performs the corresponding process - to satisfy the client request. The satisfying of the request may include performing the requested task and providing the requested information or response data back to the client via the shared memory . In another embodiment, if the dispatcher is not used, the ICM may possess the functionalities of the dispatcher and assign the request to, for example, the available ABAP work process or J2EE worker node. The ABAP-related requests are sent to the ABAP work processes and the JAVA-related requests are sent to the J2EE worker nodes. Having the shared memory  provided by the FCA  not only allows a copy-free transmission of the data, but also eliminates the potential of the data being lost due to connection or network failures. Furthermore, using a single shared memory  allows the various tasks (e.g., OS processes -) to run on a single local host, which in turn, provides a secure transmission of data. In one embodiment, the shared memory  includes memory pipes that are used bi-directionally and are created at startup along with initialization of the FCA .","Furthermore, the shared memory  at the FCA  is low on buffers, which allows for creating and connecting of the queues rather than solely relying on retrying the same queues. Having the shared memory  reduces administrative costs, while increasing consistency and easing communication between various processes -. Various entities at the shared memory  may include data, datagrams, application update information, strings, constants, and variable.","In one embodiment, the architecture  employs FCA handles - as communication end-points. The handles - are regarded as an entity at the FCA level for providing communication. Although the handles - are not sockets as they have different classes, they act socket-like by having similar semantics, which makes application migration from sockets to FCA connections via the handles - relatively easy. The handles - are created, maintained, and used at the application layer of the architecture  and not necessarily at the OS level where the sockets are created. In one embodiment, the FCA handles - provide greater performance, reliability, robustness, security, and failover handling, while acting socket-like to ensure low porting effort, high compatibility, and minimal programming effort. The shared memory  includes information in blocks to keep track of the number of FCA handles -, buffers, etc. that are being used. Using this information, the FCA  can also provide monitoring functionality for monitoring processes and nodes associated with various clients.","The handles - are associated with one or more processes - to provide connection to facilitate a link between two processes -. Furthermore, the association of the handles - with the processes - is used to an n-tuple that specifies the two endpoints of communication that make up a connection. These functions are based on the client\/server model. Further, different handles - may be used for different purposes.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 7","b":["702","706","710","702","712","704","708","718","702","702","710","712"]},"The server  accepts the connection  offered by the client . Stated differently, the server  gets a port and a socket to use for this client . The server  blocks the connection  until connection request from the client  is received. The connection is established  between the server  and the client . The client  writes the request data , which results in sending of the request data . The reads the request data , which results in receiving of the request data. The request is then processed  at the server . The server  then writes the response data , which results in sending of the response data  to the client . The client  then reads the response data . The connection may then be closed between the server  and this client  if no longer necessitated.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 8","b":["802","806","810","802","804","808","812","804","814","802","802","816"]},"At the sever , the new connection request from the client is accepted ; however, the server  block any new connections  until a new request has arrived. The connection between the client  and the server  is established . The client  gets buffer for generating a request  and uses the buffer to generate the new request . The request is then flushed , which results in sending of the request data  to the server . The server  receives the data  and processes the request .","The server  then obtains buffer to generating a response to the request  and uses the buffer to generate the response. The response is then flushed , which results in sending of the response data  to the client . The client  receives the response data  and processes the response . The server  and this client  propose closing the connection ,  when no longer necessitated, and the connection is closed .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 9","b":["902","904","906","904","908","904","910","912","904","914","916","918","904","920","902","922","924","902"]},"The server  reads  the request and receives the request data from the client . The request is then processed  at the server . The server  writes  the response data and flushes it  on to the client , which results in sending of the response data  to the client . The client  reads  the response data. The response is processed  at the client . Once the request is processed and the response data is received and there is no longer a need to keep the connection open, the client  and server  propose closing the connection -, which results in closing of the connection .",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 10","b":["1002","1004"]},"A JAVA API is provided to allow the handles to work as JAVA-based socket-like endpoints to ease the communication of data between various processes. Stated differently, although the shared memory at the FCA is used to provide bi-directional communication of data between various components, particularly between the processes, the JAVA API provides a socket-like interface for programmers and developers using the JAVA programming language. Similar APIs can be provided for other programming languages, such as a C API may be provided for connection-oriented C FCA (C FCA) communication.","In one embodiment, at the server , the FCA properties (e.g., FCA library) are initialized  to prepare and enable FCA access. A new FCA server is created  which refers to creating a new FCA request queue, which is bound a request queue name. Further, the server  is configured to accept  an open connection from the client . The server  listens for a connection to be made to this FCA request queue and prepares to accept  the connection with it is becomes available. The acceptance is blocked  until a new request has arrived. Meanwhile, at the client , the FCA properties are initialized  for preparation and enablement of FCA access. Further, a new FCA client is created  for a attaching with an existing FCA request queue at the server . At the client , a new connection request is opened , which is used to establish connection  with the request queue at the sever .","A request is then generated  at the client . The request data is written  and then the request is flushed  to send the request data  to the server . The request data is read  and received at the server . The request is then processed . Once the request is processed , the response data is written  and response is flushed , which triggers the sending of the response data  to the client . The client  reads the response data  and processed the response . When the connection is not longer required, the server  and the client  propose closing the connection -. The connection is then closed .",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 11","b":["1100","1100"]},"In one embodiment, these improvements are achieved by providing a common access to a commonly shared memory using memory pipes  and other necessary layers - and  of the architecture . Such use of the shared memory using the memory pipes  also provides secure and copy-free transfer of data, and decreased network overhead, latency, copy operations, and process switches. Further, to integrate the J2EE engine and the ICM, various protocols, such as RMI, P4, and Telnet, are ported through the ICM, while the shared memory is used as a common access point to transport and communicate data.","In the illustrated embodiment, the architecture  includes a layer of operating system . The operating system  refers to the master control program that runs the computer. The first program is loaded when the computer is turned on, its main part, the kernel, resides in memory at all times. The operating system  sets the standards for all application programs that run on the computer. Further, the applications communicate with the operating system  for user interface and file management operations. Some examples of the operating system  include Windows (e.g., 95, 98, 2000, NT, ME, and XP), Unix (e.g., Solaris and Linux), Macintosh OS, IBM mainframe OS\/390, and AS\/400's OS\/400. Disk Operating System (DOS) is still used for some applications, and there are other special-purpose operating systems as well.","In one embodiment, the semaphores  occupy another layer of the architecture . The semaphores  refer to the shared space for interprocess communications (IPC) controlled by \u201cwake up\u201d and \u201csleep\u201d commands. For example, the source process fills a queue and goes to sleep until the destination process uses the data and tells the source process to wake up. The semaphores  are provided to work together with the memory pipes , which occupy another layer of the architecture , to facilitate the shared memory. The memory pipes  refer to a fast memory based communication using pipes that are to transport communication data between various components of the architecture .","Using the architecture , these memory pipes  are utilized bi-directionally at the shared memory to relatively efficiently and quickly transport data between various components. The communication between processes and components is facilitated and further enhanced by the FCA communication layer , which include a communication interface or API. The communication layer  works with the semaphores  and the memory pipes  to facilitate direct and bi-directional communication between processes and components and to keep the communication efficient, secure, and fast. Further, the communication layer  works as an API to external inputs, third-party applications, and clients.","In one embodiment, in addition to the layers - described, the FCA  may also include a JAVA FCA layer\/API  for JAVA to provide socket-like interface for the Java language. For example, the JFCA layer  is used to provide JAVA-based communication for external applications and to present the FCA handles as socket-like for JAVA. This is also for programmers who use JAVA to make use of the architecture . The JAVA FCA layer\/API  is being used here merely as an example and embodiments of the invention are not limited to JAVA. For example, the FCA layer\/API  for FCA communication can be used with other programming languages, such as a C-based layer\/API for C, a C++-based layer\/API for C++, a C#-based layer\/API for C#, a VISUAL BASIC-based layer\/API for VISUAL BASIC, a JAVA-based layer\/API for JAVA, and the like. Regarding handles, the architecture  employs FCA handles as communication end-points, but they are communicated to the programmers as socket-like, which are well-known but are not as efficient as handles, using the JFCA interface layer .",{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 12","b":["1202","1204","1206"]},"At processing block , the server receives the request data from the client. The request data is then processed at the server at processing block . In processing of the request data, a reply having response data is prepared at the server at processing block . The response data is then sent to the client at processing block . At decision block , a determination is made as to whether additional requests are to be received from this client. If yes, the process continues with the server receiving additional request data at processing block . If not, the connection is not longer necessitated and is closed at processing block .",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 13","b":["1300","1300","1310","1300","1","1315","1320","1300","1325","1315","1320","1325","1315","1320"]},"A hard drive or other storage device  may be used by the system  for storing information and instructions. The storage device  may include a magnetic disk or optical disc and its corresponding drive, flash memory or other nonvolatile memory, or other memory device. Such elements may be combined together or may be separate components. The system  may include a read only memory (ROM)  or other static storage device for storing static information and instructions for the processors  through .","A keyboard or other input device  may be coupled to the bus  for communicating information or command selections to the processors  through . The input device  may include a keyboard, a keypad, a touch-screen and stylus, a voice-activated system, or other input device, or combinations of such devices. The computer may further include a mouse or other cursor control device , which may be a mouse, a trackball, or cursor direction keys to communicate direction information and command selections to the processors and to control cursor movement on a display device. The system  may include a computer display device , such as a cathode ray tube (CRT), liquid crystal display (LCD), or other display technology, to display information to a user. In some environments, the display device may be a touch-screen that is also utilized as at least a part of an input device. In some environments, the computer display device  may be or may include an auditory device, such as a speaker for providing auditory information.","A communication device  may also be coupled to the bus . The communication device  may include a modem, a transceiver, a wireless modem, or other interface device. The system  may be linked to a network or to other device using via an interface , which may include links to the Internet, a local area network, or another environment. The system  may comprise a server that connects to multiple devices. In one embodiment the system  comprises a JAVA\u00ae compatible server that is connected to user devices and to external resources.","While the machine-readable medium  is illustrated in an exemplary embodiment to be a single medium, the term \u201cmachine-readable medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-readable medium\u201d shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine of the system  and that causes the machine to perform any one or more of the methodologies of the present invention. The term \u201cmachine-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, optical and magnetic media, and carrier wave signals.","Furthermore, it is appreciated that a lesser or more equipped computer system than the example described above may be desirable for certain implementations. Therefore, the configuration of system  may vary from implementation to implementation depending upon numerous factors, such as price constraints, performance requirements, technological improvements, and\/or other circumstances.","It should be noted that, while the embodiments described herein may be performed under the control of a programmed processor, such as processors  through , in alternative embodiments, the embodiments may be fully or partially implemented by any programmable or hardcoded logic, such as field programmable gate arrays (FPGAs), TTL logic, or application specific integrated circuits (ASICs). Additionally, the embodiments of the present invention may be performed by any combination of programmed general-purpose computer components and\/or custom hardware components. Therefore, nothing disclosed herein should be construed as limiting the various embodiments of the present invention to a particular embodiment wherein the recited embodiments may be performed by a specific combination of hardware components.","It should be appreciated that reference throughout this specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Therefore, it is emphasized and should be appreciated that two or more references to \u201can embodiment\u201d or \u201cone embodiment\u201d or \u201can alternative embodiment\u201d in various portions of this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures or characteristics may be combined as suitable in one or more embodiments of the invention.","Similarly, it should be appreciated that in the foregoing description of exemplary embodiments of the invention, various features of the invention are sometimes grouped together in a single embodiment, figure, or description thereof for the purpose of streamlining the disclosure aiding in the understanding of one or more of the various inventive aspects. This method of disclosure, however, is not to be interpreted as reflecting an intention that the claimed invention requires more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive aspects lie in less than all features of a single foregoing disclosed embodiment. Thus, the claims following the detailed description are hereby expressly incorporated into this detailed description, with each claim standing on its own as a separate embodiment of this invention.","While certain exemplary embodiments have been described and shown in the accompanying drawings, it is to be understood that such embodiments are merely illustrative of and not restrictive, and that the embodiments of the present invention are not to be limited to specific constructions and arrangements shown and described, since various other modifications may occur to those ordinarily skilled in the art upon studying this disclosure."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The appended claims set forth the features of the invention with particularity. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
