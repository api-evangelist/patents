---
title: Secure server plug-in architecture for digital rights management systems
abstract: Systems and methods for providing digital rights management services are disclosed. Such a system includes a service program that provides a processing framework for performing a digital rights management service, such as publishing or licensing rights managed digital content. A plurality of plug-in components are provided, each of which performs a respective task associated with the digital rights management service. The plug-in components are integrated into the processing framework according to predefined sets of interface rules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07631318&OS=07631318&RS=07631318
owner: Microsoft Corporation
number: 07631318
owner_city: Redmond
owner_country: US
publication_date: 20020628
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","CONCLUSION"],"p":["The following U.S. patent applications disclose subject matter that is related to the subject matter of the present application, and each is hereby incorporated herein by reference: U.S. patent application Ser. No. 10\/185,511, filed Jun. 28, 2002, entitled \u201cSystems And Methods For Issuing Usage Licenses For Digital Content And Services;\u201d U.S. patent application Ser. No. 10\/185,278 filed Jun. 28, 2002, now U.S. Pat. No. 7,549,060, entitled \u201cUsing a Rights Template to Obtain a Signed Rights Label (SRL) for Digital Content in a Digital Rights Management System;\u201d U.S. patent application Ser. No. 10\/185,527 filed Jun. 28, 2002, now U.S. Pat. No. 7,353,402, entitled \u201cObtaining a Signed Rights Label (SRL) for Digital Content and Obtaining a Digital License Corresponding to the Content Based on the SRL in a Digital Rights Management System.\u201d","This invention relates to digital rights management systems. More particularly, the invention relates to plug-in architectures for pipelines in digital rights management systems.","Digital rights management and enforcement is highly desirable in connection with digital content such as digital audio, digital video, digital text, digital data, digital multimedia, etc., where such digital content is to be distributed to one or more users. Typical modes of distribution include tangible devices such as a magnetic (floppy) disk, a magnetic tape, an optical (compact) disk (CD), etc., and intangible media such as an electronic bulletin board, an electronic network, the Internet, etc. Upon being received by the user, such user renders or \u2018plays\u2019 the digital content with the aid of an appropriate rendering device such as a media player on a personal computer or the like.","In one scenario, a content owner or rights-owner such as an author, a publisher, a broadcaster, etc., wishes to distribute such digital content to each of many users or recipients in exchange for a license fee or some other consideration. In such scenario, then, the content may be a song, an album of songs, a movie, etc., and the purpose of the distribution is to generate the license fees. Such content owner, given the choice, would likely wish to restrict what the user can do with such distributed digital content. For example, the content owner would like to restrict the user from copying and re-distributing such content to a second user, at least in a manner that denies the content owner a license fee from such second user.","In addition, the content owner may wish to provide the user with the flexibility to purchase different types of use licenses at different license fees, while at the same time holding the user to the terms of whatever type of license is in fact purchased. For example, the content owner may wish to allow distributed digital content to be played only a limited number of times, only for a certain total time, only on a certain type of machine, only on a certain type of media player, only by a certain type of user, etc.","In another scenario, a content developer, such as an employee in an organization, wishes to distribute such digital content to one or more other employees in the organization or to other individuals outside the organization, but would like to keep others from rendering the content. Here, the distribution of the content is more akin to organization-based content sharing in a confidential or restricted manner, as opposed to broad-based distribution in exchange for a license fee or some other consideration. In such scenario, then, the content may be a document presentation, spreadsheet, database, email, or the like, such as may be exchanged within an office setting, and the content developer may wish to ensure that the content stays within the office setting and is not rendered by non-authorized individuals, such as for example competitors or adversaries. Again, such content developer wishes to restrict what a recipient can do with such distributed digital content. For example, the content owner would like to restrict the user from copying and re-distributing such content to a second user, at least in a manner that exposes the content outside the bounds of individuals who should be allowed to render the content.","In addition, the content developer may wish to provide various recipients with different levels of rendering rights. For example, the content developer may wish to allow protected digital content to be viewable and not printable with respect to one class of individual, and viewable and printable with respect to another class of individual.","However, and in either scenario, after distribution has occurred, such content owner\/developer has very little if any control over the digital content. This is especially problematic in view of the fact that practically every personal computer includes the software and hardware necessary to make an exact digital copy of such digital content, and to download such exact digital copy to a write-able magnetic or optical disk, or to send such exact digital copy over a network such as the Internet to any destination.","Of course, as part of a transaction wherein the content is distributed, the content owner\/developer may require the user\/recipient of the digital content to promise not to re-distribute such digital content in an unwelcome manner. However, such a promise is easily made and easily broken. A content owner\/developer may attempt to prevent such re-distribution through any of several known security devices, usually involving encryption and decryption. However, there is likely very little that prevents a mildly determined user from decrypting encrypted digital content, saving such digital content in an un-encrypted form, and then re-distributing same.","For many reasons, DRM server technology is dynamic. That is, as technology develops over time, or as new threats to the security of the digital content emerge, different approaches tend to be used to perform certain tasks to provide particular services. Frequently, the provision of a particular DRM service involves the performance of a number to separate tasks. However, from time to time, a provider might wish to perform only one or a few tasks differently. The provider and the user typically would prefer that the system as a whole be disrupted as little as possible. Additionally, due to cost and other constraints, different users of such DRM servers desire or require systems that perform differently. Consequently, it would be advantageous if systems and methods were available whereby only selected tasks within the provision of a digital rights management service could be changed in a modular fashion without the need to modify the entire service provision program.","Also, because a typical DRM installation can provide a number of digital rights management services such as publishing, licensing, federation services, enrollment services, etc., it is desirable that these services be provided in a manner that enables the provider\/administrator of the installation to maintain the system as efficiently as possible. For example, the administrator might not want to have to upgrade the publishing service every time a change is made to the licensing component, and vice versa. Consequently, it would be advantageous if systems were available to provide these services independently of one another. There is a need in the art, therefore, for a modular approach for providing a plurality of DRM services independently of one another. Such approaches would be particularly advantageous if they enabled componentization of key business logic so that third parties could extend and modify DRM functionality and business logic of the platform.","The invention provides secure server plug-in architectures for digital rights management systems. A digital rights management server according to the invention is based on a pipeline architecture wherein each of a plurality of digital rights management services is performed in a respective pipeline, and the respective pipelines are independent of one another. Such services can include publishing and licensing rights managed digital content. Each pipeline includes a service program that provides a processing framework for performing a digital rights management service, and a plurality of plug-in components, each of which performs a respective task associated with the digital rights management service.","A DRM system provider can provide the service programs, and a plurality of digital rights management plug-in options, each of which is associated with a respective plug-in component. Based on selections made by the recipient of the installation, desired plug-in components can be integrated into the processing framework according to a respective predefined set of interface rules.","The plurality of plug-in components can include one or more extension plug-in components that perform their respective tasks based on the occurrence of certain prescribed events. An extension plug-in component can be adapted to halt processing of the service program. The plurality of plug-in components can also include one or more asynchronous plug-in components that perform their respective tasks after the main pipeline processing for the request has completed.","Exemplary Computing Device",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1"},"Although not required, the invention can be implemented via an application programming interface (API), for use by a developer, and\/or included within the network browsing software which will be described in the general context of computer-executable instructions, such as program modules, being executed by one or more computers, such as client workstations, servers, or other devices. Generally, program modules include routines, programs, objects, components, data structures and the like that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), automated teller machines, server computers, hand-held or laptop devices, multi-processor systems, microprocessor-based systems, programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1","b":["100","100","100","100"]},"With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus (also known as Mezzanine bus).","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CDROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk , such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in  provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . A graphics interface , such as Northbridge, may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU, or host processing unit , and assumes responsibility for accelerated graphics port (AGP) communications. One or more graphics processing units (GPUs)  may communicate with graphics interface . In this regard, GPUs  generally include on-chip memory storage, such as register storage and GPUs  communicate with a video memory . GPUs , however, are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface , which may in turn communicate with video memory . In addition to monitor , computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","One of ordinary skill in the art can appreciate that a computer  or other client device can be deployed as part of a computer network. In this regard, the present invention pertains to any computer system having any number of memory or storage units, and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment, having remote or local storage. The present invention may also apply to a standalone computing device, having programming language functionality, interpretation and execution capabilities.","Distributed computing facilitates sharing of computer resources and services by direct exchange between computing devices and systems. These resources and services include the exchange of information, cache storage, and disk storage for files. Distributed computing takes advantage of network connectivity, allowing clients to leverage their collective power to benefit the entire enterprise. In this regard, a variety of devices may have applications, objects or resources that may interact to implicate authentication techniques of the present invention for trusted graphics pipeline(s).",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 2","FIG. 2"],"b":["10","10","110","110","110","14","10","110"],"i":["a","b","a","b","c"]},"It can also be appreciated that an object, such as , may be hosted on another computing device  or . Thus, although the physical environment depicted may show the connected devices as computers, such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs, televisions, MP3 players, etc., software objects such as interfaces, COM objects and the like.","There are a variety of systems, components, and network configurations that support distributed computing environments. For example, computing systems may be connected together by wireline or wireless systems, by local networks or widely distributed networks. Currently, many of the networks are coupled to the Internet, which provides the infrastructure for widely distributed computing and encompasses many different networks.","In home networking environments, there are at least four disparate network transport media that may each support a unique protocol such as Power line, data (both wireless and wired), voice (e.g., telephone) and entertainment media. Most home control devices such as light switches and appliances may use power line for connectivity. Data Services may enter the home as broadband (e.g., either DSL or Cable modem) and are accessible within the home using either wireless (e.g., HomeRF or 802.11b) or wired (e.g., Home PNA, Cat 5, even power line) connectivity. Voice traffic may enter the home either as wired (e.g., Cat 3) or wireless (e.g., cell phones) and may be distributed within the home using Cat 3 wiring. Entertainment media may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also emerging as digital interconnects for clusters of media devices. All of these network environments and others that may emerge as protocol standards may be interconnected to form an intranet that may be connected to the outside world by way of the Internet. In short, a variety of disparate sources exist for the storage and transmission of data, and consequently, moving forward, computing devices will require ways of protecting content at all portions of the data processing pipeline.","The Internet commonly refers to the collection of networks and gateways that utilize the TCP\/IP suite of protocols, which are well-known in the art of computer networking. TCP\/IP is an acronym for \u201cTransport Control Protocol\/Interface Program.\u201d The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over the networks. Because of such wide-spread information sharing, remote networks such as the Internet have thus far generally evolved into an open system for which developers can design software applications for performing specialized operations or services, essentially without restriction.","Thus, the network infrastructure enables a host of network topologies such as client\/server, peer-to-peer, or hybrid architectures. The \u201cclient\u201d is a member of a class or group that uses the services of another class or group to which it is not related. Thus, in computing, a client is a process, i.e., roughly a set of instructions or tasks, that requests a service provided by another program. The client process utilizes the requested service without having to \u201cknow\u201d any working details about the other program or the service itself. In a client\/server architecture, particularly a networked system, a client is usually a computer that accesses shared network resources provided by another computer e.g., a server. In the example of , computers , , etc. can be thought of as clients and computer , , etc. can be thought of as the server where server , , etc. maintains the data that is then replicated in the client computers , , etc.","A server is typically a remote computer system accessible over a remote network such as the Internet. The client process may be active in a first computer system, and the server process may be active in a second computer system, communicating with one another over a communications medium, thus providing distributed functionality and allowing multiple clients to take advantage of the information-gathering capabilities of the server.","Client and server communicate with one another utilizing the functionality provided by a protocol layer. For example, Hypertext-Transfer Protocol (HTTP) is a common protocol that is used in conjunction with the World Wide Web (WWW). Typically, a computer network address such as a Universal Resource Locator (URL) or an Internet Protocol (IP) address is used to identify the server or client computers to each other. The network address can be referred to as a Universal Resource Locator address. For example, communication can be provided over a communications medium. In particular, the client and server may be coupled to one another via TCP\/IP connections for high-capacity communication.","Thus,  illustrates an exemplary networked or distributed environment, with a server in communication with client computers via a network\/bus, in which the present invention may be employed. In more detail, a number of servers , , etc., are interconnected via a communications network\/bus , which may be a LAN, WAN, intranet, the Internet, etc., with a number of client or remote computing devices , , , , , etc., such as a portable computer, handheld computer, thin client, networked appliance, or other device, such as a VCR, TV, oven, light, heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to process, store or render secure content from a trusted source.","In a network environment in which the communications network\/bus  is the Internet, for example, the servers  can be Web servers with which the clients , , , , , etc. communicate via any of a number of known protocols such as HTTP. Servers  may also serve as clients , as may be characteristic of a distributed computing environment. Communications may be wired or wireless, where appropriate. Client devices  may or may not communicate via communications network\/bus , and may have independent communications associated therewith. For example, in the case of a TV or VCR, there may or may not be a networked aspect to the control thereof. Each client computer  and server computer  may be equipped with various application program modules or objects  and with connections or access to various types of storage elements or objects, across which files may be stored or to which portion(s) of files may be downloaded or migrated. Thus, the present invention can be utilized in a computer network environment having client computers , , etc. that can access and interact with a computer network\/bus  and server computers , , etc. that may interact with client computers , , etc. and other devices  and databases .","Publishing Digital Content",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 3"},"In a preferred embodiment of the invention, three entities in particular can be employed to publish secure digital content: a content preparation application  that executes on the client  and prepares the content for publishing, a digital rights management (DRM) applications program interface (API)  that also resides on the client device , and a DRM server  that is communicatively coupled to the client  via a communication network . In a preferred embodiment of the invention, the communication network  includes the Internet, though it should be understood that the communication network  could be any local or wide area network, such as a proprietary intranet, for example.","The content preparation application  can be any application that produces digital content. For example, the application  can be a word processor or other publisher that produces digital text files, digital music, video, or other such content. The content could also include streamed content, such as streamed audio\/video of a live or taped event, or example. According to the invention, the content preparation application invites the user thereof to encrypt the content using a key that the user provides. The application  uses the key to encrypt the digital content, thus forming an encrypted digital content file . The client application also invites the user to provide rights data for the digital content file . The rights data includes a respective identity for each entity that has rights in the digital content. Such an entity can be, for example, an individual, a class of individuals, or a device. For each such entity, the rights data also includes a list of rights that that entity has in the content, and any conditions that may be imposed on any or all of those rights. Such rights can include the right to read, edit, copy, print, etc, the digital content. Additionally, rights can be inclusive or exclusive. Inclusive rights indicate that a specified user has a specified right in the content (e.g., the user can edit the digital content). Exclusive rights indicate that a specified user has all rights in the content except those specified (e.g., the user can do anything with the digital content except copy it).","According to one embodiment of the invention, the client API  can pass the encrypted digital content and the rights data to the DRM server . Using a process that is described in detail below, the DRM server  determines whether it can enforce the rights that the user has assigned and, if so, the DRM server  signs the rights data to form a signed rights label (SRL) . In general, however, any trusted entity can sign the rights data, preferably using a key trusted by the DRM server . For example, a client can sign the rights data using a key provided to it by the DRM server .","The rights label  can include data representing the rights description, the encrypted content key, and the digital signature over the rights description and the encrypted content key. If the DRM server is signing the right label, it passes the signed rights label  back to the client through the client API , which stores the signed rights label  on the client device . The content preparation application  then associates the signed rights label  with the encrypted digital content file . For example, the SRL  can be concatenated with the encrypted digital content file to form a rights managed content file . In general, however, the rights data need not be combined with the digital content. For example, the rights data could be stored in a known location, and a reference to the stored rights data could be combined with the encrypted digital content. The reference could include an identifier that indicates where the rights data is stored (e.g., the data store that contains the rights data), and an identifier that corresponds to that particular rights data at that particular storage location (e.g., that identifies the file that contains the particular rights data of interest). The rights managed content  can then be delivered to anyone anywhere, and only those entities that have rights to consume the content can consume the content, and only in accordance with the rights they were assigned.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 4A","b":"400"},"At step , the application  generates a content key (CK) that is used to encrypt the digital content. Preferably, the content key (CK) is a symmetric key, though, in general, any key can be used to encrypt the digital content. Symmetric key algorithms, which are sometimes referred to as \u201csecret key\u201d algorithms, use the same key to decrypt a message as they do to encrypt the message. For that reason, it is preferred that (CK) be kept secret. Sharing (CK) between sender and receiver should be done very carefully to avoid unauthorized interception of such (CK). Because (CK) is shared between both the encryptor and the decryptor, (CK) is preferably communicated before any encrypted messages are transmitted.","Several symmetric key generation algorithms are well known in the art. In a preferred embodiment, the Data Encryption Standard (DES) is employed, though it should be understood that any symmetric algorithm could be used. Examples of such symmetric key algorithms include, without limitation, Triple-DES, the International Data Encryption Algorithm (IDEA), Cast, Cast-128, RC4, RC5, and SkipJack.","At step , the application  encrypts the digital content with the symmetric content key (CK) to form encrypted digital content , which may be written using the notation (CK(content)). The author using the application  can also generate rights data associated with the digital content. The rights data can include a list of entities that will be entitled to consume the content, and the specific rights that each of the entities possesses with respect to the content, along with any conditions that may be imposed on those rights. Such rights can for example include viewing the content, printing the content, etc. The application  provides the rights data to the API . An example of rights data in XML\/XrML format is attached hereto as Appendix 1.","At step , the API  generates a second encryption key (DES1), which is used to encrypt the content key (CK). Preferably, (DES1) is also a symmetric key. At step , the API  encrypts (CK) with (DES1) to result in (DES1(CK)). At step , the API  discards (CK), with the result being that (CK) can now be obtained only by decrypting (DES1(CK)). To ensure that (CK(content)) is protected to a central DRM server  and that all \u201clicense requests\u201d for the content are done centrally in accordance with the rights data, the API , at step , contacts the provided DRM server  and retrieves the public key (PU-DRM) thereof. At step , the API  encrypts (DES1) with (PU-DRM) to result in (PU-DRM (DES1)). Thus, (CK) can be protected to (PU-DRM)) to ensure that the DRM server  is the only entity that will be able to get access to (CK), as is required to decrypt (CK(content)). At step , the API  encrypts the rights data (i.e., the list of authorized entities and the respective rights and conditions associated with each authorized entities in the list) with (DES1) to result in (DES1(rightsdata)).","In an alternative embodiment, (CK) can be used to directly encrypt the rights data to result in (CK(rightsdata)), and thereby forego the use of (DES1) completely. However, using (DES1) to encrypt the rights data allows such (DES1) to conform to any particular algorithm that might be amenable to the DRM server, whereas (CK) might be specified by an entity independent from the DRM server and might not be as amenable thereto.","At step , the content protection application  can submit (PU-DRM(DES1)) and (DES1(rightsdata)) to the DRM server  as a rights label for signing. Alternatively, the client itself can sign the rights data. If the rights data is being submitted to the server for signing, then, at step , the DRM server  accesses the rights data and verifies that it can enforce the rights and conditions in the submitted rights label. To verify that it can enforce the rights data, the DRM server  applies (PR-DRM) to (PU-DRM(DES1)) to result in (DES1), and then applies (DES1) to (DES1(rightsdata)) to result in the rights data in the clear. The server  can then do any policy checks to verify that the users, rights, and conditions specified in the rights data are within any policy enforced by the server . The server  signs the originally submitted rights label including (PU-DRM(DES1)) and (DES1(rightsdata)) to result in the signed rights label (SRL) , where the signature is based on the private key of the DRM server  (PR-DRM), and returns the SRL  back to the API , which then presents the returned SRL  to the client application .","The SRL  is a digitally signed document, which makes it tamper-resistant. Additionally, the SRL  is independent of the actual key type and algorithm used to encrypt the content but maintains the strong 1-1 relation to the content it is protecting. Referring now to , in one embodiment of the present invention, the SRL  may include information on the content that is the basis of the SRL , including perhaps an ID of the content; information on the DRM server that signs the SRL , including (PU-DRM(DES1)) and referral information such as a URL for locating the DRM server on a network and fall-back information if the URL fails; information describing the SRL  itself; (DES1(rightsdata)): (DES1(CK)); and S (PR-DRM), among other things. A sample SRL  in XML\/XrML is attached hereto as Appendix 2.","By ensuring that a trusted entity signs the rights data to create a signed rights label , the DRM server is asserting that it will issue licenses for the content in accordance with the terms set forth by the publisher as described in the rights data of the rights label . As should be appreciated, a user is required to obtain a license to render the content, especially inasmuch as the license contains the content key (CK). When a user wants to obtain a license for the encrypted content, the user can present a license request including the SRL  for the content and a certificate verifying the user's credentials to the DRM server  or other license issuing entity. The license issuing entity can then decrypt (PU-DRM(DES1)) and (DES1(rightsdata)) to produce the rights data, list all the rights granted by the author (if any) to the license requesting entity, and construct a license with only those specific rights.","Preferably, upon the application  receiving the SRL , such application  concatenates the signed rights label  with the corresponding (CK(content))  to form rights managed digital content. Alternatively, the rights data can be stored in a known location, with a reference to that location provided with the encrypted digital content. Thus, a rendering application that is DRM-enabled can discover the signed rights label  via the piece of content the rendering application is attempting to render. This discovery triggers the rendering application to initiate a license request against the DRM licensing server . Publishing application  can store a URL to the DRM licensing server , for example, or the DRM licensing server  can embed its own URL as a piece of metadata into the rights label before digitally signing it, so that the DRM client API  called by the rendering application can identify the correct DRM licensing server . Preferably, a unique identifier, such as a globally unique identifier (GUID), for example, is put into the rights label before it is signed.","In a preferred embodiment of the invention, simple object access protocol (SOAP) can be used for communication between the content protection application  or the rendering application and the DRM server . Additionally, API libraries, such as API , can be provided so that applications, such as application , are not required to implement the client side of the DRM protocol, but rather can just make local API calls. Preferably, XrML, an XML language, is used for describing rights descriptions, licenses, and rights labels for digital content, though it should be understood that any suitable format can be uses for the rights description and other data.","Obtaining a License for the Published Content",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 5","b":["308","308"]},"One way for the application  to consume the rights managed content  is for the client API  to forward the signed rights label  of the rights managed content  to the DRM server  via the communication network . The location of the DRM server  can be found, for example, in the referral information in the SRL . In such an embodiment, the DRM licensing server , via a process that is described in detail below, can use the rights description in the rights label to determine whether it can issue a license and, if so, to derive the rights description to include with the license. As described above, the rights label  contains the content key (CK) encrypted according to the public key of the DRM server  (PU-DRM) (i.e., (PU-DRM(CK))). In the process of issuing a license, the DRM server  securely decrypts this value to obtain (CK). It then uses the public key (PU-ENTITY) in the public key certificate that is passed up in the license request to re-encrypt (CK) (i.e., (PU-ENTITY(CK))). The newly encrypted (PU-ENTITY(CK)) is what the server  places into the license. Thus, the license can be returned to the caller without risk of exposing (CK), since only the holder of the associated private key (PR-ENTITY) can recover (CK) from (PU-ENTITY(CK)). The client API  then uses (CK) to decrypt the encrypted content to form decrypted digital content . The client application  can then use the decrypted digital content  according to the rights that are provided in the license.","Alternatively, a client, such as the publishing client, for example, can issue its own license to consume the content. In such an embodiment, a secured process can be run on the client computer that provides the client with the key(s) necessary to decrypt the digital content under appropriate circumstances.",{"@attributes":{"id":"p-0074","num":"0073"},"figref":"FIGS. 6A and 6B","b":["600","600"]},"At step , a license issuing entity, such as a DRM server, for example, receives a license request. Preferably, a license request includes either a public key certificate or an identity for each of one or more requested licensees. The SOAP protocol for a preferred embodiment of a license request is:",{"@attributes":{"id":"p-0076","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<soap:Envelope xmlns:xsi=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema-"},{"entry":"instance\u201d"},{"entry":"xmlns:xsd=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema\u201d"},{"entry":"xmlns:soap=\u201chttp:\/\/schemas.xmlsoap.org\/soap\/envelope\/\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<soap:Body>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<AcquireLicense xmlns=\u201chttp:\/\/xxxx.com\/PublishingService\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<RequestParams>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<AcquireLicenseParams>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<LicenseeCerts>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<String >string<\/String>"]},{"entry":[{},"<String >string<\/String>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/LicenseeCerts>"]},{"entry":[{},"<RightsSpecification>string<\/RightsSpecification>"]},{"entry":[{},"<RightsOfferID>string<\/RightsOfferID>"]},{"entry":[{},"<ApplicationData>string<\/ApplicationData>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/AcquireLicenseParams>"]},{"entry":[{},"<AcquireLicenseParams>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/AcquireLicenseParams>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/RequestParams>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/AcquireLicense>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/soap:Body>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/soap:Envelope>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"At step , the requesting entity (i.e., the entity making the license request) is authenticated. According to one embodiment of the invention, the license issuing entity can be configured to use protocol (e.g., challenge-response) authentication to determine the identity of the requesting entity, or it can be configured to not require authentication of the requesting entity (also known as \u201callowing anonymous authentication\u201d). Where authentication is required, any type of authentication scheme may be used (e.g., the challenge-response scheme mentioned above, a user-id-and-password scheme such as MICROSOFT.NET, PASSPORT, WINDOWS authorization, x509, etc.). Preferably, anonymous authentication is allowed, as well as supporting any protocol authentication scheme supported by integrated information systems. The result of the authentication step will be an identity, such as an \u201canonymous\u201d identity (for anonymous authentication), or a personal account identity, for example. If the license request cannot be authenticated for any reason, an error is returned and no license is granted.","At step , the authenticated entity is authorized\u2014i.e., it is determined whether the entity authenticated at step  is allowed to request a license (either for itself or on behalf of another entity). Preferably, the license issuing entity stores a list of entities that are allowed (or not allowed) to request a license. In a preferred embodiment, an identity in this list of identities is the identity of the entity making the request, rather then the identity of the entity for whom a license is being requested, though it could be either. For example, a personal account identity may not be allowed to directly make a license request, but a trusted server process may make a license request on behalf of such an entity.","According to the invention, the license request can include either a public key certificate or an identity for each potential licensee. If a license is requested for only one licensee, only one certificate or identity is named. If a license is requested for a plurality of licensees, a certificate or an identity can be named for each potential licensee.","Preferably, the license issuing entity has a public key certificate for each valid licensee. However, an application  may want to generate a license for a given user, but the application  might not have access to the public key certificate for that user. In such a situation, the application  can specify the identity of the user in the license request and, as a result, the license issuing entity can invoke a registered certificate plug-in component that performs a lookup in a directory service and returns the appropriate user's public key certificate.","If, at step , the issuing entity determines that the public key certificate is not included in the license request, then the issuing entity uses the specified identity to perform a lookup in a directory service or database for the appropriate public key certificate. If, at step , the issuing entity determines that the certificate is in the directory, then, at step , the certificate is retrieved. In a preferred embodiment, a certificate plug-in is used to retrieve public key certificates from a directory service over by way of a directory access protocol. If a certificate cannot be found for a given potential licensee, either in the request or in the directory, then the license server does not generate a license for that potential licensee and, at step , an error is returned to the requesting entity.","Assuming the license issuing entity has a public key certificate for at least one potential licensee, then, at step , the issuing entity validates the trust of the licensee certificates. Preferably, the issuing entity is configured with a set of trusted certificate issuer certificates, and it determines whether the issuer of the licensee certificate is in the list of trusted issuers. If, at step , the issuing entity determines that the issuer of the licensee certificate is not in the list of trusted issuers, then the request fails for that licensee, and an error is generated at step . Thus, any potential licensee whose certificate is not issued by a trusted issuer would not receive a license.","Additionally, the issuing entity preferably performs digital signature validation on all entities in the certificate chain going from the trusted issuer certificates to the individual licensee public key certificates. The process of validating the digital signatures in a chain is a well-known algorithm. If the public key certificate for a given potential licensee does not validate, or a certificate in the chain does not validate, the potential licensee is not trusted, and a license, therefore, is not issued to that potential licensee. Otherwise, at step , a license can issue. The process repeats at step  until all entities for which a license has been requested have been processed.","As shown in , the license issuing entity proceeds to validate the signed rights label  that is received in the license request. In a preferred embodiment, the issuing entity can use a rights label plug-in, and a back-end database to store on the server a master copy of every rights label signed by the issuing entity. The rights labels are identified by the GUID placed into them at publication. At license time (at step ), the issuing entity parses the rights label input in the license request and retrieves its GUID. It then passes this GUID to the rights label plug-in, which issues a query against the database to retrieve a copy of the master rights label. The master rights label could be more up to date than the copy of the rights label sent in the license request, and it will be the rights label used in the request in the steps below. If no rights label is found in the database based upon the GUID, the issuing entity checks its policy, at step , to determine whether it is still allowed to issue a license based on the rights label in the request. If the policy does not allow this, the license request will fail at step , and an error will be returned to the API  at step .","At step , the license issuing entity validates the rights label . The digital signature on the rights label is validated and, if the license issuing entity is not the issuer of the rights label (the entity that signed it), then the license issuing entity determines whether the issuer of the rights label is another trusted entity (e.g., an entity with which the license issuing entity is enabled to share key material). If the rights label does not validate, or it is not issued by a trusted entity, then the license request fails at step , and an error will be returned to the API  at step .","After all the validations have occurred, the license issuing entity translates the rights label  into a license for each of the approved licensees. At step , the license issuing entity generates a respective rights description for the license to be issued to each licensee. For each licensee, the issuing entity evaluates the identity named in the public key certificate of that licensee against the identities named in the rights description in the rights label. The rights description assigns to every right or set of rights, a set of identities that can exercise that right or set of rights in a license. For every right or set of rights to which this licensee's identity is associated, that right or set of rights is copied into a new data structure for the license. The resulting data structure is the rights description in the license for the particular licensee. As part of this process, the license issuing entity evaluates any preconditions that might be associated with any of the rights or sets of rights in the rights description of the rights label. For example, a right may have a time precondition associated with it that limits the license issuing entity from issuing a license after a specified time. In this case the issuing entity would need to check the current time and, if it is past the time specified in the precondition, then the issuing entity would not be able to issue that right to the licensee even if that licensee's identity were associated with that right.","At step , the issuing entity takes (PU-DRM(DES1)) and (DES1(CK)) from the rights label  and applies (PR-DRM) to obtain (CK). The issuing entity then re-encrypts (CK) using (PU-ENTITY) the licensee's public key certificate to result in (PU-ENTITY(CK)). At step , the issuing entity concatenates the generated rights description with (PU-ENTITY(CK)) and digitally signs the resulting data structure using (PR-DRM). This signed data structure is the license for this particular licensee.","When, at step , the issuing entity determines that there are no more licenses to generate for the particular request, it will have generated zero or more licenses. The generated licenses are returned to the requesting entity, at step , along with the certificate chain associated with those licenses (e.g., the server's own public key certificate as well as the certificate that issued its certificate and so on).","The SOAP protocol for a preferred embodiment of a license response is as follows:",{"@attributes":{"id":"p-0090","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<soap:Envelope xmlns:xsi=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema-"},{"entry":"instance\u201d"},{"entry":"xmlns:xsd=\u201chttp:\/\/www.w3.org\/2001\/XMLSchema\u201d"},{"entry":"xmlns:soap=\u201chttp:\/\/schemas.xmlsoap.org\/soap\/envelope\/\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<soap:Body>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<AcquireLicenseResponse xmlns=\u201chttp:\/\/xxxx.com\/"]},{"entry":[{},"LicensingService\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<AcquireLicenseResult>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<AcquireLicenseResponse>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<CertificateChain>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<String>string<\/String>"]},{"entry":[{},"<String>string<\/String>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/CertificateChain>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/AcquireLicenseResponse>"]},{"entry":[{},"<AcquireLicenseResponse>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/AcquireLicenseResponse>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},". . ."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/AcquireLicenseResult>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/AcquireLicenseResponse>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"210pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/soap:Body>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/soap:Envelope>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In a preferred embodiment of a system according to the invention, a plurality of licensor keys can be used. In such an embodiment, the content key (CK) that travels encrypted through the rights label  and into the license can actually be any arbitrary data. One particularly useful variation is to use a plurality of separate, encrypted, content keys (CK) associated, respectively, with different rights or different principals in the rights description. For example, the digital version of songs on an album could all be encrypted with different keys (CK). These keys (CK) would be included in the same rights label, but one principal may have the right to play one of the songs (e.g., he might only have rights to get the one key in his license), while a second principal might have rights to play all the songs (she would have rights to get all keys in her license).","Preferably, a system according to the invention enables publishing applications\/users to name groups or classes of licensees in a rights label . In such an embodiment, the license issuing entity will evaluate any groups\/classes named in the rights label to determine if the current licensee identity is a member of those groups classes. If membership in a named group\/class is found, the issuing entity could add the rights or set of rights associated with the group\/class to the rights description data structure used for the license.","In a preferred embodiment of the invention, the publish and license protocol interfaces in the DRM server support authentication and authorization of the calling application or user, and the administrative console for the DRM server allows an administrator to generate an access control list for both the licensing and publishing interfaces. This enables the customer of the server to apply policy over which users\/applications are allowed to either publish, license, or both.","Modifying or Republishing the Signed Rights Label ","In one embodiment of the present invention, the SRL  can be \u201crepublished\u201d if the user of the content has been granted sufficient permission to do so. That is, if allowed, the user may alter rights data within the SRL . Notably, such permission to alter the rights data should be granted sparingly and judiciously, especially inasmuch as a user with permission to alter the rights data can essentially grant itself broad rights with regard to the associated content. Conceivably, such a user could even grant itself the right to expose the content and forward same to the world.","Here, permission to alter is signified by including within the rights data in the SRL  an indication that a particular user or class of users can in fact alter or \u2018republish\u2019 the rights data and rights label . When the DRM server  receives such an SRL  with such permission in connection with a request for a license, the DRM server  includes within the requested license for the user the symmetric key (DES1) encrypted according to the public key of the user (i.e., PU-ENTITY) to result in (PU-ENTITY(DES1)).","Thus, to edit the rights data within the SRL , and turning now to , the user retrieves (PU-ENTITY(DES1)) from the license (step ), applies (PR-ENTITY) thereto to result in (DES1) (step ), retrieves (DES1(rightsdata)) from the SRL  (step ), and applies (DES1) thereto to result in the rights data (step ). Thereafter, the user alters the rights data as desired (step ), and submits the altered rights data to the DRM server  in the manner set forth in connection with  to obtain a signed rights label  (step ). Of course, here, the signed rights label  is actually a republished SRL , and accordingly once the SRL  is received (step ), the user strips off the original SRL  concatenated to the associated content (step ) and then concatenates the republished SRL  to such content (step ).","Thus, and as may be appreciated, republishing an SRL  enables a user to update the rights data in the SRL , including rights, conditions, and users, without having to alter the associated content. In particular, republishing does not require re-encrypting the associated content with a new (CK). Also, republishing does not require generating a new SRL from scratch, especially inasmuch as the original SRL  has many items therein that can be copied to the new SRL .","Self-Publishing the Signed Rights Label ","In one embodiment of the present invention, the SRL  may be signed by the requesting user itself. Accordingly, the user need not contact the DRM server  to obtain an SRL  for an associated piece of content. As a result, self-publishing may also be referred to as off-line publishing. In such embodiment, a user may be required to contact a DRM server  to request a license based on such a self-published SRL . It should also be understood that a publishing entity may be enabled to issue its own licenses.","In particular, and referring now to , in the embodiment, a user is first provisioned to self-publish by receiving from a DRM server  a DRM certificate  including a public key (PU-CERT) and a corresponding private key (PR-CERT) encrypted according to the public key of the user (PU-ENTITY) to result in (PU-ENTITY(PR-CERT)). The certificate should be signed by the private key of the DRM server  (PR-DRM) so that such DRM server  can verify same, as will be discussed in more detail below. As may be appreciated, the DRM certificate  authorizes the user to self-publish. As may also be appreciated, the key pair (PU-CERT, PR-CERT) are separate from (PU-ENTITY, PR-ENTITY), and are employed specifically for self-publishing. Note that the key pair (PU-CERT, PR-CERT) may be dispensed with, in which case the DRM certificate  includes only the public key of the user (PU-ENTITY) and is signed by the private key of the DRM server  (PR-DRM) so that such DRM server  can verify same.","Self-publishing differs from publishing as shown in  in that the user essentially takes the place of the DRM server  with regard to steps performed thereby. Significantly, the user signs the submitted rights label including (PU-DRM(DES1)) and (DES1(rightsdata)) with (PR-CERT) as obtained from the DRM certificate  (i.e., S (PR-CERT)) to result in the signed rights label (SRL) . As should be appreciated, the user obtains (PR-CERT) from the DRM certificate  by obtaining (PU-ENTITY(PR-CERT)) from such DRM certificate  and applying (PR-ENTITY) thereto. Note, though, that the user cannot verify that the DRM server  can enforce the rights in the submitted rights label, especially inasmuch as the user does not have (PR-DRM) to apply to (PU-DRM(DES1)). Accordingly, the DRM server  itself should perform the verification at the time a license is requested based on the self-published SRL .","Once the user self-publishes the SRL , the user concatenates such self-published SRL  and the DRM certificate  employed to produce same to the content, and such content with SRL  and DRM certificate  is distributed to another user. Thereafter, the other user requests and obtains a license for the content from the DRM server  in substantially the same manner as shown in . Here, though, the license-requesting user submits to the DRM server  both the self-published SRL  and the DRM certificate  as concatenated to the content. The DRM server  then verifies S (PR-DRM) in the DRM certificate  based on the corresponding (PU-DRM), and obtains (PU-CERT) from the DRM certificate . The DRM server  then verifies S (PR-CERT) in the SRL  based on the obtained (PU-CERT), and continues as before. Note, though, that since the user did not verify that the DRM server  can enforce the rights in the SRL , and as was set forth above, the DRM server  itself should perform the verification at this time.","Rights Template","As set forth above, a user is provided with the freedom to create most any variety or sort of rights data in a rights label by defining users or classes of users, defining rights for each defined user or class of users, and then defining any use conditions. However, and significantly, it may be cumbersome and repetitive to repeatedly define the rights data for multiple rights labels, especially when the same users or classes of users, rights, and conditions are repeatedly defined for different pieces of content. Such a situation can for example occur in a corporate or office environment, where a user is repeatedly publishing different pieces of content that are to be shared with a particular defined team of users. In such a situation, then, and in one embodiment of the present invention, a rights template is created that the user can repeatedly employ in connection with creating rights labels, where the rights template already includes therein a pre-defined set of users or classes of users, pre-defined rights for each defined user or class of users, and pre-defined use conditions.","In one embodiment of the present invention, and turning now to , a rights template  has substantially the same rights data as would be in a rights label. However, since (DES1) is not known until content is published, the rights data cannot be encrypted according to such (DES1), as is the case in a rights label. In one embodiment of the present invention, then, the rights template  with the unencrypted rights data is submitted in the course of encrypting the rights data with (DES1) at step  of  to produce (DES1(rightsdata)). Of course, the rights data is retrieved from the submitted rights template  prior to being so encrypted.","It may or may not be the case that the DRM server  and the public key (PU-DRM) thereof are known at the time the rights template is constructed. Further, even if known, it may or may not be the case that there are more than one DRM servers , each having its own (PU-DRM). Nevertheless, in the case where the DRM server  and the public key (PU-DRM) thereof are known at the time the rights template is constructed, and in the case where only one DRM server  is employed, or only one DRM server  is to be employed in connection with the rights template , such rights template may also include therein information on the DRM server that is to sign a rights label resulting from the rights template , including the public key (PU-DRM) thereof. Although such (PU-DRM) appears in the SRL  as encrypting (DES1) to result in (PU-DRM(DES1)), it is again to be appreciated that (DES1) is not known until content is published, and therefore (PU-DRM) in the rights template  cannot encrypt such (DES1), as is the case in a rights label. In one embodiment of the present invention, then, the rights template  with the unencrypted (PU-DRM) is submitted in the course of encrypting (DES1) with (PU-DRM) at step  of  to produce (PU-DRM(DES1)). Of course, (PU-DRM) is retrieved from the submitted rights template  prior to being employed.","Also in the aforementioned case, other information on the DRM server that may be included in the rights template may also include referral information such as a URL for locating the DRM server on a network, and fall-back information if the URL fails. In any case, the rights template may also include information describing the rights template  itself, among other things. Note that the rights template  may also provide space for information relevant to the content that is to be published, such as information that appears in a rights label relevant to the content and\/or the encrypting keys (CK) and (DES1), although such space is not necessary if an instantiation of the rights template is not actually transformed into a right label.","Although the rights template  as thus far disclosed is primarily for the convenience of a user, it is also to be appreciated that in some circumstances, a user should not have unrestricted freedom to define rights data in a rights label, and a rights template  may be used to limit the scope or type of rights labels that can be created. For example, and especially in the case of a corporate or office environment, it may be pre-defined as policy that a particular user should always publish content to a particular class of users only, or that the user should never publish content to a particular class of user. In any case, and in one embodiment of the present invention, such policy is embodied as pre-defined rights data in one or more rights templates , and the user may be restricted to employing such rights templates to create rights labels when publishing content. Notably, a rights template or a group of rights templates made available to a user to specify publishing policy for the user may specify any particular type of publishing policy without departing from the spirit and scope of the present invention.","To specify a rights template  for a restricted user or the like, and turning now to , an administrator or the like in fact constructs the rights template  by defining the pre-defined rights data (step ), and defining any other data that may be necessary and appropriate, such as information relevant to a particular DRM server  (step ). Significantly, to effectuate the rights template for use by the restricted user or the like, the rights template  must be made official. That is, the rights template  must be recognizable as a rights template that the restricted user or the like may employ. Accordingly, in one embodiment of the present invention, the rights template as constructed by the administrator or the like is submitted to the DRM server  for signing thereby, where such signing makes the rights template official (step ).","Note that the signing DRM server  is the DRM server  whose information is in the rights template , if indeed such information is in fact present in the rights template . Note, also, that the DRM server  may sign the rights template  only upon making any necessary checks, or may sign without any checks at all. Note, finally, that the template signature S (PR-DRM-T) (where the\u2014T signifies that the signature is for the ORT ) from the DRM server should be based at least on the pre-defined rights data in the rights template , but may also be based on other information without departing from the spirit and scope of the present invention. As set forth below, the signature S (PR-DRM-T) will be incorporated into a rights label and will be verified in connection therewith, and accordingly whatever the signature is based on should also be incorporated into the rights label in an unaltered form.","Upon the DRM server  signing the rights template  and returning same to the administrator or the like, the administrator receives the signed and now official rights template  with S (PR-DRM-T) (step ) and forwards the official rights template (ORT)  to one or more users for use thereby (step ). Accordingly, for a user to publish content based on an ORT , the user retrieves the ORT  (step ), and constructs a rights label based on the ORT  (step ) by providing any information necessary, such as information on the content, appropriate key information, the rights data from the ORT  encrypted by (DES1) to result in (DES1(rightsdata)), and any other information from the ORT . Significantly, the user also includes with the rights label the signature S (PR-DRM-T) from the ORT .","Thereafter, and as before, the user submits the rights label to the DRM server  for signing (step ). Here, though, the DRM server  will not sign the submitted rights label unless S (PR-DRM-T) therein verifies. That is, the DRM server  enforces that the user must base the submitted rights label on an ORT  by refusing to sign the submitted rights label unless such submitted rights label includes a signature S (PR-DRM-T) from an ORT . In particular, the DRM server  retrieves such S (PR-DRM-T) and whatever information such signature is based on from the submitted rights label and then verifies such signature based on (PU-DRM). Note that the rights data in the submitted rights label is encrypted according to (DES1) (i.e., (DES1(rightsdata)) Accordingly the DRM server  must first obtain (DES1) and decrypt (DES1(rightsdata)) therewith, as set forth above in connection with  to be able to verify the signature based on the rights data in the submitted rights label.","Once verified, the DRM server  signs the submitted rights label with S (PR-DRM-L) to produce an SRL , as before (where the\u2014L signifies that the signature is for the SRL ). Here, S (PR-DRM-L) may replace S (PR-DRM-T), or may be in addition to such S (PR-DRM-T). If in addition, S (PR-DRM-L) may be based in part on S (PR-DRM-T). Note that (PR-DRM) may be employed to produce both S (PR-DRM-T) and S (PR-DRM-L), or that different (PR-DRM)s may be employed for each of S (PR-DRM-T) and S (PR-DRM-L). Upon the DRM server  signing the rights label and returning the SRL  to the user, the user receives the SRL  with S (PR-DRM-L) (step ) and proceeds to concatenate same to the content being published, as before.","If the signature S (PR-DRM-T) of the ORT  is based at least in part on the pre-defined rights data in the ORT , then such rights data as it appears in the SRL  (in DES1(rightsdata)) cannot be modified or varied. Otherwise, S (PR-DRM-T) will not verify. Nevertheless, in one embodiment of the present invention, the rights data in the ORT  can vary within prescribed rules that are also included with the ORT . For example, the rules may specify one of two sets of rights data to be included in an SRL , or may allow a selection from among a set of alternatives. As may be appreciated, the rules may be any particular rules set forth in any appropriate syntax without departing from the spirit and scope of the present invention. Here, the rules are interpreted by an appropriate rule interpreter for the user at the time the rights label is created. Although the rights data may vary, the rules do not likewise vary, and accordingly the template signature S (PR-DRM-T) for the ORT  is based at least in part on the rules and not on the rights data itself. As a result, the rules included with the ORT  must also be included with the SRL .","In one embodiment of the present invention, the pre-defined rights data in the ORT  is fixed and invariant in part and is variable and rule-driven in part, as set forth above. Here, the template signature S (PR-DRM-T) for the ORT  is based at least in part on the fixed part of the rules and on the rules for the variable part of the rights data.","As may be appreciated, an ORT  as possessed by a user may become dated or stale. That is, the ORT  through the rights data therein may reflect policy that has become out-of-date, irrelevant, or simply not applicable anymore. For example, one or more users or classes of users specified in the rights data of the ORT  may no longer exist within the policy environment, or a particular user or class of users specified in the rights data of the ORT  may no longer have the same rights within the policy environment. In such case, it may be that the administrator has issued a revised ORT  but that the user is still using a previous, stale version of the ORT .","In such a situation, then, and in one embodiment of the present invention, the DRM server  upon signing a submitted rights template  to create an ORT  retains a copy of the ORT , each ORT  has a unique identifying indicia, and each rights label constructed based on an ORT  includes the identifying indicia of such ORT  therein. Accordingly, upon receiving a submitted rights label such as in connection with , the DRM server  finds the identifying indicia of the ORT  in the rights label, retrieves the most up-to-date copy of such ORT  based on the found identifying indicia, removes the rights data from the submitted rights label, inserts the rights data from the retrieved ORT , and then signs the rights label based at least in part on the inserted rights data. Of course, the DRM server also performs any necessary encryption and decryption steps necessary and incumbent in the process as set forth, including decrypting and re-encrypting (DES1(rightsdata)). Note that if the DRM server is adapted to replace the rights data in a submitted rights label, such rights label and the ORT  from which such rights label is constructed need not necessarily include the rights data therein. Instead, the rights data need only be resident at the DRM server . However, including the rights data with the rights label and the ORT  from which such rights label is constructed could be useful for the user, and therefore may be useful in some situations.","Plug-in Architecture For DRM Pipelines","A typical DRM server and service platform according to the invention may include one or more high level DRM services such as licensing, publishing, enrollment, activation, certification, federation, and the like. According to the invention, the respective software systems that provide each of these services can be provided as \u201cpipelines\u201d that are designed in a modular fashion so that they can be individually installed in any combination, and can then be managed, enabled or disabled, authenticated or unauthenticated, etc. Each of the DRM services can be referred to as a pipeline because of the way they process requests from start to finish with various stages of processing along the way.","The pipelines work together to present a rich DRM platform, and, individually, each provides an important DRM service. Additionally, particular components of the DRM platform that encapsulate business logic (which can be important to a successful DRM server and service implementation) are shared across the DRM suite and are \u201cpluggable\u201d by third parties. Such an implementation provides the flexibility to both rapidly develop service solutions and offer customers a way to tailor software for their DRM needs.","Preferably, the Microsoft Internet Information Server (\u201cIIS\u201d) and ASP.net model are used for writing services. IIS is designed to deliver security for corporate intranets and the Internet. Additionally, IIS provides implementation of Secure Sockets Layer (SSL) protocol for secure communication and authentication with X.509 certificates, RSA Public Key Cipher, and a broad array of additional security features. ASP.net is a programming framework that enables the rapid development of powerful web applications and services. It is part of the Microsoft.NET platform, and provides an easy, scalable way to build, deploy, and run web applications that can target any browser or device.","In a preferred embodiment of the invention, a strongly typed HTTP request is sent to a web server running IIS, ASP.net, and one or more DRM services. The HTTP request is then pre-processed by IIS and ASP.net, and directed to the appropriate DRM service. Once the request arrives at the DRM service code, it enters one of the processing pipelines. Each pipeline is defined at the highest level by an ASP.net file (an ASMX file) which itself describes the service's entry-point and the code that handles requests to that entry-point. For each pipeline, DRM service code is behind the entry-point, and the combination of the ASMX file and the code behind it make up the pipeline.","The code behind the entry-point is modular, and can share code with other pipelines. It can include: 1) request-specific startup code that pre-processes the request parameters, performing any required normalization of the data and performing common, pipeline request-startup operations; 2) code that performs actions specific to processing the request (and specific to the pipeline); 3) code that invokes shared internal components (shared across pipelines and accessible only to the DRM platform) and shared public components (shared across pipelines and pluggable by third parties); and 4) request completion code that takes the results generated by the pipeline and formulates a response appropriate for the request.","As a result of this pipeline design, DRM services can be deployed easily in any permutation. For example, Licensing and Federation services can be installed in a particular installation, and the Publishing and Information services can be disabled. In another example, only Licensing can be installed, or only Publishing services with the enforcement of strict authentication requirements on the Publishing service by applying them to the entry-point ASMX file. Such a pipeline design also provides for efficient introduction of new services in the future, such as an Enrollment service or a Signing and Signature Validation service, for example, without affecting the existing DRM services but taking advantage of existing infrastructure.","Within each pipeline a number of pipeline stages are executed, some of which invoke internal-only DRM components and some of which invoke public, pluggable DRM components (\u201cplug-ins\u201d). As a result of this DRM plug-in design, third parties can write or obtain custom components that perform one piece of the overall DRM pipeline process. Preferably, measures are taken to ensure that any such third party is a trusted third party before such third party's plug-ins are integrated into the pipeline framework. Standard, public techniques provided by the .NET framework can be used to ensure that the third party plug-in is trusted. Third party plug-ins can be installed dynamically. Such third party plug-ins can be identified, in the DRM system's configuration data, for example, and loaded at runtime. Such a design provides for ease of use and administration of the DRM system.","Generally, a plug-in performs a discrete task, such as retrieving a Rights Label from storage, generating a Distribution Point XML node based on configuration data, performing private-key operations using custom encryption\/decryption hardware, etc. Certain specialized plug-ins are referred to herein as \u201cextensions.\u201d Extensions are invoked when general events occur, such as when it's time to authorize a request, when a license has been generated, etc. Plug-ins are more active in the pipeline processing, performing an essential, required task in the pipeline. Extensions are more passive, responding to events and possibly performing work or possibly doing nothing.",{"@attributes":{"id":"p-0124","num":"0123"},"figref":"FIG. 11","b":["1100","1100","1102","1100","1120","1120","1120","1220","1120","1120","1102","1100","1130"],"i":["a","b","a","b ","a","b "]},"At some point  along the pipeline, all the tasks necessary to perform the service (e.g., process the request) have been completed. After that point , asynchronous components can be integrated into the processing framework . Primarily, asynchronous components can be used for tasks that are not necessary to perform the service. Thus, the asynchronous components provide an out of band extensibility model for tasks that do not have to be performed during processing of the pipeline. Because they are processed after the required service tasks have completed, asynchronous components do not impede the processing of a request. Preferably, asynchronous components do not have veto power. Any number of asynchronous components can be processed in parallel.","Because of this open platform, it is preferred that measures are taken to protect data and interfaces. For example, it could be required that the plug-ins that are working within the pipeline's environment be trusted. This can be accomplished in a number of ways. For example, strong naming and evidence-based security managed code techniques between the service program and its plug-in components can be used to validate the component and make sure that the service program trusts the plug-in and that the plug-in trusts the service program. Also, data that the service program provides to the plug-ins, and data that the service program accepts back from them, can be carefully controlled. For example, in a preferred embodiment, the plug-ins are denied direct access to the service program's data structures. Rather, data in and out of the plug-ins is replicated.",{"@attributes":{"id":"p-0127","num":"0126"},"figref":"FIG. 12","b":["1200","1200","1200"]},"An \u201cauthentication\u201d plug-in can be provided to determine the identity of the entity requesting the license. Thus, the provider of the authentication plug-in can control whether authentication is required and, if so, the provider can control the type of authentication, the authentication scheme, whether anonymous authentication is allowed, and the type of error that will be reported if the request cannot be authenticated for any reason.","An \u201cauthorization\u201d plug-in can be provided to authorize the authenticated identity. Generally, an authorization plug-in can be used to determine whether a requesting entity is allowed to do whatever it is that the requesting entity has requested. For example, in a publishing pipeline, an authorization plug-in can be used to determine whether the authenticated identity is allowed to publish rights managed content using the DRM system. Thus, the provider of the authorization plug-in can control which entities can request which actions, what list of entities is stored, how and where such a list is stored, how authorized entities get onto and off of the list, and the like.","A \u201crights label storage\u201d plug-in can be used to store a master rights label generated in accordance with the invention. As described in detail above, a master rights label can be associated with an identifier, such as a GUID. At license time, the server retrieves a copy of the master rights label from storage based on the GUID. The provider of a rights label storage plug-in can define the locations where the master rights label is to be stored, and the storage techniques used to store the rights label.","A \u201cprivate key\u201d plug-in can be used to protect the root private key. Thus, the provider of a private key plug-in can specify the private key protection algorithm that the system will use. A number of private key protections algorithms that are suitable for use in a DRM system according to the invention are described in U.S. Patent Application No. (Attorney Docket MSFT-).","At completion point , as shown in , the publication request processing is completed, and the asynchronous components  begin to perform their respective tasks. As shown, the publishing pipeline  can also include a \u201cproperty bag\u201d component , a \u201clogging\u201d application , and a certificate engine plug-in . It should be understood, however, that a publishing pipeline according to the invention can include any number of plug-ins, including any number of extensions or asynchronous components.","A \u201cproperty bag\u201d is a resource that is available to plug-ins during execution time that presents request context information. The provider of the property bag can thus control what data is put into the property bag, to whom the property bag is made available, and under what circumstances the property bag can be made available.","A \u201clogging\u201d application can be used to archive data related to the publishing request. The provider of the logging component can thus control what data gets archived, where the data gets archived, and in what format the data gets archived.","A \u201ccertificate engine\u201d plug-in is an asynchronous plug-in that writes certificates (e.g., a license certificate). The certificate engine knows how to handle the grammar of the rights language being used (e.g., XrML). The provider of the certificate engine plug-in can thus control the format and content of the certificates, the rights language being used, etc.",{"@attributes":{"id":"p-0136","num":"0135"},"figref":"FIG. 13","b":["1300","1300","1300"]},"An \u201cauthentication\u201d plug-in , such as described above in connection with the publishing pipeline, can be provided to determine the identity of the entity requesting the license.","An \u201cauthorization\u201d plug-in , such as described above in connection with the publishing pipeline, can be provided to authorize the authenticated identity. In a licensing pipeline, an authorization plug-in can be used to determine whether the requesting entity is allowed to request a license. Thus, the provider of the authorization plug-in can control whether a personal account identity is allowed to directly make a license request, whether a trusted server process may make a license request on behalf of such an entity, and the like.","A \u201cgroup expansion\u201d plug-in can be used to retrieve an individual user list from a group identifier. It is anticipated that, in general, membership in a predefined group will change over time. Consequently, a DRM system according to the invention can include a group repository that contains respective user lists for each of a number of groups. Each group has an associated group identifier. Hence, whenever a group id is received during the processing of a digital rights management service (e.g., publishing), the group expansion plug-in can be called to retrieve the current group list that corresponds to the received group id.","A \u201crights label retrieval\u201d plug-in can be used to retrieve a rights label that corresponds to a received identifier. As described in detail above, the server parses the rights label input in the license request to retrieve its GUID. It then passes this GUID to the rights label retrieval plug-in , which issues a query against the database to retrieve a copy of the master rights label.","A \u201ccertificate retrieval\u201d plug-in can be used to retrieve a certificate from a server on which such certificates are stored. For example, a requesting entity might be requesting pre-licensing of a number of potential licensees, but the requesting entity does not have the certificates for the potential licensees. The certificates are needed to issue the license, however, so the certificate retrieval plug-in can be utilized to retrieve the certificates from the server on which they are stored.","A \u201cstorage\u201d plug-in can be used to encapsulate whatever storage access is provided. Thus, the provider of a storage plug-in can specify the stores in which data can be stored or from which data can be retrieved, as well as the \u201clanguage\u201d the pipeline needs to communicate with the data store(s). For example, a pipeline might need to access a specific data store via SQL.","A \u201cdistribution point\u201d plug-in can be used in connection with superdistribution of the referral URL. The distribution point plug-in reads referral URLs from a storage location, and incorporates them into XrML documents when asked. The output from this plug-in is a well-defined piece of XML that defines the referral URL that a client can contact to perform a DRM operation such as licensing, rights acquisition, etc.","A \u201cprivate key\u201d plug-in , such as described above in connection with the publishing pipeline, can be used to protect the root private key.","At completion point , as shown in , the license request processing is completed, and the asynchronous plug-ins  begin to perform their respective tasks. As shown, the licensing pipeline  can also include a \u201cproperty bag\u201d component , a \u201clogging\u201d application , and a certificate engine plug-in , such as described above in connection with the publishing pipeline. It should be understood, however, that a licensing pipeline according to the invention can include any number of plug-ins, including any number of extensions or asynchronous components.",{"@attributes":{"id":"p-0146","num":"0145"},"figref":"FIG. 14","b":["1400","1402"]},"At step , the system provider provides a plurality of DRM plug-in options, each of which is associated with a respective plug-in component that performs a respective task associated with the digital rights management service. The installer, purchaser, system administrator, or other user of the system can then select from among the plurality of plug-in options to select those plug-ins that provide the specific functionality that the consumer desires for that pipeline for that installation.","At step , the system provider receives the plug-in selections and, at step , integrates into the processing framework, the plug-in components that correspond to the selected plug-in options. Thus, a user of a DRM system according to the invention can tailor the system to the user's needs or desires, and can economically, easily, and efficiently, upgrade the system by changing plug-ins.","The programming necessary to effectuate the processes performed in connection with the present invention is relatively straight-forward and should be apparent to the relevant programming public. Accordingly, such programming is not attached hereto. Any particular programming, then, may be employed to effectuate the present invention without departing from the spirit and scope thereof.","Thus, there have been described secure server plug-in architectures for digital rights management systems. Those skilled in the art will appreciate that numerous changes and modifications can be made to the preferred embodiments of the invention, and that such changes and modifications can be made without departing from the spirit of the invention. For example, though the invention has been described in detail in connection with publishing and licensing pipelines, it should be understood that the invention can be employed in other digital rights management pipelines that perform other digital rights management services such as enrollment, activation, certification, federation, and the like. It is intended, therefore, that the appended claims cover all such equivalent variations as fall within the true spirit and scope of the invention. \n\n\n\n\n"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWING","p":["Other features of the invention are further apparent from the following detailed description of the embodiments of the present invention taken in conjunction with the accompanying drawing.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 4B","FIG. 4A"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 10","FIG. 9","FIG. 4B"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
