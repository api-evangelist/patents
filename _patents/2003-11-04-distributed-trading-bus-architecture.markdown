---
title: Distributed trading bus architecture
abstract: A distributed trading system for handling a plurality of order requests, each order request comprising parameters under which a participant will buy and/or sell a futures contract. A validator component is coupled to a messaging bus and has a first interface for receiving order request and an interface generating a validated order message on the messaging bus related to validated orders, wherein the validator implements processes for validating the order requests. A risk allocation value (RAV) component is coupled to the messaging bus and has an interface for receiving validated order messages from the validator, wherein the RAV component implements processes for evaluating risk associated with an order should that order be completed. A match engine is coupled to the messaging bus and has an interface for receiving validated order messages from the RAV component, wherein the match engine implements processes for matching orders based on the order-specified criteria. A persist component is coupled to the messaging bus and has an interface for receiving messages related to orders and trades, wherein the persist component implements processes for persistently storing information related to orders and trades.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07890412&OS=07890412&RS=07890412
owner: New York Mercantile Exchange, Inc.
number: 07890412
owner_city: New York
owner_country: US
publication_date: 20031104
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates, in general, to financial transaction software, and, more particularly, to software, systems and methods for processing transactions in a regulated exchange in a distributed fashion.","2. Relevant Background","The present invention relates to systems, methods and a computer software architecture for trading in a futures trading marketplace. Futures and options trading are important techniques for coping with the price uncertainty of a free market. Price uncertainty creates risks and opportunities. Futures and options markets provide a forum for commercial interests in a commodity to hedge against price risk by transferring that risk to those more willing and able to bear it, or to those commercial interests with inverse risk profiles. An active futures market provides a readily available, widely accepted reference price for the underlying commodity, thereby improving the efficiency of the overall market. Futures can also be used for investment purposes to mitigate pure financial risks and\/or pursue purely financial goals.","A futures contract is a contract between a buyer and seller, whereby the buyer is obligated to take future delivery and the seller is obligated to provide future delivery of a fixed amount of a commodity at a predetermined price at a specified location. The contracts are standardized so that the price of the contract has strong relationship to the value, and the expected fluctuations in value, of the underlying commodity. Futures contracts are traded until a set point in time before the contract-specified delivery date and in many, if not most, cases the positions are closed before physical delivery takes place. Futures contracts are traded exclusively on regulated exchanges. These auction markets include, in many cases, \u201copen outcry\u201d markets as well as electronic trading. A futures market or exchange provides a mechanism where the futures contracts themselves can be bought and sold, much like a stock exchange provides a mechanism in which ownership in business entities can be bought and sold.","These exchanges implement systems that create and manage accounts for buyers and sellers, enable market participants to communicate transaction information, and execute transactions in a reliable fashion. It is desirable to provide these systems in a manner that minimizes transaction overhead. Like any market, a regulated exchange strives to bring many buyers and sellers together. Generally speaking, active markets are considered more efficient. In other words, the larger the number of participants and the larger the transaction volumes, the more likelihood exists that the market will result in fair prices for the products being exchanged. In turn, confidence that prices are fair leads to greater participation. Hence, an exchange's systems and software must support large transaction volumes and scale over time to handle variable transaction volume and numbers of participants.","Another attribute of a strong exchange is the ability to provide buyers and sellers with sufficient information about completed transactions so that they can better value their own transactions. Capturing, processing, and delivering transaction information in real time increases confidence of buyers and sellers. Accordingly, the exchanges strive to provide systems and methods that reliably capture and record transactions, and execute those transactions efficiently and precisely.","An exchange also attempts to control transaction risks. While market participants accept risks associated with the underlying products they are purchasing (e.g., commodities futures and options), they desire to lessen risks associated with the marketplace itself. For example, in any transaction a potential exists that a buyer will not have sufficient funds to complete a purchase. To protect against this \u201ccounterparty credit risk\u201d, exchanges require that market participants maintain a certain level of liquid assets on deposit called margin. As soon as anyone buys or sells a futures contract, they must deposit with their clearing member an amount of money that the exchange determines is sufficient to cover any one-day price move. As long as that person or firm holds on to the contract, the exchange must maintain minimum margin funds on deposit for that position, with the contract holder depositing additional funds whenever the market moves against him.","Contract values change continuously, however, and so exchanges implement processes to periodically assess the current value of customers' holdings and adjust margin requirements accordingly. \u201cClearing\u201d refers to the processes of registration and settlement of a trade that includes provisions for margin requirement and performance guarantee. The \u201csettlement price\u201d is the price established by the exchange settlement committee at the close of each trading session and is the official price to be used by the clearinghouse in determining net gains or losses as well as margin requirements. In an active exchange the process of daily clearing involves millions of computations and account postings that must be performed in a very few minutes. Accordingly, the software and systems required to support this exchange activity are very complex.","Open outcry trading takes place on a physical trading floor where brokers exchange bids and offers for futures contracts. Executed trades are then recorded by hand or entered into an electronic recording system. The completed trades are later sent to an external or internal clearinghouse to process the trades and issue appropriate reports to the futures exchange and its members. Futures markets are also maintained on electronic trading systems. These electronic trading systems allow entry of a bid or offer for a particular futures contract. One can also enter orders for combinations of futures orders, e.g., spread or strip orders. A spread order buys one or more futures contracts and sells one or more futures contracts simultaneously at a single \u201cdifferential\u201d price. A strip order buys (or sells) two or more futures contracts simultaneously at a stated differential price from the previous settlement prices for each contract in the strip or at an average, i.e., \u201cflat,\u201d price. The orders are time stamped by the trading system as they are entered. The system then matches a bid with an appropriate offer. Bids and offers are matched in the sequence in which they are received, hence, a buyer does not select a particular seller. The trading system then generates appropriate information for the clearinghouse.","Automated trading systems are complex software systems that assist exchanges in their efforts to implement the various process required by the exchange. These systems implement a variety of functions such as order entry, order validation, buy-sell order matching and publishing information in a form that is useful to transaction clearing entities. All of these functions are performed in a reliable, auditable fashion so that customers of the exchange can be assured of consistency. Automated futures trading systems were initially developed to support conventional trading by capturing data from trades executed by floor brokers. Such systems include processes for recording executed trades, rejecting unacceptable trades, and clearing acceptable trades. However, these systems are working with executed trades and so did not include processes for automating many of the tasks that were handled by the floor brokers.","Electronic trading systems that receive orders over a network, on the other hand, desirably include processes for executing trades. Early systems included processes for receiving orders over a network, but then handled those orders through a floor broker in a traditional manner. Another requirement for electronic trading systems is that they interface with the existing trading systems that support floor-brokered trades. Because of this need some systems have simply tacked on an electronic transaction interface to an existing centralized trading application. However, such approaches impose the deficiencies and limitations of the centralized trading application onto the electronic trading application.","Transactions must either be completed in a manner that satisfies both the buyer and seller, or must be discarded. A partially completed transaction is not allowed. A partially completed transaction is one that satisfies the buyer, but not the seller, or a transaction that satisfies both the buyer and seller partially, but not fully (e.g., when only a portion of both of these orders is filled). This factor, in combination with the highly specialized nature of trading systems, has led to centralized software implementation. These prior systems comprise complex, tightly coupled components that would execute on one or more mainframe computers.","However, complex, centralized software systems tend to be expensive to obtain, inflexible, and difficult to maintain. The tight coupling and interdependence between functional components leads to unexpected results when components are upgraded or added. When the systems are based on mainframe computer environments, the hardware acquisition and maintenance is also expensive. As a result, these systems are slow to adapt to newer technologies and to support new business initiatives.","Often times centralized trading systems do not scale well. In the field of trading system software, it is not acceptable to have a system that fails when faced with large transaction volume. Accordingly, centralized systems are built from the beginning to support the largest expected transaction volume, even though this level of activity may be rarely if ever used. When the trading activity approaches the designed limit, the system must be replaced or extensively reworked in order to support the larger transaction volumes. It would be desirable to implement trading system software and systems that scale gracefully to avoid the expense and disruption associated with system replacement.","Centralized trading systems, also called trading platforms, tend to offer limited and proprietary interfaces to external systems. Because a centralized system implements all or nearly all of the trading functions internally, there is little need for communication with external systems. Operators can be specially trained to handle various activities such as order entry and report generation, and so the systems tend to have limited, difficult to use interfaces to both humans and other machines. However, there is an increasing desire to allow trading firms to use front-end applications that best fit their trading requirements. It is therefore desirable to be able to implement trading systems with improved ability to communicate with a wide variety of software and third party systems.","In many fields of software development, complex software is now being implemented in the form of distributed systems. These systems include functional components with a high degree of logical separation so that each component is largely insulated from the actions of other components. Distributed systems leverage the improved abilities to communicate between system components so that complex functions can be implemented as many small components. These smaller components are easier to design and maintain, and provide much greater flexibility in adapting to a variety of computer hardware\/operating system environments. Until now, however, distributed system architectures have not been applied to trading system software.","Briefly stated, the present invention involves a distributed trading system architecture for handling a plurality of order requests, each order request comprising parameters under which a participant will buy and\/or sell a futures contract. A validator component is coupled to a messaging bus and has a first interface for receiving order request and an interface generating a validated order message on the messaging bus related to validated orders, wherein the validator implements processes for validating the order requests. A risk allocation value (RAV) component is coupled to the messaging bus and has an interface for receiving validated order messages from the validator, wherein the RAV component implements processes for evaluating risk associated with an order should that order be completed. A match engine is coupled to the messaging bus and has an interface for receiving validated order messages from the RAV component, wherein the match engine implements processes for matching orders based on the order-specified criteria. A persist component is coupled to the messaging bus and has an interface for receiving messages related to orders and trades, wherein the persist component implements processes for persistently storing information related to orders and trades.","The present invention is illustrated and described in terms of a distributed computing system. The particular examples identify a specific set of components useful in a futures and options exchange, however, many of the components and inventive features are readily adapted to other electronic trading environments. The specific examples described herein may teach specific protocols and\/or interfaces, although it should be understood that the invention is readily extended to other protocols and interfaces in a predictable fashion.","Regulated exchanges such as the New York Mercantile Exchange (NYMEX), assignee of the present invention, Chicago Board of Trade (CBOT), MidAmerica Exchange (MIDAM), Chicago Mercantile Exchange (CME), Kansas City Board of Trade (KCBT), and others implement a trading platform such as system  in  to conduct futures contract exchanges in an orderly manner. Trading platform  accepts orders, matches and records orders; collects and maintains margins; allocates margins according to the positions of the clearing members; matches open short with open long positions for delivery; allocates delivery notices; and generates trading and delivery statistics. A clearinghouse  acts as a fiscal transfer agent, transferring money from the margin funds of traders who have incurred a loss in the futures market on any given day to the margin funds of traders who have generated a gain. The exchange's clearing members accept responsibility for all trades cleared through them, and share secondary responsibility for the liquidity of the Exchange's clearing operation.","Trading platform  includes components that implement the various exchange functions necessary to support both electronic futures trading and trades executed on the trading floor . Conventional trading floor trades are managed and cleared by various processes within the common trading services . Electronic orders are conducted from an order submission point . In the particular example, order submission point  exists outside of the exchange and trading platform , however, there is no reason why an order submission point could not also supplement or replace trading floor activities.","Electronic orders are conducted by way of a communication network , such as the Internet. It is contemplated that order submission points may take on a wide variety of application-specific designs to suit the needs of particular brokerages, investors, investment plans and the like. Order submission point(s)  communicate with electronic execution services . Electronic execution services  implement, among other services, order validation logic to ensure that orders comply with certain standards imposed by the exchange. For this reason it is important that all communications from order submission point  enters platform  through a suitable order validation service.","Another important function of the trading platform  is to gather and provide market data to both market participants and external third parties. Market data services  gather market data  as transactions are executed. The market data  includes raw data, formatted data, as well as derivative (i.e., analyzed) data. Market data  may be provided by any available protocol and may be provided immediately and\/or after a delay.","An important feature of the present invention is the use of enterprise messaging architecture (EMA) bus  to exchange messages between components of platform . In a specific example, EMA bus  is based on a TIBCO\u00ae SmartSocket\u00ae messaging bus, although equivalent alternatives include middleware such as Java Messaging Services, Arujuna Message Service, MQSeries messaging products available from IBM, and SonicMQ provided by Sonic Software as well as other messaging products. Messages are sent and received via a publish\/subscribe method. Publish and subscribe enables components ,  and  share up-to-date information reliably. Unlike a request\/reply-messaging scheme, the publish\/subscribe method does not require a direct request for a message to be made before the message is published to EMA bus .","Using EMA bus , the present invention defines a set of messages between the various components. For each message, one component is a publisher and one or more other components are subscribers. A configuration table associated with each component identifies the messages to which that component subscribes. When a message is published, all subscribing components receive the message and can act on it concurrently and independently. To change the subscriber-publisher relationships so that more or fewer components respond to particular message types, all that is required is to update the configuration tables of the affected components.","In this manner, EMA  implements a user defined and dynamically definable messaging protocol between the various components, and enables the components to operate in an independent, distributed fashion. In an exemplary embodiment, messages on EMA bus  comprise self-describing messages such as extensible markup language (XML) documents. An XML schema is defined for each message type, for example, so that every component can validate messages as complying with the XML schema. Moreover, the variety and information content of each message can be readily updated using an XML schema.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 2","FIG. 1"],"b":"115"},"Trading floor component  comprises, among other functions, trade entry mechanisms  and price reporting mechanisms . Although trades executed on a trading floor are executed using traditional processes, they must be entered into the trading platform  to be handled by common trading services . The data entry will indicate, for example, price, customer ID, information about the floor broker, time, commodity, delivery date and place of delivery, or other information required\/desired by the exchange. Common trading services  may include processes for verifying that the trade meets certain exchange criteria and complies with exchange rules such as margin requirements, trading procedures, position sizes, and other criteria. Trading floor  may also include price reporting terminals  which may be implemented as network connected terminals coupled to trading services component  or as wireless devices such as personal digital assistants (PDAs). Price reporting terminals  can be used to enter price information related to executed trades and to view market data information on the trading floor .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 2","b":["101","205","205"]},"Electronic trading client  represents an application using either open standards or proprietary design that implements an order entry interface using client software such as a web browser. In a particular example, electronic trading client  is implemented with NYMEX ClearPort\u2122 trading software that runs on a web browser such as Microsoft Internet Explorer. ClearPort is a trademark or registered trademark of the New York Mercantile Exchange, Inc. in the United States and other Countries. An electronic trading client  can be readily adapted to provide a customized, easy to maintain order entry interface that provides an application-specific set of functionality, in addition to supporting communication with electronic execution services . The NYMEX ClearPort technology network is an extremely flexible system offering market participants wide latitude in meeting specific needs. NYMEX ClearPort is an open system, which allows trading firms to customize front-end applications to best fit their trading requirements.","Order submission point  also includes a market data application programming interface (API)  which functions to receive market data from market services component . This market data may include user-specific and\/or application specific information on the status of trades, failure notifications, execution notifications and the like. The market data may also include general market information, news, analysis and the like that can be used in planning future trades. In a particular example, market data is provided to market data API  using open standards protocols and formats such as Java\u2122 and\/or XML.","Cluster  represents devices for using market data from market data services component . For example, wallboard systems are frequently used to convey information on trading floor . Electronic wallboards on each trading floor display virtually all needed price information on each of the most actively traded commodities, including the opening range, the previous day's closing price, the day's price limits, the high and low trade prices of the day, the three most recent trade prices and\/or best bid or offer, and the net change from the settlement price. In addition, the high, low, last, and net change in prices on other exchanges are displayed.","Providing market data to vendors  is a significant activity for an exchange. Market data from a futures exchange is frequently used as a basis for many transactions involving similar commodities outside of the exchange. Vendors  purchase the market data and provide it in either raw or analyzed form to subscribers. The value of this market data to vendors  is largely dependent on its timeliness. Accordingly, the close integration of market data services  to the real time market data available in trading platform  allows data to be provided to vendors  in an exceptionally timely and reliable fashion.","In a specific embodiment, the market data is provided to cluster  from market data services  using an ITC 2.1 protocol. ITC 2.1 is a standard message format that was developed by the Inter-Exchange Technical Committee. It is used by the major U.S. futures exchanges. The present invention supports the use of ITC 2.1 messages format for distributing market data from the market data server to devices that require that format, such as wallboards, data vendors, personal digital assistants (PDAs), and a variety of other data users. One feature of the present invention is an ability to collect, process, and display wallboard information in a timely fashion by placing market data services  on EMA .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 3","FIG. 1"],"b":["105","107","115","107","301","111","307","307","115"]},"In the specific implementation of , ESS  receives data about completed trades from trade management system  and calculates a settlement price automatically as an automated substitute for the conventional role played by settlement price committee. Current practice relies upon the decisions of settlement price committee member(s), whom are also trading members of the exchange, to determine what the settlement prices should be. In other words, traders themselves decide the settlement prices, which creates a conflict of interest situation. In contrast, the present invention contemplates that ESS  can suggest a settlement price and an exchange employee (e.g., an expert or research personnel) will adjust and\/or approve the suggested settlement prices and publish this information. When ESS  is used in this latter capacity, it may continue to receive survey data from cooperative traders (e.g., data related to OTC-traded commodities) and calculate suggested settlement prices for research's consideration and approval. The particular algorithms used to compute settlement prices, the choice of what data is considered in the settlement price computation, and the form in which the settlement price information is presented are matters that can be selected to meet the needs of a particular application.","The settlement price is the final price established by the exchange settlement committee at the close of each trading session as the official price to be used by the clearinghouse in determining net gains or losses, margin requirements, and the next day's price limits. Final trades are also communicated to persist object  so that executed trades are safely stored in persistent storage of database .","Data related to settlement prices and trades are output to clearing processes . Clearing processes  are designed for high-volume, high-capacity clearing and settlement of exchange-based transactions. The system processes reported trades and tracks positions continuously in real time or near real time, providing users with instantaneous information on trades, positions and risk exposure. The open or outstanding contracts are communicated to ticker plant . Open interests are contracts for which an individual or entity is obligated to the exchange because that individual or entity has not yet made an offsetting sale or purchase, an actual contract delivery, or, in the case of options, exercised the option. Ticker plant  comprises a collection software processes that consolidate the raw market data and distribute that data with low latency as well as high integrity and reliability. Ticker plant  distributes the market data that it collects and conveys that data to, for example, to market data services  and\/or price reporting terminals .","Most of the component processes in common trading services  correspond directly to processes that have been used conventionally to handle trades from trading floor . However, by coupling common trading services  to the EMA bus , these otherwise conventional processes are now able to use new processes such as the persist component  and risk allocation value component . In this manner, common trading services can be augmented by distributed services implemented by objects that are reachable through the EMA bus , greatly improving the expandability of common trading services .","Contract generator  comprises processes that enable spread and strip markets. A \u201cstrip\u201d involves simultaneous purchase (or sale) of an equal number of futures positions in consecutive months. A twelve-month strip, also known as a calendar strip, consists of an equal number of futures contracts for each of twelve consecutive contract months. A \u201cspread\u201d refers to a variety of transactions that involve simultaneous purchase and sale of futures contracts for different months, different commodities, different grades of the same commodity, or other combination in which the two sides of the spread offset each other in some way. Hence, a contract order in the case of strips and spreads involves multiple buy\/sell transactions, all of which must be completed for the contract order to be satisfied. Contract generator  receives data related to outright futures and options (i.e., contracts that do not involve spreads and strips) from the clearing processes  via EMA bus .","Contract generator  groups the outright futures contracts into \u201ctradeable\u201d spreads and strips and populates the contract tables in EMA database  with the strip and spread contracts. EMA database  contains firm, user, product, contract, orders, and trades data. This data is populated by direct user interfaces (firms, users, products), automated processes (contract populator and contract generator ) as well as by trades and orders being written to the database due to trades and orders occurring in the system. The trading system loads the outright future, strip and spread contracts for trading.","The electronic execution services  shown on the right hand side of  include a number of functional components that illustrate the power of the distributed program architecture in accordance with the present invention. Each of the components within electronic execution services  can be implemented by, for example, a program object such as a Java\u2122 object. Java is a trademark or registered trademark of Sun Microsystems Inc. in the United States and other countries. Many instances of the various objects can exist at any given point in time thereby enabling a high level of concurrency in program execution. Each instance of a component is associated with a particular contract or cluster of contracts. In general, failure of one object will not impact other objects, although care is taken to ensure that all objects have a synchronized view of the state of each transaction that is being handled by the system.","The present invention may be implemented in a manner that supports multiple \u201ccontract clusters\u201d or in a manner in which contract clustering is not involved. A contract cluster is essentially a group of contracts that are sufficiently related that offers to sell and bids to buy the contracts within a contract cluster can be matched against each other. For example, a \u201ccontract cluster\u201d may comprise two contracts sharing a spread or strip relationship that requires that implied markets be generated between the two markets. In some implementations it may improve performance and efficiency to create and maintain components such as match engine  and persist component  on a contract cluster basis rather than a single instance for all contracts. When contract clustering is used, a unique identification called the cluster ID is associated with each cluster. In the particular example, each message placed in the EMA bus is tagged with the cluster ID. Each component is configured to recognize a particular cluster ID and ignore messages associated with other cluster IDs. Accordingly, when a new cluster is added or removed, the component configuration files are updated accordingly.","Validator  is the entry point for orders into the system, either from client , FIX interface , or an equivalent order entry front-end. Validator  performs various validations (exchange active, contract active, markets open, user assigned to account, high\/low limits etc.) and either passes on successful orders to risk allocation value (RAV) component  or . Errors are reported back to the client. Any number of validators  may be instantiated at any given time. In a typical embodiment, each client connection initiates the creation of a validator .","Validator  is a publisher for an \u201cAddOrder\u201d message that is subscribed to by risk allocation value component . An AddOrder message is placed on EMA bus  when an order request has been validated. An AddOrder message comprises an XML document that is validated against an AddOrder XML schema. The validator  subscribes to market state messages enabling the use of market state information when validating orders. Validator  also subscribes to RejectOrder messages from RAV component  and\/or match engine . Validator  includes processes for notifying the customer that submitted a rejected order of the rejection and optionally other data that describes reasons for the rejection.","Because the messages on EMA bus  are self-describing, it is not necessary for validator  to maintain state information for each transaction that passes through it. If an order is rejected, the associated RejectOrder message on the EMA bus  will include sufficient information to enable validator  to fulfill its function of generating appropriate notifications.","Risk allocation value component (RAV) component  includes processes that evaluate the affect of proposed transaction against clearing member rules such as margin requirements, position size, and the like. For example, a clearing member may establish an account and set an overall \u201cRAV limit\u201d in dollars terms, e.g., $100,000, to control the total size of positions that the account may establish across all commodity contracts that the clearing member has permissioned the account to trade. The RAV limit works in a similar fashion as does \u201coriginal margin.\u201d In a specific implementation, upon entry of a new order, RAV component  accepts or rejects the order by considering the existing positions for the account identified on the order and any matchable order for that account. After determining a \u201cworst case\u201d trading scenario (i.e., a scenario that leads to the greatest RAV requirement), RAV component  calculates the RAV value necessary to support the worst case position generated by the order request and, based on the account's preset RAV limit of $100,000, either accepts or rejects the order. In addition to the clearing member setting an overall RAV limit value and permissioning the account to trade in particular commodity contracts, a clearing member may set net long and\/or net short position limits per commodity for the account. When either the RAV limit or the position limit values would be exceeded due to the entry of a new order, then the order will be rejected and it will not be matchable in the system. RAV component  is a subscriber to AddOrder messages from validator  as well as RejectOrder messages from the match engine . Upon receiving a RejectOrder message, RAV component  may take remedial action to note failure of the order. Such action may include allowing another order to pass to its match engine  as the risk allocation value computations can now ignore the failed order request.","Match engine  will reject orders for a variety of reasons such as duplicate order identifications, format problems, and the like. Assuming the nominal case of a well-formed order, match engine  passes all new orders, regardless of whether they are matched or not, to the persist component . This is performed using a PERSIST message on the EMA bus  for which match engine  is a publisher and persist component  is a subscriber. The Persist message includes information indicating whether the order was matched to another complementary order, so that the persist component  can be synchronized with the trade information, if necessary.","Match engine  should subscribe to EMA bus messages pertaining to high\/low limits. Match engine  will need to round prices for implied transaction to high\/low limits. When the limits change, match engine  recalculates the markets. When an implied bid is generated above the high limit, then match engine  rounds the resultant high limit bid price to the limit price for display purposes on trading screens and in market data. When the high limit price was increased via a price limit adjustment, then the match engine recalculates the high bid price that should be displayed to the marketplace. If the new high limit price is still less that the system-generated implied bid price, then the new high bid price would be the new limit price. If the implied bid price were less than the new high limit price, then the new high bid price is the system-generated implied bid price. Match engine  also publishes EMA bus messages that convey market data such as best bid and best asked for the contract cluster. These market data messages are subscribed to by the ticker plant  and market data services component , for example.","In a particular embodiment, match engine  and persist component  are scaled at a contract cluster level of granularity. That is to say, an instance of match engine  and an instance of a persist component  are created for every contract cluster rather than for every contract. As noted hereinbefore, a \u201ccontract cluster\u201d may comprise two contracts sharing a spread or strip relationship that requires that implied markets be generated between the two markets. When this happens, matching engine  must consider an order entered into one contract as potentially causing a match in the second contract, thereby requiring that the matching engine  consider the two contracts simultaneously when determining matches. When contract clustering is used, a contract can only belong in one cluster and many contracts can be in the same cluster.","For example, a single contract cluster might exist for contracts such as light sweet crude oil (CL), heating oil (HO), unleaded gas (HU), Brent Crude Oil (SC), Light Louisiana Sweet Crude Oil (LS), Mars blend crude oil (MB), West Texas Sour Crude Oil (TS), because there are CLHO, CLHU, HOHU, SCCL, TSCL, MBCL, LSCL spread markets that require implied markets to be generated. The four-letter market identifiers indicate a spread contract comprising two markets, each identified by a two-letter identifier. Hence, the contract cluster includes all of the constituent outright futures contracts that are necessary to make up a spread transaction.","In a futures contract exchange all contracts for delivery of a specific product at a specific delivery point and delivery date will be together in a contract cluster. Tens, hundreds or thousands of contract clusters will exist at any given time. Contract clusters are associated with a unique identification, and messages on the EMA bus  include the relevant contract cluster ID. In this manner an order is readily directed to the match engine that is relevant to that order. A match engine instance will remain alive in the system for as long as the contract cluster exists. As each new contact cluster is added, a corresponding new match engine  is created. As a contract cluster rolls off (e.g., when the underlying futures contract delivery date passes) the corresponding match engine  is destroyed. When a contract cluster is added or rolled off, the configuration files for each of the system components are updated to reflect a current list of active contract clusters.","Although contract cluster can be made larger, searching for matches becomes incrementally more complex and time-consuming as match engine  must attempt to match more parameters. In the implementation described above, matching is a much simpler algorithmic process. Matching is performed on a first in first-match basis. Accordingly, given two bids at the same price and only one offer, the bid that was first in time to reach match engine  will be matched. The competing bid will go unmatched until a subsequent satisfactory offer arrives at match engine .","Each order is preferably associated with a time in force value indicating whether the order is a day order, good until cancelled (GTC), or good until the end of a specific date (GTD). The match engine  may identify a matching order at any time during its existence for orders that remain active. When a match is found the match engine publishes a TRADES EMA bus message to the persist component . Match engine  generates the trade sequence IDs and trade timestamp. In practice, a match may require two messages to persist component , one for the new order that caused the trade and one for the TRADES message. The persist component is responsible for synchronizing the persistence of orders and trades that change due to the same event. In a particular embodiment, match engine  tags data with an event ID and orders tagged with the same event ID are matched, which enables the persist component  to know what records to synchronize and when.","Upon expiry of the time in force, the Persist process  will expire orders upon the close of a market, e.g., or at the beginning of a new trading day. The matching engine  receives a message to cancel the expired order(s) and processes the request. At the point that the order is canceled by the matching engine due to it expiring, the order is removed from the memory allocated to match engine  handling the order.","Orders may define a spread. A spread is the simultaneous purchase and sale of futures contracts for different months, different commodities, or different grades of the same commodity. A spread trade involves a \u201cleg\u201d component contract for each transaction. For example, one leg corresponds to the purchase and one leg corresponds to the sale. The present invention contemplates a leg pricing component  that prices \u201clegs\u201d (i.e., component contracts) involved in spread orders. Leg pricing component  may be implemented as a separate component or within match engine . When two spread orders match at a stated differential price between the two contracts involved in the spread, each component contract needs an \u201cabsolute\u201d price so that it may be cleared independently of the other component contract to the spread trade. In the particular embodiment, leg pricing component  is stateless. Leg pricing component  includes processes to read settlement, last price and high\/low limits from the database when needed. Leg pricing processes  receive data related to high\/low limits in order to determine if trade is price discovery or not. Any number of leg pricing components  may be created to meet the needs of a particular application.","Market data server component  operates to publish market data to any interested (i.e., subscribing) party, including clients , price reporting service terminals , trade management system , and others. Market data server component  preferably filter trades before broadcasting market data (price discovery, in and out of price limits, and the like). In the examples, an instance of a market data server component  corresponds to a specific market data service. For example, \u201clevel  market data\u201d includes best bid and best offer price information whereas \u201clevel  market data\u201d includes all bid and offer price information regardless of whether the bid or offer prices are the best or not. Any number of market data server components  may exist. These components will typically exists for so long as the level of data that they manage is being used by an external consumer.","One advantage of a distributed processing architecture as described above is that failure or malfunction of one instance of one component is unlikely to affect other instances of that same component or instances of different components. In this manner, a badly behaved instance is isolated. In a system in which many thousands of transactions may be pending at any instant, the ability to shut down one or only a few component instances and restart them is a powerful feature.","A LOCKDOWN message published on EMA  by any component will causes  the exchange to halt. This means that no order entry or order maintenance is allowed.  Validator instances stop accepting new orders and modifications to orders. Client  market data displays, if synchronized with orders\/trades, will be left alone. In the event that the client market data display is not synchronized, the display is preferably cleared to avoid unintended reliance on inaccurate data. End users and operators are informed of the halt.","A manual \u2018Resynch\u2019 process (button on admin or restart application) may be used to respond to and\/or recover from a LOCKDOWN due to a critical component failure. A resynch will restart\/reload market data system , restart\/reload M.E. , restart\/reload RAV (if RAV had the issue) , and restart\/reload O.V. . At the appropriate time after appropriate notice to traders, the Exchange can be un-halted (\u201creopened\u201d) and everyone can resume trading activity.","Desirably, a robust and reliable monitoring system is in place for these components, one that can detect real failures in components, not raise false alarms, and can perform automated \u2018tests\u2019 to verify the loss of one of these components (hardware dead, network dead, and the like). When one of these components fails, action must be taken to recover the system such that all the components in the system are in a consistent state.","When persist component  detects database  is not functioning, the persist component  publishes a LOCKDOWN message on EMA bus , triggering the LOCKDOWN processing outlined above. Operations and support personnel address the issue as soon as possible to ensure functionality of database . Appropriate safeguards in the design of database  including RAID-type data protections and virtualized storage can make the likelihood of failure of database  extremely remote. Once the underlying issue is resolved a resynch is triggered, as outlined above.","Upon failure of a market data server  operations personnel are alerted. Operations personnel may manually monitor and\/or use monitor processes to run tests to confirm the market data system  process is dead. When market data system  is verified dead, a LOCKDOWN message can be automatically published by the monitor if it ran the tests, or by the operations personnel manually if they run the tests. A Resynch is triggered, as outlined above.","When match engine  goes down a LOCKDOWN message should be published to EMA bus . Operations personnel and support personnel solve the issue ASAP, which ultimately leads to having the match engine  back up and running. A resynch is triggered, as outlined above.","If an issue is detected on either RAV  running as a single instance, or on one or more of the RAV engines  running on many instances, and that are important enough to cause a halt in trading, the following steps should be performed. All markets should be halted to allow downward modifications to order volume only by traders\/FIX clients. Operations personnel and support personnel solve the issue as soon as possible. Some or all of the RAV instances may be recovered to return the system to a running condition. Minor inaccuracies in RAV instances  can be tolerated in some applications. At the appropriate time, after notice to traders, all markets may be reopened.","Upon failure of a validator , the exchange is halted to prevent all trading activity. Of course, if validator instances  cannot be created, no new orders can enter the system. Operations personnel and support personnel must solve the issue. At the appropriate time after appropriate notice to traders, the exchange can be un-halted and trading activity can resume.","In competitive markets such as a futures exchange, it is important to implement procedure and rules to prevent publication of market data that reflects trades that in fact did not occur due to a customer cancellation or change, failure of a component, or other anomaly. The architecture of the present invention makes market data available so quickly that this can become a significant issue. Accordingly, EMA bus  components preferably follow a \u201cpersist before publish\u201d rule in specific circumstances. Each subscriber component will need the ability to send an error back to publisher component, with possible rollback processing as a result.","Whether the publishing of market data is to be synchronized with the successful persistence and publishing of order\/trade data that caused the market data is optional. Market data synchronization effectively means the system does not publish any level  or level  market data that is caused by an order or trade that failed to be persisted and thus will not exist when the system components resynchronize off the databases subsequent to a LOCKDOWN, as described above. However, the market data synchronization of the successful persistence of orders and trades with the distribution of level  and  data is at the possible expense of throughput and performance.","To enable the system to keep a full audit trail of order status changes, for both the end user and compliance purposes, the match engine  reports at least a minimum amount of information required for the persist component  to create the audit trail. Additionally, match engine  should support \u201cpass through data\u201d, i.e., information that is associated with an order (user, account, etc.) that is of no interest to the match engine , but is of definite interest to the persisting process at the end of the stream.","Optionally, validator component  could keep a record of incoming order changes requested by a client, and strike these from its list once it gets confirmation from EMA bus  that this order change persisted. This gives us the ability, should a LOCK DOWN message go out and the validator  is up and running, to report back to a client the specifics of any orders that did not make it into the system rather than a general message.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 4","FIG. 5","FIG. 6","FIG. 4","FIG. 4","FIG. 6","FIG. 4","FIG. 6"],"b":["115","15"]},"Any number and variety of messages may be defined for a particular trading environment, and only a subset of messages are illustrated herein. Moreover, each message is preferably self-describing such as may be implemented using XML documents as the message carrier. This enables new message types to be defined quickly and easily without impacting existing message types nor requiring changes to components. Typically, each subscriber takes some action in response to hearing a message to which it subscribes.","Table 1 below includes an exemplary subset of EMA bus messages used in an implementation of the present invention. In table 1, the column labeled \u201csubject\u201d includes a name given to a particular message type, the column labeled \u201cpublisher\u201d identifies the component that generates the bus message, \u201csubscriber\u201d indicates the components that receive or subscribe to that message type, and the \u201ccomments\u201d column provides a brief description of the purpose of the message types. Messages including a <clusterid> designation indicate messages that, when contract clustering is used, will be specifically addressed to subscriber components associated with a particular cluster ID. In these cases, a unique instance of the subscribing component exists for each unique contract cluster ID. When contract clustering is not used, the \u201cclusterid\u201d value is not required in the message.",{"@attributes":{"id":"p-0081","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Subject","Pub","Sub","Comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\/cpt\/orderrequest\/<clustid>","V","RAV","A new order from the"]},{"entry":[{},{},{},"Validator to RAV"]},{"entry":["\/cpt\/orderaccept\/<clustid>","RAV","ME","RAV accepts, sends to ME"]},{"entry":["\/cpt\/orderreject","RAV","V","RAV rejects, sends to V."]},{"entry":["\/cpt\/orderactive\/<clustid>","ME","Persist","M.E. accepted new order, sends to "]},{"entry":[{},{},{},"Persist"]},{"entry":["\/cpt\/error\/order","ME","V","M.E. rejects order due to"]},{"entry":[{},{},"RAV","error (dupe order ID, etc.)"]},{"entry":[{},{},"Ops","RAV listens to undo order, V"]},{"entry":[{},{},"MDS.","listens to send error to client"]},{"entry":["\/cpt\/marketdata\/level2\/<clustid>","ME","T.P."]},{"entry":["\/cpt\/mds\/level2\/<clustid>","T.P.","MDS"]},{"entry":["\/cpt\/ordernewpersist\/<clustid>","Persist","MDS","Persist has stored the order, sends to"]},{"entry":[{},{},{},"MDS"]},{"entry":["\/cpt\/marketdata\/level1\/<clustid>","T.P.","MDS","T.P. creates Level 1 data, sends to"]},{"entry":[{},{},{},"MDS"]},{"entry":["\/cpt\/mds\/orderupdate","Persist","MDS"]},{"entry":["\/cpt\/tradepersist","Persist","RAV"]},{"entry":[{},{},"MDS"]},{"entry":[{},{},"Trans"]},{"entry":["\/cpt\/reallocationsrequest","V","RAV"]},{"entry":["\/cpt\/reallocationsaccept","RAV","Persist"]},{"entry":["\/cpt\/reallocationsreject","RAV","V"]},{"entry":["\/cpt\/reallocationspersist","Persist","Trans"]},{"entry":[{},{},"MDS"]},{"entry":["\/cpt\/trades","ME","Persist"]},{"entry":["\/cpt\/setcontractstates","S.G.","Persist","Sending state group updates"]},{"entry":[{},{},{},"to be persisted"]},{"entry":["\/cpt\/me\/setcontractstates","Persist","ME","After persisting state change,"]},{"entry":[{},{},{},"sent to ME"]},{"entry":["\/cpt\/tp\/setcontractstates","ME","T.P.","State group updates after ME"]},{"entry":[{},{},"RAV","has done with them"]},{"entry":["\/cpt\/mds\/setcontractstates","T.P.","MDS"]},{"entry":["\/cpt\/setsystemstates\/eod","S.G.","RAV"]},{"entry":["\/cpt\/setsystemstates\/sod","S.G.","T.P."]},{"entry":["\/cpt\/orderinactivenew","V","Persist","New (inactive) order, straight to persist"]},{"entry":["\/cpt\/ordermodify","V","RAV","Modified order"]},{"entry":["\/cpt\/ordermodifyrequest","RAV","ME"]},{"entry":["\/cpt\/ordermodified","ME","Persist"]},{"entry":["\/cpt\/orderinactivemodify","V","Persist","Modified (inactive) order,"]},{"entry":[{},{},{},"straight to persist"]},{"entry":["\/cpt\/orderspull","V","ME","Cancel\/deactivate"]},{"entry":["\/cpt\/orderspulled","ME","Persist"]},{"entry":[{},{},"RAV"]},{"entry":["\/cpt\/ordersinactivepull","V","Persist","Cancel an inactive order,"]},{"entry":[{},{},{},"straight to persist"]},{"entry":["\/cpt\/ordermodifyreject\/rav","RAV","V"]},{"entry":["\/cpt\/ordermodifyreject\/me","ME","V"]},{"entry":[{},{},"RAV"]},{"entry":["\/cpt\/orderspullreject","ME","V"]},{"entry":["\/cpt\/mds\/positionupdate","Persist","MDS"]},{"entry":["\/cpt\/voidtrade","V","Persist"]},{"entry":["\/cpt\/voidpersist","Persist","RAV"]},{"entry":[{},{},"MDS"]},{"entry":[{},{},"Trans"]},{"entry":["\/cpt\/tp\/voidpricereport","Persist","T.P."]},{"entry":["\/settlements","TMS","ME"]},{"entry":[{},"ESS","Persist"]},{"entry":[{},{},"TP"]},{"entry":["\/cpt\/lockdown","Monitor","V"]},{"entry":["\/cpt\/unlock","Monitor","V"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":"Key:"},{"entry":"V = Validator Component"},{"entry":"RAV = RAV Component"},{"entry":"M.E. = Match Engine Component"},{"entry":"T.P. = Ticker Plant Component"},{"entry":"Persist = Persist Component"},{"entry":"S.G. = State Generator"},{"entry":"MDS = Market Data Services Component"},{"entry":"T.M.S. = Trade Management System"}]}}}}},"Referring to , validator  publishes a message (e.g., an \u201cAddOrder\u201d message described above) upon validating a received order request. Validator  also publishes messages related to order changes such as order volume changes and order price changes in response to receiving validated order change requests. Validator  also publishes a message in response to a new trigger. Although not shown in , validator  also subscribes to various messages relating to order rejections by components such as RAV  and match engine .","RAV component  subscribes to messages relating to new orders, order changes, and executed trades. RAV component  publishes messages related to new orders that satisfy the risk allocation valuation rules implemented by RAV component . With respect to order changes and executed trades, RAV component  uses the information to adjust the information it maintains about each account, such as position sizes and margin information, and the like. In the case of an executed trade, for example, RAV  does not have a defined role in accepting or rejecting a trade that has already been executed. In the particular embodiment, RAV  receives trade information from messages generated by persist component  and so will not be aware of trades handled by the trading system until they are persisted. In some embodiments, RAV  may also be coupled to clearing processes  to determine whether trades executed outside the trading system will be accepted\/rejected for clearing.","Match engine  subscribes to messages related to new orders, order changes, price changes, new triggers, high\/low limits and settlements in the example. Match engine publishes information related to executed trades as well as market data related to the trading that goes on within the contract cluster corresponding to the particular match engine instance. Leg pricing component  is instantiated within match engine  as needed.","Ticker plant  and publish component  subscribe to messages containing information that they use to prepare market data. In general, ticker plant  may subscribe to messages immediately, before they are persisted whereas publish component  subscribes to messages related to persisted events. In this manner, publisher , which may provide market data to third party vendors, does not publish any market data related to or derived from orders, trades, or other events that have not yet been made persistent.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 5","FIG. 4"],"b":["311","311","313","313","315","315","313","311","315","313","315","317","319"]},"Referring to , when match engine  makes a trade, a trade message is published to subscribers including ticker plant  and persist component . Persist component  stores information about the executed trade in database , and updates corresponding order information that was previously stored for the orders related to the executed trade. Persist component  publishes a message that is subscribed to by both publish component  and RAV component . Publish component  uses the trade message to compile market data for distribution. RAV component  uses the trade message to update account records for use in assessing subsequent orders made on the same account.","It can be appreciated that the rich and flexible messaging implemented by EMA bus  enables the various processes involved in a trading system to be implemented as a plurality of discrete, special-purpose components. Failure of any one component will not cause a failure of other components in the system. This allows the other components to continue operation, or to shut down and restart gracefully so that trade information is not corrupted.","Although the invention has been described and illustrated with a certain degree of particularity, it is understood that the present disclosure has been made only by way of example, and that numerous changes in the combination and arrangement of parts can be resorted to by those skilled in the art without departing from the spirit and scope of the invention, as hereinafter claimed."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 6","FIG. 4"]}]},"DETDESC":[{},{}]}
