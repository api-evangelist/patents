---
title: High speed subscribe-and-alert service using content graphs
abstract: Described are techniques used in connection with subscribe and alert services as may be embodied in a subscription system. The subscription system uses a preprocessor for preprocessing subscription and notification messages prior to submission to the subscription/publication server. The preprocessor outputs a preprocessed message including one or more identifiers categorizing an input subscription or notification message. The preprocessor uses a content graph to produce the preprocessed message. The subscription system uses a content based routing system with a tree-like topology to process preprocessed subscriptions and notifications using content graphs maintained at each node in the system. Also described is a loss detection technique using sequence numbers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07680951&OS=07680951&RS=07680951
owner: Massachusetts Institute of Technology
number: 07680951
owner_city: Cambridge
owner_country: US
publication_date: 20040908
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","STATEMENT OF GOVERNMENT INTEREST","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENT(S)"],"p":["This application claims priority to U.S. Provisional Patent Application No. 60\/575,905, filed on Jun. 1, 2004, which is incorporated by reference herein.","The invention was made with Government support under contract No. F30602-00-2-0553 by the Department of the Air Force. The Government has certain rights in the invention.","1. Technical Field","This application generally relates to event notification, and more particularly to event notification as may be used in connection with a subscription service.","2. Description of Related Art","Computer systems may be used in performing a variety of different tasks and operations. One or more computer systems may be connected using a network such as the Internet. The Internet may be used to find information of interest about a selected topic. Search engines, such as Google, may be used to return information in accordance with a search query. However, such queries provide a snapshot of information in response to a query at a particular point in time and do not alert users when subsequent new information may be available.","Subscription systems or event notification systems may be used to notify or report information to a subscriber from an information provider when certain events occur. Such systems in use today include, for example, subscription to weather service notifications, stock market prices, and the like. Users or subscribers sign up to receive information of interest. When an event of interest occurs, the subscribers may be sent an electronic notification.","One type of existing subscription service is a unicast subscription system such as, for example, Ebay, Amazon, and Google. Notifications are sent to users about selected topics of interest or items as selected by the users or subscribers. In the unicast approach, subscribers send messages to a single information provider. However, existing unicast subscription services may be unable to efficiently distribute notifications to a large number of subscribers. Thus, when there are a large number of notification messages to be sent, the subscription service may experience an unacceptable performance degradation.","Another existing approach, the single-identifier multicast subscription system, is based on the IP multicast communication model. Using multicast, a subscriber sends her subscription to a provider. When the provider is ready to broadcast an event or send out a notification, the provider addresses each packet to a single IP multicast address or channel. Upon receiving a packet, the router looks up the identifier and forwards the packet to selected neighboring routers or subscribers according to its router notification tables. The multicast subscription service uses a topology of one or more event routers to disseminate notifications. The event routers may be arranged, for example, in an overlay network. An identifier may be associated with a particular subject or category of information about which a subscriber may receive information. A difficulty may occur if a subscriber chooses to request information from overlapping subscription categories each represented by an identifier. As an example of the foregoing, a subscriber may want to receive notification for all baseball games between the Boston Red Sox and any New York baseball team. Rather than use 3 subscription category identifiers (one each for \u201cbaseball\u201d, \u201cRed Sox\u201d and \u201cNew York\u201d), a subscription service may have to use, for example, 7 group identifiers to represent the possible subscription category intersections and avoid sending out messages or notifications to the subscriber that do not fit the selected subscription criteria. The number of category identifiers increases with the number of subscription categories and associated category subscription intersections.","Another approach based on the IP multicast model may be referred to as a content-based multicast system. In the content-based system, the forwarded messages are based on message text rather than relying on a single-identifier attached to each message. Existing content-based systems may use subscription requests and notifications based on attribute-value pairs (e.g., TYPE=BASEBALL, GAME=CUBS v. MARLINS, DATE=OCTOBER 20). Such systems may impose a structure on the message and may require modifications to many components (such as each of the routers) of the system to support multiple message formats or changes to an existing format. In comparison to the identifier multicast-based system for example, additional computation time may be used to parse the strings of the message text decreasing the efficiency of the content-based multicast approach.","Thus, it may be desirable to have an efficient and flexible system for use in event notification applications that overcomes one or more of the problems with the existing techniques. It may be desirable to have a single system for event notification in connection with multiple information providers in which the system may be easily adjusted to accommodate varying subscriber and notification formats.","In accordance with one aspect of the invention is a method for processing messages in a subscription system comprising: preprocessing a message using a content graph to produce a preprocessed message including an identifier in accordance with said message; and submitting said preprocessed message to a server for processing wherein said server performs at least one action in accordance with said identifier included in said preprocessed message. The message may be a subscription message and said preprocessed message may include an identifier matching said subscription message. The server may include a plurality of routers in a hierarchical arrangement, and the method may further comprise: receiving said preprocessed message at a router; storing at said router information in a content graph of said router information about a subscription in accordance with said preprocessed message; and forwarding said preprocessed message to one or more upstream routers at a higher level in said hierarchical arrangement than said router in accordance with a forwarding table of said router. The method may also include adding a node to said content graph of said router if there are no nodes in said content graph corresponding to said subscription. The router may communicate with another upstream router to obtain graph information about where to add said node to said content graph. The router may communicate with said preprocessor to obtain graph information about where to add said node to said content graph. Each router in said hierarchical arrangement may include a content graph of said each router including information about preprocessed subscription messages received from a subscriber and other routers connected to said each router in said hierarchical arrangement. A preprocessor may add a node to a preprocessor content graph of said preprocessor each time a received message does not have a corresponding node in said preprocessor content graph. Information about said node may be obtained from preconstructed tables including graph information about a categorical hierarchy. The message may be a notification message and said preprocessed message may include at least one identifier matching said notification message. The preprocessed message may include a set of one or more nodes in said content graph representing lowest nodes in said content graph that cover said notification message, said content graph being a hierarchy of nodes representing relationships between different sets of elements, wherein each node in said set matches said notification message and no node in said set is an ancestor of any other node in said set. The preprocessed message may include a set of one or more nodes in said content graph representing all nodes in said content graph that cover said notification message, said content graph being a hierarchy of nodes representing relationships between different sets of elements. The server may include a plurality of routers in a hierarchical arrangement, and the method may further comprise: receiving at a first router that is a root of said hierarchical arrangement said preprocessed message; and forwarding said preprocessed message to any downstream neighbors of said first router at a lower level in said hierarchical arrangement than said root in accordance with a content graph of said first router. The neighbors of said first router may include other routers and subscribers, said other routers being connected to said first router in accordance with a subscription list of said content graph of said first router. The method may also include modifying a header of a notification message forwarded in said forwarding in which said identifier is replaced with another identifier determined in accordance with a neighbor receiving said notification message. The other identifier may be predetermined prior to receiving said preprocessed message by said root. The preprocessed message may include a sequence number uniquely corresponding to the notification message, said notification message being associated with a node in a categorical hierarchy wherein said node in said categorical hierarchy has a sequence number determined in accordance with a number of notification messages received by said server covering said node, each node in said categorical hierarchy having its own sequence number. The method may also include receiving by said first router a request from a subscriber for a table of current sequence numbers for a requested node and descendants of said requested node in said content graph of said first router; and sending to said subscriber said table, wherein said subscriber uses said table to determine a missed notification message in accordance with consecutive sequence numbers for each node described by said table. In response to receiving a notification message, said first router may increment a sequence number of each of one or more nodes in said content graph corresponding to said notification message.","In accordance with another aspect of the invention is a computer program product for processing messages in a subscription system comprising code that: preprocesses a message using a content graph to produce a preprocessed message including an identifier in accordance with said message; and submits said preprocessed message to a server for processing wherein said server performs at least one action in accordance with said identifier included in said preprocessed message. The message may be a subscription message and said preprocessed message includes an identifier matching said subscription message. The server may include a plurality of routers in a hierarchical arrangement, and the computer program product may further comprise code that: receives said preprocessed message at a router; stores, at said router, information in a content graph of said router information about a subscription in accordance with said preprocessed message; and forwards said preprocessed message to one or more upstream routers at a higher level in said hierarchical arrangement than said router in accordance with a forwarding table of said router. The computer program product may include code that adds a node to said content graph of said router if there are no nodes in said content graph corresponding to said subscription. The router may communicate with another upstream router to obtain graph information about where to add said node to said content graph. The router may communicate with said preprocessor to obtain graph information about where to add said node to said content graph. Each router in said hierarchical arrangement may include a content graph of said each router including information about preprocessed subscription messages received from a preprocessor may add a node to a preprocessor content graph of said preprocessor each time a received message does not have a corresponding node in said preprocessor content graph. Information about said node may be obtained from preconstructed tables including graph information about a categorical hierarchy. The message may be a notification message and said preprocessed message may include at least one identifier matching said notification message. The preprocessed message may include a set of one or more nodes in said content graph representing lowest nodes in said content graph that cover said notification message, said content graph being a hierarchy of nodes representing relationships between different sets of elements, wherein each node in said set matches said notification message and no node in said set is an ancestor of any other node in said set. The preprocessed message may include a set of one or more nodes in said content graph representing all nodes in said content graph that cover said notification message, said content graph being a hierarchy of nodes representing relationships between different sets of elements. The server may include a plurality of routers in a hierarchical arrangement, and the computer program product may further comprise code that: receives at a first router that is a root of said hierarchical arrangement said preprocessed message; and forwards said preprocessed message to any downstream neighbors of said first router at a lower level in said hierarchical arrangement than said root in accordance with a content graph of said first router. The neighbors of said first router may include other routers and subscribers, said other routers being connected to said first router in accordance with a subscription list of said content graph of said first router. The computer program product may also include code that: modifies a header of a notification message forwarded in said forwarding in which said identifier is replaced with another identifier determined in accordance with a neighbor receiving said notification message. The other identifier may be predetermined prior to said preprocessed message being received by said root. The preprocessed message may include a sequence number uniquely corresponding to the notification message, said notification message being associated with a node in a categorical hierarchy wherein said node in said categorical hierarchy has a sequence number determined in accordance with a number of notification messages received by said server covering said node, each node in said categorical hierarchy having its own sequence number. The computer program product may include code that: receives by said first router a request from a subscriber for a table of current sequence numbers for a requested node and descendants of said requested node in said content graph of said first router; and sends to said subscriber said table, wherein said subscriber uses said table to determine a missed notification message in accordance with consecutive sequence numbers for each node described by said table. In response to receiving a notification message, said first router may increment a sequence number of each of one or more nodes in said content graph corresponding to said notification message.","Referring now to , shown is an example of an embodiment of a computer system according to the present invention. The computer system  includes a server system  connected to host systems -through communication medium . In this embodiment of the computer system , the N hosts -may communicate with the server system , for example, to send and receive information. In an embodiment that is described in following paragraphs, the server system  may include a subscription\/publication system that communicates with one or more of the hosts -. The communication medium  may be any one of a variety of networks or other type of communication connections as known to those of ordinary skill in the art. The communication medium  may be a network connection, bus, and\/or other type of data link, such as a hardwire, wireless, or other connection known in the art. For example, the communication medium  may be the Internet, an intranet, or other non-network connection(s) by which the host systems -may access and communicate with the server system , and may also communicate with other host systems included in the computer system .","Each of the host systems -and the server system  included in the computer system  may be connected to the communication medium  by any one of a variety of connections as may be provided and supported in accordance with the type of communication medium .","It should be noted that the particulars of the hardware and software included in each of the host systems -, as well as those components that may be included in the server system , are described herein in more detail, and may vary with each particular embodiment. Each of the host computers -may all be located at the same physical site, or, alternatively, may also be located in different physical locations. Examples of the communication medium that may be used to provide the different types of connections between the host computer systems and the server system of the computer system  may use a variety of different communication protocols such as SCSI, Fibre Channel, or GIGE (Gigabit Ethernet), and the like. Some or all of the connections by which the hosts and server system  may be connected to the communication medium  may pass through other communication devices, such as switching equipment including, without limitation, a phone line, a repeater, a multiplexer or even a satellite.","What will now be described is an embodiment in which the server system  may include a subscription server and other components of a publication\/subscription system. As used herein, the subscription\/publication system may also be referenced as a subscription system. A user or client, such as on one of the host systems -, may subscribe to the subscription server to receive electronic notifications for any one or more different types of events. For example, a user may subscribe to receive weather notification or alert information, stock information, sports information, and the like. The user enters notification or event criteria, such as identifying events of interest. Upon the occurrence of events that meet the user criteria, the subscription server sends the user a notification message.","Referring now to , shown is a data flow diagram of different components that may be used within the computer system  of . The illustration  includes subscription and notification messages , a preprocessor , data storage areas  and , a preprocessed message , and a subscription\/publication system or subscription server . In connection with an example embodiment that is described in more detail in following paragraphs, subscription and notification messages  may be submitted as input to the preprocessor . The preprocessor  produces as an output a preprocessed message  having a formatted header and associated message content. The preprocessed message  may then be submitted to the subscription server . The preprocessor  may use and store information from data storage area . The data storage areas  and  utilized, respectively, by the preprocessor  and subscription server  may be any one or more different types of storage areas and devices well-known to those of ordinary skill in the art such as, for example, memory or a disk included in a computer system upon which the preprocessor and\/or subscription server reside.","In this embodiment, the preprocessor  may recognize and process any one or more different types and formats of subscription and notification messages . Additionally, an embodiment may have more than one preprocessor in accordance with the number and types of message formats in each embodiment. For example, a different preprocessor  may be used in connection with performing preprocessing on each unique subscription and notification message format. Each of the preprocessors that may be used in an embodiment in connection with multiple formats may produce preprocessed messages of a same uniform format used as input for the subscription server . In one embodiment, subscription and notification messages may be in any one of a variety of different formats including, for example, attribute-value pairs.","As will be appreciated by those of ordinary skill in the art, each preprocessor included in an embodiment may use any one of a variety of different parsing techniques to parse the messages . As will be described in more detail in following paragraphs, the formatted header of a preprocessed message may include formatted forwarding information to serve as the basis for forwarding messages within the subscription server .","With reference to , the subscription system executing and residing on a server system  in one embodiment may include one or more preprocessors , the subscription server  using the associated data storage areas  and .","A content graph may be used in an embodiment described herein to show how topics or subscription categories relate to one another in a subscription system. A content graph may be characterized as a directed acyclic graph or digraph representing a partial ordering between subscriptions. Each node in a graph represents a set of items. Each edge in the graph represents the relationship between two of these sets. Such content graphs are used in the embodiment described herein by the subscription server . The preprocessor  classifies the different subscription and notification messages  prior to being submitted to the subscription server  in accordance with a unique identifier associated with each node in the content graph. By using a preprocessor, the subscription and notification messages may be mapped to particular identifiers representing the different nodes in the content graph in a uniform fashion. The preprocessed messages may have a same uniform format for submission to the subscription server.","The unique identifier determined by the preprocessor may be included in the formatted header of the preprocessed message , and may be used in forwarding or routing messages within the subscription server . It should be noted that an embodiment may provide for preprocessing messages immediately before submitting them to the subscription server  as well as preprocessing messages for a time period prior to actual submission to the subscription server . The attribute-value pairs as will be used in following paragraphs are for the purposes of illustration of the techniques herein and should not be construed as a limitation of the different types of inputs and formats that may be included in an embodiment.","Use of the preprocessor as described herein removes some of the complexity from the subscription server and embodies it in the preprocessor . The one or more preprocessors  that may be included in an embodiment handle the different types of message formats that may used in a system  of .","Referring now to , shown is an example  of a representation of a partial ordering of baseball subscriptions that may be expressed as attribute-value pairs. The representation  is an example of one type of hierarchy in connection with representing the relationships between topics or categories used in a subscription system.","The example  is an attribute-value pair representation that may be expressed, for example, in XML format when submitting subscription and notification messages. Other types of hierarchical arrangements that may be used in connection with representing categorical relationships may include, for example, keyword hierarchies, object oriented hierarchies, and the like.","Referring to element , nodes closer to the top of the structure, such as node  with \u201cCategory=Baseball\u201d, represent more general topics or categories. The further towards the bottom of the structure a node is located, the more specific the category. An arrow that points from a first node of a first subscription topic to a second node of a second subscription topic indicates that the first subscription topic covers a superset of notifications of the second. In other words, a parent node in the representation  may be thought of as a superset of its child node or nodes. If there is a path in the graph of  between any two nodes from node A to B, then node A is a superset of the node B and any intervening nodes in the path to B.","The representation  of  may be stored and used by the preprocessor  in connection with classifying a subscription or notification message . As an output, the preprocessor  may include in the formatted header of  (from ) a numerical value or other unique node identifier associated with the node in the representation  corresponding to particular topics included in a subscription or notification message . In , the unique node identifier corresponding to each node, as may be determined by the preprocessor, is denoted, for example, as element  located to the left of each node in . Each node identifier is unique with respect to all other node identifiers in the representation .","An embodiment may include multiple hierarchical representations and node identifiers are unique with respect to each representation. A representation may exist for each set of related subscription categories. For example, a first representation may be used by a preprocessor for baseball subscriptions, a second different representation may be used in connection with music subscriptions, and the like.","Referring now to , shown is a representation  of one or more subscription messages  and notification messages . In the representation , the subscriptions  and the notification  are in the form of attribute-value pairs. The subscriptions  included in the left hand portion of  of  may represent four separate subscriptions submitted, for example, by multiple users to a subscription server . Prior to be submitted to the subscription server , each of the subscriptions  are first submitted to the preprocessor  for classification. For example, referring to subscription , the preprocessor  may produce a preprocessed subscription message  that includes in the formatted header portion a node identifier \u201c\u201d corresponding to node  of . Similarly, each of the remaining subscriptions of  also have corresponding numerical node identifiers.","The preprocessor  parses the input of the subscription and determines the one or more nodes in the representation  corresponding to that particular subscription. The formatted header includes a corresponding numerical value or token for the corresponding node or nodes within the content based graphical representation as shown in . The subscription server  may then use the unique node identifier corresponding to the particular node within the graph  for processing described in following paragraphs. Similarly, the notification  may include attribute-value pairs that are submitted to the preprocessor . The preprocessor  may also determine one or more node identifiers corresponding to the notification message . The notification message may be, for example, a result from a baseball game as indicated by . The node identifier is included in the preprocessed notification message produced as an output by the preprocessor  for the notification message . The subscription server  may then take as an input the preprocessed notification message and may accordingly generate notification messages for the three subscriptions as indicated by the arrows , , and in . In this example, the notification message  has an associated node identifier of \u201c\u201d. With reference to the hierarchy of  and as will become apparent after presentation of techniques described in following paragraphs, the notification message with a node identifier of \u201c\u201d is sent to all subscribers of \u201c\u201d and any of node \u201c\u201ds ancestors (, , , and ). With reference to , notification  causes notices to be sent for all subscriptions included in  except for node . Subscription has a node identifier representing items not included in the foregoing notification set in accordance with the representation  of . Additional detail of how a preprocessor determines one or more node identifiers for a given preprocessed message is described in more detail in following paragraphs.","In connection with a subscription message, a preprocessor may be included in an embodiment which returns a single node which exactly matches the subscription. For a notification message, the preprocessor may determine all nodes belonging to the superset graph for the notification. The superset graph includes all node in the graph that cover the notification which includes a node matching the notification and all ancestors of that matching node. In one embodiment all these nodes may be added to the preprocessed message header. In the foregoing, the preprocessed notification message header lists all node identifiers whose subscribers are to receive the notification.","In another alternate embodiment, the preprocessor may return a single node identifier corresponding to a notification message rather than a list of all nodes in the superset for the notification. In the alternate embodiment, the preprocessor may return for a notification message the set of lowest nodes in the graph that match the subscription. This set maintains the following invariants: all nodes in the set match the notification and no node in the set is an ancestor of any other node. It should be noted that this set may contain multiple nodes in the case where a notification is covered by multiple subscriptions and the subscriptions do not completely cover one another. In the case where the preprocessor returns only the lowest node(s) covering the notification, the routers determine the ancestors of the nodes in the notification header match the notification. In the case where the preprocessor determines all nodes covering the notification, all ancestors are explicitly included in the header and the routers do not need to determine the ancestors as with the latter.","It should be noted that whether one or more node identifiers are included in the formatted header  may vary in accordance with the particular implementation of the preprocessor and subscription server . What will be described is an embodiment in which the preprocessor determines a single node identifier for each subscription and notification message. It should be noted that also discussed elsewhere herein are alternate embodiments in which more than one node identifier may be returned as a result of preprocessing.","Referring back to , the preprocessor  and\/or the subscription server  may be included in the server system  of the computer system  of . The subscription and notification messages  may be sent as an input from one or more of the host systems -to the server system  over connection . As an output, the server  may produce a preprocessed message  returned to the host system which issued the original subscription or notification message. Subsequently, the preprocessed message may again be transmitted over connection  to the server system  to the subscription server  for processing.","Referring now to , shown is an example  of one embodiment of an architecture for the subscription server  and how preprocessed messages flow within the subscription server . The representation  in this embodiment includes a multicast subscription server with an overlay topology of routers illustrated in a tree-like structure. The tree-like structure includes a root or rendezvous point A connected to one or more levels of other routers within the subscription server. Incoming preprocessed notification messages, such as , are initially input to a rendezvous point A which is the root of the tree and are forwarded downstream toward the leaf routers, such as routers D, E, F and G. In contrast, preprocessed subscription messages, such as SUB, SUB, SUB and SUB, are submitted to one or more of the routers and flow upstream toward the rendezvous point A of the representation .","Different processing techniques that will be described in following paragraphs are used in connection with propagating the data and information from the preprocessed notification messages and preprocessed subscription messages. Information is forwarded through the representation  using forwarding tables that contain content graph data included in the preprocessed messages. The information used in the routing of messages through the representation  is based on the node identifiers or tokens included in the formatted header  of the preprocessed message as shown in .","It should be noted that each of the routers and the rendezvous point router may be included in a single server system  as illustrated in connection with . Each of the different routers may be located physically on one or more different processors or server machines included in  of . An embodiment may use work load distribution techniques in connection with designating which router handles different subscription submissions. For example, in one embodiment, the preprocessed subscription message returned by the preprocessor to a client or user may also include a designation as to which router the user is directed for processing the returned preprocessed subscription message.","As will be described in following paragraphs, the routers included in the representation  use content graphs to store subscriptions and to disseminate notification messages to the appropriate subscribers.","Referring now to , shown is a flowchart  of processing steps that may be executed in an embodiment in connection with a subscription message. The steps of flowchart  summarize the data flow for a subscription previously described in connection with . At step , a subscriber sends a subscription message to the preprocessor. At step , the preprocessor creates and returns a preprocessed subscription message to the subscriber. At step , the subscriber submits the preprocessed subscription to a router within the subscription server. At step , the preprocessed subscription message is forwarded up the tree of routers towards the rendezvous point.","Referring now to , shown is a flowchart  of processing steps that may be performed in connection with a notification message. At step , the notification provider submits the notification message to the preprocessor. At step , the preprocessor creates and returns preprocessed notification message to the notification provider. At step , the notification provider submits the preprocessed notification message to the rendezvous point or router within the subscription server. A preprocessed notification at step  is then forwarded downstream from the rendezvous point within the router tree and notification messages are sent out to subscribers.","Referring now to , shown is an example of an embodiment of a host system . It should be noted that although a particular configuration of a host system is described herein, other host systems -, and one or more hardware components included in the server system , may also be similarly configured. Additionally, it should be noted that each host system -and the server system  may have any one of a variety of different configurations including different hardware and\/or software components. Included in this embodiment of the host system is a processor , a memory, , one or more I\/O devices  and one or more data storage devices  that may be accessed locally within the particular host system. The data storage devices  may include a single device, such as a disk drive, as well as a plurality of devices in a more complex configuration, such as with a storage area network and the like. Data may be stored, for example, on magnetic, optical, or silicon-based media. Each of the foregoing may communicate using a bus or other communication medium . Each of the foregoing components may be any one or more of a variety of different types in accordance with the particular host system ","Each of the processors included in the server system  and host computer systems -may be any one of a variety of proprietary or commercially available single or multi-processor system, such as an Intel-compatible x86 processor, an IBM mainframe or other type of commercially available or proprietary processor, able to support incoming and outgoing traffic in accordance with each particular embodiment and application.","Instructions may be executed by the processor  to perform a variety of different operations. As known in the art, executable code may be produced, for example, using a linker, a language processor, and other tools that may vary in accordance with each embodiment. Instructions and data may also be stored on a data storage device , ROM, or other form of media or storage. The instructions may be loaded into memory  and executed by processor  to perform a particular task, such as those described herein in connection with the subscription system and its components.","In one embodiment, an operating system, such as the Windows operating system by Microsoft Corporation or the LINUX operation system, may reside and be executed on one or more of the computer systems included in .","Code may be executed by the processor, such as the one or more processors that may be included in an embodiment of the server system  and host systems -, to perform processing steps described herein of .","The preprocessor, rendezvous point, and\/or other routers may store the entire content graph or portions of the content graph depending on the embodiment. What will be described is an embodiment in which each of the preprocessor and routers include those portions of the content graph in accordance with the particular subscriptions at a point in time. It should be noted that as used herein, a particular routers' \u201cneighbor\u201d may be a subscriber, or it may also be another router within the representation .","The routers of  may include forwarding tables designating how to route information within the subscription server. Additionally, in this embodiment, the routers store a portion of the content graph based on the particular subscription requests received by each router. Similarly, the preprocessor may include only those nodes for subscriptions it has preprocessed and additional nodes are added as new subscription requests are preprocessed. As pointed out above, an embodiment may alternatively store the entire content graph in the preprocessor and\/or routers independent of whether a particular subscription request has been received by the component. However, for the purposes of illustration of the techniques described herein, a minimal or reduced content graph may be stored and used by each of the routers and preprocessors in accordance with received messages.","Referring now to , shown is a representation  of the particular tables that may be stored within the routers D and B of the subscription server  from . In this example, router D may include information from . Router D may include a forwarding table  indicating which is the next hop (B) in the path to the designated rendezvous point upstream for forwarding subscription messages upstream. Additionally, the router D may include a content graph as represented by  in accordance with the particular subscriptions submitted through router D. In this example, router D has three subscription messages for SUB, SUB and SUB. The preprocessed subscription message for SUB indicates that node identifier  corresponds to that particular subscription request. Similarly, the preprocessed subscription message for SUB corresponds to node identifier , and the preprocessed message for SUB corresponds to node identifier . Accordingly, nodes are included in the content graph . The relationship between these three subscription message categories in a hierarchal representation is shown in  by the edges connecting the nodes. Additionally, each node in the reduced or minimal content graph  may include a list of subscribers for that particular node. For example, node  in  has SUB as a subscriber, node  has SUB as a subscriber, and node  has SUB as a subscriber. The content graph and subscription lists may be used in forwarding notification messages to subscribers.","Element  includes information that may be stored within router B. Router B includes forwarding table  indicating that the next hop on the path to the rendezvous point A is the rendezvous point itself. Router B may also include the content graph representation  indicating which elements are particular subscribers with respect to router B. In the representation , router B has SUB as a neighbor or subscriber for node  content. Additionally, router B has a router D as a neighbor to which it forwards notification messages for particular node identifiers ,  and .","As will be described in more detail in following paragraphs, the routers use the information in the minimal or reduced content graph such as  and  to determine which subscribers receive notification messages. Similarly, each of the routers also use forwarding information, such as included in  and , to determine where to forward subscription information upstream toward the rendezvous point.","Referring now to , shown is a representation of information that may be included within the rendezvous point  and the preprocessor  in this embodiment. The preprocessor  includes the appropriate attribute-value information and mapping for the particular node identifier returned by the preprocessor for a given subscription or notification message. As will be described in following paragraphs, the rendezvous point A or other routers located higher upstream from a router may be queried as part of processing to obtain information of how particular nodes are to be included in a content graph when each router stores a minimal or reduced content graph.","It should be noted in an embodiment in which each of the different routers store a complete content graph rather than a reduced or minimal graph as illustrated in , the routers do not need to query the rendezvous point A regarding graph information, for example, when adding a node to the partial content graph maintained by a router.","As described above, the content graph may be characterized as including subscription content and information that changes dynamically in accordance with the subscriber requests and topics. In an alternative embodiment, the content graph maintained at a rendezvous point and\/or other routers may be a static representation of a subscription topic area, such as a complete hierarchical representation of topics which does not change in accordance with the subscriptions actually received. The static content graph may be initially input and may be changed when there is a change to the static content source, such as when an administrator makes an update or modification. It should be noted that a preprocessor may also include a static representation of information used to determine node identifiers. As described above, the preprocessor may also be characterized as a dynamic preprocessor which includes graph information and creates new identifiers in a hierarchical representation as new subscriptions are processed. An embodiment may also include a preprocessor having some traits of both the static and dynamic preprocessor. For example, the preprocessor may lookup and retrieve content graph identifier information from previously generated tables as new subscriptions are received.","In an embodiment which uses static content graphs in preprocessors, rendezvous points, and\/or routers, it will be appreciated by one of ordinary skill in the art that any one of a variety of different techniques may be used in connection with synchronizing and maintaining consistency between the different content graph information. For example, a primary copy of the content graph information may be maintained with updates propagated for use by each component in the subscription system. An embodiment may wait for a response from each component indicating a successful update to an existing content graph copy maintained locally at each component to the primary copy prior to performing any further processing of subscriptions and\/or notifications.","Referring now to , shown is a representation of processing steps that may be performed in an embodiment in connection with preprocessed subscription and notification messages received by a subscription server using the reduced or minimal content graph in the routers. Element  includes a pseudocode representation of processing steps that may be performed by a router in the subscription server in response to receiving a preprocessed subscription message. The steps described by the pseudocode representation of  represent the processing steps that may be performed by a router in response to receiving a preprocessed notification message. It should be noted that as described herein, each of the subscription and notification messages have been previously processed by the preprocessor also described herein. In the representations of  and  of , a \u201cneighbor\u201d of a router performing the processing may be either another router or a subscriber. When a subscription is received by a router, a determination is made as to whether the node identifier of the subscription is already included in the content graph as maintained by the router. If not, that particular router obtains graph information at step  in order to properly insert the new node into the content graph. How a particular router may obtain the necessary graph information, such as the edge information describing the particular relationship between the new node to be added and the existing nodes in the graph, is described in more detail elsewhere herein. In one embodiment, the processing for  to get graph information may include querying routers upstream until one is found that can answer the query. In the worst case, the query is propagated back to the rendezvous point and then passed downstream. The content graph representation also includes a list of particular subscribers to that particular node in the content graph. An element is added to the subscription list for the node corresponding to the subscription at . If the node in the content graph is newly added such that it has no previous subscribers, the subscription is forwarded towards the rendezvous point up the tree of routers at . As the subscription is forwarded upstream toward the rendezvous point, each intervening router also adds the subscription information to its content graph in order for the appropriate information when a notification is received to flow from the rendezvous point to the subscribers by performing the steps of .","When the router receives a notification, the processing steps of the pseudocode representation  may be performed. Processing of the pseudocode representation  provides for finding a superset graph for the notification as represented by . Additionally, a list of neighbors holding subscriptions to nodes in the superset graph are determined by steps of . The router then forwards a copy of the notification to those neighbors. When a neighbor does not hold a subscription to one of the nodes listed in the notification header, the router changes the notification header of the message. Specifically, the router determines the lowest set of nodes in the superset graph for which the neighbor holds a subscription. The router then modifies the header of the notification to specify this set of nodes. If the router did not change the header of the message, the downstream neighbor would receive notification or node identifiers for which it had no subscribers. This translation is performed at step  is described in more detail in following paragraphs.","The foregoing approach using a minimal or reduced content graph eliminates the steps of updating all routers when graph nodes are added to a content graph. Additionally, it reduces the amount of storage required for each router. Routers within the network are updated in accordance with when subscriptions are received.","Referring now to , shown is an example  illustrating the use of the techniques described in connection with  for subscription and notification processing using the minimal content graphs. In other words, the example  illustrates the use of the minimal graph information and associated subscription lists for forwarding notification messages. As illustrated in , subscribers first submit subscriptions to the preprocessors as described elsewhere herein returning a node identifier corresponding to the particular subscription. As illustrated in , the subscriber then submits the preprocessed subscription to a router which in this example is router C. The router forwarding table as included in the content graph for use in connection with forwarding notification messages contains only graph information for subscriptions previously received. In this example, a single subscriber F has a subscription currently for node identifier . Subsequently, subscriber G submits a preprocessed subscription message or node id . Element  indicates the state of the graph with forwarding or subscription information as maintained by router C after router C has updated its subscription information in accordance with subscriber G's new subscription  node identifier . As illustrated in , a notification message  is submitted to the preprocessor which produces as output a preprocessed notification message . This is a notification message for node identifier . In this example, the preprocessor returns the lowest nodes within the graph that match the subscription. As illustrated in , the notification source then submits notification message  to the rendezvous point which then further forwards the notification message down to router C. In , router C finds the given node from the notification message within its graph and traverses the graph upward using the bottom up breath first graph traversal to find subscribers. The router also changes each header of the notification message sent to the various subscribers to reflect the original subscription. For example, in , the notification message is for node identifier . As indicated by the graph, a notification message is sent to all subscribers of the given node  and any of the node 's ancestors ( in this instance). However, rather than send a notification message including the node identifier  for each of the subscribers, the router may change as necessary the header within the notification message to a different node identifier representing a more general categorical classification including the node identifier . In this example , node identifier  represents a more general classification or superset including node identifier . Accordingly, subscriber G's notification message has a modified node identifier to include  rather than . Since subscriber F originally subscribed to node identifier , subscriber F's notification message includes the node identifier  rather than a modified identifier.","Referring now to , shown is an example of a multiple router system using the minimal content graphs and associated subscription lists for forwarding notification messages. Referring to element , a subscriber G submits a preprocessed subscription message to  to router C. As illustrated in , the subscription message  is forwarded up the router tree to the rendezvous point with each router at the level going up the tree adding an entry to its corresponding content graph for the subscription and further forwarding the subscription upstream. Each router adds edges to its graph corresponding to the new subscription node identifier and also adds the new subscription to the list so that alert or notification messages when received are forwarded to the appropriate subscriber. Element  illustrates processing a notification message  received at the rendezvous point. The notification message is forwarded downstream from router or rendezvous point A to router B and then subsequently to router C. Each of the routers looks up the node identifiers in the notification header of the notification message. The router then forwards the notification to the neighbors that have subscribed to the given nodes or any of their ancestors. Additionally, the router performs a translation or modification to the node identifiers listed in the header of each notification message forwarded downstream to correspond to the original subscription. In other words, a router forwarding a message downstream may translate or modify the node identifier of the notification message to that of the recipient neighbor which may be a subscriber or other router downstream.","Referring now to , shown is an example representation of a data structure that may be used in connection with the content graph and associated subscription list for forwarding information within the subscription server. In particular, the representation  includes a hash table . The hash table  includes a column of node identifiers and a column of pointers to associated node descriptors. In the representation , the node identifier may be hashed to a particular entry in the hash table . In this particular embodiment, any one of a variety of different hashing techniques may be used to map a particular node identifier to its corresponding node descriptor vis-\u00e0-vis the hash table. In this example, the descriptor may be a record or other structure.","Element  shows additional detail of one embodiment of a descriptor. The descriptor  for a node includes parent and child node identifiers with respect to the corresponding node in the content graph, a list of subscribers, as well as additional information. This additional information may include, for example, a time stamp value indicating when a resubscription or repeated subscription was last received from an upstream neighbor. As described elsewhere herein, this timestamp value may be used to determine when an upstream neighbor has dropped a subscription. The descriptor  may also include a list of output labels used to determine which neighbors receive a copy of a received notification message. The use of output labels is described elsewhere herein in more detail.","In this embodiment, the node descriptor may be used to store information about the structure of the content graph itself as well as the subscription information. The pointers included for the appropriate parent and children of a particular node such as node identifier  result in a logical representation as also shown in .","In an embodiment, a router may also reduce notification processing time in connection with processing a notification message by determining forwarding information when subscription requests arrive at the routers using output labels, such as of . As described herein so far, routers may find information about superset graphs when they receive notifications for particular sets of node identifiers. Routers then use this superset information to forward notification messages. An embodiment may also have a router precompute as much forwarding information as possible upon receipt of a subscription. In one embodiment which may optionally perform the precomputation of forwarding information for notifications, each node in a router graph may be annotated with output labels. Each output label may contain precomputed information that the router would otherwise gather while processing notifications. Each output label may indicate two elements. The output label may indicate which neighbors should receive copies of a notification marked with the given node identifier. Secondly, the output label may indicate what headers of outgoing notifications should contain.","Output labels may be determined in one embodiment as follows:\n\n","Referring now to , shown is a representation  of additional processing steps that may be performed in an embodiment for output labels. Element  specifies processing that may be performed to set up subscriptions using output labels. When a router receives a subscription for a given neighbor, i, the router finds the node in its graph that matches the subscription node, v, (adding new nodes as needed at ) and adds the subscription for i to v at as described elsewhere herein. The router then checks the output labels of v's descendants to see whether they are affected by the new subscription by performing the steps of . The router first finds the current output labels for v, oat and then finds the set of all of v's descendants, the set Dv at . For each descendant d in Dv, the router checks the descendant's current output labels, oat . If none of the nodes listed in o, is in v's descendant set, Dv, then the router removes all of v's output labels ofrom o, at . The router adds a new output label to d's output labels o, for v and i at . The router changes the output labels for v and i to indicate a single node, v at .","Element  sets forth processing steps that may be performed in connection with notification message processing using the output labels. When the router receives a notification, the router finds the corresponding output labels for each of the nodes in the header notification. Specifically, with processing of  for each node in the header notification, v, and each neighbor i, the router finds the output label o. The router creates a header for neighbor i, hi, by adding the nodes in oto hi at . Once the router has finished processing all the output labels for the given nodes, the router processes all of the headers created at . If the router has a header hi for one of its neighbors, i, the router forwards a copy of the notification to neighbor i with header hi.","Referring now to , shown is an example  illustrating how a graph's output labels change as a series of subscriptions are added to the graph. In element , a content graph of a router with subscription information has one subscription for G for node . In , neighbor F subscribes to node  causing the router to add a label to node . The label indicates that the notification messages matching  should be sent to neighbor F marked with node identifier . In , F subscribes to node . All of node 's descendant's already have labels for F so that the router does not add any labels to these descendants. In , H subscribes to node  causing the router to add node  to its graph and update labels for the new node. The router updates the labels for the new node  by adding a label for neighbor F with node identifier . The router then adds a label to node  for H and a label to node  indicating that messages matching  should be sent to H marked with node identifier . In , H subscribes to node  and the router adds a label to node  indicating that messages matching  should be sent to H with a node identifier . When the router receives a notification message with node identifier , the router will send the message to F, G, and H. Note that the message the router sends to H is marked with two node identifiers,  and .","Referring now to , shown is an example  illustrating how the processing steps described herein for output labels may be used in an embodiment with baseball announcements. Element  illustrates the subscriber submitting a subscription for preprocessing returning a corresponding notification id. In , the router starts with a single subscription from F for node identifier . The router receives a second subscription from G for node identifier  and, in element , adds an output label for node identifier  to its graph. The output label indicates that G should receive notifications for node identifier  and the header should be marked with node identifier . The router then traverses descendants of the given node. For each descendant, the router checks to see whether an output label for the given subscriber exists and, if not, the router creates the appropriate output label. With reference to , the router adds an output label to node identifier  indicating that G should receive copies of this notification marked with node identifier . With reference to , a notification message is submitted for preprocessing and then, in element , is sent to the router rendezvous point. When the notification message is received, the router in  and  finds the given node in its content graph. Instead of traversing the output graph, the router examines the output labels annotated on the given node. For each output label, the router creates a copy of the notification, modifies the notification header as indicated by the label, and then forwards a copy of the notification to the specified subscriber.","Referring now to , shown is another example  using output labels for forwarding with multiple routers. In , the preprocessed subscription is submitted to a router. In , the subscription is propagated upstream toward the rendezvous point. At each level, the router receiving the subscription adds an entry to its table, updates the output labels, and forwards the subscription entry further to the next router. In , a notification message is received at the rendezvous point and propagated downstream through one or more levels of routers. At each level, the router looks up the node identifiers specified in the notification header. If one of the router's neighbors is listed in the output labels for the node, the router forwards a copy of the notification to that node changing the header as indicated by the label.","It should be noted that an embodiment using output labels in forwarding tables may be larger due to the additional information. Subscriptions also may take longer to process due to the output label information determined. However, the longer subscription times are offset by the quicker notification processing time using the previously determined output labels.","It should be noted that rendezvous points as described herein in connection with previous examples maintain a copy of the content graph for a particular name space such as, for example, the baseball categorization example. Content graphs used within an embodiment may be static and complete representations of a subscription topic and change only when, for example, an administrator undertakes to revise the subscription service. As also described herein, an embodiment using the foregoing examples may also store a content graph at a rendezvous point that changes and grows dynamically as subscribers make new requests for subscription topics.","When using the minimal content graphs, processing is performed in an embodiment to provide information to a router when adding a new node to its content graph. In one embodiment, the content graphs at each router and at the rendezvous point may be queried by downstream routers as described herein for additional graph information, such as when a downstream router is adding a new node to its content graph and the routers are using dynamic content graphs. When a router receives a subscription, a router sends the content graph information for the subscription upstream toward the relevant rendezvous point. The router may additionally request a return of information from an upstream router for edge information in order to add a new node for the subscription if needed. Such a request may be in the form of a query for graph information when adding a new node to a content graph at a router as part of step  processing in .","The processing techniques that the routers may use to request and disseminate graph information in an embodiment may be represented in a pseudocode-like fashion in element  of . In element  of , when a router receives a subscription request for a node that is not already within the router's content graph, processing as indicated by  is performed. Within , the router adds the node to a list of nodes that are pending or awaiting graph information. The router then forwards the subscription to its upstream neighbor requesting information about the node. If a router receives a subscription that requests graph information from one of its neighbors, and the router also has no information about the node, the router will propagate the request upstream towards the rendezvous point as indicated at . Additionally, the router will also make a note with any information received should also be propagated downstream. When a router is ready to send information about a node to one of its neighbors, the processing at  may be performed where the router finds the appropriate parent and child nodes for that note of interest and neighbor in the graph. The parent and child of the node are the lowest ancestors of the node to which the neighbor has subscribed. Likewise, the children of the node are the highest descendants of the node to which the neighbor has subscribed. The router then sends graph set-up messages to the neighbor specifying the parents and children of the node. Upon receiving a graph set-up message, processing is indicated by  may be performed. Within , a router adds the node to its graph with edges to the specified parents and children. Finally, the router adds any pending subscriptions to the node using the subscription list as illustrated in connection with other data structures described herein.","Referring now to , shown is an illustration of the processing described herein in connection with graph setup information and propagating information about a content graph between various routers when a partial content graph is used in an embodiment without output labels. Referring to element , subscriber G submits a subscription for node identifier  to router C. Currently, router C does not have any information regarding node  since router C currently has no subscriptions for node . Accordingly, referring to illustration , router C adds a node for node identifier  to the graph with edges pending. In other words, router C will connect the newly added node for  to the appropriate other nodes within its graph upon receipt of additional graph information. The subscription for node identifier  is propagated from router C to router B up the tree towards the rendezvous point. Similarly, router B adds a node to its graph for node identifier  and further propagates the request up to the rendezvous point A. Referring to , the rendezvous point A determines the child and parent nodes for the particular node identifier  in this example as indicated by . The rendezvous point A then propagates this information regarding the particular parent and child nodes for the requested node identifier  downstream to the one or more routers requiring the additional graph information in order to connect node identifier  to other elements in the graph maintained by each router. It should be noted that using the pseudocode representations described in , the parent and child identifiers returned from the rendezvous point downstream to a router includes parent and child identifiers with respect to the graph as maintained by the receiving router (which is router B in this example). For example, node identifier  with respect to the graph as maintained by rendezvous point A has a parent node identifier  and a child node identifier . However, with respect to the content graph as maintained by router B, the parent for node  is , and the child is node . Note that the parent node and child node identifiers are with respect to the requested node identifier of the receiving router.","An embodiment may use other techniques for communicating graph information to routers using the minimal content graph. For example, an embodiment may have each router query a service, such as using an API (Application Programming Interface), to obtain graph information. The service may be provided by, for example, the rendezvous point, the preprocessor, or another component such as a database.","Referring now to , shown is a representation  of a content graph as may be maintained by a preprocessor in an embodiment described herein. The illustration  utilizes a data structure representation similar to that described in connection with  and additionally includes the attribute and value information for each node used by the preprocessor in order to determine a corresponding node identifier for incoming messages. The data structure representation  of  shows more detail of how an embodiment may store information represented for use by a preprocessor such as, for example, the information in the graph of element  of . Element  is a logical view in digraph form of the information represented by portion . In one embodiment, nodes may be added to the content graph as subscription and notification messages of new types are received by the preprocessor.","An embodiment of the subscription system may also use periodic resubscription and subscription acknowledgement to ensure consistency of state information as included in all of the routers. In one embodiment, the subscriber or router that maintains subscriptions for a particular rendezvous point may periodically send a resubscription message upstream toward the rendezvous point as illustrated in  of . The resubscription message identifies the nodes in the graph for which a router maintains an active subscription. When an upstream router receives a resubscription message from a neighbor, the upstream router examines the nodes in its current content graph for the neighbor corresponding to the node identifiers included in the received resubscription message. The router then updates the resubscription time stamps for that neighbor as included in the node descriptors corresponding to the node identifiers in the resubscription message. If a router does not receive a resubscription message within a certain time period, the router assumes that the subscription has been dropped.","Routers may also send periodic resubscription acknowledgement messages downstream as illustrated in  of . If a router maintains an active subscription for a downstream neighbor, it will send a resubscription acknowledgement message to that neighbor. This will identify all the nodes in the router's graph for which the neighbor currently holds a subscription. When the downstream neighbor receives one of these messages, the downstream neighbor examines the nodes within its content graph corresponding to the message identifier and accordingly updates a resubscription acknowledgement time stamp.","The resubscription acknowledge time stamp and the resubscription time stamp(s) maintained for each subscriber may be included within a node descriptor for each node identifier in a content graph, such as element  of . Referring back to , element  may optionally include a timestamp value for each subscriber to be used in connection with resubscription messages sent upstream. Element  may also optionally include a timestamp value for use in connection with resubscription acknowledgement processing.","It should be noted that the frequency with which messages are sent in connection with resubscriptions as described above may vary in accordance with each embodiment.","Referring now to , shown is an example of a pseudocode representation of processing that may be performed in connection with resubscription. Elements  and  describe the processing steps that may be performed in an embodiment in connection with, respectively, sending and receiving resubscription messages as described above. Element  describes the processing that may be performed in connection with sending a resubscription acknowledgement. Element  describes processing in connection with receiving a resubscription acknowledgement message.","Routers may also periodically check their content graph to determine whether any subscriptions have expired. The particular frequency with which routers perform this check of their content graphs and send resubscription messages may vary in accordance with each embodiment.","Referring now to , shown is a pseudocode representation of one embodiment of processing steps in  that may be performed by a router to periodically check for expired subscriptions. For each node within the router's content graph, each router checks to see whether a downstream subscriber has sent a resubscription message recently within a predetermined time period. If a neighbor has not sent a resubscription message recently (as within a predetermined time period that may vary in each embodiment), the router considers the subscription to be interrupted. The router may also check each node in the graph to see whether an upstream neighbor has sent a resubscription acknowledgement message recently. If the router has not received an acknowledgement recently within a predetermined time period, the router will consider the subscription to be interrupted. In one embodiment, if the subscription system is unable to recover what it has determined at a router as an interrupted subscription, the router will drop the subscription.","To remove a subscription in one embodiment, an unsubscription message may be submitted to the same router used to create a previous subscription.","Referring now to , shown is an example of a pseudocode representation  of processing steps that may be performed in connection with removing a subscription. Each unsubscription message in this embodiment includes the same node identifier specified in the original subscription message. In element , when a router receives an unsubscription message, the router locates in its content graph the nodes specified in the unsubscription message received and accordingly removes the subscription from those nodes. The router also fixes the labels for these nodes and the nodes of any descendants as required. If the router determines that any nodes located in the unsubscription message have no more subscribers, the router marks the node for removal from its content graph. The router also sends an unsubscription message identifying these nodes to its upstream neighbor and the upstream neighbor continues and performs the same processing steps.","Referring now to , shown is an example  illustrating an unsubscription message process. In , a router receives an unsubscription message from a subscriber G. Illustrated in  is the router removing the subscription from its tables, updating corresponding output labels, and further forwarding the unsubscription message upstream as required in accordance with the previously described processing steps.","An embodiment of a subscription system described herein may use a technique in connection with detection of lost messages using sequence numbers. Loss detection may be used, for example, by a subscriber to ensure that they have not missed any notification messages.","Referring now to , shown is an illustration  using sequence numbering in a subscription system for loss detection. Prior to receiving any subscriptions, the rendezvous point as illustrated in  and  annotates each node in its content graph with sequence numbers. Before a subscriber submits a subscription, the subscriber in  first sends a message to the rendezvous point identifying the node identifier for that particular subscription as illustrated in . The rendezvous point then sends back a message as illustrated in  listing the sequence number for the nod identifier as well as the sequence numbers for all of that particular node's ancestors. In this example, the node identifier is  and the table returned as illustrated in  includes information on node identifier  and its ancestor .","Referring now to , shown is an illustration  of how a subscriber may use sequence numbers in an embodiment for loss detection. As illustrated in , a subscription message is submitted as described elsewhere herein to a router. The subscription message is then forwarded upstream. At a later point in time, the rendezvous point, as illustrated in , receives a notification message. The rendezvous point finds the lowest node in its graph matching the message. The rendezvous point router then increments the sequence number on the relevant nodes in accordance with the notification message received. The router then attaches a sequence number header to the message listing the node identifiers and corresponding sequence numbers. Finally, the router attaches a standard notification header onto the notification message as described elsewhere herein. As illustrated in , the rendezvous point then forwards the notification message to appropriate subscribers. The routers within the subscription system read the headers in order to forward notification messages further onto other routers but do not read the sequence number header information. Upon receiving a notification, each subscriber removes the subscription system header information and reads the sequence number header information also included in the message. The subscriber may then check the sequence number for the given node identifier against its local table. If the subscriber detects a break in the sequence numbers for a given identifier, the subscriber marks the message as lost and may attempt to recover the message. Otherwise, if no message has been lost, the subscriber updates the sequence numbers in its local table in accordance with the next element in the sequence for the particular node identifier.","In connection with the techniques described herein, the end to end loss detection technique described above may be used by a subscriber for loss detection. The routers and subscription system described herein in this embodiment do not participate in detection of message losses or recovery from these losses. However, other embodiments may include such functionality in connection with message loss recovery.","Referring now to , shown is a flowchart of processing steps that may be performed in an embodiment by a dynamic preprocessor described herein in connection with preprocessing subscriptions messages. In this flowchart , the preprocessor uses a content graph to which nodes are dynamically added in accordance with subscription requests received. The general approach described in  is to traverse the existing content graph from the bottom (leaf nodes, most specific information) to the top (root node, most general). In this traversal, an attempt is made to determine if there is an existing node in the graph for a current subscription request submitted for preprocessing. If so, this node's identifier is returned. Otherwise, a new node is added to the graph in the appropriate location (e.g., with the appropriate parent(s) and child(ren) node(s) based on the categorization of the subscription).","At step , a subscription request is received by the preprocessor. In this example, the variable Parents and Children represent the set of node identifiers which have been respectively determined to be the parent and children of the current subscription request. At step , current leaf is set to the next leaf node. In this example, a list of all leaves in the content graph exists and is used in processing of . The step  forming the top of a loop illustrated in  iterates through all the leaves in the graph and performs an upward traversal of connecting nodes. At step , a determination is made as to whether all leaves in the graph have been processed. If not, control proceeds to step  where a determination is made as to whether the subscription's category is a superset of the current leaf. If not, control proceeds to step  to continue processing with the next leaf. Otherwise, control proceeds to step  to traverse the portion of the graph from the current leaf node from the bottom up. During this traversal, other existing nodes visited may be determined to be the parent(s) and child(ren) for the current subscription. An embodiment, as described in more detail in following paragraphs, may store these existing nodes in appropriate parent and child lists for use in later processing steps. At step , a determination is made as to whether any existing node in the current traversal matches the existing subscription. If so, the traversal processing for the current leaf stops and the matching node identifier is returned at step . Otherwise, control proceeds to step  to continue traversal of the remaining graph portions from the bottom up in accordance with the Leaves.","Processing of the loop illustrated with the first step  continues as long as no existing node has been determined as a match for the current subscription. Step  will evaluate to yes if the entire content graph is traversed and no existing node match determined. At this point, control proceeds to step  where a new node is created for the current subscription received at step . This new node is inserted into the graph in accordance with the Parents and Children determined during the graph traversal.","In one embodiment, determination of any parent and children nodes for the current subscription may be performed by recursively determining if the subscription is a superset of a current node (beginning with a leaf node) and, if so, obtaining any parent and child nodes of this current node. If the current node has no parents, the current node is determined to be a child of the subscription. If the current node is not a superset of the subscription, then the current node is added as a parent node of the subscription. Other embodiments may use other techniques in connection with determining graph information of where to insert a new node for the current subscription when using dynamic content graphs in the preprocessor.","Referring now to , shown is a flowchart  of processing steps that may be performed in an embodiment by a preprocessor in connection with preprocessing a notification message. The approach described in  is a top down traversal of the content graph from each of the one or more roots to determine the lowest nodes in the graph that match the notification. At step , a notification message is received by the preprocessor. At step , the current root is assigned the next root in the graph. A determination is made as step  as to whether the content graph traversal has been completed as may be determined when all paths leading downward from all roots have been traversed. If so, control proceeds to step  to return the list of matching nodes found during the traversal. Otherwise, control proceeds to step  where the top down traversal proceeds from each child of the current root. At step , a determination is made as to whether portions of the graph from all children of the current root have been traversed. If so, control proceeds to step  to continue processing with any remaining roots. Otherwise, control proceeds to step  where a traversal is made of the graph portion in a top down fashion from the current child node updating set of current matching nodes which are the lowest nodes in the graph matching the notification during the top down traversal. Control proceeds to step  with the remaining children of the current root. In one embodiment, the top down traversal may be performed recursively.","Below is a pseudocode representation of processing that may be performed in an embodiment in connection with preprocessing subscriptions and notifications in accordance with the general steps of flowcharts of .",{"@attributes":{"id":"p-0125","num":"0126"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"PreprocessSubscription(subscripton s, graph G)"},{"entry":"\/\/ Given a subscription s and a graph G,"},{"entry":"\/\/ inserts the subscription s into the graph, if"},{"entry":"\/\/ necessary. Returns the nodeid in graph G"},{"entry":"\/\/ corresponding to the subscription."},{"entry":"\u2003\u2003Let V be a table for keeping track of which nodes we have visited."},{"entry":"\u2003\u2003Let F be a table of results for nodes we have visited."},{"entry":"\u2003\u2003Let L be the set of leaf nodes for graph G."},{"entry":"\u2003\u2003Let C be an empty set of child nodes for subscription s."},{"entry":"\u2003\u2003Let P be an empty set of parent nodes for subscripton s."},{"entry":"\u2003\u2003For each leaf l in L"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002If subscription s is a superset of the subscription on node 1:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Set the result for node l in the table F as \u201cSuperset\u201d."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003node n = GetParentsAndChildren(l, s, V, F, G, C, P)"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003If n is not nil, then return the nodeid for n."},{"entry":"\u2003\u2003Create a new node n with a new, unique nodeid."},{"entry":"\u2003\u2003Set n's subscription to be s."},{"entry":"\u2003\u2003Set n's parents to be P."},{"entry":"\u2003\u2003Set n's children to be C."},{"entry":"\u2003\u2003Insert n into graph G."},{"entry":"\u2003\u2003Return the nodeid for n."},{"entry":"GetParentsAndChildren(node n, subscription s, visited V, results F,"},{"entry":"graph G,"},{"entry":"children C,"},{"entry":"parents P)"},{"entry":"\/\/ Recursively traverse the graph from the bottom up"},{"entry":"\/\/ to find the parents and children of the subscription s"},{"entry":"\/\/ in graph G."},{"entry":"\u2003\u2003\u2002Check to see whether node n is marked as visited in table V."},{"entry":"\u2003\u2003\u2002If node n has been visited, do nothing and return."},{"entry":"\u2003\u2003\u2002If node has not been visited, mark the node n as visited in V."},{"entry":"\u2003\u2003\u2002If the subscription s is equal to the subscription"},{"entry":"\u2003\u2003\u2002stored on node n:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Set the result for n in table R as \u201cEqual\u201d."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Return node n."},{"entry":"\u2003\u2003\u2003\u2002If node n has no parents:"},{"entry":"\u2003\u2003\u2003\u2003\u2003Add node n to child set C"},{"entry":"\u2003\u2003\u2003\u2003Return nil"},{"entry":"\u2003\u2003\u2002Let all_parents_supersets be true"},{"entry":"\u2003\u2003\u2003\u2002Foreach parent p of node n:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003If the result for node p in table F is \u201cSuperset\u201d OR"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003If subscription s is a superset of node p's subscription:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002Set the result for node p in table F as \u201cSuperset\u201d."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002m = GetParentsAndChildren(p, s, V, F, G, C, P)"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002If m is not nil, return m"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003else"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002Set all_parents_supersets to be false"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002Add node p to parent set P"},{"entry":"\u2003\u2003\u2003\u2002If all_parents_supersets is false"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002Add node n to child set C"},{"entry":"\u2003\u2003\u2003\u2002Return nil."},{"entry":"PreprocessNotification(notification t, graph G)"},{"entry":"\/\/ Given a notification t and a graph G, find the"},{"entry":"\/\/ lowest nodes in the graph that match t."},{"entry":"\u2003\u2003Let V be a table for keeping track of which nodes we have visited."},{"entry":"\u2003\u2003Let R be the set of root nodes for graph G."},{"entry":"\u2003\u2003Let F be a table of results for nodes we have visited."},{"entry":"\u2003\u2003Let N be an empty set of nodeids."},{"entry":"\u2003\u2003Foreach root r in R"},{"entry":"\u2003\u2003\u2003\u2002If the notification n matches the subscription stored"},{"entry":"\u2003\u2003\u2003\u2002on node r:"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002Set the result for r in table F as \u201cMatches\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002MatchNotification(r, t, V, F, G, N)"},{"entry":"\u2003\u2003Return set N"},{"entry":"MatchNotification(node n, notification t, visited V, results F, graph G,"},{"entry":"nodeids N)"},{"entry":"\/\/ Recursively traverse the graph from the top-down"},{"entry":"\/\/ to find the lowest nodes in the graph that match"},{"entry":"\/\/ the notification."},{"entry":"\u2003\u2003\u2002Check to see whether node n is marked as visited in table V."},{"entry":"\u2003\u2003\u2002If node n has been visited, do nothing and return."},{"entry":"\u2003\u2003\u2002If node has not been visited, mark the node n as visited in V."},{"entry":"\u2003\u2003\u2002Set no_children_match to true."},{"entry":"\u2003\u2003\u2003\u2002Foreach child node c of node n"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002Let s be the subscription on node c."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2002If the result for c in table F is \u201cMatches\u201d OR"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002If the notification matches the subscription on node c"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Set the result for node c in table F as \u201cMatches\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003Set no_children_match to false."},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003\u2003MatchNotification(p, t, V, F, G, N)."},{"entry":"\u2003\u2003\u2003\u2002If no_children_match is true"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2002Add the nodeid for n to set N."},{"entry":"\u2003\u2003\u2003\u2002Return."},{"entry":"AttributeValueSubscriptionIsSuperset(subscription s1, subscription s2)"},{"entry":"\/\/ Given two attribute-value subscriptions,"},{"entry":"\/\/ return true if subscription 1 matches a superset of subscription 2"},{"entry":"\u2003\u2003Let A1 be the set of attributes for subscription s1."},{"entry":"\u2003\u2003Let A2 be the set of attributes for subscription s2."},{"entry":"\u2003\u2003If set A1 is not a subset of A2 then return false."},{"entry":"\u2003\u2003Foreach attribute a in set A1"},{"entry":"\u2003\u2003\u2003\u2002Let v1 be the value associated with a in subscription s1"},{"entry":"\u2003\u2003\u2002Let v2 be the value associated with a in subscription s2"},{"entry":"\u2003\u2003\u2002If the value v1 is not a superset of the value v2, then return"},{"entry":"\u2003\u2003\u2002false."},{"entry":"\u2003\u2003Return true."},{"entry":"AttributeValueSubscriptionIsSubset(subscription s1, subscription s2)"},{"entry":"\/\/ Given two attribute-value subscriptions,"},{"entry":"\/\/ returns true if subscription 1 matches a subset of a subscription 2"},{"entry":"\u2003\u2003Return AttributeValueSubscriptionIsSuperset(s2, s1)"},{"entry":"AttributeValueSubscriptionIsEqual(subscription S1, subscription s2)"},{"entry":"\/\/ Given two attribute-value subscriptions,"},{"entry":"\/\/ returns true if the two subscriptions match exactly the same"},{"entry":"\/\/ notifications."},{"entry":"\u2003\u2003Let A1 be the set of attributes for subscription s1."},{"entry":"\u2003\u2003Let A2 be the set of attributes for subscription s2."},{"entry":"\u2003\u2003If set A1 is not equal to set A2 then return false."},{"entry":"\u2003\u2003Foreach attribute a in set A1"},{"entry":"\u2003\u2003\u2003\u2002Let v1 be the value associated with a in subscription s1"},{"entry":"\u2003\u2003\u2002Let v2 be the value associated with a in subscription s2"},{"entry":"\u2003\u2003\u2002If the value v1 is not equal to the value v2, then return"},{"entry":"\u2003\u2003\u2002false."},{"entry":"\u2003\u2003Return true."},{"entry":"AttributeValueNotificationMatchesSubscription(notification n,"},{"entry":"subscription s)"},{"entry":"\/\/ Given an attribute-value notification and an attribute-value"},{"entry":"\/\/ notification, returns true of the notification matches"},{"entry":"\/\/ the subscription."},{"entry":"\u2003\u2003Let AN be the set of attributes for notification n."},{"entry":"\u2003\u2003Let AS be the set of attributes for subscription s."},{"entry":"\u2003\u2003If set AS is not a subset of AN, then return false."},{"entry":"\u2003\u2003Foreach attribute a in set AS"},{"entry":"\u2003\u2003\u2003\u2002Let vn be the value associated with a in notification n"},{"entry":"\u2003\u2003\u2002Let vs be the value associated with a in subscription s"},{"entry":"\u2003\u2003\u2002If the value vs is not a superset of the value vn, then return"},{"entry":"\u2003\u2003\u2002false."},{"entry":"\u2003\u2003Return true."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The foregoing techniques and subscription system may be used in a wide variety of difference applications in addition to the examples described above. The foregoing may be used in an inventory tracking system in which suppliers, for example, may submit subscriptions specifying criteria used to track inventory in a warehouse. As changes are made to the inventory, notifications may be sent to suppliers. The inventory tracking may be performed using RFID-tagged items. In another application, the foregoing techniques may be used in connection with searching services. In a continual search service, subscribers request to be updated when an item matching specified criteria is located. For example, an auction site, such as Ebay, may use the foregoing techniques to create a subscription system providing notification to their customers. Subscribers may sign up for notification when an item matching their needs was put up at auction. In another example application, the foregoing techniques may be used to disseminate database updates in accordance with particular criteria.","It should be noted that an embodiment may implement the foregoing techniques using any one or more different programming languages. In one embodiment, for example, the router software of the subscription system may be implemented using C++ on a standard PC running the Linux operating environment. The subscription system described herein may include a preprocessor also written in the C++ programming language executing on a single processor separate from the processors executing the router functionality described herein.","While the invention has been disclosed in connection with preferred embodiments shown and described in detail, their modifications and improvements thereon will become readily apparent to those skilled in the art. Accordingly, the spirit and scope of the present invention should be limited only by the following claims."],"GOVINT":[{},{}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Features and advantages of the present invention will become more apparent from the following detailed description of exemplary embodiments thereof taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 6 and 7"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIGS. 9A-D","FIG. 8"],"b":"10"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 10C"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10D"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIGS. 10E-10L","FIG. 10D"]},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIGS. 12A-12B","FIG. 11"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 18","FIG. 17"]},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIGS. 19 and 20"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 22"}]},"DETDESC":[{},{}]}
