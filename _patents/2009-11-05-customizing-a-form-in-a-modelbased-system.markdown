---
title: Customizing a form in a model-based system
abstract: Techniques are described herein for customizing a form (a.k.a. a dialog) in a model-based system. For instance, the form may be customized without the need to modify the form in persistent memory, such as read-only memory (ROM), a hard disk, a magnetic disk, an optical disk, etc. A representation of a customization (e.g., an extensible markup language file, a management pack, etc.) regarding the form is captured in memory, such as a random access memory (RAM), and stored in a file or a database. For instance, the representation of the customization may be stored separately from the form. The representation of the customization is retrieved from the file or the database and applied to a rendering of the form.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08707158&OS=08707158&RS=08707158
owner: Microsoft Corporation
number: 08707158
owner_city: Redmond
owner_country: US
publication_date: 20091105
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","I. Introduction","II. Example Embodiments for Customizing a Form in a Model-Based System","III. Conclusion"],"p":["This application claims the benefit of U.S. Provisional Application No. 61\/231,542, filed Aug. 5, 2009, the entirety of which is incorporated by reference herein.","Many modern software products have a presentation layer that includes a series of forms, which provide information regarding objects that are stored in a database. Such forms typically enable a user to view and edit the information regarding the objects. For example, data about a company's computers may be stored in a database. A form may be created to show information about those computers, such as the name, manufacturer, date of purchase, value, location, primary user, etc. of each of the computers.","In an extensible model-based system, a software vendor may provide an out-of-the-box solution, which describes the normal properties and relationships of a given class of objects (e.g., a computer) and a form that corresponds to the class of objects in the model on which the system is based. Users can then extend the model to add additional relationships and properties. The form is usually modified (i.e., customized) to show the additional relationships and properties, so that a user can see and edit them. For example, a user can modify the form by adding controls, rearranging controls, re-labeling the controls, changing colors, changing fonts, adding validation logic, etc. In another example, the customer may modify the form by removing controls that are provided with respect to the out-of-the-box solution.","Conventional techniques for generating a customized form often result in a new form being created, typically starting out as a copy of the original form, even when the customized form includes only a slight modification with respect to the original form. Once a customer has departed from the original form and created a new customized form, the original software vendor traditionally is no longer able to update the customized form in a future version of the software on which the form is based. Accordingly, the customer often chooses between continuing to use the customized version of the form \u201cas is\u201d without the software vendor's updates, modifying the customized version of the form to account for the updates, or reverting all customizations and using the new version of the form from the software vendor.","Some example software programs that implement such conventional techniques for generating a customized form include Remedy\u2122 developed by BMC Software, Inc., HEAT\u00ae developed by FrontRange Solutions, Inc., and Microsoft Dynamics\u00ae CRM developed by Microsoft Corporation. Form designers\/editors, such as Microsoft\u00ae Visual Studio\u00ae, Microsoft\u00ae Expression Blend\u2122, and Microsoft\u00ae Office InfoPath\u2122, may also be used to generate customized forms.","Customizing forms to match a customer's business processes typically involves substantial effort. Moreover, substantial time is usually spent on reconfiguring a form to include its corresponding customizations each time the software is upgraded. This slows the adoption rate of new versions of the software and can cause customer frustration. Furthermore, the customizations are often initially applied in a test environment and then manually applied in a production environment. Such an approach may be time consuming, frustrating, and\/or error prone.","Various approaches are described herein for, among other things, customizing a form (a.k.a. a dialog) in a model-based system. For instance, the form may be customized without the need to modify the form in persistent memory. The persistent memory may include read-only memory (ROM), a hard disk, a magnetic disk, an optical disk, or any other suitable persistent memory. A representation of a customization (e.g., an extensible markup language (XML) file, a management pack, etc.) regarding the form may be captured in memory, such as a random access memory (RAM), and stored in a file or a database. For instance, the representation of the customization may be stored separately from the form. The representation of the customization may be in any suitable format (e.g., an extensible markup language (XML) file, a management pack, etc.). The representation of the customization may be retrieved from the file or the database and applied to a rendering of the form.","A \u201cwhat you see is what you get\u201d (WYSIWYG) interface may be provided to a user to enable the user to modify a visual representation of the form. For instance, the user may modify properties of the form and\/or properties of controls that are included in the form. A control is an interface element that is associated with a designated functionality regarding data that is included in a form. Examples of a control include but are not limited to a text box, a list box, etc. Representations of the modifications are captured, so that they may be applied to a rendering of the form.","Example methods are described for customizing a form in a model-based system. In a first example method, a representation of a user interface customization regarding a declaratively-defined form is captured. A declaratively-defined form is a form that is defined using a declarative programming language, as opposed to an imperative programming language. The representation of the user interface customization is serialized to facilitate distribution thereof. The serialized representation of the user interface customization is retrieved. The user interface customization is applied with respect to a rendering of the form.","In a second example method, a representation of a customization regarding a declaratively-defined form is captured. The customization is implemented with respect to the form without changing the form in persistent storage. A visual representation of the form is provided that includes the customization.","Example systems are also described. A first example system includes a capture module, a serialization module, a retrieval module, and an application module. The capture module is configured to capture a representation of a user interface customization regarding a declaratively-defined form. The serialization module is configured to serialize the representation of the user interface customization to facilitate distribution thereof. The retrieval module is configured to retrieve the serialized representation of the user interface customization. The application module is configured to apply the user interface customization with respect to a rendering of the form.","A second example system includes a capture module, an implementation module, and a providing module. The capture module is configured to capture a representation of a customization regarding a declaratively-defined form. The implementation module is configured to implement the customization with respect to the form without changing the form in persistent storage. The providing module is configured to provide a visual representation of the form that includes the customization based on implementation of the customization with respect to the form.","Example computer program products are also described. A first example computer program product includes a computer-readable medium having computer program logic recorded thereon for customizing a form in a model-based system. The computer program product includes first, second, third, and fourth program logic modules. The first program logic module is for enabling the processor-based system to capture a representation of a user interface customization regarding a declaratively-defined form. The second program logic module is for enabling the processor-based system to serialize the representation of the user interface customization to facilitate distribution thereof. The third program logic module is for enabling the processor-based system to retrieve the serialized representation of the user interface customization. The fourth program logic module is for enabling the processor-based system to apply the user interface customization with respect to a rendering of the form.","A second example computer program product includes a computer-readable medium having computer program logic recorded thereon for customizing a form in a model-based system. The computer program product includes first, second, and third program logic modules. The first program logic module is for enabling the processor-based system to capture a representation of a customization regarding a declaratively-defined form. The second program logic module is for enabling the processor-based system to implement the customization with respect to the form without changing the form in persistent storage. The third program logic module is for enabling the processor-based system to provide a visual representation of the form that includes the customization.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter. Moreover, it is noted that the invention is not limited to the specific embodiments described in the Detailed Description and\/or other sections of this document. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art(s) based on the teachings contained herein.","The features and advantages of the disclosed technologies will become more apparent from the detailed description set forth below when taken in conjunction with the drawings, in which like reference characters identify corresponding elements throughout. In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit(s) in the corresponding reference number.","The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments of the present invention. However, the scope of the present invention is not limited to these embodiments, but is instead defined by the appended claims. Thus, embodiments beyond those shown in the accompanying drawings, such as modified versions of the illustrated embodiments, may nevertheless be encompassed by the present invention.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d or the like, indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Furthermore, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the relevant art(s) to implement such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","Example embodiments are capable of customizing a form (a.k.a. a dialog) in a model-based system. For instance, the form may be customized without the need to modify the original form in persistent memory. The persistent memory may include read-only memory (ROM), a hard disk, a magnetic disk, an optical disk, or any other suitable persistent memory. In some example embodiments, a representation of a customization regarding the form is captured in memory, such as a random access memory (RAM), and stored in a file or a database. For instance, the representation of the customization may be stored separately from the form.","The representation of the customization may be in any suitable format, including but not limited to an extensible markup language (XML) file, a management pack, etc. A management pack is business logic expressed in terms of an extensible language, such as extensible markup language (XML). A management pack includes one or more management pack elements. A management pack element includes information regarding an entity in a system, such as a description of the entity, operation(s) to be performed with respect to the entity, etc. Entities can be computers, software programs, employees, customers, or anything else in the system that an administrator may wish to describe. The representation of the customization is retrieved from the file or the database and applied to a rendering of the form.","Some example embodiments provide a \u201cwhat you see is what you get\u201d (WYSIWYG) interface to a user to enable the user to modify a visual representation of the form. For instance, the user may modify properties of the form and\/or properties of controls that are included in the form. A control is an interface element that is associated with a designated function regarding data that is included in a form. Examples of a control include but are not limited to a text box, a list box, etc. Representations of the modifications are captured, so that they may be applied to a rendering of the form. Capturing these representations in a file enables an administrator to define the customizations once and to apply the customizations in multiple installations of a manager for consistency. Example managers are discussed below with respect to , , , , , , , , , , , , , , and .","Some example embodiments may eliminate the need to create a new form when an original form is customized. A form that is customized in accordance with the example techniques described herein may be updated in a future version of the software that is used to provide the form. For instance, the techniques may eliminate the need to reconfigure the form to include its previous customizations each time the software is upgraded. In some example embodiments, representations of customizations that are applied in a test environment are imported to a production environment, which may eliminate the need to manually apply the customizations in the production environment.","In accordance with some example embodiments, representations of customizations regarding a form are stored in a database and transmitted over a communication channel to computer(s) or other processing system(s) where the form is to be displayed. This is advantageous compared to conventional form customization techniques because it requires no file distribution or .dll registration on the computer(s) that are to display the form.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 1","b":["100","100","100","100","100","100"]},"As shown in , computer network  includes an administrator (admin) system , a manager , a database , and a plurality of clients A-N. Communication among admin system , manager , database , and clients A-N may be carried out over a wide area network, such as the Internet, using well-known network communication protocols. Additionally or alternatively, the communication may be carried out over a local area network (LAN) or another type of network.","Admin system  is a computer or other processing system, including one or more processors, which is configured to provide management packs (e.g., management pack ) or other suitable representations of information to manager  at the direction of an administrative user who has access to admin system . For instance, the administrative user may author and import a management pack to manager  using an interface client (e.g., a Web browser, an integrated development environment (IDE) shell application, etc.) that is installed on admin system . Admin system  includes a form customization module  that is configured to generate a management pack (e.g., management pack ) or other suitable representation of information that defines customizations with respect to a form. Admin system  provides the management pack to manager  for further processing.","Manager  is at least one computer (e.g., server) or other processing system that is configured to distribute forms, forum customization, and the data to display in those forms. Manager  may be any suitable type of manager. For instance, partners, such as integrators or independent software vendors (ISVs), can provide customizations as a part of an offering to customers.","Manager  is configured to validate management packs (or other suitable representations of information) that are received from admin system  and to provide the management packs to database . One type of management pack that manager  receives from admin system  is a \u201cform customization management pack\u201d (FCMP). A FCMP defines customization(s) with respect to a form.","Database  is at least one storage device that stores instances of customizations that are defined by management packs (or other suitable representations). Database  may be a structured query language (SQL) database, a relational database, or any other suitable type of database.","Clients A-N are computers or other processing systems that execute respective form host applications. For instance, client A executes application(s) A, client B executes application(s) B, and so on. Manager  may communicate directly with clients A-N, though the scope of the example embodiments is not limited in this respect.","In accordance with example embodiments, a management pack (or other suitable representation of information) is used to deliver a solution that includes forms, workflows, etc. Another management pack is used as a container for storing customization(s) that a customer supplies on top of that solution. For instance, when a software vendor releases a management pack that provides a solution, that management pack may be \u201csealed\u201d, meaning that the management pack cannot be modified by anyone. Example embodiments enable a form to be customized even if the form is included in a sealed management pack without actually modifying the form in the sealed management pack. For instance, when a customer customizes a form in accordance with any one or more of the techniques described herein, the customizations may be included in another unsealed or sealed management pack, which is referred to as a customization management pack.","The sealed management pack that includes the form and the customization management pack that includes the customizations may be used to render a customized version of the form that includes the customizations from the customization management pack. It should be noted that management packs may have respective indicators (e.g., binary flags, certificates, etc.) that an application programming interface (API) can use to determine whether the management packs can be modified.","Customizations regarding a form may be programmatically created using a programming interface, though the scope of the example embodiments is not limited in this respect. For instance, some example embodiments provide an interface (e.g., a graphical user interface) via which a user may view and modify data that is included in a visual representation of a form. For example, the user interface may be provided using an interface client (e.g., a Web browser, an integrated development environment (IDE) shell application, etc.) that is installed on admin system  or any of clients A-N.","Customizations may be captured in a portable format, such as an extensible markup language (XML) file, though the scope of the example embodiments is not limited in this respect. The customizations are applied to the underlying base form prior to displaying the form to the user. The base form may be modified or \u201cupgraded\u201d by a software vendor who provides the form, for example, and the customizations will still be applied to the modified or upgraded form as much as they are applicable. Moreover, customizations may be additive. For example, one person can customize a form in one way and another person can customize the form in a different way. Using a selection algorithm, the customizations can be effectively merged to result in combination of the customizations to be applied. The customizations can be distributed on demand over a communication channel between computers or other processing systems (e.g., between manager  and any of clients A-N).","When a form is loaded in computer network , manager  may determine whether customizations regarding the form exist. For instance, the form may be defined in the model-based system and associated with a designated class of objects. When clients A-N need to view or edit data of the designated class of objects, manager  supplies the customizations regarding the form that is associated with the designated class of objects to the clients A-N. Multiple versions of a customization may exist, though no more than one version of each customization is used in computer network  at any given time. For instance, if a first version of a customization is being used in computer network , and a second version of the customization is imported into computer network , the second version overwrites the first version.","Computer network  is described as using management packs to represent information for illustrative purposes and is not intended to be limiting. It will be recognized by persons skilled in the relevant art(s) that computer network  may utilize any suitable representation of information.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 2","b":["200","200","202","202","202","202","202","202","200","200"]},"A user may customize form  in real time using a user interface (e.g., a what-you-see-is-what-you-get (WYSIWYG) interface) that is provided by admin system  or any of clients A-N. Example customizations that may be performed with respect to form  include but are not limited to adding a control, renaming a label, moving a control, hiding a control, deleting a control, changing validation logic, changing display properties of a control (e.g., background color, size, etc.), changing data binding of a control, setting a default value, etc.","Two example scenarios will be described for customizing a form, such as form , for illustrative purposes. In a first scenario, layout (a.k.a. format) changes are made with respect to the form. Examples of layout changes include but are not limited to moving a control from one place to another in the form, hiding a control, changing a color of text, changing a background color, changing text labels, etc. In a second scenario, data changes are made with respect to the form. Examples of data changes include but are not limited to adding a new control and binding it to a new source of data, changing the binding of a control from one source to another, changing the data validation logic for a control, etc.","Layout changes are captured when a user selects a control and then performs an action with respect to the control. For example, after selecting a control using an input device, such as a mouse, the user can \u201cdrag\u201d the control to a new location using the user interface. In another example the user may select a control and then in a \u201cproperties dialog\u201d edit one or more properties (e.g., text color, background color, text labels, etc.) of the control. The user can also use keyboard keys such as the \u201cDelete\u201d key to delete an object, the arrow keys to move a control, etc. The user can also use \u201cCut\u201d, \u201cCopy\u201d, and \u201cPaste\u201d commands typically found in graphical user interfaces to manipulate the layout of the controls.","When a user performs actions, such as those described above, a \u201crecording\u201d of the actions is stored automatically in memory as a set of objects that describe the recorded actions. Thereafter, when the recording is to be stored, the objects are serialized into a suitable format (e.g., XML format), which makes the customizations transportable in a file. Alternatively, the recording of the actions may be stored automatically in the transportable format (e.g., XML format).","Data changes typically occur when a database (e.g., database ) is customized by a user to add additional kinds of data by creating extensions to the model and importing them into the system. For example, a customer may add an additional property to the model to capture the dollar value of a computer and to capture whether or not the computer is owned by the company (versus being leased). When these extensions are imported into the database, the corresponding schema modifications are added to store the additional data.","The customer may want to modify the form to display the additional data and allow it to be edited by users. For example, the customer may do this by displaying an additional textbox to capture the dollar value and a checkbox to indicate ownership. The textbox may have validation, so that only a number within a designated range (e.g., between 500 and 10,000) can be entered.","Two example techniques are described below for displaying an additional textbox and a checkbox, as mentioned above. In a first example, the user interface may include a visual representation of a form (referred to as \u201cthe form design surface\u201d), a \u201ctoolbox\u201d of controls, and a properties dialog window that includes a list of properties that are defined in the model. The customer may drag a textbox and a checkbox from the toolbox of controls onto the form design surface. The customer may then select the property in the properties dialog window that is to be associated with the textbox and the checkbox. Associating the textbox and the checkbox with the property is said to \u201cbind\u201d the property to the textbox and the checkbox.","In a second example, the customer may drag the property from the properties dialog window onto the form design surface. A type of control that corresponds to the data type of the property may be automatically added to the form. For instance, if the data type of the property is string or integer, a textbox may be added. If the data type of the property is Boolean, a checkbox may be added. In these example techniques, a new control is added to the form and bound to the data source automatically.","As with the layout and format customizations described above, data changes may be stored automatically in XML. A relationship is created between the base form and the form customizations. When a form host (e.g., manager  of ) is instructed by an application to render a form, the form host checks to see whether there are customizations related to that form. If there are customizations, the form host starts at the beginning of the customizations and one by one \u201creplays\u201d the recorded customizations by modifying the form. When all of the customizations are complete, the form is rendered to the user in its customized state.","Example XML code is provided below to show an example representation of some customizations that may be applied to a form. As shown in the code, an element named \u201cLayoutRoot\/Index 1\u201d is moved to location X=\u201c39\u201d, Y=\u201c\u221235\u201d in the form. An element named \u201cLayoutRoot\/Index 0\u201d is moved to location X=\u201c39\u201d, Y=\u201c\u221231\u201d in the form. The foreground color of \u201cLayoutRoot\/Index 0\u201d is changed to the color represented by the hexadecimal number \u201c#FF808080\u201d. \u201cLayoutRoot\/Index 0\u201d is disabled by changing the value of the property \u201cIsEnabled\u201d that is associated with \u201cLayoutRoot\/Index 0\u201d to \u201cFalse\u201d. The foreground color of \u201cLayoutRoot\/Index 1\u201d is changed to the color represented by the hexadecimal number \u201c#FF808080\u201d. \u201cLayoutRoot\/Index 1\u201d is disabled by changing the value of the property \u201cIsEnabled\u201d that is associated with \u201cLayoutRoot\/Index 1\u201d to \u201cFalse\u201d. These example customizations are provided for illustrative purposes and are not intended to be limiting. Persons skilled in the relevant art(s) will recognize that the representation may include any suitable customizations regarding the form.",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003<Presentation>"},{"entry":"\u2003\u2003<Forms>"},{"entry":"\u2003\u2003\u2003<Form ID=\u201dSystem.AddUserForm\u201d Accessibility=\u201dPublic\u201d"},{"entry":"\u2003\u2003\u2003Target=\u201dWoodGrove.AutomatedActivity.AddUserToADGroupProjection\u201d"},{"entry":"\u2003\u2003\u2003Assembly=\u201dAutomatedActivityAddUserToGroupFormAssembly\u201d"},{"entry":"\u2003<Move X=\u201d39\u201d Y=\u201d-35\u201d>"},{"entry":"\u2003\u2003<Element Name=\u201dLayoutRoot\/Index:1\u201d\/>"},{"entry":"\u2003<\/Move>"},{"entry":"\u2003<Move X=\u201d39\u201d Y=\u201d-31\u201d>"},{"entry":"\u2003\u2003<Element Name=\u201dLayoutRoot\/Index:0\u201d\/>"},{"entry":"\u2003<\/Move>"},{"entry":"\u2003<PropertyChange Object=\u201dLayoutRoot\/Index:0\u201d Property=\u201dForeground\u201d>"},{"entry":"\u2003\u2003<NewValue>#FF808080<\/NewValue>"},{"entry":"\u2003<\/PropertyChange>"},{"entry":"\u2003<PropertyChange Object=\u201dLayoutRoot\/Index:0\u201d Property=\u201dIsEnabled\u201d>"},{"entry":"\u2003\u2003<NewValue>False<\/NewValue>"},{"entry":"\u2003<\/PropertyChange>"},{"entry":"\u2003<PropertyChange Object=\u201dLayoutRoot\/Index:1\u201d Property=\u201dForeground\u201d>"},{"entry":"\u2003\u2003<NewValue>#FF808080>\/NewValue>"},{"entry":"\u2003<\/PropertyChange>"},{"entry":"\u2003<PropertyChange Object=\u201dLayoutRoot\/Index:1\u201d Property=\u201dIsEnabled\u201d>"},{"entry":"\u2003\u2003<NewValue>False<\/NewValue>"},{"entry":"\u2003<\/PropertyChange>"},{"entry":"<\/Customization><\/Form>"},{"entry":"\u2003<Forms>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"More example XML code is provided below to show an example representation of some other customizations that may be applied to a form. As shown in the code, the foreground color of a control named \u201cIncidentTime\u201d is changed to black. A new control named \u201cSystem.Controls.Picture\u201d is added. The property to which a control named \u201cIncidentType\u201d is bound is changed to \u201ctype1\\property3\\property2\u201d.",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003<?xml>"},{"entry":"\u2003<Form Customization>"},{"entry":"\u2003\u2003\u2003<Information>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<Form>Forms.INcidentResponse<\/Form>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<Author>John Smith (jsmith@fabrikan.com) <\/Author>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<Signature>"},{"entry":"\u2003\u2003\u2003\u2003<Version>1.0.0.0<\/Version>"},{"entry":"\u2003\u2003<\/Information>"},{"entry":"\u2003\u2003<Actions>"},{"entry":"\u2003\u2003\u2003\u2003<Alteration control=\u201dIncidentTime\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<Property name=\u201dForeColor\u201d value=\u201dColor.Black\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/Alteration>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<NewControl type=\u201dSystem.Controls.Picture\u201d assembl=\u201dxxx\u201d >"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<Property name=\u201dName\u201d value=\u201dPicture1\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<Property name=\u201dParent\u201d value=\u201d {form}\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<Property name=\u201dZOrder\u201d value=\u201d0\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<Property name=\u201dImage\u201d value=\u201dxxx\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<\/NewControl>"},{"entry":"\u2003\u2003\u2003\u2003<Alteration control=\u201dIncidentType\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<Property name=\u201dBinding\u201d value=\u201dtype1\\property3\\property2\u201d \/>"},{"entry":"\u2003\u2003\u2003\u2003<\/Alteration>"},{"entry":"\u2003\u2003<\/Actions>"},{"entry":"\u2003<\/Form Customization>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Any of the example XML code above may be included in a management pack, for example, and stored in a database (e.g., database ) or a file, so that the customizations included therein may be applied with respect to a rendering of the form.","Form  and interface elements A and B are provided for illustrative purposes and are not intended to be limiting. A form may pertain to any suitable subject matter and may include any suitable interface elements.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 3","FIG. 1","FIG. 4"],"b":["300","106","300","300","104","100","300","104","104"]},"As shown in , manager \u2032 includes a validation module , a serialization module , and a providing module . Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a structural and semantic validation of a management pack is performed. In an example implementation, validation module  of  performs the structural and semantic validation of management pack .","At step , the management pack is de-serialized into an object model that application programming interface(s) (APIs) are capable of processing. For instance, the API(s) may be present on respective clients (e.g., clients A-N) of a system (e.g., computer network ). In an example implementation, serialization module  de-serializes management pack  into the object model.","At step , the object model is serialized into calls that a database (e.g., database  is capable of processing. In an example implementation, serialization module  serializes the object model into the calls to the database.","At step , a determination is made as to whether management pack element(s) are to be added to the database. If no management pack elements are to be added to the database, control flows to step . However, if management pack element(s) are to be added to the database, control flows to step . In an example implementation, providing module  determines whether management pack element(s) are to be added to the database.","For example, management pack elements that are included in the management pack may be compared to management pack elements that are present in the database to determine whether the management pack includes element(s) that are not present in the database. If the management pack includes element(s) that are not present in the database, a determination may be made to add those elements to the database. Otherwise, a determination may be made not to add elements to the database.","At step , management pack element(s) of the management pack are added to the database in accordance with operations specified by an install handler. An install handler is a module (e.g., software module) that is configured to add management pack elements to a database. In accordance with an example implementation, providing module  adds management pack element(s) of management pack  to the database.","At step , a determination is made as to whether management pack element(s) are to be removed from the database. If no management pack elements are to be removed from the database, the method of flowchart  ends. However, if management pack element(s) are to be removed from the database, control flows to step . In an example implementation, providing module  determines whether management pack element(s) are to be removed from the database.","For example, management pack elements that were previously included in the management pack may be present in the database. One or more of those management pack elements may have been removed from the management pack in the interim. The current management pack elements of the management pack may be compared to the management pack elements that are present in the database. A determination may be made to remove management pack element(s) that are present in the database that are not currently included in the management pack. Accordingly, the management pack elements that are stored in the database may be updated to reflect the management pack elements that are currently included in the management pack. However, if the management pack elements that are stored in the database are the same as the management pack elements that are currently included in the management pack, a determination may be made that no management pack elements are to be removed from the database.","At step , management pack element(s) of the management pack are removed from the database in accordance with operations specified by an uninstall handler. An uninstall handler is a module (e.g., software module) that is configured to remove management pack elements from a database. In accordance with an example implementation, providing module  removes management pack element(s) of management pack  from the database.  illustrates one example technique of importing a management pack into a database and is not intended to be limiting. Other suitable techniques are within the spirit and scope of the example embodiments.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 5","FIG. 1","FIG. 6"],"b":["500","500","500","104","100","500","104","104"]},"As shown in , manager \u2033 includes a capture module , a serialization module , a retrieval module , and an application module . Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a representation of a user interface customization regarding a declaratively-defined form is captured. A declaratively-defined form is a form that is defined using a declarative programming language, as opposed to an imperative programming language. For instance, the behavior of the form may be defined by setting properties of controls on the form, rather than by applying methods and handling events of the controls. The representation of the user interface customization may be captured in memory, such as random access memory (RAM), though the scope of the embodiments is not limited in this respect. In an example implementation, capture module  captures the representation of the user interface customization.","At step , the representation of the user interface customization is serialized to facilitate distribution thereof. In a first example, the representation of the user interface customization is serialized to a file. In a second example, the representation of the user interface customization is serialized to a database. In accordance with this example, the representation of the user interface customization may be exported to a file. In an example implementation, serialization module  serializes the representation of the user interface customization.","At step , the serialized representation of the user interface customization is retrieved. For instance, the serialized representation of the user interface customization may be retrieved from a file or a database. In an example implementation, retrieval module  retrieves the serialized representation of the user interface customization.","At step , the user interface customization is applied with respect to a rendering of the form in response to retrieving the serialized representation of the user interface customization. For instance, the user interface customization may be applied to declaratively-defined aspects of the form with respect to the rendering and\/or to non-defined aspects of the form with respect to the rendering. In an example implementation, application module  applies the user interface customization with respect to the rendering of the form.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 7","FIG. 1","FIG. 8"],"b":["700","700","700","104","100","700","104","104"]},"As shown in , manager \u2032\u2033 includes a capture module \u2032, a serialization module \u2032, a retrieval module \u2032, and an application module \u2032. Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a representation of a user interface customization regarding a declaratively-defined form is captured in a context of a test environment. In an example implementation, capture module \u2032 captures the representation of the user interface customization in the context of the test environment.","At step , the representation of the user interface customization is serialized to facilitate distribution of the representation in the context of the test environment. In an example implementation, serialization module \u2032 serializes the representation of the user interface customization in the context of the test environment.","At step , the serialized representation of the user interface customization is retrieved in the context of the test environment. In an example implementation, retrieval module \u2032 retrieves the serialized representation of the user interface customization in the context of the test environment.","At step , the user interface customization is applied with respect to a rendering of the form in response to retrieving the serialized representation of the user interface customization. In an example implementation, application module \u2032 applies the user interface customization with respect to the rendering of the form in the context of the test environment.","At step , the representation of the user interface customization is imported to a production environment. In an example implementation, import module  imports the representation of the user interface customization to the production environment.","At step , the representation of the user interface customization is serialized in the context of the production environment. In an example implementation, serialization module \u2032 serializes the representation of the user interface customization in the context of the production environment.","At step , the serialized representation of the user interface customization is retrieved in the context of the production environment. In an example implementation, retrieval module \u2032 retrieves the serialized representation of the user interface customization in the context of the production environment.","At step , the user interface customization is applied with respect to a rendering of the form in the context of the production environment. In an example implementation, application module \u2032 applies the user interface customization with respect to the rendering of the form in the context of the production environment.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 9","FIG. 1","FIG. 10"],"b":["900","900","900","104","100","900","104","104"]},"As shown in , manager \u2033\u2033 includes a capture module \u2033, an order determination module , a serialization module , a retrieval module , and an application module \u2033. Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a representation of a second user interface customization regarding a declaratively-defined form is captured. In an example implementation, capture module \u2033 captures the representation of the second user interface customization.","At , a representation of a first user interface customization regarding a form is captured. In an example implementation, capture module \u2033 captures the representation of the first user interface customization.","At step , a determination is made that capturing the representation of the first user interface customization is performed after capturing the representation of the second user interface customization. In an example implementation, order determination module  determines that capturing the representation of the first user interface customization is performed after capturing the representation of the second user interface customization.","At step , the representation of the first user interface customization is serialized to facilitate distribution thereof. In an example implementation, serialization module  serializes the representation of the first user interface customization.","At step , the serialized representation of the first user interface customization is retrieved. In an example implementation, retrieval module  retrieves the serialized representation of the first user interface customization.","At step , the first user interface customization is applied with respect to a rendering of the form in response to determining that capturing the representation of the first user interface customization is performed after capturing the representation of the second user interface customization. In an example implementation, application module \u2033 applies the first user interface customization with respect to the rendering of the form.",{"@attributes":{"id":"p-0097","num":"0096"},"figref":["FIG. 11","FIG. 1","FIG. 12"],"b":["1100","1100","1100","104","100","1100","104","104"]},"As shown in , manager \u2033 includes a capture module \u2033, an order determination module \u2032, a serialization module , a retrieval module , and an application module \u2032\u2033. Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a representation of a first user interface customization regarding a declaratively-defined form is captured. In an example implementation, capture module \u2033 captures the representation of the first user interface customization.","At , a representation of a second user interface customization regarding a form is captured. In an example implementation, capture module \u2033 captures the representation of the second user interface customization.","At step , a determination is made that a most recent modification of the representation of the second user interface customization precedes a most recent modification of the representation of the first user interface customization. In an example implementation, order determination module \u2032 determines that the most recent modification of the representation of the second user interface customization precedes the most recent modification of the representation of the first user interface customization.","At step , the representation of the first user interface customization is serialized to facilitate distribution thereof. In an example implementation, serialization module  serializes the representation of the first user interface customization.","At step , the serialized representation of the first user interface customization is retrieved. In an example implementation, retrieval module  retrieves the serialized representation of the first user interface customization.","At step , the first user interface customization is applied with respect to a rendering of the form in response to determining that the most recent modification of the representation of the second user interface customization precedes the most recent modification of the representation of the first user interface customization. In an example implementation, application module \u2032\u2033 applies the first user interface customization with respect to the rendering of the form.",{"@attributes":{"id":"p-0105","num":"0104"},"figref":["FIG. 13","FIG. 1","FIG. 14"],"b":["1300","1300","1300","104","100","1300","104","104"]},"As shown in , manager \u2033 includes a capture module \u2033, an inquiry module , an indication receipt module , a serialization module , a retrieval module , and an application module \u2033\u2033. Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a representation of a first user interface customization regarding a declaratively-defined form is captured. In an example implementation, capture module \u2033 captures the representation of the first user interface customization.","At , a representation of a second user interface customization regarding a form is captured. In an example implementation, capture module \u2033 captures the representation of the second user interface customization.","At step , an inquiry is provided to a user to select the first user interface customization or the second user interface customization. For instance, the inquiry may be provided via a user interface that is available to the user. In an example implementation, inquiry module  provides the inquiry to the user.","At step , an indication is received that the user selects the first user interface customization. In an example implementation, indication receipt module  receives the indication that the user selects the first user interface customization.","At step , the representation of the first user interface customization is serialized to facilitate distribution thereof. In an example implementation, serialization module  serializes the representation of the first user interface customization.","At step , the serialized representation of the first user interface customization is retrieved. In an example implementation, retrieval module  retrieves the serialized representation of the first user interface customization.","At step , the first user interface customization is applied with respect to a rendering of the form in response to receiving the indication. In an example implementation, application module \u2033\u2033 applies the first user interface customization with respect to the rendering of the form.",{"@attributes":{"id":"p-0114","num":"0113"},"figref":["FIG. 15","FIG. 1","FIG. 16"],"b":["1500","1500","1500","104","100","1500","104","104"]},"As shown in , manager \u2033 includes a capture module \u2033, an assignment module , a serialization module , a retrieval module , and an application module \u2032\u2033\u2033. Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a representation of a first user interface customization regarding a declaratively-defined form is captured. In an example implementation, capture module \u2033 captures the representation of the first user interface customization.","At , a representation of a second user interface customization regarding a form is captured. In an example implementation, capture module \u2033 captures the representation of the second user interface customization.","At step , a first priority that is greater than a second priority is assigned to the representation of the first user interface customization. In an example implementation, assignment module  assigns the first priority to the representation of the first user interface customization.","At step , the second priority is assigned to the representation of the second user interface customization. In an example implementation, assignment module  assigns the second priority to the representation of the second user interface customization.","At step , the representation of the first user interface customization is serialized to facilitate distribution thereof. In an example implementation, serialization module  serializes the representation of the first user interface customization.","At step , the serialized representation of the first user interface customization is retrieved. In an example implementation, retrieval module  retrieves the serialized representation of the first user interface customization.","At step , the first user interface customization is applied with respect to a rendering of the form in response to the first priority being greater than the second priority. In an example implementation, application module \u2032\u2033\u2033 applies the first user interface customization with respect to the rendering of the form.",{"@attributes":{"id":"p-0123","num":"0122"},"figref":["FIG. 17","FIG. 1","FIG. 18"],"b":["1700","1700","1700","104","100","1700","104","104"]},"As shown in , manager \u2033 includes a capture module \u2032\u2033, a serialization module \u2033, a retrieval module \u2033, and an application module \u2033\u2033\u2033. Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a plurality of representations of a plurality of respective user interface customizations regarding a declaratively-defined form is captured. In an example implementation, capture module \u2032\u2033 captures the plurality of representations of the plurality of respective user interface customizations.","At step , the plurality of representations of the plurality of respective user interface customizations is serialized to facilitate distribution thereof. In an example implementation, serialization module \u2033 serializes the plurality of representations of the plurality of respective user interface customizations.","At step , the plurality of serialized representations of the plurality of respective user interface customizations is retrieved. In an example implementation, retrieval module \u2033 retrieves the plurality of serialized representations of the plurality of respective user interface customizations.","At step , the plurality of user interface customizations is applied with respect to a rendering of the form in an order that is based on a plurality of hierarchical classes of a class hierarchy to which the plurality of respective user interface customizations is targeted. In an example implementation, application module \u2033\u2033\u2033 applies the plurality of user interface customizations with respect to the rendering of the form.","For example, a data model may include a plurality of classes, such that each class corresponds to a respective level of a class hierarchy. In accordance with this example, the first (i.e. root) level of the hierarchy may include a generic class called \u201centity\u201d. A second level of the hierarchy may include a \u201cwork item\u201d class that is derived from the \u201centity\u201d class. A third level of the hierarchy may include an \u201cincident\u201d class that is derived from the \u201cwork item\u201d class, and so on. The first level is referred to as being the highest level in the hierarchy, and the other levels are referred to as consecutively lower levels in the hierarchy.","The properties that are associated with the form may be defined based on the classes in the hierarchy. Properties that are at a designated level of the hierarchy are inherited to classes in consecutively lower levels of the hierarchy with respect to the designated level. For instance, if a property is at the second level of the hierarchy, that property is inherited to classes in the third level, then to classes in the fourth level, and so on. It should be noted that relationship types that are at a designated level of the hierarchy may be inherited to classes in consecutively lower levels of the hierarchy with respect to the designated level. Accordingly, the plurality of user interface customizations may be targeted at the various levels of the class hierarchy.",{"@attributes":{"id":"p-0131","num":"0130"},"figref":["FIG. 19","FIG. 1","FIG. 20"],"b":["1900","1900","1900","104","100","1900","104","104"]},"As shown in , manager \u2032\u2033\u2033\u2033\u2033 includes a capture module , a serialization module , a retrieval module , an application module \u2032\u2033\u2033\u2033, and a form receipt module . Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a representation of a user interface customization regarding a declaratively-defined form is captured. In an example implementation, capture module  captures the representation of the user interface customization.","At step , the representation of the user interface customization is serialized to facilitate distribution thereof. In an example implementation, serialization module  serializes the representation of the user interface customization.","At step , the serialized representation of the user interface customization is retrieved. In an example implementation, retrieval module  retrieves the serialized representation of the user interface customization.","At step , the user interface customization is applied with respect to a rendering of the form in response to retrieving the serialized representation of the user interface customization. In an example implementation, application module \u2032\u2033\u2033\u2033 applies the user interface customization with respect to the rendering of the form.","At step , a modified version of the form is received. In an example implementation, form receipt module  receives the modified version of the form.","At step , the user interface customization is applied with respect to a rendering of the modified version of the form to an extent that the user interface customization is applicable to the modified version. For example, assume for purposes of illustration that the original version of the form has a textbox at first position X=20, Y=20, and a user moves the textbox to a second position X=40, Y=60 using a form customization tool. Further assume that the modified version of the form is released, which has the textbox at position X=80, Y=80. In accordance with this example, the customization is applied to the modified version of the form, such that the textbox is displayed at position X=40, Y=60 when the modified version of the form is displayed to the user. When a form customization is no longer applicable, for example, because a control that had customizations defined for it does not exist in the modified version of the form, the form customization is ignored. In an example implementation, application module \u2032\u2033\u2033\u2033 applies the user interface customization with respect to the rendering of the modified version of the form.",{"@attributes":{"id":"p-0139","num":"0138"},"figref":["FIG. 21","FIG. 1","FIG. 22"],"b":["2100","2100","2100","104","100","2100","104","104"]},"As shown in , manager \u2033\u2033\u2033\u2033\u2033 includes a capture module , a serialization module , a retrieval module , an application module \u2033\u2033\u2033\u2033, and a deletion module . Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a representation of a user interface customization regarding a declaratively-defined form is captured. In an example implementation, capture module  captures the representation of the user interface customization.","At step , the representation of the user interface customization is serialized to facilitate distribution thereof. In an example implementation, serialization module  serializes the representation of the user interface customization.","At step , the serialized representation of the user interface customization is retrieved. In an example implementation, retrieval module  retrieves the serialized representation of the user interface customization.","At step , the user interface customization is applied with respect to a rendering of the form in response to retrieving the serialized representation of the user interface customization. In an example implementation, application module \u2032\u2033\u2033\u2033 applies the user interface customization with respect to the rendering of the form.","At step , the representation of the user interface customization is deleted from persistent storage in response to an instruction. For example, the instruction may be received from a user. In another example, the instruction may be received from an automated system. In an example implementation, deletion module  deletes the representation of the declaration user interface customization from the persistent storage.","At step , the form is rendered without the user interface customization in response to deletion of the representation of the user interface customization from the persistent storage. In an example implementation, application module \u2033\u2033\u2033\u2033 renders the form without the user interface customization. For instance, when the form is loaded in memory, application module \u2033\u2033\u2033\u2033 may check the persistent memory to determine whether customizations regarding the form are present. If the representation of the user interface customization is not present, application module \u2033\u2033\u2033\u2033 may render the form without the user interface customization.",{"@attributes":{"id":"p-0147","num":"0146"},"figref":["FIG. 23","FIG. 1","FIG. 24"],"b":["2300","2300","2300","104","100","2300","104","104"]},"As shown in , manager \u2033\u2033\u2033\u2033\u2033 includes an interface module , an indicator receipt module , and a capture module \u2033\u2033. Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a what-you-see-is-what-you-get interface is provided that enables a user to make modifications to a visual representation of a declaratively-defined form in real time. In an example implementation, interface module  provides the what-you-see-is-what-you-get interface.","At step , an indicator that specifies that the user makes a first modification to the visual representation is received. In an example implementation, indicator receipt module  receives the indicator.","At step , a representation of a first user interface customization regarding the form is captured. The first user interface customization corresponds to the first modification of the visual representation. In an example implementation, capture module \u2033\u2033 captures the representation of the first user interface customization.",{"@attributes":{"id":"p-0152","num":"0151"},"figref":["FIG. 25","FIG. 1","FIG. 26"],"b":["2500","2500","2500","104","100","2500","104","104"]},"As shown in , manager \u2033\u2033\u2033\u2033\u2033\u2033 includes a capture module , an implementation module , and a providing module . Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a representation of a customization regarding a declaratively-defined form is captured. In an example implementation, capture module  captures the representation of the customization.","At step , the customization is implemented with respect to the form without changing the form in persistent storage. In an example implementation, implementation module  implements the customization with respect to the form.","At step , a visual representation of the form is provided that includes the customization in response to implementing the customization. In an example implementation, providing module  provides the visual representation of the form.",{"@attributes":{"id":"p-0157","num":"0156"},"figref":["FIG. 27","FIG. 1","FIG. 28"],"b":["2700","2700","2700","104","100","2700","104","104"]},"As shown in , manager \u2032\u2033\u2033\u2033\u2033\u2033\u2033 includes a capture module \u2032, an implementation module \u2032, and a providing module \u2032. Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a first representation of a first customization regarding a declaratively-defined form is captured. In an example implementation, capture module \u2032 captures the first representation of the first customization.","At step , the first customization is implemented with respect to the form without changing the form in persistent storage. In an example implementation, implementation module \u2032 implements the first customization with respect to the form.","At step , a second representation of a second customization regarding the form is captured. In an example implementation, capture module \u2032 captures the second representation of the second customization.","At step , the second customization is implemented with respect to the form without changing the form in the persistent storage. In an example implementation, implementation module \u2032 implements the second customization with respect to the form.","At step , a visual representation of the form is provided that includes the first customization and the second customization. In an example implementation, providing module \u2032 provides the visual representation of the form.",{"@attributes":{"id":"p-0164","num":"0163"},"figref":["FIG. 29","FIG. 1","FIG. 30"],"b":["2900","2900","2900","104","100","2900","104","104"]},"As shown in , manager \u2033\u2033\u2033\u2033\u2033\u2033\u2033 includes a creation module . Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a representation of a customization is programmatically created based on instructions received from an automated system. For example, if a property is removed from the data model, form customization(s) that correspond to the property may be automatically removed from the representation of the customization(s). In another example, if a property is added to the data model, form customization(s) that correspond to the property may be automatically added to the representation of the customization(s). In an example implementation, creation module  programmatically creates the representation of the customization.",{"@attributes":{"id":"p-0167","num":"0166"},"figref":["FIG. 31","FIG. 1","FIG. 32"],"b":["3100","3100","3100","104","100","3100","104","104"]},"As shown in , manager \u2032\u2033\u2033\u2033\u2033\u2033\u2033\u2033 includes a capture module \u2033, an implementation module \u2033, and a providing module \u2033. Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","As shown in , the method of flowchart  begins at step . In step , a plurality of representations of a plurality of respective customizations regarding a declaratively-defined form is captured. In an example implementation, capture module \u2033 captures the plurality of representations of the plurality of respective customizations.","At step , the plurality of customizations is implemented with respect to the form in a designated order to provide a plurality of respective form instances without changing the form in persistent storage. A form instance is a version of the form that includes a designated number of the plurality of customizations in accordance with the designated order. For example, a first form instance may include a first customization. A second form instance may include the first customization and a second customization that is applied after the first customization. A third form instance may include the first customization, the second customization applied after the first customization, and a third customization that is applied after the second customization, and so on. In an example implementation, implementation module \u2033 implements the plurality of customizations with respect to the form.","At step , a plurality of sequential visual representations of the plurality of respective form instances is provided in the designated order. In an example implementation, providing module \u2033 provides the plurality of sequential visual representations of the plurality of respective form instances in the designated order.",{"@attributes":{"id":"p-0172","num":"0171"},"figref":["FIG. 33","FIG. 1","FIGS. 4"],"b":["3300","102","106","108","108","104","6","8","10","12","14","16","18","20","22","24","26","28","30","32","3300","3300","3300","3300","3300"]},"As shown in , computer  includes a processing unit , a system memory , and a bus  that couples various system components including system memory  to processing unit . Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. System memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS) is stored in ROM .","Computer  also has one or more of the following drives: a hard disk drive  for reading from and writing to a hard disk, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM, DVD ROM, or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are connected to bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable storage media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for the computer. Although a hard disk, a removable magnetic disk and a removable optical disk are described, other types of computer-readable media can be used to store data, such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like.","A number of program modules may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. These programs include an operating system , one or more application programs , other program modules , and program data . Application programs  or program modules  may include, for example, computer program logic for implementing any one or more of applications A-N, form customization module , validation module , serialization module , providing module , capture module , serialization module , retrieval module , application module , capture module \u2032, serialization module \u2032, retrieval module \u2032, application module \u2032, import module , capture module \u2033, application module \u2033, order determination module , application module \u2032\u2033, order determination module \u2032, application module \u2033\u2033, inquiry module , indication receipt module , application module \u2032\u2033\u2033, assignment module , capture module \u2032\u2033, serialization module \u2033, retrieval module \u2033, application module \u2033\u2033\u2033, application module \u2032\u2033\u2033\u2033, form receipt module , application module \u2033\u2033\u2033\u2033, deletion module , interface module , indicator receipt module , capture module \u2033\u2033, capture module , implementation module , providing module , capture module \u2032, implementation module \u2032, providing module \u2032, creation module , capture module \u2033, implementation module \u2033, providing module \u2033, flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), flowchart  (including any step of flowchart ), and\/or flowchart  (including any step of flowchart ), as described herein.","A user may enter commands and information into the computer  through input devices such as keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to bus , but may be connected by other interfaces, such as a parallel port, game port, or a universal serial bus (USB).","A monitor  or other type of display device is also connected to bus  via an interface, such as a video adapter . In addition to the monitor, computer  may include other peripheral output devices (not shown) such as speakers and printers.","Computer  is connected to a network  (e.g., the Internet) through a network interface or adapter , a modem , or other means for establishing communications over the network. Modem , which may be internal or external, is connected to bus  via serial port interface .","As used herein, the terms \u201ccomputer program medium\u201d and \u201ccomputer-readable medium\u201d are used to generally refer to media such as the hard disk associated with hard disk drive , removable magnetic disk , removable optical disk , as well as other media such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like.","As noted above, computer programs and modules (including application programs  and other program modules ) may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. Such computer programs may also be received via network interface  or serial port interface . Such computer programs, when executed or loaded by an application, enable computer  to implement features of embodiments discussed herein. Accordingly, such computer programs represent controllers of the computer .","Example embodiments are also directed to computer program products comprising software (e.g., computer-readable instructions) stored on any computer useable medium. Such software, when executed in one or more data processing devices, causes a data processing device(s) to operate as described herein. Embodiments may employ any computer-useable or computer-readable medium, known now or in the future. Examples of computer-readable mediums include, but are not limited to storage devices such as RAM, hard drives, floppy disks, CD ROMs, DVD ROMs, zip disks, tapes, magnetic storage devices, optical storage devices, MEMS-based storage devices, nanotechnology-based storage devices, and the like.","While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. It will be apparent to persons skilled in the relevant art(s) that various changes in form and details can be made therein without departing from the spirit and scope of the invention. Thus, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying drawings, which are incorporated herein and form part of the specification, illustrate embodiments of the present invention and, together with the description, further serve to explain the principles involved and to enable a person skilled in the relevant art(s) to make and use the disclosed technologies.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIGS. 4","FIG. 1"],"b":["6","8","10","12","14","16","18","20","22","24","26","28","30","32"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 5","b":["7","9","11","13","15","17","19","21","23","25","27","31"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 29"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 33"}]},"DETDESC":[{},{}]}
