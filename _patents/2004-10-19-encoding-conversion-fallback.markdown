---
title: Encoding conversion fallback
abstract: A system and method for converting a source data sequence to a target encoding is disclosed. A fallback technique, specifiable by a user program component, is applied to data in the source data sequence that cannot be mapped to the target encoding. A particular embodiment involves methods for encoding a Unicode string as a sequence of bytes in a target encoding, and decoded the encoded bytes back to Unicode.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07468683&OS=07468683&RS=07468683
owner: Microsoft Corporation
number: 07468683
owner_city: Redmond
owner_country: US
publication_date: 20041019
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED PATENT APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This patent application is a continuation of a U.S. patent application Ser. No. 10\/703,813, filed Nov. 7, 2003, now U.S. Pat. No. 6,861,963 entitled \u201cENCODING CONVERSION FALLBACK.\u201d","The present invention relates generally to encodings of data in computer systems, and more particularly to methods and mechanisms for conversions from one encoding to another.","Modern computer systems typically provide facilities for representing text, as for example on a monitor or other display device. Because a computer stores text in digital format, a character set encoding is used to map a character to a unique digital representation. Numerous character set encodings (or codepages) have been developed; some well-known examples include Unicode, ISO-10646, ASCII, ISCII, ISO-2022, and EUC. Character set encodings vary significantly in their scope; certain encodings are suited to particular languages and writing systems. At one extreme, the Unicode standard supports millions of characters using 16-bit encodings and incorporates most writing systems in contemporary use. By contrast, ASCII supports only 127 characters. In general, two distinct encodings will not support the same set of characters. Because many different encodings for printing and displaying text characters are in use, it is often necessary to convert text from one encoding to another. The growth in worldwide computer-based communications involving users working with different languages and writing systems has made more critical the need for effective means of conversion between encodings.","Conversion between encodings is sometimes a straightforward matter. For each character in a source encoding string, some method or mechanism is used in order to determine the representation for the character in the target encoding. This might involve something as simple as a table lookup or a shift sequence. Conversion presents difficulties, however, when a character in the source encoding has no defined mapping to a character in the target encoding. In such a situation, a \u201cfallback\u201d technique may be applied to the character that is unknown or invalid in the target encoding.","Perhaps the simplest fallback solution involves substituting a space or a default symbol, such as \u2018?\u2019 or \u2018\u25a1\u2019, in place of the unknown or invalid source character. This fallback technique may be called a \u201creplacement fallback\u201d approach. For example, the source string \u201cHello world\u201d might be converted to \u201c?Hello world?\u201d in a target encoding that does not recognize or provide a mapping for the character \u2018\u2019. This solution, while easy to apply, will often be undesirable. In particular, the loss of information involved in the fallback conversion will generally make it impossible to recover the source when reversing the direction of the conversion.","In another common fallback technique, known as \u201cbest fit,\u201d the invalid or unknown input character is converted to the character in the target encoding with the nearest graphical likeness. For example, a source character \u2018\u00c4\u2019 might be represented as \u2018A\u2019 in ASCII, which has no A-diaeresis character. As with the replacement fallback technique, best-fit will have drawbacks in many situations. It can lead to compromises in security. For example, if an account on a system is protected by the password \u201cBjorn\u201d, an intruder could gain access to the account with the input \u201cBj\u00f6rn\u201d if the input is subjected to a best-fit conversion. Naive substitution of visually-similar characters may alter or obscure the intended meaning of a sequence of characters in undesirable ways. Decoding of encoded text back to the source may become impossible.","No single fallback mechanism can be devised that will be suitable or desirable in all encoding conversion situations. Nevertheless, in most encoding conversion systems only one fallback technique is provided. Where some ability to define or select among different fallback approaches has been provided, it has been on a very restricted and non-extensible basis.","In accordance with one aspect of the present invention, a system for converting a source data sequence to a target encoding is provided. The system includes a user program component, an encoding component, and a fallback component. The fallback component applies a fallback technique, specified by the user program, to data in the source data sequence that cannot be mapped to the target encoding by the encoding component.","In accordance with another aspect of the invention, a method for converting a source data sequence to a target encoding is provided. If an element of the source data sequence cannot be represented in the target encoding, a fallback routine, selected by a user program, is executed.","In accordance with another aspect of the invention, a method is provided for encoding a Unicode string as a sequence of bytes in a target encoding. If a fallback buffer is empty, the next input buffer character, if any, is read. If the character can be represented in the target encoding, the character is encoded; otherwise, a specified fallback routine is applied to the character.","In accordance with another aspect of the invention, a method for decoding a sequence of bytes to an original Unicode encoding is provided. One or more input bytes are read from an input buffer. If the input can be decoded to Unicode, the resulting Unicode string is added to an output buffer; otherwise, a specified fallback routine is applied to the input.","Certain embodiments of the invention are discussed below with reference to . However, those skilled in the art will readily appreciate that the detailed description given herein with respect to these figures is for illustrative purposes, and that the invention extends beyond these embodiments.","As broadly illustrated in , an embodiment of the present invention provides for extensible conversion fallback in the context of both \u201cencoding\u201d and \u201cdecoding\u201d data. In this specialized usage, a Unicode string  is \u201cencoded\u201d by being converted to a representation  in some other character set encoding or codepage, such as ASCII. Thereafter a sequence of encoded bytes  can be \u201cdecoded\u201d back to a Unicode representation . In an embodiment, the encoding and decoding are done by way of declaring objects ,  of an Encoding class, which can make further use of objects of Encoder and Decoder classes, which form part of the class library made available in the .NET development framework of Microsoft Corporation. In accordance with the present invention, these objects in turn make use of fallback class objects, so that source data that cannot be directly represented in the target encoding or in the conversion back to Unicode can be handled appropriately in accordance with specified fallback techniques. It should be noted that the present invention is not restricted to conversions to and from Unicode. Instead, it is applicable more generally to conversions between different encoding systems.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["101","103","101","105","105","107","109","111","111","113","111","105","101"]},"The independence of the fallback class component  in the design presented in  permits a wide variety of fallback techniques to be used. In addition to the conventional replacement and best-fit fallback solutions discussed in the background section above, an exemplary fallback technique can involve throwing an exception. An exemplary fallback can also include resynchronizing the input data stream. In an embodiment, a replacement fallback technique can include a mechanism to detect whether the replacement approach has caused the fallback routine to become stuck in a loop. The system design of  allows for the fallback class to be chosen from a variety of sources. The fallback class can be included as part of a development framework, such as Microsoft Corporation's .NET framework ; it can be supplied by an operating system or middleware system vendor ; it can be designed by the user or application programmer  associated with the user program ; or it can be chosen from a third-party fallback class library . This design allows for reuse of middleware libraries and other libraries. Moreover, it enables a fallback to be used with an encoding without the fallback designer having to know precisely how the encoding works, and without the encoding designer having to know precisely how the fallback works.","The flow diagram of  illustrates steps involving encoding Unicode source data in an embodiment of the invention. Input characters that cannot be encoded are handled in accordance with a fallback. Initially, at step , the fallback buffer is examined in case there is any fallback data remaining to be processed from a previous iteration of the procedure. If the fallback buffer is empty, the input buffer is then examined at step . If the input buffer is empty, the procedure terminates. If there is data in the input buffer, at step  the next character is read. Decision block  determines whether the character has a straightforward conversion in the target encoding. If so, the character is encoded at step , and the procedure returns to the initial step . If, however, the character cannot be mapped to the target encoding, a fallback is calculated for the input character at step . The next character in the fallback buffer is read at step , and decision block  is entered again. If, in the initial step , the fallback buffer is not empty, the procedure proceeds from step , reading the next character in the fallback buffer.","The flow diagram of  illustrates corresponding steps involving decoding a sequence of bytes represented encoded Unicode data. Again, input characters that cannot be encoded are handled in accordance with a fallback. Initially, at step , the input buffer is examined. If it is empty, the procedure terminates. If there is data in the input buffer, the next input byte, or set of bytes, is obtained at step . Decision block  determines whether the byte or bytes can be decoded back to Unicode. If so, at step  the conversion occurs, and at step  the decoded string is added to the output buffer. The procedure then returns to the initial step , examining the input buffer. If, at decision block , it is determined that the input byte or bytes cannot be decoded to Unicode, at step  a fallback string is generated, and at step  the fallback string is added to the output buffer. The procedure then returns to the initial step . Note that while  assume that the fallback technique results in data that can then be incorporated in the encoded or decoded output, it is also possible for a fallback to throw an exception or provide some other alternative execution path.","In the embodiment depicted in , the execution paths for encoding and decoding are different primarily because it is assumed that fallback output will be in Unicode for consistency. In an alternative embodiment, fallback output can be in the target codepage, in which case the encoding execution path would resemble the decoding process presented in . In another alternative embodiment, fallback output can be provided in a third data representation, in which case both the encoding and decoding execution paths would resemble the encoding process presented in .","In an embodiment of the invention, a round-trip conversion of data without loss is possible in cases where the source data is not directly encodable in the target representation. For example, suppose that the source data is a Unicode string including the Unicode character \u2018\u00c4\u2019, and that the target encoding does not support \u2018\u00c4\u2019. The Unicode value of the character \u2018\u00c4\u2019 is \\u00c1. A fallback can encode \u2018\u00c4\u2019 as \u201c&00C1\u201d, allowing lossless conversion back to Unicode \u201c\u00c4\u201d from the target representation.","The invention has been described with respect to embodiments involving conversions between character set encodings. However, the invention is also applicable to other kinds of encoding conversions of input. For example, the invention can be applied to the decoding of an encrypted text document, or to the decoding of a compressed text document, with customized fallback routines being executed in situations involving loss of data or some other difficulty in transforming the data back to the unencrypted or uncompressed form. The invention can also be applied to the use of encoding in reading or writing a data stream of any sort, such as a data stream to or from disk, radio transmission data, or peripheral device communication in general.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5","b":["400","400","440","480","440","474","473","440","420","424","430","422","420","430","440","430","420","420","437","430","430","434"]},"The exemplary computer machine  further includes various input\/output devices and media, such as a display  and a printer , and including secondary storage devices such as a non-removable magnetic hard disk , a removable magnetic disk , and a removable optical disk . Such computer-readable media provide nonvolatile storage of computer-executable instructions and data; the hard disk  is also commonly used along with the primary memory  in providing virtual memory. It will be appreciated by those skilled in the art that other types of computer-readable media that can provide volatile and nonvolatile storage of data accessible by a computer can also be used in the exemplary computer environment . The computer  has a file system  associated with the operating system . The file system  serves as an interface that maps a set of logically-organized named files to data physically stored on secondary media, such as data stored in clusters or sectors on the hard disk .","While illustrative embodiments of the invention have been illustrated and described, it will be appreciated that various changes can be made without departing from the invention. Similarly, any process steps described herein may be interchangeable with other steps in order to achieve the same result. In addition, the illustrative examples described above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. On the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["While the appended claims set forth the features of the present invention with particularity, the invention, together with its objects and advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings, of which:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
