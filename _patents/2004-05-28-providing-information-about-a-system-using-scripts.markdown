---
title: Providing information about a system using scripts
abstract: Methods and systems for providing information a client requested about a system using scripts are described. In one embodiment, one or more scripts request information about a computer system. A translator receives the information about the system from the scripts. The translator stores the information about the system in readily accessible data structures.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08230001&OS=08230001&RS=08230001
owner: Hewlett-Packard Development Company, L.P.
number: 08230001
owner_city: Houston
owner_country: US
publication_date: 20040528
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND ART","DISCLOSURE OF THE INVENTION","BEST MODE FOR CARRYING OUT THE INVENTION","System and Functional Overviews","The Common Format","Detailed System Description","Operational Example","CONCLUSION"],"p":["Embodiments of the present invention relate to providing information about systems. More specifically, embodiments of the present invention relate to using scripts as a part of obtaining the information from the system.","Frequently, applications for obtaining information about systems are implemented using clients and servers. For example, the systems may be a networking systems, power supplies, a system that communicates with disk drives, etc. An application may use the information about the systems to report the status of the systems to people who read the reports. For example in this case, the storage capacity of a disk drive may be low and a report may be made of this condition. The application may even take actions based on the information to correct problems occurring on the systems. For example in this case, if the storage capacity of a disk drive is low, actions may be taken to move data from one disk drive to another disk drive.","The present invention allows providers to be coded in a different language than the object manager. The present invention allows for new providers without negatively impacting the quality of the object manager. The present invention does not require the time consuming process of re-compiling, link-editing and installing providers while testing.","Embodiments of the present invention pertain to methods and systems for providing information about systems using scripts is described. In one embodiment, one or more scripts request information about a computer system. A translator receives the information about the system from the scripts. The translator stores the information about the system in readily accessible data structures.","The drawings referred to in this description should not be understood as being drawn to scale except if specifically noted.","Reference will now be made in detail to various embodiments of the invention, examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with these embodiments, it will be understood that they are not intended to limit the invention to these embodiments. On the contrary, the invention is intended to cover alternatives, modifications and equivalents, which may be included within the spirit and scope of the invention as defined by the appended claims. Furthermore, in the following description of the present invention, numerous specific details are set forth in order to provide a thorough understanding of the present invention. In other instances, well-known methods, procedures, components, and circuits have not been described in detail so as not to unnecessarily obscure aspects of the present invention.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 1","FIG. 1"],"b":["170","180","192","194","110","160","122","124","126","160","150","132","134","136","132","122","134","124","136","126"]},"The application  at client  may request information about systems , ,  from server  using queries , . These queries ,  may be SQL type queries. The object manager  receives the queries ,  and determines which provider , ,  is appropriate for obtaining the requested information from the systems , ,  in response to the queries , . For example, if system  is a networking system and a query  was received requesting the transfer rate of the networking system, then object manager  would use provider  to obtain the requested information. Similarly, if system  is a disk drive system and a query  was received requesting the storage capacity of the disk drive system, then object manager  would use provider  to obtain the requested information.","Typically, an object manager  and application , or parts of application , may be implemented by programmers working for one company, whereas providers , ,  are implemented by programmers working for the companies that sell the systems , , . Continuing the example, object manager  and application  may be implemented by a company that sells system monitoring software, whereas, provider  may be implemented by a company that sells network systems, e.g., system .","According to the implementation depicted in , the providers , ,  reside in the same address space  as the object manager . Therefore, the providers , ,  are coded using the same language as object manager . If the companies that implement systems , ,  do not have programmers that can program in the language that object manager  is coded in, the companies may not be willing to implement providers , ,  that work with object manager . This would reduce the market share that the company responsible for object manager  would be able to reach.","Further, the object manager  is vulnerable to the quality of the providers , , . For example, if the providers , ,  have memory leaks, then the performance of the object manager  will degrade and possibly the object manager  will crash over a period of time as it is executed. In a second example, the providers , ,  may use un-initialized variables for referencing storage which would also have a negative effect on the quality of the object manager .","As more companies provide more systems, the object manager  will need to be tested with new providers. To test the new providers, a client  will need to be connected to the server  to issue queries , . Each time a bug is found in the new providers, the providers , ,  will need to be re-compiled, link-edited, and installed on the server , which is a time consuming process.","For these and other reasons, a method and\/or a system that allows for providers to be coded in a different language than the object manager would be valuable. A method and\/or system that allows for new providers without negatively impacting the quality of the object manager would also be value. A method and\/or system that does not require the time consuming process of re-compiling, link-editing and installing providers while testing would also be value.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 2","FIG. 2"],"b":["200","200","170","210","210","250","240","242","244","246","248","232","234","236","238","222","224","250","240","260"]},"According to one embodiment of the present invention, command providers , , ,  are coded using scripting languages, such as sh (POSIX or Bourne Shell), ksh (Korn Shell), csh (C Shell), Perl, Javascript, or Common Gateway Interface (CGI) scripts. As a result, programmers working for the companies that implement the systems ,  may code the command providers , , ,  in any scripting language that they choose. Further, since the command providers , , ,  are scripts, they can be coded quickly and do not need to be re-compiled, link-edited and re-installed each time programmers modify them in the course of debugging them. Thus, significant amounts of time are saved in implementing the command providers , , , . Additionally, since the command providers , , ,  are scripts, they do not need to reside in the same address space  as the object manager . As a result, the quality of the command providers , , ,  will not have a negative impact on the quality of the object manager .","According to another embodiment, the command providers , , ,  cause interfaces , , ,  that are native (referred to hereinafter as \u201cnative interfaces\u201d) to systems ,  to be executed. For example, system  may be a networking system and native interface  may be a Netstat command that the networking system provides. Further, the Netstat command may provide values for attributes such as the transfer rate and\/or bit rate of the networking system.","According to one embodiment, the object manager  is a collector of information about systems. For example, object manager  may collect information about systems ,  and filter what portions of the collected information may be provided to client  based on what information is requested by client , as will become more evident.","The blocks in  can be arranged differently than as illustrated, and can implement additional or few features than what are described herein. For example, the command providers , , ,  may be communicatively coupled to more than one native interface. In another example, object manager  may be backwards compatible. In this case, object manager  may interact with providers, such as providers , ,  (), as well as command translator provider  ().","According to one embodiment, the command providers , , ,  provide information about systems ,  in a common format to a command translator provider . According to another embodiment, the common format is defined by the Common Information Modeling (CIM) specification from the Desktop Management Task Force (DMTF). Refer to http:\/\/dmtf.org for information on CIM. In this case, the common format may list the attributes followed by the values of the attributes that the command translator provider  receives from the command provider , , ,  enclosed in brackets, as follows:",{"@attributes":{"id":"p-0025","num":"0024"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example of the Common Format"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Line No.","Lines of the Common Format"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"1","INSTANCE {"]},{"entry":[{},"2","ATTRIBUTE 1 = Value 1;"]},{"entry":[{},"3","ATTRIBUTE 2 = Value 2;"]},{"entry":[{},".","."]},{"entry":[{},".","."]},{"entry":[{},".","."]},{"entry":[{},"N","}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"In the case of the Netstat command, the common format may be take the following form:",{"@attributes":{"id":"p-0027","num":"0026"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example of the Common Format for the Netstat Command"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Line No.","Lines of the Common Format"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"1","INSTANCE {"]},{"entry":[{},"2","TRANSFER RATE = 1 MB\/sec;"]},{"entry":[{},".","."]},{"entry":[{},".","."]},{"entry":[{},".","."]},{"entry":[{},"N","}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"According to another embodiment, the common format may be defined by any markup language, such as Hypertext Markup Language (HTML), Extensible Markup Language (XML), and Vector Markup Language (VML). Further, the common format may be defined with any Data Definition Language (DDL), such as those that are used by SQL-type databases.","As depicted in , the application  at client  may request information about systems ,  from server  using queries , . Object manager  receives these queries , . Based on the queries , , the object manager  determines whether the command translator provider  can obtain the information the queries ,  requested. Assuming that command translator provider  (also known as a \u201ctranslator\u201d) can obtain the information, the command translator provider  determines which command provider , , ,  can obtain the requested information.","The command providers , , ,  cause the native interfaces , , ,  to be executed to obtain information from the systems , . According to one embodiment, these native interfaces , , ,  may be commands or application programmer interfaces (APIs) that are supported by the systems , . Assuming that command translator provider  determined that the requested information can be obtained from command provider , then command provider  may cause native interface  to be executed to obtain information from system . Native interface  provides the information obtained from system  to command provider . Command provider  parses the obtained information and provides it to the command translator provider .","According to one embodiment, the command providers , , ,  provide information about systems ,  in a common format to a command translator provider , as described herein. The command translator provider  obtains the requested information from the common format and provides the requested information to the object manager  in readily accessible data structures. The object manager  provides the requested information from the data structures to the client  in response to the queries , .","According to one embodiment, object manager , command translator provider , and the command providers , , ,  communicate with each other using classes. In this case, object manager  may store information describing what classes command translator provider  uses to provide information to object manager  with. Similarly, command translator provider  may store information describing what classes each of the command providers , , ,  use to provide information to the command translator provider  with, according to another embodiment.","Continuing the example, a class may be defined that has attributes for the values that the Netstat command, e.g., native interface , may obtain from the networking system, e.g., system . This class shall be referred to hereinafter as the \u201cNetstat Class.\u201d In this case, object manager  may store information indicating that it may obtain the value of the transfer rate from command translator  using the Netstat class. Further, command translator  may store information indicating that it may obtain the value of the transfer rate from the native interface  using the Netstat class.","When application  issues a query ,  requesting the transfer rate of the networking system, object manager  may use its stored information to determine that the transfer rate may be obtained from command translator provider . Similarly, command translator provider  may use its stored information to determine that it may request the transfer rate from command provider .","According to one embodiment, the data structures that command translator provider  uses to provide requested information to object manager , are instances of classes, as will be described in more detail. According to another embodiment, the instances of the classes may be implemented as tables.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 3","b":["300","300","300","300","300","300"]},"For the purposes of illustration, the discussion of flowchart  shall refer to the structures depicted in . Further, for the purposes of illustration, the discussion of flow chart  shall assume that: (1) system  is a networking system and system  is a disk drive system that interacts with disk drives A, B, and C; (2) native interface  is a Netstat command and native interface  is an API for obtaining information about disk drives (referred to herein as the \u201cdisk drive API\u201d); (3) application  issues a query  requesting the storage capacity of all the disk drives A, B, C that the disk drive system supports and the transfer rate of the networking system; (4) object manager  is backwards compatible and, therefore, is communicatively coupled with providers , ,  as well as command translator provider .","In step , a command translator provider and one or more command providers are created, according to one embodiment. For example, programmers that work for a company that sells monitoring software may create a command translator provider  and programmers that work for companies that sell systems , , such as a networking system and a disk drive system, may create command providers , , according to another embodiment. The command providers ,  would be created using scripts, according to still another embodiment.","In step , the object manager, the command translator provider, and the command providers determine what classes they will use to communicate with each other, according to another embodiment embodiment. For example, the object manager  communicates with the command translator provider  and the other providers , ,  to determine what classes the command translator provider  and the other providers , ,  will use to provide requested information with, according to another embodiment. Continuing the example, the command translator provider  and the object manager  will communicate using the Netstat class and another class (referred to hereinafter as the \u201cdisk drive class\u201d) with attributes for the values the disk drive API provides. The Netstat class may have an attribute for the transfer rate, among other things, and the disk drive class may have an attribute for storage capacity, among other things.","The object manager  stores information describing what classes the command translator provider  and the other providers , ,  will use, according to still another embodiment. In this case, the object manager  may store information describing the netstat class and the disk drive class as well as information that maps these two classes to the command translator provider .","Further, the command translator provider  communicates with the command providers , , ,  to determine what classes the command providers , , ,  will use to provide requested information with, according to one embodiment. In this case, command provider  may use the netstat class to communicate with the command translator provider , Similarly, command provider  may use the disk drive class to communicate with the command translator provider .","The command translator provider  stores information describing what classes the command providers , , ,  will use, according to another embodiment. In this case, the command translator provider  may store information describing the netstat class and the disk drive classes well as information mapping the netstat class to command provider  and the disk drive class to command provider .","In step , the object manager receives a request for information about one or more systems, according to yet another embodiment. Continuing the example, application  issues a query  requesting the storage capacity of all the disk drives that the disk drive system (system ) supports and the transfer rate of the networking system (system ). Object manager  receives the query .","In step , the object manager determines that the command translator provider can obtain the requested information, according to one embodiment. The object manager  may determine to obtain the requested information from the command translator provider  based on the stored classes, according to another embodiment. For example, the object manager  previously stored information that command translator provider  can provide information about systems ,  that pertain to the netstat class and the disk drive class. In this case, the requested information (e.g., transmission rate and storage capacities of all the disk drives) pertain to the netstat class and the disk drive class. Therefore, the object manager  can use the information stored in step  to determine that the command translator provider  can obtain the requested information.","In step , the command translator provider selects which command providers can obtain the requested information, according to another embodiment. According to still another embodiment, the command translator provider  determines which command providers , , ,  to obtain the requested information from based on the stored classes. For example, the command translator provider  uses use the information stored in step  to determine that command provider  can provide information about the transfer rate. Similarly, the command translator provider  can use the information it previously stored to determine that command provider  can provide information about the storage capacity of all the disk drives.","In step , the selected command providers request the information about the systems, according to still another embodiment. According to yet another embodiment, the selected command providers ,  may respectively cause the execution of native interfaces ,  to obtain output from the native interfaces , . The output may include the requested information, among other things. Continuing the example, the output from native interface  may include the transfer rate and the output of native interface  may include the storage capacity of disk drives A, B, and C.","The command providers ,  may respectively parse the output from the native interfaces ,  and provide values, such as the transfer rate and the storage capacity, in common formats such as that depicted in table 1 to the command translator provider , according to one embodiment. In this case, command provider  may provide output, such as that depicted in table 1, where an attribute (line 1 of table 1) is \u201ctransfer rate\u201d and the value (line 1 of table 1) is the value of the transfer rate. Similarly, the command provider  may provide output, such as that depicted in table 1, where the attribute (line 1 of table 1) is \u201cstorage capacity\u201d, and the values (line 1 of table 1) are the values of the storage capacities of disk drives A, B, C (referred to hereinafter as the \u201cnetstat output in common format\u201d). Since, application  requested the storage capacity for all the disk drives that system  supports, command provider  may provide three sets of output for the disk drives A, B, and C (referred to hereinafter as the \u201cdisk drive output in common format\u201d).","In step , the command translator provider receives the information about the systems from the command providers, according to one embodiment. For example, command translator provider  may receive the netstat output in common format from command provider  and the three disk drive outputs in common format for disk drives A, B, and C.","In step , the command translator provider stores the information about the systems in readily accessible data structures, according to still another embodiment. For example, the command translator provider  may store the output (e.g., the netstat output in common format and the three disk drive outputs in common format) in data structures that the object manager  may readily access, according to yet another embodiment. The data structures may be instances of classes, such as the netstat class and the disk drive class.","Continuing the example, the command translator provider  may create one instance of the netstat class and initialize the attributes with the values from the netstat output in common format. Similarly, the command translator provider  may create three instances of the disk drive class and initialize the attributes with the values from the disk drive output in common format.","According to another embodiment, information stored in instances of classes are types of information. For example, the information stored in an instance of the netstat class is one type of information whereas information stored in an instance of the disk drive class is another type of information.","The object manager  may be a collector of information from one or more systems , , according to one embodiment. For example, the object manager  in this operational example has collected information from a netstat command and information from a disk drive API for systems  and . Further, according to another embodiment, the object manager  may filter what portions of the collected information are provided to client  based on what information the client  requested. For example, client  requested the transaction rate and the storage capacity for all the disk drives in step . The object manager  may take the transfer rate from the one instance of the netstat class and the storage capacities from the three instances of the disk drive class and provide those values to the application  on client  in response to query .","In the prior art as depicted in , the providers , ,  are coded in the same language as the object manager . According to one embodiment of the present invention, command providers , , ,  () are coded using scripting languages. As a result, programmers working for the companies that implement the systems ,  may code the command providers , , ,  in any scripting language that they choose.","Further, since the command processors , , ,  are scripts, they do not need to reside in the same address space  as the object manager . As a result, the quality of the command providers , , ,  will not have a negative impact on the quality of the object manager .","Since the command providers , , ,  are scripts, not only can they be coded quickly, but they do not need to be re-compiled, link-edited and re-installed each time programmers modify them in the course of debugging them, thus, saving on development time. For example, an ordinary prior art provider , ,  may take a week to implement whereas a command provider , , ,  of the present invention with analogous function may take only a day to implement.","Further, in order to test prior art providers , , , application  needs to issue queries , . However, according to one embodiment, the command providers , , ,  may be tested without the application  on client  and may be tested independent from other code, such as other command providers , , ,  and even the object manager . For example, the scripts (e.g., command providers -) can be tested by executing them and inspecting the output. Thus, if the other code (such as the object manager  or the application ) breaks, testing of the command providers , , ,  does not have to be stopped."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and form a part of this specification, illustrate embodiments of the invention and, together with the description, serve to explain the principles of the invention:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3","b":"300"}]},"DETDESC":[{},{}]}
