---
title: Communication endpoint supporting multiple provider models
abstract: A method for communication includes receiving a request from a first party, submitted via a first communication service provider to a telephony application, to place a call using the application to a second party. Responsive to a characteristic of the call placed by the first party, a second communication service provider is selected to carry the call between the application and the second party. The second party is then connected via the second communication service provider to communicate with the first party using the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07454505&OS=07454505&RS=07454505
owner: International Business Machines Corporation
number: 07454505
owner_city: Armonk
owner_country: US
publication_date: 20020124
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["This application claims the benefit of U.S. Provisional Patent Application 60\/264,520, filed Jan. 25, 2001, which is incorporated herein by reference.","The present invention relates generally to communication systems, and specifically to computer telephony application support.","The Java Telephony API (JTAPI) is a portable, object-oriented application programming interface for computer telephony applications written in the Java\u2122 programming language. It is described in documents that are available at java.sun.com\/products\/jtapi. These documents include \u201cThe Java Telephony API: An Overview\u201d (version 1.2, October, 1997) and \u201cAn Introduction to JTAPI (Java Telephony API),\u201d by Spencer Dawkins (release 1.2, rev. 0.7, November, 1997), as well as the itself (version 1.3, June, 1999). All of these documents are incorporated herein by reference. JTAPI uses a \u201ccore plus extensions\u201d structure, in which the \u201cCore JTAPI\u201d package includes the basic call object model used in placing, answering and terminating telephone calls, while the extension packages add features required by more advanced applications.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1","b":["20","22","24"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["Call logging and tracking","Auto-dialing","Screen-based telephone applications","Screen-pop software","Call routing applications","Automated attendants","Interactive voice response (IVR) systems","Agent software","Call center management","Fax send and receive","Voice mail.\n\nThese applications are listed by way of example, and by no means represent an exhaustive list of such applications.\n"]}}}},"In order to enable such telephony application services, the network provider must implement JTAPI provider software  that exposes an application programming interface (API)  complying with JTAPI specifications. The same API is exposed regardless of the underlying network platform: for example, network  may be a circuit-switched network, such as a public switched telephone network (PSTN) with a SS7 protocol stack or a private branch exchange (PBX) using proprietary protocols, or it may be a packet-switched network, such as an Internet Protocol (IP) network using a H.232 stack to carry voice over IP (VoIP). Because API  is uniform among all network types, application  should run transparently across all platforms. The application developer need only know that the provider supports the Java extension packages used by the application.","Provider implementations , however, are tightly bound with telephony stack  and must be written for the provider's specific telephony environment. The JTAPI specification does not give standard classes that can be reused across different provider platforms. Service providers must therefore develop their own implementations, after having first gained a sufficient understanding of Java, JTAPI and object-oriented programming methods. Furthermore, different providers may interpret the specification differently, so that their implementations may not exhibit completely uniform behavior in response to API calls. Multi-platform providers, such as call centers offering both PSTN and VoIP services, must develop separate implementations for each platform they support.","Along similar lines to JTAPI, Microsoft Corporation (Redmond, Wash.) offers a telephony API for Windows\u00ae operating systems known as \u201cTAPI.\u201d This API is described in a white paper entitled, \u201cIP Telephony with TAPI 3.0\u201d (1997), which is available from Microsoft and is incorporated herein by reference. TAPI is said to enable convergence of traditional PSTN telephony and IP telephony, by providing generic methods for making connections between two or more machines, and accessing any media streams involved in the connections. In addition to its API for telephony applications, TAPI 3.0 also defines a standard Telephony Service Provider Interface (TSPI), for use by service providers in linking the TAPI protocol-independent call model with their own protocol-specific call control mechanisms.","Another, related environment for telephony application support is \u201cJava APIs for Integrated Networks\u201d (JAIN\u2122), which is intended to be used in creating next-generation network services, which are portable across heterogeneous networks. JAIN is built around a Java Call Control (JCC) API, which is defined in the \u201cJAIN JCC Specification\u201d (Version 1.0, 2001), which is incorporated herein by reference. This specification is available at jcp.org\/jsr\/detail\/21.prt. The JCC API is a Java interface for creating, monitoring, controlling manipulating and tearing down communications sessions in a converged PSTN, packet-switched and wireless environment. This API is meant to be consistent with JTAPI, although the JAIN call processing capabilities are not as extensive as those provided by JTAPI.","In addition, the JAIN JCC is designed for compatibility with \u201cParlay,\u201d a set of open APIs that have been standardized by an industry consortium known as the Parlay Group. Information regarding the Parlay Group is available at www.parlay.org. Relevant aspects of the Parlay APIs are described, for example, in a specification document entitled 2.1: (June, 2000), which is incorporated herein by reference.","Preferred embodiments of the present invention provide a layered approach to telephony application support, which enables applications to work with multiple different provider implementations simultaneously. All the provider implementations interact with a common abstract call model through a standardized service provider interface. This approach allows multiple parties, supported by multiple different providers, to participate in a single, real-time hybrid call, without requiring the use of a dedicated gateway to link the different provider networks. For each party that joins the call, a provider management interface identifies and loads the appropriate provider implementation dynamically, so that the hybrid call can proceed transparently regardless of the different provider types that may become involved.","In some preferred embodiments of the present invention, the abstract call model is realized in a generic call control layer, such as a generic JTAPI or JAIN call control layer. This layer has both a standard application interface to telephony applications, conforming to the applicable specification, and a standard provider interface, as noted above, for serving multiple different providers. The call model used in the generic call control layer abstracts the common call control functions out of the provider implementations, thus simplifying and standardizing the work that providers must do to enable application support on their networks. Current JTAPI and JCC specifications do not define a provider interface of this sort. Whereas TAPI 3.0, as described above, does provide a common service provider interface for PSTN and IP telephony, it makes no provision for supporting hybrid calls or dynamically loading provider implementations in the course of a call, as does the present invention.","Although preferred embodiments are described herein with particular reference to the JTAPI and JCC specifications and call models, the principles of the present invention may similarly be applied using other abstract call models and interface conventions. As the methods and systems of the present invention may be applied to control not only voice calls, but also data and multimedia sessions, the term \u201ccall\u201d as used herein should be understood to refer generally to any and all sorts of network communication sessions.","There is therefore provided, in accordance with a preferred embodiment of the present invention, a method for communication, including:","receiving a request from a first party, submitted via a first communication service provider to a telephony application, to place a call using the application to a second party;","responsive to a characteristic of the call placed by the first party, selecting a second communication service provider to carry the call between the application and the second party; and","connecting the second party via the second communication service provider to communicate with the first party using the application.","Preferably, receiving the request includes submitting the request to the application via an application programming interface (API), which exposes a platform-independent call model to the application, and wherein connecting the second party includes connecting the call responsive to an instruction submitted by the application to the API. Typically, the first and second communication service providers have respective first and second telephony signaling stacks, and the call model includes an abstract call model that is independent of the telephony signaling stacks used in placing calls to and receiving calls from the application. Further preferably, receiving the request includes passing the request from the first telephony signaling stack to the abstract call model via a service provider interface of the call model, and connecting the second party includes passing signals to the second telephony signaling stack via the service provider interface, wherein the service provider interface is independent of the telephony signaling stacks.","Preferably, passing the request from the first telephony signaling stack includes using a first plug-in program to associate the signals in the first telephony signaling stack with corresponding elements of the service provider interface, and passing the signals to the second telephony signaling stack includes using a second plug-in program to associate the signals in the second telephony signaling stack with the corresponding elements of the service provider interface. Further preferably, selecting the second communication service provider includes selecting the second plug-in program from among a plurality of the plug-in programs that are provided for interacting with the abstract call model. Most preferably, selecting the second plug-in program includes passing information regarding the call to a service manager program via a service management interface of the abstract call model, wherein the service manager program processes the information to determine the characteristic, and selects the second plug-in program responsive to the characteristic from a registry of the plug-in programs.","In a preferred embodiment, receiving the request includes receiving an address of the second party to whom the call is to be placed, and selecting the second communication service provider includes parsing the address to determine the second communication service provider that should be selected. Typically, receiving the address includes receiving a telephone number, and parsing the address includes identifying the second communication provider based on a portion of the telephone number.","In another preferred embodiment, selecting the second communication service provider includes determining a communication protocol to be used in communicating with the second party, and choosing the second communication service provider such that the second communication service provider supports the communication protocol. Typically, receiving the request from the first party includes communicating with the first party via the first communication service provider using a first communication protocol, and the communication protocol used in communicating with the second party includes a second communication protocol, different from the first protocol. In some cases, one of the first and second communication protocols includes a circuit-switched network protocol, while the other of the first and second communication protocols includes a packet-switched network protocol.","In still another preferred embodiment, selecting the second communication service provider includes specifying a selection rule, and applying the selection rule to the characteristic in order to determine the second communication service provider to be selected. For example, specifying the selection rule may include specifying a temporal criterion, so that the second communication service provider is selected depending on a point in time at which the call is placed.","There is also provided, in accordance with a preferred embodiment of the present invention, a method for communication, including:","receiving a request from a first party, submitted to a telephony application, to place a call using the application to a second party;","processing the request to determine a service domain of the call;","responsive to the service domain, selecting a communication service provider to carry the call between the application and the second party; and","connecting the second party via the communication service provider to communicate with the first party using the application.","Preferably, selecting the communication service provider includes providing a registry that lists a plurality of communication service providers and respective service characteristics thereof, and choosing the communication service provider to carry the call by comparing the service domain of the call to the service characteristics of the communication service providers in the registry.","In some preferred embodiments, processing the request includes determining the service domain by parsing an address of the second party to whom the call is to be placed. In one of these preferred embodiments, selecting the communication service provider includes selecting one of a plurality of wireless networks over which to make the call, dependent on the address of the second party.","In other preferred embodiments, the service domain is determined by a communication protocol to be used in communicating with the second party, and selecting the communication service provider includes choosing the communication service provider such that the communication service provider supports the communication protocol. In one of these preferred embodiments, processing the request to determine the service domain includes determining whether to use a circuit-switched network protocol or a packet-switched network protocol to communicate with the second party.","There is also provided, in accordance with a preferred embodiment of the present invention, communication apparatus, including:","a communication interface, arranged to communicate with first and second communication service providers; and","a communication processor, arranged send and receive communications via the communication interface, and further arranged to run a telephony application, such that upon receiving a request from a first party, submitted via the first communication service provider to the telephony application, to place a call using the application to a second party, the processor selects, responsive to a characteristic of the call placed by the first party, a second communication service provider to carry the call between the application and the second party, and connects the second party via the second communication service provider to communicate with the first party using the application.","Preferably, the apparatus includes a memory, which is arranged to store a plurality of the plug-in programs that are provided for interacting with the abstract call model, and wherein the processor is arranged to select the second plug-in program from among the plurality of the plug-in programs in the memory.","In a preferred embodiment, the telephony application includes a teleconferencing application, and the processor is arranged to establish a teleconference between the first and second parties. In another preferred embodiment, the telephony application includes a call center application, and the processor is arranged to establish voice communications between a customer and a call center agent using the call center application.","There is further provided, in accordance with a preferred embodiment of the present invention, apparatus for communication, including:","a communication interface, arranged to communicate with multiple communication service providers; and","a communication processor, arranged send and receive communications via the communication interface, and further arranged to run a telephony application, such that upon receiving a request from a first party, submitted to the telephony application, to place a call using the application to a second party, the processor processes the request to determine a service domain of the call and, responsive to the service domain, selects one of the communication service providers to carry the call between the application and the second party, and connects the second party via the selected communication service provider to communicate with the first party using the application.","There is moreover provided, in accordance with a preferred embodiment of the present invention, a conference bridge, including:","a communication interface, arranged to communicate with first and second communication service providers; and","a communication processor, arranged send and receive communications via the communication interface, and further arranged to run a teleconferencing application, such that upon receiving a request from a first party, submitted via the first communication service provider to the teleconferencing application, to establish a teleconference using the application with a second party, the processor selects, responsive to a characteristic of the call placed by the first party, a second communication service provider to carry the call between the application and the second party, selecting, and connects the second party via the second communication service provider to communicate with the first party using the application.","Preferably, the bridge includes a media gateway, which is arranged to transcode media communications carried between the first and second communication service providers, in accordance with transcoding instructions from the communication processor, dependent on the selected communication service providers.","There is additionally provided, in accordance with a preferred embodiment of the present invention, contact center apparatus, for operation by an agent in the contact center, the apparatus including:","a first communication interface, arranged to communicate with first communication service provider on a circuit-switched communication link;","a second communication interface, arranged to communicate with a second communication service provider on a packet-switched communication link; and","a communication processor, arranged send and receive communications via the communication interfaces, and further arranged to run a contact center application, such that upon receiving a request from an agent operating the apparatus, submitted to the application, to place a call using the application to a specified party, the processor processes the request to determine whether the call is to be carried on the circuit-switched link or the packet-switched link and accordingly selects one of the communication service providers to carry the call between the application and the specified party, and connects the specified party via the selected communication service provider to communicate with the agent using the application.","Preferably, the processor is arranged to connect the agent to communicate with a first party via the circuit-switched link and with a second party via the packet-switched link simultaneously, in the same call.","There is furthermore provided, in accordance with a preferred embodiment of the present invention, a wireless telephone, including:","a communication interface, arranged to communicate over the air with first and second wireless communication service providers over respective first and second air interfaces; and","a communication processor, arranged send and receive communications via the communication interface, and further arranged to run a telephony application, such that upon receiving a request from a user of the telephone, submitted to the application, to place a call using the application to a specified party, the processor processes the request to determine whether the call is to be carried by the first or the second wireless communication service provider and accordingly selects one of the air interfaces to use in carrying the call between the application and the specified party, and establishes the call via the selected service provider using the respective first or second air interface.","There is also provided, in accordance with a preferred embodiment of the present invention, a computer software product, including a computer-readable medium in which program instructions are stored, which instructions, when read by a computer that is arranged to communicate with first and second communication service providers, cause the computer to run a telephony application, such that upon receiving a request from a first party, submitted via the first communication service provider to the telephony application, to place a call using the application to a second party, the computer selects, responsive to a characteristic of the call placed by the first party, a second communication service provider to carry the call between the application and the second party, and connects the second party via the second communication service provider to communicate with the first party using the application.","There is further provided, in accordance with a preferred embodiment of the present invention, a computer software product, including a computer-readable medium in which program instructions are stored, which instructions, when read by a computer that is arranged to communicate with multiple communication service providers, cause the computer to run a telephony application, such that upon receiving a request from a first party, submitted to the telephony application, to place a call using the application to a second party, the computer processes the request to determine a service domain of the call and, responsive to the service domain, selects one of the communication service providers to carry the call between the application and the second party, and connects the second party via the selected communication service provider to communicate with the first party using the application.","The present invention will be more fully understood from the following detailed description of the preferred embodiments thereof, taken together with the drawings in which:","Reference is now made to , which is a block diagram that schematically illustrates a software structure  for JTAPI application support with a hybrid provider model, in accordance with a preferred embodiment of the present invention. The structure shown in  enables application  to operate simultaneously over multiple provider networks , , each with its respective telephony stack , , while using the standard JTAPI application program interface . (Although for simplicity of illustration, only two different provider networks  and  are shown in this figure, structure  is similarly capable of supporting three or more provider networks simultaneously, as will be apparent to those skilled in the art.) Application  is unaware of the number and types of provider implementations that it is using and may comprise substantially any sort of JTAPI application known in the art.","Because of the close similarity between the JTAPI call control model and the JCC API specified by JAIN, a structure substantially identical to structure  may similarly be used to provide JCC application support. Therefore, in the description of the embodiments shown in , references to JTAPI should be understood as being equivalently applicable to JCC, unless specifically noted otherwise.","Structure  is typically implemented in a software package or packages running on a communications processor , typically a suitable general- or special-purpose computer processor. This software may be downloaded to the appropriate processor in electronic form, over a network, for example, or it may alternatively be furnished on tangible media, such as CD-ROM. Processor  has communication interfaces  and  for communicating with networks  and , respectively.","The core of structure  is a generic JTAPI layer , which encapsulates the logic of the common functions that must be provided in order to support API , regardless of the specific provider implementation. The design and operation of layer  are described in detail in U.S. patent applications Ser. Nos. 09\/885,576, 09\/885,577 and 09\/885,588, which are assigned to the assignee of the present patent application, and whose disclosures are incorporated herein by reference. Although the descriptions of the inventions made in these applications refer specifically to JAIN specifications, their extension to JTAPI-based systems is straightforward, for the reasons explained above.","Generic JTAPI layer  contains a kernel of the call model objects required by JTAPI in an abstract, provider-independent form. These objects cover both the basic call control functions and, preferably, the optional features provided by JTAPI extension packages, as well. Each conventional JTAPI call model component has a corresponding generic class in layer , which implements the capabilities required by the component. The call model objects in the generic layer kernel respond to calls from API  and change their states in a consistent manner that is independent of the underlying supplier networks ,  that may be invoked by such calls.","In addition, layer  contains a provider interface framework, with a well-defined API  for use by network service providers. This API is referred to herein as the Java Telephony Service Provider Interface (JTSPI). The objects in the provider interface bind the functions of API 38 to the generic call model objects in the kernel of layer . To interact with generic layer , network service providers write plug-in modules , , with methods that associate the elements of their respective telephony stacks ,  with the appropriate functions of API . Thus, plug-in  typically includes methods that associate the abstract objects used in connecting, answering and disconnecting calls in layer , via the framework exposed at API , with the signaling used for these functions in stack  of network . Unlike the conventional approach shown in , structure  relieves the provider of the need to write the JTAPI call model objects that actually implement these methods. JTSPI API  also provides (like JTAPI API ) optional functions that the network service provider can use to link the advanced features of the JTAPI extension packages with the appropriate signaling functions in the telephony stack.","For example, Table I below shows some typical mappings between JTSPI method calls or functions and the corresponding messages that are sent by plug-in  to a SS7 network (such as a PSTN), using the SS7 ISDN User Part (ISUP) protocol. Table II shows some events that might be generated at JTSPI API  in response to ISUP messages from network . These events are processed by generic layer  and are passed on to application  via API  as appropriate.",{"@attributes":{"id":"p-0066","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE I"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"JTSPI TO ISUP MAPPING"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"JTSPI call","ISUP message"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"ConnectDestination","IAM"]},{"entry":[{},"DestinationIsRinging","ACM"]},{"entry":[{},"answer","ANM"]},{"entry":[{},"release","REL"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0067","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE II"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ISUP TO JTSPI MAPPING"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ISUP message","JTSPI event"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["IAM","IncomingCallEvent"]},{"entry":["ACM","PartyRingingEvent"]},{"entry":["ANM","PartyConnectedEvent"]},{"entry":["REL","PartyReleasedEvent or"]},{"entry":[{},"PartyFailureEvent"]},{"entry":[{},"(depending on cause code)"]},{"entry":["RSC","PartyFailureEvent"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The operation of generic JTAPI layer  in handling a call is thus independent of the choice of supplier networks ,  and the corresponding telephony stacks ,  that actually carry the call signaling. This paradigm allows the generic layer to handle hybrid calls, between networks  and , in the same manner as it handles homogeneous calls within a single network.","The choice of which network service providers to use (and thus which plug-ins ,  to load) for a particular call is made by a by a Java Telephony Service Management Interface (JTSMI) component  of generic JTAPI layer . JTSMI component  communicates with a JTSMI plug-in  via a JTSMI API . This API is used to pass call information, such as the telephone number of a called party, from layer  to JTSMI plug-in , and to return instructions regarding selection of supplier plug-ins ,  from plug-in  to component  of layer . In choosing the service providers, the JTSMI plug-in refers to a registry , containing configuration files for each of the available service providers, which indicate the providers' respective capabilities. The JTSMI plug-in may also refer to programmable rules , which associate particular service domains with corresponding providers and service types. Registry  and rules  are typically held in a memory  that is accessed by processor .","JTSMI API  is provided in order to enable application developers to create and use their own structures of registry  and rules , without being bound in advance by particular types of data structures or database programming languages. Alternatively, the functions of JTSMI plug-in  may be incorporated into JTSMI component , as long as the registry and rules observe a predefined structure required by the JTSMI component.","JTSMI plug-in  may use the information in registry  and rules  in a large variety of different ways to resolve the service domain for each call and to choose the service providers accordingly, for example:\n\n","The configuration files in registry  are input and updated by a system administrator using an external utility program, referred to as a registry manager . The configuration files include a main configuration file (genjtapi.cfg), which lists the services available and their corresponding configuration files. Every service has a corresponding plug-in ,  that can be loaded. For each available service plug-in, there is a service configuration file, which holds information about the names of the JTSPI and JTSMI classes for the service provider, preferably in the form of a XML file that specifies the mapping between providers and class names. Either the service configuration file or the main configuration file also contains the name of a resource configuration file for each provider record.","Table III below lists a sample service configuration file for an ISUP plug-in, written in XML, by way of example. This file, named uisup.xml, contains general purpose configuration attributes, logging configuration attributes, and a list of remote point codes (in accordance with SS7 network standards) that manage circuits:",{"@attributes":{"id":"p-0074","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE III"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SERVICE CONFIGURATION FILE FOR ISUP SERVICE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<service isupVariat=\u201ca7\u201d noAnswer=\u201c0\u201d locaPC=\u201c10-1-1\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"node=\u201ca7nl\u201d host=\u201clocalhost\u201d spn=\u201c0\u201d prefix=\u201c06\u201d"]},{"entry":[{},"maxActvConns=\u201c100\u201d addressType=\u201c4\u201d>"]},{"entry":[{},"<pointCodes>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<pointCode rpc=\u201c10-1-2\u201d prefix=\u201c04\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<circuitID start=\u201c1\u201d end=\u201c4\u201d"]},{"entry":[{},"usage=\u201coutgoing\u201d\/>"]},{"entry":[{},"<circuitID start=\u201c5\u201d end=\u201c8\u201d"]},{"entry":[{},"usage=\u201cincoming\u201d\/>"]},{"entry":[{},"<circuitID start=\u201c9\u201d end=\u201c12\u201d"]},{"entry":[{},"usage=\u201cboth\u201d\/>"]},{"entry":[{},"<circuitID start=\u201c13\u201d end=\u201c24\u201d"]},{"entry":[{},"usage \u201cincoming\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/pointCode>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/pointCodes>"]},{"entry":[{},"<log name=\u201cJTPSILog\u201d value=\u201ctrue\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/service>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0075","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE IV"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"PLUGIN TAG FOR ISUP SERVICE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<plugin className=\u201cjtspi.uisup.UisupProviderPlugin\u201d"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"serviceName=\u201cuisup\u201d"]},{"entry":[{},"configData=\u201cconf\/uisup.xml\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<resourceFile className=\u201cjtapi.util.XmlResourceIsup\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"configData=\u201cconf\/uisupaddr.xml\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/plugin>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The resource configuration files in registry  define local endpoints that are associated with each service provider and service domain. The endpoints are defined in terms of both their addresses (such as telephone numbers) and their terminal identification, in accordance with JTAPI convention. Thus, each record in the resource configuration file includes the endpoint address name, along with the list of associated terminal names, as well as the service provider and resource requirements, for use by JTSMI plug-in  in service provider selection, as described above. In addition to the addresses, the end-point information may include alias addresses (such as 1-800 numbers), owner ID, location of endpoints (for wireline communications) and dynamic updates, such as presence and location information for both wireline and wireless communications. This information may be dynamically updated under the control of registry manager .","Upon initialization of a communication device based on structure , a JtapiArranger class in generic layer  starts loading the main configuration file. As a result of this operation, the above-mentioned configuration structures are created and registered in a single instance of a JtsmiRegistry class. JTAPI provider instances are then created for each specific service. This operation starts with creating provider service object adapters for each registered specific implementation of a ProviderService class. Then, a new instance of the JTAPI Provider class is created and initialized, using an identifier string passed by the application.","At runtime, the service domain for each endpoint is resolved by a DomainManager class of JTSMI component , which tests the endpoint against particular service domain characteristics. This testing is performed using specific implementations of an abstract ManagerService class, which are created by each specific service provider to enable testing of endpoints against its service domain.",{"@attributes":{"id":"p-0079","num":"0093"},"figref":"FIG. 3","b":["60","60","66","78","62","66","78","74"]},"A first caller initiates a teleconference by dialing in to gateway  from a telephone  via PSTN . The incoming call is handled by a PSTN provider plug-in . By interacting with application  using telephone , the first caller inputs the addresses of two additional conference participants: one participant who will use a telephone  to communicate via PSTN , and another who will use a computer  to communicate via IP network . Typically, the address of telephone  is simply its telephone number, while that of computer  may be an IP address or a VoIP telephone number.","Application  passes the addresses of telephone  and computer  via generic JTAPI layer  to JTSMI plug-in . The JTSMI plug-in checks registry  and determines that a PSTN provider plug-in  is required to handle telephone , while a VoIP provider plug-in  is required for computer . Layer  loads the required plug-ins dynamically, as part of setting up the call. Each leg of the call thus has its own plug-in instance, which may be of any type for which registry  contains a suitable entry. If another participant joins the teleconference in progress, the appropriate provider plug-in for the new participant will be loaded in like manner. From the point of view of the kernel functions of layer , however, all the legs of the call function identically. Based on the different service types that it has resolved for the different participants, JTSMI plug-in  instructs media gateway  on the proper transcoding to be applied to the media stream that is output to each participant.",{"@attributes":{"id":"p-0082","num":"0096"},"figref":"FIG. 4","b":["90","36","92","94","90","92","94","90","98","100","92","94","98","100","102","104"]},"To place a call, a user of telephone  inputs the destination address of the call, typically a cellular telephone number or a Wireless Access Protocol (WAP) uniform resource identifier (URI). A telephony application  passes the address to the JTSMI plug-in (omitted from this figure for simplicity), in order to determine which network should be used to place the call. Cellular telephone numbers, for example, generally have an area code or prefix that identifies the cellular service provider. Based on the identification of the service provider returned by the JTSMI plug-in, generic JTAPI layer  loads provider plug-in  to communicate with a subscriber  on network , or provider plug-in  to communicate with a subscriber  on network . Alternatively or additionally, the JTSMI plug-in may select the network to use based on the time of day or other criteria, so as to take advantage of discount rates offered by the different cellular providers at different times, for example. The user of telephone  may thus realize substantial savings on telephone bills by making each call automatically over the most advantageous network.",{"@attributes":{"id":"p-0084","num":"0098"},"figref":"FIG. 5","b":["110","112","114","116","118","120","122","110","124","110"]},"In order to route calls to agents in the contact center and to track handling of calls by the agents, CTI server  communicates with a call center application  running on computer  of each agent. Computer  and telephone  are preferably configured so that the telephone functions both as an extension of PBX  for calls on PSTN  and as a handset for VoIP calls on network . Further preferably, application  provides the agent with on-screen information regarding both PSTN and VoIP calls that the agent is conducting, and tracks the status of both types of calls for reporting to CTI server . To facilitate these functions, application  interacts with generic JTAPI layer , which is able to load both a PSTN plug-in  and a VoIP plug-in .","This software structure enables call center application  to handle voice calls transparently, with substantially identical functionality, regardless of whether the calls are carried over PSTN  or IP network . The contact center agent can also use application  to carry out hybrid PSTN\/VoIP calls. For example, if during a PSTN call with a customer using telephone , the agent decides it would be desirable to involve a supervisor in the discussion, he can conference in the supervisor by opening a VoIP link over LAN  to a terminal  used by the supervisor. In this case, generic JTAPI layer  loads PSTN plug-in  to handle the customer leg of the call, following which VoIP plug-in  is dynamically loaded to handle the supervisor leg.","Although preferred embodiments are described herein with particular reference to the JTAPI and JAIN specifications and call models, the principles embodied in structure  may similarly be applied using other abstract call models and interface conventions, including (though not limited to) the conventions of the above-mentioned TAPI 3.0 specification. For example, structure  may be adapted to work with the call model and interfaces of the Intelligent Network Application Protocol (INAP). It will thus be appreciated that the preferred embodiments described above are cited by way of example, and that the present invention is not limited to what has been particularly shown and described hereinabove. Rather, the scope of the present invention includes both combinations and subcombinations of the various features described hereinabove, as well as variations and modifications thereof which would occur to persons skilled in the art upon reading the foregoing description and which are not disclosed in the prior art."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0054","num":"0064"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0055","num":"0065"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0056","num":"0066"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0057","num":"0067"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0058","num":"0068"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
