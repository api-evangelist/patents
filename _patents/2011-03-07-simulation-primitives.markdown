---
title: Simulation primitives
abstract: In various embodiments, information defining a first set of simulation primitives and a second set of simulation primitives is received at one or more computer systems. A first simulator and a second simulator are provided, using one or more processors associated with the one or more computer systems. The first simulator is based on the first set of simulation primitives and produces a first simulation. The second simulator is based on the second set of simulation primitives and produces a second simulation. A data structure is generated, using the one or more processors associated with the one or more computer systems, wherein the data structure represents dependencies between the first simulation and the second simulation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08902234&OS=08902234&RS=08902234
owner: Pixar
number: 08902234
owner_city: Emeryville
owner_country: US
publication_date: 20110307
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS","DEFINITIONS"],"p":["This disclosure relates to computer-generated imagery (CGI) and computer-aided animation. More specifically, this disclosure relates to a system and methods for creating and editing simulations based on universal primitives and simulation automation techniques for use in CGI and computer-aided animation.","With the wide-spread availability of computers, computer graphics artists and animators can rely upon computers to assist in production process for creating animations and computer-generated imagery (CGI). This may include using computers to have physical models be represented by virtual models in computer memory. Typically, two-dimensional (2D) or three-dimensional (3D) computer-aided animation combines 2D\/3D models of objects and programmed movement of one or more of the models. In 3D computer animation, the first step is typically the object modeling process. Objects can be sculpted much like real clay or plaster, working from general forms to specific details, for example, with various sculpting tools. Models may then be constructed, for example, out of geometrical vertices, faces, and edges in a 3D coordinate system to represent the objects. These virtual models can then be manipulated using computers to, for example, simulate physics, design aesthetic actions such as poses or other deformations, crate lighting, coloring and paint, or the like, of characters or other elements of a computer animation display.","Pixar is one of the pioneering companies in the computer-generated imagery (CGI) and computer-aided animation industry. Pixar is more widely known as Pixar Animation Studios, the creators of animated features such as \u201cToy Story\u201d (1995) and \u201cToy Story 2\u201d (1999), \u201cA Bug's Life\u201d (1998), \u201cMonsters, Inc.\u201d (2001), \u201cFinding Nemo\u201d (2003), \u201cThe Incredibles\u201d (2004), \u201cCars\u201d (2006), \u201cRatatouille\u201d (2007), and others. In addition to creating animated features, Pixar develops computing platforms and tools specially designed for computer-aided animation and CGI. One such example is now known as PhotoRealistic RenderMan, or PRMan for short. PRMan is a photorealistic RenderMan-compliant rendering software system based on the RenderMan Interface Specification (RISpec) which is Pixar's technical specification for a standard communications protocol (or interface) between 3D computer graphics programs and rendering programs. PRMan is produced by Pixar and used to render their in-house 3D animated movie productions. It is also available as a commercial product licensed to third parties, sold as part of a bundle called RenderMan Pro Server, a RenderMan-compliant rendering software system developed by Pixar based on their own interface specification. Other examples include tools and plug-ins for programs such as the AUTODESK MAYA high-end 3D computer graphics software package from AutoDesk, Inc. of San Rafael, Calif.","One core functional aspect of PRMan can include the use of a \u201crendering engine\u201d to convert geometric and\/or mathematical descriptions of objects into images. This process is known in the industry as \u201crendering.\u201d For movies, other animated features, shorts, and special effects, a user (e.g., a skilled computer graphics artist) typically creates the geometric or mathematical description of objects, such as characters, props, background, or the like, that will used in the rendered image or animation sequence. In some instances, another user (e.g., a skilled articulator or rigger) typically creates a number of animation control variables (avars) for manipulating the objects. In further instances, yet another user (e.g., a skilled animator) typically uses the avars to pose the objects within the image or sequence and specify motions and positions of the objects over time to create an animation.","In some instances, objects may be too complex or the number of objects may be too numerous for a user to manipulate individual objects. As such, the production of CGI and computer-aided animation may involve the use of simulations and other dynamic techniques to specify motions and positions of the objects over time to create an animation. Programs such as MAYA provide a variety of types of pre-packaged simulators for different types of objects. However, the simulators are not based on common elements, and they are not inherently aware of dependencies, so the iterative process of refining and updating simulations can be both time-consuming and error-prone.","Accordingly, what is desired is to solve one or more of the problems relating to simulating animation for use in CGI and computer-aided animation, some of which may be discussed herein. Additionally, what is desired is to reduce some of the drawbacks relating to building, editing, and running simulators for use in CGI and computer-aided animation, some of which may be discussed herein.","The following portion of this disclosure presents a simplified summary of one or more innovations, embodiments, and\/or examples found within this disclosure for at least the purpose of providing a basic understanding of the subject matter. This summary does not attempt to provide an extensive overview of any particular embodiment or example. Additionally, this summary is not intended to identify key\/critical elements of an embodiment or example or to delineate the scope of the subject matter of this disclosure. Accordingly, one purpose of this summary may be to present some innovations, embodiments, and\/or examples found within this disclosure in a simplified form as a prelude to a more detailed description presented later.","This disclosure relates to computer-generated imagery (CGI) and computer-aided animation. More specifically, this disclosure relates to a system and methods for building and editing simulators based on simulation primitives and techniques for implementing a simulator-independent application programming interface (API) for use in CGI and computer-aided animation.","In various embodiments, information defining a first set of simulation primitives and a second set of simulation primitives is received at one or more computer systems. A first simulator and a second simulator are provided, using one or more processors associated with the one or more computer systems. The first simulator is based on the first set of simulation primitives and produces a first simulation. The second simulator is based on the second set of simulation primitives and produces a second simulation. A data structure is generated, using the one or more processors associated with the one or more computer systems, wherein the data structure represents dependencies between the first simulation and the second simulation.","In various embodiments, the set of simulation primitives comprises one or more bodies. In some embodiments, the set of simulation primitives comprises one or more colliders. In some embodiments, the set of simulation primitives comprises one or more forces. In some embodiments, the set of simulation primitives comprises one or more unified primitives.","In various embodiments, the first simulation depends upon the second simulation in the case where the first simulation uses a body of the second simulation as a collider or as a force.","In various embodiments, the first simulation is executed before the second simulation, and the output of the first simulation is used as an input to the second simulation.","In various embodiments, information identifying a plurality of simulators is received at one or more computer systems. Information identifying a dependency data structure that represents dependencies between one or more simulators in the plurality of simulators is also received at the one or more computer systems. The plurality of simulators and the dependency data structure are retrieved from a non-transitory computer-readable medium. The plurality of simulators and the dependency data structure are then loaded into a memory. Function calls associated with at least one simulator in the plurality of simulators are received into the memory, wherein the function calls do not require specification of any simulator-specific information. Finally, the function calls are executed, using one or more processors associated with the one or more computer systems.","In various embodiments, executing the function calls comprises running a simulation, using the memory and the one or more processors associated with the one or more computer systems, wherein the simulation is comprised of the plurality of simulators.","In various embodiments, executing the function calls comprises ensuring, using the memory and the one or more processors associated with the one or more computer systems, a specified order in which the plurality of simulators is executed, such that the specified order complies with the dependency data structure.","In various embodiments, executing the function calls comprises executing, using the one or more processors associated with the one or more computer systems, the plurality of simulators in the specified order.","In various embodiments, executing the function calls comprises associating, using the memory and the one or more processors associated with the one or more computer systems, the results of the simulation with one or more animations.","In various embodiments, executing the function calls comprises generating simulation data, using the one or more processors associated with the one or more computer systems, while recording an animation.","In various embodiments, executing the function calls comprises re-computing, using the one or more processors associated with the one or more computer systems, dependencies in the dependency data structure.","Other embodiments of the invention are directed to systems and computer-readable media associated with methods described herein.","A further understanding of the nature of and equivalents to the subject matter of this disclosure (as wells as any inherent or express advantages and improvements provided) should be realized by reference to the remaining portions of this disclosure, any accompanying drawings, and the claims in addition to the above section.","This disclosure relates to computer-generated imagery (CGI) and computer-aided animation. More specifically, this disclosure relates to a system and methods for building and editing simulators based on simulation primitives and techniques for implementing a simulator-independent API for use in CGI and computer-aided animation. Simulations are described using primitives representing concepts from the simulation, and relationships representing how they interact. This canonical understanding allows us to create common authoring tools and workflows without knowing anything about the particular simulations.","A framework for simulating animation provides authoring, editing, and execution of different simulators by utilizing simulator-independent simulation primitives. The simulation primitives are used to encapsulate simulation specifics and a standard set of shared data and attributes that can be used to easily and quickly propagate changes to all simulators within a particular category. The simulation framework automates creation and enables preservation of relationships and dependencies between simulators throughout the animation design process. An API provides common procedural introspection on any simulation while making the specifics of the simulation transparent to the user. The framework includes applications for simulations based on the API; these applications provide a unified interface through which users can create, edit, and run different simulations such that any underlying implementation-level differences between the simulations are transparent to the user.","Simulations may be comprised of three elements: bodies, colliders, and forces. At a basic level, simulations affect bodies by using forces and colliders. The simulation framework also provides unified primitives (e.g., collision-groups, wind-fields, shapers) for concepts that are shared between multiple simulators, but implemented by each simulator separately. This allows users to reuse a single primitive across many different simulations, but doesn't force any particular implementation on any simulator.","For the purposes of the instant application, a simulation comprises any computational process that requires time-integration over the shot, e.g., where the operation executed at time t is dependent on the operation executed at time t\u22121. A simulation may include, but is not limited to, a mass-spring, a complex fluid, cloth, hair, soft bodies (e.g., ropes, muscles, skin), rigid bodies, a rolling wheel, etc.","For the purposes of the instant application, a simulator comprises the software and\/or hardware that runs a simulation.","Introduction",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["100","100","110","120","130","140","150","160","170"]},"The one or more design computers  can include hardware and software elements configured for designing one or more computer-generated objects used in CGI and assisting with computer-aided animation. Each of the one or more design computers  may be embodied as a single computing device or a set of one or more computing devices. Some examples of computing devices are PCs, laptops, workstations, mainframes, cluster computing system, grid computing systems, cloud computing systems, embedded devices, computer graphics devices, gaming devices and consoles, consumer electronic devices having programmable processors, or the like. The one or more design computers  may be used at various stages of a production process (e.g., pre-production, designing, creating, editing, simulating, animating, rendering, post-production, etc.) to produce models of objects, computer-generated scenes, images, image sequences, animations, motion pictures, video, audio, or associated effects related to CGI and animation by employing one or more of object libraries  and\/or systems - via various tools or interfaces.","The one or more object libraries  can include hardware and\/or software elements configured for storing and accessing information related to one or more computer-generated objects. The information may be accessed by the one or more design computers  and\/or systems - during various stages of a production process to produce CGI and animation. Some examples of the one or more object libraries  can include one or more file, one or more databases, or other storage devices and mechanisms. The one or more object libraries  may be locally accessible to the one or more design computers  and\/or system - or hosted by one or more computer systems or storage devices externally accessible to the one or more design computers  and\/or system -.","Some examples of information stored in the one or more object libraries  can include information representing an object itself, metadata, object geometry, object topology, rigging, control data, animation data, animation cues, simulation data, texture data, lighting data, shader code, or the like. An object stored in the one or more object libraries  can include any entity that has an n-dimensional (e.g., 1D, 2D, or 3D) surface geometry. The shape of an object can include a set of points or locations in space (e.g., object space) that make up the object's surface. Topology of an object can include the connectivity of the surface of the object (e.g., the genus or number of holes in an object) or the vertex\/edge\/face connectivity of an object.","The one or more object modeling systems  can include hardware and\/or software elements configured for modeling one or more computer-generated objects. The one or more object modeling systems  can be embodied as the one or more design computers  and\/or software programs hosted by one or more computer systems. The one or more object modeling systems  may be invoked by or used directly by a user of the one or more design computers  and\/or automatically invoked by or used by one or more processes associated with the one or more design computers . Some examples of software programs embodied as the one or more object modeling systems  can include commercially available high-end 3D computer graphics and 3D modeling software packages, such as 3D STUDIO MAX and AUTODESK MAYA produced by Autodesk, Inc. of San Rafael, Calif.","Modeling can include the creating, sculpting, and editing of an object. In various embodiments, the one or more object modeling systems  may be configured to generated a model to include a description of the shape of an object. The one or more object modeling systems  can be configured to facilitate the creation and\/or editing of features, such as non-uniform rational B-splines or NURBS, polygons and subdivision surfaces (or SubDivs), that may be used to describe the shape of an object. In general, polygons are a widely used model medium due to their relative stability and functionality. Polygons can also act as the bridge between NURBS and SubDivs. NURBS are used mainly for their ready-smooth appearance and generally respond well to deformations. SubDivs are a combination of both NURBS and polygons representing a smooth surface via the specification of a coarser piecewise linear polygon mesh. A single object may have several different models that describe its shape.","The one or more object modeling systems  may further generate model data (e.g., 2D and 3D model data) for use by other elements of system  or that can be stored in the one or more object libraries . The one or more object modeling systems  may be configured to allow a user to associate additional information, metadata, color, lighting, rigging, controls, or the like, with all or a portion of the generated model data.","The one or more object articulation systems  can include hardware and\/or software elements configured to articulating one or more computer-generated objects. The one or more object articulation systems  can be embodied as the one or more design computers  and\/or software programs hosted by one or more computer systems. The one or more object articulation systems  may be invoked by or used directly by a user of the one or more design computers  and\/or automatically invoked by or used by one or more processes associated with the one or more design computers . Some examples of software programs embodied as the one or more object articulation systems  can include commercially available high-end 3D computer graphics and 3D modeling software packages, such as 3D STUDIO MAX and AUTODESK MAYA produced by Autodesk, Inc. of San Rafael, Calif..","Articulation can include the building or creation of rigs, the rigging of an object, and the editing of rigging. In various embodiments, the one or more articulation systems  be configured to enable the specification of rigging for an object, such as for internal skeletal structures or eternal features, and to define how input motion deforms the object. One technique is called \u201cskeletal animation,\u201d in which a character can be represented in at least two parts: a surface representation used to draw the character (called the skin) and a hierarchical set of bones used for animation (called the skeleton). Another technique involves the use of deformers in which a surface representation used to draw the character is deformed in response to one or more control structures that enclose the surface representation and whose manipulations drive the deformers.","The one or more object articulation systems  may further generate articulation data (e.g., data associated with controls or animations variables) for use by other elements of system  or that can be stored in the one or more object libraries . The one or more object articulation systems  may be configured to allow a user to associate additional information, metadata, color, lighting, rigging, controls, or the like, with all or a portion of the generated articulation data.","The one or more object animation systems  can include hardware and\/or software elements configured for animating one or more computer-generated objects. The one or more object animation systems  can be embodied as the one or more design computers  and\/or as software programs hosted by one or more computer systems. The one or more object animation systems  may be invoked by or used directly by a user of the one or more design computers  and\/or automatically invoked by or used by one or more processes associated with the one or more design computers . Some examples of software programs embodied as the one or more object animation systems  can include commercially available high-end 3D computer graphics and 3D modeling software packages, such as 3D STUDIO MAX and AUTODESK MAYA produced by Autodesk, Inc. of San Rafael, Calif..","Animation can include the specification of motion and position of an object over time. In various embodiments, the one or more animation systems  may be configured to enable users to manipulate controls or animation variables or utilized character rigging to specify poses of object for one or more key frames of an animation sequence. The one or more animation systems  generate intermediary frames based on the one or more key frames. In some embodiments, the one or more animation systems  may be configured to enable users to specify animation cues, paths, or the like according to one or more predefined sequences. The one or more animation systems  generate frames of the animation based on the animation cues or paths. In further embodiments, the one or more animation systems  may be configured to enable users to define animations using one or more animation languages, morphs, deformations, or the like.","The one or more object animations systems  may further generate animation data (e.g., inputs associated with controls or animations variables) for use by other elements of system  or that can be stored in the one or more object libraries . The one or more object animations systems  may be configured to allow a user to associate additional information, metadata, color, lighting, rigging, controls, or the like, with all or a portion of the generated animation data.","The one or more object simulation systems  can include hardware and\/or software elements configured for simulating one or more computer-generated objects. The one or more object simulation systems  can be embodied as the one or more design computers  and\/or as software programs hosted by one or more computer systems. The one or more object simulation systems  may be invoked by or used directly by a user of the one or more design computers  and\/or automatically invoked by or used by one or more processes associated with the one or more design computers . Some examples of software programs embodied as the one or more object simulation systems  can include physically-based numerical engines and commercially available high-end 3D computer graphics and 3D modeling software packages, such as 3D STUDIO MAX and AUTODESK MAYA produced by Autodesk, Inc. of San Rafael, Calif..","Simulation can include determining behavior, such as motion\/position\/collisions, of an object in response to one or more simulated forces, conditions, or other objects. In various embodiments, the one or more object simulation systems  may be configured to enable users to create, define, edit, or configure simulation engines, such as a physics engine or physics processing unit (PPU\/GPGPU) using one or more physically-based numerical techniques. In general, a physics engine can include a computer program that simulates one or more physics models (e.g., a Newtonian physics model), using variables such as mass, velocity, friction, wind resistance, or the like. The physics engine may simulate and predict effects under different conditions that would approximate what happens to an object according to the physics model. The one or more object simulation systems  may be used to simulate the behavior of objects, such as hair, fur, and cloth, in response to a physics model and\/or animation of one or more characters and objects within a computer-generated scene.","The one or more object simulation systems  may further generate simulation data (e.g., motion and position of an object over time) for use by other elements of system  or that can be stored in the one or more object libraries . The generated simulation data may be combined with or used in addition to data generated by the systems -.","The one or more object rendering systems  can include hardware and\/or software element configured for \u201crendering\u201d or generating one or more images of one or more computer-generated objects. The one or more object rendering systems  can be embodied as the one or more design computers  and\/or software programs hosted by one or more computer systems. The one or more object rendering systems  may be invoked by or used directly by a user of the one or more design computers  and\/or automatically invoked by or used by one or more processes associated with the one or more design computers . One example of a software program embodied as the one or more object rendering systems  can include PhotoRealistic RenderMan, or PRMan, produced by Pixar Animations Studios of Emeryville, Calif..","\u201cRendering\u201d can include generating an image from a model based on information such as geometry, viewpoint, texture, lighting, and shading information. In various embodiments, the one or more object rendering systems  can be configured to render one or more objects to produce one or more computer-generated images or a set of images over time that provide an animation. The one or more object rendering systems  may generate digital images or raster graphics images.","In various embodiments, a rendered image can be understood in terms of a number of visible features. Some examples of visible features that may be considered by the one or more object rendering systems  may include shading (e.g., techniques relating to how the color and brightness of a surface varies with lighting), texture-mapping (e.g., techniques relating to applying detail information to surfaces or objects using maps), bump-mapping (e.g., techniques relating to simulating small-scale bumpiness on surfaces), fogging\/participating medium (e.g., techniques relating to how light dims when passing through non-clear atmosphere or air; shadows (e.g., techniques relating to effects of obstructing light), soft shadows (e.g., techniques relating to varying darkness caused by partially obscured light sources), reflection (e.g., techniques relating to mirror-like or highly glossy reflection), transparency or opacity (e.g., techniques relating to sharp transmissions of light through solid objects), translucency (e.g., techniques relating to highly scattered transmissions of light through solid objects), refraction (e.g., techniques relating to bending of light associated with transparency, diffraction (e.g., techniques relating to bending, spreading and interference of light passing by an object or aperture that disrupts the ray), indirect illumination (e.g., techniques relating to surfaces illuminated by light reflected off other surfaces, rather than directly from a light source, also known as global illumination), caustics (e.g., a form of indirect illumination with techniques relating to reflections of light off a shiny object, or focusing of light through a transparent object, to produce bright highlights on another object), depth of field (e.g., techniques relating to how objects appear blurry or out of focus when too far in front of or behind the object in focus), motion blur (e.g., techniques relating to how objects appear blurry due to high-speed motion, or the motion of the camera), non-photorealistic rendering (e.g., techniques relating to rendering of scenes in an artistic style, intended to look like a painting or drawing), or the like.","The one or more object rendering systems  may further render images (e.g., motion and position of an object over time) for use by other elements of system  or that can be stored in the one or more object libraries . The one or more object rendering systems  may be configured to allow a user to associate additional information or metadata with all or a portion of the rendered image. The one or more object rendering systems  may output information that can be encoded in various image and video formats, such as those related to JPG, PNG, MPG, MOV, H.264, or the like.","In various embodiments, system  may include one or more hardware elements and\/or software elements, components, tools, or processes, embodied as the one or more design computers , object library , the one or more object modeler systems , the one or more object articulation systems , the one or more object animation systems , the one or more object simulation systems , and\/or the one or more object rendering systems  that provide one or more tools for a simulation system. In some aspects, a 3D model may be the sole authored data from which system  automatically creates and maintains other versions or representation of the 3D model suitable for a variety of specific tasks or task related tools, such as animation, simulation, and rendering. In further aspects, system  may automatically generate and maintain dependencies (i.e., dependency graph) between a plurality of simulators.","Simulation System",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","100","200","210","210","210","220","230","230","230","240"]},"Because each simulation  is based on the same simulation primitives, one can update a single simulation primitive and thereby instantly update all simulations incorporating the updated simulation primitive. For example, in one embodiment, a simulation primitive incorporated into both the first wind simulation B (originating from a NE direction) and the second wind simulation C (originating from a NNE direction) is updated to increase the force of the wind from 10 miles per hour to 60 miles per hour. The single update to the underlying simulation primitive automatically propagates the update to both the first wind simulation B and the second wind simulation C.","Dependency graph  encapsulates dependencies between one or more simulations in a scene. For example, in one embodiment, flag simulation A comprises a first set of bodies and a second set of colliders. When the force of the wind is increased from 10 miles per hour to 60 miles per hour, dependency graph  ensures that all simulations interact accordingly and appropriately, thereby eliminating potential user error due to forgetting to update some simulations when updating others.","Simulation-independent API  allows common procedural introspection on any simulation without knowledge of what the simulation actually does. In particular, one can compute dependencies between any number of simulations, of any type. This is useful for running a large number of simulations on a server farm. Simulation-independent API  also provides applications and editors to run the simulations in a variety of contexts: as part of a recording or in-session or offline; on a server farm or locally on a machine. This API abstracts many simulator issues that normally dominate the way a simulator is integrated into the pipeline (e.g., does the simulation run as a separate process, or in the running session? Does the simulation generate avar values, or some binary data that is read in separately? Does the simulation require multi-threading?).",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 3","b":["310","320","330","340","350","200"]},"The results of a simulation can be incorporated back into the animation. For instance, the point-positions output by a cloth simulation may be used to deform the cloth garment. Or, the volumetric data output by a fluid simulation may be used to construct a surface mesh representing the boundary of the fluid. In the same manner, the results from one simulation may be used as the input for another dependent simulation. For instance, a hair simulation may use the output of a cloth simulation to collide against.","Simulation data can also be generated while recording an animation. In this case, simulations may run in parallel with the animation software while the animation software displays or records the animation. When recording the animation, the animation software may wait until the simulation finishes a frame before recording that frame of animation.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 4","b":["400","400","400","405","410","415","420","425","430","400","435","400"]},"The one or more data processors or central processing units (CPUs)  can include hardware and\/or software elements configured for executing logic or program code or for providing application-specific functionality. Some examples of CPU(s)  can include one or more microprocessors (e.g., single core and multi-core) or micro-controllers, such as PENTIUM, ITANIUM, or CORE 2 processors from Intel of Santa Clara, Calif. and ATHLON, ATHLON XP, and OPTERON processors from Advanced Micro Devices of Sunnyvale, Calif.. CPU(s)  may also include one or more field-gate programmable arrays (FPGAs), application-specific integrated circuits (ASICs), or other microcontrollers. The one or more data processors or central processing units (CPUs)  may include any number of registers, logic units, arithmetic units, caches, memory interfaces, or the like. The one or more data processors or central processing units (CPUs)  may further be integrated, irremovably or moveably, into one or more motherboards or daughter boards.","The one or more graphics processor or graphical processing units (GPUs)  can include hardware and\/or software elements configured for executing logic or program code associated with graphics or for providing graphics-specific functionality. GPUs  may include any conventional graphics processing unit, such as those provided by conventional video cards. Some examples of GPUs are commercially available from NVIDIA, ATI, and other vendors. In various embodiments, GPUs  may include one or more vector or parallel processing units. These GPUs may be user programmable, and include hardware elements for encoding\/decoding specific types of data (e.g., video data) or for accelerating 2D or 3D drawing operations, texturing operations, shading operations, or the like. The one or more graphics processors or graphical processing units (GPUs)  may include any number of registers, logic units, arithmetic units, caches, memory interfaces, or the like. The one or more data processors or central processing units (CPUs)  may further be integrated, irremovably or moveably, into one or more motherboards or daughter boards that include dedicated video memories, frame buffers, or the like.","Memory subsystem  can include hardware and\/or software elements configured for storing information. Memory subsystem  may store information using machine-readable articles, information storage devices, or computer-readable storage media. Some examples of these articles used by memory subsystem  can include random access memories (RAM), read-only-memories (ROMS), volatile memories, non-volatile memories, and other semiconductor memories. In various embodiments, memory subsystem  can include annotation-based mesh modification data and program code .","Storage subsystem  can include hardware and\/or software elements configured for storing information. Storage subsystem  may store information using machine-readable articles, information storage devices, or computer-readable storage media. Storage subsystem  may store information using storage media . Some examples of storage media  used by storage subsystem  can include floppy disks, hard disks, optical storage media such as CD-ROMS, DVDs and bar codes, removable storage devices, networked storage devices, or the like. In some embodiments, all or part of annotation-based mesh modification data and program code  may be stored using storage subsystem .","In various embodiments, computer system  may include one or more hypervisors or operating systems, such as WINDOWS, WINDOWS NT, WINDOWS XP, VISTA, or the like from Microsoft or Redmond, Wash., SOLARIS from Sun Microsystems, LINUX, UNIX, and UNIX-based operating system. Computer system  may also include one or more applications configured to executed, perform, or otherwise implement techniques disclosed herein. These applications may be embodied as annotation-based mesh modification data and program code . Additionally, computer programs, executable computer code, human-readable source code, shader code, rendering engines, or the like, and data, such as image files, models including geometrical descriptions of objects, ordered geometric descriptions of objects, procedural descriptions of models, scene descriptor files, or the like, may be stored in memory subsystem  and\/or storage subsystem .","The one or more input\/output (I\/O) interfaces  can include hardware and\/or software elements configured for performing I\/O operations. One or more input devices  and\/or one or more output devices  may be communicatively coupled to the one or more I\/O interfaces .","The one or more input devices  can include hardware and\/or software elements configured for receiving information from one or more sources for computer system . Some examples of the one or more input devices  may include a computer mouse, a trackball, a track pad, a joystick, a wireless remote, a drawing tablet, a voice command system, an eye tracking system, external storage systems, a monitor appropriately configured as a touch screen, a communications interface appropriately configured as a transceiver, or the like. In various embodiments, the one or more input devices  may allow a user of computer system  to interact with one or more non-graphical or graphical user interfaces to enter a comment, select objects, icons, text, user interface widgets, or other user interface elements that appear on a monitor\/display device via a command, a click of a button, or the like.","The one or more output devices  can include hardware and\/or software elements configured for outputting information to one or more destinations for computer system . Some examples of the one or more output devices  can include a printer, a fax, a feedback device for a mouse or joystick, external storage systems, a monitor or other display device, a communications interface appropriately configured as a transceiver, or the like. The one or more output devices  may allow a user of computer system  to view objects, icons, text, user interface widgets, or other user interface elements.","A display device or monitor may be used with computer system  and can include hardware and\/or software elements configured for displaying information. Some examples include familiar display devices, such as a television monitor, a cathode ray tube (CRT), a liquid crystal display (LCD), or the like.","Communications interface  can include hardware and\/or software elements configured for performing communications operations, including sending and receiving data. Some examples of communications interface  may include a network communications interface, an external bus interface, an Ethernet card, a modem (telephone, satellite, cable, ISDN), (asynchronous) digital subscriber line (DSL) unit, FireWire interface, USB interface, or the like. For example, communications interface  may be coupled to communications network\/external bus , such as a computer network, to a FireWire bus, a USB hub, or the like. In other embodiments, communications interface  may be physically integrated as hardware on a motherboard or daughter board of computer system , may be implemented as a software program, or the like, or may be implemented as a combination thereof.","In various embodiments, computer system  may include software that enables communications over a network, such as a local area network or the Internet, using one or more communications protocols, such as the HTTP, TCP\/IP, RTP\/RTSP protocols, or the like. In some embodiments, other communications software and\/or transfer protocols may also be used, for example IPX, UDP or the like, for communicating with hosts over the network or with a device directly connected to computer system .","As suggested,  is merely representative of a general-purpose computer system appropriately configured or specific data processing device capable of implementing or incorporating various embodiments of an invention presented within this disclosure. Many other hardware and\/or software configurations may be apparent to the skilled artisan which are suitable for use in implementing an invention presented within this disclosure or with various embodiments of an invention presented within this disclosure. For example, a computer system or data processing device may include desktop, portable, rack-mounted, or tablet configurations. Additionally, a computer system or information processing device may include a series of networked computers or clusters\/grids of parallel processing devices. In still other embodiments, a computer system or information processing device may techniques described above as implemented upon a chip or an auxiliary processing board.","Various embodiments of any of one or more inventions whose teachings may be presented within this disclosure can be implemented in the form of logic in software, firmware, hardware, or a combination thereof. The logic may be stored in or on a machine-accessible memory, a machine-readable article, a tangible computer-readable medium, a computer-readable storage medium, or other computer\/machine-readable media as a set of instructions adapted to direct a central processing unit (CPU or processor) of a logic machine to perform a set of steps that may be disclosed in various embodiments of an invention presented within this disclosure. The logic may form part of a software program or computer program product as code modules become operational with a processor of a computer system or an information-processing device when executed to perform a method or process in various embodiments of an invention presented within this disclosure. Based on this disclosure and the teachings provided herein, a person of ordinary skill in the art will appreciate other ways, variations, modifications, alternatives, and\/or methods for implementing in software, firmware, hardware, or combinations thereof any of the disclosed operations or functionalities of various embodiments of one or more of the presented inventions.","The disclosed examples, implementations, and various embodiments of any one of those inventions whose teachings may be presented within this disclosure are merely illustrative to convey with reasonable clarity to those skilled in the art the teachings of this disclosure. As these implementations and embodiments may be described with reference to exemplary illustrations or specific figures, various modifications or adaptations of the methods and\/or specific structures described can become apparent to those skilled in the art. All such modifications, adaptations, or variations that rely upon this disclosure and these teachings found herein, and through which the teachings have advanced the art, are to be considered within the scope of the one or more inventions whose teachings may be presented within this disclosure. Hence, the present descriptions and drawings should not be considered in a limiting sense, as it is understood that an invention presented within a disclosure is in no way limited to those embodiments specifically illustrated.","Accordingly, the above description and any accompanying drawings, illustrations, and figures are intended to be illustrative but not restrictive. The scope of any invention presented within this disclosure should, therefore, be determined not with simple reference to the above description and those embodiments shown in the figures, but instead should be determined with reference to the pending claims along with their full scope or equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order to reasonably describe and illustrate those innovations, embodiments, and\/or examples found within this disclosure, reference may be made to one or more accompanying drawings. The additional details or examples used to describe the one or more accompanying drawings should not be considered as limitations to the scope of any of the claimed inventions, any of the presently described embodiments and\/or examples, or the presently understood best mode of any innovations presented within this disclosure.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
