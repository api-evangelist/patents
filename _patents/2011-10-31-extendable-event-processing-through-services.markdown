---
title: Extendable event processing through services
abstract: A system for extending event processing through services includes an event process module to process event data according to event processing rules and services. A build-time system provides an interface for adding or modifying services. A service request gateway receives service requests from service consumers and receives event data from event data providers and provides the service requests to a service container module and provides the event data to the event process module. The service container modules invokes services for the service requests.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08661456&OS=08661456&RS=08661456
owner: Hewlett-Packard Development Company, L.P.
number: 08661456
owner_city: Houston
owner_country: US
publication_date: 20111031
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY","BACKGROUND","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["The present application claims priority to U.S. provisional application Ser. No. 61\/492,250, filed Jun. 1, 2011, which is incorporated by reference in its entirety.","Network security management is generally concerned with collecting data from network devices that reflects network activity and operation of the devices, and analyzing the data to enhance security. For example, the data that is collected may originate in messages or in entries in log files generated by sources, such as the network devices and applications, which may include firewalls, intrusion detection systems, servers, routers, switches, etc. The data can be analyzed to identify an attack on the network. If the attack is ongoing, a countermeasure can be performed to thwart the attack or mitigate the damage caused by the attack.","Network security management systems however, typically are not extendable to other systems. For example, it is not uncommon for an entity to have many enterprise systems. However, in most instances, these systems are unable to leverage the functionality of the network security management system. For example, if a system administrator is alerted to a network security threat by a network security management system, the system administrator may manually attempt to isolate and stop the threat. However, other enterprise systems may not be able to interact with the network security management system to respond to threats or perform other functions leveraging any processing performed by the network security management system.","For simplicity and illustrative purposes, the principles of the embodiments are described by referring mainly to examples thereof. In the following description, numerous specific details are set forth in order to provide a thorough understanding of the embodiments. It will be apparent that the embodiments may be practiced without limitation to all the specific details. Also, the embodiments may be used together in various combinations.","According to an embodiment, a security information and event management (SIEM) system operates on a platform that functions as a service provider to provide services to other systems. The services may be associated with any event processing performed by the SIEM. The platform may have a service orientated architecture.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["100","110","110","110","110","110","100","101","110","111","111","111","111","110"]},"The data sources  may include network devices, applications or other types of data sources operable to provide event data that may be analyzed. Event data may be captured in logs or messages generated by the data sources . For example, intrusion detection systems (IDSs), intrusion prevention systems (IPSs), vulnerability assessment tools, firewalls, anti-virus tools, anti-spam tools, encryption tools, and business applications may generate logs describing activities performed by the data source. Event data is retrieved from the logs and stored in the data storage . Event data may be provided, for example, by entries in a log file or a syslog server, alerts, alarms, network packets, emails, or notification pages. The data sources  may send messages to the SIEM  including the event data. The data storage  may store any data used by the SIEM , including service applications. The data storage  may include a database or other data storage systems.","Event data can include information about the source that generated the event and information describing the event. For example, the event data may identify the event as a user login or a credit card transaction. Other information in the event data may include when the event was received from the event source (\u201creceipt time\u201d). The receipt time may be a date\/time stamp. The event data may describe the source, such as an event source is a network endpoint identifier (e.g., an IP address or Media Access Control (MAC) address) and\/or a description of the source, possibly including information about the product's vendor and version. The data\/time stamp, source information and other information may then be used for correlation performed by the event processing engine . The event data may include meta data for the event, such as when it took place, where it took place, the user involved, etc.","Examples of the data sources  are shown in  as Database (DB), UNIX, App and App. DB and UNIX are systems that include network devices, such as servers, and generate event data. App and App are applications that generate event data. App and App may be business applications, such as financial applications for credit card and stock transactions, Information Technology (IT) applications, human resource applications, or any other type of applications.","Other examples of data sources  may include security detection and proxy systems, access and policy controls, core service logs and log consolidators, network hardware, encryption devices, and physical security. Examples of security detection and proxy systems include IDSs, IPSs, multipurpose security appliances, vulnerability assessment and management, anti-virus, honeypots, threat response technology, and network monitoring. Examples of access and policy control systems include access and identity management, virtual private networks (VPNs), caching engines, firewalls, and security policy management. Examples of core service logs and log consolidators include operating system logs, database audit logs, application logs, log consolidators, web server logs, and management consoles. Examples of network devices includes routers and switches. Examples of encryption devices include data security and integrity. Examples of physical security systems include card-key readers, biometrics, burglar alarms, and fire alarms. Other data sources may include data sources that are unrelated to network security.","The connector  may include code comprised of machine readable instructions that provide event data from a data source to the SIEM . The connector  may provide efficient, real-time (or near real-time) local event data capture and filtering from one or more of the data sources . The connector , for example, collects event data from event logs or messages. The collection of event data is shown as \u201cEVENTS\u201d describing event data from the data sources  that is sent to the SIEM .","The SIEM  collects and analyzes the event data. Events can be cross-correlated with rules to create meta-events. Correlation includes, for example, discovering the relationships between events, inferring the significance of those relationships (e.g., by generating metaevents), prioritizing the events and meta-events, and providing a framework for taking action. The system (one embodiment of which is manifest as machine readable instructions executed by computer hardware such as a processor) enables aggregation, correlation, detection, and investigative tracking of activities. The system also supports response management, ad-hoc query resolution, reporting and replay for forensic analysis, and graphical visualization of network threats and activity. Event processing may identify a data model and may include event processing instructions according to the data model. The data model may be specific to an application, industry, domain, etc.","The SIEM  may include modules that perform the functions described herein. Modules may include hardware and\/or machine readable instructions. For example, the modules may include an event processing engine . The event processing engine  processes events according to rules and instructions, which may be stored in the data storage . The event processing engine , for example, correlates events in accordance with rules, instructions and\/or requests. For example, a rule indicates that multiple failed logins from the same user on different machines performed simultaneously or within a short period of time is to generate an alert to a system administrator. Another rule may indicate that two credit card transactions from the same user within the same hour, but from different countries or cities, is an indication of potential fraud. The event processing engine  may provide the time, location, and user correlations between multiple events when applying the rules.","The user interface  allows users to interact with the SIEM . The user interface  may include a web-based interface that allows users to view reports and notifications generated from event processing. The service layer  makes services available to service consumers . Examples of the services may include event queries, event processing reporting and notifications, etc. Services are described in further detail below. The service consumers  may include external systems, such as enterprise systems, that can leverage processing performed by the SIEM  through consumption of services.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2","b":["200","110","200","200","200","200","200","203","110","110","110"]},"Examples of service consumers are shown as -in . The service consumers  shown in  may include the service consumers -shown in . The service consumers -may communicate with the platform  to make service requests. The service consumers -may use different service bindings to communicate with the platform . A service binding may specify the protocol and data format to be used to communicate between the service consumer and the service provider. Service bindings may comprise different web services used by the service consumers -to communicate service requests to the platform . For example, consumer may use a Representational State Transfer (REST)\/Extensible Markup Language (XML) web service; consumer may use a REST\/JavaScript Object Notation (JSON) web service; consumer may use a Simple Object Access Protocol (SOAP) web service, consumer may use Web 2.0; and consumer may use a Java Management Extensions (JMX) web service.","Event data providers  provide event data to the platform  via the service request gateway . The event data provider  may include the data sources  and connectors  supplying event data to the SIEM , as shown in . The event data provider  may also send data models to the platform  via the service request gateway . A data model may include a schema or some kind of data structure for storing different types of data, such as industry specific data, application specific data, etc. Data models may be used for event processing of the event data stored in the data models. Event data may be provided to the platform  in batches and stored in the data storage , and the event data is processed by the event process and correlation module . Also, data models may be sent to the platform  from connectors or other data sources and stored in the data storage .","The service request gateway  communicates with the service consumers -and the event data providers , for example, via one or more web services. The service request gateway  may provide secure communications. For example, the service request gateway  may comprise a secure web server which is compliant with the Federal Information Processing Standard (FIPS) 140-2 and Suite B transitional profile encryption standards. The service request gateway  is not shown as included in the platform  but it can reside on the platform  or be separate. The service request gateway  may be provided in a web server that is connected via a network to the platform  or they all may reside on the same server.","The service request gateway  manages and forwards service requests and event data and data models that it receives from the service consumers -and event data provider . The service request gateway  may include a single network interface or a single port to receive service requests and event data and data models. The service request gateway  determines whether the data it receives is a service request or event data or a data model, and forwards the data to the appropriate module in the platform  for processing. The service request gateway  may include meta data with the forwarded data, which may identify a context for a service request, sent to the appropriate module in the platform . Context may also include information that pertains to what has and is transpiring as part of a current service activity. Consumer-specific context may be exchanged between the provider and the consumer. The context may be used to keep track of which service consumer is making the service request since many consumers are making requests periodically.","The service request gateway  may identify information in the Hypertext Transfer Protocol (HTTP) header to determine whether received data is a service request or event data\/data model. For example, a service consumer may include information in a predetermined field of the header to identify the data as a service request. The information may also include context information for the service. Similarly, an event data provider may include information in a field to identify the data as event data or a data model.","The service request gateway  sends service requests to the service container module  and forwards responses to service requests from the service container module  back to the service consumer. Also, the service request gateway  sends event data or data models to the event process and correlation module .","In one example, service consumer sends an XML service request to run a query on event data. The service request gateway  identifies the request as a service request, for example through information in the header, and passes the service request to the service container module . The service container module  identifies the service to call by the service request. In this case it is a service executed by the event process and correlation module  to run the query. The service request may include an ID or description of the service to call which is determined from a service registry stored at the platform . The service registry stores information about each of the service offered by the platform  and service consumers can search the registry for services they desire to consume. A service identified from the registry may be requested from a service request sent to the service container module . The service is invoked by the service container module , which may include executing a service call to run the service which in this example runs the query. Query results are provided back to the service container module . The service container module  sends the response to the service consumer ","The service layer  shown in  may include the service request gateway , module core framework  and\/or build-time framework  shown in . The event process and correlation module  may be included in the event processing engine  shown in . The event process and correlation module  may process and correlate events according to stored rules in real-time or in non-real time.","The service container module  exposes services to the service consumers -. As described above, the service container module  receives the service requests from the service consumers -via the service request gateway . Also, the service container  provides responses for service requests to the service consumers -via the service request gateway . For example, the service container module  receives service requests from the service request gateway . The service container module  may also provide a service registry to a service consumer. Also, the service container module  can implement a service call provided in a service request to invoke a desired service.","The service container module  may have dependencies to the event process and correlation module  and the modules in the module core framework . For example, if a consumer tries to invoke a service, the service container module  may have to verify the service call is coming from a user that is authenticated and has privileges to access the service. The service container module  may delegate that functionality to modules in the module core framework . Similarly, the service container module  may have access to event processing services provided by the event process and correlation module . The service container module  may pass context with the service call to invoke the service for the specific consumer. Also, responses to the service requests are sent back to the consumer.","The service container module  may expose some event workflow management controls as management services that can be consumed by the service consumers. A service consumer may control event process workflow by consuming an event processing workflow control service. An event processing workflow control service may manage the order of processing events. For example, through a management service binding, a service consumer can control if events are persisted event processing by the event processing engine  or vice versa based on the nature of the event stream. Another example is a service consumer can opt in or opt out of certain event processing stages. For example, for certain event streams, the persistence stage can be opted out. Also, the service container module  may expose event correlation controls as management services so a service consumer can manage correlation. These type of services are referred as event control correlation services. For example, for a certain event stream, the event time for the events in the stream may be in a disordered state. The service consumer may have knowledge of this kind of event stream, so by consuming event correlation services, the service consumer can dynamically give instruction that an event stream including events with a certain tag needs to be buffered and then sorted by event time before passing to event processing and correlation. Also, statistic event data may be automatically exposed into a service. A user can define the statistics, such as top N attacker addresses, top loaded connector, etc. A service consumer may consume a service provided by the service container module  that provides the statistics to the service consumer. The external system of the service consumer may perform actions based on the statistics, such as ban top 5 attacker addresses from having access to the system or reducing a data feed to a top-loaded connector.","The module framework  may include an application server that provides service management, module management and service application modular capabilities, security and logging. The dynamic module manager  provides lifecycle management which may include installing, running, and removing services. Developers may create service applications and provide the service applications to the SIEM . The service applications are stored in the data storage  and then further managed by the dynamic module manager . For example, as performed by the dynamic module manager , the service applications are installed and executed when needed or requested and may be subsequently removed from the SIEM  but maintained in the data storage . The versioning may include tracking versions and running the most recent version or a requested version.","The platform provides a way to integrate services, which may include Java 2 Platform or Enterprise Edition (J2E or J2EE) applications, into the SIEM. The J2EE container dynamic module  runs J2EE applications in a container. The container implements a web component contract for J2EE components. The container specifies a runtime environment for application components, and provides an interface between the components and the low-level platform-specific functionality. For example, a J2EE container provides deployment, management and execution support for application components, and the low-level details may be specified in XML descriptor files.","The service manager  monitors service lifecycle. For example, services are loaded and unloaded and are started and stopped as needed. A service stop may impact a dependency. For example, a service may require running multiple services to perform various functions for the service. The service manager  keeps track of the dependencies and may control lifecycle so as not to negatively impact a dependency by stopping a needed service.","The logging manager  logs activities of the module core framework  and the security manager  extends security functionality so any security provider that implements the security provider interface of the security manager  can achieve authentication.","The module core framework  runs on Open Services Gateway Initiative (OSGI) . The OSGI  is a module system and service platform for Java that implements a complete and dynamic component model. The specification for implementing the OSGI  is made available through the OSGI standard. The platform  may run on Java Virtual Machine (JVM) , which runs on an operating system and computer hardware.","The build-time framework  incorporates services into the SIEM . The build-time framework  provides an interface for adding or modifying services. For example, service applications  are provided to the build-time framework . A service application is machine readable instructions providing the functionality of the service, such as a JAVA application which may be used to generate a J2EE application. A service application can be any plain old java object (pojo) annotated with service annotations indicating service bindings. Service code generator  and bundler  expose a service application to a plurality of different service bindings, which may include the different web services used by the service consumers -. For example, a service application for a new service is received. The service code generator  and bundler  create a service application that has adaptors for different service bindings. The service application and adaptors are bundled. The bundle may be provided as JAR file and stored in the data storage . The bundle includes service metadata such as version, status, relationships (dependencies between services and service depends on multiple libraries), service bindings, and other information that govern the service usage. The service is published in the service registry and can be consumed using any of the service bindings. When the service application is provided to the build-time framework, a user may indicate the service bindings to create for the service application. For example, one service application may have REST service bindings while another service application may have SOAP and Web 2.0 service bindings. The service bindings are included as metadata in the bundle.","The output of the build-timeframe framework , as indicated above, may include a bundle including the service application and its bindings. The service application is exposed to the service consumers -by the service container module . After a service is built by the build-time framework , the service container module  may include the service in the service registry and may run the service per requests from the service consumers -",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3","b":["300","203","200","301","203"]},"At , the service request gateway  determines whether the information is event data or a service request. Header information in the HTTP request may be used to identify whether the information is a service request or event data.","At , if the information is a service request, the service request gateway  sends the service request to the service container module .","At , the service container module  uses information from the service request to identify the service and any dependent services to execute from the service registry. For example, the service request may include an identifier that is used to identify the service from the service registry. The service description in the registry may identify any dependent services that are needed for the service. For example, the service may require a privilege service to run to determine if the service consumer has privileges to use the requested service.","Also, the service container module  determines if a service request is a synchronous or an asynchronous service request. The service request may indicate if it is synchronous or asynchronous through metadata in the request. If the service request is asynchronous, then the service container module queues the service request for processing and sends an acknowledgment back to the service consumer making the request via the service request gateway . The acknowledgment indicates that service request is received for processing and may include a reference ID that may be used to request status of the service processing. If the service request is synchronous, the service request is queued for processing but no acknowledgement is sent.","At , the service and any dependent services are executed. For example, the module core framework  starts the services in containers if they are not already running. The services are performed. For example, if the service is to run a query on event data, the query is executed by the event process and correlation module .","At , a response to the service request, e.g., including results of executing the service, are sent to the service consumer via the service request gateway .","At , if the information is determined to be event data at , then the event data is sent to the event process and correlation module .","At , the event process and correlation module  determines the processing to be performed on the event data. The processing may be predetermined based on the type of event data. For example, network security data may be processed differently than bank transactions to detect network security events and fraud. At , the event data is processed. Processing of event data is further described below with respect to the method .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4","FIG. 2"],"b":["400","401","250","110"]},"At , the service code generator  shown in  creates an exposed service application including adaptors for different service bindings. The service bindings may be specified by a user.","At , the bundler  puts the exposed service in a service container. The service container includes service metadata such as version, status, relationships (dependencies between services and service depends on multiple libraries), service bindings, and other information that govern the service usage.","At , the module core framework  registers the service.","At , the module core framework  publishes the service including a service ID and description in the service registry.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 5","b":["500","500","500","110","200","500"]},"The computer system  includes a processor  or other hardware processing circuit that may implement or execute machine readable instructions performing some or all of the methods, functions and other processes described herein. Commands and data from the processor  are communicated over a communication bus . The computer system  also includes data storage , such as random access memory (RAM) or another type of data storage, where the machine readable instructions and data for the processor  may reside during runtime. Network interface  sends and receives data from a network. The computer system  may include other components not shown.","While the embodiments have been described with reference to examples, various modifications to the described embodiments may be made without departing from the scope of the claimed embodiments."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The embodiments are described in detail in the following description with reference to the following figures.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
