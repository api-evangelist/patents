---
title: Service licensing and maintenance for networks
abstract: A technique is disclosed that allows different computers in a network to create an identifier that uniquely identifies the network. The technique allows the unique identifier to be consistently created over time, regardless of the particular make up of the computing devices in the network at any particular point time. In some implementation, a computer within the network hosts the identification creation tool. In order to create a unique identifier for the network, the tool identifies each network adapter used by the host computer. Using this information, the tool identifies a gateway device used by the network adapter or adapters, and then determines the physical network address of that gateway device. For example, if the network is an Ethernet network, the tool will determine the medial access control (MAC) address for the gateway device. The tool then creates a unique identifier for the network based upon the physical address. The unique network identifier can then be used to associate the billing a usage fee, such as a licensing fee, with the network rather than with an individual computer within the network. Alternately or additionally, the unique network identifier can be used to maintain and support the gateway device for the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07904712&OS=07904712&RS=07904712
owner: Cisco Technology, Inc.
number: 07904712
owner_city: San Jose
owner_country: US
publication_date: 20040810
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","CONCLUSION"],"p":["The present invention is directed toward the unique identification of a network. Various aspects of the invention are particularly suitable for licensing services to a small network and for managing the gateway device for a small network.","Computers have become commonplace tools in modern society, and many businesses and residences now have one or more computing devices. In a small business, for example, some employees may each use a desktop computer or laptop computer. Some employees may even use more portable computers such as personal digital assistants or \u201csmart\u201d wireless telephones. Similarly, with a family sharing a residence, each family member may have his or her personal computer, or the family members may share one or more computers. Further, both small businesses and personal residences may include various computing appliances that incorporate or otherwise interact with computers. For example, a home residence may include a refrigerator, a \u201cVoice over Internet Protocol\u201d telephone, a digital music server, a digital camera, or an environmental control system that includes or interacts with a computer.","In order to optimize the use and flexibility of these computing devices, a business or family may link them together to form a small private network. Typically, each of the computing devices is connected to a router through a network adapter. The router then \u201croutes\u201d packets of data to and from each computing device. With this type of small private network, the router can in turn be connected to one or more larger private networks or a public networks, such as the Internet. By sending and receiving messages through the router, each networked computing device may then communicate with computing devices outside of the private network. In this arrangement, the router serves as a \u201cgateway\u201d device that provides a gateway to outside of the private network. In many situations, a computer user may interact with more than one such network. For example, a person using a laptop computer may join a first network at his or her employment during the day, and join a second, different network at his or her residence in the evening.","As the use of networked computing devices grows, some product developers have created products to facilitate the setup, use, and functionality of private networks. One such product is the Port Magic product from Pure Networks Corporation of Seattle, Wash. The Port Magic product, for example, allows a network user to interrogate and control the use of communication ports in a small network's router.","Because this type of product benefits an entire small network rather than just an individual computer, it often would be more appropriate to associate the usage costs for the product (such as licensing fees or a sales charge) with the network, rather than with a single computer. Accordingly, it would be desirable to create a unique identifier for a network. Moreover, as the computing devices within a network may frequently change, it would be desirable to allow any computer in the network to independently create the unique identifier. Previous techniques for generating this type of unique key have required complex collaboration between each computer on the network. Still further, it would be desirable to allow the unique identifier to be consistently created over time, regardless of the particular make up of the computing devices in the network at any particular point time.","Advantageously, embodiments of the invention allow different computers in a network can create an identifier that uniquely identifies the network. Further, these embodiments may allow the unique identifier to be consistently created over time, regardless of the particular make up of the computing devices in the network at any particular point time. According to various embodiments of the invention, a computer within the network hosts an identification creation tool. In order to create a unique identifier for the network, the tool identifies each network adapter used by the host computer. Using this information, the tool identifies a gateway device used by the network adapter or adapters, and then determines the physical network address of that gateway device. For example, if the network is an Ethernet network, the tool will determine the media access control (MAC) address for the gateway device. The tool then creates a unique identifier for the network based upon the physical address of the gateway device.","Overview","Various embodiments of the invention provide a tool for creating an identifier that uniquely identifies a network. Some embodiments of the invention may typically be incorporated into a larger application that provides service or functionality to the network. For example, a network identification creation tool may be incorporated into a billing component of a larger application, so that usage charges for the application can be associated with the network rather than with an individual computer. With these embodiments, one or more computers within the network will host an instantiation of the network identifier creation tool. In order to create a unique identifier for the network, the tool identifies each network adapter used by the host computer. Using this information, the tool identifies a gateway device used by the network adapter or adapters, which typically will be a router. The tool then determines a value uniquely associated with the gateway device, such as its physical network address. The tool then creates a unique identifier for the network based upon that unique value.","Computing Operating Environment","As noted above, various embodiments of the invention may be implemented as the execution of software instructions by a computing device, such as a programmable computer. As used herein, the term \u201ccomputer\u201d refers to a device that can be programmed to perform a number of different, unrelated functions. Examples of computers will thus include conventional desktop and laptop computers, conventional personal digital assistants, and some telephones (such as wireless \u201csmart\u201d telephones). The term \u201ccomputing appliance\u201d then refers to a device that is limited to primarily performing only related functions. Examples of a computing appliance may thus include, for example, printers, cameras, telephones that exchange voice information in data packets (sometimes generically referred to as \u201cVoice over Internet Protocol (VoIP) telephones), digital video recorders, televisions, streaming media players, and digital music servers, among others. The term \u201ccomputing device\u201d is then used herein to include both computers and computing appliances.","An illustrative example of such a computing device  is illustrated in . As seen in this figure, the computing device  has a computing unit . The computing unit  typically includes a processing unit  and a system memory . The processing unit  may be any type of processing device for executing software instructions, but will conventionally be a microprocessor device. The system memory  may include both a read-only memory (ROM)  and a random access memory (RAM) . As will be appreciated by those of ordinary skill in the art, both the read-only memory (ROM)  and the random access memory (RAM)  may store software instructions for execution by the processing unit .","The processing unit  and the system memory  are connected, either directly or indirectly, through a bus  or alternate communication structure to one or more peripheral devices. For example, the processing unit  or the system memory  may be directly or indirectly connected to additional memory storage, such as the hard disk drive , the removable magnetic disk drive , the optical disk drive , and the flash memory card . The processing unit  and the system memory  also may be directly or indirectly connected to one or more input devices  and one or more output devices . The input devices  may include, for example, a keyboard, a remote control pad, a pointing device (such as a mouse, touchpad, stylus, trackball, or joystick), a scanner, a camera or a microphone. The output devices  may include, for example, a monitor display, television, printer, stereo, or speakers.","Still further, the computing unit  will be directly or indirectly connected to one or more network interfaces  for communicating with a network. This type of network interface , also sometimes referred to as a network adapter or network interface card (NIC), translates data and control signals from the computing unit  into network messages according to a communication protocol, such as the Transmission Control Protocol (TCP), the Internet Protocol (IP), and the User Datagram Protocol (UDP). These protocols are well known in the art, and thus will not be discussed here in more detail. An interface  may employ any suitable connection agent for connecting to a network, including, for example, a wireless transceiver, a power line adapter, a modem, or an Ethernet connection.","It should be appreciated that one or more of these peripheral devices may be housed with the computing unit  and bus . Alternately or additionally, one or more of these peripheral devices may be housed separately from the computing unit  and bus , and then connected (either directly or indirectly) to the bus . Also, it should be appreciated that both computers and computing appliances may include any of the components illustrated in , may include only a subset of the components illustrated in , or may include an alternate combination of components, including some components that are not shown in .","Network Operating Environment","As previously noted, various embodiments of the invention may be employed with a small network.  illustrates an example of this type of small network. The network  may include a variety of different computing devices or \u201cnodes\u201d. For example, the network  may include one or more laptop computers A, one or more desktop computers B, and one or more personal digital assistants C. In addition to these computers, the network  may also include one or more computing appliances, which are not as versatile as a conventional programmable computer, but which nonetheless may be configured to exchange data over a network. Such network appliances may include, for example, one or more printers D and one or more cameras E, as illustrated in . Other small networks that can be used with various embodiments of the invention may include any suitable computing device, such as telephones that exchange voice information in data packets (sometimes generically referred to as \u201cVoice over Internet Protocol (VoIP) telephones), digital video recorders, televisions, streaming media players, and digital music servers, among others.","Each of these networked devices  communicates, either directly or indirectly, with a gateway device . In turn, the gateway device  typically will communicate with an external device or network. An external network may be another private network, or it may be a public network, such as the Internet . Thus, a gateway device is a device that can steer electronic data from one network to another network. Typically, a gateway device serves as a node on two incompatible networks (i.e., networks that use different communication protocol formats) and it will convert data from one network's communication protocol format into the other network's communication protocol format. As used herein, the term \u201csmall network\u201d refers to a network made up of networked devices that each employ the same network address to communicate with the same gateway device, together with the gateway device itself.","The network devices  may be connected to the gateway device  using any suitable communication medium. For example, in the illustrated network , the desktop computers B are connected to the gateway device  through a hard-wired connection A (such as an Ethernet cable), while the laptop computer B is connected to the gateway device  through a IEEE 802.11 wireless connection and the personal digital assistant C is connected to the gateway device  through a Bluetooth wireless connection.","It should be appreciated that, as used throughout this application, the term \u201cconnect\u201d and its derivatives (e.g., connection, connected, connects) includes both direct and indirect connections. Thus, with the network illustrated in , the laptop computer A may be connected to the gateway device  using a wireless transceiver incorporated into the laptop computer A and a wireless transceiver incorporated into the gateway device . Alternately, the laptop computer A may be connected to the gateway device  using a wireless transceiver external to the laptop computer , the gateway device , or both.","Typically, the gateway device  will be a router. As will be appreciated by those of ordinary skill in the art, a router routes data packets from the networked devices  to an external device or network. With some networks, however, the gateway device  alternately may be a computer performing router functions, a hub, a bridge, or \u201clayer-3\u201d switch. As will also be appreciated by those of ordinary skill in the art, the computing devices or \u201cnodes\u201d making up the network  will communicate with the gateway device  using one or more defined communication protocols, such as the Transmission Control Protocol (TCP) and the Internet Protocol (IP).","With these communication protocols, each computing device  and gateway device  in the network  will be assigned a logical address. For example, if the network  is connected to the Internet  through an Internet service provider, the Internet service provider will assign the gateway device  a logical Internet Protocol (IP) address. The Internet service provider may also provide the gateway device  with a block of logical Internet Protocol (IP) addresses for the gateway device  to reassign to each network device . Alternatively, the gateway device  can itself assign a range of logical Internet Protocol (IP) addresses to each network device , and then use a translation operation (e.g., a Network Address Translation (NAT) operation) to route data packets that it receives to the appropriate network device . This type of logical address typically is unrelated to the particular computing device to which it is assigned. Instead, a logical address identifies the relationship of that computing device to other computing devices in the network.","In addition to a logical address, each network device typically will also have a physical address. For example, most computing devices capable of communicating over a network, including routers, employ a network adapter with a media access control (MAC) address. This type of physical address is assigned to a network adapter according to standards (referred to as Project  or just 802 standards, which are incorporated entirely herein by reference) set forth by the Institute of Electrical and Electronic Engineers (IEEE). More particularly, these standards define a 48-bit and 64-bit physical address format for network devices. The first 24 bits of the address are assigned by the IEEE Registration Authority, and uniquely identify the manufacturer of the network adapter. The remaining bits are then assigned by the manufacturer to uniquely identify each network adapter produced by the manufacturer. Consequently, the physical address of a network adapter is unique across all networks unless manually changed by the user. The physical address is unique to the network adapter, and is independent of a computing device's relationship to other computing devices in a network. Thus, the physical address does not change over time or between uses in different networks.","Application Operating Environment","Various embodiments of the invention may be incorporated as part of a larger software application. For example, some embodiments of the invention may be incorporated as a billing module within a larger software application that provides services to or enhances the functionality of a small network. Accordingly, various embodiments of the invention will now be described in the context of a component of a larger software application that may be implemented within a network, such as the small network .",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3","b":["301","301","303","305","301","307","309"]},"Returning now to , the gateway device interface module  is used to communicate with the gateway device . For example, the gateway device interface module  may include one or more application programming interfaces for controlling or otherwise communicating through a network adapter included in the computing device hosting the software application . While the gateway device interface module  is illustrated as a portion of the application , it should also be appreciated that, with some implementations, some portion or even all of the gateway device interface module  may be implemented by the operating system of the computing device hosting the network service software application .","The gateway device driver module  then provides a driver for controlling the gateway device . In order to allow the software application  to be useful for a variety of networks, the gateway device driver module  may employ gateway specific drivers implemented as dynamically linked libraries (DLLs) for working with a number of different gateway devices . With some implementations, the driver DLLs may all be included with the software application . With still other implementations, the gateway device driver module  may include an interface allowing it to use driver DLLs created by third parties. Because the gateway device  for a small network is almost always a router, various implementations of the software application  may only employ driver DLLS for routers, and omit driver DLLs for more uncommon gateway devices, such as bridges and hubs.","When the software application  is initiated, the gateway device driver module  employs heuristics to determine the appropriate driver DLL to communicate with the gateway device . In practice, most gateway devices implement a Web-compatible user interface accessed using the HTTP protocol for allowing a user to configure the settings and functionality of the gateway device. Accordingly, as will be described in more detail below, the software application  initially sends the gateway device  a HTTP Request. In reply, the gateway device  sends the software application  a HTTP Response containing a markup language page, such as a hypertext markup language page. That is, the HTTP Response will either include the contents of the page requested (HTTP STATUS_CODE=200) or a page containing an error message indicating the user is not authorized to view the requested page (status code \u201cAccess Denied\u201d or 401). The gateway device driver module  then compares the content of the HTTP Response from the gateway device  with at least one corresponding regular expression registered by each driver DLL, to determine which driver DLL matches the gateway device .","By convention, the Web-based user interface accessed via the HTTP protocol for a gateway device typically will require a valid user name and password before allowing a user to manage the gateway device. In practice, many users do not change the user name or password from the default values configured by the manufacturer. A driver DLLs used to communicate with a gateway device  will thus include the original default values for the user name and password for that gateway device. These \u201cdefault access credentials\u201d then are used to communicate with gateway device . If the gateway device driver module  determines that a selected driver DLL cannot be used because these default access credential values have been changed, the software application  may prompt the user for the new access credential values. For example, the software application  may display the user interface shown in . As seen in this figure, the user interface  includes a field  prompting a user for the name of the router, a separate field  prompting the user for the router's password, and a button  for submitting the information in the fields ,  to the software application . Using submitted access credential information, the driver DLL selected by the gateway device driver module  can control the gateway device .","In the illustrated example, the software application  controls the communication ports of the gateway device . Generally, the network services module  configures the gateway device  to open a port when another software application attempts to create a \u201clistening\u201d port on the computer device. When the other software application then seeks to close the port or exits, the network services module  automatically closes the port on the gateway device on behalf of the other software application. This functionality is useful, for example, with a software application that communicates in a peer-to-peer manner, such as instant messaging service applications. Without ports on the local gateway device  being mapped to the computing device hosting the software application, the application is forced to communicate with other computing devices  residing in a different network through a third computing device (typically referred to as a \u201crelay server\u201d) outside of the small network . Both computing devices connect to the \u201crelay server,\u201d and the relay server then routes communications between the two computing devices. By allowing the gateway device  to open a port at the request of these other software applications, communications between these other software applications can pass from a computing device on one small network to a computing device hosted on another small network.","To perform these functions, the network services module  will \u201clisten\u201d for when another software application executing on the host computing device requests a communication port that can accept connections from software applications hosted on the local computing device or another computing device. For example, if the software application  is being implemented on a host computer using the Microsoft Windows operating system, the network services module  will detect when another application requests a \u201clistening socket\u201d in the WINSOCK layered service provider. In response to detecting such a request, the network services module  displays a user interface asking the user for permission to open the requested port. For example, the network services module  may display a user interface like that shown in . As seen in this figure, the user interface  includes a message  identifying the software application requesting an open communication port, and a pair of control buttons  that allow the user to approve or deny the request. The user interface  may also include a check field , that the user may check to make the user's response to the port request the default request response.","Alternately or additionally, the network services module  may allow a user to designate applications that are permitted to automatically open a port on the gateway device  without prompting the user. For example, with some implementations of the software application , the network services module  may display a user interface like the user interface  show in . As seen in this figure, the user interface  includes a list of applications  that previously have requested the opening of a communication port on the gateway device . Each entry in the list  will include a field  identifying the name of the application that has requested the open port, a field  indicating the current status of any open ports associated with the listed application, and a changeable policy field  designating the permissions that the application has to open ports in the future.","Thus, the list  of designated applications is built dynamically. When a software application requests the opening of a communication port on its hosting computing device for the first time, the network services module  prompts the user to designate the application port opening policy in response. With the illustrated example, the user may change the value of the field  to instruct the network services module  to (1) never map a port for the application, (2) always prompt the user for further instructions before mapping a port for the application, (3) always open the port on at the request or demand of the application, or (4) always open a port for the application when the software application  starts up, regardless of status of associated application. Of course, alternate implementations of the software application  may offer the user a finer or coarser level of control over the opening of ports on the gateway device .","Because the functionality provided by the network services module  relates to the operation of the network , it would often be useful to associate the usage costs of the software application  with the network , rather than with the computing device actually hosting the software application . Accordingly, the billing module  of the software application  may incorporate a tool according to various embodiments of the invention for creating an identifier that uniquely identifies the network . Moreover, the tool according to some embodiments of the invention may create billing records that include the unique network identifier and various desired usage information. In the illustrated embodiment, the billing module  includes a network adapter enumeration module , a physical address identification module , an optional gateway device identification module , and a billing record generation module , which incorporates a network identifier generation module as explained in more detail below.","Unique Network Identifier Tool","With the illustrated example, a user is charged a license fee for use of the software application  based primarily upon the number of networks in which the software application  is employed. Accordingly, the billing module  records each network with which the software application  is used. In order to do so, the billing module  creates a unique identifier for each network using a value uniquely associated with the gateway device  for that network. With various embodiments of the invention, any suitable unique identifier associated with the network's gateway device  may be used. Various embodiments of the invention, however, may employ the physical address of the gateway device  as its unique identifier. More particularly, some embodiments of the invention will use the media access control (MAC) address for the gateway device  as its unique identifier. Accordingly, one process by which the billing module  can determine a unique network identifier from the media access control (MAC) address of the network's gateway device  will now be described in detail with respect to .","Initially, in step , the network adapter enumeration module  enumerates the network settings of all of the network adapters on the computer hosting the software application . For example, if the software application  is being hosted on a computer employing the Microsoft Windows operating system, the network adapter enumeration module  may call the GetAdaptersInfo application programming interface to enumerate the network adapters on the host computer. Other operating systems typically will offer commands or programming interfaces that perform a similar function. Table 1 below illustrates an example of the types of network settings that may be obtained during this enumeration process. More particularly, Table 1 shows the network adapter settings output by the \u201cipconfig\/all\u201d command-line utility provided by the Microsoft Windows operating system.",{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Connection-specific DNS","MyDomain.local"]},{"entry":"Suffix:"},{"entry":["Description:","3Com 3C920 Integrated Fast Ethernet"]},{"entry":["Physical Address:","00-06-5B-EB-C8-FD"]},{"entry":["Dhcp Enabled:","Yes"]},{"entry":["Autoconfiguration Enabled:","Yes"]},{"entry":["IP Address:","192.168.1.24"]},{"entry":["Subnet Mask:","255.255.255.0"]},{"entry":["Default Gateway:","192.168.1.1"]},{"entry":["DHCP Server:","192.168.1.172"]},{"entry":["DNS Servers:","192.168.1.172"]},{"entry":["Primary WINS Server:","192.168.1.172"]},{"entry":["Lease Obtained:","Wednesday, August 04, 2004 5:44:47 AM"]},{"entry":["Lease Expires:","Thursday, August 12, 2004 5:44:47 AM"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Thus, in addition to identifying the network adapters employed by the host computer, the enumeration process also checks each network adapter in step  to determine if it specifies a default logical address for a gateway device. As previously noted, this \u201cdefault gateway address\u201d is the logical network address of the gateway device  that routes data packets from the network  with the computing device  hosting the software application  to another network. If a network adapter does not specify such a default logical gateway address, then that adapter is eliminated from further processing. Also, if the embodiment of the invention is compatible with a specific type of network, it may check each enumerated network adapter to confirm that it is compatible.","For example, the illustrated embodiments of the invention employ the media access control address of the gateway device , as previously noted. These embodiments thus are primarily used with Ethernet networks that employ this type of physical address (i.e., a network meeting the IEEE 802.3 standard). Accordingly, in step , the network adapter enumeration module  will check each enumerated network adapter in the host computer to confirm that it is an Ethernet network adapter. Any detected network adapter that is not an Ethernet adapter is eliminated from further processing.","Next, the physical address identification module  determines the physical address corresponding to each logical gateway address specified by the enumerated Ethernet network adapters. More particularly, in step , the physical address identification module  deletes the address resolution protocol (ARP) entry maintained by the host computer's operating system that corresponds to the logical address of the gateway device. It then sends an address resolution protocol (ARP) request message to the logical gateway address specified by the network adapter in step . In response to the address resolution protocol (ARP) request message, the device at the logical gateway address transmits its physical network address (i.e., its media access control (MAC) address) to the host computer, which creates a new address resolution protocol (ARP) table entry for the gateway's physical network address. In step , the physical address identification module  then uses the address resolution protocol (ARP) table to look up the media access control (MAC) address for the device at the logical gateway address. If the retrieved media access control (MAC) address is not all zeros, the physical address identification module  will save the retrieved media access control (MAC) address.","With various embodiments of the invention, the network services module  may be configured primarily for use with small networks that employ a router as the gateway device , rather than another computer, a bridge, or a hub. Accordingly, rather than trying to specifically identify the type of device located at the default logical gateway address, various embodiments of the invention may optionally check to determine if the device at the default logical gateway address is a router. If it is not, then the device is assumed not to be the gateway device  for the network. It should be noted, however, that other embodiments of the invention may be employed with any type of gateway device , particularly with regard to the creation of a unique identifier for a network.","With some embodiments of the invention configured to operate primarily with a router, after the physical address identification module  identifies the media access control (MAC) address for the device at the default logical gateway address, the gateway device identification module  tests the device to determine whether it is a router and what type of router. More particularly, in step , the gateway device identification module  tries to connect to Port  of the device at the default logical gateway address. If the device at the default logical gateway address allows the gateway device identification module  to connect to its Port , then the router identification module will conclude that the device at the default logical gateway address hosts a Web server (i.e., provides an HTTP based interface) and is therefore most likely a router.","Next, the gateway device identification module  will try to identify the type of gateway device  at the default gateway address in order to determine which device-specific driver DLL should be used with the gateway device . First, the gateway device identification module  submits a request for a hypertext transfer protocol (HTTP) page from Port  of the gateway device . This HTTP request will include a universal resource locator (URL) address of the form \u201chttp:\/\/xxxx.xxxx.xxxx.xxxx\u201d where \u201cxxxx.xxxx.xxxx.xxxx\u201d is the default gateway address for the gateway device . Because the gateway device  has not yet been identified however, this request is submitted with intentionally incorrect security credential information, as will be explained below.","Conventionally, a Web server hosted on the gateway device  will respond to a HTTP Request with the resource associated with the URL contained in the HTTP Request. As also known in the art, gateway devices, such as routers, conventionally employ HTML pages as their native communication format. Accordingly, the gateway device  may respond with an HTTP STATUS OK code message (e.g., Status_Code ) and an HTML page associated with the gateway device  (e.g., the gateway device's home page). Table 2 contains an example of a Status Code OK () from a D-Link router:",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"STATUS_CODE: 200"]},{"entry":[{},"STATUS_TEXT: OK"]},{"entry":[{},"VERSION:HTTP\/1.1"]},{"entry":[{},"SERVER: Embedded HTTP Server 2.42"]},{"entry":[{},"Content-Type: text\/html"]},{"entry":[{},"Last-Modified: Wed, 31 Mar 2004 00:12:49 GMT"]},{"entry":[{},"Connection: close"]},{"entry":[{},"<HTML>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<HTML Content of Requested Page>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/HTML>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Alternately, if the gateway device  employs a security authentication scheme, such as the well-known \u201cBasic Authentication\u201d scheme, the gateway device  may return an HTTP ACCESS DENIED status code message (e.g., STATUS_CODE=401). To ensure that this type of response is received for a gateway device  employing a security authentication scheme, the original HTTP request is submitted with intentionally incorrect security credential information, as noted above. The HTTP ACCESS DENIED status code message will typically contain the authentication scheme and \u201crealm\u201d for the gateway device . For example, Table 3 contains an \u201cAccess Denied\u201d HTTP response from a D-Link router, model DI-624. The authentication scheme is \u201cWWW-Authenticate: Basic\u201d with a realm of \u201cDI-624\u201d.",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"STATUS_CODE: 401"]},{"entry":[{},"STATUS_TEXT: Unauthorized"]},{"entry":[{},"VERSION: HTTP\/l.1"]},{"entry":[{},"RAW_HEADERS_CRLF: HTTP\/1.1 401 Unauthorized"]},{"entry":[{},"Server: Embedded HTTP Server 2.42"]},{"entry":[{},"WWW-Authenticate: Basic realm=\u201cDI-624\u201d"]},{"entry":[{},"Connection: close"]},{"entry":[{},"<HTML><HEAD><TITLE>401 Unauthorized<\/TITLE><\/HEAD>"]},{"entry":[{},"<BODY BGCOLOR=\u201c190 ffffff\u201d><H4>401"]},{"entry":[{},"Unauthorized<\/H4><\/BODY><\/HTML>"]},{"entry":[{},"EOF"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"As previously noted, the gateway device driver module  will have a number of gateway device specific driver DLLs, so that the software application  can operate with a wide variety of gateway devices. Each driver DLL will have one or more regular expressions associated with it, which are used to associate a driver DLL with a specific gateway device it supports. More specifically, a driver DLL for a particular gateway device will be associated with at least one regular expression corresponding to identifying information that can be obtained from that gateway device. The regular expression may correspond, e.g. to identifying information provided by the gateway device  in response to a routine inquiry from the computer hosting the software application , such as the address resolution protocol (ARP) request discussed above. Alternately or additionally, the regular expression may correspond to identifying information provided in response to a specific inquiry from the software application , such as the HTTP Request to the gateway device  also described above. As will be appreciated by those of ordinary skill in the art, a regular expression is a pattern that can match various text strings. Thus, the regular expression \u20181[0-9]+ will match any string with a \u20181\u2019 followed by one or more digits. Accordingly, the gateway device identification module  will compare the regular expressions associated with the driver DLLs to the identifying information obtained from the gateway device .","With some embodiments of the invention that employ a Microsoft Windows operating system, the regular expressions for each driver DLL may be stored as a Windows Registry Key in the Window Registry. As will be appreciated by those of ordinary skill in the art, the Windows Registry serves as a known, centralized location for storing setting information, and thus provides a convenient and accessible location for storing the regular expressions associated with each driver DLL. For example, with some embodiments of the invention a Windows Registry Key for a driver DLL will contain five entries: (1) a path entry, which specifies a fully qualified path to DLL implementing the driver for the associated gateway device, (2) a key entry that is used to sort router DLLs for evaluation order, (3) a \u201cBasicAuth\u201d entry that is a regular expression for evaluating the identity of the gateway device  when the gateway device  has provided an HTTP_ACCESS_DENIED response, (4) a \u201cNoAuth\u201d entry that is a regular expression for evaluating the identity of the gateway device  when the gateway device  has provided a HTTP_STATUS_OK response that contains the requested web page, and (5) a MAC entry that is a regular expression for evaluating the MAC address obtained from the gateway device  to associate the gateway device  with a vendor. An example of a Windows Registry Key for driver DLL to be used with a D-Link router is shown below in Table 4.",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"[HKEY_LOCAL_MACHINE\\SOFTWARE\\Pure Networks\\Port Magic\\"},{"entry":"RG\\3\\DLink.dll]"},{"entry":"\u201cPath\u201d=\u201cC:\\\\Program Files\\\\Pure Networks\\\\Port Magic\\\\RG\\\\DLink.dll\u201d"},{"entry":"\u201cKey\u201d=\u201cDlink\u201d"},{"entry":"\u201cBasicAuth\u201d=\u201c{circumflex over (\u2009)}{DI-\\\\a+}|{D-Link DI-\\\\a+}|{Login as admin}\u201d"},{"entry":"\u201cNoAuth\u201d=\u201c{D-Link}|{NAME=\\\u201cfLogo\\\u201d}\u201d"},{"entry":"\u201cMac\u201d=\u201c{circumflex over (\u2009)}{00:40:05}|{00:05:5D}|{00:50:BA}|{00:80:C8}\u201d"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"With some embodiments of the invention, the HTTP Response returned by the gateway device  (i.e., either the HTML page returned with the HTTP ACCESS OK message or the HTTP ACCESS DENIED message) will be evaluated against the set of regular expressions for all of the driver DLLs (i.e., the combination of the regular expressions for all of the driver DLLs). For example, with some embodiments of the invention, the gateway device identification module  will first compare the contents of the HTTP reply message from the gateway device  with a set containing the \u201cBasicAuth\u201d and \u201cNoAuth\u201d regular expression for each driver DLL.","If a portion of the returned message (e.g., identifying information for the gateway device ) matches a regular expression in the set, then that portion is designated as a Device Identifier value. If no portion of the returned message matches a regular expression in the set, however, then the gateway device identification module  will next compare the MAC address obtained for the gateway device  with a set containing the \u201cMAC\u201d regular expression associated for each the driver DLL. If the MAC address matches one of a \u201cMAC\u201d regular expression associated with one of the driver DLLs, that matching value is designated as the Device Identifier value. The gateway device driver module  can then use this Device Identifier to determine which driver DLL should be used with the gateway device . It should be noted, however, that alternate embodiments of the invention may compare the \u201cMAC\u201d regular expressions before comparing the \u201cBasic Auth\u201d and \u201cNoAuth\u201d regular expressions, or may combine the different types of regular expressions into a single comparison process.","If no identifying information obtained from the gateway device  matches a regular expression associated with a driver DLL, then the gateway device identification module  may eliminate that gateway device from consideration as a gateway device . Steps - are then repeated for each of the remaining enumerated network adapters for the host computer.","As noted above, various embodiments of the invention may be intended for use with small networks. Because this type of network will only include a single gateway device , these embodiments of the invention may only recognize one gateway device  for the host computer at a time. Accordingly, with these embodiments of the invention, if two or more gateway devices are identified for the host computer at a single time, they may take no further action. Alternately, some embodiments of the invention may allow the host computer to have two or more gateway devices. These alternate embodiments of the invention may, for example, generate a unique network identifier corresponding to each gateway device for the host computer. Some embodiments of the invention may alternately allow the host computer to determine the \u201cprimary\u201d unique network identifier for the computer when more than one unique network identifier exists. The algorithm used to make this determination could be any suitable algorithm that generates a consistent result, such as choosing the numerically lowest or highest network identifier.","Once a gateway device  has been validated as a supported and accessible router, the billing record generation module  uses the previously obtained media access control (MAC) address for that router to generate the unique network identifier for the small network. More particularly, in step , the billing record generation module  removes all non-hexidecimal characters from the MAC address. Next, in step , the billing record generation module  converts this \u201cstripped\u201d MAC address to a 64 bit integer. Finally, in step , the billing record generation module  encrypts the 64 bit integer. The billing record generation module  may, for example, use Bruce Schneier's BLOWFISH encryption algorithm, which is incorporated entirely herein or other suitable encryption algorithm for the encryption. The well-known BLOWFISH encryption algorithm, is described in, e.g., 809, Springer-Verlag, 1994, which is hereby incorporated entirely herein by reference.","Various embodiments of the invention may employ the same encryption key for every copy and instantiation of the software application . The resulting unique network identifiers would thus not securely encrypt the original MAC address, but they would not provide any private information identifying the user. Alternately, with some embodiments of the invention, the stripped MAC addresses may be individually and securely encrypted. Still further, some embodiments of the invention may perform alternate or additional desired manipulations of the gateway device's MAC address to generate the unique network identifier, such as embedding the MAC address (or a derivative thereof) into a larger block of information. Still further, some embodiments of the invention may even use the original MAC address for the gateway device, without modification, as the unique network identifier for the network.","Thus, the billing record generation module  as described above incorporates a network identifier generation module for generating a unique network identifier. It should be noted, however, that, where a network identifier is desired independently of a billing record (e.g., where a computing device's use of various networks is simply being tracked), alternate embodiments of the invention may include only the network identifier generation module portion of the billing record generation module .","It also should be noted that, with various embodiments of the invention, the process described in detail above may be performed each time the software application  is instantiated on the host computing device. Additionally, however, this process may be periodically repeated, so that the billing module  can promptly detect when the host computing device changes from one network to another network.","Creation of Billing Records","Once the unique network identifier has been created to uniquely identify a network, the billing record generation module  can use this identifier to bill for use of the software application . With some embodiments of the invention, a usage fee may be paid by the user to the vendor of the software application . With still other embodiments of the invention, however, a third party may pay the usage fee to the vendor of the software application . For example, if the software application  is used to provide some functionality related to a third party, such as access to a network site or software application provided by the third party, then the third party may pay some or all of the usage fee for use of the software application . It should also be appreciated that the usage fee may be a one-time purchase fee, an ongoing license or royalty fee, or some combination of both.","In the illustrated embodiment of the invention, the billing record creation module  periodically creates a billing record on which the usage fee will be based, and then transmits that billing record to a licensing service maintained on a remote computer. Using the information, the licensing service will bill the appropriate party. The licensing service may be maintained by the vendor for software application , a third party that will be billed for use of the software application, or yet another party as desired. The licensing service may be maintained by a computer on a public network, such as the Internet, or by a computer on a private network directly or indirectly accessible to the computer hosting the software application .","With various embodiments of the invention, the billing record creation module  will create and transmit a billing record on a periodic basis. Some embodiments of the invention, for example, may create a billing record approximately every 7-14 days. The initial date creation may include a randomly generated offset, to avoid having the licensing server overwhelmed by receiving a large number of billing records at the same time. With some embodiments of the invention, the billing record creation module  may also create and transmit a billing record upon detection of a new network (i.e., when the billing record creation module  creates a new network identifier). This ensures that every new network is accounted for in the billing process as soon as possible.","The billing record may include a variety of information. For example, the billing record will include the unique network identifier for the network or networks used by the computer hosting the software application . With some embodiments of the invention, the billing record may only include the network identifier for the network currently being used by the host computer, thereby providing current activity information. Alternately, the billing record may include a history of networks used by the host computer for the most recent period, each network being identified by its own network identifier.","The billing record may also include an identifier for each computer on network. By employing a technique similar to that used to generate the unique network identifier described, the physical or MAC address of the primary network interface for each computing device in the network  may be used to generate a unique identifier for each computing device. Alternatively, computer identifiers may be generated, for example, by each computer itself using, e.g., the Microsoft Windows operating system GUIDGEN facility or a similar function on an alternate operating system. This allows the licensing service to determine the average size of a particular network, by counting the number of registered computers associated with a small network identifier during the period covered by the billing record. This information also allows the licensing service to determine how often a user changes or roams between networks. The billing record may also include more specific information regarding the host computer, such as the version and current update of its operating system and the version and current update of the browser employed by the host computer to communicate over the network. Thus, if the host computer uses the Microsoft Windows operating system and the Microsoft Internet Explorer browser, the billing record may include data indicating the major and minor version of the Windows operating system, data indicating the major and minor version of the Internet Explorer browser, and the last 2 characters of Service Pack String.","Still further, the billing record may include information relating to the gateway device , such as its make and model and its firmware level or version. The billing record may include the build number or version of the software application , the date and time when the software application  was first installed on the host computing device, and the time and date that the billing record is being sent. The billing record may include information regarding how many port mappings are made by the gateway device (either currently or for a predetermined period of time). From this information, the licensing service can determine how actively the user employs the network.","As previously noted, the usage fees for the software application  may be alternately or additionally based upon the use of a service or access to a location provided by a third party. With these embodiments of the invention, the billing record will alternately or additionally include information relating to the use of the third party's product or service. For example, the billing record may include information indicating the frequency and even date and time that the host computer has used the third party's product or service.","It should be noted that, with various embodiments of the invention, each computing device in the network that is executing a version of the software application  may provide a billing record to the licensing service. This redundancy helps ensure that the use of each network is properly recorded. Moreover, if the licensing fee is associated with the network rather than the host computer, only a single usage fee will be charged for each network since each host computer will independently and consistently create the same network identifier for a single network. Alternatively, the billing service can charge a usage fee, for example, based on the number of host computers connected to a single network. Thus, the usage fee may be one value when five computers are connected to the network and another value when more or less computers are connected to the network. Of course, a combination of these different usage fee criteria may also be employed.","Other Network Maintenance using the Unique Network Identifier","While various embodiments of the invention can be used to ensure that a usage fee is consistently and accurately associated with a network rather than an individual host computer, some embodiments of the invention may also be used to maintain and support a network. As discussed in detail above, the billing record provided to the licensing service may include the vendor, make, model and firmware version of the gateway device . In addition, however, the initial characters of the media access control address (sometimes referred to as the Organization Unit Identifier (OUI)) identify the vendor, make and model of gateway device . This allows the billing module  to identify the manufacturer of the gateway device , the model of the gateway device, and even the production run of the gateway device  using sequential MAC address numbers. Accordingly, various embodiments of the invention may use this information to more quickly and accurately select an appropriate driver DLL for use with the gateway device . In some cases, the MAC address can be used by embodiments of the invention to identify and download the appropriate driver on a real-time basis from a remote location, such as the licensing service. Still further, by using the MAC address to identify the make and model of the gateway devices used by the various copies of the software application , the vendor of the software application  can determine which gateway devices are most important to continue to support.","Further, the identification information in the MAC address can be used to support the operation of the gateway device and\/or the network. Thus, some embodiments of the invention may use the obtained MAC address for the gateway device to determine when the gateway device will not operate as desired, or when the gateway device should have its firmware upgraded or otherwise should receive some type of maintenance. For example, some early, unsophisticated routers will reboot when mapping a new port. Thus, these routers will drop all session information for an existing connection of a software application on a host computer when a second software application on the host computer attempts to map a new port. While this occurrence is not critical for a user running a single network application, it may be very burdensome for a user running multiple network applications as the connections created by the other network applications will be dropped when the new port is mapped on the router.","To identify this problem, various embodiments of the invention may test a new gateway device. More particularly, the software application  will establish a connection to the DNS server specified in the \u201cactive\u201d network adapter associated with the gateway device. Next, the software application  will attempt to have the gateway device map a port while the connection to the DNS server is still active. If the connection through the mapped port is dropped, then the gateway device reboots when a port is mapped and the gateway device therefore is deemed \u201cbad.\u201d","With some embodiments of the invention, the vendor, make, model and firmware version obtained for a gateway device can be used to specifically identify the make and model of a \u201cbad\u201d gateway device. With still other embodiments of the invention, the portion of the MAC address corresponding to the vendor, make, model and firmware version of a gateway device can be used to specifically identify the make and model of a \u201cbad\u201d gateway device. This identification of \u201cbad\u201d and \u201cgood\u201d gateway devices can then be added to a central location, such as the licensing service or a Web service. When an instantiation of the software application  detects the use of a new gateway device, it can first check that central location to determine if the gateway device is flawed. Only if there is no information in the central location will the software application  then need to test the gateway device .","Alternate Operating Environments","It should be appreciated that the various aspects of the invention can alternately or additionally be employed in wide variety of environments. Thus, while some embodiments of the invention were described with respect determining a unique identifier for a network, other embodiments of the invention may be used to generate a unique identifier for any computing device. For example, some embodiments the invention may obtain a physical address from another computing device that is not a gateway device for a network, such as a computer or computing appliance (e.g., a network camera, a VoIP telephone, a digital music server, etc.). These embodiments may then create an identifier based upon the obtained physical address (e.g., such as a media access control (MAC) address) that uniquely identifies the other computing device.","Still further, various embodiments of the invention may be employed to identify a computing device that is not a gateway device, such as a computer or computing appliance (e.g., a network camera, a VoIP telephone, a digital music server, etc.). More particularly, these embodiments of the invention may request identifying information from another computing device. For example, some embodiments of the invention may request an HTTP Response from anther computing device as described above, request a media access control (MAC) from another computing device as described above, or a combination of both. These embodiments of the invention will then compare the obtained identifying information with one or more sets of regular expressions to identify the other computing device. It should also be appreciated that the identity of the other computing device can then be used to, for example, identify (and, if necessary, obtain) a driver or other software application that should be employed with the identified device. The determined identity of another computing device can alternately or additionally be used to track or record usage information (e.g., location, frequency, duration, etc.) for the identified device, or to provide support for the identified device.","While the invention has been described with respect to specific examples including presently preferred modes of carrying out the invention, those skilled in the art will appreciate that there are numerous variations and permutations of the above described systems and techniques that fall within the spirit and scope of the invention as set forth in the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 4-6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 7A-7C"}]},"DETDESC":[{},{}]}
