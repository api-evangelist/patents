---
title: Key-configured topology with connection management
abstract: Systems, methodologies, media, and other embodiments associated with key-configured topology connection management are described. One exemplary system embodiment includes a logic for mapping a resource to a port through which it can be accessed and a logic for determining whether a requestor will be granted a connection to the machine on which the resource resides based, at least in part, on membership in a key-configured topology. Membership in the key-configured topology may be determined by a connection management logic analyzing a key provided by the requestor in a request related to accessing the resource. The key may be internally generated by a key maintenance logic.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08078705&OS=08078705&RS=08078705
owner: Hewlett-Packard Development Company, L.P.
number: 08078705
owner_city: Houston
owner_country: US
publication_date: 20040405
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["A data communications component like a NIC (network interface card) or a remote direct memory access NIC (RNIC) may have limited resources like ports, memory, connections, licenses, processor cycles, and so on. Undesired (e.g., unauthorized) consumption of these limited resources may negatively impact data communication functionality provided by a data communications component. For example, while an RNIC may be designed to support RDMA, if resources that support RDMA are unavailable due to undesired consumption, then the RDMA feature may be unavailable.","RDMA is a NIC feature that lets one computer directly place data into the memory of another computer with minimal CPU (central processing unit) intervention. Rather than a computer's CPU moving data, the CPU may program an RNIC to handle a desired data transfer. The RNIC moves the data and notifies the CPU when the transfer is complete. The CPU is less involved in the data transfer and has more cycles available for other concurrent tasks, thereby improving overall functionality in the RDMA configured computer. However, to benefit from RDMA, an RNIC may require relatively expensive and thus limited high speed internal memory. If limited resources are used up, then the RNIC may not be able to provide the RDMA services that it was designed to provide. While RDMA is described, it is to be appreciated that other data communication and networking functions can be negatively impacted by undesired resource consumption.","In some network protocols (e.g., TCP\/IP (Transmission Control Protocol\/Internet Protocol), UDP (User Datagram Protocol)), a port represents a logical endpoint. A port may be used by a client to specify a specific server program with which it desires to interact or a specific server resource that it wishes to access. For example, a port may be associated with an RDMA service.","To facilitate making connections over a computer network via ports, some ports may have numbers and\/or addresses that are pre-assigned. These types of ports may be called \u201cwell-known ports\u201d and the first actions taken when establishing a connection may involve these \u201cwell-known\u201d ports. One well-known port may be associated with a port mapper that facilitates finding and\/or interacting with an available service. A port mapper may be implemented in software, firmware, hardware, and combinations thereof. A port mapper may map a resource, program, service, and so on to a transport-specific port number that can be made known to a requesting client via mapping data distributed in response to a request for mapping data. This facilitates a client dynamically binding to, using, and\/or communicating with the mapped programs, services, resources, and so on. However, unprotected distribution of mapping data can lead to undesired consumption of limited networking resources.","A requesting client may communicate via a well-known port with a port mapper to request mapping data concerning with which server port a resource is associated. The requesting client may receive the port\/resource mapping data from the port mapper and then request that a connection be established to facilitate accessing the resource by using the provided mapping data. However, not all connections are desirable. Connections consume resources, and a connection may be acquired by an undesirable and\/or mis-appropriating client. Once the connection is established, it may persist until disconnected by the client or until an error occurs. Similarly, a connection may be acquired unwisely or in an untimely manner, which can lead to undesired consumption of limited resources, which can in turn lead to undesired results.","Example systems and methods illustrate key-based connection management for nodes in a key-configured topology. The nodes (e.g., client computers, server computers, networked computers, printers, telephones) may share a common set of group membership privileges in an open network like a TCP\/IP based network. Example systems and methods illustrate establishing connections between the nodes in a manner that facilitates limiting undesired consumption of resources like memory, licenses, connections, processor cycles, and so on. The connections may employ a preferred protocol within a desired (e.g., open) network and exclude other nodes over that preferred protocol on that network.","Some communication protocols may be vulnerable to unauthorized connections (e.g., Denial of Service (DoS) attacks). To reduce this vulnerability, membership in a key-configured topology based on possessing a key generated by a key-configured topology key management service can be implemented for nodes that wish to communicate via the otherwise vulnerable protocol. Communication between nodes within the group may be enabled when the key is exchanged and validated. Nodes that have the key may be allowed access to a protected member node or resource while nodes that do not have the key may be prevented from establishing a connection to a protected node using a certain protocol. Nodes that do not have the internally generated key may be prevented from requesting mapping information, establishing connections, and\/or communicating with nodes that are members of the group using the otherwise vulnerable protocol. However, fallback processing (e.g., processing over a secondary protocol when the desired protocol is not available) may allow an unauthorized node to communicate with a member of the key-configured topology using a different networking protocol. A connection made using the fallback protocol may not provide the same access to a resource that is available via the networking protocol preferred by the group members.","Protection against unauthorized use like that encountered during a DoS attack is one use of key-configured topology connection management. Selectively controlling whether nodes are allowed to communicate via a specific higher level protocol when there is no other physical or logical barrier may be another use. For example, whether a key-configured topology member node may communicate via a specific port and\/or protocol may be controlled based on time-of-day, load, current number of users, maintenance schedules, and the like. Thus, key-configured topology connection management may provide a fine grained control over resources associated with a data communication component like an RNIC. The fine granularity may facilitate, for example, blocking access via a first protocol\/port\/card to a first resource (e.g., database, RDMA memory, RDMA interface) while permitting access via a second protocol\/port\/card to a second resource through fallback processing. Additionally, and\/or alternatively, the fine granularity may facilitate blocking access to the first resource via the first protocol, but may allow gathering information about why the access was blocked via a second protocol. This may be employed, for example, when access is blocked due to load restrictions rather than to the request being denied for an invalid key. By way of illustration, since some resources may be managed on a per RNIC basis, resource conservation techniques may make some resources temporarily unavailable to an otherwise authorized requestor (e.g., requestor with valid key). If information about the reason for the denial is available to the otherwise authorized requester, then that requestor may take actions like trying again later, seeking a connection to a similar resource available via a different RNIC, and so on.","The following includes definitions of selected terms employed herein. The definitions include various examples and\/or forms of components that fall within the scope of a term and that may be used for implementation. The examples are not intended to be limiting. Both singular and plural forms of terms may be within the definitions.","\u201cComputer-readable medium\u201d, as used herein, refers to a storage medium that participates in directly or indirectly providing signals, instructions and\/or data. A computer-readable medium may take forms, including, but not limited to, non-volatile media or volatile media. Non-volatile media may include, for example, optical or magnetic disks and so on. Volatile media may include, for example, optical or magnetic disks, dynamic memory and the like. Common forms of a computer-readable medium include, but are not limited to, a floppy disk, a flexible disk, a hard disk, a magnetic tape, other magnetic medium, a CD-ROM, other optical medium, a RAM, a ROM, an EPROM, a FLASH-EPROM, or other memory chip or card, a memory stick, and other media from which a computer, a processor or other electronic device can read.","\u201cData store\u201d, as used herein, refers to a physical and\/or logical entity that can store data. A data store may be, for example, a database, a table, a file, a list, a queue, a heap, a memory, a register, and so on. A data store may reside in one logical and\/or physical entity and\/or may be distributed between two or more logical and\/or physical entities.","\u201cLogic\u201d, as used herein, includes but is not limited to hardware, firmware, software implemented in a computer-readable storage medium and\/or combinations of each to perform a function(s) or an action(s), and\/or to cause a function or action from another logic, method, and\/or system. For example, based on a desired application or needs, logic may include a software controlled microprocessor, discrete logic like an application specific integrated circuit (ASIC), a programmed logic device, a memory device containing instructions, or the like. Logic may include one or more gates, combinations of gates, or other circuit components. Logic may also be fully embodied as software implemented in a computer-readable storage medium. Where multiple logical logics are described, it may be possible to incorporate the multiple logical logics into one physical logic. Similarly, where a single logical logic is described, it may be possible to distribute that single logical logic between multiple physical logics.","An \u201coperable connection\u201d, or a connection by which entities are \u201coperably connected\u201d, is one in which signals, physical communications, and\/or logical communications may be sent and\/or received. Typically, an operable connection includes a physical interface, an electrical interface, and\/or a data interface, but it is to be noted that an operable connection may include differing combinations of these or other types of connections sufficient to allow operable control. For example, two entities can be operably connected by being able to communicate signals to each other directly or through one or more intermediate entities like a processor, operating system, a logic, software, or other entity. Logical and\/or physical communication channels can be used to create an operable connection.","\u201cSoftware\u201d, as used herein, includes but is not limited to, one or more computer or processor instructions stored as processor executable instructions on a computer-readable storage medium that can be read, interpreted, compiled, and\/or executed and that cause a computer, processor, or other electronic device to perform functions, actions and\/or behave in a desired manner. The instructions may be embodied in various forms like routines, algorithms, modules, methods, threads, and\/or programs including separate applications or code from dynamically linked libraries. Software may also be implemented in a variety of executable and\/or loadable forms including, but not limited to, a stand-alone program, a function call (local and\/or remote), a servelet, an applet, instructions stored in a memory, part of an operating system or other types of executable instructions. It will be appreciated by one of ordinary skill in the art that the form of software may be dependent on, for example, requirements of a desired application, the environment in which it runs, and\/or the desires of a designer\/programmer or the like. It will also be appreciated that computer-readable and\/or executable instructions can be located in one logic and\/or distributed between two or more communicating, co-operating, and\/or parallel processing logics and thus can be loaded and\/or executed in serial, parallel, massively parallel and other manners.","Suitable software for implementing the various components of the example systems and methods described herein include programming languages and tools like Java, Pascal, C#, C++, C, CGI, Perl, SQL, APIs, SDKs, assembly, firmware, microcode, and\/or other languages and tools. Software, whether an entire system or a component of a system, may be embodied as an article of manufacture and maintained or provided as part of a computer-readable medium as defined previously. Another form of the software may include signals that transmit program code of the software to a recipient over a network or other communication medium. Thus, in one example, a computer-readable medium has a form of signals that represent the software\/firmware as it is downloaded from a web server to a user. In another example, the computer-readable medium has a form of the software\/firmware as it is maintained on the web server. Other forms may also be used.","\u201cUser\u201d, as used herein, includes but is not limited to one or more persons, software, computers or other devices, or combinations of these.","Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a memory. These algorithmic descriptions and representations are the means used by those skilled in the art to convey the substance of their work to others. An algorithm is here, and generally, conceived to be a sequence of operations that produce a result. The operations may include physical manipulations of physical quantities. Usually, though not necessarily, the physical quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated in a logic and the like.","It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like. It should be borne in mind, however, that these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise, it is appreciated that throughout the description, terms like processing, computing, calculating, determining, displaying, or the like, refer to actions and processes of a computer system, logic, processor, or similar electronic device that manipulates and transforms data represented as physical (electronic) quantities.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 1","b":["100","100","110","120","130","116","126","136","140","140"]},"Node  includes a resource  and a port . A mapping between the resource  and the port  can be made, for example, by port mapper . Nodes  and  include similar components. Port mapper  may also act as a first line of defense that determines whether to selectively distribute data concerning the mapping between the resource  and the port  based on comparing key  to a key received from a requesting node. For example, if node  makes a request for data concerning the mapping between resources and ports on node , node  will include key  in the request. Then port mapper , and\/or another logic (not illustrated) on node  may examine the copy of key  to determine whether node  and node  belong to a common key-configured topology group. If so, then port mapper  may provide the mapping data and subsequently may allow a connection to be made between node  and node . If not, then node  will not be provided mapping data. However, node  may be able to establish a fallback connection to node . Using the fallback connection, node  may be able to communicate with node , however it may not be able to employ a preferred network protocol available to key-topology configured group members and\/or may not be able to access resource  through port .","Node  illustrates a node with a system configured to facilitate preventing the unauthorized consumption of networking resources like resource , , , and . Node  includes a key management logic  configured to receive and store a key  that is configured to facilitate determining whether a node that attempts to consume a resource like resource  is part of a key-configured topology group that is authorized to consume the network resource . In one example, the port mapper  may include a key management logic configured to establish and store key  that can control whether a connection will be granted to node  and\/or whether access will be granted to resource  via port  using a preferred protocol. In one example, a key management logic is part of the port mapper, as illustrated in node , while in another example, a key management logic  may be a separate logic from mapping logic  as illustrated in node . Node  also includes one or more ports .","Node  also includes a key verification logic  configured to determine whether a node that attempts to acquire information about a network resource like resource  or to establish a connection associated with consuming a network resource like resource  is part of a key-configured topology group that is authorized to consume the network resource . For example, port mapper  may include a key verification logic configured to determine whether a key received in a mapping data and\/or connection request correlates correctly with key  and thus whether a connection to node  will be granted and\/or whether access to resource  through port  via a desired networking protocol will be allowed. In one example, like that illustrated in node , a key verification logic may be a part of port mapper  while in another example, like that illustrated in node , the key verification logic  may be a separate component from mapping logic .","Thus, in one example, nodes like node  and node , as implemented in hardware, firmware, software, and\/or combinations thereof, may include means like key management logic  for providing a key that facilitates determining whether a client node is a member of a key-configured topology group to which a server node belongs, means like key verification logic  for analyzing the key to determine whether a client node that makes a request that will lead to the consumption of a server resource is a member of the key-configured topology group to which the server node belongs and means like key verification logic  for rejecting a request that will lead to the consumption of a server resource if the requesting client node is not a member of the key-configured topology to which the server node belongs, as determined by analyzing the key.","In one example, an interface like a graphical user interface (GUI) may facilitate actions like, specifying group membership parameters, establishing a key, distributing a key, and so on. The GUI may receive, for example, an alpha-numeric passphrase (e.g., password) from which an internal key can be generated. Thus, it is to be appreciated that \u201ckey\u201d, as used herein, refers not to a user-supplied data but rather to a value, byte, bit-code, and\/or other similar computer-readable entity produced by using a user-supplied data (e.g., password) or system supplied data (e.g., random number) as an input to a key-generating logic. The key may then be employed by the nodes in a key-configured topology to perform actions like validating membership in the group, allowing connections to be setup between nodes, and so on. In one example, the key, group memberships, connection control and so on may be applied to individual protocol interfaces, teamed protocol interfaces with single assigned protocol addresses, teamed protocol interfaces with multiple assigned protocol addresses, and so on. While a GUI is described, it is to be appreciated that key management may include interactions with scripting-based systems, policy-based systems, and\/or other systems.","In one example, a node may be a member of multiple key-configured topologies where the topologies are isolated from each other within the node. For example, the node may have multiple keys that provide access to multiple topology groups while not providing for interaction between the topologies. In the example, if a key is deleted at a node, then the existing connections based on that key may be immediately terminated and membership in the topology group(s) may be automatically cancelled. In another example, nodes may be self-aware of their status with respect to membership in a key-configured topology. For example, a node may become aware that it has no key and that it is only able to create fallback connections with certain other nodes. Thus, the key-configured topology may be administered with the knowledge of the nodes being administered.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 2","b":["200","210","220","220","230","210","220","210","230","240","220","250","220","260","210","220","270","220","280","210","220","220","290","210"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 2","FIG. 3"],"b":["300","310","320"]},"At , the client  may make a connection request based on the cached port mapping data. If the client  has a key for establishing its membership in a key-configured topology group to which server  belongs, then the request  may include that key. At , the server  will validate the key, and if the key validates establish a connection at  between the server  and the client . The server  may then provide, at , a connection data to the client  that indicates that the connection was made. By requiring that the key be presented in both a port mapping request as illustrated in  and in a connection request as illustrated in , key-configured topology connection management systems and methods may provide a multi-layered defense against undesired resource consumption. For example, if a server did not require a request connection to include a key, then a client that is spoofed after acquiring port mapping data might be able to acquire resources at the server in an unauthorized manner. In networking terminology, spoofing generally refers to ways that networking components like hardware and software can be fooled. IP spoofing, for example, involves making a message appear as if it came from one IP address when in fact it came from another IP address. Thus, a multi-layered key-configured topology connection management system that requires a key in both port mapping requests and connection requests can mitigate the effects of post-mapping data phase spoofing.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 4","b":["400","400","430","400","410","420","430","440","450","460","470"]},"TCP is generally implemented at the transport layer of a computer networking protocol while IP is generally implemented at the network layer of a computer networking protocol. Thus a TCP layer  and an IP layer  are illustrated in stack . The session layer , at which key-based connection management services may be performed is logically located above the TCP layer  and the IP layer . Connection management services may include key creation, key management, key verification, and the like. Computer networking protocols that are based on TCP\/IP and other similarly well-known, standards-based protocols may be referred to as open networks. While a seven layer protocol is illustrated, it is to be appreciated that protocols with a greater and\/or lesser number of layers may be employed. Similarly, while a protocol that includes TCP\/IP is illustrated, other open networks may be employed.","As described earlier, a client node and a server node may wish to communicate via a desired protocol like that illustrated by stack . To protect against undesired (e.g., unauthorized) resource consumption, the session layer  in a server node may examine incoming port mapping requests and\/or connection requests for a key that establishes a requestor's membership in a key-configured topology group to which the server belongs. In one example, an application layer  may be involved in creating the key(s) and distributing the key(s). For example, a user may enter an alpha-numeric passphrase into an application layer  application. The application may then internally generate a key using, for example, an encryption algorithm, a hashing algorithm, and other key generating algorithms. The application may then distribute the key to the session layer  at the server node and to selected client nodes. In one example the key may be stored in hardware in a client NIC or RNIC when the (R)NIC is manufactured while in another example the key may be dynamically stored in a data store on a client (R)NIC during a dynamic configuration. The keys can control group membership. Group membership may be predicated on factors like nodes sharing a common set of attributes like packet sizes, RDMA transmission sizes, and other attributes that make it likely that two nodes will be able to communicate effectively. Additionally, and\/or alternatively, group membership may be predicated on factors like, nodes being interested in the same type of resource (e.g., data, processor, database), family relationship, and so on.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5","b":["500","500","510","510","540","542","549","530","532","539","500","542","539","545","533","510","533","548","510","533","548","510"]},"The system  may also include a connection management logic  operably connected to the mapping logic . The connection management logic  may control whether the mapping logic  will provide mapping data to a requesting node. Additionally, and\/or alternatively, the connection management logic  may control whether a connection that facilitates a requesting node accessing a resource in the server node via a first networking protocol will be established. In one example, the connection management logic  may control the mapping logic  based, at least in part, on the presence and validity of a key presented to the connection management logic  by the requesting node. The key is analyzed to determine whether the requesting node is a member of a key-configured topology group that includes the server node. In another example, the connection management logic  may exert its control based on factors like, time of day, network traffic, load, and resource availability. For example, while an authorized requesting node may seek access to a resource, two other authorized requesting nodes may already be accessing the resource, and the resource may be constrained by an access limit. Thus, the connection management logic  may control the mapping logic  to block the request, even though the requesting node has a valid key.","The connection management logic  may also facilitate establishing a fallback connection between a requesting node (e.g., client) and a receiving node (e.g., server) according to a second networking protocol. The fallback connection may be established to let the client node communicate with the server node but not using the protocol used by members of the key-configured topology and not to access the resource that can be accessed by members of the key-configured topology. A requesting node may request the fallback connection after the mapping logic  has been controlled to not provide the mapping data to the requesting node. Similarly, a requesting node may request the fallback connection after the mapping logic  has been controlled to prevent the establishment of a connection between the client node and the server node according to the first networking protocol.","The mapping logic  may provide information about and control access to, for example, resources that support RDMA between the first node and the second node. These resources may include, but are not limited to, computer memory, data communication connections, licenses, processor cycles, and so on. The mapping logic  and connection management logic  may be physically located, for example, on an (R)NIC. The connection management logic  may operate at a session layer associated with a networking protocol that members of the key-configured topology employ. The networking protocol may also include a TCP transport layer and an IP network layer.","Example methods may be better appreciated with reference to the flow diagrams of . While for purposes of simplicity of explanation, the illustrated methodologies are shown and described as a series of blocks, it is to be appreciated that the methodologies are not limited by the order of the blocks, as some blocks can occur in different orders and\/or concurrently with other blocks from that shown and described. Moreover, less than all the illustrated blocks may be required to implement an example methodology. Furthermore, additional and\/or alternative methodologies can employ additional, not illustrated blocks.","In the flow diagrams, blocks denote \u201cprocessing blocks\u201d that may be implemented with logic. A flow diagram does not depict syntax for any particular programming language, methodology, or style (e.g., procedural, object-oriented). Rather, a flow diagram illustrates functional information one skilled in the art may employ to develop logic to perform the illustrated processing. It will be appreciated that in some examples, program elements like temporary variables, routine loops, and so on are not shown. It will be further appreciated that electronic and software applications may involve dynamic and flexible processes so that the illustrated blocks can be performed in other sequences that are different from those shown and\/or that blocks may be combined or separated into multiple components. It will be appreciated that the processes may be implemented using various programming approaches like machine language, procedural, object oriented and\/or artificial intelligence techniques.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 6","b":["600","600","600","610"]},"The method  may also include, at , determining whether the request includes a key configured to establish that the client node is a member of a key-configured topology group that includes the server node. If the determination at  is Yes, then method  may proceed to , where it determines whether the key establishes valid membership for the client node in the key-configured topology group. If the determination at  is Yes, then the method  may selectively establish a connection at  as requested between the client node and the server node using the preferred computer networking protocol.","The method  may also include (not illustrated) the server node providing to the client node a communication that confirms that a connection was established between the client node and the server node via the preferred computer networking protocol. While client node and server node are used to describe a requesting node and a request receiving node, it is to be appreciated that a node like a computer may at one time be a logical server and\/or receiver while at another time it may be a logical client and\/or requestor.","While  illustrates various actions occurring in serial, it is to be appreciated that various actions illustrated in  could occur substantially in parallel. By way of illustration, a first process could receive connection requests, a second process could determine the existence and validity of a key in a connection request, and a third process could establish connections. While three processes are described, it is to be appreciated that a greater and\/or lesser number of processes could be employed and that lightweight processes, regular processes, threads, and other approaches could be employed.","In one example, methodologies are implemented as processor executable instructions and\/or operations stored on a computer-readable medium. Thus, in one example, a computer-readable medium may store processor executable instructions operable to have a server node perform a method that includes receiving from a client node, via an open computer networking protocol that includes a TCP transport layer and an IP network layer, a request to establish a connection between the client node and the server node. The desired connection will preferably use the preferred computer networking protocol. The desired connection may facilitate the client node accessing a resource located on an (R)NIC associated with the server node, where the resource supports RDMA between the client node and the server node. The method may also include determining whether the request includes a key configured to establish that the client node is a member of a key-configured topology group that includes the server node and if the key is included, determining whether the key establishes valid membership for the client node in the key-configured topology group. The method may also include selectively establishing the connection between the client node and the server node via the preferred computer networking protocol. While this method is described being stored on a computer-readable medium, it is to be appreciated that other example methods described herein can also be stored on a computer-readable medium.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 7","b":["700","700","705","710","715"]},"At , the method  includes selectively providing mapping data to the second node. The mapping data is selectively provided based on the presence and validity of the key in the first request as determined at  and . In one example, the method  may terminate after . In another example, the method  may also include, at , receiving from the second node a second request to establish a connection between the first node and the second node via a first networking protocol. In one example, the first networking protocol includes a TCP transport layer and an IP network layer.","The requested connection may facilitate accessing a resource on the first node. In one example the resource may be located on an (R)NIC associated with the first node and\/or may support RDMA between the first node and the second node. At , a determination is made concerning whether the connection request contains a key, and, at , whether that key establishes a valid membership for the second node in a key-configured topology group in which the first node is a member. While  and  are illustrated as separate actions, and while  and  are illustrated as separate actions, it is to be appreciated that in some examples these actions may be combined. The method  may also include, at , making a determination whether a resource is available. For example, the resource may already be being accessed by another member of a key-configured topology group and thus be temporarily unavailable.","The method  may therefore, at , selectively establish the connection based on the presence and validity of the key in the second request. Whether the connection is established may also be conditioned on the availability of the resource. In one example, the method  may include, at , providing a notification to the second node that the connection was established.","The method  may also include an action (not illustrated) of receiving from the second node a third request to establish a fallback connection between the first node and the second node. The third request may not include the key included in the second request and thus a connection granted in response to the third request may be made through a second protocol, different from the protocol available to members of the key-configured topology group to which the first node belongs. Furthermore the connection granted in response to the third request may not provide access to the resource available to members of the key-configured topology group to which the first node belongs.","While  illustrates various actions occurring in serial, it is to be appreciated that various actions illustrated in  could occur substantially in parallel. By way of illustration, a first process could receive mapping data requests, a second process could determine the presence and validity of a key in the port mapping data request, a third process could receive connection requests, a fourth process could determine the presence and validity of a key in the connection request, and a fifth process could selectively establish connections. While five processes are described, it is to be appreciated that a greater and\/or lesser number of processes could be employed and that lightweight processes, regular processes, threads, and other approaches could be employed.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 8","b":["800","800","810"]},"At , a determination is made concerning whether a response to the request for mapping data was received. If the determination at  is Yes, then at  a second request is made to the server node to establish a connection to a resource through the port via a first computer networking protocol. But if the determination at  is No, then at  a third request is made to the server node to establish a fallback connection to the server node via a second computer networking protocol. The second computer networking protocol is different from the first computer networking protocol and may not allow access to the resource that is available through the first computer networking protocol. While  illustrates various actions occurring in serial, it is to be appreciated that various actions illustrated in  could occur substantially in parallel.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 9","FIG. 9"],"b":["900","910","910","920","910","920"]},"Upon determining that mapping information is available, the client method  may, at , send a connection request to the server. The connection request will contain a key that the client hopes will establish its membership in a key-configured topology group to which the server belongs. The client may include the key because it is self-aware of the administration of the key-configured topology.","At , a determination is made concerning whether a connection has been made in response to the connection request sent at . While timing protocol actions are not illustrated, it is to be appreciated that various timing actions, interrupt actions, retry actions, and so on may be associated with waiting a period of time between action  and determination . If the determination at  is Yes, then at  the client may access a resource available to members of the key-configured topology group using a protocol available to members of the key-configured topology group. But if the determination at  is No, then at , the method  may fall back to a separate path and attempt to establish a different type of connection with the server. Thus, at , a connection request that does not include the key-configured topology membership key may be sent to the server. Once again, the client may not include the key because it is self-aware of the administration of the key-configured topology. At , a determination may be made concerning whether a fallback connection was established. If the determination is No, then the method  may enter a failure state while if the determination is Yes, then at , the client may interact with a second resource via a second protocol.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 10","b":["1000","1002","1004","1010","1008","1000","1030","1030","1030","1030","1030","1030","1000","1030","1018","1020"]},"The processor  can be a variety of various processors including dual microprocessor and other multi-processor architectures. The memory  can include volatile memory and\/or non-volatile memory. The non-volatile memory can include, but is not limited to, ROM, PROM, EPROM, EEPROM, and the like. Volatile memory can include, for example, RAM, synchronous RAM (SRAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), and direct RAM bus RAM (DRRAM).","A disk  may be operably connected to the computer  via, for example, an input\/output interface (e.g., card, device)  and an input\/output port . The disk  can include, but is not limited to, devices like a magnetic disk drive, a solid state disk drive, a floppy disk drive, a tape drive, a Zip drive, a flash memory card, and\/or a memory stick. Furthermore, the disk  can include optical drives like a CD-ROM, a CD recordable drive (CD-R drive), a CD rewriteable drive (CD-RW drive), and\/or a digital video ROM drive (DVD ROM). The memory  can store processes  and\/or data , for example. The disk  and\/or memory  can store an operating system that controls and allocates resources of the computer .","The bus  can be a single internal bus interconnect architecture and\/or other bus or mesh architectures. While a single bus is illustrated, it is to be appreciated that computer  may communicate with various devices, logics, and peripherals using other busses that are not illustrated (e.g., PCIE, SATA, Infiniband, 13104, USB, Ethernet). The bus  can be of a variety of types including, but not limited to, a memory bus or memory controller, a peripheral bus or external bus, a crossbar switch, and\/or a local bus. The local bus can be of varieties including, but not limited to, an industrial standard architecture (ISA) bus, a microchannel architecture (MSA) bus, an extended ISA (EISA) bus, a peripheral component interconnect (PCI) bus, a universal serial (USB) bus, and a small computer systems interface (SCSI) bus.","The computer  may interact with input\/output devices via i\/o interfaces  and input\/output ports . Input\/output devices can include, but are not limited to, a keyboard, a microphone, a pointing and selection device, cameras, video cards, displays, disk , network devices , and the like. The input\/output ports  can include but are not limited to, serial ports, parallel ports, and USB ports.","The computer  can operate in a network environment and thus may be connected to network devices  via the i\/o interfaces , and\/or the i\/o ports . Through the network devices , the computer  may interact with a network. Through the network, the computer  may be logically connected to remote computers. The networks with which the computer  may interact include, but are not limited to, a local area network (LAN), a wide area network (WAN), and other networks. The network devices  can connect to LAN technologies including, but not limited to, fiber distributed data interface (FDDI), copper distributed data interface (CDDI), Ethernet (IEEE 802.3), token ring (IEEE 802.5), wireless computer communication (IEEE 802.11), Bluetooth (IEEE 802.15.1), and the like. Similarly, the network devices  can connect to WAN technologies including, but not limited to, point to point links, circuit switching networks like integrated services digital networks (ISDN), packet switching networks, and digital subscriber lines (DSL).","Referring now to , an application programming interface (API)  is illustrated providing access to a connection management system . The API  can be employed, for example, by a programmer  and\/or a process  to gain access to processing performed by the connection management system . The processing may include, for example, key management, key verification, responding to port mapping requests, and establishing connections between nodes in a key-configured topology. A programmer  can write a program to access the system  (e.g., invoke its operation, monitor its operation, control its operation) where writing the program is facilitated by the presence of the API . Rather than programmer  having to understand the internals of the system , the programmer  merely has to learn the interface to the system . This facilitates encapsulating the functionality of the system  while exposing that functionality.","Similarly, the API  can be employed to provide data values to the connection management system  and\/or to retrieve data values from the system . For example, a process  that supplies an internally generated key can provide the key to the system  via the API  by, for example, using a call provided in the API . Thus, in one example of the API , a set of application programming interfaces can be stored on a computer-readable medium. The interfaces can be employed by a programmer, computer component, logic, and so on to gain access to a connection management system . The interfaces can include, but are not limited to, a first interface  that communicates a key data, where the key data facilitates determining whether a client node is a member of a key-configured topology to which a server node belongs. The interfaces can also include a second interface  that communicates a key verification data, where the key verification data may report on a key management and\/or verification function performed by the connection management system  on a key communicated via key data interface .","While example systems, methods, and so on have been illustrated by describing examples, and while the examples have been described in considerable detail, it is not the intention of the applicants to restrict or in any way limit the scope of the appended claims to such detail. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the systems, methods, and so on described herein. Additional advantages and modifications will readily appear to those skilled in the art. Therefore, the invention is not limited to the specific details, the representative apparatus, and illustrative examples shown and described. Thus, this application is intended to embrace alterations, modifications, and variations that fall within the scope of the appended claims. Furthermore, the preceding description is not meant to limit the scope of the invention. Rather, the scope of the invention is to be determined by the appended claims and their equivalents.","To the extent that the term \u201cincludes\u201d or \u201cincluding\u201d is employed in the detailed description or the claims, it is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as that term is interpreted when employed as a transitional word in a claim. Furthermore, to the extent that the term \u201cor\u201d is employed in the detailed description or claims (e.g., A or B) it is intended to mean \u201cA or B or both\u201d. When the applicants intend to indicate \u201conly A or B but not both\u201d then the term \u201conly A or B but not both\u201d will be employed. Thus, use of the term \u201cor\u201d herein is the inclusive, and not the exclusive use. See, Bryan A. Garner, A Dictionary of Modern Legal Usage 624 (2d. Ed. 1995)."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of the specification, illustrate various example systems, methods, and so on that illustrate various example embodiments of aspects of the invention. It will be appreciated that the illustrated element boundaries (e.g., boxes, groups of boxes, or other shapes) in the figures represent one example of the boundaries. One of ordinary skill in the art will appreciate that one element may be designed as multiple elements or that multiple elements may be designed as one element. An element shown as an internal component of another element may be implemented as an external component and vice versa. Furthermore, elements may not be drawn to scale.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
