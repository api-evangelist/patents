---
title: Protocol method for provisioning services
abstract: An invention is disclosed for a computer protocol that facilitates provisioning services to client devices. The computer protocol includes discovery transactions that allow a client device to retrieve information regarding services available to the client device from a provisioning server. A service comprises a plurality of content files capable of being installed on the client device. The computer protocol also includes subscription transactions that allow the client device to manage content in service directories. A service directory comprises a plurality of services. Further included in the computer protocol are delivery transactions that allow the client device to downloading of data related to services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07617324&OS=07617324&RS=07617324
owner: Sun Microsystems, Inc
number: 07617324
owner_city: Santa Clara
owner_country: US
publication_date: 20030620
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application is related to U.S patent application Ser. No. 10\/600,119, filed Jun. 20, 2003, now U.S. Pat. No. 7,444,386, and entitled \u201cApplication Programming Interface for Provisioning Services,\u201d which is incorporated herein by reference.","1. Field of the Invention","This invention relates generally to computer networking, and more particularly to a protocol for provisioning services using limited defined atomic units.","2. Description of the Related Art","Current mobile computing environments allow computer users great variety in digital services, which can vary from device to device depending on the type of client device used and the needs of the user. Typically, mobile client devices obtain digital services via a provisioning server as illustrated in .",{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","102","104","102","102","102","102","102"],"i":["a","c ","a","c ","a ","b","c. "]},"The provisioning server  is a network resource from which the client devices -can obtain access to new digital services and update existing digital services. As illustrated in , one approach to implementing the provisioning server  is an adapter\/application model. In this approach, the provisioning server  includes a plurality of provisioning adapter modules -, which facilitate communication between the client devices -and a provisioning application . The provisioning application  generally is a generic and more device independent application that includes the business logic for the provisioning service.","Each provisioning adapter -is designed to communicate with a specific type of client device, and \u201ctranslate\u201d the client device communication into a form understandable by the provisioning application . For example, provisioning adapter can be designed to communicate with the telematics client device . In this case, the provisioning adapter receives commands from the telematics client device and translates the received commands into commands acceptable by the provisioning application . Similarly, the provisioning adapter receives and translates commands from the mobile phone client device , and the provisioning adapter receives and translates commands from the desktop computer client device ","As can appreciated, each provisioning adapter -also facilitates command and content delivery from the provisioning application  to each client device -. That is, the provisioning adapter receives commands from the provisioning application  and translates the received commands into commands acceptable by the telematics client device . Similarly, the provisioning adapter receives and translates commands from provisioning application  and delivers them to the mobile phone client device , and the provisioning adapter receives and translates commands for delivery to the desktop computer client device ","Generally, the provision server  keeps track of users using a database , which stores user information, service content, and other data usable by the provisioning application . In this manner, different services can be provided to different users based on their user information. For example, a particular user can pay for a service and a record of payment can be stored in the user information for that particular user. Thereafter, the user can access the services and other content bought.","Unfortunately, prior art provisioning servers  do not have a standard mechanism for communication between the client devices -and the provisioning applications . Hence, different adapters -can require different interface programming. Moreover, each adapter -can implement commands to the provisioning application  in different manners. Thus, a prior art provisioning application  executed on a prior art provisioning server  generally is designed to operate with specific provisioning adapters -that are designed along with the provisioning application . As a result, new provisioning adapters generally cannot be added to the provisioning server  without altering the provisioning application . That is, the provisioning application  generally must be altered if a further provisioning adapter is added at a later date to facilitate communication with another client device.","In view of the foregoing, there is a need for a method for provisioning services that provides a standard communication mechanism for provisioning applications and client devices. The method should provide provisioning services using limited defined atomic units that can be utilized for a wide variety of applications and client devices.","Broadly speaking, the present invention fills these needs by providing a standard mechanism for communication between client devices and a provisioning server. In one embodiment, a computer protocol for provisioning services is disclosed. The computer protocol includes discovery transactions that allow a client device to retrieve information regarding services available to the client device from a provisioning server. As will be described in greater detail below, a service comprises a plurality of content files capable of being installed on the client device. The computer protocol also includes subscription transactions that allow the client device to manage content in service directories. A service directory comprises a plurality of services, as will be discussed in greater detail subsequently. Further included in the computer protocol are delivery transactions that allow the client device to downloading of data related to services. In one aspect, the discovery transactions can include a service discovery transaction that allows the client device to obtain information regarding a particular service. The discovery transactions can also include a service directory discovery transaction that allows the client device to obtain information regarding a particular service directory.","A method for provisioning services between a client device and a provisioning server is disclosed in an additional embodiment of the present invention. The method includes providing discovery transactions that allow the client device to retrieve information regarding services available to the client device from a provisioning server. In addition, subscription transactions are afforded that allow the client device to manage content in service directories, and delivery transactions are provided that allow the client device to downloading of data related to services. In one aspect, the subscription transactions can include a service subscription transaction that allows a service to be added to a service directory, and an unsubscribe transaction that allows a service to be removed from a service directory.","A system for provisioning services is disclosed in a further embodiment of the present invention. The system includes a provisioning server and a client device, which is in communication with the provisioning server via a provisioning protocol. As above, the provisioning protocol includes discovery transactions that allow a client device to retrieve information regarding services available to the client device from a provisioning server. The provisioning protocol also includes subscription transactions that allow the client device to manage content in service directories, and delivery transactions that allow the client device to downloading of data related to services. In one aspect, the delivery transactions can include an update transaction that allows the client device to obtain a provisioning update comprising a list of services that should be installed on the client device. The delivery transactions can also include a notification transaction that allows the provisioning server to request the client device to perform an update transaction. Further, the delivery transactions can include a delivery transaction that allows the client device to download data related to a service. Other aspects and advantages of the invention will become apparent from the following detailed description, taken in conjunction with the accompanying drawings, illustrating by way of example the principles of the invention.","An invention is disclosed for a protocol for provisioning services. Generally, embodiments of the present invention provide a protocol for provisioning services that provides a standard mechanism for communication between client devices and a provisioning server. In the following description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without some or all of these specific details. In other instances, well known process steps have not been described in detail in order not to unnecessarily obscure the present invention.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 1","FIG. 2"],"b":["200","200","202","202","204","206","202","202","202","202","202","204","202","202","204","202","202","202","202"],"i":["a","c ","a","c ","a ","b","c","a","c ","a","c ","a","c "]},"Each client device -provides an application execution environment. For example, an application execution environment can include a microprocessor, a Connected Limited Device Configuration (CLDC) compliant Java environment, a Mobile Information Device Profile (MIDP), and an Application Management System (ASM). Another exemplary application execution environment can include a microprocessor, an operating system, a Connected Device Configuration (CDC) compliant Java environment with the personal foundation profiles, and an Open Service Gateway Initiative (OSGi) compliant application management system. In one embodiment, as part of the client devices -application management system, each client device -executes a Provisioning Manager (PM). One logical part of the PM is a Client Provisioning Protocol Manager (CPPM), which is responsible for communication with a Provisioning Server Protocol Manager (PSPM), which is executed on the provisioning server .","Similar to above, the provisioning server  is a network resource from which the client devices -can obtain access to new digital services and update existing digital services. The provisioning server  is a highly available network resource that can be embodied on a single computer or on a plurality of computers. For example, to increase availability, scalability, and manageability, the provisioning server  can be embodied on a collection of tightly coupled computers. However, from the point of view of the client devices -, the provisioning server  generally appears as a single logical entity.","As will be described in greater detail subsequently, the provisioning protocol  of the embodiments of the present invention provides a plurality of transactions that can be utilized to implement deployment specific provisioning models of various levels of complexity, and which satisfies the needs of different underlying business models. In one embodiment, the provisioning protocol  provides discovery, subscription, and delivery functionality for the client devices -. Broadly speaking, the provisioning protocol  provides discovery functionality allowing a client device -to discover services and contents that are available to the particular client device. Subscription functionality is provided by allowing a client device -to manage the content of services directories, described in greater detail below. The provisioning protocol's  delivery functionality allows a client device -to receive content that has become available to the client device or remove content that should be removed from the device. In addition, delivery functionality allows a client device -to download available content.","As mentioned above, the provisioning server  provides services and content to client devices -. In the following description, a service is defined as a collection of one or more downloadable content files that are installed on a client device -in order to provide the user of the client device with a particular functionality. Services can also be utilized to customize the user experience of existing functionality present on the client device. A content file can be an executable file, media files, property files, archive files, or any other file that may be required to provide a particular functionality on a client device. For example, exemplary content files can be executable Java byte code files, sound files, a video files, and image files. Services provide a product-level view of content that is usable by client device users, while individual content files represent a resource-level view that may or may not be exposed to the client device user.","In addition to individual services, embodiments of the present invention also process service directories. A service directory is an identifiable collection of services. A service directory also can be associated with a collection of nested service directories. In use, service directories can be defined a plurality of administrative purposes. For example, a service directory can be utilized for presentation and navigation of service categories, and tracking of subscriptions and service deployment. Generally, the provisioning server  manages the content of a service directory. For example, the provisioning server  can manipulate a service directory as a result of a dynamic calculation or using a database representation.","A bundle is defined as a physical downloadable component. Bundles are parts of services, and are generally used during delivery. When a service is being delivered to a client device, all the required bundles corresponding to that service are downloaded to the client device. In one embodiment, a bundle includes two parts, a descriptor file and an actual content file. Generally these parts may be downloaded separately, however, the descriptive information for each bundle in a service can also be aggregated in the service description (service object). A bundle can also include a URL property, which is utilized for downloading.","In the following description, Extensible Markup Language (XML) constructions will be utilized to describe the provisioning protocol of the embodiments of the present invention. However, it should be noted that the provision provisioning protocol of the embodiments of the present invention can be implemented using different encoding techniques, as will be apparent to those skilled in the art after a careful reading of the present disclosure. XML is an open standard for describing data and is often used for defining data elements on a Web page and business-to-business documents. XML uses a similar tag structure as HTML. However, whereas HTML defines how elements are displayed, XML defines what those elements contain. Further, HTML uses predefined tags, while XML allows tags to be defined by the developer of the page. Thus, virtually any data items, such as test suites and individual tests, can be identified, allowing XML documents to function like database records.","The human-readable XML tags provide a simple data format, which is defined in a document type definition (DTD) format that defines content type as well as name. Thus, unlike HTML, which uses a rather loose coding style and which is tolerant of coding errors, XML pages are \u201cwell formed,\u201d which means they comply with rigid rules.","An XML document primarily comprises a strictly nested hierarchy of elements with a single root. Elements can contain character data, child elements, or a mixture of both. In addition, they can have attributes. Child character data and child elements are strictly ordered, while attributes are not. The names of the elements and attributes and their order in the hierarchy (among other things) form the XML markup language used by the document, also known as the \u201cvalidity\u201d of the document. As mentioned above, this language can be defined by the document author or it can be inferred from the document's structure.","In the following description the tag and attribute names are chosen to better explain the reason for them rather than proposing a particular naming schema. Further, nesting that is natural to XML is not imposed for implementation, but assists in teaching how data belongs to any other data, and increases the readability of the examples.","In one embodiment, certain information is transmitted to identify the client device and unify the protocol. In addition, information is transmitted to identify the session, protocol version, and protocol type. Hence, one embodiment of the present invention utilizes a nested list of elements the client device -will transmit to the provisioning server  within each request, as illustrated in Table 1. In the following description, quoted fields represent values of corresponding attributes that are implementation dependent.",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<provisioning version = \u201cprotocol version\u201d>"]},{"entry":[{},"\u2003<client id = \u201cclient id\u201d \/>"]},{"entry":[{},"\u2003<user id = \u201cuser id\u201d password = \u201cuser password\u201d>"]},{"entry":[{},"\u2003<session id = \u201csession id\u201d>"]},{"entry":[{},"\u2003\u2003<!-- contents of the session -->"]},{"entry":[{},"\u2003<\/session>"]},{"entry":[{},"<\/provisioning>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Since the provisioning server  generally does not need to specify which client device the reply or request is sent to, the provisioning server  can omit the <client> tag. In its place, the provisioning server  can return a generic <status> tag that indicates the success of the operation, as illustrated below in Table 2.",{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<provisioning version = \u201cprotocol version\u201d>"]},{"entry":[{},"\u2003<session id = \u201csession id\u201d>"]},{"entry":[{},"\u2003<status code = \u201cimplementation specific status code\u201d\/>"]},{"entry":[{},"\u2003\u2003<!-- contents of the session -->"]},{"entry":[{},"\u2003<\/session>"]},{"entry":[{},"<\/provisioning>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 3","FIG. 3"],"b":["206","206","300","302","304","206"]},"The discovery transactions  are used by a client device to retrieve information about services available to the client device, based on available contextual information. It should be noted that discovery transactions  can be utilized to retrieve information regarding services available to client devices that are different from the client device used to perform discovery. Subscription transactions  are utilized to manage the content of service directories. The name subscription refers to the fact that within the confines of most provisioning models these transactions are most commonly used to manipulate the content of a service directory modeling the set of services that have been subscribed to a particular client device. Delivery transactions  are used to discover content files that need to be either installed or removed from a client device. In addition, delivery transactions  can also be used to obtain download identifiers for content files. In one embodiment, the above transactions are initiated by a client device and comprise one request and one reply. Typically, a transaction is committed by the client device upon receipt of the reply and by the provisioning server upon sending the reply.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 4","b":["300","300","400","402"]},"The service directory discovery transaction  facilitates service directory discovery requests. In use, a client device makes a call to the provisioning server requesting information about a service directory matching particular search criteria. In reply, the provisioning application provides information about a matching service directory (or an error) to the requesting client device. The service discovery transaction  facilitates service discovery requests. In use, a client device makes a call to the provisioning server requesting information about a service matching particular search criteria. In reply, the provisioning server provides information about a matching service (or an error) to the requesting client device.","In one embodiment, the client device can query about dynamic service directories, that is, service directories whose contents are only known at the time of processing the discovery request. Each directory or service request returns a list of information the provisioning server wants the client device to know about the requested service or service directory. In addition, embodiments of the present invention allow the client device to restrict the granularity of the reply, for example, to save data bandwidth or to strictly define the list of properties the client device needs to discover. Table 3 below illustrates an exemplary discover request, in accordance with an embodiment of the present invention.",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<discover type = \u201cservice or directory\u201d object ="},{"entry":"\u201cservice or directory id or query\u201d>"},{"entry":"\u2003<granularity = \u201cdefine list of properties or \u2018custom\u2019\u201d >"},{"entry":"\u2003\u2003<!-- the following \u2018property\u2019 tags can be utilized when"},{"entry":"\u2003\u2003\u2003granularity is set to custom."},{"entry":"\u2003\u2003-->"},{"entry":"\u2003\u2003<property name = \u201cthe name of property the client device wants\u201d\/>"},{"entry":"\u2003\u2003<property name = \u201c ... \u201d\/>"},{"entry":"\u2003\u2003<restriction rule = \u201cimplementation specific restriction\u201d\/>"},{"entry":"\u2003\u2003<restriction rule = \u201c ... \u201d\/>"},{"entry":"\u2003<\/granularity>"},{"entry":"<\/discover>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The exemplary request illustrated in Table 3 is nested into the session block described above with respect to Table 1. In one embodiment, one of the granularity restrictions or requirements can be nesting restrictions if the service directory is discovered defining whether or not nesting is requested and what nesting level is desired.","Unlike the request illustrated in Table 3, the reply from the provisioning server varies depending on whether the request is to discover a service or a service directory. Table 4 below illustrates the reply for a service discovery request.",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<discover type = \u201cservice\u201d object = \u201cservice id or query\u201d>"]},{"entry":[{},"\u2003<service id = \u201cunique identifier of service\u201d>"]},{"entry":[{},"\u2003\u2003<name = \u201cservice name\u201d\/>"]},{"entry":[{},"\u2003\u2003<version = \u201cservice version\u201d\/>"]},{"entry":[{},"\u2003\u2003<properties>"]},{"entry":[{},"\u2003\u2003\u2003<key = \u201cproperty name\/key\u201d value = \u201cproperty value\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<!-- more key\/value pairs can follow -->"]},{"entry":[{},"\u2003\u2003<\/properties>"]},{"entry":[{},"\u2003<\/service>"]},{"entry":[{},"<\/discover>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the example of Table 4, the defined properties for the service are \u201cname\u201d and \u201cversion.\u201d Other properties are listed under the <properties> tag. The requested granularity, described above, defines the selection of properties returned. It should be noted that the object id returned in the discovery reply can be different from the object id sent in the request. Since the session id can be utilized to identify which request the reply corresponds to, the object ids do not need to match. Hence, different object ids can be used to indicate a redirection has occurred on the server for the previous reply. Table 5 below illustrates the reply for a service directory discovery request.",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 5"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<discover type = \u201cdirectory\u201d object = \u201cdirectory id or query\u201d>"]},{"entry":[{},"\u2003<directory id = \u201cunique identifier of service directory\u201d>"]},{"entry":[{},"\u2003\u2003<name = \u201cservice name\u201d\/>"]},{"entry":[{},"\u2003\u2003<properties>"]},{"entry":[{},"\u2003\u2003\u2003<key = \u201cproperty name\/key\u201d value = \u201cproperty value\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<!-- more key\/value pairs can follow -->"]},{"entry":[{},"\u2003\u2003<\/properties>"]},{"entry":[{},"\u2003\u2003<services>"]},{"entry":[{},"\u2003\u2003\u2003<!-- <service> tag series as defined in service discovery -->"]},{"entry":[{},"\u2003\u2003<\/services>"]},{"entry":[{},"\u2003\u2003<directories>"]},{"entry":[{},"\u2003\u2003\u2003<!-- <directory> tag series as defined herein -->"]},{"entry":[{},"\u2003\u2003<\/directories>"]},{"entry":[{},"\u2003<\/directory>"]},{"entry":[{},"<\/discover>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 5","b":["302","302","302","300","500","502"]},"The service subscription transaction  facilitates service subscription requests. In use, a client device makes a call to the provisioning server requesting that one or more services be added to an identified service directory. In reply, the provisioning server adds the service or services to the identified service directory and returns a success or failure of the subscription operation to the requesting client device. In general, the request to subscribe includes a client device reference to the client device whose subscription will be modified, and a list of services that are to be added to the client device subscription.","The unsubscribe transaction  facilitates service unsubscribe requests. In use, a client device makes a call to the provisioning server requesting that one or more services be removed from an identified service directory. In reply, the provisioning server removes the service or services from the identified service directory and returns a success or failure of the unsubscribe operation to the requesting client device. In general, the request to unsubscribe includes a client device reference to the client device whose subscription will be modified, and a list of services that are to be removed from the client device subscription. Table 6 below illustrates an exemplary subscription request and an exemplary unsubscribe request.",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 6"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<subscribe>"]},{"entry":[{},"\u2003<services>"]},{"entry":[{},"\u2003\u2003<service id = \u201ca service id\u201d\/>"]},{"entry":[{},"\u2003\u2003<service id = \u201ca service id\u201d\/>"]},{"entry":[{},"\u2003\u2003<!--additional service ids can follow -->"]},{"entry":[{},"\u2003<\/services>"]},{"entry":[{},"<subscribe>"]},{"entry":[{},"<unsubscribe>"]},{"entry":[{},"\u2003<services>"]},{"entry":[{},"\u2003\u2003<service id = \u201ca service id\u201d\/>"]},{"entry":[{},"\u2003\u2003<service id = \u201ca service id\u201d\/>"]},{"entry":[{},"\u2003\u2003<!--additional service ids can follow -->"]},{"entry":[{},"\u2003<\/services>"]},{"entry":[{},"<unsubscribe>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 6","b":["304","304","600","602","604"]},"The notification transaction  is utilized by the provisioning server to initiate a provisioning cycle. More particularly, the notification transaction  allows the provisioning server to send a notification to a client device. The notification causes the client device to execute an update transaction . In response, the client device may ignore the notification, or proceed by executing the update transaction .","The update transaction  is utilized to calculate the provisioning update for a client device. As mentioned above, a provisioning update is a list of services that a client device should have installed. The provisioning server calculates the provisioning update using the subscribed and deployed special service directories for the corresponding client device.","An update request can be as follows: <update\/>. However, in certain cases the client-server implementation may implement synchronization. For example, synchronization may be required when the client device view of the delivered services differs with the provisioning server's view of the delivered services. Thus, a synchronization id is utilized to verify both the client device and provisioning server are in sync. For example, the synchronization id may carry the id of an update session that the client device has committed. In one embodiment, the client device provides a list of delivered services to the provisioning server. In this manner, the provisioning server can examine the list and update the provisioning server's database accordingly. By reporting the empty state, a client device may force the provisioning server to report the complete set of services that may be installed on the client device. When a synchronization id is not utilized the client device can report its state every time the client device makes an update request. Table 7 below illustrates an update request when the synchronization id is not utilized.",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 7"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<update synchronization = \u201csynchronization key\u201d>"]},{"entry":[{},"\u2003<!-- List of services client device possesses,"]},{"entry":[{},"\u2003if reporting currently delivered -->"]},{"entry":[{},"\u2003<services>"]},{"entry":[{},"\u2003\u2003<service id = \u201ca service id\u201d\/>"]},{"entry":[{},"\u2003\u2003<service id = \u201ca service id\u201d\/>"]},{"entry":[{},"\u2003\u2003<!--additional service ids can follow -->"]},{"entry":[{},"\u2003<\/services>"]},{"entry":[{},"<\/update>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In case synchronization is being used, the status code returned by the provisioning server can contain a special value that indicates the client device should re-transmit the client device's list of services to complete the request update. Table 8 below illustrates an exemplary update reply when the synchronization is satisfied or not used.",{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 8"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<update>"},{"entry":"\u2003<install>"},{"entry":"\u2003\u2003<services>"},{"entry":"\u2003\u2003\u2003<service id = \u201ca service id to install\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<bundle location = \u201cbundle location to install\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<bundle location = \u201cbundle location to install\u201d\/>"},{"entry":"\u2003\u2003\u2003<\/service>"},{"entry":"\u2003\u2003\u2003<service id = \u201ca service id to install\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<bundle location = \u201cbundle location to install\u201d\/>"},{"entry":"\u2003\u2003\u2003<\/service>"},{"entry":"\u2003\u2003\u2003<!--additional service ids and bundle locations can follow -->"},{"entry":"\u2003\u2003<\/services>"},{"entry":"\u2003<\/install>"},{"entry":"\u2003<uninstall>"},{"entry":"\u2003\u2003<services>"},{"entry":"\u2003\u2003\u2003<service id = \u201ca service id to uninstall\u201d>"},{"entry":"\u2003\u2003\u2003<service id = \u201ca service id to uninstall\u201d>"},{"entry":"\u2003\u2003\u2003<!--additional service ids to uninstall can follow -->"},{"entry":"\u2003\u2003<\/services>"},{"entry":"\u2003<\/uninstall>"},{"entry":"<\/update>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The delivery transaction  is utilized to download bundles to the client device. In use, the client device requests a particular bundle using a bundle identifier obtained using the update transaction . Optionally, the bundle identifier can be obtained using a discovery transaction, depending on the particular implementation. In reply, the provisioning server provides the requested bundle to the client device.","Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Accordingly, the present embodiments are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope and equivalents of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention, together with further advantages thereof, may best be understood by reference to the following description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
